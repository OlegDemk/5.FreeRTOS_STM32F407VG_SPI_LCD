
5.FreeRTOS_STM32F407VG_SPI_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019224  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001304  080193b8  080193b8  000293b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a6bc  0801a6bc  00030370  2**0
                  CONTENTS
  4 .ARM          00000008  0801a6bc  0801a6bc  0002a6bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a6c4  0801a6c4  00030370  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a6c4  0801a6c4  0002a6c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a6c8  0801a6c8  0002a6c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000370  20000000  0801a6cc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030370  2**0
                  CONTENTS
 10 .bss          00016960  20000370  20000370  00030370  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20016cd0  20016cd0  00030370  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030370  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003dd09  00000000  00000000  000303a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000079f7  00000000  00000000  0006e0a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002760  00000000  00000000  00075aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002490  00000000  00000000  00078200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cbb5  00000000  00000000  0007a690  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003812a  00000000  00000000  000a7245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7746  00000000  00000000  000df36f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001c6ab5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b6f8  00000000  00000000  001c6b08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000370 	.word	0x20000370
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801939c 	.word	0x0801939c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000374 	.word	0x20000374
 80001cc:	0801939c 	.word	0x0801939c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8000f48:	2305      	movs	r3, #5
 8000f4a:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f001 f9ef 	bl	8002334 <null_ptr_check>
 8000f56:	4603      	mov	r3, r0
 8000f58:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8000f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d133      	bne.n	8000fca <bme280_init+0x8a>
		while (try_count) {
 8000f62:	e028      	b.n	8000fb6 <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000f64:	f107 010d 	add.w	r1, r7, #13
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	20d0      	movs	r0, #208	; 0xd0
 8000f6e:	f000 f832 	bl	8000fd6 <bme280_get_regs>
 8000f72:	4603      	mov	r3, r0
 8000f74:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8000f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d114      	bne.n	8000fa8 <bme280_init+0x68>
 8000f7e:	7b7b      	ldrb	r3, [r7, #13]
 8000f80:	2b60      	cmp	r3, #96	; 0x60
 8000f82:	d111      	bne.n	8000fa8 <bme280_init+0x68>
				dev->chip_id = chip_id;
 8000f84:	7b7a      	ldrb	r2, [r7, #13]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f000 f976 	bl	800127c <bme280_soft_reset>
 8000f90:	4603      	mov	r3, r0
 8000f92:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8000f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d110      	bne.n	8000fbe <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f001 f83f 	bl	8002020 <get_calib_data>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8000fa6:	e00a      	b.n	8000fbe <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	2001      	movs	r0, #1
 8000fae:	4798      	blx	r3
			--try_count;
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8000fb6:	7bbb      	ldrb	r3, [r7, #14]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1d3      	bne.n	8000f64 <bme280_init+0x24>
 8000fbc:	e000      	b.n	8000fc0 <bme280_init+0x80>
				break;
 8000fbe:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8000fc0:	7bbb      	ldrb	r3, [r7, #14]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8000fc6:	23fe      	movs	r3, #254	; 0xfe
 8000fc8:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8000fd6:	b590      	push	{r4, r7, lr}
 8000fd8:	b087      	sub	sp, #28
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f001 f9a3 	bl	8002334 <null_ptr_check>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8000ff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d117      	bne.n	800102a <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	789b      	ldrb	r3, [r3, #2]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d003      	beq.n	800100a <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001008:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685c      	ldr	r4, [r3, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	7858      	ldrb	r0, [r3, #1]
 8001012:	89bb      	ldrh	r3, [r7, #12]
 8001014:	7bf9      	ldrb	r1, [r7, #15]
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	47a0      	blx	r4
 800101a:	4603      	mov	r3, r0
 800101c:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 800101e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 8001026:	23fc      	movs	r3, #252	; 0xfc
 8001028:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800102a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800102e:	4618      	mov	r0, r3
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd90      	pop	{r4, r7, pc}

08001036 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8001036:	b590      	push	{r4, r7, lr}
 8001038:	b08d      	sub	sp, #52	; 0x34
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	4613      	mov	r3, r2
 8001044:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b0a      	cmp	r3, #10
 800104a:	d901      	bls.n	8001050 <bme280_set_regs+0x1a>
		len = 10;
 800104c:	230a      	movs	r3, #10
 800104e:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001050:	6838      	ldr	r0, [r7, #0]
 8001052:	f001 f96f 	bl	8002334 <null_ptr_check>
 8001056:	4603      	mov	r3, r0
 8001058:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 800105c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001060:	2b00      	cmp	r3, #0
 8001062:	d154      	bne.n	800110e <bme280_set_regs+0xd8>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d051      	beq.n	800110e <bme280_set_regs+0xd8>
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d04e      	beq.n	800110e <bme280_set_regs+0xd8>
		if (len != 0) {
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d047      	beq.n	8001106 <bme280_set_regs+0xd0>
			temp_buff[0] = reg_data[0];
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	789b      	ldrb	r3, [r3, #2]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d01a      	beq.n	80010ba <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001084:	2300      	movs	r3, #0
 8001086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800108a:	e011      	b.n	80010b0 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800108c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	4413      	add	r3, r2
 8001094:	781a      	ldrb	r2, [r3, #0]
 8001096:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800109a:	68f9      	ldr	r1, [r7, #12]
 800109c:	440b      	add	r3, r1
 800109e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010aa:	3301      	adds	r3, #1
 80010ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80010b0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d3e8      	bcc.n	800108c <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d90b      	bls.n	80010d8 <bme280_set_regs+0xa2>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f107 0114 	add.w	r1, r7, #20
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f000 ffee 	bl	80020aa <interleave_reg_addr>
				temp_len = len * 2;
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010d6:	e001      	b.n	80010dc <bme280_set_regs+0xa6>
			} else {
				temp_len = len;
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	689c      	ldr	r4, [r3, #8]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	7858      	ldrb	r0, [r3, #1]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	7819      	ldrb	r1, [r3, #0]
 80010e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80010ea:	f107 0214 	add.w	r2, r7, #20
 80010ee:	47a0      	blx	r4
 80010f0:	4603      	mov	r3, r0
 80010f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 80010f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00b      	beq.n	8001116 <bme280_set_regs+0xe0>
				rslt = BME280_E_COMM_FAIL;
 80010fe:	23fc      	movs	r3, #252	; 0xfc
 8001100:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8001104:	e007      	b.n	8001116 <bme280_set_regs+0xe0>
		} else {
			rslt = BME280_E_INVALID_LEN;
 8001106:	23fd      	movs	r3, #253	; 0xfd
 8001108:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 800110c:	e003      	b.n	8001116 <bme280_set_regs+0xe0>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800110e:	23ff      	movs	r3, #255	; 0xff
 8001110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001114:	e000      	b.n	8001118 <bme280_set_regs+0xe2>
		if (len != 0) {
 8001116:	bf00      	nop
	}


	return rslt;
 8001118:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800111c:	4618      	mov	r0, r3
 800111e:	3734      	adds	r7, #52	; 0x34
 8001120:	46bd      	mov	sp, r7
 8001122:	bd90      	pop	{r4, r7, pc}

08001124 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001130:	6838      	ldr	r0, [r7, #0]
 8001132:	f001 f8ff 	bl	8002334 <null_ptr_check>
 8001136:	4603      	mov	r3, r0
 8001138:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d13f      	bne.n	80011c2 <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8001142:	f107 030e 	add.w	r3, r7, #14
 8001146:	6839      	ldr	r1, [r7, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f874 	bl	8001236 <bme280_get_sensor_mode>
 800114e:	4603      	mov	r3, r0
 8001150:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8001152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d107      	bne.n	800116a <bme280_set_sensor_settings+0x46>
 800115a:	7bbb      	ldrb	r3, [r7, #14]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d004      	beq.n	800116a <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8001160:	6838      	ldr	r0, [r7, #0]
 8001162:	f000 fb4e 	bl	8001802 <put_device_to_sleep>
 8001166:	4603      	mov	r3, r0
 8001168:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d127      	bne.n	80011c2 <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	4619      	mov	r1, r3
 8001176:	2007      	movs	r0, #7
 8001178:	f001 f8c0 	bl	80022fc <are_settings_changed>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f000 f98a 	bl	80014a6 <set_osr_settings>
 8001192:	4603      	mov	r3, r0
 8001194:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d111      	bne.n	80011c2 <bme280_set_sensor_settings+0x9e>
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	4619      	mov	r1, r3
 80011a2:	2018      	movs	r0, #24
 80011a4:	f001 f8aa 	bl	80022fc <are_settings_changed>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d009      	beq.n	80011c2 <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fa11 	bl	80015e0 <set_filter_standby_settings>
 80011be:	4603      	mov	r3, r0
 80011c0:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 80011c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	6039      	str	r1, [r7, #0]
 80011d8:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011da:	6838      	ldr	r0, [r7, #0]
 80011dc:	f001 f8aa 	bl	8002334 <null_ptr_check>
 80011e0:	4603      	mov	r3, r0
 80011e2:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80011e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d11e      	bne.n	800122a <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80011ec:	f107 030e 	add.w	r3, r7, #14
 80011f0:	6839      	ldr	r1, [r7, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f81f 	bl	8001236 <bme280_get_sensor_mode>
 80011f8:	4603      	mov	r3, r0
 80011fa:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80011fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d107      	bne.n	8001214 <bme280_set_sensor_mode+0x46>
 8001204:	7bbb      	ldrb	r3, [r7, #14]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d004      	beq.n	8001214 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 800120a:	6838      	ldr	r0, [r7, #0]
 800120c:	f000 faf9 	bl	8001802 <put_device_to_sleep>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8001214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d106      	bne.n	800122a <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	6839      	ldr	r1, [r7, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 fabb 	bl	800179c <write_power_mode>
 8001226:	4603      	mov	r3, r0
 8001228:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b084      	sub	sp, #16
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001240:	6838      	ldr	r0, [r7, #0]
 8001242:	f001 f877 	bl	8002334 <null_ptr_check>
 8001246:	4603      	mov	r3, r0
 8001248:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 800124a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10e      	bne.n	8001270 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	2201      	movs	r2, #1
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	20f4      	movs	r0, #244	; 0xf4
 800125a:	f7ff febc 	bl	8000fd6 <bme280_get_regs>
 800125e:	4603      	mov	r3, r0
 8001260:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	b2da      	uxtb	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8001270:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8001284:	23e0      	movs	r3, #224	; 0xe0
 8001286:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8001288:	23b6      	movs	r3, #182	; 0xb6
 800128a:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f001 f851 	bl	8002334 <null_ptr_check>
 8001292:	4603      	mov	r3, r0
 8001294:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10d      	bne.n	80012ba <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800129e:	f107 010d 	add.w	r1, r7, #13
 80012a2:	f107 000e 	add.w	r0, r7, #14
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f7ff fec4 	bl	8001036 <bme280_set_regs>
 80012ae:	4603      	mov	r3, r0
 80012b0:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	2002      	movs	r0, #2
 80012b8:	4798      	blx	r3
	}

	return rslt;
 80012ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b08a      	sub	sp, #40	; 0x28
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f001 f823 	bl	8002334 <null_ptr_check>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 80012f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d124      	bne.n	8001346 <bme280_get_sensor_data+0x80>
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d021      	beq.n	8001346 <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8001302:	f107 011c 	add.w	r1, r7, #28
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2208      	movs	r2, #8
 800130a:	20f7      	movs	r0, #247	; 0xf7
 800130c:	f7ff fe63 	bl	8000fd6 <bme280_get_regs>
 8001310:	4603      	mov	r3, r0
 8001312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 8001316:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800131a:	2b00      	cmp	r3, #0
 800131c:	d116      	bne.n	800134c <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 800131e:	f107 0210 	add.w	r2, r7, #16
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f000 f815 	bl	8001358 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3310      	adds	r3, #16
 8001332:	f107 0110 	add.w	r1, r7, #16
 8001336:	7bf8      	ldrb	r0, [r7, #15]
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	f000 f853 	bl	80013e4 <bme280_compensate_data>
 800133e:	4603      	mov	r3, r0
 8001340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8001344:	e002      	b.n	800134c <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001346:	23ff      	movs	r3, #255	; 0xff
 8001348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 800134c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001350:	4618      	mov	r0, r3
 8001352:	3728      	adds	r7, #40	; 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8001358:	b480      	push	{r7}
 800135a:	b087      	sub	sp, #28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	031b      	lsls	r3, r3, #12
 8001368:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3301      	adds	r3, #1
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	011b      	lsls	r3, r3, #4
 8001372:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3302      	adds	r3, #2
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	b2db      	uxtb	r3, r3
 800137e:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	431a      	orrs	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	431a      	orrs	r2, r3
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3303      	adds	r3, #3
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	031b      	lsls	r3, r3, #12
 8001396:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3304      	adds	r3, #4
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	011b      	lsls	r3, r3, #4
 80013a0:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3305      	adds	r3, #5
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	091b      	lsrs	r3, r3, #4
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	431a      	orrs	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	431a      	orrs	r2, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3306      	adds	r3, #6
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3307      	adds	r3, #7
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	431a      	orrs	r2, r3
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	609a      	str	r2, [r3, #8]
}
 80013d8:	bf00      	nop
 80013da:	371c      	adds	r7, #28
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	4603      	mov	r3, r0
 80013f2:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d04b      	beq.n	8001496 <bme280_compensate_data+0xb2>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d048      	beq.n	8001496 <bme280_compensate_data+0xb2>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d045      	beq.n	8001496 <bme280_compensate_data+0xb2>
		/* Initialize to zero */
		comp_data->temperature = 0;
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	e9c1 2302 	strd	r2, r3, [r1, #8]
		comp_data->pressure = 0;
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	e9c1 2300 	strd	r2, r3, [r1]
		comp_data->humidity = 0;
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	e9c1 2304 	strd	r2, r3, [r1, #16]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00a      	beq.n	8001454 <bme280_compensate_data+0x70>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 800143e:	6839      	ldr	r1, [r7, #0]
 8001440:	68b8      	ldr	r0, [r7, #8]
 8001442:	f000 fa2b 	bl	800189c <compensate_temperature>
 8001446:	eeb0 7a40 	vmov.f32	s14, s0
 800144a:	eef0 7a60 	vmov.f32	s15, s1
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	ed83 7b02 	vstr	d7, [r3, #8]
		}
		if (sensor_comp & BME280_PRESS) {
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00a      	beq.n	8001474 <bme280_compensate_data+0x90>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 800145e:	6839      	ldr	r1, [r7, #0]
 8001460:	68b8      	ldr	r0, [r7, #8]
 8001462:	f000 faed 	bl	8001a40 <compensate_pressure>
 8001466:	eeb0 7a40 	vmov.f32	s14, s0
 800146a:	eef0 7a60 	vmov.f32	s15, s1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	ed83 7b00 	vstr	d7, [r3]
		}
		if (sensor_comp & BME280_HUM) {
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00d      	beq.n	800149a <bme280_compensate_data+0xb6>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 800147e:	6839      	ldr	r1, [r7, #0]
 8001480:	68b8      	ldr	r0, [r7, #8]
 8001482:	f000 fcad 	bl	8001de0 <compensate_humidity>
 8001486:	eeb0 7a40 	vmov.f32	s14, s0
 800148a:	eef0 7a60 	vmov.f32	s15, s1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	ed83 7b04 	vstr	d7, [r3, #16]
		if (sensor_comp & BME280_HUM) {
 8001494:	e001      	b.n	800149a <bme280_compensate_data+0xb6>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001496:	23ff      	movs	r3, #255	; 0xff
 8001498:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800149a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80014b4:	2301      	movs	r3, #1
 80014b6:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d005      	beq.n	80014ce <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	68b8      	ldr	r0, [r7, #8]
 80014c6:	f000 f815 	bl	80014f4 <set_osr_humidity_settings>
 80014ca:	4603      	mov	r3, r0
 80014cc:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d007      	beq.n	80014e8 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f842 	bl	8001568 <set_osr_press_temp_settings>
 80014e4:	4603      	mov	r3, r0
 80014e6:	75fb      	strb	r3, [r7, #23]

	return rslt;
 80014e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80014fe:	23f2      	movs	r3, #242	; 0xf2
 8001500:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	789b      	ldrb	r3, [r3, #2]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	b2db      	uxtb	r3, r3
 800150c:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800150e:	f107 010e 	add.w	r1, r7, #14
 8001512:	f107 000c 	add.w	r0, r7, #12
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	2201      	movs	r2, #1
 800151a:	f7ff fd8c 	bl	8001036 <bme280_set_regs>
 800151e:	4603      	mov	r3, r0
 8001520:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d118      	bne.n	800155c <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 800152a:	23f4      	movs	r3, #244	; 0xf4
 800152c:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 800152e:	7b38      	ldrb	r0, [r7, #12]
 8001530:	f107 010d 	add.w	r1, r7, #13
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	2201      	movs	r2, #1
 8001538:	f7ff fd4d 	bl	8000fd6 <bme280_get_regs>
 800153c:	4603      	mov	r3, r0
 800153e:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8001540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d109      	bne.n	800155c <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001548:	f107 010d 	add.w	r1, r7, #13
 800154c:	f107 000c 	add.w	r0, r7, #12
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	2201      	movs	r2, #1
 8001554:	f7ff fd6f 	bl	8001036 <bme280_set_regs>
 8001558:	4603      	mov	r3, r0
 800155a:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800155c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8001576:	23f4      	movs	r3, #244	; 0xf4
 8001578:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800157a:	7db8      	ldrb	r0, [r7, #22]
 800157c:	f107 0115 	add.w	r1, r7, #21
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f7ff fd27 	bl	8000fd6 <bme280_get_regs>
 8001588:	4603      	mov	r3, r0
 800158a:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 800158c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d11f      	bne.n	80015d4 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 800159e:	f107 0315 	add.w	r3, r7, #21
 80015a2:	68b9      	ldr	r1, [r7, #8]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 f88e 	bl	80016c6 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 80015b4:	f107 0315 	add.w	r3, r7, #21
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f8a0 	bl	8001700 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80015c0:	f107 0115 	add.w	r1, r7, #21
 80015c4:	f107 0016 	add.w	r0, r7, #22
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f7ff fd33 	bl	8001036 <bme280_set_regs>
 80015d0:	4603      	mov	r3, r0
 80015d2:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80015d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 80015ee:	23f5      	movs	r3, #245	; 0xf5
 80015f0:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80015f2:	7db8      	ldrb	r0, [r7, #22]
 80015f4:	f107 0115 	add.w	r1, r7, #21
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f7ff fceb 	bl	8000fd6 <bme280_get_regs>
 8001600:	4603      	mov	r3, r0
 8001602:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8001604:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d11f      	bne.n	800164c <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 8001616:	f107 0315 	add.w	r3, r7, #21
 800161a:	68b9      	ldr	r1, [r7, #8]
 800161c:	4618      	mov	r0, r3
 800161e:	f000 f81b 	bl	8001658 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 800162c:	f107 0315 	add.w	r3, r7, #21
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f82d 	bl	8001692 <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001638:	f107 0115 	add.w	r1, r7, #21
 800163c:	f107 0016 	add.w	r0, r7, #22
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f7ff fcf7 	bl	8001036 <bme280_set_regs>
 8001648:	4603      	mov	r3, r0
 800164a:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800164c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b25b      	sxtb	r3, r3
 8001668:	f023 031c 	bic.w	r3, r3, #28
 800166c:	b25a      	sxtb	r2, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	78db      	ldrb	r3, [r3, #3]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	b25b      	sxtb	r3, r3
 8001676:	f003 031c 	and.w	r3, r3, #28
 800167a:	b25b      	sxtb	r3, r3
 800167c:	4313      	orrs	r3, r2
 800167e:	b25b      	sxtb	r3, r3
 8001680:	b2da      	uxtb	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	701a      	strb	r2, [r3, #0]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	b25b      	sxtb	r3, r3
 80016a2:	f003 031f 	and.w	r3, r3, #31
 80016a6:	b25a      	sxtb	r2, r3
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	791b      	ldrb	r3, [r3, #4]
 80016ac:	015b      	lsls	r3, r3, #5
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	701a      	strb	r2, [r3, #0]
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b25b      	sxtb	r3, r3
 80016d6:	f023 031c 	bic.w	r3, r3, #28
 80016da:	b25a      	sxtb	r2, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	b25b      	sxtb	r3, r3
 80016e4:	f003 031c 	and.w	r3, r3, #28
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b25b      	sxtb	r3, r3
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	701a      	strb	r2, [r3, #0]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	b25b      	sxtb	r3, r3
 8001710:	f003 031f 	and.w	r3, r3, #31
 8001714:	b25a      	sxtb	r2, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	785b      	ldrb	r3, [r3, #1]
 800171a:	015b      	lsls	r3, r3, #5
 800171c:	b25b      	sxtb	r3, r3
 800171e:	4313      	orrs	r3, r2
 8001720:	b25b      	sxtb	r3, r3
 8001722:	b2da      	uxtb	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	701a      	strb	r2, [r3, #0]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	b2da      	uxtb	r2, r3
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3302      	adds	r3, #2
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	109b      	asrs	r3, r3, #2
 8001754:	b2db      	uxtb	r3, r3
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	b2da      	uxtb	r2, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3302      	adds	r3, #2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	b2da      	uxtb	r2, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3303      	adds	r3, #3
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	109b      	asrs	r3, r3, #2
 8001776:	b2db      	uxtb	r3, r3
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	b2da      	uxtb	r2, r3
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3303      	adds	r3, #3
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	095b      	lsrs	r3, r3, #5
 800178a:	b2da      	uxtb	r2, r3
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	711a      	strb	r2, [r3, #4]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80017a8:	23f4      	movs	r3, #244	; 0xf4
 80017aa:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80017ac:	7bb8      	ldrb	r0, [r7, #14]
 80017ae:	f107 010d 	add.w	r1, r7, #13
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f7ff fc0e 	bl	8000fd6 <bme280_get_regs>
 80017ba:	4603      	mov	r3, r0
 80017bc:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 80017be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d117      	bne.n	80017f6 <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80017c6:	7b7b      	ldrb	r3, [r7, #13]
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	f023 0303 	bic.w	r3, r3, #3
 80017ce:	b25a      	sxtb	r2, r3
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	b25b      	sxtb	r3, r3
 80017da:	4313      	orrs	r3, r2
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80017e2:	f107 010d 	add.w	r1, r7, #13
 80017e6:	f107 000e 	add.w	r0, r7, #14
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f7ff fc22 	bl	8001036 <bme280_set_regs>
 80017f2:	4603      	mov	r3, r0
 80017f4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80017f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 800180a:	f107 0110 	add.w	r1, r7, #16
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2204      	movs	r2, #4
 8001812:	20f2      	movs	r0, #242	; 0xf2
 8001814:	f7ff fbdf 	bl	8000fd6 <bme280_get_regs>
 8001818:	4603      	mov	r3, r0
 800181a:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 800181c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d118      	bne.n	8001856 <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 8001824:	f107 0208 	add.w	r2, r7, #8
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	4611      	mov	r1, r2
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff80 	bl	8001734 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff fd21 	bl	800127c <bme280_soft_reset>
 800183a:	4603      	mov	r3, r0
 800183c:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 800183e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d107      	bne.n	8001856 <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	f000 f808 	bl	8001862 <reload_device_settings>
 8001852:	4603      	mov	r3, r0
 8001854:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001856:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b084      	sub	sp, #16
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	201f      	movs	r0, #31
 8001872:	f7ff fe18 	bl	80014a6 <set_osr_settings>
 8001876:	4603      	mov	r3, r0
 8001878:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d106      	bne.n	8001890 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	201f      	movs	r0, #31
 8001888:	f7ff feaa 	bl	80015e0 <set_filter_standby_settings>
 800188c:	4603      	mov	r3, r0
 800188e:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8001890:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 800189c:	b5b0      	push	{r4, r5, r7, lr}
 800189e:	b08c      	sub	sp, #48	; 0x30
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double temperature;
	double temperature_min = -40;
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	4b5f      	ldr	r3, [pc, #380]	; (8001a28 <compensate_temperature+0x18c>)
 80018ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temperature_max = 85;
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	4b5d      	ldr	r3, [pc, #372]	; (8001a2c <compensate_temperature+0x190>)
 80018b6:	e9c7 2306 	strd	r2, r3, [r7, #24]

	var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fe20 	bl	8000504 <__aeabi_ui2d>
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	4b59      	ldr	r3, [pc, #356]	; (8001a30 <compensate_temperature+0x194>)
 80018ca:	f7fe ffbf 	bl	800084c <__aeabi_ddiv>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4614      	mov	r4, r2
 80018d4:	461d      	mov	r5, r3
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fe12 	bl	8000504 <__aeabi_ui2d>
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	4b53      	ldr	r3, [pc, #332]	; (8001a34 <compensate_temperature+0x198>)
 80018e6:	f7fe ffb1 	bl	800084c <__aeabi_ddiv>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4620      	mov	r0, r4
 80018f0:	4629      	mov	r1, r5
 80018f2:	f7fe fcc9 	bl	8000288 <__aeabi_dsub>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var1 = var1 * ((double)calib_data->dig_T2);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fe0d 	bl	8000524 <__aeabi_i2d>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001912:	f7fe fe71 	bl	80005f8 <__aeabi_dmul>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fdee 	bl	8000504 <__aeabi_ui2d>
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001930:	f7fe ff8c 	bl	800084c <__aeabi_ddiv>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4614      	mov	r4, r2
 800193a:	461d      	mov	r5, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fddf 	bl	8000504 <__aeabi_ui2d>
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <compensate_temperature+0x19c>)
 800194c:	f7fe ff7e 	bl	800084c <__aeabi_ddiv>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4620      	mov	r0, r4
 8001956:	4629      	mov	r1, r5
 8001958:	f7fe fc96 	bl	8000288 <__aeabi_dsub>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 8001964:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001968:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800196c:	f7fe fe44 	bl	80005f8 <__aeabi_dmul>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4614      	mov	r4, r2
 8001976:	461d      	mov	r5, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fdd0 	bl	8000524 <__aeabi_i2d>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4620      	mov	r0, r4
 800198a:	4629      	mov	r1, r5
 800198c:	f7fe fe34 	bl	80005f8 <__aeabi_dmul>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	e9c7 2302 	strd	r2, r3, [r7, #8]
	calib_data->t_fine = (int32_t)(var1 + var2);
 8001998:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800199c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019a0:	f7fe fc74 	bl	800028c <__adddf3>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f7ff f8d4 	bl	8000b58 <__aeabi_d2iz>
 80019b0:	4602      	mov	r2, r0
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (var1 + var2) / 5120.0;
 80019b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019be:	f7fe fc65 	bl	800028c <__adddf3>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <compensate_temperature+0x1a0>)
 80019d0:	f7fe ff3c 	bl	800084c <__aeabi_ddiv>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (temperature < temperature_min)
 80019dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019e4:	f7ff f87a 	bl	8000adc <__aeabi_dcmplt>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d004      	beq.n	80019f8 <compensate_temperature+0x15c>
		temperature = temperature_min;
 80019ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80019f6:	e00c      	b.n	8001a12 <compensate_temperature+0x176>
	else if (temperature > temperature_max)
 80019f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a00:	f7ff f88a 	bl	8000b18 <__aeabi_dcmpgt>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <compensate_temperature+0x176>
		temperature = temperature_max;
 8001a0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a0e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	return temperature;
 8001a12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a16:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a1a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a1e:	eef0 0a67 	vmov.f32	s1, s15
 8001a22:	3730      	adds	r7, #48	; 0x30
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bdb0      	pop	{r4, r5, r7, pc}
 8001a28:	c0440000 	.word	0xc0440000
 8001a2c:	40554000 	.word	0x40554000
 8001a30:	40d00000 	.word	0x40d00000
 8001a34:	40900000 	.word	0x40900000
 8001a38:	40c00000 	.word	0x40c00000
 8001a3c:	40b40000 	.word	0x40b40000

08001a40 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b08e      	sub	sp, #56	; 0x38
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double var3;
	double pressure;
	double pressure_min = 30000.0;
 8001a4a:	a3d9      	add	r3, pc, #868	; (adr r3, 8001db0 <compensate_pressure+0x370>)
 8001a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a50:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double pressure_max = 110000.0;
 8001a54:	a3d8      	add	r3, pc, #864	; (adr r3, 8001db8 <compensate_pressure+0x378>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	e9c7 2308 	strd	r2, r3, [r7, #32]

	var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fd5e 	bl	8000524 <__aeabi_i2d>
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a70:	f7fe feec 	bl	800084c <__aeabi_ddiv>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	4bc1      	ldr	r3, [pc, #772]	; (8001d88 <compensate_pressure+0x348>)
 8001a82:	f7fe fc01 	bl	8000288 <__aeabi_dsub>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 8001a8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a96:	f7fe fdaf 	bl	80005f8 <__aeabi_dmul>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4614      	mov	r4, r2
 8001aa0:	461d      	mov	r5, r3
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fd3b 	bl	8000524 <__aeabi_i2d>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	f7fe fd9f 	bl	80005f8 <__aeabi_dmul>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	4bb1      	ldr	r3, [pc, #708]	; (8001d8c <compensate_pressure+0x34c>)
 8001ac8:	f7fe fec0 	bl	800084c <__aeabi_ddiv>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fd22 	bl	8000524 <__aeabi_i2d>
 8001ae0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ae4:	f7fe fd88 	bl	80005f8 <__aeabi_dmul>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4610      	mov	r0, r2
 8001aee:	4619      	mov	r1, r3
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	f7fe fbca 	bl	800028c <__adddf3>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b00:	f7fe fbc4 	bl	800028c <__adddf3>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	4b9f      	ldr	r3, [pc, #636]	; (8001d90 <compensate_pressure+0x350>)
 8001b12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b16:	f7fe fe99 	bl	800084c <__aeabi_ddiv>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4614      	mov	r4, r2
 8001b20:	461d      	mov	r5, r3
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fcfb 	bl	8000524 <__aeabi_i2d>
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	4b98      	ldr	r3, [pc, #608]	; (8001d94 <compensate_pressure+0x354>)
 8001b34:	f7fe fd60 	bl	80005f8 <__aeabi_dmul>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	4629      	mov	r1, r5
 8001b40:	f7fe fba4 	bl	800028c <__adddf3>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fce6 	bl	8000524 <__aeabi_i2d>
 8001b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b5c:	f7fe fd4c 	bl	80005f8 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b6c:	f7fe fd44 	bl	80005f8 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	4b86      	ldr	r3, [pc, #536]	; (8001d98 <compensate_pressure+0x358>)
 8001b7e:	f7fe fe65 	bl	800084c <__aeabi_ddiv>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fcc7 	bl	8000524 <__aeabi_i2d>
 8001b96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b9a:	f7fe fd2d 	bl	80005f8 <__aeabi_dmul>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001baa:	f7fe fb6f 	bl	800028c <__adddf3>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	4b77      	ldr	r3, [pc, #476]	; (8001d98 <compensate_pressure+0x358>)
 8001bbc:	f7fe fe46 	bl	800084c <__aeabi_ddiv>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	4b6f      	ldr	r3, [pc, #444]	; (8001d8c <compensate_pressure+0x34c>)
 8001bce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bd2:	f7fe fe3b 	bl	800084c <__aeabi_ddiv>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	4b6e      	ldr	r3, [pc, #440]	; (8001d9c <compensate_pressure+0x35c>)
 8001be4:	f7fe fb52 	bl	800028c <__adddf3>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4614      	mov	r4, r2
 8001bee:	461d      	mov	r5, r3
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	88db      	ldrh	r3, [r3, #6]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fc85 	bl	8000504 <__aeabi_ui2d>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4620      	mov	r0, r4
 8001c00:	4629      	mov	r1, r5
 8001c02:	f7fe fcf9 	bl	80005f8 <__aeabi_dmul>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	/* avoid exception caused by division by zero */
	if (var1) {
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c1a:	f7fe ff55 	bl	8000ac8 <__aeabi_dcmpeq>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f040 80cd 	bne.w	8001dc0 <compensate_pressure+0x380>
		pressure = 1048576.0 - (double) uncomp_data->pressure;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fc6a 	bl	8000504 <__aeabi_ui2d>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	f04f 0000 	mov.w	r0, #0
 8001c38:	4959      	ldr	r1, [pc, #356]	; (8001da0 <compensate_pressure+0x360>)
 8001c3a:	f7fe fb25 	bl	8000288 <__aeabi_dsub>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	4b56      	ldr	r3, [pc, #344]	; (8001da4 <compensate_pressure+0x364>)
 8001c4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c50:	f7fe fdfc 	bl	800084c <__aeabi_ddiv>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c5c:	f7fe fb14 	bl	8000288 <__aeabi_dsub>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	a345      	add	r3, pc, #276	; (adr r3, 8001d80 <compensate_pressure+0x340>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	f7fe fcc3 	bl	80005f8 <__aeabi_dmul>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c7e:	f7fe fde5 	bl	800084c <__aeabi_ddiv>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fc47 	bl	8000524 <__aeabi_i2d>
 8001c96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c9a:	f7fe fcad 	bl	80005f8 <__aeabi_dmul>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001caa:	f7fe fca5 	bl	80005f8 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	4b3b      	ldr	r3, [pc, #236]	; (8001da8 <compensate_pressure+0x368>)
 8001cbc:	f7fe fdc6 	bl	800084c <__aeabi_ddiv>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fc28 	bl	8000524 <__aeabi_i2d>
 8001cd4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cd8:	f7fe fc8e 	bl	80005f8 <__aeabi_dmul>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <compensate_pressure+0x34c>)
 8001cea:	f7fe fdaf 	bl	800084c <__aeabi_ddiv>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0;
 8001cf6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cfa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cfe:	f7fe fac5 	bl	800028c <__adddf3>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4614      	mov	r4, r2
 8001d08:	461d      	mov	r5, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fc07 	bl	8000524 <__aeabi_i2d>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	4629      	mov	r1, r5
 8001d1e:	f7fe fab5 	bl	800028c <__adddf3>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4610      	mov	r0, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <compensate_pressure+0x36c>)
 8001d30:	f7fe fd8c 	bl	800084c <__aeabi_ddiv>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d3c:	f7fe faa6 	bl	800028c <__adddf3>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		if (pressure < pressure_min)
 8001d48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d4c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d50:	f7fe fec4 	bl	8000adc <__aeabi_dcmplt>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d004      	beq.n	8001d64 <compensate_pressure+0x324>
			pressure = pressure_min;
 8001d5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d5e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001d62:	e031      	b.n	8001dc8 <compensate_pressure+0x388>
		else if (pressure > pressure_max)
 8001d64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d68:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d6c:	f7fe fed4 	bl	8000b18 <__aeabi_dcmpgt>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d028      	beq.n	8001dc8 <compensate_pressure+0x388>
			pressure = pressure_max;
 8001d76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d7a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001d7e:	e023      	b.n	8001dc8 <compensate_pressure+0x388>
 8001d80:	00000000 	.word	0x00000000
 8001d84:	40b86a00 	.word	0x40b86a00
 8001d88:	40ef4000 	.word	0x40ef4000
 8001d8c:	40e00000 	.word	0x40e00000
 8001d90:	40100000 	.word	0x40100000
 8001d94:	40f00000 	.word	0x40f00000
 8001d98:	41200000 	.word	0x41200000
 8001d9c:	3ff00000 	.word	0x3ff00000
 8001da0:	41300000 	.word	0x41300000
 8001da4:	40b00000 	.word	0x40b00000
 8001da8:	41e00000 	.word	0x41e00000
 8001dac:	40300000 	.word	0x40300000
 8001db0:	00000000 	.word	0x00000000
 8001db4:	40dd4c00 	.word	0x40dd4c00
 8001db8:	00000000 	.word	0x00000000
 8001dbc:	40fadb00 	.word	0x40fadb00
	} else { /* Invalid case */
		pressure = pressure_min;
 8001dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dc4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	return pressure;
 8001dc8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001dcc:	ec43 2b17 	vmov	d7, r2, r3
}
 8001dd0:	eeb0 0a47 	vmov.f32	s0, s14
 8001dd4:	eef0 0a67 	vmov.f32	s1, s15
 8001dd8:	3738      	adds	r7, #56	; 0x38
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dde:	bf00      	nop

08001de0 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001de0:	b5b0      	push	{r4, r5, r7, lr}
 8001de2:	b094      	sub	sp, #80	; 0x50
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
	double humidity;
	double humidity_min = 0.0;
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double humidity_max = 100.0;
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	4b81      	ldr	r3, [pc, #516]	; (8002000 <compensate_humidity+0x220>)
 8001dfc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double var3;
	double var4;
	double var5;
	double var6;

	var1 = ((double)calib_data->t_fine) - 76800.0;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fb8d 	bl	8000524 <__aeabi_i2d>
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	4b7d      	ldr	r3, [pc, #500]	; (8002004 <compensate_humidity+0x224>)
 8001e10:	f7fe fa3a 	bl	8000288 <__aeabi_dsub>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fb7e 	bl	8000524 <__aeabi_i2d>
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	4b76      	ldr	r3, [pc, #472]	; (8002008 <compensate_humidity+0x228>)
 8001e2e:	f7fe fbe3 	bl	80005f8 <__aeabi_dmul>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4614      	mov	r4, r2
 8001e38:	461d      	mov	r5, r3
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fb6f 	bl	8000524 <__aeabi_i2d>
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	4b70      	ldr	r3, [pc, #448]	; (800200c <compensate_humidity+0x22c>)
 8001e4c:	f7fe fcfe 	bl	800084c <__aeabi_ddiv>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4610      	mov	r0, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e5c:	f7fe fbcc 	bl	80005f8 <__aeabi_dmul>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4620      	mov	r0, r4
 8001e66:	4629      	mov	r1, r5
 8001e68:	f7fe fa10 	bl	800028c <__adddf3>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = uncomp_data->humidity - var2;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fb43 	bl	8000504 <__aeabi_ui2d>
 8001e7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e82:	f7fe fa01 	bl	8000288 <__aeabi_dsub>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var4 = ((double)calib_data->dig_H2) / 65536.0;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fb45 	bl	8000524 <__aeabi_i2d>
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	4b5c      	ldr	r3, [pc, #368]	; (8002010 <compensate_humidity+0x230>)
 8001ea0:	f7fe fcd4 	bl	800084c <__aeabi_ddiv>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	7f1b      	ldrb	r3, [r3, #28]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fb27 	bl	8000504 <__aeabi_ui2d>
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	4b56      	ldr	r3, [pc, #344]	; (8002014 <compensate_humidity+0x234>)
 8001ebc:	f7fe fcc6 	bl	800084c <__aeabi_ddiv>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ecc:	f7fe fb94 	bl	80005f8 <__aeabi_dmul>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	4b4e      	ldr	r3, [pc, #312]	; (8002018 <compensate_humidity+0x238>)
 8001ede:	f7fe f9d5 	bl	800028c <__adddf3>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fb17 	bl	8000524 <__aeabi_i2d>
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	4b46      	ldr	r3, [pc, #280]	; (8002014 <compensate_humidity+0x234>)
 8001efc:	f7fe fca6 	bl	800084c <__aeabi_ddiv>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4610      	mov	r0, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f0c:	f7fe fb74 	bl	80005f8 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f1c:	f7fe fb6c 	bl	80005f8 <__aeabi_dmul>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	4b3a      	ldr	r3, [pc, #232]	; (8002018 <compensate_humidity+0x238>)
 8001f2e:	f7fe f9ad 	bl	800028c <__adddf3>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var6 = var3 * var4 * (var5 * var6);
 8001f3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f3e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f42:	f7fe fb59 	bl	80005f8 <__aeabi_dmul>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4614      	mov	r4, r2
 8001f4c:	461d      	mov	r5, r3
 8001f4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f56:	f7fe fb4f 	bl	80005f8 <__aeabi_dmul>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4620      	mov	r0, r4
 8001f60:	4629      	mov	r1, r5
 8001f62:	f7fe fb49 	bl	80005f8 <__aeabi_dmul>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	7e1b      	ldrb	r3, [r3, #24]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fac6 	bl	8000504 <__aeabi_ui2d>
 8001f78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f7c:	f7fe fb3c 	bl	80005f8 <__aeabi_dmul>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	4b23      	ldr	r3, [pc, #140]	; (800201c <compensate_humidity+0x23c>)
 8001f8e:	f7fe fc5d 	bl	800084c <__aeabi_ddiv>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	f04f 0000 	mov.w	r0, #0
 8001f9a:	491f      	ldr	r1, [pc, #124]	; (8002018 <compensate_humidity+0x238>)
 8001f9c:	f7fe f974 	bl	8000288 <__aeabi_dsub>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fa8:	f7fe fb26 	bl	80005f8 <__aeabi_dmul>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if (humidity > humidity_max)
 8001fb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fb8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001fbc:	f7fe fdac 	bl	8000b18 <__aeabi_dcmpgt>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d004      	beq.n	8001fd0 <compensate_humidity+0x1f0>
		humidity = humidity_max;
 8001fc6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fca:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001fce:	e00c      	b.n	8001fea <compensate_humidity+0x20a>
	else if (humidity < humidity_min)
 8001fd0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fd4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001fd8:	f7fe fd80 	bl	8000adc <__aeabi_dcmplt>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <compensate_humidity+0x20a>
		humidity = humidity_min;
 8001fe2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fe6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	return humidity;
 8001fea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001fee:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ff6:	eef0 0a67 	vmov.f32	s1, s15
 8001ffa:	3750      	adds	r7, #80	; 0x50
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8002000:	40590000 	.word	0x40590000
 8002004:	40f2c000 	.word	0x40f2c000
 8002008:	40500000 	.word	0x40500000
 800200c:	40d00000 	.word	0x40d00000
 8002010:	40f00000 	.word	0x40f00000
 8002014:	41900000 	.word	0x41900000
 8002018:	3ff00000 	.word	0x3ff00000
 800201c:	41200000 	.word	0x41200000

08002020 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002028:	2388      	movs	r3, #136	; 0x88
 800202a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	f107 0310 	add.w	r3, r7, #16
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
 8002040:	611a      	str	r2, [r3, #16]
 8002042:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8002044:	f107 010c 	add.w	r1, r7, #12
 8002048:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	221a      	movs	r2, #26
 8002050:	f7fe ffc1 	bl	8000fd6 <bme280_get_regs>
 8002054:	4603      	mov	r3, r0
 8002056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 800205a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800205e:	2b00      	cmp	r3, #0
 8002060:	d11d      	bne.n	800209e <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 8002062:	f107 030c 	add.w	r3, r7, #12
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4618      	mov	r0, r3
 800206a:	f000 f84a 	bl	8002102 <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 800206e:	23e1      	movs	r3, #225	; 0xe1
 8002070:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8002074:	f107 010c 	add.w	r1, r7, #12
 8002078:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2207      	movs	r2, #7
 8002080:	f7fe ffa9 	bl	8000fd6 <bme280_get_regs>
 8002084:	4603      	mov	r3, r0
 8002086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 800208a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800208e:	2b00      	cmp	r3, #0
 8002090:	d105      	bne.n	800209e <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 8002092:	f107 030c 	add.w	r3, r7, #12
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4618      	mov	r0, r3
 800209a:	f000 f8e1 	bl	8002260 <parse_humidity_calib_data>
		}
	}

	return rslt;
 800209e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3728      	adds	r7, #40	; 0x28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b087      	sub	sp, #28
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 80020b8:	2301      	movs	r3, #1
 80020ba:	75fb      	strb	r3, [r7, #23]
 80020bc:	e016      	b.n	80020ec <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 80020be:	7dfb      	ldrb	r3, [r7, #23]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	441a      	add	r2, r3
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	3b01      	subs	r3, #1
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	440b      	add	r3, r1
 80020ce:	7812      	ldrb	r2, [r2, #0]
 80020d0:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 80020d2:	7dfb      	ldrb	r3, [r7, #23]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	441a      	add	r2, r3
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4619      	mov	r1, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	440b      	add	r3, r1
 80020e2:	7812      	ldrb	r2, [r2, #0]
 80020e4:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
 80020e8:	3301      	adds	r3, #1
 80020ea:	75fb      	strb	r3, [r7, #23]
 80020ec:	7dfa      	ldrb	r2, [r7, #23]
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d3e4      	bcc.n	80020be <interleave_reg_addr+0x14>
	}
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002102:	b480      	push	{r7}
 8002104:	b085      	sub	sp, #20
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	3310      	adds	r3, #16
 8002110:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3301      	adds	r3, #1
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	b21a      	sxth	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	b21b      	sxth	r3, r3
 8002122:	4313      	orrs	r3, r2
 8002124:	b21b      	sxth	r3, r3
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3303      	adds	r3, #3
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	b21a      	sxth	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3302      	adds	r3, #2
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	b21b      	sxth	r3, r3
 800213e:	4313      	orrs	r3, r2
 8002140:	b21a      	sxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3305      	adds	r3, #5
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	b21a      	sxth	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3304      	adds	r3, #4
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b21b      	sxth	r3, r3
 8002158:	4313      	orrs	r3, r2
 800215a:	b21a      	sxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3307      	adds	r3, #7
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	b21a      	sxth	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3306      	adds	r3, #6
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	b21b      	sxth	r3, r3
 8002172:	4313      	orrs	r3, r2
 8002174:	b21b      	sxth	r3, r3
 8002176:	b29a      	uxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3309      	adds	r3, #9
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	021b      	lsls	r3, r3, #8
 8002184:	b21a      	sxth	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3308      	adds	r3, #8
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b21b      	sxth	r3, r3
 800218e:	4313      	orrs	r3, r2
 8002190:	b21a      	sxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	330b      	adds	r3, #11
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	b21a      	sxth	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	330a      	adds	r3, #10
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	4313      	orrs	r3, r2
 80021aa:	b21a      	sxth	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	330d      	adds	r3, #13
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	021b      	lsls	r3, r3, #8
 80021b8:	b21a      	sxth	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	330c      	adds	r3, #12
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	4313      	orrs	r3, r2
 80021c4:	b21a      	sxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	330f      	adds	r3, #15
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	021b      	lsls	r3, r3, #8
 80021d2:	b21a      	sxth	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	330e      	adds	r3, #14
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	b21b      	sxth	r3, r3
 80021dc:	4313      	orrs	r3, r2
 80021de:	b21a      	sxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3311      	adds	r3, #17
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	b21a      	sxth	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3310      	adds	r3, #16
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	b21b      	sxth	r3, r3
 80021f6:	4313      	orrs	r3, r2
 80021f8:	b21a      	sxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3313      	adds	r3, #19
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	b21a      	sxth	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3312      	adds	r3, #18
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	b21b      	sxth	r3, r3
 8002210:	4313      	orrs	r3, r2
 8002212:	b21a      	sxth	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3315      	adds	r3, #21
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	b21a      	sxth	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3314      	adds	r3, #20
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b21b      	sxth	r3, r3
 800222a:	4313      	orrs	r3, r2
 800222c:	b21a      	sxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3317      	adds	r3, #23
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	b21a      	sxth	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3316      	adds	r3, #22
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b21b      	sxth	r3, r3
 8002244:	4313      	orrs	r3, r2
 8002246:	b21a      	sxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7e5a      	ldrb	r2, [r3, #25]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	761a      	strb	r2, [r3, #24]

}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	3310      	adds	r3, #16
 800226e:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3301      	adds	r3, #1
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	b21a      	sxth	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	b21b      	sxth	r3, r3
 8002280:	4313      	orrs	r3, r2
 8002282:	b21a      	sxth	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	789a      	ldrb	r2, [r3, #2]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3303      	adds	r3, #3
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	b25b      	sxtb	r3, r3
 8002298:	b29b      	uxth	r3, r3
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	b29b      	uxth	r3, r3
 800229e:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3304      	adds	r3, #4
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	f003 030f 	and.w	r3, r3, #15
 80022ac:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80022ae:	8a7a      	ldrh	r2, [r7, #18]
 80022b0:	8a3b      	ldrh	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	b21a      	sxth	r2, r3
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3305      	adds	r3, #5
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	b25b      	sxtb	r3, r3
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3304      	adds	r3, #4
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 80022d6:	89fa      	ldrh	r2, [r7, #14]
 80022d8:	89bb      	ldrh	r3, [r7, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	b21a      	sxth	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3306      	adds	r3, #6
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	b25a      	sxtb	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80022f0:	bf00      	nop
 80022f2:	371c      	adds	r7, #28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	460a      	mov	r2, r1
 8002306:	71fb      	strb	r3, [r7, #7]
 8002308:	4613      	mov	r3, r2
 800230a:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 800230c:	2300      	movs	r3, #0
 800230e:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8002310:	79fa      	ldrb	r2, [r7, #7]
 8002312:	79bb      	ldrb	r3, [r7, #6]
 8002314:	4013      	ands	r3, r2
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 800231c:	2301      	movs	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
 8002320:	e001      	b.n	8002326 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 8002322:	2300      	movs	r3, #0
 8002324:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8002326:	7bfb      	ldrb	r3, [r7, #15]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00b      	beq.n	800235a <null_ptr_check+0x26>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d007      	beq.n	800235a <null_ptr_check+0x26>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <null_ptr_check+0x26>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d102      	bne.n	8002360 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 800235a:	23ff      	movs	r3, #255	; 0xff
 800235c:	73fb      	strb	r3, [r7, #15]
 800235e:	e001      	b.n	8002364 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002364:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]

	// Передати в чергу !!!!!!!!!!  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	//HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 0);   // was 1
 8002390:	2200      	movs	r2, #0
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	480a      	ldr	r0, [pc, #40]	; (80023c0 <Mount_SD+0x38>)
 8002396:	f00e fb49 	bl	8010a2c <f_mount>
 800239a:	4603      	mov	r3, r0
 800239c:	461a      	mov	r2, r3
 800239e:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <Mount_SD+0x3c>)
 80023a0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <Mount_SD+0x3c>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <Mount_SD+0x2a>
	{
		Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 80023aa:	4807      	ldr	r0, [pc, #28]	; (80023c8 <Mount_SD+0x40>)
 80023ac:	f7ff ffe2 	bl	8002374 <Send_Uart>
	}
	else
	{
		Send_Uart("SD CARD mounted successfully...\n");
	}
}
 80023b0:	e002      	b.n	80023b8 <Mount_SD+0x30>
		Send_Uart("SD CARD mounted successfully...\n");
 80023b2:	4806      	ldr	r0, [pc, #24]	; (80023cc <Mount_SD+0x44>)
 80023b4:	f7ff ffde 	bl	8002374 <Send_Uart>
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20005f34 	.word	0x20005f34
 80023c4:	20006f80 	.word	0x20006f80
 80023c8:	080193b8 	.word	0x080193b8
 80023cc:	080193dc 	.word	0x080193dc

080023d0 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 80023d8:	2201      	movs	r2, #1
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	2000      	movs	r0, #0
 80023de:	f00e fb25 	bl	8010a2c <f_mount>
 80023e2:	4603      	mov	r3, r0
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <Unmount_SD+0x38>)
 80023e8:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <Unmount_SD+0x38>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d103      	bne.n	80023fa <Unmount_SD+0x2a>
 80023f2:	4806      	ldr	r0, [pc, #24]	; (800240c <Unmount_SD+0x3c>)
 80023f4:	f7ff ffbe 	bl	8002374 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 80023f8:	e002      	b.n	8002400 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 80023fa:	4805      	ldr	r0, [pc, #20]	; (8002410 <Unmount_SD+0x40>)
 80023fc:	f7ff ffba 	bl	8002374 <Send_Uart>
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20006f80 	.word	0x20006f80
 800240c:	08019400 	.word	0x08019400
 8002410:	08019428 	.word	0x08019428

08002414 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 800241c:	4940      	ldr	r1, [pc, #256]	; (8002520 <Create_File+0x10c>)
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f00f f846 	bl	80114b0 <f_stat>
 8002424:	4603      	mov	r3, r0
 8002426:	461a      	mov	r2, r3
 8002428:	4b3e      	ldr	r3, [pc, #248]	; (8002524 <Create_File+0x110>)
 800242a:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 800242c:	4b3d      	ldr	r3, [pc, #244]	; (8002524 <Create_File+0x110>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d111      	bne.n	8002458 <Create_File+0x44>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8002434:	2064      	movs	r0, #100	; 0x64
 8002436:	f013 f8e7 	bl	8015608 <pvPortMalloc>
 800243a:	60f8      	str	r0, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	493a      	ldr	r1, [pc, #232]	; (8002528 <Create_File+0x114>)
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f014 fef1 	bl	8017228 <siprintf>
		Send_Uart(buf);
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f7ff ff94 	bl	8002374 <Send_Uart>
		vPortFree(buf);
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f013 f9a7 	bl	80157a0 <vPortFree>
	    return fresult;
 8002452:	4b34      	ldr	r3, [pc, #208]	; (8002524 <Create_File+0x110>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	e05f      	b.n	8002518 <Create_File+0x104>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8002458:	220b      	movs	r2, #11
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4833      	ldr	r0, [pc, #204]	; (800252c <Create_File+0x118>)
 800245e:	f00e fb49 	bl	8010af4 <f_open>
 8002462:	4603      	mov	r3, r0
 8002464:	461a      	mov	r2, r3
 8002466:	4b2f      	ldr	r3, [pc, #188]	; (8002524 <Create_File+0x110>)
 8002468:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800246a:	4b2e      	ldr	r3, [pc, #184]	; (8002524 <Create_File+0x110>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d014      	beq.n	800249c <Create_File+0x88>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8002472:	2064      	movs	r0, #100	; 0x64
 8002474:	f013 f8c8 	bl	8015608 <pvPortMalloc>
 8002478:	6138      	str	r0, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 800247a:	4b2a      	ldr	r3, [pc, #168]	; (8002524 <Create_File+0x110>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	492b      	ldr	r1, [pc, #172]	; (8002530 <Create_File+0x11c>)
 8002484:	6938      	ldr	r0, [r7, #16]
 8002486:	f014 fecf 	bl	8017228 <siprintf>
			Send_Uart(buf);
 800248a:	6938      	ldr	r0, [r7, #16]
 800248c:	f7ff ff72 	bl	8002374 <Send_Uart>
			vPortFree(buf);
 8002490:	6938      	ldr	r0, [r7, #16]
 8002492:	f013 f985 	bl	80157a0 <vPortFree>
		    return fresult;
 8002496:	4b23      	ldr	r3, [pc, #140]	; (8002524 <Create_File+0x110>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	e03d      	b.n	8002518 <Create_File+0x104>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 800249c:	2064      	movs	r0, #100	; 0x64
 800249e:	f013 f8b3 	bl	8015608 <pvPortMalloc>
 80024a2:	61f8      	str	r0, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	4923      	ldr	r1, [pc, #140]	; (8002534 <Create_File+0x120>)
 80024a8:	69f8      	ldr	r0, [r7, #28]
 80024aa:	f014 febd 	bl	8017228 <siprintf>
			Send_Uart(buf);
 80024ae:	69f8      	ldr	r0, [r7, #28]
 80024b0:	f7ff ff60 	bl	8002374 <Send_Uart>
			vPortFree(buf);
 80024b4:	69f8      	ldr	r0, [r7, #28]
 80024b6:	f013 f973 	bl	80157a0 <vPortFree>
		}

		fresult = f_close(&fil);
 80024ba:	481c      	ldr	r0, [pc, #112]	; (800252c <Create_File+0x118>)
 80024bc:	f00e ffc9 	bl	8011452 <f_close>
 80024c0:	4603      	mov	r3, r0
 80024c2:	461a      	mov	r2, r3
 80024c4:	4b17      	ldr	r3, [pc, #92]	; (8002524 <Create_File+0x110>)
 80024c6:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80024c8:	4b16      	ldr	r3, [pc, #88]	; (8002524 <Create_File+0x110>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d012      	beq.n	80024f6 <Create_File+0xe2>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80024d0:	2064      	movs	r0, #100	; 0x64
 80024d2:	f013 f899 	bl	8015608 <pvPortMalloc>
 80024d6:	6178      	str	r0, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 80024d8:	4b12      	ldr	r3, [pc, #72]	; (8002524 <Create_File+0x110>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4915      	ldr	r1, [pc, #84]	; (8002538 <Create_File+0x124>)
 80024e2:	6978      	ldr	r0, [r7, #20]
 80024e4:	f014 fea0 	bl	8017228 <siprintf>
			Send_Uart(buf);
 80024e8:	6978      	ldr	r0, [r7, #20]
 80024ea:	f7ff ff43 	bl	8002374 <Send_Uart>
			vPortFree(buf);
 80024ee:	6978      	ldr	r0, [r7, #20]
 80024f0:	f013 f956 	bl	80157a0 <vPortFree>
 80024f4:	e00e      	b.n	8002514 <Create_File+0x100>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80024f6:	2064      	movs	r0, #100	; 0x64
 80024f8:	f013 f886 	bl	8015608 <pvPortMalloc>
 80024fc:	61b8      	str	r0, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	490e      	ldr	r1, [pc, #56]	; (800253c <Create_File+0x128>)
 8002502:	69b8      	ldr	r0, [r7, #24]
 8002504:	f014 fe90 	bl	8017228 <siprintf>
			Send_Uart(buf);
 8002508:	69b8      	ldr	r0, [r7, #24]
 800250a:	f7ff ff33 	bl	8002374 <Send_Uart>
			vPortFree(buf);
 800250e:	69b8      	ldr	r0, [r7, #24]
 8002510:	f013 f946 	bl	80157a0 <vPortFree>
		}
	}
    return fresult;
 8002514:	4b03      	ldr	r3, [pc, #12]	; (8002524 <Create_File+0x110>)
 8002516:	781b      	ldrb	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3720      	adds	r7, #32
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20005e1c 	.word	0x20005e1c
 8002524:	20006f80 	.word	0x20006f80
 8002528:	080195f8 	.word	0x080195f8
 800252c:	20006f88 	.word	0x20006f88
 8002530:	08019630 	.word	0x08019630
 8002534:	08019658 	.word	0x08019658
 8002538:	08019698 	.word	0x08019698
 800253c:	080195d8 	.word	0x080195d8

08002540 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800254a:	4953      	ldr	r1, [pc, #332]	; (8002698 <Update_File+0x158>)
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f00e ffaf 	bl	80114b0 <f_stat>
 8002552:	4603      	mov	r3, r0
 8002554:	461a      	mov	r2, r3
 8002556:	4b51      	ldr	r3, [pc, #324]	; (800269c <Update_File+0x15c>)
 8002558:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800255a:	4b50      	ldr	r3, [pc, #320]	; (800269c <Update_File+0x15c>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d011      	beq.n	8002586 <Update_File+0x46>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8002562:	2064      	movs	r0, #100	; 0x64
 8002564:	f013 f850 	bl	8015608 <pvPortMalloc>
 8002568:	60b8      	str	r0, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	494c      	ldr	r1, [pc, #304]	; (80026a0 <Update_File+0x160>)
 800256e:	68b8      	ldr	r0, [r7, #8]
 8002570:	f014 fe5a 	bl	8017228 <siprintf>
		Send_Uart (buf);
 8002574:	68b8      	ldr	r0, [r7, #8]
 8002576:	f7ff fefd 	bl	8002374 <Send_Uart>
		vPortFree(buf);
 800257a:	68b8      	ldr	r0, [r7, #8]
 800257c:	f013 f910 	bl	80157a0 <vPortFree>
	    return fresult;
 8002580:	4b46      	ldr	r3, [pc, #280]	; (800269c <Update_File+0x15c>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	e083      	b.n	800268e <Update_File+0x14e>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8002586:	2232      	movs	r2, #50	; 0x32
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4846      	ldr	r0, [pc, #280]	; (80026a4 <Update_File+0x164>)
 800258c:	f00e fab2 	bl	8010af4 <f_open>
 8002590:	4603      	mov	r3, r0
 8002592:	461a      	mov	r2, r3
 8002594:	4b41      	ldr	r3, [pc, #260]	; (800269c <Update_File+0x15c>)
 8002596:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8002598:	4b40      	ldr	r3, [pc, #256]	; (800269c <Update_File+0x15c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d014      	beq.n	80025ca <Update_File+0x8a>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80025a0:	2064      	movs	r0, #100	; 0x64
 80025a2:	f013 f831 	bl	8015608 <pvPortMalloc>
 80025a6:	60f8      	str	r0, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80025a8:	4b3c      	ldr	r3, [pc, #240]	; (800269c <Update_File+0x15c>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	493d      	ldr	r1, [pc, #244]	; (80026a8 <Update_File+0x168>)
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f014 fe38 	bl	8017228 <siprintf>
	    	Send_Uart(buf);
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f7ff fedb 	bl	8002374 <Send_Uart>
	        vPortFree(buf);
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f013 f8ee 	bl	80157a0 <vPortFree>
	        return fresult;
 80025c4:	4b35      	ldr	r3, [pc, #212]	; (800269c <Update_File+0x15c>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	e061      	b.n	800268e <Update_File+0x14e>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 80025ca:	6838      	ldr	r0, [r7, #0]
 80025cc:	f7fd fe00 	bl	80001d0 <strlen>
 80025d0:	4602      	mov	r2, r0
 80025d2:	4b36      	ldr	r3, [pc, #216]	; (80026ac <Update_File+0x16c>)
 80025d4:	6839      	ldr	r1, [r7, #0]
 80025d6:	4833      	ldr	r0, [pc, #204]	; (80026a4 <Update_File+0x164>)
 80025d8:	f00e fcef 	bl	8010fba <f_write>
 80025dc:	4603      	mov	r3, r0
 80025de:	461a      	mov	r2, r3
 80025e0:	4b2e      	ldr	r3, [pc, #184]	; (800269c <Update_File+0x15c>)
 80025e2:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80025e4:	4b2d      	ldr	r3, [pc, #180]	; (800269c <Update_File+0x15c>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d012      	beq.n	8002612 <Update_File+0xd2>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80025ec:	2064      	movs	r0, #100	; 0x64
 80025ee:	f013 f80b 	bl	8015608 <pvPortMalloc>
 80025f2:	61b8      	str	r0, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 80025f4:	4b29      	ldr	r3, [pc, #164]	; (800269c <Update_File+0x15c>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	492c      	ldr	r1, [pc, #176]	; (80026b0 <Update_File+0x170>)
 80025fe:	69b8      	ldr	r0, [r7, #24]
 8002600:	f014 fe12 	bl	8017228 <siprintf>
	    	Send_Uart(buf);
 8002604:	69b8      	ldr	r0, [r7, #24]
 8002606:	f7ff feb5 	bl	8002374 <Send_Uart>
	    	vPortFree(buf);
 800260a:	69b8      	ldr	r0, [r7, #24]
 800260c:	f013 f8c8 	bl	80157a0 <vPortFree>
 8002610:	e00e      	b.n	8002630 <Update_File+0xf0>
	    }

	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8002612:	2064      	movs	r0, #100	; 0x64
 8002614:	f012 fff8 	bl	8015608 <pvPortMalloc>
 8002618:	61f8      	str	r0, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4925      	ldr	r1, [pc, #148]	; (80026b4 <Update_File+0x174>)
 800261e:	69f8      	ldr	r0, [r7, #28]
 8002620:	f014 fe02 	bl	8017228 <siprintf>
	    	Send_Uart(buf);
 8002624:	69f8      	ldr	r0, [r7, #28]
 8002626:	f7ff fea5 	bl	8002374 <Send_Uart>
	    	vPortFree(buf);
 800262a:	69f8      	ldr	r0, [r7, #28]
 800262c:	f013 f8b8 	bl	80157a0 <vPortFree>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8002630:	481c      	ldr	r0, [pc, #112]	; (80026a4 <Update_File+0x164>)
 8002632:	f00e ff0e 	bl	8011452 <f_close>
 8002636:	4603      	mov	r3, r0
 8002638:	461a      	mov	r2, r3
 800263a:	4b18      	ldr	r3, [pc, #96]	; (800269c <Update_File+0x15c>)
 800263c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800263e:	4b17      	ldr	r3, [pc, #92]	; (800269c <Update_File+0x15c>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d012      	beq.n	800266c <Update_File+0x12c>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8002646:	2064      	movs	r0, #100	; 0x64
 8002648:	f012 ffde 	bl	8015608 <pvPortMalloc>
 800264c:	6138      	str	r0, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800264e:	4b13      	ldr	r3, [pc, #76]	; (800269c <Update_File+0x15c>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4918      	ldr	r1, [pc, #96]	; (80026b8 <Update_File+0x178>)
 8002658:	6938      	ldr	r0, [r7, #16]
 800265a:	f014 fde5 	bl	8017228 <siprintf>
	    	Send_Uart(buf);
 800265e:	6938      	ldr	r0, [r7, #16]
 8002660:	f7ff fe88 	bl	8002374 <Send_Uart>
	    	vPortFree(buf);
 8002664:	6938      	ldr	r0, [r7, #16]
 8002666:	f013 f89b 	bl	80157a0 <vPortFree>
 800266a:	e00e      	b.n	800268a <Update_File+0x14a>
	    }
	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 800266c:	2064      	movs	r0, #100	; 0x64
 800266e:	f012 ffcb 	bl	8015608 <pvPortMalloc>
 8002672:	6178      	str	r0, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	4911      	ldr	r1, [pc, #68]	; (80026bc <Update_File+0x17c>)
 8002678:	6978      	ldr	r0, [r7, #20]
 800267a:	f014 fdd5 	bl	8017228 <siprintf>
	    	Send_Uart(buf);
 800267e:	6978      	ldr	r0, [r7, #20]
 8002680:	f7ff fe78 	bl	8002374 <Send_Uart>
	    	vPortFree(buf);
 8002684:	6978      	ldr	r0, [r7, #20]
 8002686:	f013 f88b 	bl	80157a0 <vPortFree>
	     }
	}
    return fresult;
 800268a:	4b04      	ldr	r3, [pc, #16]	; (800269c <Update_File+0x15c>)
 800268c:	781b      	ldrb	r3, [r3, #0]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3720      	adds	r7, #32
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20005e1c 	.word	0x20005e1c
 800269c:	20006f80 	.word	0x20006f80
 80026a0:	08019480 	.word	0x08019480
 80026a4:	20006f88 	.word	0x20006f88
 80026a8:	080194a0 	.word	0x080194a0
 80026ac:	20006f78 	.word	0x20006f78
 80026b0:	080196bc 	.word	0x080196bc
 80026b4:	080196e4 	.word	0x080196e4
 80026b8:	080195b0 	.word	0x080195b0
 80026bc:	080195d8 	.word	0x080195d8

080026c0 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f00e ff3e 	bl	801154a <f_mkdir>
 80026ce:	4603      	mov	r3, r0
 80026d0:	461a      	mov	r2, r3
 80026d2:	4b17      	ldr	r3, [pc, #92]	; (8002730 <Create_Dir+0x70>)
 80026d4:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80026d6:	4b16      	ldr	r3, [pc, #88]	; (8002730 <Create_Dir+0x70>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10f      	bne.n	80026fe <Create_Dir+0x3e>
    {
    	char *buf = pvPortMalloc(100*sizeof(char));
 80026de:	2064      	movs	r0, #100	; 0x64
 80026e0:	f012 ff92 	bl	8015608 <pvPortMalloc>
 80026e4:	60b8      	str	r0, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n", name);
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	4912      	ldr	r1, [pc, #72]	; (8002734 <Create_Dir+0x74>)
 80026ea:	68b8      	ldr	r0, [r7, #8]
 80026ec:	f014 fd9c 	bl	8017228 <siprintf>
    	Send_Uart (buf);
 80026f0:	68b8      	ldr	r0, [r7, #8]
 80026f2:	f7ff fe3f 	bl	8002374 <Send_Uart>
    	vPortFree(buf);
 80026f6:	68b8      	ldr	r0, [r7, #8]
 80026f8:	f013 f852 	bl	80157a0 <vPortFree>
 80026fc:	e011      	b.n	8002722 <Create_Dir+0x62>
    }
    else
    {
    	char *buf = pvPortMalloc(100*sizeof(char));
 80026fe:	2064      	movs	r0, #100	; 0x64
 8002700:	f012 ff82 	bl	8015608 <pvPortMalloc>
 8002704:	60f8      	str	r0, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <Create_Dir+0x70>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	490a      	ldr	r1, [pc, #40]	; (8002738 <Create_Dir+0x78>)
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f014 fd89 	bl	8017228 <siprintf>
    	Send_Uart(buf);
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f7ff fe2c 	bl	8002374 <Send_Uart>
    	vPortFree(buf);
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f013 f83f 	bl	80157a0 <vPortFree>
    }
    return fresult;
 8002722:	4b03      	ldr	r3, [pc, #12]	; (8002730 <Create_Dir+0x70>)
 8002724:	781b      	ldrb	r3, [r3, #0]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20006f80 	.word	0x20006f80
 8002734:	08019744 	.word	0x08019744
 8002738:	08019768 	.word	0x08019768

0800273c <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002740:	2200      	movs	r2, #0
 8002742:	2140      	movs	r1, #64	; 0x40
 8002744:	4802      	ldr	r0, [pc, #8]	; (8002750 <SELECT+0x14>)
 8002746:	f003 fe6f 	bl	8006428 <HAL_GPIO_WritePin>
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40020800 	.word	0x40020800

08002754 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002758:	2201      	movs	r2, #1
 800275a:	2140      	movs	r1, #64	; 0x40
 800275c:	4802      	ldr	r0, [pc, #8]	; (8002768 <DESELECT+0x14>)
 800275e:	f003 fe63 	bl	8006428 <HAL_GPIO_WritePin>
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40020800 	.word	0x40020800

0800276c <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002776:	bf00      	nop
 8002778:	4808      	ldr	r0, [pc, #32]	; (800279c <SPI_TxByte+0x30>)
 800277a:	f008 f84f 	bl	800a81c <HAL_SPI_GetState>
 800277e:	4603      	mov	r3, r0
 8002780:	2b01      	cmp	r3, #1
 8002782:	d1f9      	bne.n	8002778 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8002784:	1df9      	adds	r1, r7, #7
 8002786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800278a:	2201      	movs	r2, #1
 800278c:	4803      	ldr	r0, [pc, #12]	; (800279c <SPI_TxByte+0x30>)
 800278e:	f007 fd67 	bl	800a260 <HAL_SPI_Transmit>
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20011000 	.word	0x20011000

080027a0 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80027a6:	23ff      	movs	r3, #255	; 0xff
 80027a8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80027ae:	bf00      	nop
 80027b0:	4809      	ldr	r0, [pc, #36]	; (80027d8 <SPI_RxByte+0x38>)
 80027b2:	f008 f833 	bl	800a81c <HAL_SPI_GetState>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d1f9      	bne.n	80027b0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80027bc:	1dba      	adds	r2, r7, #6
 80027be:	1df9      	adds	r1, r7, #7
 80027c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	2301      	movs	r3, #1
 80027c8:	4803      	ldr	r0, [pc, #12]	; (80027d8 <SPI_RxByte+0x38>)
 80027ca:	f007 fe85 	bl	800a4d8 <HAL_SPI_TransmitReceive>
  
  return data;
 80027ce:	79bb      	ldrb	r3, [r7, #6]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20011000 	.word	0x20011000

080027dc <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80027e4:	f7ff ffdc 	bl	80027a0 <SPI_RxByte>
 80027e8:	4603      	mov	r3, r0
 80027ea:	461a      	mov	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	701a      	strb	r2, [r3, #0]
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 80027fe:	4b0b      	ldr	r3, [pc, #44]	; (800282c <SD_ReadyWait+0x34>)
 8002800:	2232      	movs	r2, #50	; 0x32
 8002802:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8002804:	f7ff ffcc 	bl	80027a0 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8002808:	f7ff ffca 	bl	80027a0 <SPI_RxByte>
 800280c:	4603      	mov	r3, r0
 800280e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	2bff      	cmp	r3, #255	; 0xff
 8002814:	d004      	beq.n	8002820 <SD_ReadyWait+0x28>
 8002816:	4b05      	ldr	r3, [pc, #20]	; (800282c <SD_ReadyWait+0x34>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f3      	bne.n	8002808 <SD_ReadyWait+0x10>
  
  return res;
 8002820:	79fb      	ldrb	r3, [r7, #7]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	20010ff8 	.word	0x20010ff8

08002830 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8002836:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800283a:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 800283c:	f7ff ff8a 	bl	8002754 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8002840:	2300      	movs	r3, #0
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	e005      	b.n	8002852 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8002846:	20ff      	movs	r0, #255	; 0xff
 8002848:	f7ff ff90 	bl	800276c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	3301      	adds	r3, #1
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	2b09      	cmp	r3, #9
 8002856:	ddf6      	ble.n	8002846 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8002858:	f7ff ff70 	bl	800273c <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 800285c:	2340      	movs	r3, #64	; 0x40
 800285e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8002870:	2395      	movs	r3, #149	; 0x95
 8002872:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	e009      	b.n	800288e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800287a:	1d3a      	adds	r2, r7, #4
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff ff72 	bl	800276c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3301      	adds	r3, #1
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b05      	cmp	r3, #5
 8002892:	ddf2      	ble.n	800287a <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8002894:	e002      	b.n	800289c <SD_PowerOn+0x6c>
  {
    Count--;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	3b01      	subs	r3, #1
 800289a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 800289c:	f7ff ff80 	bl	80027a0 <SPI_RxByte>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d002      	beq.n	80028ac <SD_PowerOn+0x7c>
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f4      	bne.n	8002896 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 80028ac:	f7ff ff52 	bl	8002754 <DESELECT>
  SPI_TxByte(0XFF);
 80028b0:	20ff      	movs	r0, #255	; 0xff
 80028b2:	f7ff ff5b 	bl	800276c <SPI_TxByte>
  
  PowerFlag = 1;
 80028b6:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <SD_PowerOn+0x94>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
}
 80028bc:	bf00      	nop
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	2000038d 	.word	0x2000038d

080028c8 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <SD_PowerOff+0x14>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
}
 80028d2:	bf00      	nop
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	2000038d 	.word	0x2000038d

080028e0 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80028e4:	4b03      	ldr	r3, [pc, #12]	; (80028f4 <SD_CheckPower+0x14>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	2000038d 	.word	0x2000038d

080028f8 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8002902:	4b17      	ldr	r3, [pc, #92]	; (8002960 <SD_RxDataBlock+0x68>)
 8002904:	220a      	movs	r2, #10
 8002906:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8002908:	f7ff ff4a 	bl	80027a0 <SPI_RxByte>
 800290c:	4603      	mov	r3, r0
 800290e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	2bff      	cmp	r3, #255	; 0xff
 8002914:	d104      	bne.n	8002920 <SD_RxDataBlock+0x28>
 8002916:	4b12      	ldr	r3, [pc, #72]	; (8002960 <SD_RxDataBlock+0x68>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1f3      	bne.n	8002908 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	2bfe      	cmp	r3, #254	; 0xfe
 8002924:	d001      	beq.n	800292a <SD_RxDataBlock+0x32>
    return FALSE;
 8002926:	2300      	movs	r3, #0
 8002928:	e016      	b.n	8002958 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff53 	bl	80027dc <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff4d 	bl	80027dc <SPI_RxBytePtr>
  } while(btr -= 2);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	3b02      	subs	r3, #2
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1ed      	bne.n	800292a <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 800294e:	f7ff ff27 	bl	80027a0 <SPI_RxByte>
  SPI_RxByte();
 8002952:	f7ff ff25 	bl	80027a0 <SPI_RxByte>
  
  return TRUE;
 8002956:	2301      	movs	r3, #1
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	20012160 	.word	0x20012160

08002964 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8002974:	f7ff ff40 	bl	80027f8 <SD_ReadyWait>
 8002978:	4603      	mov	r3, r0
 800297a:	2bff      	cmp	r3, #255	; 0xff
 800297c:	d001      	beq.n	8002982 <SD_TxDataBlock+0x1e>
    return FALSE;
 800297e:	2300      	movs	r3, #0
 8002980:	e040      	b.n	8002a04 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8002982:	78fb      	ldrb	r3, [r7, #3]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fef1 	bl	800276c <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	2bfd      	cmp	r3, #253	; 0xfd
 800298e:	d031      	beq.n	80029f4 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fee5 	bl	800276c <SPI_TxByte>
      SPI_TxByte(*buff++);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fede 	bl	800276c <SPI_TxByte>
    } while (--wc);
 80029b0:	7bbb      	ldrb	r3, [r7, #14]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	73bb      	strb	r3, [r7, #14]
 80029b6:	7bbb      	ldrb	r3, [r7, #14]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1eb      	bne.n	8002994 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 80029bc:	f7ff fef0 	bl	80027a0 <SPI_RxByte>
    SPI_RxByte();
 80029c0:	f7ff feee 	bl	80027a0 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 80029c4:	e00b      	b.n	80029de <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 80029c6:	f7ff feeb 	bl	80027a0 <SPI_RxByte>
 80029ca:	4603      	mov	r3, r0
 80029cc:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	f003 031f 	and.w	r3, r3, #31
 80029d4:	2b05      	cmp	r3, #5
 80029d6:	d006      	beq.n	80029e6 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 80029d8:	7b7b      	ldrb	r3, [r7, #13]
 80029da:	3301      	adds	r3, #1
 80029dc:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 80029de:	7b7b      	ldrb	r3, [r7, #13]
 80029e0:	2b40      	cmp	r3, #64	; 0x40
 80029e2:	d9f0      	bls.n	80029c6 <SD_TxDataBlock+0x62>
 80029e4:	e000      	b.n	80029e8 <SD_TxDataBlock+0x84>
        break;
 80029e6:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80029e8:	bf00      	nop
 80029ea:	f7ff fed9 	bl	80027a0 <SPI_RxByte>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0fa      	beq.n	80029ea <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	f003 031f 	and.w	r3, r3, #31
 80029fa:	2b05      	cmp	r3, #5
 80029fc:	d101      	bne.n	8002a02 <SD_TxDataBlock+0x9e>
    return TRUE;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	6039      	str	r1, [r7, #0]
 8002a16:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8002a18:	f7ff feee 	bl	80027f8 <SD_ReadyWait>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2bff      	cmp	r3, #255	; 0xff
 8002a20:	d001      	beq.n	8002a26 <SD_SendCmd+0x1a>
    return 0xFF;
 8002a22:	23ff      	movs	r3, #255	; 0xff
 8002a24:	e040      	b.n	8002aa8 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fe9f 	bl	800276c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	0e1b      	lsrs	r3, r3, #24
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff fe99 	bl	800276c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	0c1b      	lsrs	r3, r3, #16
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff fe93 	bl	800276c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	0a1b      	lsrs	r3, r3, #8
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fe8d 	bl	800276c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fe88 	bl	800276c <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	2b40      	cmp	r3, #64	; 0x40
 8002a64:	d101      	bne.n	8002a6a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8002a66:	2395      	movs	r3, #149	; 0x95
 8002a68:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	2b48      	cmp	r3, #72	; 0x48
 8002a6e:	d101      	bne.n	8002a74 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8002a70:	2387      	movs	r3, #135	; 0x87
 8002a72:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fe78 	bl	800276c <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	2b4c      	cmp	r3, #76	; 0x4c
 8002a80:	d101      	bne.n	8002a86 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8002a82:	f7ff fe8d 	bl	80027a0 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8002a86:	230a      	movs	r3, #10
 8002a88:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8002a8a:	f7ff fe89 	bl	80027a0 <SPI_RxByte>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8002a92:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	da05      	bge.n	8002aa6 <SD_SendCmd+0x9a>
 8002a9a:	7bbb      	ldrb	r3, [r7, #14]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	73bb      	strb	r3, [r7, #14]
 8002aa0:	7bbb      	ldrb	r3, [r7, #14]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f1      	bne.n	8002a8a <SD_SendCmd+0x7e>
  
  return res;
 8002aa6:	7b7b      	ldrb	r3, [r7, #13]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0d5      	b.n	8002c70 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8002ac4:	4b6c      	ldr	r3, [pc, #432]	; (8002c78 <SD_disk_initialize+0x1c8>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <SD_disk_initialize+0x2a>
    return Stat;        
 8002ad2:	4b69      	ldr	r3, [pc, #420]	; (8002c78 <SD_disk_initialize+0x1c8>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	e0ca      	b.n	8002c70 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8002ada:	f7ff fea9 	bl	8002830 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8002ade:	f7ff fe2d 	bl	800273c <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	2040      	movs	r0, #64	; 0x40
 8002aea:	f7ff ff8f 	bl	8002a0c <SD_SendCmd>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	f040 80a5 	bne.w	8002c40 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8002af6:	4b61      	ldr	r3, [pc, #388]	; (8002c7c <SD_disk_initialize+0x1cc>)
 8002af8:	2264      	movs	r2, #100	; 0x64
 8002afa:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8002afc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002b00:	2048      	movs	r0, #72	; 0x48
 8002b02:	f7ff ff83 	bl	8002a0c <SD_SendCmd>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d158      	bne.n	8002bbe <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	73fb      	strb	r3, [r7, #15]
 8002b10:	e00c      	b.n	8002b2c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8002b12:	7bfc      	ldrb	r4, [r7, #15]
 8002b14:	f7ff fe44 	bl	80027a0 <SPI_RxByte>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f107 0310 	add.w	r3, r7, #16
 8002b20:	4423      	add	r3, r4
 8002b22:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d9ef      	bls.n	8002b12 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8002b32:	7abb      	ldrb	r3, [r7, #10]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	f040 8083 	bne.w	8002c40 <SD_disk_initialize+0x190>
 8002b3a:	7afb      	ldrb	r3, [r7, #11]
 8002b3c:	2baa      	cmp	r3, #170	; 0xaa
 8002b3e:	d17f      	bne.n	8002c40 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8002b40:	2100      	movs	r1, #0
 8002b42:	2077      	movs	r0, #119	; 0x77
 8002b44:	f7ff ff62 	bl	8002a0c <SD_SendCmd>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d807      	bhi.n	8002b5e <SD_disk_initialize+0xae>
 8002b4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002b52:	2069      	movs	r0, #105	; 0x69
 8002b54:	f7ff ff5a 	bl	8002a0c <SD_SendCmd>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d005      	beq.n	8002b6a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8002b5e:	4b47      	ldr	r3, [pc, #284]	; (8002c7c <SD_disk_initialize+0x1cc>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1eb      	bne.n	8002b40 <SD_disk_initialize+0x90>
 8002b68:	e000      	b.n	8002b6c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8002b6a:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8002b6c:	4b43      	ldr	r3, [pc, #268]	; (8002c7c <SD_disk_initialize+0x1cc>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d064      	beq.n	8002c40 <SD_disk_initialize+0x190>
 8002b76:	2100      	movs	r1, #0
 8002b78:	207a      	movs	r0, #122	; 0x7a
 8002b7a:	f7ff ff47 	bl	8002a0c <SD_SendCmd>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d15d      	bne.n	8002c40 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8002b84:	2300      	movs	r3, #0
 8002b86:	73fb      	strb	r3, [r7, #15]
 8002b88:	e00c      	b.n	8002ba4 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8002b8a:	7bfc      	ldrb	r4, [r7, #15]
 8002b8c:	f7ff fe08 	bl	80027a0 <SPI_RxByte>
 8002b90:	4603      	mov	r3, r0
 8002b92:	461a      	mov	r2, r3
 8002b94:	f107 0310 	add.w	r3, r7, #16
 8002b98:	4423      	add	r3, r4
 8002b9a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d9ef      	bls.n	8002b8a <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8002baa:	7a3b      	ldrb	r3, [r7, #8]
 8002bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <SD_disk_initialize+0x108>
 8002bb4:	2306      	movs	r3, #6
 8002bb6:	e000      	b.n	8002bba <SD_disk_initialize+0x10a>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	73bb      	strb	r3, [r7, #14]
 8002bbc:	e040      	b.n	8002c40 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	2077      	movs	r0, #119	; 0x77
 8002bc2:	f7ff ff23 	bl	8002a0c <SD_SendCmd>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d808      	bhi.n	8002bde <SD_disk_initialize+0x12e>
 8002bcc:	2100      	movs	r1, #0
 8002bce:	2069      	movs	r0, #105	; 0x69
 8002bd0:	f7ff ff1c 	bl	8002a0c <SD_SendCmd>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d801      	bhi.n	8002bde <SD_disk_initialize+0x12e>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e000      	b.n	8002be0 <SD_disk_initialize+0x130>
 8002bde:	2301      	movs	r3, #1
 8002be0:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8002be2:	7bbb      	ldrb	r3, [r7, #14]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d10e      	bne.n	8002c06 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8002be8:	2100      	movs	r1, #0
 8002bea:	2077      	movs	r0, #119	; 0x77
 8002bec:	f7ff ff0e 	bl	8002a0c <SD_SendCmd>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d80e      	bhi.n	8002c14 <SD_disk_initialize+0x164>
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	2069      	movs	r0, #105	; 0x69
 8002bfa:	f7ff ff07 	bl	8002a0c <SD_SendCmd>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d107      	bne.n	8002c14 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8002c04:	e00d      	b.n	8002c22 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8002c06:	2100      	movs	r1, #0
 8002c08:	2041      	movs	r0, #65	; 0x41
 8002c0a:	f7ff feff 	bl	8002a0c <SD_SendCmd>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8002c14:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <SD_disk_initialize+0x1cc>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1e1      	bne.n	8002be2 <SD_disk_initialize+0x132>
 8002c1e:	e000      	b.n	8002c22 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8002c20:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8002c22:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <SD_disk_initialize+0x1cc>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d007      	beq.n	8002c3c <SD_disk_initialize+0x18c>
 8002c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c30:	2050      	movs	r0, #80	; 0x50
 8002c32:	f7ff feeb 	bl	8002a0c <SD_SendCmd>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8002c40:	4a0f      	ldr	r2, [pc, #60]	; (8002c80 <SD_disk_initialize+0x1d0>)
 8002c42:	7bbb      	ldrb	r3, [r7, #14]
 8002c44:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8002c46:	f7ff fd85 	bl	8002754 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8002c4a:	f7ff fda9 	bl	80027a0 <SPI_RxByte>
  
  if (type) 
 8002c4e:	7bbb      	ldrb	r3, [r7, #14]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8002c54:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <SD_disk_initialize+0x1c8>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <SD_disk_initialize+0x1c8>)
 8002c62:	701a      	strb	r2, [r3, #0]
 8002c64:	e001      	b.n	8002c6a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8002c66:	f7ff fe2f 	bl	80028c8 <SD_PowerOff>
  }
  
  return Stat;
 8002c6a:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <SD_disk_initialize+0x1c8>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	b2db      	uxtb	r3, r3
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd90      	pop	{r4, r7, pc}
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	20012160 	.word	0x20012160
 8002c80:	2000038c 	.word	0x2000038c

08002c84 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8002c94:	2301      	movs	r3, #1
 8002c96:	e002      	b.n	8002c9e <SD_disk_status+0x1a>
  
  return Stat;
 8002c98:	4b04      	ldr	r3, [pc, #16]	; (8002cac <SD_disk_status+0x28>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	b2db      	uxtb	r3, r3
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	20000000 	.word	0x20000000

08002cb0 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d102      	bne.n	8002ccc <SD_disk_read+0x1c>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <SD_disk_read+0x20>
    return RES_PARERR;
 8002ccc:	2304      	movs	r3, #4
 8002cce:	e051      	b.n	8002d74 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8002cd0:	4b2a      	ldr	r3, [pc, #168]	; (8002d7c <SD_disk_read+0xcc>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e048      	b.n	8002d74 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8002ce2:	4b27      	ldr	r3, [pc, #156]	; (8002d80 <SD_disk_read+0xd0>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d102      	bne.n	8002cf4 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	025b      	lsls	r3, r3, #9
 8002cf2:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8002cf4:	f7ff fd22 	bl	800273c <SELECT>
  
  if (count == 1) 
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d111      	bne.n	8002d22 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	2051      	movs	r0, #81	; 0x51
 8002d02:	f7ff fe83 	bl	8002a0c <SD_SendCmd>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d129      	bne.n	8002d60 <SD_disk_read+0xb0>
 8002d0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d10:	68b8      	ldr	r0, [r7, #8]
 8002d12:	f7ff fdf1 	bl	80028f8 <SD_RxDataBlock>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d021      	beq.n	8002d60 <SD_disk_read+0xb0>
      count = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	e01e      	b.n	8002d60 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	2052      	movs	r0, #82	; 0x52
 8002d26:	f7ff fe71 	bl	8002a0c <SD_SendCmd>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d117      	bne.n	8002d60 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8002d30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d34:	68b8      	ldr	r0, [r7, #8]
 8002d36:	f7ff fddf 	bl	80028f8 <SD_RxDataBlock>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00a      	beq.n	8002d56 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002d46:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	603b      	str	r3, [r7, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1ed      	bne.n	8002d30 <SD_disk_read+0x80>
 8002d54:	e000      	b.n	8002d58 <SD_disk_read+0xa8>
          break;
 8002d56:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8002d58:	2100      	movs	r1, #0
 8002d5a:	204c      	movs	r0, #76	; 0x4c
 8002d5c:	f7ff fe56 	bl	8002a0c <SD_SendCmd>
    }
  }
  
  DESELECT();
 8002d60:	f7ff fcf8 	bl	8002754 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8002d64:	f7ff fd1c 	bl	80027a0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	bf14      	ite	ne
 8002d6e:	2301      	movne	r3, #1
 8002d70:	2300      	moveq	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20000000 	.word	0x20000000
 8002d80:	2000038c 	.word	0x2000038c

08002d84 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	607a      	str	r2, [r7, #4]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	4603      	mov	r3, r0
 8002d92:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d102      	bne.n	8002da0 <SD_disk_write+0x1c>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <SD_disk_write+0x20>
    return RES_PARERR;
 8002da0:	2304      	movs	r3, #4
 8002da2:	e06b      	b.n	8002e7c <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8002da4:	4b37      	ldr	r3, [pc, #220]	; (8002e84 <SD_disk_write+0x100>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e062      	b.n	8002e7c <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8002db6:	4b33      	ldr	r3, [pc, #204]	; (8002e84 <SD_disk_write+0x100>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <SD_disk_write+0x44>
    return RES_WRPRT;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e059      	b.n	8002e7c <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8002dc8:	4b2f      	ldr	r3, [pc, #188]	; (8002e88 <SD_disk_write+0x104>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	025b      	lsls	r3, r3, #9
 8002dd8:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8002dda:	f7ff fcaf 	bl	800273c <SELECT>
  
  if (count == 1) 
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d110      	bne.n	8002e06 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	2058      	movs	r0, #88	; 0x58
 8002de8:	f7ff fe10 	bl	8002a0c <SD_SendCmd>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d13a      	bne.n	8002e68 <SD_disk_write+0xe4>
 8002df2:	21fe      	movs	r1, #254	; 0xfe
 8002df4:	68b8      	ldr	r0, [r7, #8]
 8002df6:	f7ff fdb5 	bl	8002964 <SD_TxDataBlock>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d033      	beq.n	8002e68 <SD_disk_write+0xe4>
      count = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	e030      	b.n	8002e68 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8002e06:	4b20      	ldr	r3, [pc, #128]	; (8002e88 <SD_disk_write+0x104>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d007      	beq.n	8002e22 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8002e12:	2100      	movs	r1, #0
 8002e14:	2077      	movs	r0, #119	; 0x77
 8002e16:	f7ff fdf9 	bl	8002a0c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8002e1a:	6839      	ldr	r1, [r7, #0]
 8002e1c:	2057      	movs	r0, #87	; 0x57
 8002e1e:	f7ff fdf5 	bl	8002a0c <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	2059      	movs	r0, #89	; 0x59
 8002e26:	f7ff fdf1 	bl	8002a0c <SD_SendCmd>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d11b      	bne.n	8002e68 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8002e30:	21fc      	movs	r1, #252	; 0xfc
 8002e32:	68b8      	ldr	r0, [r7, #8]
 8002e34:	f7ff fd96 	bl	8002964 <SD_TxDataBlock>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002e44:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1ee      	bne.n	8002e30 <SD_disk_write+0xac>
 8002e52:	e000      	b.n	8002e56 <SD_disk_write+0xd2>
          break;
 8002e54:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8002e56:	21fd      	movs	r1, #253	; 0xfd
 8002e58:	2000      	movs	r0, #0
 8002e5a:	f7ff fd83 	bl	8002964 <SD_TxDataBlock>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <SD_disk_write+0xe4>
      {        
        count = 1;
 8002e64:	2301      	movs	r3, #1
 8002e66:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8002e68:	f7ff fc74 	bl	8002754 <DESELECT>
  SPI_RxByte();
 8002e6c:	f7ff fc98 	bl	80027a0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	bf14      	ite	ne
 8002e76:	2301      	movne	r3, #1
 8002e78:	2300      	moveq	r3, #0
 8002e7a:	b2db      	uxtb	r3, r3
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000000 	.word	0x20000000
 8002e88:	2000038c 	.word	0x2000038c

08002e8c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002e8c:	b590      	push	{r4, r7, lr}
 8002e8e:	b08b      	sub	sp, #44	; 0x2c
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	603a      	str	r2, [r7, #0]
 8002e96:	71fb      	strb	r3, [r7, #7]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8002ea6:	2304      	movs	r3, #4
 8002ea8:	e11b      	b.n	80030e2 <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8002eb0:	79bb      	ldrb	r3, [r7, #6]
 8002eb2:	2b05      	cmp	r3, #5
 8002eb4:	d129      	bne.n	8002f0a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d017      	beq.n	8002eee <SD_disk_ioctl+0x62>
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	dc1f      	bgt.n	8002f02 <SD_disk_ioctl+0x76>
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <SD_disk_ioctl+0x40>
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d00b      	beq.n	8002ee2 <SD_disk_ioctl+0x56>
 8002eca:	e01a      	b.n	8002f02 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8002ecc:	f7ff fd08 	bl	80028e0 <SD_CheckPower>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8002ed6:	f7ff fcf7 	bl	80028c8 <SD_PowerOff>
      res = RES_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002ee0:	e0fd      	b.n	80030de <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8002ee2:	f7ff fca5 	bl	8002830 <SD_PowerOn>
      res = RES_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002eec:	e0f7      	b.n	80030de <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	1c5c      	adds	r4, r3, #1
 8002ef2:	f7ff fcf5 	bl	80028e0 <SD_CheckPower>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8002efa:	2300      	movs	r3, #0
 8002efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002f00:	e0ed      	b.n	80030de <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8002f02:	2304      	movs	r3, #4
 8002f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002f08:	e0e9      	b.n	80030de <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8002f0a:	4b78      	ldr	r3, [pc, #480]	; (80030ec <SD_disk_ioctl+0x260>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e0e2      	b.n	80030e2 <SD_disk_ioctl+0x256>
    
    SELECT();
 8002f1c:	f7ff fc0e 	bl	800273c <SELECT>
    
    switch (ctrl) 
 8002f20:	79bb      	ldrb	r3, [r7, #6]
 8002f22:	2b0d      	cmp	r3, #13
 8002f24:	f200 80cc 	bhi.w	80030c0 <SD_disk_ioctl+0x234>
 8002f28:	a201      	add	r2, pc, #4	; (adr r2, 8002f30 <SD_disk_ioctl+0xa4>)
 8002f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2e:	bf00      	nop
 8002f30:	0800302b 	.word	0x0800302b
 8002f34:	08002f69 	.word	0x08002f69
 8002f38:	0800301b 	.word	0x0800301b
 8002f3c:	080030c1 	.word	0x080030c1
 8002f40:	080030c1 	.word	0x080030c1
 8002f44:	080030c1 	.word	0x080030c1
 8002f48:	080030c1 	.word	0x080030c1
 8002f4c:	080030c1 	.word	0x080030c1
 8002f50:	080030c1 	.word	0x080030c1
 8002f54:	080030c1 	.word	0x080030c1
 8002f58:	080030c1 	.word	0x080030c1
 8002f5c:	0800303d 	.word	0x0800303d
 8002f60:	08003061 	.word	0x08003061
 8002f64:	08003085 	.word	0x08003085
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8002f68:	2100      	movs	r1, #0
 8002f6a:	2049      	movs	r0, #73	; 0x49
 8002f6c:	f7ff fd4e 	bl	8002a0c <SD_SendCmd>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f040 80a8 	bne.w	80030c8 <SD_disk_ioctl+0x23c>
 8002f78:	f107 030c 	add.w	r3, r7, #12
 8002f7c:	2110      	movs	r1, #16
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fcba 	bl	80028f8 <SD_RxDataBlock>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 809e 	beq.w	80030c8 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 8002f8c:	7b3b      	ldrb	r3, [r7, #12]
 8002f8e:	099b      	lsrs	r3, r3, #6
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d10e      	bne.n	8002fb4 <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002f96:	7d7b      	ldrb	r3, [r7, #21]
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	7d3b      	ldrb	r3, [r7, #20]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	021b      	lsls	r3, r3, #8
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8002faa:	8bfb      	ldrh	r3, [r7, #30]
 8002fac:	029a      	lsls	r2, r3, #10
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	e02e      	b.n	8003012 <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002fb4:	7c7b      	ldrb	r3, [r7, #17]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	7dbb      	ldrb	r3, [r7, #22]
 8002fbe:	09db      	lsrs	r3, r3, #7
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	7d7b      	ldrb	r3, [r7, #21]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f003 0306 	and.w	r3, r3, #6
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002fdc:	7d3b      	ldrb	r3, [r7, #20]
 8002fde:	099b      	lsrs	r3, r3, #6
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	7cfb      	ldrb	r3, [r7, #19]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	4413      	add	r3, r2
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	7cbb      	ldrb	r3, [r7, #18]
 8002ff2:	029b      	lsls	r3, r3, #10
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3301      	adds	r3, #1
 8003002:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8003004:	8bfa      	ldrh	r2, [r7, #30]
 8003006:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800300a:	3b09      	subs	r3, #9
 800300c:	409a      	lsls	r2, r3
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8003018:	e056      	b.n	80030c8 <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003020:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003028:	e055      	b.n	80030d6 <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800302a:	f7ff fbe5 	bl	80027f8 <SD_ReadyWait>
 800302e:	4603      	mov	r3, r0
 8003030:	2bff      	cmp	r3, #255	; 0xff
 8003032:	d14b      	bne.n	80030cc <SD_disk_ioctl+0x240>
        res = RES_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800303a:	e047      	b.n	80030cc <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800303c:	2100      	movs	r1, #0
 800303e:	2049      	movs	r0, #73	; 0x49
 8003040:	f7ff fce4 	bl	8002a0c <SD_SendCmd>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d142      	bne.n	80030d0 <SD_disk_ioctl+0x244>
 800304a:	2110      	movs	r1, #16
 800304c:	6a38      	ldr	r0, [r7, #32]
 800304e:	f7ff fc53 	bl	80028f8 <SD_RxDataBlock>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d03b      	beq.n	80030d0 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800305e:	e037      	b.n	80030d0 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8003060:	2100      	movs	r1, #0
 8003062:	204a      	movs	r0, #74	; 0x4a
 8003064:	f7ff fcd2 	bl	8002a0c <SD_SendCmd>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d132      	bne.n	80030d4 <SD_disk_ioctl+0x248>
 800306e:	2110      	movs	r1, #16
 8003070:	6a38      	ldr	r0, [r7, #32]
 8003072:	f7ff fc41 	bl	80028f8 <SD_RxDataBlock>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d02b      	beq.n	80030d4 <SD_disk_ioctl+0x248>
        res = RES_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003082:	e027      	b.n	80030d4 <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8003084:	2100      	movs	r1, #0
 8003086:	207a      	movs	r0, #122	; 0x7a
 8003088:	f7ff fcc0 	bl	8002a0c <SD_SendCmd>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d116      	bne.n	80030c0 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 8003092:	2300      	movs	r3, #0
 8003094:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003098:	e00b      	b.n	80030b2 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 800309a:	6a3c      	ldr	r4, [r7, #32]
 800309c:	1c63      	adds	r3, r4, #1
 800309e:	623b      	str	r3, [r7, #32]
 80030a0:	f7ff fb7e 	bl	80027a0 <SPI_RxByte>
 80030a4:	4603      	mov	r3, r0
 80030a6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80030a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030ac:	3301      	adds	r3, #1
 80030ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80030b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d9ef      	bls.n	800309a <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 80030c0:	2304      	movs	r3, #4
 80030c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80030c6:	e006      	b.n	80030d6 <SD_disk_ioctl+0x24a>
      break;
 80030c8:	bf00      	nop
 80030ca:	e004      	b.n	80030d6 <SD_disk_ioctl+0x24a>
      break;
 80030cc:	bf00      	nop
 80030ce:	e002      	b.n	80030d6 <SD_disk_ioctl+0x24a>
      break;
 80030d0:	bf00      	nop
 80030d2:	e000      	b.n	80030d6 <SD_disk_ioctl+0x24a>
      break;
 80030d4:	bf00      	nop
    }
    
    DESELECT();
 80030d6:	f7ff fb3d 	bl	8002754 <DESELECT>
    SPI_RxByte();
 80030da:	f7ff fb61 	bl	80027a0 <SPI_RxByte>
  }
  
  return res;
 80030de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	372c      	adds	r7, #44	; 0x2c
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd90      	pop	{r4, r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000000 	.word	0x20000000

080030f0 <user_i2c_read>:
int8_t init_bme280(void);
void bme280_measure(void);

//----------------------------------------------------------------------------------------
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af02      	add	r7, sp, #8
 80030f6:	603a      	str	r2, [r7, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	4603      	mov	r3, r0
 80030fc:	71fb      	strb	r3, [r7, #7]
 80030fe:	460b      	mov	r3, r1
 8003100:	71bb      	strb	r3, [r7, #6]
 8003102:	4613      	mov	r3, r2
 8003104:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	b29b      	uxth	r3, r3
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	b299      	uxth	r1, r3
 800310e:	1dba      	adds	r2, r7, #6
 8003110:	230a      	movs	r3, #10
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	2301      	movs	r3, #1
 8003116:	4811      	ldr	r0, [pc, #68]	; (800315c <user_i2c_read+0x6c>)
 8003118:	f003 fae4 	bl	80066e4 <HAL_I2C_Master_Transmit>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <user_i2c_read+0x38>
 8003122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003126:	e014      	b.n	8003152 <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c3, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	b21b      	sxth	r3, r3
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	b21b      	sxth	r3, r3
 8003134:	b299      	uxth	r1, r3
 8003136:	88bb      	ldrh	r3, [r7, #4]
 8003138:	220a      	movs	r2, #10
 800313a:	9200      	str	r2, [sp, #0]
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	4807      	ldr	r0, [pc, #28]	; (800315c <user_i2c_read+0x6c>)
 8003140:	f003 fbce 	bl	80068e0 <HAL_I2C_Master_Receive>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <user_i2c_read+0x60>
 800314a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800314e:	e000      	b.n	8003152 <user_i2c_read+0x62>

  return 0;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	200080bc 	.word	0x200080bc

08003160 <user_delay_ms>:
//----------------------------------------------------------------------------------------
void user_delay_ms(uint32_t period)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f002 febb 	bl	8005ee4 <HAL_Delay>
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <user_i2c_write>:
//----------------------------------------------------------------------------------------
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af02      	add	r7, sp, #8
 800317e:	603a      	str	r2, [r7, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]
 8003186:	460b      	mov	r3, r1
 8003188:	71bb      	strb	r3, [r7, #6]
 800318a:	4613      	mov	r3, r2
 800318c:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 800318e:	88bb      	ldrh	r3, [r7, #4]
 8003190:	3301      	adds	r3, #1
 8003192:	4618      	mov	r0, r3
 8003194:	f013 fa94 	bl	80166c0 <malloc>
 8003198:	4603      	mov	r3, r0
 800319a:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 800319c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	3301      	adds	r3, #1
 80031a8:	88ba      	ldrh	r2, [r7, #4]
 80031aa:	6839      	ldr	r1, [r7, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f013 fa97 	bl	80166e0 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	b299      	uxth	r1, r3
 80031ba:	88bb      	ldrh	r3, [r7, #4]
 80031bc:	3301      	adds	r3, #1
 80031be:	b29b      	uxth	r3, r3
 80031c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031c4:	9200      	str	r2, [sp, #0]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4808      	ldr	r0, [pc, #32]	; (80031ec <user_i2c_write+0x74>)
 80031ca:	f003 fa8b 	bl	80066e4 <HAL_I2C_Master_Transmit>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <user_i2c_write+0x62>
 80031d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031d8:	e003      	b.n	80031e2 <user_i2c_write+0x6a>

  free(buf);
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f013 fa78 	bl	80166d0 <free>
  return 0;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	200080bc 	.word	0x200080bc

080031f0 <delay_us>:
//
//}


bool delay_us(uint16_t us)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 80031fa:	4b11      	ldr	r3, [pc, #68]	; (8003240 <delay_us+0x50>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2200      	movs	r2, #0
 8003200:	625a      	str	r2, [r3, #36]	; 0x24
	tim_val = us/10;
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	4a0f      	ldr	r2, [pc, #60]	; (8003244 <delay_us+0x54>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	08db      	lsrs	r3, r3, #3
 800320c:	b29b      	uxth	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <delay_us+0x58>)
 8003212:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim10);
 8003214:	480a      	ldr	r0, [pc, #40]	; (8003240 <delay_us+0x50>)
 8003216:	f007 fc29 	bl	800aa6c <HAL_TIM_Base_Start_IT>
	while(tim_val != 0)
 800321a:	bf00      	nop
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <delay_us+0x58>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1fb      	bne.n	800321c <delay_us+0x2c>
	{

	}
	HAL_TIM_Base_Stop_IT(&htim10);
 8003224:	4806      	ldr	r0, [pc, #24]	; (8003240 <delay_us+0x50>)
 8003226:	f007 fc91 	bl	800ab4c <HAL_TIM_Base_Stop_IT>
	tim_val = 0;
 800322a:	4b07      	ldr	r3, [pc, #28]	; (8003248 <delay_us+0x58>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
	int s = 99;
 8003230:	2363      	movs	r3, #99	; 0x63
 8003232:	60fb      	str	r3, [r7, #12]
	return true;
 8003234:	2301      	movs	r3, #1
//	{
//
//	}
//	//HAL_TIM_Base_Stop_IT(&htim10);
//	return true;
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	200091d8 	.word	0x200091d8
 8003244:	cccccccd 	.word	0xcccccccd
 8003248:	2000077c 	.word	0x2000077c

0800324c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003250:	f002 fe06 	bl	8005e60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003254:	f000 f8a4 	bl	80033a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003258:	f000 fb58 	bl	800390c <MX_GPIO_Init>
  MX_TIM3_Init();
 800325c:	f000 fae6 	bl	800382c <MX_TIM3_Init>
  MX_I2C3_Init();
 8003260:	f000 f90a 	bl	8003478 <MX_I2C3_Init>
  MX_TIM2_Init();
 8003264:	f000 fa96 	bl	8003794 <MX_TIM2_Init>
  MX_TIM10_Init();
 8003268:	f000 fb2e 	bl	80038c8 <MX_TIM10_Init>
  MX_SPI1_Init();
 800326c:	f000 f9d4 	bl	8003618 <MX_SPI1_Init>
  MX_FATFS_Init();
 8003270:	f009 fbd6 	bl	800ca20 <MX_FATFS_Init>
  MX_TIM1_Init();
 8003274:	f000 fa3c 	bl	80036f0 <MX_TIM1_Init>
  MX_RTC_Init();
 8003278:	f000 f940 	bl	80034fc <MX_RTC_Init>
  MX_SPI2_Init();
 800327c:	f000 fa02 	bl	8003684 <MX_SPI2_Init>
  MX_RNG_Init();
 8003280:	f000 f928 	bl	80034d4 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);		//  This TIM3 using for calculate how many time all tasks was running.
 8003284:	482a      	ldr	r0, [pc, #168]	; (8003330 <main+0xe4>)
 8003286:	f007 fbf1 	bl	800aa6c <HAL_TIM_Base_Start_IT>

  //HAL_TIM_Base_Start_IT(&htim2);
  //HAL_TIM_Base_Start_IT(&htim10);			// Using for generate us delays
  HAL_TIM_Base_Start_IT(&htim1);			// Blink Green LED
 800328a:	482a      	ldr	r0, [pc, #168]	; (8003334 <main+0xe8>)
 800328c:	f007 fbee 	bl	800aa6c <HAL_TIM_Base_Start_IT>


  LCD_init();
 8003290:	f002 fd12 	bl	8005cb8 <LCD_init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003294:	f00e fc64 	bl	8011b60 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (10, sizeof(QUEUE_t), &UARTQueue_attributes);
 8003298:	4a27      	ldr	r2, [pc, #156]	; (8003338 <main+0xec>)
 800329a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800329e:	200a      	movs	r0, #10
 80032a0:	f00e fe98 	bl	8011fd4 <osMessageQueueNew>
 80032a4:	4603      	mov	r3, r0
 80032a6:	4a25      	ldr	r2, [pc, #148]	; (800333c <main+0xf0>)
 80032a8:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80032aa:	4a25      	ldr	r2, [pc, #148]	; (8003340 <main+0xf4>)
 80032ac:	2100      	movs	r1, #0
 80032ae:	4825      	ldr	r0, [pc, #148]	; (8003344 <main+0xf8>)
 80032b0:	f00e fca0 	bl	8011bf4 <osThreadNew>
 80032b4:	4603      	mov	r3, r0
 80032b6:	4a24      	ldr	r2, [pc, #144]	; (8003348 <main+0xfc>)
 80032b8:	6013      	str	r3, [r2, #0]

  /* creation of Blue_LED_Blink */
  Blue_LED_BlinkHandle = osThreadNew(Start_Blue_LED_Blink, NULL, &Blue_LED_Blink_attributes);
 80032ba:	4a24      	ldr	r2, [pc, #144]	; (800334c <main+0x100>)
 80032bc:	2100      	movs	r1, #0
 80032be:	4824      	ldr	r0, [pc, #144]	; (8003350 <main+0x104>)
 80032c0:	f00e fc98 	bl	8011bf4 <osThreadNew>
 80032c4:	4603      	mov	r3, r0
 80032c6:	4a23      	ldr	r2, [pc, #140]	; (8003354 <main+0x108>)
 80032c8:	6013      	str	r3, [r2, #0]

  /* creation of Show_Resources */
  Show_ResourcesHandle = osThreadNew(Start_Show_Resources, NULL, &Show_Resources_attributes);
 80032ca:	4a23      	ldr	r2, [pc, #140]	; (8003358 <main+0x10c>)
 80032cc:	2100      	movs	r1, #0
 80032ce:	4823      	ldr	r0, [pc, #140]	; (800335c <main+0x110>)
 80032d0:	f00e fc90 	bl	8011bf4 <osThreadNew>
 80032d4:	4603      	mov	r3, r0
 80032d6:	4a22      	ldr	r2, [pc, #136]	; (8003360 <main+0x114>)
 80032d8:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(Start_UART_Task, NULL, &UART_Task_attributes);
 80032da:	4a22      	ldr	r2, [pc, #136]	; (8003364 <main+0x118>)
 80032dc:	2100      	movs	r1, #0
 80032de:	4822      	ldr	r0, [pc, #136]	; (8003368 <main+0x11c>)
 80032e0:	f00e fc88 	bl	8011bf4 <osThreadNew>
 80032e4:	4603      	mov	r3, r0
 80032e6:	4a21      	ldr	r2, [pc, #132]	; (800336c <main+0x120>)
 80032e8:	6013      	str	r3, [r2, #0]

  /* creation of bme280 */
  bme280Handle = osThreadNew(Start_bme280, NULL, &bme280_attributes);
 80032ea:	4a21      	ldr	r2, [pc, #132]	; (8003370 <main+0x124>)
 80032ec:	2100      	movs	r1, #0
 80032ee:	4821      	ldr	r0, [pc, #132]	; (8003374 <main+0x128>)
 80032f0:	f00e fc80 	bl	8011bf4 <osThreadNew>
 80032f4:	4603      	mov	r3, r0
 80032f6:	4a20      	ldr	r2, [pc, #128]	; (8003378 <main+0x12c>)
 80032f8:	6013      	str	r3, [r2, #0]

  /* creation of AM2302 */
  AM2302Handle = osThreadNew(Start_AM2302, NULL, &AM2302_attributes);
 80032fa:	4a20      	ldr	r2, [pc, #128]	; (800337c <main+0x130>)
 80032fc:	2100      	movs	r1, #0
 80032fe:	4820      	ldr	r0, [pc, #128]	; (8003380 <main+0x134>)
 8003300:	f00e fc78 	bl	8011bf4 <osThreadNew>
 8003304:	4603      	mov	r3, r0
 8003306:	4a1f      	ldr	r2, [pc, #124]	; (8003384 <main+0x138>)
 8003308:	6013      	str	r3, [r2, #0]

  /* creation of SD_CARD */
  SD_CARDHandle = osThreadNew(Start_SD_CARD, NULL, &SD_CARD_attributes);
 800330a:	4a1f      	ldr	r2, [pc, #124]	; (8003388 <main+0x13c>)
 800330c:	2100      	movs	r1, #0
 800330e:	481f      	ldr	r0, [pc, #124]	; (800338c <main+0x140>)
 8003310:	f00e fc70 	bl	8011bf4 <osThreadNew>
 8003314:	4603      	mov	r3, r0
 8003316:	4a1e      	ldr	r2, [pc, #120]	; (8003390 <main+0x144>)
 8003318:	6013      	str	r3, [r2, #0]

  /* creation of LCD */
  LCDHandle = osThreadNew(Start_LCD, NULL, &LCD_attributes);
 800331a:	4a1e      	ldr	r2, [pc, #120]	; (8003394 <main+0x148>)
 800331c:	2100      	movs	r1, #0
 800331e:	481e      	ldr	r0, [pc, #120]	; (8003398 <main+0x14c>)
 8003320:	f00e fc68 	bl	8011bf4 <osThreadNew>
 8003324:	4603      	mov	r3, r0
 8003326:	4a1d      	ldr	r2, [pc, #116]	; (800339c <main+0x150>)
 8003328:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800332a:	f00e fc3d 	bl	8011ba8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800332e:	e7fe      	b.n	800332e <main+0xe2>
 8003330:	2000dba8 	.word	0x2000dba8
 8003334:	20010d98 	.word	0x20010d98
 8003338:	08019c00 	.word	0x08019c00
 800333c:	2000a3a4 	.word	0x2000a3a4
 8003340:	08019ae0 	.word	0x08019ae0
 8003344:	08003c09 	.word	0x08003c09
 8003348:	20008078 	.word	0x20008078
 800334c:	08019b04 	.word	0x08019b04
 8003350:	08003c1d 	.word	0x08003c1d
 8003354:	200091b8 	.word	0x200091b8
 8003358:	08019b28 	.word	0x08019b28
 800335c:	08003e99 	.word	0x08003e99
 8003360:	20010ffc 	.word	0x20010ffc
 8003364:	08019b4c 	.word	0x08019b4c
 8003368:	08004109 	.word	0x08004109
 800336c:	2000dbf0 	.word	0x2000dbf0
 8003370:	08019b70 	.word	0x08019b70
 8003374:	08004165 	.word	0x08004165
 8003378:	200132e4 	.word	0x200132e4
 800337c:	08019b94 	.word	0x08019b94
 8003380:	080044dd 	.word	0x080044dd
 8003384:	20010ff4 	.word	0x20010ff4
 8003388:	08019bb8 	.word	0x08019bb8
 800338c:	08004899 	.word	0x08004899
 8003390:	2000a220 	.word	0x2000a220
 8003394:	08019bdc 	.word	0x08019bdc
 8003398:	08004955 	.word	0x08004955
 800339c:	2000fbf4 	.word	0x2000fbf4

080033a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b094      	sub	sp, #80	; 0x50
 80033a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033a6:	f107 0320 	add.w	r3, r7, #32
 80033aa:	2230      	movs	r2, #48	; 0x30
 80033ac:	2100      	movs	r1, #0
 80033ae:	4618      	mov	r0, r3
 80033b0:	f013 f9a4 	bl	80166fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033b4:	f107 030c 	add.w	r3, r7, #12
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	60da      	str	r2, [r3, #12]
 80033c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80033c4:	2300      	movs	r3, #0
 80033c6:	60bb      	str	r3, [r7, #8]
 80033c8:	4b29      	ldr	r3, [pc, #164]	; (8003470 <SystemClock_Config+0xd0>)
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	4a28      	ldr	r2, [pc, #160]	; (8003470 <SystemClock_Config+0xd0>)
 80033ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033d2:	6413      	str	r3, [r2, #64]	; 0x40
 80033d4:	4b26      	ldr	r3, [pc, #152]	; (8003470 <SystemClock_Config+0xd0>)
 80033d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033e0:	2300      	movs	r3, #0
 80033e2:	607b      	str	r3, [r7, #4]
 80033e4:	4b23      	ldr	r3, [pc, #140]	; (8003474 <SystemClock_Config+0xd4>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4a22      	ldr	r2, [pc, #136]	; (8003474 <SystemClock_Config+0xd4>)
 80033ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	4b20      	ldr	r3, [pc, #128]	; (8003474 <SystemClock_Config+0xd4>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033f8:	607b      	str	r3, [r7, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80033fc:	2305      	movs	r3, #5
 80033fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003400:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003404:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003406:	2301      	movs	r3, #1
 8003408:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800340a:	2302      	movs	r3, #2
 800340c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800340e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003412:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8003414:	2308      	movs	r3, #8
 8003416:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003418:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800341c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800341e:	2302      	movs	r3, #2
 8003420:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8003422:	2307      	movs	r3, #7
 8003424:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003426:	f107 0320 	add.w	r3, r7, #32
 800342a:	4618      	mov	r0, r3
 800342c:	f005 fc3c 	bl	8008ca8 <HAL_RCC_OscConfig>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003436:	f001 fb01 	bl	8004a3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800343a:	230f      	movs	r3, #15
 800343c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800343e:	2302      	movs	r3, #2
 8003440:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003442:	2300      	movs	r3, #0
 8003444:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003446:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800344a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800344c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003450:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003452:	f107 030c 	add.w	r3, r7, #12
 8003456:	2105      	movs	r1, #5
 8003458:	4618      	mov	r0, r3
 800345a:	f005 fe9d 	bl	8009198 <HAL_RCC_ClockConfig>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003464:	f001 faea 	bl	8004a3c <Error_Handler>
  }
}
 8003468:	bf00      	nop
 800346a:	3750      	adds	r7, #80	; 0x50
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40023800 	.word	0x40023800
 8003474:	40007000 	.word	0x40007000

08003478 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800347c:	4b12      	ldr	r3, [pc, #72]	; (80034c8 <MX_I2C3_Init+0x50>)
 800347e:	4a13      	ldr	r2, [pc, #76]	; (80034cc <MX_I2C3_Init+0x54>)
 8003480:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8003482:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <MX_I2C3_Init+0x50>)
 8003484:	4a12      	ldr	r2, [pc, #72]	; (80034d0 <MX_I2C3_Init+0x58>)
 8003486:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003488:	4b0f      	ldr	r3, [pc, #60]	; (80034c8 <MX_I2C3_Init+0x50>)
 800348a:	2200      	movs	r2, #0
 800348c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800348e:	4b0e      	ldr	r3, [pc, #56]	; (80034c8 <MX_I2C3_Init+0x50>)
 8003490:	2200      	movs	r2, #0
 8003492:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003494:	4b0c      	ldr	r3, [pc, #48]	; (80034c8 <MX_I2C3_Init+0x50>)
 8003496:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800349a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800349c:	4b0a      	ldr	r3, [pc, #40]	; (80034c8 <MX_I2C3_Init+0x50>)
 800349e:	2200      	movs	r2, #0
 80034a0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80034a2:	4b09      	ldr	r3, [pc, #36]	; (80034c8 <MX_I2C3_Init+0x50>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034a8:	4b07      	ldr	r3, [pc, #28]	; (80034c8 <MX_I2C3_Init+0x50>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034ae:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <MX_I2C3_Init+0x50>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80034b4:	4804      	ldr	r0, [pc, #16]	; (80034c8 <MX_I2C3_Init+0x50>)
 80034b6:	f002 ffd1 	bl	800645c <HAL_I2C_Init>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80034c0:	f001 fabc 	bl	8004a3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80034c4:	bf00      	nop
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	200080bc 	.word	0x200080bc
 80034cc:	40005c00 	.word	0x40005c00
 80034d0:	000186a0 	.word	0x000186a0

080034d4 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80034d8:	4b06      	ldr	r3, [pc, #24]	; (80034f4 <MX_RNG_Init+0x20>)
 80034da:	4a07      	ldr	r2, [pc, #28]	; (80034f8 <MX_RNG_Init+0x24>)
 80034dc:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80034de:	4805      	ldr	r0, [pc, #20]	; (80034f4 <MX_RNG_Init+0x20>)
 80034e0:	f006 f956 	bl	8009790 <HAL_RNG_Init>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80034ea:	f001 faa7 	bl	8004a3c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80034ee:	bf00      	nop
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20010fe4 	.word	0x20010fe4
 80034f8:	50060800 	.word	0x50060800

080034fc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b090      	sub	sp, #64	; 0x40
 8003500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003502:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003506:	2200      	movs	r2, #0
 8003508:	601a      	str	r2, [r3, #0]
 800350a:	605a      	str	r2, [r3, #4]
 800350c:	609a      	str	r2, [r3, #8]
 800350e:	60da      	str	r2, [r3, #12]
 8003510:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003512:	2300      	movs	r3, #0
 8003514:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8003516:	463b      	mov	r3, r7
 8003518:	2228      	movs	r2, #40	; 0x28
 800351a:	2100      	movs	r1, #0
 800351c:	4618      	mov	r0, r3
 800351e:	f013 f8ed 	bl	80166fc <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003522:	4b3b      	ldr	r3, [pc, #236]	; (8003610 <MX_RTC_Init+0x114>)
 8003524:	4a3b      	ldr	r2, [pc, #236]	; (8003614 <MX_RTC_Init+0x118>)
 8003526:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003528:	4b39      	ldr	r3, [pc, #228]	; (8003610 <MX_RTC_Init+0x114>)
 800352a:	2200      	movs	r2, #0
 800352c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800352e:	4b38      	ldr	r3, [pc, #224]	; (8003610 <MX_RTC_Init+0x114>)
 8003530:	227f      	movs	r2, #127	; 0x7f
 8003532:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003534:	4b36      	ldr	r3, [pc, #216]	; (8003610 <MX_RTC_Init+0x114>)
 8003536:	22ff      	movs	r2, #255	; 0xff
 8003538:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800353a:	4b35      	ldr	r3, [pc, #212]	; (8003610 <MX_RTC_Init+0x114>)
 800353c:	2200      	movs	r2, #0
 800353e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003540:	4b33      	ldr	r3, [pc, #204]	; (8003610 <MX_RTC_Init+0x114>)
 8003542:	2200      	movs	r2, #0
 8003544:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003546:	4b32      	ldr	r3, [pc, #200]	; (8003610 <MX_RTC_Init+0x114>)
 8003548:	2200      	movs	r2, #0
 800354a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800354c:	4830      	ldr	r0, [pc, #192]	; (8003610 <MX_RTC_Init+0x114>)
 800354e:	f006 f9b4 	bl	80098ba <HAL_RTC_Init>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	d001      	beq.n	800355c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8003558:	f001 fa70 	bl	8004a3c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x23;
 800355c:	2323      	movs	r3, #35	; 0x23
 800355e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x59;
 8003562:	2359      	movs	r3, #89	; 0x59
 8003564:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x45;
 8003568:	2345      	movs	r3, #69	; 0x45
 800356a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800356e:	2300      	movs	r3, #0
 8003570:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003572:	2300      	movs	r3, #0
 8003574:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8003576:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800357a:	2201      	movs	r2, #1
 800357c:	4619      	mov	r1, r3
 800357e:	4824      	ldr	r0, [pc, #144]	; (8003610 <MX_RTC_Init+0x114>)
 8003580:	f006 fa2c 	bl	80099dc <HAL_RTC_SetTime>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800358a:	f001 fa57 	bl	8004a3c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 800358e:	2302      	movs	r3, #2
 8003590:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_DECEMBER;
 8003594:	2312      	movs	r3, #18
 8003596:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x28;
 800359a:	2328      	movs	r3, #40	; 0x28
 800359c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80035a0:	2300      	movs	r3, #0
 80035a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80035a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035aa:	2201      	movs	r2, #1
 80035ac:	4619      	mov	r1, r3
 80035ae:	4818      	ldr	r0, [pc, #96]	; (8003610 <MX_RTC_Init+0x114>)
 80035b0:	f006 fb2f 	bl	8009c12 <HAL_RTC_SetDate>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80035ba:	f001 fa3f 	bl	8004a3c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80035be:	2300      	movs	r3, #0
 80035c0:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80035c2:	2300      	movs	r3, #0
 80035c4:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 80035c6:	2310      	movs	r3, #16
 80035c8:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80035ca:	2300      	movs	r3, #0
 80035cc:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80035ce:	2300      	movs	r3, #0
 80035d0:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80035d2:	2300      	movs	r3, #0
 80035d4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80035da:	2300      	movs	r3, #0
 80035dc:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 80035de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80035e2:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = RTC_WEEKDAY_MONDAY;
 80035e4:	2301      	movs	r3, #1
 80035e6:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80035ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80035f0:	463b      	mov	r3, r7
 80035f2:	2201      	movs	r2, #1
 80035f4:	4619      	mov	r1, r3
 80035f6:	4806      	ldr	r0, [pc, #24]	; (8003610 <MX_RTC_Init+0x114>)
 80035f8:	f006 fc01 	bl	8009dfe <HAL_RTC_SetAlarm>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8003602:	f001 fa1b 	bl	8004a3c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003606:	bf00      	nop
 8003608:	3740      	adds	r7, #64	; 0x40
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	2000fbf8 	.word	0x2000fbf8
 8003614:	40002800 	.word	0x40002800

08003618 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800361c:	4b17      	ldr	r3, [pc, #92]	; (800367c <MX_SPI1_Init+0x64>)
 800361e:	4a18      	ldr	r2, [pc, #96]	; (8003680 <MX_SPI1_Init+0x68>)
 8003620:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003622:	4b16      	ldr	r3, [pc, #88]	; (800367c <MX_SPI1_Init+0x64>)
 8003624:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003628:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800362a:	4b14      	ldr	r3, [pc, #80]	; (800367c <MX_SPI1_Init+0x64>)
 800362c:	2200      	movs	r2, #0
 800362e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003630:	4b12      	ldr	r3, [pc, #72]	; (800367c <MX_SPI1_Init+0x64>)
 8003632:	2200      	movs	r2, #0
 8003634:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003636:	4b11      	ldr	r3, [pc, #68]	; (800367c <MX_SPI1_Init+0x64>)
 8003638:	2200      	movs	r2, #0
 800363a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800363c:	4b0f      	ldr	r3, [pc, #60]	; (800367c <MX_SPI1_Init+0x64>)
 800363e:	2200      	movs	r2, #0
 8003640:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003642:	4b0e      	ldr	r3, [pc, #56]	; (800367c <MX_SPI1_Init+0x64>)
 8003644:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003648:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800364a:	4b0c      	ldr	r3, [pc, #48]	; (800367c <MX_SPI1_Init+0x64>)
 800364c:	2220      	movs	r2, #32
 800364e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003650:	4b0a      	ldr	r3, [pc, #40]	; (800367c <MX_SPI1_Init+0x64>)
 8003652:	2200      	movs	r2, #0
 8003654:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003656:	4b09      	ldr	r3, [pc, #36]	; (800367c <MX_SPI1_Init+0x64>)
 8003658:	2200      	movs	r2, #0
 800365a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800365c:	4b07      	ldr	r3, [pc, #28]	; (800367c <MX_SPI1_Init+0x64>)
 800365e:	2200      	movs	r2, #0
 8003660:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003662:	4b06      	ldr	r3, [pc, #24]	; (800367c <MX_SPI1_Init+0x64>)
 8003664:	220a      	movs	r2, #10
 8003666:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003668:	4804      	ldr	r0, [pc, #16]	; (800367c <MX_SPI1_Init+0x64>)
 800366a:	f006 fd70 	bl	800a14e <HAL_SPI_Init>
 800366e:	4603      	mov	r3, r0
 8003670:	2b00      	cmp	r3, #0
 8003672:	d001      	beq.n	8003678 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003674:	f001 f9e2 	bl	8004a3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003678:	bf00      	nop
 800367a:	bd80      	pop	{r7, pc}
 800367c:	20011000 	.word	0x20011000
 8003680:	40013000 	.word	0x40013000

08003684 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003688:	4b17      	ldr	r3, [pc, #92]	; (80036e8 <MX_SPI2_Init+0x64>)
 800368a:	4a18      	ldr	r2, [pc, #96]	; (80036ec <MX_SPI2_Init+0x68>)
 800368c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800368e:	4b16      	ldr	r3, [pc, #88]	; (80036e8 <MX_SPI2_Init+0x64>)
 8003690:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003694:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003696:	4b14      	ldr	r3, [pc, #80]	; (80036e8 <MX_SPI2_Init+0x64>)
 8003698:	2200      	movs	r2, #0
 800369a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800369c:	4b12      	ldr	r3, [pc, #72]	; (80036e8 <MX_SPI2_Init+0x64>)
 800369e:	2200      	movs	r2, #0
 80036a0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036a2:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <MX_SPI2_Init+0x64>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036a8:	4b0f      	ldr	r3, [pc, #60]	; (80036e8 <MX_SPI2_Init+0x64>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80036ae:	4b0e      	ldr	r3, [pc, #56]	; (80036e8 <MX_SPI2_Init+0x64>)
 80036b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036b4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036b6:	4b0c      	ldr	r3, [pc, #48]	; (80036e8 <MX_SPI2_Init+0x64>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80036bc:	4b0a      	ldr	r3, [pc, #40]	; (80036e8 <MX_SPI2_Init+0x64>)
 80036be:	2200      	movs	r2, #0
 80036c0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80036c2:	4b09      	ldr	r3, [pc, #36]	; (80036e8 <MX_SPI2_Init+0x64>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036c8:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <MX_SPI2_Init+0x64>)
 80036ca:	2200      	movs	r2, #0
 80036cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80036ce:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <MX_SPI2_Init+0x64>)
 80036d0:	220a      	movs	r2, #10
 80036d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80036d4:	4804      	ldr	r0, [pc, #16]	; (80036e8 <MX_SPI2_Init+0x64>)
 80036d6:	f006 fd3a 	bl	800a14e <HAL_SPI_Init>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80036e0:	f001 f9ac 	bl	8004a3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80036e4:	bf00      	nop
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	20009160 	.word	0x20009160
 80036ec:	40003800 	.word	0x40003800

080036f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036f6:	f107 0308 	add.w	r3, r7, #8
 80036fa:	2200      	movs	r2, #0
 80036fc:	601a      	str	r2, [r3, #0]
 80036fe:	605a      	str	r2, [r3, #4]
 8003700:	609a      	str	r2, [r3, #8]
 8003702:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003704:	463b      	mov	r3, r7
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]
 800370a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800370c:	4b1f      	ldr	r3, [pc, #124]	; (800378c <MX_TIM1_Init+0x9c>)
 800370e:	4a20      	ldr	r2, [pc, #128]	; (8003790 <MX_TIM1_Init+0xa0>)
 8003710:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16800-1;
 8003712:	4b1e      	ldr	r3, [pc, #120]	; (800378c <MX_TIM1_Init+0x9c>)
 8003714:	f244 129f 	movw	r2, #16799	; 0x419f
 8003718:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800371a:	4b1c      	ldr	r3, [pc, #112]	; (800378c <MX_TIM1_Init+0x9c>)
 800371c:	2200      	movs	r2, #0
 800371e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8003720:	4b1a      	ldr	r3, [pc, #104]	; (800378c <MX_TIM1_Init+0x9c>)
 8003722:	f242 7210 	movw	r2, #10000	; 0x2710
 8003726:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003728:	4b18      	ldr	r3, [pc, #96]	; (800378c <MX_TIM1_Init+0x9c>)
 800372a:	2200      	movs	r2, #0
 800372c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800372e:	4b17      	ldr	r3, [pc, #92]	; (800378c <MX_TIM1_Init+0x9c>)
 8003730:	2200      	movs	r2, #0
 8003732:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003734:	4b15      	ldr	r3, [pc, #84]	; (800378c <MX_TIM1_Init+0x9c>)
 8003736:	2200      	movs	r2, #0
 8003738:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800373a:	4814      	ldr	r0, [pc, #80]	; (800378c <MX_TIM1_Init+0x9c>)
 800373c:	f007 f946 	bl	800a9cc <HAL_TIM_Base_Init>
 8003740:	4603      	mov	r3, r0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d001      	beq.n	800374a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8003746:	f001 f979 	bl	8004a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800374a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800374e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003750:	f107 0308 	add.w	r3, r7, #8
 8003754:	4619      	mov	r1, r3
 8003756:	480d      	ldr	r0, [pc, #52]	; (800378c <MX_TIM1_Init+0x9c>)
 8003758:	f007 fb2f 	bl	800adba <HAL_TIM_ConfigClockSource>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003762:	f001 f96b 	bl	8004a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003766:	2320      	movs	r3, #32
 8003768:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800376a:	2300      	movs	r3, #0
 800376c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800376e:	463b      	mov	r3, r7
 8003770:	4619      	mov	r1, r3
 8003772:	4806      	ldr	r0, [pc, #24]	; (800378c <MX_TIM1_Init+0x9c>)
 8003774:	f007 fd4a 	bl	800b20c <HAL_TIMEx_MasterConfigSynchronization>
 8003778:	4603      	mov	r3, r0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800377e:	f001 f95d 	bl	8004a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003782:	bf00      	nop
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	20010d98 	.word	0x20010d98
 8003790:	40010000 	.word	0x40010000

08003794 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800379a:	f107 0308 	add.w	r3, r7, #8
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
 80037a2:	605a      	str	r2, [r3, #4]
 80037a4:	609a      	str	r2, [r3, #8]
 80037a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037a8:	463b      	mov	r3, r7
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80037b0:	4b1d      	ldr	r3, [pc, #116]	; (8003828 <MX_TIM2_Init+0x94>)
 80037b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 80037b8:	4b1b      	ldr	r3, [pc, #108]	; (8003828 <MX_TIM2_Init+0x94>)
 80037ba:	220a      	movs	r2, #10
 80037bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037be:	4b1a      	ldr	r3, [pc, #104]	; (8003828 <MX_TIM2_Init+0x94>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80037c4:	4b18      	ldr	r3, [pc, #96]	; (8003828 <MX_TIM2_Init+0x94>)
 80037c6:	220a      	movs	r2, #10
 80037c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037ca:	4b17      	ldr	r3, [pc, #92]	; (8003828 <MX_TIM2_Init+0x94>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037d0:	4b15      	ldr	r3, [pc, #84]	; (8003828 <MX_TIM2_Init+0x94>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037d6:	4814      	ldr	r0, [pc, #80]	; (8003828 <MX_TIM2_Init+0x94>)
 80037d8:	f007 f8f8 	bl	800a9cc <HAL_TIM_Base_Init>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d001      	beq.n	80037e6 <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80037e2:	f001 f92b 	bl	8004a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037ea:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80037ec:	f107 0308 	add.w	r3, r7, #8
 80037f0:	4619      	mov	r1, r3
 80037f2:	480d      	ldr	r0, [pc, #52]	; (8003828 <MX_TIM2_Init+0x94>)
 80037f4:	f007 fae1 	bl	800adba <HAL_TIM_ConfigClockSource>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d001      	beq.n	8003802 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80037fe:	f001 f91d 	bl	8004a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003802:	2300      	movs	r3, #0
 8003804:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003806:	2300      	movs	r3, #0
 8003808:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800380a:	463b      	mov	r3, r7
 800380c:	4619      	mov	r1, r3
 800380e:	4806      	ldr	r0, [pc, #24]	; (8003828 <MX_TIM2_Init+0x94>)
 8003810:	f007 fcfc 	bl	800b20c <HAL_TIMEx_MasterConfigSynchronization>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d001      	beq.n	800381e <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 800381a:	f001 f90f 	bl	8004a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800381e:	bf00      	nop
 8003820:	3718      	adds	r7, #24
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20011118 	.word	0x20011118

0800382c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003832:	f107 0308 	add.w	r3, r7, #8
 8003836:	2200      	movs	r2, #0
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	605a      	str	r2, [r3, #4]
 800383c:	609a      	str	r2, [r3, #8]
 800383e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003840:	463b      	mov	r3, r7
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003848:	4b1d      	ldr	r3, [pc, #116]	; (80038c0 <MX_TIM3_Init+0x94>)
 800384a:	4a1e      	ldr	r2, [pc, #120]	; (80038c4 <MX_TIM3_Init+0x98>)
 800384c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 800384e:	4b1c      	ldr	r3, [pc, #112]	; (80038c0 <MX_TIM3_Init+0x94>)
 8003850:	f240 3247 	movw	r2, #839	; 0x347
 8003854:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003856:	4b1a      	ldr	r3, [pc, #104]	; (80038c0 <MX_TIM3_Init+0x94>)
 8003858:	2200      	movs	r2, #0
 800385a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 800385c:	4b18      	ldr	r3, [pc, #96]	; (80038c0 <MX_TIM3_Init+0x94>)
 800385e:	220a      	movs	r2, #10
 8003860:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003862:	4b17      	ldr	r3, [pc, #92]	; (80038c0 <MX_TIM3_Init+0x94>)
 8003864:	2200      	movs	r2, #0
 8003866:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003868:	4b15      	ldr	r3, [pc, #84]	; (80038c0 <MX_TIM3_Init+0x94>)
 800386a:	2280      	movs	r2, #128	; 0x80
 800386c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800386e:	4814      	ldr	r0, [pc, #80]	; (80038c0 <MX_TIM3_Init+0x94>)
 8003870:	f007 f8ac 	bl	800a9cc <HAL_TIM_Base_Init>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800387a:	f001 f8df 	bl	8004a3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800387e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003882:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003884:	f107 0308 	add.w	r3, r7, #8
 8003888:	4619      	mov	r1, r3
 800388a:	480d      	ldr	r0, [pc, #52]	; (80038c0 <MX_TIM3_Init+0x94>)
 800388c:	f007 fa95 	bl	800adba <HAL_TIM_ConfigClockSource>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003896:	f001 f8d1 	bl	8004a3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800389a:	2300      	movs	r3, #0
 800389c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800389e:	2300      	movs	r3, #0
 80038a0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038a2:	463b      	mov	r3, r7
 80038a4:	4619      	mov	r1, r3
 80038a6:	4806      	ldr	r0, [pc, #24]	; (80038c0 <MX_TIM3_Init+0x94>)
 80038a8:	f007 fcb0 	bl	800b20c <HAL_TIMEx_MasterConfigSynchronization>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80038b2:	f001 f8c3 	bl	8004a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80038b6:	bf00      	nop
 80038b8:	3718      	adds	r7, #24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	2000dba8 	.word	0x2000dba8
 80038c4:	40000400 	.word	0x40000400

080038c8 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80038cc:	4b0d      	ldr	r3, [pc, #52]	; (8003904 <MX_TIM10_Init+0x3c>)
 80038ce:	4a0e      	ldr	r2, [pc, #56]	; (8003908 <MX_TIM10_Init+0x40>)
 80038d0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 80038d2:	4b0c      	ldr	r3, [pc, #48]	; (8003904 <MX_TIM10_Init+0x3c>)
 80038d4:	22a7      	movs	r2, #167	; 0xa7
 80038d6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038d8:	4b0a      	ldr	r3, [pc, #40]	; (8003904 <MX_TIM10_Init+0x3c>)
 80038da:	2200      	movs	r2, #0
 80038dc:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10-1;
 80038de:	4b09      	ldr	r3, [pc, #36]	; (8003904 <MX_TIM10_Init+0x3c>)
 80038e0:	2209      	movs	r2, #9
 80038e2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038e4:	4b07      	ldr	r3, [pc, #28]	; (8003904 <MX_TIM10_Init+0x3c>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038ea:	4b06      	ldr	r3, [pc, #24]	; (8003904 <MX_TIM10_Init+0x3c>)
 80038ec:	2280      	movs	r2, #128	; 0x80
 80038ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80038f0:	4804      	ldr	r0, [pc, #16]	; (8003904 <MX_TIM10_Init+0x3c>)
 80038f2:	f007 f86b 	bl	800a9cc <HAL_TIM_Base_Init>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d001      	beq.n	8003900 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 80038fc:	f001 f89e 	bl	8004a3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003900:	bf00      	nop
 8003902:	bd80      	pop	{r7, pc}
 8003904:	200091d8 	.word	0x200091d8
 8003908:	40014400 	.word	0x40014400

0800390c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b08c      	sub	sp, #48	; 0x30
 8003910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003912:	f107 031c 	add.w	r3, r7, #28
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]
 800391a:	605a      	str	r2, [r3, #4]
 800391c:	609a      	str	r2, [r3, #8]
 800391e:	60da      	str	r2, [r3, #12]
 8003920:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003922:	2300      	movs	r3, #0
 8003924:	61bb      	str	r3, [r7, #24]
 8003926:	4bb2      	ldr	r3, [pc, #712]	; (8003bf0 <MX_GPIO_Init+0x2e4>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	4ab1      	ldr	r2, [pc, #708]	; (8003bf0 <MX_GPIO_Init+0x2e4>)
 800392c:	f043 0310 	orr.w	r3, r3, #16
 8003930:	6313      	str	r3, [r2, #48]	; 0x30
 8003932:	4baf      	ldr	r3, [pc, #700]	; (8003bf0 <MX_GPIO_Init+0x2e4>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003936:	f003 0310 	and.w	r3, r3, #16
 800393a:	61bb      	str	r3, [r7, #24]
 800393c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800393e:	2300      	movs	r3, #0
 8003940:	617b      	str	r3, [r7, #20]
 8003942:	4bab      	ldr	r3, [pc, #684]	; (8003bf0 <MX_GPIO_Init+0x2e4>)
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	4aaa      	ldr	r2, [pc, #680]	; (8003bf0 <MX_GPIO_Init+0x2e4>)
 8003948:	f043 0304 	orr.w	r3, r3, #4
 800394c:	6313      	str	r3, [r2, #48]	; 0x30
 800394e:	4ba8      	ldr	r3, [pc, #672]	; (8003bf0 <MX_GPIO_Init+0x2e4>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	f003 0304 	and.w	r3, r3, #4
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	613b      	str	r3, [r7, #16]
 800395e:	4ba4      	ldr	r3, [pc, #656]	; (8003bf0 <MX_GPIO_Init+0x2e4>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	4aa3      	ldr	r2, [pc, #652]	; (8003bf0 <MX_GPIO_Init+0x2e4>)
 8003964:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003968:	6313      	str	r3, [r2, #48]	; 0x30
 800396a:	4ba1      	ldr	r3, [pc, #644]	; (8003bf0 <MX_GPIO_Init+0x2e4>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003976:	2300      	movs	r3, #0
 8003978:	60fb      	str	r3, [r7, #12]
 800397a:	4b9d      	ldr	r3, [pc, #628]	; (8003bf0 <MX_GPIO_Init+0x2e4>)
 800397c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397e:	4a9c      	ldr	r2, [pc, #624]	; (8003bf0 <MX_GPIO_Init+0x2e4>)
 8003980:	f043 0301 	orr.w	r3, r3, #1
 8003984:	6313      	str	r3, [r2, #48]	; 0x30
 8003986:	4b9a      	ldr	r3, [pc, #616]	; (8003bf0 <MX_GPIO_Init+0x2e4>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	f003 0301 	and.w	r3, r3, #1
 800398e:	60fb      	str	r3, [r7, #12]
 8003990:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003992:	2300      	movs	r3, #0
 8003994:	60bb      	str	r3, [r7, #8]
 8003996:	4b96      	ldr	r3, [pc, #600]	; (8003bf0 <MX_GPIO_Init+0x2e4>)
 8003998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399a:	4a95      	ldr	r2, [pc, #596]	; (8003bf0 <MX_GPIO_Init+0x2e4>)
 800399c:	f043 0302 	orr.w	r3, r3, #2
 80039a0:	6313      	str	r3, [r2, #48]	; 0x30
 80039a2:	4b93      	ldr	r3, [pc, #588]	; (8003bf0 <MX_GPIO_Init+0x2e4>)
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	60bb      	str	r3, [r7, #8]
 80039ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80039ae:	2300      	movs	r3, #0
 80039b0:	607b      	str	r3, [r7, #4]
 80039b2:	4b8f      	ldr	r3, [pc, #572]	; (8003bf0 <MX_GPIO_Init+0x2e4>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	4a8e      	ldr	r2, [pc, #568]	; (8003bf0 <MX_GPIO_Init+0x2e4>)
 80039b8:	f043 0308 	orr.w	r3, r3, #8
 80039bc:	6313      	str	r3, [r2, #48]	; 0x30
 80039be:	4b8c      	ldr	r3, [pc, #560]	; (8003bf0 <MX_GPIO_Init+0x2e4>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	f003 0308 	and.w	r3, r3, #8
 80039c6:	607b      	str	r3, [r7, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 80039ca:	2200      	movs	r2, #0
 80039cc:	217c      	movs	r1, #124	; 0x7c
 80039ce:	4889      	ldr	r0, [pc, #548]	; (8003bf4 <MX_GPIO_Init+0x2e8>)
 80039d0:	f002 fd2a 	bl	8006428 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80039d4:	2201      	movs	r2, #1
 80039d6:	2101      	movs	r1, #1
 80039d8:	4887      	ldr	r0, [pc, #540]	; (8003bf8 <MX_GPIO_Init+0x2ec>)
 80039da:	f002 fd25 	bl	8006428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AM2302_Pin|CS_microSD_Pin, GPIO_PIN_RESET);
 80039de:	2200      	movs	r2, #0
 80039e0:	2142      	movs	r1, #66	; 0x42
 80039e2:	4885      	ldr	r0, [pc, #532]	; (8003bf8 <MX_GPIO_Init+0x2ec>)
 80039e4:	f002 fd20 	bl	8006428 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80039e8:	2200      	movs	r2, #0
 80039ea:	f24f 0110 	movw	r1, #61456	; 0xf010
 80039ee:	4883      	ldr	r0, [pc, #524]	; (8003bfc <MX_GPIO_Init+0x2f0>)
 80039f0:	f002 fd1a 	bl	8006428 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80039f4:	2200      	movs	r2, #0
 80039f6:	f44f 71c0 	mov.w	r1, #384	; 0x180
 80039fa:	4881      	ldr	r0, [pc, #516]	; (8003c00 <MX_GPIO_Init+0x2f4>)
 80039fc:	f002 fd14 	bl	8006428 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_I2C_SPI_Pin CS_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin;
 8003a00:	231c      	movs	r3, #28
 8003a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a04:	2301      	movs	r3, #1
 8003a06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a10:	f107 031c 	add.w	r3, r7, #28
 8003a14:	4619      	mov	r1, r3
 8003a16:	4877      	ldr	r0, [pc, #476]	; (8003bf4 <MX_GPIO_Init+0x2e8>)
 8003a18:	f002 fb6a 	bl	80060f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = RESET_LCD_Pin|DC_LCD_Pin;
 8003a1c:	2360      	movs	r3, #96	; 0x60
 8003a1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a20:	2301      	movs	r3, #1
 8003a22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a2c:	f107 031c 	add.w	r3, r7, #28
 8003a30:	4619      	mov	r1, r3
 8003a32:	4870      	ldr	r0, [pc, #448]	; (8003bf4 <MX_GPIO_Init+0x2e8>)
 8003a34:	f002 fb5c 	bl	80060f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8003a38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003a46:	f107 031c 	add.w	r3, r7, #28
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	486a      	ldr	r0, [pc, #424]	; (8003bf8 <MX_GPIO_Init+0x2ec>)
 8003a4e:	f002 fb4f 	bl	80060f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin AM2302_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|AM2302_Pin;
 8003a52:	2303      	movs	r3, #3
 8003a54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a56:	2301      	movs	r3, #1
 8003a58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a62:	f107 031c 	add.w	r3, r7, #28
 8003a66:	4619      	mov	r1, r3
 8003a68:	4863      	ldr	r0, [pc, #396]	; (8003bf8 <MX_GPIO_Init+0x2ec>)
 8003a6a:	f002 fb41 	bl	80060f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003a6e:	2308      	movs	r3, #8
 8003a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a72:	2302      	movs	r3, #2
 8003a74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a7e:	2305      	movs	r3, #5
 8003a80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003a82:	f107 031c 	add.w	r3, r7, #28
 8003a86:	4619      	mov	r1, r3
 8003a88:	485b      	ldr	r0, [pc, #364]	; (8003bf8 <MX_GPIO_Init+0x2ec>)
 8003a8a:	f002 fb31 	bl	80060f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003a92:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003a96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003a9c:	f107 031c 	add.w	r3, r7, #28
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	4858      	ldr	r0, [pc, #352]	; (8003c04 <MX_GPIO_Init+0x2f8>)
 8003aa4:	f002 fb24 	bl	80060f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003aa8:	2310      	movs	r3, #16
 8003aaa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aac:	2302      	movs	r3, #2
 8003aae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003ab8:	2306      	movs	r3, #6
 8003aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003abc:	f107 031c 	add.w	r3, r7, #28
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4850      	ldr	r0, [pc, #320]	; (8003c04 <MX_GPIO_Init+0x2f8>)
 8003ac4:	f002 fb14 	bl	80060f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003ac8:	2304      	movs	r3, #4
 8003aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003acc:	2300      	movs	r3, #0
 8003ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003ad4:	f107 031c 	add.w	r3, r7, #28
 8003ad8:	4619      	mov	r1, r3
 8003ada:	4849      	ldr	r0, [pc, #292]	; (8003c00 <MX_GPIO_Init+0x2f4>)
 8003adc:	f002 fb08 	bl	80060f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8003ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aea:	2300      	movs	r3, #0
 8003aec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aee:	2300      	movs	r3, #0
 8003af0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003af2:	2305      	movs	r3, #5
 8003af4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8003af6:	f107 031c 	add.w	r3, r7, #28
 8003afa:	4619      	mov	r1, r3
 8003afc:	4840      	ldr	r0, [pc, #256]	; (8003c00 <MX_GPIO_Init+0x2f4>)
 8003afe:	f002 faf7 	bl	80060f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003b02:	f24f 0310 	movw	r3, #61456	; 0xf010
 8003b06:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b10:	2300      	movs	r3, #0
 8003b12:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b14:	f107 031c 	add.w	r3, r7, #28
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4838      	ldr	r0, [pc, #224]	; (8003bfc <MX_GPIO_Init+0x2f0>)
 8003b1c:	f002 fae8 	bl	80060f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_microSD_Pin */
  GPIO_InitStruct.Pin = CS_microSD_Pin;
 8003b20:	2340      	movs	r3, #64	; 0x40
 8003b22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b24:	2301      	movs	r3, #1
 8003b26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_microSD_GPIO_Port, &GPIO_InitStruct);
 8003b30:	f107 031c 	add.w	r3, r7, #28
 8003b34:	4619      	mov	r1, r3
 8003b36:	4830      	ldr	r0, [pc, #192]	; (8003bf8 <MX_GPIO_Init+0x2ec>)
 8003b38:	f002 fada 	bl	80060f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003b3c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b42:	2302      	movs	r3, #2
 8003b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b46:	2300      	movs	r3, #0
 8003b48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003b4e:	2306      	movs	r3, #6
 8003b50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b52:	f107 031c 	add.w	r3, r7, #28
 8003b56:	4619      	mov	r1, r3
 8003b58:	4827      	ldr	r0, [pc, #156]	; (8003bf8 <MX_GPIO_Init+0x2ec>)
 8003b5a:	f002 fac9 	bl	80060f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003b5e:	2320      	movs	r3, #32
 8003b60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b62:	2300      	movs	r3, #0
 8003b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003b6a:	f107 031c 	add.w	r3, r7, #28
 8003b6e:	4619      	mov	r1, r3
 8003b70:	4822      	ldr	r0, [pc, #136]	; (8003bfc <MX_GPIO_Init+0x2f0>)
 8003b72:	f002 fabd 	bl	80060f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003b76:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003b7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b7c:	2312      	movs	r3, #18
 8003b7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b80:	2301      	movs	r3, #1
 8003b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b84:	2300      	movs	r3, #0
 8003b86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b88:	2304      	movs	r3, #4
 8003b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b8c:	f107 031c 	add.w	r3, r7, #28
 8003b90:	4619      	mov	r1, r3
 8003b92:	481b      	ldr	r0, [pc, #108]	; (8003c00 <MX_GPIO_Init+0x2f4>)
 8003b94:	f002 faac 	bl	80060f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8003b98:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003baa:	f107 031c 	add.w	r3, r7, #28
 8003bae:	4619      	mov	r1, r3
 8003bb0:	4813      	ldr	r0, [pc, #76]	; (8003c00 <MX_GPIO_Init+0x2f4>)
 8003bb2:	f002 fa9d 	bl	80060f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8003bc2:	f107 031c 	add.w	r3, r7, #28
 8003bc6:	4619      	mov	r1, r3
 8003bc8:	480a      	ldr	r0, [pc, #40]	; (8003bf4 <MX_GPIO_Init+0x2e8>)
 8003bca:	f002 fa91 	bl	80060f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003bce:	2302      	movs	r3, #2
 8003bd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003bd2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003bdc:	f107 031c 	add.w	r3, r7, #28
 8003be0:	4619      	mov	r1, r3
 8003be2:	4804      	ldr	r0, [pc, #16]	; (8003bf4 <MX_GPIO_Init+0x2e8>)
 8003be4:	f002 fa84 	bl	80060f0 <HAL_GPIO_Init>

}
 8003be8:	bf00      	nop
 8003bea:	3730      	adds	r7, #48	; 0x30
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	40021000 	.word	0x40021000
 8003bf8:	40020800 	.word	0x40020800
 8003bfc:	40020c00 	.word	0x40020c00
 8003c00:	40020400 	.word	0x40020400
 8003c04:	40020000 	.word	0x40020000

08003c08 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003c10:	f011 fef0 	bl	80159f4 <MX_USB_DEVICE_Init>

  for(;;)
  {
//	  osDelay(1000);
//	  ILI9341_Draw_Text( "TEST 1234567890 !!!", 5,0, WHITE, 2, BLACK);
	  osDelay(10);
 8003c14:	200a      	movs	r0, #10
 8003c16:	f00e f87f 	bl	8011d18 <osDelay>
 8003c1a:	e7fb      	b.n	8003c14 <StartDefaultTask+0xc>

08003c1c <Start_Blue_LED_Blink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Blue_LED_Blink */
void Start_Blue_LED_Blink(void *argument)
{
 8003c1c:	b5b0      	push	{r4, r5, r7, lr}
 8003c1e:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 8003c22:	af00      	add	r7, sp, #0
 8003c24:	1d3b      	adds	r3, r7, #4
 8003c26:	6018      	str	r0, [r3, #0]
	 * For STM32F407 discovery dev board needs remove R26, and connect battery to VBAT (near R26).
	 * Also, need solder the LF Crystal and two capacitors.
	 */

	// 1. Set time
	  RTC_TimeTypeDef sTime = {0};
 8003c28:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	605a      	str	r2, [r3, #4]
 8003c32:	609a      	str	r2, [r3, #8]
 8003c34:	60da      	str	r2, [r3, #12]
 8003c36:	611a      	str	r2, [r3, #16]
//	  sTime.Minutes = 33;
//	  sTime.Seconds = 00;
//	  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
	  // Set date

	  RTC_DateTypeDef sDate = {0};
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
//	  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
	  /////////////////////////////////////////////////////////////////////

	QUEUE_t msg;												// Make a queue

	char buff[50] = {0};
 8003c3e:	f107 0314 	add.w	r3, r7, #20
 8003c42:	2200      	movs	r2, #0
 8003c44:	601a      	str	r2, [r3, #0]
 8003c46:	3304      	adds	r3, #4
 8003c48:	222e      	movs	r2, #46	; 0x2e
 8003c4a:	2100      	movs	r1, #0
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f012 fd55 	bl	80166fc <memset>
	char buf[5] = {0};
 8003c52:	f107 030c 	add.w	r3, r7, #12
 8003c56:	2200      	movs	r2, #0
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	711a      	strb	r2, [r3, #4]
	char str_end_of_line[4] = {'\r','\n','\0'};
 8003c5e:	f107 0308 	add.w	r3, r7, #8
 8003c62:	f640 220d 	movw	r2, #2573	; 0xa0d
 8003c66:	601a      	str	r2, [r3, #0]
	for(;;)
	{
//		speed_test_LCD(5);

		// Blue LED blink
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 8003c68:	2201      	movs	r2, #1
 8003c6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c6e:	4883      	ldr	r0, [pc, #524]	; (8003e7c <Start_Blue_LED_Blink+0x260>)
 8003c70:	f002 fbda 	bl	8006428 <HAL_GPIO_WritePin>
		osDelay(100);
 8003c74:	2064      	movs	r0, #100	; 0x64
 8003c76:	f00e f84f 	bl	8011d18 <osDelay>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET);
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c80:	487e      	ldr	r0, [pc, #504]	; (8003e7c <Start_Blue_LED_Blink+0x260>)
 8003c82:	f002 fbd1 	bl	8006428 <HAL_GPIO_WritePin>
		osDelay(900);
 8003c86:	f44f 7061 	mov.w	r0, #900	; 0x384
 8003c8a:	f00e f845 	bl	8011d18 <osDelay>

		// RTC part
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);						// Get time (write in sDime struct)
 8003c8e:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8003c92:	2200      	movs	r2, #0
 8003c94:	4619      	mov	r1, r3
 8003c96:	487a      	ldr	r0, [pc, #488]	; (8003e80 <Start_Blue_LED_Blink+0x264>)
 8003c98:	f005 ff5d 	bl	8009b56 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);						// Get data (write in sDime struct)
 8003c9c:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	4876      	ldr	r0, [pc, #472]	; (8003e80 <Start_Blue_LED_Blink+0x264>)
 8003ca6:	f006 f85b 	bl	8009d60 <HAL_RTC_GetDate>

		memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
 8003caa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003cae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f012 fd21 	bl	80166fc <memset>
		memset(buff, 0, sizeof(buff));
 8003cba:	f107 0314 	add.w	r3, r7, #20
 8003cbe:	2232      	movs	r2, #50	; 0x32
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f012 fd1a 	bl	80166fc <memset>

		strcat(msg.Buf, "RTC DATA AND TIME >>>>>>>    " );
 8003cc8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7fc fa7f 	bl	80001d0 <strlen>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003cda:	4413      	add	r3, r2
 8003cdc:	4a69      	ldr	r2, [pc, #420]	; (8003e84 <Start_Blue_LED_Blink+0x268>)
 8003cde:	461d      	mov	r5, r3
 8003ce0:	4614      	mov	r4, r2
 8003ce2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003ce4:	6028      	str	r0, [r5, #0]
 8003ce6:	6069      	str	r1, [r5, #4]
 8003ce8:	60aa      	str	r2, [r5, #8]
 8003cea:	60eb      	str	r3, [r5, #12]
 8003cec:	cc07      	ldmia	r4!, {r0, r1, r2}
 8003cee:	6128      	str	r0, [r5, #16]
 8003cf0:	6169      	str	r1, [r5, #20]
 8003cf2:	61aa      	str	r2, [r5, #24]
 8003cf4:	8823      	ldrh	r3, [r4, #0]
 8003cf6:	83ab      	strh	r3, [r5, #28]

		// Date
		itoa(sDate.Year, buf, 10);
 8003cf8:	f897 344b 	ldrb.w	r3, [r7, #1099]	; 0x44b
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f107 030c 	add.w	r3, r7, #12
 8003d02:	220a      	movs	r2, #10
 8003d04:	4619      	mov	r1, r3
 8003d06:	f012 fcd5 	bl	80166b4 <itoa>
		strcat(msg.Buf, buf);
 8003d0a:	f107 020c 	add.w	r2, r7, #12
 8003d0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d12:	4611      	mov	r1, r2
 8003d14:	4618      	mov	r0, r3
 8003d16:	f013 faea 	bl	80172ee <strcat>

		itoa(sDate.Month, buf, 10);
 8003d1a:	f897 3449 	ldrb.w	r3, [r7, #1097]	; 0x449
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f107 030c 	add.w	r3, r7, #12
 8003d24:	220a      	movs	r2, #10
 8003d26:	4619      	mov	r1, r3
 8003d28:	f012 fcc4 	bl	80166b4 <itoa>
		strcat(msg.Buf, "-");
 8003d2c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fc fa4d 	bl	80001d0 <strlen>
 8003d36:	4603      	mov	r3, r0
 8003d38:	461a      	mov	r2, r3
 8003d3a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d3e:	4413      	add	r3, r2
 8003d40:	4951      	ldr	r1, [pc, #324]	; (8003e88 <Start_Blue_LED_Blink+0x26c>)
 8003d42:	461a      	mov	r2, r3
 8003d44:	460b      	mov	r3, r1
 8003d46:	881b      	ldrh	r3, [r3, #0]
 8003d48:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003d4a:	f107 020c 	add.w	r2, r7, #12
 8003d4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d52:	4611      	mov	r1, r2
 8003d54:	4618      	mov	r0, r3
 8003d56:	f013 faca 	bl	80172ee <strcat>

		itoa(sDate.Date, buf, 10);
 8003d5a:	f897 344a 	ldrb.w	r3, [r7, #1098]	; 0x44a
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f107 030c 	add.w	r3, r7, #12
 8003d64:	220a      	movs	r2, #10
 8003d66:	4619      	mov	r1, r3
 8003d68:	f012 fca4 	bl	80166b4 <itoa>
		strcat(msg.Buf, "-");
 8003d6c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7fc fa2d 	bl	80001d0 <strlen>
 8003d76:	4603      	mov	r3, r0
 8003d78:	461a      	mov	r2, r3
 8003d7a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d7e:	4413      	add	r3, r2
 8003d80:	4941      	ldr	r1, [pc, #260]	; (8003e88 <Start_Blue_LED_Blink+0x26c>)
 8003d82:	461a      	mov	r2, r3
 8003d84:	460b      	mov	r3, r1
 8003d86:	881b      	ldrh	r3, [r3, #0]
 8003d88:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003d8a:	f107 020c 	add.w	r2, r7, #12
 8003d8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d92:	4611      	mov	r1, r2
 8003d94:	4618      	mov	r0, r3
 8003d96:	f013 faaa 	bl	80172ee <strcat>

		strcat(msg.Buf, " | ");
 8003d9a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fc fa16 	bl	80001d0 <strlen>
 8003da4:	4603      	mov	r3, r0
 8003da6:	461a      	mov	r2, r3
 8003da8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003dac:	4413      	add	r3, r2
 8003dae:	4a37      	ldr	r2, [pc, #220]	; (8003e8c <Start_Blue_LED_Blink+0x270>)
 8003db0:	6810      	ldr	r0, [r2, #0]
 8003db2:	6018      	str	r0, [r3, #0]

		// Time
		itoa(sTime.Hours, buf, 10);
 8003db4:	f897 344c 	ldrb.w	r3, [r7, #1100]	; 0x44c
 8003db8:	4618      	mov	r0, r3
 8003dba:	f107 030c 	add.w	r3, r7, #12
 8003dbe:	220a      	movs	r2, #10
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	f012 fc77 	bl	80166b4 <itoa>
		strcat(msg.Buf, buf);
 8003dc6:	f107 020c 	add.w	r2, r7, #12
 8003dca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003dce:	4611      	mov	r1, r2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f013 fa8c 	bl	80172ee <strcat>

		itoa(sTime.Minutes, buf, 10);
 8003dd6:	f897 344d 	ldrb.w	r3, [r7, #1101]	; 0x44d
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f107 030c 	add.w	r3, r7, #12
 8003de0:	220a      	movs	r2, #10
 8003de2:	4619      	mov	r1, r3
 8003de4:	f012 fc66 	bl	80166b4 <itoa>
		strcat(msg.Buf, ":");
 8003de8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7fc f9ef 	bl	80001d0 <strlen>
 8003df2:	4603      	mov	r3, r0
 8003df4:	461a      	mov	r2, r3
 8003df6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003dfa:	4413      	add	r3, r2
 8003dfc:	4924      	ldr	r1, [pc, #144]	; (8003e90 <Start_Blue_LED_Blink+0x274>)
 8003dfe:	461a      	mov	r2, r3
 8003e00:	460b      	mov	r3, r1
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003e06:	f107 020c 	add.w	r2, r7, #12
 8003e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e0e:	4611      	mov	r1, r2
 8003e10:	4618      	mov	r0, r3
 8003e12:	f013 fa6c 	bl	80172ee <strcat>

		itoa(sTime.Seconds, buf, 10);
 8003e16:	f897 344e 	ldrb.w	r3, [r7, #1102]	; 0x44e
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f107 030c 	add.w	r3, r7, #12
 8003e20:	220a      	movs	r2, #10
 8003e22:	4619      	mov	r1, r3
 8003e24:	f012 fc46 	bl	80166b4 <itoa>
		strcat(msg.Buf, ":");
 8003e28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fc f9cf 	bl	80001d0 <strlen>
 8003e32:	4603      	mov	r3, r0
 8003e34:	461a      	mov	r2, r3
 8003e36:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e3a:	4413      	add	r3, r2
 8003e3c:	4914      	ldr	r1, [pc, #80]	; (8003e90 <Start_Blue_LED_Blink+0x274>)
 8003e3e:	461a      	mov	r2, r3
 8003e40:	460b      	mov	r3, r1
 8003e42:	881b      	ldrh	r3, [r3, #0]
 8003e44:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003e46:	f107 020c 	add.w	r2, r7, #12
 8003e4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f013 fa4c 	bl	80172ee <strcat>

		strcat(msg.Buf, str_end_of_line);
 8003e56:	f107 0208 	add.w	r2, r7, #8
 8003e5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e5e:	4611      	mov	r1, r2
 8003e60:	4618      	mov	r0, r3
 8003e62:	f013 fa44 	bl	80172ee <strcat>
		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 8003e66:	4b0b      	ldr	r3, [pc, #44]	; (8003e94 <Start_Blue_LED_Blink+0x278>)
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003e6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003e72:	2200      	movs	r2, #0
 8003e74:	f00e f922 	bl	80120bc <osMessageQueuePut>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 8003e78:	e6f6      	b.n	8003c68 <Start_Blue_LED_Blink+0x4c>
 8003e7a:	bf00      	nop
 8003e7c:	40020c00 	.word	0x40020c00
 8003e80:	2000fbf8 	.word	0x2000fbf8
 8003e84:	08019830 	.word	0x08019830
 8003e88:	08019850 	.word	0x08019850
 8003e8c:	08019854 	.word	0x08019854
 8003e90:	08019858 	.word	0x08019858
 8003e94:	2000a3a4 	.word	0x2000a3a4

08003e98 <Start_Show_Resources>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Show_Resources */
void Start_Show_Resources(void *argument)
{
 8003e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e9a:	f2ad 4d84 	subw	sp, sp, #1156	; 0x484
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	1d3b      	adds	r3, r7, #4
 8003ea2:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_Show_Resources */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(5000);												// Every 5 second task management will print data
 8003ea4:	f241 3088 	movw	r0, #5000	; 0x1388
 8003ea8:	f00d ff36 	bl	8011d18 <osDelay>

	  char str_end_of_line[3] = {'\r','\n'};
 8003eac:	4a8d      	ldr	r2, [pc, #564]	; (80040e4 <Start_Show_Resources+0x24c>)
 8003eae:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8003eb2:	6812      	ldr	r2, [r2, #0]
 8003eb4:	4611      	mov	r1, r2
 8003eb6:	8019      	strh	r1, [r3, #0]
 8003eb8:	3302      	adds	r3, #2
 8003eba:	0c12      	lsrs	r2, r2, #16
 8003ebc:	701a      	strb	r2, [r3, #0]
	  char str_sig = '-';
 8003ebe:	232d      	movs	r3, #45	; 0x2d
 8003ec0:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
	  char buff[10] = {0};
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8003eca:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 8003ece:	2200      	movs	r2, #0
 8003ed0:	601a      	str	r2, [r3, #0]
 8003ed2:	809a      	strh	r2, [r3, #4]

	  QUEUE_t msg;												// Make a queue
	  memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 8003ed4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ed8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003edc:	2100      	movs	r1, #0
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f012 fc0c 	bl	80166fc <memset>
	  strcat(msg.Buf, ">>>>> Free heap memory: ");				// Add string to another (Total heap)
 8003ee4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fc f971 	bl	80001d0 <strlen>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ef6:	4413      	add	r3, r2
 8003ef8:	4a7b      	ldr	r2, [pc, #492]	; (80040e8 <Start_Show_Resources+0x250>)
 8003efa:	461d      	mov	r5, r3
 8003efc:	4614      	mov	r4, r2
 8003efe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f00:	6028      	str	r0, [r5, #0]
 8003f02:	6069      	str	r1, [r5, #4]
 8003f04:	60aa      	str	r2, [r5, #8]
 8003f06:	60eb      	str	r3, [r5, #12]
 8003f08:	cc03      	ldmia	r4!, {r0, r1}
 8003f0a:	6128      	str	r0, [r5, #16]
 8003f0c:	6169      	str	r1, [r5, #20]
 8003f0e:	7823      	ldrb	r3, [r4, #0]
 8003f10:	762b      	strb	r3, [r5, #24]

	  freemem = xPortGetFreeHeapSize();							// Function return how many free memory.
 8003f12:	f011 fca7 	bl	8015864 <xPortGetFreeHeapSize>
 8003f16:	4603      	mov	r3, r0
 8003f18:	461a      	mov	r2, r3
 8003f1a:	4b74      	ldr	r3, [pc, #464]	; (80040ec <Start_Show_Resources+0x254>)
 8003f1c:	601a      	str	r2, [r3, #0]
	  itoa(freemem, buff, 10);
 8003f1e:	4b73      	ldr	r3, [pc, #460]	; (80040ec <Start_Show_Resources+0x254>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8003f26:	220a      	movs	r2, #10
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f012 fbc3 	bl	80166b4 <itoa>
	  strcat(msg.Buf, buff);
 8003f2e:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8003f32:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f36:	4611      	mov	r1, r2
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f013 f9d8 	bl	80172ee <strcat>
	  strcat(msg.Buf, str_end_of_line);
 8003f3e:	f207 4274 	addw	r2, r7, #1140	; 0x474
 8003f42:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f46:	4611      	mov	r1, r2
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f013 f9d0 	bl	80172ee <strcat>

	  // add a hat
	  strcat(msg.Buf, "| TASK NAME           | STATUS |   PRIOR	|  STACK  |    NUM  |\n\r\0");
 8003f4e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7fc f93c 	bl	80001d0 <strlen>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f60:	4413      	add	r3, r2
 8003f62:	4a63      	ldr	r2, [pc, #396]	; (80040f0 <Start_Show_Resources+0x258>)
 8003f64:	4618      	mov	r0, r3
 8003f66:	4611      	mov	r1, r2
 8003f68:	2341      	movs	r3, #65	; 0x41
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f012 fbb8 	bl	80166e0 <memcpy>

	  vTaskList(str_management_memory_str);						// Fill in str_management_memory_str array management task information
 8003f70:	4860      	ldr	r0, [pc, #384]	; (80040f4 <Start_Show_Resources+0x25c>)
 8003f72:	f010 fc2b 	bl	80147cc <vTaskList>

	  // Finding the  end of string
	  uint16_t buffer_size = 0;
 8003f76:	2300      	movs	r3, #0
 8003f78:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  while(msg.Buf[buffer_size] != '\0')
 8003f7c:	e004      	b.n	8003f88 <Start_Show_Resources+0xf0>
	  {
	  	buffer_size ++;
 8003f7e:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 8003f82:	3301      	adds	r3, #1
 8003f84:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  while(msg.Buf[buffer_size] != '\0')
 8003f88:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 8003f8c:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003f90:	5cd3      	ldrb	r3, [r2, r3]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1f3      	bne.n	8003f7e <Start_Show_Resources+0xe6>
	  }

	  // Add str_management_memory_str to queue string
	  int i = 0;
 8003f96:	2300      	movs	r3, #0
 8003f98:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8003fa2:	e011      	b.n	8003fc8 <Start_Show_Resources+0x130>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8003fa4:	f8b7 247e 	ldrh.w	r2, [r7, #1150]	; 0x47e
 8003fa8:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8003fac:	4413      	add	r3, r2
 8003fae:	4951      	ldr	r1, [pc, #324]	; (80040f4 <Start_Show_Resources+0x25c>)
 8003fb0:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8003fb4:	440a      	add	r2, r1
 8003fb6:	7811      	ldrb	r1, [r2, #0]
 8003fb8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003fbc:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003fbe:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8003fc8:	4a4a      	ldr	r2, [pc, #296]	; (80040f4 <Start_Show_Resources+0x25c>)
 8003fca:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8003fce:	4413      	add	r3, r2
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1e6      	bne.n	8003fa4 <Start_Show_Resources+0x10c>
	  }

	  // add a hat
	  char str_line[] = {"-----------------------\n\r"};
 8003fd6:	4b48      	ldr	r3, [pc, #288]	; (80040f8 <Start_Show_Resources+0x260>)
 8003fd8:	f207 444c 	addw	r4, r7, #1100	; 0x44c
 8003fdc:	461d      	mov	r5, r3
 8003fde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003fe0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003fe2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003fe6:	c403      	stmia	r4!, {r0, r1}
 8003fe8:	8022      	strh	r2, [r4, #0]
	  char str_head_2[] = {"| TASK NAME           | ABS TIME |              TASK TIME% |\n\r"};
 8003fea:	f107 030c 	add.w	r3, r7, #12
 8003fee:	4a43      	ldr	r2, [pc, #268]	; (80040fc <Start_Show_Resources+0x264>)
 8003ff0:	461c      	mov	r4, r3
 8003ff2:	4615      	mov	r5, r2
 8003ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ff8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ffa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004000:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004004:	c407      	stmia	r4!, {r0, r1, r2}
 8004006:	8023      	strh	r3, [r4, #0]
 8004008:	3402      	adds	r4, #2
 800400a:	0c1b      	lsrs	r3, r3, #16
 800400c:	7023      	strb	r3, [r4, #0]
	  strcat(msg.Buf, str_line);
 800400e:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8004012:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004016:	4611      	mov	r1, r2
 8004018:	4618      	mov	r0, r3
 800401a:	f013 f968 	bl	80172ee <strcat>
	  strcat(msg.Buf, str_head_2);
 800401e:	f107 020c 	add.w	r2, r7, #12
 8004022:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004026:	4611      	mov	r1, r2
 8004028:	4618      	mov	r0, r3
 800402a:	f013 f960 	bl	80172ee <strcat>

	  memset(str_management_memory_str, 0, sizeof(str_management_memory_str));	// Clean buffer
 800402e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004032:	2100      	movs	r1, #0
 8004034:	482f      	ldr	r0, [pc, #188]	; (80040f4 <Start_Show_Resources+0x25c>)
 8004036:	f012 fb61 	bl	80166fc <memset>

	  vTaskGetRunTimeStats(str_management_memory_str);							// Function return how much time all functions running.
 800403a:	482e      	ldr	r0, [pc, #184]	; (80040f4 <Start_Show_Resources+0x25c>)
 800403c:	f010 fc5c 	bl	80148f8 <vTaskGetRunTimeStats>

	  buffer_size = buffer_size + i + (sizeof(str_line)-1) + (sizeof(str_head_2)-1);           // НЕ ВИВОДИТЬ СТРОКУ !!!!!!!!!!!!!!!!!! <<<<<<<<<<<<<<<<<<<
 8004040:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8004044:	b29a      	uxth	r2, r3
 8004046:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 800404a:	4413      	add	r3, r2
 800404c:	b29b      	uxth	r3, r3
 800404e:	3357      	adds	r3, #87	; 0x57
 8004050:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8004054:	2300      	movs	r3, #0
 8004056:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 800405a:	e011      	b.n	8004080 <Start_Show_Resources+0x1e8>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 800405c:	f8b7 247e 	ldrh.w	r2, [r7, #1150]	; 0x47e
 8004060:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8004064:	4413      	add	r3, r2
 8004066:	4923      	ldr	r1, [pc, #140]	; (80040f4 <Start_Show_Resources+0x25c>)
 8004068:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 800406c:	440a      	add	r2, r1
 800406e:	7811      	ldrb	r1, [r2, #0]
 8004070:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004074:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8004076:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800407a:	3301      	adds	r3, #1
 800407c:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8004080:	4a1c      	ldr	r2, [pc, #112]	; (80040f4 <Start_Show_Resources+0x25c>)
 8004082:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8004086:	4413      	add	r3, r2
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1e6      	bne.n	800405c <Start_Show_Resources+0x1c4>
	  }
	  strcat(msg.Buf, "#########################################\n\r");
 800408e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004092:	4618      	mov	r0, r3
 8004094:	f7fc f89c 	bl	80001d0 <strlen>
 8004098:	4603      	mov	r3, r0
 800409a:	461a      	mov	r2, r3
 800409c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80040a0:	4413      	add	r3, r2
 80040a2:	4a17      	ldr	r2, [pc, #92]	; (8004100 <Start_Show_Resources+0x268>)
 80040a4:	4614      	mov	r4, r2
 80040a6:	469c      	mov	ip, r3
 80040a8:	f104 0e20 	add.w	lr, r4, #32
 80040ac:	4665      	mov	r5, ip
 80040ae:	4626      	mov	r6, r4
 80040b0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80040b2:	6028      	str	r0, [r5, #0]
 80040b4:	6069      	str	r1, [r5, #4]
 80040b6:	60aa      	str	r2, [r5, #8]
 80040b8:	60eb      	str	r3, [r5, #12]
 80040ba:	3410      	adds	r4, #16
 80040bc:	f10c 0c10 	add.w	ip, ip, #16
 80040c0:	4574      	cmp	r4, lr
 80040c2:	d1f3      	bne.n	80040ac <Start_Show_Resources+0x214>
 80040c4:	4665      	mov	r5, ip
 80040c6:	4623      	mov	r3, r4
 80040c8:	cb07      	ldmia	r3!, {r0, r1, r2}
 80040ca:	6028      	str	r0, [r5, #0]
 80040cc:	6069      	str	r1, [r5, #4]
 80040ce:	60aa      	str	r2, [r5, #8]

	  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 80040d0:	4b0c      	ldr	r3, [pc, #48]	; (8004104 <Start_Show_Resources+0x26c>)
 80040d2:	6818      	ldr	r0, [r3, #0]
 80040d4:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80040d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040dc:	2200      	movs	r2, #0
 80040de:	f00d ffed 	bl	80120bc <osMessageQueuePut>
  {
 80040e2:	e6df      	b.n	8003ea4 <Start_Show_Resources+0xc>
 80040e4:	080198e8 	.word	0x080198e8
 80040e8:	0801985c 	.word	0x0801985c
 80040ec:	20000778 	.word	0x20000778
 80040f0:	08019878 	.word	0x08019878
 80040f4:	20000390 	.word	0x20000390
 80040f8:	080198ec 	.word	0x080198ec
 80040fc:	08019908 	.word	0x08019908
 8004100:	080198bc 	.word	0x080198bc
 8004104:	2000a3a4 	.word	0x2000a3a4

08004108 <Start_UART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_UART_Task */
void Start_UART_Task(void *argument)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 800410e:	af00      	add	r7, sp, #0
 8004110:	1d3b      	adds	r3, r7, #4
 8004112:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  QUEUE_t msg;
  for(;;)
  {
	// osMessageQueueGet waiting data on a queue (If data are in queue so print it)
	osMessageQueueGet(UARTQueueHandle, &msg, 0, osWaitForever);			// Write for data on queue
 8004114:	4b12      	ldr	r3, [pc, #72]	; (8004160 <Start_UART_Task+0x58>)
 8004116:	6818      	ldr	r0, [r3, #0]
 8004118:	f107 010c 	add.w	r1, r7, #12
 800411c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004120:	2200      	movs	r2, #0
 8004122:	f00e f82b 	bl	801217c <osMessageQueueGet>
	// Counting how many characters will be transmitted
	uint16_t buffer_size = 0;
 8004126:	2300      	movs	r3, #0
 8004128:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 800412c:	e004      	b.n	8004138 <Start_UART_Task+0x30>
	{
		buffer_size ++;
 800412e:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8004132:	3301      	adds	r3, #1
 8004134:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8004138:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 800413c:	f107 020c 	add.w	r2, r7, #12
 8004140:	5cd3      	ldrb	r3, [r2, r3]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1f3      	bne.n	800412e <Start_UART_Task+0x26>
	}
	// Transmit over virtual comport
	CDC_Transmit_FS(msg.Buf, buffer_size);						// Transmit data over virtual comport
 8004146:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 800414a:	f107 030c 	add.w	r3, r7, #12
 800414e:	4611      	mov	r1, r2
 8004150:	4618      	mov	r0, r3
 8004152:	f011 fd0d 	bl	8015b70 <CDC_Transmit_FS>
    osDelay(1);
 8004156:	2001      	movs	r0, #1
 8004158:	f00d fdde 	bl	8011d18 <osDelay>
  {
 800415c:	e7da      	b.n	8004114 <Start_UART_Task+0xc>
 800415e:	bf00      	nop
 8004160:	2000a3a4 	.word	0x2000a3a4

08004164 <Start_bme280>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_bme280 */
void Start_bme280(void *argument)
{
 8004164:	b5b0      	push	{r4, r5, r7, lr}
 8004166:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800416a:	af04      	add	r7, sp, #16
 800416c:	1d3b      	adds	r3, r7, #4
 800416e:	6018      	str	r0, [r3, #0]
  /* Infinite loop */

	QUEUE_t msg;												// Make a queue
	//memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'

	uint16_t STATUS=0;
 8004170:	2300      	movs	r3, #0
 8004172:	f8a7 345e 	strh.w	r3, [r7, #1118]	; 0x45e
	uint16_t addres_device = 0x76;  		 	// BME280
 8004176:	2376      	movs	r3, #118	; 0x76
 8004178:	f8a7 345c 	strh.w	r3, [r7, #1116]	; 0x45c
	uint16_t id_addr = 0xD0;
 800417c:	23d0      	movs	r3, #208	; 0xd0
 800417e:	f8a7 345a 	strh.w	r3, [r7, #1114]	; 0x45a
	uint8_t id = 96;							// in hex form
 8004182:	2360      	movs	r3, #96	; 0x60
 8004184:	f887 3459 	strb.w	r3, [r7, #1113]	; 0x459
	uint8_t buff=0;        						// Return 0x96 -> Dec 60
 8004188:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 800418c:	2200      	movs	r2, #0
 800418e:	701a      	strb	r2, [r3, #0]

	// For debug
	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 8004190:	f8b7 345c 	ldrh.w	r3, [r7, #1116]	; 0x45c
 8004194:	005b      	lsls	r3, r3, #1
 8004196:	b299      	uxth	r1, r3
 8004198:	f8b7 245a 	ldrh.w	r2, [r7, #1114]	; 0x45a
 800419c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041a0:	9302      	str	r3, [sp, #8]
 80041a2:	2301      	movs	r3, #1
 80041a4:	9301      	str	r3, [sp, #4]
 80041a6:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	2301      	movs	r3, #1
 80041ae:	48bb      	ldr	r0, [pc, #748]	; (800449c <Start_bme280+0x338>)
 80041b0:	f002 fdbc 	bl	8006d2c <HAL_I2C_Mem_Read>
 80041b4:	4603      	mov	r3, r0
 80041b6:	f8a7 345e 	strh.w	r3, [r7, #1118]	; 0x45e
		// Error !!! BME280 didn't found
	}


	// Init BME280
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 80041ba:	4bb9      	ldr	r3, [pc, #740]	; (80044a0 <Start_bme280+0x33c>)
 80041bc:	2276      	movs	r2, #118	; 0x76
 80041be:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 80041c0:	4bb7      	ldr	r3, [pc, #732]	; (80044a0 <Start_bme280+0x33c>)
 80041c2:	2201      	movs	r2, #1
 80041c4:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 80041c6:	4bb6      	ldr	r3, [pc, #728]	; (80044a0 <Start_bme280+0x33c>)
 80041c8:	4ab6      	ldr	r2, [pc, #728]	; (80044a4 <Start_bme280+0x340>)
 80041ca:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 80041cc:	4bb4      	ldr	r3, [pc, #720]	; (80044a0 <Start_bme280+0x33c>)
 80041ce:	4ab6      	ldr	r2, [pc, #728]	; (80044a8 <Start_bme280+0x344>)
 80041d0:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 80041d2:	4bb3      	ldr	r3, [pc, #716]	; (80044a0 <Start_bme280+0x33c>)
 80041d4:	4ab5      	ldr	r2, [pc, #724]	; (80044ac <Start_bme280+0x348>)
 80041d6:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&dev);
 80041d8:	48b1      	ldr	r0, [pc, #708]	; (80044a0 <Start_bme280+0x33c>)
 80041da:	f7fc feb1 	bl	8000f40 <bme280_init>
 80041de:	4603      	mov	r3, r0
 80041e0:	461a      	mov	r2, r3
 80041e2:	4bb3      	ldr	r3, [pc, #716]	; (80044b0 <Start_bme280+0x34c>)
 80041e4:	701a      	strb	r2, [r3, #0]

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 80041e6:	4bae      	ldr	r3, [pc, #696]	; (80044a0 <Start_bme280+0x33c>)
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 80041ee:	4bac      	ldr	r3, [pc, #688]	; (80044a0 <Start_bme280+0x33c>)
 80041f0:	2205      	movs	r2, #5
 80041f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 80041f6:	4baa      	ldr	r3, [pc, #680]	; (80044a0 <Start_bme280+0x33c>)
 80041f8:	2202      	movs	r2, #2
 80041fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 80041fe:	4ba8      	ldr	r3, [pc, #672]	; (80044a0 <Start_bme280+0x33c>)
 8004200:	2204      	movs	r2, #4
 8004202:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8004206:	49a6      	ldr	r1, [pc, #664]	; (80044a0 <Start_bme280+0x33c>)
 8004208:	200f      	movs	r0, #15
 800420a:	f7fc ff8b 	bl	8001124 <bme280_set_sensor_settings>
 800420e:	4603      	mov	r3, r0
 8004210:	461a      	mov	r2, r3
 8004212:	4ba7      	ldr	r3, [pc, #668]	; (80044b0 <Start_bme280+0x34c>)
 8004214:	701a      	strb	r2, [r3, #0]

	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8004216:	49a2      	ldr	r1, [pc, #648]	; (80044a0 <Start_bme280+0x33c>)
 8004218:	2003      	movs	r0, #3
 800421a:	f7fc ffd8 	bl	80011ce <bme280_set_sensor_mode>
 800421e:	4603      	mov	r3, r0
 8004220:	461a      	mov	r2, r3
 8004222:	4ba3      	ldr	r3, [pc, #652]	; (80044b0 <Start_bme280+0x34c>)
 8004224:	701a      	strb	r2, [r3, #0]

	dev.delay_ms(40);
 8004226:	4b9e      	ldr	r3, [pc, #632]	; (80044a0 <Start_bme280+0x33c>)
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	2028      	movs	r0, #40	; 0x28
 800422c:	4798      	blx	r3

  for(;;)
  {
	  osDelay(1000);
 800422e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004232:	f00d fd71 	bl	8011d18 <osDelay>

	  char str_t_h_and_p[50] = {0};
 8004236:	f107 0308 	add.w	r3, r7, #8
 800423a:	2200      	movs	r2, #0
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	3304      	adds	r3, #4
 8004240:	222e      	movs	r2, #46	; 0x2e
 8004242:	2100      	movs	r1, #0
 8004244:	4618      	mov	r0, r3
 8004246:	f012 fa59 	bl	80166fc <memset>
	  char str_thp_buffer[12] = {0};
 800424a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800424e:	2200      	movs	r2, #0
 8004250:	601a      	str	r2, [r3, #0]
 8004252:	3304      	adds	r3, #4
 8004254:	2200      	movs	r2, #0
 8004256:	601a      	str	r2, [r3, #0]
 8004258:	605a      	str	r2, [r3, #4]

	  memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
 800425a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800425e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004262:	2100      	movs	r1, #0
 8004264:	4618      	mov	r0, r3
 8004266:	f012 fa49 	bl	80166fc <memset>
	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);		// Get data from sensor
 800426a:	4a8d      	ldr	r2, [pc, #564]	; (80044a0 <Start_bme280+0x33c>)
 800426c:	4991      	ldr	r1, [pc, #580]	; (80044b4 <Start_bme280+0x350>)
 800426e:	2007      	movs	r0, #7
 8004270:	f7fd f829 	bl	80012c6 <bme280_get_sensor_data>
 8004274:	4603      	mov	r3, r0
 8004276:	461a      	mov	r2, r3
 8004278:	4b8d      	ldr	r3, [pc, #564]	; (80044b0 <Start_bme280+0x34c>)
 800427a:	701a      	strb	r2, [r3, #0]

	  if(rslt == BME280_OK)
 800427c:	4b8c      	ldr	r3, [pc, #560]	; (80044b0 <Start_bme280+0x34c>)
 800427e:	f993 3000 	ldrsb.w	r3, [r3]
 8004282:	2b00      	cmp	r3, #0
 8004284:	f040 80e5 	bne.w	8004452 <Start_bme280+0x2ee>
	  {
	  		// Save data variables
	  		float BME280_temperature = comp_data.temperature;
 8004288:	4b8a      	ldr	r3, [pc, #552]	; (80044b4 <Start_bme280+0x350>)
 800428a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800428e:	4610      	mov	r0, r2
 8004290:	4619      	mov	r1, r3
 8004292:	f7fc fc89 	bl	8000ba8 <__aeabi_d2f>
 8004296:	4603      	mov	r3, r0
 8004298:	f207 4254 	addw	r2, r7, #1108	; 0x454
 800429c:	6013      	str	r3, [r2, #0]
	  		float BME280_humidity = comp_data.humidity;
 800429e:	4b85      	ldr	r3, [pc, #532]	; (80044b4 <Start_bme280+0x350>)
 80042a0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80042a4:	4610      	mov	r0, r2
 80042a6:	4619      	mov	r1, r3
 80042a8:	f7fc fc7e 	bl	8000ba8 <__aeabi_d2f>
 80042ac:	4603      	mov	r3, r0
 80042ae:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 80042b2:	6013      	str	r3, [r2, #0]
	  		float BME280_preasure = comp_data.pressure;
 80042b4:	4b7f      	ldr	r3, [pc, #508]	; (80044b4 <Start_bme280+0x350>)
 80042b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ba:	4610      	mov	r0, r2
 80042bc:	4619      	mov	r1, r3
 80042be:	f7fc fc73 	bl	8000ba8 <__aeabi_d2f>
 80042c2:	4603      	mov	r3, r0
 80042c4:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 80042c8:	6013      	str	r3, [r2, #0]

	  		// Write T, H and P in str_t_h_and_p buffer
	  		// Write TEMPERATURE
	  		strcat(str_t_h_and_p, "BEE280: \n\r");
 80042ca:	f107 0308 	add.w	r3, r7, #8
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fb ff7e 	bl	80001d0 <strlen>
 80042d4:	4603      	mov	r3, r0
 80042d6:	461a      	mov	r2, r3
 80042d8:	f107 0308 	add.w	r3, r7, #8
 80042dc:	4413      	add	r3, r2
 80042de:	4976      	ldr	r1, [pc, #472]	; (80044b8 <Start_bme280+0x354>)
 80042e0:	461a      	mov	r2, r3
 80042e2:	460b      	mov	r3, r1
 80042e4:	cb03      	ldmia	r3!, {r0, r1}
 80042e6:	6010      	str	r0, [r2, #0]
 80042e8:	6051      	str	r1, [r2, #4]
 80042ea:	8819      	ldrh	r1, [r3, #0]
 80042ec:	789b      	ldrb	r3, [r3, #2]
 80042ee:	8111      	strh	r1, [r2, #8]
 80042f0:	7293      	strb	r3, [r2, #10]
	  		strcat(str_t_h_and_p, "T: ");
 80042f2:	f107 0308 	add.w	r3, r7, #8
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fb ff6a 	bl	80001d0 <strlen>
 80042fc:	4603      	mov	r3, r0
 80042fe:	461a      	mov	r2, r3
 8004300:	f107 0308 	add.w	r3, r7, #8
 8004304:	4413      	add	r3, r2
 8004306:	4a6d      	ldr	r2, [pc, #436]	; (80044bc <Start_bme280+0x358>)
 8004308:	6810      	ldr	r0, [r2, #0]
 800430a:	6018      	str	r0, [r3, #0]
	  		sprintf(str_thp_buffer, "%f", BME280_temperature);
 800430c:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	f7fc f919 	bl	8000548 <__aeabi_f2d>
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800431e:	4968      	ldr	r1, [pc, #416]	; (80044c0 <Start_bme280+0x35c>)
 8004320:	f012 ff82 	bl	8017228 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 8004324:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004328:	f107 0308 	add.w	r3, r7, #8
 800432c:	4611      	mov	r1, r2
 800432e:	4618      	mov	r0, r3
 8004330:	f012 ffdd 	bl	80172ee <strcat>
	  		strcat(str_t_h_and_p, " C\n\r");
 8004334:	f107 0308 	add.w	r3, r7, #8
 8004338:	4618      	mov	r0, r3
 800433a:	f7fb ff49 	bl	80001d0 <strlen>
 800433e:	4603      	mov	r3, r0
 8004340:	461a      	mov	r2, r3
 8004342:	f107 0308 	add.w	r3, r7, #8
 8004346:	4413      	add	r3, r2
 8004348:	4a5e      	ldr	r2, [pc, #376]	; (80044c4 <Start_bme280+0x360>)
 800434a:	6810      	ldr	r0, [r2, #0]
 800434c:	6018      	str	r0, [r3, #0]
 800434e:	7912      	ldrb	r2, [r2, #4]
 8004350:	711a      	strb	r2, [r3, #4]

	  		// Write HUMIDYTY
	  		memset(str_thp_buffer, 0, sizeof(str_thp_buffer));
 8004352:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004356:	220c      	movs	r2, #12
 8004358:	2100      	movs	r1, #0
 800435a:	4618      	mov	r0, r3
 800435c:	f012 f9ce 	bl	80166fc <memset>
	  		strcat(str_t_h_and_p, "H: ");
 8004360:	f107 0308 	add.w	r3, r7, #8
 8004364:	4618      	mov	r0, r3
 8004366:	f7fb ff33 	bl	80001d0 <strlen>
 800436a:	4603      	mov	r3, r0
 800436c:	461a      	mov	r2, r3
 800436e:	f107 0308 	add.w	r3, r7, #8
 8004372:	4413      	add	r3, r2
 8004374:	4a54      	ldr	r2, [pc, #336]	; (80044c8 <Start_bme280+0x364>)
 8004376:	6810      	ldr	r0, [r2, #0]
 8004378:	6018      	str	r0, [r3, #0]
	  		sprintf(str_thp_buffer, "%f", BME280_humidity);
 800437a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800437e:	6818      	ldr	r0, [r3, #0]
 8004380:	f7fc f8e2 	bl	8000548 <__aeabi_f2d>
 8004384:	4602      	mov	r2, r0
 8004386:	460b      	mov	r3, r1
 8004388:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800438c:	494c      	ldr	r1, [pc, #304]	; (80044c0 <Start_bme280+0x35c>)
 800438e:	f012 ff4b 	bl	8017228 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 8004392:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004396:	f107 0308 	add.w	r3, r7, #8
 800439a:	4611      	mov	r1, r2
 800439c:	4618      	mov	r0, r3
 800439e:	f012 ffa6 	bl	80172ee <strcat>
	  		strcat(str_t_h_and_p, " C\n\r");
 80043a2:	f107 0308 	add.w	r3, r7, #8
 80043a6:	4618      	mov	r0, r3
 80043a8:	f7fb ff12 	bl	80001d0 <strlen>
 80043ac:	4603      	mov	r3, r0
 80043ae:	461a      	mov	r2, r3
 80043b0:	f107 0308 	add.w	r3, r7, #8
 80043b4:	4413      	add	r3, r2
 80043b6:	4a43      	ldr	r2, [pc, #268]	; (80044c4 <Start_bme280+0x360>)
 80043b8:	6810      	ldr	r0, [r2, #0]
 80043ba:	6018      	str	r0, [r3, #0]
 80043bc:	7912      	ldrb	r2, [r2, #4]
 80043be:	711a      	strb	r2, [r3, #4]

	  		// Write PRERASURE
	  		memset(str_thp_buffer, 0, sizeof(str_thp_buffer));
 80043c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80043c4:	220c      	movs	r2, #12
 80043c6:	2100      	movs	r1, #0
 80043c8:	4618      	mov	r0, r3
 80043ca:	f012 f997 	bl	80166fc <memset>
	  		strcat(str_t_h_and_p, "P: ");
 80043ce:	f107 0308 	add.w	r3, r7, #8
 80043d2:	4618      	mov	r0, r3
 80043d4:	f7fb fefc 	bl	80001d0 <strlen>
 80043d8:	4603      	mov	r3, r0
 80043da:	461a      	mov	r2, r3
 80043dc:	f107 0308 	add.w	r3, r7, #8
 80043e0:	4413      	add	r3, r2
 80043e2:	4a3a      	ldr	r2, [pc, #232]	; (80044cc <Start_bme280+0x368>)
 80043e4:	6810      	ldr	r0, [r2, #0]
 80043e6:	6018      	str	r0, [r3, #0]
	  		sprintf(str_thp_buffer, "%f", BME280_preasure);
 80043e8:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	f7fc f8ab 	bl	8000548 <__aeabi_f2d>
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80043fa:	4931      	ldr	r1, [pc, #196]	; (80044c0 <Start_bme280+0x35c>)
 80043fc:	f012 ff14 	bl	8017228 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 8004400:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004404:	f107 0308 	add.w	r3, r7, #8
 8004408:	4611      	mov	r1, r2
 800440a:	4618      	mov	r0, r3
 800440c:	f012 ff6f 	bl	80172ee <strcat>
	  		strcat(str_t_h_and_p, " mm\n\r\0");
 8004410:	f107 0308 	add.w	r3, r7, #8
 8004414:	4618      	mov	r0, r3
 8004416:	f7fb fedb 	bl	80001d0 <strlen>
 800441a:	4603      	mov	r3, r0
 800441c:	461a      	mov	r2, r3
 800441e:	f107 0308 	add.w	r3, r7, #8
 8004422:	4413      	add	r3, r2
 8004424:	4a2a      	ldr	r2, [pc, #168]	; (80044d0 <Start_bme280+0x36c>)
 8004426:	6810      	ldr	r0, [r2, #0]
 8004428:	6018      	str	r0, [r3, #0]
 800442a:	8892      	ldrh	r2, [r2, #4]
 800442c:	809a      	strh	r2, [r3, #4]

	  		strcat(msg.Buf, str_t_h_and_p);										//	Write main buffer with data in queue
 800442e:	f107 0208 	add.w	r2, r7, #8
 8004432:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004436:	4611      	mov	r1, r2
 8004438:	4618      	mov	r0, r3
 800443a:	f012 ff58 	bl	80172ee <strcat>

	  		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)
 800443e:	4b25      	ldr	r3, [pc, #148]	; (80044d4 <Start_bme280+0x370>)
 8004440:	6818      	ldr	r0, [r3, #0]
 8004442:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8004446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800444a:	2200      	movs	r2, #0
 800444c:	f00d fe36 	bl	80120bc <osMessageQueuePut>
 8004450:	e6ed      	b.n	800422e <Start_bme280+0xca>

	  }
	  else
	  {
		  strcat(str_t_h_and_p, "ERROR!!! BME280 didn't found\n\r");
 8004452:	f107 0308 	add.w	r3, r7, #8
 8004456:	4618      	mov	r0, r3
 8004458:	f7fb feba 	bl	80001d0 <strlen>
 800445c:	4603      	mov	r3, r0
 800445e:	461a      	mov	r2, r3
 8004460:	f107 0308 	add.w	r3, r7, #8
 8004464:	4413      	add	r3, r2
 8004466:	4a1c      	ldr	r2, [pc, #112]	; (80044d8 <Start_bme280+0x374>)
 8004468:	461d      	mov	r5, r3
 800446a:	4614      	mov	r4, r2
 800446c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800446e:	6028      	str	r0, [r5, #0]
 8004470:	6069      	str	r1, [r5, #4]
 8004472:	60aa      	str	r2, [r5, #8]
 8004474:	60eb      	str	r3, [r5, #12]
 8004476:	cc07      	ldmia	r4!, {r0, r1, r2}
 8004478:	6128      	str	r0, [r5, #16]
 800447a:	6169      	str	r1, [r5, #20]
 800447c:	61aa      	str	r2, [r5, #24]
 800447e:	8823      	ldrh	r3, [r4, #0]
 8004480:	78a2      	ldrb	r2, [r4, #2]
 8004482:	83ab      	strh	r3, [r5, #28]
 8004484:	4613      	mov	r3, r2
 8004486:	77ab      	strb	r3, [r5, #30]
		  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)
 8004488:	4b12      	ldr	r3, [pc, #72]	; (80044d4 <Start_bme280+0x370>)
 800448a:	6818      	ldr	r0, [r3, #0]
 800448c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8004490:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004494:	2200      	movs	r2, #0
 8004496:	f00d fe11 	bl	80120bc <osMessageQueuePut>
  {
 800449a:	e6c8      	b.n	800422e <Start_bme280+0xca>
 800449c:	200080bc 	.word	0x200080bc
 80044a0:	2000807c 	.word	0x2000807c
 80044a4:	080030f1 	.word	0x080030f1
 80044a8:	08003179 	.word	0x08003179
 80044ac:	08003161 	.word	0x08003161
 80044b0:	200091bc 	.word	0x200091bc
 80044b4:	200091c0 	.word	0x200091c0
 80044b8:	08019948 	.word	0x08019948
 80044bc:	08019954 	.word	0x08019954
 80044c0:	08019958 	.word	0x08019958
 80044c4:	0801995c 	.word	0x0801995c
 80044c8:	08019964 	.word	0x08019964
 80044cc:	08019968 	.word	0x08019968
 80044d0:	0801996c 	.word	0x0801996c
 80044d4:	2000a3a4 	.word	0x2000a3a4
 80044d8:	08019974 	.word	0x08019974

080044dc <Start_AM2302>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_AM2302 */
void Start_AM2302(void *argument)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	1d3b      	adds	r3, r7, #4
 80044e6:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_AM2302 */
  /* Infinite loop */
	QUEUE_t msg;												// Make a queue
	memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 80044e8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80044ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044f0:	2100      	movs	r1, #0
 80044f2:	4618      	mov	r0, r3
 80044f4:	f012 f902 	bl	80166fc <memset>

	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 80044f8:	4b48      	ldr	r3, [pc, #288]	; (800461c <Start_AM2302+0x140>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a47      	ldr	r2, [pc, #284]	; (800461c <Start_AM2302+0x140>)
 80044fe:	f043 0304 	orr.w	r3, r3, #4
 8004502:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 8004504:	4b45      	ldr	r3, [pc, #276]	; (800461c <Start_AM2302+0x140>)
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	4a44      	ldr	r2, [pc, #272]	; (800461c <Start_AM2302+0x140>)
 800450a:	f023 0302 	bic.w	r3, r3, #2
 800450e:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 8004510:	4b42      	ldr	r3, [pc, #264]	; (800461c <Start_AM2302+0x140>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	4a41      	ldr	r2, [pc, #260]	; (800461c <Start_AM2302+0x140>)
 8004516:	f043 0302 	orr.w	r3, r3, #2
 800451a:	6093      	str	r3, [r2, #8]
	GPIOC->ODR ^= 0x02; 							// set GPIOC pin 1 on high
 800451c:	4b3f      	ldr	r3, [pc, #252]	; (800461c <Start_AM2302+0x140>)
 800451e:	695b      	ldr	r3, [r3, #20]
 8004520:	4a3e      	ldr	r2, [pc, #248]	; (800461c <Start_AM2302+0x140>)
 8004522:	f083 0302 	eor.w	r3, r3, #2
 8004526:	6153      	str	r3, [r2, #20]
	osDelay(2000);									// First init must be 2 seconds delay
 8004528:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800452c:	f00d fbf4 	bl	8011d18 <osDelay>

  for(;;)
  {
	  osDelay(3000);			// Measure every 3 seconds
 8004530:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004534:	f00d fbf0 	bl	8011d18 <osDelay>
	   * __                ________________________
	   * 	 \			    /				         \
	   * 	  \____________/			              \_
	   */

	  	bool get_data_status = false;
 8004538:	2300      	movs	r3, #0
 800453a:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  	int j = 0;   							// Counter bytes
 800453e:	2300      	movs	r3, #0
 8004540:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
	  	int i = 0;								// Counter bits
 8004544:	2300      	movs	r3, #0
 8004546:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
	  	uint8_t data[4] = {0};					// Buffer for incoming data from sensor
 800454a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800454e:	2200      	movs	r2, #0
 8004550:	601a      	str	r2, [r3, #0]
	  	float temper, hum;						// Buffer variables

	  	// Init GPIO like output
	  	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 8004552:	4b32      	ldr	r3, [pc, #200]	; (800461c <Start_AM2302+0x140>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a31      	ldr	r2, [pc, #196]	; (800461c <Start_AM2302+0x140>)
 8004558:	f043 0304 	orr.w	r3, r3, #4
 800455c:	6013      	str	r3, [r2, #0]
	  	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 800455e:	4b2f      	ldr	r3, [pc, #188]	; (800461c <Start_AM2302+0x140>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	4a2e      	ldr	r2, [pc, #184]	; (800461c <Start_AM2302+0x140>)
 8004564:	f023 0302 	bic.w	r3, r3, #2
 8004568:	6053      	str	r3, [r2, #4]
	  	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 800456a:	4b2c      	ldr	r3, [pc, #176]	; (800461c <Start_AM2302+0x140>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	4a2b      	ldr	r2, [pc, #172]	; (800461c <Start_AM2302+0x140>)
 8004570:	f043 0302 	orr.w	r3, r3, #2
 8004574:	6093      	str	r3, [r2, #8]

	  	GPIOC->ODR &= ~0x02;		// Low level
 8004576:	4b29      	ldr	r3, [pc, #164]	; (800461c <Start_AM2302+0x140>)
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	4a28      	ldr	r2, [pc, #160]	; (800461c <Start_AM2302+0x140>)
 800457c:	f023 0302 	bic.w	r3, r3, #2
 8004580:	6153      	str	r3, [r2, #20]
	  	osDelay(18);
 8004582:	2012      	movs	r0, #18
 8004584:	f00d fbc8 	bl	8011d18 <osDelay>
	  	GPIOC->ODR ^= 0x02;			// High level
 8004588:	4b24      	ldr	r3, [pc, #144]	; (800461c <Start_AM2302+0x140>)
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	4a23      	ldr	r2, [pc, #140]	; (800461c <Start_AM2302+0x140>)
 800458e:	f083 0302 	eor.w	r3, r3, #2
 8004592:	6153      	str	r3, [r2, #20]
	  	delay_us(40);
 8004594:	2028      	movs	r0, #40	; 0x28
 8004596:	f7fe fe2b 	bl	80031f0 <delay_us>

	  	// Make input pin C1
	  	GPIOC->MODER &= ~0x04;  	// Set Pin C1 Input   (MODER GPIOC_1 Must be 00)
 800459a:	4b20      	ldr	r3, [pc, #128]	; (800461c <Start_AM2302+0x140>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a1f      	ldr	r2, [pc, #124]	; (800461c <Start_AM2302+0x140>)
 80045a0:	f023 0304 	bic.w	r3, r3, #4
 80045a4:	6013      	str	r3, [r2, #0]
	  	GPIOC->PUPDR &= ~0x04;		// Set Pin C1 Pull up
 80045a6:	4b1d      	ldr	r3, [pc, #116]	; (800461c <Start_AM2302+0x140>)
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	4a1c      	ldr	r2, [pc, #112]	; (800461c <Start_AM2302+0x140>)
 80045ac:	f023 0304 	bic.w	r3, r3, #4
 80045b0:	60d3      	str	r3, [r2, #12]

	  	if(GPIOC->IDR & GPIO_IDR_ID1)		// Sensor must pull down
 80045b2:	4b1a      	ldr	r3, [pc, #104]	; (800461c <Start_AM2302+0x140>)
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d003      	beq.n	80045c6 <Start_AM2302+0xea>
	  	{
	  		get_data_status = false; 					// Error. Sensor not response
 80045be:	2300      	movs	r3, #0
 80045c0:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 80045c4:	e002      	b.n	80045cc <Start_AM2302+0xf0>
	  	}
	  	else
	  	{
	  		get_data_status = true;
 80045c6:	2301      	movs	r3, #1
 80045c8:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  	}

	  	delay_us(80);
 80045cc:	2050      	movs	r0, #80	; 0x50
 80045ce:	f7fe fe0f 	bl	80031f0 <delay_us>

	  	if(!(GPIOC->IDR & GPIO_IDR_ID1))  	// Sensor must pull up
 80045d2:	4b12      	ldr	r3, [pc, #72]	; (800461c <Start_AM2302+0x140>)
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d103      	bne.n	80045e6 <Start_AM2302+0x10a>
	  	{
	  		get_data_status = false; 					// Error. Sensor not response
 80045de:	2300      	movs	r3, #0
 80045e0:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 80045e4:	e002      	b.n	80045ec <Start_AM2302+0x110>
	  	}
	  	else
	  	{
	  		get_data_status = true;
 80045e6:	2301      	movs	r3, #1
 80045e8:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  	}
	  	delay_us(80);
 80045ec:	2050      	movs	r0, #80	; 0x50
 80045ee:	f7fe fdff 	bl	80031f0 <delay_us>

	  	if(get_data_status == true)
 80045f2:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d09a      	beq.n	8004530 <Start_AM2302+0x54>
	  	{
	  		for(j = 0; j <5; j++)							// Reading 5 bytes
 80045fa:	2300      	movs	r3, #0
 80045fc:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 8004600:	e050      	b.n	80046a4 <Start_AM2302+0x1c8>
	  		{
	  			data[4-j] = 0;
 8004602:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8004606:	f1c3 0304 	rsb	r3, r3, #4
 800460a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800460e:	2100      	movs	r1, #0
 8004610:	54d1      	strb	r1, [r2, r3]
	  			for(i = 0; i < 8; i++)						// Reading 8 bits
 8004612:	2300      	movs	r3, #0
 8004614:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8004618:	e038      	b.n	800468c <Start_AM2302+0x1b0>
 800461a:	bf00      	nop
 800461c:	40020800 	.word	0x40020800
	  			{
	  				while(!(GPIOC->IDR & GPIO_IDR_ID1));	// While signal is "0"
 8004620:	bf00      	nop
 8004622:	4b95      	ldr	r3, [pc, #596]	; (8004878 <Start_AM2302+0x39c>)
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f9      	beq.n	8004622 <Start_AM2302+0x146>
	  				delay_us(30);
 800462e:	201e      	movs	r0, #30
 8004630:	f7fe fdde 	bl	80031f0 <delay_us>
	  				if(GPIOC->IDR & GPIO_IDR_ID1)			// If signal is high when wrute "1" in buffer (data[])
 8004634:	4b90      	ldr	r3, [pc, #576]	; (8004878 <Start_AM2302+0x39c>)
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	f003 0302 	and.w	r3, r3, #2
 800463c:	2b00      	cmp	r3, #0
 800463e:	d019      	beq.n	8004674 <Start_AM2302+0x198>
	  				{
	  					data[4-j] |= (1 << (7 - i));        // Shift received bite
 8004640:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8004644:	f1c3 0304 	rsb	r3, r3, #4
 8004648:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800464c:	5cd3      	ldrb	r3, [r2, r3]
 800464e:	b25a      	sxtb	r2, r3
 8004650:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8004654:	f1c3 0307 	rsb	r3, r3, #7
 8004658:	2101      	movs	r1, #1
 800465a:	fa01 f303 	lsl.w	r3, r1, r3
 800465e:	b25b      	sxtb	r3, r3
 8004660:	4313      	orrs	r3, r2
 8004662:	b25a      	sxtb	r2, r3
 8004664:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8004668:	f1c3 0304 	rsb	r3, r3, #4
 800466c:	b2d1      	uxtb	r1, r2
 800466e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004672:	54d1      	strb	r1, [r2, r3]
	  				}
	  				while(GPIOC->IDR & GPIO_IDR_ID1);		// Wait end of "1" signal
 8004674:	bf00      	nop
 8004676:	4b80      	ldr	r3, [pc, #512]	; (8004878 <Start_AM2302+0x39c>)
 8004678:	691b      	ldr	r3, [r3, #16]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1f9      	bne.n	8004676 <Start_AM2302+0x19a>
	  			for(i = 0; i < 8; i++)						// Reading 8 bits
 8004682:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8004686:	3301      	adds	r3, #1
 8004688:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 800468c:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8004690:	2b07      	cmp	r3, #7
 8004692:	ddc5      	ble.n	8004620 <Start_AM2302+0x144>
	  			}
	  			get_data_status = true;										// Data was been written okay
 8004694:	2301      	movs	r3, #1
 8004696:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  		for(j = 0; j <5; j++)							// Reading 5 bytes
 800469a:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 800469e:	3301      	adds	r3, #1
 80046a0:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 80046a4:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80046a8:	2b04      	cmp	r3, #4
 80046aa:	ddaa      	ble.n	8004602 <Start_AM2302+0x126>
	  		}

	  		temper = (float)((*(uint16_t*)(data+1)) & 0x3FFF) /10;
 80046ac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80046b0:	3301      	adds	r3, #1
 80046b2:	881b      	ldrh	r3, [r3, #0]
 80046b4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80046b8:	ee07 3a90 	vmov	s15, r3
 80046bc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80046c0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80046c4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80046c8:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80046cc:	edc3 7a00 	vstr	s15, [r3]
	  		if((*(uint16_t*)(data+1)) & 0x8000) temper  *= -1.0;
 80046d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80046d4:	3301      	adds	r3, #1
 80046d6:	881b      	ldrh	r3, [r3, #0]
 80046d8:	b21b      	sxth	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	da13      	bge.n	8004706 <Start_AM2302+0x22a>
 80046de:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80046e2:	6818      	ldr	r0, [r3, #0]
 80046e4:	f7fb ff30 	bl	8000548 <__aeabi_f2d>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4610      	mov	r0, r2
 80046ee:	4619      	mov	r1, r3
 80046f0:	f7fc fa5a 	bl	8000ba8 <__aeabi_d2f>
 80046f4:	4603      	mov	r3, r0
 80046f6:	ee07 3a90 	vmov	s15, r3
 80046fa:	eef1 7a67 	vneg.f32	s15, s15
 80046fe:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8004702:	edc3 7a00 	vstr	s15, [r3]
	  		hum = (float)(*(int16_t*)(data+3)) / 10;
 8004706:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800470a:	3303      	adds	r3, #3
 800470c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004710:	ee07 3a90 	vmov	s15, r3
 8004714:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004718:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800471c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004720:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8004724:	edc3 7a00 	vstr	s15, [r3]

	  		// Write data in queue
	  		char str_t_and_h[50] = {0};
 8004728:	f107 0308 	add.w	r3, r7, #8
 800472c:	2200      	movs	r2, #0
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	3304      	adds	r3, #4
 8004732:	222e      	movs	r2, #46	; 0x2e
 8004734:	2100      	movs	r1, #0
 8004736:	4618      	mov	r0, r3
 8004738:	f011 ffe0 	bl	80166fc <memset>
	  		char str_t_and_h_buffer[12] = {0};
 800473c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004740:	2200      	movs	r2, #0
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	3304      	adds	r3, #4
 8004746:	2200      	movs	r2, #0
 8004748:	601a      	str	r2, [r3, #0]
 800474a:	605a      	str	r2, [r3, #4]

	  		memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
 800474c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004750:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004754:	2100      	movs	r1, #0
 8004756:	4618      	mov	r0, r3
 8004758:	f011 ffd0 	bl	80166fc <memset>

	  		// Write T and  H P in str_t_h buffer
	  		// Write TEMPERATURE
	  		strcat(str_t_and_h, "AM2302: \n\r");
 800475c:	f107 0308 	add.w	r3, r7, #8
 8004760:	4618      	mov	r0, r3
 8004762:	f7fb fd35 	bl	80001d0 <strlen>
 8004766:	4603      	mov	r3, r0
 8004768:	461a      	mov	r2, r3
 800476a:	f107 0308 	add.w	r3, r7, #8
 800476e:	4413      	add	r3, r2
 8004770:	4942      	ldr	r1, [pc, #264]	; (800487c <Start_AM2302+0x3a0>)
 8004772:	461a      	mov	r2, r3
 8004774:	460b      	mov	r3, r1
 8004776:	cb03      	ldmia	r3!, {r0, r1}
 8004778:	6010      	str	r0, [r2, #0]
 800477a:	6051      	str	r1, [r2, #4]
 800477c:	8819      	ldrh	r1, [r3, #0]
 800477e:	789b      	ldrb	r3, [r3, #2]
 8004780:	8111      	strh	r1, [r2, #8]
 8004782:	7293      	strb	r3, [r2, #10]
	  		strcat(str_t_and_h, "T: ");
 8004784:	f107 0308 	add.w	r3, r7, #8
 8004788:	4618      	mov	r0, r3
 800478a:	f7fb fd21 	bl	80001d0 <strlen>
 800478e:	4603      	mov	r3, r0
 8004790:	461a      	mov	r2, r3
 8004792:	f107 0308 	add.w	r3, r7, #8
 8004796:	4413      	add	r3, r2
 8004798:	4a39      	ldr	r2, [pc, #228]	; (8004880 <Start_AM2302+0x3a4>)
 800479a:	6810      	ldr	r0, [r2, #0]
 800479c:	6018      	str	r0, [r3, #0]
	  		sprintf(str_t_and_h_buffer, "%f", temper);
 800479e:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80047a2:	6818      	ldr	r0, [r3, #0]
 80047a4:	f7fb fed0 	bl	8000548 <__aeabi_f2d>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80047b0:	4934      	ldr	r1, [pc, #208]	; (8004884 <Start_AM2302+0x3a8>)
 80047b2:	f012 fd39 	bl	8017228 <siprintf>
	  		strcat(str_t_and_h, str_t_and_h_buffer);
 80047b6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80047ba:	f107 0308 	add.w	r3, r7, #8
 80047be:	4611      	mov	r1, r2
 80047c0:	4618      	mov	r0, r3
 80047c2:	f012 fd94 	bl	80172ee <strcat>
	  		strcat(str_t_and_h, " C\n\r");
 80047c6:	f107 0308 	add.w	r3, r7, #8
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fb fd00 	bl	80001d0 <strlen>
 80047d0:	4603      	mov	r3, r0
 80047d2:	461a      	mov	r2, r3
 80047d4:	f107 0308 	add.w	r3, r7, #8
 80047d8:	4413      	add	r3, r2
 80047da:	4a2b      	ldr	r2, [pc, #172]	; (8004888 <Start_AM2302+0x3ac>)
 80047dc:	6810      	ldr	r0, [r2, #0]
 80047de:	6018      	str	r0, [r3, #0]
 80047e0:	7912      	ldrb	r2, [r2, #4]
 80047e2:	711a      	strb	r2, [r3, #4]

	  		// Write HUMIDYTY
	  		memset(str_t_and_h_buffer, 0, sizeof(str_t_and_h_buffer));
 80047e4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80047e8:	220c      	movs	r2, #12
 80047ea:	2100      	movs	r1, #0
 80047ec:	4618      	mov	r0, r3
 80047ee:	f011 ff85 	bl	80166fc <memset>

	  		strcat(str_t_and_h, "H: ");
 80047f2:	f107 0308 	add.w	r3, r7, #8
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fb fcea 	bl	80001d0 <strlen>
 80047fc:	4603      	mov	r3, r0
 80047fe:	461a      	mov	r2, r3
 8004800:	f107 0308 	add.w	r3, r7, #8
 8004804:	4413      	add	r3, r2
 8004806:	4a21      	ldr	r2, [pc, #132]	; (800488c <Start_AM2302+0x3b0>)
 8004808:	6810      	ldr	r0, [r2, #0]
 800480a:	6018      	str	r0, [r3, #0]
	  		sprintf(str_t_and_h_buffer, "%f", hum);
 800480c:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8004810:	6818      	ldr	r0, [r3, #0]
 8004812:	f7fb fe99 	bl	8000548 <__aeabi_f2d>
 8004816:	4602      	mov	r2, r0
 8004818:	460b      	mov	r3, r1
 800481a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800481e:	4919      	ldr	r1, [pc, #100]	; (8004884 <Start_AM2302+0x3a8>)
 8004820:	f012 fd02 	bl	8017228 <siprintf>
	  		strcat(str_t_and_h, str_t_and_h_buffer);
 8004824:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004828:	f107 0308 	add.w	r3, r7, #8
 800482c:	4611      	mov	r1, r2
 800482e:	4618      	mov	r0, r3
 8004830:	f012 fd5d 	bl	80172ee <strcat>
	  		strcat(str_t_and_h, " C\n\r\0");
 8004834:	f107 0308 	add.w	r3, r7, #8
 8004838:	4618      	mov	r0, r3
 800483a:	f7fb fcc9 	bl	80001d0 <strlen>
 800483e:	4603      	mov	r3, r0
 8004840:	461a      	mov	r2, r3
 8004842:	f107 0308 	add.w	r3, r7, #8
 8004846:	4413      	add	r3, r2
 8004848:	4a11      	ldr	r2, [pc, #68]	; (8004890 <Start_AM2302+0x3b4>)
 800484a:	6810      	ldr	r0, [r2, #0]
 800484c:	6018      	str	r0, [r3, #0]
 800484e:	7912      	ldrb	r2, [r2, #4]
 8004850:	711a      	strb	r2, [r3, #4]

	  		strcat(msg.Buf, str_t_and_h);										//	Write main buffer with data in queue
 8004852:	f107 0208 	add.w	r2, r7, #8
 8004856:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800485a:	4611      	mov	r1, r2
 800485c:	4618      	mov	r0, r3
 800485e:	f012 fd46 	bl	80172ee <strcat>

	  		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)
 8004862:	4b0c      	ldr	r3, [pc, #48]	; (8004894 <Start_AM2302+0x3b8>)
 8004864:	6818      	ldr	r0, [r3, #0]
 8004866:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 800486a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800486e:	2200      	movs	r2, #0
 8004870:	f00d fc24 	bl	80120bc <osMessageQueuePut>
  {
 8004874:	e65c      	b.n	8004530 <Start_AM2302+0x54>
 8004876:	bf00      	nop
 8004878:	40020800 	.word	0x40020800
 800487c:	08019994 	.word	0x08019994
 8004880:	08019954 	.word	0x08019954
 8004884:	08019958 	.word	0x08019958
 8004888:	0801995c 	.word	0x0801995c
 800488c:	08019964 	.word	0x08019964
 8004890:	080199a0 	.word	0x080199a0
 8004894:	2000a3a4 	.word	0x2000a3a4

08004898 <Start_SD_CARD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_SD_CARD */
void Start_SD_CARD(void *argument)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b086      	sub	sp, #24
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_SD_CARD */
  /* Infinite loop */

	Mount_SD("/");
 80048a0:	4823      	ldr	r0, [pc, #140]	; (8004930 <Start_SD_CARD+0x98>)
 80048a2:	f7fd fd71 	bl	8002388 <Mount_SD>

	Create_File("test_data_1.txt");
 80048a6:	4823      	ldr	r0, [pc, #140]	; (8004934 <Start_SD_CARD+0x9c>)
 80048a8:	f7fd fdb4 	bl	8002414 <Create_File>
	Update_File("test_data_1.txt","\n\rStart recording\r\n");	// Add data to the end of file
 80048ac:	4922      	ldr	r1, [pc, #136]	; (8004938 <Start_SD_CARD+0xa0>)
 80048ae:	4821      	ldr	r0, [pc, #132]	; (8004934 <Start_SD_CARD+0x9c>)
 80048b0:	f7fd fe46 	bl	8002540 <Update_File>

	// Create folders
	Create_Dir("test_folder_1");
 80048b4:	4821      	ldr	r0, [pc, #132]	; (800493c <Start_SD_CARD+0xa4>)
 80048b6:	f7fd ff03 	bl	80026c0 <Create_Dir>
	Create_Dir("test_folder_2");
 80048ba:	4821      	ldr	r0, [pc, #132]	; (8004940 <Start_SD_CARD+0xa8>)
 80048bc:	f7fd ff00 	bl	80026c0 <Create_Dir>
	Create_Dir("test_folder_3");
 80048c0:	4820      	ldr	r0, [pc, #128]	; (8004944 <Start_SD_CARD+0xac>)
 80048c2:	f7fd fefd 	bl	80026c0 <Create_Dir>

	Unmount_SD("/");
 80048c6:	481a      	ldr	r0, [pc, #104]	; (8004930 <Start_SD_CARD+0x98>)
 80048c8:	f7fd fd82 	bl	80023d0 <Unmount_SD>
	static int i = 0;											// Test data for write

  for(;;)
  {
	  // Log data ewery one second
	  osDelay(1000);
 80048cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048d0:	f00d fa22 	bl	8011d18 <osDelay>
	  HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);			// LED ON
 80048d4:	2201      	movs	r2, #1
 80048d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80048da:	481b      	ldr	r0, [pc, #108]	; (8004948 <Start_SD_CARD+0xb0>)
 80048dc:	f001 fda4 	bl	8006428 <HAL_GPIO_WritePin>

	  Mount_SD("/");
 80048e0:	4813      	ldr	r0, [pc, #76]	; (8004930 <Start_SD_CARD+0x98>)
 80048e2:	f7fd fd51 	bl	8002388 <Mount_SD>

	  char data[10] = {0};
 80048e6:	2300      	movs	r3, #0
 80048e8:	60fb      	str	r3, [r7, #12]
 80048ea:	f107 0310 	add.w	r3, r7, #16
 80048ee:	2200      	movs	r2, #0
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	809a      	strh	r2, [r3, #4]
	  sprintf(data, "%d\n", i);
 80048f4:	4b15      	ldr	r3, [pc, #84]	; (800494c <Start_SD_CARD+0xb4>)
 80048f6:	681a      	ldr	r2, [r3, #0]
 80048f8:	f107 030c 	add.w	r3, r7, #12
 80048fc:	4914      	ldr	r1, [pc, #80]	; (8004950 <Start_SD_CARD+0xb8>)
 80048fe:	4618      	mov	r0, r3
 8004900:	f012 fc92 	bl	8017228 <siprintf>
	  Update_File("test_data_1.txt", data);						// Add data to the end of file
 8004904:	f107 030c 	add.w	r3, r7, #12
 8004908:	4619      	mov	r1, r3
 800490a:	480a      	ldr	r0, [pc, #40]	; (8004934 <Start_SD_CARD+0x9c>)
 800490c:	f7fd fe18 	bl	8002540 <Update_File>
	  i++;
 8004910:	4b0e      	ldr	r3, [pc, #56]	; (800494c <Start_SD_CARD+0xb4>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	3301      	adds	r3, #1
 8004916:	4a0d      	ldr	r2, [pc, #52]	; (800494c <Start_SD_CARD+0xb4>)
 8004918:	6013      	str	r3, [r2, #0]

	  Unmount_SD("/");
 800491a:	4805      	ldr	r0, [pc, #20]	; (8004930 <Start_SD_CARD+0x98>)
 800491c:	f7fd fd58 	bl	80023d0 <Unmount_SD>

	  HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_RESET);		// LED OFF
 8004920:	2200      	movs	r2, #0
 8004922:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004926:	4808      	ldr	r0, [pc, #32]	; (8004948 <Start_SD_CARD+0xb0>)
 8004928:	f001 fd7e 	bl	8006428 <HAL_GPIO_WritePin>
  {
 800492c:	e7ce      	b.n	80048cc <Start_SD_CARD+0x34>
 800492e:	bf00      	nop
 8004930:	080199a8 	.word	0x080199a8
 8004934:	080199ac 	.word	0x080199ac
 8004938:	080199bc 	.word	0x080199bc
 800493c:	080199d0 	.word	0x080199d0
 8004940:	080199e0 	.word	0x080199e0
 8004944:	080199f0 	.word	0x080199f0
 8004948:	40020c00 	.word	0x40020c00
 800494c:	20000780 	.word	0x20000780
 8004950:	08019a00 	.word	0x08019a00

08004954 <Start_LCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LCD */
void Start_LCD(void *argument)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b082      	sub	sp, #8
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LCD */
  /* Infinite loop */
	LCD_init();
 800495c:	f001 f9ac 	bl	8005cb8 <LCD_init>

  for(;;)
  {
	osDelay(100);
 8004960:	2064      	movs	r0, #100	; 0x64
 8004962:	f00d f9d9 	bl	8011d18 <osDelay>
	HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET);
 8004966:	2201      	movs	r2, #1
 8004968:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800496c:	4807      	ldr	r0, [pc, #28]	; (800498c <Start_LCD+0x38>)
 800496e:	f001 fd5b 	bl	8006428 <HAL_GPIO_WritePin>
	speed_test_LCD(10);
 8004972:	200a      	movs	r0, #10
 8004974:	f001 fa00 	bl	8005d78 <speed_test_LCD>
	lcd_test_print();
 8004978:	f001 f9ae 	bl	8005cd8 <lcd_test_print>
	HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_RESET);
 800497c:	2200      	movs	r2, #0
 800497e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004982:	4802      	ldr	r0, [pc, #8]	; (800498c <Start_LCD+0x38>)
 8004984:	f001 fd50 	bl	8006428 <HAL_GPIO_WritePin>
	osDelay(100);
 8004988:	e7ea      	b.n	8004960 <Start_LCD+0xc>
 800498a:	bf00      	nop
 800498c:	40020c00 	.word	0x40020c00

08004990 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b082      	sub	sp, #8
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	// Handler for generate us dalay 			( FOR AM2302 )
	if(htim->Instance == TIM10) 				//check if the interrupt comes from TIM10
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a20      	ldr	r2, [pc, #128]	; (8004a20 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d10c      	bne.n	80049bc <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		if(tim_val > 0)
 80049a2:	4b20      	ldr	r3, [pc, #128]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d005      	beq.n	80049b6 <HAL_TIM_PeriodElapsedCallback+0x26>
		{
			tim_val = tim_val - 1;
 80049aa:	4b1e      	ldr	r3, [pc, #120]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3b01      	subs	r3, #1
 80049b0:	4a1c      	ldr	r2, [pc, #112]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	e002      	b.n	80049bc <HAL_TIM_PeriodElapsedCallback+0x2c>
		}
		else									// For avoid overflow variable
		{
			tim_val = 0;
 80049b6:	4b1b      	ldr	r3, [pc, #108]	; (8004a24 <HAL_TIM_PeriodElapsedCallback+0x94>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]
	{
		//HAL_GPIO_TogglePin(GPIOD, LD4_Pin);		// Green LED
	}

	// Handler for count how many time works any tasks
	if(htim->Instance == TIM3)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a19      	ldr	r2, [pc, #100]	; (8004a28 <HAL_TIM_PeriodElapsedCallback+0x98>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d104      	bne.n	80049d0 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		ulHighFreqebcyTimerTicks++;					// Update time tasks counter
 80049c6:	4b19      	ldr	r3, [pc, #100]	; (8004a2c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	3301      	adds	r3, #1
 80049cc:	4a17      	ldr	r2, [pc, #92]	; (8004a2c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80049ce:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a16      	ldr	r2, [pc, #88]	; (8004a30 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d101      	bne.n	80049de <HAL_TIM_PeriodElapsedCallback+0x4e>
    HAL_IncTick();
 80049da:	f001 fa63 	bl	8005ea4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

	if (htim->Instance == TIM14)		// For SD works (use in fatfs_sd.c file)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a13      	ldr	r2, [pc, #76]	; (8004a30 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d117      	bne.n	8004a18 <HAL_TIM_PeriodElapsedCallback+0x88>
	{
		if(Timer1 > 0)
 80049e8:	4b12      	ldr	r3, [pc, #72]	; (8004a34 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d006      	beq.n	8004a00 <HAL_TIM_PeriodElapsedCallback+0x70>
		    Timer1--;
 80049f2:	4b10      	ldr	r3, [pc, #64]	; (8004a34 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	b2db      	uxtb	r3, r3
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	4b0d      	ldr	r3, [pc, #52]	; (8004a34 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80049fe:	701a      	strb	r2, [r3, #0]

		  if(Timer2 > 0)
 8004a00:	4b0d      	ldr	r3, [pc, #52]	; (8004a38 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d006      	beq.n	8004a18 <HAL_TIM_PeriodElapsedCallback+0x88>
		    Timer2--;
 8004a0a:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	4b08      	ldr	r3, [pc, #32]	; (8004a38 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004a16:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END Callback 1 */
}
 8004a18:	bf00      	nop
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40014400 	.word	0x40014400
 8004a24:	2000077c 	.word	0x2000077c
 8004a28:	40000400 	.word	0x40000400
 8004a2c:	20010fe0 	.word	0x20010fe0
 8004a30:	40002000 	.word	0x40002000
 8004a34:	20012160 	.word	0x20012160
 8004a38:	20010ff8 	.word	0x20010ff8

08004a3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a40:	b672      	cpsid	i
}
 8004a42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004a44:	e7fe      	b.n	8004a44 <Error_Handler+0x8>
	...

08004a48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a4e:	2300      	movs	r3, #0
 8004a50:	607b      	str	r3, [r7, #4]
 8004a52:	4b12      	ldr	r3, [pc, #72]	; (8004a9c <HAL_MspInit+0x54>)
 8004a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a56:	4a11      	ldr	r2, [pc, #68]	; (8004a9c <HAL_MspInit+0x54>)
 8004a58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004a5c:	6453      	str	r3, [r2, #68]	; 0x44
 8004a5e:	4b0f      	ldr	r3, [pc, #60]	; (8004a9c <HAL_MspInit+0x54>)
 8004a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a66:	607b      	str	r3, [r7, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	603b      	str	r3, [r7, #0]
 8004a6e:	4b0b      	ldr	r3, [pc, #44]	; (8004a9c <HAL_MspInit+0x54>)
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <HAL_MspInit+0x54>)
 8004a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a78:	6413      	str	r3, [r2, #64]	; 0x40
 8004a7a:	4b08      	ldr	r3, [pc, #32]	; (8004a9c <HAL_MspInit+0x54>)
 8004a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a82:	603b      	str	r3, [r7, #0]
 8004a84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004a86:	2200      	movs	r2, #0
 8004a88:	210f      	movs	r1, #15
 8004a8a:	f06f 0001 	mvn.w	r0, #1
 8004a8e:	f001 fb05 	bl	800609c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a92:	bf00      	nop
 8004a94:	3708      	adds	r7, #8
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40023800 	.word	0x40023800

08004aa0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08a      	sub	sp, #40	; 0x28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aa8:	f107 0314 	add.w	r3, r7, #20
 8004aac:	2200      	movs	r2, #0
 8004aae:	601a      	str	r2, [r3, #0]
 8004ab0:	605a      	str	r2, [r3, #4]
 8004ab2:	609a      	str	r2, [r3, #8]
 8004ab4:	60da      	str	r2, [r3, #12]
 8004ab6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a29      	ldr	r2, [pc, #164]	; (8004b64 <HAL_I2C_MspInit+0xc4>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d14b      	bne.n	8004b5a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	613b      	str	r3, [r7, #16]
 8004ac6:	4b28      	ldr	r3, [pc, #160]	; (8004b68 <HAL_I2C_MspInit+0xc8>)
 8004ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aca:	4a27      	ldr	r2, [pc, #156]	; (8004b68 <HAL_I2C_MspInit+0xc8>)
 8004acc:	f043 0304 	orr.w	r3, r3, #4
 8004ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ad2:	4b25      	ldr	r3, [pc, #148]	; (8004b68 <HAL_I2C_MspInit+0xc8>)
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ad6:	f003 0304 	and.w	r3, r3, #4
 8004ada:	613b      	str	r3, [r7, #16]
 8004adc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ade:	2300      	movs	r3, #0
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	4b21      	ldr	r3, [pc, #132]	; (8004b68 <HAL_I2C_MspInit+0xc8>)
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	4a20      	ldr	r2, [pc, #128]	; (8004b68 <HAL_I2C_MspInit+0xc8>)
 8004ae8:	f043 0301 	orr.w	r3, r3, #1
 8004aec:	6313      	str	r3, [r2, #48]	; 0x30
 8004aee:	4b1e      	ldr	r3, [pc, #120]	; (8004b68 <HAL_I2C_MspInit+0xc8>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004afa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b00:	2312      	movs	r3, #18
 8004b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b04:	2300      	movs	r3, #0
 8004b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004b0c:	2304      	movs	r3, #4
 8004b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b10:	f107 0314 	add.w	r3, r7, #20
 8004b14:	4619      	mov	r1, r3
 8004b16:	4815      	ldr	r0, [pc, #84]	; (8004b6c <HAL_I2C_MspInit+0xcc>)
 8004b18:	f001 faea 	bl	80060f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004b1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b22:	2312      	movs	r3, #18
 8004b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b26:	2300      	movs	r3, #0
 8004b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b2a:	2303      	movs	r3, #3
 8004b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004b2e:	2304      	movs	r3, #4
 8004b30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b32:	f107 0314 	add.w	r3, r7, #20
 8004b36:	4619      	mov	r1, r3
 8004b38:	480d      	ldr	r0, [pc, #52]	; (8004b70 <HAL_I2C_MspInit+0xd0>)
 8004b3a:	f001 fad9 	bl	80060f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60bb      	str	r3, [r7, #8]
 8004b42:	4b09      	ldr	r3, [pc, #36]	; (8004b68 <HAL_I2C_MspInit+0xc8>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b46:	4a08      	ldr	r2, [pc, #32]	; (8004b68 <HAL_I2C_MspInit+0xc8>)
 8004b48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b4e:	4b06      	ldr	r3, [pc, #24]	; (8004b68 <HAL_I2C_MspInit+0xc8>)
 8004b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b56:	60bb      	str	r3, [r7, #8]
 8004b58:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004b5a:	bf00      	nop
 8004b5c:	3728      	adds	r7, #40	; 0x28
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	40005c00 	.word	0x40005c00
 8004b68:	40023800 	.word	0x40023800
 8004b6c:	40020800 	.word	0x40020800
 8004b70:	40020000 	.word	0x40020000

08004b74 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a0b      	ldr	r2, [pc, #44]	; (8004bb0 <HAL_RNG_MspInit+0x3c>)
 8004b82:	4293      	cmp	r3, r2
 8004b84:	d10d      	bne.n	8004ba2 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004b86:	2300      	movs	r3, #0
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	4b0a      	ldr	r3, [pc, #40]	; (8004bb4 <HAL_RNG_MspInit+0x40>)
 8004b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b8e:	4a09      	ldr	r2, [pc, #36]	; (8004bb4 <HAL_RNG_MspInit+0x40>)
 8004b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b94:	6353      	str	r3, [r2, #52]	; 0x34
 8004b96:	4b07      	ldr	r3, [pc, #28]	; (8004bb4 <HAL_RNG_MspInit+0x40>)
 8004b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8004ba2:	bf00      	nop
 8004ba4:	3714      	adds	r7, #20
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bac:	4770      	bx	lr
 8004bae:	bf00      	nop
 8004bb0:	50060800 	.word	0x50060800
 8004bb4:	40023800 	.word	0x40023800

08004bb8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b086      	sub	sp, #24
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004bc0:	f107 0308 	add.w	r3, r7, #8
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]
 8004bc8:	605a      	str	r2, [r3, #4]
 8004bca:	609a      	str	r2, [r3, #8]
 8004bcc:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a0c      	ldr	r2, [pc, #48]	; (8004c04 <HAL_RTC_MspInit+0x4c>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d111      	bne.n	8004bfc <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004bd8:	2302      	movs	r3, #2
 8004bda:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004bdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004be0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004be2:	f107 0308 	add.w	r3, r7, #8
 8004be6:	4618      	mov	r0, r3
 8004be8:	f004 fcf0 	bl	80095cc <HAL_RCCEx_PeriphCLKConfig>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004bf2:	f7ff ff23 	bl	8004a3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004bf6:	4b04      	ldr	r3, [pc, #16]	; (8004c08 <HAL_RTC_MspInit+0x50>)
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004bfc:	bf00      	nop
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	40002800 	.word	0x40002800
 8004c08:	42470e3c 	.word	0x42470e3c

08004c0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b08c      	sub	sp, #48	; 0x30
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c14:	f107 031c 	add.w	r3, r7, #28
 8004c18:	2200      	movs	r2, #0
 8004c1a:	601a      	str	r2, [r3, #0]
 8004c1c:	605a      	str	r2, [r3, #4]
 8004c1e:	609a      	str	r2, [r3, #8]
 8004c20:	60da      	str	r2, [r3, #12]
 8004c22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a41      	ldr	r2, [pc, #260]	; (8004d30 <HAL_SPI_MspInit+0x124>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d12c      	bne.n	8004c88 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004c2e:	2300      	movs	r3, #0
 8004c30:	61bb      	str	r3, [r7, #24]
 8004c32:	4b40      	ldr	r3, [pc, #256]	; (8004d34 <HAL_SPI_MspInit+0x128>)
 8004c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c36:	4a3f      	ldr	r2, [pc, #252]	; (8004d34 <HAL_SPI_MspInit+0x128>)
 8004c38:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004c3c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c3e:	4b3d      	ldr	r3, [pc, #244]	; (8004d34 <HAL_SPI_MspInit+0x128>)
 8004c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c46:	61bb      	str	r3, [r7, #24]
 8004c48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	617b      	str	r3, [r7, #20]
 8004c4e:	4b39      	ldr	r3, [pc, #228]	; (8004d34 <HAL_SPI_MspInit+0x128>)
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	4a38      	ldr	r2, [pc, #224]	; (8004d34 <HAL_SPI_MspInit+0x128>)
 8004c54:	f043 0301 	orr.w	r3, r3, #1
 8004c58:	6313      	str	r3, [r2, #48]	; 0x30
 8004c5a:	4b36      	ldr	r3, [pc, #216]	; (8004d34 <HAL_SPI_MspInit+0x128>)
 8004c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c5e:	f003 0301 	and.w	r3, r3, #1
 8004c62:	617b      	str	r3, [r7, #20]
 8004c64:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8004c66:	23e0      	movs	r3, #224	; 0xe0
 8004c68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c6a:	2302      	movs	r3, #2
 8004c6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004c72:	2302      	movs	r3, #2
 8004c74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004c76:	2305      	movs	r3, #5
 8004c78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c7a:	f107 031c 	add.w	r3, r7, #28
 8004c7e:	4619      	mov	r1, r3
 8004c80:	482d      	ldr	r0, [pc, #180]	; (8004d38 <HAL_SPI_MspInit+0x12c>)
 8004c82:	f001 fa35 	bl	80060f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004c86:	e04f      	b.n	8004d28 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a2b      	ldr	r2, [pc, #172]	; (8004d3c <HAL_SPI_MspInit+0x130>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d14a      	bne.n	8004d28 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004c92:	2300      	movs	r3, #0
 8004c94:	613b      	str	r3, [r7, #16]
 8004c96:	4b27      	ldr	r3, [pc, #156]	; (8004d34 <HAL_SPI_MspInit+0x128>)
 8004c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9a:	4a26      	ldr	r2, [pc, #152]	; (8004d34 <HAL_SPI_MspInit+0x128>)
 8004c9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ca0:	6413      	str	r3, [r2, #64]	; 0x40
 8004ca2:	4b24      	ldr	r3, [pc, #144]	; (8004d34 <HAL_SPI_MspInit+0x128>)
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004caa:	613b      	str	r3, [r7, #16]
 8004cac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cae:	2300      	movs	r3, #0
 8004cb0:	60fb      	str	r3, [r7, #12]
 8004cb2:	4b20      	ldr	r3, [pc, #128]	; (8004d34 <HAL_SPI_MspInit+0x128>)
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	4a1f      	ldr	r2, [pc, #124]	; (8004d34 <HAL_SPI_MspInit+0x128>)
 8004cb8:	f043 0304 	orr.w	r3, r3, #4
 8004cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8004cbe:	4b1d      	ldr	r3, [pc, #116]	; (8004d34 <HAL_SPI_MspInit+0x128>)
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60bb      	str	r3, [r7, #8]
 8004cce:	4b19      	ldr	r3, [pc, #100]	; (8004d34 <HAL_SPI_MspInit+0x128>)
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	4a18      	ldr	r2, [pc, #96]	; (8004d34 <HAL_SPI_MspInit+0x128>)
 8004cd4:	f043 0302 	orr.w	r3, r3, #2
 8004cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8004cda:	4b16      	ldr	r3, [pc, #88]	; (8004d34 <HAL_SPI_MspInit+0x128>)
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	60bb      	str	r3, [r7, #8]
 8004ce4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004ce6:	2304      	movs	r3, #4
 8004ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cea:	2302      	movs	r3, #2
 8004cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004cf6:	2305      	movs	r3, #5
 8004cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cfa:	f107 031c 	add.w	r3, r7, #28
 8004cfe:	4619      	mov	r1, r3
 8004d00:	480f      	ldr	r0, [pc, #60]	; (8004d40 <HAL_SPI_MspInit+0x134>)
 8004d02:	f001 f9f5 	bl	80060f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004d06:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004d0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d10:	2300      	movs	r3, #0
 8004d12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d14:	2303      	movs	r3, #3
 8004d16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004d18:	2305      	movs	r3, #5
 8004d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d1c:	f107 031c 	add.w	r3, r7, #28
 8004d20:	4619      	mov	r1, r3
 8004d22:	4808      	ldr	r0, [pc, #32]	; (8004d44 <HAL_SPI_MspInit+0x138>)
 8004d24:	f001 f9e4 	bl	80060f0 <HAL_GPIO_Init>
}
 8004d28:	bf00      	nop
 8004d2a:	3730      	adds	r7, #48	; 0x30
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	40013000 	.word	0x40013000
 8004d34:	40023800 	.word	0x40023800
 8004d38:	40020000 	.word	0x40020000
 8004d3c:	40003800 	.word	0x40003800
 8004d40:	40020800 	.word	0x40020800
 8004d44:	40020400 	.word	0x40020400

08004d48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b086      	sub	sp, #24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a38      	ldr	r2, [pc, #224]	; (8004e38 <HAL_TIM_Base_MspInit+0xf0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d116      	bne.n	8004d88 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	617b      	str	r3, [r7, #20]
 8004d5e:	4b37      	ldr	r3, [pc, #220]	; (8004e3c <HAL_TIM_Base_MspInit+0xf4>)
 8004d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d62:	4a36      	ldr	r2, [pc, #216]	; (8004e3c <HAL_TIM_Base_MspInit+0xf4>)
 8004d64:	f043 0301 	orr.w	r3, r3, #1
 8004d68:	6453      	str	r3, [r2, #68]	; 0x44
 8004d6a:	4b34      	ldr	r3, [pc, #208]	; (8004e3c <HAL_TIM_Base_MspInit+0xf4>)
 8004d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d6e:	f003 0301 	and.w	r3, r3, #1
 8004d72:	617b      	str	r3, [r7, #20]
 8004d74:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8004d76:	2200      	movs	r2, #0
 8004d78:	2105      	movs	r1, #5
 8004d7a:	2019      	movs	r0, #25
 8004d7c:	f001 f98e 	bl	800609c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004d80:	2019      	movs	r0, #25
 8004d82:	f001 f9a7 	bl	80060d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8004d86:	e052      	b.n	8004e2e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM2)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d90:	d116      	bne.n	8004dc0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d92:	2300      	movs	r3, #0
 8004d94:	613b      	str	r3, [r7, #16]
 8004d96:	4b29      	ldr	r3, [pc, #164]	; (8004e3c <HAL_TIM_Base_MspInit+0xf4>)
 8004d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9a:	4a28      	ldr	r2, [pc, #160]	; (8004e3c <HAL_TIM_Base_MspInit+0xf4>)
 8004d9c:	f043 0301 	orr.w	r3, r3, #1
 8004da0:	6413      	str	r3, [r2, #64]	; 0x40
 8004da2:	4b26      	ldr	r3, [pc, #152]	; (8004e3c <HAL_TIM_Base_MspInit+0xf4>)
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	f003 0301 	and.w	r3, r3, #1
 8004daa:	613b      	str	r3, [r7, #16]
 8004dac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004dae:	2200      	movs	r2, #0
 8004db0:	2105      	movs	r1, #5
 8004db2:	201c      	movs	r0, #28
 8004db4:	f001 f972 	bl	800609c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004db8:	201c      	movs	r0, #28
 8004dba:	f001 f98b 	bl	80060d4 <HAL_NVIC_EnableIRQ>
}
 8004dbe:	e036      	b.n	8004e2e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a1e      	ldr	r2, [pc, #120]	; (8004e40 <HAL_TIM_Base_MspInit+0xf8>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d116      	bne.n	8004df8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004dca:	2300      	movs	r3, #0
 8004dcc:	60fb      	str	r3, [r7, #12]
 8004dce:	4b1b      	ldr	r3, [pc, #108]	; (8004e3c <HAL_TIM_Base_MspInit+0xf4>)
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	4a1a      	ldr	r2, [pc, #104]	; (8004e3c <HAL_TIM_Base_MspInit+0xf4>)
 8004dd4:	f043 0302 	orr.w	r3, r3, #2
 8004dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8004dda:	4b18      	ldr	r3, [pc, #96]	; (8004e3c <HAL_TIM_Base_MspInit+0xf4>)
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	f003 0302 	and.w	r3, r3, #2
 8004de2:	60fb      	str	r3, [r7, #12]
 8004de4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004de6:	2200      	movs	r2, #0
 8004de8:	2105      	movs	r1, #5
 8004dea:	201d      	movs	r0, #29
 8004dec:	f001 f956 	bl	800609c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004df0:	201d      	movs	r0, #29
 8004df2:	f001 f96f 	bl	80060d4 <HAL_NVIC_EnableIRQ>
}
 8004df6:	e01a      	b.n	8004e2e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a11      	ldr	r2, [pc, #68]	; (8004e44 <HAL_TIM_Base_MspInit+0xfc>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d115      	bne.n	8004e2e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004e02:	2300      	movs	r3, #0
 8004e04:	60bb      	str	r3, [r7, #8]
 8004e06:	4b0d      	ldr	r3, [pc, #52]	; (8004e3c <HAL_TIM_Base_MspInit+0xf4>)
 8004e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e0a:	4a0c      	ldr	r2, [pc, #48]	; (8004e3c <HAL_TIM_Base_MspInit+0xf4>)
 8004e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e10:	6453      	str	r3, [r2, #68]	; 0x44
 8004e12:	4b0a      	ldr	r3, [pc, #40]	; (8004e3c <HAL_TIM_Base_MspInit+0xf4>)
 8004e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1a:	60bb      	str	r3, [r7, #8]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8004e1e:	2200      	movs	r2, #0
 8004e20:	2105      	movs	r1, #5
 8004e22:	2019      	movs	r0, #25
 8004e24:	f001 f93a 	bl	800609c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004e28:	2019      	movs	r0, #25
 8004e2a:	f001 f953 	bl	80060d4 <HAL_NVIC_EnableIRQ>
}
 8004e2e:	bf00      	nop
 8004e30:	3718      	adds	r7, #24
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	40010000 	.word	0x40010000
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	40000400 	.word	0x40000400
 8004e44:	40014400 	.word	0x40014400

08004e48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b08c      	sub	sp, #48	; 0x30
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004e50:	2300      	movs	r3, #0
 8004e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004e54:	2300      	movs	r3, #0
 8004e56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8004e58:	2200      	movs	r2, #0
 8004e5a:	6879      	ldr	r1, [r7, #4]
 8004e5c:	202d      	movs	r0, #45	; 0x2d
 8004e5e:	f001 f91d 	bl	800609c <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004e62:	202d      	movs	r0, #45	; 0x2d
 8004e64:	f001 f936 	bl	80060d4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8004e68:	2300      	movs	r3, #0
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	4b1f      	ldr	r3, [pc, #124]	; (8004eec <HAL_InitTick+0xa4>)
 8004e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e70:	4a1e      	ldr	r2, [pc, #120]	; (8004eec <HAL_InitTick+0xa4>)
 8004e72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e76:	6413      	str	r3, [r2, #64]	; 0x40
 8004e78:	4b1c      	ldr	r3, [pc, #112]	; (8004eec <HAL_InitTick+0xa4>)
 8004e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e80:	60fb      	str	r3, [r7, #12]
 8004e82:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004e84:	f107 0210 	add.w	r2, r7, #16
 8004e88:	f107 0314 	add.w	r3, r7, #20
 8004e8c:	4611      	mov	r1, r2
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f004 fb6a 	bl	8009568 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004e94:	f004 fb54 	bl	8009540 <HAL_RCC_GetPCLK1Freq>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ea0:	4a13      	ldr	r2, [pc, #76]	; (8004ef0 <HAL_InitTick+0xa8>)
 8004ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea6:	0c9b      	lsrs	r3, r3, #18
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8004eac:	4b11      	ldr	r3, [pc, #68]	; (8004ef4 <HAL_InitTick+0xac>)
 8004eae:	4a12      	ldr	r2, [pc, #72]	; (8004ef8 <HAL_InitTick+0xb0>)
 8004eb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8004eb2:	4b10      	ldr	r3, [pc, #64]	; (8004ef4 <HAL_InitTick+0xac>)
 8004eb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004eb8:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8004eba:	4a0e      	ldr	r2, [pc, #56]	; (8004ef4 <HAL_InitTick+0xac>)
 8004ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ebe:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8004ec0:	4b0c      	ldr	r3, [pc, #48]	; (8004ef4 <HAL_InitTick+0xac>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ec6:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <HAL_InitTick+0xac>)
 8004ec8:	2200      	movs	r2, #0
 8004eca:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8004ecc:	4809      	ldr	r0, [pc, #36]	; (8004ef4 <HAL_InitTick+0xac>)
 8004ece:	f005 fd7d 	bl	800a9cc <HAL_TIM_Base_Init>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d104      	bne.n	8004ee2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8004ed8:	4806      	ldr	r0, [pc, #24]	; (8004ef4 <HAL_InitTick+0xac>)
 8004eda:	f005 fdc7 	bl	800aa6c <HAL_TIM_Base_Start_IT>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	e000      	b.n	8004ee4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3730      	adds	r7, #48	; 0x30
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40023800 	.word	0x40023800
 8004ef0:	431bde83 	.word	0x431bde83
 8004ef4:	200132e8 	.word	0x200132e8
 8004ef8:	40002000 	.word	0x40002000

08004efc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004efc:	b480      	push	{r7}
 8004efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004f00:	e7fe      	b.n	8004f00 <NMI_Handler+0x4>

08004f02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004f02:	b480      	push	{r7}
 8004f04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004f06:	e7fe      	b.n	8004f06 <HardFault_Handler+0x4>

08004f08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004f0c:	e7fe      	b.n	8004f0c <MemManage_Handler+0x4>

08004f0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004f0e:	b480      	push	{r7}
 8004f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004f12:	e7fe      	b.n	8004f12 <BusFault_Handler+0x4>

08004f14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004f14:	b480      	push	{r7}
 8004f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004f18:	e7fe      	b.n	8004f18 <UsageFault_Handler+0x4>

08004f1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004f1e:	bf00      	nop
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */


  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004f2c:	4803      	ldr	r0, [pc, #12]	; (8004f3c <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004f2e:	f005 fe3c 	bl	800abaa <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004f32:	4803      	ldr	r0, [pc, #12]	; (8004f40 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004f34:	f005 fe39 	bl	800abaa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004f38:	bf00      	nop
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	20010d98 	.word	0x20010d98
 8004f40:	200091d8 	.word	0x200091d8

08004f44 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//	HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004f48:	4802      	ldr	r0, [pc, #8]	; (8004f54 <TIM2_IRQHandler+0x10>)
 8004f4a:	f005 fe2e 	bl	800abaa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004f4e:	bf00      	nop
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	20011118 	.word	0x20011118

08004f58 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004f5c:	4802      	ldr	r0, [pc, #8]	; (8004f68 <TIM3_IRQHandler+0x10>)
 8004f5e:	f005 fe24 	bl	800abaa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004f62:	bf00      	nop
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	2000dba8 	.word	0x2000dba8

08004f6c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004f70:	4802      	ldr	r0, [pc, #8]	; (8004f7c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004f72:	f005 fe1a 	bl	800abaa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004f76:	bf00      	nop
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	bf00      	nop
 8004f7c:	200132e8 	.word	0x200132e8

08004f80 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004f84:	4802      	ldr	r0, [pc, #8]	; (8004f90 <OTG_FS_IRQHandler+0x10>)
 8004f86:	f002 fe5c 	bl	8007c42 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004f8a:	bf00      	nop
 8004f8c:	bd80      	pop	{r7, pc}
 8004f8e:	bf00      	nop
 8004f90:	200168b8 	.word	0x200168b8

08004f94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f94:	b480      	push	{r7}
 8004f96:	af00      	add	r7, sp, #0
	return 1;
 8004f98:	2301      	movs	r3, #1
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <_kill>:

int _kill(int pid, int sig)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b082      	sub	sp, #8
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004fae:	f011 fa49 	bl	8016444 <__errno>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2216      	movs	r2, #22
 8004fb6:	601a      	str	r2, [r3, #0]
	return -1;
 8004fb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3708      	adds	r7, #8
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}

08004fc4 <_exit>:

void _exit (int status)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b082      	sub	sp, #8
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004fcc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7ff ffe7 	bl	8004fa4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004fd6:	e7fe      	b.n	8004fd6 <_exit+0x12>

08004fd8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b086      	sub	sp, #24
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	617b      	str	r3, [r7, #20]
 8004fe8:	e00a      	b.n	8005000 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004fea:	f3af 8000 	nop.w
 8004fee:	4601      	mov	r1, r0
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	60ba      	str	r2, [r7, #8]
 8004ff6:	b2ca      	uxtb	r2, r1
 8004ff8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	617b      	str	r3, [r7, #20]
 8005000:	697a      	ldr	r2, [r7, #20]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	429a      	cmp	r2, r3
 8005006:	dbf0      	blt.n	8004fea <_read+0x12>
	}

return len;
 8005008:	687b      	ldr	r3, [r7, #4]
}
 800500a:	4618      	mov	r0, r3
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005012:	b580      	push	{r7, lr}
 8005014:	b086      	sub	sp, #24
 8005016:	af00      	add	r7, sp, #0
 8005018:	60f8      	str	r0, [r7, #12]
 800501a:	60b9      	str	r1, [r7, #8]
 800501c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800501e:	2300      	movs	r3, #0
 8005020:	617b      	str	r3, [r7, #20]
 8005022:	e009      	b.n	8005038 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	1c5a      	adds	r2, r3, #1
 8005028:	60ba      	str	r2, [r7, #8]
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	4618      	mov	r0, r3
 800502e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	3301      	adds	r3, #1
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	697a      	ldr	r2, [r7, #20]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	429a      	cmp	r2, r3
 800503e:	dbf1      	blt.n	8005024 <_write+0x12>
	}
	return len;
 8005040:	687b      	ldr	r3, [r7, #4]
}
 8005042:	4618      	mov	r0, r3
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <_close>:

int _close(int file)
{
 800504a:	b480      	push	{r7}
 800504c:	b083      	sub	sp, #12
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
	return -1;
 8005052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005056:	4618      	mov	r0, r3
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
 800506a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005072:	605a      	str	r2, [r3, #4]
	return 0;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	370c      	adds	r7, #12
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <_isatty>:

int _isatty(int file)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
	return 1;
 800508a:	2301      	movs	r3, #1
}
 800508c:	4618      	mov	r0, r3
 800508e:	370c      	adds	r7, #12
 8005090:	46bd      	mov	sp, r7
 8005092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005096:	4770      	bx	lr

08005098 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	60b9      	str	r1, [r7, #8]
 80050a2:	607a      	str	r2, [r7, #4]
	return 0;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
	...

080050b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80050bc:	4a14      	ldr	r2, [pc, #80]	; (8005110 <_sbrk+0x5c>)
 80050be:	4b15      	ldr	r3, [pc, #84]	; (8005114 <_sbrk+0x60>)
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80050c8:	4b13      	ldr	r3, [pc, #76]	; (8005118 <_sbrk+0x64>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d102      	bne.n	80050d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80050d0:	4b11      	ldr	r3, [pc, #68]	; (8005118 <_sbrk+0x64>)
 80050d2:	4a12      	ldr	r2, [pc, #72]	; (800511c <_sbrk+0x68>)
 80050d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80050d6:	4b10      	ldr	r3, [pc, #64]	; (8005118 <_sbrk+0x64>)
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4413      	add	r3, r2
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d207      	bcs.n	80050f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80050e4:	f011 f9ae 	bl	8016444 <__errno>
 80050e8:	4603      	mov	r3, r0
 80050ea:	220c      	movs	r2, #12
 80050ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80050ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050f2:	e009      	b.n	8005108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050f4:	4b08      	ldr	r3, [pc, #32]	; (8005118 <_sbrk+0x64>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050fa:	4b07      	ldr	r3, [pc, #28]	; (8005118 <_sbrk+0x64>)
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4413      	add	r3, r2
 8005102:	4a05      	ldr	r2, [pc, #20]	; (8005118 <_sbrk+0x64>)
 8005104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005106:	68fb      	ldr	r3, [r7, #12]
}
 8005108:	4618      	mov	r0, r3
 800510a:	3718      	adds	r7, #24
 800510c:	46bd      	mov	sp, r7
 800510e:	bd80      	pop	{r7, pc}
 8005110:	20020000 	.word	0x20020000
 8005114:	00000400 	.word	0x00000400
 8005118:	20000784 	.word	0x20000784
 800511c:	20016cd0 	.word	0x20016cd0

08005120 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005120:	b480      	push	{r7}
 8005122:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005124:	4b06      	ldr	r3, [pc, #24]	; (8005140 <SystemInit+0x20>)
 8005126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800512a:	4a05      	ldr	r2, [pc, #20]	; (8005140 <SystemInit+0x20>)
 800512c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005130:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005134:	bf00      	nop
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	e000ed00 	.word	0xe000ed00

08005144 <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8005144:	b590      	push	{r4, r7, lr}
 8005146:	b08b      	sub	sp, #44	; 0x2c
 8005148:	af00      	add	r7, sp, #0
 800514a:	4604      	mov	r4, r0
 800514c:	4608      	mov	r0, r1
 800514e:	4611      	mov	r1, r2
 8005150:	461a      	mov	r2, r3
 8005152:	4623      	mov	r3, r4
 8005154:	80fb      	strh	r3, [r7, #6]
 8005156:	4603      	mov	r3, r0
 8005158:	80bb      	strh	r3, [r7, #4]
 800515a:	460b      	mov	r3, r1
 800515c:	807b      	strh	r3, [r7, #2]
 800515e:	4613      	mov	r3, r2
 8005160:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8005162:	887b      	ldrh	r3, [r7, #2]
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 8005166:	2300      	movs	r3, #0
 8005168:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 800516a:	887b      	ldrh	r3, [r7, #2]
 800516c:	005b      	lsls	r3, r3, #1
 800516e:	f1c3 0301 	rsb	r3, r3, #1
 8005172:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8005174:	2300      	movs	r3, #0
 8005176:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8005178:	2300      	movs	r3, #0
 800517a:	617b      	str	r3, [r7, #20]

    while (x >= y)
 800517c:	e061      	b.n	8005242 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 800517e:	88fa      	ldrh	r2, [r7, #6]
 8005180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	613b      	str	r3, [r7, #16]
 8005186:	e018      	b.n	80051ba <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	b298      	uxth	r0, r3
 800518c:	6a3b      	ldr	r3, [r7, #32]
 800518e:	b29a      	uxth	r2, r3
 8005190:	88bb      	ldrh	r3, [r7, #4]
 8005192:	4413      	add	r3, r2
 8005194:	b29b      	uxth	r3, r3
 8005196:	883a      	ldrh	r2, [r7, #0]
 8005198:	4619      	mov	r1, r3
 800519a:	f000 fc69 	bl	8005a70 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	b298      	uxth	r0, r3
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	88ba      	ldrh	r2, [r7, #4]
 80051a8:	1ad3      	subs	r3, r2, r3
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	883a      	ldrh	r2, [r7, #0]
 80051ae:	4619      	mov	r1, r3
 80051b0:	f000 fc5e 	bl	8005a70 <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	3301      	adds	r3, #1
 80051b8:	613b      	str	r3, [r7, #16]
 80051ba:	88fa      	ldrh	r2, [r7, #6]
 80051bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051be:	4413      	add	r3, r2
 80051c0:	693a      	ldr	r2, [r7, #16]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	dde0      	ble.n	8005188 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 80051c6:	88fa      	ldrh	r2, [r7, #6]
 80051c8:	6a3b      	ldr	r3, [r7, #32]
 80051ca:	1ad3      	subs	r3, r2, r3
 80051cc:	60fb      	str	r3, [r7, #12]
 80051ce:	e018      	b.n	8005202 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	b298      	uxth	r0, r3
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	88bb      	ldrh	r3, [r7, #4]
 80051da:	4413      	add	r3, r2
 80051dc:	b29b      	uxth	r3, r3
 80051de:	883a      	ldrh	r2, [r7, #0]
 80051e0:	4619      	mov	r1, r3
 80051e2:	f000 fc45 	bl	8005a70 <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	b298      	uxth	r0, r3
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	88ba      	ldrh	r2, [r7, #4]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	b29b      	uxth	r3, r3
 80051f4:	883a      	ldrh	r2, [r7, #0]
 80051f6:	4619      	mov	r1, r3
 80051f8:	f000 fc3a 	bl	8005a70 <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	3301      	adds	r3, #1
 8005200:	60fb      	str	r3, [r7, #12]
 8005202:	88fa      	ldrh	r2, [r7, #6]
 8005204:	6a3b      	ldr	r3, [r7, #32]
 8005206:	4413      	add	r3, r2
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	429a      	cmp	r2, r3
 800520c:	dde0      	ble.n	80051d0 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	3301      	adds	r3, #1
 8005212:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	4413      	add	r3, r2
 800521a:	617b      	str	r3, [r7, #20]
        yChange += 2;
 800521c:	69bb      	ldr	r3, [r7, #24]
 800521e:	3302      	adds	r3, #2
 8005220:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	005a      	lsls	r2, r3, #1
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	4413      	add	r3, r2
 800522a:	2b00      	cmp	r3, #0
 800522c:	dd09      	ble.n	8005242 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 800522e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005230:	3b01      	subs	r3, #1
 8005232:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	4413      	add	r3, r2
 800523a:	617b      	str	r3, [r7, #20]
            xChange += 2;
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	3302      	adds	r3, #2
 8005240:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8005242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005244:	6a3b      	ldr	r3, [r7, #32]
 8005246:	429a      	cmp	r2, r3
 8005248:	da99      	bge.n	800517e <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 800524a:	bf00      	nop
 800524c:	bf00      	nop
 800524e:	372c      	adds	r7, #44	; 0x2c
 8005250:	46bd      	mov	sp, r7
 8005252:	bd90      	pop	{r4, r7, pc}

08005254 <ILI9341_Draw_Filled_Rectangle_Coord>:
	
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8005254:	b590      	push	{r4, r7, lr}
 8005256:	b089      	sub	sp, #36	; 0x24
 8005258:	af02      	add	r7, sp, #8
 800525a:	4604      	mov	r4, r0
 800525c:	4608      	mov	r0, r1
 800525e:	4611      	mov	r1, r2
 8005260:	461a      	mov	r2, r3
 8005262:	4623      	mov	r3, r4
 8005264:	80fb      	strh	r3, [r7, #6]
 8005266:	4603      	mov	r3, r0
 8005268:	80bb      	strh	r3, [r7, #4]
 800526a:	460b      	mov	r3, r1
 800526c:	807b      	strh	r3, [r7, #2]
 800526e:	4613      	mov	r3, r2
 8005270:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8005272:	2300      	movs	r3, #0
 8005274:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 800527a:	2300      	movs	r3, #0
 800527c:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 800527e:	2300      	movs	r3, #0
 8005280:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 8005282:	2300      	movs	r3, #0
 8005284:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 8005286:	2300      	movs	r3, #0
 8005288:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 800528a:	2300      	movs	r3, #0
 800528c:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 800528e:	887a      	ldrh	r2, [r7, #2]
 8005290:	88fb      	ldrh	r3, [r7, #6]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	2b00      	cmp	r3, #0
 800529a:	da01      	bge.n	80052a0 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 800529c:	2301      	movs	r3, #1
 800529e:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 80052a0:	2300      	movs	r3, #0
 80052a2:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 80052a4:	883a      	ldrh	r2, [r7, #0]
 80052a6:	88bb      	ldrh	r3, [r7, #4]
 80052a8:	1ad3      	subs	r3, r2, r3
 80052aa:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	da01      	bge.n	80052b6 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 80052b2:	2301      	movs	r3, #1
 80052b4:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 80052b6:	7cfb      	ldrb	r3, [r7, #19]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d106      	bne.n	80052ca <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 80052bc:	887a      	ldrh	r2, [r7, #2]
 80052be:	88fb      	ldrh	r3, [r7, #6]
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 80052c4:	88fb      	ldrh	r3, [r7, #6]
 80052c6:	823b      	strh	r3, [r7, #16]
 80052c8:	e005      	b.n	80052d6 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 80052ca:	88fa      	ldrh	r2, [r7, #6]
 80052cc:	887b      	ldrh	r3, [r7, #2]
 80052ce:	1ad3      	subs	r3, r2, r3
 80052d0:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 80052d2:	887b      	ldrh	r3, [r7, #2]
 80052d4:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 80052d6:	7cbb      	ldrb	r3, [r7, #18]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d106      	bne.n	80052ea <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 80052dc:	883a      	ldrh	r2, [r7, #0]
 80052de:	88bb      	ldrh	r3, [r7, #4]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 80052e4:	88bb      	ldrh	r3, [r7, #4]
 80052e6:	81fb      	strh	r3, [r7, #14]
 80052e8:	e005      	b.n	80052f6 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 80052ea:	88ba      	ldrh	r2, [r7, #4]
 80052ec:	883b      	ldrh	r3, [r7, #0]
 80052ee:	1ad3      	subs	r3, r2, r3
 80052f0:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 80052f2:	883b      	ldrh	r3, [r7, #0]
 80052f4:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 80052f6:	8abc      	ldrh	r4, [r7, #20]
 80052f8:	8afa      	ldrh	r2, [r7, #22]
 80052fa:	89f9      	ldrh	r1, [r7, #14]
 80052fc:	8a38      	ldrh	r0, [r7, #16]
 80052fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	4623      	mov	r3, r4
 8005304:	f000 fc7c 	bl	8005c00 <ILI9341_Draw_Rectangle>
}
 8005308:	bf00      	nop
 800530a:	371c      	adds	r7, #28
 800530c:	46bd      	mov	sp, r7
 800530e:	bd90      	pop	{r4, r7, pc}

08005310 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8005310:	b590      	push	{r4, r7, lr}
 8005312:	b089      	sub	sp, #36	; 0x24
 8005314:	af02      	add	r7, sp, #8
 8005316:	4604      	mov	r4, r0
 8005318:	4608      	mov	r0, r1
 800531a:	4611      	mov	r1, r2
 800531c:	461a      	mov	r2, r3
 800531e:	4623      	mov	r3, r4
 8005320:	71fb      	strb	r3, [r7, #7]
 8005322:	4603      	mov	r3, r0
 8005324:	80bb      	strh	r3, [r7, #4]
 8005326:	460b      	mov	r3, r1
 8005328:	71bb      	strb	r3, [r7, #6]
 800532a:	4613      	mov	r3, r2
 800532c:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 800532e:	79fb      	ldrb	r3, [r7, #7]
 8005330:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8005332:	7dfb      	ldrb	r3, [r7, #23]
 8005334:	2b1f      	cmp	r3, #31
 8005336:	d902      	bls.n	800533e <ILI9341_Draw_Char+0x2e>
        //Character = 0;
    	//break;
    } else {
        function_char -= 32;
 8005338:	7dfb      	ldrb	r3, [r7, #23]
 800533a:	3b20      	subs	r3, #32
 800533c:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800533e:	2300      	movs	r3, #0
 8005340:	753b      	strb	r3, [r7, #20]
 8005342:	e012      	b.n	800536a <ILI9341_Draw_Char+0x5a>
		{
		temp[k] = font[function_char][k];
 8005344:	7dfa      	ldrb	r2, [r7, #23]
 8005346:	7d38      	ldrb	r0, [r7, #20]
 8005348:	7d39      	ldrb	r1, [r7, #20]
 800534a:	4c3b      	ldr	r4, [pc, #236]	; (8005438 <ILI9341_Draw_Char+0x128>)
 800534c:	4613      	mov	r3, r2
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	4413      	add	r3, r2
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	4423      	add	r3, r4
 8005356:	4403      	add	r3, r0
 8005358:	781a      	ldrb	r2, [r3, #0]
 800535a:	f107 0318 	add.w	r3, r7, #24
 800535e:	440b      	add	r3, r1
 8005360:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8005364:	7d3b      	ldrb	r3, [r7, #20]
 8005366:	3301      	adds	r3, #1
 8005368:	753b      	strb	r3, [r7, #20]
 800536a:	7d3b      	ldrb	r3, [r7, #20]
 800536c:	2b05      	cmp	r3, #5
 800536e:	d9e9      	bls.n	8005344 <ILI9341_Draw_Char+0x34>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8005370:	79bb      	ldrb	r3, [r7, #6]
 8005372:	b299      	uxth	r1, r3
 8005374:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005376:	461a      	mov	r2, r3
 8005378:	0052      	lsls	r2, r2, #1
 800537a:	4413      	add	r3, r2
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	b29a      	uxth	r2, r3
 8005380:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005382:	00db      	lsls	r3, r3, #3
 8005384:	b29c      	uxth	r4, r3
 8005386:	88b8      	ldrh	r0, [r7, #4]
 8005388:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	4623      	mov	r3, r4
 800538e:	f000 fc37 	bl	8005c00 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8005392:	2300      	movs	r3, #0
 8005394:	757b      	strb	r3, [r7, #21]
 8005396:	e046      	b.n	8005426 <ILI9341_Draw_Char+0x116>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8005398:	2300      	movs	r3, #0
 800539a:	75bb      	strb	r3, [r7, #22]
 800539c:	e03d      	b.n	800541a <ILI9341_Draw_Char+0x10a>
            if (temp[j] & (1<<i)) {			
 800539e:	7d7b      	ldrb	r3, [r7, #21]
 80053a0:	f107 0218 	add.w	r2, r7, #24
 80053a4:	4413      	add	r3, r2
 80053a6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80053aa:	461a      	mov	r2, r3
 80053ac:	7dbb      	ldrb	r3, [r7, #22]
 80053ae:	fa42 f303 	asr.w	r3, r2, r3
 80053b2:	f003 0301 	and.w	r3, r3, #1
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d02c      	beq.n	8005414 <ILI9341_Draw_Char+0x104>
							if(Size == 1)
 80053ba:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d10f      	bne.n	80053e0 <ILI9341_Draw_Char+0xd0>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 80053c0:	7d7b      	ldrb	r3, [r7, #21]
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	88bb      	ldrh	r3, [r7, #4]
 80053c6:	4413      	add	r3, r2
 80053c8:	b298      	uxth	r0, r3
 80053ca:	79bb      	ldrb	r3, [r7, #6]
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	7dbb      	ldrb	r3, [r7, #22]
 80053d0:	b29b      	uxth	r3, r3
 80053d2:	4413      	add	r3, r2
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	887a      	ldrh	r2, [r7, #2]
 80053d8:	4619      	mov	r1, r3
 80053da:	f000 fb49 	bl	8005a70 <ILI9341_Draw_Pixel>
 80053de:	e019      	b.n	8005414 <ILI9341_Draw_Char+0x104>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 80053e0:	7d7b      	ldrb	r3, [r7, #21]
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80053e6:	fb12 f303 	smulbb	r3, r2, r3
 80053ea:	b29a      	uxth	r2, r3
 80053ec:	88bb      	ldrh	r3, [r7, #4]
 80053ee:	4413      	add	r3, r2
 80053f0:	b298      	uxth	r0, r3
 80053f2:	79bb      	ldrb	r3, [r7, #6]
 80053f4:	b29a      	uxth	r2, r3
 80053f6:	7dbb      	ldrb	r3, [r7, #22]
 80053f8:	b29b      	uxth	r3, r3
 80053fa:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 80053fc:	fb11 f303 	smulbb	r3, r1, r3
 8005400:	b29b      	uxth	r3, r3
 8005402:	4413      	add	r3, r2
 8005404:	b299      	uxth	r1, r3
 8005406:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8005408:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800540a:	887b      	ldrh	r3, [r7, #2]
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	4623      	mov	r3, r4
 8005410:	f000 fbf6 	bl	8005c00 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8005414:	7dbb      	ldrb	r3, [r7, #22]
 8005416:	3301      	adds	r3, #1
 8005418:	75bb      	strb	r3, [r7, #22]
 800541a:	7dbb      	ldrb	r3, [r7, #22]
 800541c:	2b07      	cmp	r3, #7
 800541e:	d9be      	bls.n	800539e <ILI9341_Draw_Char+0x8e>
    for (j=0; j<CHAR_WIDTH; j++) {
 8005420:	7d7b      	ldrb	r3, [r7, #21]
 8005422:	3301      	adds	r3, #1
 8005424:	757b      	strb	r3, [r7, #21]
 8005426:	7d7b      	ldrb	r3, [r7, #21]
 8005428:	2b05      	cmp	r3, #5
 800542a:	d9b5      	bls.n	8005398 <ILI9341_Draw_Char+0x88>
							}
            }						
        }
    }
}
 800542c:	bf00      	nop
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	bd90      	pop	{r4, r7, pc}
 8005436:	bf00      	nop
 8005438:	08019c30 	.word	0x08019c30

0800543c <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 800543c:	b590      	push	{r4, r7, lr}
 800543e:	b087      	sub	sp, #28
 8005440:	af02      	add	r7, sp, #8
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	4608      	mov	r0, r1
 8005446:	4611      	mov	r1, r2
 8005448:	461a      	mov	r2, r3
 800544a:	4603      	mov	r3, r0
 800544c:	817b      	strh	r3, [r7, #10]
 800544e:	460b      	mov	r3, r1
 8005450:	727b      	strb	r3, [r7, #9]
 8005452:	4613      	mov	r3, r2
 8005454:	80fb      	strh	r3, [r7, #6]
    while (*Text) {
 8005456:	e016      	b.n	8005486 <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	1c5a      	adds	r2, r3, #1
 800545c:	60fa      	str	r2, [r7, #12]
 800545e:	7818      	ldrb	r0, [r3, #0]
 8005460:	88fc      	ldrh	r4, [r7, #6]
 8005462:	7a7a      	ldrb	r2, [r7, #9]
 8005464:	8979      	ldrh	r1, [r7, #10]
 8005466:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005468:	9301      	str	r3, [sp, #4]
 800546a:	8c3b      	ldrh	r3, [r7, #32]
 800546c:	9300      	str	r3, [sp, #0]
 800546e:	4623      	mov	r3, r4
 8005470:	f7ff ff4e 	bl	8005310 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8005474:	8c3b      	ldrh	r3, [r7, #32]
 8005476:	461a      	mov	r2, r3
 8005478:	0052      	lsls	r2, r2, #1
 800547a:	4413      	add	r3, r2
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	b29a      	uxth	r2, r3
 8005480:	897b      	ldrh	r3, [r7, #10]
 8005482:	4413      	add	r3, r2
 8005484:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1e4      	bne.n	8005458 <ILI9341_Draw_Text+0x1c>
    }
}
 800548e:	bf00      	nop
 8005490:	bf00      	nop
 8005492:	3714      	adds	r7, #20
 8005494:	46bd      	mov	sp, r7
 8005496:	bd90      	pop	{r4, r7, pc}

08005498 <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	af00      	add	r7, sp, #0
//MX_SPI5_Init();																							//SPI INIT
//MX_GPIO_Init();																							//GPIO INIT
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 800549c:	2200      	movs	r2, #0
 800549e:	2110      	movs	r1, #16
 80054a0:	4802      	ldr	r0, [pc, #8]	; (80054ac <ILI9341_SPI_Init+0x14>)
 80054a2:	f000 ffc1 	bl	8006428 <HAL_GPIO_WritePin>
}
 80054a6:	bf00      	nop
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	40021000 	.word	0x40021000

080054b0 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b082      	sub	sp, #8
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	4603      	mov	r3, r0
 80054b8:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80054ba:	1df9      	adds	r1, r7, #7
 80054bc:	2301      	movs	r3, #1
 80054be:	2201      	movs	r2, #1
 80054c0:	4803      	ldr	r0, [pc, #12]	; (80054d0 <ILI9341_SPI_Send+0x20>)
 80054c2:	f004 fecd 	bl	800a260 <HAL_SPI_Transmit>
}
 80054c6:	bf00      	nop
 80054c8:	3708      	adds	r7, #8
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	20009160 	.word	0x20009160

080054d4 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80054de:	2200      	movs	r2, #0
 80054e0:	2110      	movs	r1, #16
 80054e2:	480a      	ldr	r0, [pc, #40]	; (800550c <ILI9341_Write_Command+0x38>)
 80054e4:	f000 ffa0 	bl	8006428 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80054e8:	2200      	movs	r2, #0
 80054ea:	2140      	movs	r1, #64	; 0x40
 80054ec:	4807      	ldr	r0, [pc, #28]	; (800550c <ILI9341_Write_Command+0x38>)
 80054ee:	f000 ff9b 	bl	8006428 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80054f2:	79fb      	ldrb	r3, [r7, #7]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff ffdb 	bl	80054b0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80054fa:	2201      	movs	r2, #1
 80054fc:	2110      	movs	r1, #16
 80054fe:	4803      	ldr	r0, [pc, #12]	; (800550c <ILI9341_Write_Command+0x38>)
 8005500:	f000 ff92 	bl	8006428 <HAL_GPIO_WritePin>
}
 8005504:	bf00      	nop
 8005506:	3708      	adds	r7, #8
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	40021000 	.word	0x40021000

08005510 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b082      	sub	sp, #8
 8005514:	af00      	add	r7, sp, #0
 8005516:	4603      	mov	r3, r0
 8005518:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800551a:	2201      	movs	r2, #1
 800551c:	2140      	movs	r1, #64	; 0x40
 800551e:	480a      	ldr	r0, [pc, #40]	; (8005548 <ILI9341_Write_Data+0x38>)
 8005520:	f000 ff82 	bl	8006428 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005524:	2200      	movs	r2, #0
 8005526:	2110      	movs	r1, #16
 8005528:	4807      	ldr	r0, [pc, #28]	; (8005548 <ILI9341_Write_Data+0x38>)
 800552a:	f000 ff7d 	bl	8006428 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 800552e:	79fb      	ldrb	r3, [r7, #7]
 8005530:	4618      	mov	r0, r3
 8005532:	f7ff ffbd 	bl	80054b0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005536:	2201      	movs	r2, #1
 8005538:	2110      	movs	r1, #16
 800553a:	4803      	ldr	r0, [pc, #12]	; (8005548 <ILI9341_Write_Data+0x38>)
 800553c:	f000 ff74 	bl	8006428 <HAL_GPIO_WritePin>
}
 8005540:	bf00      	nop
 8005542:	3708      	adds	r7, #8
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}
 8005548:	40021000 	.word	0x40021000

0800554c <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 800554c:	b590      	push	{r4, r7, lr}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	4604      	mov	r4, r0
 8005554:	4608      	mov	r0, r1
 8005556:	4611      	mov	r1, r2
 8005558:	461a      	mov	r2, r3
 800555a:	4623      	mov	r3, r4
 800555c:	80fb      	strh	r3, [r7, #6]
 800555e:	4603      	mov	r3, r0
 8005560:	80bb      	strh	r3, [r7, #4]
 8005562:	460b      	mov	r3, r1
 8005564:	807b      	strh	r3, [r7, #2]
 8005566:	4613      	mov	r3, r2
 8005568:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 800556a:	202a      	movs	r0, #42	; 0x2a
 800556c:	f7ff ffb2 	bl	80054d4 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8005570:	88fb      	ldrh	r3, [r7, #6]
 8005572:	0a1b      	lsrs	r3, r3, #8
 8005574:	b29b      	uxth	r3, r3
 8005576:	b2db      	uxtb	r3, r3
 8005578:	4618      	mov	r0, r3
 800557a:	f7ff ffc9 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800557e:	88fb      	ldrh	r3, [r7, #6]
 8005580:	b2db      	uxtb	r3, r3
 8005582:	4618      	mov	r0, r3
 8005584:	f7ff ffc4 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8005588:	887b      	ldrh	r3, [r7, #2]
 800558a:	0a1b      	lsrs	r3, r3, #8
 800558c:	b29b      	uxth	r3, r3
 800558e:	b2db      	uxtb	r3, r3
 8005590:	4618      	mov	r0, r3
 8005592:	f7ff ffbd 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8005596:	887b      	ldrh	r3, [r7, #2]
 8005598:	b2db      	uxtb	r3, r3
 800559a:	4618      	mov	r0, r3
 800559c:	f7ff ffb8 	bl	8005510 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 80055a0:	202b      	movs	r0, #43	; 0x2b
 80055a2:	f7ff ff97 	bl	80054d4 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80055a6:	88bb      	ldrh	r3, [r7, #4]
 80055a8:	0a1b      	lsrs	r3, r3, #8
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	b2db      	uxtb	r3, r3
 80055ae:	4618      	mov	r0, r3
 80055b0:	f7ff ffae 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80055b4:	88bb      	ldrh	r3, [r7, #4]
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	4618      	mov	r0, r3
 80055ba:	f7ff ffa9 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80055be:	883b      	ldrh	r3, [r7, #0]
 80055c0:	0a1b      	lsrs	r3, r3, #8
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	4618      	mov	r0, r3
 80055c8:	f7ff ffa2 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 80055cc:	883b      	ldrh	r3, [r7, #0]
 80055ce:	b2db      	uxtb	r3, r3
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7ff ff9d 	bl	8005510 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 80055d6:	202c      	movs	r0, #44	; 0x2c
 80055d8:	f7ff ff7c 	bl	80054d4 <ILI9341_Write_Command>
}
 80055dc:	bf00      	nop
 80055de:	370c      	adds	r7, #12
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd90      	pop	{r4, r7, pc}

080055e4 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 80055e8:	2200      	movs	r2, #0
 80055ea:	2120      	movs	r1, #32
 80055ec:	480a      	ldr	r0, [pc, #40]	; (8005618 <ILI9341_Reset+0x34>)
 80055ee:	f000 ff1b 	bl	8006428 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80055f2:	20c8      	movs	r0, #200	; 0xc8
 80055f4:	f000 fc76 	bl	8005ee4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80055f8:	2200      	movs	r2, #0
 80055fa:	2110      	movs	r1, #16
 80055fc:	4806      	ldr	r0, [pc, #24]	; (8005618 <ILI9341_Reset+0x34>)
 80055fe:	f000 ff13 	bl	8006428 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8005602:	20c8      	movs	r0, #200	; 0xc8
 8005604:	f000 fc6e 	bl	8005ee4 <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8005608:	2201      	movs	r2, #1
 800560a:	2120      	movs	r1, #32
 800560c:	4802      	ldr	r0, [pc, #8]	; (8005618 <ILI9341_Reset+0x34>)
 800560e:	f000 ff0b 	bl	8006428 <HAL_GPIO_WritePin>
}
 8005612:	bf00      	nop
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	40021000 	.word	0x40021000

0800561c <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	4603      	mov	r3, r0
 8005624:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8005626:	79fb      	ldrb	r3, [r7, #7]
 8005628:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 800562a:	2036      	movs	r0, #54	; 0x36
 800562c:	f7ff ff52 	bl	80054d4 <ILI9341_Write_Command>
HAL_Delay(1);
 8005630:	2001      	movs	r0, #1
 8005632:	f000 fc57 	bl	8005ee4 <HAL_Delay>
	
switch(screen_rotation) 
 8005636:	7bfb      	ldrb	r3, [r7, #15]
 8005638:	2b03      	cmp	r3, #3
 800563a:	d837      	bhi.n	80056ac <ILI9341_Set_Rotation+0x90>
 800563c:	a201      	add	r2, pc, #4	; (adr r2, 8005644 <ILI9341_Set_Rotation+0x28>)
 800563e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005642:	bf00      	nop
 8005644:	08005655 	.word	0x08005655
 8005648:	0800566b 	.word	0x0800566b
 800564c:	08005681 	.word	0x08005681
 8005650:	08005697 	.word	0x08005697
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8005654:	2048      	movs	r0, #72	; 0x48
 8005656:	f7ff ff5b 	bl	8005510 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800565a:	4b17      	ldr	r3, [pc, #92]	; (80056b8 <ILI9341_Set_Rotation+0x9c>)
 800565c:	22f0      	movs	r2, #240	; 0xf0
 800565e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8005660:	4b16      	ldr	r3, [pc, #88]	; (80056bc <ILI9341_Set_Rotation+0xa0>)
 8005662:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005666:	801a      	strh	r2, [r3, #0]
			break;
 8005668:	e021      	b.n	80056ae <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800566a:	2028      	movs	r0, #40	; 0x28
 800566c:	f7ff ff50 	bl	8005510 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8005670:	4b11      	ldr	r3, [pc, #68]	; (80056b8 <ILI9341_Set_Rotation+0x9c>)
 8005672:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005676:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8005678:	4b10      	ldr	r3, [pc, #64]	; (80056bc <ILI9341_Set_Rotation+0xa0>)
 800567a:	22f0      	movs	r2, #240	; 0xf0
 800567c:	801a      	strh	r2, [r3, #0]
			break;
 800567e:	e016      	b.n	80056ae <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8005680:	2088      	movs	r0, #136	; 0x88
 8005682:	f7ff ff45 	bl	8005510 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8005686:	4b0c      	ldr	r3, [pc, #48]	; (80056b8 <ILI9341_Set_Rotation+0x9c>)
 8005688:	22f0      	movs	r2, #240	; 0xf0
 800568a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800568c:	4b0b      	ldr	r3, [pc, #44]	; (80056bc <ILI9341_Set_Rotation+0xa0>)
 800568e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8005692:	801a      	strh	r2, [r3, #0]
			break;
 8005694:	e00b      	b.n	80056ae <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8005696:	20e8      	movs	r0, #232	; 0xe8
 8005698:	f7ff ff3a 	bl	8005510 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800569c:	4b06      	ldr	r3, [pc, #24]	; (80056b8 <ILI9341_Set_Rotation+0x9c>)
 800569e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80056a2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80056a4:	4b05      	ldr	r3, [pc, #20]	; (80056bc <ILI9341_Set_Rotation+0xa0>)
 80056a6:	22f0      	movs	r2, #240	; 0xf0
 80056a8:	801a      	strh	r2, [r3, #0]
			break;
 80056aa:	e000      	b.n	80056ae <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80056ac:	bf00      	nop
	}
}
 80056ae:	bf00      	nop
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}
 80056b6:	bf00      	nop
 80056b8:	2000000a 	.word	0x2000000a
 80056bc:	20000008 	.word	0x20000008

080056c0 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80056c4:	2201      	movs	r2, #1
 80056c6:	2120      	movs	r1, #32
 80056c8:	4802      	ldr	r0, [pc, #8]	; (80056d4 <ILI9341_Enable+0x14>)
 80056ca:	f000 fead 	bl	8006428 <HAL_GPIO_WritePin>
}
 80056ce:	bf00      	nop
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	40021000 	.word	0x40021000

080056d8 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0

ILI9341_Enable();
 80056dc:	f7ff fff0 	bl	80056c0 <ILI9341_Enable>
ILI9341_SPI_Init();
 80056e0:	f7ff feda 	bl	8005498 <ILI9341_SPI_Init>
ILI9341_Reset();
 80056e4:	f7ff ff7e 	bl	80055e4 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80056e8:	2001      	movs	r0, #1
 80056ea:	f7ff fef3 	bl	80054d4 <ILI9341_Write_Command>
HAL_Delay(1000);
 80056ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80056f2:	f000 fbf7 	bl	8005ee4 <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80056f6:	20cb      	movs	r0, #203	; 0xcb
 80056f8:	f7ff feec 	bl	80054d4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80056fc:	2039      	movs	r0, #57	; 0x39
 80056fe:	f7ff ff07 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8005702:	202c      	movs	r0, #44	; 0x2c
 8005704:	f7ff ff04 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8005708:	2000      	movs	r0, #0
 800570a:	f7ff ff01 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 800570e:	2034      	movs	r0, #52	; 0x34
 8005710:	f7ff fefe 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8005714:	2002      	movs	r0, #2
 8005716:	f7ff fefb 	bl	8005510 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 800571a:	20cf      	movs	r0, #207	; 0xcf
 800571c:	f7ff feda 	bl	80054d4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8005720:	2000      	movs	r0, #0
 8005722:	f7ff fef5 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8005726:	20c1      	movs	r0, #193	; 0xc1
 8005728:	f7ff fef2 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 800572c:	2030      	movs	r0, #48	; 0x30
 800572e:	f7ff feef 	bl	8005510 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8005732:	20e8      	movs	r0, #232	; 0xe8
 8005734:	f7ff fece 	bl	80054d4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8005738:	2085      	movs	r0, #133	; 0x85
 800573a:	f7ff fee9 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800573e:	2000      	movs	r0, #0
 8005740:	f7ff fee6 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8005744:	2078      	movs	r0, #120	; 0x78
 8005746:	f7ff fee3 	bl	8005510 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 800574a:	20ea      	movs	r0, #234	; 0xea
 800574c:	f7ff fec2 	bl	80054d4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8005750:	2000      	movs	r0, #0
 8005752:	f7ff fedd 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8005756:	2000      	movs	r0, #0
 8005758:	f7ff feda 	bl	8005510 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 800575c:	20ed      	movs	r0, #237	; 0xed
 800575e:	f7ff feb9 	bl	80054d4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8005762:	2064      	movs	r0, #100	; 0x64
 8005764:	f7ff fed4 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8005768:	2003      	movs	r0, #3
 800576a:	f7ff fed1 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800576e:	2012      	movs	r0, #18
 8005770:	f7ff fece 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8005774:	2081      	movs	r0, #129	; 0x81
 8005776:	f7ff fecb 	bl	8005510 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800577a:	20f7      	movs	r0, #247	; 0xf7
 800577c:	f7ff feaa 	bl	80054d4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8005780:	2020      	movs	r0, #32
 8005782:	f7ff fec5 	bl	8005510 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8005786:	20c0      	movs	r0, #192	; 0xc0
 8005788:	f7ff fea4 	bl	80054d4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 800578c:	2023      	movs	r0, #35	; 0x23
 800578e:	f7ff febf 	bl	8005510 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8005792:	20c1      	movs	r0, #193	; 0xc1
 8005794:	f7ff fe9e 	bl	80054d4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8005798:	2010      	movs	r0, #16
 800579a:	f7ff feb9 	bl	8005510 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800579e:	20c5      	movs	r0, #197	; 0xc5
 80057a0:	f7ff fe98 	bl	80054d4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80057a4:	203e      	movs	r0, #62	; 0x3e
 80057a6:	f7ff feb3 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 80057aa:	2028      	movs	r0, #40	; 0x28
 80057ac:	f7ff feb0 	bl	8005510 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 80057b0:	20c7      	movs	r0, #199	; 0xc7
 80057b2:	f7ff fe8f 	bl	80054d4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80057b6:	2086      	movs	r0, #134	; 0x86
 80057b8:	f7ff feaa 	bl	8005510 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80057bc:	2036      	movs	r0, #54	; 0x36
 80057be:	f7ff fe89 	bl	80054d4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 80057c2:	2048      	movs	r0, #72	; 0x48
 80057c4:	f7ff fea4 	bl	8005510 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 80057c8:	203a      	movs	r0, #58	; 0x3a
 80057ca:	f7ff fe83 	bl	80054d4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 80057ce:	2055      	movs	r0, #85	; 0x55
 80057d0:	f7ff fe9e 	bl	8005510 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 80057d4:	20b1      	movs	r0, #177	; 0xb1
 80057d6:	f7ff fe7d 	bl	80054d4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80057da:	2000      	movs	r0, #0
 80057dc:	f7ff fe98 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80057e0:	2018      	movs	r0, #24
 80057e2:	f7ff fe95 	bl	8005510 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80057e6:	20b6      	movs	r0, #182	; 0xb6
 80057e8:	f7ff fe74 	bl	80054d4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80057ec:	2008      	movs	r0, #8
 80057ee:	f7ff fe8f 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80057f2:	2082      	movs	r0, #130	; 0x82
 80057f4:	f7ff fe8c 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80057f8:	2027      	movs	r0, #39	; 0x27
 80057fa:	f7ff fe89 	bl	8005510 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80057fe:	20f2      	movs	r0, #242	; 0xf2
 8005800:	f7ff fe68 	bl	80054d4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8005804:	2000      	movs	r0, #0
 8005806:	f7ff fe83 	bl	8005510 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 800580a:	2026      	movs	r0, #38	; 0x26
 800580c:	f7ff fe62 	bl	80054d4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8005810:	2001      	movs	r0, #1
 8005812:	f7ff fe7d 	bl	8005510 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8005816:	20e0      	movs	r0, #224	; 0xe0
 8005818:	f7ff fe5c 	bl	80054d4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 800581c:	200f      	movs	r0, #15
 800581e:	f7ff fe77 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8005822:	2031      	movs	r0, #49	; 0x31
 8005824:	f7ff fe74 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8005828:	202b      	movs	r0, #43	; 0x2b
 800582a:	f7ff fe71 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800582e:	200c      	movs	r0, #12
 8005830:	f7ff fe6e 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8005834:	200e      	movs	r0, #14
 8005836:	f7ff fe6b 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800583a:	2008      	movs	r0, #8
 800583c:	f7ff fe68 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8005840:	204e      	movs	r0, #78	; 0x4e
 8005842:	f7ff fe65 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8005846:	20f1      	movs	r0, #241	; 0xf1
 8005848:	f7ff fe62 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 800584c:	2037      	movs	r0, #55	; 0x37
 800584e:	f7ff fe5f 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8005852:	2007      	movs	r0, #7
 8005854:	f7ff fe5c 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8005858:	2010      	movs	r0, #16
 800585a:	f7ff fe59 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800585e:	2003      	movs	r0, #3
 8005860:	f7ff fe56 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8005864:	200e      	movs	r0, #14
 8005866:	f7ff fe53 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800586a:	2009      	movs	r0, #9
 800586c:	f7ff fe50 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8005870:	2000      	movs	r0, #0
 8005872:	f7ff fe4d 	bl	8005510 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8005876:	20e1      	movs	r0, #225	; 0xe1
 8005878:	f7ff fe2c 	bl	80054d4 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800587c:	2000      	movs	r0, #0
 800587e:	f7ff fe47 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8005882:	200e      	movs	r0, #14
 8005884:	f7ff fe44 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8005888:	2014      	movs	r0, #20
 800588a:	f7ff fe41 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800588e:	2003      	movs	r0, #3
 8005890:	f7ff fe3e 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8005894:	2011      	movs	r0, #17
 8005896:	f7ff fe3b 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800589a:	2007      	movs	r0, #7
 800589c:	f7ff fe38 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80058a0:	2031      	movs	r0, #49	; 0x31
 80058a2:	f7ff fe35 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80058a6:	20c1      	movs	r0, #193	; 0xc1
 80058a8:	f7ff fe32 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 80058ac:	2048      	movs	r0, #72	; 0x48
 80058ae:	f7ff fe2f 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80058b2:	2008      	movs	r0, #8
 80058b4:	f7ff fe2c 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80058b8:	200f      	movs	r0, #15
 80058ba:	f7ff fe29 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80058be:	200c      	movs	r0, #12
 80058c0:	f7ff fe26 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80058c4:	2031      	movs	r0, #49	; 0x31
 80058c6:	f7ff fe23 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 80058ca:	2036      	movs	r0, #54	; 0x36
 80058cc:	f7ff fe20 	bl	8005510 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80058d0:	200f      	movs	r0, #15
 80058d2:	f7ff fe1d 	bl	8005510 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 80058d6:	2011      	movs	r0, #17
 80058d8:	f7ff fdfc 	bl	80054d4 <ILI9341_Write_Command>
HAL_Delay(120);
 80058dc:	2078      	movs	r0, #120	; 0x78
 80058de:	f000 fb01 	bl	8005ee4 <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 80058e2:	2029      	movs	r0, #41	; 0x29
 80058e4:	f7ff fdf6 	bl	80054d4 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80058e8:	2003      	movs	r0, #3
 80058ea:	f7ff fe97 	bl	800561c <ILI9341_Set_Rotation>

HAL_Delay(10);
 80058ee:	200a      	movs	r0, #10
 80058f0:	f000 faf8 	bl	8005ee4 <HAL_Delay>
//
}
 80058f4:	bf00      	nop
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80058f8:	b5b0      	push	{r4, r5, r7, lr}
 80058fa:	b08c      	sub	sp, #48	; 0x30
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	4603      	mov	r3, r0
 8005900:	6039      	str	r1, [r7, #0]
 8005902:	80fb      	strh	r3, [r7, #6]
 8005904:	466b      	mov	r3, sp
 8005906:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8005908:	2300      	movs	r3, #0
 800590a:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	005b      	lsls	r3, r3, #1
 8005910:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005914:	d202      	bcs.n	800591c <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	627b      	str	r3, [r7, #36]	; 0x24
 800591a:	e002      	b.n	8005922 <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 800591c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005920:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8005922:	2201      	movs	r2, #1
 8005924:	2140      	movs	r1, #64	; 0x40
 8005926:	483d      	ldr	r0, [pc, #244]	; (8005a1c <ILI9341_Draw_Colour_Burst+0x124>)
 8005928:	f000 fd7e 	bl	8006428 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800592c:	2200      	movs	r2, #0
 800592e:	2110      	movs	r1, #16
 8005930:	483a      	ldr	r0, [pc, #232]	; (8005a1c <ILI9341_Draw_Colour_Burst+0x124>)
 8005932:	f000 fd79 	bl	8006428 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8005936:	88fb      	ldrh	r3, [r7, #6]
 8005938:	0a1b      	lsrs	r3, r3, #8
 800593a:	b29b      	uxth	r3, r3
 800593c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8005940:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8005942:	4623      	mov	r3, r4
 8005944:	3b01      	subs	r3, #1
 8005946:	61fb      	str	r3, [r7, #28]
 8005948:	4620      	mov	r0, r4
 800594a:	f04f 0100 	mov.w	r1, #0
 800594e:	f04f 0200 	mov.w	r2, #0
 8005952:	f04f 0300 	mov.w	r3, #0
 8005956:	00cb      	lsls	r3, r1, #3
 8005958:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800595c:	00c2      	lsls	r2, r0, #3
 800595e:	4620      	mov	r0, r4
 8005960:	f04f 0100 	mov.w	r1, #0
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	f04f 0300 	mov.w	r3, #0
 800596c:	00cb      	lsls	r3, r1, #3
 800596e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8005972:	00c2      	lsls	r2, r0, #3
 8005974:	1de3      	adds	r3, r4, #7
 8005976:	08db      	lsrs	r3, r3, #3
 8005978:	00db      	lsls	r3, r3, #3
 800597a:	ebad 0d03 	sub.w	sp, sp, r3
 800597e:	466b      	mov	r3, sp
 8005980:	3300      	adds	r3, #0
 8005982:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8005984:	2300      	movs	r3, #0
 8005986:	62bb      	str	r3, [r7, #40]	; 0x28
 8005988:	e00e      	b.n	80059a8 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 800598a:	69ba      	ldr	r2, [r7, #24]
 800598c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800598e:	4413      	add	r3, r2
 8005990:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8005994:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8005996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005998:	3301      	adds	r3, #1
 800599a:	88fa      	ldrh	r2, [r7, #6]
 800599c:	b2d1      	uxtb	r1, r2
 800599e:	69ba      	ldr	r2, [r7, #24]
 80059a0:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80059a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a4:	3302      	adds	r3, #2
 80059a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80059a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d3ec      	bcc.n	800598a <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	005b      	lsls	r3, r3, #1
 80059b4:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80059b6:	697a      	ldr	r2, [r7, #20]
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80059be:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80059c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059ca:	fb01 f202 	mul.w	r2, r1, r2
 80059ce:	1a9b      	subs	r3, r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d010      	beq.n	80059fa <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80059d8:	2300      	movs	r3, #0
 80059da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059dc:	e009      	b.n	80059f2 <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 80059de:	69b9      	ldr	r1, [r7, #24]
 80059e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	230a      	movs	r3, #10
 80059e6:	480e      	ldr	r0, [pc, #56]	; (8005a20 <ILI9341_Draw_Colour_Burst+0x128>)
 80059e8:	f004 fc3a 	bl	800a260 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80059ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ee:	3301      	adds	r3, #1
 80059f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d3f1      	bcc.n	80059de <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 80059fa:	69b9      	ldr	r1, [r7, #24]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	230a      	movs	r3, #10
 8005a02:	4807      	ldr	r0, [pc, #28]	; (8005a20 <ILI9341_Draw_Colour_Burst+0x128>)
 8005a04:	f004 fc2c 	bl	800a260 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005a08:	2201      	movs	r2, #1
 8005a0a:	2110      	movs	r1, #16
 8005a0c:	4803      	ldr	r0, [pc, #12]	; (8005a1c <ILI9341_Draw_Colour_Burst+0x124>)
 8005a0e:	f000 fd0b 	bl	8006428 <HAL_GPIO_WritePin>
 8005a12:	46ad      	mov	sp, r5
}
 8005a14:	bf00      	nop
 8005a16:	3730      	adds	r7, #48	; 0x30
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bdb0      	pop	{r4, r5, r7, pc}
 8005a1c:	40021000 	.word	0x40021000
 8005a20:	20009160 	.word	0x20009160

08005a24 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b082      	sub	sp, #8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	4603      	mov	r3, r0
 8005a2c:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8005a2e:	4b0e      	ldr	r3, [pc, #56]	; (8005a68 <ILI9341_Fill_Screen+0x44>)
 8005a30:	881b      	ldrh	r3, [r3, #0]
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	4b0d      	ldr	r3, [pc, #52]	; (8005a6c <ILI9341_Fill_Screen+0x48>)
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	f7ff fd85 	bl	800554c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8005a42:	4b09      	ldr	r3, [pc, #36]	; (8005a68 <ILI9341_Fill_Screen+0x44>)
 8005a44:	881b      	ldrh	r3, [r3, #0]
 8005a46:	b29b      	uxth	r3, r3
 8005a48:	461a      	mov	r2, r3
 8005a4a:	4b08      	ldr	r3, [pc, #32]	; (8005a6c <ILI9341_Fill_Screen+0x48>)
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	fb03 f302 	mul.w	r3, r3, r2
 8005a54:	461a      	mov	r2, r3
 8005a56:	88fb      	ldrh	r3, [r7, #6]
 8005a58:	4611      	mov	r1, r2
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7ff ff4c 	bl	80058f8 <ILI9341_Draw_Colour_Burst>
}
 8005a60:	bf00      	nop
 8005a62:	3708      	adds	r7, #8
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	2000000a 	.word	0x2000000a
 8005a6c:	20000008 	.word	0x20000008

08005a70 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b086      	sub	sp, #24
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	4603      	mov	r3, r0
 8005a78:	80fb      	strh	r3, [r7, #6]
 8005a7a:	460b      	mov	r3, r1
 8005a7c:	80bb      	strh	r3, [r7, #4]
 8005a7e:	4613      	mov	r3, r2
 8005a80:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8005a82:	4b5b      	ldr	r3, [pc, #364]	; (8005bf0 <ILI9341_Draw_Pixel+0x180>)
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	88fa      	ldrh	r2, [r7, #6]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	f080 80ac 	bcs.w	8005be8 <ILI9341_Draw_Pixel+0x178>
 8005a90:	4b58      	ldr	r3, [pc, #352]	; (8005bf4 <ILI9341_Draw_Pixel+0x184>)
 8005a92:	881b      	ldrh	r3, [r3, #0]
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	88ba      	ldrh	r2, [r7, #4]
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	f080 80a5 	bcs.w	8005be8 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	2140      	movs	r1, #64	; 0x40
 8005aa2:	4855      	ldr	r0, [pc, #340]	; (8005bf8 <ILI9341_Draw_Pixel+0x188>)
 8005aa4:	f000 fcc0 	bl	8006428 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	2110      	movs	r1, #16
 8005aac:	4852      	ldr	r0, [pc, #328]	; (8005bf8 <ILI9341_Draw_Pixel+0x188>)
 8005aae:	f000 fcbb 	bl	8006428 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8005ab2:	202a      	movs	r0, #42	; 0x2a
 8005ab4:	f7ff fcfc 	bl	80054b0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8005ab8:	2201      	movs	r2, #1
 8005aba:	2140      	movs	r1, #64	; 0x40
 8005abc:	484e      	ldr	r0, [pc, #312]	; (8005bf8 <ILI9341_Draw_Pixel+0x188>)
 8005abe:	f000 fcb3 	bl	8006428 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	2110      	movs	r1, #16
 8005ac6:	484c      	ldr	r0, [pc, #304]	; (8005bf8 <ILI9341_Draw_Pixel+0x188>)
 8005ac8:	f000 fcae 	bl	8006428 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8005acc:	2200      	movs	r2, #0
 8005ace:	2110      	movs	r1, #16
 8005ad0:	4849      	ldr	r0, [pc, #292]	; (8005bf8 <ILI9341_Draw_Pixel+0x188>)
 8005ad2:	f000 fca9 	bl	8006428 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8005ad6:	88fb      	ldrh	r3, [r7, #6]
 8005ad8:	0a1b      	lsrs	r3, r3, #8
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	753b      	strb	r3, [r7, #20]
 8005ae0:	88fb      	ldrh	r3, [r7, #6]
 8005ae2:	b2db      	uxtb	r3, r3
 8005ae4:	757b      	strb	r3, [r7, #21]
 8005ae6:	88fb      	ldrh	r3, [r7, #6]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	121b      	asrs	r3, r3, #8
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	75bb      	strb	r3, [r7, #22]
 8005af0:	88fb      	ldrh	r3, [r7, #6]
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	3301      	adds	r3, #1
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8005afa:	f107 0114 	add.w	r1, r7, #20
 8005afe:	2301      	movs	r3, #1
 8005b00:	2204      	movs	r2, #4
 8005b02:	483e      	ldr	r0, [pc, #248]	; (8005bfc <ILI9341_Draw_Pixel+0x18c>)
 8005b04:	f004 fbac 	bl	800a260 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005b08:	2201      	movs	r2, #1
 8005b0a:	2110      	movs	r1, #16
 8005b0c:	483a      	ldr	r0, [pc, #232]	; (8005bf8 <ILI9341_Draw_Pixel+0x188>)
 8005b0e:	f000 fc8b 	bl	8006428 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8005b12:	2200      	movs	r2, #0
 8005b14:	2140      	movs	r1, #64	; 0x40
 8005b16:	4838      	ldr	r0, [pc, #224]	; (8005bf8 <ILI9341_Draw_Pixel+0x188>)
 8005b18:	f000 fc86 	bl	8006428 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	2110      	movs	r1, #16
 8005b20:	4835      	ldr	r0, [pc, #212]	; (8005bf8 <ILI9341_Draw_Pixel+0x188>)
 8005b22:	f000 fc81 	bl	8006428 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8005b26:	202b      	movs	r0, #43	; 0x2b
 8005b28:	f7ff fcc2 	bl	80054b0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	2140      	movs	r1, #64	; 0x40
 8005b30:	4831      	ldr	r0, [pc, #196]	; (8005bf8 <ILI9341_Draw_Pixel+0x188>)
 8005b32:	f000 fc79 	bl	8006428 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8005b36:	2201      	movs	r2, #1
 8005b38:	2110      	movs	r1, #16
 8005b3a:	482f      	ldr	r0, [pc, #188]	; (8005bf8 <ILI9341_Draw_Pixel+0x188>)
 8005b3c:	f000 fc74 	bl	8006428 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005b40:	2200      	movs	r2, #0
 8005b42:	2110      	movs	r1, #16
 8005b44:	482c      	ldr	r0, [pc, #176]	; (8005bf8 <ILI9341_Draw_Pixel+0x188>)
 8005b46:	f000 fc6f 	bl	8006428 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8005b4a:	88bb      	ldrh	r3, [r7, #4]
 8005b4c:	0a1b      	lsrs	r3, r3, #8
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	743b      	strb	r3, [r7, #16]
 8005b54:	88bb      	ldrh	r3, [r7, #4]
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	747b      	strb	r3, [r7, #17]
 8005b5a:	88bb      	ldrh	r3, [r7, #4]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	121b      	asrs	r3, r3, #8
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	74bb      	strb	r3, [r7, #18]
 8005b64:	88bb      	ldrh	r3, [r7, #4]
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	3301      	adds	r3, #1
 8005b6a:	b2db      	uxtb	r3, r3
 8005b6c:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8005b6e:	f107 0110 	add.w	r1, r7, #16
 8005b72:	2301      	movs	r3, #1
 8005b74:	2204      	movs	r2, #4
 8005b76:	4821      	ldr	r0, [pc, #132]	; (8005bfc <ILI9341_Draw_Pixel+0x18c>)
 8005b78:	f004 fb72 	bl	800a260 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	2110      	movs	r1, #16
 8005b80:	481d      	ldr	r0, [pc, #116]	; (8005bf8 <ILI9341_Draw_Pixel+0x188>)
 8005b82:	f000 fc51 	bl	8006428 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8005b86:	2200      	movs	r2, #0
 8005b88:	2140      	movs	r1, #64	; 0x40
 8005b8a:	481b      	ldr	r0, [pc, #108]	; (8005bf8 <ILI9341_Draw_Pixel+0x188>)
 8005b8c:	f000 fc4c 	bl	8006428 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8005b90:	2200      	movs	r2, #0
 8005b92:	2110      	movs	r1, #16
 8005b94:	4818      	ldr	r0, [pc, #96]	; (8005bf8 <ILI9341_Draw_Pixel+0x188>)
 8005b96:	f000 fc47 	bl	8006428 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8005b9a:	202c      	movs	r0, #44	; 0x2c
 8005b9c:	f7ff fc88 	bl	80054b0 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8005ba0:	2201      	movs	r2, #1
 8005ba2:	2140      	movs	r1, #64	; 0x40
 8005ba4:	4814      	ldr	r0, [pc, #80]	; (8005bf8 <ILI9341_Draw_Pixel+0x188>)
 8005ba6:	f000 fc3f 	bl	8006428 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8005baa:	2201      	movs	r2, #1
 8005bac:	2110      	movs	r1, #16
 8005bae:	4812      	ldr	r0, [pc, #72]	; (8005bf8 <ILI9341_Draw_Pixel+0x188>)
 8005bb0:	f000 fc3a 	bl	8006428 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	2110      	movs	r1, #16
 8005bb8:	480f      	ldr	r0, [pc, #60]	; (8005bf8 <ILI9341_Draw_Pixel+0x188>)
 8005bba:	f000 fc35 	bl	8006428 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8005bbe:	887b      	ldrh	r3, [r7, #2]
 8005bc0:	0a1b      	lsrs	r3, r3, #8
 8005bc2:	b29b      	uxth	r3, r3
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	733b      	strb	r3, [r7, #12]
 8005bc8:	887b      	ldrh	r3, [r7, #2]
 8005bca:	b2db      	uxtb	r3, r3
 8005bcc:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8005bce:	f107 010c 	add.w	r1, r7, #12
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	2202      	movs	r2, #2
 8005bd6:	4809      	ldr	r0, [pc, #36]	; (8005bfc <ILI9341_Draw_Pixel+0x18c>)
 8005bd8:	f004 fb42 	bl	800a260 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8005bdc:	2201      	movs	r2, #1
 8005bde:	2110      	movs	r1, #16
 8005be0:	4805      	ldr	r0, [pc, #20]	; (8005bf8 <ILI9341_Draw_Pixel+0x188>)
 8005be2:	f000 fc21 	bl	8006428 <HAL_GPIO_WritePin>
 8005be6:	e000      	b.n	8005bea <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8005be8:	bf00      	nop
	
}
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	2000000a 	.word	0x2000000a
 8005bf4:	20000008 	.word	0x20000008
 8005bf8:	40021000 	.word	0x40021000
 8005bfc:	20009160 	.word	0x20009160

08005c00 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8005c00:	b590      	push	{r4, r7, lr}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	4604      	mov	r4, r0
 8005c08:	4608      	mov	r0, r1
 8005c0a:	4611      	mov	r1, r2
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	4623      	mov	r3, r4
 8005c10:	80fb      	strh	r3, [r7, #6]
 8005c12:	4603      	mov	r3, r0
 8005c14:	80bb      	strh	r3, [r7, #4]
 8005c16:	460b      	mov	r3, r1
 8005c18:	807b      	strh	r3, [r7, #2]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8005c1e:	4b24      	ldr	r3, [pc, #144]	; (8005cb0 <ILI9341_Draw_Rectangle+0xb0>)
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	88fa      	ldrh	r2, [r7, #6]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d23d      	bcs.n	8005ca6 <ILI9341_Draw_Rectangle+0xa6>
 8005c2a:	4b22      	ldr	r3, [pc, #136]	; (8005cb4 <ILI9341_Draw_Rectangle+0xb4>)
 8005c2c:	881b      	ldrh	r3, [r3, #0]
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	88ba      	ldrh	r2, [r7, #4]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d237      	bcs.n	8005ca6 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8005c36:	88fa      	ldrh	r2, [r7, #6]
 8005c38:	887b      	ldrh	r3, [r7, #2]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	4a1c      	ldr	r2, [pc, #112]	; (8005cb0 <ILI9341_Draw_Rectangle+0xb0>)
 8005c3e:	8812      	ldrh	r2, [r2, #0]
 8005c40:	b292      	uxth	r2, r2
 8005c42:	4293      	cmp	r3, r2
 8005c44:	dd05      	ble.n	8005c52 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8005c46:	4b1a      	ldr	r3, [pc, #104]	; (8005cb0 <ILI9341_Draw_Rectangle+0xb0>)
 8005c48:	881b      	ldrh	r3, [r3, #0]
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	88fb      	ldrh	r3, [r7, #6]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8005c52:	88ba      	ldrh	r2, [r7, #4]
 8005c54:	883b      	ldrh	r3, [r7, #0]
 8005c56:	4413      	add	r3, r2
 8005c58:	4a16      	ldr	r2, [pc, #88]	; (8005cb4 <ILI9341_Draw_Rectangle+0xb4>)
 8005c5a:	8812      	ldrh	r2, [r2, #0]
 8005c5c:	b292      	uxth	r2, r2
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	dd05      	ble.n	8005c6e <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8005c62:	4b14      	ldr	r3, [pc, #80]	; (8005cb4 <ILI9341_Draw_Rectangle+0xb4>)
 8005c64:	881b      	ldrh	r3, [r3, #0]
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	88bb      	ldrh	r3, [r7, #4]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8005c6e:	88fa      	ldrh	r2, [r7, #6]
 8005c70:	887b      	ldrh	r3, [r7, #2]
 8005c72:	4413      	add	r3, r2
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	3b01      	subs	r3, #1
 8005c78:	b29c      	uxth	r4, r3
 8005c7a:	88ba      	ldrh	r2, [r7, #4]
 8005c7c:	883b      	ldrh	r3, [r7, #0]
 8005c7e:	4413      	add	r3, r2
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	3b01      	subs	r3, #1
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	88b9      	ldrh	r1, [r7, #4]
 8005c88:	88f8      	ldrh	r0, [r7, #6]
 8005c8a:	4622      	mov	r2, r4
 8005c8c:	f7ff fc5e 	bl	800554c <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8005c90:	883b      	ldrh	r3, [r7, #0]
 8005c92:	887a      	ldrh	r2, [r7, #2]
 8005c94:	fb02 f303 	mul.w	r3, r2, r3
 8005c98:	461a      	mov	r2, r3
 8005c9a:	8b3b      	ldrh	r3, [r7, #24]
 8005c9c:	4611      	mov	r1, r2
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f7ff fe2a 	bl	80058f8 <ILI9341_Draw_Colour_Burst>
 8005ca4:	e000      	b.n	8005ca8 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8005ca6:	bf00      	nop
}
 8005ca8:	370c      	adds	r7, #12
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd90      	pop	{r4, r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	2000000a 	.word	0x2000000a
 8005cb4:	20000008 	.word	0x20000008

08005cb8 <LCD_init>:

extern RNG_HandleTypeDef hrng;

// -----------------------------------------------------------------------
void LCD_init(void)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	af00      	add	r7, sp, #0
	ILI9341_Init();
 8005cbc:	f7ff fd0c 	bl	80056d8 <ILI9341_Init>
	ILI9341_Fill_Screen(BLACK);
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	f7ff feaf 	bl	8005a24 <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);          // was  SCREEN_HORIZONTAL_2
 8005cc6:	2003      	movs	r0, #3
 8005cc8:	f7ff fca8 	bl	800561c <ILI9341_Set_Rotation>
	ILI9341_Fill_Screen(BLACK);
 8005ccc:	2000      	movs	r0, #0
 8005cce:	f7ff fea9 	bl	8005a24 <ILI9341_Fill_Screen>
}
 8005cd2:	bf00      	nop
 8005cd4:	bd80      	pop	{r7, pc}
	...

08005cd8 <lcd_test_print>:
// -----------------------------------------------------------------------
void lcd_test_print (void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("TEST !!!", 30, 200, GREEN, 4, BLACK);
 8005cde:	2300      	movs	r3, #0
 8005ce0:	9301      	str	r3, [sp, #4]
 8005ce2:	2304      	movs	r3, #4
 8005ce4:	9300      	str	r3, [sp, #0]
 8005ce6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005cea:	22c8      	movs	r2, #200	; 0xc8
 8005cec:	211e      	movs	r1, #30
 8005cee:	4821      	ldr	r0, [pc, #132]	; (8005d74 <lcd_test_print+0x9c>)
 8005cf0:	f7ff fba4 	bl	800543c <ILI9341_Draw_Text>

	ILI9341_Draw_Filled_Rectangle_Coord(20, 20, 150, 150, GREEN);
 8005cf4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	2396      	movs	r3, #150	; 0x96
 8005cfc:	2296      	movs	r2, #150	; 0x96
 8005cfe:	2114      	movs	r1, #20
 8005d00:	2014      	movs	r0, #20
 8005d02:	f7ff faa7 	bl	8005254 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(20, 20, 100, 100, BLUE);
 8005d06:	231f      	movs	r3, #31
 8005d08:	9300      	str	r3, [sp, #0]
 8005d0a:	2364      	movs	r3, #100	; 0x64
 8005d0c:	2264      	movs	r2, #100	; 0x64
 8005d0e:	2114      	movs	r1, #20
 8005d10:	2014      	movs	r0, #20
 8005d12:	f7ff fa9f 	bl	8005254 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(50, 50, 200, 200, DARKCYAN);
 8005d16:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	23c8      	movs	r3, #200	; 0xc8
 8005d1e:	22c8      	movs	r2, #200	; 0xc8
 8005d20:	2132      	movs	r1, #50	; 0x32
 8005d22:	2032      	movs	r0, #50	; 0x32
 8005d24:	f7ff fa96 	bl	8005254 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(70, 70, 200, 200, CYAN);
 8005d28:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	23c8      	movs	r3, #200	; 0xc8
 8005d30:	22c8      	movs	r2, #200	; 0xc8
 8005d32:	2146      	movs	r1, #70	; 0x46
 8005d34:	2046      	movs	r0, #70	; 0x46
 8005d36:	f7ff fa8d 	bl	8005254 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(70, 70, 150, 150, PINK);
 8005d3a:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	2396      	movs	r3, #150	; 0x96
 8005d42:	2296      	movs	r2, #150	; 0x96
 8005d44:	2146      	movs	r1, #70	; 0x46
 8005d46:	2046      	movs	r0, #70	; 0x46
 8005d48:	f7ff fa84 	bl	8005254 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(60, 20, 100, 100, BLUE);
 8005d4c:	231f      	movs	r3, #31
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	2364      	movs	r3, #100	; 0x64
 8005d52:	2264      	movs	r2, #100	; 0x64
 8005d54:	2114      	movs	r1, #20
 8005d56:	203c      	movs	r0, #60	; 0x3c
 8005d58:	f7ff fa7c 	bl	8005254 <ILI9341_Draw_Filled_Rectangle_Coord>
	ILI9341_Draw_Filled_Rectangle_Coord(80, 100, 200, 200, RED);
 8005d5c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8005d60:	9300      	str	r3, [sp, #0]
 8005d62:	23c8      	movs	r3, #200	; 0xc8
 8005d64:	22c8      	movs	r2, #200	; 0xc8
 8005d66:	2164      	movs	r1, #100	; 0x64
 8005d68:	2050      	movs	r0, #80	; 0x50
 8005d6a:	f7ff fa73 	bl	8005254 <ILI9341_Draw_Filled_Rectangle_Coord>
}
 8005d6e:	bf00      	nop
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bd80      	pop	{r7, pc}
 8005d74:	08019a04 	.word	0x08019a04

08005d78 <speed_test_LCD>:
//-------------------------------------------------------------------------------------------
/*
 * Random generate circles
 */
void speed_test_LCD(int number_of_tests)
{
 8005d78:	b580      	push	{r7, lr}
 8005d7a:	b086      	sub	sp, #24
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
	int i =0;
 8005d80:	2300      	movs	r3, #0
 8005d82:	617b      	str	r3, [r7, #20]
	while(i <= number_of_tests)
 8005d84:	e036      	b.n	8005df4 <speed_test_LCD+0x7c>
	{
		i ++;
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	617b      	str	r3, [r7, #20]
		//ILI9341_Draw_Text("", i, 200, YELLOW, 4, BLACK);
		uint32_t random_num = 0;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	613b      	str	r3, [r7, #16]
		uint16_t xr = 0;
 8005d90:	2300      	movs	r3, #0
 8005d92:	81fb      	strh	r3, [r7, #14]
		uint16_t yr = 0;
 8005d94:	2300      	movs	r3, #0
 8005d96:	81bb      	strh	r3, [r7, #12]
		uint16_t radiusr = 0;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	817b      	strh	r3, [r7, #10]
		uint16_t colourr = 0;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	813b      	strh	r3, [r7, #8]

		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8005da0:	4819      	ldr	r0, [pc, #100]	; (8005e08 <speed_test_LCD+0x90>)
 8005da2:	f003 fd75 	bl	8009890 <HAL_RNG_GetRandomNumber>
 8005da6:	6138      	str	r0, [r7, #16]
		xr = random_num;
 8005da8:	693b      	ldr	r3, [r7, #16]
 8005daa:	81fb      	strh	r3, [r7, #14]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8005dac:	4816      	ldr	r0, [pc, #88]	; (8005e08 <speed_test_LCD+0x90>)
 8005dae:	f003 fd6f 	bl	8009890 <HAL_RNG_GetRandomNumber>
 8005db2:	6138      	str	r0, [r7, #16]
		yr = random_num;
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	81bb      	strh	r3, [r7, #12]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8005db8:	4813      	ldr	r0, [pc, #76]	; (8005e08 <speed_test_LCD+0x90>)
 8005dba:	f003 fd69 	bl	8009890 <HAL_RNG_GetRandomNumber>
 8005dbe:	6138      	str	r0, [r7, #16]
		radiusr = random_num;
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	817b      	strh	r3, [r7, #10]
		random_num = HAL_RNG_GetRandomNumber(&hrng);
 8005dc4:	4810      	ldr	r0, [pc, #64]	; (8005e08 <speed_test_LCD+0x90>)
 8005dc6:	f003 fd63 	bl	8009890 <HAL_RNG_GetRandomNumber>
 8005dca:	6138      	str	r0, [r7, #16]
		colourr = random_num;
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	813b      	strh	r3, [r7, #8]

		xr &= 0x01FF;
 8005dd0:	89fb      	ldrh	r3, [r7, #14]
 8005dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dd6:	81fb      	strh	r3, [r7, #14]
		yr &= 0x01FF;
 8005dd8:	89bb      	ldrh	r3, [r7, #12]
 8005dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dde:	81bb      	strh	r3, [r7, #12]
		radiusr &= 0x001F;
 8005de0:	897b      	ldrh	r3, [r7, #10]
 8005de2:	f003 031f 	and.w	r3, r3, #31
 8005de6:	817b      	strh	r3, [r7, #10]
		colourr &= 0xFFFF;
		ILI9341_Draw_Filled_Circle(xr, yr, radiusr, colourr);
 8005de8:	893b      	ldrh	r3, [r7, #8]
 8005dea:	897a      	ldrh	r2, [r7, #10]
 8005dec:	89b9      	ldrh	r1, [r7, #12]
 8005dee:	89f8      	ldrh	r0, [r7, #14]
 8005df0:	f7ff f9a8 	bl	8005144 <ILI9341_Draw_Filled_Circle>
	while(i <= number_of_tests)
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	ddc4      	ble.n	8005d86 <speed_test_LCD+0xe>
		//ILI9341_Draw_Pixel(xr, yr, WHITE);
	}

}
 8005dfc:	bf00      	nop
 8005dfe:	bf00      	nop
 8005e00:	3718      	adds	r7, #24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	20010fe4 	.word	0x20010fe4

08005e0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005e0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005e44 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005e10:	480d      	ldr	r0, [pc, #52]	; (8005e48 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005e12:	490e      	ldr	r1, [pc, #56]	; (8005e4c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005e14:	4a0e      	ldr	r2, [pc, #56]	; (8005e50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005e16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005e18:	e002      	b.n	8005e20 <LoopCopyDataInit>

08005e1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005e1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005e1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005e1e:	3304      	adds	r3, #4

08005e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005e20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005e22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005e24:	d3f9      	bcc.n	8005e1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005e26:	4a0b      	ldr	r2, [pc, #44]	; (8005e54 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005e28:	4c0b      	ldr	r4, [pc, #44]	; (8005e58 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005e2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005e2c:	e001      	b.n	8005e32 <LoopFillZerobss>

08005e2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005e2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005e30:	3204      	adds	r2, #4

08005e32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005e32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005e34:	d3fb      	bcc.n	8005e2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005e36:	f7ff f973 	bl	8005120 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005e3a:	f010 fbff 	bl	801663c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005e3e:	f7fd fa05 	bl	800324c <main>
  bx  lr    
 8005e42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005e44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005e48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005e4c:	20000370 	.word	0x20000370
  ldr r2, =_sidata
 8005e50:	0801a6cc 	.word	0x0801a6cc
  ldr r2, =_sbss
 8005e54:	20000370 	.word	0x20000370
  ldr r4, =_ebss
 8005e58:	20016cd0 	.word	0x20016cd0

08005e5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005e5c:	e7fe      	b.n	8005e5c <ADC_IRQHandler>
	...

08005e60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005e64:	4b0e      	ldr	r3, [pc, #56]	; (8005ea0 <HAL_Init+0x40>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a0d      	ldr	r2, [pc, #52]	; (8005ea0 <HAL_Init+0x40>)
 8005e6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005e70:	4b0b      	ldr	r3, [pc, #44]	; (8005ea0 <HAL_Init+0x40>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a0a      	ldr	r2, [pc, #40]	; (8005ea0 <HAL_Init+0x40>)
 8005e76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005e7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e7c:	4b08      	ldr	r3, [pc, #32]	; (8005ea0 <HAL_Init+0x40>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a07      	ldr	r2, [pc, #28]	; (8005ea0 <HAL_Init+0x40>)
 8005e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e88:	2003      	movs	r0, #3
 8005e8a:	f000 f8fc 	bl	8006086 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005e8e:	200f      	movs	r0, #15
 8005e90:	f7fe ffda 	bl	8004e48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005e94:	f7fe fdd8 	bl	8004a48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005e98:	2300      	movs	r3, #0
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	40023c00 	.word	0x40023c00

08005ea4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005ea8:	4b06      	ldr	r3, [pc, #24]	; (8005ec4 <HAL_IncTick+0x20>)
 8005eaa:	781b      	ldrb	r3, [r3, #0]
 8005eac:	461a      	mov	r2, r3
 8005eae:	4b06      	ldr	r3, [pc, #24]	; (8005ec8 <HAL_IncTick+0x24>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	4a04      	ldr	r2, [pc, #16]	; (8005ec8 <HAL_IncTick+0x24>)
 8005eb6:	6013      	str	r3, [r2, #0]
}
 8005eb8:	bf00      	nop
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	20000010 	.word	0x20000010
 8005ec8:	20013330 	.word	0x20013330

08005ecc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	af00      	add	r7, sp, #0
  return uwTick;
 8005ed0:	4b03      	ldr	r3, [pc, #12]	; (8005ee0 <HAL_GetTick+0x14>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	20013330 	.word	0x20013330

08005ee4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b084      	sub	sp, #16
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005eec:	f7ff ffee 	bl	8005ecc <HAL_GetTick>
 8005ef0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005efc:	d005      	beq.n	8005f0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005efe:	4b0a      	ldr	r3, [pc, #40]	; (8005f28 <HAL_Delay+0x44>)
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4413      	add	r3, r2
 8005f08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005f0a:	bf00      	nop
 8005f0c:	f7ff ffde 	bl	8005ecc <HAL_GetTick>
 8005f10:	4602      	mov	r2, r0
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	1ad3      	subs	r3, r2, r3
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d8f7      	bhi.n	8005f0c <HAL_Delay+0x28>
  {
  }
}
 8005f1c:	bf00      	nop
 8005f1e:	bf00      	nop
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	20000010 	.word	0x20000010

08005f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b085      	sub	sp, #20
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f003 0307 	and.w	r3, r3, #7
 8005f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005f3c:	4b0c      	ldr	r3, [pc, #48]	; (8005f70 <__NVIC_SetPriorityGrouping+0x44>)
 8005f3e:	68db      	ldr	r3, [r3, #12]
 8005f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005f48:	4013      	ands	r3, r2
 8005f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005f5e:	4a04      	ldr	r2, [pc, #16]	; (8005f70 <__NVIC_SetPriorityGrouping+0x44>)
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	60d3      	str	r3, [r2, #12]
}
 8005f64:	bf00      	nop
 8005f66:	3714      	adds	r7, #20
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr
 8005f70:	e000ed00 	.word	0xe000ed00

08005f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005f74:	b480      	push	{r7}
 8005f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005f78:	4b04      	ldr	r3, [pc, #16]	; (8005f8c <__NVIC_GetPriorityGrouping+0x18>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	0a1b      	lsrs	r3, r3, #8
 8005f7e:	f003 0307 	and.w	r3, r3, #7
}
 8005f82:	4618      	mov	r0, r3
 8005f84:	46bd      	mov	sp, r7
 8005f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8a:	4770      	bx	lr
 8005f8c:	e000ed00 	.word	0xe000ed00

08005f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	4603      	mov	r3, r0
 8005f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	db0b      	blt.n	8005fba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fa2:	79fb      	ldrb	r3, [r7, #7]
 8005fa4:	f003 021f 	and.w	r2, r3, #31
 8005fa8:	4907      	ldr	r1, [pc, #28]	; (8005fc8 <__NVIC_EnableIRQ+0x38>)
 8005faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fae:	095b      	lsrs	r3, r3, #5
 8005fb0:	2001      	movs	r0, #1
 8005fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8005fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005fba:	bf00      	nop
 8005fbc:	370c      	adds	r7, #12
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc4:	4770      	bx	lr
 8005fc6:	bf00      	nop
 8005fc8:	e000e100 	.word	0xe000e100

08005fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	6039      	str	r1, [r7, #0]
 8005fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	db0a      	blt.n	8005ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	b2da      	uxtb	r2, r3
 8005fe4:	490c      	ldr	r1, [pc, #48]	; (8006018 <__NVIC_SetPriority+0x4c>)
 8005fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005fea:	0112      	lsls	r2, r2, #4
 8005fec:	b2d2      	uxtb	r2, r2
 8005fee:	440b      	add	r3, r1
 8005ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ff4:	e00a      	b.n	800600c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	4908      	ldr	r1, [pc, #32]	; (800601c <__NVIC_SetPriority+0x50>)
 8005ffc:	79fb      	ldrb	r3, [r7, #7]
 8005ffe:	f003 030f 	and.w	r3, r3, #15
 8006002:	3b04      	subs	r3, #4
 8006004:	0112      	lsls	r2, r2, #4
 8006006:	b2d2      	uxtb	r2, r2
 8006008:	440b      	add	r3, r1
 800600a:	761a      	strb	r2, [r3, #24]
}
 800600c:	bf00      	nop
 800600e:	370c      	adds	r7, #12
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	e000e100 	.word	0xe000e100
 800601c:	e000ed00 	.word	0xe000ed00

08006020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006020:	b480      	push	{r7}
 8006022:	b089      	sub	sp, #36	; 0x24
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f003 0307 	and.w	r3, r3, #7
 8006032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006034:	69fb      	ldr	r3, [r7, #28]
 8006036:	f1c3 0307 	rsb	r3, r3, #7
 800603a:	2b04      	cmp	r3, #4
 800603c:	bf28      	it	cs
 800603e:	2304      	movcs	r3, #4
 8006040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	3304      	adds	r3, #4
 8006046:	2b06      	cmp	r3, #6
 8006048:	d902      	bls.n	8006050 <NVIC_EncodePriority+0x30>
 800604a:	69fb      	ldr	r3, [r7, #28]
 800604c:	3b03      	subs	r3, #3
 800604e:	e000      	b.n	8006052 <NVIC_EncodePriority+0x32>
 8006050:	2300      	movs	r3, #0
 8006052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006054:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	fa02 f303 	lsl.w	r3, r2, r3
 800605e:	43da      	mvns	r2, r3
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	401a      	ands	r2, r3
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006068:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	fa01 f303 	lsl.w	r3, r1, r3
 8006072:	43d9      	mvns	r1, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006078:	4313      	orrs	r3, r2
         );
}
 800607a:	4618      	mov	r0, r3
 800607c:	3724      	adds	r7, #36	; 0x24
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr

08006086 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b082      	sub	sp, #8
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7ff ff4c 	bl	8005f2c <__NVIC_SetPriorityGrouping>
}
 8006094:	bf00      	nop
 8006096:	3708      	adds	r7, #8
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800609c:	b580      	push	{r7, lr}
 800609e:	b086      	sub	sp, #24
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	4603      	mov	r3, r0
 80060a4:	60b9      	str	r1, [r7, #8]
 80060a6:	607a      	str	r2, [r7, #4]
 80060a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80060ae:	f7ff ff61 	bl	8005f74 <__NVIC_GetPriorityGrouping>
 80060b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	68b9      	ldr	r1, [r7, #8]
 80060b8:	6978      	ldr	r0, [r7, #20]
 80060ba:	f7ff ffb1 	bl	8006020 <NVIC_EncodePriority>
 80060be:	4602      	mov	r2, r0
 80060c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060c4:	4611      	mov	r1, r2
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7ff ff80 	bl	8005fcc <__NVIC_SetPriority>
}
 80060cc:	bf00      	nop
 80060ce:	3718      	adds	r7, #24
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	4603      	mov	r3, r0
 80060dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80060de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f7ff ff54 	bl	8005f90 <__NVIC_EnableIRQ>
}
 80060e8:	bf00      	nop
 80060ea:	3708      	adds	r7, #8
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b089      	sub	sp, #36	; 0x24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
 80060f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80060fa:	2300      	movs	r3, #0
 80060fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80060fe:	2300      	movs	r3, #0
 8006100:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006102:	2300      	movs	r3, #0
 8006104:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006106:	2300      	movs	r3, #0
 8006108:	61fb      	str	r3, [r7, #28]
 800610a:	e16b      	b.n	80063e4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800610c:	2201      	movs	r2, #1
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	fa02 f303 	lsl.w	r3, r2, r3
 8006114:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	697a      	ldr	r2, [r7, #20]
 800611c:	4013      	ands	r3, r2
 800611e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006120:	693a      	ldr	r2, [r7, #16]
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	429a      	cmp	r2, r3
 8006126:	f040 815a 	bne.w	80063de <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f003 0303 	and.w	r3, r3, #3
 8006132:	2b01      	cmp	r3, #1
 8006134:	d005      	beq.n	8006142 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800613e:	2b02      	cmp	r3, #2
 8006140:	d130      	bne.n	80061a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006148:	69fb      	ldr	r3, [r7, #28]
 800614a:	005b      	lsls	r3, r3, #1
 800614c:	2203      	movs	r2, #3
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	43db      	mvns	r3, r3
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	4013      	ands	r3, r2
 8006158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	005b      	lsls	r3, r3, #1
 8006162:	fa02 f303 	lsl.w	r3, r2, r3
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	4313      	orrs	r3, r2
 800616a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006178:	2201      	movs	r2, #1
 800617a:	69fb      	ldr	r3, [r7, #28]
 800617c:	fa02 f303 	lsl.w	r3, r2, r3
 8006180:	43db      	mvns	r3, r3
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	4013      	ands	r3, r2
 8006186:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	091b      	lsrs	r3, r3, #4
 800618e:	f003 0201 	and.w	r2, r3, #1
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	fa02 f303 	lsl.w	r3, r2, r3
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	4313      	orrs	r3, r2
 800619c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	69ba      	ldr	r2, [r7, #24]
 80061a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	f003 0303 	and.w	r3, r3, #3
 80061ac:	2b03      	cmp	r3, #3
 80061ae:	d017      	beq.n	80061e0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80061b6:	69fb      	ldr	r3, [r7, #28]
 80061b8:	005b      	lsls	r3, r3, #1
 80061ba:	2203      	movs	r2, #3
 80061bc:	fa02 f303 	lsl.w	r3, r2, r3
 80061c0:	43db      	mvns	r3, r3
 80061c2:	69ba      	ldr	r2, [r7, #24]
 80061c4:	4013      	ands	r3, r2
 80061c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	689a      	ldr	r2, [r3, #8]
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	fa02 f303 	lsl.w	r3, r2, r3
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	69ba      	ldr	r2, [r7, #24]
 80061de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f003 0303 	and.w	r3, r3, #3
 80061e8:	2b02      	cmp	r3, #2
 80061ea:	d123      	bne.n	8006234 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80061ec:	69fb      	ldr	r3, [r7, #28]
 80061ee:	08da      	lsrs	r2, r3, #3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3208      	adds	r2, #8
 80061f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	f003 0307 	and.w	r3, r3, #7
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	220f      	movs	r2, #15
 8006204:	fa02 f303 	lsl.w	r3, r2, r3
 8006208:	43db      	mvns	r3, r3
 800620a:	69ba      	ldr	r2, [r7, #24]
 800620c:	4013      	ands	r3, r2
 800620e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	691a      	ldr	r2, [r3, #16]
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	f003 0307 	and.w	r3, r3, #7
 800621a:	009b      	lsls	r3, r3, #2
 800621c:	fa02 f303 	lsl.w	r3, r2, r3
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	4313      	orrs	r3, r2
 8006224:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	08da      	lsrs	r2, r3, #3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	3208      	adds	r2, #8
 800622e:	69b9      	ldr	r1, [r7, #24]
 8006230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	005b      	lsls	r3, r3, #1
 800623e:	2203      	movs	r2, #3
 8006240:	fa02 f303 	lsl.w	r3, r2, r3
 8006244:	43db      	mvns	r3, r3
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	4013      	ands	r3, r2
 800624a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f003 0203 	and.w	r2, r3, #3
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	005b      	lsls	r3, r3, #1
 8006258:	fa02 f303 	lsl.w	r3, r2, r3
 800625c:	69ba      	ldr	r2, [r7, #24]
 800625e:	4313      	orrs	r3, r2
 8006260:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	69ba      	ldr	r2, [r7, #24]
 8006266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 80b4 	beq.w	80063de <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006276:	2300      	movs	r3, #0
 8006278:	60fb      	str	r3, [r7, #12]
 800627a:	4b60      	ldr	r3, [pc, #384]	; (80063fc <HAL_GPIO_Init+0x30c>)
 800627c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800627e:	4a5f      	ldr	r2, [pc, #380]	; (80063fc <HAL_GPIO_Init+0x30c>)
 8006280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006284:	6453      	str	r3, [r2, #68]	; 0x44
 8006286:	4b5d      	ldr	r3, [pc, #372]	; (80063fc <HAL_GPIO_Init+0x30c>)
 8006288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800628a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006292:	4a5b      	ldr	r2, [pc, #364]	; (8006400 <HAL_GPIO_Init+0x310>)
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	089b      	lsrs	r3, r3, #2
 8006298:	3302      	adds	r3, #2
 800629a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800629e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	f003 0303 	and.w	r3, r3, #3
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	220f      	movs	r2, #15
 80062aa:	fa02 f303 	lsl.w	r3, r2, r3
 80062ae:	43db      	mvns	r3, r3
 80062b0:	69ba      	ldr	r2, [r7, #24]
 80062b2:	4013      	ands	r3, r2
 80062b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a52      	ldr	r2, [pc, #328]	; (8006404 <HAL_GPIO_Init+0x314>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d02b      	beq.n	8006316 <HAL_GPIO_Init+0x226>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a51      	ldr	r2, [pc, #324]	; (8006408 <HAL_GPIO_Init+0x318>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d025      	beq.n	8006312 <HAL_GPIO_Init+0x222>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a50      	ldr	r2, [pc, #320]	; (800640c <HAL_GPIO_Init+0x31c>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d01f      	beq.n	800630e <HAL_GPIO_Init+0x21e>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a4f      	ldr	r2, [pc, #316]	; (8006410 <HAL_GPIO_Init+0x320>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d019      	beq.n	800630a <HAL_GPIO_Init+0x21a>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a4e      	ldr	r2, [pc, #312]	; (8006414 <HAL_GPIO_Init+0x324>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d013      	beq.n	8006306 <HAL_GPIO_Init+0x216>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a4d      	ldr	r2, [pc, #308]	; (8006418 <HAL_GPIO_Init+0x328>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d00d      	beq.n	8006302 <HAL_GPIO_Init+0x212>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a4c      	ldr	r2, [pc, #304]	; (800641c <HAL_GPIO_Init+0x32c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d007      	beq.n	80062fe <HAL_GPIO_Init+0x20e>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a4b      	ldr	r2, [pc, #300]	; (8006420 <HAL_GPIO_Init+0x330>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d101      	bne.n	80062fa <HAL_GPIO_Init+0x20a>
 80062f6:	2307      	movs	r3, #7
 80062f8:	e00e      	b.n	8006318 <HAL_GPIO_Init+0x228>
 80062fa:	2308      	movs	r3, #8
 80062fc:	e00c      	b.n	8006318 <HAL_GPIO_Init+0x228>
 80062fe:	2306      	movs	r3, #6
 8006300:	e00a      	b.n	8006318 <HAL_GPIO_Init+0x228>
 8006302:	2305      	movs	r3, #5
 8006304:	e008      	b.n	8006318 <HAL_GPIO_Init+0x228>
 8006306:	2304      	movs	r3, #4
 8006308:	e006      	b.n	8006318 <HAL_GPIO_Init+0x228>
 800630a:	2303      	movs	r3, #3
 800630c:	e004      	b.n	8006318 <HAL_GPIO_Init+0x228>
 800630e:	2302      	movs	r3, #2
 8006310:	e002      	b.n	8006318 <HAL_GPIO_Init+0x228>
 8006312:	2301      	movs	r3, #1
 8006314:	e000      	b.n	8006318 <HAL_GPIO_Init+0x228>
 8006316:	2300      	movs	r3, #0
 8006318:	69fa      	ldr	r2, [r7, #28]
 800631a:	f002 0203 	and.w	r2, r2, #3
 800631e:	0092      	lsls	r2, r2, #2
 8006320:	4093      	lsls	r3, r2
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	4313      	orrs	r3, r2
 8006326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006328:	4935      	ldr	r1, [pc, #212]	; (8006400 <HAL_GPIO_Init+0x310>)
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	089b      	lsrs	r3, r3, #2
 800632e:	3302      	adds	r3, #2
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006336:	4b3b      	ldr	r3, [pc, #236]	; (8006424 <HAL_GPIO_Init+0x334>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	43db      	mvns	r3, r3
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	4013      	ands	r3, r2
 8006344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	4313      	orrs	r3, r2
 8006358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800635a:	4a32      	ldr	r2, [pc, #200]	; (8006424 <HAL_GPIO_Init+0x334>)
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006360:	4b30      	ldr	r3, [pc, #192]	; (8006424 <HAL_GPIO_Init+0x334>)
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	43db      	mvns	r3, r3
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	4013      	ands	r3, r2
 800636e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d003      	beq.n	8006384 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	4313      	orrs	r3, r2
 8006382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006384:	4a27      	ldr	r2, [pc, #156]	; (8006424 <HAL_GPIO_Init+0x334>)
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800638a:	4b26      	ldr	r3, [pc, #152]	; (8006424 <HAL_GPIO_Init+0x334>)
 800638c:	689b      	ldr	r3, [r3, #8]
 800638e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	43db      	mvns	r3, r3
 8006394:	69ba      	ldr	r2, [r7, #24]
 8006396:	4013      	ands	r3, r2
 8006398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80063ae:	4a1d      	ldr	r2, [pc, #116]	; (8006424 <HAL_GPIO_Init+0x334>)
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80063b4:	4b1b      	ldr	r3, [pc, #108]	; (8006424 <HAL_GPIO_Init+0x334>)
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	43db      	mvns	r3, r3
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	4013      	ands	r3, r2
 80063c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d003      	beq.n	80063d8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80063d8:	4a12      	ldr	r2, [pc, #72]	; (8006424 <HAL_GPIO_Init+0x334>)
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	3301      	adds	r3, #1
 80063e2:	61fb      	str	r3, [r7, #28]
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	2b0f      	cmp	r3, #15
 80063e8:	f67f ae90 	bls.w	800610c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80063ec:	bf00      	nop
 80063ee:	bf00      	nop
 80063f0:	3724      	adds	r7, #36	; 0x24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	40023800 	.word	0x40023800
 8006400:	40013800 	.word	0x40013800
 8006404:	40020000 	.word	0x40020000
 8006408:	40020400 	.word	0x40020400
 800640c:	40020800 	.word	0x40020800
 8006410:	40020c00 	.word	0x40020c00
 8006414:	40021000 	.word	0x40021000
 8006418:	40021400 	.word	0x40021400
 800641c:	40021800 	.word	0x40021800
 8006420:	40021c00 	.word	0x40021c00
 8006424:	40013c00 	.word	0x40013c00

08006428 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	460b      	mov	r3, r1
 8006432:	807b      	strh	r3, [r7, #2]
 8006434:	4613      	mov	r3, r2
 8006436:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006438:	787b      	ldrb	r3, [r7, #1]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800643e:	887a      	ldrh	r2, [r7, #2]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006444:	e003      	b.n	800644e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006446:	887b      	ldrh	r3, [r7, #2]
 8006448:	041a      	lsls	r2, r3, #16
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	619a      	str	r2, [r3, #24]
}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
	...

0800645c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b084      	sub	sp, #16
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d101      	bne.n	800646e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800646a:	2301      	movs	r3, #1
 800646c:	e12b      	b.n	80066c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006474:	b2db      	uxtb	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d106      	bne.n	8006488 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2200      	movs	r2, #0
 800647e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f7fe fb0c 	bl	8004aa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2224      	movs	r2, #36	; 0x24
 800648c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f022 0201 	bic.w	r2, r2, #1
 800649e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	681a      	ldr	r2, [r3, #0]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80064c0:	f003 f83e 	bl	8009540 <HAL_RCC_GetPCLK1Freq>
 80064c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	4a81      	ldr	r2, [pc, #516]	; (80066d0 <HAL_I2C_Init+0x274>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d807      	bhi.n	80064e0 <HAL_I2C_Init+0x84>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	4a80      	ldr	r2, [pc, #512]	; (80066d4 <HAL_I2C_Init+0x278>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	bf94      	ite	ls
 80064d8:	2301      	movls	r3, #1
 80064da:	2300      	movhi	r3, #0
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	e006      	b.n	80064ee <HAL_I2C_Init+0x92>
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	4a7d      	ldr	r2, [pc, #500]	; (80066d8 <HAL_I2C_Init+0x27c>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	bf94      	ite	ls
 80064e8:	2301      	movls	r3, #1
 80064ea:	2300      	movhi	r3, #0
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e0e7      	b.n	80066c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	4a78      	ldr	r2, [pc, #480]	; (80066dc <HAL_I2C_Init+0x280>)
 80064fa:	fba2 2303 	umull	r2, r3, r2, r3
 80064fe:	0c9b      	lsrs	r3, r3, #18
 8006500:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	430a      	orrs	r2, r1
 8006514:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	685b      	ldr	r3, [r3, #4]
 8006524:	4a6a      	ldr	r2, [pc, #424]	; (80066d0 <HAL_I2C_Init+0x274>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d802      	bhi.n	8006530 <HAL_I2C_Init+0xd4>
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	3301      	adds	r3, #1
 800652e:	e009      	b.n	8006544 <HAL_I2C_Init+0xe8>
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006536:	fb02 f303 	mul.w	r3, r2, r3
 800653a:	4a69      	ldr	r2, [pc, #420]	; (80066e0 <HAL_I2C_Init+0x284>)
 800653c:	fba2 2303 	umull	r2, r3, r2, r3
 8006540:	099b      	lsrs	r3, r3, #6
 8006542:	3301      	adds	r3, #1
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	6812      	ldr	r2, [r2, #0]
 8006548:	430b      	orrs	r3, r1
 800654a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006556:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	495c      	ldr	r1, [pc, #368]	; (80066d0 <HAL_I2C_Init+0x274>)
 8006560:	428b      	cmp	r3, r1
 8006562:	d819      	bhi.n	8006598 <HAL_I2C_Init+0x13c>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	1e59      	subs	r1, r3, #1
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	685b      	ldr	r3, [r3, #4]
 800656c:	005b      	lsls	r3, r3, #1
 800656e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006572:	1c59      	adds	r1, r3, #1
 8006574:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006578:	400b      	ands	r3, r1
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00a      	beq.n	8006594 <HAL_I2C_Init+0x138>
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	1e59      	subs	r1, r3, #1
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	005b      	lsls	r3, r3, #1
 8006588:	fbb1 f3f3 	udiv	r3, r1, r3
 800658c:	3301      	adds	r3, #1
 800658e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006592:	e051      	b.n	8006638 <HAL_I2C_Init+0x1dc>
 8006594:	2304      	movs	r3, #4
 8006596:	e04f      	b.n	8006638 <HAL_I2C_Init+0x1dc>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d111      	bne.n	80065c4 <HAL_I2C_Init+0x168>
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	1e58      	subs	r0, r3, #1
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6859      	ldr	r1, [r3, #4]
 80065a8:	460b      	mov	r3, r1
 80065aa:	005b      	lsls	r3, r3, #1
 80065ac:	440b      	add	r3, r1
 80065ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80065b2:	3301      	adds	r3, #1
 80065b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	bf0c      	ite	eq
 80065bc:	2301      	moveq	r3, #1
 80065be:	2300      	movne	r3, #0
 80065c0:	b2db      	uxtb	r3, r3
 80065c2:	e012      	b.n	80065ea <HAL_I2C_Init+0x18e>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	1e58      	subs	r0, r3, #1
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	6859      	ldr	r1, [r3, #4]
 80065cc:	460b      	mov	r3, r1
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	440b      	add	r3, r1
 80065d2:	0099      	lsls	r1, r3, #2
 80065d4:	440b      	add	r3, r1
 80065d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80065da:	3301      	adds	r3, #1
 80065dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	bf0c      	ite	eq
 80065e4:	2301      	moveq	r3, #1
 80065e6:	2300      	movne	r3, #0
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d001      	beq.n	80065f2 <HAL_I2C_Init+0x196>
 80065ee:	2301      	movs	r3, #1
 80065f0:	e022      	b.n	8006638 <HAL_I2C_Init+0x1dc>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d10e      	bne.n	8006618 <HAL_I2C_Init+0x1bc>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	1e58      	subs	r0, r3, #1
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6859      	ldr	r1, [r3, #4]
 8006602:	460b      	mov	r3, r1
 8006604:	005b      	lsls	r3, r3, #1
 8006606:	440b      	add	r3, r1
 8006608:	fbb0 f3f3 	udiv	r3, r0, r3
 800660c:	3301      	adds	r3, #1
 800660e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006616:	e00f      	b.n	8006638 <HAL_I2C_Init+0x1dc>
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	1e58      	subs	r0, r3, #1
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6859      	ldr	r1, [r3, #4]
 8006620:	460b      	mov	r3, r1
 8006622:	009b      	lsls	r3, r3, #2
 8006624:	440b      	add	r3, r1
 8006626:	0099      	lsls	r1, r3, #2
 8006628:	440b      	add	r3, r1
 800662a:	fbb0 f3f3 	udiv	r3, r0, r3
 800662e:	3301      	adds	r3, #1
 8006630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006634:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006638:	6879      	ldr	r1, [r7, #4]
 800663a:	6809      	ldr	r1, [r1, #0]
 800663c:	4313      	orrs	r3, r2
 800663e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	69da      	ldr	r2, [r3, #28]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	431a      	orrs	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	430a      	orrs	r2, r1
 800665a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006666:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	6911      	ldr	r1, [r2, #16]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	68d2      	ldr	r2, [r2, #12]
 8006672:	4311      	orrs	r1, r2
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6812      	ldr	r2, [r2, #0]
 8006678:	430b      	orrs	r3, r1
 800667a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68db      	ldr	r3, [r3, #12]
 8006682:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	695a      	ldr	r2, [r3, #20]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	431a      	orrs	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	430a      	orrs	r2, r1
 8006696:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f042 0201 	orr.w	r2, r2, #1
 80066a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2220      	movs	r2, #32
 80066b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80066c4:	2300      	movs	r3, #0
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	000186a0 	.word	0x000186a0
 80066d4:	001e847f 	.word	0x001e847f
 80066d8:	003d08ff 	.word	0x003d08ff
 80066dc:	431bde83 	.word	0x431bde83
 80066e0:	10624dd3 	.word	0x10624dd3

080066e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b088      	sub	sp, #32
 80066e8:	af02      	add	r7, sp, #8
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	607a      	str	r2, [r7, #4]
 80066ee:	461a      	mov	r2, r3
 80066f0:	460b      	mov	r3, r1
 80066f2:	817b      	strh	r3, [r7, #10]
 80066f4:	4613      	mov	r3, r2
 80066f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80066f8:	f7ff fbe8 	bl	8005ecc <HAL_GetTick>
 80066fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b20      	cmp	r3, #32
 8006708:	f040 80e0 	bne.w	80068cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800670c:	697b      	ldr	r3, [r7, #20]
 800670e:	9300      	str	r3, [sp, #0]
 8006710:	2319      	movs	r3, #25
 8006712:	2201      	movs	r2, #1
 8006714:	4970      	ldr	r1, [pc, #448]	; (80068d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f000 ff66 	bl	80075e8 <I2C_WaitOnFlagUntilTimeout>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006722:	2302      	movs	r3, #2
 8006724:	e0d3      	b.n	80068ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <HAL_I2C_Master_Transmit+0x50>
 8006730:	2302      	movs	r3, #2
 8006732:	e0cc      	b.n	80068ce <HAL_I2C_Master_Transmit+0x1ea>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 0301 	and.w	r3, r3, #1
 8006746:	2b01      	cmp	r3, #1
 8006748:	d007      	beq.n	800675a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f042 0201 	orr.w	r2, r2, #1
 8006758:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006768:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2221      	movs	r2, #33	; 0x21
 800676e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2210      	movs	r2, #16
 8006776:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	893a      	ldrh	r2, [r7, #8]
 800678a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006790:	b29a      	uxth	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	4a50      	ldr	r2, [pc, #320]	; (80068dc <HAL_I2C_Master_Transmit+0x1f8>)
 800679a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800679c:	8979      	ldrh	r1, [r7, #10]
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	6a3a      	ldr	r2, [r7, #32]
 80067a2:	68f8      	ldr	r0, [r7, #12]
 80067a4:	f000 fce8 	bl	8007178 <I2C_MasterRequestWrite>
 80067a8:	4603      	mov	r3, r0
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d001      	beq.n	80067b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80067ae:	2301      	movs	r3, #1
 80067b0:	e08d      	b.n	80068ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067b2:	2300      	movs	r3, #0
 80067b4:	613b      	str	r3, [r7, #16]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	695b      	ldr	r3, [r3, #20]
 80067bc:	613b      	str	r3, [r7, #16]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	699b      	ldr	r3, [r3, #24]
 80067c4:	613b      	str	r3, [r7, #16]
 80067c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80067c8:	e066      	b.n	8006898 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	6a39      	ldr	r1, [r7, #32]
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f000 ffe0 	bl	8007794 <I2C_WaitOnTXEFlagUntilTimeout>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d00d      	beq.n	80067f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d107      	bne.n	80067f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80067f2:	2301      	movs	r3, #1
 80067f4:	e06b      	b.n	80068ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fa:	781a      	ldrb	r2, [r3, #0]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006806:	1c5a      	adds	r2, r3, #1
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006810:	b29b      	uxth	r3, r3
 8006812:	3b01      	subs	r3, #1
 8006814:	b29a      	uxth	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800681e:	3b01      	subs	r3, #1
 8006820:	b29a      	uxth	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	f003 0304 	and.w	r3, r3, #4
 8006830:	2b04      	cmp	r3, #4
 8006832:	d11b      	bne.n	800686c <HAL_I2C_Master_Transmit+0x188>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006838:	2b00      	cmp	r3, #0
 800683a:	d017      	beq.n	800686c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	781a      	ldrb	r2, [r3, #0]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800684c:	1c5a      	adds	r2, r3, #1
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006856:	b29b      	uxth	r3, r3
 8006858:	3b01      	subs	r3, #1
 800685a:	b29a      	uxth	r2, r3
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006864:	3b01      	subs	r3, #1
 8006866:	b29a      	uxth	r2, r3
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	6a39      	ldr	r1, [r7, #32]
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f000 ffd0 	bl	8007816 <I2C_WaitOnBTFFlagUntilTimeout>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00d      	beq.n	8006898 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006880:	2b04      	cmp	r3, #4
 8006882:	d107      	bne.n	8006894 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006892:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006894:	2301      	movs	r3, #1
 8006896:	e01a      	b.n	80068ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800689c:	2b00      	cmp	r3, #0
 800689e:	d194      	bne.n	80067ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2220      	movs	r2, #32
 80068b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80068c8:	2300      	movs	r3, #0
 80068ca:	e000      	b.n	80068ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80068cc:	2302      	movs	r3, #2
  }
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	00100002 	.word	0x00100002
 80068dc:	ffff0000 	.word	0xffff0000

080068e0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b08c      	sub	sp, #48	; 0x30
 80068e4:	af02      	add	r7, sp, #8
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	607a      	str	r2, [r7, #4]
 80068ea:	461a      	mov	r2, r3
 80068ec:	460b      	mov	r3, r1
 80068ee:	817b      	strh	r3, [r7, #10]
 80068f0:	4613      	mov	r3, r2
 80068f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80068f4:	f7ff faea 	bl	8005ecc <HAL_GetTick>
 80068f8:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006900:	b2db      	uxtb	r3, r3
 8006902:	2b20      	cmp	r3, #32
 8006904:	f040 820b 	bne.w	8006d1e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690a:	9300      	str	r3, [sp, #0]
 800690c:	2319      	movs	r3, #25
 800690e:	2201      	movs	r2, #1
 8006910:	497c      	ldr	r1, [pc, #496]	; (8006b04 <HAL_I2C_Master_Receive+0x224>)
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f000 fe68 	bl	80075e8 <I2C_WaitOnFlagUntilTimeout>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d001      	beq.n	8006922 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800691e:	2302      	movs	r3, #2
 8006920:	e1fe      	b.n	8006d20 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006928:	2b01      	cmp	r3, #1
 800692a:	d101      	bne.n	8006930 <HAL_I2C_Master_Receive+0x50>
 800692c:	2302      	movs	r3, #2
 800692e:	e1f7      	b.n	8006d20 <HAL_I2C_Master_Receive+0x440>
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2201      	movs	r2, #1
 8006934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f003 0301 	and.w	r3, r3, #1
 8006942:	2b01      	cmp	r3, #1
 8006944:	d007      	beq.n	8006956 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f042 0201 	orr.w	r2, r2, #1
 8006954:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006964:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2222      	movs	r2, #34	; 0x22
 800696a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2210      	movs	r2, #16
 8006972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2200      	movs	r2, #0
 800697a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	893a      	ldrh	r2, [r7, #8]
 8006986:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800698c:	b29a      	uxth	r2, r3
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	4a5c      	ldr	r2, [pc, #368]	; (8006b08 <HAL_I2C_Master_Receive+0x228>)
 8006996:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006998:	8979      	ldrh	r1, [r7, #10]
 800699a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800699e:	68f8      	ldr	r0, [r7, #12]
 80069a0:	f000 fc6c 	bl	800727c <I2C_MasterRequestRead>
 80069a4:	4603      	mov	r3, r0
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80069aa:	2301      	movs	r3, #1
 80069ac:	e1b8      	b.n	8006d20 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d113      	bne.n	80069de <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069b6:	2300      	movs	r3, #0
 80069b8:	623b      	str	r3, [r7, #32]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	623b      	str	r3, [r7, #32]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	699b      	ldr	r3, [r3, #24]
 80069c8:	623b      	str	r3, [r7, #32]
 80069ca:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069da:	601a      	str	r2, [r3, #0]
 80069dc:	e18c      	b.n	8006cf8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d11b      	bne.n	8006a1e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069f4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069f6:	2300      	movs	r3, #0
 80069f8:	61fb      	str	r3, [r7, #28]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	695b      	ldr	r3, [r3, #20]
 8006a00:	61fb      	str	r3, [r7, #28]
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	699b      	ldr	r3, [r3, #24]
 8006a08:	61fb      	str	r3, [r7, #28]
 8006a0a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a1a:	601a      	str	r2, [r3, #0]
 8006a1c:	e16c      	b.n	8006cf8 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d11b      	bne.n	8006a5e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a34:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a46:	2300      	movs	r3, #0
 8006a48:	61bb      	str	r3, [r7, #24]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	695b      	ldr	r3, [r3, #20]
 8006a50:	61bb      	str	r3, [r7, #24]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	61bb      	str	r3, [r7, #24]
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	e14c      	b.n	8006cf8 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006a6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006a6e:	2300      	movs	r3, #0
 8006a70:	617b      	str	r3, [r7, #20]
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	695b      	ldr	r3, [r3, #20]
 8006a78:	617b      	str	r3, [r7, #20]
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	617b      	str	r3, [r7, #20]
 8006a82:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006a84:	e138      	b.n	8006cf8 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a8a:	2b03      	cmp	r3, #3
 8006a8c:	f200 80f1 	bhi.w	8006c72 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d123      	bne.n	8006ae0 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006a9c:	68f8      	ldr	r0, [r7, #12]
 8006a9e:	f000 fefb 	bl	8007898 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e139      	b.n	8006d20 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	691a      	ldr	r2, [r3, #16]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ab6:	b2d2      	uxtb	r2, r2
 8006ab8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006abe:	1c5a      	adds	r2, r3, #1
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ac8:	3b01      	subs	r3, #1
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ad4:	b29b      	uxth	r3, r3
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ade:	e10b      	b.n	8006cf8 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ae4:	2b02      	cmp	r3, #2
 8006ae6:	d14e      	bne.n	8006b86 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	9300      	str	r3, [sp, #0]
 8006aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aee:	2200      	movs	r2, #0
 8006af0:	4906      	ldr	r1, [pc, #24]	; (8006b0c <HAL_I2C_Master_Receive+0x22c>)
 8006af2:	68f8      	ldr	r0, [r7, #12]
 8006af4:	f000 fd78 	bl	80075e8 <I2C_WaitOnFlagUntilTimeout>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d008      	beq.n	8006b10 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006afe:	2301      	movs	r3, #1
 8006b00:	e10e      	b.n	8006d20 <HAL_I2C_Master_Receive+0x440>
 8006b02:	bf00      	nop
 8006b04:	00100002 	.word	0x00100002
 8006b08:	ffff0000 	.word	0xffff0000
 8006b0c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	681a      	ldr	r2, [r3, #0]
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	691a      	ldr	r2, [r3, #16]
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b2a:	b2d2      	uxtb	r2, r2
 8006b2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b32:	1c5a      	adds	r2, r3, #1
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b3c:	3b01      	subs	r3, #1
 8006b3e:	b29a      	uxth	r2, r3
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	691a      	ldr	r2, [r3, #16]
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5c:	b2d2      	uxtb	r2, r2
 8006b5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b64:	1c5a      	adds	r2, r3, #1
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b6e:	3b01      	subs	r3, #1
 8006b70:	b29a      	uxth	r2, r3
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b7a:	b29b      	uxth	r3, r3
 8006b7c:	3b01      	subs	r3, #1
 8006b7e:	b29a      	uxth	r2, r3
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006b84:	e0b8      	b.n	8006cf8 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b88:	9300      	str	r3, [sp, #0]
 8006b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	4966      	ldr	r1, [pc, #408]	; (8006d28 <HAL_I2C_Master_Receive+0x448>)
 8006b90:	68f8      	ldr	r0, [r7, #12]
 8006b92:	f000 fd29 	bl	80075e8 <I2C_WaitOnFlagUntilTimeout>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d001      	beq.n	8006ba0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e0bf      	b.n	8006d20 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	681a      	ldr	r2, [r3, #0]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006bae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	691a      	ldr	r2, [r3, #16]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bba:	b2d2      	uxtb	r2, r2
 8006bbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be8:	2200      	movs	r2, #0
 8006bea:	494f      	ldr	r1, [pc, #316]	; (8006d28 <HAL_I2C_Master_Receive+0x448>)
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f000 fcfb 	bl	80075e8 <I2C_WaitOnFlagUntilTimeout>
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e091      	b.n	8006d20 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	691a      	ldr	r2, [r3, #16]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c16:	b2d2      	uxtb	r2, r2
 8006c18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	3b01      	subs	r3, #1
 8006c38:	b29a      	uxth	r2, r3
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	691a      	ldr	r2, [r3, #16]
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c48:	b2d2      	uxtb	r2, r2
 8006c4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c50:	1c5a      	adds	r2, r3, #1
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	b29a      	uxth	r2, r3
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	3b01      	subs	r3, #1
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c70:	e042      	b.n	8006cf8 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 fe0e 	bl	8007898 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d001      	beq.n	8006c86 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e04c      	b.n	8006d20 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	691a      	ldr	r2, [r3, #16]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c90:	b2d2      	uxtb	r2, r2
 8006c92:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c98:	1c5a      	adds	r2, r3, #1
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	3b01      	subs	r3, #1
 8006cb2:	b29a      	uxth	r2, r3
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	695b      	ldr	r3, [r3, #20]
 8006cbe:	f003 0304 	and.w	r3, r3, #4
 8006cc2:	2b04      	cmp	r3, #4
 8006cc4:	d118      	bne.n	8006cf8 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	691a      	ldr	r2, [r3, #16]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd0:	b2d2      	uxtb	r2, r2
 8006cd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd8:	1c5a      	adds	r2, r3, #1
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	3b01      	subs	r3, #1
 8006cf2:	b29a      	uxth	r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f47f aec2 	bne.w	8006a86 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2220      	movs	r2, #32
 8006d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	e000      	b.n	8006d20 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006d1e:	2302      	movs	r3, #2
  }
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3728      	adds	r7, #40	; 0x28
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	00010004 	.word	0x00010004

08006d2c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08c      	sub	sp, #48	; 0x30
 8006d30:	af02      	add	r7, sp, #8
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	4608      	mov	r0, r1
 8006d36:	4611      	mov	r1, r2
 8006d38:	461a      	mov	r2, r3
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	817b      	strh	r3, [r7, #10]
 8006d3e:	460b      	mov	r3, r1
 8006d40:	813b      	strh	r3, [r7, #8]
 8006d42:	4613      	mov	r3, r2
 8006d44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d46:	f7ff f8c1 	bl	8005ecc <HAL_GetTick>
 8006d4a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d52:	b2db      	uxtb	r3, r3
 8006d54:	2b20      	cmp	r3, #32
 8006d56:	f040 8208 	bne.w	800716a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d5c:	9300      	str	r3, [sp, #0]
 8006d5e:	2319      	movs	r3, #25
 8006d60:	2201      	movs	r2, #1
 8006d62:	497b      	ldr	r1, [pc, #492]	; (8006f50 <HAL_I2C_Mem_Read+0x224>)
 8006d64:	68f8      	ldr	r0, [r7, #12]
 8006d66:	f000 fc3f 	bl	80075e8 <I2C_WaitOnFlagUntilTimeout>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d001      	beq.n	8006d74 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006d70:	2302      	movs	r3, #2
 8006d72:	e1fb      	b.n	800716c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d101      	bne.n	8006d82 <HAL_I2C_Mem_Read+0x56>
 8006d7e:	2302      	movs	r3, #2
 8006d80:	e1f4      	b.n	800716c <HAL_I2C_Mem_Read+0x440>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0301 	and.w	r3, r3, #1
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d007      	beq.n	8006da8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f042 0201 	orr.w	r2, r2, #1
 8006da6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006db6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	2222      	movs	r2, #34	; 0x22
 8006dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2240      	movs	r2, #64	; 0x40
 8006dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dd2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8006dd8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dde:	b29a      	uxth	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	4a5b      	ldr	r2, [pc, #364]	; (8006f54 <HAL_I2C_Mem_Read+0x228>)
 8006de8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006dea:	88f8      	ldrh	r0, [r7, #6]
 8006dec:	893a      	ldrh	r2, [r7, #8]
 8006dee:	8979      	ldrh	r1, [r7, #10]
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	9301      	str	r3, [sp, #4]
 8006df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006df6:	9300      	str	r3, [sp, #0]
 8006df8:	4603      	mov	r3, r0
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 fb0c 	bl	8007418 <I2C_RequestMemoryRead>
 8006e00:	4603      	mov	r3, r0
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d001      	beq.n	8006e0a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8006e06:	2301      	movs	r3, #1
 8006e08:	e1b0      	b.n	800716c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d113      	bne.n	8006e3a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e12:	2300      	movs	r3, #0
 8006e14:	623b      	str	r3, [r7, #32]
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	695b      	ldr	r3, [r3, #20]
 8006e1c:	623b      	str	r3, [r7, #32]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	699b      	ldr	r3, [r3, #24]
 8006e24:	623b      	str	r3, [r7, #32]
 8006e26:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	681a      	ldr	r2, [r3, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e36:	601a      	str	r2, [r3, #0]
 8006e38:	e184      	b.n	8007144 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d11b      	bne.n	8006e7a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e52:	2300      	movs	r3, #0
 8006e54:	61fb      	str	r3, [r7, #28]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	695b      	ldr	r3, [r3, #20]
 8006e5c:	61fb      	str	r3, [r7, #28]
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	699b      	ldr	r3, [r3, #24]
 8006e64:	61fb      	str	r3, [r7, #28]
 8006e66:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681a      	ldr	r2, [r3, #0]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	e164      	b.n	8007144 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d11b      	bne.n	8006eba <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e90:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ea0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	61bb      	str	r3, [r7, #24]
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	695b      	ldr	r3, [r3, #20]
 8006eac:	61bb      	str	r3, [r7, #24]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	61bb      	str	r3, [r7, #24]
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	e144      	b.n	8007144 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eba:	2300      	movs	r3, #0
 8006ebc:	617b      	str	r3, [r7, #20]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	695b      	ldr	r3, [r3, #20]
 8006ec4:	617b      	str	r3, [r7, #20]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	617b      	str	r3, [r7, #20]
 8006ece:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006ed0:	e138      	b.n	8007144 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	f200 80f1 	bhi.w	80070be <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d123      	bne.n	8006f2c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ee6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ee8:	68f8      	ldr	r0, [r7, #12]
 8006eea:	f000 fcd5 	bl	8007898 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d001      	beq.n	8006ef8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e139      	b.n	800716c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	691a      	ldr	r2, [r3, #16]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f02:	b2d2      	uxtb	r2, r2
 8006f04:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0a:	1c5a      	adds	r2, r3, #1
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f14:	3b01      	subs	r3, #1
 8006f16:	b29a      	uxth	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f20:	b29b      	uxth	r3, r3
 8006f22:	3b01      	subs	r3, #1
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f2a:	e10b      	b.n	8007144 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f30:	2b02      	cmp	r3, #2
 8006f32:	d14e      	bne.n	8006fd2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f36:	9300      	str	r3, [sp, #0]
 8006f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	4906      	ldr	r1, [pc, #24]	; (8006f58 <HAL_I2C_Mem_Read+0x22c>)
 8006f3e:	68f8      	ldr	r0, [r7, #12]
 8006f40:	f000 fb52 	bl	80075e8 <I2C_WaitOnFlagUntilTimeout>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d008      	beq.n	8006f5c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006f4a:	2301      	movs	r3, #1
 8006f4c:	e10e      	b.n	800716c <HAL_I2C_Mem_Read+0x440>
 8006f4e:	bf00      	nop
 8006f50:	00100002 	.word	0x00100002
 8006f54:	ffff0000 	.word	0xffff0000
 8006f58:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	691a      	ldr	r2, [r3, #16]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f76:	b2d2      	uxtb	r2, r2
 8006f78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7e:	1c5a      	adds	r2, r3, #1
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f88:	3b01      	subs	r3, #1
 8006f8a:	b29a      	uxth	r2, r3
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	3b01      	subs	r3, #1
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	691a      	ldr	r2, [r3, #16]
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa8:	b2d2      	uxtb	r2, r2
 8006faa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb0:	1c5a      	adds	r2, r3, #1
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	3b01      	subs	r3, #1
 8006fca:	b29a      	uxth	r2, r3
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006fd0:	e0b8      	b.n	8007144 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fd8:	2200      	movs	r2, #0
 8006fda:	4966      	ldr	r1, [pc, #408]	; (8007174 <HAL_I2C_Mem_Read+0x448>)
 8006fdc:	68f8      	ldr	r0, [r7, #12]
 8006fde:	f000 fb03 	bl	80075e8 <I2C_WaitOnFlagUntilTimeout>
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e0bf      	b.n	800716c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	681a      	ldr	r2, [r3, #0]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ffa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	691a      	ldr	r2, [r3, #16]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007006:	b2d2      	uxtb	r2, r2
 8007008:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800700e:	1c5a      	adds	r2, r3, #1
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007018:	3b01      	subs	r3, #1
 800701a:	b29a      	uxth	r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007024:	b29b      	uxth	r3, r3
 8007026:	3b01      	subs	r3, #1
 8007028:	b29a      	uxth	r2, r3
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800702e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007034:	2200      	movs	r2, #0
 8007036:	494f      	ldr	r1, [pc, #316]	; (8007174 <HAL_I2C_Mem_Read+0x448>)
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f000 fad5 	bl	80075e8 <I2C_WaitOnFlagUntilTimeout>
 800703e:	4603      	mov	r3, r0
 8007040:	2b00      	cmp	r3, #0
 8007042:	d001      	beq.n	8007048 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	e091      	b.n	800716c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007056:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	691a      	ldr	r2, [r3, #16]
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007062:	b2d2      	uxtb	r2, r2
 8007064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706a:	1c5a      	adds	r2, r3, #1
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007074:	3b01      	subs	r3, #1
 8007076:	b29a      	uxth	r2, r3
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007080:	b29b      	uxth	r3, r3
 8007082:	3b01      	subs	r3, #1
 8007084:	b29a      	uxth	r2, r3
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	691a      	ldr	r2, [r3, #16]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007094:	b2d2      	uxtb	r2, r2
 8007096:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709c:	1c5a      	adds	r2, r3, #1
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070a6:	3b01      	subs	r3, #1
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070b2:	b29b      	uxth	r3, r3
 80070b4:	3b01      	subs	r3, #1
 80070b6:	b29a      	uxth	r2, r3
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80070bc:	e042      	b.n	8007144 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80070c2:	68f8      	ldr	r0, [r7, #12]
 80070c4:	f000 fbe8 	bl	8007898 <I2C_WaitOnRXNEFlagUntilTimeout>
 80070c8:	4603      	mov	r3, r0
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d001      	beq.n	80070d2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80070ce:	2301      	movs	r3, #1
 80070d0:	e04c      	b.n	800716c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	691a      	ldr	r2, [r3, #16]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070dc:	b2d2      	uxtb	r2, r2
 80070de:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	1c5a      	adds	r2, r3, #1
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ee:	3b01      	subs	r3, #1
 80070f0:	b29a      	uxth	r2, r3
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070fa:	b29b      	uxth	r3, r3
 80070fc:	3b01      	subs	r3, #1
 80070fe:	b29a      	uxth	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	695b      	ldr	r3, [r3, #20]
 800710a:	f003 0304 	and.w	r3, r3, #4
 800710e:	2b04      	cmp	r3, #4
 8007110:	d118      	bne.n	8007144 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	691a      	ldr	r2, [r3, #16]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711c:	b2d2      	uxtb	r2, r2
 800711e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007124:	1c5a      	adds	r2, r3, #1
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800712e:	3b01      	subs	r3, #1
 8007130:	b29a      	uxth	r2, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800713a:	b29b      	uxth	r3, r3
 800713c:	3b01      	subs	r3, #1
 800713e:	b29a      	uxth	r2, r3
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007148:	2b00      	cmp	r3, #0
 800714a:	f47f aec2 	bne.w	8006ed2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	2220      	movs	r2, #32
 8007152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007166:	2300      	movs	r3, #0
 8007168:	e000      	b.n	800716c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800716a:	2302      	movs	r3, #2
  }
}
 800716c:	4618      	mov	r0, r3
 800716e:	3728      	adds	r7, #40	; 0x28
 8007170:	46bd      	mov	sp, r7
 8007172:	bd80      	pop	{r7, pc}
 8007174:	00010004 	.word	0x00010004

08007178 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b088      	sub	sp, #32
 800717c:	af02      	add	r7, sp, #8
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	607a      	str	r2, [r7, #4]
 8007182:	603b      	str	r3, [r7, #0]
 8007184:	460b      	mov	r3, r1
 8007186:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	2b08      	cmp	r3, #8
 8007192:	d006      	beq.n	80071a2 <I2C_MasterRequestWrite+0x2a>
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d003      	beq.n	80071a2 <I2C_MasterRequestWrite+0x2a>
 800719a:	697b      	ldr	r3, [r7, #20]
 800719c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80071a0:	d108      	bne.n	80071b4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071b0:	601a      	str	r2, [r3, #0]
 80071b2:	e00b      	b.n	80071cc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b8:	2b12      	cmp	r3, #18
 80071ba:	d107      	bne.n	80071cc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681a      	ldr	r2, [r3, #0]
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071ca:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f000 fa05 	bl	80075e8 <I2C_WaitOnFlagUntilTimeout>
 80071de:	4603      	mov	r3, r0
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00d      	beq.n	8007200 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071f2:	d103      	bne.n	80071fc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80071fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80071fc:	2303      	movs	r3, #3
 80071fe:	e035      	b.n	800726c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007208:	d108      	bne.n	800721c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800720a:	897b      	ldrh	r3, [r7, #10]
 800720c:	b2db      	uxtb	r3, r3
 800720e:	461a      	mov	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007218:	611a      	str	r2, [r3, #16]
 800721a:	e01b      	b.n	8007254 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800721c:	897b      	ldrh	r3, [r7, #10]
 800721e:	11db      	asrs	r3, r3, #7
 8007220:	b2db      	uxtb	r3, r3
 8007222:	f003 0306 	and.w	r3, r3, #6
 8007226:	b2db      	uxtb	r3, r3
 8007228:	f063 030f 	orn	r3, r3, #15
 800722c:	b2da      	uxtb	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	490e      	ldr	r1, [pc, #56]	; (8007274 <I2C_MasterRequestWrite+0xfc>)
 800723a:	68f8      	ldr	r0, [r7, #12]
 800723c:	f000 fa2b 	bl	8007696 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007246:	2301      	movs	r3, #1
 8007248:	e010      	b.n	800726c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800724a:	897b      	ldrh	r3, [r7, #10]
 800724c:	b2da      	uxtb	r2, r3
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	4907      	ldr	r1, [pc, #28]	; (8007278 <I2C_MasterRequestWrite+0x100>)
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f000 fa1b 	bl	8007696 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007260:	4603      	mov	r3, r0
 8007262:	2b00      	cmp	r3, #0
 8007264:	d001      	beq.n	800726a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007266:	2301      	movs	r3, #1
 8007268:	e000      	b.n	800726c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3718      	adds	r7, #24
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	00010008 	.word	0x00010008
 8007278:	00010002 	.word	0x00010002

0800727c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b088      	sub	sp, #32
 8007280:	af02      	add	r7, sp, #8
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	607a      	str	r2, [r7, #4]
 8007286:	603b      	str	r3, [r7, #0]
 8007288:	460b      	mov	r3, r1
 800728a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007290:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80072a0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	2b08      	cmp	r3, #8
 80072a6:	d006      	beq.n	80072b6 <I2C_MasterRequestRead+0x3a>
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	2b01      	cmp	r3, #1
 80072ac:	d003      	beq.n	80072b6 <I2C_MasterRequestRead+0x3a>
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80072b4:	d108      	bne.n	80072c8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	e00b      	b.n	80072e0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072cc:	2b11      	cmp	r3, #17
 80072ce:	d107      	bne.n	80072e0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	681a      	ldr	r2, [r3, #0]
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80072ec:	68f8      	ldr	r0, [r7, #12]
 80072ee:	f000 f97b 	bl	80075e8 <I2C_WaitOnFlagUntilTimeout>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00d      	beq.n	8007314 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007302:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007306:	d103      	bne.n	8007310 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800730e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007310:	2303      	movs	r3, #3
 8007312:	e079      	b.n	8007408 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	691b      	ldr	r3, [r3, #16]
 8007318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800731c:	d108      	bne.n	8007330 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800731e:	897b      	ldrh	r3, [r7, #10]
 8007320:	b2db      	uxtb	r3, r3
 8007322:	f043 0301 	orr.w	r3, r3, #1
 8007326:	b2da      	uxtb	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	611a      	str	r2, [r3, #16]
 800732e:	e05f      	b.n	80073f0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007330:	897b      	ldrh	r3, [r7, #10]
 8007332:	11db      	asrs	r3, r3, #7
 8007334:	b2db      	uxtb	r3, r3
 8007336:	f003 0306 	and.w	r3, r3, #6
 800733a:	b2db      	uxtb	r3, r3
 800733c:	f063 030f 	orn	r3, r3, #15
 8007340:	b2da      	uxtb	r2, r3
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	4930      	ldr	r1, [pc, #192]	; (8007410 <I2C_MasterRequestRead+0x194>)
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	f000 f9a1 	bl	8007696 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d001      	beq.n	800735e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e054      	b.n	8007408 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800735e:	897b      	ldrh	r3, [r7, #10]
 8007360:	b2da      	uxtb	r2, r3
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	4929      	ldr	r1, [pc, #164]	; (8007414 <I2C_MasterRequestRead+0x198>)
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f000 f991 	bl	8007696 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d001      	beq.n	800737e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800737a:	2301      	movs	r3, #1
 800737c:	e044      	b.n	8007408 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800737e:	2300      	movs	r3, #0
 8007380:	613b      	str	r3, [r7, #16]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	695b      	ldr	r3, [r3, #20]
 8007388:	613b      	str	r3, [r7, #16]
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	613b      	str	r3, [r7, #16]
 8007392:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80073a2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2200      	movs	r2, #0
 80073ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 f919 	bl	80075e8 <I2C_WaitOnFlagUntilTimeout>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00d      	beq.n	80073d8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ca:	d103      	bne.n	80073d4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80073d2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80073d4:	2303      	movs	r3, #3
 80073d6:	e017      	b.n	8007408 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80073d8:	897b      	ldrh	r3, [r7, #10]
 80073da:	11db      	asrs	r3, r3, #7
 80073dc:	b2db      	uxtb	r3, r3
 80073de:	f003 0306 	and.w	r3, r3, #6
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	f063 030e 	orn	r3, r3, #14
 80073e8:	b2da      	uxtb	r2, r3
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	4907      	ldr	r1, [pc, #28]	; (8007414 <I2C_MasterRequestRead+0x198>)
 80073f6:	68f8      	ldr	r0, [r7, #12]
 80073f8:	f000 f94d 	bl	8007696 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d001      	beq.n	8007406 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e000      	b.n	8007408 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3718      	adds	r7, #24
 800740c:	46bd      	mov	sp, r7
 800740e:	bd80      	pop	{r7, pc}
 8007410:	00010008 	.word	0x00010008
 8007414:	00010002 	.word	0x00010002

08007418 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b088      	sub	sp, #32
 800741c:	af02      	add	r7, sp, #8
 800741e:	60f8      	str	r0, [r7, #12]
 8007420:	4608      	mov	r0, r1
 8007422:	4611      	mov	r1, r2
 8007424:	461a      	mov	r2, r3
 8007426:	4603      	mov	r3, r0
 8007428:	817b      	strh	r3, [r7, #10]
 800742a:	460b      	mov	r3, r1
 800742c:	813b      	strh	r3, [r7, #8]
 800742e:	4613      	mov	r3, r2
 8007430:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007440:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	681a      	ldr	r2, [r3, #0]
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007450:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	6a3b      	ldr	r3, [r7, #32]
 8007458:	2200      	movs	r2, #0
 800745a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f000 f8c2 	bl	80075e8 <I2C_WaitOnFlagUntilTimeout>
 8007464:	4603      	mov	r3, r0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00d      	beq.n	8007486 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007478:	d103      	bne.n	8007482 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007480:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007482:	2303      	movs	r3, #3
 8007484:	e0aa      	b.n	80075dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007486:	897b      	ldrh	r3, [r7, #10]
 8007488:	b2db      	uxtb	r3, r3
 800748a:	461a      	mov	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007494:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007498:	6a3a      	ldr	r2, [r7, #32]
 800749a:	4952      	ldr	r1, [pc, #328]	; (80075e4 <I2C_RequestMemoryRead+0x1cc>)
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f000 f8fa 	bl	8007696 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e097      	b.n	80075dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074ac:	2300      	movs	r3, #0
 80074ae:	617b      	str	r3, [r7, #20]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	617b      	str	r3, [r7, #20]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	617b      	str	r3, [r7, #20]
 80074c0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80074c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074c4:	6a39      	ldr	r1, [r7, #32]
 80074c6:	68f8      	ldr	r0, [r7, #12]
 80074c8:	f000 f964 	bl	8007794 <I2C_WaitOnTXEFlagUntilTimeout>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d00d      	beq.n	80074ee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d6:	2b04      	cmp	r3, #4
 80074d8:	d107      	bne.n	80074ea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	681a      	ldr	r2, [r3, #0]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074e8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e076      	b.n	80075dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80074ee:	88fb      	ldrh	r3, [r7, #6]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d105      	bne.n	8007500 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80074f4:	893b      	ldrh	r3, [r7, #8]
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	611a      	str	r2, [r3, #16]
 80074fe:	e021      	b.n	8007544 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007500:	893b      	ldrh	r3, [r7, #8]
 8007502:	0a1b      	lsrs	r3, r3, #8
 8007504:	b29b      	uxth	r3, r3
 8007506:	b2da      	uxtb	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800750e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007510:	6a39      	ldr	r1, [r7, #32]
 8007512:	68f8      	ldr	r0, [r7, #12]
 8007514:	f000 f93e 	bl	8007794 <I2C_WaitOnTXEFlagUntilTimeout>
 8007518:	4603      	mov	r3, r0
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00d      	beq.n	800753a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007522:	2b04      	cmp	r3, #4
 8007524:	d107      	bne.n	8007536 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	681a      	ldr	r2, [r3, #0]
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007534:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e050      	b.n	80075dc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800753a:	893b      	ldrh	r3, [r7, #8]
 800753c:	b2da      	uxtb	r2, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007546:	6a39      	ldr	r1, [r7, #32]
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 f923 	bl	8007794 <I2C_WaitOnTXEFlagUntilTimeout>
 800754e:	4603      	mov	r3, r0
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00d      	beq.n	8007570 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007558:	2b04      	cmp	r3, #4
 800755a:	d107      	bne.n	800756c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800756a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800756c:	2301      	movs	r3, #1
 800756e:	e035      	b.n	80075dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800757e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007582:	9300      	str	r3, [sp, #0]
 8007584:	6a3b      	ldr	r3, [r7, #32]
 8007586:	2200      	movs	r2, #0
 8007588:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f000 f82b 	bl	80075e8 <I2C_WaitOnFlagUntilTimeout>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00d      	beq.n	80075b4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075a6:	d103      	bne.n	80075b0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e013      	b.n	80075dc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80075b4:	897b      	ldrh	r3, [r7, #10]
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	f043 0301 	orr.w	r3, r3, #1
 80075bc:	b2da      	uxtb	r2, r3
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80075c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c6:	6a3a      	ldr	r2, [r7, #32]
 80075c8:	4906      	ldr	r1, [pc, #24]	; (80075e4 <I2C_RequestMemoryRead+0x1cc>)
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f000 f863 	bl	8007696 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80075d0:	4603      	mov	r3, r0
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d001      	beq.n	80075da <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80075d6:	2301      	movs	r3, #1
 80075d8:	e000      	b.n	80075dc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3718      	adds	r7, #24
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	00010002 	.word	0x00010002

080075e8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80075e8:	b580      	push	{r7, lr}
 80075ea:	b084      	sub	sp, #16
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	60f8      	str	r0, [r7, #12]
 80075f0:	60b9      	str	r1, [r7, #8]
 80075f2:	603b      	str	r3, [r7, #0]
 80075f4:	4613      	mov	r3, r2
 80075f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80075f8:	e025      	b.n	8007646 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007600:	d021      	beq.n	8007646 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007602:	f7fe fc63 	bl	8005ecc <HAL_GetTick>
 8007606:	4602      	mov	r2, r0
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	1ad3      	subs	r3, r2, r3
 800760c:	683a      	ldr	r2, [r7, #0]
 800760e:	429a      	cmp	r2, r3
 8007610:	d302      	bcc.n	8007618 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007612:	683b      	ldr	r3, [r7, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d116      	bne.n	8007646 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2200      	movs	r2, #0
 800761c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2220      	movs	r2, #32
 8007622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007632:	f043 0220 	orr.w	r2, r3, #32
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e023      	b.n	800768e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	0c1b      	lsrs	r3, r3, #16
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b01      	cmp	r3, #1
 800764e:	d10d      	bne.n	800766c <I2C_WaitOnFlagUntilTimeout+0x84>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	695b      	ldr	r3, [r3, #20]
 8007656:	43da      	mvns	r2, r3
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	4013      	ands	r3, r2
 800765c:	b29b      	uxth	r3, r3
 800765e:	2b00      	cmp	r3, #0
 8007660:	bf0c      	ite	eq
 8007662:	2301      	moveq	r3, #1
 8007664:	2300      	movne	r3, #0
 8007666:	b2db      	uxtb	r3, r3
 8007668:	461a      	mov	r2, r3
 800766a:	e00c      	b.n	8007686 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	43da      	mvns	r2, r3
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	4013      	ands	r3, r2
 8007678:	b29b      	uxth	r3, r3
 800767a:	2b00      	cmp	r3, #0
 800767c:	bf0c      	ite	eq
 800767e:	2301      	moveq	r3, #1
 8007680:	2300      	movne	r3, #0
 8007682:	b2db      	uxtb	r3, r3
 8007684:	461a      	mov	r2, r3
 8007686:	79fb      	ldrb	r3, [r7, #7]
 8007688:	429a      	cmp	r2, r3
 800768a:	d0b6      	beq.n	80075fa <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800768c:	2300      	movs	r3, #0
}
 800768e:	4618      	mov	r0, r3
 8007690:	3710      	adds	r7, #16
 8007692:	46bd      	mov	sp, r7
 8007694:	bd80      	pop	{r7, pc}

08007696 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b084      	sub	sp, #16
 800769a:	af00      	add	r7, sp, #0
 800769c:	60f8      	str	r0, [r7, #12]
 800769e:	60b9      	str	r1, [r7, #8]
 80076a0:	607a      	str	r2, [r7, #4]
 80076a2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80076a4:	e051      	b.n	800774a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076b4:	d123      	bne.n	80076fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80076c4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80076ce:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2220      	movs	r2, #32
 80076da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ea:	f043 0204 	orr.w	r2, r3, #4
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80076fa:	2301      	movs	r3, #1
 80076fc:	e046      	b.n	800778c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007704:	d021      	beq.n	800774a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007706:	f7fe fbe1 	bl	8005ecc <HAL_GetTick>
 800770a:	4602      	mov	r2, r0
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	1ad3      	subs	r3, r2, r3
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	429a      	cmp	r2, r3
 8007714:	d302      	bcc.n	800771c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d116      	bne.n	800774a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2220      	movs	r2, #32
 8007726:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007736:	f043 0220 	orr.w	r2, r3, #32
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e020      	b.n	800778c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	0c1b      	lsrs	r3, r3, #16
 800774e:	b2db      	uxtb	r3, r3
 8007750:	2b01      	cmp	r3, #1
 8007752:	d10c      	bne.n	800776e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	695b      	ldr	r3, [r3, #20]
 800775a:	43da      	mvns	r2, r3
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	4013      	ands	r3, r2
 8007760:	b29b      	uxth	r3, r3
 8007762:	2b00      	cmp	r3, #0
 8007764:	bf14      	ite	ne
 8007766:	2301      	movne	r3, #1
 8007768:	2300      	moveq	r3, #0
 800776a:	b2db      	uxtb	r3, r3
 800776c:	e00b      	b.n	8007786 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	699b      	ldr	r3, [r3, #24]
 8007774:	43da      	mvns	r2, r3
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	4013      	ands	r3, r2
 800777a:	b29b      	uxth	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	bf14      	ite	ne
 8007780:	2301      	movne	r3, #1
 8007782:	2300      	moveq	r3, #0
 8007784:	b2db      	uxtb	r3, r3
 8007786:	2b00      	cmp	r3, #0
 8007788:	d18d      	bne.n	80076a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800778a:	2300      	movs	r3, #0
}
 800778c:	4618      	mov	r0, r3
 800778e:	3710      	adds	r7, #16
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}

08007794 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b084      	sub	sp, #16
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077a0:	e02d      	b.n	80077fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80077a2:	68f8      	ldr	r0, [r7, #12]
 80077a4:	f000 f8ce 	bl	8007944 <I2C_IsAcknowledgeFailed>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	e02d      	b.n	800780e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077b8:	d021      	beq.n	80077fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077ba:	f7fe fb87 	bl	8005ecc <HAL_GetTick>
 80077be:	4602      	mov	r2, r0
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	1ad3      	subs	r3, r2, r3
 80077c4:	68ba      	ldr	r2, [r7, #8]
 80077c6:	429a      	cmp	r2, r3
 80077c8:	d302      	bcc.n	80077d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d116      	bne.n	80077fe <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	2200      	movs	r2, #0
 80077d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2220      	movs	r2, #32
 80077da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2200      	movs	r2, #0
 80077e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ea:	f043 0220 	orr.w	r2, r3, #32
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e007      	b.n	800780e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	695b      	ldr	r3, [r3, #20]
 8007804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007808:	2b80      	cmp	r3, #128	; 0x80
 800780a:	d1ca      	bne.n	80077a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3710      	adds	r7, #16
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b084      	sub	sp, #16
 800781a:	af00      	add	r7, sp, #0
 800781c:	60f8      	str	r0, [r7, #12]
 800781e:	60b9      	str	r1, [r7, #8]
 8007820:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007822:	e02d      	b.n	8007880 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f000 f88d 	bl	8007944 <I2C_IsAcknowledgeFailed>
 800782a:	4603      	mov	r3, r0
 800782c:	2b00      	cmp	r3, #0
 800782e:	d001      	beq.n	8007834 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e02d      	b.n	8007890 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007834:	68bb      	ldr	r3, [r7, #8]
 8007836:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800783a:	d021      	beq.n	8007880 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800783c:	f7fe fb46 	bl	8005ecc <HAL_GetTick>
 8007840:	4602      	mov	r2, r0
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	1ad3      	subs	r3, r2, r3
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	429a      	cmp	r2, r3
 800784a:	d302      	bcc.n	8007852 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d116      	bne.n	8007880 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2200      	movs	r2, #0
 8007856:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2220      	movs	r2, #32
 800785c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	2200      	movs	r2, #0
 8007864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786c:	f043 0220 	orr.w	r2, r3, #32
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e007      	b.n	8007890 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	f003 0304 	and.w	r3, r3, #4
 800788a:	2b04      	cmp	r3, #4
 800788c:	d1ca      	bne.n	8007824 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3710      	adds	r7, #16
 8007894:	46bd      	mov	sp, r7
 8007896:	bd80      	pop	{r7, pc}

08007898 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	60f8      	str	r0, [r7, #12]
 80078a0:	60b9      	str	r1, [r7, #8]
 80078a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80078a4:	e042      	b.n	800792c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	695b      	ldr	r3, [r3, #20]
 80078ac:	f003 0310 	and.w	r3, r3, #16
 80078b0:	2b10      	cmp	r3, #16
 80078b2:	d119      	bne.n	80078e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f06f 0210 	mvn.w	r2, #16
 80078bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2220      	movs	r2, #32
 80078c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e029      	b.n	800793c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078e8:	f7fe faf0 	bl	8005ecc <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	68ba      	ldr	r2, [r7, #8]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d302      	bcc.n	80078fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d116      	bne.n	800792c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2220      	movs	r2, #32
 8007908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2200      	movs	r2, #0
 8007910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007918:	f043 0220 	orr.w	r2, r3, #32
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2200      	movs	r2, #0
 8007924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007928:	2301      	movs	r3, #1
 800792a:	e007      	b.n	800793c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007936:	2b40      	cmp	r3, #64	; 0x40
 8007938:	d1b5      	bne.n	80078a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800793a:	2300      	movs	r3, #0
}
 800793c:	4618      	mov	r0, r3
 800793e:	3710      	adds	r7, #16
 8007940:	46bd      	mov	sp, r7
 8007942:	bd80      	pop	{r7, pc}

08007944 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	695b      	ldr	r3, [r3, #20]
 8007952:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007956:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800795a:	d11b      	bne.n	8007994 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007964:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2200      	movs	r2, #0
 800796a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2220      	movs	r2, #32
 8007970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007980:	f043 0204 	orr.w	r2, r3, #4
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e000      	b.n	8007996 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	370c      	adds	r7, #12
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr

080079a2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80079a2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80079a4:	b08f      	sub	sp, #60	; 0x3c
 80079a6:	af0a      	add	r7, sp, #40	; 0x28
 80079a8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d101      	bne.n	80079b4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e10f      	b.n	8007bd4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d106      	bne.n	80079d4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f00e fa16 	bl	8015e00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2203      	movs	r2, #3
 80079d8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d102      	bne.n	80079ee <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f003 fdaf 	bl	800b556 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	603b      	str	r3, [r7, #0]
 80079fe:	687e      	ldr	r6, [r7, #4]
 8007a00:	466d      	mov	r5, sp
 8007a02:	f106 0410 	add.w	r4, r6, #16
 8007a06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007a0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007a0e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007a12:	e885 0003 	stmia.w	r5, {r0, r1}
 8007a16:	1d33      	adds	r3, r6, #4
 8007a18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a1a:	6838      	ldr	r0, [r7, #0]
 8007a1c:	f003 fc86 	bl	800b32c <USB_CoreInit>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d005      	beq.n	8007a32 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2202      	movs	r2, #2
 8007a2a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e0d0      	b.n	8007bd4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	2100      	movs	r1, #0
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f003 fd9d 	bl	800b578 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007a3e:	2300      	movs	r3, #0
 8007a40:	73fb      	strb	r3, [r7, #15]
 8007a42:	e04a      	b.n	8007ada <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007a44:	7bfa      	ldrb	r2, [r7, #15]
 8007a46:	6879      	ldr	r1, [r7, #4]
 8007a48:	4613      	mov	r3, r2
 8007a4a:	00db      	lsls	r3, r3, #3
 8007a4c:	1a9b      	subs	r3, r3, r2
 8007a4e:	009b      	lsls	r3, r3, #2
 8007a50:	440b      	add	r3, r1
 8007a52:	333d      	adds	r3, #61	; 0x3d
 8007a54:	2201      	movs	r2, #1
 8007a56:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007a58:	7bfa      	ldrb	r2, [r7, #15]
 8007a5a:	6879      	ldr	r1, [r7, #4]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	00db      	lsls	r3, r3, #3
 8007a60:	1a9b      	subs	r3, r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	440b      	add	r3, r1
 8007a66:	333c      	adds	r3, #60	; 0x3c
 8007a68:	7bfa      	ldrb	r2, [r7, #15]
 8007a6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007a6c:	7bfa      	ldrb	r2, [r7, #15]
 8007a6e:	7bfb      	ldrb	r3, [r7, #15]
 8007a70:	b298      	uxth	r0, r3
 8007a72:	6879      	ldr	r1, [r7, #4]
 8007a74:	4613      	mov	r3, r2
 8007a76:	00db      	lsls	r3, r3, #3
 8007a78:	1a9b      	subs	r3, r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	440b      	add	r3, r1
 8007a7e:	3342      	adds	r3, #66	; 0x42
 8007a80:	4602      	mov	r2, r0
 8007a82:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007a84:	7bfa      	ldrb	r2, [r7, #15]
 8007a86:	6879      	ldr	r1, [r7, #4]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	00db      	lsls	r3, r3, #3
 8007a8c:	1a9b      	subs	r3, r3, r2
 8007a8e:	009b      	lsls	r3, r3, #2
 8007a90:	440b      	add	r3, r1
 8007a92:	333f      	adds	r3, #63	; 0x3f
 8007a94:	2200      	movs	r2, #0
 8007a96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007a98:	7bfa      	ldrb	r2, [r7, #15]
 8007a9a:	6879      	ldr	r1, [r7, #4]
 8007a9c:	4613      	mov	r3, r2
 8007a9e:	00db      	lsls	r3, r3, #3
 8007aa0:	1a9b      	subs	r3, r3, r2
 8007aa2:	009b      	lsls	r3, r3, #2
 8007aa4:	440b      	add	r3, r1
 8007aa6:	3344      	adds	r3, #68	; 0x44
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007aac:	7bfa      	ldrb	r2, [r7, #15]
 8007aae:	6879      	ldr	r1, [r7, #4]
 8007ab0:	4613      	mov	r3, r2
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	1a9b      	subs	r3, r3, r2
 8007ab6:	009b      	lsls	r3, r3, #2
 8007ab8:	440b      	add	r3, r1
 8007aba:	3348      	adds	r3, #72	; 0x48
 8007abc:	2200      	movs	r2, #0
 8007abe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007ac0:	7bfa      	ldrb	r2, [r7, #15]
 8007ac2:	6879      	ldr	r1, [r7, #4]
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	00db      	lsls	r3, r3, #3
 8007ac8:	1a9b      	subs	r3, r3, r2
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	440b      	add	r3, r1
 8007ace:	3350      	adds	r3, #80	; 0x50
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ad4:	7bfb      	ldrb	r3, [r7, #15]
 8007ad6:	3301      	adds	r3, #1
 8007ad8:	73fb      	strb	r3, [r7, #15]
 8007ada:	7bfa      	ldrb	r2, [r7, #15]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d3af      	bcc.n	8007a44 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	73fb      	strb	r3, [r7, #15]
 8007ae8:	e044      	b.n	8007b74 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007aea:	7bfa      	ldrb	r2, [r7, #15]
 8007aec:	6879      	ldr	r1, [r7, #4]
 8007aee:	4613      	mov	r3, r2
 8007af0:	00db      	lsls	r3, r3, #3
 8007af2:	1a9b      	subs	r3, r3, r2
 8007af4:	009b      	lsls	r3, r3, #2
 8007af6:	440b      	add	r3, r1
 8007af8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007afc:	2200      	movs	r2, #0
 8007afe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007b00:	7bfa      	ldrb	r2, [r7, #15]
 8007b02:	6879      	ldr	r1, [r7, #4]
 8007b04:	4613      	mov	r3, r2
 8007b06:	00db      	lsls	r3, r3, #3
 8007b08:	1a9b      	subs	r3, r3, r2
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	440b      	add	r3, r1
 8007b0e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007b12:	7bfa      	ldrb	r2, [r7, #15]
 8007b14:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007b16:	7bfa      	ldrb	r2, [r7, #15]
 8007b18:	6879      	ldr	r1, [r7, #4]
 8007b1a:	4613      	mov	r3, r2
 8007b1c:	00db      	lsls	r3, r3, #3
 8007b1e:	1a9b      	subs	r3, r3, r2
 8007b20:	009b      	lsls	r3, r3, #2
 8007b22:	440b      	add	r3, r1
 8007b24:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007b28:	2200      	movs	r2, #0
 8007b2a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007b2c:	7bfa      	ldrb	r2, [r7, #15]
 8007b2e:	6879      	ldr	r1, [r7, #4]
 8007b30:	4613      	mov	r3, r2
 8007b32:	00db      	lsls	r3, r3, #3
 8007b34:	1a9b      	subs	r3, r3, r2
 8007b36:	009b      	lsls	r3, r3, #2
 8007b38:	440b      	add	r3, r1
 8007b3a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007b3e:	2200      	movs	r2, #0
 8007b40:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007b42:	7bfa      	ldrb	r2, [r7, #15]
 8007b44:	6879      	ldr	r1, [r7, #4]
 8007b46:	4613      	mov	r3, r2
 8007b48:	00db      	lsls	r3, r3, #3
 8007b4a:	1a9b      	subs	r3, r3, r2
 8007b4c:	009b      	lsls	r3, r3, #2
 8007b4e:	440b      	add	r3, r1
 8007b50:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007b54:	2200      	movs	r2, #0
 8007b56:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007b58:	7bfa      	ldrb	r2, [r7, #15]
 8007b5a:	6879      	ldr	r1, [r7, #4]
 8007b5c:	4613      	mov	r3, r2
 8007b5e:	00db      	lsls	r3, r3, #3
 8007b60:	1a9b      	subs	r3, r3, r2
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	440b      	add	r3, r1
 8007b66:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007b6e:	7bfb      	ldrb	r3, [r7, #15]
 8007b70:	3301      	adds	r3, #1
 8007b72:	73fb      	strb	r3, [r7, #15]
 8007b74:	7bfa      	ldrb	r2, [r7, #15]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	d3b5      	bcc.n	8007aea <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	603b      	str	r3, [r7, #0]
 8007b84:	687e      	ldr	r6, [r7, #4]
 8007b86:	466d      	mov	r5, sp
 8007b88:	f106 0410 	add.w	r4, r6, #16
 8007b8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007b92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007b94:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007b98:	e885 0003 	stmia.w	r5, {r0, r1}
 8007b9c:	1d33      	adds	r3, r6, #4
 8007b9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ba0:	6838      	ldr	r0, [r7, #0]
 8007ba2:	f003 fd35 	bl	800b610 <USB_DevInit>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d005      	beq.n	8007bb8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2202      	movs	r2, #2
 8007bb0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e00d      	b.n	8007bd4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2200      	movs	r2, #0
 8007bbc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2201      	movs	r2, #1
 8007bc4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f004 fdb1 	bl	800c734 <USB_DevDisconnect>

  return HAL_OK;
 8007bd2:	2300      	movs	r3, #0
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3714      	adds	r7, #20
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007bdc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d101      	bne.n	8007bf8 <HAL_PCD_Start+0x1c>
 8007bf4:	2302      	movs	r3, #2
 8007bf6:	e020      	b.n	8007c3a <HAL_PCD_Start+0x5e>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2201      	movs	r2, #1
 8007bfc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d109      	bne.n	8007c1c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d005      	beq.n	8007c1c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c14:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4618      	mov	r0, r3
 8007c22:	f003 fc87 	bl	800b534 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f004 fd61 	bl	800c6f2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007c38:	2300      	movs	r3, #0
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3710      	adds	r7, #16
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8007c42:	b590      	push	{r4, r7, lr}
 8007c44:	b08d      	sub	sp, #52	; 0x34
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c50:	6a3b      	ldr	r3, [r7, #32]
 8007c52:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f004 fe1f 	bl	800c89c <USB_GetMode>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f040 839d 	bne.w	80083a0 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f004 fd83 	bl	800c776 <USB_ReadInterrupts>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	f000 8393 	beq.w	800839e <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f004 fd7a 	bl	800c776 <USB_ReadInterrupts>
 8007c82:	4603      	mov	r3, r0
 8007c84:	f003 0302 	and.w	r3, r3, #2
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d107      	bne.n	8007c9c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	695a      	ldr	r2, [r3, #20]
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f002 0202 	and.w	r2, r2, #2
 8007c9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f004 fd68 	bl	800c776 <USB_ReadInterrupts>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	f003 0310 	and.w	r3, r3, #16
 8007cac:	2b10      	cmp	r3, #16
 8007cae:	d161      	bne.n	8007d74 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	699a      	ldr	r2, [r3, #24]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f022 0210 	bic.w	r2, r2, #16
 8007cbe:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8007cc0:	6a3b      	ldr	r3, [r7, #32]
 8007cc2:	6a1b      	ldr	r3, [r3, #32]
 8007cc4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	f003 020f 	and.w	r2, r3, #15
 8007ccc:	4613      	mov	r3, r2
 8007cce:	00db      	lsls	r3, r3, #3
 8007cd0:	1a9b      	subs	r3, r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	4413      	add	r3, r2
 8007cdc:	3304      	adds	r3, #4
 8007cde:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	0c5b      	lsrs	r3, r3, #17
 8007ce4:	f003 030f 	and.w	r3, r3, #15
 8007ce8:	2b02      	cmp	r3, #2
 8007cea:	d124      	bne.n	8007d36 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8007cec:	69ba      	ldr	r2, [r7, #24]
 8007cee:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8007cf2:	4013      	ands	r3, r2
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d035      	beq.n	8007d64 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8007cfc:	69bb      	ldr	r3, [r7, #24]
 8007cfe:	091b      	lsrs	r3, r3, #4
 8007d00:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8007d02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d06:	b29b      	uxth	r3, r3
 8007d08:	461a      	mov	r2, r3
 8007d0a:	6a38      	ldr	r0, [r7, #32]
 8007d0c:	f004 fb9f 	bl	800c44e <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	68da      	ldr	r2, [r3, #12]
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	091b      	lsrs	r3, r3, #4
 8007d18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d1c:	441a      	add	r2, r3
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	699a      	ldr	r2, [r3, #24]
 8007d26:	69bb      	ldr	r3, [r7, #24]
 8007d28:	091b      	lsrs	r3, r3, #4
 8007d2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d2e:	441a      	add	r2, r3
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	619a      	str	r2, [r3, #24]
 8007d34:	e016      	b.n	8007d64 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	0c5b      	lsrs	r3, r3, #17
 8007d3a:	f003 030f 	and.w	r3, r3, #15
 8007d3e:	2b06      	cmp	r3, #6
 8007d40:	d110      	bne.n	8007d64 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007d48:	2208      	movs	r2, #8
 8007d4a:	4619      	mov	r1, r3
 8007d4c:	6a38      	ldr	r0, [r7, #32]
 8007d4e:	f004 fb7e 	bl	800c44e <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	699a      	ldr	r2, [r3, #24]
 8007d56:	69bb      	ldr	r3, [r7, #24]
 8007d58:	091b      	lsrs	r3, r3, #4
 8007d5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007d5e:	441a      	add	r2, r3
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	699a      	ldr	r2, [r3, #24]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f042 0210 	orr.w	r2, r2, #16
 8007d72:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f004 fcfc 	bl	800c776 <USB_ReadInterrupts>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d84:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007d88:	d16e      	bne.n	8007e68 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f004 fd02 	bl	800c79c <USB_ReadDevAllOutEpInterrupt>
 8007d98:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8007d9a:	e062      	b.n	8007e62 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8007d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d9e:	f003 0301 	and.w	r3, r3, #1
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d057      	beq.n	8007e56 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dac:	b2d2      	uxtb	r2, r2
 8007dae:	4611      	mov	r1, r2
 8007db0:	4618      	mov	r0, r3
 8007db2:	f004 fd27 	bl	800c804 <USB_ReadDevOutEPInterrupt>
 8007db6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	f003 0301 	and.w	r3, r3, #1
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d00c      	beq.n	8007ddc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc4:	015a      	lsls	r2, r3, #5
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	4413      	add	r3, r2
 8007dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dce:	461a      	mov	r2, r3
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007dd4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 fdb0 	bl	800893c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	f003 0308 	and.w	r3, r3, #8
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d00c      	beq.n	8007e00 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8007de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de8:	015a      	lsls	r2, r3, #5
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	4413      	add	r3, r2
 8007dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007df2:	461a      	mov	r2, r3
 8007df4:	2308      	movs	r3, #8
 8007df6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8007df8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 feaa 	bl	8008b54 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	f003 0310 	and.w	r3, r3, #16
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d008      	beq.n	8007e1c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0c:	015a      	lsls	r2, r3, #5
 8007e0e:	69fb      	ldr	r3, [r7, #28]
 8007e10:	4413      	add	r3, r2
 8007e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e16:	461a      	mov	r2, r3
 8007e18:	2310      	movs	r3, #16
 8007e1a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	f003 0320 	and.w	r3, r3, #32
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d008      	beq.n	8007e38 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e28:	015a      	lsls	r2, r3, #5
 8007e2a:	69fb      	ldr	r3, [r7, #28]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e32:	461a      	mov	r2, r3
 8007e34:	2320      	movs	r3, #32
 8007e36:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d009      	beq.n	8007e56 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e44:	015a      	lsls	r2, r3, #5
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	4413      	add	r3, r2
 8007e4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e4e:	461a      	mov	r2, r3
 8007e50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e54:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8007e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e58:	3301      	adds	r3, #1
 8007e5a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e5e:	085b      	lsrs	r3, r3, #1
 8007e60:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d199      	bne.n	8007d9c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f004 fc82 	bl	800c776 <USB_ReadInterrupts>
 8007e72:	4603      	mov	r3, r0
 8007e74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e78:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e7c:	f040 80c0 	bne.w	8008000 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4618      	mov	r0, r3
 8007e86:	f004 fca3 	bl	800c7d0 <USB_ReadDevAllInEpInterrupt>
 8007e8a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8007e90:	e0b2      	b.n	8007ff8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8007e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e94:	f003 0301 	and.w	r3, r3, #1
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f000 80a7 	beq.w	8007fec <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ea4:	b2d2      	uxtb	r2, r2
 8007ea6:	4611      	mov	r1, r2
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	f004 fcc9 	bl	800c840 <USB_ReadDevInEPInterrupt>
 8007eae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	f003 0301 	and.w	r3, r3, #1
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d057      	beq.n	8007f6a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ebc:	f003 030f 	and.w	r3, r3, #15
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ec6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ece:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	43db      	mvns	r3, r3
 8007ed4:	69f9      	ldr	r1, [r7, #28]
 8007ed6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007eda:	4013      	ands	r3, r2
 8007edc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	015a      	lsls	r2, r3, #5
 8007ee2:	69fb      	ldr	r3, [r7, #28]
 8007ee4:	4413      	add	r3, r2
 8007ee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eea:	461a      	mov	r2, r3
 8007eec:	2301      	movs	r3, #1
 8007eee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	d132      	bne.n	8007f5e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8007ef8:	6879      	ldr	r1, [r7, #4]
 8007efa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007efc:	4613      	mov	r3, r2
 8007efe:	00db      	lsls	r3, r3, #3
 8007f00:	1a9b      	subs	r3, r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	440b      	add	r3, r1
 8007f06:	3348      	adds	r3, #72	; 0x48
 8007f08:	6819      	ldr	r1, [r3, #0]
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f0e:	4613      	mov	r3, r2
 8007f10:	00db      	lsls	r3, r3, #3
 8007f12:	1a9b      	subs	r3, r3, r2
 8007f14:	009b      	lsls	r3, r3, #2
 8007f16:	4403      	add	r3, r0
 8007f18:	3344      	adds	r3, #68	; 0x44
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	4419      	add	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f22:	4613      	mov	r3, r2
 8007f24:	00db      	lsls	r3, r3, #3
 8007f26:	1a9b      	subs	r3, r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4403      	add	r3, r0
 8007f2c:	3348      	adds	r3, #72	; 0x48
 8007f2e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d113      	bne.n	8007f5e <HAL_PCD_IRQHandler+0x31c>
 8007f36:	6879      	ldr	r1, [r7, #4]
 8007f38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f3a:	4613      	mov	r3, r2
 8007f3c:	00db      	lsls	r3, r3, #3
 8007f3e:	1a9b      	subs	r3, r3, r2
 8007f40:	009b      	lsls	r3, r3, #2
 8007f42:	440b      	add	r3, r1
 8007f44:	3350      	adds	r3, #80	; 0x50
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d108      	bne.n	8007f5e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6818      	ldr	r0, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007f56:	461a      	mov	r2, r3
 8007f58:	2101      	movs	r1, #1
 8007f5a:	f004 fcd1 	bl	800c900 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	b2db      	uxtb	r3, r3
 8007f62:	4619      	mov	r1, r3
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f00d ffda 	bl	8015f1e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	f003 0308 	and.w	r3, r3, #8
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d008      	beq.n	8007f86 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	015a      	lsls	r2, r3, #5
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	4413      	add	r3, r2
 8007f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f80:	461a      	mov	r2, r3
 8007f82:	2308      	movs	r3, #8
 8007f84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8007f86:	693b      	ldr	r3, [r7, #16]
 8007f88:	f003 0310 	and.w	r3, r3, #16
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d008      	beq.n	8007fa2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8007f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f92:	015a      	lsls	r2, r3, #5
 8007f94:	69fb      	ldr	r3, [r7, #28]
 8007f96:	4413      	add	r3, r2
 8007f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	2310      	movs	r3, #16
 8007fa0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d008      	beq.n	8007fbe <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8007fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fae:	015a      	lsls	r2, r3, #5
 8007fb0:	69fb      	ldr	r3, [r7, #28]
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb8:	461a      	mov	r2, r3
 8007fba:	2340      	movs	r3, #64	; 0x40
 8007fbc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	f003 0302 	and.w	r3, r3, #2
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d008      	beq.n	8007fda <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8007fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fca:	015a      	lsls	r2, r3, #5
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	4413      	add	r3, r2
 8007fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	2302      	movs	r3, #2
 8007fd8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d003      	beq.n	8007fec <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007fe4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fc1b 	bl	8008822 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fee:	3301      	adds	r3, #1
 8007ff0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff4:	085b      	lsrs	r3, r3, #1
 8007ff6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8007ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	f47f af49 	bne.w	8007e92 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4618      	mov	r0, r3
 8008006:	f004 fbb6 	bl	800c776 <USB_ReadInterrupts>
 800800a:	4603      	mov	r3, r0
 800800c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008010:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008014:	d122      	bne.n	800805c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008016:	69fb      	ldr	r3, [r7, #28]
 8008018:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	69fa      	ldr	r2, [r7, #28]
 8008020:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008024:	f023 0301 	bic.w	r3, r3, #1
 8008028:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008030:	2b01      	cmp	r3, #1
 8008032:	d108      	bne.n	8008046 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2200      	movs	r2, #0
 8008038:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800803c:	2100      	movs	r1, #0
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fe26 	bl	8008c90 <HAL_PCDEx_LPM_Callback>
 8008044:	e002      	b.n	800804c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f00d ffe0 	bl	801600c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	695a      	ldr	r2, [r3, #20]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800805a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4618      	mov	r0, r3
 8008062:	f004 fb88 	bl	800c776 <USB_ReadInterrupts>
 8008066:	4603      	mov	r3, r0
 8008068:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800806c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008070:	d112      	bne.n	8008098 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	f003 0301 	and.w	r3, r3, #1
 800807e:	2b01      	cmp	r3, #1
 8008080:	d102      	bne.n	8008088 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008082:	6878      	ldr	r0, [r7, #4]
 8008084:	f00d ff9c 	bl	8015fc0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	695a      	ldr	r2, [r3, #20]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008096:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4618      	mov	r0, r3
 800809e:	f004 fb6a 	bl	800c776 <USB_ReadInterrupts>
 80080a2:	4603      	mov	r3, r0
 80080a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80080a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ac:	f040 80c7 	bne.w	800823e <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	69fa      	ldr	r2, [r7, #28]
 80080ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80080be:	f023 0301 	bic.w	r3, r3, #1
 80080c2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2110      	movs	r1, #16
 80080ca:	4618      	mov	r0, r3
 80080cc:	f003 fc04 	bl	800b8d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80080d0:	2300      	movs	r3, #0
 80080d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80080d4:	e056      	b.n	8008184 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80080d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080d8:	015a      	lsls	r2, r3, #5
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	4413      	add	r3, r2
 80080de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080e2:	461a      	mov	r2, r3
 80080e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80080e8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80080ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ec:	015a      	lsls	r2, r3, #5
 80080ee:	69fb      	ldr	r3, [r7, #28]
 80080f0:	4413      	add	r3, r2
 80080f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080fa:	0151      	lsls	r1, r2, #5
 80080fc:	69fa      	ldr	r2, [r7, #28]
 80080fe:	440a      	add	r2, r1
 8008100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008104:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008108:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800810a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810c:	015a      	lsls	r2, r3, #5
 800810e:	69fb      	ldr	r3, [r7, #28]
 8008110:	4413      	add	r3, r2
 8008112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800811a:	0151      	lsls	r1, r2, #5
 800811c:	69fa      	ldr	r2, [r7, #28]
 800811e:	440a      	add	r2, r1
 8008120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008124:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008128:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800812a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800812c:	015a      	lsls	r2, r3, #5
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	4413      	add	r3, r2
 8008132:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008136:	461a      	mov	r2, r3
 8008138:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800813c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800813e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008140:	015a      	lsls	r2, r3, #5
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	4413      	add	r3, r2
 8008146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800814e:	0151      	lsls	r1, r2, #5
 8008150:	69fa      	ldr	r2, [r7, #28]
 8008152:	440a      	add	r2, r1
 8008154:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008158:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800815c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800815e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008160:	015a      	lsls	r2, r3, #5
 8008162:	69fb      	ldr	r3, [r7, #28]
 8008164:	4413      	add	r3, r2
 8008166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800816e:	0151      	lsls	r1, r2, #5
 8008170:	69fa      	ldr	r2, [r7, #28]
 8008172:	440a      	add	r2, r1
 8008174:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008178:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800817c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800817e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008180:	3301      	adds	r3, #1
 8008182:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	685b      	ldr	r3, [r3, #4]
 8008188:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800818a:	429a      	cmp	r2, r3
 800818c:	d3a3      	bcc.n	80080d6 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008194:	69db      	ldr	r3, [r3, #28]
 8008196:	69fa      	ldr	r2, [r7, #28]
 8008198:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800819c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80081a0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d016      	beq.n	80081d8 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081b4:	69fa      	ldr	r2, [r7, #28]
 80081b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081ba:	f043 030b 	orr.w	r3, r3, #11
 80081be:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80081c2:	69fb      	ldr	r3, [r7, #28]
 80081c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081ca:	69fa      	ldr	r2, [r7, #28]
 80081cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081d0:	f043 030b 	orr.w	r3, r3, #11
 80081d4:	6453      	str	r3, [r2, #68]	; 0x44
 80081d6:	e015      	b.n	8008204 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081de:	695b      	ldr	r3, [r3, #20]
 80081e0:	69fa      	ldr	r2, [r7, #28]
 80081e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081e6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80081ea:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80081ee:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80081f0:	69fb      	ldr	r3, [r7, #28]
 80081f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081f6:	691b      	ldr	r3, [r3, #16]
 80081f8:	69fa      	ldr	r2, [r7, #28]
 80081fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081fe:	f043 030b 	orr.w	r3, r3, #11
 8008202:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008204:	69fb      	ldr	r3, [r7, #28]
 8008206:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	69fa      	ldr	r2, [r7, #28]
 800820e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008212:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008216:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	6818      	ldr	r0, [r3, #0]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	691b      	ldr	r3, [r3, #16]
 8008220:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008228:	461a      	mov	r2, r3
 800822a:	f004 fb69 	bl	800c900 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	695a      	ldr	r2, [r3, #20]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800823c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4618      	mov	r0, r3
 8008244:	f004 fa97 	bl	800c776 <USB_ReadInterrupts>
 8008248:	4603      	mov	r3, r0
 800824a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800824e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008252:	d124      	bne.n	800829e <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4618      	mov	r0, r3
 800825a:	f004 fb2d 	bl	800c8b8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4618      	mov	r0, r3
 8008264:	f003 fb95 	bl	800b992 <USB_GetDevSpeed>
 8008268:	4603      	mov	r3, r0
 800826a:	461a      	mov	r2, r3
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681c      	ldr	r4, [r3, #0]
 8008274:	f001 f958 	bl	8009528 <HAL_RCC_GetHCLKFreq>
 8008278:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800827e:	b2db      	uxtb	r3, r3
 8008280:	461a      	mov	r2, r3
 8008282:	4620      	mov	r0, r4
 8008284:	f003 f8b4 	bl	800b3f0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f00d fe70 	bl	8015f6e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	695a      	ldr	r2, [r3, #20]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800829c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4618      	mov	r0, r3
 80082a4:	f004 fa67 	bl	800c776 <USB_ReadInterrupts>
 80082a8:	4603      	mov	r3, r0
 80082aa:	f003 0308 	and.w	r3, r3, #8
 80082ae:	2b08      	cmp	r3, #8
 80082b0:	d10a      	bne.n	80082c8 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f00d fe4d 	bl	8015f52 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	695a      	ldr	r2, [r3, #20]
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f002 0208 	and.w	r2, r2, #8
 80082c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4618      	mov	r0, r3
 80082ce:	f004 fa52 	bl	800c776 <USB_ReadInterrupts>
 80082d2:	4603      	mov	r3, r0
 80082d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80082d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082dc:	d10f      	bne.n	80082fe <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80082de:	2300      	movs	r3, #0
 80082e0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80082e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	4619      	mov	r1, r3
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f00d feaf 	bl	801604c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	695a      	ldr	r2, [r3, #20]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80082fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4618      	mov	r0, r3
 8008304:	f004 fa37 	bl	800c776 <USB_ReadInterrupts>
 8008308:	4603      	mov	r3, r0
 800830a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800830e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008312:	d10f      	bne.n	8008334 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008314:	2300      	movs	r3, #0
 8008316:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831a:	b2db      	uxtb	r3, r3
 800831c:	4619      	mov	r1, r3
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f00d fe82 	bl	8016028 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	695a      	ldr	r2, [r3, #20]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008332:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4618      	mov	r0, r3
 800833a:	f004 fa1c 	bl	800c776 <USB_ReadInterrupts>
 800833e:	4603      	mov	r3, r0
 8008340:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008344:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008348:	d10a      	bne.n	8008360 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f00d fe90 	bl	8016070 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	695a      	ldr	r2, [r3, #20]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800835e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	4618      	mov	r0, r3
 8008366:	f004 fa06 	bl	800c776 <USB_ReadInterrupts>
 800836a:	4603      	mov	r3, r0
 800836c:	f003 0304 	and.w	r3, r3, #4
 8008370:	2b04      	cmp	r3, #4
 8008372:	d115      	bne.n	80083a0 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800837c:	69bb      	ldr	r3, [r7, #24]
 800837e:	f003 0304 	and.w	r3, r3, #4
 8008382:	2b00      	cmp	r3, #0
 8008384:	d002      	beq.n	800838c <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f00d fe80 	bl	801608c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	6859      	ldr	r1, [r3, #4]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	69ba      	ldr	r2, [r7, #24]
 8008398:	430a      	orrs	r2, r1
 800839a:	605a      	str	r2, [r3, #4]
 800839c:	e000      	b.n	80083a0 <HAL_PCD_IRQHandler+0x75e>
      return;
 800839e:	bf00      	nop
    }
  }
}
 80083a0:	3734      	adds	r7, #52	; 0x34
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd90      	pop	{r4, r7, pc}

080083a6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b082      	sub	sp, #8
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	6078      	str	r0, [r7, #4]
 80083ae:	460b      	mov	r3, r1
 80083b0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80083b8:	2b01      	cmp	r3, #1
 80083ba:	d101      	bne.n	80083c0 <HAL_PCD_SetAddress+0x1a>
 80083bc:	2302      	movs	r3, #2
 80083be:	e013      	b.n	80083e8 <HAL_PCD_SetAddress+0x42>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	78fa      	ldrb	r2, [r7, #3]
 80083cc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	78fa      	ldrb	r2, [r7, #3]
 80083d6:	4611      	mov	r1, r2
 80083d8:	4618      	mov	r0, r3
 80083da:	f004 f964 	bl	800c6a6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2200      	movs	r2, #0
 80083e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80083e6:	2300      	movs	r3, #0
}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b084      	sub	sp, #16
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	4608      	mov	r0, r1
 80083fa:	4611      	mov	r1, r2
 80083fc:	461a      	mov	r2, r3
 80083fe:	4603      	mov	r3, r0
 8008400:	70fb      	strb	r3, [r7, #3]
 8008402:	460b      	mov	r3, r1
 8008404:	803b      	strh	r3, [r7, #0]
 8008406:	4613      	mov	r3, r2
 8008408:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800840a:	2300      	movs	r3, #0
 800840c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800840e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008412:	2b00      	cmp	r3, #0
 8008414:	da0f      	bge.n	8008436 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008416:	78fb      	ldrb	r3, [r7, #3]
 8008418:	f003 020f 	and.w	r2, r3, #15
 800841c:	4613      	mov	r3, r2
 800841e:	00db      	lsls	r3, r3, #3
 8008420:	1a9b      	subs	r3, r3, r2
 8008422:	009b      	lsls	r3, r3, #2
 8008424:	3338      	adds	r3, #56	; 0x38
 8008426:	687a      	ldr	r2, [r7, #4]
 8008428:	4413      	add	r3, r2
 800842a:	3304      	adds	r3, #4
 800842c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2201      	movs	r2, #1
 8008432:	705a      	strb	r2, [r3, #1]
 8008434:	e00f      	b.n	8008456 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008436:	78fb      	ldrb	r3, [r7, #3]
 8008438:	f003 020f 	and.w	r2, r3, #15
 800843c:	4613      	mov	r3, r2
 800843e:	00db      	lsls	r3, r3, #3
 8008440:	1a9b      	subs	r3, r3, r2
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008448:	687a      	ldr	r2, [r7, #4]
 800844a:	4413      	add	r3, r2
 800844c:	3304      	adds	r3, #4
 800844e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2200      	movs	r2, #0
 8008454:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008456:	78fb      	ldrb	r3, [r7, #3]
 8008458:	f003 030f 	and.w	r3, r3, #15
 800845c:	b2da      	uxtb	r2, r3
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008462:	883a      	ldrh	r2, [r7, #0]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	78ba      	ldrb	r2, [r7, #2]
 800846c:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	785b      	ldrb	r3, [r3, #1]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d004      	beq.n	8008480 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	b29a      	uxth	r2, r3
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008480:	78bb      	ldrb	r3, [r7, #2]
 8008482:	2b02      	cmp	r3, #2
 8008484:	d102      	bne.n	800848c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	2200      	movs	r2, #0
 800848a:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008492:	2b01      	cmp	r3, #1
 8008494:	d101      	bne.n	800849a <HAL_PCD_EP_Open+0xaa>
 8008496:	2302      	movs	r3, #2
 8008498:	e00e      	b.n	80084b8 <HAL_PCD_EP_Open+0xc8>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68f9      	ldr	r1, [r7, #12]
 80084a8:	4618      	mov	r0, r3
 80084aa:	f003 fa97 	bl	800b9dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80084b6:	7afb      	ldrb	r3, [r7, #11]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3710      	adds	r7, #16
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	460b      	mov	r3, r1
 80084ca:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80084cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	da0f      	bge.n	80084f4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80084d4:	78fb      	ldrb	r3, [r7, #3]
 80084d6:	f003 020f 	and.w	r2, r3, #15
 80084da:	4613      	mov	r3, r2
 80084dc:	00db      	lsls	r3, r3, #3
 80084de:	1a9b      	subs	r3, r3, r2
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	3338      	adds	r3, #56	; 0x38
 80084e4:	687a      	ldr	r2, [r7, #4]
 80084e6:	4413      	add	r3, r2
 80084e8:	3304      	adds	r3, #4
 80084ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2201      	movs	r2, #1
 80084f0:	705a      	strb	r2, [r3, #1]
 80084f2:	e00f      	b.n	8008514 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80084f4:	78fb      	ldrb	r3, [r7, #3]
 80084f6:	f003 020f 	and.w	r2, r3, #15
 80084fa:	4613      	mov	r3, r2
 80084fc:	00db      	lsls	r3, r3, #3
 80084fe:	1a9b      	subs	r3, r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	4413      	add	r3, r2
 800850a:	3304      	adds	r3, #4
 800850c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2200      	movs	r2, #0
 8008512:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008514:	78fb      	ldrb	r3, [r7, #3]
 8008516:	f003 030f 	and.w	r3, r3, #15
 800851a:	b2da      	uxtb	r2, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008526:	2b01      	cmp	r3, #1
 8008528:	d101      	bne.n	800852e <HAL_PCD_EP_Close+0x6e>
 800852a:	2302      	movs	r3, #2
 800852c:	e00e      	b.n	800854c <HAL_PCD_EP_Close+0x8c>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	2201      	movs	r2, #1
 8008532:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	68f9      	ldr	r1, [r7, #12]
 800853c:	4618      	mov	r0, r3
 800853e:	f003 fad5 	bl	800baec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2200      	movs	r2, #0
 8008546:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	607a      	str	r2, [r7, #4]
 800855e:	603b      	str	r3, [r7, #0]
 8008560:	460b      	mov	r3, r1
 8008562:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008564:	7afb      	ldrb	r3, [r7, #11]
 8008566:	f003 020f 	and.w	r2, r3, #15
 800856a:	4613      	mov	r3, r2
 800856c:	00db      	lsls	r3, r3, #3
 800856e:	1a9b      	subs	r3, r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008576:	68fa      	ldr	r2, [r7, #12]
 8008578:	4413      	add	r3, r2
 800857a:	3304      	adds	r3, #4
 800857c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800857e:	697b      	ldr	r3, [r7, #20]
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008584:	697b      	ldr	r3, [r7, #20]
 8008586:	683a      	ldr	r2, [r7, #0]
 8008588:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800858a:	697b      	ldr	r3, [r7, #20]
 800858c:	2200      	movs	r2, #0
 800858e:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	2200      	movs	r2, #0
 8008594:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008596:	7afb      	ldrb	r3, [r7, #11]
 8008598:	f003 030f 	and.w	r3, r3, #15
 800859c:	b2da      	uxtb	r2, r3
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	691b      	ldr	r3, [r3, #16]
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d102      	bne.n	80085b0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80085b0:	7afb      	ldrb	r3, [r7, #11]
 80085b2:	f003 030f 	and.w	r3, r3, #15
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d109      	bne.n	80085ce <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6818      	ldr	r0, [r3, #0]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	691b      	ldr	r3, [r3, #16]
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	461a      	mov	r2, r3
 80085c6:	6979      	ldr	r1, [r7, #20]
 80085c8:	f003 fdb0 	bl	800c12c <USB_EP0StartXfer>
 80085cc:	e008      	b.n	80085e0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	6818      	ldr	r0, [r3, #0]
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	691b      	ldr	r3, [r3, #16]
 80085d6:	b2db      	uxtb	r3, r3
 80085d8:	461a      	mov	r2, r3
 80085da:	6979      	ldr	r1, [r7, #20]
 80085dc:	f003 fb62 	bl	800bca4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3718      	adds	r7, #24
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80085ea:	b480      	push	{r7}
 80085ec:	b083      	sub	sp, #12
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	6078      	str	r0, [r7, #4]
 80085f2:	460b      	mov	r3, r1
 80085f4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80085f6:	78fb      	ldrb	r3, [r7, #3]
 80085f8:	f003 020f 	and.w	r2, r3, #15
 80085fc:	6879      	ldr	r1, [r7, #4]
 80085fe:	4613      	mov	r3, r2
 8008600:	00db      	lsls	r3, r3, #3
 8008602:	1a9b      	subs	r3, r3, r2
 8008604:	009b      	lsls	r3, r3, #2
 8008606:	440b      	add	r3, r1
 8008608:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800860c:	681b      	ldr	r3, [r3, #0]
}
 800860e:	4618      	mov	r0, r3
 8008610:	370c      	adds	r7, #12
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b086      	sub	sp, #24
 800861e:	af00      	add	r7, sp, #0
 8008620:	60f8      	str	r0, [r7, #12]
 8008622:	607a      	str	r2, [r7, #4]
 8008624:	603b      	str	r3, [r7, #0]
 8008626:	460b      	mov	r3, r1
 8008628:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800862a:	7afb      	ldrb	r3, [r7, #11]
 800862c:	f003 020f 	and.w	r2, r3, #15
 8008630:	4613      	mov	r3, r2
 8008632:	00db      	lsls	r3, r3, #3
 8008634:	1a9b      	subs	r3, r3, r2
 8008636:	009b      	lsls	r3, r3, #2
 8008638:	3338      	adds	r3, #56	; 0x38
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	4413      	add	r3, r2
 800863e:	3304      	adds	r3, #4
 8008640:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	687a      	ldr	r2, [r7, #4]
 8008646:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	2200      	movs	r2, #0
 8008652:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	2201      	movs	r2, #1
 8008658:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800865a:	7afb      	ldrb	r3, [r7, #11]
 800865c:	f003 030f 	and.w	r3, r3, #15
 8008660:	b2da      	uxtb	r2, r3
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	691b      	ldr	r3, [r3, #16]
 800866a:	2b01      	cmp	r3, #1
 800866c:	d102      	bne.n	8008674 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800866e:	687a      	ldr	r2, [r7, #4]
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008674:	7afb      	ldrb	r3, [r7, #11]
 8008676:	f003 030f 	and.w	r3, r3, #15
 800867a:	2b00      	cmp	r3, #0
 800867c:	d109      	bne.n	8008692 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6818      	ldr	r0, [r3, #0]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	691b      	ldr	r3, [r3, #16]
 8008686:	b2db      	uxtb	r3, r3
 8008688:	461a      	mov	r2, r3
 800868a:	6979      	ldr	r1, [r7, #20]
 800868c:	f003 fd4e 	bl	800c12c <USB_EP0StartXfer>
 8008690:	e008      	b.n	80086a4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	6818      	ldr	r0, [r3, #0]
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	691b      	ldr	r3, [r3, #16]
 800869a:	b2db      	uxtb	r3, r3
 800869c:	461a      	mov	r2, r3
 800869e:	6979      	ldr	r1, [r7, #20]
 80086a0:	f003 fb00 	bl	800bca4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3718      	adds	r7, #24
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}

080086ae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80086ae:	b580      	push	{r7, lr}
 80086b0:	b084      	sub	sp, #16
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	460b      	mov	r3, r1
 80086b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80086ba:	78fb      	ldrb	r3, [r7, #3]
 80086bc:	f003 020f 	and.w	r2, r3, #15
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	685b      	ldr	r3, [r3, #4]
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d901      	bls.n	80086cc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e050      	b.n	800876e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80086cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	da0f      	bge.n	80086f4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80086d4:	78fb      	ldrb	r3, [r7, #3]
 80086d6:	f003 020f 	and.w	r2, r3, #15
 80086da:	4613      	mov	r3, r2
 80086dc:	00db      	lsls	r3, r3, #3
 80086de:	1a9b      	subs	r3, r3, r2
 80086e0:	009b      	lsls	r3, r3, #2
 80086e2:	3338      	adds	r3, #56	; 0x38
 80086e4:	687a      	ldr	r2, [r7, #4]
 80086e6:	4413      	add	r3, r2
 80086e8:	3304      	adds	r3, #4
 80086ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2201      	movs	r2, #1
 80086f0:	705a      	strb	r2, [r3, #1]
 80086f2:	e00d      	b.n	8008710 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80086f4:	78fa      	ldrb	r2, [r7, #3]
 80086f6:	4613      	mov	r3, r2
 80086f8:	00db      	lsls	r3, r3, #3
 80086fa:	1a9b      	subs	r3, r3, r2
 80086fc:	009b      	lsls	r3, r3, #2
 80086fe:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	4413      	add	r3, r2
 8008706:	3304      	adds	r3, #4
 8008708:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2200      	movs	r2, #0
 800870e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2201      	movs	r2, #1
 8008714:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008716:	78fb      	ldrb	r3, [r7, #3]
 8008718:	f003 030f 	and.w	r3, r3, #15
 800871c:	b2da      	uxtb	r2, r3
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008728:	2b01      	cmp	r3, #1
 800872a:	d101      	bne.n	8008730 <HAL_PCD_EP_SetStall+0x82>
 800872c:	2302      	movs	r3, #2
 800872e:	e01e      	b.n	800876e <HAL_PCD_EP_SetStall+0xc0>
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68f9      	ldr	r1, [r7, #12]
 800873e:	4618      	mov	r0, r3
 8008740:	f003 fedd 	bl	800c4fe <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008744:	78fb      	ldrb	r3, [r7, #3]
 8008746:	f003 030f 	and.w	r3, r3, #15
 800874a:	2b00      	cmp	r3, #0
 800874c:	d10a      	bne.n	8008764 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6818      	ldr	r0, [r3, #0]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	b2d9      	uxtb	r1, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800875e:	461a      	mov	r2, r3
 8008760:	f004 f8ce 	bl	800c900 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2200      	movs	r2, #0
 8008768:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}

08008776 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008776:	b580      	push	{r7, lr}
 8008778:	b084      	sub	sp, #16
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
 800877e:	460b      	mov	r3, r1
 8008780:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008782:	78fb      	ldrb	r3, [r7, #3]
 8008784:	f003 020f 	and.w	r2, r3, #15
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	685b      	ldr	r3, [r3, #4]
 800878c:	429a      	cmp	r2, r3
 800878e:	d901      	bls.n	8008794 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e042      	b.n	800881a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008794:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008798:	2b00      	cmp	r3, #0
 800879a:	da0f      	bge.n	80087bc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800879c:	78fb      	ldrb	r3, [r7, #3]
 800879e:	f003 020f 	and.w	r2, r3, #15
 80087a2:	4613      	mov	r3, r2
 80087a4:	00db      	lsls	r3, r3, #3
 80087a6:	1a9b      	subs	r3, r3, r2
 80087a8:	009b      	lsls	r3, r3, #2
 80087aa:	3338      	adds	r3, #56	; 0x38
 80087ac:	687a      	ldr	r2, [r7, #4]
 80087ae:	4413      	add	r3, r2
 80087b0:	3304      	adds	r3, #4
 80087b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2201      	movs	r2, #1
 80087b8:	705a      	strb	r2, [r3, #1]
 80087ba:	e00f      	b.n	80087dc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80087bc:	78fb      	ldrb	r3, [r7, #3]
 80087be:	f003 020f 	and.w	r2, r3, #15
 80087c2:	4613      	mov	r3, r2
 80087c4:	00db      	lsls	r3, r3, #3
 80087c6:	1a9b      	subs	r3, r3, r2
 80087c8:	009b      	lsls	r3, r3, #2
 80087ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80087ce:	687a      	ldr	r2, [r7, #4]
 80087d0:	4413      	add	r3, r2
 80087d2:	3304      	adds	r3, #4
 80087d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	2200      	movs	r2, #0
 80087e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80087e2:	78fb      	ldrb	r3, [r7, #3]
 80087e4:	f003 030f 	and.w	r3, r3, #15
 80087e8:	b2da      	uxtb	r2, r3
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d101      	bne.n	80087fc <HAL_PCD_EP_ClrStall+0x86>
 80087f8:	2302      	movs	r3, #2
 80087fa:	e00e      	b.n	800881a <HAL_PCD_EP_ClrStall+0xa4>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	68f9      	ldr	r1, [r7, #12]
 800880a:	4618      	mov	r0, r3
 800880c:	f003 fee5 	bl	800c5da <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}

08008822 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008822:	b580      	push	{r7, lr}
 8008824:	b08a      	sub	sp, #40	; 0x28
 8008826:	af02      	add	r7, sp, #8
 8008828:	6078      	str	r0, [r7, #4]
 800882a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008832:	697b      	ldr	r3, [r7, #20]
 8008834:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008836:	683a      	ldr	r2, [r7, #0]
 8008838:	4613      	mov	r3, r2
 800883a:	00db      	lsls	r3, r3, #3
 800883c:	1a9b      	subs	r3, r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	3338      	adds	r3, #56	; 0x38
 8008842:	687a      	ldr	r2, [r7, #4]
 8008844:	4413      	add	r3, r2
 8008846:	3304      	adds	r3, #4
 8008848:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	699a      	ldr	r2, [r3, #24]
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	695b      	ldr	r3, [r3, #20]
 8008852:	429a      	cmp	r2, r3
 8008854:	d901      	bls.n	800885a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008856:	2301      	movs	r3, #1
 8008858:	e06c      	b.n	8008934 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	695a      	ldr	r2, [r3, #20]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	699b      	ldr	r3, [r3, #24]
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	689b      	ldr	r3, [r3, #8]
 800886a:	69fa      	ldr	r2, [r7, #28]
 800886c:	429a      	cmp	r2, r3
 800886e:	d902      	bls.n	8008876 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	689b      	ldr	r3, [r3, #8]
 8008874:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008876:	69fb      	ldr	r3, [r7, #28]
 8008878:	3303      	adds	r3, #3
 800887a:	089b      	lsrs	r3, r3, #2
 800887c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800887e:	e02b      	b.n	80088d8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	695a      	ldr	r2, [r3, #20]
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	699b      	ldr	r3, [r3, #24]
 8008888:	1ad3      	subs	r3, r2, r3
 800888a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	69fa      	ldr	r2, [r7, #28]
 8008892:	429a      	cmp	r2, r3
 8008894:	d902      	bls.n	800889c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	3303      	adds	r3, #3
 80088a0:	089b      	lsrs	r3, r3, #2
 80088a2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	68d9      	ldr	r1, [r3, #12]
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	b2da      	uxtb	r2, r3
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	9300      	str	r3, [sp, #0]
 80088b8:	4603      	mov	r3, r0
 80088ba:	6978      	ldr	r0, [r7, #20]
 80088bc:	f003 fd89 	bl	800c3d2 <USB_WritePacket>

    ep->xfer_buff  += len;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	68da      	ldr	r2, [r3, #12]
 80088c4:	69fb      	ldr	r3, [r7, #28]
 80088c6:	441a      	add	r2, r3
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	699a      	ldr	r2, [r3, #24]
 80088d0:	69fb      	ldr	r3, [r7, #28]
 80088d2:	441a      	add	r2, r3
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	015a      	lsls	r2, r3, #5
 80088dc:	693b      	ldr	r3, [r7, #16]
 80088de:	4413      	add	r3, r2
 80088e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	b29b      	uxth	r3, r3
 80088e8:	69ba      	ldr	r2, [r7, #24]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d809      	bhi.n	8008902 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	699a      	ldr	r2, [r3, #24]
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d203      	bcs.n	8008902 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1be      	bne.n	8008880 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	695a      	ldr	r2, [r3, #20]
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	699b      	ldr	r3, [r3, #24]
 800890a:	429a      	cmp	r2, r3
 800890c:	d811      	bhi.n	8008932 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	f003 030f 	and.w	r3, r3, #15
 8008914:	2201      	movs	r2, #1
 8008916:	fa02 f303 	lsl.w	r3, r2, r3
 800891a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008922:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	43db      	mvns	r3, r3
 8008928:	6939      	ldr	r1, [r7, #16]
 800892a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800892e:	4013      	ands	r3, r2
 8008930:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3720      	adds	r7, #32
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b086      	sub	sp, #24
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
 8008944:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008950:	697b      	ldr	r3, [r7, #20]
 8008952:	333c      	adds	r3, #60	; 0x3c
 8008954:	3304      	adds	r3, #4
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800895a:	683b      	ldr	r3, [r7, #0]
 800895c:	015a      	lsls	r2, r3, #5
 800895e:	693b      	ldr	r3, [r7, #16]
 8008960:	4413      	add	r3, r2
 8008962:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008966:	689b      	ldr	r3, [r3, #8]
 8008968:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	691b      	ldr	r3, [r3, #16]
 800896e:	2b01      	cmp	r3, #1
 8008970:	f040 80a0 	bne.w	8008ab4 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	f003 0308 	and.w	r3, r3, #8
 800897a:	2b00      	cmp	r3, #0
 800897c:	d015      	beq.n	80089aa <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	4a72      	ldr	r2, [pc, #456]	; (8008b4c <PCD_EP_OutXfrComplete_int+0x210>)
 8008982:	4293      	cmp	r3, r2
 8008984:	f240 80dd 	bls.w	8008b42 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800898e:	2b00      	cmp	r3, #0
 8008990:	f000 80d7 	beq.w	8008b42 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	015a      	lsls	r2, r3, #5
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	4413      	add	r3, r2
 800899c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089a0:	461a      	mov	r2, r3
 80089a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089a6:	6093      	str	r3, [r2, #8]
 80089a8:	e0cb      	b.n	8008b42 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	f003 0320 	and.w	r3, r3, #32
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d009      	beq.n	80089c8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	015a      	lsls	r2, r3, #5
 80089b8:	693b      	ldr	r3, [r7, #16]
 80089ba:	4413      	add	r3, r2
 80089bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089c0:	461a      	mov	r2, r3
 80089c2:	2320      	movs	r3, #32
 80089c4:	6093      	str	r3, [r2, #8]
 80089c6:	e0bc      	b.n	8008b42 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	f040 80b7 	bne.w	8008b42 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	4a5d      	ldr	r2, [pc, #372]	; (8008b4c <PCD_EP_OutXfrComplete_int+0x210>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d90f      	bls.n	80089fc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00a      	beq.n	80089fc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	015a      	lsls	r2, r3, #5
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	4413      	add	r3, r2
 80089ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089f2:	461a      	mov	r2, r3
 80089f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089f8:	6093      	str	r3, [r2, #8]
 80089fa:	e0a2      	b.n	8008b42 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80089fc:	6879      	ldr	r1, [r7, #4]
 80089fe:	683a      	ldr	r2, [r7, #0]
 8008a00:	4613      	mov	r3, r2
 8008a02:	00db      	lsls	r3, r3, #3
 8008a04:	1a9b      	subs	r3, r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	440b      	add	r3, r1
 8008a0a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008a0e:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	0159      	lsls	r1, r3, #5
 8008a14:	693b      	ldr	r3, [r7, #16]
 8008a16:	440b      	add	r3, r1
 8008a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8008a22:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	683a      	ldr	r2, [r7, #0]
 8008a28:	4613      	mov	r3, r2
 8008a2a:	00db      	lsls	r3, r3, #3
 8008a2c:	1a9b      	subs	r3, r3, r2
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	4403      	add	r3, r0
 8008a32:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008a36:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008a38:	6879      	ldr	r1, [r7, #4]
 8008a3a:	683a      	ldr	r2, [r7, #0]
 8008a3c:	4613      	mov	r3, r2
 8008a3e:	00db      	lsls	r3, r3, #3
 8008a40:	1a9b      	subs	r3, r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	440b      	add	r3, r1
 8008a46:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008a4a:	6819      	ldr	r1, [r3, #0]
 8008a4c:	6878      	ldr	r0, [r7, #4]
 8008a4e:	683a      	ldr	r2, [r7, #0]
 8008a50:	4613      	mov	r3, r2
 8008a52:	00db      	lsls	r3, r3, #3
 8008a54:	1a9b      	subs	r3, r3, r2
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	4403      	add	r3, r0
 8008a5a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4419      	add	r1, r3
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	683a      	ldr	r2, [r7, #0]
 8008a66:	4613      	mov	r3, r2
 8008a68:	00db      	lsls	r3, r3, #3
 8008a6a:	1a9b      	subs	r3, r3, r2
 8008a6c:	009b      	lsls	r3, r3, #2
 8008a6e:	4403      	add	r3, r0
 8008a70:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008a74:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d114      	bne.n	8008aa6 <PCD_EP_OutXfrComplete_int+0x16a>
 8008a7c:	6879      	ldr	r1, [r7, #4]
 8008a7e:	683a      	ldr	r2, [r7, #0]
 8008a80:	4613      	mov	r3, r2
 8008a82:	00db      	lsls	r3, r3, #3
 8008a84:	1a9b      	subs	r3, r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	440b      	add	r3, r1
 8008a8a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d108      	bne.n	8008aa6 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6818      	ldr	r0, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008a9e:	461a      	mov	r2, r3
 8008aa0:	2101      	movs	r1, #1
 8008aa2:	f003 ff2d 	bl	800c900 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	4619      	mov	r1, r3
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f00d fa1b 	bl	8015ee8 <HAL_PCD_DataOutStageCallback>
 8008ab2:	e046      	b.n	8008b42 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	4a26      	ldr	r2, [pc, #152]	; (8008b50 <PCD_EP_OutXfrComplete_int+0x214>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d124      	bne.n	8008b06 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d00a      	beq.n	8008adc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	015a      	lsls	r2, r3, #5
 8008aca:	693b      	ldr	r3, [r7, #16]
 8008acc:	4413      	add	r3, r2
 8008ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ad2:	461a      	mov	r2, r3
 8008ad4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ad8:	6093      	str	r3, [r2, #8]
 8008ada:	e032      	b.n	8008b42 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	f003 0320 	and.w	r3, r3, #32
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d008      	beq.n	8008af8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	015a      	lsls	r2, r3, #5
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	4413      	add	r3, r2
 8008aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008af2:	461a      	mov	r2, r3
 8008af4:	2320      	movs	r3, #32
 8008af6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008af8:	683b      	ldr	r3, [r7, #0]
 8008afa:	b2db      	uxtb	r3, r3
 8008afc:	4619      	mov	r1, r3
 8008afe:	6878      	ldr	r0, [r7, #4]
 8008b00:	f00d f9f2 	bl	8015ee8 <HAL_PCD_DataOutStageCallback>
 8008b04:	e01d      	b.n	8008b42 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d114      	bne.n	8008b36 <PCD_EP_OutXfrComplete_int+0x1fa>
 8008b0c:	6879      	ldr	r1, [r7, #4]
 8008b0e:	683a      	ldr	r2, [r7, #0]
 8008b10:	4613      	mov	r3, r2
 8008b12:	00db      	lsls	r3, r3, #3
 8008b14:	1a9b      	subs	r3, r3, r2
 8008b16:	009b      	lsls	r3, r3, #2
 8008b18:	440b      	add	r3, r1
 8008b1a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d108      	bne.n	8008b36 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6818      	ldr	r0, [r3, #0]
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008b2e:	461a      	mov	r2, r3
 8008b30:	2100      	movs	r1, #0
 8008b32:	f003 fee5 	bl	800c900 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f00d f9d3 	bl	8015ee8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008b42:	2300      	movs	r3, #0
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3718      	adds	r7, #24
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	4f54300a 	.word	0x4f54300a
 8008b50:	4f54310a 	.word	0x4f54310a

08008b54 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b086      	sub	sp, #24
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008b68:	697b      	ldr	r3, [r7, #20]
 8008b6a:	333c      	adds	r3, #60	; 0x3c
 8008b6c:	3304      	adds	r3, #4
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	015a      	lsls	r2, r3, #5
 8008b76:	693b      	ldr	r3, [r7, #16]
 8008b78:	4413      	add	r3, r2
 8008b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	4a15      	ldr	r2, [pc, #84]	; (8008bdc <PCD_EP_OutSetupPacket_int+0x88>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d90e      	bls.n	8008ba8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d009      	beq.n	8008ba8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	015a      	lsls	r2, r3, #5
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	4413      	add	r3, r2
 8008b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ba0:	461a      	mov	r2, r3
 8008ba2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ba6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f00d f98b 	bl	8015ec4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	4a0a      	ldr	r2, [pc, #40]	; (8008bdc <PCD_EP_OutSetupPacket_int+0x88>)
 8008bb2:	4293      	cmp	r3, r2
 8008bb4:	d90c      	bls.n	8008bd0 <PCD_EP_OutSetupPacket_int+0x7c>
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	691b      	ldr	r3, [r3, #16]
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d108      	bne.n	8008bd0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6818      	ldr	r0, [r3, #0]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008bc8:	461a      	mov	r2, r3
 8008bca:	2101      	movs	r1, #1
 8008bcc:	f003 fe98 	bl	800c900 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8008bd0:	2300      	movs	r3, #0
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3718      	adds	r7, #24
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	4f54300a 	.word	0x4f54300a

08008be0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b085      	sub	sp, #20
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	460b      	mov	r3, r1
 8008bea:	70fb      	strb	r3, [r7, #3]
 8008bec:	4613      	mov	r3, r2
 8008bee:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008bf6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8008bf8:	78fb      	ldrb	r3, [r7, #3]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d107      	bne.n	8008c0e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8008bfe:	883b      	ldrh	r3, [r7, #0]
 8008c00:	0419      	lsls	r1, r3, #16
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	430a      	orrs	r2, r1
 8008c0a:	629a      	str	r2, [r3, #40]	; 0x28
 8008c0c:	e028      	b.n	8008c60 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c14:	0c1b      	lsrs	r3, r3, #16
 8008c16:	68ba      	ldr	r2, [r7, #8]
 8008c18:	4413      	add	r3, r2
 8008c1a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	73fb      	strb	r3, [r7, #15]
 8008c20:	e00d      	b.n	8008c3e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	7bfb      	ldrb	r3, [r7, #15]
 8008c28:	3340      	adds	r3, #64	; 0x40
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	4413      	add	r3, r2
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	0c1b      	lsrs	r3, r3, #16
 8008c32:	68ba      	ldr	r2, [r7, #8]
 8008c34:	4413      	add	r3, r2
 8008c36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8008c38:	7bfb      	ldrb	r3, [r7, #15]
 8008c3a:	3301      	adds	r3, #1
 8008c3c:	73fb      	strb	r3, [r7, #15]
 8008c3e:	7bfa      	ldrb	r2, [r7, #15]
 8008c40:	78fb      	ldrb	r3, [r7, #3]
 8008c42:	3b01      	subs	r3, #1
 8008c44:	429a      	cmp	r2, r3
 8008c46:	d3ec      	bcc.n	8008c22 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8008c48:	883b      	ldrh	r3, [r7, #0]
 8008c4a:	0418      	lsls	r0, r3, #16
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6819      	ldr	r1, [r3, #0]
 8008c50:	78fb      	ldrb	r3, [r7, #3]
 8008c52:	3b01      	subs	r3, #1
 8008c54:	68ba      	ldr	r2, [r7, #8]
 8008c56:	4302      	orrs	r2, r0
 8008c58:	3340      	adds	r3, #64	; 0x40
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	440b      	add	r3, r1
 8008c5e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8008c60:	2300      	movs	r3, #0
}
 8008c62:	4618      	mov	r0, r3
 8008c64:	3714      	adds	r7, #20
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr

08008c6e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8008c6e:	b480      	push	{r7}
 8008c70:	b083      	sub	sp, #12
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	460b      	mov	r3, r1
 8008c78:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	887a      	ldrh	r2, [r7, #2]
 8008c80:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8008c82:	2300      	movs	r3, #0
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	370c      	adds	r7, #12
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8008c90:	b480      	push	{r7}
 8008c92:	b083      	sub	sp, #12
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
 8008c98:	460b      	mov	r3, r1
 8008c9a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8008c9c:	bf00      	nop
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b086      	sub	sp, #24
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d101      	bne.n	8008cba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e264      	b.n	8009184 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f003 0301 	and.w	r3, r3, #1
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d075      	beq.n	8008db2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008cc6:	4ba3      	ldr	r3, [pc, #652]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008cc8:	689b      	ldr	r3, [r3, #8]
 8008cca:	f003 030c 	and.w	r3, r3, #12
 8008cce:	2b04      	cmp	r3, #4
 8008cd0:	d00c      	beq.n	8008cec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008cd2:	4ba0      	ldr	r3, [pc, #640]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008cda:	2b08      	cmp	r3, #8
 8008cdc:	d112      	bne.n	8008d04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008cde:	4b9d      	ldr	r3, [pc, #628]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ce6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008cea:	d10b      	bne.n	8008d04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cec:	4b99      	ldr	r3, [pc, #612]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d05b      	beq.n	8008db0 <HAL_RCC_OscConfig+0x108>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d157      	bne.n	8008db0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008d00:	2301      	movs	r3, #1
 8008d02:	e23f      	b.n	8009184 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d0c:	d106      	bne.n	8008d1c <HAL_RCC_OscConfig+0x74>
 8008d0e:	4b91      	ldr	r3, [pc, #580]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a90      	ldr	r2, [pc, #576]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008d14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d18:	6013      	str	r3, [r2, #0]
 8008d1a:	e01d      	b.n	8008d58 <HAL_RCC_OscConfig+0xb0>
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d24:	d10c      	bne.n	8008d40 <HAL_RCC_OscConfig+0x98>
 8008d26:	4b8b      	ldr	r3, [pc, #556]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	4a8a      	ldr	r2, [pc, #552]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008d2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d30:	6013      	str	r3, [r2, #0]
 8008d32:	4b88      	ldr	r3, [pc, #544]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a87      	ldr	r2, [pc, #540]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d3c:	6013      	str	r3, [r2, #0]
 8008d3e:	e00b      	b.n	8008d58 <HAL_RCC_OscConfig+0xb0>
 8008d40:	4b84      	ldr	r3, [pc, #528]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a83      	ldr	r2, [pc, #524]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d4a:	6013      	str	r3, [r2, #0]
 8008d4c:	4b81      	ldr	r3, [pc, #516]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4a80      	ldr	r2, [pc, #512]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008d52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d013      	beq.n	8008d88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d60:	f7fd f8b4 	bl	8005ecc <HAL_GetTick>
 8008d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d66:	e008      	b.n	8008d7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d68:	f7fd f8b0 	bl	8005ecc <HAL_GetTick>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	2b64      	cmp	r3, #100	; 0x64
 8008d74:	d901      	bls.n	8008d7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008d76:	2303      	movs	r3, #3
 8008d78:	e204      	b.n	8009184 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008d7a:	4b76      	ldr	r3, [pc, #472]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d0f0      	beq.n	8008d68 <HAL_RCC_OscConfig+0xc0>
 8008d86:	e014      	b.n	8008db2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d88:	f7fd f8a0 	bl	8005ecc <HAL_GetTick>
 8008d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008d8e:	e008      	b.n	8008da2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008d90:	f7fd f89c 	bl	8005ecc <HAL_GetTick>
 8008d94:	4602      	mov	r2, r0
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	1ad3      	subs	r3, r2, r3
 8008d9a:	2b64      	cmp	r3, #100	; 0x64
 8008d9c:	d901      	bls.n	8008da2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008d9e:	2303      	movs	r3, #3
 8008da0:	e1f0      	b.n	8009184 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008da2:	4b6c      	ldr	r3, [pc, #432]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d1f0      	bne.n	8008d90 <HAL_RCC_OscConfig+0xe8>
 8008dae:	e000      	b.n	8008db2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008db0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	f003 0302 	and.w	r3, r3, #2
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d063      	beq.n	8008e86 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008dbe:	4b65      	ldr	r3, [pc, #404]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	f003 030c 	and.w	r3, r3, #12
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d00b      	beq.n	8008de2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008dca:	4b62      	ldr	r3, [pc, #392]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008dd2:	2b08      	cmp	r3, #8
 8008dd4:	d11c      	bne.n	8008e10 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008dd6:	4b5f      	ldr	r3, [pc, #380]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008dd8:	685b      	ldr	r3, [r3, #4]
 8008dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d116      	bne.n	8008e10 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008de2:	4b5c      	ldr	r3, [pc, #368]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	f003 0302 	and.w	r3, r3, #2
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d005      	beq.n	8008dfa <HAL_RCC_OscConfig+0x152>
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	d001      	beq.n	8008dfa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e1c4      	b.n	8009184 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dfa:	4b56      	ldr	r3, [pc, #344]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	691b      	ldr	r3, [r3, #16]
 8008e06:	00db      	lsls	r3, r3, #3
 8008e08:	4952      	ldr	r1, [pc, #328]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e0e:	e03a      	b.n	8008e86 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	68db      	ldr	r3, [r3, #12]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d020      	beq.n	8008e5a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008e18:	4b4f      	ldr	r3, [pc, #316]	; (8008f58 <HAL_RCC_OscConfig+0x2b0>)
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e1e:	f7fd f855 	bl	8005ecc <HAL_GetTick>
 8008e22:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e24:	e008      	b.n	8008e38 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e26:	f7fd f851 	bl	8005ecc <HAL_GetTick>
 8008e2a:	4602      	mov	r2, r0
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	1ad3      	subs	r3, r2, r3
 8008e30:	2b02      	cmp	r3, #2
 8008e32:	d901      	bls.n	8008e38 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008e34:	2303      	movs	r3, #3
 8008e36:	e1a5      	b.n	8009184 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e38:	4b46      	ldr	r3, [pc, #280]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	f003 0302 	and.w	r3, r3, #2
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d0f0      	beq.n	8008e26 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e44:	4b43      	ldr	r3, [pc, #268]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	691b      	ldr	r3, [r3, #16]
 8008e50:	00db      	lsls	r3, r3, #3
 8008e52:	4940      	ldr	r1, [pc, #256]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008e54:	4313      	orrs	r3, r2
 8008e56:	600b      	str	r3, [r1, #0]
 8008e58:	e015      	b.n	8008e86 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e5a:	4b3f      	ldr	r3, [pc, #252]	; (8008f58 <HAL_RCC_OscConfig+0x2b0>)
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e60:	f7fd f834 	bl	8005ecc <HAL_GetTick>
 8008e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e66:	e008      	b.n	8008e7a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008e68:	f7fd f830 	bl	8005ecc <HAL_GetTick>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	1ad3      	subs	r3, r2, r3
 8008e72:	2b02      	cmp	r3, #2
 8008e74:	d901      	bls.n	8008e7a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008e76:	2303      	movs	r3, #3
 8008e78:	e184      	b.n	8009184 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008e7a:	4b36      	ldr	r3, [pc, #216]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	f003 0302 	and.w	r3, r3, #2
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d1f0      	bne.n	8008e68 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 0308 	and.w	r3, r3, #8
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d030      	beq.n	8008ef4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	695b      	ldr	r3, [r3, #20]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d016      	beq.n	8008ec8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e9a:	4b30      	ldr	r3, [pc, #192]	; (8008f5c <HAL_RCC_OscConfig+0x2b4>)
 8008e9c:	2201      	movs	r2, #1
 8008e9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ea0:	f7fd f814 	bl	8005ecc <HAL_GetTick>
 8008ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ea6:	e008      	b.n	8008eba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ea8:	f7fd f810 	bl	8005ecc <HAL_GetTick>
 8008eac:	4602      	mov	r2, r0
 8008eae:	693b      	ldr	r3, [r7, #16]
 8008eb0:	1ad3      	subs	r3, r2, r3
 8008eb2:	2b02      	cmp	r3, #2
 8008eb4:	d901      	bls.n	8008eba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008eb6:	2303      	movs	r3, #3
 8008eb8:	e164      	b.n	8009184 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008eba:	4b26      	ldr	r3, [pc, #152]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008ebc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ebe:	f003 0302 	and.w	r3, r3, #2
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d0f0      	beq.n	8008ea8 <HAL_RCC_OscConfig+0x200>
 8008ec6:	e015      	b.n	8008ef4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ec8:	4b24      	ldr	r3, [pc, #144]	; (8008f5c <HAL_RCC_OscConfig+0x2b4>)
 8008eca:	2200      	movs	r2, #0
 8008ecc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ece:	f7fc fffd 	bl	8005ecc <HAL_GetTick>
 8008ed2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ed4:	e008      	b.n	8008ee8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ed6:	f7fc fff9 	bl	8005ecc <HAL_GetTick>
 8008eda:	4602      	mov	r2, r0
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	1ad3      	subs	r3, r2, r3
 8008ee0:	2b02      	cmp	r3, #2
 8008ee2:	d901      	bls.n	8008ee8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008ee4:	2303      	movs	r3, #3
 8008ee6:	e14d      	b.n	8009184 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ee8:	4b1a      	ldr	r3, [pc, #104]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008eea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008eec:	f003 0302 	and.w	r3, r3, #2
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d1f0      	bne.n	8008ed6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	f003 0304 	and.w	r3, r3, #4
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f000 80a0 	beq.w	8009042 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008f02:	2300      	movs	r3, #0
 8008f04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f06:	4b13      	ldr	r3, [pc, #76]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d10f      	bne.n	8008f32 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f12:	2300      	movs	r3, #0
 8008f14:	60bb      	str	r3, [r7, #8]
 8008f16:	4b0f      	ldr	r3, [pc, #60]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f1a:	4a0e      	ldr	r2, [pc, #56]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008f1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f20:	6413      	str	r3, [r2, #64]	; 0x40
 8008f22:	4b0c      	ldr	r3, [pc, #48]	; (8008f54 <HAL_RCC_OscConfig+0x2ac>)
 8008f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f2a:	60bb      	str	r3, [r7, #8]
 8008f2c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f2e:	2301      	movs	r3, #1
 8008f30:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f32:	4b0b      	ldr	r3, [pc, #44]	; (8008f60 <HAL_RCC_OscConfig+0x2b8>)
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d121      	bne.n	8008f82 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f3e:	4b08      	ldr	r3, [pc, #32]	; (8008f60 <HAL_RCC_OscConfig+0x2b8>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a07      	ldr	r2, [pc, #28]	; (8008f60 <HAL_RCC_OscConfig+0x2b8>)
 8008f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f48:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f4a:	f7fc ffbf 	bl	8005ecc <HAL_GetTick>
 8008f4e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f50:	e011      	b.n	8008f76 <HAL_RCC_OscConfig+0x2ce>
 8008f52:	bf00      	nop
 8008f54:	40023800 	.word	0x40023800
 8008f58:	42470000 	.word	0x42470000
 8008f5c:	42470e80 	.word	0x42470e80
 8008f60:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f64:	f7fc ffb2 	bl	8005ecc <HAL_GetTick>
 8008f68:	4602      	mov	r2, r0
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d901      	bls.n	8008f76 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8008f72:	2303      	movs	r3, #3
 8008f74:	e106      	b.n	8009184 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f76:	4b85      	ldr	r3, [pc, #532]	; (800918c <HAL_RCC_OscConfig+0x4e4>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d0f0      	beq.n	8008f64 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d106      	bne.n	8008f98 <HAL_RCC_OscConfig+0x2f0>
 8008f8a:	4b81      	ldr	r3, [pc, #516]	; (8009190 <HAL_RCC_OscConfig+0x4e8>)
 8008f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f8e:	4a80      	ldr	r2, [pc, #512]	; (8009190 <HAL_RCC_OscConfig+0x4e8>)
 8008f90:	f043 0301 	orr.w	r3, r3, #1
 8008f94:	6713      	str	r3, [r2, #112]	; 0x70
 8008f96:	e01c      	b.n	8008fd2 <HAL_RCC_OscConfig+0x32a>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	2b05      	cmp	r3, #5
 8008f9e:	d10c      	bne.n	8008fba <HAL_RCC_OscConfig+0x312>
 8008fa0:	4b7b      	ldr	r3, [pc, #492]	; (8009190 <HAL_RCC_OscConfig+0x4e8>)
 8008fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fa4:	4a7a      	ldr	r2, [pc, #488]	; (8009190 <HAL_RCC_OscConfig+0x4e8>)
 8008fa6:	f043 0304 	orr.w	r3, r3, #4
 8008faa:	6713      	str	r3, [r2, #112]	; 0x70
 8008fac:	4b78      	ldr	r3, [pc, #480]	; (8009190 <HAL_RCC_OscConfig+0x4e8>)
 8008fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fb0:	4a77      	ldr	r2, [pc, #476]	; (8009190 <HAL_RCC_OscConfig+0x4e8>)
 8008fb2:	f043 0301 	orr.w	r3, r3, #1
 8008fb6:	6713      	str	r3, [r2, #112]	; 0x70
 8008fb8:	e00b      	b.n	8008fd2 <HAL_RCC_OscConfig+0x32a>
 8008fba:	4b75      	ldr	r3, [pc, #468]	; (8009190 <HAL_RCC_OscConfig+0x4e8>)
 8008fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fbe:	4a74      	ldr	r2, [pc, #464]	; (8009190 <HAL_RCC_OscConfig+0x4e8>)
 8008fc0:	f023 0301 	bic.w	r3, r3, #1
 8008fc4:	6713      	str	r3, [r2, #112]	; 0x70
 8008fc6:	4b72      	ldr	r3, [pc, #456]	; (8009190 <HAL_RCC_OscConfig+0x4e8>)
 8008fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fca:	4a71      	ldr	r2, [pc, #452]	; (8009190 <HAL_RCC_OscConfig+0x4e8>)
 8008fcc:	f023 0304 	bic.w	r3, r3, #4
 8008fd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	689b      	ldr	r3, [r3, #8]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d015      	beq.n	8009006 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fda:	f7fc ff77 	bl	8005ecc <HAL_GetTick>
 8008fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fe0:	e00a      	b.n	8008ff8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008fe2:	f7fc ff73 	bl	8005ecc <HAL_GetTick>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	693b      	ldr	r3, [r7, #16]
 8008fea:	1ad3      	subs	r3, r2, r3
 8008fec:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d901      	bls.n	8008ff8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008ff4:	2303      	movs	r3, #3
 8008ff6:	e0c5      	b.n	8009184 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ff8:	4b65      	ldr	r3, [pc, #404]	; (8009190 <HAL_RCC_OscConfig+0x4e8>)
 8008ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ffc:	f003 0302 	and.w	r3, r3, #2
 8009000:	2b00      	cmp	r3, #0
 8009002:	d0ee      	beq.n	8008fe2 <HAL_RCC_OscConfig+0x33a>
 8009004:	e014      	b.n	8009030 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009006:	f7fc ff61 	bl	8005ecc <HAL_GetTick>
 800900a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800900c:	e00a      	b.n	8009024 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800900e:	f7fc ff5d 	bl	8005ecc <HAL_GetTick>
 8009012:	4602      	mov	r2, r0
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	f241 3288 	movw	r2, #5000	; 0x1388
 800901c:	4293      	cmp	r3, r2
 800901e:	d901      	bls.n	8009024 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009020:	2303      	movs	r3, #3
 8009022:	e0af      	b.n	8009184 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009024:	4b5a      	ldr	r3, [pc, #360]	; (8009190 <HAL_RCC_OscConfig+0x4e8>)
 8009026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009028:	f003 0302 	and.w	r3, r3, #2
 800902c:	2b00      	cmp	r3, #0
 800902e:	d1ee      	bne.n	800900e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009030:	7dfb      	ldrb	r3, [r7, #23]
 8009032:	2b01      	cmp	r3, #1
 8009034:	d105      	bne.n	8009042 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009036:	4b56      	ldr	r3, [pc, #344]	; (8009190 <HAL_RCC_OscConfig+0x4e8>)
 8009038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800903a:	4a55      	ldr	r2, [pc, #340]	; (8009190 <HAL_RCC_OscConfig+0x4e8>)
 800903c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009040:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	2b00      	cmp	r3, #0
 8009048:	f000 809b 	beq.w	8009182 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800904c:	4b50      	ldr	r3, [pc, #320]	; (8009190 <HAL_RCC_OscConfig+0x4e8>)
 800904e:	689b      	ldr	r3, [r3, #8]
 8009050:	f003 030c 	and.w	r3, r3, #12
 8009054:	2b08      	cmp	r3, #8
 8009056:	d05c      	beq.n	8009112 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	699b      	ldr	r3, [r3, #24]
 800905c:	2b02      	cmp	r3, #2
 800905e:	d141      	bne.n	80090e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009060:	4b4c      	ldr	r3, [pc, #304]	; (8009194 <HAL_RCC_OscConfig+0x4ec>)
 8009062:	2200      	movs	r2, #0
 8009064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009066:	f7fc ff31 	bl	8005ecc <HAL_GetTick>
 800906a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800906c:	e008      	b.n	8009080 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800906e:	f7fc ff2d 	bl	8005ecc <HAL_GetTick>
 8009072:	4602      	mov	r2, r0
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	1ad3      	subs	r3, r2, r3
 8009078:	2b02      	cmp	r3, #2
 800907a:	d901      	bls.n	8009080 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800907c:	2303      	movs	r3, #3
 800907e:	e081      	b.n	8009184 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009080:	4b43      	ldr	r3, [pc, #268]	; (8009190 <HAL_RCC_OscConfig+0x4e8>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009088:	2b00      	cmp	r3, #0
 800908a:	d1f0      	bne.n	800906e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	69da      	ldr	r2, [r3, #28]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6a1b      	ldr	r3, [r3, #32]
 8009094:	431a      	orrs	r2, r3
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800909a:	019b      	lsls	r3, r3, #6
 800909c:	431a      	orrs	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a2:	085b      	lsrs	r3, r3, #1
 80090a4:	3b01      	subs	r3, #1
 80090a6:	041b      	lsls	r3, r3, #16
 80090a8:	431a      	orrs	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090ae:	061b      	lsls	r3, r3, #24
 80090b0:	4937      	ldr	r1, [pc, #220]	; (8009190 <HAL_RCC_OscConfig+0x4e8>)
 80090b2:	4313      	orrs	r3, r2
 80090b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80090b6:	4b37      	ldr	r3, [pc, #220]	; (8009194 <HAL_RCC_OscConfig+0x4ec>)
 80090b8:	2201      	movs	r2, #1
 80090ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090bc:	f7fc ff06 	bl	8005ecc <HAL_GetTick>
 80090c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090c2:	e008      	b.n	80090d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090c4:	f7fc ff02 	bl	8005ecc <HAL_GetTick>
 80090c8:	4602      	mov	r2, r0
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	1ad3      	subs	r3, r2, r3
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d901      	bls.n	80090d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80090d2:	2303      	movs	r3, #3
 80090d4:	e056      	b.n	8009184 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80090d6:	4b2e      	ldr	r3, [pc, #184]	; (8009190 <HAL_RCC_OscConfig+0x4e8>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d0f0      	beq.n	80090c4 <HAL_RCC_OscConfig+0x41c>
 80090e2:	e04e      	b.n	8009182 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090e4:	4b2b      	ldr	r3, [pc, #172]	; (8009194 <HAL_RCC_OscConfig+0x4ec>)
 80090e6:	2200      	movs	r2, #0
 80090e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090ea:	f7fc feef 	bl	8005ecc <HAL_GetTick>
 80090ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80090f0:	e008      	b.n	8009104 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80090f2:	f7fc feeb 	bl	8005ecc <HAL_GetTick>
 80090f6:	4602      	mov	r2, r0
 80090f8:	693b      	ldr	r3, [r7, #16]
 80090fa:	1ad3      	subs	r3, r2, r3
 80090fc:	2b02      	cmp	r3, #2
 80090fe:	d901      	bls.n	8009104 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009100:	2303      	movs	r3, #3
 8009102:	e03f      	b.n	8009184 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009104:	4b22      	ldr	r3, [pc, #136]	; (8009190 <HAL_RCC_OscConfig+0x4e8>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800910c:	2b00      	cmp	r3, #0
 800910e:	d1f0      	bne.n	80090f2 <HAL_RCC_OscConfig+0x44a>
 8009110:	e037      	b.n	8009182 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	699b      	ldr	r3, [r3, #24]
 8009116:	2b01      	cmp	r3, #1
 8009118:	d101      	bne.n	800911e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800911a:	2301      	movs	r3, #1
 800911c:	e032      	b.n	8009184 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800911e:	4b1c      	ldr	r3, [pc, #112]	; (8009190 <HAL_RCC_OscConfig+0x4e8>)
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	699b      	ldr	r3, [r3, #24]
 8009128:	2b01      	cmp	r3, #1
 800912a:	d028      	beq.n	800917e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009136:	429a      	cmp	r2, r3
 8009138:	d121      	bne.n	800917e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009144:	429a      	cmp	r2, r3
 8009146:	d11a      	bne.n	800917e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009148:	68fa      	ldr	r2, [r7, #12]
 800914a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800914e:	4013      	ands	r3, r2
 8009150:	687a      	ldr	r2, [r7, #4]
 8009152:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009154:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009156:	4293      	cmp	r3, r2
 8009158:	d111      	bne.n	800917e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009164:	085b      	lsrs	r3, r3, #1
 8009166:	3b01      	subs	r3, #1
 8009168:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800916a:	429a      	cmp	r2, r3
 800916c:	d107      	bne.n	800917e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009178:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800917a:	429a      	cmp	r2, r3
 800917c:	d001      	beq.n	8009182 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	e000      	b.n	8009184 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3718      	adds	r7, #24
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}
 800918c:	40007000 	.word	0x40007000
 8009190:	40023800 	.word	0x40023800
 8009194:	42470060 	.word	0x42470060

08009198 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d101      	bne.n	80091ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80091a8:	2301      	movs	r3, #1
 80091aa:	e0cc      	b.n	8009346 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80091ac:	4b68      	ldr	r3, [pc, #416]	; (8009350 <HAL_RCC_ClockConfig+0x1b8>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f003 0307 	and.w	r3, r3, #7
 80091b4:	683a      	ldr	r2, [r7, #0]
 80091b6:	429a      	cmp	r2, r3
 80091b8:	d90c      	bls.n	80091d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091ba:	4b65      	ldr	r3, [pc, #404]	; (8009350 <HAL_RCC_ClockConfig+0x1b8>)
 80091bc:	683a      	ldr	r2, [r7, #0]
 80091be:	b2d2      	uxtb	r2, r2
 80091c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091c2:	4b63      	ldr	r3, [pc, #396]	; (8009350 <HAL_RCC_ClockConfig+0x1b8>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f003 0307 	and.w	r3, r3, #7
 80091ca:	683a      	ldr	r2, [r7, #0]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d001      	beq.n	80091d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80091d0:	2301      	movs	r3, #1
 80091d2:	e0b8      	b.n	8009346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f003 0302 	and.w	r3, r3, #2
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d020      	beq.n	8009222 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	f003 0304 	and.w	r3, r3, #4
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d005      	beq.n	80091f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80091ec:	4b59      	ldr	r3, [pc, #356]	; (8009354 <HAL_RCC_ClockConfig+0x1bc>)
 80091ee:	689b      	ldr	r3, [r3, #8]
 80091f0:	4a58      	ldr	r2, [pc, #352]	; (8009354 <HAL_RCC_ClockConfig+0x1bc>)
 80091f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80091f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 0308 	and.w	r3, r3, #8
 8009200:	2b00      	cmp	r3, #0
 8009202:	d005      	beq.n	8009210 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009204:	4b53      	ldr	r3, [pc, #332]	; (8009354 <HAL_RCC_ClockConfig+0x1bc>)
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	4a52      	ldr	r2, [pc, #328]	; (8009354 <HAL_RCC_ClockConfig+0x1bc>)
 800920a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800920e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009210:	4b50      	ldr	r3, [pc, #320]	; (8009354 <HAL_RCC_ClockConfig+0x1bc>)
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	689b      	ldr	r3, [r3, #8]
 800921c:	494d      	ldr	r1, [pc, #308]	; (8009354 <HAL_RCC_ClockConfig+0x1bc>)
 800921e:	4313      	orrs	r3, r2
 8009220:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f003 0301 	and.w	r3, r3, #1
 800922a:	2b00      	cmp	r3, #0
 800922c:	d044      	beq.n	80092b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	685b      	ldr	r3, [r3, #4]
 8009232:	2b01      	cmp	r3, #1
 8009234:	d107      	bne.n	8009246 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009236:	4b47      	ldr	r3, [pc, #284]	; (8009354 <HAL_RCC_ClockConfig+0x1bc>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800923e:	2b00      	cmp	r3, #0
 8009240:	d119      	bne.n	8009276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009242:	2301      	movs	r3, #1
 8009244:	e07f      	b.n	8009346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	685b      	ldr	r3, [r3, #4]
 800924a:	2b02      	cmp	r3, #2
 800924c:	d003      	beq.n	8009256 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009252:	2b03      	cmp	r3, #3
 8009254:	d107      	bne.n	8009266 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009256:	4b3f      	ldr	r3, [pc, #252]	; (8009354 <HAL_RCC_ClockConfig+0x1bc>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800925e:	2b00      	cmp	r3, #0
 8009260:	d109      	bne.n	8009276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009262:	2301      	movs	r3, #1
 8009264:	e06f      	b.n	8009346 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009266:	4b3b      	ldr	r3, [pc, #236]	; (8009354 <HAL_RCC_ClockConfig+0x1bc>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f003 0302 	and.w	r3, r3, #2
 800926e:	2b00      	cmp	r3, #0
 8009270:	d101      	bne.n	8009276 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	e067      	b.n	8009346 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009276:	4b37      	ldr	r3, [pc, #220]	; (8009354 <HAL_RCC_ClockConfig+0x1bc>)
 8009278:	689b      	ldr	r3, [r3, #8]
 800927a:	f023 0203 	bic.w	r2, r3, #3
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	4934      	ldr	r1, [pc, #208]	; (8009354 <HAL_RCC_ClockConfig+0x1bc>)
 8009284:	4313      	orrs	r3, r2
 8009286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009288:	f7fc fe20 	bl	8005ecc <HAL_GetTick>
 800928c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800928e:	e00a      	b.n	80092a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009290:	f7fc fe1c 	bl	8005ecc <HAL_GetTick>
 8009294:	4602      	mov	r2, r0
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	1ad3      	subs	r3, r2, r3
 800929a:	f241 3288 	movw	r2, #5000	; 0x1388
 800929e:	4293      	cmp	r3, r2
 80092a0:	d901      	bls.n	80092a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80092a2:	2303      	movs	r3, #3
 80092a4:	e04f      	b.n	8009346 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80092a6:	4b2b      	ldr	r3, [pc, #172]	; (8009354 <HAL_RCC_ClockConfig+0x1bc>)
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	f003 020c 	and.w	r2, r3, #12
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	685b      	ldr	r3, [r3, #4]
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	429a      	cmp	r2, r3
 80092b6:	d1eb      	bne.n	8009290 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80092b8:	4b25      	ldr	r3, [pc, #148]	; (8009350 <HAL_RCC_ClockConfig+0x1b8>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 0307 	and.w	r3, r3, #7
 80092c0:	683a      	ldr	r2, [r7, #0]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d20c      	bcs.n	80092e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092c6:	4b22      	ldr	r3, [pc, #136]	; (8009350 <HAL_RCC_ClockConfig+0x1b8>)
 80092c8:	683a      	ldr	r2, [r7, #0]
 80092ca:	b2d2      	uxtb	r2, r2
 80092cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80092ce:	4b20      	ldr	r3, [pc, #128]	; (8009350 <HAL_RCC_ClockConfig+0x1b8>)
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f003 0307 	and.w	r3, r3, #7
 80092d6:	683a      	ldr	r2, [r7, #0]
 80092d8:	429a      	cmp	r2, r3
 80092da:	d001      	beq.n	80092e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80092dc:	2301      	movs	r3, #1
 80092de:	e032      	b.n	8009346 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f003 0304 	and.w	r3, r3, #4
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d008      	beq.n	80092fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80092ec:	4b19      	ldr	r3, [pc, #100]	; (8009354 <HAL_RCC_ClockConfig+0x1bc>)
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	68db      	ldr	r3, [r3, #12]
 80092f8:	4916      	ldr	r1, [pc, #88]	; (8009354 <HAL_RCC_ClockConfig+0x1bc>)
 80092fa:	4313      	orrs	r3, r2
 80092fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f003 0308 	and.w	r3, r3, #8
 8009306:	2b00      	cmp	r3, #0
 8009308:	d009      	beq.n	800931e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800930a:	4b12      	ldr	r3, [pc, #72]	; (8009354 <HAL_RCC_ClockConfig+0x1bc>)
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	691b      	ldr	r3, [r3, #16]
 8009316:	00db      	lsls	r3, r3, #3
 8009318:	490e      	ldr	r1, [pc, #56]	; (8009354 <HAL_RCC_ClockConfig+0x1bc>)
 800931a:	4313      	orrs	r3, r2
 800931c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800931e:	f000 f821 	bl	8009364 <HAL_RCC_GetSysClockFreq>
 8009322:	4602      	mov	r2, r0
 8009324:	4b0b      	ldr	r3, [pc, #44]	; (8009354 <HAL_RCC_ClockConfig+0x1bc>)
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	091b      	lsrs	r3, r3, #4
 800932a:	f003 030f 	and.w	r3, r3, #15
 800932e:	490a      	ldr	r1, [pc, #40]	; (8009358 <HAL_RCC_ClockConfig+0x1c0>)
 8009330:	5ccb      	ldrb	r3, [r1, r3]
 8009332:	fa22 f303 	lsr.w	r3, r2, r3
 8009336:	4a09      	ldr	r2, [pc, #36]	; (800935c <HAL_RCC_ClockConfig+0x1c4>)
 8009338:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800933a:	4b09      	ldr	r3, [pc, #36]	; (8009360 <HAL_RCC_ClockConfig+0x1c8>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	4618      	mov	r0, r3
 8009340:	f7fb fd82 	bl	8004e48 <HAL_InitTick>

  return HAL_OK;
 8009344:	2300      	movs	r3, #0
}
 8009346:	4618      	mov	r0, r3
 8009348:	3710      	adds	r7, #16
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	40023c00 	.word	0x40023c00
 8009354:	40023800 	.word	0x40023800
 8009358:	08019c18 	.word	0x08019c18
 800935c:	20000004 	.word	0x20000004
 8009360:	2000000c 	.word	0x2000000c

08009364 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009364:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8009368:	b084      	sub	sp, #16
 800936a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800936c:	2300      	movs	r3, #0
 800936e:	607b      	str	r3, [r7, #4]
 8009370:	2300      	movs	r3, #0
 8009372:	60fb      	str	r3, [r7, #12]
 8009374:	2300      	movs	r3, #0
 8009376:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8009378:	2300      	movs	r3, #0
 800937a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800937c:	4b67      	ldr	r3, [pc, #412]	; (800951c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800937e:	689b      	ldr	r3, [r3, #8]
 8009380:	f003 030c 	and.w	r3, r3, #12
 8009384:	2b08      	cmp	r3, #8
 8009386:	d00d      	beq.n	80093a4 <HAL_RCC_GetSysClockFreq+0x40>
 8009388:	2b08      	cmp	r3, #8
 800938a:	f200 80bd 	bhi.w	8009508 <HAL_RCC_GetSysClockFreq+0x1a4>
 800938e:	2b00      	cmp	r3, #0
 8009390:	d002      	beq.n	8009398 <HAL_RCC_GetSysClockFreq+0x34>
 8009392:	2b04      	cmp	r3, #4
 8009394:	d003      	beq.n	800939e <HAL_RCC_GetSysClockFreq+0x3a>
 8009396:	e0b7      	b.n	8009508 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009398:	4b61      	ldr	r3, [pc, #388]	; (8009520 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800939a:	60bb      	str	r3, [r7, #8]
       break;
 800939c:	e0b7      	b.n	800950e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800939e:	4b61      	ldr	r3, [pc, #388]	; (8009524 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80093a0:	60bb      	str	r3, [r7, #8]
      break;
 80093a2:	e0b4      	b.n	800950e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80093a4:	4b5d      	ldr	r3, [pc, #372]	; (800951c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80093ac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80093ae:	4b5b      	ldr	r3, [pc, #364]	; (800951c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80093b0:	685b      	ldr	r3, [r3, #4]
 80093b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d04d      	beq.n	8009456 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80093ba:	4b58      	ldr	r3, [pc, #352]	; (800951c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	099b      	lsrs	r3, r3, #6
 80093c0:	461a      	mov	r2, r3
 80093c2:	f04f 0300 	mov.w	r3, #0
 80093c6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80093ca:	f04f 0100 	mov.w	r1, #0
 80093ce:	ea02 0800 	and.w	r8, r2, r0
 80093d2:	ea03 0901 	and.w	r9, r3, r1
 80093d6:	4640      	mov	r0, r8
 80093d8:	4649      	mov	r1, r9
 80093da:	f04f 0200 	mov.w	r2, #0
 80093de:	f04f 0300 	mov.w	r3, #0
 80093e2:	014b      	lsls	r3, r1, #5
 80093e4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80093e8:	0142      	lsls	r2, r0, #5
 80093ea:	4610      	mov	r0, r2
 80093ec:	4619      	mov	r1, r3
 80093ee:	ebb0 0008 	subs.w	r0, r0, r8
 80093f2:	eb61 0109 	sbc.w	r1, r1, r9
 80093f6:	f04f 0200 	mov.w	r2, #0
 80093fa:	f04f 0300 	mov.w	r3, #0
 80093fe:	018b      	lsls	r3, r1, #6
 8009400:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009404:	0182      	lsls	r2, r0, #6
 8009406:	1a12      	subs	r2, r2, r0
 8009408:	eb63 0301 	sbc.w	r3, r3, r1
 800940c:	f04f 0000 	mov.w	r0, #0
 8009410:	f04f 0100 	mov.w	r1, #0
 8009414:	00d9      	lsls	r1, r3, #3
 8009416:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800941a:	00d0      	lsls	r0, r2, #3
 800941c:	4602      	mov	r2, r0
 800941e:	460b      	mov	r3, r1
 8009420:	eb12 0208 	adds.w	r2, r2, r8
 8009424:	eb43 0309 	adc.w	r3, r3, r9
 8009428:	f04f 0000 	mov.w	r0, #0
 800942c:	f04f 0100 	mov.w	r1, #0
 8009430:	0259      	lsls	r1, r3, #9
 8009432:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8009436:	0250      	lsls	r0, r2, #9
 8009438:	4602      	mov	r2, r0
 800943a:	460b      	mov	r3, r1
 800943c:	4610      	mov	r0, r2
 800943e:	4619      	mov	r1, r3
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	461a      	mov	r2, r3
 8009444:	f04f 0300 	mov.w	r3, #0
 8009448:	f7f7 fbfe 	bl	8000c48 <__aeabi_uldivmod>
 800944c:	4602      	mov	r2, r0
 800944e:	460b      	mov	r3, r1
 8009450:	4613      	mov	r3, r2
 8009452:	60fb      	str	r3, [r7, #12]
 8009454:	e04a      	b.n	80094ec <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009456:	4b31      	ldr	r3, [pc, #196]	; (800951c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	099b      	lsrs	r3, r3, #6
 800945c:	461a      	mov	r2, r3
 800945e:	f04f 0300 	mov.w	r3, #0
 8009462:	f240 10ff 	movw	r0, #511	; 0x1ff
 8009466:	f04f 0100 	mov.w	r1, #0
 800946a:	ea02 0400 	and.w	r4, r2, r0
 800946e:	ea03 0501 	and.w	r5, r3, r1
 8009472:	4620      	mov	r0, r4
 8009474:	4629      	mov	r1, r5
 8009476:	f04f 0200 	mov.w	r2, #0
 800947a:	f04f 0300 	mov.w	r3, #0
 800947e:	014b      	lsls	r3, r1, #5
 8009480:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009484:	0142      	lsls	r2, r0, #5
 8009486:	4610      	mov	r0, r2
 8009488:	4619      	mov	r1, r3
 800948a:	1b00      	subs	r0, r0, r4
 800948c:	eb61 0105 	sbc.w	r1, r1, r5
 8009490:	f04f 0200 	mov.w	r2, #0
 8009494:	f04f 0300 	mov.w	r3, #0
 8009498:	018b      	lsls	r3, r1, #6
 800949a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800949e:	0182      	lsls	r2, r0, #6
 80094a0:	1a12      	subs	r2, r2, r0
 80094a2:	eb63 0301 	sbc.w	r3, r3, r1
 80094a6:	f04f 0000 	mov.w	r0, #0
 80094aa:	f04f 0100 	mov.w	r1, #0
 80094ae:	00d9      	lsls	r1, r3, #3
 80094b0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80094b4:	00d0      	lsls	r0, r2, #3
 80094b6:	4602      	mov	r2, r0
 80094b8:	460b      	mov	r3, r1
 80094ba:	1912      	adds	r2, r2, r4
 80094bc:	eb45 0303 	adc.w	r3, r5, r3
 80094c0:	f04f 0000 	mov.w	r0, #0
 80094c4:	f04f 0100 	mov.w	r1, #0
 80094c8:	0299      	lsls	r1, r3, #10
 80094ca:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80094ce:	0290      	lsls	r0, r2, #10
 80094d0:	4602      	mov	r2, r0
 80094d2:	460b      	mov	r3, r1
 80094d4:	4610      	mov	r0, r2
 80094d6:	4619      	mov	r1, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	461a      	mov	r2, r3
 80094dc:	f04f 0300 	mov.w	r3, #0
 80094e0:	f7f7 fbb2 	bl	8000c48 <__aeabi_uldivmod>
 80094e4:	4602      	mov	r2, r0
 80094e6:	460b      	mov	r3, r1
 80094e8:	4613      	mov	r3, r2
 80094ea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80094ec:	4b0b      	ldr	r3, [pc, #44]	; (800951c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80094ee:	685b      	ldr	r3, [r3, #4]
 80094f0:	0c1b      	lsrs	r3, r3, #16
 80094f2:	f003 0303 	and.w	r3, r3, #3
 80094f6:	3301      	adds	r3, #1
 80094f8:	005b      	lsls	r3, r3, #1
 80094fa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80094fc:	68fa      	ldr	r2, [r7, #12]
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	fbb2 f3f3 	udiv	r3, r2, r3
 8009504:	60bb      	str	r3, [r7, #8]
      break;
 8009506:	e002      	b.n	800950e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009508:	4b05      	ldr	r3, [pc, #20]	; (8009520 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800950a:	60bb      	str	r3, [r7, #8]
      break;
 800950c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800950e:	68bb      	ldr	r3, [r7, #8]
}
 8009510:	4618      	mov	r0, r3
 8009512:	3710      	adds	r7, #16
 8009514:	46bd      	mov	sp, r7
 8009516:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800951a:	bf00      	nop
 800951c:	40023800 	.word	0x40023800
 8009520:	00f42400 	.word	0x00f42400
 8009524:	007a1200 	.word	0x007a1200

08009528 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009528:	b480      	push	{r7}
 800952a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800952c:	4b03      	ldr	r3, [pc, #12]	; (800953c <HAL_RCC_GetHCLKFreq+0x14>)
 800952e:	681b      	ldr	r3, [r3, #0]
}
 8009530:	4618      	mov	r0, r3
 8009532:	46bd      	mov	sp, r7
 8009534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop
 800953c:	20000004 	.word	0x20000004

08009540 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8009544:	f7ff fff0 	bl	8009528 <HAL_RCC_GetHCLKFreq>
 8009548:	4602      	mov	r2, r0
 800954a:	4b05      	ldr	r3, [pc, #20]	; (8009560 <HAL_RCC_GetPCLK1Freq+0x20>)
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	0a9b      	lsrs	r3, r3, #10
 8009550:	f003 0307 	and.w	r3, r3, #7
 8009554:	4903      	ldr	r1, [pc, #12]	; (8009564 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009556:	5ccb      	ldrb	r3, [r1, r3]
 8009558:	fa22 f303 	lsr.w	r3, r2, r3
}
 800955c:	4618      	mov	r0, r3
 800955e:	bd80      	pop	{r7, pc}
 8009560:	40023800 	.word	0x40023800
 8009564:	08019c28 	.word	0x08019c28

08009568 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	220f      	movs	r2, #15
 8009576:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009578:	4b12      	ldr	r3, [pc, #72]	; (80095c4 <HAL_RCC_GetClockConfig+0x5c>)
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	f003 0203 	and.w	r2, r3, #3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009584:	4b0f      	ldr	r3, [pc, #60]	; (80095c4 <HAL_RCC_GetClockConfig+0x5c>)
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009590:	4b0c      	ldr	r3, [pc, #48]	; (80095c4 <HAL_RCC_GetClockConfig+0x5c>)
 8009592:	689b      	ldr	r3, [r3, #8]
 8009594:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800959c:	4b09      	ldr	r3, [pc, #36]	; (80095c4 <HAL_RCC_GetClockConfig+0x5c>)
 800959e:	689b      	ldr	r3, [r3, #8]
 80095a0:	08db      	lsrs	r3, r3, #3
 80095a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80095aa:	4b07      	ldr	r3, [pc, #28]	; (80095c8 <HAL_RCC_GetClockConfig+0x60>)
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	f003 0207 	and.w	r2, r3, #7
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	601a      	str	r2, [r3, #0]
}
 80095b6:	bf00      	nop
 80095b8:	370c      	adds	r7, #12
 80095ba:	46bd      	mov	sp, r7
 80095bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c0:	4770      	bx	lr
 80095c2:	bf00      	nop
 80095c4:	40023800 	.word	0x40023800
 80095c8:	40023c00 	.word	0x40023c00

080095cc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b086      	sub	sp, #24
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80095d4:	2300      	movs	r3, #0
 80095d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80095d8:	2300      	movs	r3, #0
 80095da:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	f003 0301 	and.w	r3, r3, #1
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d105      	bne.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d035      	beq.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80095f4:	4b62      	ldr	r3, [pc, #392]	; (8009780 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80095f6:	2200      	movs	r2, #0
 80095f8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80095fa:	f7fc fc67 	bl	8005ecc <HAL_GetTick>
 80095fe:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009600:	e008      	b.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009602:	f7fc fc63 	bl	8005ecc <HAL_GetTick>
 8009606:	4602      	mov	r2, r0
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	1ad3      	subs	r3, r2, r3
 800960c:	2b02      	cmp	r3, #2
 800960e:	d901      	bls.n	8009614 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009610:	2303      	movs	r3, #3
 8009612:	e0b0      	b.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009614:	4b5b      	ldr	r3, [pc, #364]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800961c:	2b00      	cmp	r3, #0
 800961e:	d1f0      	bne.n	8009602 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	019a      	lsls	r2, r3, #6
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	689b      	ldr	r3, [r3, #8]
 800962a:	071b      	lsls	r3, r3, #28
 800962c:	4955      	ldr	r1, [pc, #340]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800962e:	4313      	orrs	r3, r2
 8009630:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009634:	4b52      	ldr	r3, [pc, #328]	; (8009780 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009636:	2201      	movs	r2, #1
 8009638:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800963a:	f7fc fc47 	bl	8005ecc <HAL_GetTick>
 800963e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009640:	e008      	b.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009642:	f7fc fc43 	bl	8005ecc <HAL_GetTick>
 8009646:	4602      	mov	r2, r0
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	1ad3      	subs	r3, r2, r3
 800964c:	2b02      	cmp	r3, #2
 800964e:	d901      	bls.n	8009654 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009650:	2303      	movs	r3, #3
 8009652:	e090      	b.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009654:	4b4b      	ldr	r3, [pc, #300]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800965c:	2b00      	cmp	r3, #0
 800965e:	d0f0      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f003 0302 	and.w	r3, r3, #2
 8009668:	2b00      	cmp	r3, #0
 800966a:	f000 8083 	beq.w	8009774 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800966e:	2300      	movs	r3, #0
 8009670:	60fb      	str	r3, [r7, #12]
 8009672:	4b44      	ldr	r3, [pc, #272]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009676:	4a43      	ldr	r2, [pc, #268]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800967c:	6413      	str	r3, [r2, #64]	; 0x40
 800967e:	4b41      	ldr	r3, [pc, #260]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009686:	60fb      	str	r3, [r7, #12]
 8009688:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800968a:	4b3f      	ldr	r3, [pc, #252]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a3e      	ldr	r2, [pc, #248]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009690:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009694:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009696:	f7fc fc19 	bl	8005ecc <HAL_GetTick>
 800969a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800969c:	e008      	b.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800969e:	f7fc fc15 	bl	8005ecc <HAL_GetTick>
 80096a2:	4602      	mov	r2, r0
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	1ad3      	subs	r3, r2, r3
 80096a8:	2b02      	cmp	r3, #2
 80096aa:	d901      	bls.n	80096b0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80096ac:	2303      	movs	r3, #3
 80096ae:	e062      	b.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80096b0:	4b35      	ldr	r3, [pc, #212]	; (8009788 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d0f0      	beq.n	800969e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80096bc:	4b31      	ldr	r3, [pc, #196]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80096be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096c4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d02f      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096d4:	693a      	ldr	r2, [r7, #16]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d028      	beq.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80096da:	4b2a      	ldr	r3, [pc, #168]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80096dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096e2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80096e4:	4b29      	ldr	r3, [pc, #164]	; (800978c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80096e6:	2201      	movs	r2, #1
 80096e8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80096ea:	4b28      	ldr	r3, [pc, #160]	; (800978c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80096ec:	2200      	movs	r2, #0
 80096ee:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80096f0:	4a24      	ldr	r2, [pc, #144]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80096f6:	4b23      	ldr	r3, [pc, #140]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80096f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096fa:	f003 0301 	and.w	r3, r3, #1
 80096fe:	2b01      	cmp	r3, #1
 8009700:	d114      	bne.n	800972c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009702:	f7fc fbe3 	bl	8005ecc <HAL_GetTick>
 8009706:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009708:	e00a      	b.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800970a:	f7fc fbdf 	bl	8005ecc <HAL_GetTick>
 800970e:	4602      	mov	r2, r0
 8009710:	697b      	ldr	r3, [r7, #20]
 8009712:	1ad3      	subs	r3, r2, r3
 8009714:	f241 3288 	movw	r2, #5000	; 0x1388
 8009718:	4293      	cmp	r3, r2
 800971a:	d901      	bls.n	8009720 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800971c:	2303      	movs	r3, #3
 800971e:	e02a      	b.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009720:	4b18      	ldr	r3, [pc, #96]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009724:	f003 0302 	and.w	r3, r3, #2
 8009728:	2b00      	cmp	r3, #0
 800972a:	d0ee      	beq.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009734:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009738:	d10d      	bne.n	8009756 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800973a:	4b12      	ldr	r3, [pc, #72]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	68db      	ldr	r3, [r3, #12]
 8009746:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800974a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800974e:	490d      	ldr	r1, [pc, #52]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009750:	4313      	orrs	r3, r2
 8009752:	608b      	str	r3, [r1, #8]
 8009754:	e005      	b.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009756:	4b0b      	ldr	r3, [pc, #44]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009758:	689b      	ldr	r3, [r3, #8]
 800975a:	4a0a      	ldr	r2, [pc, #40]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800975c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009760:	6093      	str	r3, [r2, #8]
 8009762:	4b08      	ldr	r3, [pc, #32]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009764:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800976e:	4905      	ldr	r1, [pc, #20]	; (8009784 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009770:	4313      	orrs	r3, r2
 8009772:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8009774:	2300      	movs	r3, #0
}
 8009776:	4618      	mov	r0, r3
 8009778:	3718      	adds	r7, #24
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
 800977e:	bf00      	nop
 8009780:	42470068 	.word	0x42470068
 8009784:	40023800 	.word	0x40023800
 8009788:	40007000 	.word	0x40007000
 800978c:	42470e40 	.word	0x42470e40

08009790 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b082      	sub	sp, #8
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d101      	bne.n	80097a2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800979e:	2301      	movs	r3, #1
 80097a0:	e01c      	b.n	80097dc <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	795b      	ldrb	r3, [r3, #5]
 80097a6:	b2db      	uxtb	r3, r3
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d105      	bne.n	80097b8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2200      	movs	r2, #0
 80097b0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80097b2:	6878      	ldr	r0, [r7, #4]
 80097b4:	f7fb f9de 	bl	8004b74 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2202      	movs	r2, #2
 80097bc:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f042 0204 	orr.w	r2, r2, #4
 80097cc:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2201      	movs	r2, #1
 80097d2:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3708      	adds	r7, #8
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bd80      	pop	{r7, pc}

080097e4 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
 80097ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80097ee:	2300      	movs	r3, #0
 80097f0:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	791b      	ldrb	r3, [r3, #4]
 80097f6:	2b01      	cmp	r3, #1
 80097f8:	d101      	bne.n	80097fe <HAL_RNG_GenerateRandomNumber+0x1a>
 80097fa:	2302      	movs	r3, #2
 80097fc:	e044      	b.n	8009888 <HAL_RNG_GenerateRandomNumber+0xa4>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2201      	movs	r2, #1
 8009802:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	795b      	ldrb	r3, [r3, #5]
 8009808:	b2db      	uxtb	r3, r3
 800980a:	2b01      	cmp	r3, #1
 800980c:	d133      	bne.n	8009876 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2202      	movs	r2, #2
 8009812:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009814:	f7fc fb5a 	bl	8005ecc <HAL_GetTick>
 8009818:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800981a:	e018      	b.n	800984e <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800981c:	f7fc fb56 	bl	8005ecc <HAL_GetTick>
 8009820:	4602      	mov	r2, r0
 8009822:	68bb      	ldr	r3, [r7, #8]
 8009824:	1ad3      	subs	r3, r2, r3
 8009826:	2b02      	cmp	r3, #2
 8009828:	d911      	bls.n	800984e <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	f003 0301 	and.w	r3, r3, #1
 8009834:	2b01      	cmp	r3, #1
 8009836:	d00a      	beq.n	800984e <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	2201      	movs	r2, #1
 800983c:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2202      	movs	r2, #2
 8009842:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e01c      	b.n	8009888 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	685b      	ldr	r3, [r3, #4]
 8009854:	f003 0301 	and.w	r3, r3, #1
 8009858:	2b01      	cmp	r3, #1
 800985a:	d1df      	bne.n	800981c <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	689a      	ldr	r2, [r3, #8]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	68da      	ldr	r2, [r3, #12]
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2201      	movs	r2, #1
 8009872:	715a      	strb	r2, [r3, #5]
 8009874:	e004      	b.n	8009880 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2204      	movs	r2, #4
 800987a:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 800987c:	2301      	movs	r3, #1
 800987e:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	2200      	movs	r2, #0
 8009884:	711a      	strb	r2, [r3, #4]

  return status;
 8009886:	7bfb      	ldrb	r3, [r7, #15]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b082      	sub	sp, #8
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	330c      	adds	r3, #12
 800989c:	4619      	mov	r1, r3
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f7ff ffa0 	bl	80097e4 <HAL_RNG_GenerateRandomNumber>
 80098a4:	4603      	mov	r3, r0
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d102      	bne.n	80098b0 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	68db      	ldr	r3, [r3, #12]
 80098ae:	e000      	b.n	80098b2 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 80098b0:	2300      	movs	r3, #0
  }
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3708      	adds	r7, #8
 80098b6:	46bd      	mov	sp, r7
 80098b8:	bd80      	pop	{r7, pc}

080098ba <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80098ba:	b580      	push	{r7, lr}
 80098bc:	b082      	sub	sp, #8
 80098be:	af00      	add	r7, sp, #0
 80098c0:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d101      	bne.n	80098cc <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80098c8:	2301      	movs	r3, #1
 80098ca:	e083      	b.n	80099d4 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	7f5b      	ldrb	r3, [r3, #29]
 80098d0:	b2db      	uxtb	r3, r3
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d105      	bne.n	80098e2 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f7fb f96b 	bl	8004bb8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2202      	movs	r2, #2
 80098e6:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	22ca      	movs	r2, #202	; 0xca
 80098ee:	625a      	str	r2, [r3, #36]	; 0x24
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	2253      	movs	r2, #83	; 0x53
 80098f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 fbc0 	bl	800a07e <RTC_EnterInitMode>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	d008      	beq.n	8009916 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	22ff      	movs	r2, #255	; 0xff
 800990a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2204      	movs	r2, #4
 8009910:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	e05e      	b.n	80099d4 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	6812      	ldr	r2, [r2, #0]
 8009920:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009924:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009928:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	6899      	ldr	r1, [r3, #8]
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	685a      	ldr	r2, [r3, #4]
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	431a      	orrs	r2, r3
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	695b      	ldr	r3, [r3, #20]
 800993e:	431a      	orrs	r2, r3
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	430a      	orrs	r2, r1
 8009946:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	687a      	ldr	r2, [r7, #4]
 800994e:	68d2      	ldr	r2, [r2, #12]
 8009950:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	6919      	ldr	r1, [r3, #16]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	689b      	ldr	r3, [r3, #8]
 800995c:	041a      	lsls	r2, r3, #16
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	430a      	orrs	r2, r1
 8009964:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	68da      	ldr	r2, [r3, #12]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009974:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	f003 0320 	and.w	r3, r3, #32
 8009980:	2b00      	cmp	r3, #0
 8009982:	d10e      	bne.n	80099a2 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009984:	6878      	ldr	r0, [r7, #4]
 8009986:	f000 fb52 	bl	800a02e <HAL_RTC_WaitForSynchro>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d008      	beq.n	80099a2 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	22ff      	movs	r2, #255	; 0xff
 8009996:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2204      	movs	r2, #4
 800999c:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800999e:	2301      	movs	r3, #1
 80099a0:	e018      	b.n	80099d4 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80099b0:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	699a      	ldr	r2, [r3, #24]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	430a      	orrs	r2, r1
 80099c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	22ff      	movs	r2, #255	; 0xff
 80099ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80099d2:	2300      	movs	r3, #0
  }
}
 80099d4:	4618      	mov	r0, r3
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}

080099dc <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80099dc:	b590      	push	{r4, r7, lr}
 80099de:	b087      	sub	sp, #28
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	60f8      	str	r0, [r7, #12]
 80099e4:	60b9      	str	r1, [r7, #8]
 80099e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80099e8:	2300      	movs	r3, #0
 80099ea:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	7f1b      	ldrb	r3, [r3, #28]
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d101      	bne.n	80099f8 <HAL_RTC_SetTime+0x1c>
 80099f4:	2302      	movs	r3, #2
 80099f6:	e0aa      	b.n	8009b4e <HAL_RTC_SetTime+0x172>
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	2201      	movs	r2, #1
 80099fc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2202      	movs	r2, #2
 8009a02:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d126      	bne.n	8009a58 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	689b      	ldr	r3, [r3, #8]
 8009a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d102      	bne.n	8009a1e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009a18:	68bb      	ldr	r3, [r7, #8]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	4618      	mov	r0, r3
 8009a24:	f000 fb57 	bl	800a0d6 <RTC_ByteToBcd2>
 8009a28:	4603      	mov	r3, r0
 8009a2a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	785b      	ldrb	r3, [r3, #1]
 8009a30:	4618      	mov	r0, r3
 8009a32:	f000 fb50 	bl	800a0d6 <RTC_ByteToBcd2>
 8009a36:	4603      	mov	r3, r0
 8009a38:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009a3a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	789b      	ldrb	r3, [r3, #2]
 8009a40:	4618      	mov	r0, r3
 8009a42:	f000 fb48 	bl	800a0d6 <RTC_ByteToBcd2>
 8009a46:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009a48:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	78db      	ldrb	r3, [r3, #3]
 8009a50:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009a52:	4313      	orrs	r3, r2
 8009a54:	617b      	str	r3, [r7, #20]
 8009a56:	e018      	b.n	8009a8a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d102      	bne.n	8009a6c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009a66:	68bb      	ldr	r3, [r7, #8]
 8009a68:	2200      	movs	r2, #0
 8009a6a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	781b      	ldrb	r3, [r3, #0]
 8009a70:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	785b      	ldrb	r3, [r3, #1]
 8009a76:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009a78:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009a7a:	68ba      	ldr	r2, [r7, #8]
 8009a7c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009a7e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	78db      	ldrb	r3, [r3, #3]
 8009a84:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009a86:	4313      	orrs	r3, r2
 8009a88:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	22ca      	movs	r2, #202	; 0xca
 8009a90:	625a      	str	r2, [r3, #36]	; 0x24
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2253      	movs	r2, #83	; 0x53
 8009a98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f000 faef 	bl	800a07e <RTC_EnterInitMode>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00b      	beq.n	8009abe <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	22ff      	movs	r2, #255	; 0xff
 8009aac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2204      	movs	r2, #4
 8009ab2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009aba:	2301      	movs	r3, #1
 8009abc:	e047      	b.n	8009b4e <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	697b      	ldr	r3, [r7, #20]
 8009ac4:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009ac8:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009acc:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	689a      	ldr	r2, [r3, #8]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009adc:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	6899      	ldr	r1, [r3, #8]
 8009ae4:	68bb      	ldr	r3, [r7, #8]
 8009ae6:	68da      	ldr	r2, [r3, #12]
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	691b      	ldr	r3, [r3, #16]
 8009aec:	431a      	orrs	r2, r3
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	430a      	orrs	r2, r1
 8009af4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	68da      	ldr	r2, [r3, #12]
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009b04:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	f003 0320 	and.w	r3, r3, #32
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d111      	bne.n	8009b38 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009b14:	68f8      	ldr	r0, [r7, #12]
 8009b16:	f000 fa8a 	bl	800a02e <HAL_RTC_WaitForSynchro>
 8009b1a:	4603      	mov	r3, r0
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d00b      	beq.n	8009b38 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	22ff      	movs	r2, #255	; 0xff
 8009b26:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2204      	movs	r2, #4
 8009b2c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2200      	movs	r2, #0
 8009b32:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009b34:	2301      	movs	r3, #1
 8009b36:	e00a      	b.n	8009b4e <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	22ff      	movs	r2, #255	; 0xff
 8009b3e:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	2201      	movs	r2, #1
 8009b44:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8009b4c:	2300      	movs	r3, #0
  }
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	371c      	adds	r7, #28
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd90      	pop	{r4, r7, pc}

08009b56 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b086      	sub	sp, #24
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	60f8      	str	r0, [r7, #12]
 8009b5e:	60b9      	str	r1, [r7, #8]
 8009b60:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009b62:	2300      	movs	r3, #0
 8009b64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	691b      	ldr	r3, [r3, #16]
 8009b76:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009b7a:	68bb      	ldr	r3, [r7, #8]
 8009b7c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009b88:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009b8c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8009b8e:	697b      	ldr	r3, [r7, #20]
 8009b90:	0c1b      	lsrs	r3, r3, #16
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b98:	b2da      	uxtb	r2, r3
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	0a1b      	lsrs	r3, r3, #8
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009bae:	697b      	ldr	r3, [r7, #20]
 8009bb0:	b2db      	uxtb	r3, r3
 8009bb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009bb6:	b2da      	uxtb	r2, r3
 8009bb8:	68bb      	ldr	r3, [r7, #8]
 8009bba:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	0c1b      	lsrs	r3, r3, #16
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bc6:	b2da      	uxtb	r2, r3
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d11a      	bne.n	8009c08 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	f000 fa9b 	bl	800a112 <RTC_Bcd2ToByte>
 8009bdc:	4603      	mov	r3, r0
 8009bde:	461a      	mov	r2, r3
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	785b      	ldrb	r3, [r3, #1]
 8009be8:	4618      	mov	r0, r3
 8009bea:	f000 fa92 	bl	800a112 <RTC_Bcd2ToByte>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	789b      	ldrb	r3, [r3, #2]
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	f000 fa89 	bl	800a112 <RTC_Bcd2ToByte>
 8009c00:	4603      	mov	r3, r0
 8009c02:	461a      	mov	r2, r3
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009c08:	2300      	movs	r3, #0
}
 8009c0a:	4618      	mov	r0, r3
 8009c0c:	3718      	adds	r7, #24
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bd80      	pop	{r7, pc}

08009c12 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009c12:	b590      	push	{r4, r7, lr}
 8009c14:	b087      	sub	sp, #28
 8009c16:	af00      	add	r7, sp, #0
 8009c18:	60f8      	str	r0, [r7, #12]
 8009c1a:	60b9      	str	r1, [r7, #8]
 8009c1c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	7f1b      	ldrb	r3, [r3, #28]
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d101      	bne.n	8009c2e <HAL_RTC_SetDate+0x1c>
 8009c2a:	2302      	movs	r3, #2
 8009c2c:	e094      	b.n	8009d58 <HAL_RTC_SetDate+0x146>
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2201      	movs	r2, #1
 8009c32:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	2202      	movs	r2, #2
 8009c38:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d10e      	bne.n	8009c5e <HAL_RTC_SetDate+0x4c>
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	785b      	ldrb	r3, [r3, #1]
 8009c44:	f003 0310 	and.w	r3, r3, #16
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d008      	beq.n	8009c5e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	785b      	ldrb	r3, [r3, #1]
 8009c50:	f023 0310 	bic.w	r3, r3, #16
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	330a      	adds	r3, #10
 8009c58:	b2da      	uxtb	r2, r3
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d11c      	bne.n	8009c9e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	78db      	ldrb	r3, [r3, #3]
 8009c68:	4618      	mov	r0, r3
 8009c6a:	f000 fa34 	bl	800a0d6 <RTC_ByteToBcd2>
 8009c6e:	4603      	mov	r3, r0
 8009c70:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	785b      	ldrb	r3, [r3, #1]
 8009c76:	4618      	mov	r0, r3
 8009c78:	f000 fa2d 	bl	800a0d6 <RTC_ByteToBcd2>
 8009c7c:	4603      	mov	r3, r0
 8009c7e:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009c80:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	789b      	ldrb	r3, [r3, #2]
 8009c86:	4618      	mov	r0, r3
 8009c88:	f000 fa25 	bl	800a0d6 <RTC_ByteToBcd2>
 8009c8c:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8009c8e:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	781b      	ldrb	r3, [r3, #0]
 8009c96:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	617b      	str	r3, [r7, #20]
 8009c9c:	e00e      	b.n	8009cbc <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	78db      	ldrb	r3, [r3, #3]
 8009ca2:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	785b      	ldrb	r3, [r3, #1]
 8009ca8:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009caa:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009cac:	68ba      	ldr	r2, [r7, #8]
 8009cae:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8009cb0:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	781b      	ldrb	r3, [r3, #0]
 8009cb6:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8009cb8:	4313      	orrs	r3, r2
 8009cba:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	22ca      	movs	r2, #202	; 0xca
 8009cc2:	625a      	str	r2, [r3, #36]	; 0x24
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	2253      	movs	r2, #83	; 0x53
 8009cca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009ccc:	68f8      	ldr	r0, [r7, #12]
 8009cce:	f000 f9d6 	bl	800a07e <RTC_EnterInitMode>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00b      	beq.n	8009cf0 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	22ff      	movs	r2, #255	; 0xff
 8009cde:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	2204      	movs	r2, #4
 8009ce4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2200      	movs	r2, #0
 8009cea:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009cec:	2301      	movs	r3, #1
 8009cee:	e033      	b.n	8009d58 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	697b      	ldr	r3, [r7, #20]
 8009cf6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009cfa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009cfe:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	68da      	ldr	r2, [r3, #12]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009d0e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	f003 0320 	and.w	r3, r3, #32
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d111      	bne.n	8009d42 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009d1e:	68f8      	ldr	r0, [r7, #12]
 8009d20:	f000 f985 	bl	800a02e <HAL_RTC_WaitForSynchro>
 8009d24:	4603      	mov	r3, r0
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d00b      	beq.n	8009d42 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	22ff      	movs	r2, #255	; 0xff
 8009d30:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	2204      	movs	r2, #4
 8009d36:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009d3e:	2301      	movs	r3, #1
 8009d40:	e00a      	b.n	8009d58 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	22ff      	movs	r2, #255	; 0xff
 8009d48:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2201      	movs	r2, #1
 8009d4e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2200      	movs	r2, #0
 8009d54:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8009d56:	2300      	movs	r3, #0
  }
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	371c      	adds	r7, #28
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd90      	pop	{r4, r7, pc}

08009d60 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b086      	sub	sp, #24
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8009d6c:	2300      	movs	r3, #0
 8009d6e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8009d7a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009d7e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	0c1b      	lsrs	r3, r3, #16
 8009d84:	b2da      	uxtb	r2, r3
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	0a1b      	lsrs	r3, r3, #8
 8009d8e:	b2db      	uxtb	r3, r3
 8009d90:	f003 031f 	and.w	r3, r3, #31
 8009d94:	b2da      	uxtb	r2, r3
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009d9a:	697b      	ldr	r3, [r7, #20]
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009da2:	b2da      	uxtb	r2, r3
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8009da8:	697b      	ldr	r3, [r7, #20]
 8009daa:	0b5b      	lsrs	r3, r3, #13
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	f003 0307 	and.w	r3, r3, #7
 8009db2:	b2da      	uxtb	r2, r3
 8009db4:	68bb      	ldr	r3, [r7, #8]
 8009db6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d11a      	bne.n	8009df4 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	78db      	ldrb	r3, [r3, #3]
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f000 f9a5 	bl	800a112 <RTC_Bcd2ToByte>
 8009dc8:	4603      	mov	r3, r0
 8009dca:	461a      	mov	r2, r3
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009dd0:	68bb      	ldr	r3, [r7, #8]
 8009dd2:	785b      	ldrb	r3, [r3, #1]
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f000 f99c 	bl	800a112 <RTC_Bcd2ToByte>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	461a      	mov	r2, r3
 8009dde:	68bb      	ldr	r3, [r7, #8]
 8009de0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	789b      	ldrb	r3, [r3, #2]
 8009de6:	4618      	mov	r0, r3
 8009de8:	f000 f993 	bl	800a112 <RTC_Bcd2ToByte>
 8009dec:	4603      	mov	r3, r0
 8009dee:	461a      	mov	r2, r3
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009df4:	2300      	movs	r3, #0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3718      	adds	r7, #24
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}

08009dfe <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009dfe:	b590      	push	{r4, r7, lr}
 8009e00:	b089      	sub	sp, #36	; 0x24
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	60f8      	str	r0, [r7, #12]
 8009e06:	60b9      	str	r1, [r7, #8]
 8009e08:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8009e0e:	2300      	movs	r3, #0
 8009e10:	61fb      	str	r3, [r7, #28]
 8009e12:	2300      	movs	r3, #0
 8009e14:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	7f1b      	ldrb	r3, [r3, #28]
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d101      	bne.n	8009e22 <HAL_RTC_SetAlarm+0x24>
 8009e1e:	2302      	movs	r3, #2
 8009e20:	e101      	b.n	800a026 <HAL_RTC_SetAlarm+0x228>
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2201      	movs	r2, #1
 8009e26:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e28:	68fb      	ldr	r3, [r7, #12]
 8009e2a:	2202      	movs	r2, #2
 8009e2c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d137      	bne.n	8009ea4 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	689b      	ldr	r3, [r3, #8]
 8009e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d102      	bne.n	8009e48 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	2200      	movs	r2, #0
 8009e46:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	f000 f942 	bl	800a0d6 <RTC_ByteToBcd2>
 8009e52:	4603      	mov	r3, r0
 8009e54:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	785b      	ldrb	r3, [r3, #1]
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f000 f93b 	bl	800a0d6 <RTC_ByteToBcd2>
 8009e60:	4603      	mov	r3, r0
 8009e62:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8009e64:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	789b      	ldrb	r3, [r3, #2]
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	f000 f933 	bl	800a0d6 <RTC_ByteToBcd2>
 8009e70:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009e72:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	78db      	ldrb	r3, [r3, #3]
 8009e7a:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009e7c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009e80:	68bb      	ldr	r3, [r7, #8]
 8009e82:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009e86:	4618      	mov	r0, r3
 8009e88:	f000 f925 	bl	800a0d6 <RTC_ByteToBcd2>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009e90:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009e98:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	61fb      	str	r3, [r7, #28]
 8009ea2:	e023      	b.n	8009eec <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	689b      	ldr	r3, [r3, #8]
 8009eaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d102      	bne.n	8009eb8 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	2200      	movs	r2, #0
 8009eb6:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	785b      	ldrb	r3, [r3, #1]
 8009ec2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8009ec4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009ec6:	68ba      	ldr	r2, [r7, #8]
 8009ec8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8009eca:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009ecc:	68bb      	ldr	r3, [r7, #8]
 8009ece:	78db      	ldrb	r3, [r3, #3]
 8009ed0:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009ed2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009eda:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8009edc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009ede:	68bb      	ldr	r3, [r7, #8]
 8009ee0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8009ee2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	685a      	ldr	r2, [r3, #4]
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	699b      	ldr	r3, [r3, #24]
 8009ef4:	4313      	orrs	r3, r2
 8009ef6:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	22ca      	movs	r2, #202	; 0xca
 8009efe:	625a      	str	r2, [r3, #36]	; 0x24
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2253      	movs	r2, #83	; 0x53
 8009f06:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f10:	d13f      	bne.n	8009f92 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	689a      	ldr	r2, [r3, #8]
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009f20:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	689a      	ldr	r2, [r3, #8]
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009f30:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009f32:	f7fb ffcb 	bl	8005ecc <HAL_GetTick>
 8009f36:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8009f38:	e013      	b.n	8009f62 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009f3a:	f7fb ffc7 	bl	8005ecc <HAL_GetTick>
 8009f3e:	4602      	mov	r2, r0
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	1ad3      	subs	r3, r2, r3
 8009f44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f48:	d90b      	bls.n	8009f62 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	22ff      	movs	r2, #255	; 0xff
 8009f50:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	2203      	movs	r2, #3
 8009f56:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009f5e:	2303      	movs	r3, #3
 8009f60:	e061      	b.n	800a026 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68db      	ldr	r3, [r3, #12]
 8009f68:	f003 0301 	and.w	r3, r3, #1
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d0e4      	beq.n	8009f3a <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	69fa      	ldr	r2, [r7, #28]
 8009f76:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	697a      	ldr	r2, [r7, #20]
 8009f7e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	689a      	ldr	r2, [r3, #8]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009f8e:	609a      	str	r2, [r3, #8]
 8009f90:	e03e      	b.n	800a010 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	689a      	ldr	r2, [r3, #8]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009fa0:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	689a      	ldr	r2, [r3, #8]
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009fb0:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009fb2:	f7fb ff8b 	bl	8005ecc <HAL_GetTick>
 8009fb6:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009fb8:	e013      	b.n	8009fe2 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009fba:	f7fb ff87 	bl	8005ecc <HAL_GetTick>
 8009fbe:	4602      	mov	r2, r0
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	1ad3      	subs	r3, r2, r3
 8009fc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009fc8:	d90b      	bls.n	8009fe2 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	22ff      	movs	r2, #255	; 0xff
 8009fd0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2203      	movs	r2, #3
 8009fd6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2200      	movs	r2, #0
 8009fdc:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009fde:	2303      	movs	r3, #3
 8009fe0:	e021      	b.n	800a026 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	f003 0302 	and.w	r3, r3, #2
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d0e4      	beq.n	8009fba <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	69fa      	ldr	r2, [r7, #28]
 8009ff6:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	697a      	ldr	r2, [r7, #20]
 8009ffe:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	689a      	ldr	r2, [r3, #8]
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a00e:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	22ff      	movs	r2, #255	; 0xff
 800a016:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2201      	movs	r2, #1
 800a01c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2200      	movs	r2, #0
 800a022:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	3724      	adds	r7, #36	; 0x24
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd90      	pop	{r4, r7, pc}

0800a02e <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b084      	sub	sp, #16
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a036:	2300      	movs	r3, #0
 800a038:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	68da      	ldr	r2, [r3, #12]
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a048:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a04a:	f7fb ff3f 	bl	8005ecc <HAL_GetTick>
 800a04e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a050:	e009      	b.n	800a066 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a052:	f7fb ff3b 	bl	8005ecc <HAL_GetTick>
 800a056:	4602      	mov	r2, r0
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	1ad3      	subs	r3, r2, r3
 800a05c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a060:	d901      	bls.n	800a066 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a062:	2303      	movs	r3, #3
 800a064:	e007      	b.n	800a076 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	f003 0320 	and.w	r3, r3, #32
 800a070:	2b00      	cmp	r3, #0
 800a072:	d0ee      	beq.n	800a052 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a074:	2300      	movs	r3, #0
}
 800a076:	4618      	mov	r0, r3
 800a078:	3710      	adds	r7, #16
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}

0800a07e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a07e:	b580      	push	{r7, lr}
 800a080:	b084      	sub	sp, #16
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a086:	2300      	movs	r3, #0
 800a088:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a094:	2b00      	cmp	r3, #0
 800a096:	d119      	bne.n	800a0cc <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a0a0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a0a2:	f7fb ff13 	bl	8005ecc <HAL_GetTick>
 800a0a6:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a0a8:	e009      	b.n	800a0be <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a0aa:	f7fb ff0f 	bl	8005ecc <HAL_GetTick>
 800a0ae:	4602      	mov	r2, r0
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	1ad3      	subs	r3, r2, r3
 800a0b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a0b8:	d901      	bls.n	800a0be <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a0ba:	2303      	movs	r3, #3
 800a0bc:	e007      	b.n	800a0ce <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d0ee      	beq.n	800a0aa <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3710      	adds	r7, #16
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a0d6:	b480      	push	{r7}
 800a0d8:	b085      	sub	sp, #20
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	4603      	mov	r3, r0
 800a0de:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800a0e4:	e005      	b.n	800a0f2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	3301      	adds	r3, #1
 800a0ea:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800a0ec:	79fb      	ldrb	r3, [r7, #7]
 800a0ee:	3b0a      	subs	r3, #10
 800a0f0:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800a0f2:	79fb      	ldrb	r3, [r7, #7]
 800a0f4:	2b09      	cmp	r3, #9
 800a0f6:	d8f6      	bhi.n	800a0e6 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	b2db      	uxtb	r3, r3
 800a0fc:	011b      	lsls	r3, r3, #4
 800a0fe:	b2da      	uxtb	r2, r3
 800a100:	79fb      	ldrb	r3, [r7, #7]
 800a102:	4313      	orrs	r3, r2
 800a104:	b2db      	uxtb	r3, r3
}
 800a106:	4618      	mov	r0, r3
 800a108:	3714      	adds	r7, #20
 800a10a:	46bd      	mov	sp, r7
 800a10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a110:	4770      	bx	lr

0800a112 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a112:	b480      	push	{r7}
 800a114:	b085      	sub	sp, #20
 800a116:	af00      	add	r7, sp, #0
 800a118:	4603      	mov	r3, r0
 800a11a:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800a11c:	2300      	movs	r3, #0
 800a11e:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800a120:	79fb      	ldrb	r3, [r7, #7]
 800a122:	091b      	lsrs	r3, r3, #4
 800a124:	b2db      	uxtb	r3, r3
 800a126:	461a      	mov	r2, r3
 800a128:	4613      	mov	r3, r2
 800a12a:	009b      	lsls	r3, r3, #2
 800a12c:	4413      	add	r3, r2
 800a12e:	005b      	lsls	r3, r3, #1
 800a130:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800a132:	79fb      	ldrb	r3, [r7, #7]
 800a134:	f003 030f 	and.w	r3, r3, #15
 800a138:	b2da      	uxtb	r2, r3
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	4413      	add	r3, r2
 800a140:	b2db      	uxtb	r3, r3
}
 800a142:	4618      	mov	r0, r3
 800a144:	3714      	adds	r7, #20
 800a146:	46bd      	mov	sp, r7
 800a148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14c:	4770      	bx	lr

0800a14e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b082      	sub	sp, #8
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d101      	bne.n	800a160 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a15c:	2301      	movs	r3, #1
 800a15e:	e07b      	b.n	800a258 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a164:	2b00      	cmp	r3, #0
 800a166:	d108      	bne.n	800a17a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a170:	d009      	beq.n	800a186 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	61da      	str	r2, [r3, #28]
 800a178:	e005      	b.n	800a186 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a192:	b2db      	uxtb	r3, r3
 800a194:	2b00      	cmp	r3, #0
 800a196:	d106      	bne.n	800a1a6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f7fa fd33 	bl	8004c0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2202      	movs	r2, #2
 800a1aa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a1bc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a1ce:	431a      	orrs	r2, r3
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	68db      	ldr	r3, [r3, #12]
 800a1d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1d8:	431a      	orrs	r2, r3
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	691b      	ldr	r3, [r3, #16]
 800a1de:	f003 0302 	and.w	r3, r3, #2
 800a1e2:	431a      	orrs	r2, r3
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	695b      	ldr	r3, [r3, #20]
 800a1e8:	f003 0301 	and.w	r3, r3, #1
 800a1ec:	431a      	orrs	r2, r3
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	699b      	ldr	r3, [r3, #24]
 800a1f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a1f6:	431a      	orrs	r2, r3
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	69db      	ldr	r3, [r3, #28]
 800a1fc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a200:	431a      	orrs	r2, r3
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	6a1b      	ldr	r3, [r3, #32]
 800a206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a20a:	ea42 0103 	orr.w	r1, r2, r3
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a212:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	430a      	orrs	r2, r1
 800a21c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	699b      	ldr	r3, [r3, #24]
 800a222:	0c1b      	lsrs	r3, r3, #16
 800a224:	f003 0104 	and.w	r1, r3, #4
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a22c:	f003 0210 	and.w	r2, r3, #16
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	430a      	orrs	r2, r1
 800a236:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	69da      	ldr	r2, [r3, #28]
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a246:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2200      	movs	r2, #0
 800a24c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2201      	movs	r2, #1
 800a252:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a256:	2300      	movs	r3, #0
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3708      	adds	r7, #8
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b088      	sub	sp, #32
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	603b      	str	r3, [r7, #0]
 800a26c:	4613      	mov	r3, r2
 800a26e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a270:	2300      	movs	r3, #0
 800a272:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d101      	bne.n	800a282 <HAL_SPI_Transmit+0x22>
 800a27e:	2302      	movs	r3, #2
 800a280:	e126      	b.n	800a4d0 <HAL_SPI_Transmit+0x270>
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2201      	movs	r2, #1
 800a286:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a28a:	f7fb fe1f 	bl	8005ecc <HAL_GetTick>
 800a28e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a290:	88fb      	ldrh	r3, [r7, #6]
 800a292:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	2b01      	cmp	r3, #1
 800a29e:	d002      	beq.n	800a2a6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a2a0:	2302      	movs	r3, #2
 800a2a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a2a4:	e10b      	b.n	800a4be <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d002      	beq.n	800a2b2 <HAL_SPI_Transmit+0x52>
 800a2ac:	88fb      	ldrh	r3, [r7, #6]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d102      	bne.n	800a2b8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a2b6:	e102      	b.n	800a4be <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2203      	movs	r2, #3
 800a2bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	68ba      	ldr	r2, [r7, #8]
 800a2ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	88fa      	ldrh	r2, [r7, #6]
 800a2d0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	88fa      	ldrh	r2, [r7, #6]
 800a2d6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2fe:	d10f      	bne.n	800a320 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	681a      	ldr	r2, [r3, #0]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a30e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	681a      	ldr	r2, [r3, #0]
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a31e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a32a:	2b40      	cmp	r3, #64	; 0x40
 800a32c:	d007      	beq.n	800a33e <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a33c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	68db      	ldr	r3, [r3, #12]
 800a342:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a346:	d14b      	bne.n	800a3e0 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	685b      	ldr	r3, [r3, #4]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d002      	beq.n	800a356 <HAL_SPI_Transmit+0xf6>
 800a350:	8afb      	ldrh	r3, [r7, #22]
 800a352:	2b01      	cmp	r3, #1
 800a354:	d13e      	bne.n	800a3d4 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a35a:	881a      	ldrh	r2, [r3, #0]
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a366:	1c9a      	adds	r2, r3, #2
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a370:	b29b      	uxth	r3, r3
 800a372:	3b01      	subs	r3, #1
 800a374:	b29a      	uxth	r2, r3
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a37a:	e02b      	b.n	800a3d4 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	689b      	ldr	r3, [r3, #8]
 800a382:	f003 0302 	and.w	r3, r3, #2
 800a386:	2b02      	cmp	r3, #2
 800a388:	d112      	bne.n	800a3b0 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a38e:	881a      	ldrh	r2, [r3, #0]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a39a:	1c9a      	adds	r2, r3, #2
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	3b01      	subs	r3, #1
 800a3a8:	b29a      	uxth	r2, r3
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	86da      	strh	r2, [r3, #54]	; 0x36
 800a3ae:	e011      	b.n	800a3d4 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a3b0:	f7fb fd8c 	bl	8005ecc <HAL_GetTick>
 800a3b4:	4602      	mov	r2, r0
 800a3b6:	69bb      	ldr	r3, [r7, #24]
 800a3b8:	1ad3      	subs	r3, r2, r3
 800a3ba:	683a      	ldr	r2, [r7, #0]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d803      	bhi.n	800a3c8 <HAL_SPI_Transmit+0x168>
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3c6:	d102      	bne.n	800a3ce <HAL_SPI_Transmit+0x16e>
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d102      	bne.n	800a3d4 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a3ce:	2303      	movs	r3, #3
 800a3d0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a3d2:	e074      	b.n	800a4be <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a3d8:	b29b      	uxth	r3, r3
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d1ce      	bne.n	800a37c <HAL_SPI_Transmit+0x11c>
 800a3de:	e04c      	b.n	800a47a <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d002      	beq.n	800a3ee <HAL_SPI_Transmit+0x18e>
 800a3e8:	8afb      	ldrh	r3, [r7, #22]
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d140      	bne.n	800a470 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	330c      	adds	r3, #12
 800a3f8:	7812      	ldrb	r2, [r2, #0]
 800a3fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a400:	1c5a      	adds	r2, r3, #1
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	3b01      	subs	r3, #1
 800a40e:	b29a      	uxth	r2, r3
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a414:	e02c      	b.n	800a470 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	689b      	ldr	r3, [r3, #8]
 800a41c:	f003 0302 	and.w	r3, r3, #2
 800a420:	2b02      	cmp	r3, #2
 800a422:	d113      	bne.n	800a44c <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	330c      	adds	r3, #12
 800a42e:	7812      	ldrb	r2, [r2, #0]
 800a430:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a436:	1c5a      	adds	r2, r3, #1
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a440:	b29b      	uxth	r3, r3
 800a442:	3b01      	subs	r3, #1
 800a444:	b29a      	uxth	r2, r3
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	86da      	strh	r2, [r3, #54]	; 0x36
 800a44a:	e011      	b.n	800a470 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a44c:	f7fb fd3e 	bl	8005ecc <HAL_GetTick>
 800a450:	4602      	mov	r2, r0
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	1ad3      	subs	r3, r2, r3
 800a456:	683a      	ldr	r2, [r7, #0]
 800a458:	429a      	cmp	r2, r3
 800a45a:	d803      	bhi.n	800a464 <HAL_SPI_Transmit+0x204>
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a462:	d102      	bne.n	800a46a <HAL_SPI_Transmit+0x20a>
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	2b00      	cmp	r3, #0
 800a468:	d102      	bne.n	800a470 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a46a:	2303      	movs	r3, #3
 800a46c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a46e:	e026      	b.n	800a4be <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a474:	b29b      	uxth	r3, r3
 800a476:	2b00      	cmp	r3, #0
 800a478:	d1cd      	bne.n	800a416 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a47a:	69ba      	ldr	r2, [r7, #24]
 800a47c:	6839      	ldr	r1, [r7, #0]
 800a47e:	68f8      	ldr	r0, [r7, #12]
 800a480:	f000 fa62 	bl	800a948 <SPI_EndRxTxTransaction>
 800a484:	4603      	mov	r3, r0
 800a486:	2b00      	cmp	r3, #0
 800a488:	d002      	beq.n	800a490 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	2220      	movs	r2, #32
 800a48e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	689b      	ldr	r3, [r3, #8]
 800a494:	2b00      	cmp	r3, #0
 800a496:	d10a      	bne.n	800a4ae <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a498:	2300      	movs	r3, #0
 800a49a:	613b      	str	r3, [r7, #16]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	613b      	str	r3, [r7, #16]
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	689b      	ldr	r3, [r3, #8]
 800a4aa:	613b      	str	r3, [r7, #16]
 800a4ac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d002      	beq.n	800a4bc <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a4b6:	2301      	movs	r3, #1
 800a4b8:	77fb      	strb	r3, [r7, #31]
 800a4ba:	e000      	b.n	800a4be <HAL_SPI_Transmit+0x25e>
  }

error:
 800a4bc:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	2201      	movs	r2, #1
 800a4c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2200      	movs	r2, #0
 800a4ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a4ce:	7ffb      	ldrb	r3, [r7, #31]
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3720      	adds	r7, #32
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}

0800a4d8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b08c      	sub	sp, #48	; 0x30
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	60f8      	str	r0, [r7, #12]
 800a4e0:	60b9      	str	r1, [r7, #8]
 800a4e2:	607a      	str	r2, [r7, #4]
 800a4e4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a4f6:	2b01      	cmp	r3, #1
 800a4f8:	d101      	bne.n	800a4fe <HAL_SPI_TransmitReceive+0x26>
 800a4fa:	2302      	movs	r3, #2
 800a4fc:	e18a      	b.n	800a814 <HAL_SPI_TransmitReceive+0x33c>
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2201      	movs	r2, #1
 800a502:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a506:	f7fb fce1 	bl	8005ecc <HAL_GetTick>
 800a50a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a512:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a51c:	887b      	ldrh	r3, [r7, #2]
 800a51e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a520:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a524:	2b01      	cmp	r3, #1
 800a526:	d00f      	beq.n	800a548 <HAL_SPI_TransmitReceive+0x70>
 800a528:	69fb      	ldr	r3, [r7, #28]
 800a52a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a52e:	d107      	bne.n	800a540 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	689b      	ldr	r3, [r3, #8]
 800a534:	2b00      	cmp	r3, #0
 800a536:	d103      	bne.n	800a540 <HAL_SPI_TransmitReceive+0x68>
 800a538:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a53c:	2b04      	cmp	r3, #4
 800a53e:	d003      	beq.n	800a548 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a540:	2302      	movs	r3, #2
 800a542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a546:	e15b      	b.n	800a800 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a548:	68bb      	ldr	r3, [r7, #8]
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	d005      	beq.n	800a55a <HAL_SPI_TransmitReceive+0x82>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d002      	beq.n	800a55a <HAL_SPI_TransmitReceive+0x82>
 800a554:	887b      	ldrh	r3, [r7, #2]
 800a556:	2b00      	cmp	r3, #0
 800a558:	d103      	bne.n	800a562 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a560:	e14e      	b.n	800a800 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a568:	b2db      	uxtb	r3, r3
 800a56a:	2b04      	cmp	r3, #4
 800a56c:	d003      	beq.n	800a576 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2205      	movs	r2, #5
 800a572:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	2200      	movs	r2, #0
 800a57a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	887a      	ldrh	r2, [r7, #2]
 800a586:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	887a      	ldrh	r2, [r7, #2]
 800a58c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	887a      	ldrh	r2, [r7, #2]
 800a598:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	887a      	ldrh	r2, [r7, #2]
 800a59e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5b6:	2b40      	cmp	r3, #64	; 0x40
 800a5b8:	d007      	beq.n	800a5ca <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5c8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	68db      	ldr	r3, [r3, #12]
 800a5ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a5d2:	d178      	bne.n	800a6c6 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d002      	beq.n	800a5e2 <HAL_SPI_TransmitReceive+0x10a>
 800a5dc:	8b7b      	ldrh	r3, [r7, #26]
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d166      	bne.n	800a6b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5e6:	881a      	ldrh	r2, [r3, #0]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5f2:	1c9a      	adds	r2, r3, #2
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a5fc:	b29b      	uxth	r3, r3
 800a5fe:	3b01      	subs	r3, #1
 800a600:	b29a      	uxth	r2, r3
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a606:	e053      	b.n	800a6b0 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	f003 0302 	and.w	r3, r3, #2
 800a612:	2b02      	cmp	r3, #2
 800a614:	d11b      	bne.n	800a64e <HAL_SPI_TransmitReceive+0x176>
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d016      	beq.n	800a64e <HAL_SPI_TransmitReceive+0x176>
 800a620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a622:	2b01      	cmp	r3, #1
 800a624:	d113      	bne.n	800a64e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a62a:	881a      	ldrh	r2, [r3, #0]
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a636:	1c9a      	adds	r2, r3, #2
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a640:	b29b      	uxth	r3, r3
 800a642:	3b01      	subs	r3, #1
 800a644:	b29a      	uxth	r2, r3
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a64a:	2300      	movs	r3, #0
 800a64c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	689b      	ldr	r3, [r3, #8]
 800a654:	f003 0301 	and.w	r3, r3, #1
 800a658:	2b01      	cmp	r3, #1
 800a65a:	d119      	bne.n	800a690 <HAL_SPI_TransmitReceive+0x1b8>
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a660:	b29b      	uxth	r3, r3
 800a662:	2b00      	cmp	r3, #0
 800a664:	d014      	beq.n	800a690 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	68da      	ldr	r2, [r3, #12]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a670:	b292      	uxth	r2, r2
 800a672:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a678:	1c9a      	adds	r2, r3, #2
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a682:	b29b      	uxth	r3, r3
 800a684:	3b01      	subs	r3, #1
 800a686:	b29a      	uxth	r2, r3
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a68c:	2301      	movs	r3, #1
 800a68e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800a690:	f7fb fc1c 	bl	8005ecc <HAL_GetTick>
 800a694:	4602      	mov	r2, r0
 800a696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a698:	1ad3      	subs	r3, r2, r3
 800a69a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a69c:	429a      	cmp	r2, r3
 800a69e:	d807      	bhi.n	800a6b0 <HAL_SPI_TransmitReceive+0x1d8>
 800a6a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6a6:	d003      	beq.n	800a6b0 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800a6a8:	2303      	movs	r3, #3
 800a6aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a6ae:	e0a7      	b.n	800a800 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a6b4:	b29b      	uxth	r3, r3
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d1a6      	bne.n	800a608 <HAL_SPI_TransmitReceive+0x130>
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a6be:	b29b      	uxth	r3, r3
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d1a1      	bne.n	800a608 <HAL_SPI_TransmitReceive+0x130>
 800a6c4:	e07c      	b.n	800a7c0 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	685b      	ldr	r3, [r3, #4]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d002      	beq.n	800a6d4 <HAL_SPI_TransmitReceive+0x1fc>
 800a6ce:	8b7b      	ldrh	r3, [r7, #26]
 800a6d0:	2b01      	cmp	r3, #1
 800a6d2:	d16b      	bne.n	800a7ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	330c      	adds	r3, #12
 800a6de:	7812      	ldrb	r2, [r2, #0]
 800a6e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e6:	1c5a      	adds	r2, r3, #1
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	3b01      	subs	r3, #1
 800a6f4:	b29a      	uxth	r2, r3
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a6fa:	e057      	b.n	800a7ac <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	f003 0302 	and.w	r3, r3, #2
 800a706:	2b02      	cmp	r3, #2
 800a708:	d11c      	bne.n	800a744 <HAL_SPI_TransmitReceive+0x26c>
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a70e:	b29b      	uxth	r3, r3
 800a710:	2b00      	cmp	r3, #0
 800a712:	d017      	beq.n	800a744 <HAL_SPI_TransmitReceive+0x26c>
 800a714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a716:	2b01      	cmp	r3, #1
 800a718:	d114      	bne.n	800a744 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	330c      	adds	r3, #12
 800a724:	7812      	ldrb	r2, [r2, #0]
 800a726:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a72c:	1c5a      	adds	r2, r3, #1
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a736:	b29b      	uxth	r3, r3
 800a738:	3b01      	subs	r3, #1
 800a73a:	b29a      	uxth	r2, r3
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800a740:	2300      	movs	r3, #0
 800a742:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	f003 0301 	and.w	r3, r3, #1
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d119      	bne.n	800a786 <HAL_SPI_TransmitReceive+0x2ae>
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a756:	b29b      	uxth	r3, r3
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d014      	beq.n	800a786 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	68da      	ldr	r2, [r3, #12]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a766:	b2d2      	uxtb	r2, r2
 800a768:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a76e:	1c5a      	adds	r2, r3, #1
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a778:	b29b      	uxth	r3, r3
 800a77a:	3b01      	subs	r3, #1
 800a77c:	b29a      	uxth	r2, r3
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800a782:	2301      	movs	r3, #1
 800a784:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800a786:	f7fb fba1 	bl	8005ecc <HAL_GetTick>
 800a78a:	4602      	mov	r2, r0
 800a78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a78e:	1ad3      	subs	r3, r2, r3
 800a790:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a792:	429a      	cmp	r2, r3
 800a794:	d803      	bhi.n	800a79e <HAL_SPI_TransmitReceive+0x2c6>
 800a796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a798:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a79c:	d102      	bne.n	800a7a4 <HAL_SPI_TransmitReceive+0x2cc>
 800a79e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d103      	bne.n	800a7ac <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800a7a4:	2303      	movs	r3, #3
 800a7a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800a7aa:	e029      	b.n	800a800 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7b0:	b29b      	uxth	r3, r3
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d1a2      	bne.n	800a6fc <HAL_SPI_TransmitReceive+0x224>
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a7ba:	b29b      	uxth	r3, r3
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d19d      	bne.n	800a6fc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a7c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a7c4:	68f8      	ldr	r0, [r7, #12]
 800a7c6:	f000 f8bf 	bl	800a948 <SPI_EndRxTxTransaction>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d006      	beq.n	800a7de <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800a7d0:	2301      	movs	r3, #1
 800a7d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	2220      	movs	r2, #32
 800a7da:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800a7dc:	e010      	b.n	800a800 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	689b      	ldr	r3, [r3, #8]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d10b      	bne.n	800a7fe <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	617b      	str	r3, [r7, #20]
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	68db      	ldr	r3, [r3, #12]
 800a7f0:	617b      	str	r3, [r7, #20]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	689b      	ldr	r3, [r3, #8]
 800a7f8:	617b      	str	r3, [r7, #20]
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	e000      	b.n	800a800 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800a7fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	2201      	movs	r2, #1
 800a804:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	2200      	movs	r2, #0
 800a80c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a810:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800a814:	4618      	mov	r0, r3
 800a816:	3730      	adds	r7, #48	; 0x30
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a82a:	b2db      	uxtb	r3, r3
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800a838:	b580      	push	{r7, lr}
 800a83a:	b088      	sub	sp, #32
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	60f8      	str	r0, [r7, #12]
 800a840:	60b9      	str	r1, [r7, #8]
 800a842:	603b      	str	r3, [r7, #0]
 800a844:	4613      	mov	r3, r2
 800a846:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800a848:	f7fb fb40 	bl	8005ecc <HAL_GetTick>
 800a84c:	4602      	mov	r2, r0
 800a84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a850:	1a9b      	subs	r3, r3, r2
 800a852:	683a      	ldr	r2, [r7, #0]
 800a854:	4413      	add	r3, r2
 800a856:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800a858:	f7fb fb38 	bl	8005ecc <HAL_GetTick>
 800a85c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800a85e:	4b39      	ldr	r3, [pc, #228]	; (800a944 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	015b      	lsls	r3, r3, #5
 800a864:	0d1b      	lsrs	r3, r3, #20
 800a866:	69fa      	ldr	r2, [r7, #28]
 800a868:	fb02 f303 	mul.w	r3, r2, r3
 800a86c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a86e:	e054      	b.n	800a91a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a876:	d050      	beq.n	800a91a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800a878:	f7fb fb28 	bl	8005ecc <HAL_GetTick>
 800a87c:	4602      	mov	r2, r0
 800a87e:	69bb      	ldr	r3, [r7, #24]
 800a880:	1ad3      	subs	r3, r2, r3
 800a882:	69fa      	ldr	r2, [r7, #28]
 800a884:	429a      	cmp	r2, r3
 800a886:	d902      	bls.n	800a88e <SPI_WaitFlagStateUntilTimeout+0x56>
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d13d      	bne.n	800a90a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	685a      	ldr	r2, [r3, #4]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a89c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	685b      	ldr	r3, [r3, #4]
 800a8a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a8a6:	d111      	bne.n	800a8cc <SPI_WaitFlagStateUntilTimeout+0x94>
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	689b      	ldr	r3, [r3, #8]
 800a8ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a8b0:	d004      	beq.n	800a8bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	689b      	ldr	r3, [r3, #8]
 800a8b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a8ba:	d107      	bne.n	800a8cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	681a      	ldr	r2, [r3, #0]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a8ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a8d4:	d10f      	bne.n	800a8f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a8e4:	601a      	str	r2, [r3, #0]
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	681a      	ldr	r2, [r3, #0]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a8f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2201      	movs	r2, #1
 800a8fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	2200      	movs	r2, #0
 800a902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800a906:	2303      	movs	r3, #3
 800a908:	e017      	b.n	800a93a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800a90a:	697b      	ldr	r3, [r7, #20]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d101      	bne.n	800a914 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800a910:	2300      	movs	r3, #0
 800a912:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800a914:	697b      	ldr	r3, [r7, #20]
 800a916:	3b01      	subs	r3, #1
 800a918:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	689a      	ldr	r2, [r3, #8]
 800a920:	68bb      	ldr	r3, [r7, #8]
 800a922:	4013      	ands	r3, r2
 800a924:	68ba      	ldr	r2, [r7, #8]
 800a926:	429a      	cmp	r2, r3
 800a928:	bf0c      	ite	eq
 800a92a:	2301      	moveq	r3, #1
 800a92c:	2300      	movne	r3, #0
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	461a      	mov	r2, r3
 800a932:	79fb      	ldrb	r3, [r7, #7]
 800a934:	429a      	cmp	r2, r3
 800a936:	d19b      	bne.n	800a870 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3720      	adds	r7, #32
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	20000004 	.word	0x20000004

0800a948 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b088      	sub	sp, #32
 800a94c:	af02      	add	r7, sp, #8
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	60b9      	str	r1, [r7, #8]
 800a952:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800a954:	4b1b      	ldr	r3, [pc, #108]	; (800a9c4 <SPI_EndRxTxTransaction+0x7c>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	4a1b      	ldr	r2, [pc, #108]	; (800a9c8 <SPI_EndRxTxTransaction+0x80>)
 800a95a:	fba2 2303 	umull	r2, r3, r2, r3
 800a95e:	0d5b      	lsrs	r3, r3, #21
 800a960:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800a964:	fb02 f303 	mul.w	r3, r2, r3
 800a968:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	685b      	ldr	r3, [r3, #4]
 800a96e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a972:	d112      	bne.n	800a99a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	9300      	str	r3, [sp, #0]
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	2200      	movs	r2, #0
 800a97c:	2180      	movs	r1, #128	; 0x80
 800a97e:	68f8      	ldr	r0, [r7, #12]
 800a980:	f7ff ff5a 	bl	800a838 <SPI_WaitFlagStateUntilTimeout>
 800a984:	4603      	mov	r3, r0
 800a986:	2b00      	cmp	r3, #0
 800a988:	d016      	beq.n	800a9b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a98e:	f043 0220 	orr.w	r2, r3, #32
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800a996:	2303      	movs	r3, #3
 800a998:	e00f      	b.n	800a9ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d00a      	beq.n	800a9b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	3b01      	subs	r3, #1
 800a9a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9b0:	2b80      	cmp	r3, #128	; 0x80
 800a9b2:	d0f2      	beq.n	800a99a <SPI_EndRxTxTransaction+0x52>
 800a9b4:	e000      	b.n	800a9b8 <SPI_EndRxTxTransaction+0x70>
        break;
 800a9b6:	bf00      	nop
  }

  return HAL_OK;
 800a9b8:	2300      	movs	r3, #0
}
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	3718      	adds	r7, #24
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	bf00      	nop
 800a9c4:	20000004 	.word	0x20000004
 800a9c8:	165e9f81 	.word	0x165e9f81

0800a9cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d101      	bne.n	800a9de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e041      	b.n	800aa62 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9e4:	b2db      	uxtb	r3, r3
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d106      	bne.n	800a9f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	2200      	movs	r2, #0
 800a9ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f7fa f9a8 	bl	8004d48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2202      	movs	r2, #2
 800a9fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681a      	ldr	r2, [r3, #0]
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	3304      	adds	r3, #4
 800aa08:	4619      	mov	r1, r3
 800aa0a:	4610      	mov	r0, r2
 800aa0c:	f000 fac4 	bl	800af98 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2201      	movs	r2, #1
 800aa14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	2201      	movs	r2, #1
 800aa1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2201      	movs	r2, #1
 800aa24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2201      	movs	r2, #1
 800aa2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	2201      	movs	r2, #1
 800aa34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2201      	movs	r2, #1
 800aa3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2201      	movs	r2, #1
 800aa44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800aa60:	2300      	movs	r3, #0
}
 800aa62:	4618      	mov	r0, r3
 800aa64:	3708      	adds	r7, #8
 800aa66:	46bd      	mov	sp, r7
 800aa68:	bd80      	pop	{r7, pc}
	...

0800aa6c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b085      	sub	sp, #20
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d001      	beq.n	800aa84 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aa80:	2301      	movs	r3, #1
 800aa82:	e04e      	b.n	800ab22 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2202      	movs	r2, #2
 800aa88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	68da      	ldr	r2, [r3, #12]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f042 0201 	orr.w	r2, r2, #1
 800aa9a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a23      	ldr	r2, [pc, #140]	; (800ab30 <HAL_TIM_Base_Start_IT+0xc4>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d022      	beq.n	800aaec <HAL_TIM_Base_Start_IT+0x80>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aaae:	d01d      	beq.n	800aaec <HAL_TIM_Base_Start_IT+0x80>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a1f      	ldr	r2, [pc, #124]	; (800ab34 <HAL_TIM_Base_Start_IT+0xc8>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d018      	beq.n	800aaec <HAL_TIM_Base_Start_IT+0x80>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a1e      	ldr	r2, [pc, #120]	; (800ab38 <HAL_TIM_Base_Start_IT+0xcc>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d013      	beq.n	800aaec <HAL_TIM_Base_Start_IT+0x80>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a1c      	ldr	r2, [pc, #112]	; (800ab3c <HAL_TIM_Base_Start_IT+0xd0>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d00e      	beq.n	800aaec <HAL_TIM_Base_Start_IT+0x80>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a1b      	ldr	r2, [pc, #108]	; (800ab40 <HAL_TIM_Base_Start_IT+0xd4>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d009      	beq.n	800aaec <HAL_TIM_Base_Start_IT+0x80>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a19      	ldr	r2, [pc, #100]	; (800ab44 <HAL_TIM_Base_Start_IT+0xd8>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d004      	beq.n	800aaec <HAL_TIM_Base_Start_IT+0x80>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a18      	ldr	r2, [pc, #96]	; (800ab48 <HAL_TIM_Base_Start_IT+0xdc>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d111      	bne.n	800ab10 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	689b      	ldr	r3, [r3, #8]
 800aaf2:	f003 0307 	and.w	r3, r3, #7
 800aaf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	2b06      	cmp	r3, #6
 800aafc:	d010      	beq.n	800ab20 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	f042 0201 	orr.w	r2, r2, #1
 800ab0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab0e:	e007      	b.n	800ab20 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	681a      	ldr	r2, [r3, #0]
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f042 0201 	orr.w	r2, r2, #1
 800ab1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab20:	2300      	movs	r3, #0
}
 800ab22:	4618      	mov	r0, r3
 800ab24:	3714      	adds	r7, #20
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop
 800ab30:	40010000 	.word	0x40010000
 800ab34:	40000400 	.word	0x40000400
 800ab38:	40000800 	.word	0x40000800
 800ab3c:	40000c00 	.word	0x40000c00
 800ab40:	40010400 	.word	0x40010400
 800ab44:	40014000 	.word	0x40014000
 800ab48:	40001800 	.word	0x40001800

0800ab4c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b083      	sub	sp, #12
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	68da      	ldr	r2, [r3, #12]
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f022 0201 	bic.w	r2, r2, #1
 800ab62:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	6a1a      	ldr	r2, [r3, #32]
 800ab6a:	f241 1311 	movw	r3, #4369	; 0x1111
 800ab6e:	4013      	ands	r3, r2
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d10f      	bne.n	800ab94 <HAL_TIM_Base_Stop_IT+0x48>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	6a1a      	ldr	r2, [r3, #32]
 800ab7a:	f240 4344 	movw	r3, #1092	; 0x444
 800ab7e:	4013      	ands	r3, r2
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d107      	bne.n	800ab94 <HAL_TIM_Base_Stop_IT+0x48>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	f022 0201 	bic.w	r2, r2, #1
 800ab92:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2201      	movs	r2, #1
 800ab98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ab9c:	2300      	movs	r3, #0
}
 800ab9e:	4618      	mov	r0, r3
 800aba0:	370c      	adds	r7, #12
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr

0800abaa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800abaa:	b580      	push	{r7, lr}
 800abac:	b082      	sub	sp, #8
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	691b      	ldr	r3, [r3, #16]
 800abb8:	f003 0302 	and.w	r3, r3, #2
 800abbc:	2b02      	cmp	r3, #2
 800abbe:	d122      	bne.n	800ac06 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	68db      	ldr	r3, [r3, #12]
 800abc6:	f003 0302 	and.w	r3, r3, #2
 800abca:	2b02      	cmp	r3, #2
 800abcc:	d11b      	bne.n	800ac06 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f06f 0202 	mvn.w	r2, #2
 800abd6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	2201      	movs	r2, #1
 800abdc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	699b      	ldr	r3, [r3, #24]
 800abe4:	f003 0303 	and.w	r3, r3, #3
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d003      	beq.n	800abf4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800abec:	6878      	ldr	r0, [r7, #4]
 800abee:	f000 f9b5 	bl	800af5c <HAL_TIM_IC_CaptureCallback>
 800abf2:	e005      	b.n	800ac00 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f000 f9a7 	bl	800af48 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 f9b8 	bl	800af70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2200      	movs	r2, #0
 800ac04:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	691b      	ldr	r3, [r3, #16]
 800ac0c:	f003 0304 	and.w	r3, r3, #4
 800ac10:	2b04      	cmp	r3, #4
 800ac12:	d122      	bne.n	800ac5a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	68db      	ldr	r3, [r3, #12]
 800ac1a:	f003 0304 	and.w	r3, r3, #4
 800ac1e:	2b04      	cmp	r3, #4
 800ac20:	d11b      	bne.n	800ac5a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	f06f 0204 	mvn.w	r2, #4
 800ac2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2202      	movs	r2, #2
 800ac30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	699b      	ldr	r3, [r3, #24]
 800ac38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d003      	beq.n	800ac48 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac40:	6878      	ldr	r0, [r7, #4]
 800ac42:	f000 f98b 	bl	800af5c <HAL_TIM_IC_CaptureCallback>
 800ac46:	e005      	b.n	800ac54 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac48:	6878      	ldr	r0, [r7, #4]
 800ac4a:	f000 f97d 	bl	800af48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 f98e 	bl	800af70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2200      	movs	r2, #0
 800ac58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	691b      	ldr	r3, [r3, #16]
 800ac60:	f003 0308 	and.w	r3, r3, #8
 800ac64:	2b08      	cmp	r3, #8
 800ac66:	d122      	bne.n	800acae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	68db      	ldr	r3, [r3, #12]
 800ac6e:	f003 0308 	and.w	r3, r3, #8
 800ac72:	2b08      	cmp	r3, #8
 800ac74:	d11b      	bne.n	800acae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f06f 0208 	mvn.w	r2, #8
 800ac7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2204      	movs	r2, #4
 800ac84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	69db      	ldr	r3, [r3, #28]
 800ac8c:	f003 0303 	and.w	r3, r3, #3
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d003      	beq.n	800ac9c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac94:	6878      	ldr	r0, [r7, #4]
 800ac96:	f000 f961 	bl	800af5c <HAL_TIM_IC_CaptureCallback>
 800ac9a:	e005      	b.n	800aca8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 f953 	bl	800af48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 f964 	bl	800af70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	691b      	ldr	r3, [r3, #16]
 800acb4:	f003 0310 	and.w	r3, r3, #16
 800acb8:	2b10      	cmp	r3, #16
 800acba:	d122      	bne.n	800ad02 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	68db      	ldr	r3, [r3, #12]
 800acc2:	f003 0310 	and.w	r3, r3, #16
 800acc6:	2b10      	cmp	r3, #16
 800acc8:	d11b      	bne.n	800ad02 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f06f 0210 	mvn.w	r2, #16
 800acd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2208      	movs	r2, #8
 800acd8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	69db      	ldr	r3, [r3, #28]
 800ace0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d003      	beq.n	800acf0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 f937 	bl	800af5c <HAL_TIM_IC_CaptureCallback>
 800acee:	e005      	b.n	800acfc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 f929 	bl	800af48 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800acf6:	6878      	ldr	r0, [r7, #4]
 800acf8:	f000 f93a 	bl	800af70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2200      	movs	r2, #0
 800ad00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	691b      	ldr	r3, [r3, #16]
 800ad08:	f003 0301 	and.w	r3, r3, #1
 800ad0c:	2b01      	cmp	r3, #1
 800ad0e:	d10e      	bne.n	800ad2e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	68db      	ldr	r3, [r3, #12]
 800ad16:	f003 0301 	and.w	r3, r3, #1
 800ad1a:	2b01      	cmp	r3, #1
 800ad1c:	d107      	bne.n	800ad2e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	f06f 0201 	mvn.w	r2, #1
 800ad26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f7f9 fe31 	bl	8004990 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	691b      	ldr	r3, [r3, #16]
 800ad34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad38:	2b80      	cmp	r3, #128	; 0x80
 800ad3a:	d10e      	bne.n	800ad5a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	68db      	ldr	r3, [r3, #12]
 800ad42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad46:	2b80      	cmp	r3, #128	; 0x80
 800ad48:	d107      	bne.n	800ad5a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ad52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 fadf 	bl	800b318 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	691b      	ldr	r3, [r3, #16]
 800ad60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad64:	2b40      	cmp	r3, #64	; 0x40
 800ad66:	d10e      	bne.n	800ad86 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	68db      	ldr	r3, [r3, #12]
 800ad6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad72:	2b40      	cmp	r3, #64	; 0x40
 800ad74:	d107      	bne.n	800ad86 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ad7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f8ff 	bl	800af84 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	691b      	ldr	r3, [r3, #16]
 800ad8c:	f003 0320 	and.w	r3, r3, #32
 800ad90:	2b20      	cmp	r3, #32
 800ad92:	d10e      	bne.n	800adb2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	68db      	ldr	r3, [r3, #12]
 800ad9a:	f003 0320 	and.w	r3, r3, #32
 800ad9e:	2b20      	cmp	r3, #32
 800ada0:	d107      	bne.n	800adb2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f06f 0220 	mvn.w	r2, #32
 800adaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f000 faa9 	bl	800b304 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800adb2:	bf00      	nop
 800adb4:	3708      	adds	r7, #8
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	b084      	sub	sp, #16
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
 800adc2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800adc4:	2300      	movs	r3, #0
 800adc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800adce:	2b01      	cmp	r3, #1
 800add0:	d101      	bne.n	800add6 <HAL_TIM_ConfigClockSource+0x1c>
 800add2:	2302      	movs	r3, #2
 800add4:	e0b4      	b.n	800af40 <HAL_TIM_ConfigClockSource+0x186>
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2201      	movs	r2, #1
 800adda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2202      	movs	r2, #2
 800ade2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	689b      	ldr	r3, [r3, #8]
 800adec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800adee:	68bb      	ldr	r3, [r7, #8]
 800adf0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800adf4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800adf6:	68bb      	ldr	r3, [r7, #8]
 800adf8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800adfc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	68ba      	ldr	r2, [r7, #8]
 800ae04:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae0e:	d03e      	beq.n	800ae8e <HAL_TIM_ConfigClockSource+0xd4>
 800ae10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae14:	f200 8087 	bhi.w	800af26 <HAL_TIM_ConfigClockSource+0x16c>
 800ae18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae1c:	f000 8086 	beq.w	800af2c <HAL_TIM_ConfigClockSource+0x172>
 800ae20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae24:	d87f      	bhi.n	800af26 <HAL_TIM_ConfigClockSource+0x16c>
 800ae26:	2b70      	cmp	r3, #112	; 0x70
 800ae28:	d01a      	beq.n	800ae60 <HAL_TIM_ConfigClockSource+0xa6>
 800ae2a:	2b70      	cmp	r3, #112	; 0x70
 800ae2c:	d87b      	bhi.n	800af26 <HAL_TIM_ConfigClockSource+0x16c>
 800ae2e:	2b60      	cmp	r3, #96	; 0x60
 800ae30:	d050      	beq.n	800aed4 <HAL_TIM_ConfigClockSource+0x11a>
 800ae32:	2b60      	cmp	r3, #96	; 0x60
 800ae34:	d877      	bhi.n	800af26 <HAL_TIM_ConfigClockSource+0x16c>
 800ae36:	2b50      	cmp	r3, #80	; 0x50
 800ae38:	d03c      	beq.n	800aeb4 <HAL_TIM_ConfigClockSource+0xfa>
 800ae3a:	2b50      	cmp	r3, #80	; 0x50
 800ae3c:	d873      	bhi.n	800af26 <HAL_TIM_ConfigClockSource+0x16c>
 800ae3e:	2b40      	cmp	r3, #64	; 0x40
 800ae40:	d058      	beq.n	800aef4 <HAL_TIM_ConfigClockSource+0x13a>
 800ae42:	2b40      	cmp	r3, #64	; 0x40
 800ae44:	d86f      	bhi.n	800af26 <HAL_TIM_ConfigClockSource+0x16c>
 800ae46:	2b30      	cmp	r3, #48	; 0x30
 800ae48:	d064      	beq.n	800af14 <HAL_TIM_ConfigClockSource+0x15a>
 800ae4a:	2b30      	cmp	r3, #48	; 0x30
 800ae4c:	d86b      	bhi.n	800af26 <HAL_TIM_ConfigClockSource+0x16c>
 800ae4e:	2b20      	cmp	r3, #32
 800ae50:	d060      	beq.n	800af14 <HAL_TIM_ConfigClockSource+0x15a>
 800ae52:	2b20      	cmp	r3, #32
 800ae54:	d867      	bhi.n	800af26 <HAL_TIM_ConfigClockSource+0x16c>
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d05c      	beq.n	800af14 <HAL_TIM_ConfigClockSource+0x15a>
 800ae5a:	2b10      	cmp	r3, #16
 800ae5c:	d05a      	beq.n	800af14 <HAL_TIM_ConfigClockSource+0x15a>
 800ae5e:	e062      	b.n	800af26 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	6818      	ldr	r0, [r3, #0]
 800ae64:	683b      	ldr	r3, [r7, #0]
 800ae66:	6899      	ldr	r1, [r3, #8]
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	685a      	ldr	r2, [r3, #4]
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	f000 f9ac 	bl	800b1cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	689b      	ldr	r3, [r3, #8]
 800ae7a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ae7c:	68bb      	ldr	r3, [r7, #8]
 800ae7e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ae82:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	68ba      	ldr	r2, [r7, #8]
 800ae8a:	609a      	str	r2, [r3, #8]
      break;
 800ae8c:	e04f      	b.n	800af2e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	6818      	ldr	r0, [r3, #0]
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	6899      	ldr	r1, [r3, #8]
 800ae96:	683b      	ldr	r3, [r7, #0]
 800ae98:	685a      	ldr	r2, [r3, #4]
 800ae9a:	683b      	ldr	r3, [r7, #0]
 800ae9c:	68db      	ldr	r3, [r3, #12]
 800ae9e:	f000 f995 	bl	800b1cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	689a      	ldr	r2, [r3, #8]
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aeb0:	609a      	str	r2, [r3, #8]
      break;
 800aeb2:	e03c      	b.n	800af2e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6818      	ldr	r0, [r3, #0]
 800aeb8:	683b      	ldr	r3, [r7, #0]
 800aeba:	6859      	ldr	r1, [r3, #4]
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	68db      	ldr	r3, [r3, #12]
 800aec0:	461a      	mov	r2, r3
 800aec2:	f000 f909 	bl	800b0d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2150      	movs	r1, #80	; 0x50
 800aecc:	4618      	mov	r0, r3
 800aece:	f000 f962 	bl	800b196 <TIM_ITRx_SetConfig>
      break;
 800aed2:	e02c      	b.n	800af2e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6818      	ldr	r0, [r3, #0]
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	6859      	ldr	r1, [r3, #4]
 800aedc:	683b      	ldr	r3, [r7, #0]
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	461a      	mov	r2, r3
 800aee2:	f000 f928 	bl	800b136 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	2160      	movs	r1, #96	; 0x60
 800aeec:	4618      	mov	r0, r3
 800aeee:	f000 f952 	bl	800b196 <TIM_ITRx_SetConfig>
      break;
 800aef2:	e01c      	b.n	800af2e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6818      	ldr	r0, [r3, #0]
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	6859      	ldr	r1, [r3, #4]
 800aefc:	683b      	ldr	r3, [r7, #0]
 800aefe:	68db      	ldr	r3, [r3, #12]
 800af00:	461a      	mov	r2, r3
 800af02:	f000 f8e9 	bl	800b0d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	2140      	movs	r1, #64	; 0x40
 800af0c:	4618      	mov	r0, r3
 800af0e:	f000 f942 	bl	800b196 <TIM_ITRx_SetConfig>
      break;
 800af12:	e00c      	b.n	800af2e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681a      	ldr	r2, [r3, #0]
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4619      	mov	r1, r3
 800af1e:	4610      	mov	r0, r2
 800af20:	f000 f939 	bl	800b196 <TIM_ITRx_SetConfig>
      break;
 800af24:	e003      	b.n	800af2e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800af26:	2301      	movs	r3, #1
 800af28:	73fb      	strb	r3, [r7, #15]
      break;
 800af2a:	e000      	b.n	800af2e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800af2c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	2201      	movs	r2, #1
 800af32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	2200      	movs	r2, #0
 800af3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800af3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af40:	4618      	mov	r0, r3
 800af42:	3710      	adds	r7, #16
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800af50:	bf00      	nop
 800af52:	370c      	adds	r7, #12
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800af64:	bf00      	nop
 800af66:	370c      	adds	r7, #12
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr

0800af70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800af70:	b480      	push	{r7}
 800af72:	b083      	sub	sp, #12
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800af78:	bf00      	nop
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af82:	4770      	bx	lr

0800af84 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800af8c:	bf00      	nop
 800af8e:	370c      	adds	r7, #12
 800af90:	46bd      	mov	sp, r7
 800af92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af96:	4770      	bx	lr

0800af98 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800af98:	b480      	push	{r7}
 800af9a:	b085      	sub	sp, #20
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
 800afa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	4a40      	ldr	r2, [pc, #256]	; (800b0ac <TIM_Base_SetConfig+0x114>)
 800afac:	4293      	cmp	r3, r2
 800afae:	d013      	beq.n	800afd8 <TIM_Base_SetConfig+0x40>
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afb6:	d00f      	beq.n	800afd8 <TIM_Base_SetConfig+0x40>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	4a3d      	ldr	r2, [pc, #244]	; (800b0b0 <TIM_Base_SetConfig+0x118>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d00b      	beq.n	800afd8 <TIM_Base_SetConfig+0x40>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	4a3c      	ldr	r2, [pc, #240]	; (800b0b4 <TIM_Base_SetConfig+0x11c>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d007      	beq.n	800afd8 <TIM_Base_SetConfig+0x40>
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	4a3b      	ldr	r2, [pc, #236]	; (800b0b8 <TIM_Base_SetConfig+0x120>)
 800afcc:	4293      	cmp	r3, r2
 800afce:	d003      	beq.n	800afd8 <TIM_Base_SetConfig+0x40>
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	4a3a      	ldr	r2, [pc, #232]	; (800b0bc <TIM_Base_SetConfig+0x124>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d108      	bne.n	800afea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800afde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800afe0:	683b      	ldr	r3, [r7, #0]
 800afe2:	685b      	ldr	r3, [r3, #4]
 800afe4:	68fa      	ldr	r2, [r7, #12]
 800afe6:	4313      	orrs	r3, r2
 800afe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	4a2f      	ldr	r2, [pc, #188]	; (800b0ac <TIM_Base_SetConfig+0x114>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d02b      	beq.n	800b04a <TIM_Base_SetConfig+0xb2>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aff8:	d027      	beq.n	800b04a <TIM_Base_SetConfig+0xb2>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	4a2c      	ldr	r2, [pc, #176]	; (800b0b0 <TIM_Base_SetConfig+0x118>)
 800affe:	4293      	cmp	r3, r2
 800b000:	d023      	beq.n	800b04a <TIM_Base_SetConfig+0xb2>
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	4a2b      	ldr	r2, [pc, #172]	; (800b0b4 <TIM_Base_SetConfig+0x11c>)
 800b006:	4293      	cmp	r3, r2
 800b008:	d01f      	beq.n	800b04a <TIM_Base_SetConfig+0xb2>
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	4a2a      	ldr	r2, [pc, #168]	; (800b0b8 <TIM_Base_SetConfig+0x120>)
 800b00e:	4293      	cmp	r3, r2
 800b010:	d01b      	beq.n	800b04a <TIM_Base_SetConfig+0xb2>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	4a29      	ldr	r2, [pc, #164]	; (800b0bc <TIM_Base_SetConfig+0x124>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d017      	beq.n	800b04a <TIM_Base_SetConfig+0xb2>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	4a28      	ldr	r2, [pc, #160]	; (800b0c0 <TIM_Base_SetConfig+0x128>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	d013      	beq.n	800b04a <TIM_Base_SetConfig+0xb2>
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	4a27      	ldr	r2, [pc, #156]	; (800b0c4 <TIM_Base_SetConfig+0x12c>)
 800b026:	4293      	cmp	r3, r2
 800b028:	d00f      	beq.n	800b04a <TIM_Base_SetConfig+0xb2>
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	4a26      	ldr	r2, [pc, #152]	; (800b0c8 <TIM_Base_SetConfig+0x130>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	d00b      	beq.n	800b04a <TIM_Base_SetConfig+0xb2>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	4a25      	ldr	r2, [pc, #148]	; (800b0cc <TIM_Base_SetConfig+0x134>)
 800b036:	4293      	cmp	r3, r2
 800b038:	d007      	beq.n	800b04a <TIM_Base_SetConfig+0xb2>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	4a24      	ldr	r2, [pc, #144]	; (800b0d0 <TIM_Base_SetConfig+0x138>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d003      	beq.n	800b04a <TIM_Base_SetConfig+0xb2>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	4a23      	ldr	r2, [pc, #140]	; (800b0d4 <TIM_Base_SetConfig+0x13c>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d108      	bne.n	800b05c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b050:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b052:	683b      	ldr	r3, [r7, #0]
 800b054:	68db      	ldr	r3, [r3, #12]
 800b056:	68fa      	ldr	r2, [r7, #12]
 800b058:	4313      	orrs	r3, r2
 800b05a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b062:	683b      	ldr	r3, [r7, #0]
 800b064:	695b      	ldr	r3, [r3, #20]
 800b066:	4313      	orrs	r3, r2
 800b068:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	68fa      	ldr	r2, [r7, #12]
 800b06e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b070:	683b      	ldr	r3, [r7, #0]
 800b072:	689a      	ldr	r2, [r3, #8]
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	681a      	ldr	r2, [r3, #0]
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	4a0a      	ldr	r2, [pc, #40]	; (800b0ac <TIM_Base_SetConfig+0x114>)
 800b084:	4293      	cmp	r3, r2
 800b086:	d003      	beq.n	800b090 <TIM_Base_SetConfig+0xf8>
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	4a0c      	ldr	r2, [pc, #48]	; (800b0bc <TIM_Base_SetConfig+0x124>)
 800b08c:	4293      	cmp	r3, r2
 800b08e:	d103      	bne.n	800b098 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	691a      	ldr	r2, [r3, #16]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	615a      	str	r2, [r3, #20]
}
 800b09e:	bf00      	nop
 800b0a0:	3714      	adds	r7, #20
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0a8:	4770      	bx	lr
 800b0aa:	bf00      	nop
 800b0ac:	40010000 	.word	0x40010000
 800b0b0:	40000400 	.word	0x40000400
 800b0b4:	40000800 	.word	0x40000800
 800b0b8:	40000c00 	.word	0x40000c00
 800b0bc:	40010400 	.word	0x40010400
 800b0c0:	40014000 	.word	0x40014000
 800b0c4:	40014400 	.word	0x40014400
 800b0c8:	40014800 	.word	0x40014800
 800b0cc:	40001800 	.word	0x40001800
 800b0d0:	40001c00 	.word	0x40001c00
 800b0d4:	40002000 	.word	0x40002000

0800b0d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b0d8:	b480      	push	{r7}
 800b0da:	b087      	sub	sp, #28
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	60f8      	str	r0, [r7, #12]
 800b0e0:	60b9      	str	r1, [r7, #8]
 800b0e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	6a1b      	ldr	r3, [r3, #32]
 800b0e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	6a1b      	ldr	r3, [r3, #32]
 800b0ee:	f023 0201 	bic.w	r2, r3, #1
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	699b      	ldr	r3, [r3, #24]
 800b0fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b102:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	011b      	lsls	r3, r3, #4
 800b108:	693a      	ldr	r2, [r7, #16]
 800b10a:	4313      	orrs	r3, r2
 800b10c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b10e:	697b      	ldr	r3, [r7, #20]
 800b110:	f023 030a 	bic.w	r3, r3, #10
 800b114:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b116:	697a      	ldr	r2, [r7, #20]
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	4313      	orrs	r3, r2
 800b11c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	693a      	ldr	r2, [r7, #16]
 800b122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	697a      	ldr	r2, [r7, #20]
 800b128:	621a      	str	r2, [r3, #32]
}
 800b12a:	bf00      	nop
 800b12c:	371c      	adds	r7, #28
 800b12e:	46bd      	mov	sp, r7
 800b130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b134:	4770      	bx	lr

0800b136 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b136:	b480      	push	{r7}
 800b138:	b087      	sub	sp, #28
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	60f8      	str	r0, [r7, #12]
 800b13e:	60b9      	str	r1, [r7, #8]
 800b140:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	6a1b      	ldr	r3, [r3, #32]
 800b146:	f023 0210 	bic.w	r2, r3, #16
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	699b      	ldr	r3, [r3, #24]
 800b152:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	6a1b      	ldr	r3, [r3, #32]
 800b158:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b160:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	031b      	lsls	r3, r3, #12
 800b166:	697a      	ldr	r2, [r7, #20]
 800b168:	4313      	orrs	r3, r2
 800b16a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b16c:	693b      	ldr	r3, [r7, #16]
 800b16e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b172:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	011b      	lsls	r3, r3, #4
 800b178:	693a      	ldr	r2, [r7, #16]
 800b17a:	4313      	orrs	r3, r2
 800b17c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	697a      	ldr	r2, [r7, #20]
 800b182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	693a      	ldr	r2, [r7, #16]
 800b188:	621a      	str	r2, [r3, #32]
}
 800b18a:	bf00      	nop
 800b18c:	371c      	adds	r7, #28
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr

0800b196 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b196:	b480      	push	{r7}
 800b198:	b085      	sub	sp, #20
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
 800b19e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	689b      	ldr	r3, [r3, #8]
 800b1a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b1ae:	683a      	ldr	r2, [r7, #0]
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	4313      	orrs	r3, r2
 800b1b4:	f043 0307 	orr.w	r3, r3, #7
 800b1b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	68fa      	ldr	r2, [r7, #12]
 800b1be:	609a      	str	r2, [r3, #8]
}
 800b1c0:	bf00      	nop
 800b1c2:	3714      	adds	r7, #20
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ca:	4770      	bx	lr

0800b1cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b087      	sub	sp, #28
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	60f8      	str	r0, [r7, #12]
 800b1d4:	60b9      	str	r1, [r7, #8]
 800b1d6:	607a      	str	r2, [r7, #4]
 800b1d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	689b      	ldr	r3, [r3, #8]
 800b1de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b1e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	021a      	lsls	r2, r3, #8
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	431a      	orrs	r2, r3
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	697a      	ldr	r2, [r7, #20]
 800b1f6:	4313      	orrs	r3, r2
 800b1f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	697a      	ldr	r2, [r7, #20]
 800b1fe:	609a      	str	r2, [r3, #8]
}
 800b200:	bf00      	nop
 800b202:	371c      	adds	r7, #28
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr

0800b20c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b085      	sub	sp, #20
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d101      	bne.n	800b224 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b220:	2302      	movs	r3, #2
 800b222:	e05a      	b.n	800b2da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2201      	movs	r2, #1
 800b228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2202      	movs	r2, #2
 800b230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	685b      	ldr	r3, [r3, #4]
 800b23a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	689b      	ldr	r3, [r3, #8]
 800b242:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b24a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	68fa      	ldr	r2, [r7, #12]
 800b252:	4313      	orrs	r3, r2
 800b254:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	68fa      	ldr	r2, [r7, #12]
 800b25c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	4a21      	ldr	r2, [pc, #132]	; (800b2e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800b264:	4293      	cmp	r3, r2
 800b266:	d022      	beq.n	800b2ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b270:	d01d      	beq.n	800b2ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4a1d      	ldr	r2, [pc, #116]	; (800b2ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d018      	beq.n	800b2ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4a1b      	ldr	r2, [pc, #108]	; (800b2f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800b282:	4293      	cmp	r3, r2
 800b284:	d013      	beq.n	800b2ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	4a1a      	ldr	r2, [pc, #104]	; (800b2f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800b28c:	4293      	cmp	r3, r2
 800b28e:	d00e      	beq.n	800b2ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	4a18      	ldr	r2, [pc, #96]	; (800b2f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800b296:	4293      	cmp	r3, r2
 800b298:	d009      	beq.n	800b2ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	4a17      	ldr	r2, [pc, #92]	; (800b2fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	d004      	beq.n	800b2ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	4a15      	ldr	r2, [pc, #84]	; (800b300 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d10c      	bne.n	800b2c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b2ae:	68bb      	ldr	r3, [r7, #8]
 800b2b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b2b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	4313      	orrs	r3, r2
 800b2be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	68ba      	ldr	r2, [r7, #8]
 800b2c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	2201      	movs	r2, #1
 800b2cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b2d8:	2300      	movs	r3, #0
}
 800b2da:	4618      	mov	r0, r3
 800b2dc:	3714      	adds	r7, #20
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e4:	4770      	bx	lr
 800b2e6:	bf00      	nop
 800b2e8:	40010000 	.word	0x40010000
 800b2ec:	40000400 	.word	0x40000400
 800b2f0:	40000800 	.word	0x40000800
 800b2f4:	40000c00 	.word	0x40000c00
 800b2f8:	40010400 	.word	0x40010400
 800b2fc:	40014000 	.word	0x40014000
 800b300:	40001800 	.word	0x40001800

0800b304 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b304:	b480      	push	{r7}
 800b306:	b083      	sub	sp, #12
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b30c:	bf00      	nop
 800b30e:	370c      	adds	r7, #12
 800b310:	46bd      	mov	sp, r7
 800b312:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b316:	4770      	bx	lr

0800b318 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b318:	b480      	push	{r7}
 800b31a:	b083      	sub	sp, #12
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b320:	bf00      	nop
 800b322:	370c      	adds	r7, #12
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr

0800b32c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b32c:	b084      	sub	sp, #16
 800b32e:	b580      	push	{r7, lr}
 800b330:	b084      	sub	sp, #16
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
 800b336:	f107 001c 	add.w	r0, r7, #28
 800b33a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b340:	2b01      	cmp	r3, #1
 800b342:	d122      	bne.n	800b38a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b348:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800b358:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b35c:	687a      	ldr	r2, [r7, #4]
 800b35e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b36c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b36e:	2b01      	cmp	r3, #1
 800b370:	d105      	bne.n	800b37e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	68db      	ldr	r3, [r3, #12]
 800b376:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f001 fb1c 	bl	800c9bc <USB_CoreReset>
 800b384:	4603      	mov	r3, r0
 800b386:	73fb      	strb	r3, [r7, #15]
 800b388:	e01a      	b.n	800b3c0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	68db      	ldr	r3, [r3, #12]
 800b38e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b396:	6878      	ldr	r0, [r7, #4]
 800b398:	f001 fb10 	bl	800c9bc <USB_CoreReset>
 800b39c:	4603      	mov	r3, r0
 800b39e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b3a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d106      	bne.n	800b3b4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	639a      	str	r2, [r3, #56]	; 0x38
 800b3b2:	e005      	b.n	800b3c0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3b8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b3c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3c2:	2b01      	cmp	r3, #1
 800b3c4:	d10b      	bne.n	800b3de <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	689b      	ldr	r3, [r3, #8]
 800b3ca:	f043 0206 	orr.w	r2, r3, #6
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	689b      	ldr	r3, [r3, #8]
 800b3d6:	f043 0220 	orr.w	r2, r3, #32
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3710      	adds	r7, #16
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b3ea:	b004      	add	sp, #16
 800b3ec:	4770      	bx	lr
	...

0800b3f0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b087      	sub	sp, #28
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	60b9      	str	r1, [r7, #8]
 800b3fa:	4613      	mov	r3, r2
 800b3fc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b3fe:	79fb      	ldrb	r3, [r7, #7]
 800b400:	2b02      	cmp	r3, #2
 800b402:	d165      	bne.n	800b4d0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	4a41      	ldr	r2, [pc, #260]	; (800b50c <USB_SetTurnaroundTime+0x11c>)
 800b408:	4293      	cmp	r3, r2
 800b40a:	d906      	bls.n	800b41a <USB_SetTurnaroundTime+0x2a>
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	4a40      	ldr	r2, [pc, #256]	; (800b510 <USB_SetTurnaroundTime+0x120>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d202      	bcs.n	800b41a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b414:	230f      	movs	r3, #15
 800b416:	617b      	str	r3, [r7, #20]
 800b418:	e062      	b.n	800b4e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b41a:	68bb      	ldr	r3, [r7, #8]
 800b41c:	4a3c      	ldr	r2, [pc, #240]	; (800b510 <USB_SetTurnaroundTime+0x120>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d306      	bcc.n	800b430 <USB_SetTurnaroundTime+0x40>
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	4a3b      	ldr	r2, [pc, #236]	; (800b514 <USB_SetTurnaroundTime+0x124>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d202      	bcs.n	800b430 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b42a:	230e      	movs	r3, #14
 800b42c:	617b      	str	r3, [r7, #20]
 800b42e:	e057      	b.n	800b4e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	4a38      	ldr	r2, [pc, #224]	; (800b514 <USB_SetTurnaroundTime+0x124>)
 800b434:	4293      	cmp	r3, r2
 800b436:	d306      	bcc.n	800b446 <USB_SetTurnaroundTime+0x56>
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	4a37      	ldr	r2, [pc, #220]	; (800b518 <USB_SetTurnaroundTime+0x128>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d202      	bcs.n	800b446 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b440:	230d      	movs	r3, #13
 800b442:	617b      	str	r3, [r7, #20]
 800b444:	e04c      	b.n	800b4e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	4a33      	ldr	r2, [pc, #204]	; (800b518 <USB_SetTurnaroundTime+0x128>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d306      	bcc.n	800b45c <USB_SetTurnaroundTime+0x6c>
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	4a32      	ldr	r2, [pc, #200]	; (800b51c <USB_SetTurnaroundTime+0x12c>)
 800b452:	4293      	cmp	r3, r2
 800b454:	d802      	bhi.n	800b45c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b456:	230c      	movs	r3, #12
 800b458:	617b      	str	r3, [r7, #20]
 800b45a:	e041      	b.n	800b4e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	4a2f      	ldr	r2, [pc, #188]	; (800b51c <USB_SetTurnaroundTime+0x12c>)
 800b460:	4293      	cmp	r3, r2
 800b462:	d906      	bls.n	800b472 <USB_SetTurnaroundTime+0x82>
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	4a2e      	ldr	r2, [pc, #184]	; (800b520 <USB_SetTurnaroundTime+0x130>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d802      	bhi.n	800b472 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b46c:	230b      	movs	r3, #11
 800b46e:	617b      	str	r3, [r7, #20]
 800b470:	e036      	b.n	800b4e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b472:	68bb      	ldr	r3, [r7, #8]
 800b474:	4a2a      	ldr	r2, [pc, #168]	; (800b520 <USB_SetTurnaroundTime+0x130>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d906      	bls.n	800b488 <USB_SetTurnaroundTime+0x98>
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	4a29      	ldr	r2, [pc, #164]	; (800b524 <USB_SetTurnaroundTime+0x134>)
 800b47e:	4293      	cmp	r3, r2
 800b480:	d802      	bhi.n	800b488 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b482:	230a      	movs	r3, #10
 800b484:	617b      	str	r3, [r7, #20]
 800b486:	e02b      	b.n	800b4e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	4a26      	ldr	r2, [pc, #152]	; (800b524 <USB_SetTurnaroundTime+0x134>)
 800b48c:	4293      	cmp	r3, r2
 800b48e:	d906      	bls.n	800b49e <USB_SetTurnaroundTime+0xae>
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	4a25      	ldr	r2, [pc, #148]	; (800b528 <USB_SetTurnaroundTime+0x138>)
 800b494:	4293      	cmp	r3, r2
 800b496:	d202      	bcs.n	800b49e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b498:	2309      	movs	r3, #9
 800b49a:	617b      	str	r3, [r7, #20]
 800b49c:	e020      	b.n	800b4e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	4a21      	ldr	r2, [pc, #132]	; (800b528 <USB_SetTurnaroundTime+0x138>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d306      	bcc.n	800b4b4 <USB_SetTurnaroundTime+0xc4>
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	4a20      	ldr	r2, [pc, #128]	; (800b52c <USB_SetTurnaroundTime+0x13c>)
 800b4aa:	4293      	cmp	r3, r2
 800b4ac:	d802      	bhi.n	800b4b4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b4ae:	2308      	movs	r3, #8
 800b4b0:	617b      	str	r3, [r7, #20]
 800b4b2:	e015      	b.n	800b4e0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	4a1d      	ldr	r2, [pc, #116]	; (800b52c <USB_SetTurnaroundTime+0x13c>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d906      	bls.n	800b4ca <USB_SetTurnaroundTime+0xda>
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	4a1c      	ldr	r2, [pc, #112]	; (800b530 <USB_SetTurnaroundTime+0x140>)
 800b4c0:	4293      	cmp	r3, r2
 800b4c2:	d202      	bcs.n	800b4ca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b4c4:	2307      	movs	r3, #7
 800b4c6:	617b      	str	r3, [r7, #20]
 800b4c8:	e00a      	b.n	800b4e0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b4ca:	2306      	movs	r3, #6
 800b4cc:	617b      	str	r3, [r7, #20]
 800b4ce:	e007      	b.n	800b4e0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b4d0:	79fb      	ldrb	r3, [r7, #7]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d102      	bne.n	800b4dc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b4d6:	2309      	movs	r3, #9
 800b4d8:	617b      	str	r3, [r7, #20]
 800b4da:	e001      	b.n	800b4e0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b4dc:	2309      	movs	r3, #9
 800b4de:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	68db      	ldr	r3, [r3, #12]
 800b4e4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	68da      	ldr	r2, [r3, #12]
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	029b      	lsls	r3, r3, #10
 800b4f4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b4f8:	431a      	orrs	r2, r3
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b4fe:	2300      	movs	r3, #0
}
 800b500:	4618      	mov	r0, r3
 800b502:	371c      	adds	r7, #28
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr
 800b50c:	00d8acbf 	.word	0x00d8acbf
 800b510:	00e4e1c0 	.word	0x00e4e1c0
 800b514:	00f42400 	.word	0x00f42400
 800b518:	01067380 	.word	0x01067380
 800b51c:	011a499f 	.word	0x011a499f
 800b520:	01312cff 	.word	0x01312cff
 800b524:	014ca43f 	.word	0x014ca43f
 800b528:	016e3600 	.word	0x016e3600
 800b52c:	01a6ab1f 	.word	0x01a6ab1f
 800b530:	01e84800 	.word	0x01e84800

0800b534 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b534:	b480      	push	{r7}
 800b536:	b083      	sub	sp, #12
 800b538:	af00      	add	r7, sp, #0
 800b53a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	689b      	ldr	r3, [r3, #8]
 800b540:	f043 0201 	orr.w	r2, r3, #1
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b548:	2300      	movs	r3, #0
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	370c      	adds	r7, #12
 800b54e:	46bd      	mov	sp, r7
 800b550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b554:	4770      	bx	lr

0800b556 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b556:	b480      	push	{r7}
 800b558:	b083      	sub	sp, #12
 800b55a:	af00      	add	r7, sp, #0
 800b55c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	689b      	ldr	r3, [r3, #8]
 800b562:	f023 0201 	bic.w	r2, r3, #1
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b56a:	2300      	movs	r3, #0
}
 800b56c:	4618      	mov	r0, r3
 800b56e:	370c      	adds	r7, #12
 800b570:	46bd      	mov	sp, r7
 800b572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b576:	4770      	bx	lr

0800b578 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b084      	sub	sp, #16
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	460b      	mov	r3, r1
 800b582:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b584:	2300      	movs	r3, #0
 800b586:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b594:	78fb      	ldrb	r3, [r7, #3]
 800b596:	2b01      	cmp	r3, #1
 800b598:	d115      	bne.n	800b5c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	68db      	ldr	r3, [r3, #12]
 800b59e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b5a6:	2001      	movs	r0, #1
 800b5a8:	f7fa fc9c 	bl	8005ee4 <HAL_Delay>
      ms++;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	3301      	adds	r3, #1
 800b5b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f001 f972 	bl	800c89c <USB_GetMode>
 800b5b8:	4603      	mov	r3, r0
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d01e      	beq.n	800b5fc <USB_SetCurrentMode+0x84>
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2b31      	cmp	r3, #49	; 0x31
 800b5c2:	d9f0      	bls.n	800b5a6 <USB_SetCurrentMode+0x2e>
 800b5c4:	e01a      	b.n	800b5fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b5c6:	78fb      	ldrb	r3, [r7, #3]
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d115      	bne.n	800b5f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	68db      	ldr	r3, [r3, #12]
 800b5d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b5d8:	2001      	movs	r0, #1
 800b5da:	f7fa fc83 	bl	8005ee4 <HAL_Delay>
      ms++;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	3301      	adds	r3, #1
 800b5e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	f001 f959 	bl	800c89c <USB_GetMode>
 800b5ea:	4603      	mov	r3, r0
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d005      	beq.n	800b5fc <USB_SetCurrentMode+0x84>
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	2b31      	cmp	r3, #49	; 0x31
 800b5f4:	d9f0      	bls.n	800b5d8 <USB_SetCurrentMode+0x60>
 800b5f6:	e001      	b.n	800b5fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b5f8:	2301      	movs	r3, #1
 800b5fa:	e005      	b.n	800b608 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	2b32      	cmp	r3, #50	; 0x32
 800b600:	d101      	bne.n	800b606 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b602:	2301      	movs	r3, #1
 800b604:	e000      	b.n	800b608 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b606:	2300      	movs	r3, #0
}
 800b608:	4618      	mov	r0, r3
 800b60a:	3710      	adds	r7, #16
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bd80      	pop	{r7, pc}

0800b610 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b610:	b084      	sub	sp, #16
 800b612:	b580      	push	{r7, lr}
 800b614:	b086      	sub	sp, #24
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
 800b61a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b61e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b622:	2300      	movs	r3, #0
 800b624:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b62a:	2300      	movs	r3, #0
 800b62c:	613b      	str	r3, [r7, #16]
 800b62e:	e009      	b.n	800b644 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b630:	687a      	ldr	r2, [r7, #4]
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	3340      	adds	r3, #64	; 0x40
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	4413      	add	r3, r2
 800b63a:	2200      	movs	r2, #0
 800b63c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	3301      	adds	r3, #1
 800b642:	613b      	str	r3, [r7, #16]
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	2b0e      	cmp	r3, #14
 800b648:	d9f2      	bls.n	800b630 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b64a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d11c      	bne.n	800b68a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b656:	685b      	ldr	r3, [r3, #4]
 800b658:	68fa      	ldr	r2, [r7, #12]
 800b65a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b65e:	f043 0302 	orr.w	r3, r3, #2
 800b662:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b668:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b674:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b680:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	639a      	str	r2, [r3, #56]	; 0x38
 800b688:	e00b      	b.n	800b6a2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b68e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b69a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6b4:	4619      	mov	r1, r3
 800b6b6:	68fb      	ldr	r3, [r7, #12]
 800b6b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6bc:	461a      	mov	r2, r3
 800b6be:	680b      	ldr	r3, [r1, #0]
 800b6c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b6c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6c4:	2b01      	cmp	r3, #1
 800b6c6:	d10c      	bne.n	800b6e2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b6c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d104      	bne.n	800b6d8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b6ce:	2100      	movs	r1, #0
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	f000 f945 	bl	800b960 <USB_SetDevSpeed>
 800b6d6:	e008      	b.n	800b6ea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b6d8:	2101      	movs	r1, #1
 800b6da:	6878      	ldr	r0, [r7, #4]
 800b6dc:	f000 f940 	bl	800b960 <USB_SetDevSpeed>
 800b6e0:	e003      	b.n	800b6ea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b6e2:	2103      	movs	r1, #3
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f000 f93b 	bl	800b960 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b6ea:	2110      	movs	r1, #16
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f000 f8f3 	bl	800b8d8 <USB_FlushTxFifo>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d001      	beq.n	800b6fc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f000 f90f 	bl	800b920 <USB_FlushRxFifo>
 800b702:	4603      	mov	r3, r0
 800b704:	2b00      	cmp	r3, #0
 800b706:	d001      	beq.n	800b70c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800b708:	2301      	movs	r3, #1
 800b70a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b712:	461a      	mov	r2, r3
 800b714:	2300      	movs	r3, #0
 800b716:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b71e:	461a      	mov	r2, r3
 800b720:	2300      	movs	r3, #0
 800b722:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b72a:	461a      	mov	r2, r3
 800b72c:	2300      	movs	r3, #0
 800b72e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b730:	2300      	movs	r3, #0
 800b732:	613b      	str	r3, [r7, #16]
 800b734:	e043      	b.n	800b7be <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	015a      	lsls	r2, r3, #5
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	4413      	add	r3, r2
 800b73e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b748:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b74c:	d118      	bne.n	800b780 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800b74e:	693b      	ldr	r3, [r7, #16]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d10a      	bne.n	800b76a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	015a      	lsls	r2, r3, #5
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	4413      	add	r3, r2
 800b75c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b760:	461a      	mov	r2, r3
 800b762:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b766:	6013      	str	r3, [r2, #0]
 800b768:	e013      	b.n	800b792 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	015a      	lsls	r2, r3, #5
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	4413      	add	r3, r2
 800b772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b776:	461a      	mov	r2, r3
 800b778:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b77c:	6013      	str	r3, [r2, #0]
 800b77e:	e008      	b.n	800b792 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	015a      	lsls	r2, r3, #5
 800b784:	68fb      	ldr	r3, [r7, #12]
 800b786:	4413      	add	r3, r2
 800b788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b78c:	461a      	mov	r2, r3
 800b78e:	2300      	movs	r3, #0
 800b790:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	015a      	lsls	r2, r3, #5
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	4413      	add	r3, r2
 800b79a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b79e:	461a      	mov	r2, r3
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	015a      	lsls	r2, r3, #5
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	4413      	add	r3, r2
 800b7ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7b0:	461a      	mov	r2, r3
 800b7b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b7b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b7b8:	693b      	ldr	r3, [r7, #16]
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	613b      	str	r3, [r7, #16]
 800b7be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c0:	693a      	ldr	r2, [r7, #16]
 800b7c2:	429a      	cmp	r2, r3
 800b7c4:	d3b7      	bcc.n	800b736 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	613b      	str	r3, [r7, #16]
 800b7ca:	e043      	b.n	800b854 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	015a      	lsls	r2, r3, #5
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	4413      	add	r3, r2
 800b7d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b7de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7e2:	d118      	bne.n	800b816 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d10a      	bne.n	800b800 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	015a      	lsls	r2, r3, #5
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	4413      	add	r3, r2
 800b7f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b7fc:	6013      	str	r3, [r2, #0]
 800b7fe:	e013      	b.n	800b828 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	015a      	lsls	r2, r3, #5
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	4413      	add	r3, r2
 800b808:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b80c:	461a      	mov	r2, r3
 800b80e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b812:	6013      	str	r3, [r2, #0]
 800b814:	e008      	b.n	800b828 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	015a      	lsls	r2, r3, #5
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	4413      	add	r3, r2
 800b81e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b822:	461a      	mov	r2, r3
 800b824:	2300      	movs	r3, #0
 800b826:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b828:	693b      	ldr	r3, [r7, #16]
 800b82a:	015a      	lsls	r2, r3, #5
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	4413      	add	r3, r2
 800b830:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b834:	461a      	mov	r2, r3
 800b836:	2300      	movs	r3, #0
 800b838:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	015a      	lsls	r2, r3, #5
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	4413      	add	r3, r2
 800b842:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b846:	461a      	mov	r2, r3
 800b848:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b84c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	3301      	adds	r3, #1
 800b852:	613b      	str	r3, [r7, #16]
 800b854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b856:	693a      	ldr	r2, [r7, #16]
 800b858:	429a      	cmp	r2, r3
 800b85a:	d3b7      	bcc.n	800b7cc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b862:	691b      	ldr	r3, [r3, #16]
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b86a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b86e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2200      	movs	r2, #0
 800b874:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b87c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b880:	2b00      	cmp	r3, #0
 800b882:	d105      	bne.n	800b890 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	699b      	ldr	r3, [r3, #24]
 800b888:	f043 0210 	orr.w	r2, r3, #16
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	699a      	ldr	r2, [r3, #24]
 800b894:	4b0f      	ldr	r3, [pc, #60]	; (800b8d4 <USB_DevInit+0x2c4>)
 800b896:	4313      	orrs	r3, r2
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b89c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d005      	beq.n	800b8ae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	699b      	ldr	r3, [r3, #24]
 800b8a6:	f043 0208 	orr.w	r2, r3, #8
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b8ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8b0:	2b01      	cmp	r3, #1
 800b8b2:	d107      	bne.n	800b8c4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	699b      	ldr	r3, [r3, #24]
 800b8b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b8bc:	f043 0304 	orr.w	r3, r3, #4
 800b8c0:	687a      	ldr	r2, [r7, #4]
 800b8c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b8c4:	7dfb      	ldrb	r3, [r7, #23]
}
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	3718      	adds	r7, #24
 800b8ca:	46bd      	mov	sp, r7
 800b8cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b8d0:	b004      	add	sp, #16
 800b8d2:	4770      	bx	lr
 800b8d4:	803c3800 	.word	0x803c3800

0800b8d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b8d8:	b480      	push	{r7}
 800b8da:	b085      	sub	sp, #20
 800b8dc:	af00      	add	r7, sp, #0
 800b8de:	6078      	str	r0, [r7, #4]
 800b8e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	019b      	lsls	r3, r3, #6
 800b8ea:	f043 0220 	orr.w	r2, r3, #32
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	60fb      	str	r3, [r7, #12]
 800b8f8:	4a08      	ldr	r2, [pc, #32]	; (800b91c <USB_FlushTxFifo+0x44>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d901      	bls.n	800b902 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800b8fe:	2303      	movs	r3, #3
 800b900:	e006      	b.n	800b910 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	691b      	ldr	r3, [r3, #16]
 800b906:	f003 0320 	and.w	r3, r3, #32
 800b90a:	2b20      	cmp	r3, #32
 800b90c:	d0f1      	beq.n	800b8f2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b90e:	2300      	movs	r3, #0
}
 800b910:	4618      	mov	r0, r3
 800b912:	3714      	adds	r7, #20
 800b914:	46bd      	mov	sp, r7
 800b916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91a:	4770      	bx	lr
 800b91c:	00030d40 	.word	0x00030d40

0800b920 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b920:	b480      	push	{r7}
 800b922:	b085      	sub	sp, #20
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b928:	2300      	movs	r3, #0
 800b92a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	2210      	movs	r2, #16
 800b930:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	3301      	adds	r3, #1
 800b936:	60fb      	str	r3, [r7, #12]
 800b938:	4a08      	ldr	r2, [pc, #32]	; (800b95c <USB_FlushRxFifo+0x3c>)
 800b93a:	4293      	cmp	r3, r2
 800b93c:	d901      	bls.n	800b942 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800b93e:	2303      	movs	r3, #3
 800b940:	e006      	b.n	800b950 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	691b      	ldr	r3, [r3, #16]
 800b946:	f003 0310 	and.w	r3, r3, #16
 800b94a:	2b10      	cmp	r3, #16
 800b94c:	d0f1      	beq.n	800b932 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3714      	adds	r7, #20
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr
 800b95c:	00030d40 	.word	0x00030d40

0800b960 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b960:	b480      	push	{r7}
 800b962:	b085      	sub	sp, #20
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
 800b968:	460b      	mov	r3, r1
 800b96a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b976:	681a      	ldr	r2, [r3, #0]
 800b978:	78fb      	ldrb	r3, [r7, #3]
 800b97a:	68f9      	ldr	r1, [r7, #12]
 800b97c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b980:	4313      	orrs	r3, r2
 800b982:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b984:	2300      	movs	r3, #0
}
 800b986:	4618      	mov	r0, r3
 800b988:	3714      	adds	r7, #20
 800b98a:	46bd      	mov	sp, r7
 800b98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b990:	4770      	bx	lr

0800b992 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b992:	b480      	push	{r7}
 800b994:	b087      	sub	sp, #28
 800b996:	af00      	add	r7, sp, #0
 800b998:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b99e:	693b      	ldr	r3, [r7, #16]
 800b9a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9a4:	689b      	ldr	r3, [r3, #8]
 800b9a6:	f003 0306 	and.w	r3, r3, #6
 800b9aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d102      	bne.n	800b9b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	75fb      	strb	r3, [r7, #23]
 800b9b6:	e00a      	b.n	800b9ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b9b8:	68fb      	ldr	r3, [r7, #12]
 800b9ba:	2b02      	cmp	r3, #2
 800b9bc:	d002      	beq.n	800b9c4 <USB_GetDevSpeed+0x32>
 800b9be:	68fb      	ldr	r3, [r7, #12]
 800b9c0:	2b06      	cmp	r3, #6
 800b9c2:	d102      	bne.n	800b9ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b9c4:	2302      	movs	r3, #2
 800b9c6:	75fb      	strb	r3, [r7, #23]
 800b9c8:	e001      	b.n	800b9ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b9ca:	230f      	movs	r3, #15
 800b9cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b9ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	371c      	adds	r7, #28
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9da:	4770      	bx	lr

0800b9dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b9dc:	b480      	push	{r7}
 800b9de:	b085      	sub	sp, #20
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	781b      	ldrb	r3, [r3, #0]
 800b9ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	785b      	ldrb	r3, [r3, #1]
 800b9f4:	2b01      	cmp	r3, #1
 800b9f6:	d13a      	bne.n	800ba6e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9fe:	69da      	ldr	r2, [r3, #28]
 800ba00:	683b      	ldr	r3, [r7, #0]
 800ba02:	781b      	ldrb	r3, [r3, #0]
 800ba04:	f003 030f 	and.w	r3, r3, #15
 800ba08:	2101      	movs	r1, #1
 800ba0a:	fa01 f303 	lsl.w	r3, r1, r3
 800ba0e:	b29b      	uxth	r3, r3
 800ba10:	68f9      	ldr	r1, [r7, #12]
 800ba12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba16:	4313      	orrs	r3, r2
 800ba18:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	015a      	lsls	r2, r3, #5
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	4413      	add	r3, r2
 800ba22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d155      	bne.n	800badc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ba30:	68bb      	ldr	r3, [r7, #8]
 800ba32:	015a      	lsls	r2, r3, #5
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	4413      	add	r3, r2
 800ba38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	683b      	ldr	r3, [r7, #0]
 800ba40:	689b      	ldr	r3, [r3, #8]
 800ba42:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	78db      	ldrb	r3, [r3, #3]
 800ba4a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ba4c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	059b      	lsls	r3, r3, #22
 800ba52:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ba54:	4313      	orrs	r3, r2
 800ba56:	68ba      	ldr	r2, [r7, #8]
 800ba58:	0151      	lsls	r1, r2, #5
 800ba5a:	68fa      	ldr	r2, [r7, #12]
 800ba5c:	440a      	add	r2, r1
 800ba5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ba6a:	6013      	str	r3, [r2, #0]
 800ba6c:	e036      	b.n	800badc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba74:	69da      	ldr	r2, [r3, #28]
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	f003 030f 	and.w	r3, r3, #15
 800ba7e:	2101      	movs	r1, #1
 800ba80:	fa01 f303 	lsl.w	r3, r1, r3
 800ba84:	041b      	lsls	r3, r3, #16
 800ba86:	68f9      	ldr	r1, [r7, #12]
 800ba88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba8c:	4313      	orrs	r3, r2
 800ba8e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	015a      	lsls	r2, r3, #5
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	4413      	add	r3, r2
 800ba98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d11a      	bne.n	800badc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	015a      	lsls	r2, r3, #5
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	4413      	add	r3, r2
 800baae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bab2:	681a      	ldr	r2, [r3, #0]
 800bab4:	683b      	ldr	r3, [r7, #0]
 800bab6:	689b      	ldr	r3, [r3, #8]
 800bab8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800babc:	683b      	ldr	r3, [r7, #0]
 800babe:	78db      	ldrb	r3, [r3, #3]
 800bac0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bac2:	430b      	orrs	r3, r1
 800bac4:	4313      	orrs	r3, r2
 800bac6:	68ba      	ldr	r2, [r7, #8]
 800bac8:	0151      	lsls	r1, r2, #5
 800baca:	68fa      	ldr	r2, [r7, #12]
 800bacc:	440a      	add	r2, r1
 800bace:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bad2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bada:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800badc:	2300      	movs	r3, #0
}
 800bade:	4618      	mov	r0, r3
 800bae0:	3714      	adds	r7, #20
 800bae2:	46bd      	mov	sp, r7
 800bae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae8:	4770      	bx	lr
	...

0800baec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800baec:	b480      	push	{r7}
 800baee:	b085      	sub	sp, #20
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
 800baf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	781b      	ldrb	r3, [r3, #0]
 800bafe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	785b      	ldrb	r3, [r3, #1]
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d161      	bne.n	800bbcc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	015a      	lsls	r2, r3, #5
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	4413      	add	r3, r2
 800bb10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb1e:	d11f      	bne.n	800bb60 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	015a      	lsls	r2, r3, #5
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	4413      	add	r3, r2
 800bb28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	68ba      	ldr	r2, [r7, #8]
 800bb30:	0151      	lsls	r1, r2, #5
 800bb32:	68fa      	ldr	r2, [r7, #12]
 800bb34:	440a      	add	r2, r1
 800bb36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb3a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bb3e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bb40:	68bb      	ldr	r3, [r7, #8]
 800bb42:	015a      	lsls	r2, r3, #5
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	4413      	add	r3, r2
 800bb48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	68ba      	ldr	r2, [r7, #8]
 800bb50:	0151      	lsls	r1, r2, #5
 800bb52:	68fa      	ldr	r2, [r7, #12]
 800bb54:	440a      	add	r2, r1
 800bb56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb5a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb5e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	f003 030f 	and.w	r3, r3, #15
 800bb70:	2101      	movs	r1, #1
 800bb72:	fa01 f303 	lsl.w	r3, r1, r3
 800bb76:	b29b      	uxth	r3, r3
 800bb78:	43db      	mvns	r3, r3
 800bb7a:	68f9      	ldr	r1, [r7, #12]
 800bb7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb80:	4013      	ands	r3, r2
 800bb82:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb8a:	69da      	ldr	r2, [r3, #28]
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	f003 030f 	and.w	r3, r3, #15
 800bb94:	2101      	movs	r1, #1
 800bb96:	fa01 f303 	lsl.w	r3, r1, r3
 800bb9a:	b29b      	uxth	r3, r3
 800bb9c:	43db      	mvns	r3, r3
 800bb9e:	68f9      	ldr	r1, [r7, #12]
 800bba0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bba4:	4013      	ands	r3, r2
 800bba6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	015a      	lsls	r2, r3, #5
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	4413      	add	r3, r2
 800bbb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbb4:	681a      	ldr	r2, [r3, #0]
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	0159      	lsls	r1, r3, #5
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	440b      	add	r3, r1
 800bbbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbc2:	4619      	mov	r1, r3
 800bbc4:	4b35      	ldr	r3, [pc, #212]	; (800bc9c <USB_DeactivateEndpoint+0x1b0>)
 800bbc6:	4013      	ands	r3, r2
 800bbc8:	600b      	str	r3, [r1, #0]
 800bbca:	e060      	b.n	800bc8e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bbcc:	68bb      	ldr	r3, [r7, #8]
 800bbce:	015a      	lsls	r2, r3, #5
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	4413      	add	r3, r2
 800bbd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bbde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bbe2:	d11f      	bne.n	800bc24 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	015a      	lsls	r2, r3, #5
 800bbe8:	68fb      	ldr	r3, [r7, #12]
 800bbea:	4413      	add	r3, r2
 800bbec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	68ba      	ldr	r2, [r7, #8]
 800bbf4:	0151      	lsls	r1, r2, #5
 800bbf6:	68fa      	ldr	r2, [r7, #12]
 800bbf8:	440a      	add	r2, r1
 800bbfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbfe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bc02:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bc04:	68bb      	ldr	r3, [r7, #8]
 800bc06:	015a      	lsls	r2, r3, #5
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	4413      	add	r3, r2
 800bc0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	68ba      	ldr	r2, [r7, #8]
 800bc14:	0151      	lsls	r1, r2, #5
 800bc16:	68fa      	ldr	r2, [r7, #12]
 800bc18:	440a      	add	r2, r1
 800bc1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bc22:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bc24:	68fb      	ldr	r3, [r7, #12]
 800bc26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc2c:	683b      	ldr	r3, [r7, #0]
 800bc2e:	781b      	ldrb	r3, [r3, #0]
 800bc30:	f003 030f 	and.w	r3, r3, #15
 800bc34:	2101      	movs	r1, #1
 800bc36:	fa01 f303 	lsl.w	r3, r1, r3
 800bc3a:	041b      	lsls	r3, r3, #16
 800bc3c:	43db      	mvns	r3, r3
 800bc3e:	68f9      	ldr	r1, [r7, #12]
 800bc40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc44:	4013      	ands	r3, r2
 800bc46:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc4e:	69da      	ldr	r2, [r3, #28]
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	781b      	ldrb	r3, [r3, #0]
 800bc54:	f003 030f 	and.w	r3, r3, #15
 800bc58:	2101      	movs	r1, #1
 800bc5a:	fa01 f303 	lsl.w	r3, r1, r3
 800bc5e:	041b      	lsls	r3, r3, #16
 800bc60:	43db      	mvns	r3, r3
 800bc62:	68f9      	ldr	r1, [r7, #12]
 800bc64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc68:	4013      	ands	r3, r2
 800bc6a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	015a      	lsls	r2, r3, #5
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	4413      	add	r3, r2
 800bc74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc78:	681a      	ldr	r2, [r3, #0]
 800bc7a:	68bb      	ldr	r3, [r7, #8]
 800bc7c:	0159      	lsls	r1, r3, #5
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	440b      	add	r3, r1
 800bc82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc86:	4619      	mov	r1, r3
 800bc88:	4b05      	ldr	r3, [pc, #20]	; (800bca0 <USB_DeactivateEndpoint+0x1b4>)
 800bc8a:	4013      	ands	r3, r2
 800bc8c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bc8e:	2300      	movs	r3, #0
}
 800bc90:	4618      	mov	r0, r3
 800bc92:	3714      	adds	r7, #20
 800bc94:	46bd      	mov	sp, r7
 800bc96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9a:	4770      	bx	lr
 800bc9c:	ec337800 	.word	0xec337800
 800bca0:	eff37800 	.word	0xeff37800

0800bca4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b08a      	sub	sp, #40	; 0x28
 800bca8:	af02      	add	r7, sp, #8
 800bcaa:	60f8      	str	r0, [r7, #12]
 800bcac:	60b9      	str	r1, [r7, #8]
 800bcae:	4613      	mov	r3, r2
 800bcb0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	781b      	ldrb	r3, [r3, #0]
 800bcba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bcbc:	68bb      	ldr	r3, [r7, #8]
 800bcbe:	785b      	ldrb	r3, [r3, #1]
 800bcc0:	2b01      	cmp	r3, #1
 800bcc2:	f040 815c 	bne.w	800bf7e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bcc6:	68bb      	ldr	r3, [r7, #8]
 800bcc8:	695b      	ldr	r3, [r3, #20]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	d132      	bne.n	800bd34 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bcce:	69bb      	ldr	r3, [r7, #24]
 800bcd0:	015a      	lsls	r2, r3, #5
 800bcd2:	69fb      	ldr	r3, [r7, #28]
 800bcd4:	4413      	add	r3, r2
 800bcd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcda:	691b      	ldr	r3, [r3, #16]
 800bcdc:	69ba      	ldr	r2, [r7, #24]
 800bcde:	0151      	lsls	r1, r2, #5
 800bce0:	69fa      	ldr	r2, [r7, #28]
 800bce2:	440a      	add	r2, r1
 800bce4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bce8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bcec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bcf0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bcf2:	69bb      	ldr	r3, [r7, #24]
 800bcf4:	015a      	lsls	r2, r3, #5
 800bcf6:	69fb      	ldr	r3, [r7, #28]
 800bcf8:	4413      	add	r3, r2
 800bcfa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bcfe:	691b      	ldr	r3, [r3, #16]
 800bd00:	69ba      	ldr	r2, [r7, #24]
 800bd02:	0151      	lsls	r1, r2, #5
 800bd04:	69fa      	ldr	r2, [r7, #28]
 800bd06:	440a      	add	r2, r1
 800bd08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	015a      	lsls	r2, r3, #5
 800bd16:	69fb      	ldr	r3, [r7, #28]
 800bd18:	4413      	add	r3, r2
 800bd1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd1e:	691b      	ldr	r3, [r3, #16]
 800bd20:	69ba      	ldr	r2, [r7, #24]
 800bd22:	0151      	lsls	r1, r2, #5
 800bd24:	69fa      	ldr	r2, [r7, #28]
 800bd26:	440a      	add	r2, r1
 800bd28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd2c:	0cdb      	lsrs	r3, r3, #19
 800bd2e:	04db      	lsls	r3, r3, #19
 800bd30:	6113      	str	r3, [r2, #16]
 800bd32:	e074      	b.n	800be1e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bd34:	69bb      	ldr	r3, [r7, #24]
 800bd36:	015a      	lsls	r2, r3, #5
 800bd38:	69fb      	ldr	r3, [r7, #28]
 800bd3a:	4413      	add	r3, r2
 800bd3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd40:	691b      	ldr	r3, [r3, #16]
 800bd42:	69ba      	ldr	r2, [r7, #24]
 800bd44:	0151      	lsls	r1, r2, #5
 800bd46:	69fa      	ldr	r2, [r7, #28]
 800bd48:	440a      	add	r2, r1
 800bd4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd4e:	0cdb      	lsrs	r3, r3, #19
 800bd50:	04db      	lsls	r3, r3, #19
 800bd52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bd54:	69bb      	ldr	r3, [r7, #24]
 800bd56:	015a      	lsls	r2, r3, #5
 800bd58:	69fb      	ldr	r3, [r7, #28]
 800bd5a:	4413      	add	r3, r2
 800bd5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd60:	691b      	ldr	r3, [r3, #16]
 800bd62:	69ba      	ldr	r2, [r7, #24]
 800bd64:	0151      	lsls	r1, r2, #5
 800bd66:	69fa      	ldr	r2, [r7, #28]
 800bd68:	440a      	add	r2, r1
 800bd6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd6e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bd72:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bd76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bd78:	69bb      	ldr	r3, [r7, #24]
 800bd7a:	015a      	lsls	r2, r3, #5
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	4413      	add	r3, r2
 800bd80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd84:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	6959      	ldr	r1, [r3, #20]
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	689b      	ldr	r3, [r3, #8]
 800bd8e:	440b      	add	r3, r1
 800bd90:	1e59      	subs	r1, r3, #1
 800bd92:	68bb      	ldr	r3, [r7, #8]
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	fbb1 f3f3 	udiv	r3, r1, r3
 800bd9a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800bd9c:	4b9d      	ldr	r3, [pc, #628]	; (800c014 <USB_EPStartXfer+0x370>)
 800bd9e:	400b      	ands	r3, r1
 800bda0:	69b9      	ldr	r1, [r7, #24]
 800bda2:	0148      	lsls	r0, r1, #5
 800bda4:	69f9      	ldr	r1, [r7, #28]
 800bda6:	4401      	add	r1, r0
 800bda8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bdac:	4313      	orrs	r3, r2
 800bdae:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800bdb0:	69bb      	ldr	r3, [r7, #24]
 800bdb2:	015a      	lsls	r2, r3, #5
 800bdb4:	69fb      	ldr	r3, [r7, #28]
 800bdb6:	4413      	add	r3, r2
 800bdb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdbc:	691a      	ldr	r2, [r3, #16]
 800bdbe:	68bb      	ldr	r3, [r7, #8]
 800bdc0:	695b      	ldr	r3, [r3, #20]
 800bdc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bdc6:	69b9      	ldr	r1, [r7, #24]
 800bdc8:	0148      	lsls	r0, r1, #5
 800bdca:	69f9      	ldr	r1, [r7, #28]
 800bdcc:	4401      	add	r1, r0
 800bdce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800bdd2:	4313      	orrs	r3, r2
 800bdd4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800bdd6:	68bb      	ldr	r3, [r7, #8]
 800bdd8:	78db      	ldrb	r3, [r3, #3]
 800bdda:	2b01      	cmp	r3, #1
 800bddc:	d11f      	bne.n	800be1e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800bdde:	69bb      	ldr	r3, [r7, #24]
 800bde0:	015a      	lsls	r2, r3, #5
 800bde2:	69fb      	ldr	r3, [r7, #28]
 800bde4:	4413      	add	r3, r2
 800bde6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdea:	691b      	ldr	r3, [r3, #16]
 800bdec:	69ba      	ldr	r2, [r7, #24]
 800bdee:	0151      	lsls	r1, r2, #5
 800bdf0:	69fa      	ldr	r2, [r7, #28]
 800bdf2:	440a      	add	r2, r1
 800bdf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdf8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800bdfc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800bdfe:	69bb      	ldr	r3, [r7, #24]
 800be00:	015a      	lsls	r2, r3, #5
 800be02:	69fb      	ldr	r3, [r7, #28]
 800be04:	4413      	add	r3, r2
 800be06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be0a:	691b      	ldr	r3, [r3, #16]
 800be0c:	69ba      	ldr	r2, [r7, #24]
 800be0e:	0151      	lsls	r1, r2, #5
 800be10:	69fa      	ldr	r2, [r7, #28]
 800be12:	440a      	add	r2, r1
 800be14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800be1c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800be1e:	79fb      	ldrb	r3, [r7, #7]
 800be20:	2b01      	cmp	r3, #1
 800be22:	d14b      	bne.n	800bebc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800be24:	68bb      	ldr	r3, [r7, #8]
 800be26:	691b      	ldr	r3, [r3, #16]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d009      	beq.n	800be40 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800be2c:	69bb      	ldr	r3, [r7, #24]
 800be2e:	015a      	lsls	r2, r3, #5
 800be30:	69fb      	ldr	r3, [r7, #28]
 800be32:	4413      	add	r3, r2
 800be34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be38:	461a      	mov	r2, r3
 800be3a:	68bb      	ldr	r3, [r7, #8]
 800be3c:	691b      	ldr	r3, [r3, #16]
 800be3e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	78db      	ldrb	r3, [r3, #3]
 800be44:	2b01      	cmp	r3, #1
 800be46:	d128      	bne.n	800be9a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800be48:	69fb      	ldr	r3, [r7, #28]
 800be4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be4e:	689b      	ldr	r3, [r3, #8]
 800be50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be54:	2b00      	cmp	r3, #0
 800be56:	d110      	bne.n	800be7a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800be58:	69bb      	ldr	r3, [r7, #24]
 800be5a:	015a      	lsls	r2, r3, #5
 800be5c:	69fb      	ldr	r3, [r7, #28]
 800be5e:	4413      	add	r3, r2
 800be60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	69ba      	ldr	r2, [r7, #24]
 800be68:	0151      	lsls	r1, r2, #5
 800be6a:	69fa      	ldr	r2, [r7, #28]
 800be6c:	440a      	add	r2, r1
 800be6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800be76:	6013      	str	r3, [r2, #0]
 800be78:	e00f      	b.n	800be9a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800be7a:	69bb      	ldr	r3, [r7, #24]
 800be7c:	015a      	lsls	r2, r3, #5
 800be7e:	69fb      	ldr	r3, [r7, #28]
 800be80:	4413      	add	r3, r2
 800be82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	69ba      	ldr	r2, [r7, #24]
 800be8a:	0151      	lsls	r1, r2, #5
 800be8c:	69fa      	ldr	r2, [r7, #28]
 800be8e:	440a      	add	r2, r1
 800be90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be98:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800be9a:	69bb      	ldr	r3, [r7, #24]
 800be9c:	015a      	lsls	r2, r3, #5
 800be9e:	69fb      	ldr	r3, [r7, #28]
 800bea0:	4413      	add	r3, r2
 800bea2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	69ba      	ldr	r2, [r7, #24]
 800beaa:	0151      	lsls	r1, r2, #5
 800beac:	69fa      	ldr	r2, [r7, #28]
 800beae:	440a      	add	r2, r1
 800beb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800beb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800beb8:	6013      	str	r3, [r2, #0]
 800beba:	e12f      	b.n	800c11c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bebc:	69bb      	ldr	r3, [r7, #24]
 800bebe:	015a      	lsls	r2, r3, #5
 800bec0:	69fb      	ldr	r3, [r7, #28]
 800bec2:	4413      	add	r3, r2
 800bec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	69ba      	ldr	r2, [r7, #24]
 800becc:	0151      	lsls	r1, r2, #5
 800bece:	69fa      	ldr	r2, [r7, #28]
 800bed0:	440a      	add	r2, r1
 800bed2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bed6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800beda:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	78db      	ldrb	r3, [r3, #3]
 800bee0:	2b01      	cmp	r3, #1
 800bee2:	d015      	beq.n	800bf10 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	695b      	ldr	r3, [r3, #20]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	f000 8117 	beq.w	800c11c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800beee:	69fb      	ldr	r3, [r7, #28]
 800bef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bef6:	68bb      	ldr	r3, [r7, #8]
 800bef8:	781b      	ldrb	r3, [r3, #0]
 800befa:	f003 030f 	and.w	r3, r3, #15
 800befe:	2101      	movs	r1, #1
 800bf00:	fa01 f303 	lsl.w	r3, r1, r3
 800bf04:	69f9      	ldr	r1, [r7, #28]
 800bf06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf0a:	4313      	orrs	r3, r2
 800bf0c:	634b      	str	r3, [r1, #52]	; 0x34
 800bf0e:	e105      	b.n	800c11c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bf10:	69fb      	ldr	r3, [r7, #28]
 800bf12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf16:	689b      	ldr	r3, [r3, #8]
 800bf18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf1c:	2b00      	cmp	r3, #0
 800bf1e:	d110      	bne.n	800bf42 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bf20:	69bb      	ldr	r3, [r7, #24]
 800bf22:	015a      	lsls	r2, r3, #5
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	4413      	add	r3, r2
 800bf28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	69ba      	ldr	r2, [r7, #24]
 800bf30:	0151      	lsls	r1, r2, #5
 800bf32:	69fa      	ldr	r2, [r7, #28]
 800bf34:	440a      	add	r2, r1
 800bf36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bf3e:	6013      	str	r3, [r2, #0]
 800bf40:	e00f      	b.n	800bf62 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	015a      	lsls	r2, r3, #5
 800bf46:	69fb      	ldr	r3, [r7, #28]
 800bf48:	4413      	add	r3, r2
 800bf4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	69ba      	ldr	r2, [r7, #24]
 800bf52:	0151      	lsls	r1, r2, #5
 800bf54:	69fa      	ldr	r2, [r7, #28]
 800bf56:	440a      	add	r2, r1
 800bf58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf60:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	68d9      	ldr	r1, [r3, #12]
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	781a      	ldrb	r2, [r3, #0]
 800bf6a:	68bb      	ldr	r3, [r7, #8]
 800bf6c:	695b      	ldr	r3, [r3, #20]
 800bf6e:	b298      	uxth	r0, r3
 800bf70:	79fb      	ldrb	r3, [r7, #7]
 800bf72:	9300      	str	r3, [sp, #0]
 800bf74:	4603      	mov	r3, r0
 800bf76:	68f8      	ldr	r0, [r7, #12]
 800bf78:	f000 fa2b 	bl	800c3d2 <USB_WritePacket>
 800bf7c:	e0ce      	b.n	800c11c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bf7e:	69bb      	ldr	r3, [r7, #24]
 800bf80:	015a      	lsls	r2, r3, #5
 800bf82:	69fb      	ldr	r3, [r7, #28]
 800bf84:	4413      	add	r3, r2
 800bf86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf8a:	691b      	ldr	r3, [r3, #16]
 800bf8c:	69ba      	ldr	r2, [r7, #24]
 800bf8e:	0151      	lsls	r1, r2, #5
 800bf90:	69fa      	ldr	r2, [r7, #28]
 800bf92:	440a      	add	r2, r1
 800bf94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf98:	0cdb      	lsrs	r3, r3, #19
 800bf9a:	04db      	lsls	r3, r3, #19
 800bf9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800bf9e:	69bb      	ldr	r3, [r7, #24]
 800bfa0:	015a      	lsls	r2, r3, #5
 800bfa2:	69fb      	ldr	r3, [r7, #28]
 800bfa4:	4413      	add	r3, r2
 800bfa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfaa:	691b      	ldr	r3, [r3, #16]
 800bfac:	69ba      	ldr	r2, [r7, #24]
 800bfae:	0151      	lsls	r1, r2, #5
 800bfb0:	69fa      	ldr	r2, [r7, #28]
 800bfb2:	440a      	add	r2, r1
 800bfb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800bfbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800bfc0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	695b      	ldr	r3, [r3, #20]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d126      	bne.n	800c018 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800bfca:	69bb      	ldr	r3, [r7, #24]
 800bfcc:	015a      	lsls	r2, r3, #5
 800bfce:	69fb      	ldr	r3, [r7, #28]
 800bfd0:	4413      	add	r3, r2
 800bfd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfd6:	691a      	ldr	r2, [r3, #16]
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	689b      	ldr	r3, [r3, #8]
 800bfdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800bfe0:	69b9      	ldr	r1, [r7, #24]
 800bfe2:	0148      	lsls	r0, r1, #5
 800bfe4:	69f9      	ldr	r1, [r7, #28]
 800bfe6:	4401      	add	r1, r0
 800bfe8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bfec:	4313      	orrs	r3, r2
 800bfee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bff0:	69bb      	ldr	r3, [r7, #24]
 800bff2:	015a      	lsls	r2, r3, #5
 800bff4:	69fb      	ldr	r3, [r7, #28]
 800bff6:	4413      	add	r3, r2
 800bff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bffc:	691b      	ldr	r3, [r3, #16]
 800bffe:	69ba      	ldr	r2, [r7, #24]
 800c000:	0151      	lsls	r1, r2, #5
 800c002:	69fa      	ldr	r2, [r7, #28]
 800c004:	440a      	add	r2, r1
 800c006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c00a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c00e:	6113      	str	r3, [r2, #16]
 800c010:	e036      	b.n	800c080 <USB_EPStartXfer+0x3dc>
 800c012:	bf00      	nop
 800c014:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	695a      	ldr	r2, [r3, #20]
 800c01c:	68bb      	ldr	r3, [r7, #8]
 800c01e:	689b      	ldr	r3, [r3, #8]
 800c020:	4413      	add	r3, r2
 800c022:	1e5a      	subs	r2, r3, #1
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	689b      	ldr	r3, [r3, #8]
 800c028:	fbb2 f3f3 	udiv	r3, r2, r3
 800c02c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c02e:	69bb      	ldr	r3, [r7, #24]
 800c030:	015a      	lsls	r2, r3, #5
 800c032:	69fb      	ldr	r3, [r7, #28]
 800c034:	4413      	add	r3, r2
 800c036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c03a:	691a      	ldr	r2, [r3, #16]
 800c03c:	8afb      	ldrh	r3, [r7, #22]
 800c03e:	04d9      	lsls	r1, r3, #19
 800c040:	4b39      	ldr	r3, [pc, #228]	; (800c128 <USB_EPStartXfer+0x484>)
 800c042:	400b      	ands	r3, r1
 800c044:	69b9      	ldr	r1, [r7, #24]
 800c046:	0148      	lsls	r0, r1, #5
 800c048:	69f9      	ldr	r1, [r7, #28]
 800c04a:	4401      	add	r1, r0
 800c04c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c050:	4313      	orrs	r3, r2
 800c052:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c054:	69bb      	ldr	r3, [r7, #24]
 800c056:	015a      	lsls	r2, r3, #5
 800c058:	69fb      	ldr	r3, [r7, #28]
 800c05a:	4413      	add	r3, r2
 800c05c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c060:	691a      	ldr	r2, [r3, #16]
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	689b      	ldr	r3, [r3, #8]
 800c066:	8af9      	ldrh	r1, [r7, #22]
 800c068:	fb01 f303 	mul.w	r3, r1, r3
 800c06c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c070:	69b9      	ldr	r1, [r7, #24]
 800c072:	0148      	lsls	r0, r1, #5
 800c074:	69f9      	ldr	r1, [r7, #28]
 800c076:	4401      	add	r1, r0
 800c078:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c07c:	4313      	orrs	r3, r2
 800c07e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c080:	79fb      	ldrb	r3, [r7, #7]
 800c082:	2b01      	cmp	r3, #1
 800c084:	d10d      	bne.n	800c0a2 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	68db      	ldr	r3, [r3, #12]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d009      	beq.n	800c0a2 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	68d9      	ldr	r1, [r3, #12]
 800c092:	69bb      	ldr	r3, [r7, #24]
 800c094:	015a      	lsls	r2, r3, #5
 800c096:	69fb      	ldr	r3, [r7, #28]
 800c098:	4413      	add	r3, r2
 800c09a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c09e:	460a      	mov	r2, r1
 800c0a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	78db      	ldrb	r3, [r3, #3]
 800c0a6:	2b01      	cmp	r3, #1
 800c0a8:	d128      	bne.n	800c0fc <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c0aa:	69fb      	ldr	r3, [r7, #28]
 800c0ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0b0:	689b      	ldr	r3, [r3, #8]
 800c0b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d110      	bne.n	800c0dc <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c0ba:	69bb      	ldr	r3, [r7, #24]
 800c0bc:	015a      	lsls	r2, r3, #5
 800c0be:	69fb      	ldr	r3, [r7, #28]
 800c0c0:	4413      	add	r3, r2
 800c0c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	69ba      	ldr	r2, [r7, #24]
 800c0ca:	0151      	lsls	r1, r2, #5
 800c0cc:	69fa      	ldr	r2, [r7, #28]
 800c0ce:	440a      	add	r2, r1
 800c0d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c0d8:	6013      	str	r3, [r2, #0]
 800c0da:	e00f      	b.n	800c0fc <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c0dc:	69bb      	ldr	r3, [r7, #24]
 800c0de:	015a      	lsls	r2, r3, #5
 800c0e0:	69fb      	ldr	r3, [r7, #28]
 800c0e2:	4413      	add	r3, r2
 800c0e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	69ba      	ldr	r2, [r7, #24]
 800c0ec:	0151      	lsls	r1, r2, #5
 800c0ee:	69fa      	ldr	r2, [r7, #28]
 800c0f0:	440a      	add	r2, r1
 800c0f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c0f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c0fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c0fc:	69bb      	ldr	r3, [r7, #24]
 800c0fe:	015a      	lsls	r2, r3, #5
 800c100:	69fb      	ldr	r3, [r7, #28]
 800c102:	4413      	add	r3, r2
 800c104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	69ba      	ldr	r2, [r7, #24]
 800c10c:	0151      	lsls	r1, r2, #5
 800c10e:	69fa      	ldr	r2, [r7, #28]
 800c110:	440a      	add	r2, r1
 800c112:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c116:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c11a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c11c:	2300      	movs	r3, #0
}
 800c11e:	4618      	mov	r0, r3
 800c120:	3720      	adds	r7, #32
 800c122:	46bd      	mov	sp, r7
 800c124:	bd80      	pop	{r7, pc}
 800c126:	bf00      	nop
 800c128:	1ff80000 	.word	0x1ff80000

0800c12c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c12c:	b480      	push	{r7}
 800c12e:	b087      	sub	sp, #28
 800c130:	af00      	add	r7, sp, #0
 800c132:	60f8      	str	r0, [r7, #12]
 800c134:	60b9      	str	r1, [r7, #8]
 800c136:	4613      	mov	r3, r2
 800c138:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c13e:	68bb      	ldr	r3, [r7, #8]
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c144:	68bb      	ldr	r3, [r7, #8]
 800c146:	785b      	ldrb	r3, [r3, #1]
 800c148:	2b01      	cmp	r3, #1
 800c14a:	f040 80cd 	bne.w	800c2e8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c14e:	68bb      	ldr	r3, [r7, #8]
 800c150:	695b      	ldr	r3, [r3, #20]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d132      	bne.n	800c1bc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	015a      	lsls	r2, r3, #5
 800c15a:	697b      	ldr	r3, [r7, #20]
 800c15c:	4413      	add	r3, r2
 800c15e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c162:	691b      	ldr	r3, [r3, #16]
 800c164:	693a      	ldr	r2, [r7, #16]
 800c166:	0151      	lsls	r1, r2, #5
 800c168:	697a      	ldr	r2, [r7, #20]
 800c16a:	440a      	add	r2, r1
 800c16c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c170:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c174:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c178:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	015a      	lsls	r2, r3, #5
 800c17e:	697b      	ldr	r3, [r7, #20]
 800c180:	4413      	add	r3, r2
 800c182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c186:	691b      	ldr	r3, [r3, #16]
 800c188:	693a      	ldr	r2, [r7, #16]
 800c18a:	0151      	lsls	r1, r2, #5
 800c18c:	697a      	ldr	r2, [r7, #20]
 800c18e:	440a      	add	r2, r1
 800c190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c194:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c198:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c19a:	693b      	ldr	r3, [r7, #16]
 800c19c:	015a      	lsls	r2, r3, #5
 800c19e:	697b      	ldr	r3, [r7, #20]
 800c1a0:	4413      	add	r3, r2
 800c1a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1a6:	691b      	ldr	r3, [r3, #16]
 800c1a8:	693a      	ldr	r2, [r7, #16]
 800c1aa:	0151      	lsls	r1, r2, #5
 800c1ac:	697a      	ldr	r2, [r7, #20]
 800c1ae:	440a      	add	r2, r1
 800c1b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1b4:	0cdb      	lsrs	r3, r3, #19
 800c1b6:	04db      	lsls	r3, r3, #19
 800c1b8:	6113      	str	r3, [r2, #16]
 800c1ba:	e04e      	b.n	800c25a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c1bc:	693b      	ldr	r3, [r7, #16]
 800c1be:	015a      	lsls	r2, r3, #5
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	4413      	add	r3, r2
 800c1c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1c8:	691b      	ldr	r3, [r3, #16]
 800c1ca:	693a      	ldr	r2, [r7, #16]
 800c1cc:	0151      	lsls	r1, r2, #5
 800c1ce:	697a      	ldr	r2, [r7, #20]
 800c1d0:	440a      	add	r2, r1
 800c1d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1d6:	0cdb      	lsrs	r3, r3, #19
 800c1d8:	04db      	lsls	r3, r3, #19
 800c1da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	015a      	lsls	r2, r3, #5
 800c1e0:	697b      	ldr	r3, [r7, #20]
 800c1e2:	4413      	add	r3, r2
 800c1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1e8:	691b      	ldr	r3, [r3, #16]
 800c1ea:	693a      	ldr	r2, [r7, #16]
 800c1ec:	0151      	lsls	r1, r2, #5
 800c1ee:	697a      	ldr	r2, [r7, #20]
 800c1f0:	440a      	add	r2, r1
 800c1f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c1fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c1fe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	695a      	ldr	r2, [r3, #20]
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	689b      	ldr	r3, [r3, #8]
 800c208:	429a      	cmp	r2, r3
 800c20a:	d903      	bls.n	800c214 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c20c:	68bb      	ldr	r3, [r7, #8]
 800c20e:	689a      	ldr	r2, [r3, #8]
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c214:	693b      	ldr	r3, [r7, #16]
 800c216:	015a      	lsls	r2, r3, #5
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	4413      	add	r3, r2
 800c21c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c220:	691b      	ldr	r3, [r3, #16]
 800c222:	693a      	ldr	r2, [r7, #16]
 800c224:	0151      	lsls	r1, r2, #5
 800c226:	697a      	ldr	r2, [r7, #20]
 800c228:	440a      	add	r2, r1
 800c22a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c22e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c232:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	015a      	lsls	r2, r3, #5
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	4413      	add	r3, r2
 800c23c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c240:	691a      	ldr	r2, [r3, #16]
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	695b      	ldr	r3, [r3, #20]
 800c246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c24a:	6939      	ldr	r1, [r7, #16]
 800c24c:	0148      	lsls	r0, r1, #5
 800c24e:	6979      	ldr	r1, [r7, #20]
 800c250:	4401      	add	r1, r0
 800c252:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c256:	4313      	orrs	r3, r2
 800c258:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c25a:	79fb      	ldrb	r3, [r7, #7]
 800c25c:	2b01      	cmp	r3, #1
 800c25e:	d11e      	bne.n	800c29e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	691b      	ldr	r3, [r3, #16]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d009      	beq.n	800c27c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c268:	693b      	ldr	r3, [r7, #16]
 800c26a:	015a      	lsls	r2, r3, #5
 800c26c:	697b      	ldr	r3, [r7, #20]
 800c26e:	4413      	add	r3, r2
 800c270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c274:	461a      	mov	r2, r3
 800c276:	68bb      	ldr	r3, [r7, #8]
 800c278:	691b      	ldr	r3, [r3, #16]
 800c27a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c27c:	693b      	ldr	r3, [r7, #16]
 800c27e:	015a      	lsls	r2, r3, #5
 800c280:	697b      	ldr	r3, [r7, #20]
 800c282:	4413      	add	r3, r2
 800c284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	693a      	ldr	r2, [r7, #16]
 800c28c:	0151      	lsls	r1, r2, #5
 800c28e:	697a      	ldr	r2, [r7, #20]
 800c290:	440a      	add	r2, r1
 800c292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c296:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c29a:	6013      	str	r3, [r2, #0]
 800c29c:	e092      	b.n	800c3c4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	015a      	lsls	r2, r3, #5
 800c2a2:	697b      	ldr	r3, [r7, #20]
 800c2a4:	4413      	add	r3, r2
 800c2a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	693a      	ldr	r2, [r7, #16]
 800c2ae:	0151      	lsls	r1, r2, #5
 800c2b0:	697a      	ldr	r2, [r7, #20]
 800c2b2:	440a      	add	r2, r1
 800c2b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c2b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c2bc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	695b      	ldr	r3, [r3, #20]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d07e      	beq.n	800c3c4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c2cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	781b      	ldrb	r3, [r3, #0]
 800c2d2:	f003 030f 	and.w	r3, r3, #15
 800c2d6:	2101      	movs	r1, #1
 800c2d8:	fa01 f303 	lsl.w	r3, r1, r3
 800c2dc:	6979      	ldr	r1, [r7, #20]
 800c2de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	634b      	str	r3, [r1, #52]	; 0x34
 800c2e6:	e06d      	b.n	800c3c4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	015a      	lsls	r2, r3, #5
 800c2ec:	697b      	ldr	r3, [r7, #20]
 800c2ee:	4413      	add	r3, r2
 800c2f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2f4:	691b      	ldr	r3, [r3, #16]
 800c2f6:	693a      	ldr	r2, [r7, #16]
 800c2f8:	0151      	lsls	r1, r2, #5
 800c2fa:	697a      	ldr	r2, [r7, #20]
 800c2fc:	440a      	add	r2, r1
 800c2fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c302:	0cdb      	lsrs	r3, r3, #19
 800c304:	04db      	lsls	r3, r3, #19
 800c306:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	015a      	lsls	r2, r3, #5
 800c30c:	697b      	ldr	r3, [r7, #20]
 800c30e:	4413      	add	r3, r2
 800c310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c314:	691b      	ldr	r3, [r3, #16]
 800c316:	693a      	ldr	r2, [r7, #16]
 800c318:	0151      	lsls	r1, r2, #5
 800c31a:	697a      	ldr	r2, [r7, #20]
 800c31c:	440a      	add	r2, r1
 800c31e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c322:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c326:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c32a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800c32c:	68bb      	ldr	r3, [r7, #8]
 800c32e:	695b      	ldr	r3, [r3, #20]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d003      	beq.n	800c33c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800c334:	68bb      	ldr	r3, [r7, #8]
 800c336:	689a      	ldr	r2, [r3, #8]
 800c338:	68bb      	ldr	r3, [r7, #8]
 800c33a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	015a      	lsls	r2, r3, #5
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	4413      	add	r3, r2
 800c344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c348:	691b      	ldr	r3, [r3, #16]
 800c34a:	693a      	ldr	r2, [r7, #16]
 800c34c:	0151      	lsls	r1, r2, #5
 800c34e:	697a      	ldr	r2, [r7, #20]
 800c350:	440a      	add	r2, r1
 800c352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c356:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c35a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	015a      	lsls	r2, r3, #5
 800c360:	697b      	ldr	r3, [r7, #20]
 800c362:	4413      	add	r3, r2
 800c364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c368:	691a      	ldr	r2, [r3, #16]
 800c36a:	68bb      	ldr	r3, [r7, #8]
 800c36c:	689b      	ldr	r3, [r3, #8]
 800c36e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c372:	6939      	ldr	r1, [r7, #16]
 800c374:	0148      	lsls	r0, r1, #5
 800c376:	6979      	ldr	r1, [r7, #20]
 800c378:	4401      	add	r1, r0
 800c37a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c37e:	4313      	orrs	r3, r2
 800c380:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c382:	79fb      	ldrb	r3, [r7, #7]
 800c384:	2b01      	cmp	r3, #1
 800c386:	d10d      	bne.n	800c3a4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c388:	68bb      	ldr	r3, [r7, #8]
 800c38a:	68db      	ldr	r3, [r3, #12]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d009      	beq.n	800c3a4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	68d9      	ldr	r1, [r3, #12]
 800c394:	693b      	ldr	r3, [r7, #16]
 800c396:	015a      	lsls	r2, r3, #5
 800c398:	697b      	ldr	r3, [r7, #20]
 800c39a:	4413      	add	r3, r2
 800c39c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3a0:	460a      	mov	r2, r1
 800c3a2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	015a      	lsls	r2, r3, #5
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	4413      	add	r3, r2
 800c3ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	693a      	ldr	r2, [r7, #16]
 800c3b4:	0151      	lsls	r1, r2, #5
 800c3b6:	697a      	ldr	r2, [r7, #20]
 800c3b8:	440a      	add	r2, r1
 800c3ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c3c2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c3c4:	2300      	movs	r3, #0
}
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	371c      	adds	r7, #28
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr

0800c3d2 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c3d2:	b480      	push	{r7}
 800c3d4:	b089      	sub	sp, #36	; 0x24
 800c3d6:	af00      	add	r7, sp, #0
 800c3d8:	60f8      	str	r0, [r7, #12]
 800c3da:	60b9      	str	r1, [r7, #8]
 800c3dc:	4611      	mov	r1, r2
 800c3de:	461a      	mov	r2, r3
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	71fb      	strb	r3, [r7, #7]
 800c3e4:	4613      	mov	r3, r2
 800c3e6:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c3ec:	68bb      	ldr	r3, [r7, #8]
 800c3ee:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c3f0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d123      	bne.n	800c440 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c3f8:	88bb      	ldrh	r3, [r7, #4]
 800c3fa:	3303      	adds	r3, #3
 800c3fc:	089b      	lsrs	r3, r3, #2
 800c3fe:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c400:	2300      	movs	r3, #0
 800c402:	61bb      	str	r3, [r7, #24]
 800c404:	e018      	b.n	800c438 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c406:	79fb      	ldrb	r3, [r7, #7]
 800c408:	031a      	lsls	r2, r3, #12
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	4413      	add	r3, r2
 800c40e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c412:	461a      	mov	r2, r3
 800c414:	69fb      	ldr	r3, [r7, #28]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c41a:	69fb      	ldr	r3, [r7, #28]
 800c41c:	3301      	adds	r3, #1
 800c41e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c420:	69fb      	ldr	r3, [r7, #28]
 800c422:	3301      	adds	r3, #1
 800c424:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c426:	69fb      	ldr	r3, [r7, #28]
 800c428:	3301      	adds	r3, #1
 800c42a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c42c:	69fb      	ldr	r3, [r7, #28]
 800c42e:	3301      	adds	r3, #1
 800c430:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c432:	69bb      	ldr	r3, [r7, #24]
 800c434:	3301      	adds	r3, #1
 800c436:	61bb      	str	r3, [r7, #24]
 800c438:	69ba      	ldr	r2, [r7, #24]
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d3e2      	bcc.n	800c406 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c440:	2300      	movs	r3, #0
}
 800c442:	4618      	mov	r0, r3
 800c444:	3724      	adds	r7, #36	; 0x24
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr

0800c44e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c44e:	b480      	push	{r7}
 800c450:	b08b      	sub	sp, #44	; 0x2c
 800c452:	af00      	add	r7, sp, #0
 800c454:	60f8      	str	r0, [r7, #12]
 800c456:	60b9      	str	r1, [r7, #8]
 800c458:	4613      	mov	r3, r2
 800c45a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c460:	68bb      	ldr	r3, [r7, #8]
 800c462:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c464:	88fb      	ldrh	r3, [r7, #6]
 800c466:	089b      	lsrs	r3, r3, #2
 800c468:	b29b      	uxth	r3, r3
 800c46a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c46c:	88fb      	ldrh	r3, [r7, #6]
 800c46e:	f003 0303 	and.w	r3, r3, #3
 800c472:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c474:	2300      	movs	r3, #0
 800c476:	623b      	str	r3, [r7, #32]
 800c478:	e014      	b.n	800c4a4 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c47a:	69bb      	ldr	r3, [r7, #24]
 800c47c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c480:	681a      	ldr	r2, [r3, #0]
 800c482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c484:	601a      	str	r2, [r3, #0]
    pDest++;
 800c486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c488:	3301      	adds	r3, #1
 800c48a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c48e:	3301      	adds	r3, #1
 800c490:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c494:	3301      	adds	r3, #1
 800c496:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49a:	3301      	adds	r3, #1
 800c49c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c49e:	6a3b      	ldr	r3, [r7, #32]
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	623b      	str	r3, [r7, #32]
 800c4a4:	6a3a      	ldr	r2, [r7, #32]
 800c4a6:	697b      	ldr	r3, [r7, #20]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d3e6      	bcc.n	800c47a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c4ac:	8bfb      	ldrh	r3, [r7, #30]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d01e      	beq.n	800c4f0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c4b6:	69bb      	ldr	r3, [r7, #24]
 800c4b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4bc:	461a      	mov	r2, r3
 800c4be:	f107 0310 	add.w	r3, r7, #16
 800c4c2:	6812      	ldr	r2, [r2, #0]
 800c4c4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c4c6:	693a      	ldr	r2, [r7, #16]
 800c4c8:	6a3b      	ldr	r3, [r7, #32]
 800c4ca:	b2db      	uxtb	r3, r3
 800c4cc:	00db      	lsls	r3, r3, #3
 800c4ce:	fa22 f303 	lsr.w	r3, r2, r3
 800c4d2:	b2da      	uxtb	r2, r3
 800c4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4d6:	701a      	strb	r2, [r3, #0]
      i++;
 800c4d8:	6a3b      	ldr	r3, [r7, #32]
 800c4da:	3301      	adds	r3, #1
 800c4dc:	623b      	str	r3, [r7, #32]
      pDest++;
 800c4de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4e0:	3301      	adds	r3, #1
 800c4e2:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c4e4:	8bfb      	ldrh	r3, [r7, #30]
 800c4e6:	3b01      	subs	r3, #1
 800c4e8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c4ea:	8bfb      	ldrh	r3, [r7, #30]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d1ea      	bne.n	800c4c6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c4f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	372c      	adds	r7, #44	; 0x2c
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4fc:	4770      	bx	lr

0800c4fe <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c4fe:	b480      	push	{r7}
 800c500:	b085      	sub	sp, #20
 800c502:	af00      	add	r7, sp, #0
 800c504:	6078      	str	r0, [r7, #4]
 800c506:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c50c:	683b      	ldr	r3, [r7, #0]
 800c50e:	781b      	ldrb	r3, [r3, #0]
 800c510:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	785b      	ldrb	r3, [r3, #1]
 800c516:	2b01      	cmp	r3, #1
 800c518:	d12c      	bne.n	800c574 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c51a:	68bb      	ldr	r3, [r7, #8]
 800c51c:	015a      	lsls	r2, r3, #5
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	4413      	add	r3, r2
 800c522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	2b00      	cmp	r3, #0
 800c52a:	db12      	blt.n	800c552 <USB_EPSetStall+0x54>
 800c52c:	68bb      	ldr	r3, [r7, #8]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d00f      	beq.n	800c552 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	015a      	lsls	r2, r3, #5
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	4413      	add	r3, r2
 800c53a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	68ba      	ldr	r2, [r7, #8]
 800c542:	0151      	lsls	r1, r2, #5
 800c544:	68fa      	ldr	r2, [r7, #12]
 800c546:	440a      	add	r2, r1
 800c548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c54c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c550:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c552:	68bb      	ldr	r3, [r7, #8]
 800c554:	015a      	lsls	r2, r3, #5
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	4413      	add	r3, r2
 800c55a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	68ba      	ldr	r2, [r7, #8]
 800c562:	0151      	lsls	r1, r2, #5
 800c564:	68fa      	ldr	r2, [r7, #12]
 800c566:	440a      	add	r2, r1
 800c568:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c56c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c570:	6013      	str	r3, [r2, #0]
 800c572:	e02b      	b.n	800c5cc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	015a      	lsls	r2, r3, #5
 800c578:	68fb      	ldr	r3, [r7, #12]
 800c57a:	4413      	add	r3, r2
 800c57c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	2b00      	cmp	r3, #0
 800c584:	db12      	blt.n	800c5ac <USB_EPSetStall+0xae>
 800c586:	68bb      	ldr	r3, [r7, #8]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d00f      	beq.n	800c5ac <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	015a      	lsls	r2, r3, #5
 800c590:	68fb      	ldr	r3, [r7, #12]
 800c592:	4413      	add	r3, r2
 800c594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	68ba      	ldr	r2, [r7, #8]
 800c59c:	0151      	lsls	r1, r2, #5
 800c59e:	68fa      	ldr	r2, [r7, #12]
 800c5a0:	440a      	add	r2, r1
 800c5a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c5aa:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	015a      	lsls	r2, r3, #5
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	4413      	add	r3, r2
 800c5b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	68ba      	ldr	r2, [r7, #8]
 800c5bc:	0151      	lsls	r1, r2, #5
 800c5be:	68fa      	ldr	r2, [r7, #12]
 800c5c0:	440a      	add	r2, r1
 800c5c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c5ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c5cc:	2300      	movs	r3, #0
}
 800c5ce:	4618      	mov	r0, r3
 800c5d0:	3714      	adds	r7, #20
 800c5d2:	46bd      	mov	sp, r7
 800c5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d8:	4770      	bx	lr

0800c5da <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c5da:	b480      	push	{r7}
 800c5dc:	b085      	sub	sp, #20
 800c5de:	af00      	add	r7, sp, #0
 800c5e0:	6078      	str	r0, [r7, #4]
 800c5e2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	781b      	ldrb	r3, [r3, #0]
 800c5ec:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c5ee:	683b      	ldr	r3, [r7, #0]
 800c5f0:	785b      	ldrb	r3, [r3, #1]
 800c5f2:	2b01      	cmp	r3, #1
 800c5f4:	d128      	bne.n	800c648 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	015a      	lsls	r2, r3, #5
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	4413      	add	r3, r2
 800c5fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	68ba      	ldr	r2, [r7, #8]
 800c606:	0151      	lsls	r1, r2, #5
 800c608:	68fa      	ldr	r2, [r7, #12]
 800c60a:	440a      	add	r2, r1
 800c60c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c610:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c614:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c616:	683b      	ldr	r3, [r7, #0]
 800c618:	78db      	ldrb	r3, [r3, #3]
 800c61a:	2b03      	cmp	r3, #3
 800c61c:	d003      	beq.n	800c626 <USB_EPClearStall+0x4c>
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	78db      	ldrb	r3, [r3, #3]
 800c622:	2b02      	cmp	r3, #2
 800c624:	d138      	bne.n	800c698 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c626:	68bb      	ldr	r3, [r7, #8]
 800c628:	015a      	lsls	r2, r3, #5
 800c62a:	68fb      	ldr	r3, [r7, #12]
 800c62c:	4413      	add	r3, r2
 800c62e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	68ba      	ldr	r2, [r7, #8]
 800c636:	0151      	lsls	r1, r2, #5
 800c638:	68fa      	ldr	r2, [r7, #12]
 800c63a:	440a      	add	r2, r1
 800c63c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c644:	6013      	str	r3, [r2, #0]
 800c646:	e027      	b.n	800c698 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	015a      	lsls	r2, r3, #5
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	4413      	add	r3, r2
 800c650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	68ba      	ldr	r2, [r7, #8]
 800c658:	0151      	lsls	r1, r2, #5
 800c65a:	68fa      	ldr	r2, [r7, #12]
 800c65c:	440a      	add	r2, r1
 800c65e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c662:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c666:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	78db      	ldrb	r3, [r3, #3]
 800c66c:	2b03      	cmp	r3, #3
 800c66e:	d003      	beq.n	800c678 <USB_EPClearStall+0x9e>
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	78db      	ldrb	r3, [r3, #3]
 800c674:	2b02      	cmp	r3, #2
 800c676:	d10f      	bne.n	800c698 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	015a      	lsls	r2, r3, #5
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	4413      	add	r3, r2
 800c680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	68ba      	ldr	r2, [r7, #8]
 800c688:	0151      	lsls	r1, r2, #5
 800c68a:	68fa      	ldr	r2, [r7, #12]
 800c68c:	440a      	add	r2, r1
 800c68e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c692:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c696:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c698:	2300      	movs	r3, #0
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3714      	adds	r7, #20
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a4:	4770      	bx	lr

0800c6a6 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c6a6:	b480      	push	{r7}
 800c6a8:	b085      	sub	sp, #20
 800c6aa:	af00      	add	r7, sp, #0
 800c6ac:	6078      	str	r0, [r7, #4]
 800c6ae:	460b      	mov	r3, r1
 800c6b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	68fa      	ldr	r2, [r7, #12]
 800c6c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c6c4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c6c8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6d0:	681a      	ldr	r2, [r3, #0]
 800c6d2:	78fb      	ldrb	r3, [r7, #3]
 800c6d4:	011b      	lsls	r3, r3, #4
 800c6d6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c6da:	68f9      	ldr	r1, [r7, #12]
 800c6dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c6e4:	2300      	movs	r3, #0
}
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	3714      	adds	r7, #20
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6f0:	4770      	bx	lr

0800c6f2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c6f2:	b480      	push	{r7}
 800c6f4:	b085      	sub	sp, #20
 800c6f6:	af00      	add	r7, sp, #0
 800c6f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	68fa      	ldr	r2, [r7, #12]
 800c708:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c70c:	f023 0303 	bic.w	r3, r3, #3
 800c710:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	68fa      	ldr	r2, [r7, #12]
 800c71c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c720:	f023 0302 	bic.w	r3, r3, #2
 800c724:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c726:	2300      	movs	r3, #0
}
 800c728:	4618      	mov	r0, r3
 800c72a:	3714      	adds	r7, #20
 800c72c:	46bd      	mov	sp, r7
 800c72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c732:	4770      	bx	lr

0800c734 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c734:	b480      	push	{r7}
 800c736:	b085      	sub	sp, #20
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	68fa      	ldr	r2, [r7, #12]
 800c74a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c74e:	f023 0303 	bic.w	r3, r3, #3
 800c752:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c75a:	685b      	ldr	r3, [r3, #4]
 800c75c:	68fa      	ldr	r2, [r7, #12]
 800c75e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c762:	f043 0302 	orr.w	r3, r3, #2
 800c766:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c768:	2300      	movs	r3, #0
}
 800c76a:	4618      	mov	r0, r3
 800c76c:	3714      	adds	r7, #20
 800c76e:	46bd      	mov	sp, r7
 800c770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c774:	4770      	bx	lr

0800c776 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c776:	b480      	push	{r7}
 800c778:	b085      	sub	sp, #20
 800c77a:	af00      	add	r7, sp, #0
 800c77c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	695b      	ldr	r3, [r3, #20]
 800c782:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	699b      	ldr	r3, [r3, #24]
 800c788:	68fa      	ldr	r2, [r7, #12]
 800c78a:	4013      	ands	r3, r2
 800c78c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c78e:	68fb      	ldr	r3, [r7, #12]
}
 800c790:	4618      	mov	r0, r3
 800c792:	3714      	adds	r7, #20
 800c794:	46bd      	mov	sp, r7
 800c796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c79a:	4770      	bx	lr

0800c79c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b085      	sub	sp, #20
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c7a8:	68fb      	ldr	r3, [r7, #12]
 800c7aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7ae:	699b      	ldr	r3, [r3, #24]
 800c7b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7b8:	69db      	ldr	r3, [r3, #28]
 800c7ba:	68ba      	ldr	r2, [r7, #8]
 800c7bc:	4013      	ands	r3, r2
 800c7be:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	0c1b      	lsrs	r3, r3, #16
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3714      	adds	r7, #20
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr

0800c7d0 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7d0:	b480      	push	{r7}
 800c7d2:	b085      	sub	sp, #20
 800c7d4:	af00      	add	r7, sp, #0
 800c7d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7e2:	699b      	ldr	r3, [r3, #24]
 800c7e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7ec:	69db      	ldr	r3, [r3, #28]
 800c7ee:	68ba      	ldr	r2, [r7, #8]
 800c7f0:	4013      	ands	r3, r2
 800c7f2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	b29b      	uxth	r3, r3
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3714      	adds	r7, #20
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr

0800c804 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c804:	b480      	push	{r7}
 800c806:	b085      	sub	sp, #20
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	460b      	mov	r3, r1
 800c80e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c814:	78fb      	ldrb	r3, [r7, #3]
 800c816:	015a      	lsls	r2, r3, #5
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	4413      	add	r3, r2
 800c81c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c820:	689b      	ldr	r3, [r3, #8]
 800c822:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c82a:	695b      	ldr	r3, [r3, #20]
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	4013      	ands	r3, r2
 800c830:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c832:	68bb      	ldr	r3, [r7, #8]
}
 800c834:	4618      	mov	r0, r3
 800c836:	3714      	adds	r7, #20
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr

0800c840 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c840:	b480      	push	{r7}
 800c842:	b087      	sub	sp, #28
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	460b      	mov	r3, r1
 800c84a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c856:	691b      	ldr	r3, [r3, #16]
 800c858:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c85a:	697b      	ldr	r3, [r7, #20]
 800c85c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c860:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c862:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c864:	78fb      	ldrb	r3, [r7, #3]
 800c866:	f003 030f 	and.w	r3, r3, #15
 800c86a:	68fa      	ldr	r2, [r7, #12]
 800c86c:	fa22 f303 	lsr.w	r3, r2, r3
 800c870:	01db      	lsls	r3, r3, #7
 800c872:	b2db      	uxtb	r3, r3
 800c874:	693a      	ldr	r2, [r7, #16]
 800c876:	4313      	orrs	r3, r2
 800c878:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c87a:	78fb      	ldrb	r3, [r7, #3]
 800c87c:	015a      	lsls	r2, r3, #5
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	4413      	add	r3, r2
 800c882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c886:	689b      	ldr	r3, [r3, #8]
 800c888:	693a      	ldr	r2, [r7, #16]
 800c88a:	4013      	ands	r3, r2
 800c88c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c88e:	68bb      	ldr	r3, [r7, #8]
}
 800c890:	4618      	mov	r0, r3
 800c892:	371c      	adds	r7, #28
 800c894:	46bd      	mov	sp, r7
 800c896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89a:	4770      	bx	lr

0800c89c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c89c:	b480      	push	{r7}
 800c89e:	b083      	sub	sp, #12
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	695b      	ldr	r3, [r3, #20]
 800c8a8:	f003 0301 	and.w	r3, r3, #1
}
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	370c      	adds	r7, #12
 800c8b0:	46bd      	mov	sp, r7
 800c8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b6:	4770      	bx	lr

0800c8b8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c8b8:	b480      	push	{r7}
 800c8ba:	b085      	sub	sp, #20
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	68fa      	ldr	r2, [r7, #12]
 800c8ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8d2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c8d6:	f023 0307 	bic.w	r3, r3, #7
 800c8da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8e2:	685b      	ldr	r3, [r3, #4]
 800c8e4:	68fa      	ldr	r2, [r7, #12]
 800c8e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c8ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c8f0:	2300      	movs	r3, #0
}
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	3714      	adds	r7, #20
 800c8f6:	46bd      	mov	sp, r7
 800c8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8fc:	4770      	bx	lr
	...

0800c900 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c900:	b480      	push	{r7}
 800c902:	b087      	sub	sp, #28
 800c904:	af00      	add	r7, sp, #0
 800c906:	60f8      	str	r0, [r7, #12]
 800c908:	460b      	mov	r3, r1
 800c90a:	607a      	str	r2, [r7, #4]
 800c90c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	333c      	adds	r3, #60	; 0x3c
 800c916:	3304      	adds	r3, #4
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c91c:	693b      	ldr	r3, [r7, #16]
 800c91e:	4a26      	ldr	r2, [pc, #152]	; (800c9b8 <USB_EP0_OutStart+0xb8>)
 800c920:	4293      	cmp	r3, r2
 800c922:	d90a      	bls.n	800c93a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c924:	697b      	ldr	r3, [r7, #20]
 800c926:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c930:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c934:	d101      	bne.n	800c93a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c936:	2300      	movs	r3, #0
 800c938:	e037      	b.n	800c9aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c93a:	697b      	ldr	r3, [r7, #20]
 800c93c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c940:	461a      	mov	r2, r3
 800c942:	2300      	movs	r3, #0
 800c944:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c946:	697b      	ldr	r3, [r7, #20]
 800c948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c94c:	691b      	ldr	r3, [r3, #16]
 800c94e:	697a      	ldr	r2, [r7, #20]
 800c950:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c954:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c958:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c960:	691b      	ldr	r3, [r3, #16]
 800c962:	697a      	ldr	r2, [r7, #20]
 800c964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c968:	f043 0318 	orr.w	r3, r3, #24
 800c96c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c96e:	697b      	ldr	r3, [r7, #20]
 800c970:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c974:	691b      	ldr	r3, [r3, #16]
 800c976:	697a      	ldr	r2, [r7, #20]
 800c978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c97c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c980:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c982:	7afb      	ldrb	r3, [r7, #11]
 800c984:	2b01      	cmp	r3, #1
 800c986:	d10f      	bne.n	800c9a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c98e:	461a      	mov	r2, r3
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c994:	697b      	ldr	r3, [r7, #20]
 800c996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	697a      	ldr	r2, [r7, #20]
 800c99e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9a2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c9a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c9a8:	2300      	movs	r3, #0
}
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	371c      	adds	r7, #28
 800c9ae:	46bd      	mov	sp, r7
 800c9b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b4:	4770      	bx	lr
 800c9b6:	bf00      	nop
 800c9b8:	4f54300a 	.word	0x4f54300a

0800c9bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c9bc:	b480      	push	{r7}
 800c9be:	b085      	sub	sp, #20
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c9c4:	2300      	movs	r3, #0
 800c9c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	3301      	adds	r3, #1
 800c9cc:	60fb      	str	r3, [r7, #12]
 800c9ce:	4a13      	ldr	r2, [pc, #76]	; (800ca1c <USB_CoreReset+0x60>)
 800c9d0:	4293      	cmp	r3, r2
 800c9d2:	d901      	bls.n	800c9d8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800c9d4:	2303      	movs	r3, #3
 800c9d6:	e01a      	b.n	800ca0e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	691b      	ldr	r3, [r3, #16]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	daf3      	bge.n	800c9c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	691b      	ldr	r3, [r3, #16]
 800c9e8:	f043 0201 	orr.w	r2, r3, #1
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	3301      	adds	r3, #1
 800c9f4:	60fb      	str	r3, [r7, #12]
 800c9f6:	4a09      	ldr	r2, [pc, #36]	; (800ca1c <USB_CoreReset+0x60>)
 800c9f8:	4293      	cmp	r3, r2
 800c9fa:	d901      	bls.n	800ca00 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800c9fc:	2303      	movs	r3, #3
 800c9fe:	e006      	b.n	800ca0e <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	691b      	ldr	r3, [r3, #16]
 800ca04:	f003 0301 	and.w	r3, r3, #1
 800ca08:	2b01      	cmp	r3, #1
 800ca0a:	d0f1      	beq.n	800c9f0 <USB_CoreReset+0x34>

  return HAL_OK;
 800ca0c:	2300      	movs	r3, #0
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3714      	adds	r7, #20
 800ca12:	46bd      	mov	sp, r7
 800ca14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca18:	4770      	bx	lr
 800ca1a:	bf00      	nop
 800ca1c:	00030d40 	.word	0x00030d40

0800ca20 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800ca24:	4904      	ldr	r1, [pc, #16]	; (800ca38 <MX_FATFS_Init+0x18>)
 800ca26:	4805      	ldr	r0, [pc, #20]	; (800ca3c <MX_FATFS_Init+0x1c>)
 800ca28:	f004 ff38 	bl	801189c <FATFS_LinkDriver>
 800ca2c:	4603      	mov	r3, r0
 800ca2e:	461a      	mov	r2, r3
 800ca30:	4b03      	ldr	r3, [pc, #12]	; (800ca40 <MX_FATFS_Init+0x20>)
 800ca32:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ca34:	bf00      	nop
 800ca36:	bd80      	pop	{r7, pc}
 800ca38:	20013334 	.word	0x20013334
 800ca3c:	20000014 	.word	0x20000014
 800ca40:	20013338 	.word	0x20013338

0800ca44 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800ca44:	b480      	push	{r7}
 800ca46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800ca48:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800ca4a:	4618      	mov	r0, r3
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr

0800ca54 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800ca54:	b580      	push	{r7, lr}
 800ca56:	b082      	sub	sp, #8
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize (pdrv);
 800ca5e:	79fb      	ldrb	r3, [r7, #7]
 800ca60:	4618      	mov	r0, r3
 800ca62:	f7f6 f825 	bl	8002ab0 <SD_disk_initialize>
 800ca66:	4603      	mov	r3, r0
 800ca68:	b2db      	uxtb	r3, r3

  /* USER CODE END INIT */
}
 800ca6a:	4618      	mov	r0, r3
 800ca6c:	3708      	adds	r7, #8
 800ca6e:	46bd      	mov	sp, r7
 800ca70:	bd80      	pop	{r7, pc}

0800ca72 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800ca72:	b580      	push	{r7, lr}
 800ca74:	b082      	sub	sp, #8
 800ca76:	af00      	add	r7, sp, #0
 800ca78:	4603      	mov	r3, r0
 800ca7a:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status (pdrv);
 800ca7c:	79fb      	ldrb	r3, [r7, #7]
 800ca7e:	4618      	mov	r0, r3
 800ca80:	f7f6 f900 	bl	8002c84 <SD_disk_status>
 800ca84:	4603      	mov	r3, r0
 800ca86:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	3708      	adds	r7, #8
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	bd80      	pop	{r7, pc}

0800ca90 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800ca90:	b580      	push	{r7, lr}
 800ca92:	b084      	sub	sp, #16
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	60b9      	str	r1, [r7, #8]
 800ca98:	607a      	str	r2, [r7, #4]
 800ca9a:	603b      	str	r3, [r7, #0]
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800caa0:	7bf8      	ldrb	r0, [r7, #15]
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	687a      	ldr	r2, [r7, #4]
 800caa6:	68b9      	ldr	r1, [r7, #8]
 800caa8:	f7f6 f902 	bl	8002cb0 <SD_disk_read>
 800caac:	4603      	mov	r3, r0
 800caae:	b2db      	uxtb	r3, r3
   // return RES_OK;
  /* USER CODE END READ */
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3710      	adds	r7, #16
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b084      	sub	sp, #16
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	60b9      	str	r1, [r7, #8]
 800cac0:	607a      	str	r2, [r7, #4]
 800cac2:	603b      	str	r3, [r7, #0]
 800cac4:	4603      	mov	r3, r0
 800cac6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
   // return RES_OK;
	return SD_disk_write (pdrv, buff, sector, count);
 800cac8:	7bf8      	ldrb	r0, [r7, #15]
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	687a      	ldr	r2, [r7, #4]
 800cace:	68b9      	ldr	r1, [r7, #8]
 800cad0:	f7f6 f958 	bl	8002d84 <SD_disk_write>
 800cad4:	4603      	mov	r3, r0
 800cad6:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3710      	adds	r7, #16
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	4603      	mov	r3, r0
 800cae8:	603a      	str	r2, [r7, #0]
 800caea:	71fb      	strb	r3, [r7, #7]
 800caec:	460b      	mov	r3, r1
 800caee:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl (pdrv,cmd, buff);
 800caf0:	79fb      	ldrb	r3, [r7, #7]
 800caf2:	79b9      	ldrb	r1, [r7, #6]
 800caf4:	683a      	ldr	r2, [r7, #0]
 800caf6:	4618      	mov	r0, r3
 800caf8:	f7f6 f9c8 	bl	8002e8c <SD_disk_ioctl>
 800cafc:	4603      	mov	r3, r0
 800cafe:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3708      	adds	r7, #8
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b084      	sub	sp, #16
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
 800cb10:	460b      	mov	r3, r1
 800cb12:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cb14:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cb18:	f009 fc50 	bl	80163bc <USBD_static_malloc>
 800cb1c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d105      	bne.n	800cb30 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2200      	movs	r2, #0
 800cb28:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800cb2c:	2302      	movs	r3, #2
 800cb2e:	e066      	b.n	800cbfe <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	68fa      	ldr	r2, [r7, #12]
 800cb34:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	7c1b      	ldrb	r3, [r3, #16]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d119      	bne.n	800cb74 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cb40:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb44:	2202      	movs	r2, #2
 800cb46:	2181      	movs	r1, #129	; 0x81
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f009 fb14 	bl	8016176 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2201      	movs	r2, #1
 800cb52:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cb54:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cb58:	2202      	movs	r2, #2
 800cb5a:	2101      	movs	r1, #1
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f009 fb0a 	bl	8016176 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	2201      	movs	r2, #1
 800cb66:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2210      	movs	r2, #16
 800cb6e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800cb72:	e016      	b.n	800cba2 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cb74:	2340      	movs	r3, #64	; 0x40
 800cb76:	2202      	movs	r2, #2
 800cb78:	2181      	movs	r1, #129	; 0x81
 800cb7a:	6878      	ldr	r0, [r7, #4]
 800cb7c:	f009 fafb 	bl	8016176 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	2201      	movs	r2, #1
 800cb84:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cb86:	2340      	movs	r3, #64	; 0x40
 800cb88:	2202      	movs	r2, #2
 800cb8a:	2101      	movs	r1, #1
 800cb8c:	6878      	ldr	r0, [r7, #4]
 800cb8e:	f009 faf2 	bl	8016176 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2201      	movs	r2, #1
 800cb96:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	2210      	movs	r2, #16
 800cb9e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cba2:	2308      	movs	r3, #8
 800cba4:	2203      	movs	r2, #3
 800cba6:	2182      	movs	r1, #130	; 0x82
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f009 fae4 	bl	8016176 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2201      	movs	r2, #1
 800cbb2:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	2200      	movs	r2, #0
 800cbc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	2200      	movs	r2, #0
 800cbcc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	7c1b      	ldrb	r3, [r3, #16]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d109      	bne.n	800cbec <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cbde:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cbe2:	2101      	movs	r1, #1
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f009 fbb5 	bl	8016354 <USBD_LL_PrepareReceive>
 800cbea:	e007      	b.n	800cbfc <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cbf2:	2340      	movs	r3, #64	; 0x40
 800cbf4:	2101      	movs	r1, #1
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f009 fbac 	bl	8016354 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cbfc:	2300      	movs	r3, #0
}
 800cbfe:	4618      	mov	r0, r3
 800cc00:	3710      	adds	r7, #16
 800cc02:	46bd      	mov	sp, r7
 800cc04:	bd80      	pop	{r7, pc}

0800cc06 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cc06:	b580      	push	{r7, lr}
 800cc08:	b082      	sub	sp, #8
 800cc0a:	af00      	add	r7, sp, #0
 800cc0c:	6078      	str	r0, [r7, #4]
 800cc0e:	460b      	mov	r3, r1
 800cc10:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800cc12:	2181      	movs	r1, #129	; 0x81
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	f009 fad4 	bl	80161c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	2200      	movs	r2, #0
 800cc1e:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800cc20:	2101      	movs	r1, #1
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f009 facd 	bl	80161c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800cc30:	2182      	movs	r1, #130	; 0x82
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f009 fac5 	bl	80161c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2200      	movs	r2, #0
 800cc44:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d00e      	beq.n	800cc70 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cc58:	685b      	ldr	r3, [r3, #4]
 800cc5a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc62:	4618      	mov	r0, r3
 800cc64:	f009 fbb8 	bl	80163d8 <USBD_static_free>
    pdev->pClassData = NULL;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cc70:	2300      	movs	r3, #0
}
 800cc72:	4618      	mov	r0, r3
 800cc74:	3708      	adds	r7, #8
 800cc76:	46bd      	mov	sp, r7
 800cc78:	bd80      	pop	{r7, pc}
	...

0800cc7c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b086      	sub	sp, #24
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
 800cc84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cc8c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cc92:	2300      	movs	r3, #0
 800cc94:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc96:	2300      	movs	r3, #0
 800cc98:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d101      	bne.n	800cca4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800cca0:	2303      	movs	r3, #3
 800cca2:	e0af      	b.n	800ce04 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cca4:	683b      	ldr	r3, [r7, #0]
 800cca6:	781b      	ldrb	r3, [r3, #0]
 800cca8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d03f      	beq.n	800cd30 <USBD_CDC_Setup+0xb4>
 800ccb0:	2b20      	cmp	r3, #32
 800ccb2:	f040 809f 	bne.w	800cdf4 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	88db      	ldrh	r3, [r3, #6]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d02e      	beq.n	800cd1c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	b25b      	sxtb	r3, r3
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	da16      	bge.n	800ccf6 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ccce:	689b      	ldr	r3, [r3, #8]
 800ccd0:	683a      	ldr	r2, [r7, #0]
 800ccd2:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800ccd4:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800ccd6:	683a      	ldr	r2, [r7, #0]
 800ccd8:	88d2      	ldrh	r2, [r2, #6]
 800ccda:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ccdc:	683b      	ldr	r3, [r7, #0]
 800ccde:	88db      	ldrh	r3, [r3, #6]
 800cce0:	2b07      	cmp	r3, #7
 800cce2:	bf28      	it	cs
 800cce4:	2307      	movcs	r3, #7
 800cce6:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cce8:	693b      	ldr	r3, [r7, #16]
 800ccea:	89fa      	ldrh	r2, [r7, #14]
 800ccec:	4619      	mov	r1, r3
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f001 fb19 	bl	800e326 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800ccf4:	e085      	b.n	800ce02 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800ccf6:	683b      	ldr	r3, [r7, #0]
 800ccf8:	785a      	ldrb	r2, [r3, #1]
 800ccfa:	693b      	ldr	r3, [r7, #16]
 800ccfc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	88db      	ldrh	r3, [r3, #6]
 800cd04:	b2da      	uxtb	r2, r3
 800cd06:	693b      	ldr	r3, [r7, #16]
 800cd08:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800cd0c:	6939      	ldr	r1, [r7, #16]
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	88db      	ldrh	r3, [r3, #6]
 800cd12:	461a      	mov	r2, r3
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f001 fb32 	bl	800e37e <USBD_CtlPrepareRx>
      break;
 800cd1a:	e072      	b.n	800ce02 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cd22:	689b      	ldr	r3, [r3, #8]
 800cd24:	683a      	ldr	r2, [r7, #0]
 800cd26:	7850      	ldrb	r0, [r2, #1]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	6839      	ldr	r1, [r7, #0]
 800cd2c:	4798      	blx	r3
      break;
 800cd2e:	e068      	b.n	800ce02 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cd30:	683b      	ldr	r3, [r7, #0]
 800cd32:	785b      	ldrb	r3, [r3, #1]
 800cd34:	2b0b      	cmp	r3, #11
 800cd36:	d852      	bhi.n	800cdde <USBD_CDC_Setup+0x162>
 800cd38:	a201      	add	r2, pc, #4	; (adr r2, 800cd40 <USBD_CDC_Setup+0xc4>)
 800cd3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd3e:	bf00      	nop
 800cd40:	0800cd71 	.word	0x0800cd71
 800cd44:	0800cded 	.word	0x0800cded
 800cd48:	0800cddf 	.word	0x0800cddf
 800cd4c:	0800cddf 	.word	0x0800cddf
 800cd50:	0800cddf 	.word	0x0800cddf
 800cd54:	0800cddf 	.word	0x0800cddf
 800cd58:	0800cddf 	.word	0x0800cddf
 800cd5c:	0800cddf 	.word	0x0800cddf
 800cd60:	0800cddf 	.word	0x0800cddf
 800cd64:	0800cddf 	.word	0x0800cddf
 800cd68:	0800cd9b 	.word	0x0800cd9b
 800cd6c:	0800cdc5 	.word	0x0800cdc5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd76:	b2db      	uxtb	r3, r3
 800cd78:	2b03      	cmp	r3, #3
 800cd7a:	d107      	bne.n	800cd8c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cd7c:	f107 030a 	add.w	r3, r7, #10
 800cd80:	2202      	movs	r2, #2
 800cd82:	4619      	mov	r1, r3
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f001 face 	bl	800e326 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cd8a:	e032      	b.n	800cdf2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800cd8c:	6839      	ldr	r1, [r7, #0]
 800cd8e:	6878      	ldr	r0, [r7, #4]
 800cd90:	f001 fa58 	bl	800e244 <USBD_CtlError>
            ret = USBD_FAIL;
 800cd94:	2303      	movs	r3, #3
 800cd96:	75fb      	strb	r3, [r7, #23]
          break;
 800cd98:	e02b      	b.n	800cdf2 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cda0:	b2db      	uxtb	r3, r3
 800cda2:	2b03      	cmp	r3, #3
 800cda4:	d107      	bne.n	800cdb6 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cda6:	f107 030d 	add.w	r3, r7, #13
 800cdaa:	2201      	movs	r2, #1
 800cdac:	4619      	mov	r1, r3
 800cdae:	6878      	ldr	r0, [r7, #4]
 800cdb0:	f001 fab9 	bl	800e326 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cdb4:	e01d      	b.n	800cdf2 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800cdb6:	6839      	ldr	r1, [r7, #0]
 800cdb8:	6878      	ldr	r0, [r7, #4]
 800cdba:	f001 fa43 	bl	800e244 <USBD_CtlError>
            ret = USBD_FAIL;
 800cdbe:	2303      	movs	r3, #3
 800cdc0:	75fb      	strb	r3, [r7, #23]
          break;
 800cdc2:	e016      	b.n	800cdf2 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdca:	b2db      	uxtb	r3, r3
 800cdcc:	2b03      	cmp	r3, #3
 800cdce:	d00f      	beq.n	800cdf0 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800cdd0:	6839      	ldr	r1, [r7, #0]
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f001 fa36 	bl	800e244 <USBD_CtlError>
            ret = USBD_FAIL;
 800cdd8:	2303      	movs	r3, #3
 800cdda:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cddc:	e008      	b.n	800cdf0 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cdde:	6839      	ldr	r1, [r7, #0]
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f001 fa2f 	bl	800e244 <USBD_CtlError>
          ret = USBD_FAIL;
 800cde6:	2303      	movs	r3, #3
 800cde8:	75fb      	strb	r3, [r7, #23]
          break;
 800cdea:	e002      	b.n	800cdf2 <USBD_CDC_Setup+0x176>
          break;
 800cdec:	bf00      	nop
 800cdee:	e008      	b.n	800ce02 <USBD_CDC_Setup+0x186>
          break;
 800cdf0:	bf00      	nop
      }
      break;
 800cdf2:	e006      	b.n	800ce02 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800cdf4:	6839      	ldr	r1, [r7, #0]
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	f001 fa24 	bl	800e244 <USBD_CtlError>
      ret = USBD_FAIL;
 800cdfc:	2303      	movs	r3, #3
 800cdfe:	75fb      	strb	r3, [r7, #23]
      break;
 800ce00:	bf00      	nop
  }

  return (uint8_t)ret;
 800ce02:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce04:	4618      	mov	r0, r3
 800ce06:	3718      	adds	r7, #24
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	bd80      	pop	{r7, pc}

0800ce0c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b084      	sub	sp, #16
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	460b      	mov	r3, r1
 800ce16:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ce1e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d101      	bne.n	800ce2e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ce2a:	2303      	movs	r3, #3
 800ce2c:	e04f      	b.n	800cece <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce34:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ce36:	78fa      	ldrb	r2, [r7, #3]
 800ce38:	6879      	ldr	r1, [r7, #4]
 800ce3a:	4613      	mov	r3, r2
 800ce3c:	009b      	lsls	r3, r3, #2
 800ce3e:	4413      	add	r3, r2
 800ce40:	009b      	lsls	r3, r3, #2
 800ce42:	440b      	add	r3, r1
 800ce44:	3318      	adds	r3, #24
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d029      	beq.n	800cea0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ce4c:	78fa      	ldrb	r2, [r7, #3]
 800ce4e:	6879      	ldr	r1, [r7, #4]
 800ce50:	4613      	mov	r3, r2
 800ce52:	009b      	lsls	r3, r3, #2
 800ce54:	4413      	add	r3, r2
 800ce56:	009b      	lsls	r3, r3, #2
 800ce58:	440b      	add	r3, r1
 800ce5a:	3318      	adds	r3, #24
 800ce5c:	681a      	ldr	r2, [r3, #0]
 800ce5e:	78f9      	ldrb	r1, [r7, #3]
 800ce60:	68f8      	ldr	r0, [r7, #12]
 800ce62:	460b      	mov	r3, r1
 800ce64:	00db      	lsls	r3, r3, #3
 800ce66:	1a5b      	subs	r3, r3, r1
 800ce68:	009b      	lsls	r3, r3, #2
 800ce6a:	4403      	add	r3, r0
 800ce6c:	3344      	adds	r3, #68	; 0x44
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	fbb2 f1f3 	udiv	r1, r2, r3
 800ce74:	fb03 f301 	mul.w	r3, r3, r1
 800ce78:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d110      	bne.n	800cea0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800ce7e:	78fa      	ldrb	r2, [r7, #3]
 800ce80:	6879      	ldr	r1, [r7, #4]
 800ce82:	4613      	mov	r3, r2
 800ce84:	009b      	lsls	r3, r3, #2
 800ce86:	4413      	add	r3, r2
 800ce88:	009b      	lsls	r3, r3, #2
 800ce8a:	440b      	add	r3, r1
 800ce8c:	3318      	adds	r3, #24
 800ce8e:	2200      	movs	r2, #0
 800ce90:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ce92:	78f9      	ldrb	r1, [r7, #3]
 800ce94:	2300      	movs	r3, #0
 800ce96:	2200      	movs	r2, #0
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f009 fa3a 	bl	8016312 <USBD_LL_Transmit>
 800ce9e:	e015      	b.n	800cecc <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800cea0:	68bb      	ldr	r3, [r7, #8]
 800cea2:	2200      	movs	r2, #0
 800cea4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ceae:	691b      	ldr	r3, [r3, #16]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d00b      	beq.n	800cecc <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ceba:	691b      	ldr	r3, [r3, #16]
 800cebc:	68ba      	ldr	r2, [r7, #8]
 800cebe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cec2:	68ba      	ldr	r2, [r7, #8]
 800cec4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cec8:	78fa      	ldrb	r2, [r7, #3]
 800ceca:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cecc:	2300      	movs	r3, #0
}
 800cece:	4618      	mov	r0, r3
 800ced0:	3710      	adds	r7, #16
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}

0800ced6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ced6:	b580      	push	{r7, lr}
 800ced8:	b084      	sub	sp, #16
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	6078      	str	r0, [r7, #4]
 800cede:	460b      	mov	r3, r1
 800cee0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cee8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d101      	bne.n	800cef8 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cef4:	2303      	movs	r3, #3
 800cef6:	e015      	b.n	800cf24 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cef8:	78fb      	ldrb	r3, [r7, #3]
 800cefa:	4619      	mov	r1, r3
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f009 fa4a 	bl	8016396 <USBD_LL_GetRxDataSize>
 800cf02:	4602      	mov	r2, r0
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf10:	68db      	ldr	r3, [r3, #12]
 800cf12:	68fa      	ldr	r2, [r7, #12]
 800cf14:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cf18:	68fa      	ldr	r2, [r7, #12]
 800cf1a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cf1e:	4611      	mov	r1, r2
 800cf20:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cf22:	2300      	movs	r3, #0
}
 800cf24:	4618      	mov	r0, r3
 800cf26:	3710      	adds	r7, #16
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}

0800cf2c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800cf3a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d101      	bne.n	800cf46 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800cf42:	2303      	movs	r3, #3
 800cf44:	e01b      	b.n	800cf7e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d015      	beq.n	800cf7c <USBD_CDC_EP0_RxReady+0x50>
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cf56:	2bff      	cmp	r3, #255	; 0xff
 800cf58:	d010      	beq.n	800cf7c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800cf60:	689b      	ldr	r3, [r3, #8]
 800cf62:	68fa      	ldr	r2, [r7, #12]
 800cf64:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800cf68:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800cf6a:	68fa      	ldr	r2, [r7, #12]
 800cf6c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cf70:	b292      	uxth	r2, r2
 800cf72:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	22ff      	movs	r2, #255	; 0xff
 800cf78:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800cf7c:	2300      	movs	r3, #0
}
 800cf7e:	4618      	mov	r0, r3
 800cf80:	3710      	adds	r7, #16
 800cf82:	46bd      	mov	sp, r7
 800cf84:	bd80      	pop	{r7, pc}
	...

0800cf88 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cf88:	b480      	push	{r7}
 800cf8a:	b083      	sub	sp, #12
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	2243      	movs	r2, #67	; 0x43
 800cf94:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800cf96:	4b03      	ldr	r3, [pc, #12]	; (800cfa4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	370c      	adds	r7, #12
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa2:	4770      	bx	lr
 800cfa4:	200000b0 	.word	0x200000b0

0800cfa8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b083      	sub	sp, #12
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2243      	movs	r2, #67	; 0x43
 800cfb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800cfb6:	4b03      	ldr	r3, [pc, #12]	; (800cfc4 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	370c      	adds	r7, #12
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr
 800cfc4:	2000006c 	.word	0x2000006c

0800cfc8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b083      	sub	sp, #12
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2243      	movs	r2, #67	; 0x43
 800cfd4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800cfd6:	4b03      	ldr	r3, [pc, #12]	; (800cfe4 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	370c      	adds	r7, #12
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe2:	4770      	bx	lr
 800cfe4:	200000f4 	.word	0x200000f4

0800cfe8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cfe8:	b480      	push	{r7}
 800cfea:	b083      	sub	sp, #12
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	220a      	movs	r2, #10
 800cff4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cff6:	4b03      	ldr	r3, [pc, #12]	; (800d004 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	370c      	adds	r7, #12
 800cffc:	46bd      	mov	sp, r7
 800cffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d002:	4770      	bx	lr
 800d004:	20000028 	.word	0x20000028

0800d008 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d008:	b480      	push	{r7}
 800d00a:	b083      	sub	sp, #12
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
 800d010:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	2b00      	cmp	r3, #0
 800d016:	d101      	bne.n	800d01c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d018:	2303      	movs	r3, #3
 800d01a:	e004      	b.n	800d026 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	683a      	ldr	r2, [r7, #0]
 800d020:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d024:	2300      	movs	r3, #0
}
 800d026:	4618      	mov	r0, r3
 800d028:	370c      	adds	r7, #12
 800d02a:	46bd      	mov	sp, r7
 800d02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d030:	4770      	bx	lr

0800d032 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d032:	b480      	push	{r7}
 800d034:	b087      	sub	sp, #28
 800d036:	af00      	add	r7, sp, #0
 800d038:	60f8      	str	r0, [r7, #12]
 800d03a:	60b9      	str	r1, [r7, #8]
 800d03c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d044:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d101      	bne.n	800d050 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d04c:	2303      	movs	r3, #3
 800d04e:	e008      	b.n	800d062 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800d050:	697b      	ldr	r3, [r7, #20]
 800d052:	68ba      	ldr	r2, [r7, #8]
 800d054:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d058:	697b      	ldr	r3, [r7, #20]
 800d05a:	687a      	ldr	r2, [r7, #4]
 800d05c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d060:	2300      	movs	r3, #0
}
 800d062:	4618      	mov	r0, r3
 800d064:	371c      	adds	r7, #28
 800d066:	46bd      	mov	sp, r7
 800d068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06c:	4770      	bx	lr

0800d06e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d06e:	b480      	push	{r7}
 800d070:	b085      	sub	sp, #20
 800d072:	af00      	add	r7, sp, #0
 800d074:	6078      	str	r0, [r7, #4]
 800d076:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d07e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d101      	bne.n	800d08a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800d086:	2303      	movs	r3, #3
 800d088:	e004      	b.n	800d094 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	683a      	ldr	r2, [r7, #0]
 800d08e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d092:	2300      	movs	r3, #0
}
 800d094:	4618      	mov	r0, r3
 800d096:	3714      	adds	r7, #20
 800d098:	46bd      	mov	sp, r7
 800d09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d09e:	4770      	bx	lr

0800d0a0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b084      	sub	sp, #16
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d0ae:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d101      	bne.n	800d0c2 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d0be:	2303      	movs	r3, #3
 800d0c0:	e01a      	b.n	800d0f8 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d114      	bne.n	800d0f6 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	2201      	movs	r2, #1
 800d0d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d0e4:	68bb      	ldr	r3, [r7, #8]
 800d0e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d0ea:	2181      	movs	r1, #129	; 0x81
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f009 f910 	bl	8016312 <USBD_LL_Transmit>

    ret = USBD_OK;
 800d0f2:	2300      	movs	r3, #0
 800d0f4:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d0f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0f8:	4618      	mov	r0, r3
 800d0fa:	3710      	adds	r7, #16
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	bd80      	pop	{r7, pc}

0800d100 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d100:	b580      	push	{r7, lr}
 800d102:	b084      	sub	sp, #16
 800d104:	af00      	add	r7, sp, #0
 800d106:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d10e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d116:	2b00      	cmp	r3, #0
 800d118:	d101      	bne.n	800d11e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800d11a:	2303      	movs	r3, #3
 800d11c:	e016      	b.n	800d14c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	7c1b      	ldrb	r3, [r3, #16]
 800d122:	2b00      	cmp	r3, #0
 800d124:	d109      	bne.n	800d13a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d126:	68fb      	ldr	r3, [r7, #12]
 800d128:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d12c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d130:	2101      	movs	r1, #1
 800d132:	6878      	ldr	r0, [r7, #4]
 800d134:	f009 f90e 	bl	8016354 <USBD_LL_PrepareReceive>
 800d138:	e007      	b.n	800d14a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d13a:	68fb      	ldr	r3, [r7, #12]
 800d13c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d140:	2340      	movs	r3, #64	; 0x40
 800d142:	2101      	movs	r1, #1
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f009 f905 	bl	8016354 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d14a:	2300      	movs	r3, #0
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3710      	adds	r7, #16
 800d150:	46bd      	mov	sp, r7
 800d152:	bd80      	pop	{r7, pc}

0800d154 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d154:	b580      	push	{r7, lr}
 800d156:	b086      	sub	sp, #24
 800d158:	af00      	add	r7, sp, #0
 800d15a:	60f8      	str	r0, [r7, #12]
 800d15c:	60b9      	str	r1, [r7, #8]
 800d15e:	4613      	mov	r3, r2
 800d160:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	2b00      	cmp	r3, #0
 800d166:	d101      	bne.n	800d16c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d168:	2303      	movs	r3, #3
 800d16a:	e01f      	b.n	800d1ac <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	2200      	movs	r2, #0
 800d170:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2200      	movs	r2, #0
 800d178:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2200      	movs	r2, #0
 800d180:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	2b00      	cmp	r3, #0
 800d188:	d003      	beq.n	800d192 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	68ba      	ldr	r2, [r7, #8]
 800d18e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	2201      	movs	r2, #1
 800d196:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	79fa      	ldrb	r2, [r7, #7]
 800d19e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d1a0:	68f8      	ldr	r0, [r7, #12]
 800d1a2:	f008 ff81 	bl	80160a8 <USBD_LL_Init>
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d1aa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	3718      	adds	r7, #24
 800d1b0:	46bd      	mov	sp, r7
 800d1b2:	bd80      	pop	{r7, pc}

0800d1b4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d1b4:	b580      	push	{r7, lr}
 800d1b6:	b084      	sub	sp, #16
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	6078      	str	r0, [r7, #4]
 800d1bc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d1be:	2300      	movs	r3, #0
 800d1c0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d101      	bne.n	800d1cc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800d1c8:	2303      	movs	r3, #3
 800d1ca:	e016      	b.n	800d1fa <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	683a      	ldr	r2, [r7, #0]
 800d1d0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d00b      	beq.n	800d1f8 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e8:	f107 020e 	add.w	r2, r7, #14
 800d1ec:	4610      	mov	r0, r2
 800d1ee:	4798      	blx	r3
 800d1f0:	4602      	mov	r2, r0
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800d1f8:	2300      	movs	r3, #0
}
 800d1fa:	4618      	mov	r0, r3
 800d1fc:	3710      	adds	r7, #16
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}

0800d202 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d202:	b580      	push	{r7, lr}
 800d204:	b082      	sub	sp, #8
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d20a:	6878      	ldr	r0, [r7, #4]
 800d20c:	f008 ff98 	bl	8016140 <USBD_LL_Start>
 800d210:	4603      	mov	r3, r0
}
 800d212:	4618      	mov	r0, r3
 800d214:	3708      	adds	r7, #8
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}

0800d21a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800d21a:	b480      	push	{r7}
 800d21c:	b083      	sub	sp, #12
 800d21e:	af00      	add	r7, sp, #0
 800d220:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d222:	2300      	movs	r3, #0
}
 800d224:	4618      	mov	r0, r3
 800d226:	370c      	adds	r7, #12
 800d228:	46bd      	mov	sp, r7
 800d22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d22e:	4770      	bx	lr

0800d230 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b084      	sub	sp, #16
 800d234:	af00      	add	r7, sp, #0
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	460b      	mov	r3, r1
 800d23a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800d23c:	2303      	movs	r3, #3
 800d23e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d246:	2b00      	cmp	r3, #0
 800d248:	d009      	beq.n	800d25e <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	78fa      	ldrb	r2, [r7, #3]
 800d254:	4611      	mov	r1, r2
 800d256:	6878      	ldr	r0, [r7, #4]
 800d258:	4798      	blx	r3
 800d25a:	4603      	mov	r3, r0
 800d25c:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d25e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d260:	4618      	mov	r0, r3
 800d262:	3710      	adds	r7, #16
 800d264:	46bd      	mov	sp, r7
 800d266:	bd80      	pop	{r7, pc}

0800d268 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d268:	b580      	push	{r7, lr}
 800d26a:	b082      	sub	sp, #8
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
 800d270:	460b      	mov	r3, r1
 800d272:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d007      	beq.n	800d28e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d284:	685b      	ldr	r3, [r3, #4]
 800d286:	78fa      	ldrb	r2, [r7, #3]
 800d288:	4611      	mov	r1, r2
 800d28a:	6878      	ldr	r0, [r7, #4]
 800d28c:	4798      	blx	r3
  }

  return USBD_OK;
 800d28e:	2300      	movs	r3, #0
}
 800d290:	4618      	mov	r0, r3
 800d292:	3708      	adds	r7, #8
 800d294:	46bd      	mov	sp, r7
 800d296:	bd80      	pop	{r7, pc}

0800d298 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d298:	b580      	push	{r7, lr}
 800d29a:	b084      	sub	sp, #16
 800d29c:	af00      	add	r7, sp, #0
 800d29e:	6078      	str	r0, [r7, #4]
 800d2a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d2a8:	6839      	ldr	r1, [r7, #0]
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f000 ff90 	bl	800e1d0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	2201      	movs	r2, #1
 800d2b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d2be:	461a      	mov	r2, r3
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d2cc:	f003 031f 	and.w	r3, r3, #31
 800d2d0:	2b02      	cmp	r3, #2
 800d2d2:	d01a      	beq.n	800d30a <USBD_LL_SetupStage+0x72>
 800d2d4:	2b02      	cmp	r3, #2
 800d2d6:	d822      	bhi.n	800d31e <USBD_LL_SetupStage+0x86>
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d002      	beq.n	800d2e2 <USBD_LL_SetupStage+0x4a>
 800d2dc:	2b01      	cmp	r3, #1
 800d2de:	d00a      	beq.n	800d2f6 <USBD_LL_SetupStage+0x5e>
 800d2e0:	e01d      	b.n	800d31e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f000 fa62 	bl	800d7b4 <USBD_StdDevReq>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	73fb      	strb	r3, [r7, #15]
      break;
 800d2f4:	e020      	b.n	800d338 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d2fc:	4619      	mov	r1, r3
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f000 fac6 	bl	800d890 <USBD_StdItfReq>
 800d304:	4603      	mov	r3, r0
 800d306:	73fb      	strb	r3, [r7, #15]
      break;
 800d308:	e016      	b.n	800d338 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d310:	4619      	mov	r1, r3
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f000 fb05 	bl	800d922 <USBD_StdEPReq>
 800d318:	4603      	mov	r3, r0
 800d31a:	73fb      	strb	r3, [r7, #15]
      break;
 800d31c:	e00c      	b.n	800d338 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d324:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d328:	b2db      	uxtb	r3, r3
 800d32a:	4619      	mov	r1, r3
 800d32c:	6878      	ldr	r0, [r7, #4]
 800d32e:	f008 ff67 	bl	8016200 <USBD_LL_StallEP>
 800d332:	4603      	mov	r3, r0
 800d334:	73fb      	strb	r3, [r7, #15]
      break;
 800d336:	bf00      	nop
  }

  return ret;
 800d338:	7bfb      	ldrb	r3, [r7, #15]
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3710      	adds	r7, #16
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}

0800d342 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d342:	b580      	push	{r7, lr}
 800d344:	b086      	sub	sp, #24
 800d346:	af00      	add	r7, sp, #0
 800d348:	60f8      	str	r0, [r7, #12]
 800d34a:	460b      	mov	r3, r1
 800d34c:	607a      	str	r2, [r7, #4]
 800d34e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d350:	7afb      	ldrb	r3, [r7, #11]
 800d352:	2b00      	cmp	r3, #0
 800d354:	d138      	bne.n	800d3c8 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d35c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d364:	2b03      	cmp	r3, #3
 800d366:	d14a      	bne.n	800d3fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	689a      	ldr	r2, [r3, #8]
 800d36c:	693b      	ldr	r3, [r7, #16]
 800d36e:	68db      	ldr	r3, [r3, #12]
 800d370:	429a      	cmp	r2, r3
 800d372:	d913      	bls.n	800d39c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	689a      	ldr	r2, [r3, #8]
 800d378:	693b      	ldr	r3, [r7, #16]
 800d37a:	68db      	ldr	r3, [r3, #12]
 800d37c:	1ad2      	subs	r2, r2, r3
 800d37e:	693b      	ldr	r3, [r7, #16]
 800d380:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d382:	693b      	ldr	r3, [r7, #16]
 800d384:	68da      	ldr	r2, [r3, #12]
 800d386:	693b      	ldr	r3, [r7, #16]
 800d388:	689b      	ldr	r3, [r3, #8]
 800d38a:	4293      	cmp	r3, r2
 800d38c:	bf28      	it	cs
 800d38e:	4613      	movcs	r3, r2
 800d390:	461a      	mov	r2, r3
 800d392:	6879      	ldr	r1, [r7, #4]
 800d394:	68f8      	ldr	r0, [r7, #12]
 800d396:	f001 f80f 	bl	800e3b8 <USBD_CtlContinueRx>
 800d39a:	e030      	b.n	800d3fe <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3a2:	b2db      	uxtb	r3, r3
 800d3a4:	2b03      	cmp	r3, #3
 800d3a6:	d10b      	bne.n	800d3c0 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3ae:	691b      	ldr	r3, [r3, #16]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d005      	beq.n	800d3c0 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3ba:	691b      	ldr	r3, [r3, #16]
 800d3bc:	68f8      	ldr	r0, [r7, #12]
 800d3be:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d3c0:	68f8      	ldr	r0, [r7, #12]
 800d3c2:	f001 f80a 	bl	800e3da <USBD_CtlSendStatus>
 800d3c6:	e01a      	b.n	800d3fe <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	2b03      	cmp	r3, #3
 800d3d2:	d114      	bne.n	800d3fe <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3da:	699b      	ldr	r3, [r3, #24]
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d00e      	beq.n	800d3fe <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d3e6:	699b      	ldr	r3, [r3, #24]
 800d3e8:	7afa      	ldrb	r2, [r7, #11]
 800d3ea:	4611      	mov	r1, r2
 800d3ec:	68f8      	ldr	r0, [r7, #12]
 800d3ee:	4798      	blx	r3
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d3f4:	7dfb      	ldrb	r3, [r7, #23]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d001      	beq.n	800d3fe <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800d3fa:	7dfb      	ldrb	r3, [r7, #23]
 800d3fc:	e000      	b.n	800d400 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800d3fe:	2300      	movs	r3, #0
}
 800d400:	4618      	mov	r0, r3
 800d402:	3718      	adds	r7, #24
 800d404:	46bd      	mov	sp, r7
 800d406:	bd80      	pop	{r7, pc}

0800d408 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d408:	b580      	push	{r7, lr}
 800d40a:	b086      	sub	sp, #24
 800d40c:	af00      	add	r7, sp, #0
 800d40e:	60f8      	str	r0, [r7, #12]
 800d410:	460b      	mov	r3, r1
 800d412:	607a      	str	r2, [r7, #4]
 800d414:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800d416:	7afb      	ldrb	r3, [r7, #11]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d16b      	bne.n	800d4f4 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800d41c:	68fb      	ldr	r3, [r7, #12]
 800d41e:	3314      	adds	r3, #20
 800d420:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d428:	2b02      	cmp	r3, #2
 800d42a:	d156      	bne.n	800d4da <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	689a      	ldr	r2, [r3, #8]
 800d430:	693b      	ldr	r3, [r7, #16]
 800d432:	68db      	ldr	r3, [r3, #12]
 800d434:	429a      	cmp	r2, r3
 800d436:	d914      	bls.n	800d462 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d438:	693b      	ldr	r3, [r7, #16]
 800d43a:	689a      	ldr	r2, [r3, #8]
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	68db      	ldr	r3, [r3, #12]
 800d440:	1ad2      	subs	r2, r2, r3
 800d442:	693b      	ldr	r3, [r7, #16]
 800d444:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d446:	693b      	ldr	r3, [r7, #16]
 800d448:	689b      	ldr	r3, [r3, #8]
 800d44a:	461a      	mov	r2, r3
 800d44c:	6879      	ldr	r1, [r7, #4]
 800d44e:	68f8      	ldr	r0, [r7, #12]
 800d450:	f000 ff84 	bl	800e35c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d454:	2300      	movs	r3, #0
 800d456:	2200      	movs	r2, #0
 800d458:	2100      	movs	r1, #0
 800d45a:	68f8      	ldr	r0, [r7, #12]
 800d45c:	f008 ff7a 	bl	8016354 <USBD_LL_PrepareReceive>
 800d460:	e03b      	b.n	800d4da <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	68da      	ldr	r2, [r3, #12]
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	689b      	ldr	r3, [r3, #8]
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d11c      	bne.n	800d4a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	685a      	ldr	r2, [r3, #4]
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d476:	429a      	cmp	r2, r3
 800d478:	d316      	bcc.n	800d4a8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	685a      	ldr	r2, [r3, #4]
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d484:	429a      	cmp	r2, r3
 800d486:	d20f      	bcs.n	800d4a8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d488:	2200      	movs	r2, #0
 800d48a:	2100      	movs	r1, #0
 800d48c:	68f8      	ldr	r0, [r7, #12]
 800d48e:	f000 ff65 	bl	800e35c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	2200      	movs	r2, #0
 800d496:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d49a:	2300      	movs	r3, #0
 800d49c:	2200      	movs	r2, #0
 800d49e:	2100      	movs	r1, #0
 800d4a0:	68f8      	ldr	r0, [r7, #12]
 800d4a2:	f008 ff57 	bl	8016354 <USBD_LL_PrepareReceive>
 800d4a6:	e018      	b.n	800d4da <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4ae:	b2db      	uxtb	r3, r3
 800d4b0:	2b03      	cmp	r3, #3
 800d4b2:	d10b      	bne.n	800d4cc <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4ba:	68db      	ldr	r3, [r3, #12]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d005      	beq.n	800d4cc <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4c6:	68db      	ldr	r3, [r3, #12]
 800d4c8:	68f8      	ldr	r0, [r7, #12]
 800d4ca:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4cc:	2180      	movs	r1, #128	; 0x80
 800d4ce:	68f8      	ldr	r0, [r7, #12]
 800d4d0:	f008 fe96 	bl	8016200 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d4d4:	68f8      	ldr	r0, [r7, #12]
 800d4d6:	f000 ff93 	bl	800e400 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d122      	bne.n	800d52a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800d4e4:	68f8      	ldr	r0, [r7, #12]
 800d4e6:	f7ff fe98 	bl	800d21a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	2200      	movs	r2, #0
 800d4ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d4f2:	e01a      	b.n	800d52a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	2b03      	cmp	r3, #3
 800d4fe:	d114      	bne.n	800d52a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d506:	695b      	ldr	r3, [r3, #20]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d00e      	beq.n	800d52a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d512:	695b      	ldr	r3, [r3, #20]
 800d514:	7afa      	ldrb	r2, [r7, #11]
 800d516:	4611      	mov	r1, r2
 800d518:	68f8      	ldr	r0, [r7, #12]
 800d51a:	4798      	blx	r3
 800d51c:	4603      	mov	r3, r0
 800d51e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800d520:	7dfb      	ldrb	r3, [r7, #23]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d001      	beq.n	800d52a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800d526:	7dfb      	ldrb	r3, [r7, #23]
 800d528:	e000      	b.n	800d52c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800d52a:	2300      	movs	r3, #0
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3718      	adds	r7, #24
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}

0800d534 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	2201      	movs	r2, #1
 800d540:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2200      	movs	r2, #0
 800d548:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	2200      	movs	r2, #0
 800d550:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2200      	movs	r2, #0
 800d556:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d560:	2b00      	cmp	r3, #0
 800d562:	d101      	bne.n	800d568 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800d564:	2303      	movs	r3, #3
 800d566:	e02f      	b.n	800d5c8 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d00f      	beq.n	800d592 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d578:	685b      	ldr	r3, [r3, #4]
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d009      	beq.n	800d592 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d584:	685b      	ldr	r3, [r3, #4]
 800d586:	687a      	ldr	r2, [r7, #4]
 800d588:	6852      	ldr	r2, [r2, #4]
 800d58a:	b2d2      	uxtb	r2, r2
 800d58c:	4611      	mov	r1, r2
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d592:	2340      	movs	r3, #64	; 0x40
 800d594:	2200      	movs	r2, #0
 800d596:	2100      	movs	r1, #0
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f008 fdec 	bl	8016176 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	2201      	movs	r2, #1
 800d5a2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	2240      	movs	r2, #64	; 0x40
 800d5aa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d5ae:	2340      	movs	r3, #64	; 0x40
 800d5b0:	2200      	movs	r2, #0
 800d5b2:	2180      	movs	r1, #128	; 0x80
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f008 fdde 	bl	8016176 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	2201      	movs	r2, #1
 800d5be:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2240      	movs	r2, #64	; 0x40
 800d5c4:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800d5c6:	2300      	movs	r3, #0
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3708      	adds	r7, #8
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}

0800d5d0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b083      	sub	sp, #12
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	460b      	mov	r3, r1
 800d5da:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	78fa      	ldrb	r2, [r7, #3]
 800d5e0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d5e2:	2300      	movs	r3, #0
}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	370c      	adds	r7, #12
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr

0800d5f0 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d5f0:	b480      	push	{r7}
 800d5f2:	b083      	sub	sp, #12
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5fe:	b2da      	uxtb	r2, r3
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	2204      	movs	r2, #4
 800d60a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d60e:	2300      	movs	r3, #0
}
 800d610:	4618      	mov	r0, r3
 800d612:	370c      	adds	r7, #12
 800d614:	46bd      	mov	sp, r7
 800d616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61a:	4770      	bx	lr

0800d61c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d61c:	b480      	push	{r7}
 800d61e:	b083      	sub	sp, #12
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d62a:	b2db      	uxtb	r3, r3
 800d62c:	2b04      	cmp	r3, #4
 800d62e:	d106      	bne.n	800d63e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d636:	b2da      	uxtb	r2, r3
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d63e:	2300      	movs	r3, #0
}
 800d640:	4618      	mov	r0, r3
 800d642:	370c      	adds	r7, #12
 800d644:	46bd      	mov	sp, r7
 800d646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64a:	4770      	bx	lr

0800d64c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b082      	sub	sp, #8
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d101      	bne.n	800d662 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800d65e:	2303      	movs	r3, #3
 800d660:	e012      	b.n	800d688 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d668:	b2db      	uxtb	r3, r3
 800d66a:	2b03      	cmp	r3, #3
 800d66c:	d10b      	bne.n	800d686 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d674:	69db      	ldr	r3, [r3, #28]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d005      	beq.n	800d686 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d680:	69db      	ldr	r3, [r3, #28]
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d686:	2300      	movs	r3, #0
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3708      	adds	r7, #8
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
 800d698:	460b      	mov	r3, r1
 800d69a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d101      	bne.n	800d6aa <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800d6a6:	2303      	movs	r3, #3
 800d6a8:	e014      	b.n	800d6d4 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6b0:	b2db      	uxtb	r3, r3
 800d6b2:	2b03      	cmp	r3, #3
 800d6b4:	d10d      	bne.n	800d6d2 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6bc:	6a1b      	ldr	r3, [r3, #32]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d007      	beq.n	800d6d2 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800d6c2:	687b      	ldr	r3, [r7, #4]
 800d6c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6c8:	6a1b      	ldr	r3, [r3, #32]
 800d6ca:	78fa      	ldrb	r2, [r7, #3]
 800d6cc:	4611      	mov	r1, r2
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d6d2:	2300      	movs	r3, #0
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3708      	adds	r7, #8
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b082      	sub	sp, #8
 800d6e0:	af00      	add	r7, sp, #0
 800d6e2:	6078      	str	r0, [r7, #4]
 800d6e4:	460b      	mov	r3, r1
 800d6e6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d101      	bne.n	800d6f6 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800d6f2:	2303      	movs	r3, #3
 800d6f4:	e014      	b.n	800d720 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6fc:	b2db      	uxtb	r3, r3
 800d6fe:	2b03      	cmp	r3, #3
 800d700:	d10d      	bne.n	800d71e <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d007      	beq.n	800d71e <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d716:	78fa      	ldrb	r2, [r7, #3]
 800d718:	4611      	mov	r1, r2
 800d71a:	6878      	ldr	r0, [r7, #4]
 800d71c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d71e:	2300      	movs	r3, #0
}
 800d720:	4618      	mov	r0, r3
 800d722:	3708      	adds	r7, #8
 800d724:	46bd      	mov	sp, r7
 800d726:	bd80      	pop	{r7, pc}

0800d728 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d728:	b480      	push	{r7}
 800d72a:	b083      	sub	sp, #12
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d730:	2300      	movs	r3, #0
}
 800d732:	4618      	mov	r0, r3
 800d734:	370c      	adds	r7, #12
 800d736:	46bd      	mov	sp, r7
 800d738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d73c:	4770      	bx	lr

0800d73e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d73e:	b580      	push	{r7, lr}
 800d740:	b082      	sub	sp, #8
 800d742:	af00      	add	r7, sp, #0
 800d744:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2201      	movs	r2, #1
 800d74a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d754:	2b00      	cmp	r3, #0
 800d756:	d009      	beq.n	800d76c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	687a      	ldr	r2, [r7, #4]
 800d762:	6852      	ldr	r2, [r2, #4]
 800d764:	b2d2      	uxtb	r2, r2
 800d766:	4611      	mov	r1, r2
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	4798      	blx	r3
  }

  return USBD_OK;
 800d76c:	2300      	movs	r3, #0
}
 800d76e:	4618      	mov	r0, r3
 800d770:	3708      	adds	r7, #8
 800d772:	46bd      	mov	sp, r7
 800d774:	bd80      	pop	{r7, pc}

0800d776 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d776:	b480      	push	{r7}
 800d778:	b087      	sub	sp, #28
 800d77a:	af00      	add	r7, sp, #0
 800d77c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d782:	697b      	ldr	r3, [r7, #20]
 800d784:	781b      	ldrb	r3, [r3, #0]
 800d786:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	3301      	adds	r3, #1
 800d78c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d78e:	697b      	ldr	r3, [r7, #20]
 800d790:	781b      	ldrb	r3, [r3, #0]
 800d792:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d794:	8a3b      	ldrh	r3, [r7, #16]
 800d796:	021b      	lsls	r3, r3, #8
 800d798:	b21a      	sxth	r2, r3
 800d79a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d79e:	4313      	orrs	r3, r2
 800d7a0:	b21b      	sxth	r3, r3
 800d7a2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d7a4:	89fb      	ldrh	r3, [r7, #14]
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	371c      	adds	r7, #28
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b0:	4770      	bx	lr
	...

0800d7b4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b084      	sub	sp, #16
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	781b      	ldrb	r3, [r3, #0]
 800d7c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d7ca:	2b40      	cmp	r3, #64	; 0x40
 800d7cc:	d005      	beq.n	800d7da <USBD_StdDevReq+0x26>
 800d7ce:	2b40      	cmp	r3, #64	; 0x40
 800d7d0:	d853      	bhi.n	800d87a <USBD_StdDevReq+0xc6>
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d00b      	beq.n	800d7ee <USBD_StdDevReq+0x3a>
 800d7d6:	2b20      	cmp	r3, #32
 800d7d8:	d14f      	bne.n	800d87a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7e0:	689b      	ldr	r3, [r3, #8]
 800d7e2:	6839      	ldr	r1, [r7, #0]
 800d7e4:	6878      	ldr	r0, [r7, #4]
 800d7e6:	4798      	blx	r3
 800d7e8:	4603      	mov	r3, r0
 800d7ea:	73fb      	strb	r3, [r7, #15]
      break;
 800d7ec:	e04a      	b.n	800d884 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d7ee:	683b      	ldr	r3, [r7, #0]
 800d7f0:	785b      	ldrb	r3, [r3, #1]
 800d7f2:	2b09      	cmp	r3, #9
 800d7f4:	d83b      	bhi.n	800d86e <USBD_StdDevReq+0xba>
 800d7f6:	a201      	add	r2, pc, #4	; (adr r2, 800d7fc <USBD_StdDevReq+0x48>)
 800d7f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7fc:	0800d851 	.word	0x0800d851
 800d800:	0800d865 	.word	0x0800d865
 800d804:	0800d86f 	.word	0x0800d86f
 800d808:	0800d85b 	.word	0x0800d85b
 800d80c:	0800d86f 	.word	0x0800d86f
 800d810:	0800d82f 	.word	0x0800d82f
 800d814:	0800d825 	.word	0x0800d825
 800d818:	0800d86f 	.word	0x0800d86f
 800d81c:	0800d847 	.word	0x0800d847
 800d820:	0800d839 	.word	0x0800d839
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d824:	6839      	ldr	r1, [r7, #0]
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f000 f9de 	bl	800dbe8 <USBD_GetDescriptor>
          break;
 800d82c:	e024      	b.n	800d878 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d82e:	6839      	ldr	r1, [r7, #0]
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f000 fb43 	bl	800debc <USBD_SetAddress>
          break;
 800d836:	e01f      	b.n	800d878 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d838:	6839      	ldr	r1, [r7, #0]
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	f000 fb82 	bl	800df44 <USBD_SetConfig>
 800d840:	4603      	mov	r3, r0
 800d842:	73fb      	strb	r3, [r7, #15]
          break;
 800d844:	e018      	b.n	800d878 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d846:	6839      	ldr	r1, [r7, #0]
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f000 fc21 	bl	800e090 <USBD_GetConfig>
          break;
 800d84e:	e013      	b.n	800d878 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d850:	6839      	ldr	r1, [r7, #0]
 800d852:	6878      	ldr	r0, [r7, #4]
 800d854:	f000 fc52 	bl	800e0fc <USBD_GetStatus>
          break;
 800d858:	e00e      	b.n	800d878 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d85a:	6839      	ldr	r1, [r7, #0]
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f000 fc81 	bl	800e164 <USBD_SetFeature>
          break;
 800d862:	e009      	b.n	800d878 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d864:	6839      	ldr	r1, [r7, #0]
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f000 fc90 	bl	800e18c <USBD_ClrFeature>
          break;
 800d86c:	e004      	b.n	800d878 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800d86e:	6839      	ldr	r1, [r7, #0]
 800d870:	6878      	ldr	r0, [r7, #4]
 800d872:	f000 fce7 	bl	800e244 <USBD_CtlError>
          break;
 800d876:	bf00      	nop
      }
      break;
 800d878:	e004      	b.n	800d884 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d87a:	6839      	ldr	r1, [r7, #0]
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f000 fce1 	bl	800e244 <USBD_CtlError>
      break;
 800d882:	bf00      	nop
  }

  return ret;
 800d884:	7bfb      	ldrb	r3, [r7, #15]
}
 800d886:	4618      	mov	r0, r3
 800d888:	3710      	adds	r7, #16
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}
 800d88e:	bf00      	nop

0800d890 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b084      	sub	sp, #16
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
 800d898:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d89a:	2300      	movs	r3, #0
 800d89c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d89e:	683b      	ldr	r3, [r7, #0]
 800d8a0:	781b      	ldrb	r3, [r3, #0]
 800d8a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d8a6:	2b40      	cmp	r3, #64	; 0x40
 800d8a8:	d005      	beq.n	800d8b6 <USBD_StdItfReq+0x26>
 800d8aa:	2b40      	cmp	r3, #64	; 0x40
 800d8ac:	d82f      	bhi.n	800d90e <USBD_StdItfReq+0x7e>
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d001      	beq.n	800d8b6 <USBD_StdItfReq+0x26>
 800d8b2:	2b20      	cmp	r3, #32
 800d8b4:	d12b      	bne.n	800d90e <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8bc:	b2db      	uxtb	r3, r3
 800d8be:	3b01      	subs	r3, #1
 800d8c0:	2b02      	cmp	r3, #2
 800d8c2:	d81d      	bhi.n	800d900 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	889b      	ldrh	r3, [r3, #4]
 800d8c8:	b2db      	uxtb	r3, r3
 800d8ca:	2b01      	cmp	r3, #1
 800d8cc:	d813      	bhi.n	800d8f6 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d8d4:	689b      	ldr	r3, [r3, #8]
 800d8d6:	6839      	ldr	r1, [r7, #0]
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	4798      	blx	r3
 800d8dc:	4603      	mov	r3, r0
 800d8de:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	88db      	ldrh	r3, [r3, #6]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d110      	bne.n	800d90a <USBD_StdItfReq+0x7a>
 800d8e8:	7bfb      	ldrb	r3, [r7, #15]
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d10d      	bne.n	800d90a <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	f000 fd73 	bl	800e3da <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d8f4:	e009      	b.n	800d90a <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800d8f6:	6839      	ldr	r1, [r7, #0]
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f000 fca3 	bl	800e244 <USBD_CtlError>
          break;
 800d8fe:	e004      	b.n	800d90a <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800d900:	6839      	ldr	r1, [r7, #0]
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f000 fc9e 	bl	800e244 <USBD_CtlError>
          break;
 800d908:	e000      	b.n	800d90c <USBD_StdItfReq+0x7c>
          break;
 800d90a:	bf00      	nop
      }
      break;
 800d90c:	e004      	b.n	800d918 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800d90e:	6839      	ldr	r1, [r7, #0]
 800d910:	6878      	ldr	r0, [r7, #4]
 800d912:	f000 fc97 	bl	800e244 <USBD_CtlError>
      break;
 800d916:	bf00      	nop
  }

  return ret;
 800d918:	7bfb      	ldrb	r3, [r7, #15]
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	3710      	adds	r7, #16
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd80      	pop	{r7, pc}

0800d922 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d922:	b580      	push	{r7, lr}
 800d924:	b084      	sub	sp, #16
 800d926:	af00      	add	r7, sp, #0
 800d928:	6078      	str	r0, [r7, #4]
 800d92a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d92c:	2300      	movs	r3, #0
 800d92e:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	889b      	ldrh	r3, [r3, #4]
 800d934:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d93e:	2b40      	cmp	r3, #64	; 0x40
 800d940:	d007      	beq.n	800d952 <USBD_StdEPReq+0x30>
 800d942:	2b40      	cmp	r3, #64	; 0x40
 800d944:	f200 8145 	bhi.w	800dbd2 <USBD_StdEPReq+0x2b0>
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d00c      	beq.n	800d966 <USBD_StdEPReq+0x44>
 800d94c:	2b20      	cmp	r3, #32
 800d94e:	f040 8140 	bne.w	800dbd2 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d958:	689b      	ldr	r3, [r3, #8]
 800d95a:	6839      	ldr	r1, [r7, #0]
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	4798      	blx	r3
 800d960:	4603      	mov	r3, r0
 800d962:	73fb      	strb	r3, [r7, #15]
      break;
 800d964:	e13a      	b.n	800dbdc <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	785b      	ldrb	r3, [r3, #1]
 800d96a:	2b03      	cmp	r3, #3
 800d96c:	d007      	beq.n	800d97e <USBD_StdEPReq+0x5c>
 800d96e:	2b03      	cmp	r3, #3
 800d970:	f300 8129 	bgt.w	800dbc6 <USBD_StdEPReq+0x2a4>
 800d974:	2b00      	cmp	r3, #0
 800d976:	d07f      	beq.n	800da78 <USBD_StdEPReq+0x156>
 800d978:	2b01      	cmp	r3, #1
 800d97a:	d03c      	beq.n	800d9f6 <USBD_StdEPReq+0xd4>
 800d97c:	e123      	b.n	800dbc6 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d984:	b2db      	uxtb	r3, r3
 800d986:	2b02      	cmp	r3, #2
 800d988:	d002      	beq.n	800d990 <USBD_StdEPReq+0x6e>
 800d98a:	2b03      	cmp	r3, #3
 800d98c:	d016      	beq.n	800d9bc <USBD_StdEPReq+0x9a>
 800d98e:	e02c      	b.n	800d9ea <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d990:	7bbb      	ldrb	r3, [r7, #14]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d00d      	beq.n	800d9b2 <USBD_StdEPReq+0x90>
 800d996:	7bbb      	ldrb	r3, [r7, #14]
 800d998:	2b80      	cmp	r3, #128	; 0x80
 800d99a:	d00a      	beq.n	800d9b2 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d99c:	7bbb      	ldrb	r3, [r7, #14]
 800d99e:	4619      	mov	r1, r3
 800d9a0:	6878      	ldr	r0, [r7, #4]
 800d9a2:	f008 fc2d 	bl	8016200 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d9a6:	2180      	movs	r1, #128	; 0x80
 800d9a8:	6878      	ldr	r0, [r7, #4]
 800d9aa:	f008 fc29 	bl	8016200 <USBD_LL_StallEP>
 800d9ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d9b0:	e020      	b.n	800d9f4 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800d9b2:	6839      	ldr	r1, [r7, #0]
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	f000 fc45 	bl	800e244 <USBD_CtlError>
              break;
 800d9ba:	e01b      	b.n	800d9f4 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	885b      	ldrh	r3, [r3, #2]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	d10e      	bne.n	800d9e2 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d9c4:	7bbb      	ldrb	r3, [r7, #14]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d00b      	beq.n	800d9e2 <USBD_StdEPReq+0xc0>
 800d9ca:	7bbb      	ldrb	r3, [r7, #14]
 800d9cc:	2b80      	cmp	r3, #128	; 0x80
 800d9ce:	d008      	beq.n	800d9e2 <USBD_StdEPReq+0xc0>
 800d9d0:	683b      	ldr	r3, [r7, #0]
 800d9d2:	88db      	ldrh	r3, [r3, #6]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d104      	bne.n	800d9e2 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d9d8:	7bbb      	ldrb	r3, [r7, #14]
 800d9da:	4619      	mov	r1, r3
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f008 fc0f 	bl	8016200 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f000 fcf9 	bl	800e3da <USBD_CtlSendStatus>

              break;
 800d9e8:	e004      	b.n	800d9f4 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800d9ea:	6839      	ldr	r1, [r7, #0]
 800d9ec:	6878      	ldr	r0, [r7, #4]
 800d9ee:	f000 fc29 	bl	800e244 <USBD_CtlError>
              break;
 800d9f2:	bf00      	nop
          }
          break;
 800d9f4:	e0ec      	b.n	800dbd0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9fc:	b2db      	uxtb	r3, r3
 800d9fe:	2b02      	cmp	r3, #2
 800da00:	d002      	beq.n	800da08 <USBD_StdEPReq+0xe6>
 800da02:	2b03      	cmp	r3, #3
 800da04:	d016      	beq.n	800da34 <USBD_StdEPReq+0x112>
 800da06:	e030      	b.n	800da6a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800da08:	7bbb      	ldrb	r3, [r7, #14]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d00d      	beq.n	800da2a <USBD_StdEPReq+0x108>
 800da0e:	7bbb      	ldrb	r3, [r7, #14]
 800da10:	2b80      	cmp	r3, #128	; 0x80
 800da12:	d00a      	beq.n	800da2a <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800da14:	7bbb      	ldrb	r3, [r7, #14]
 800da16:	4619      	mov	r1, r3
 800da18:	6878      	ldr	r0, [r7, #4]
 800da1a:	f008 fbf1 	bl	8016200 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800da1e:	2180      	movs	r1, #128	; 0x80
 800da20:	6878      	ldr	r0, [r7, #4]
 800da22:	f008 fbed 	bl	8016200 <USBD_LL_StallEP>
 800da26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800da28:	e025      	b.n	800da76 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800da2a:	6839      	ldr	r1, [r7, #0]
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f000 fc09 	bl	800e244 <USBD_CtlError>
              break;
 800da32:	e020      	b.n	800da76 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800da34:	683b      	ldr	r3, [r7, #0]
 800da36:	885b      	ldrh	r3, [r3, #2]
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d11b      	bne.n	800da74 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800da3c:	7bbb      	ldrb	r3, [r7, #14]
 800da3e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da42:	2b00      	cmp	r3, #0
 800da44:	d004      	beq.n	800da50 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800da46:	7bbb      	ldrb	r3, [r7, #14]
 800da48:	4619      	mov	r1, r3
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f008 fbf7 	bl	801623e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f000 fcc2 	bl	800e3da <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800da5c:	689b      	ldr	r3, [r3, #8]
 800da5e:	6839      	ldr	r1, [r7, #0]
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	4798      	blx	r3
 800da64:	4603      	mov	r3, r0
 800da66:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800da68:	e004      	b.n	800da74 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800da6a:	6839      	ldr	r1, [r7, #0]
 800da6c:	6878      	ldr	r0, [r7, #4]
 800da6e:	f000 fbe9 	bl	800e244 <USBD_CtlError>
              break;
 800da72:	e000      	b.n	800da76 <USBD_StdEPReq+0x154>
              break;
 800da74:	bf00      	nop
          }
          break;
 800da76:	e0ab      	b.n	800dbd0 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da7e:	b2db      	uxtb	r3, r3
 800da80:	2b02      	cmp	r3, #2
 800da82:	d002      	beq.n	800da8a <USBD_StdEPReq+0x168>
 800da84:	2b03      	cmp	r3, #3
 800da86:	d032      	beq.n	800daee <USBD_StdEPReq+0x1cc>
 800da88:	e097      	b.n	800dbba <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800da8a:	7bbb      	ldrb	r3, [r7, #14]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d007      	beq.n	800daa0 <USBD_StdEPReq+0x17e>
 800da90:	7bbb      	ldrb	r3, [r7, #14]
 800da92:	2b80      	cmp	r3, #128	; 0x80
 800da94:	d004      	beq.n	800daa0 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800da96:	6839      	ldr	r1, [r7, #0]
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f000 fbd3 	bl	800e244 <USBD_CtlError>
                break;
 800da9e:	e091      	b.n	800dbc4 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800daa0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	da0b      	bge.n	800dac0 <USBD_StdEPReq+0x19e>
 800daa8:	7bbb      	ldrb	r3, [r7, #14]
 800daaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800daae:	4613      	mov	r3, r2
 800dab0:	009b      	lsls	r3, r3, #2
 800dab2:	4413      	add	r3, r2
 800dab4:	009b      	lsls	r3, r3, #2
 800dab6:	3310      	adds	r3, #16
 800dab8:	687a      	ldr	r2, [r7, #4]
 800daba:	4413      	add	r3, r2
 800dabc:	3304      	adds	r3, #4
 800dabe:	e00b      	b.n	800dad8 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dac0:	7bbb      	ldrb	r3, [r7, #14]
 800dac2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dac6:	4613      	mov	r3, r2
 800dac8:	009b      	lsls	r3, r3, #2
 800daca:	4413      	add	r3, r2
 800dacc:	009b      	lsls	r3, r3, #2
 800dace:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	4413      	add	r3, r2
 800dad6:	3304      	adds	r3, #4
 800dad8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	2200      	movs	r2, #0
 800dade:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	2202      	movs	r2, #2
 800dae4:	4619      	mov	r1, r3
 800dae6:	6878      	ldr	r0, [r7, #4]
 800dae8:	f000 fc1d 	bl	800e326 <USBD_CtlSendData>
              break;
 800daec:	e06a      	b.n	800dbc4 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800daee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	da11      	bge.n	800db1a <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800daf6:	7bbb      	ldrb	r3, [r7, #14]
 800daf8:	f003 020f 	and.w	r2, r3, #15
 800dafc:	6879      	ldr	r1, [r7, #4]
 800dafe:	4613      	mov	r3, r2
 800db00:	009b      	lsls	r3, r3, #2
 800db02:	4413      	add	r3, r2
 800db04:	009b      	lsls	r3, r3, #2
 800db06:	440b      	add	r3, r1
 800db08:	3324      	adds	r3, #36	; 0x24
 800db0a:	881b      	ldrh	r3, [r3, #0]
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d117      	bne.n	800db40 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800db10:	6839      	ldr	r1, [r7, #0]
 800db12:	6878      	ldr	r0, [r7, #4]
 800db14:	f000 fb96 	bl	800e244 <USBD_CtlError>
                  break;
 800db18:	e054      	b.n	800dbc4 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800db1a:	7bbb      	ldrb	r3, [r7, #14]
 800db1c:	f003 020f 	and.w	r2, r3, #15
 800db20:	6879      	ldr	r1, [r7, #4]
 800db22:	4613      	mov	r3, r2
 800db24:	009b      	lsls	r3, r3, #2
 800db26:	4413      	add	r3, r2
 800db28:	009b      	lsls	r3, r3, #2
 800db2a:	440b      	add	r3, r1
 800db2c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800db30:	881b      	ldrh	r3, [r3, #0]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d104      	bne.n	800db40 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800db36:	6839      	ldr	r1, [r7, #0]
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f000 fb83 	bl	800e244 <USBD_CtlError>
                  break;
 800db3e:	e041      	b.n	800dbc4 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800db44:	2b00      	cmp	r3, #0
 800db46:	da0b      	bge.n	800db60 <USBD_StdEPReq+0x23e>
 800db48:	7bbb      	ldrb	r3, [r7, #14]
 800db4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800db4e:	4613      	mov	r3, r2
 800db50:	009b      	lsls	r3, r3, #2
 800db52:	4413      	add	r3, r2
 800db54:	009b      	lsls	r3, r3, #2
 800db56:	3310      	adds	r3, #16
 800db58:	687a      	ldr	r2, [r7, #4]
 800db5a:	4413      	add	r3, r2
 800db5c:	3304      	adds	r3, #4
 800db5e:	e00b      	b.n	800db78 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800db60:	7bbb      	ldrb	r3, [r7, #14]
 800db62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800db66:	4613      	mov	r3, r2
 800db68:	009b      	lsls	r3, r3, #2
 800db6a:	4413      	add	r3, r2
 800db6c:	009b      	lsls	r3, r3, #2
 800db6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	4413      	add	r3, r2
 800db76:	3304      	adds	r3, #4
 800db78:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800db7a:	7bbb      	ldrb	r3, [r7, #14]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d002      	beq.n	800db86 <USBD_StdEPReq+0x264>
 800db80:	7bbb      	ldrb	r3, [r7, #14]
 800db82:	2b80      	cmp	r3, #128	; 0x80
 800db84:	d103      	bne.n	800db8e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	2200      	movs	r2, #0
 800db8a:	601a      	str	r2, [r3, #0]
 800db8c:	e00e      	b.n	800dbac <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800db8e:	7bbb      	ldrb	r3, [r7, #14]
 800db90:	4619      	mov	r1, r3
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f008 fb72 	bl	801627c <USBD_LL_IsStallEP>
 800db98:	4603      	mov	r3, r0
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d003      	beq.n	800dba6 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800db9e:	68bb      	ldr	r3, [r7, #8]
 800dba0:	2201      	movs	r2, #1
 800dba2:	601a      	str	r2, [r3, #0]
 800dba4:	e002      	b.n	800dbac <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800dba6:	68bb      	ldr	r3, [r7, #8]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	2202      	movs	r2, #2
 800dbb0:	4619      	mov	r1, r3
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f000 fbb7 	bl	800e326 <USBD_CtlSendData>
              break;
 800dbb8:	e004      	b.n	800dbc4 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800dbba:	6839      	ldr	r1, [r7, #0]
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f000 fb41 	bl	800e244 <USBD_CtlError>
              break;
 800dbc2:	bf00      	nop
          }
          break;
 800dbc4:	e004      	b.n	800dbd0 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800dbc6:	6839      	ldr	r1, [r7, #0]
 800dbc8:	6878      	ldr	r0, [r7, #4]
 800dbca:	f000 fb3b 	bl	800e244 <USBD_CtlError>
          break;
 800dbce:	bf00      	nop
      }
      break;
 800dbd0:	e004      	b.n	800dbdc <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800dbd2:	6839      	ldr	r1, [r7, #0]
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f000 fb35 	bl	800e244 <USBD_CtlError>
      break;
 800dbda:	bf00      	nop
  }

  return ret;
 800dbdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbde:	4618      	mov	r0, r3
 800dbe0:	3710      	adds	r7, #16
 800dbe2:	46bd      	mov	sp, r7
 800dbe4:	bd80      	pop	{r7, pc}
	...

0800dbe8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b084      	sub	sp, #16
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	885b      	ldrh	r3, [r3, #2]
 800dc02:	0a1b      	lsrs	r3, r3, #8
 800dc04:	b29b      	uxth	r3, r3
 800dc06:	3b01      	subs	r3, #1
 800dc08:	2b06      	cmp	r3, #6
 800dc0a:	f200 8128 	bhi.w	800de5e <USBD_GetDescriptor+0x276>
 800dc0e:	a201      	add	r2, pc, #4	; (adr r2, 800dc14 <USBD_GetDescriptor+0x2c>)
 800dc10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc14:	0800dc31 	.word	0x0800dc31
 800dc18:	0800dc49 	.word	0x0800dc49
 800dc1c:	0800dc89 	.word	0x0800dc89
 800dc20:	0800de5f 	.word	0x0800de5f
 800dc24:	0800de5f 	.word	0x0800de5f
 800dc28:	0800ddff 	.word	0x0800ddff
 800dc2c:	0800de2b 	.word	0x0800de2b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	687a      	ldr	r2, [r7, #4]
 800dc3a:	7c12      	ldrb	r2, [r2, #16]
 800dc3c:	f107 0108 	add.w	r1, r7, #8
 800dc40:	4610      	mov	r0, r2
 800dc42:	4798      	blx	r3
 800dc44:	60f8      	str	r0, [r7, #12]
      break;
 800dc46:	e112      	b.n	800de6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	7c1b      	ldrb	r3, [r3, #16]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d10d      	bne.n	800dc6c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc58:	f107 0208 	add.w	r2, r7, #8
 800dc5c:	4610      	mov	r0, r2
 800dc5e:	4798      	blx	r3
 800dc60:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	3301      	adds	r3, #1
 800dc66:	2202      	movs	r2, #2
 800dc68:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800dc6a:	e100      	b.n	800de6e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc74:	f107 0208 	add.w	r2, r7, #8
 800dc78:	4610      	mov	r0, r2
 800dc7a:	4798      	blx	r3
 800dc7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	3301      	adds	r3, #1
 800dc82:	2202      	movs	r2, #2
 800dc84:	701a      	strb	r2, [r3, #0]
      break;
 800dc86:	e0f2      	b.n	800de6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	885b      	ldrh	r3, [r3, #2]
 800dc8c:	b2db      	uxtb	r3, r3
 800dc8e:	2b05      	cmp	r3, #5
 800dc90:	f200 80ac 	bhi.w	800ddec <USBD_GetDescriptor+0x204>
 800dc94:	a201      	add	r2, pc, #4	; (adr r2, 800dc9c <USBD_GetDescriptor+0xb4>)
 800dc96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc9a:	bf00      	nop
 800dc9c:	0800dcb5 	.word	0x0800dcb5
 800dca0:	0800dce9 	.word	0x0800dce9
 800dca4:	0800dd1d 	.word	0x0800dd1d
 800dca8:	0800dd51 	.word	0x0800dd51
 800dcac:	0800dd85 	.word	0x0800dd85
 800dcb0:	0800ddb9 	.word	0x0800ddb9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcba:	685b      	ldr	r3, [r3, #4]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	d00b      	beq.n	800dcd8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcc6:	685b      	ldr	r3, [r3, #4]
 800dcc8:	687a      	ldr	r2, [r7, #4]
 800dcca:	7c12      	ldrb	r2, [r2, #16]
 800dccc:	f107 0108 	add.w	r1, r7, #8
 800dcd0:	4610      	mov	r0, r2
 800dcd2:	4798      	blx	r3
 800dcd4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dcd6:	e091      	b.n	800ddfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dcd8:	6839      	ldr	r1, [r7, #0]
 800dcda:	6878      	ldr	r0, [r7, #4]
 800dcdc:	f000 fab2 	bl	800e244 <USBD_CtlError>
            err++;
 800dce0:	7afb      	ldrb	r3, [r7, #11]
 800dce2:	3301      	adds	r3, #1
 800dce4:	72fb      	strb	r3, [r7, #11]
          break;
 800dce6:	e089      	b.n	800ddfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcee:	689b      	ldr	r3, [r3, #8]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d00b      	beq.n	800dd0c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcfa:	689b      	ldr	r3, [r3, #8]
 800dcfc:	687a      	ldr	r2, [r7, #4]
 800dcfe:	7c12      	ldrb	r2, [r2, #16]
 800dd00:	f107 0108 	add.w	r1, r7, #8
 800dd04:	4610      	mov	r0, r2
 800dd06:	4798      	blx	r3
 800dd08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd0a:	e077      	b.n	800ddfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dd0c:	6839      	ldr	r1, [r7, #0]
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f000 fa98 	bl	800e244 <USBD_CtlError>
            err++;
 800dd14:	7afb      	ldrb	r3, [r7, #11]
 800dd16:	3301      	adds	r3, #1
 800dd18:	72fb      	strb	r3, [r7, #11]
          break;
 800dd1a:	e06f      	b.n	800ddfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd22:	68db      	ldr	r3, [r3, #12]
 800dd24:	2b00      	cmp	r3, #0
 800dd26:	d00b      	beq.n	800dd40 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd2e:	68db      	ldr	r3, [r3, #12]
 800dd30:	687a      	ldr	r2, [r7, #4]
 800dd32:	7c12      	ldrb	r2, [r2, #16]
 800dd34:	f107 0108 	add.w	r1, r7, #8
 800dd38:	4610      	mov	r0, r2
 800dd3a:	4798      	blx	r3
 800dd3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd3e:	e05d      	b.n	800ddfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dd40:	6839      	ldr	r1, [r7, #0]
 800dd42:	6878      	ldr	r0, [r7, #4]
 800dd44:	f000 fa7e 	bl	800e244 <USBD_CtlError>
            err++;
 800dd48:	7afb      	ldrb	r3, [r7, #11]
 800dd4a:	3301      	adds	r3, #1
 800dd4c:	72fb      	strb	r3, [r7, #11]
          break;
 800dd4e:	e055      	b.n	800ddfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd56:	691b      	ldr	r3, [r3, #16]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d00b      	beq.n	800dd74 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd62:	691b      	ldr	r3, [r3, #16]
 800dd64:	687a      	ldr	r2, [r7, #4]
 800dd66:	7c12      	ldrb	r2, [r2, #16]
 800dd68:	f107 0108 	add.w	r1, r7, #8
 800dd6c:	4610      	mov	r0, r2
 800dd6e:	4798      	blx	r3
 800dd70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dd72:	e043      	b.n	800ddfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dd74:	6839      	ldr	r1, [r7, #0]
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f000 fa64 	bl	800e244 <USBD_CtlError>
            err++;
 800dd7c:	7afb      	ldrb	r3, [r7, #11]
 800dd7e:	3301      	adds	r3, #1
 800dd80:	72fb      	strb	r3, [r7, #11]
          break;
 800dd82:	e03b      	b.n	800ddfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd8a:	695b      	ldr	r3, [r3, #20]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d00b      	beq.n	800dda8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dd96:	695b      	ldr	r3, [r3, #20]
 800dd98:	687a      	ldr	r2, [r7, #4]
 800dd9a:	7c12      	ldrb	r2, [r2, #16]
 800dd9c:	f107 0108 	add.w	r1, r7, #8
 800dda0:	4610      	mov	r0, r2
 800dda2:	4798      	blx	r3
 800dda4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dda6:	e029      	b.n	800ddfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dda8:	6839      	ldr	r1, [r7, #0]
 800ddaa:	6878      	ldr	r0, [r7, #4]
 800ddac:	f000 fa4a 	bl	800e244 <USBD_CtlError>
            err++;
 800ddb0:	7afb      	ldrb	r3, [r7, #11]
 800ddb2:	3301      	adds	r3, #1
 800ddb4:	72fb      	strb	r3, [r7, #11]
          break;
 800ddb6:	e021      	b.n	800ddfc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddbe:	699b      	ldr	r3, [r3, #24]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d00b      	beq.n	800dddc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ddca:	699b      	ldr	r3, [r3, #24]
 800ddcc:	687a      	ldr	r2, [r7, #4]
 800ddce:	7c12      	ldrb	r2, [r2, #16]
 800ddd0:	f107 0108 	add.w	r1, r7, #8
 800ddd4:	4610      	mov	r0, r2
 800ddd6:	4798      	blx	r3
 800ddd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ddda:	e00f      	b.n	800ddfc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dddc:	6839      	ldr	r1, [r7, #0]
 800ddde:	6878      	ldr	r0, [r7, #4]
 800dde0:	f000 fa30 	bl	800e244 <USBD_CtlError>
            err++;
 800dde4:	7afb      	ldrb	r3, [r7, #11]
 800dde6:	3301      	adds	r3, #1
 800dde8:	72fb      	strb	r3, [r7, #11]
          break;
 800ddea:	e007      	b.n	800ddfc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ddec:	6839      	ldr	r1, [r7, #0]
 800ddee:	6878      	ldr	r0, [r7, #4]
 800ddf0:	f000 fa28 	bl	800e244 <USBD_CtlError>
          err++;
 800ddf4:	7afb      	ldrb	r3, [r7, #11]
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800ddfa:	bf00      	nop
      }
      break;
 800ddfc:	e037      	b.n	800de6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	7c1b      	ldrb	r3, [r3, #16]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d109      	bne.n	800de1a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de0e:	f107 0208 	add.w	r2, r7, #8
 800de12:	4610      	mov	r0, r2
 800de14:	4798      	blx	r3
 800de16:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800de18:	e029      	b.n	800de6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800de1a:	6839      	ldr	r1, [r7, #0]
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f000 fa11 	bl	800e244 <USBD_CtlError>
        err++;
 800de22:	7afb      	ldrb	r3, [r7, #11]
 800de24:	3301      	adds	r3, #1
 800de26:	72fb      	strb	r3, [r7, #11]
      break;
 800de28:	e021      	b.n	800de6e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	7c1b      	ldrb	r3, [r3, #16]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d10d      	bne.n	800de4e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de3a:	f107 0208 	add.w	r2, r7, #8
 800de3e:	4610      	mov	r0, r2
 800de40:	4798      	blx	r3
 800de42:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	3301      	adds	r3, #1
 800de48:	2207      	movs	r2, #7
 800de4a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800de4c:	e00f      	b.n	800de6e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800de4e:	6839      	ldr	r1, [r7, #0]
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	f000 f9f7 	bl	800e244 <USBD_CtlError>
        err++;
 800de56:	7afb      	ldrb	r3, [r7, #11]
 800de58:	3301      	adds	r3, #1
 800de5a:	72fb      	strb	r3, [r7, #11]
      break;
 800de5c:	e007      	b.n	800de6e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800de5e:	6839      	ldr	r1, [r7, #0]
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f000 f9ef 	bl	800e244 <USBD_CtlError>
      err++;
 800de66:	7afb      	ldrb	r3, [r7, #11]
 800de68:	3301      	adds	r3, #1
 800de6a:	72fb      	strb	r3, [r7, #11]
      break;
 800de6c:	bf00      	nop
  }

  if (err != 0U)
 800de6e:	7afb      	ldrb	r3, [r7, #11]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d11e      	bne.n	800deb2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800de74:	683b      	ldr	r3, [r7, #0]
 800de76:	88db      	ldrh	r3, [r3, #6]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d016      	beq.n	800deaa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800de7c:	893b      	ldrh	r3, [r7, #8]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d00e      	beq.n	800dea0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	88da      	ldrh	r2, [r3, #6]
 800de86:	893b      	ldrh	r3, [r7, #8]
 800de88:	4293      	cmp	r3, r2
 800de8a:	bf28      	it	cs
 800de8c:	4613      	movcs	r3, r2
 800de8e:	b29b      	uxth	r3, r3
 800de90:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800de92:	893b      	ldrh	r3, [r7, #8]
 800de94:	461a      	mov	r2, r3
 800de96:	68f9      	ldr	r1, [r7, #12]
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f000 fa44 	bl	800e326 <USBD_CtlSendData>
 800de9e:	e009      	b.n	800deb4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800dea0:	6839      	ldr	r1, [r7, #0]
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f000 f9ce 	bl	800e244 <USBD_CtlError>
 800dea8:	e004      	b.n	800deb4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800deaa:	6878      	ldr	r0, [r7, #4]
 800deac:	f000 fa95 	bl	800e3da <USBD_CtlSendStatus>
 800deb0:	e000      	b.n	800deb4 <USBD_GetDescriptor+0x2cc>
    return;
 800deb2:	bf00      	nop
  }
}
 800deb4:	3710      	adds	r7, #16
 800deb6:	46bd      	mov	sp, r7
 800deb8:	bd80      	pop	{r7, pc}
 800deba:	bf00      	nop

0800debc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800debc:	b580      	push	{r7, lr}
 800debe:	b084      	sub	sp, #16
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dec6:	683b      	ldr	r3, [r7, #0]
 800dec8:	889b      	ldrh	r3, [r3, #4]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d131      	bne.n	800df32 <USBD_SetAddress+0x76>
 800dece:	683b      	ldr	r3, [r7, #0]
 800ded0:	88db      	ldrh	r3, [r3, #6]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d12d      	bne.n	800df32 <USBD_SetAddress+0x76>
 800ded6:	683b      	ldr	r3, [r7, #0]
 800ded8:	885b      	ldrh	r3, [r3, #2]
 800deda:	2b7f      	cmp	r3, #127	; 0x7f
 800dedc:	d829      	bhi.n	800df32 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	885b      	ldrh	r3, [r3, #2]
 800dee2:	b2db      	uxtb	r3, r3
 800dee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dee8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800def0:	b2db      	uxtb	r3, r3
 800def2:	2b03      	cmp	r3, #3
 800def4:	d104      	bne.n	800df00 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800def6:	6839      	ldr	r1, [r7, #0]
 800def8:	6878      	ldr	r0, [r7, #4]
 800defa:	f000 f9a3 	bl	800e244 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800defe:	e01d      	b.n	800df3c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	7bfa      	ldrb	r2, [r7, #15]
 800df04:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800df08:	7bfb      	ldrb	r3, [r7, #15]
 800df0a:	4619      	mov	r1, r3
 800df0c:	6878      	ldr	r0, [r7, #4]
 800df0e:	f008 f9e1 	bl	80162d4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f000 fa61 	bl	800e3da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800df18:	7bfb      	ldrb	r3, [r7, #15]
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d004      	beq.n	800df28 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	2202      	movs	r2, #2
 800df22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df26:	e009      	b.n	800df3c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	2201      	movs	r2, #1
 800df2c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df30:	e004      	b.n	800df3c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800df32:	6839      	ldr	r1, [r7, #0]
 800df34:	6878      	ldr	r0, [r7, #4]
 800df36:	f000 f985 	bl	800e244 <USBD_CtlError>
  }
}
 800df3a:	bf00      	nop
 800df3c:	bf00      	nop
 800df3e:	3710      	adds	r7, #16
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}

0800df44 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b084      	sub	sp, #16
 800df48:	af00      	add	r7, sp, #0
 800df4a:	6078      	str	r0, [r7, #4]
 800df4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800df4e:	2300      	movs	r3, #0
 800df50:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800df52:	683b      	ldr	r3, [r7, #0]
 800df54:	885b      	ldrh	r3, [r3, #2]
 800df56:	b2da      	uxtb	r2, r3
 800df58:	4b4c      	ldr	r3, [pc, #304]	; (800e08c <USBD_SetConfig+0x148>)
 800df5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800df5c:	4b4b      	ldr	r3, [pc, #300]	; (800e08c <USBD_SetConfig+0x148>)
 800df5e:	781b      	ldrb	r3, [r3, #0]
 800df60:	2b01      	cmp	r3, #1
 800df62:	d905      	bls.n	800df70 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800df64:	6839      	ldr	r1, [r7, #0]
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f000 f96c 	bl	800e244 <USBD_CtlError>
    return USBD_FAIL;
 800df6c:	2303      	movs	r3, #3
 800df6e:	e088      	b.n	800e082 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df76:	b2db      	uxtb	r3, r3
 800df78:	2b02      	cmp	r3, #2
 800df7a:	d002      	beq.n	800df82 <USBD_SetConfig+0x3e>
 800df7c:	2b03      	cmp	r3, #3
 800df7e:	d025      	beq.n	800dfcc <USBD_SetConfig+0x88>
 800df80:	e071      	b.n	800e066 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800df82:	4b42      	ldr	r3, [pc, #264]	; (800e08c <USBD_SetConfig+0x148>)
 800df84:	781b      	ldrb	r3, [r3, #0]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d01c      	beq.n	800dfc4 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800df8a:	4b40      	ldr	r3, [pc, #256]	; (800e08c <USBD_SetConfig+0x148>)
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	461a      	mov	r2, r3
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800df94:	4b3d      	ldr	r3, [pc, #244]	; (800e08c <USBD_SetConfig+0x148>)
 800df96:	781b      	ldrb	r3, [r3, #0]
 800df98:	4619      	mov	r1, r3
 800df9a:	6878      	ldr	r0, [r7, #4]
 800df9c:	f7ff f948 	bl	800d230 <USBD_SetClassConfig>
 800dfa0:	4603      	mov	r3, r0
 800dfa2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800dfa4:	7bfb      	ldrb	r3, [r7, #15]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d004      	beq.n	800dfb4 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800dfaa:	6839      	ldr	r1, [r7, #0]
 800dfac:	6878      	ldr	r0, [r7, #4]
 800dfae:	f000 f949 	bl	800e244 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dfb2:	e065      	b.n	800e080 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800dfb4:	6878      	ldr	r0, [r7, #4]
 800dfb6:	f000 fa10 	bl	800e3da <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2203      	movs	r2, #3
 800dfbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800dfc2:	e05d      	b.n	800e080 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800dfc4:	6878      	ldr	r0, [r7, #4]
 800dfc6:	f000 fa08 	bl	800e3da <USBD_CtlSendStatus>
      break;
 800dfca:	e059      	b.n	800e080 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dfcc:	4b2f      	ldr	r3, [pc, #188]	; (800e08c <USBD_SetConfig+0x148>)
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	d112      	bne.n	800dffa <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	2202      	movs	r2, #2
 800dfd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800dfdc:	4b2b      	ldr	r3, [pc, #172]	; (800e08c <USBD_SetConfig+0x148>)
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	461a      	mov	r2, r3
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800dfe6:	4b29      	ldr	r3, [pc, #164]	; (800e08c <USBD_SetConfig+0x148>)
 800dfe8:	781b      	ldrb	r3, [r3, #0]
 800dfea:	4619      	mov	r1, r3
 800dfec:	6878      	ldr	r0, [r7, #4]
 800dfee:	f7ff f93b 	bl	800d268 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dff2:	6878      	ldr	r0, [r7, #4]
 800dff4:	f000 f9f1 	bl	800e3da <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dff8:	e042      	b.n	800e080 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800dffa:	4b24      	ldr	r3, [pc, #144]	; (800e08c <USBD_SetConfig+0x148>)
 800dffc:	781b      	ldrb	r3, [r3, #0]
 800dffe:	461a      	mov	r2, r3
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	685b      	ldr	r3, [r3, #4]
 800e004:	429a      	cmp	r2, r3
 800e006:	d02a      	beq.n	800e05e <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	685b      	ldr	r3, [r3, #4]
 800e00c:	b2db      	uxtb	r3, r3
 800e00e:	4619      	mov	r1, r3
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f7ff f929 	bl	800d268 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e016:	4b1d      	ldr	r3, [pc, #116]	; (800e08c <USBD_SetConfig+0x148>)
 800e018:	781b      	ldrb	r3, [r3, #0]
 800e01a:	461a      	mov	r2, r3
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e020:	4b1a      	ldr	r3, [pc, #104]	; (800e08c <USBD_SetConfig+0x148>)
 800e022:	781b      	ldrb	r3, [r3, #0]
 800e024:	4619      	mov	r1, r3
 800e026:	6878      	ldr	r0, [r7, #4]
 800e028:	f7ff f902 	bl	800d230 <USBD_SetClassConfig>
 800e02c:	4603      	mov	r3, r0
 800e02e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e030:	7bfb      	ldrb	r3, [r7, #15]
 800e032:	2b00      	cmp	r3, #0
 800e034:	d00f      	beq.n	800e056 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e036:	6839      	ldr	r1, [r7, #0]
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f000 f903 	bl	800e244 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	685b      	ldr	r3, [r3, #4]
 800e042:	b2db      	uxtb	r3, r3
 800e044:	4619      	mov	r1, r3
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f7ff f90e 	bl	800d268 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2202      	movs	r2, #2
 800e050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e054:	e014      	b.n	800e080 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f000 f9bf 	bl	800e3da <USBD_CtlSendStatus>
      break;
 800e05c:	e010      	b.n	800e080 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e05e:	6878      	ldr	r0, [r7, #4]
 800e060:	f000 f9bb 	bl	800e3da <USBD_CtlSendStatus>
      break;
 800e064:	e00c      	b.n	800e080 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800e066:	6839      	ldr	r1, [r7, #0]
 800e068:	6878      	ldr	r0, [r7, #4]
 800e06a:	f000 f8eb 	bl	800e244 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e06e:	4b07      	ldr	r3, [pc, #28]	; (800e08c <USBD_SetConfig+0x148>)
 800e070:	781b      	ldrb	r3, [r3, #0]
 800e072:	4619      	mov	r1, r3
 800e074:	6878      	ldr	r0, [r7, #4]
 800e076:	f7ff f8f7 	bl	800d268 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e07a:	2303      	movs	r3, #3
 800e07c:	73fb      	strb	r3, [r7, #15]
      break;
 800e07e:	bf00      	nop
  }

  return ret;
 800e080:	7bfb      	ldrb	r3, [r7, #15]
}
 800e082:	4618      	mov	r0, r3
 800e084:	3710      	adds	r7, #16
 800e086:	46bd      	mov	sp, r7
 800e088:	bd80      	pop	{r7, pc}
 800e08a:	bf00      	nop
 800e08c:	20000788 	.word	0x20000788

0800e090 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b082      	sub	sp, #8
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e09a:	683b      	ldr	r3, [r7, #0]
 800e09c:	88db      	ldrh	r3, [r3, #6]
 800e09e:	2b01      	cmp	r3, #1
 800e0a0:	d004      	beq.n	800e0ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e0a2:	6839      	ldr	r1, [r7, #0]
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f000 f8cd 	bl	800e244 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e0aa:	e023      	b.n	800e0f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0b2:	b2db      	uxtb	r3, r3
 800e0b4:	2b02      	cmp	r3, #2
 800e0b6:	dc02      	bgt.n	800e0be <USBD_GetConfig+0x2e>
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	dc03      	bgt.n	800e0c4 <USBD_GetConfig+0x34>
 800e0bc:	e015      	b.n	800e0ea <USBD_GetConfig+0x5a>
 800e0be:	2b03      	cmp	r3, #3
 800e0c0:	d00b      	beq.n	800e0da <USBD_GetConfig+0x4a>
 800e0c2:	e012      	b.n	800e0ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	3308      	adds	r3, #8
 800e0ce:	2201      	movs	r2, #1
 800e0d0:	4619      	mov	r1, r3
 800e0d2:	6878      	ldr	r0, [r7, #4]
 800e0d4:	f000 f927 	bl	800e326 <USBD_CtlSendData>
        break;
 800e0d8:	e00c      	b.n	800e0f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	3304      	adds	r3, #4
 800e0de:	2201      	movs	r2, #1
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f000 f91f 	bl	800e326 <USBD_CtlSendData>
        break;
 800e0e8:	e004      	b.n	800e0f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e0ea:	6839      	ldr	r1, [r7, #0]
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f000 f8a9 	bl	800e244 <USBD_CtlError>
        break;
 800e0f2:	bf00      	nop
}
 800e0f4:	bf00      	nop
 800e0f6:	3708      	adds	r7, #8
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	bd80      	pop	{r7, pc}

0800e0fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b082      	sub	sp, #8
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
 800e104:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e10c:	b2db      	uxtb	r3, r3
 800e10e:	3b01      	subs	r3, #1
 800e110:	2b02      	cmp	r3, #2
 800e112:	d81e      	bhi.n	800e152 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e114:	683b      	ldr	r3, [r7, #0]
 800e116:	88db      	ldrh	r3, [r3, #6]
 800e118:	2b02      	cmp	r3, #2
 800e11a:	d004      	beq.n	800e126 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e11c:	6839      	ldr	r1, [r7, #0]
 800e11e:	6878      	ldr	r0, [r7, #4]
 800e120:	f000 f890 	bl	800e244 <USBD_CtlError>
        break;
 800e124:	e01a      	b.n	800e15c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2201      	movs	r2, #1
 800e12a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e132:	2b00      	cmp	r3, #0
 800e134:	d005      	beq.n	800e142 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	68db      	ldr	r3, [r3, #12]
 800e13a:	f043 0202 	orr.w	r2, r3, #2
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	330c      	adds	r3, #12
 800e146:	2202      	movs	r2, #2
 800e148:	4619      	mov	r1, r3
 800e14a:	6878      	ldr	r0, [r7, #4]
 800e14c:	f000 f8eb 	bl	800e326 <USBD_CtlSendData>
      break;
 800e150:	e004      	b.n	800e15c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e152:	6839      	ldr	r1, [r7, #0]
 800e154:	6878      	ldr	r0, [r7, #4]
 800e156:	f000 f875 	bl	800e244 <USBD_CtlError>
      break;
 800e15a:	bf00      	nop
  }
}
 800e15c:	bf00      	nop
 800e15e:	3708      	adds	r7, #8
 800e160:	46bd      	mov	sp, r7
 800e162:	bd80      	pop	{r7, pc}

0800e164 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e164:	b580      	push	{r7, lr}
 800e166:	b082      	sub	sp, #8
 800e168:	af00      	add	r7, sp, #0
 800e16a:	6078      	str	r0, [r7, #4]
 800e16c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e16e:	683b      	ldr	r3, [r7, #0]
 800e170:	885b      	ldrh	r3, [r3, #2]
 800e172:	2b01      	cmp	r3, #1
 800e174:	d106      	bne.n	800e184 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2201      	movs	r2, #1
 800e17a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	f000 f92b 	bl	800e3da <USBD_CtlSendStatus>
  }
}
 800e184:	bf00      	nop
 800e186:	3708      	adds	r7, #8
 800e188:	46bd      	mov	sp, r7
 800e18a:	bd80      	pop	{r7, pc}

0800e18c <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b082      	sub	sp, #8
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
 800e194:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e19c:	b2db      	uxtb	r3, r3
 800e19e:	3b01      	subs	r3, #1
 800e1a0:	2b02      	cmp	r3, #2
 800e1a2:	d80b      	bhi.n	800e1bc <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e1a4:	683b      	ldr	r3, [r7, #0]
 800e1a6:	885b      	ldrh	r3, [r3, #2]
 800e1a8:	2b01      	cmp	r3, #1
 800e1aa:	d10c      	bne.n	800e1c6 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	2200      	movs	r2, #0
 800e1b0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f000 f910 	bl	800e3da <USBD_CtlSendStatus>
      }
      break;
 800e1ba:	e004      	b.n	800e1c6 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e1bc:	6839      	ldr	r1, [r7, #0]
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f000 f840 	bl	800e244 <USBD_CtlError>
      break;
 800e1c4:	e000      	b.n	800e1c8 <USBD_ClrFeature+0x3c>
      break;
 800e1c6:	bf00      	nop
  }
}
 800e1c8:	bf00      	nop
 800e1ca:	3708      	adds	r7, #8
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}

0800e1d0 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e1d0:	b580      	push	{r7, lr}
 800e1d2:	b084      	sub	sp, #16
 800e1d4:	af00      	add	r7, sp, #0
 800e1d6:	6078      	str	r0, [r7, #4]
 800e1d8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e1da:	683b      	ldr	r3, [r7, #0]
 800e1dc:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	781a      	ldrb	r2, [r3, #0]
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	3301      	adds	r3, #1
 800e1ea:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	781a      	ldrb	r2, [r3, #0]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	3301      	adds	r3, #1
 800e1f8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e1fa:	68f8      	ldr	r0, [r7, #12]
 800e1fc:	f7ff fabb 	bl	800d776 <SWAPBYTE>
 800e200:	4603      	mov	r3, r0
 800e202:	461a      	mov	r2, r3
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	3301      	adds	r3, #1
 800e20c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	3301      	adds	r3, #1
 800e212:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e214:	68f8      	ldr	r0, [r7, #12]
 800e216:	f7ff faae 	bl	800d776 <SWAPBYTE>
 800e21a:	4603      	mov	r3, r0
 800e21c:	461a      	mov	r2, r3
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	3301      	adds	r3, #1
 800e226:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	3301      	adds	r3, #1
 800e22c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e22e:	68f8      	ldr	r0, [r7, #12]
 800e230:	f7ff faa1 	bl	800d776 <SWAPBYTE>
 800e234:	4603      	mov	r3, r0
 800e236:	461a      	mov	r2, r3
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	80da      	strh	r2, [r3, #6]
}
 800e23c:	bf00      	nop
 800e23e:	3710      	adds	r7, #16
 800e240:	46bd      	mov	sp, r7
 800e242:	bd80      	pop	{r7, pc}

0800e244 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e244:	b580      	push	{r7, lr}
 800e246:	b082      	sub	sp, #8
 800e248:	af00      	add	r7, sp, #0
 800e24a:	6078      	str	r0, [r7, #4]
 800e24c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e24e:	2180      	movs	r1, #128	; 0x80
 800e250:	6878      	ldr	r0, [r7, #4]
 800e252:	f007 ffd5 	bl	8016200 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e256:	2100      	movs	r1, #0
 800e258:	6878      	ldr	r0, [r7, #4]
 800e25a:	f007 ffd1 	bl	8016200 <USBD_LL_StallEP>
}
 800e25e:	bf00      	nop
 800e260:	3708      	adds	r7, #8
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}

0800e266 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e266:	b580      	push	{r7, lr}
 800e268:	b086      	sub	sp, #24
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	60f8      	str	r0, [r7, #12]
 800e26e:	60b9      	str	r1, [r7, #8]
 800e270:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e272:	2300      	movs	r3, #0
 800e274:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d036      	beq.n	800e2ea <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e280:	6938      	ldr	r0, [r7, #16]
 800e282:	f000 f836 	bl	800e2f2 <USBD_GetLen>
 800e286:	4603      	mov	r3, r0
 800e288:	3301      	adds	r3, #1
 800e28a:	b29b      	uxth	r3, r3
 800e28c:	005b      	lsls	r3, r3, #1
 800e28e:	b29a      	uxth	r2, r3
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e294:	7dfb      	ldrb	r3, [r7, #23]
 800e296:	68ba      	ldr	r2, [r7, #8]
 800e298:	4413      	add	r3, r2
 800e29a:	687a      	ldr	r2, [r7, #4]
 800e29c:	7812      	ldrb	r2, [r2, #0]
 800e29e:	701a      	strb	r2, [r3, #0]
  idx++;
 800e2a0:	7dfb      	ldrb	r3, [r7, #23]
 800e2a2:	3301      	adds	r3, #1
 800e2a4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e2a6:	7dfb      	ldrb	r3, [r7, #23]
 800e2a8:	68ba      	ldr	r2, [r7, #8]
 800e2aa:	4413      	add	r3, r2
 800e2ac:	2203      	movs	r2, #3
 800e2ae:	701a      	strb	r2, [r3, #0]
  idx++;
 800e2b0:	7dfb      	ldrb	r3, [r7, #23]
 800e2b2:	3301      	adds	r3, #1
 800e2b4:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e2b6:	e013      	b.n	800e2e0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e2b8:	7dfb      	ldrb	r3, [r7, #23]
 800e2ba:	68ba      	ldr	r2, [r7, #8]
 800e2bc:	4413      	add	r3, r2
 800e2be:	693a      	ldr	r2, [r7, #16]
 800e2c0:	7812      	ldrb	r2, [r2, #0]
 800e2c2:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	3301      	adds	r3, #1
 800e2c8:	613b      	str	r3, [r7, #16]
    idx++;
 800e2ca:	7dfb      	ldrb	r3, [r7, #23]
 800e2cc:	3301      	adds	r3, #1
 800e2ce:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e2d0:	7dfb      	ldrb	r3, [r7, #23]
 800e2d2:	68ba      	ldr	r2, [r7, #8]
 800e2d4:	4413      	add	r3, r2
 800e2d6:	2200      	movs	r2, #0
 800e2d8:	701a      	strb	r2, [r3, #0]
    idx++;
 800e2da:	7dfb      	ldrb	r3, [r7, #23]
 800e2dc:	3301      	adds	r3, #1
 800e2de:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	781b      	ldrb	r3, [r3, #0]
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d1e7      	bne.n	800e2b8 <USBD_GetString+0x52>
 800e2e8:	e000      	b.n	800e2ec <USBD_GetString+0x86>
    return;
 800e2ea:	bf00      	nop
  }
}
 800e2ec:	3718      	adds	r7, #24
 800e2ee:	46bd      	mov	sp, r7
 800e2f0:	bd80      	pop	{r7, pc}

0800e2f2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e2f2:	b480      	push	{r7}
 800e2f4:	b085      	sub	sp, #20
 800e2f6:	af00      	add	r7, sp, #0
 800e2f8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e302:	e005      	b.n	800e310 <USBD_GetLen+0x1e>
  {
    len++;
 800e304:	7bfb      	ldrb	r3, [r7, #15]
 800e306:	3301      	adds	r3, #1
 800e308:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e30a:	68bb      	ldr	r3, [r7, #8]
 800e30c:	3301      	adds	r3, #1
 800e30e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e310:	68bb      	ldr	r3, [r7, #8]
 800e312:	781b      	ldrb	r3, [r3, #0]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d1f5      	bne.n	800e304 <USBD_GetLen+0x12>
  }

  return len;
 800e318:	7bfb      	ldrb	r3, [r7, #15]
}
 800e31a:	4618      	mov	r0, r3
 800e31c:	3714      	adds	r7, #20
 800e31e:	46bd      	mov	sp, r7
 800e320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e324:	4770      	bx	lr

0800e326 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e326:	b580      	push	{r7, lr}
 800e328:	b084      	sub	sp, #16
 800e32a:	af00      	add	r7, sp, #0
 800e32c:	60f8      	str	r0, [r7, #12]
 800e32e:	60b9      	str	r1, [r7, #8]
 800e330:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2202      	movs	r2, #2
 800e336:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	687a      	ldr	r2, [r7, #4]
 800e33e:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	687a      	ldr	r2, [r7, #4]
 800e344:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	68ba      	ldr	r2, [r7, #8]
 800e34a:	2100      	movs	r1, #0
 800e34c:	68f8      	ldr	r0, [r7, #12]
 800e34e:	f007 ffe0 	bl	8016312 <USBD_LL_Transmit>

  return USBD_OK;
 800e352:	2300      	movs	r3, #0
}
 800e354:	4618      	mov	r0, r3
 800e356:	3710      	adds	r7, #16
 800e358:	46bd      	mov	sp, r7
 800e35a:	bd80      	pop	{r7, pc}

0800e35c <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b084      	sub	sp, #16
 800e360:	af00      	add	r7, sp, #0
 800e362:	60f8      	str	r0, [r7, #12]
 800e364:	60b9      	str	r1, [r7, #8]
 800e366:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	68ba      	ldr	r2, [r7, #8]
 800e36c:	2100      	movs	r1, #0
 800e36e:	68f8      	ldr	r0, [r7, #12]
 800e370:	f007 ffcf 	bl	8016312 <USBD_LL_Transmit>

  return USBD_OK;
 800e374:	2300      	movs	r3, #0
}
 800e376:	4618      	mov	r0, r3
 800e378:	3710      	adds	r7, #16
 800e37a:	46bd      	mov	sp, r7
 800e37c:	bd80      	pop	{r7, pc}

0800e37e <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e37e:	b580      	push	{r7, lr}
 800e380:	b084      	sub	sp, #16
 800e382:	af00      	add	r7, sp, #0
 800e384:	60f8      	str	r0, [r7, #12]
 800e386:	60b9      	str	r1, [r7, #8]
 800e388:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e38a:	68fb      	ldr	r3, [r7, #12]
 800e38c:	2203      	movs	r2, #3
 800e38e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	687a      	ldr	r2, [r7, #4]
 800e396:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	687a      	ldr	r2, [r7, #4]
 800e39e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	68ba      	ldr	r2, [r7, #8]
 800e3a6:	2100      	movs	r1, #0
 800e3a8:	68f8      	ldr	r0, [r7, #12]
 800e3aa:	f007 ffd3 	bl	8016354 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e3ae:	2300      	movs	r3, #0
}
 800e3b0:	4618      	mov	r0, r3
 800e3b2:	3710      	adds	r7, #16
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}

0800e3b8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b084      	sub	sp, #16
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	60f8      	str	r0, [r7, #12]
 800e3c0:	60b9      	str	r1, [r7, #8]
 800e3c2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	68ba      	ldr	r2, [r7, #8]
 800e3c8:	2100      	movs	r1, #0
 800e3ca:	68f8      	ldr	r0, [r7, #12]
 800e3cc:	f007 ffc2 	bl	8016354 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e3d0:	2300      	movs	r3, #0
}
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	3710      	adds	r7, #16
 800e3d6:	46bd      	mov	sp, r7
 800e3d8:	bd80      	pop	{r7, pc}

0800e3da <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e3da:	b580      	push	{r7, lr}
 800e3dc:	b082      	sub	sp, #8
 800e3de:	af00      	add	r7, sp, #0
 800e3e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	2204      	movs	r2, #4
 800e3e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e3ea:	2300      	movs	r3, #0
 800e3ec:	2200      	movs	r2, #0
 800e3ee:	2100      	movs	r1, #0
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f007 ff8e 	bl	8016312 <USBD_LL_Transmit>

  return USBD_OK;
 800e3f6:	2300      	movs	r3, #0
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3708      	adds	r7, #8
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}

0800e400 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b082      	sub	sp, #8
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2205      	movs	r2, #5
 800e40c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e410:	2300      	movs	r3, #0
 800e412:	2200      	movs	r2, #0
 800e414:	2100      	movs	r1, #0
 800e416:	6878      	ldr	r0, [r7, #4]
 800e418:	f007 ff9c 	bl	8016354 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e41c:	2300      	movs	r3, #0
}
 800e41e:	4618      	mov	r0, r3
 800e420:	3708      	adds	r7, #8
 800e422:	46bd      	mov	sp, r7
 800e424:	bd80      	pop	{r7, pc}
	...

0800e428 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e428:	b580      	push	{r7, lr}
 800e42a:	b084      	sub	sp, #16
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	4603      	mov	r3, r0
 800e430:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e432:	79fb      	ldrb	r3, [r7, #7]
 800e434:	4a08      	ldr	r2, [pc, #32]	; (800e458 <disk_status+0x30>)
 800e436:	009b      	lsls	r3, r3, #2
 800e438:	4413      	add	r3, r2
 800e43a:	685b      	ldr	r3, [r3, #4]
 800e43c:	685b      	ldr	r3, [r3, #4]
 800e43e:	79fa      	ldrb	r2, [r7, #7]
 800e440:	4905      	ldr	r1, [pc, #20]	; (800e458 <disk_status+0x30>)
 800e442:	440a      	add	r2, r1
 800e444:	7a12      	ldrb	r2, [r2, #8]
 800e446:	4610      	mov	r0, r2
 800e448:	4798      	blx	r3
 800e44a:	4603      	mov	r3, r0
 800e44c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e44e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e450:	4618      	mov	r0, r3
 800e452:	3710      	adds	r7, #16
 800e454:	46bd      	mov	sp, r7
 800e456:	bd80      	pop	{r7, pc}
 800e458:	200007b4 	.word	0x200007b4

0800e45c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b084      	sub	sp, #16
 800e460:	af00      	add	r7, sp, #0
 800e462:	4603      	mov	r3, r0
 800e464:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e466:	2300      	movs	r3, #0
 800e468:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e46a:	79fb      	ldrb	r3, [r7, #7]
 800e46c:	4a0d      	ldr	r2, [pc, #52]	; (800e4a4 <disk_initialize+0x48>)
 800e46e:	5cd3      	ldrb	r3, [r2, r3]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d111      	bne.n	800e498 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e474:	79fb      	ldrb	r3, [r7, #7]
 800e476:	4a0b      	ldr	r2, [pc, #44]	; (800e4a4 <disk_initialize+0x48>)
 800e478:	2101      	movs	r1, #1
 800e47a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e47c:	79fb      	ldrb	r3, [r7, #7]
 800e47e:	4a09      	ldr	r2, [pc, #36]	; (800e4a4 <disk_initialize+0x48>)
 800e480:	009b      	lsls	r3, r3, #2
 800e482:	4413      	add	r3, r2
 800e484:	685b      	ldr	r3, [r3, #4]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	79fa      	ldrb	r2, [r7, #7]
 800e48a:	4906      	ldr	r1, [pc, #24]	; (800e4a4 <disk_initialize+0x48>)
 800e48c:	440a      	add	r2, r1
 800e48e:	7a12      	ldrb	r2, [r2, #8]
 800e490:	4610      	mov	r0, r2
 800e492:	4798      	blx	r3
 800e494:	4603      	mov	r3, r0
 800e496:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e498:	7bfb      	ldrb	r3, [r7, #15]
}
 800e49a:	4618      	mov	r0, r3
 800e49c:	3710      	adds	r7, #16
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}
 800e4a2:	bf00      	nop
 800e4a4:	200007b4 	.word	0x200007b4

0800e4a8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e4a8:	b590      	push	{r4, r7, lr}
 800e4aa:	b087      	sub	sp, #28
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	60b9      	str	r1, [r7, #8]
 800e4b0:	607a      	str	r2, [r7, #4]
 800e4b2:	603b      	str	r3, [r7, #0]
 800e4b4:	4603      	mov	r3, r0
 800e4b6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e4b8:	7bfb      	ldrb	r3, [r7, #15]
 800e4ba:	4a0a      	ldr	r2, [pc, #40]	; (800e4e4 <disk_read+0x3c>)
 800e4bc:	009b      	lsls	r3, r3, #2
 800e4be:	4413      	add	r3, r2
 800e4c0:	685b      	ldr	r3, [r3, #4]
 800e4c2:	689c      	ldr	r4, [r3, #8]
 800e4c4:	7bfb      	ldrb	r3, [r7, #15]
 800e4c6:	4a07      	ldr	r2, [pc, #28]	; (800e4e4 <disk_read+0x3c>)
 800e4c8:	4413      	add	r3, r2
 800e4ca:	7a18      	ldrb	r0, [r3, #8]
 800e4cc:	683b      	ldr	r3, [r7, #0]
 800e4ce:	687a      	ldr	r2, [r7, #4]
 800e4d0:	68b9      	ldr	r1, [r7, #8]
 800e4d2:	47a0      	blx	r4
 800e4d4:	4603      	mov	r3, r0
 800e4d6:	75fb      	strb	r3, [r7, #23]
  return res;
 800e4d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e4da:	4618      	mov	r0, r3
 800e4dc:	371c      	adds	r7, #28
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd90      	pop	{r4, r7, pc}
 800e4e2:	bf00      	nop
 800e4e4:	200007b4 	.word	0x200007b4

0800e4e8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e4e8:	b590      	push	{r4, r7, lr}
 800e4ea:	b087      	sub	sp, #28
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	60b9      	str	r1, [r7, #8]
 800e4f0:	607a      	str	r2, [r7, #4]
 800e4f2:	603b      	str	r3, [r7, #0]
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e4f8:	7bfb      	ldrb	r3, [r7, #15]
 800e4fa:	4a0a      	ldr	r2, [pc, #40]	; (800e524 <disk_write+0x3c>)
 800e4fc:	009b      	lsls	r3, r3, #2
 800e4fe:	4413      	add	r3, r2
 800e500:	685b      	ldr	r3, [r3, #4]
 800e502:	68dc      	ldr	r4, [r3, #12]
 800e504:	7bfb      	ldrb	r3, [r7, #15]
 800e506:	4a07      	ldr	r2, [pc, #28]	; (800e524 <disk_write+0x3c>)
 800e508:	4413      	add	r3, r2
 800e50a:	7a18      	ldrb	r0, [r3, #8]
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	687a      	ldr	r2, [r7, #4]
 800e510:	68b9      	ldr	r1, [r7, #8]
 800e512:	47a0      	blx	r4
 800e514:	4603      	mov	r3, r0
 800e516:	75fb      	strb	r3, [r7, #23]
  return res;
 800e518:	7dfb      	ldrb	r3, [r7, #23]
}
 800e51a:	4618      	mov	r0, r3
 800e51c:	371c      	adds	r7, #28
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd90      	pop	{r4, r7, pc}
 800e522:	bf00      	nop
 800e524:	200007b4 	.word	0x200007b4

0800e528 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e528:	b580      	push	{r7, lr}
 800e52a:	b084      	sub	sp, #16
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	4603      	mov	r3, r0
 800e530:	603a      	str	r2, [r7, #0]
 800e532:	71fb      	strb	r3, [r7, #7]
 800e534:	460b      	mov	r3, r1
 800e536:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e538:	79fb      	ldrb	r3, [r7, #7]
 800e53a:	4a09      	ldr	r2, [pc, #36]	; (800e560 <disk_ioctl+0x38>)
 800e53c:	009b      	lsls	r3, r3, #2
 800e53e:	4413      	add	r3, r2
 800e540:	685b      	ldr	r3, [r3, #4]
 800e542:	691b      	ldr	r3, [r3, #16]
 800e544:	79fa      	ldrb	r2, [r7, #7]
 800e546:	4906      	ldr	r1, [pc, #24]	; (800e560 <disk_ioctl+0x38>)
 800e548:	440a      	add	r2, r1
 800e54a:	7a10      	ldrb	r0, [r2, #8]
 800e54c:	79b9      	ldrb	r1, [r7, #6]
 800e54e:	683a      	ldr	r2, [r7, #0]
 800e550:	4798      	blx	r3
 800e552:	4603      	mov	r3, r0
 800e554:	73fb      	strb	r3, [r7, #15]
  return res;
 800e556:	7bfb      	ldrb	r3, [r7, #15]
}
 800e558:	4618      	mov	r0, r3
 800e55a:	3710      	adds	r7, #16
 800e55c:	46bd      	mov	sp, r7
 800e55e:	bd80      	pop	{r7, pc}
 800e560:	200007b4 	.word	0x200007b4

0800e564 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e564:	b480      	push	{r7}
 800e566:	b085      	sub	sp, #20
 800e568:	af00      	add	r7, sp, #0
 800e56a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	3301      	adds	r3, #1
 800e570:	781b      	ldrb	r3, [r3, #0]
 800e572:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e574:	89fb      	ldrh	r3, [r7, #14]
 800e576:	021b      	lsls	r3, r3, #8
 800e578:	b21a      	sxth	r2, r3
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	781b      	ldrb	r3, [r3, #0]
 800e57e:	b21b      	sxth	r3, r3
 800e580:	4313      	orrs	r3, r2
 800e582:	b21b      	sxth	r3, r3
 800e584:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e586:	89fb      	ldrh	r3, [r7, #14]
}
 800e588:	4618      	mov	r0, r3
 800e58a:	3714      	adds	r7, #20
 800e58c:	46bd      	mov	sp, r7
 800e58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e592:	4770      	bx	lr

0800e594 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e594:	b480      	push	{r7}
 800e596:	b085      	sub	sp, #20
 800e598:	af00      	add	r7, sp, #0
 800e59a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	3303      	adds	r3, #3
 800e5a0:	781b      	ldrb	r3, [r3, #0]
 800e5a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	021b      	lsls	r3, r3, #8
 800e5a8:	687a      	ldr	r2, [r7, #4]
 800e5aa:	3202      	adds	r2, #2
 800e5ac:	7812      	ldrb	r2, [r2, #0]
 800e5ae:	4313      	orrs	r3, r2
 800e5b0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	021b      	lsls	r3, r3, #8
 800e5b6:	687a      	ldr	r2, [r7, #4]
 800e5b8:	3201      	adds	r2, #1
 800e5ba:	7812      	ldrb	r2, [r2, #0]
 800e5bc:	4313      	orrs	r3, r2
 800e5be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	021b      	lsls	r3, r3, #8
 800e5c4:	687a      	ldr	r2, [r7, #4]
 800e5c6:	7812      	ldrb	r2, [r2, #0]
 800e5c8:	4313      	orrs	r3, r2
 800e5ca:	60fb      	str	r3, [r7, #12]
	return rv;
 800e5cc:	68fb      	ldr	r3, [r7, #12]
}
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	3714      	adds	r7, #20
 800e5d2:	46bd      	mov	sp, r7
 800e5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5d8:	4770      	bx	lr

0800e5da <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e5da:	b480      	push	{r7}
 800e5dc:	b083      	sub	sp, #12
 800e5de:	af00      	add	r7, sp, #0
 800e5e0:	6078      	str	r0, [r7, #4]
 800e5e2:	460b      	mov	r3, r1
 800e5e4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	1c5a      	adds	r2, r3, #1
 800e5ea:	607a      	str	r2, [r7, #4]
 800e5ec:	887a      	ldrh	r2, [r7, #2]
 800e5ee:	b2d2      	uxtb	r2, r2
 800e5f0:	701a      	strb	r2, [r3, #0]
 800e5f2:	887b      	ldrh	r3, [r7, #2]
 800e5f4:	0a1b      	lsrs	r3, r3, #8
 800e5f6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	1c5a      	adds	r2, r3, #1
 800e5fc:	607a      	str	r2, [r7, #4]
 800e5fe:	887a      	ldrh	r2, [r7, #2]
 800e600:	b2d2      	uxtb	r2, r2
 800e602:	701a      	strb	r2, [r3, #0]
}
 800e604:	bf00      	nop
 800e606:	370c      	adds	r7, #12
 800e608:	46bd      	mov	sp, r7
 800e60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60e:	4770      	bx	lr

0800e610 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e610:	b480      	push	{r7}
 800e612:	b083      	sub	sp, #12
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
 800e618:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	1c5a      	adds	r2, r3, #1
 800e61e:	607a      	str	r2, [r7, #4]
 800e620:	683a      	ldr	r2, [r7, #0]
 800e622:	b2d2      	uxtb	r2, r2
 800e624:	701a      	strb	r2, [r3, #0]
 800e626:	683b      	ldr	r3, [r7, #0]
 800e628:	0a1b      	lsrs	r3, r3, #8
 800e62a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	1c5a      	adds	r2, r3, #1
 800e630:	607a      	str	r2, [r7, #4]
 800e632:	683a      	ldr	r2, [r7, #0]
 800e634:	b2d2      	uxtb	r2, r2
 800e636:	701a      	strb	r2, [r3, #0]
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	0a1b      	lsrs	r3, r3, #8
 800e63c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	1c5a      	adds	r2, r3, #1
 800e642:	607a      	str	r2, [r7, #4]
 800e644:	683a      	ldr	r2, [r7, #0]
 800e646:	b2d2      	uxtb	r2, r2
 800e648:	701a      	strb	r2, [r3, #0]
 800e64a:	683b      	ldr	r3, [r7, #0]
 800e64c:	0a1b      	lsrs	r3, r3, #8
 800e64e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	1c5a      	adds	r2, r3, #1
 800e654:	607a      	str	r2, [r7, #4]
 800e656:	683a      	ldr	r2, [r7, #0]
 800e658:	b2d2      	uxtb	r2, r2
 800e65a:	701a      	strb	r2, [r3, #0]
}
 800e65c:	bf00      	nop
 800e65e:	370c      	adds	r7, #12
 800e660:	46bd      	mov	sp, r7
 800e662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e666:	4770      	bx	lr

0800e668 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e668:	b480      	push	{r7}
 800e66a:	b087      	sub	sp, #28
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	60f8      	str	r0, [r7, #12]
 800e670:	60b9      	str	r1, [r7, #8]
 800e672:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d00d      	beq.n	800e69e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e682:	693a      	ldr	r2, [r7, #16]
 800e684:	1c53      	adds	r3, r2, #1
 800e686:	613b      	str	r3, [r7, #16]
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	1c59      	adds	r1, r3, #1
 800e68c:	6179      	str	r1, [r7, #20]
 800e68e:	7812      	ldrb	r2, [r2, #0]
 800e690:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	3b01      	subs	r3, #1
 800e696:	607b      	str	r3, [r7, #4]
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d1f1      	bne.n	800e682 <mem_cpy+0x1a>
	}
}
 800e69e:	bf00      	nop
 800e6a0:	371c      	adds	r7, #28
 800e6a2:	46bd      	mov	sp, r7
 800e6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a8:	4770      	bx	lr

0800e6aa <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e6aa:	b480      	push	{r7}
 800e6ac:	b087      	sub	sp, #28
 800e6ae:	af00      	add	r7, sp, #0
 800e6b0:	60f8      	str	r0, [r7, #12]
 800e6b2:	60b9      	str	r1, [r7, #8]
 800e6b4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e6ba:	697b      	ldr	r3, [r7, #20]
 800e6bc:	1c5a      	adds	r2, r3, #1
 800e6be:	617a      	str	r2, [r7, #20]
 800e6c0:	68ba      	ldr	r2, [r7, #8]
 800e6c2:	b2d2      	uxtb	r2, r2
 800e6c4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	3b01      	subs	r3, #1
 800e6ca:	607b      	str	r3, [r7, #4]
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d1f3      	bne.n	800e6ba <mem_set+0x10>
}
 800e6d2:	bf00      	nop
 800e6d4:	bf00      	nop
 800e6d6:	371c      	adds	r7, #28
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6de:	4770      	bx	lr

0800e6e0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e6e0:	b480      	push	{r7}
 800e6e2:	b089      	sub	sp, #36	; 0x24
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	60f8      	str	r0, [r7, #12]
 800e6e8:	60b9      	str	r1, [r7, #8]
 800e6ea:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	61fb      	str	r3, [r7, #28]
 800e6f0:	68bb      	ldr	r3, [r7, #8]
 800e6f2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e6f4:	2300      	movs	r3, #0
 800e6f6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e6f8:	69fb      	ldr	r3, [r7, #28]
 800e6fa:	1c5a      	adds	r2, r3, #1
 800e6fc:	61fa      	str	r2, [r7, #28]
 800e6fe:	781b      	ldrb	r3, [r3, #0]
 800e700:	4619      	mov	r1, r3
 800e702:	69bb      	ldr	r3, [r7, #24]
 800e704:	1c5a      	adds	r2, r3, #1
 800e706:	61ba      	str	r2, [r7, #24]
 800e708:	781b      	ldrb	r3, [r3, #0]
 800e70a:	1acb      	subs	r3, r1, r3
 800e70c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	3b01      	subs	r3, #1
 800e712:	607b      	str	r3, [r7, #4]
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d002      	beq.n	800e720 <mem_cmp+0x40>
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d0eb      	beq.n	800e6f8 <mem_cmp+0x18>

	return r;
 800e720:	697b      	ldr	r3, [r7, #20]
}
 800e722:	4618      	mov	r0, r3
 800e724:	3724      	adds	r7, #36	; 0x24
 800e726:	46bd      	mov	sp, r7
 800e728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e72c:	4770      	bx	lr

0800e72e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e72e:	b480      	push	{r7}
 800e730:	b083      	sub	sp, #12
 800e732:	af00      	add	r7, sp, #0
 800e734:	6078      	str	r0, [r7, #4]
 800e736:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e738:	e002      	b.n	800e740 <chk_chr+0x12>
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	3301      	adds	r3, #1
 800e73e:	607b      	str	r3, [r7, #4]
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	781b      	ldrb	r3, [r3, #0]
 800e744:	2b00      	cmp	r3, #0
 800e746:	d005      	beq.n	800e754 <chk_chr+0x26>
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	781b      	ldrb	r3, [r3, #0]
 800e74c:	461a      	mov	r2, r3
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	4293      	cmp	r3, r2
 800e752:	d1f2      	bne.n	800e73a <chk_chr+0xc>
	return *str;
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	781b      	ldrb	r3, [r3, #0]
}
 800e758:	4618      	mov	r0, r3
 800e75a:	370c      	adds	r7, #12
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr

0800e764 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800e764:	b580      	push	{r7, lr}
 800e766:	b082      	sub	sp, #8
 800e768:	af00      	add	r7, sp, #0
 800e76a:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d009      	beq.n	800e786 <lock_fs+0x22>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	695b      	ldr	r3, [r3, #20]
 800e776:	4618      	mov	r0, r3
 800e778:	f003 f98d 	bl	8011a96 <ff_req_grant>
 800e77c:	4603      	mov	r3, r0
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d001      	beq.n	800e786 <lock_fs+0x22>
 800e782:	2301      	movs	r3, #1
 800e784:	e000      	b.n	800e788 <lock_fs+0x24>
 800e786:	2300      	movs	r3, #0
}
 800e788:	4618      	mov	r0, r3
 800e78a:	3708      	adds	r7, #8
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}

0800e790 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b082      	sub	sp, #8
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
 800e798:	460b      	mov	r3, r1
 800e79a:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d00d      	beq.n	800e7be <unlock_fs+0x2e>
 800e7a2:	78fb      	ldrb	r3, [r7, #3]
 800e7a4:	2b0c      	cmp	r3, #12
 800e7a6:	d00a      	beq.n	800e7be <unlock_fs+0x2e>
 800e7a8:	78fb      	ldrb	r3, [r7, #3]
 800e7aa:	2b0b      	cmp	r3, #11
 800e7ac:	d007      	beq.n	800e7be <unlock_fs+0x2e>
 800e7ae:	78fb      	ldrb	r3, [r7, #3]
 800e7b0:	2b0f      	cmp	r3, #15
 800e7b2:	d004      	beq.n	800e7be <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	695b      	ldr	r3, [r3, #20]
 800e7b8:	4618      	mov	r0, r3
 800e7ba:	f003 f981 	bl	8011ac0 <ff_rel_grant>
	}
}
 800e7be:	bf00      	nop
 800e7c0:	3708      	adds	r7, #8
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}
	...

0800e7c8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e7c8:	b480      	push	{r7}
 800e7ca:	b085      	sub	sp, #20
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	6078      	str	r0, [r7, #4]
 800e7d0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	60bb      	str	r3, [r7, #8]
 800e7d6:	68bb      	ldr	r3, [r7, #8]
 800e7d8:	60fb      	str	r3, [r7, #12]
 800e7da:	e029      	b.n	800e830 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e7dc:	4a27      	ldr	r2, [pc, #156]	; (800e87c <chk_lock+0xb4>)
 800e7de:	68fb      	ldr	r3, [r7, #12]
 800e7e0:	011b      	lsls	r3, r3, #4
 800e7e2:	4413      	add	r3, r2
 800e7e4:	681b      	ldr	r3, [r3, #0]
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d01d      	beq.n	800e826 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e7ea:	4a24      	ldr	r2, [pc, #144]	; (800e87c <chk_lock+0xb4>)
 800e7ec:	68fb      	ldr	r3, [r7, #12]
 800e7ee:	011b      	lsls	r3, r3, #4
 800e7f0:	4413      	add	r3, r2
 800e7f2:	681a      	ldr	r2, [r3, #0]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	429a      	cmp	r2, r3
 800e7fa:	d116      	bne.n	800e82a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e7fc:	4a1f      	ldr	r2, [pc, #124]	; (800e87c <chk_lock+0xb4>)
 800e7fe:	68fb      	ldr	r3, [r7, #12]
 800e800:	011b      	lsls	r3, r3, #4
 800e802:	4413      	add	r3, r2
 800e804:	3304      	adds	r3, #4
 800e806:	681a      	ldr	r2, [r3, #0]
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e80c:	429a      	cmp	r2, r3
 800e80e:	d10c      	bne.n	800e82a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e810:	4a1a      	ldr	r2, [pc, #104]	; (800e87c <chk_lock+0xb4>)
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	011b      	lsls	r3, r3, #4
 800e816:	4413      	add	r3, r2
 800e818:	3308      	adds	r3, #8
 800e81a:	681a      	ldr	r2, [r3, #0]
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e820:	429a      	cmp	r2, r3
 800e822:	d102      	bne.n	800e82a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e824:	e007      	b.n	800e836 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e826:	2301      	movs	r3, #1
 800e828:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	3301      	adds	r3, #1
 800e82e:	60fb      	str	r3, [r7, #12]
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	2b01      	cmp	r3, #1
 800e834:	d9d2      	bls.n	800e7dc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	2b02      	cmp	r3, #2
 800e83a:	d109      	bne.n	800e850 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e83c:	68bb      	ldr	r3, [r7, #8]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d102      	bne.n	800e848 <chk_lock+0x80>
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	2b02      	cmp	r3, #2
 800e846:	d101      	bne.n	800e84c <chk_lock+0x84>
 800e848:	2300      	movs	r3, #0
 800e84a:	e010      	b.n	800e86e <chk_lock+0xa6>
 800e84c:	2312      	movs	r3, #18
 800e84e:	e00e      	b.n	800e86e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e850:	683b      	ldr	r3, [r7, #0]
 800e852:	2b00      	cmp	r3, #0
 800e854:	d108      	bne.n	800e868 <chk_lock+0xa0>
 800e856:	4a09      	ldr	r2, [pc, #36]	; (800e87c <chk_lock+0xb4>)
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	011b      	lsls	r3, r3, #4
 800e85c:	4413      	add	r3, r2
 800e85e:	330c      	adds	r3, #12
 800e860:	881b      	ldrh	r3, [r3, #0]
 800e862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e866:	d101      	bne.n	800e86c <chk_lock+0xa4>
 800e868:	2310      	movs	r3, #16
 800e86a:	e000      	b.n	800e86e <chk_lock+0xa6>
 800e86c:	2300      	movs	r3, #0
}
 800e86e:	4618      	mov	r0, r3
 800e870:	3714      	adds	r7, #20
 800e872:	46bd      	mov	sp, r7
 800e874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e878:	4770      	bx	lr
 800e87a:	bf00      	nop
 800e87c:	20000794 	.word	0x20000794

0800e880 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e880:	b480      	push	{r7}
 800e882:	b083      	sub	sp, #12
 800e884:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e886:	2300      	movs	r3, #0
 800e888:	607b      	str	r3, [r7, #4]
 800e88a:	e002      	b.n	800e892 <enq_lock+0x12>
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	3301      	adds	r3, #1
 800e890:	607b      	str	r3, [r7, #4]
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2b01      	cmp	r3, #1
 800e896:	d806      	bhi.n	800e8a6 <enq_lock+0x26>
 800e898:	4a09      	ldr	r2, [pc, #36]	; (800e8c0 <enq_lock+0x40>)
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	011b      	lsls	r3, r3, #4
 800e89e:	4413      	add	r3, r2
 800e8a0:	681b      	ldr	r3, [r3, #0]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d1f2      	bne.n	800e88c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	2b02      	cmp	r3, #2
 800e8aa:	bf14      	ite	ne
 800e8ac:	2301      	movne	r3, #1
 800e8ae:	2300      	moveq	r3, #0
 800e8b0:	b2db      	uxtb	r3, r3
}
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	370c      	adds	r7, #12
 800e8b6:	46bd      	mov	sp, r7
 800e8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8bc:	4770      	bx	lr
 800e8be:	bf00      	nop
 800e8c0:	20000794 	.word	0x20000794

0800e8c4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e8c4:	b480      	push	{r7}
 800e8c6:	b085      	sub	sp, #20
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	6078      	str	r0, [r7, #4]
 800e8cc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e8ce:	2300      	movs	r3, #0
 800e8d0:	60fb      	str	r3, [r7, #12]
 800e8d2:	e01f      	b.n	800e914 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e8d4:	4a41      	ldr	r2, [pc, #260]	; (800e9dc <inc_lock+0x118>)
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	011b      	lsls	r3, r3, #4
 800e8da:	4413      	add	r3, r2
 800e8dc:	681a      	ldr	r2, [r3, #0]
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	429a      	cmp	r2, r3
 800e8e4:	d113      	bne.n	800e90e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e8e6:	4a3d      	ldr	r2, [pc, #244]	; (800e9dc <inc_lock+0x118>)
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	011b      	lsls	r3, r3, #4
 800e8ec:	4413      	add	r3, r2
 800e8ee:	3304      	adds	r3, #4
 800e8f0:	681a      	ldr	r2, [r3, #0]
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e8f6:	429a      	cmp	r2, r3
 800e8f8:	d109      	bne.n	800e90e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e8fa:	4a38      	ldr	r2, [pc, #224]	; (800e9dc <inc_lock+0x118>)
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	011b      	lsls	r3, r3, #4
 800e900:	4413      	add	r3, r2
 800e902:	3308      	adds	r3, #8
 800e904:	681a      	ldr	r2, [r3, #0]
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e90a:	429a      	cmp	r2, r3
 800e90c:	d006      	beq.n	800e91c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	3301      	adds	r3, #1
 800e912:	60fb      	str	r3, [r7, #12]
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	2b01      	cmp	r3, #1
 800e918:	d9dc      	bls.n	800e8d4 <inc_lock+0x10>
 800e91a:	e000      	b.n	800e91e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e91c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	2b02      	cmp	r3, #2
 800e922:	d132      	bne.n	800e98a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e924:	2300      	movs	r3, #0
 800e926:	60fb      	str	r3, [r7, #12]
 800e928:	e002      	b.n	800e930 <inc_lock+0x6c>
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	3301      	adds	r3, #1
 800e92e:	60fb      	str	r3, [r7, #12]
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	2b01      	cmp	r3, #1
 800e934:	d806      	bhi.n	800e944 <inc_lock+0x80>
 800e936:	4a29      	ldr	r2, [pc, #164]	; (800e9dc <inc_lock+0x118>)
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	011b      	lsls	r3, r3, #4
 800e93c:	4413      	add	r3, r2
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d1f2      	bne.n	800e92a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	2b02      	cmp	r3, #2
 800e948:	d101      	bne.n	800e94e <inc_lock+0x8a>
 800e94a:	2300      	movs	r3, #0
 800e94c:	e040      	b.n	800e9d0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681a      	ldr	r2, [r3, #0]
 800e952:	4922      	ldr	r1, [pc, #136]	; (800e9dc <inc_lock+0x118>)
 800e954:	68fb      	ldr	r3, [r7, #12]
 800e956:	011b      	lsls	r3, r3, #4
 800e958:	440b      	add	r3, r1
 800e95a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	689a      	ldr	r2, [r3, #8]
 800e960:	491e      	ldr	r1, [pc, #120]	; (800e9dc <inc_lock+0x118>)
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	011b      	lsls	r3, r3, #4
 800e966:	440b      	add	r3, r1
 800e968:	3304      	adds	r3, #4
 800e96a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	695a      	ldr	r2, [r3, #20]
 800e970:	491a      	ldr	r1, [pc, #104]	; (800e9dc <inc_lock+0x118>)
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	011b      	lsls	r3, r3, #4
 800e976:	440b      	add	r3, r1
 800e978:	3308      	adds	r3, #8
 800e97a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e97c:	4a17      	ldr	r2, [pc, #92]	; (800e9dc <inc_lock+0x118>)
 800e97e:	68fb      	ldr	r3, [r7, #12]
 800e980:	011b      	lsls	r3, r3, #4
 800e982:	4413      	add	r3, r2
 800e984:	330c      	adds	r3, #12
 800e986:	2200      	movs	r2, #0
 800e988:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d009      	beq.n	800e9a4 <inc_lock+0xe0>
 800e990:	4a12      	ldr	r2, [pc, #72]	; (800e9dc <inc_lock+0x118>)
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	011b      	lsls	r3, r3, #4
 800e996:	4413      	add	r3, r2
 800e998:	330c      	adds	r3, #12
 800e99a:	881b      	ldrh	r3, [r3, #0]
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	d001      	beq.n	800e9a4 <inc_lock+0xe0>
 800e9a0:	2300      	movs	r3, #0
 800e9a2:	e015      	b.n	800e9d0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d108      	bne.n	800e9bc <inc_lock+0xf8>
 800e9aa:	4a0c      	ldr	r2, [pc, #48]	; (800e9dc <inc_lock+0x118>)
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	011b      	lsls	r3, r3, #4
 800e9b0:	4413      	add	r3, r2
 800e9b2:	330c      	adds	r3, #12
 800e9b4:	881b      	ldrh	r3, [r3, #0]
 800e9b6:	3301      	adds	r3, #1
 800e9b8:	b29a      	uxth	r2, r3
 800e9ba:	e001      	b.n	800e9c0 <inc_lock+0xfc>
 800e9bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e9c0:	4906      	ldr	r1, [pc, #24]	; (800e9dc <inc_lock+0x118>)
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	011b      	lsls	r3, r3, #4
 800e9c6:	440b      	add	r3, r1
 800e9c8:	330c      	adds	r3, #12
 800e9ca:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e9cc:	68fb      	ldr	r3, [r7, #12]
 800e9ce:	3301      	adds	r3, #1
}
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	3714      	adds	r7, #20
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9da:	4770      	bx	lr
 800e9dc:	20000794 	.word	0x20000794

0800e9e0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e9e0:	b480      	push	{r7}
 800e9e2:	b085      	sub	sp, #20
 800e9e4:	af00      	add	r7, sp, #0
 800e9e6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	3b01      	subs	r3, #1
 800e9ec:	607b      	str	r3, [r7, #4]
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	2b01      	cmp	r3, #1
 800e9f2:	d825      	bhi.n	800ea40 <dec_lock+0x60>
		n = Files[i].ctr;
 800e9f4:	4a17      	ldr	r2, [pc, #92]	; (800ea54 <dec_lock+0x74>)
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	011b      	lsls	r3, r3, #4
 800e9fa:	4413      	add	r3, r2
 800e9fc:	330c      	adds	r3, #12
 800e9fe:	881b      	ldrh	r3, [r3, #0]
 800ea00:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ea02:	89fb      	ldrh	r3, [r7, #14]
 800ea04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea08:	d101      	bne.n	800ea0e <dec_lock+0x2e>
 800ea0a:	2300      	movs	r3, #0
 800ea0c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ea0e:	89fb      	ldrh	r3, [r7, #14]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d002      	beq.n	800ea1a <dec_lock+0x3a>
 800ea14:	89fb      	ldrh	r3, [r7, #14]
 800ea16:	3b01      	subs	r3, #1
 800ea18:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ea1a:	4a0e      	ldr	r2, [pc, #56]	; (800ea54 <dec_lock+0x74>)
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	011b      	lsls	r3, r3, #4
 800ea20:	4413      	add	r3, r2
 800ea22:	330c      	adds	r3, #12
 800ea24:	89fa      	ldrh	r2, [r7, #14]
 800ea26:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ea28:	89fb      	ldrh	r3, [r7, #14]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d105      	bne.n	800ea3a <dec_lock+0x5a>
 800ea2e:	4a09      	ldr	r2, [pc, #36]	; (800ea54 <dec_lock+0x74>)
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	011b      	lsls	r3, r3, #4
 800ea34:	4413      	add	r3, r2
 800ea36:	2200      	movs	r2, #0
 800ea38:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	737b      	strb	r3, [r7, #13]
 800ea3e:	e001      	b.n	800ea44 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ea40:	2302      	movs	r3, #2
 800ea42:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ea44:	7b7b      	ldrb	r3, [r7, #13]
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3714      	adds	r7, #20
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea50:	4770      	bx	lr
 800ea52:	bf00      	nop
 800ea54:	20000794 	.word	0x20000794

0800ea58 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ea58:	b480      	push	{r7}
 800ea5a:	b085      	sub	sp, #20
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ea60:	2300      	movs	r3, #0
 800ea62:	60fb      	str	r3, [r7, #12]
 800ea64:	e010      	b.n	800ea88 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ea66:	4a0d      	ldr	r2, [pc, #52]	; (800ea9c <clear_lock+0x44>)
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	011b      	lsls	r3, r3, #4
 800ea6c:	4413      	add	r3, r2
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	687a      	ldr	r2, [r7, #4]
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d105      	bne.n	800ea82 <clear_lock+0x2a>
 800ea76:	4a09      	ldr	r2, [pc, #36]	; (800ea9c <clear_lock+0x44>)
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	011b      	lsls	r3, r3, #4
 800ea7c:	4413      	add	r3, r2
 800ea7e:	2200      	movs	r2, #0
 800ea80:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ea82:	68fb      	ldr	r3, [r7, #12]
 800ea84:	3301      	adds	r3, #1
 800ea86:	60fb      	str	r3, [r7, #12]
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	2b01      	cmp	r3, #1
 800ea8c:	d9eb      	bls.n	800ea66 <clear_lock+0xe>
	}
}
 800ea8e:	bf00      	nop
 800ea90:	bf00      	nop
 800ea92:	3714      	adds	r7, #20
 800ea94:	46bd      	mov	sp, r7
 800ea96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9a:	4770      	bx	lr
 800ea9c:	20000794 	.word	0x20000794

0800eaa0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800eaa0:	b580      	push	{r7, lr}
 800eaa2:	b086      	sub	sp, #24
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	78db      	ldrb	r3, [r3, #3]
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d034      	beq.n	800eb1e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eab8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	7858      	ldrb	r0, [r3, #1]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800eac4:	2301      	movs	r3, #1
 800eac6:	697a      	ldr	r2, [r7, #20]
 800eac8:	f7ff fd0e 	bl	800e4e8 <disk_write>
 800eacc:	4603      	mov	r3, r0
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d002      	beq.n	800ead8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ead2:	2301      	movs	r3, #1
 800ead4:	73fb      	strb	r3, [r7, #15]
 800ead6:	e022      	b.n	800eb1e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2200      	movs	r2, #0
 800eadc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eae2:	697a      	ldr	r2, [r7, #20]
 800eae4:	1ad2      	subs	r2, r2, r3
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaea:	429a      	cmp	r2, r3
 800eaec:	d217      	bcs.n	800eb1e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	789b      	ldrb	r3, [r3, #2]
 800eaf2:	613b      	str	r3, [r7, #16]
 800eaf4:	e010      	b.n	800eb18 <sync_window+0x78>
					wsect += fs->fsize;
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eafa:	697a      	ldr	r2, [r7, #20]
 800eafc:	4413      	add	r3, r2
 800eafe:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	7858      	ldrb	r0, [r3, #1]
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	697a      	ldr	r2, [r7, #20]
 800eb0e:	f7ff fceb 	bl	800e4e8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800eb12:	693b      	ldr	r3, [r7, #16]
 800eb14:	3b01      	subs	r3, #1
 800eb16:	613b      	str	r3, [r7, #16]
 800eb18:	693b      	ldr	r3, [r7, #16]
 800eb1a:	2b01      	cmp	r3, #1
 800eb1c:	d8eb      	bhi.n	800eaf6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800eb1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb20:	4618      	mov	r0, r3
 800eb22:	3718      	adds	r7, #24
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}

0800eb28 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b084      	sub	sp, #16
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800eb32:	2300      	movs	r3, #0
 800eb34:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb3a:	683a      	ldr	r2, [r7, #0]
 800eb3c:	429a      	cmp	r2, r3
 800eb3e:	d01b      	beq.n	800eb78 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800eb40:	6878      	ldr	r0, [r7, #4]
 800eb42:	f7ff ffad 	bl	800eaa0 <sync_window>
 800eb46:	4603      	mov	r3, r0
 800eb48:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800eb4a:	7bfb      	ldrb	r3, [r7, #15]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d113      	bne.n	800eb78 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	7858      	ldrb	r0, [r3, #1]
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	683a      	ldr	r2, [r7, #0]
 800eb5e:	f7ff fca3 	bl	800e4a8 <disk_read>
 800eb62:	4603      	mov	r3, r0
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d004      	beq.n	800eb72 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800eb68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb6c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800eb6e:	2301      	movs	r3, #1
 800eb70:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	683a      	ldr	r2, [r7, #0]
 800eb76:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800eb78:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3710      	adds	r7, #16
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
	...

0800eb84 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800eb84:	b580      	push	{r7, lr}
 800eb86:	b084      	sub	sp, #16
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800eb8c:	6878      	ldr	r0, [r7, #4]
 800eb8e:	f7ff ff87 	bl	800eaa0 <sync_window>
 800eb92:	4603      	mov	r3, r0
 800eb94:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800eb96:	7bfb      	ldrb	r3, [r7, #15]
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d159      	bne.n	800ec50 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	781b      	ldrb	r3, [r3, #0]
 800eba0:	2b03      	cmp	r3, #3
 800eba2:	d149      	bne.n	800ec38 <sync_fs+0xb4>
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	791b      	ldrb	r3, [r3, #4]
 800eba8:	2b01      	cmp	r3, #1
 800ebaa:	d145      	bne.n	800ec38 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	899b      	ldrh	r3, [r3, #12]
 800ebb6:	461a      	mov	r2, r3
 800ebb8:	2100      	movs	r1, #0
 800ebba:	f7ff fd76 	bl	800e6aa <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	333c      	adds	r3, #60	; 0x3c
 800ebc2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ebc6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f7ff fd05 	bl	800e5da <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ebd0:	687b      	ldr	r3, [r7, #4]
 800ebd2:	333c      	adds	r3, #60	; 0x3c
 800ebd4:	4921      	ldr	r1, [pc, #132]	; (800ec5c <sync_fs+0xd8>)
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7ff fd1a 	bl	800e610 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	333c      	adds	r3, #60	; 0x3c
 800ebe0:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ebe4:	491e      	ldr	r1, [pc, #120]	; (800ec60 <sync_fs+0xdc>)
 800ebe6:	4618      	mov	r0, r3
 800ebe8:	f7ff fd12 	bl	800e610 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	333c      	adds	r3, #60	; 0x3c
 800ebf0:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	69db      	ldr	r3, [r3, #28]
 800ebf8:	4619      	mov	r1, r3
 800ebfa:	4610      	mov	r0, r2
 800ebfc:	f7ff fd08 	bl	800e610 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	333c      	adds	r3, #60	; 0x3c
 800ec04:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	699b      	ldr	r3, [r3, #24]
 800ec0c:	4619      	mov	r1, r3
 800ec0e:	4610      	mov	r0, r2
 800ec10:	f7ff fcfe 	bl	800e610 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec18:	1c5a      	adds	r2, r3, #1
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	7858      	ldrb	r0, [r3, #1]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec2c:	2301      	movs	r3, #1
 800ec2e:	f7ff fc5b 	bl	800e4e8 <disk_write>
			fs->fsi_flag = 0;
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	2200      	movs	r2, #0
 800ec36:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	785b      	ldrb	r3, [r3, #1]
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	2100      	movs	r1, #0
 800ec40:	4618      	mov	r0, r3
 800ec42:	f7ff fc71 	bl	800e528 <disk_ioctl>
 800ec46:	4603      	mov	r3, r0
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d001      	beq.n	800ec50 <sync_fs+0xcc>
 800ec4c:	2301      	movs	r3, #1
 800ec4e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ec50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec52:	4618      	mov	r0, r3
 800ec54:	3710      	adds	r7, #16
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}
 800ec5a:	bf00      	nop
 800ec5c:	41615252 	.word	0x41615252
 800ec60:	61417272 	.word	0x61417272

0800ec64 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b083      	sub	sp, #12
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
 800ec6c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ec6e:	683b      	ldr	r3, [r7, #0]
 800ec70:	3b02      	subs	r3, #2
 800ec72:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ec74:	687b      	ldr	r3, [r7, #4]
 800ec76:	6a1b      	ldr	r3, [r3, #32]
 800ec78:	3b02      	subs	r3, #2
 800ec7a:	683a      	ldr	r2, [r7, #0]
 800ec7c:	429a      	cmp	r2, r3
 800ec7e:	d301      	bcc.n	800ec84 <clust2sect+0x20>
 800ec80:	2300      	movs	r3, #0
 800ec82:	e008      	b.n	800ec96 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	895b      	ldrh	r3, [r3, #10]
 800ec88:	461a      	mov	r2, r3
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	fb03 f202 	mul.w	r2, r3, r2
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec94:	4413      	add	r3, r2
}
 800ec96:	4618      	mov	r0, r3
 800ec98:	370c      	adds	r7, #12
 800ec9a:	46bd      	mov	sp, r7
 800ec9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca0:	4770      	bx	lr

0800eca2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800eca2:	b580      	push	{r7, lr}
 800eca4:	b086      	sub	sp, #24
 800eca6:	af00      	add	r7, sp, #0
 800eca8:	6078      	str	r0, [r7, #4]
 800ecaa:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ecb2:	683b      	ldr	r3, [r7, #0]
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	d904      	bls.n	800ecc2 <get_fat+0x20>
 800ecb8:	693b      	ldr	r3, [r7, #16]
 800ecba:	6a1b      	ldr	r3, [r3, #32]
 800ecbc:	683a      	ldr	r2, [r7, #0]
 800ecbe:	429a      	cmp	r2, r3
 800ecc0:	d302      	bcc.n	800ecc8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ecc2:	2301      	movs	r3, #1
 800ecc4:	617b      	str	r3, [r7, #20]
 800ecc6:	e0bb      	b.n	800ee40 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ecc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eccc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ecce:	693b      	ldr	r3, [r7, #16]
 800ecd0:	781b      	ldrb	r3, [r3, #0]
 800ecd2:	2b03      	cmp	r3, #3
 800ecd4:	f000 8083 	beq.w	800edde <get_fat+0x13c>
 800ecd8:	2b03      	cmp	r3, #3
 800ecda:	f300 80a7 	bgt.w	800ee2c <get_fat+0x18a>
 800ecde:	2b01      	cmp	r3, #1
 800ece0:	d002      	beq.n	800ece8 <get_fat+0x46>
 800ece2:	2b02      	cmp	r3, #2
 800ece4:	d056      	beq.n	800ed94 <get_fat+0xf2>
 800ece6:	e0a1      	b.n	800ee2c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ece8:	683b      	ldr	r3, [r7, #0]
 800ecea:	60fb      	str	r3, [r7, #12]
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	085b      	lsrs	r3, r3, #1
 800ecf0:	68fa      	ldr	r2, [r7, #12]
 800ecf2:	4413      	add	r3, r2
 800ecf4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ecf6:	693b      	ldr	r3, [r7, #16]
 800ecf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ecfa:	693b      	ldr	r3, [r7, #16]
 800ecfc:	899b      	ldrh	r3, [r3, #12]
 800ecfe:	4619      	mov	r1, r3
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	fbb3 f3f1 	udiv	r3, r3, r1
 800ed06:	4413      	add	r3, r2
 800ed08:	4619      	mov	r1, r3
 800ed0a:	6938      	ldr	r0, [r7, #16]
 800ed0c:	f7ff ff0c 	bl	800eb28 <move_window>
 800ed10:	4603      	mov	r3, r0
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	f040 808d 	bne.w	800ee32 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	1c5a      	adds	r2, r3, #1
 800ed1c:	60fa      	str	r2, [r7, #12]
 800ed1e:	693a      	ldr	r2, [r7, #16]
 800ed20:	8992      	ldrh	r2, [r2, #12]
 800ed22:	fbb3 f1f2 	udiv	r1, r3, r2
 800ed26:	fb02 f201 	mul.w	r2, r2, r1
 800ed2a:	1a9b      	subs	r3, r3, r2
 800ed2c:	693a      	ldr	r2, [r7, #16]
 800ed2e:	4413      	add	r3, r2
 800ed30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed34:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ed36:	693b      	ldr	r3, [r7, #16]
 800ed38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed3a:	693b      	ldr	r3, [r7, #16]
 800ed3c:	899b      	ldrh	r3, [r3, #12]
 800ed3e:	4619      	mov	r1, r3
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	fbb3 f3f1 	udiv	r3, r3, r1
 800ed46:	4413      	add	r3, r2
 800ed48:	4619      	mov	r1, r3
 800ed4a:	6938      	ldr	r0, [r7, #16]
 800ed4c:	f7ff feec 	bl	800eb28 <move_window>
 800ed50:	4603      	mov	r3, r0
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d16f      	bne.n	800ee36 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ed56:	693b      	ldr	r3, [r7, #16]
 800ed58:	899b      	ldrh	r3, [r3, #12]
 800ed5a:	461a      	mov	r2, r3
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ed62:	fb02 f201 	mul.w	r2, r2, r1
 800ed66:	1a9b      	subs	r3, r3, r2
 800ed68:	693a      	ldr	r2, [r7, #16]
 800ed6a:	4413      	add	r3, r2
 800ed6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed70:	021b      	lsls	r3, r3, #8
 800ed72:	461a      	mov	r2, r3
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	4313      	orrs	r3, r2
 800ed78:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	f003 0301 	and.w	r3, r3, #1
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d002      	beq.n	800ed8a <get_fat+0xe8>
 800ed84:	68bb      	ldr	r3, [r7, #8]
 800ed86:	091b      	lsrs	r3, r3, #4
 800ed88:	e002      	b.n	800ed90 <get_fat+0xee>
 800ed8a:	68bb      	ldr	r3, [r7, #8]
 800ed8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ed90:	617b      	str	r3, [r7, #20]
			break;
 800ed92:	e055      	b.n	800ee40 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ed94:	693b      	ldr	r3, [r7, #16]
 800ed96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed98:	693b      	ldr	r3, [r7, #16]
 800ed9a:	899b      	ldrh	r3, [r3, #12]
 800ed9c:	085b      	lsrs	r3, r3, #1
 800ed9e:	b29b      	uxth	r3, r3
 800eda0:	4619      	mov	r1, r3
 800eda2:	683b      	ldr	r3, [r7, #0]
 800eda4:	fbb3 f3f1 	udiv	r3, r3, r1
 800eda8:	4413      	add	r3, r2
 800edaa:	4619      	mov	r1, r3
 800edac:	6938      	ldr	r0, [r7, #16]
 800edae:	f7ff febb 	bl	800eb28 <move_window>
 800edb2:	4603      	mov	r3, r0
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d140      	bne.n	800ee3a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800edb8:	693b      	ldr	r3, [r7, #16]
 800edba:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800edbe:	683b      	ldr	r3, [r7, #0]
 800edc0:	005b      	lsls	r3, r3, #1
 800edc2:	693a      	ldr	r2, [r7, #16]
 800edc4:	8992      	ldrh	r2, [r2, #12]
 800edc6:	fbb3 f0f2 	udiv	r0, r3, r2
 800edca:	fb02 f200 	mul.w	r2, r2, r0
 800edce:	1a9b      	subs	r3, r3, r2
 800edd0:	440b      	add	r3, r1
 800edd2:	4618      	mov	r0, r3
 800edd4:	f7ff fbc6 	bl	800e564 <ld_word>
 800edd8:	4603      	mov	r3, r0
 800edda:	617b      	str	r3, [r7, #20]
			break;
 800eddc:	e030      	b.n	800ee40 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800edde:	693b      	ldr	r3, [r7, #16]
 800ede0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ede2:	693b      	ldr	r3, [r7, #16]
 800ede4:	899b      	ldrh	r3, [r3, #12]
 800ede6:	089b      	lsrs	r3, r3, #2
 800ede8:	b29b      	uxth	r3, r3
 800edea:	4619      	mov	r1, r3
 800edec:	683b      	ldr	r3, [r7, #0]
 800edee:	fbb3 f3f1 	udiv	r3, r3, r1
 800edf2:	4413      	add	r3, r2
 800edf4:	4619      	mov	r1, r3
 800edf6:	6938      	ldr	r0, [r7, #16]
 800edf8:	f7ff fe96 	bl	800eb28 <move_window>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d11d      	bne.n	800ee3e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ee02:	693b      	ldr	r3, [r7, #16]
 800ee04:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	009b      	lsls	r3, r3, #2
 800ee0c:	693a      	ldr	r2, [r7, #16]
 800ee0e:	8992      	ldrh	r2, [r2, #12]
 800ee10:	fbb3 f0f2 	udiv	r0, r3, r2
 800ee14:	fb02 f200 	mul.w	r2, r2, r0
 800ee18:	1a9b      	subs	r3, r3, r2
 800ee1a:	440b      	add	r3, r1
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f7ff fbb9 	bl	800e594 <ld_dword>
 800ee22:	4603      	mov	r3, r0
 800ee24:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800ee28:	617b      	str	r3, [r7, #20]
			break;
 800ee2a:	e009      	b.n	800ee40 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	617b      	str	r3, [r7, #20]
 800ee30:	e006      	b.n	800ee40 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ee32:	bf00      	nop
 800ee34:	e004      	b.n	800ee40 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ee36:	bf00      	nop
 800ee38:	e002      	b.n	800ee40 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ee3a:	bf00      	nop
 800ee3c:	e000      	b.n	800ee40 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ee3e:	bf00      	nop
		}
	}

	return val;
 800ee40:	697b      	ldr	r3, [r7, #20]
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	3718      	adds	r7, #24
 800ee46:	46bd      	mov	sp, r7
 800ee48:	bd80      	pop	{r7, pc}

0800ee4a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ee4a:	b590      	push	{r4, r7, lr}
 800ee4c:	b089      	sub	sp, #36	; 0x24
 800ee4e:	af00      	add	r7, sp, #0
 800ee50:	60f8      	str	r0, [r7, #12]
 800ee52:	60b9      	str	r1, [r7, #8]
 800ee54:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ee56:	2302      	movs	r3, #2
 800ee58:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ee5a:	68bb      	ldr	r3, [r7, #8]
 800ee5c:	2b01      	cmp	r3, #1
 800ee5e:	f240 8102 	bls.w	800f066 <put_fat+0x21c>
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	6a1b      	ldr	r3, [r3, #32]
 800ee66:	68ba      	ldr	r2, [r7, #8]
 800ee68:	429a      	cmp	r2, r3
 800ee6a:	f080 80fc 	bcs.w	800f066 <put_fat+0x21c>
		switch (fs->fs_type) {
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	781b      	ldrb	r3, [r3, #0]
 800ee72:	2b03      	cmp	r3, #3
 800ee74:	f000 80b6 	beq.w	800efe4 <put_fat+0x19a>
 800ee78:	2b03      	cmp	r3, #3
 800ee7a:	f300 80fd 	bgt.w	800f078 <put_fat+0x22e>
 800ee7e:	2b01      	cmp	r3, #1
 800ee80:	d003      	beq.n	800ee8a <put_fat+0x40>
 800ee82:	2b02      	cmp	r3, #2
 800ee84:	f000 8083 	beq.w	800ef8e <put_fat+0x144>
 800ee88:	e0f6      	b.n	800f078 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	61bb      	str	r3, [r7, #24]
 800ee8e:	69bb      	ldr	r3, [r7, #24]
 800ee90:	085b      	lsrs	r3, r3, #1
 800ee92:	69ba      	ldr	r2, [r7, #24]
 800ee94:	4413      	add	r3, r2
 800ee96:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	899b      	ldrh	r3, [r3, #12]
 800eea0:	4619      	mov	r1, r3
 800eea2:	69bb      	ldr	r3, [r7, #24]
 800eea4:	fbb3 f3f1 	udiv	r3, r3, r1
 800eea8:	4413      	add	r3, r2
 800eeaa:	4619      	mov	r1, r3
 800eeac:	68f8      	ldr	r0, [r7, #12]
 800eeae:	f7ff fe3b 	bl	800eb28 <move_window>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eeb6:	7ffb      	ldrb	r3, [r7, #31]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	f040 80d6 	bne.w	800f06a <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800eec4:	69bb      	ldr	r3, [r7, #24]
 800eec6:	1c5a      	adds	r2, r3, #1
 800eec8:	61ba      	str	r2, [r7, #24]
 800eeca:	68fa      	ldr	r2, [r7, #12]
 800eecc:	8992      	ldrh	r2, [r2, #12]
 800eece:	fbb3 f0f2 	udiv	r0, r3, r2
 800eed2:	fb02 f200 	mul.w	r2, r2, r0
 800eed6:	1a9b      	subs	r3, r3, r2
 800eed8:	440b      	add	r3, r1
 800eeda:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	f003 0301 	and.w	r3, r3, #1
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d00d      	beq.n	800ef02 <put_fat+0xb8>
 800eee6:	697b      	ldr	r3, [r7, #20]
 800eee8:	781b      	ldrb	r3, [r3, #0]
 800eeea:	b25b      	sxtb	r3, r3
 800eeec:	f003 030f 	and.w	r3, r3, #15
 800eef0:	b25a      	sxtb	r2, r3
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	b2db      	uxtb	r3, r3
 800eef6:	011b      	lsls	r3, r3, #4
 800eef8:	b25b      	sxtb	r3, r3
 800eefa:	4313      	orrs	r3, r2
 800eefc:	b25b      	sxtb	r3, r3
 800eefe:	b2db      	uxtb	r3, r3
 800ef00:	e001      	b.n	800ef06 <put_fat+0xbc>
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	b2db      	uxtb	r3, r3
 800ef06:	697a      	ldr	r2, [r7, #20]
 800ef08:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	2201      	movs	r2, #1
 800ef0e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef14:	68fb      	ldr	r3, [r7, #12]
 800ef16:	899b      	ldrh	r3, [r3, #12]
 800ef18:	4619      	mov	r1, r3
 800ef1a:	69bb      	ldr	r3, [r7, #24]
 800ef1c:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef20:	4413      	add	r3, r2
 800ef22:	4619      	mov	r1, r3
 800ef24:	68f8      	ldr	r0, [r7, #12]
 800ef26:	f7ff fdff 	bl	800eb28 <move_window>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ef2e:	7ffb      	ldrb	r3, [r7, #31]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	f040 809c 	bne.w	800f06e <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ef3c:	68fb      	ldr	r3, [r7, #12]
 800ef3e:	899b      	ldrh	r3, [r3, #12]
 800ef40:	461a      	mov	r2, r3
 800ef42:	69bb      	ldr	r3, [r7, #24]
 800ef44:	fbb3 f0f2 	udiv	r0, r3, r2
 800ef48:	fb02 f200 	mul.w	r2, r2, r0
 800ef4c:	1a9b      	subs	r3, r3, r2
 800ef4e:	440b      	add	r3, r1
 800ef50:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ef52:	68bb      	ldr	r3, [r7, #8]
 800ef54:	f003 0301 	and.w	r3, r3, #1
 800ef58:	2b00      	cmp	r3, #0
 800ef5a:	d003      	beq.n	800ef64 <put_fat+0x11a>
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	091b      	lsrs	r3, r3, #4
 800ef60:	b2db      	uxtb	r3, r3
 800ef62:	e00e      	b.n	800ef82 <put_fat+0x138>
 800ef64:	697b      	ldr	r3, [r7, #20]
 800ef66:	781b      	ldrb	r3, [r3, #0]
 800ef68:	b25b      	sxtb	r3, r3
 800ef6a:	f023 030f 	bic.w	r3, r3, #15
 800ef6e:	b25a      	sxtb	r2, r3
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	0a1b      	lsrs	r3, r3, #8
 800ef74:	b25b      	sxtb	r3, r3
 800ef76:	f003 030f 	and.w	r3, r3, #15
 800ef7a:	b25b      	sxtb	r3, r3
 800ef7c:	4313      	orrs	r3, r2
 800ef7e:	b25b      	sxtb	r3, r3
 800ef80:	b2db      	uxtb	r3, r3
 800ef82:	697a      	ldr	r2, [r7, #20]
 800ef84:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	2201      	movs	r2, #1
 800ef8a:	70da      	strb	r2, [r3, #3]
			break;
 800ef8c:	e074      	b.n	800f078 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ef8e:	68fb      	ldr	r3, [r7, #12]
 800ef90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef92:	68fb      	ldr	r3, [r7, #12]
 800ef94:	899b      	ldrh	r3, [r3, #12]
 800ef96:	085b      	lsrs	r3, r3, #1
 800ef98:	b29b      	uxth	r3, r3
 800ef9a:	4619      	mov	r1, r3
 800ef9c:	68bb      	ldr	r3, [r7, #8]
 800ef9e:	fbb3 f3f1 	udiv	r3, r3, r1
 800efa2:	4413      	add	r3, r2
 800efa4:	4619      	mov	r1, r3
 800efa6:	68f8      	ldr	r0, [r7, #12]
 800efa8:	f7ff fdbe 	bl	800eb28 <move_window>
 800efac:	4603      	mov	r3, r0
 800efae:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800efb0:	7ffb      	ldrb	r3, [r7, #31]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d15d      	bne.n	800f072 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800efbc:	68bb      	ldr	r3, [r7, #8]
 800efbe:	005b      	lsls	r3, r3, #1
 800efc0:	68fa      	ldr	r2, [r7, #12]
 800efc2:	8992      	ldrh	r2, [r2, #12]
 800efc4:	fbb3 f0f2 	udiv	r0, r3, r2
 800efc8:	fb02 f200 	mul.w	r2, r2, r0
 800efcc:	1a9b      	subs	r3, r3, r2
 800efce:	440b      	add	r3, r1
 800efd0:	687a      	ldr	r2, [r7, #4]
 800efd2:	b292      	uxth	r2, r2
 800efd4:	4611      	mov	r1, r2
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7ff faff 	bl	800e5da <st_word>
			fs->wflag = 1;
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	2201      	movs	r2, #1
 800efe0:	70da      	strb	r2, [r3, #3]
			break;
 800efe2:	e049      	b.n	800f078 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efe8:	68fb      	ldr	r3, [r7, #12]
 800efea:	899b      	ldrh	r3, [r3, #12]
 800efec:	089b      	lsrs	r3, r3, #2
 800efee:	b29b      	uxth	r3, r3
 800eff0:	4619      	mov	r1, r3
 800eff2:	68bb      	ldr	r3, [r7, #8]
 800eff4:	fbb3 f3f1 	udiv	r3, r3, r1
 800eff8:	4413      	add	r3, r2
 800effa:	4619      	mov	r1, r3
 800effc:	68f8      	ldr	r0, [r7, #12]
 800effe:	f7ff fd93 	bl	800eb28 <move_window>
 800f002:	4603      	mov	r3, r0
 800f004:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f006:	7ffb      	ldrb	r3, [r7, #31]
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d134      	bne.n	800f076 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	009b      	lsls	r3, r3, #2
 800f01c:	68fa      	ldr	r2, [r7, #12]
 800f01e:	8992      	ldrh	r2, [r2, #12]
 800f020:	fbb3 f0f2 	udiv	r0, r3, r2
 800f024:	fb02 f200 	mul.w	r2, r2, r0
 800f028:	1a9b      	subs	r3, r3, r2
 800f02a:	440b      	add	r3, r1
 800f02c:	4618      	mov	r0, r3
 800f02e:	f7ff fab1 	bl	800e594 <ld_dword>
 800f032:	4603      	mov	r3, r0
 800f034:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f038:	4323      	orrs	r3, r4
 800f03a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f042:	68bb      	ldr	r3, [r7, #8]
 800f044:	009b      	lsls	r3, r3, #2
 800f046:	68fa      	ldr	r2, [r7, #12]
 800f048:	8992      	ldrh	r2, [r2, #12]
 800f04a:	fbb3 f0f2 	udiv	r0, r3, r2
 800f04e:	fb02 f200 	mul.w	r2, r2, r0
 800f052:	1a9b      	subs	r3, r3, r2
 800f054:	440b      	add	r3, r1
 800f056:	6879      	ldr	r1, [r7, #4]
 800f058:	4618      	mov	r0, r3
 800f05a:	f7ff fad9 	bl	800e610 <st_dword>
			fs->wflag = 1;
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	2201      	movs	r2, #1
 800f062:	70da      	strb	r2, [r3, #3]
			break;
 800f064:	e008      	b.n	800f078 <put_fat+0x22e>
		}
	}
 800f066:	bf00      	nop
 800f068:	e006      	b.n	800f078 <put_fat+0x22e>
			if (res != FR_OK) break;
 800f06a:	bf00      	nop
 800f06c:	e004      	b.n	800f078 <put_fat+0x22e>
			if (res != FR_OK) break;
 800f06e:	bf00      	nop
 800f070:	e002      	b.n	800f078 <put_fat+0x22e>
			if (res != FR_OK) break;
 800f072:	bf00      	nop
 800f074:	e000      	b.n	800f078 <put_fat+0x22e>
			if (res != FR_OK) break;
 800f076:	bf00      	nop
	return res;
 800f078:	7ffb      	ldrb	r3, [r7, #31]
}
 800f07a:	4618      	mov	r0, r3
 800f07c:	3724      	adds	r7, #36	; 0x24
 800f07e:	46bd      	mov	sp, r7
 800f080:	bd90      	pop	{r4, r7, pc}

0800f082 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f082:	b580      	push	{r7, lr}
 800f084:	b088      	sub	sp, #32
 800f086:	af00      	add	r7, sp, #0
 800f088:	60f8      	str	r0, [r7, #12]
 800f08a:	60b9      	str	r1, [r7, #8]
 800f08c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f08e:	2300      	movs	r3, #0
 800f090:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	681b      	ldr	r3, [r3, #0]
 800f096:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f098:	68bb      	ldr	r3, [r7, #8]
 800f09a:	2b01      	cmp	r3, #1
 800f09c:	d904      	bls.n	800f0a8 <remove_chain+0x26>
 800f09e:	69bb      	ldr	r3, [r7, #24]
 800f0a0:	6a1b      	ldr	r3, [r3, #32]
 800f0a2:	68ba      	ldr	r2, [r7, #8]
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d301      	bcc.n	800f0ac <remove_chain+0x2a>
 800f0a8:	2302      	movs	r3, #2
 800f0aa:	e04b      	b.n	800f144 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d00c      	beq.n	800f0cc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f0b2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f0b6:	6879      	ldr	r1, [r7, #4]
 800f0b8:	69b8      	ldr	r0, [r7, #24]
 800f0ba:	f7ff fec6 	bl	800ee4a <put_fat>
 800f0be:	4603      	mov	r3, r0
 800f0c0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f0c2:	7ffb      	ldrb	r3, [r7, #31]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d001      	beq.n	800f0cc <remove_chain+0x4a>
 800f0c8:	7ffb      	ldrb	r3, [r7, #31]
 800f0ca:	e03b      	b.n	800f144 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f0cc:	68b9      	ldr	r1, [r7, #8]
 800f0ce:	68f8      	ldr	r0, [r7, #12]
 800f0d0:	f7ff fde7 	bl	800eca2 <get_fat>
 800f0d4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f0d6:	697b      	ldr	r3, [r7, #20]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d031      	beq.n	800f140 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f0dc:	697b      	ldr	r3, [r7, #20]
 800f0de:	2b01      	cmp	r3, #1
 800f0e0:	d101      	bne.n	800f0e6 <remove_chain+0x64>
 800f0e2:	2302      	movs	r3, #2
 800f0e4:	e02e      	b.n	800f144 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f0ec:	d101      	bne.n	800f0f2 <remove_chain+0x70>
 800f0ee:	2301      	movs	r3, #1
 800f0f0:	e028      	b.n	800f144 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	68b9      	ldr	r1, [r7, #8]
 800f0f6:	69b8      	ldr	r0, [r7, #24]
 800f0f8:	f7ff fea7 	bl	800ee4a <put_fat>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f100:	7ffb      	ldrb	r3, [r7, #31]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d001      	beq.n	800f10a <remove_chain+0x88>
 800f106:	7ffb      	ldrb	r3, [r7, #31]
 800f108:	e01c      	b.n	800f144 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f10a:	69bb      	ldr	r3, [r7, #24]
 800f10c:	69da      	ldr	r2, [r3, #28]
 800f10e:	69bb      	ldr	r3, [r7, #24]
 800f110:	6a1b      	ldr	r3, [r3, #32]
 800f112:	3b02      	subs	r3, #2
 800f114:	429a      	cmp	r2, r3
 800f116:	d20b      	bcs.n	800f130 <remove_chain+0xae>
			fs->free_clst++;
 800f118:	69bb      	ldr	r3, [r7, #24]
 800f11a:	69db      	ldr	r3, [r3, #28]
 800f11c:	1c5a      	adds	r2, r3, #1
 800f11e:	69bb      	ldr	r3, [r7, #24]
 800f120:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800f122:	69bb      	ldr	r3, [r7, #24]
 800f124:	791b      	ldrb	r3, [r3, #4]
 800f126:	f043 0301 	orr.w	r3, r3, #1
 800f12a:	b2da      	uxtb	r2, r3
 800f12c:	69bb      	ldr	r3, [r7, #24]
 800f12e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f130:	697b      	ldr	r3, [r7, #20]
 800f132:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f134:	69bb      	ldr	r3, [r7, #24]
 800f136:	6a1b      	ldr	r3, [r3, #32]
 800f138:	68ba      	ldr	r2, [r7, #8]
 800f13a:	429a      	cmp	r2, r3
 800f13c:	d3c6      	bcc.n	800f0cc <remove_chain+0x4a>
 800f13e:	e000      	b.n	800f142 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f140:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f142:	2300      	movs	r3, #0
}
 800f144:	4618      	mov	r0, r3
 800f146:	3720      	adds	r7, #32
 800f148:	46bd      	mov	sp, r7
 800f14a:	bd80      	pop	{r7, pc}

0800f14c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f14c:	b580      	push	{r7, lr}
 800f14e:	b088      	sub	sp, #32
 800f150:	af00      	add	r7, sp, #0
 800f152:	6078      	str	r0, [r7, #4]
 800f154:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d10d      	bne.n	800f17e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f162:	693b      	ldr	r3, [r7, #16]
 800f164:	699b      	ldr	r3, [r3, #24]
 800f166:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f168:	69bb      	ldr	r3, [r7, #24]
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d004      	beq.n	800f178 <create_chain+0x2c>
 800f16e:	693b      	ldr	r3, [r7, #16]
 800f170:	6a1b      	ldr	r3, [r3, #32]
 800f172:	69ba      	ldr	r2, [r7, #24]
 800f174:	429a      	cmp	r2, r3
 800f176:	d31b      	bcc.n	800f1b0 <create_chain+0x64>
 800f178:	2301      	movs	r3, #1
 800f17a:	61bb      	str	r3, [r7, #24]
 800f17c:	e018      	b.n	800f1b0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f17e:	6839      	ldr	r1, [r7, #0]
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f7ff fd8e 	bl	800eca2 <get_fat>
 800f186:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f188:	68fb      	ldr	r3, [r7, #12]
 800f18a:	2b01      	cmp	r3, #1
 800f18c:	d801      	bhi.n	800f192 <create_chain+0x46>
 800f18e:	2301      	movs	r3, #1
 800f190:	e070      	b.n	800f274 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f192:	68fb      	ldr	r3, [r7, #12]
 800f194:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f198:	d101      	bne.n	800f19e <create_chain+0x52>
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	e06a      	b.n	800f274 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f19e:	693b      	ldr	r3, [r7, #16]
 800f1a0:	6a1b      	ldr	r3, [r3, #32]
 800f1a2:	68fa      	ldr	r2, [r7, #12]
 800f1a4:	429a      	cmp	r2, r3
 800f1a6:	d201      	bcs.n	800f1ac <create_chain+0x60>
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	e063      	b.n	800f274 <create_chain+0x128>
		scl = clst;
 800f1ac:	683b      	ldr	r3, [r7, #0]
 800f1ae:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f1b0:	69bb      	ldr	r3, [r7, #24]
 800f1b2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f1b4:	69fb      	ldr	r3, [r7, #28]
 800f1b6:	3301      	adds	r3, #1
 800f1b8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f1ba:	693b      	ldr	r3, [r7, #16]
 800f1bc:	6a1b      	ldr	r3, [r3, #32]
 800f1be:	69fa      	ldr	r2, [r7, #28]
 800f1c0:	429a      	cmp	r2, r3
 800f1c2:	d307      	bcc.n	800f1d4 <create_chain+0x88>
				ncl = 2;
 800f1c4:	2302      	movs	r3, #2
 800f1c6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f1c8:	69fa      	ldr	r2, [r7, #28]
 800f1ca:	69bb      	ldr	r3, [r7, #24]
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d901      	bls.n	800f1d4 <create_chain+0x88>
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	e04f      	b.n	800f274 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f1d4:	69f9      	ldr	r1, [r7, #28]
 800f1d6:	6878      	ldr	r0, [r7, #4]
 800f1d8:	f7ff fd63 	bl	800eca2 <get_fat>
 800f1dc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d00e      	beq.n	800f202 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	2b01      	cmp	r3, #1
 800f1e8:	d003      	beq.n	800f1f2 <create_chain+0xa6>
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f1f0:	d101      	bne.n	800f1f6 <create_chain+0xaa>
 800f1f2:	68fb      	ldr	r3, [r7, #12]
 800f1f4:	e03e      	b.n	800f274 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f1f6:	69fa      	ldr	r2, [r7, #28]
 800f1f8:	69bb      	ldr	r3, [r7, #24]
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d1da      	bne.n	800f1b4 <create_chain+0x68>
 800f1fe:	2300      	movs	r3, #0
 800f200:	e038      	b.n	800f274 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f202:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f204:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f208:	69f9      	ldr	r1, [r7, #28]
 800f20a:	6938      	ldr	r0, [r7, #16]
 800f20c:	f7ff fe1d 	bl	800ee4a <put_fat>
 800f210:	4603      	mov	r3, r0
 800f212:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f214:	7dfb      	ldrb	r3, [r7, #23]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d109      	bne.n	800f22e <create_chain+0xe2>
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d006      	beq.n	800f22e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f220:	69fa      	ldr	r2, [r7, #28]
 800f222:	6839      	ldr	r1, [r7, #0]
 800f224:	6938      	ldr	r0, [r7, #16]
 800f226:	f7ff fe10 	bl	800ee4a <put_fat>
 800f22a:	4603      	mov	r3, r0
 800f22c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f22e:	7dfb      	ldrb	r3, [r7, #23]
 800f230:	2b00      	cmp	r3, #0
 800f232:	d116      	bne.n	800f262 <create_chain+0x116>
		fs->last_clst = ncl;
 800f234:	693b      	ldr	r3, [r7, #16]
 800f236:	69fa      	ldr	r2, [r7, #28]
 800f238:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	69da      	ldr	r2, [r3, #28]
 800f23e:	693b      	ldr	r3, [r7, #16]
 800f240:	6a1b      	ldr	r3, [r3, #32]
 800f242:	3b02      	subs	r3, #2
 800f244:	429a      	cmp	r2, r3
 800f246:	d804      	bhi.n	800f252 <create_chain+0x106>
 800f248:	693b      	ldr	r3, [r7, #16]
 800f24a:	69db      	ldr	r3, [r3, #28]
 800f24c:	1e5a      	subs	r2, r3, #1
 800f24e:	693b      	ldr	r3, [r7, #16]
 800f250:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800f252:	693b      	ldr	r3, [r7, #16]
 800f254:	791b      	ldrb	r3, [r3, #4]
 800f256:	f043 0301 	orr.w	r3, r3, #1
 800f25a:	b2da      	uxtb	r2, r3
 800f25c:	693b      	ldr	r3, [r7, #16]
 800f25e:	711a      	strb	r2, [r3, #4]
 800f260:	e007      	b.n	800f272 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f262:	7dfb      	ldrb	r3, [r7, #23]
 800f264:	2b01      	cmp	r3, #1
 800f266:	d102      	bne.n	800f26e <create_chain+0x122>
 800f268:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f26c:	e000      	b.n	800f270 <create_chain+0x124>
 800f26e:	2301      	movs	r3, #1
 800f270:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f272:	69fb      	ldr	r3, [r7, #28]
}
 800f274:	4618      	mov	r0, r3
 800f276:	3720      	adds	r7, #32
 800f278:	46bd      	mov	sp, r7
 800f27a:	bd80      	pop	{r7, pc}

0800f27c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f27c:	b480      	push	{r7}
 800f27e:	b087      	sub	sp, #28
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
 800f284:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f290:	3304      	adds	r3, #4
 800f292:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	899b      	ldrh	r3, [r3, #12]
 800f298:	461a      	mov	r2, r3
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2a0:	68fa      	ldr	r2, [r7, #12]
 800f2a2:	8952      	ldrh	r2, [r2, #10]
 800f2a4:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2a8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f2aa:	693b      	ldr	r3, [r7, #16]
 800f2ac:	1d1a      	adds	r2, r3, #4
 800f2ae:	613a      	str	r2, [r7, #16]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d101      	bne.n	800f2be <clmt_clust+0x42>
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	e010      	b.n	800f2e0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800f2be:	697a      	ldr	r2, [r7, #20]
 800f2c0:	68bb      	ldr	r3, [r7, #8]
 800f2c2:	429a      	cmp	r2, r3
 800f2c4:	d307      	bcc.n	800f2d6 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800f2c6:	697a      	ldr	r2, [r7, #20]
 800f2c8:	68bb      	ldr	r3, [r7, #8]
 800f2ca:	1ad3      	subs	r3, r2, r3
 800f2cc:	617b      	str	r3, [r7, #20]
 800f2ce:	693b      	ldr	r3, [r7, #16]
 800f2d0:	3304      	adds	r3, #4
 800f2d2:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f2d4:	e7e9      	b.n	800f2aa <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800f2d6:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f2d8:	693b      	ldr	r3, [r7, #16]
 800f2da:	681a      	ldr	r2, [r3, #0]
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	4413      	add	r3, r2
}
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	371c      	adds	r7, #28
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ea:	4770      	bx	lr

0800f2ec <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b086      	sub	sp, #24
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
 800f2f4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f302:	d204      	bcs.n	800f30e <dir_sdi+0x22>
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	f003 031f 	and.w	r3, r3, #31
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d001      	beq.n	800f312 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f30e:	2302      	movs	r3, #2
 800f310:	e071      	b.n	800f3f6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	683a      	ldr	r2, [r7, #0]
 800f316:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	689b      	ldr	r3, [r3, #8]
 800f31c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f31e:	697b      	ldr	r3, [r7, #20]
 800f320:	2b00      	cmp	r3, #0
 800f322:	d106      	bne.n	800f332 <dir_sdi+0x46>
 800f324:	693b      	ldr	r3, [r7, #16]
 800f326:	781b      	ldrb	r3, [r3, #0]
 800f328:	2b02      	cmp	r3, #2
 800f32a:	d902      	bls.n	800f332 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f32c:	693b      	ldr	r3, [r7, #16]
 800f32e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f330:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f332:	697b      	ldr	r3, [r7, #20]
 800f334:	2b00      	cmp	r3, #0
 800f336:	d10c      	bne.n	800f352 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f338:	683b      	ldr	r3, [r7, #0]
 800f33a:	095b      	lsrs	r3, r3, #5
 800f33c:	693a      	ldr	r2, [r7, #16]
 800f33e:	8912      	ldrh	r2, [r2, #8]
 800f340:	4293      	cmp	r3, r2
 800f342:	d301      	bcc.n	800f348 <dir_sdi+0x5c>
 800f344:	2302      	movs	r3, #2
 800f346:	e056      	b.n	800f3f6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800f348:	693b      	ldr	r3, [r7, #16]
 800f34a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	61da      	str	r2, [r3, #28]
 800f350:	e02d      	b.n	800f3ae <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f352:	693b      	ldr	r3, [r7, #16]
 800f354:	895b      	ldrh	r3, [r3, #10]
 800f356:	461a      	mov	r2, r3
 800f358:	693b      	ldr	r3, [r7, #16]
 800f35a:	899b      	ldrh	r3, [r3, #12]
 800f35c:	fb03 f302 	mul.w	r3, r3, r2
 800f360:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f362:	e019      	b.n	800f398 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	6979      	ldr	r1, [r7, #20]
 800f368:	4618      	mov	r0, r3
 800f36a:	f7ff fc9a 	bl	800eca2 <get_fat>
 800f36e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f370:	697b      	ldr	r3, [r7, #20]
 800f372:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f376:	d101      	bne.n	800f37c <dir_sdi+0x90>
 800f378:	2301      	movs	r3, #1
 800f37a:	e03c      	b.n	800f3f6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	2b01      	cmp	r3, #1
 800f380:	d904      	bls.n	800f38c <dir_sdi+0xa0>
 800f382:	693b      	ldr	r3, [r7, #16]
 800f384:	6a1b      	ldr	r3, [r3, #32]
 800f386:	697a      	ldr	r2, [r7, #20]
 800f388:	429a      	cmp	r2, r3
 800f38a:	d301      	bcc.n	800f390 <dir_sdi+0xa4>
 800f38c:	2302      	movs	r3, #2
 800f38e:	e032      	b.n	800f3f6 <dir_sdi+0x10a>
			ofs -= csz;
 800f390:	683a      	ldr	r2, [r7, #0]
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	1ad3      	subs	r3, r2, r3
 800f396:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f398:	683a      	ldr	r2, [r7, #0]
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	429a      	cmp	r2, r3
 800f39e:	d2e1      	bcs.n	800f364 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800f3a0:	6979      	ldr	r1, [r7, #20]
 800f3a2:	6938      	ldr	r0, [r7, #16]
 800f3a4:	f7ff fc5e 	bl	800ec64 <clust2sect>
 800f3a8:	4602      	mov	r2, r0
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f3ae:	687b      	ldr	r3, [r7, #4]
 800f3b0:	697a      	ldr	r2, [r7, #20]
 800f3b2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	69db      	ldr	r3, [r3, #28]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d101      	bne.n	800f3c0 <dir_sdi+0xd4>
 800f3bc:	2302      	movs	r3, #2
 800f3be:	e01a      	b.n	800f3f6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	69da      	ldr	r2, [r3, #28]
 800f3c4:	693b      	ldr	r3, [r7, #16]
 800f3c6:	899b      	ldrh	r3, [r3, #12]
 800f3c8:	4619      	mov	r1, r3
 800f3ca:	683b      	ldr	r3, [r7, #0]
 800f3cc:	fbb3 f3f1 	udiv	r3, r3, r1
 800f3d0:	441a      	add	r2, r3
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f3d6:	693b      	ldr	r3, [r7, #16]
 800f3d8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f3dc:	693b      	ldr	r3, [r7, #16]
 800f3de:	899b      	ldrh	r3, [r3, #12]
 800f3e0:	461a      	mov	r2, r3
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	fbb3 f0f2 	udiv	r0, r3, r2
 800f3e8:	fb02 f200 	mul.w	r2, r2, r0
 800f3ec:	1a9b      	subs	r3, r3, r2
 800f3ee:	18ca      	adds	r2, r1, r3
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f3f4:	2300      	movs	r3, #0
}
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	3718      	adds	r7, #24
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bd80      	pop	{r7, pc}

0800f3fe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f3fe:	b580      	push	{r7, lr}
 800f400:	b086      	sub	sp, #24
 800f402:	af00      	add	r7, sp, #0
 800f404:	6078      	str	r0, [r7, #4]
 800f406:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	695b      	ldr	r3, [r3, #20]
 800f412:	3320      	adds	r3, #32
 800f414:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	69db      	ldr	r3, [r3, #28]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d003      	beq.n	800f426 <dir_next+0x28>
 800f41e:	68bb      	ldr	r3, [r7, #8]
 800f420:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f424:	d301      	bcc.n	800f42a <dir_next+0x2c>
 800f426:	2304      	movs	r3, #4
 800f428:	e0bb      	b.n	800f5a2 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	899b      	ldrh	r3, [r3, #12]
 800f42e:	461a      	mov	r2, r3
 800f430:	68bb      	ldr	r3, [r7, #8]
 800f432:	fbb3 f1f2 	udiv	r1, r3, r2
 800f436:	fb02 f201 	mul.w	r2, r2, r1
 800f43a:	1a9b      	subs	r3, r3, r2
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	f040 809d 	bne.w	800f57c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	69db      	ldr	r3, [r3, #28]
 800f446:	1c5a      	adds	r2, r3, #1
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	699b      	ldr	r3, [r3, #24]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d10b      	bne.n	800f46c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f454:	68bb      	ldr	r3, [r7, #8]
 800f456:	095b      	lsrs	r3, r3, #5
 800f458:	68fa      	ldr	r2, [r7, #12]
 800f45a:	8912      	ldrh	r2, [r2, #8]
 800f45c:	4293      	cmp	r3, r2
 800f45e:	f0c0 808d 	bcc.w	800f57c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	2200      	movs	r2, #0
 800f466:	61da      	str	r2, [r3, #28]
 800f468:	2304      	movs	r3, #4
 800f46a:	e09a      	b.n	800f5a2 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	899b      	ldrh	r3, [r3, #12]
 800f470:	461a      	mov	r2, r3
 800f472:	68bb      	ldr	r3, [r7, #8]
 800f474:	fbb3 f3f2 	udiv	r3, r3, r2
 800f478:	68fa      	ldr	r2, [r7, #12]
 800f47a:	8952      	ldrh	r2, [r2, #10]
 800f47c:	3a01      	subs	r2, #1
 800f47e:	4013      	ands	r3, r2
 800f480:	2b00      	cmp	r3, #0
 800f482:	d17b      	bne.n	800f57c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f484:	687a      	ldr	r2, [r7, #4]
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	699b      	ldr	r3, [r3, #24]
 800f48a:	4619      	mov	r1, r3
 800f48c:	4610      	mov	r0, r2
 800f48e:	f7ff fc08 	bl	800eca2 <get_fat>
 800f492:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	2b01      	cmp	r3, #1
 800f498:	d801      	bhi.n	800f49e <dir_next+0xa0>
 800f49a:	2302      	movs	r3, #2
 800f49c:	e081      	b.n	800f5a2 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f4a4:	d101      	bne.n	800f4aa <dir_next+0xac>
 800f4a6:	2301      	movs	r3, #1
 800f4a8:	e07b      	b.n	800f5a2 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	6a1b      	ldr	r3, [r3, #32]
 800f4ae:	697a      	ldr	r2, [r7, #20]
 800f4b0:	429a      	cmp	r2, r3
 800f4b2:	d359      	bcc.n	800f568 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f4b4:	683b      	ldr	r3, [r7, #0]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d104      	bne.n	800f4c4 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2200      	movs	r2, #0
 800f4be:	61da      	str	r2, [r3, #28]
 800f4c0:	2304      	movs	r3, #4
 800f4c2:	e06e      	b.n	800f5a2 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f4c4:	687a      	ldr	r2, [r7, #4]
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	699b      	ldr	r3, [r3, #24]
 800f4ca:	4619      	mov	r1, r3
 800f4cc:	4610      	mov	r0, r2
 800f4ce:	f7ff fe3d 	bl	800f14c <create_chain>
 800f4d2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f4d4:	697b      	ldr	r3, [r7, #20]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d101      	bne.n	800f4de <dir_next+0xe0>
 800f4da:	2307      	movs	r3, #7
 800f4dc:	e061      	b.n	800f5a2 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f4de:	697b      	ldr	r3, [r7, #20]
 800f4e0:	2b01      	cmp	r3, #1
 800f4e2:	d101      	bne.n	800f4e8 <dir_next+0xea>
 800f4e4:	2302      	movs	r3, #2
 800f4e6:	e05c      	b.n	800f5a2 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f4e8:	697b      	ldr	r3, [r7, #20]
 800f4ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f4ee:	d101      	bne.n	800f4f4 <dir_next+0xf6>
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	e056      	b.n	800f5a2 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f4f4:	68f8      	ldr	r0, [r7, #12]
 800f4f6:	f7ff fad3 	bl	800eaa0 <sync_window>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d001      	beq.n	800f504 <dir_next+0x106>
 800f500:	2301      	movs	r3, #1
 800f502:	e04e      	b.n	800f5a2 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f504:	68fb      	ldr	r3, [r7, #12]
 800f506:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	899b      	ldrh	r3, [r3, #12]
 800f50e:	461a      	mov	r2, r3
 800f510:	2100      	movs	r1, #0
 800f512:	f7ff f8ca 	bl	800e6aa <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f516:	2300      	movs	r3, #0
 800f518:	613b      	str	r3, [r7, #16]
 800f51a:	6979      	ldr	r1, [r7, #20]
 800f51c:	68f8      	ldr	r0, [r7, #12]
 800f51e:	f7ff fba1 	bl	800ec64 <clust2sect>
 800f522:	4602      	mov	r2, r0
 800f524:	68fb      	ldr	r3, [r7, #12]
 800f526:	639a      	str	r2, [r3, #56]	; 0x38
 800f528:	e012      	b.n	800f550 <dir_next+0x152>
						fs->wflag = 1;
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	2201      	movs	r2, #1
 800f52e:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f530:	68f8      	ldr	r0, [r7, #12]
 800f532:	f7ff fab5 	bl	800eaa0 <sync_window>
 800f536:	4603      	mov	r3, r0
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d001      	beq.n	800f540 <dir_next+0x142>
 800f53c:	2301      	movs	r3, #1
 800f53e:	e030      	b.n	800f5a2 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f540:	693b      	ldr	r3, [r7, #16]
 800f542:	3301      	adds	r3, #1
 800f544:	613b      	str	r3, [r7, #16]
 800f546:	68fb      	ldr	r3, [r7, #12]
 800f548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f54a:	1c5a      	adds	r2, r3, #1
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	639a      	str	r2, [r3, #56]	; 0x38
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	895b      	ldrh	r3, [r3, #10]
 800f554:	461a      	mov	r2, r3
 800f556:	693b      	ldr	r3, [r7, #16]
 800f558:	4293      	cmp	r3, r2
 800f55a:	d3e6      	bcc.n	800f52a <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f560:	693b      	ldr	r3, [r7, #16]
 800f562:	1ad2      	subs	r2, r2, r3
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	697a      	ldr	r2, [r7, #20]
 800f56c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f56e:	6979      	ldr	r1, [r7, #20]
 800f570:	68f8      	ldr	r0, [r7, #12]
 800f572:	f7ff fb77 	bl	800ec64 <clust2sect>
 800f576:	4602      	mov	r2, r0
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	68ba      	ldr	r2, [r7, #8]
 800f580:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	899b      	ldrh	r3, [r3, #12]
 800f58c:	461a      	mov	r2, r3
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	fbb3 f0f2 	udiv	r0, r3, r2
 800f594:	fb02 f200 	mul.w	r2, r2, r0
 800f598:	1a9b      	subs	r3, r3, r2
 800f59a:	18ca      	adds	r2, r1, r3
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f5a0:	2300      	movs	r3, #0
}
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	3718      	adds	r7, #24
 800f5a6:	46bd      	mov	sp, r7
 800f5a8:	bd80      	pop	{r7, pc}

0800f5aa <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f5aa:	b580      	push	{r7, lr}
 800f5ac:	b086      	sub	sp, #24
 800f5ae:	af00      	add	r7, sp, #0
 800f5b0:	6078      	str	r0, [r7, #4]
 800f5b2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f5ba:	2100      	movs	r1, #0
 800f5bc:	6878      	ldr	r0, [r7, #4]
 800f5be:	f7ff fe95 	bl	800f2ec <dir_sdi>
 800f5c2:	4603      	mov	r3, r0
 800f5c4:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f5c6:	7dfb      	ldrb	r3, [r7, #23]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d12b      	bne.n	800f624 <dir_alloc+0x7a>
		n = 0;
 800f5cc:	2300      	movs	r3, #0
 800f5ce:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	69db      	ldr	r3, [r3, #28]
 800f5d4:	4619      	mov	r1, r3
 800f5d6:	68f8      	ldr	r0, [r7, #12]
 800f5d8:	f7ff faa6 	bl	800eb28 <move_window>
 800f5dc:	4603      	mov	r3, r0
 800f5de:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f5e0:	7dfb      	ldrb	r3, [r7, #23]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d11d      	bne.n	800f622 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	6a1b      	ldr	r3, [r3, #32]
 800f5ea:	781b      	ldrb	r3, [r3, #0]
 800f5ec:	2be5      	cmp	r3, #229	; 0xe5
 800f5ee:	d004      	beq.n	800f5fa <dir_alloc+0x50>
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	6a1b      	ldr	r3, [r3, #32]
 800f5f4:	781b      	ldrb	r3, [r3, #0]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d107      	bne.n	800f60a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f5fa:	693b      	ldr	r3, [r7, #16]
 800f5fc:	3301      	adds	r3, #1
 800f5fe:	613b      	str	r3, [r7, #16]
 800f600:	693a      	ldr	r2, [r7, #16]
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	429a      	cmp	r2, r3
 800f606:	d102      	bne.n	800f60e <dir_alloc+0x64>
 800f608:	e00c      	b.n	800f624 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f60a:	2300      	movs	r3, #0
 800f60c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f60e:	2101      	movs	r1, #1
 800f610:	6878      	ldr	r0, [r7, #4]
 800f612:	f7ff fef4 	bl	800f3fe <dir_next>
 800f616:	4603      	mov	r3, r0
 800f618:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f61a:	7dfb      	ldrb	r3, [r7, #23]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d0d7      	beq.n	800f5d0 <dir_alloc+0x26>
 800f620:	e000      	b.n	800f624 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f622:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f624:	7dfb      	ldrb	r3, [r7, #23]
 800f626:	2b04      	cmp	r3, #4
 800f628:	d101      	bne.n	800f62e <dir_alloc+0x84>
 800f62a:	2307      	movs	r3, #7
 800f62c:	75fb      	strb	r3, [r7, #23]
	return res;
 800f62e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f630:	4618      	mov	r0, r3
 800f632:	3718      	adds	r7, #24
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}

0800f638 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f638:	b580      	push	{r7, lr}
 800f63a:	b084      	sub	sp, #16
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
 800f640:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	331a      	adds	r3, #26
 800f646:	4618      	mov	r0, r3
 800f648:	f7fe ff8c 	bl	800e564 <ld_word>
 800f64c:	4603      	mov	r3, r0
 800f64e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	781b      	ldrb	r3, [r3, #0]
 800f654:	2b03      	cmp	r3, #3
 800f656:	d109      	bne.n	800f66c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f658:	683b      	ldr	r3, [r7, #0]
 800f65a:	3314      	adds	r3, #20
 800f65c:	4618      	mov	r0, r3
 800f65e:	f7fe ff81 	bl	800e564 <ld_word>
 800f662:	4603      	mov	r3, r0
 800f664:	041b      	lsls	r3, r3, #16
 800f666:	68fa      	ldr	r2, [r7, #12]
 800f668:	4313      	orrs	r3, r2
 800f66a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f66c:	68fb      	ldr	r3, [r7, #12]
}
 800f66e:	4618      	mov	r0, r3
 800f670:	3710      	adds	r7, #16
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}

0800f676 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f676:	b580      	push	{r7, lr}
 800f678:	b084      	sub	sp, #16
 800f67a:	af00      	add	r7, sp, #0
 800f67c:	60f8      	str	r0, [r7, #12]
 800f67e:	60b9      	str	r1, [r7, #8]
 800f680:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f682:	68bb      	ldr	r3, [r7, #8]
 800f684:	331a      	adds	r3, #26
 800f686:	687a      	ldr	r2, [r7, #4]
 800f688:	b292      	uxth	r2, r2
 800f68a:	4611      	mov	r1, r2
 800f68c:	4618      	mov	r0, r3
 800f68e:	f7fe ffa4 	bl	800e5da <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	781b      	ldrb	r3, [r3, #0]
 800f696:	2b03      	cmp	r3, #3
 800f698:	d109      	bne.n	800f6ae <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f69a:	68bb      	ldr	r3, [r7, #8]
 800f69c:	f103 0214 	add.w	r2, r3, #20
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	0c1b      	lsrs	r3, r3, #16
 800f6a4:	b29b      	uxth	r3, r3
 800f6a6:	4619      	mov	r1, r3
 800f6a8:	4610      	mov	r0, r2
 800f6aa:	f7fe ff96 	bl	800e5da <st_word>
	}
}
 800f6ae:	bf00      	nop
 800f6b0:	3710      	adds	r7, #16
 800f6b2:	46bd      	mov	sp, r7
 800f6b4:	bd80      	pop	{r7, pc}
	...

0800f6b8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800f6b8:	b590      	push	{r4, r7, lr}
 800f6ba:	b087      	sub	sp, #28
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
 800f6c0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	331a      	adds	r3, #26
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f7fe ff4c 	bl	800e564 <ld_word>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d001      	beq.n	800f6d6 <cmp_lfn+0x1e>
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	e059      	b.n	800f78a <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800f6d6:	683b      	ldr	r3, [r7, #0]
 800f6d8:	781b      	ldrb	r3, [r3, #0]
 800f6da:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f6de:	1e5a      	subs	r2, r3, #1
 800f6e0:	4613      	mov	r3, r2
 800f6e2:	005b      	lsls	r3, r3, #1
 800f6e4:	4413      	add	r3, r2
 800f6e6:	009b      	lsls	r3, r3, #2
 800f6e8:	4413      	add	r3, r2
 800f6ea:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	81fb      	strh	r3, [r7, #14]
 800f6f0:	2300      	movs	r3, #0
 800f6f2:	613b      	str	r3, [r7, #16]
 800f6f4:	e033      	b.n	800f75e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800f6f6:	4a27      	ldr	r2, [pc, #156]	; (800f794 <cmp_lfn+0xdc>)
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	4413      	add	r3, r2
 800f6fc:	781b      	ldrb	r3, [r3, #0]
 800f6fe:	461a      	mov	r2, r3
 800f700:	683b      	ldr	r3, [r7, #0]
 800f702:	4413      	add	r3, r2
 800f704:	4618      	mov	r0, r3
 800f706:	f7fe ff2d 	bl	800e564 <ld_word>
 800f70a:	4603      	mov	r3, r0
 800f70c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800f70e:	89fb      	ldrh	r3, [r7, #14]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d01a      	beq.n	800f74a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800f714:	697b      	ldr	r3, [r7, #20]
 800f716:	2bfe      	cmp	r3, #254	; 0xfe
 800f718:	d812      	bhi.n	800f740 <cmp_lfn+0x88>
 800f71a:	89bb      	ldrh	r3, [r7, #12]
 800f71c:	4618      	mov	r0, r3
 800f71e:	f002 f909 	bl	8011934 <ff_wtoupper>
 800f722:	4603      	mov	r3, r0
 800f724:	461c      	mov	r4, r3
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	1c5a      	adds	r2, r3, #1
 800f72a:	617a      	str	r2, [r7, #20]
 800f72c:	005b      	lsls	r3, r3, #1
 800f72e:	687a      	ldr	r2, [r7, #4]
 800f730:	4413      	add	r3, r2
 800f732:	881b      	ldrh	r3, [r3, #0]
 800f734:	4618      	mov	r0, r3
 800f736:	f002 f8fd 	bl	8011934 <ff_wtoupper>
 800f73a:	4603      	mov	r3, r0
 800f73c:	429c      	cmp	r4, r3
 800f73e:	d001      	beq.n	800f744 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800f740:	2300      	movs	r3, #0
 800f742:	e022      	b.n	800f78a <cmp_lfn+0xd2>
			}
			wc = uc;
 800f744:	89bb      	ldrh	r3, [r7, #12]
 800f746:	81fb      	strh	r3, [r7, #14]
 800f748:	e006      	b.n	800f758 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f74a:	89bb      	ldrh	r3, [r7, #12]
 800f74c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f750:	4293      	cmp	r3, r2
 800f752:	d001      	beq.n	800f758 <cmp_lfn+0xa0>
 800f754:	2300      	movs	r3, #0
 800f756:	e018      	b.n	800f78a <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f758:	693b      	ldr	r3, [r7, #16]
 800f75a:	3301      	adds	r3, #1
 800f75c:	613b      	str	r3, [r7, #16]
 800f75e:	693b      	ldr	r3, [r7, #16]
 800f760:	2b0c      	cmp	r3, #12
 800f762:	d9c8      	bls.n	800f6f6 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	781b      	ldrb	r3, [r3, #0]
 800f768:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d00b      	beq.n	800f788 <cmp_lfn+0xd0>
 800f770:	89fb      	ldrh	r3, [r7, #14]
 800f772:	2b00      	cmp	r3, #0
 800f774:	d008      	beq.n	800f788 <cmp_lfn+0xd0>
 800f776:	697b      	ldr	r3, [r7, #20]
 800f778:	005b      	lsls	r3, r3, #1
 800f77a:	687a      	ldr	r2, [r7, #4]
 800f77c:	4413      	add	r3, r2
 800f77e:	881b      	ldrh	r3, [r3, #0]
 800f780:	2b00      	cmp	r3, #0
 800f782:	d001      	beq.n	800f788 <cmp_lfn+0xd0>
 800f784:	2300      	movs	r3, #0
 800f786:	e000      	b.n	800f78a <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800f788:	2301      	movs	r3, #1
}
 800f78a:	4618      	mov	r0, r3
 800f78c:	371c      	adds	r7, #28
 800f78e:	46bd      	mov	sp, r7
 800f790:	bd90      	pop	{r4, r7, pc}
 800f792:	bf00      	nop
 800f794:	08019ef0 	.word	0x08019ef0

0800f798 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b088      	sub	sp, #32
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	60f8      	str	r0, [r7, #12]
 800f7a0:	60b9      	str	r1, [r7, #8]
 800f7a2:	4611      	mov	r1, r2
 800f7a4:	461a      	mov	r2, r3
 800f7a6:	460b      	mov	r3, r1
 800f7a8:	71fb      	strb	r3, [r7, #7]
 800f7aa:	4613      	mov	r3, r2
 800f7ac:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800f7ae:	68bb      	ldr	r3, [r7, #8]
 800f7b0:	330d      	adds	r3, #13
 800f7b2:	79ba      	ldrb	r2, [r7, #6]
 800f7b4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800f7b6:	68bb      	ldr	r3, [r7, #8]
 800f7b8:	330b      	adds	r3, #11
 800f7ba:	220f      	movs	r2, #15
 800f7bc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	330c      	adds	r3, #12
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800f7c6:	68bb      	ldr	r3, [r7, #8]
 800f7c8:	331a      	adds	r3, #26
 800f7ca:	2100      	movs	r1, #0
 800f7cc:	4618      	mov	r0, r3
 800f7ce:	f7fe ff04 	bl	800e5da <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800f7d2:	79fb      	ldrb	r3, [r7, #7]
 800f7d4:	1e5a      	subs	r2, r3, #1
 800f7d6:	4613      	mov	r3, r2
 800f7d8:	005b      	lsls	r3, r3, #1
 800f7da:	4413      	add	r3, r2
 800f7dc:	009b      	lsls	r3, r3, #2
 800f7de:	4413      	add	r3, r2
 800f7e0:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	82fb      	strh	r3, [r7, #22]
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f7ea:	8afb      	ldrh	r3, [r7, #22]
 800f7ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f7f0:	4293      	cmp	r3, r2
 800f7f2:	d007      	beq.n	800f804 <put_lfn+0x6c>
 800f7f4:	69fb      	ldr	r3, [r7, #28]
 800f7f6:	1c5a      	adds	r2, r3, #1
 800f7f8:	61fa      	str	r2, [r7, #28]
 800f7fa:	005b      	lsls	r3, r3, #1
 800f7fc:	68fa      	ldr	r2, [r7, #12]
 800f7fe:	4413      	add	r3, r2
 800f800:	881b      	ldrh	r3, [r3, #0]
 800f802:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800f804:	4a17      	ldr	r2, [pc, #92]	; (800f864 <put_lfn+0xcc>)
 800f806:	69bb      	ldr	r3, [r7, #24]
 800f808:	4413      	add	r3, r2
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	461a      	mov	r2, r3
 800f80e:	68bb      	ldr	r3, [r7, #8]
 800f810:	4413      	add	r3, r2
 800f812:	8afa      	ldrh	r2, [r7, #22]
 800f814:	4611      	mov	r1, r2
 800f816:	4618      	mov	r0, r3
 800f818:	f7fe fedf 	bl	800e5da <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800f81c:	8afb      	ldrh	r3, [r7, #22]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d102      	bne.n	800f828 <put_lfn+0x90>
 800f822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f826:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800f828:	69bb      	ldr	r3, [r7, #24]
 800f82a:	3301      	adds	r3, #1
 800f82c:	61bb      	str	r3, [r7, #24]
 800f82e:	69bb      	ldr	r3, [r7, #24]
 800f830:	2b0c      	cmp	r3, #12
 800f832:	d9da      	bls.n	800f7ea <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800f834:	8afb      	ldrh	r3, [r7, #22]
 800f836:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f83a:	4293      	cmp	r3, r2
 800f83c:	d006      	beq.n	800f84c <put_lfn+0xb4>
 800f83e:	69fb      	ldr	r3, [r7, #28]
 800f840:	005b      	lsls	r3, r3, #1
 800f842:	68fa      	ldr	r2, [r7, #12]
 800f844:	4413      	add	r3, r2
 800f846:	881b      	ldrh	r3, [r3, #0]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d103      	bne.n	800f854 <put_lfn+0xbc>
 800f84c:	79fb      	ldrb	r3, [r7, #7]
 800f84e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f852:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800f854:	68bb      	ldr	r3, [r7, #8]
 800f856:	79fa      	ldrb	r2, [r7, #7]
 800f858:	701a      	strb	r2, [r3, #0]
}
 800f85a:	bf00      	nop
 800f85c:	3720      	adds	r7, #32
 800f85e:	46bd      	mov	sp, r7
 800f860:	bd80      	pop	{r7, pc}
 800f862:	bf00      	nop
 800f864:	08019ef0 	.word	0x08019ef0

0800f868 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800f868:	b580      	push	{r7, lr}
 800f86a:	b08c      	sub	sp, #48	; 0x30
 800f86c:	af00      	add	r7, sp, #0
 800f86e:	60f8      	str	r0, [r7, #12]
 800f870:	60b9      	str	r1, [r7, #8]
 800f872:	607a      	str	r2, [r7, #4]
 800f874:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800f876:	220b      	movs	r2, #11
 800f878:	68b9      	ldr	r1, [r7, #8]
 800f87a:	68f8      	ldr	r0, [r7, #12]
 800f87c:	f7fe fef4 	bl	800e668 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800f880:	683b      	ldr	r3, [r7, #0]
 800f882:	2b05      	cmp	r3, #5
 800f884:	d92b      	bls.n	800f8de <gen_numname+0x76>
		sr = seq;
 800f886:	683b      	ldr	r3, [r7, #0]
 800f888:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800f88a:	e022      	b.n	800f8d2 <gen_numname+0x6a>
			wc = *lfn++;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	1c9a      	adds	r2, r3, #2
 800f890:	607a      	str	r2, [r7, #4]
 800f892:	881b      	ldrh	r3, [r3, #0]
 800f894:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800f896:	2300      	movs	r3, #0
 800f898:	62bb      	str	r3, [r7, #40]	; 0x28
 800f89a:	e017      	b.n	800f8cc <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800f89c:	69fb      	ldr	r3, [r7, #28]
 800f89e:	005a      	lsls	r2, r3, #1
 800f8a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f8a2:	f003 0301 	and.w	r3, r3, #1
 800f8a6:	4413      	add	r3, r2
 800f8a8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800f8aa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f8ac:	085b      	lsrs	r3, r3, #1
 800f8ae:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800f8b0:	69fb      	ldr	r3, [r7, #28]
 800f8b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d005      	beq.n	800f8c6 <gen_numname+0x5e>
 800f8ba:	69fb      	ldr	r3, [r7, #28]
 800f8bc:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800f8c0:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800f8c4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800f8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c8:	3301      	adds	r3, #1
 800f8ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800f8cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ce:	2b0f      	cmp	r3, #15
 800f8d0:	d9e4      	bls.n	800f89c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	881b      	ldrh	r3, [r3, #0]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d1d8      	bne.n	800f88c <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800f8da:	69fb      	ldr	r3, [r7, #28]
 800f8dc:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800f8de:	2307      	movs	r3, #7
 800f8e0:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800f8e2:	683b      	ldr	r3, [r7, #0]
 800f8e4:	b2db      	uxtb	r3, r3
 800f8e6:	f003 030f 	and.w	r3, r3, #15
 800f8ea:	b2db      	uxtb	r3, r3
 800f8ec:	3330      	adds	r3, #48	; 0x30
 800f8ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800f8f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f8f6:	2b39      	cmp	r3, #57	; 0x39
 800f8f8:	d904      	bls.n	800f904 <gen_numname+0x9c>
 800f8fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f8fe:	3307      	adds	r3, #7
 800f900:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800f904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f906:	1e5a      	subs	r2, r3, #1
 800f908:	62ba      	str	r2, [r7, #40]	; 0x28
 800f90a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f90e:	4413      	add	r3, r2
 800f910:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f914:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800f918:	683b      	ldr	r3, [r7, #0]
 800f91a:	091b      	lsrs	r3, r3, #4
 800f91c:	603b      	str	r3, [r7, #0]
	} while (seq);
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	2b00      	cmp	r3, #0
 800f922:	d1de      	bne.n	800f8e2 <gen_numname+0x7a>
	ns[i] = '~';
 800f924:	f107 0214 	add.w	r2, r7, #20
 800f928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f92a:	4413      	add	r3, r2
 800f92c:	227e      	movs	r2, #126	; 0x7e
 800f92e:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800f930:	2300      	movs	r3, #0
 800f932:	627b      	str	r3, [r7, #36]	; 0x24
 800f934:	e002      	b.n	800f93c <gen_numname+0xd4>
 800f936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f938:	3301      	adds	r3, #1
 800f93a:	627b      	str	r3, [r7, #36]	; 0x24
 800f93c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f940:	429a      	cmp	r2, r3
 800f942:	d205      	bcs.n	800f950 <gen_numname+0xe8>
 800f944:	68fa      	ldr	r2, [r7, #12]
 800f946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f948:	4413      	add	r3, r2
 800f94a:	781b      	ldrb	r3, [r3, #0]
 800f94c:	2b20      	cmp	r3, #32
 800f94e:	d1f2      	bne.n	800f936 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800f950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f952:	2b07      	cmp	r3, #7
 800f954:	d808      	bhi.n	800f968 <gen_numname+0x100>
 800f956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f958:	1c5a      	adds	r2, r3, #1
 800f95a:	62ba      	str	r2, [r7, #40]	; 0x28
 800f95c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800f960:	4413      	add	r3, r2
 800f962:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800f966:	e000      	b.n	800f96a <gen_numname+0x102>
 800f968:	2120      	movs	r1, #32
 800f96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f96c:	1c5a      	adds	r2, r3, #1
 800f96e:	627a      	str	r2, [r7, #36]	; 0x24
 800f970:	68fa      	ldr	r2, [r7, #12]
 800f972:	4413      	add	r3, r2
 800f974:	460a      	mov	r2, r1
 800f976:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f97a:	2b07      	cmp	r3, #7
 800f97c:	d9e8      	bls.n	800f950 <gen_numname+0xe8>
}
 800f97e:	bf00      	nop
 800f980:	bf00      	nop
 800f982:	3730      	adds	r7, #48	; 0x30
 800f984:	46bd      	mov	sp, r7
 800f986:	bd80      	pop	{r7, pc}

0800f988 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f988:	b480      	push	{r7}
 800f98a:	b085      	sub	sp, #20
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f990:	2300      	movs	r3, #0
 800f992:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f994:	230b      	movs	r3, #11
 800f996:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f998:	7bfb      	ldrb	r3, [r7, #15]
 800f99a:	b2da      	uxtb	r2, r3
 800f99c:	0852      	lsrs	r2, r2, #1
 800f99e:	01db      	lsls	r3, r3, #7
 800f9a0:	4313      	orrs	r3, r2
 800f9a2:	b2da      	uxtb	r2, r3
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	1c59      	adds	r1, r3, #1
 800f9a8:	6079      	str	r1, [r7, #4]
 800f9aa:	781b      	ldrb	r3, [r3, #0]
 800f9ac:	4413      	add	r3, r2
 800f9ae:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	3b01      	subs	r3, #1
 800f9b4:	60bb      	str	r3, [r7, #8]
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d1ed      	bne.n	800f998 <sum_sfn+0x10>
	return sum;
 800f9bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9be:	4618      	mov	r0, r3
 800f9c0:	3714      	adds	r7, #20
 800f9c2:	46bd      	mov	sp, r7
 800f9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9c8:	4770      	bx	lr

0800f9ca <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f9ca:	b580      	push	{r7, lr}
 800f9cc:	b086      	sub	sp, #24
 800f9ce:	af00      	add	r7, sp, #0
 800f9d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f9d8:	2100      	movs	r1, #0
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f7ff fc86 	bl	800f2ec <dir_sdi>
 800f9e0:	4603      	mov	r3, r0
 800f9e2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f9e4:	7dfb      	ldrb	r3, [r7, #23]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d001      	beq.n	800f9ee <dir_find+0x24>
 800f9ea:	7dfb      	ldrb	r3, [r7, #23]
 800f9ec:	e0a9      	b.n	800fb42 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f9ee:	23ff      	movs	r3, #255	; 0xff
 800f9f0:	753b      	strb	r3, [r7, #20]
 800f9f2:	7d3b      	ldrb	r3, [r7, #20]
 800f9f4:	757b      	strb	r3, [r7, #21]
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f9fc:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	69db      	ldr	r3, [r3, #28]
 800fa02:	4619      	mov	r1, r3
 800fa04:	6938      	ldr	r0, [r7, #16]
 800fa06:	f7ff f88f 	bl	800eb28 <move_window>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800fa0e:	7dfb      	ldrb	r3, [r7, #23]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	f040 8090 	bne.w	800fb36 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	6a1b      	ldr	r3, [r3, #32]
 800fa1a:	781b      	ldrb	r3, [r3, #0]
 800fa1c:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800fa1e:	7dbb      	ldrb	r3, [r7, #22]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d102      	bne.n	800fa2a <dir_find+0x60>
 800fa24:	2304      	movs	r3, #4
 800fa26:	75fb      	strb	r3, [r7, #23]
 800fa28:	e08a      	b.n	800fb40 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	6a1b      	ldr	r3, [r3, #32]
 800fa2e:	330b      	adds	r3, #11
 800fa30:	781b      	ldrb	r3, [r3, #0]
 800fa32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa36:	73fb      	strb	r3, [r7, #15]
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	7bfa      	ldrb	r2, [r7, #15]
 800fa3c:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800fa3e:	7dbb      	ldrb	r3, [r7, #22]
 800fa40:	2be5      	cmp	r3, #229	; 0xe5
 800fa42:	d007      	beq.n	800fa54 <dir_find+0x8a>
 800fa44:	7bfb      	ldrb	r3, [r7, #15]
 800fa46:	f003 0308 	and.w	r3, r3, #8
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	d009      	beq.n	800fa62 <dir_find+0x98>
 800fa4e:	7bfb      	ldrb	r3, [r7, #15]
 800fa50:	2b0f      	cmp	r3, #15
 800fa52:	d006      	beq.n	800fa62 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800fa54:	23ff      	movs	r3, #255	; 0xff
 800fa56:	757b      	strb	r3, [r7, #21]
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fa5e:	631a      	str	r2, [r3, #48]	; 0x30
 800fa60:	e05e      	b.n	800fb20 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800fa62:	7bfb      	ldrb	r3, [r7, #15]
 800fa64:	2b0f      	cmp	r3, #15
 800fa66:	d136      	bne.n	800fad6 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fa6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d154      	bne.n	800fb20 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800fa76:	7dbb      	ldrb	r3, [r7, #22]
 800fa78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d00d      	beq.n	800fa9c <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	6a1b      	ldr	r3, [r3, #32]
 800fa84:	7b5b      	ldrb	r3, [r3, #13]
 800fa86:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800fa88:	7dbb      	ldrb	r3, [r7, #22]
 800fa8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fa8e:	75bb      	strb	r3, [r7, #22]
 800fa90:	7dbb      	ldrb	r3, [r7, #22]
 800fa92:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	695a      	ldr	r2, [r3, #20]
 800fa98:	687b      	ldr	r3, [r7, #4]
 800fa9a:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800fa9c:	7dba      	ldrb	r2, [r7, #22]
 800fa9e:	7d7b      	ldrb	r3, [r7, #21]
 800faa0:	429a      	cmp	r2, r3
 800faa2:	d115      	bne.n	800fad0 <dir_find+0x106>
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	6a1b      	ldr	r3, [r3, #32]
 800faa8:	330d      	adds	r3, #13
 800faaa:	781b      	ldrb	r3, [r3, #0]
 800faac:	7d3a      	ldrb	r2, [r7, #20]
 800faae:	429a      	cmp	r2, r3
 800fab0:	d10e      	bne.n	800fad0 <dir_find+0x106>
 800fab2:	693b      	ldr	r3, [r7, #16]
 800fab4:	691a      	ldr	r2, [r3, #16]
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	6a1b      	ldr	r3, [r3, #32]
 800faba:	4619      	mov	r1, r3
 800fabc:	4610      	mov	r0, r2
 800fabe:	f7ff fdfb 	bl	800f6b8 <cmp_lfn>
 800fac2:	4603      	mov	r3, r0
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d003      	beq.n	800fad0 <dir_find+0x106>
 800fac8:	7d7b      	ldrb	r3, [r7, #21]
 800faca:	3b01      	subs	r3, #1
 800facc:	b2db      	uxtb	r3, r3
 800face:	e000      	b.n	800fad2 <dir_find+0x108>
 800fad0:	23ff      	movs	r3, #255	; 0xff
 800fad2:	757b      	strb	r3, [r7, #21]
 800fad4:	e024      	b.n	800fb20 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800fad6:	7d7b      	ldrb	r3, [r7, #21]
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d109      	bne.n	800faf0 <dir_find+0x126>
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	6a1b      	ldr	r3, [r3, #32]
 800fae0:	4618      	mov	r0, r3
 800fae2:	f7ff ff51 	bl	800f988 <sum_sfn>
 800fae6:	4603      	mov	r3, r0
 800fae8:	461a      	mov	r2, r3
 800faea:	7d3b      	ldrb	r3, [r7, #20]
 800faec:	4293      	cmp	r3, r2
 800faee:	d024      	beq.n	800fb3a <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800faf6:	f003 0301 	and.w	r3, r3, #1
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d10a      	bne.n	800fb14 <dir_find+0x14a>
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6a18      	ldr	r0, [r3, #32]
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	3324      	adds	r3, #36	; 0x24
 800fb06:	220b      	movs	r2, #11
 800fb08:	4619      	mov	r1, r3
 800fb0a:	f7fe fde9 	bl	800e6e0 <mem_cmp>
 800fb0e:	4603      	mov	r3, r0
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d014      	beq.n	800fb3e <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800fb14:	23ff      	movs	r3, #255	; 0xff
 800fb16:	757b      	strb	r3, [r7, #21]
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fb1e:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800fb20:	2100      	movs	r1, #0
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f7ff fc6b 	bl	800f3fe <dir_next>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800fb2c:	7dfb      	ldrb	r3, [r7, #23]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	f43f af65 	beq.w	800f9fe <dir_find+0x34>
 800fb34:	e004      	b.n	800fb40 <dir_find+0x176>
		if (res != FR_OK) break;
 800fb36:	bf00      	nop
 800fb38:	e002      	b.n	800fb40 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800fb3a:	bf00      	nop
 800fb3c:	e000      	b.n	800fb40 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800fb3e:	bf00      	nop

	return res;
 800fb40:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb42:	4618      	mov	r0, r3
 800fb44:	3718      	adds	r7, #24
 800fb46:	46bd      	mov	sp, r7
 800fb48:	bd80      	pop	{r7, pc}
	...

0800fb4c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800fb4c:	b580      	push	{r7, lr}
 800fb4e:	b08c      	sub	sp, #48	; 0x30
 800fb50:	af00      	add	r7, sp, #0
 800fb52:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	681b      	ldr	r3, [r3, #0]
 800fb58:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fb60:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800fb64:	2b00      	cmp	r3, #0
 800fb66:	d001      	beq.n	800fb6c <dir_register+0x20>
 800fb68:	2306      	movs	r3, #6
 800fb6a:	e0e0      	b.n	800fd2e <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800fb6c:	2300      	movs	r3, #0
 800fb6e:	627b      	str	r3, [r7, #36]	; 0x24
 800fb70:	e002      	b.n	800fb78 <dir_register+0x2c>
 800fb72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb74:	3301      	adds	r3, #1
 800fb76:	627b      	str	r3, [r7, #36]	; 0x24
 800fb78:	69fb      	ldr	r3, [r7, #28]
 800fb7a:	691a      	ldr	r2, [r3, #16]
 800fb7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb7e:	005b      	lsls	r3, r3, #1
 800fb80:	4413      	add	r3, r2
 800fb82:	881b      	ldrh	r3, [r3, #0]
 800fb84:	2b00      	cmp	r3, #0
 800fb86:	d1f4      	bne.n	800fb72 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800fb8e:	f107 030c 	add.w	r3, r7, #12
 800fb92:	220c      	movs	r2, #12
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7fe fd67 	bl	800e668 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800fb9a:	7dfb      	ldrb	r3, [r7, #23]
 800fb9c:	f003 0301 	and.w	r3, r3, #1
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d032      	beq.n	800fc0a <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	2240      	movs	r2, #64	; 0x40
 800fba8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800fbac:	2301      	movs	r3, #1
 800fbae:	62bb      	str	r3, [r7, #40]	; 0x28
 800fbb0:	e016      	b.n	800fbe0 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800fbb8:	69fb      	ldr	r3, [r7, #28]
 800fbba:	691a      	ldr	r2, [r3, #16]
 800fbbc:	f107 010c 	add.w	r1, r7, #12
 800fbc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbc2:	f7ff fe51 	bl	800f868 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	f7ff feff 	bl	800f9ca <dir_find>
 800fbcc:	4603      	mov	r3, r0
 800fbce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800fbd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d106      	bne.n	800fbe8 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800fbda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbdc:	3301      	adds	r3, #1
 800fbde:	62bb      	str	r3, [r7, #40]	; 0x28
 800fbe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbe2:	2b63      	cmp	r3, #99	; 0x63
 800fbe4:	d9e5      	bls.n	800fbb2 <dir_register+0x66>
 800fbe6:	e000      	b.n	800fbea <dir_register+0x9e>
			if (res != FR_OK) break;
 800fbe8:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800fbea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fbec:	2b64      	cmp	r3, #100	; 0x64
 800fbee:	d101      	bne.n	800fbf4 <dir_register+0xa8>
 800fbf0:	2307      	movs	r3, #7
 800fbf2:	e09c      	b.n	800fd2e <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800fbf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fbf8:	2b04      	cmp	r3, #4
 800fbfa:	d002      	beq.n	800fc02 <dir_register+0xb6>
 800fbfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc00:	e095      	b.n	800fd2e <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800fc02:	7dfa      	ldrb	r2, [r7, #23]
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800fc0a:	7dfb      	ldrb	r3, [r7, #23]
 800fc0c:	f003 0302 	and.w	r3, r3, #2
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d007      	beq.n	800fc24 <dir_register+0xd8>
 800fc14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc16:	330c      	adds	r3, #12
 800fc18:	4a47      	ldr	r2, [pc, #284]	; (800fd38 <dir_register+0x1ec>)
 800fc1a:	fba2 2303 	umull	r2, r3, r2, r3
 800fc1e:	089b      	lsrs	r3, r3, #2
 800fc20:	3301      	adds	r3, #1
 800fc22:	e000      	b.n	800fc26 <dir_register+0xda>
 800fc24:	2301      	movs	r3, #1
 800fc26:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800fc28:	6a39      	ldr	r1, [r7, #32]
 800fc2a:	6878      	ldr	r0, [r7, #4]
 800fc2c:	f7ff fcbd 	bl	800f5aa <dir_alloc>
 800fc30:	4603      	mov	r3, r0
 800fc32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800fc36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d148      	bne.n	800fcd0 <dir_register+0x184>
 800fc3e:	6a3b      	ldr	r3, [r7, #32]
 800fc40:	3b01      	subs	r3, #1
 800fc42:	623b      	str	r3, [r7, #32]
 800fc44:	6a3b      	ldr	r3, [r7, #32]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d042      	beq.n	800fcd0 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	695a      	ldr	r2, [r3, #20]
 800fc4e:	6a3b      	ldr	r3, [r7, #32]
 800fc50:	015b      	lsls	r3, r3, #5
 800fc52:	1ad3      	subs	r3, r2, r3
 800fc54:	4619      	mov	r1, r3
 800fc56:	6878      	ldr	r0, [r7, #4]
 800fc58:	f7ff fb48 	bl	800f2ec <dir_sdi>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800fc62:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d132      	bne.n	800fcd0 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	3324      	adds	r3, #36	; 0x24
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7ff fe8a 	bl	800f988 <sum_sfn>
 800fc74:	4603      	mov	r3, r0
 800fc76:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800fc78:	687b      	ldr	r3, [r7, #4]
 800fc7a:	69db      	ldr	r3, [r3, #28]
 800fc7c:	4619      	mov	r1, r3
 800fc7e:	69f8      	ldr	r0, [r7, #28]
 800fc80:	f7fe ff52 	bl	800eb28 <move_window>
 800fc84:	4603      	mov	r3, r0
 800fc86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800fc8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d11d      	bne.n	800fcce <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800fc92:	69fb      	ldr	r3, [r7, #28]
 800fc94:	6918      	ldr	r0, [r3, #16]
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	6a19      	ldr	r1, [r3, #32]
 800fc9a:	6a3b      	ldr	r3, [r7, #32]
 800fc9c:	b2da      	uxtb	r2, r3
 800fc9e:	7efb      	ldrb	r3, [r7, #27]
 800fca0:	f7ff fd7a 	bl	800f798 <put_lfn>
				fs->wflag = 1;
 800fca4:	69fb      	ldr	r3, [r7, #28]
 800fca6:	2201      	movs	r2, #1
 800fca8:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800fcaa:	2100      	movs	r1, #0
 800fcac:	6878      	ldr	r0, [r7, #4]
 800fcae:	f7ff fba6 	bl	800f3fe <dir_next>
 800fcb2:	4603      	mov	r3, r0
 800fcb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800fcb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d107      	bne.n	800fcd0 <dir_register+0x184>
 800fcc0:	6a3b      	ldr	r3, [r7, #32]
 800fcc2:	3b01      	subs	r3, #1
 800fcc4:	623b      	str	r3, [r7, #32]
 800fcc6:	6a3b      	ldr	r3, [r7, #32]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d1d5      	bne.n	800fc78 <dir_register+0x12c>
 800fccc:	e000      	b.n	800fcd0 <dir_register+0x184>
				if (res != FR_OK) break;
 800fcce:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800fcd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d128      	bne.n	800fd2a <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	69db      	ldr	r3, [r3, #28]
 800fcdc:	4619      	mov	r1, r3
 800fcde:	69f8      	ldr	r0, [r7, #28]
 800fce0:	f7fe ff22 	bl	800eb28 <move_window>
 800fce4:	4603      	mov	r3, r0
 800fce6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800fcea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d11b      	bne.n	800fd2a <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6a1b      	ldr	r3, [r3, #32]
 800fcf6:	2220      	movs	r2, #32
 800fcf8:	2100      	movs	r1, #0
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7fe fcd5 	bl	800e6aa <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6a18      	ldr	r0, [r3, #32]
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	3324      	adds	r3, #36	; 0x24
 800fd08:	220b      	movs	r2, #11
 800fd0a:	4619      	mov	r1, r3
 800fd0c:	f7fe fcac 	bl	800e668 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6a1b      	ldr	r3, [r3, #32]
 800fd1a:	330c      	adds	r3, #12
 800fd1c:	f002 0218 	and.w	r2, r2, #24
 800fd20:	b2d2      	uxtb	r2, r2
 800fd22:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800fd24:	69fb      	ldr	r3, [r7, #28]
 800fd26:	2201      	movs	r2, #1
 800fd28:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fd2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800fd2e:	4618      	mov	r0, r3
 800fd30:	3730      	adds	r7, #48	; 0x30
 800fd32:	46bd      	mov	sp, r7
 800fd34:	bd80      	pop	{r7, pc}
 800fd36:	bf00      	nop
 800fd38:	4ec4ec4f 	.word	0x4ec4ec4f

0800fd3c <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b088      	sub	sp, #32
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	6078      	str	r0, [r7, #4]
 800fd44:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800fd4c:	683b      	ldr	r3, [r7, #0]
 800fd4e:	2200      	movs	r2, #0
 800fd50:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	69db      	ldr	r3, [r3, #28]
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	f000 80c9 	beq.w	800feee <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fd60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd64:	d032      	beq.n	800fdcc <get_fileinfo+0x90>
			i = j = 0;
 800fd66:	2300      	movs	r3, #0
 800fd68:	61bb      	str	r3, [r7, #24]
 800fd6a:	69bb      	ldr	r3, [r7, #24]
 800fd6c:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800fd6e:	e01b      	b.n	800fda8 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800fd70:	89fb      	ldrh	r3, [r7, #14]
 800fd72:	2100      	movs	r1, #0
 800fd74:	4618      	mov	r0, r3
 800fd76:	f001 fda1 	bl	80118bc <ff_convert>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800fd7e:	89fb      	ldrh	r3, [r7, #14]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d102      	bne.n	800fd8a <get_fileinfo+0x4e>
 800fd84:	2300      	movs	r3, #0
 800fd86:	61fb      	str	r3, [r7, #28]
 800fd88:	e01a      	b.n	800fdc0 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800fd8a:	69fb      	ldr	r3, [r7, #28]
 800fd8c:	2bfe      	cmp	r3, #254	; 0xfe
 800fd8e:	d902      	bls.n	800fd96 <get_fileinfo+0x5a>
 800fd90:	2300      	movs	r3, #0
 800fd92:	61fb      	str	r3, [r7, #28]
 800fd94:	e014      	b.n	800fdc0 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800fd96:	69fb      	ldr	r3, [r7, #28]
 800fd98:	1c5a      	adds	r2, r3, #1
 800fd9a:	61fa      	str	r2, [r7, #28]
 800fd9c:	89fa      	ldrh	r2, [r7, #14]
 800fd9e:	b2d1      	uxtb	r1, r2
 800fda0:	683a      	ldr	r2, [r7, #0]
 800fda2:	4413      	add	r3, r2
 800fda4:	460a      	mov	r2, r1
 800fda6:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800fda8:	693b      	ldr	r3, [r7, #16]
 800fdaa:	691a      	ldr	r2, [r3, #16]
 800fdac:	69bb      	ldr	r3, [r7, #24]
 800fdae:	1c59      	adds	r1, r3, #1
 800fdb0:	61b9      	str	r1, [r7, #24]
 800fdb2:	005b      	lsls	r3, r3, #1
 800fdb4:	4413      	add	r3, r2
 800fdb6:	881b      	ldrh	r3, [r3, #0]
 800fdb8:	81fb      	strh	r3, [r7, #14]
 800fdba:	89fb      	ldrh	r3, [r7, #14]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d1d7      	bne.n	800fd70 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800fdc0:	683a      	ldr	r2, [r7, #0]
 800fdc2:	69fb      	ldr	r3, [r7, #28]
 800fdc4:	4413      	add	r3, r2
 800fdc6:	3316      	adds	r3, #22
 800fdc8:	2200      	movs	r2, #0
 800fdca:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800fdcc:	2300      	movs	r3, #0
 800fdce:	61bb      	str	r3, [r7, #24]
 800fdd0:	69bb      	ldr	r3, [r7, #24]
 800fdd2:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800fdd4:	683a      	ldr	r2, [r7, #0]
 800fdd6:	69fb      	ldr	r3, [r7, #28]
 800fdd8:	4413      	add	r3, r2
 800fdda:	3316      	adds	r3, #22
 800fddc:	781b      	ldrb	r3, [r3, #0]
 800fdde:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800fde0:	e04c      	b.n	800fe7c <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800fde2:	687b      	ldr	r3, [r7, #4]
 800fde4:	6a1a      	ldr	r2, [r3, #32]
 800fde6:	69fb      	ldr	r3, [r7, #28]
 800fde8:	1c59      	adds	r1, r3, #1
 800fdea:	61f9      	str	r1, [r7, #28]
 800fdec:	4413      	add	r3, r2
 800fdee:	781b      	ldrb	r3, [r3, #0]
 800fdf0:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800fdf2:	7dfb      	ldrb	r3, [r7, #23]
 800fdf4:	2b20      	cmp	r3, #32
 800fdf6:	d100      	bne.n	800fdfa <get_fileinfo+0xbe>
 800fdf8:	e040      	b.n	800fe7c <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800fdfa:	7dfb      	ldrb	r3, [r7, #23]
 800fdfc:	2b05      	cmp	r3, #5
 800fdfe:	d101      	bne.n	800fe04 <get_fileinfo+0xc8>
 800fe00:	23e5      	movs	r3, #229	; 0xe5
 800fe02:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800fe04:	69fb      	ldr	r3, [r7, #28]
 800fe06:	2b09      	cmp	r3, #9
 800fe08:	d10f      	bne.n	800fe2a <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800fe0a:	89bb      	ldrh	r3, [r7, #12]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d105      	bne.n	800fe1c <get_fileinfo+0xe0>
 800fe10:	683a      	ldr	r2, [r7, #0]
 800fe12:	69bb      	ldr	r3, [r7, #24]
 800fe14:	4413      	add	r3, r2
 800fe16:	3316      	adds	r3, #22
 800fe18:	222e      	movs	r2, #46	; 0x2e
 800fe1a:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800fe1c:	69bb      	ldr	r3, [r7, #24]
 800fe1e:	1c5a      	adds	r2, r3, #1
 800fe20:	61ba      	str	r2, [r7, #24]
 800fe22:	683a      	ldr	r2, [r7, #0]
 800fe24:	4413      	add	r3, r2
 800fe26:	222e      	movs	r2, #46	; 0x2e
 800fe28:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800fe2a:	683a      	ldr	r2, [r7, #0]
 800fe2c:	69bb      	ldr	r3, [r7, #24]
 800fe2e:	4413      	add	r3, r2
 800fe30:	3309      	adds	r3, #9
 800fe32:	7dfa      	ldrb	r2, [r7, #23]
 800fe34:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800fe36:	89bb      	ldrh	r3, [r7, #12]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d11c      	bne.n	800fe76 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800fe3c:	7dfb      	ldrb	r3, [r7, #23]
 800fe3e:	2b40      	cmp	r3, #64	; 0x40
 800fe40:	d913      	bls.n	800fe6a <get_fileinfo+0x12e>
 800fe42:	7dfb      	ldrb	r3, [r7, #23]
 800fe44:	2b5a      	cmp	r3, #90	; 0x5a
 800fe46:	d810      	bhi.n	800fe6a <get_fileinfo+0x12e>
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	6a1b      	ldr	r3, [r3, #32]
 800fe4c:	330c      	adds	r3, #12
 800fe4e:	781b      	ldrb	r3, [r3, #0]
 800fe50:	461a      	mov	r2, r3
 800fe52:	69fb      	ldr	r3, [r7, #28]
 800fe54:	2b08      	cmp	r3, #8
 800fe56:	d901      	bls.n	800fe5c <get_fileinfo+0x120>
 800fe58:	2310      	movs	r3, #16
 800fe5a:	e000      	b.n	800fe5e <get_fileinfo+0x122>
 800fe5c:	2308      	movs	r3, #8
 800fe5e:	4013      	ands	r3, r2
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d002      	beq.n	800fe6a <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800fe64:	7dfb      	ldrb	r3, [r7, #23]
 800fe66:	3320      	adds	r3, #32
 800fe68:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800fe6a:	683a      	ldr	r2, [r7, #0]
 800fe6c:	69bb      	ldr	r3, [r7, #24]
 800fe6e:	4413      	add	r3, r2
 800fe70:	3316      	adds	r3, #22
 800fe72:	7dfa      	ldrb	r2, [r7, #23]
 800fe74:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800fe76:	69bb      	ldr	r3, [r7, #24]
 800fe78:	3301      	adds	r3, #1
 800fe7a:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800fe7c:	69fb      	ldr	r3, [r7, #28]
 800fe7e:	2b0a      	cmp	r3, #10
 800fe80:	d9af      	bls.n	800fde2 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800fe82:	89bb      	ldrh	r3, [r7, #12]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d10d      	bne.n	800fea4 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800fe88:	683a      	ldr	r2, [r7, #0]
 800fe8a:	69bb      	ldr	r3, [r7, #24]
 800fe8c:	4413      	add	r3, r2
 800fe8e:	3316      	adds	r3, #22
 800fe90:	2200      	movs	r2, #0
 800fe92:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	6a1b      	ldr	r3, [r3, #32]
 800fe98:	330c      	adds	r3, #12
 800fe9a:	781b      	ldrb	r3, [r3, #0]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d101      	bne.n	800fea4 <get_fileinfo+0x168>
 800fea0:	2300      	movs	r3, #0
 800fea2:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800fea4:	683a      	ldr	r2, [r7, #0]
 800fea6:	69bb      	ldr	r3, [r7, #24]
 800fea8:	4413      	add	r3, r2
 800feaa:	3309      	adds	r3, #9
 800feac:	2200      	movs	r2, #0
 800feae:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	6a1b      	ldr	r3, [r3, #32]
 800feb4:	7ada      	ldrb	r2, [r3, #11]
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	6a1b      	ldr	r3, [r3, #32]
 800febe:	331c      	adds	r3, #28
 800fec0:	4618      	mov	r0, r3
 800fec2:	f7fe fb67 	bl	800e594 <ld_dword>
 800fec6:	4602      	mov	r2, r0
 800fec8:	683b      	ldr	r3, [r7, #0]
 800feca:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	6a1b      	ldr	r3, [r3, #32]
 800fed0:	3316      	adds	r3, #22
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7fe fb5e 	bl	800e594 <ld_dword>
 800fed8:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800feda:	68bb      	ldr	r3, [r7, #8]
 800fedc:	b29a      	uxth	r2, r3
 800fede:	683b      	ldr	r3, [r7, #0]
 800fee0:	80da      	strh	r2, [r3, #6]
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	0c1b      	lsrs	r3, r3, #16
 800fee6:	b29a      	uxth	r2, r3
 800fee8:	683b      	ldr	r3, [r7, #0]
 800feea:	809a      	strh	r2, [r3, #4]
 800feec:	e000      	b.n	800fef0 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800feee:	bf00      	nop
}
 800fef0:	3720      	adds	r7, #32
 800fef2:	46bd      	mov	sp, r7
 800fef4:	bd80      	pop	{r7, pc}
	...

0800fef8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fef8:	b580      	push	{r7, lr}
 800fefa:	b08a      	sub	sp, #40	; 0x28
 800fefc:	af00      	add	r7, sp, #0
 800fefe:	6078      	str	r0, [r7, #4]
 800ff00:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800ff02:	683b      	ldr	r3, [r7, #0]
 800ff04:	681b      	ldr	r3, [r3, #0]
 800ff06:	613b      	str	r3, [r7, #16]
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	681b      	ldr	r3, [r3, #0]
 800ff0c:	691b      	ldr	r3, [r3, #16]
 800ff0e:	60fb      	str	r3, [r7, #12]
 800ff10:	2300      	movs	r3, #0
 800ff12:	617b      	str	r3, [r7, #20]
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800ff18:	69bb      	ldr	r3, [r7, #24]
 800ff1a:	1c5a      	adds	r2, r3, #1
 800ff1c:	61ba      	str	r2, [r7, #24]
 800ff1e:	693a      	ldr	r2, [r7, #16]
 800ff20:	4413      	add	r3, r2
 800ff22:	781b      	ldrb	r3, [r3, #0]
 800ff24:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800ff26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff28:	2b1f      	cmp	r3, #31
 800ff2a:	d940      	bls.n	800ffae <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800ff2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff2e:	2b2f      	cmp	r3, #47	; 0x2f
 800ff30:	d006      	beq.n	800ff40 <create_name+0x48>
 800ff32:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff34:	2b5c      	cmp	r3, #92	; 0x5c
 800ff36:	d110      	bne.n	800ff5a <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800ff38:	e002      	b.n	800ff40 <create_name+0x48>
 800ff3a:	69bb      	ldr	r3, [r7, #24]
 800ff3c:	3301      	adds	r3, #1
 800ff3e:	61bb      	str	r3, [r7, #24]
 800ff40:	693a      	ldr	r2, [r7, #16]
 800ff42:	69bb      	ldr	r3, [r7, #24]
 800ff44:	4413      	add	r3, r2
 800ff46:	781b      	ldrb	r3, [r3, #0]
 800ff48:	2b2f      	cmp	r3, #47	; 0x2f
 800ff4a:	d0f6      	beq.n	800ff3a <create_name+0x42>
 800ff4c:	693a      	ldr	r2, [r7, #16]
 800ff4e:	69bb      	ldr	r3, [r7, #24]
 800ff50:	4413      	add	r3, r2
 800ff52:	781b      	ldrb	r3, [r3, #0]
 800ff54:	2b5c      	cmp	r3, #92	; 0x5c
 800ff56:	d0f0      	beq.n	800ff3a <create_name+0x42>
			break;
 800ff58:	e02a      	b.n	800ffb0 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800ff5a:	697b      	ldr	r3, [r7, #20]
 800ff5c:	2bfe      	cmp	r3, #254	; 0xfe
 800ff5e:	d901      	bls.n	800ff64 <create_name+0x6c>
 800ff60:	2306      	movs	r3, #6
 800ff62:	e177      	b.n	8010254 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800ff64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff66:	b2db      	uxtb	r3, r3
 800ff68:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800ff6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff6c:	2101      	movs	r1, #1
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f001 fca4 	bl	80118bc <ff_convert>
 800ff74:	4603      	mov	r3, r0
 800ff76:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800ff78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d101      	bne.n	800ff82 <create_name+0x8a>
 800ff7e:	2306      	movs	r3, #6
 800ff80:	e168      	b.n	8010254 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800ff82:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff84:	2b7f      	cmp	r3, #127	; 0x7f
 800ff86:	d809      	bhi.n	800ff9c <create_name+0xa4>
 800ff88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff8a:	4619      	mov	r1, r3
 800ff8c:	48b3      	ldr	r0, [pc, #716]	; (801025c <create_name+0x364>)
 800ff8e:	f7fe fbce 	bl	800e72e <chk_chr>
 800ff92:	4603      	mov	r3, r0
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d001      	beq.n	800ff9c <create_name+0xa4>
 800ff98:	2306      	movs	r3, #6
 800ff9a:	e15b      	b.n	8010254 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800ff9c:	697b      	ldr	r3, [r7, #20]
 800ff9e:	1c5a      	adds	r2, r3, #1
 800ffa0:	617a      	str	r2, [r7, #20]
 800ffa2:	005b      	lsls	r3, r3, #1
 800ffa4:	68fa      	ldr	r2, [r7, #12]
 800ffa6:	4413      	add	r3, r2
 800ffa8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ffaa:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800ffac:	e7b4      	b.n	800ff18 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800ffae:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800ffb0:	693a      	ldr	r2, [r7, #16]
 800ffb2:	69bb      	ldr	r3, [r7, #24]
 800ffb4:	441a      	add	r2, r3
 800ffb6:	683b      	ldr	r3, [r7, #0]
 800ffb8:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ffba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ffbc:	2b1f      	cmp	r3, #31
 800ffbe:	d801      	bhi.n	800ffc4 <create_name+0xcc>
 800ffc0:	2304      	movs	r3, #4
 800ffc2:	e000      	b.n	800ffc6 <create_name+0xce>
 800ffc4:	2300      	movs	r3, #0
 800ffc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800ffca:	e011      	b.n	800fff0 <create_name+0xf8>
		w = lfn[di - 1];
 800ffcc:	697b      	ldr	r3, [r7, #20]
 800ffce:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ffd2:	3b01      	subs	r3, #1
 800ffd4:	005b      	lsls	r3, r3, #1
 800ffd6:	68fa      	ldr	r2, [r7, #12]
 800ffd8:	4413      	add	r3, r2
 800ffda:	881b      	ldrh	r3, [r3, #0]
 800ffdc:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800ffde:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ffe0:	2b20      	cmp	r3, #32
 800ffe2:	d002      	beq.n	800ffea <create_name+0xf2>
 800ffe4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ffe6:	2b2e      	cmp	r3, #46	; 0x2e
 800ffe8:	d106      	bne.n	800fff8 <create_name+0x100>
		di--;
 800ffea:	697b      	ldr	r3, [r7, #20]
 800ffec:	3b01      	subs	r3, #1
 800ffee:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800fff0:	697b      	ldr	r3, [r7, #20]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d1ea      	bne.n	800ffcc <create_name+0xd4>
 800fff6:	e000      	b.n	800fffa <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800fff8:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800fffa:	697b      	ldr	r3, [r7, #20]
 800fffc:	005b      	lsls	r3, r3, #1
 800fffe:	68fa      	ldr	r2, [r7, #12]
 8010000:	4413      	add	r3, r2
 8010002:	2200      	movs	r2, #0
 8010004:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8010006:	697b      	ldr	r3, [r7, #20]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d101      	bne.n	8010010 <create_name+0x118>
 801000c:	2306      	movs	r3, #6
 801000e:	e121      	b.n	8010254 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	3324      	adds	r3, #36	; 0x24
 8010014:	220b      	movs	r2, #11
 8010016:	2120      	movs	r1, #32
 8010018:	4618      	mov	r0, r3
 801001a:	f7fe fb46 	bl	800e6aa <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 801001e:	2300      	movs	r3, #0
 8010020:	61bb      	str	r3, [r7, #24]
 8010022:	e002      	b.n	801002a <create_name+0x132>
 8010024:	69bb      	ldr	r3, [r7, #24]
 8010026:	3301      	adds	r3, #1
 8010028:	61bb      	str	r3, [r7, #24]
 801002a:	69bb      	ldr	r3, [r7, #24]
 801002c:	005b      	lsls	r3, r3, #1
 801002e:	68fa      	ldr	r2, [r7, #12]
 8010030:	4413      	add	r3, r2
 8010032:	881b      	ldrh	r3, [r3, #0]
 8010034:	2b20      	cmp	r3, #32
 8010036:	d0f5      	beq.n	8010024 <create_name+0x12c>
 8010038:	69bb      	ldr	r3, [r7, #24]
 801003a:	005b      	lsls	r3, r3, #1
 801003c:	68fa      	ldr	r2, [r7, #12]
 801003e:	4413      	add	r3, r2
 8010040:	881b      	ldrh	r3, [r3, #0]
 8010042:	2b2e      	cmp	r3, #46	; 0x2e
 8010044:	d0ee      	beq.n	8010024 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8010046:	69bb      	ldr	r3, [r7, #24]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d009      	beq.n	8010060 <create_name+0x168>
 801004c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010050:	f043 0303 	orr.w	r3, r3, #3
 8010054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8010058:	e002      	b.n	8010060 <create_name+0x168>
 801005a:	697b      	ldr	r3, [r7, #20]
 801005c:	3b01      	subs	r3, #1
 801005e:	617b      	str	r3, [r7, #20]
 8010060:	697b      	ldr	r3, [r7, #20]
 8010062:	2b00      	cmp	r3, #0
 8010064:	d009      	beq.n	801007a <create_name+0x182>
 8010066:	697b      	ldr	r3, [r7, #20]
 8010068:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801006c:	3b01      	subs	r3, #1
 801006e:	005b      	lsls	r3, r3, #1
 8010070:	68fa      	ldr	r2, [r7, #12]
 8010072:	4413      	add	r3, r2
 8010074:	881b      	ldrh	r3, [r3, #0]
 8010076:	2b2e      	cmp	r3, #46	; 0x2e
 8010078:	d1ef      	bne.n	801005a <create_name+0x162>

	i = b = 0; ni = 8;
 801007a:	2300      	movs	r3, #0
 801007c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010080:	2300      	movs	r3, #0
 8010082:	623b      	str	r3, [r7, #32]
 8010084:	2308      	movs	r3, #8
 8010086:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8010088:	69bb      	ldr	r3, [r7, #24]
 801008a:	1c5a      	adds	r2, r3, #1
 801008c:	61ba      	str	r2, [r7, #24]
 801008e:	005b      	lsls	r3, r3, #1
 8010090:	68fa      	ldr	r2, [r7, #12]
 8010092:	4413      	add	r3, r2
 8010094:	881b      	ldrh	r3, [r3, #0]
 8010096:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8010098:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801009a:	2b00      	cmp	r3, #0
 801009c:	f000 8090 	beq.w	80101c0 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80100a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80100a2:	2b20      	cmp	r3, #32
 80100a4:	d006      	beq.n	80100b4 <create_name+0x1bc>
 80100a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80100a8:	2b2e      	cmp	r3, #46	; 0x2e
 80100aa:	d10a      	bne.n	80100c2 <create_name+0x1ca>
 80100ac:	69ba      	ldr	r2, [r7, #24]
 80100ae:	697b      	ldr	r3, [r7, #20]
 80100b0:	429a      	cmp	r2, r3
 80100b2:	d006      	beq.n	80100c2 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80100b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80100b8:	f043 0303 	orr.w	r3, r3, #3
 80100bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80100c0:	e07d      	b.n	80101be <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80100c2:	6a3a      	ldr	r2, [r7, #32]
 80100c4:	69fb      	ldr	r3, [r7, #28]
 80100c6:	429a      	cmp	r2, r3
 80100c8:	d203      	bcs.n	80100d2 <create_name+0x1da>
 80100ca:	69ba      	ldr	r2, [r7, #24]
 80100cc:	697b      	ldr	r3, [r7, #20]
 80100ce:	429a      	cmp	r2, r3
 80100d0:	d123      	bne.n	801011a <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80100d2:	69fb      	ldr	r3, [r7, #28]
 80100d4:	2b0b      	cmp	r3, #11
 80100d6:	d106      	bne.n	80100e6 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80100d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80100dc:	f043 0303 	orr.w	r3, r3, #3
 80100e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80100e4:	e06f      	b.n	80101c6 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80100e6:	69ba      	ldr	r2, [r7, #24]
 80100e8:	697b      	ldr	r3, [r7, #20]
 80100ea:	429a      	cmp	r2, r3
 80100ec:	d005      	beq.n	80100fa <create_name+0x202>
 80100ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80100f2:	f043 0303 	orr.w	r3, r3, #3
 80100f6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80100fa:	69ba      	ldr	r2, [r7, #24]
 80100fc:	697b      	ldr	r3, [r7, #20]
 80100fe:	429a      	cmp	r2, r3
 8010100:	d860      	bhi.n	80101c4 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	61bb      	str	r3, [r7, #24]
 8010106:	2308      	movs	r3, #8
 8010108:	623b      	str	r3, [r7, #32]
 801010a:	230b      	movs	r3, #11
 801010c:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 801010e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010112:	009b      	lsls	r3, r3, #2
 8010114:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010118:	e051      	b.n	80101be <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801011a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801011c:	2b7f      	cmp	r3, #127	; 0x7f
 801011e:	d914      	bls.n	801014a <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8010120:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010122:	2100      	movs	r1, #0
 8010124:	4618      	mov	r0, r3
 8010126:	f001 fbc9 	bl	80118bc <ff_convert>
 801012a:	4603      	mov	r3, r0
 801012c:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 801012e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010130:	2b00      	cmp	r3, #0
 8010132:	d004      	beq.n	801013e <create_name+0x246>
 8010134:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010136:	3b80      	subs	r3, #128	; 0x80
 8010138:	4a49      	ldr	r2, [pc, #292]	; (8010260 <create_name+0x368>)
 801013a:	5cd3      	ldrb	r3, [r2, r3]
 801013c:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 801013e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010142:	f043 0302 	orr.w	r3, r3, #2
 8010146:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 801014a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801014c:	2b00      	cmp	r3, #0
 801014e:	d007      	beq.n	8010160 <create_name+0x268>
 8010150:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010152:	4619      	mov	r1, r3
 8010154:	4843      	ldr	r0, [pc, #268]	; (8010264 <create_name+0x36c>)
 8010156:	f7fe faea 	bl	800e72e <chk_chr>
 801015a:	4603      	mov	r3, r0
 801015c:	2b00      	cmp	r3, #0
 801015e:	d008      	beq.n	8010172 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8010160:	235f      	movs	r3, #95	; 0x5f
 8010162:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010164:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010168:	f043 0303 	orr.w	r3, r3, #3
 801016c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010170:	e01b      	b.n	80101aa <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8010172:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010174:	2b40      	cmp	r3, #64	; 0x40
 8010176:	d909      	bls.n	801018c <create_name+0x294>
 8010178:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801017a:	2b5a      	cmp	r3, #90	; 0x5a
 801017c:	d806      	bhi.n	801018c <create_name+0x294>
					b |= 2;
 801017e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010182:	f043 0302 	orr.w	r3, r3, #2
 8010186:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801018a:	e00e      	b.n	80101aa <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 801018c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801018e:	2b60      	cmp	r3, #96	; 0x60
 8010190:	d90b      	bls.n	80101aa <create_name+0x2b2>
 8010192:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010194:	2b7a      	cmp	r3, #122	; 0x7a
 8010196:	d808      	bhi.n	80101aa <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8010198:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801019c:	f043 0301 	orr.w	r3, r3, #1
 80101a0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80101a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80101a6:	3b20      	subs	r3, #32
 80101a8:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80101aa:	6a3b      	ldr	r3, [r7, #32]
 80101ac:	1c5a      	adds	r2, r3, #1
 80101ae:	623a      	str	r2, [r7, #32]
 80101b0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80101b2:	b2d1      	uxtb	r1, r2
 80101b4:	687a      	ldr	r2, [r7, #4]
 80101b6:	4413      	add	r3, r2
 80101b8:	460a      	mov	r2, r1
 80101ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80101be:	e763      	b.n	8010088 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80101c0:	bf00      	nop
 80101c2:	e000      	b.n	80101c6 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 80101c4:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80101cc:	2be5      	cmp	r3, #229	; 0xe5
 80101ce:	d103      	bne.n	80101d8 <create_name+0x2e0>
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	2205      	movs	r2, #5
 80101d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80101d8:	69fb      	ldr	r3, [r7, #28]
 80101da:	2b08      	cmp	r3, #8
 80101dc:	d104      	bne.n	80101e8 <create_name+0x2f0>
 80101de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80101e2:	009b      	lsls	r3, r3, #2
 80101e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80101e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80101ec:	f003 030c 	and.w	r3, r3, #12
 80101f0:	2b0c      	cmp	r3, #12
 80101f2:	d005      	beq.n	8010200 <create_name+0x308>
 80101f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80101f8:	f003 0303 	and.w	r3, r3, #3
 80101fc:	2b03      	cmp	r3, #3
 80101fe:	d105      	bne.n	801020c <create_name+0x314>
 8010200:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010204:	f043 0302 	orr.w	r3, r3, #2
 8010208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 801020c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010210:	f003 0302 	and.w	r3, r3, #2
 8010214:	2b00      	cmp	r3, #0
 8010216:	d117      	bne.n	8010248 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8010218:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801021c:	f003 0303 	and.w	r3, r3, #3
 8010220:	2b01      	cmp	r3, #1
 8010222:	d105      	bne.n	8010230 <create_name+0x338>
 8010224:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010228:	f043 0310 	orr.w	r3, r3, #16
 801022c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8010230:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010234:	f003 030c 	and.w	r3, r3, #12
 8010238:	2b04      	cmp	r3, #4
 801023a:	d105      	bne.n	8010248 <create_name+0x350>
 801023c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010240:	f043 0308 	orr.w	r3, r3, #8
 8010244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801024e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8010252:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8010254:	4618      	mov	r0, r3
 8010256:	3728      	adds	r7, #40	; 0x28
 8010258:	46bd      	mov	sp, r7
 801025a:	bd80      	pop	{r7, pc}
 801025c:	08019a10 	.word	0x08019a10
 8010260:	08019e70 	.word	0x08019e70
 8010264:	08019a1c 	.word	0x08019a1c

08010268 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010268:	b580      	push	{r7, lr}
 801026a:	b086      	sub	sp, #24
 801026c:	af00      	add	r7, sp, #0
 801026e:	6078      	str	r0, [r7, #4]
 8010270:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010276:	693b      	ldr	r3, [r7, #16]
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 801027c:	e002      	b.n	8010284 <follow_path+0x1c>
 801027e:	683b      	ldr	r3, [r7, #0]
 8010280:	3301      	adds	r3, #1
 8010282:	603b      	str	r3, [r7, #0]
 8010284:	683b      	ldr	r3, [r7, #0]
 8010286:	781b      	ldrb	r3, [r3, #0]
 8010288:	2b2f      	cmp	r3, #47	; 0x2f
 801028a:	d0f8      	beq.n	801027e <follow_path+0x16>
 801028c:	683b      	ldr	r3, [r7, #0]
 801028e:	781b      	ldrb	r3, [r3, #0]
 8010290:	2b5c      	cmp	r3, #92	; 0x5c
 8010292:	d0f4      	beq.n	801027e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010294:	693b      	ldr	r3, [r7, #16]
 8010296:	2200      	movs	r2, #0
 8010298:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801029a:	683b      	ldr	r3, [r7, #0]
 801029c:	781b      	ldrb	r3, [r3, #0]
 801029e:	2b1f      	cmp	r3, #31
 80102a0:	d80a      	bhi.n	80102b8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	2280      	movs	r2, #128	; 0x80
 80102a6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80102aa:	2100      	movs	r1, #0
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f7ff f81d 	bl	800f2ec <dir_sdi>
 80102b2:	4603      	mov	r3, r0
 80102b4:	75fb      	strb	r3, [r7, #23]
 80102b6:	e048      	b.n	801034a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80102b8:	463b      	mov	r3, r7
 80102ba:	4619      	mov	r1, r3
 80102bc:	6878      	ldr	r0, [r7, #4]
 80102be:	f7ff fe1b 	bl	800fef8 <create_name>
 80102c2:	4603      	mov	r3, r0
 80102c4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80102c6:	7dfb      	ldrb	r3, [r7, #23]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d139      	bne.n	8010340 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80102cc:	6878      	ldr	r0, [r7, #4]
 80102ce:	f7ff fb7c 	bl	800f9ca <dir_find>
 80102d2:	4603      	mov	r3, r0
 80102d4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80102dc:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80102de:	7dfb      	ldrb	r3, [r7, #23]
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d00a      	beq.n	80102fa <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80102e4:	7dfb      	ldrb	r3, [r7, #23]
 80102e6:	2b04      	cmp	r3, #4
 80102e8:	d12c      	bne.n	8010344 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80102ea:	7afb      	ldrb	r3, [r7, #11]
 80102ec:	f003 0304 	and.w	r3, r3, #4
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d127      	bne.n	8010344 <follow_path+0xdc>
 80102f4:	2305      	movs	r3, #5
 80102f6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80102f8:	e024      	b.n	8010344 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80102fa:	7afb      	ldrb	r3, [r7, #11]
 80102fc:	f003 0304 	and.w	r3, r3, #4
 8010300:	2b00      	cmp	r3, #0
 8010302:	d121      	bne.n	8010348 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010304:	693b      	ldr	r3, [r7, #16]
 8010306:	799b      	ldrb	r3, [r3, #6]
 8010308:	f003 0310 	and.w	r3, r3, #16
 801030c:	2b00      	cmp	r3, #0
 801030e:	d102      	bne.n	8010316 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010310:	2305      	movs	r3, #5
 8010312:	75fb      	strb	r3, [r7, #23]
 8010314:	e019      	b.n	801034a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	695b      	ldr	r3, [r3, #20]
 8010320:	68fa      	ldr	r2, [r7, #12]
 8010322:	8992      	ldrh	r2, [r2, #12]
 8010324:	fbb3 f0f2 	udiv	r0, r3, r2
 8010328:	fb02 f200 	mul.w	r2, r2, r0
 801032c:	1a9b      	subs	r3, r3, r2
 801032e:	440b      	add	r3, r1
 8010330:	4619      	mov	r1, r3
 8010332:	68f8      	ldr	r0, [r7, #12]
 8010334:	f7ff f980 	bl	800f638 <ld_clust>
 8010338:	4602      	mov	r2, r0
 801033a:	693b      	ldr	r3, [r7, #16]
 801033c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801033e:	e7bb      	b.n	80102b8 <follow_path+0x50>
			if (res != FR_OK) break;
 8010340:	bf00      	nop
 8010342:	e002      	b.n	801034a <follow_path+0xe2>
				break;
 8010344:	bf00      	nop
 8010346:	e000      	b.n	801034a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010348:	bf00      	nop
			}
		}
	}

	return res;
 801034a:	7dfb      	ldrb	r3, [r7, #23]
}
 801034c:	4618      	mov	r0, r3
 801034e:	3718      	adds	r7, #24
 8010350:	46bd      	mov	sp, r7
 8010352:	bd80      	pop	{r7, pc}

08010354 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010354:	b480      	push	{r7}
 8010356:	b087      	sub	sp, #28
 8010358:	af00      	add	r7, sp, #0
 801035a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801035c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010360:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d031      	beq.n	80103ce <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	681b      	ldr	r3, [r3, #0]
 801036e:	617b      	str	r3, [r7, #20]
 8010370:	e002      	b.n	8010378 <get_ldnumber+0x24>
 8010372:	697b      	ldr	r3, [r7, #20]
 8010374:	3301      	adds	r3, #1
 8010376:	617b      	str	r3, [r7, #20]
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	781b      	ldrb	r3, [r3, #0]
 801037c:	2b1f      	cmp	r3, #31
 801037e:	d903      	bls.n	8010388 <get_ldnumber+0x34>
 8010380:	697b      	ldr	r3, [r7, #20]
 8010382:	781b      	ldrb	r3, [r3, #0]
 8010384:	2b3a      	cmp	r3, #58	; 0x3a
 8010386:	d1f4      	bne.n	8010372 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	781b      	ldrb	r3, [r3, #0]
 801038c:	2b3a      	cmp	r3, #58	; 0x3a
 801038e:	d11c      	bne.n	80103ca <get_ldnumber+0x76>
			tp = *path;
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	1c5a      	adds	r2, r3, #1
 801039a:	60fa      	str	r2, [r7, #12]
 801039c:	781b      	ldrb	r3, [r3, #0]
 801039e:	3b30      	subs	r3, #48	; 0x30
 80103a0:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80103a2:	68bb      	ldr	r3, [r7, #8]
 80103a4:	2b09      	cmp	r3, #9
 80103a6:	d80e      	bhi.n	80103c6 <get_ldnumber+0x72>
 80103a8:	68fa      	ldr	r2, [r7, #12]
 80103aa:	697b      	ldr	r3, [r7, #20]
 80103ac:	429a      	cmp	r2, r3
 80103ae:	d10a      	bne.n	80103c6 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80103b0:	68bb      	ldr	r3, [r7, #8]
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	d107      	bne.n	80103c6 <get_ldnumber+0x72>
					vol = (int)i;
 80103b6:	68bb      	ldr	r3, [r7, #8]
 80103b8:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80103ba:	697b      	ldr	r3, [r7, #20]
 80103bc:	3301      	adds	r3, #1
 80103be:	617b      	str	r3, [r7, #20]
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	697a      	ldr	r2, [r7, #20]
 80103c4:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80103c6:	693b      	ldr	r3, [r7, #16]
 80103c8:	e002      	b.n	80103d0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80103ca:	2300      	movs	r3, #0
 80103cc:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80103ce:	693b      	ldr	r3, [r7, #16]
}
 80103d0:	4618      	mov	r0, r3
 80103d2:	371c      	adds	r7, #28
 80103d4:	46bd      	mov	sp, r7
 80103d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103da:	4770      	bx	lr

080103dc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b082      	sub	sp, #8
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
 80103e4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	2200      	movs	r2, #0
 80103ea:	70da      	strb	r2, [r3, #3]
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80103f2:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80103f4:	6839      	ldr	r1, [r7, #0]
 80103f6:	6878      	ldr	r0, [r7, #4]
 80103f8:	f7fe fb96 	bl	800eb28 <move_window>
 80103fc:	4603      	mov	r3, r0
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d001      	beq.n	8010406 <check_fs+0x2a>
 8010402:	2304      	movs	r3, #4
 8010404:	e038      	b.n	8010478 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	333c      	adds	r3, #60	; 0x3c
 801040a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801040e:	4618      	mov	r0, r3
 8010410:	f7fe f8a8 	bl	800e564 <ld_word>
 8010414:	4603      	mov	r3, r0
 8010416:	461a      	mov	r2, r3
 8010418:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801041c:	429a      	cmp	r2, r3
 801041e:	d001      	beq.n	8010424 <check_fs+0x48>
 8010420:	2303      	movs	r3, #3
 8010422:	e029      	b.n	8010478 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801042a:	2be9      	cmp	r3, #233	; 0xe9
 801042c:	d009      	beq.n	8010442 <check_fs+0x66>
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010434:	2beb      	cmp	r3, #235	; 0xeb
 8010436:	d11e      	bne.n	8010476 <check_fs+0x9a>
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 801043e:	2b90      	cmp	r3, #144	; 0x90
 8010440:	d119      	bne.n	8010476 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010442:	687b      	ldr	r3, [r7, #4]
 8010444:	333c      	adds	r3, #60	; 0x3c
 8010446:	3336      	adds	r3, #54	; 0x36
 8010448:	4618      	mov	r0, r3
 801044a:	f7fe f8a3 	bl	800e594 <ld_dword>
 801044e:	4603      	mov	r3, r0
 8010450:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010454:	4a0a      	ldr	r2, [pc, #40]	; (8010480 <check_fs+0xa4>)
 8010456:	4293      	cmp	r3, r2
 8010458:	d101      	bne.n	801045e <check_fs+0x82>
 801045a:	2300      	movs	r3, #0
 801045c:	e00c      	b.n	8010478 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	333c      	adds	r3, #60	; 0x3c
 8010462:	3352      	adds	r3, #82	; 0x52
 8010464:	4618      	mov	r0, r3
 8010466:	f7fe f895 	bl	800e594 <ld_dword>
 801046a:	4603      	mov	r3, r0
 801046c:	4a05      	ldr	r2, [pc, #20]	; (8010484 <check_fs+0xa8>)
 801046e:	4293      	cmp	r3, r2
 8010470:	d101      	bne.n	8010476 <check_fs+0x9a>
 8010472:	2300      	movs	r3, #0
 8010474:	e000      	b.n	8010478 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010476:	2302      	movs	r3, #2
}
 8010478:	4618      	mov	r0, r3
 801047a:	3708      	adds	r7, #8
 801047c:	46bd      	mov	sp, r7
 801047e:	bd80      	pop	{r7, pc}
 8010480:	00544146 	.word	0x00544146
 8010484:	33544146 	.word	0x33544146

08010488 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b096      	sub	sp, #88	; 0x58
 801048c:	af00      	add	r7, sp, #0
 801048e:	60f8      	str	r0, [r7, #12]
 8010490:	60b9      	str	r1, [r7, #8]
 8010492:	4613      	mov	r3, r2
 8010494:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010496:	68bb      	ldr	r3, [r7, #8]
 8010498:	2200      	movs	r2, #0
 801049a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801049c:	68f8      	ldr	r0, [r7, #12]
 801049e:	f7ff ff59 	bl	8010354 <get_ldnumber>
 80104a2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80104a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	da01      	bge.n	80104ae <find_volume+0x26>
 80104aa:	230b      	movs	r3, #11
 80104ac:	e26c      	b.n	8010988 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80104ae:	4aa4      	ldr	r2, [pc, #656]	; (8010740 <find_volume+0x2b8>)
 80104b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80104b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104b6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80104b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d101      	bne.n	80104c2 <find_volume+0x3a>
 80104be:	230c      	movs	r3, #12
 80104c0:	e262      	b.n	8010988 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 80104c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80104c4:	f7fe f94e 	bl	800e764 <lock_fs>
 80104c8:	4603      	mov	r3, r0
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	d101      	bne.n	80104d2 <find_volume+0x4a>
 80104ce:	230f      	movs	r3, #15
 80104d0:	e25a      	b.n	8010988 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 80104d2:	68bb      	ldr	r3, [r7, #8]
 80104d4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80104d6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80104d8:	79fb      	ldrb	r3, [r7, #7]
 80104da:	f023 0301 	bic.w	r3, r3, #1
 80104de:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80104e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104e2:	781b      	ldrb	r3, [r3, #0]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d01a      	beq.n	801051e <find_volume+0x96>
		stat = disk_status(fs->drv);
 80104e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ea:	785b      	ldrb	r3, [r3, #1]
 80104ec:	4618      	mov	r0, r3
 80104ee:	f7fd ff9b 	bl	800e428 <disk_status>
 80104f2:	4603      	mov	r3, r0
 80104f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80104f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104fc:	f003 0301 	and.w	r3, r3, #1
 8010500:	2b00      	cmp	r3, #0
 8010502:	d10c      	bne.n	801051e <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010504:	79fb      	ldrb	r3, [r7, #7]
 8010506:	2b00      	cmp	r3, #0
 8010508:	d007      	beq.n	801051a <find_volume+0x92>
 801050a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801050e:	f003 0304 	and.w	r3, r3, #4
 8010512:	2b00      	cmp	r3, #0
 8010514:	d001      	beq.n	801051a <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8010516:	230a      	movs	r3, #10
 8010518:	e236      	b.n	8010988 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 801051a:	2300      	movs	r3, #0
 801051c:	e234      	b.n	8010988 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801051e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010520:	2200      	movs	r2, #0
 8010522:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010526:	b2da      	uxtb	r2, r3
 8010528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801052a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801052c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801052e:	785b      	ldrb	r3, [r3, #1]
 8010530:	4618      	mov	r0, r3
 8010532:	f7fd ff93 	bl	800e45c <disk_initialize>
 8010536:	4603      	mov	r3, r0
 8010538:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801053c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010540:	f003 0301 	and.w	r3, r3, #1
 8010544:	2b00      	cmp	r3, #0
 8010546:	d001      	beq.n	801054c <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010548:	2303      	movs	r3, #3
 801054a:	e21d      	b.n	8010988 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801054c:	79fb      	ldrb	r3, [r7, #7]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d007      	beq.n	8010562 <find_volume+0xda>
 8010552:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010556:	f003 0304 	and.w	r3, r3, #4
 801055a:	2b00      	cmp	r3, #0
 801055c:	d001      	beq.n	8010562 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 801055e:	230a      	movs	r3, #10
 8010560:	e212      	b.n	8010988 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8010562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010564:	7858      	ldrb	r0, [r3, #1]
 8010566:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010568:	330c      	adds	r3, #12
 801056a:	461a      	mov	r2, r3
 801056c:	2102      	movs	r1, #2
 801056e:	f7fd ffdb 	bl	800e528 <disk_ioctl>
 8010572:	4603      	mov	r3, r0
 8010574:	2b00      	cmp	r3, #0
 8010576:	d001      	beq.n	801057c <find_volume+0xf4>
 8010578:	2301      	movs	r3, #1
 801057a:	e205      	b.n	8010988 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 801057c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801057e:	899b      	ldrh	r3, [r3, #12]
 8010580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010584:	d80d      	bhi.n	80105a2 <find_volume+0x11a>
 8010586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010588:	899b      	ldrh	r3, [r3, #12]
 801058a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801058e:	d308      	bcc.n	80105a2 <find_volume+0x11a>
 8010590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010592:	899b      	ldrh	r3, [r3, #12]
 8010594:	461a      	mov	r2, r3
 8010596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010598:	899b      	ldrh	r3, [r3, #12]
 801059a:	3b01      	subs	r3, #1
 801059c:	4013      	ands	r3, r2
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d001      	beq.n	80105a6 <find_volume+0x11e>
 80105a2:	2301      	movs	r3, #1
 80105a4:	e1f0      	b.n	8010988 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80105a6:	2300      	movs	r3, #0
 80105a8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80105aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80105ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80105ae:	f7ff ff15 	bl	80103dc <check_fs>
 80105b2:	4603      	mov	r3, r0
 80105b4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80105b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80105bc:	2b02      	cmp	r3, #2
 80105be:	d14b      	bne.n	8010658 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80105c0:	2300      	movs	r3, #0
 80105c2:	643b      	str	r3, [r7, #64]	; 0x40
 80105c4:	e01f      	b.n	8010606 <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80105c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105c8:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 80105cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105ce:	011b      	lsls	r3, r3, #4
 80105d0:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80105d4:	4413      	add	r3, r2
 80105d6:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80105d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105da:	3304      	adds	r3, #4
 80105dc:	781b      	ldrb	r3, [r3, #0]
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d006      	beq.n	80105f0 <find_volume+0x168>
 80105e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80105e4:	3308      	adds	r3, #8
 80105e6:	4618      	mov	r0, r3
 80105e8:	f7fd ffd4 	bl	800e594 <ld_dword>
 80105ec:	4602      	mov	r2, r0
 80105ee:	e000      	b.n	80105f2 <find_volume+0x16a>
 80105f0:	2200      	movs	r2, #0
 80105f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80105f4:	009b      	lsls	r3, r3, #2
 80105f6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80105fa:	440b      	add	r3, r1
 80105fc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010602:	3301      	adds	r3, #1
 8010604:	643b      	str	r3, [r7, #64]	; 0x40
 8010606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010608:	2b03      	cmp	r3, #3
 801060a:	d9dc      	bls.n	80105c6 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801060c:	2300      	movs	r3, #0
 801060e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010612:	2b00      	cmp	r3, #0
 8010614:	d002      	beq.n	801061c <find_volume+0x194>
 8010616:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010618:	3b01      	subs	r3, #1
 801061a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801061c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801061e:	009b      	lsls	r3, r3, #2
 8010620:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010624:	4413      	add	r3, r2
 8010626:	f853 3c44 	ldr.w	r3, [r3, #-68]
 801062a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 801062c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801062e:	2b00      	cmp	r3, #0
 8010630:	d005      	beq.n	801063e <find_volume+0x1b6>
 8010632:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010634:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010636:	f7ff fed1 	bl	80103dc <check_fs>
 801063a:	4603      	mov	r3, r0
 801063c:	e000      	b.n	8010640 <find_volume+0x1b8>
 801063e:	2303      	movs	r3, #3
 8010640:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8010644:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010648:	2b01      	cmp	r3, #1
 801064a:	d905      	bls.n	8010658 <find_volume+0x1d0>
 801064c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801064e:	3301      	adds	r3, #1
 8010650:	643b      	str	r3, [r7, #64]	; 0x40
 8010652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010654:	2b03      	cmp	r3, #3
 8010656:	d9e1      	bls.n	801061c <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010658:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801065c:	2b04      	cmp	r3, #4
 801065e:	d101      	bne.n	8010664 <find_volume+0x1dc>
 8010660:	2301      	movs	r3, #1
 8010662:	e191      	b.n	8010988 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8010664:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010668:	2b01      	cmp	r3, #1
 801066a:	d901      	bls.n	8010670 <find_volume+0x1e8>
 801066c:	230d      	movs	r3, #13
 801066e:	e18b      	b.n	8010988 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010672:	333c      	adds	r3, #60	; 0x3c
 8010674:	330b      	adds	r3, #11
 8010676:	4618      	mov	r0, r3
 8010678:	f7fd ff74 	bl	800e564 <ld_word>
 801067c:	4603      	mov	r3, r0
 801067e:	461a      	mov	r2, r3
 8010680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010682:	899b      	ldrh	r3, [r3, #12]
 8010684:	429a      	cmp	r2, r3
 8010686:	d001      	beq.n	801068c <find_volume+0x204>
 8010688:	230d      	movs	r3, #13
 801068a:	e17d      	b.n	8010988 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 801068c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801068e:	333c      	adds	r3, #60	; 0x3c
 8010690:	3316      	adds	r3, #22
 8010692:	4618      	mov	r0, r3
 8010694:	f7fd ff66 	bl	800e564 <ld_word>
 8010698:	4603      	mov	r3, r0
 801069a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 801069c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d106      	bne.n	80106b0 <find_volume+0x228>
 80106a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106a4:	333c      	adds	r3, #60	; 0x3c
 80106a6:	3324      	adds	r3, #36	; 0x24
 80106a8:	4618      	mov	r0, r3
 80106aa:	f7fd ff73 	bl	800e594 <ld_dword>
 80106ae:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80106b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80106b4:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80106b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b8:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 80106bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106be:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80106c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c2:	789b      	ldrb	r3, [r3, #2]
 80106c4:	2b01      	cmp	r3, #1
 80106c6:	d005      	beq.n	80106d4 <find_volume+0x24c>
 80106c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ca:	789b      	ldrb	r3, [r3, #2]
 80106cc:	2b02      	cmp	r3, #2
 80106ce:	d001      	beq.n	80106d4 <find_volume+0x24c>
 80106d0:	230d      	movs	r3, #13
 80106d2:	e159      	b.n	8010988 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80106d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d6:	789b      	ldrb	r3, [r3, #2]
 80106d8:	461a      	mov	r2, r3
 80106da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106dc:	fb02 f303 	mul.w	r3, r2, r3
 80106e0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80106e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106e4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80106e8:	b29a      	uxth	r2, r3
 80106ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106ec:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80106ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106f0:	895b      	ldrh	r3, [r3, #10]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d008      	beq.n	8010708 <find_volume+0x280>
 80106f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106f8:	895b      	ldrh	r3, [r3, #10]
 80106fa:	461a      	mov	r2, r3
 80106fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106fe:	895b      	ldrh	r3, [r3, #10]
 8010700:	3b01      	subs	r3, #1
 8010702:	4013      	ands	r3, r2
 8010704:	2b00      	cmp	r3, #0
 8010706:	d001      	beq.n	801070c <find_volume+0x284>
 8010708:	230d      	movs	r3, #13
 801070a:	e13d      	b.n	8010988 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 801070c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801070e:	333c      	adds	r3, #60	; 0x3c
 8010710:	3311      	adds	r3, #17
 8010712:	4618      	mov	r0, r3
 8010714:	f7fd ff26 	bl	800e564 <ld_word>
 8010718:	4603      	mov	r3, r0
 801071a:	461a      	mov	r2, r3
 801071c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801071e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010722:	891b      	ldrh	r3, [r3, #8]
 8010724:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010726:	8992      	ldrh	r2, [r2, #12]
 8010728:	0952      	lsrs	r2, r2, #5
 801072a:	b292      	uxth	r2, r2
 801072c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010730:	fb02 f201 	mul.w	r2, r2, r1
 8010734:	1a9b      	subs	r3, r3, r2
 8010736:	b29b      	uxth	r3, r3
 8010738:	2b00      	cmp	r3, #0
 801073a:	d003      	beq.n	8010744 <find_volume+0x2bc>
 801073c:	230d      	movs	r3, #13
 801073e:	e123      	b.n	8010988 <find_volume+0x500>
 8010740:	2000078c 	.word	0x2000078c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010746:	333c      	adds	r3, #60	; 0x3c
 8010748:	3313      	adds	r3, #19
 801074a:	4618      	mov	r0, r3
 801074c:	f7fd ff0a 	bl	800e564 <ld_word>
 8010750:	4603      	mov	r3, r0
 8010752:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010756:	2b00      	cmp	r3, #0
 8010758:	d106      	bne.n	8010768 <find_volume+0x2e0>
 801075a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801075c:	333c      	adds	r3, #60	; 0x3c
 801075e:	3320      	adds	r3, #32
 8010760:	4618      	mov	r0, r3
 8010762:	f7fd ff17 	bl	800e594 <ld_dword>
 8010766:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8010768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801076a:	333c      	adds	r3, #60	; 0x3c
 801076c:	330e      	adds	r3, #14
 801076e:	4618      	mov	r0, r3
 8010770:	f7fd fef8 	bl	800e564 <ld_word>
 8010774:	4603      	mov	r3, r0
 8010776:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010778:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801077a:	2b00      	cmp	r3, #0
 801077c:	d101      	bne.n	8010782 <find_volume+0x2fa>
 801077e:	230d      	movs	r3, #13
 8010780:	e102      	b.n	8010988 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010782:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010786:	4413      	add	r3, r2
 8010788:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801078a:	8911      	ldrh	r1, [r2, #8]
 801078c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801078e:	8992      	ldrh	r2, [r2, #12]
 8010790:	0952      	lsrs	r2, r2, #5
 8010792:	b292      	uxth	r2, r2
 8010794:	fbb1 f2f2 	udiv	r2, r1, r2
 8010798:	b292      	uxth	r2, r2
 801079a:	4413      	add	r3, r2
 801079c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801079e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80107a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107a2:	429a      	cmp	r2, r3
 80107a4:	d201      	bcs.n	80107aa <find_volume+0x322>
 80107a6:	230d      	movs	r3, #13
 80107a8:	e0ee      	b.n	8010988 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80107aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80107ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ae:	1ad3      	subs	r3, r2, r3
 80107b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80107b2:	8952      	ldrh	r2, [r2, #10]
 80107b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80107b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80107ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d101      	bne.n	80107c4 <find_volume+0x33c>
 80107c0:	230d      	movs	r3, #13
 80107c2:	e0e1      	b.n	8010988 <find_volume+0x500>
		fmt = FS_FAT32;
 80107c4:	2303      	movs	r3, #3
 80107c6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80107ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107cc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80107d0:	4293      	cmp	r3, r2
 80107d2:	d802      	bhi.n	80107da <find_volume+0x352>
 80107d4:	2302      	movs	r3, #2
 80107d6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80107da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107dc:	f640 72f5 	movw	r2, #4085	; 0xff5
 80107e0:	4293      	cmp	r3, r2
 80107e2:	d802      	bhi.n	80107ea <find_volume+0x362>
 80107e4:	2301      	movs	r3, #1
 80107e6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80107ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ec:	1c9a      	adds	r2, r3, #2
 80107ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107f0:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 80107f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80107f6:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80107f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80107fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80107fc:	441a      	add	r2, r3
 80107fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010800:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8010802:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010806:	441a      	add	r2, r3
 8010808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801080a:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 801080c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010810:	2b03      	cmp	r3, #3
 8010812:	d11e      	bne.n	8010852 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010816:	333c      	adds	r3, #60	; 0x3c
 8010818:	332a      	adds	r3, #42	; 0x2a
 801081a:	4618      	mov	r0, r3
 801081c:	f7fd fea2 	bl	800e564 <ld_word>
 8010820:	4603      	mov	r3, r0
 8010822:	2b00      	cmp	r3, #0
 8010824:	d001      	beq.n	801082a <find_volume+0x3a2>
 8010826:	230d      	movs	r3, #13
 8010828:	e0ae      	b.n	8010988 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801082a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801082c:	891b      	ldrh	r3, [r3, #8]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d001      	beq.n	8010836 <find_volume+0x3ae>
 8010832:	230d      	movs	r3, #13
 8010834:	e0a8      	b.n	8010988 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010838:	333c      	adds	r3, #60	; 0x3c
 801083a:	332c      	adds	r3, #44	; 0x2c
 801083c:	4618      	mov	r0, r3
 801083e:	f7fd fea9 	bl	800e594 <ld_dword>
 8010842:	4602      	mov	r2, r0
 8010844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010846:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801084a:	6a1b      	ldr	r3, [r3, #32]
 801084c:	009b      	lsls	r3, r3, #2
 801084e:	647b      	str	r3, [r7, #68]	; 0x44
 8010850:	e01f      	b.n	8010892 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010854:	891b      	ldrh	r3, [r3, #8]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d101      	bne.n	801085e <find_volume+0x3d6>
 801085a:	230d      	movs	r3, #13
 801085c:	e094      	b.n	8010988 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801085e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010864:	441a      	add	r2, r3
 8010866:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010868:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801086a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801086e:	2b02      	cmp	r3, #2
 8010870:	d103      	bne.n	801087a <find_volume+0x3f2>
 8010872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010874:	6a1b      	ldr	r3, [r3, #32]
 8010876:	005b      	lsls	r3, r3, #1
 8010878:	e00a      	b.n	8010890 <find_volume+0x408>
 801087a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801087c:	6a1a      	ldr	r2, [r3, #32]
 801087e:	4613      	mov	r3, r2
 8010880:	005b      	lsls	r3, r3, #1
 8010882:	4413      	add	r3, r2
 8010884:	085a      	lsrs	r2, r3, #1
 8010886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010888:	6a1b      	ldr	r3, [r3, #32]
 801088a:	f003 0301 	and.w	r3, r3, #1
 801088e:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8010890:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010894:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010898:	899b      	ldrh	r3, [r3, #12]
 801089a:	4619      	mov	r1, r3
 801089c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801089e:	440b      	add	r3, r1
 80108a0:	3b01      	subs	r3, #1
 80108a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80108a4:	8989      	ldrh	r1, [r1, #12]
 80108a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80108aa:	429a      	cmp	r2, r3
 80108ac:	d201      	bcs.n	80108b2 <find_volume+0x42a>
 80108ae:	230d      	movs	r3, #13
 80108b0:	e06a      	b.n	8010988 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80108b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80108b8:	61da      	str	r2, [r3, #28]
 80108ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108bc:	69da      	ldr	r2, [r3, #28]
 80108be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108c0:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 80108c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108c4:	2280      	movs	r2, #128	; 0x80
 80108c6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80108c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80108cc:	2b03      	cmp	r3, #3
 80108ce:	d149      	bne.n	8010964 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80108d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108d2:	333c      	adds	r3, #60	; 0x3c
 80108d4:	3330      	adds	r3, #48	; 0x30
 80108d6:	4618      	mov	r0, r3
 80108d8:	f7fd fe44 	bl	800e564 <ld_word>
 80108dc:	4603      	mov	r3, r0
 80108de:	2b01      	cmp	r3, #1
 80108e0:	d140      	bne.n	8010964 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 80108e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108e4:	3301      	adds	r3, #1
 80108e6:	4619      	mov	r1, r3
 80108e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80108ea:	f7fe f91d 	bl	800eb28 <move_window>
 80108ee:	4603      	mov	r3, r0
 80108f0:	2b00      	cmp	r3, #0
 80108f2:	d137      	bne.n	8010964 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 80108f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108f6:	2200      	movs	r2, #0
 80108f8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80108fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108fc:	333c      	adds	r3, #60	; 0x3c
 80108fe:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010902:	4618      	mov	r0, r3
 8010904:	f7fd fe2e 	bl	800e564 <ld_word>
 8010908:	4603      	mov	r3, r0
 801090a:	461a      	mov	r2, r3
 801090c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010910:	429a      	cmp	r2, r3
 8010912:	d127      	bne.n	8010964 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010916:	333c      	adds	r3, #60	; 0x3c
 8010918:	4618      	mov	r0, r3
 801091a:	f7fd fe3b 	bl	800e594 <ld_dword>
 801091e:	4603      	mov	r3, r0
 8010920:	4a1b      	ldr	r2, [pc, #108]	; (8010990 <find_volume+0x508>)
 8010922:	4293      	cmp	r3, r2
 8010924:	d11e      	bne.n	8010964 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010928:	333c      	adds	r3, #60	; 0x3c
 801092a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801092e:	4618      	mov	r0, r3
 8010930:	f7fd fe30 	bl	800e594 <ld_dword>
 8010934:	4603      	mov	r3, r0
 8010936:	4a17      	ldr	r2, [pc, #92]	; (8010994 <find_volume+0x50c>)
 8010938:	4293      	cmp	r3, r2
 801093a:	d113      	bne.n	8010964 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801093c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801093e:	333c      	adds	r3, #60	; 0x3c
 8010940:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010944:	4618      	mov	r0, r3
 8010946:	f7fd fe25 	bl	800e594 <ld_dword>
 801094a:	4602      	mov	r2, r0
 801094c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801094e:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010950:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010952:	333c      	adds	r3, #60	; 0x3c
 8010954:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010958:	4618      	mov	r0, r3
 801095a:	f7fd fe1b 	bl	800e594 <ld_dword>
 801095e:	4602      	mov	r2, r0
 8010960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010962:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010966:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801096a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801096c:	4b0a      	ldr	r3, [pc, #40]	; (8010998 <find_volume+0x510>)
 801096e:	881b      	ldrh	r3, [r3, #0]
 8010970:	3301      	adds	r3, #1
 8010972:	b29a      	uxth	r2, r3
 8010974:	4b08      	ldr	r3, [pc, #32]	; (8010998 <find_volume+0x510>)
 8010976:	801a      	strh	r2, [r3, #0]
 8010978:	4b07      	ldr	r3, [pc, #28]	; (8010998 <find_volume+0x510>)
 801097a:	881a      	ldrh	r2, [r3, #0]
 801097c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801097e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010980:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010982:	f7fe f869 	bl	800ea58 <clear_lock>
#endif
	return FR_OK;
 8010986:	2300      	movs	r3, #0
}
 8010988:	4618      	mov	r0, r3
 801098a:	3758      	adds	r7, #88	; 0x58
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}
 8010990:	41615252 	.word	0x41615252
 8010994:	61417272 	.word	0x61417272
 8010998:	20000790 	.word	0x20000790

0801099c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801099c:	b580      	push	{r7, lr}
 801099e:	b084      	sub	sp, #16
 80109a0:	af00      	add	r7, sp, #0
 80109a2:	6078      	str	r0, [r7, #4]
 80109a4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80109a6:	2309      	movs	r3, #9
 80109a8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d02e      	beq.n	8010a0e <validate+0x72>
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	681b      	ldr	r3, [r3, #0]
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d02a      	beq.n	8010a0e <validate+0x72>
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	781b      	ldrb	r3, [r3, #0]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d025      	beq.n	8010a0e <validate+0x72>
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	889a      	ldrh	r2, [r3, #4]
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	681b      	ldr	r3, [r3, #0]
 80109ca:	88db      	ldrh	r3, [r3, #6]
 80109cc:	429a      	cmp	r2, r3
 80109ce:	d11e      	bne.n	8010a0e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	4618      	mov	r0, r3
 80109d6:	f7fd fec5 	bl	800e764 <lock_fs>
 80109da:	4603      	mov	r3, r0
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d014      	beq.n	8010a0a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	785b      	ldrb	r3, [r3, #1]
 80109e6:	4618      	mov	r0, r3
 80109e8:	f7fd fd1e 	bl	800e428 <disk_status>
 80109ec:	4603      	mov	r3, r0
 80109ee:	f003 0301 	and.w	r3, r3, #1
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d102      	bne.n	80109fc <validate+0x60>
				res = FR_OK;
 80109f6:	2300      	movs	r3, #0
 80109f8:	73fb      	strb	r3, [r7, #15]
 80109fa:	e008      	b.n	8010a0e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	681b      	ldr	r3, [r3, #0]
 8010a00:	2100      	movs	r1, #0
 8010a02:	4618      	mov	r0, r3
 8010a04:	f7fd fec4 	bl	800e790 <unlock_fs>
 8010a08:	e001      	b.n	8010a0e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8010a0a:	230f      	movs	r3, #15
 8010a0c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010a0e:	7bfb      	ldrb	r3, [r7, #15]
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d102      	bne.n	8010a1a <validate+0x7e>
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	e000      	b.n	8010a1c <validate+0x80>
 8010a1a:	2300      	movs	r3, #0
 8010a1c:	683a      	ldr	r2, [r7, #0]
 8010a1e:	6013      	str	r3, [r2, #0]
	return res;
 8010a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a22:	4618      	mov	r0, r3
 8010a24:	3710      	adds	r7, #16
 8010a26:	46bd      	mov	sp, r7
 8010a28:	bd80      	pop	{r7, pc}
	...

08010a2c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b088      	sub	sp, #32
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	60f8      	str	r0, [r7, #12]
 8010a34:	60b9      	str	r1, [r7, #8]
 8010a36:	4613      	mov	r3, r2
 8010a38:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010a3e:	f107 0310 	add.w	r3, r7, #16
 8010a42:	4618      	mov	r0, r3
 8010a44:	f7ff fc86 	bl	8010354 <get_ldnumber>
 8010a48:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010a4a:	69fb      	ldr	r3, [r7, #28]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	da01      	bge.n	8010a54 <f_mount+0x28>
 8010a50:	230b      	movs	r3, #11
 8010a52:	e048      	b.n	8010ae6 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010a54:	4a26      	ldr	r2, [pc, #152]	; (8010af0 <f_mount+0xc4>)
 8010a56:	69fb      	ldr	r3, [r7, #28]
 8010a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010a5c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010a5e:	69bb      	ldr	r3, [r7, #24]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d00f      	beq.n	8010a84 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010a64:	69b8      	ldr	r0, [r7, #24]
 8010a66:	f7fd fff7 	bl	800ea58 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8010a6a:	69bb      	ldr	r3, [r7, #24]
 8010a6c:	695b      	ldr	r3, [r3, #20]
 8010a6e:	4618      	mov	r0, r3
 8010a70:	f001 f805 	bl	8011a7e <ff_del_syncobj>
 8010a74:	4603      	mov	r3, r0
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d101      	bne.n	8010a7e <f_mount+0x52>
 8010a7a:	2302      	movs	r3, #2
 8010a7c:	e033      	b.n	8010ae6 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010a7e:	69bb      	ldr	r3, [r7, #24]
 8010a80:	2200      	movs	r2, #0
 8010a82:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	2b00      	cmp	r3, #0
 8010a88:	d00f      	beq.n	8010aaa <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8010a90:	69fb      	ldr	r3, [r7, #28]
 8010a92:	b2da      	uxtb	r2, r3
 8010a94:	68fb      	ldr	r3, [r7, #12]
 8010a96:	3314      	adds	r3, #20
 8010a98:	4619      	mov	r1, r3
 8010a9a:	4610      	mov	r0, r2
 8010a9c:	f000 ffd4 	bl	8011a48 <ff_cre_syncobj>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d101      	bne.n	8010aaa <f_mount+0x7e>
 8010aa6:	2302      	movs	r3, #2
 8010aa8:	e01d      	b.n	8010ae6 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010aaa:	68fa      	ldr	r2, [r7, #12]
 8010aac:	4910      	ldr	r1, [pc, #64]	; (8010af0 <f_mount+0xc4>)
 8010aae:	69fb      	ldr	r3, [r7, #28]
 8010ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010ab4:	68fb      	ldr	r3, [r7, #12]
 8010ab6:	2b00      	cmp	r3, #0
 8010ab8:	d002      	beq.n	8010ac0 <f_mount+0x94>
 8010aba:	79fb      	ldrb	r3, [r7, #7]
 8010abc:	2b01      	cmp	r3, #1
 8010abe:	d001      	beq.n	8010ac4 <f_mount+0x98>
 8010ac0:	2300      	movs	r3, #0
 8010ac2:	e010      	b.n	8010ae6 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8010ac4:	f107 010c 	add.w	r1, r7, #12
 8010ac8:	f107 0308 	add.w	r3, r7, #8
 8010acc:	2200      	movs	r2, #0
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f7ff fcda 	bl	8010488 <find_volume>
 8010ad4:	4603      	mov	r3, r0
 8010ad6:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	7dfa      	ldrb	r2, [r7, #23]
 8010adc:	4611      	mov	r1, r2
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f7fd fe56 	bl	800e790 <unlock_fs>
 8010ae4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ae6:	4618      	mov	r0, r3
 8010ae8:	3720      	adds	r7, #32
 8010aea:	46bd      	mov	sp, r7
 8010aec:	bd80      	pop	{r7, pc}
 8010aee:	bf00      	nop
 8010af0:	2000078c 	.word	0x2000078c

08010af4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8010afa:	af00      	add	r7, sp, #0
 8010afc:	f107 030c 	add.w	r3, r7, #12
 8010b00:	6018      	str	r0, [r3, #0]
 8010b02:	f107 0308 	add.w	r3, r7, #8
 8010b06:	6019      	str	r1, [r3, #0]
 8010b08:	1dfb      	adds	r3, r7, #7
 8010b0a:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8010b0c:	f107 030c 	add.w	r3, r7, #12
 8010b10:	681b      	ldr	r3, [r3, #0]
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d101      	bne.n	8010b1a <f_open+0x26>
 8010b16:	2309      	movs	r3, #9
 8010b18:	e24a      	b.n	8010fb0 <f_open+0x4bc>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010b1a:	1dfb      	adds	r3, r7, #7
 8010b1c:	1dfa      	adds	r2, r7, #7
 8010b1e:	7812      	ldrb	r2, [r2, #0]
 8010b20:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8010b24:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8010b26:	1dfb      	adds	r3, r7, #7
 8010b28:	781a      	ldrb	r2, [r3, #0]
 8010b2a:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8010b2e:	f107 0308 	add.w	r3, r7, #8
 8010b32:	4618      	mov	r0, r3
 8010b34:	f7ff fca8 	bl	8010488 <find_volume>
 8010b38:	4603      	mov	r3, r0
 8010b3a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8010b3e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	f040 8221 	bne.w	8010f8a <f_open+0x496>
		dj.obj.fs = fs;
 8010b48:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010b4c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 8010b50:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010b54:	f107 0214 	add.w	r2, r7, #20
 8010b58:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8010b5a:	f107 0308 	add.w	r3, r7, #8
 8010b5e:	681a      	ldr	r2, [r3, #0]
 8010b60:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8010b64:	4611      	mov	r1, r2
 8010b66:	4618      	mov	r0, r3
 8010b68:	f7ff fb7e 	bl	8010268 <follow_path>
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010b72:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d11b      	bne.n	8010bb2 <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010b7a:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8010b7e:	b25b      	sxtb	r3, r3
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	da03      	bge.n	8010b8c <f_open+0x98>
				res = FR_INVALID_NAME;
 8010b84:	2306      	movs	r3, #6
 8010b86:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8010b8a:	e012      	b.n	8010bb2 <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010b8c:	1dfb      	adds	r3, r7, #7
 8010b8e:	781b      	ldrb	r3, [r3, #0]
 8010b90:	f023 0301 	bic.w	r3, r3, #1
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	bf14      	ite	ne
 8010b98:	2301      	movne	r3, #1
 8010b9a:	2300      	moveq	r3, #0
 8010b9c:	b2db      	uxtb	r3, r3
 8010b9e:	461a      	mov	r2, r3
 8010ba0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8010ba4:	4611      	mov	r1, r2
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	f7fd fe0e 	bl	800e7c8 <chk_lock>
 8010bac:	4603      	mov	r3, r0
 8010bae:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010bb2:	1dfb      	adds	r3, r7, #7
 8010bb4:	781b      	ldrb	r3, [r3, #0]
 8010bb6:	f003 031c 	and.w	r3, r3, #28
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	f000 809b 	beq.w	8010cf6 <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 8010bc0:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d019      	beq.n	8010bfc <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010bc8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010bcc:	2b04      	cmp	r3, #4
 8010bce:	d10e      	bne.n	8010bee <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010bd0:	f7fd fe56 	bl	800e880 <enq_lock>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d006      	beq.n	8010be8 <f_open+0xf4>
 8010bda:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8010bde:	4618      	mov	r0, r3
 8010be0:	f7fe ffb4 	bl	800fb4c <dir_register>
 8010be4:	4603      	mov	r3, r0
 8010be6:	e000      	b.n	8010bea <f_open+0xf6>
 8010be8:	2312      	movs	r3, #18
 8010bea:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010bee:	1dfb      	adds	r3, r7, #7
 8010bf0:	1dfa      	adds	r2, r7, #7
 8010bf2:	7812      	ldrb	r2, [r2, #0]
 8010bf4:	f042 0208 	orr.w	r2, r2, #8
 8010bf8:	701a      	strb	r2, [r3, #0]
 8010bfa:	e012      	b.n	8010c22 <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010bfc:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8010c00:	f003 0311 	and.w	r3, r3, #17
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d003      	beq.n	8010c10 <f_open+0x11c>
					res = FR_DENIED;
 8010c08:	2307      	movs	r3, #7
 8010c0a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8010c0e:	e008      	b.n	8010c22 <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8010c10:	1dfb      	adds	r3, r7, #7
 8010c12:	781b      	ldrb	r3, [r3, #0]
 8010c14:	f003 0304 	and.w	r3, r3, #4
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d002      	beq.n	8010c22 <f_open+0x12e>
 8010c1c:	2308      	movs	r3, #8
 8010c1e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8010c22:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	f040 8082 	bne.w	8010d30 <f_open+0x23c>
 8010c2c:	1dfb      	adds	r3, r7, #7
 8010c2e:	781b      	ldrb	r3, [r3, #0]
 8010c30:	f003 0308 	and.w	r3, r3, #8
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d07b      	beq.n	8010d30 <f_open+0x23c>
				dw = GET_FATTIME();
 8010c38:	f7fb ff04 	bl	800ca44 <get_fattime>
 8010c3c:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010c40:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8010c44:	330e      	adds	r3, #14
 8010c46:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f7fd fce0 	bl	800e610 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8010c50:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8010c54:	3316      	adds	r3, #22
 8010c56:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f7fd fcd8 	bl	800e610 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8010c60:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8010c64:	330b      	adds	r3, #11
 8010c66:	2220      	movs	r2, #32
 8010c68:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010c6a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010c6e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8010c72:	4611      	mov	r1, r2
 8010c74:	4618      	mov	r0, r3
 8010c76:	f7fe fcdf 	bl	800f638 <ld_clust>
 8010c7a:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010c7e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010c82:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8010c86:	2200      	movs	r2, #0
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f7fe fcf4 	bl	800f676 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010c8e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8010c92:	331c      	adds	r3, #28
 8010c94:	2100      	movs	r1, #0
 8010c96:	4618      	mov	r0, r3
 8010c98:	f7fd fcba 	bl	800e610 <st_dword>
					fs->wflag = 1;
 8010c9c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010ca0:	2201      	movs	r2, #1
 8010ca2:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010ca4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8010ca8:	2b00      	cmp	r3, #0
 8010caa:	d041      	beq.n	8010d30 <f_open+0x23c>
						dw = fs->winsect;
 8010cac:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cb2:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8010cb6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8010cba:	2200      	movs	r2, #0
 8010cbc:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8010cc0:	4618      	mov	r0, r3
 8010cc2:	f7fe f9de 	bl	800f082 <remove_chain>
 8010cc6:	4603      	mov	r3, r0
 8010cc8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8010ccc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d12d      	bne.n	8010d30 <f_open+0x23c>
							res = move_window(fs, dw);
 8010cd4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010cd8:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f7fd ff23 	bl	800eb28 <move_window>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010ce8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010cec:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8010cf0:	3a01      	subs	r2, #1
 8010cf2:	619a      	str	r2, [r3, #24]
 8010cf4:	e01c      	b.n	8010d30 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010cf6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d118      	bne.n	8010d30 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010cfe:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8010d02:	f003 0310 	and.w	r3, r3, #16
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d003      	beq.n	8010d12 <f_open+0x21e>
					res = FR_NO_FILE;
 8010d0a:	2304      	movs	r3, #4
 8010d0c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8010d10:	e00e      	b.n	8010d30 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8010d12:	1dfb      	adds	r3, r7, #7
 8010d14:	781b      	ldrb	r3, [r3, #0]
 8010d16:	f003 0302 	and.w	r3, r3, #2
 8010d1a:	2b00      	cmp	r3, #0
 8010d1c:	d008      	beq.n	8010d30 <f_open+0x23c>
 8010d1e:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8010d22:	f003 0301 	and.w	r3, r3, #1
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d002      	beq.n	8010d30 <f_open+0x23c>
						res = FR_DENIED;
 8010d2a:	2307      	movs	r3, #7
 8010d2c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8010d30:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010d34:	2b00      	cmp	r3, #0
 8010d36:	d136      	bne.n	8010da6 <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8010d38:	1dfb      	adds	r3, r7, #7
 8010d3a:	781b      	ldrb	r3, [r3, #0]
 8010d3c:	f003 0308 	and.w	r3, r3, #8
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d005      	beq.n	8010d50 <f_open+0x25c>
				mode |= FA_MODIFIED;
 8010d44:	1dfb      	adds	r3, r7, #7
 8010d46:	1dfa      	adds	r2, r7, #7
 8010d48:	7812      	ldrb	r2, [r2, #0]
 8010d4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8010d4e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8010d50:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010d54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010d56:	f107 030c 	add.w	r3, r7, #12
 8010d5a:	681b      	ldr	r3, [r3, #0]
 8010d5c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010d5e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8010d62:	f107 030c 	add.w	r3, r7, #12
 8010d66:	681b      	ldr	r3, [r3, #0]
 8010d68:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010d6a:	1dfb      	adds	r3, r7, #7
 8010d6c:	781b      	ldrb	r3, [r3, #0]
 8010d6e:	f023 0301 	bic.w	r3, r3, #1
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	bf14      	ite	ne
 8010d76:	2301      	movne	r3, #1
 8010d78:	2300      	moveq	r3, #0
 8010d7a:	b2db      	uxtb	r3, r3
 8010d7c:	461a      	mov	r2, r3
 8010d7e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8010d82:	4611      	mov	r1, r2
 8010d84:	4618      	mov	r0, r3
 8010d86:	f7fd fd9d 	bl	800e8c4 <inc_lock>
 8010d8a:	4602      	mov	r2, r0
 8010d8c:	f107 030c 	add.w	r3, r7, #12
 8010d90:	681b      	ldr	r3, [r3, #0]
 8010d92:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010d94:	f107 030c 	add.w	r3, r7, #12
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	691b      	ldr	r3, [r3, #16]
 8010d9c:	2b00      	cmp	r3, #0
 8010d9e:	d102      	bne.n	8010da6 <f_open+0x2b2>
 8010da0:	2302      	movs	r3, #2
 8010da2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010da6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010daa:	2b00      	cmp	r3, #0
 8010dac:	f040 80ed 	bne.w	8010f8a <f_open+0x496>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010db0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010db4:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8010db8:	4611      	mov	r1, r2
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f7fe fc3c 	bl	800f638 <ld_clust>
 8010dc0:	4602      	mov	r2, r0
 8010dc2:	f107 030c 	add.w	r3, r7, #12
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010dca:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8010dce:	331c      	adds	r3, #28
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f7fd fbdf 	bl	800e594 <ld_dword>
 8010dd6:	4602      	mov	r2, r0
 8010dd8:	f107 030c 	add.w	r3, r7, #12
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010de0:	f107 030c 	add.w	r3, r7, #12
 8010de4:	681b      	ldr	r3, [r3, #0]
 8010de6:	2200      	movs	r2, #0
 8010de8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010dea:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8010dee:	f107 030c 	add.w	r3, r7, #12
 8010df2:	681b      	ldr	r3, [r3, #0]
 8010df4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010df6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010dfa:	88da      	ldrh	r2, [r3, #6]
 8010dfc:	f107 030c 	add.w	r3, r7, #12
 8010e00:	681b      	ldr	r3, [r3, #0]
 8010e02:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010e04:	f107 030c 	add.w	r3, r7, #12
 8010e08:	681b      	ldr	r3, [r3, #0]
 8010e0a:	1dfa      	adds	r2, r7, #7
 8010e0c:	7812      	ldrb	r2, [r2, #0]
 8010e0e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010e10:	f107 030c 	add.w	r3, r7, #12
 8010e14:	681b      	ldr	r3, [r3, #0]
 8010e16:	2200      	movs	r2, #0
 8010e18:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010e1a:	f107 030c 	add.w	r3, r7, #12
 8010e1e:	681b      	ldr	r3, [r3, #0]
 8010e20:	2200      	movs	r2, #0
 8010e22:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010e24:	f107 030c 	add.w	r3, r7, #12
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010e2e:	f107 030c 	add.w	r3, r7, #12
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	3330      	adds	r3, #48	; 0x30
 8010e36:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010e3a:	2100      	movs	r1, #0
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	f7fd fc34 	bl	800e6aa <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010e42:	1dfb      	adds	r3, r7, #7
 8010e44:	781b      	ldrb	r3, [r3, #0]
 8010e46:	f003 0320 	and.w	r3, r3, #32
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	f000 809d 	beq.w	8010f8a <f_open+0x496>
 8010e50:	f107 030c 	add.w	r3, r7, #12
 8010e54:	681b      	ldr	r3, [r3, #0]
 8010e56:	68db      	ldr	r3, [r3, #12]
 8010e58:	2b00      	cmp	r3, #0
 8010e5a:	f000 8096 	beq.w	8010f8a <f_open+0x496>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010e5e:	f107 030c 	add.w	r3, r7, #12
 8010e62:	681b      	ldr	r3, [r3, #0]
 8010e64:	68da      	ldr	r2, [r3, #12]
 8010e66:	f107 030c 	add.w	r3, r7, #12
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010e6e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010e72:	895b      	ldrh	r3, [r3, #10]
 8010e74:	461a      	mov	r2, r3
 8010e76:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010e7a:	899b      	ldrh	r3, [r3, #12]
 8010e7c:	fb03 f302 	mul.w	r3, r3, r2
 8010e80:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010e84:	f107 030c 	add.w	r3, r7, #12
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	689b      	ldr	r3, [r3, #8]
 8010e8c:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010e90:	f107 030c 	add.w	r3, r7, #12
 8010e94:	681b      	ldr	r3, [r3, #0]
 8010e96:	68db      	ldr	r3, [r3, #12]
 8010e98:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8010e9c:	e01f      	b.n	8010ede <f_open+0x3ea>
					clst = get_fat(&fp->obj, clst);
 8010e9e:	f107 030c 	add.w	r3, r7, #12
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7fd fefa 	bl	800eca2 <get_fat>
 8010eae:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8010eb2:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8010eb6:	2b01      	cmp	r3, #1
 8010eb8:	d802      	bhi.n	8010ec0 <f_open+0x3cc>
 8010eba:	2302      	movs	r3, #2
 8010ebc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010ec0:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8010ec4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010ec8:	d102      	bne.n	8010ed0 <f_open+0x3dc>
 8010eca:	2301      	movs	r3, #1
 8010ecc:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010ed0:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8010ed4:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8010ed8:	1ad3      	subs	r3, r2, r3
 8010eda:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8010ede:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d105      	bne.n	8010ef2 <f_open+0x3fe>
 8010ee6:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8010eea:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8010eee:	429a      	cmp	r2, r3
 8010ef0:	d8d5      	bhi.n	8010e9e <f_open+0x3aa>
				}
				fp->clust = clst;
 8010ef2:	f107 030c 	add.w	r3, r7, #12
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8010efc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010efe:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	d141      	bne.n	8010f8a <f_open+0x496>
 8010f06:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010f0a:	899b      	ldrh	r3, [r3, #12]
 8010f0c:	461a      	mov	r2, r3
 8010f0e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8010f12:	fbb3 f1f2 	udiv	r1, r3, r2
 8010f16:	fb02 f201 	mul.w	r2, r2, r1
 8010f1a:	1a9b      	subs	r3, r3, r2
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d034      	beq.n	8010f8a <f_open+0x496>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010f20:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010f24:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8010f28:	4618      	mov	r0, r3
 8010f2a:	f7fd fe9b 	bl	800ec64 <clust2sect>
 8010f2e:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 8010f32:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	d103      	bne.n	8010f42 <f_open+0x44e>
						res = FR_INT_ERR;
 8010f3a:	2302      	movs	r3, #2
 8010f3c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8010f40:	e023      	b.n	8010f8a <f_open+0x496>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010f42:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010f46:	899b      	ldrh	r3, [r3, #12]
 8010f48:	461a      	mov	r2, r3
 8010f4a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8010f4e:	fbb3 f2f2 	udiv	r2, r3, r2
 8010f52:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8010f56:	441a      	add	r2, r3
 8010f58:	f107 030c 	add.w	r3, r7, #12
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010f60:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010f64:	7858      	ldrb	r0, [r3, #1]
 8010f66:	f107 030c 	add.w	r3, r7, #12
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010f70:	f107 030c 	add.w	r3, r7, #12
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	6a1a      	ldr	r2, [r3, #32]
 8010f78:	2301      	movs	r3, #1
 8010f7a:	f7fd fa95 	bl	800e4a8 <disk_read>
 8010f7e:	4603      	mov	r3, r0
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d002      	beq.n	8010f8a <f_open+0x496>
 8010f84:	2301      	movs	r3, #1
 8010f86:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010f8a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d004      	beq.n	8010f9c <f_open+0x4a8>
 8010f92:	f107 030c 	add.w	r3, r7, #12
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	2200      	movs	r2, #0
 8010f9a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010f9c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010fa0:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 8010fa4:	4611      	mov	r1, r2
 8010fa6:	4618      	mov	r0, r3
 8010fa8:	f7fd fbf2 	bl	800e790 <unlock_fs>
 8010fac:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	f507 771a 	add.w	r7, r7, #616	; 0x268
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd80      	pop	{r7, pc}

08010fba <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8010fba:	b580      	push	{r7, lr}
 8010fbc:	b08c      	sub	sp, #48	; 0x30
 8010fbe:	af00      	add	r7, sp, #0
 8010fc0:	60f8      	str	r0, [r7, #12]
 8010fc2:	60b9      	str	r1, [r7, #8]
 8010fc4:	607a      	str	r2, [r7, #4]
 8010fc6:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8010fc8:	68bb      	ldr	r3, [r7, #8]
 8010fca:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8010fcc:	683b      	ldr	r3, [r7, #0]
 8010fce:	2200      	movs	r2, #0
 8010fd0:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	f107 0210 	add.w	r2, r7, #16
 8010fd8:	4611      	mov	r1, r2
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f7ff fcde 	bl	801099c <validate>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010fe6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d107      	bne.n	8010ffe <f_write+0x44>
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	7d5b      	ldrb	r3, [r3, #21]
 8010ff2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010ff6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d009      	beq.n	8011012 <f_write+0x58>
 8010ffe:	693b      	ldr	r3, [r7, #16]
 8011000:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8011004:	4611      	mov	r1, r2
 8011006:	4618      	mov	r0, r3
 8011008:	f7fd fbc2 	bl	800e790 <unlock_fs>
 801100c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011010:	e192      	b.n	8011338 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8011012:	68fb      	ldr	r3, [r7, #12]
 8011014:	7d1b      	ldrb	r3, [r3, #20]
 8011016:	f003 0302 	and.w	r3, r3, #2
 801101a:	2b00      	cmp	r3, #0
 801101c:	d106      	bne.n	801102c <f_write+0x72>
 801101e:	693b      	ldr	r3, [r7, #16]
 8011020:	2107      	movs	r1, #7
 8011022:	4618      	mov	r0, r3
 8011024:	f7fd fbb4 	bl	800e790 <unlock_fs>
 8011028:	2307      	movs	r3, #7
 801102a:	e185      	b.n	8011338 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	699a      	ldr	r2, [r3, #24]
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	441a      	add	r2, r3
 8011034:	68fb      	ldr	r3, [r7, #12]
 8011036:	699b      	ldr	r3, [r3, #24]
 8011038:	429a      	cmp	r2, r3
 801103a:	f080 816a 	bcs.w	8011312 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801103e:	68fb      	ldr	r3, [r7, #12]
 8011040:	699b      	ldr	r3, [r3, #24]
 8011042:	43db      	mvns	r3, r3
 8011044:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011046:	e164      	b.n	8011312 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011048:	68fb      	ldr	r3, [r7, #12]
 801104a:	699b      	ldr	r3, [r3, #24]
 801104c:	693a      	ldr	r2, [r7, #16]
 801104e:	8992      	ldrh	r2, [r2, #12]
 8011050:	fbb3 f1f2 	udiv	r1, r3, r2
 8011054:	fb02 f201 	mul.w	r2, r2, r1
 8011058:	1a9b      	subs	r3, r3, r2
 801105a:	2b00      	cmp	r3, #0
 801105c:	f040 810f 	bne.w	801127e <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011060:	68fb      	ldr	r3, [r7, #12]
 8011062:	699b      	ldr	r3, [r3, #24]
 8011064:	693a      	ldr	r2, [r7, #16]
 8011066:	8992      	ldrh	r2, [r2, #12]
 8011068:	fbb3 f3f2 	udiv	r3, r3, r2
 801106c:	693a      	ldr	r2, [r7, #16]
 801106e:	8952      	ldrh	r2, [r2, #10]
 8011070:	3a01      	subs	r2, #1
 8011072:	4013      	ands	r3, r2
 8011074:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011076:	69bb      	ldr	r3, [r7, #24]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d14d      	bne.n	8011118 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 801107c:	68fb      	ldr	r3, [r7, #12]
 801107e:	699b      	ldr	r3, [r3, #24]
 8011080:	2b00      	cmp	r3, #0
 8011082:	d10c      	bne.n	801109e <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011084:	68fb      	ldr	r3, [r7, #12]
 8011086:	689b      	ldr	r3, [r3, #8]
 8011088:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801108a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801108c:	2b00      	cmp	r3, #0
 801108e:	d11a      	bne.n	80110c6 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011090:	68fb      	ldr	r3, [r7, #12]
 8011092:	2100      	movs	r1, #0
 8011094:	4618      	mov	r0, r3
 8011096:	f7fe f859 	bl	800f14c <create_chain>
 801109a:	62b8      	str	r0, [r7, #40]	; 0x28
 801109c:	e013      	b.n	80110c6 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110a2:	2b00      	cmp	r3, #0
 80110a4:	d007      	beq.n	80110b6 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	699b      	ldr	r3, [r3, #24]
 80110aa:	4619      	mov	r1, r3
 80110ac:	68f8      	ldr	r0, [r7, #12]
 80110ae:	f7fe f8e5 	bl	800f27c <clmt_clust>
 80110b2:	62b8      	str	r0, [r7, #40]	; 0x28
 80110b4:	e007      	b.n	80110c6 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80110b6:	68fa      	ldr	r2, [r7, #12]
 80110b8:	68fb      	ldr	r3, [r7, #12]
 80110ba:	69db      	ldr	r3, [r3, #28]
 80110bc:	4619      	mov	r1, r3
 80110be:	4610      	mov	r0, r2
 80110c0:	f7fe f844 	bl	800f14c <create_chain>
 80110c4:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80110c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	f000 8127 	beq.w	801131c <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80110ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110d0:	2b01      	cmp	r3, #1
 80110d2:	d109      	bne.n	80110e8 <f_write+0x12e>
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	2202      	movs	r2, #2
 80110d8:	755a      	strb	r2, [r3, #21]
 80110da:	693b      	ldr	r3, [r7, #16]
 80110dc:	2102      	movs	r1, #2
 80110de:	4618      	mov	r0, r3
 80110e0:	f7fd fb56 	bl	800e790 <unlock_fs>
 80110e4:	2302      	movs	r3, #2
 80110e6:	e127      	b.n	8011338 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80110e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80110ee:	d109      	bne.n	8011104 <f_write+0x14a>
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	2201      	movs	r2, #1
 80110f4:	755a      	strb	r2, [r3, #21]
 80110f6:	693b      	ldr	r3, [r7, #16]
 80110f8:	2101      	movs	r1, #1
 80110fa:	4618      	mov	r0, r3
 80110fc:	f7fd fb48 	bl	800e790 <unlock_fs>
 8011100:	2301      	movs	r3, #1
 8011102:	e119      	b.n	8011338 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011108:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	689b      	ldr	r3, [r3, #8]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d102      	bne.n	8011118 <f_write+0x15e>
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011116:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	7d1b      	ldrb	r3, [r3, #20]
 801111c:	b25b      	sxtb	r3, r3
 801111e:	2b00      	cmp	r3, #0
 8011120:	da1d      	bge.n	801115e <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011122:	693b      	ldr	r3, [r7, #16]
 8011124:	7858      	ldrb	r0, [r3, #1]
 8011126:	68fb      	ldr	r3, [r7, #12]
 8011128:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801112c:	68fb      	ldr	r3, [r7, #12]
 801112e:	6a1a      	ldr	r2, [r3, #32]
 8011130:	2301      	movs	r3, #1
 8011132:	f7fd f9d9 	bl	800e4e8 <disk_write>
 8011136:	4603      	mov	r3, r0
 8011138:	2b00      	cmp	r3, #0
 801113a:	d009      	beq.n	8011150 <f_write+0x196>
 801113c:	68fb      	ldr	r3, [r7, #12]
 801113e:	2201      	movs	r2, #1
 8011140:	755a      	strb	r2, [r3, #21]
 8011142:	693b      	ldr	r3, [r7, #16]
 8011144:	2101      	movs	r1, #1
 8011146:	4618      	mov	r0, r3
 8011148:	f7fd fb22 	bl	800e790 <unlock_fs>
 801114c:	2301      	movs	r3, #1
 801114e:	e0f3      	b.n	8011338 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	7d1b      	ldrb	r3, [r3, #20]
 8011154:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011158:	b2da      	uxtb	r2, r3
 801115a:	68fb      	ldr	r3, [r7, #12]
 801115c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801115e:	693a      	ldr	r2, [r7, #16]
 8011160:	68fb      	ldr	r3, [r7, #12]
 8011162:	69db      	ldr	r3, [r3, #28]
 8011164:	4619      	mov	r1, r3
 8011166:	4610      	mov	r0, r2
 8011168:	f7fd fd7c 	bl	800ec64 <clust2sect>
 801116c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801116e:	697b      	ldr	r3, [r7, #20]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d109      	bne.n	8011188 <f_write+0x1ce>
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	2202      	movs	r2, #2
 8011178:	755a      	strb	r2, [r3, #21]
 801117a:	693b      	ldr	r3, [r7, #16]
 801117c:	2102      	movs	r1, #2
 801117e:	4618      	mov	r0, r3
 8011180:	f7fd fb06 	bl	800e790 <unlock_fs>
 8011184:	2302      	movs	r3, #2
 8011186:	e0d7      	b.n	8011338 <f_write+0x37e>
			sect += csect;
 8011188:	697a      	ldr	r2, [r7, #20]
 801118a:	69bb      	ldr	r3, [r7, #24]
 801118c:	4413      	add	r3, r2
 801118e:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011190:	693b      	ldr	r3, [r7, #16]
 8011192:	899b      	ldrh	r3, [r3, #12]
 8011194:	461a      	mov	r2, r3
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	fbb3 f3f2 	udiv	r3, r3, r2
 801119c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801119e:	6a3b      	ldr	r3, [r7, #32]
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d048      	beq.n	8011236 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80111a4:	69ba      	ldr	r2, [r7, #24]
 80111a6:	6a3b      	ldr	r3, [r7, #32]
 80111a8:	4413      	add	r3, r2
 80111aa:	693a      	ldr	r2, [r7, #16]
 80111ac:	8952      	ldrh	r2, [r2, #10]
 80111ae:	4293      	cmp	r3, r2
 80111b0:	d905      	bls.n	80111be <f_write+0x204>
					cc = fs->csize - csect;
 80111b2:	693b      	ldr	r3, [r7, #16]
 80111b4:	895b      	ldrh	r3, [r3, #10]
 80111b6:	461a      	mov	r2, r3
 80111b8:	69bb      	ldr	r3, [r7, #24]
 80111ba:	1ad3      	subs	r3, r2, r3
 80111bc:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80111be:	693b      	ldr	r3, [r7, #16]
 80111c0:	7858      	ldrb	r0, [r3, #1]
 80111c2:	6a3b      	ldr	r3, [r7, #32]
 80111c4:	697a      	ldr	r2, [r7, #20]
 80111c6:	69f9      	ldr	r1, [r7, #28]
 80111c8:	f7fd f98e 	bl	800e4e8 <disk_write>
 80111cc:	4603      	mov	r3, r0
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d009      	beq.n	80111e6 <f_write+0x22c>
 80111d2:	68fb      	ldr	r3, [r7, #12]
 80111d4:	2201      	movs	r2, #1
 80111d6:	755a      	strb	r2, [r3, #21]
 80111d8:	693b      	ldr	r3, [r7, #16]
 80111da:	2101      	movs	r1, #1
 80111dc:	4618      	mov	r0, r3
 80111de:	f7fd fad7 	bl	800e790 <unlock_fs>
 80111e2:	2301      	movs	r3, #1
 80111e4:	e0a8      	b.n	8011338 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	6a1a      	ldr	r2, [r3, #32]
 80111ea:	697b      	ldr	r3, [r7, #20]
 80111ec:	1ad3      	subs	r3, r2, r3
 80111ee:	6a3a      	ldr	r2, [r7, #32]
 80111f0:	429a      	cmp	r2, r3
 80111f2:	d918      	bls.n	8011226 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	6a1a      	ldr	r2, [r3, #32]
 80111fe:	697b      	ldr	r3, [r7, #20]
 8011200:	1ad3      	subs	r3, r2, r3
 8011202:	693a      	ldr	r2, [r7, #16]
 8011204:	8992      	ldrh	r2, [r2, #12]
 8011206:	fb02 f303 	mul.w	r3, r2, r3
 801120a:	69fa      	ldr	r2, [r7, #28]
 801120c:	18d1      	adds	r1, r2, r3
 801120e:	693b      	ldr	r3, [r7, #16]
 8011210:	899b      	ldrh	r3, [r3, #12]
 8011212:	461a      	mov	r2, r3
 8011214:	f7fd fa28 	bl	800e668 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	7d1b      	ldrb	r3, [r3, #20]
 801121c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011220:	b2da      	uxtb	r2, r3
 8011222:	68fb      	ldr	r3, [r7, #12]
 8011224:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011226:	693b      	ldr	r3, [r7, #16]
 8011228:	899b      	ldrh	r3, [r3, #12]
 801122a:	461a      	mov	r2, r3
 801122c:	6a3b      	ldr	r3, [r7, #32]
 801122e:	fb02 f303 	mul.w	r3, r2, r3
 8011232:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011234:	e050      	b.n	80112d8 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	6a1b      	ldr	r3, [r3, #32]
 801123a:	697a      	ldr	r2, [r7, #20]
 801123c:	429a      	cmp	r2, r3
 801123e:	d01b      	beq.n	8011278 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	699a      	ldr	r2, [r3, #24]
 8011244:	68fb      	ldr	r3, [r7, #12]
 8011246:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011248:	429a      	cmp	r2, r3
 801124a:	d215      	bcs.n	8011278 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 801124c:	693b      	ldr	r3, [r7, #16]
 801124e:	7858      	ldrb	r0, [r3, #1]
 8011250:	68fb      	ldr	r3, [r7, #12]
 8011252:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011256:	2301      	movs	r3, #1
 8011258:	697a      	ldr	r2, [r7, #20]
 801125a:	f7fd f925 	bl	800e4a8 <disk_read>
 801125e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011260:	2b00      	cmp	r3, #0
 8011262:	d009      	beq.n	8011278 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8011264:	68fb      	ldr	r3, [r7, #12]
 8011266:	2201      	movs	r2, #1
 8011268:	755a      	strb	r2, [r3, #21]
 801126a:	693b      	ldr	r3, [r7, #16]
 801126c:	2101      	movs	r1, #1
 801126e:	4618      	mov	r0, r3
 8011270:	f7fd fa8e 	bl	800e790 <unlock_fs>
 8011274:	2301      	movs	r3, #1
 8011276:	e05f      	b.n	8011338 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	697a      	ldr	r2, [r7, #20]
 801127c:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801127e:	693b      	ldr	r3, [r7, #16]
 8011280:	899b      	ldrh	r3, [r3, #12]
 8011282:	4618      	mov	r0, r3
 8011284:	68fb      	ldr	r3, [r7, #12]
 8011286:	699b      	ldr	r3, [r3, #24]
 8011288:	693a      	ldr	r2, [r7, #16]
 801128a:	8992      	ldrh	r2, [r2, #12]
 801128c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011290:	fb02 f201 	mul.w	r2, r2, r1
 8011294:	1a9b      	subs	r3, r3, r2
 8011296:	1ac3      	subs	r3, r0, r3
 8011298:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801129a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	429a      	cmp	r2, r3
 80112a0:	d901      	bls.n	80112a6 <f_write+0x2ec>
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80112ac:	68fb      	ldr	r3, [r7, #12]
 80112ae:	699b      	ldr	r3, [r3, #24]
 80112b0:	693a      	ldr	r2, [r7, #16]
 80112b2:	8992      	ldrh	r2, [r2, #12]
 80112b4:	fbb3 f0f2 	udiv	r0, r3, r2
 80112b8:	fb02 f200 	mul.w	r2, r2, r0
 80112bc:	1a9b      	subs	r3, r3, r2
 80112be:	440b      	add	r3, r1
 80112c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112c2:	69f9      	ldr	r1, [r7, #28]
 80112c4:	4618      	mov	r0, r3
 80112c6:	f7fd f9cf 	bl	800e668 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80112ca:	68fb      	ldr	r3, [r7, #12]
 80112cc:	7d1b      	ldrb	r3, [r3, #20]
 80112ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80112d2:	b2da      	uxtb	r2, r3
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80112d8:	69fa      	ldr	r2, [r7, #28]
 80112da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112dc:	4413      	add	r3, r2
 80112de:	61fb      	str	r3, [r7, #28]
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	699a      	ldr	r2, [r3, #24]
 80112e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112e6:	441a      	add	r2, r3
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	619a      	str	r2, [r3, #24]
 80112ec:	68fb      	ldr	r3, [r7, #12]
 80112ee:	68da      	ldr	r2, [r3, #12]
 80112f0:	68fb      	ldr	r3, [r7, #12]
 80112f2:	699b      	ldr	r3, [r3, #24]
 80112f4:	429a      	cmp	r2, r3
 80112f6:	bf38      	it	cc
 80112f8:	461a      	movcc	r2, r3
 80112fa:	68fb      	ldr	r3, [r7, #12]
 80112fc:	60da      	str	r2, [r3, #12]
 80112fe:	683b      	ldr	r3, [r7, #0]
 8011300:	681a      	ldr	r2, [r3, #0]
 8011302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011304:	441a      	add	r2, r3
 8011306:	683b      	ldr	r3, [r7, #0]
 8011308:	601a      	str	r2, [r3, #0]
 801130a:	687a      	ldr	r2, [r7, #4]
 801130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801130e:	1ad3      	subs	r3, r2, r3
 8011310:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	2b00      	cmp	r3, #0
 8011316:	f47f ae97 	bne.w	8011048 <f_write+0x8e>
 801131a:	e000      	b.n	801131e <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801131c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	7d1b      	ldrb	r3, [r3, #20]
 8011322:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011326:	b2da      	uxtb	r2, r3
 8011328:	68fb      	ldr	r3, [r7, #12]
 801132a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801132c:	693b      	ldr	r3, [r7, #16]
 801132e:	2100      	movs	r1, #0
 8011330:	4618      	mov	r0, r3
 8011332:	f7fd fa2d 	bl	800e790 <unlock_fs>
 8011336:	2300      	movs	r3, #0
}
 8011338:	4618      	mov	r0, r3
 801133a:	3730      	adds	r7, #48	; 0x30
 801133c:	46bd      	mov	sp, r7
 801133e:	bd80      	pop	{r7, pc}

08011340 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	b086      	sub	sp, #24
 8011344:	af00      	add	r7, sp, #0
 8011346:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	f107 0208 	add.w	r2, r7, #8
 801134e:	4611      	mov	r1, r2
 8011350:	4618      	mov	r0, r3
 8011352:	f7ff fb23 	bl	801099c <validate>
 8011356:	4603      	mov	r3, r0
 8011358:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801135a:	7dfb      	ldrb	r3, [r7, #23]
 801135c:	2b00      	cmp	r3, #0
 801135e:	d16d      	bne.n	801143c <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	7d1b      	ldrb	r3, [r3, #20]
 8011364:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011368:	2b00      	cmp	r3, #0
 801136a:	d067      	beq.n	801143c <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	7d1b      	ldrb	r3, [r3, #20]
 8011370:	b25b      	sxtb	r3, r3
 8011372:	2b00      	cmp	r3, #0
 8011374:	da1a      	bge.n	80113ac <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011376:	68bb      	ldr	r3, [r7, #8]
 8011378:	7858      	ldrb	r0, [r3, #1]
 801137a:	687b      	ldr	r3, [r7, #4]
 801137c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	6a1a      	ldr	r2, [r3, #32]
 8011384:	2301      	movs	r3, #1
 8011386:	f7fd f8af 	bl	800e4e8 <disk_write>
 801138a:	4603      	mov	r3, r0
 801138c:	2b00      	cmp	r3, #0
 801138e:	d006      	beq.n	801139e <f_sync+0x5e>
 8011390:	68bb      	ldr	r3, [r7, #8]
 8011392:	2101      	movs	r1, #1
 8011394:	4618      	mov	r0, r3
 8011396:	f7fd f9fb 	bl	800e790 <unlock_fs>
 801139a:	2301      	movs	r3, #1
 801139c:	e055      	b.n	801144a <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 801139e:	687b      	ldr	r3, [r7, #4]
 80113a0:	7d1b      	ldrb	r3, [r3, #20]
 80113a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80113a6:	b2da      	uxtb	r2, r3
 80113a8:	687b      	ldr	r3, [r7, #4]
 80113aa:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80113ac:	f7fb fb4a 	bl	800ca44 <get_fattime>
 80113b0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80113b2:	68ba      	ldr	r2, [r7, #8]
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113b8:	4619      	mov	r1, r3
 80113ba:	4610      	mov	r0, r2
 80113bc:	f7fd fbb4 	bl	800eb28 <move_window>
 80113c0:	4603      	mov	r3, r0
 80113c2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80113c4:	7dfb      	ldrb	r3, [r7, #23]
 80113c6:	2b00      	cmp	r3, #0
 80113c8:	d138      	bne.n	801143c <f_sync+0xfc>
					dir = fp->dir_ptr;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80113ce:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80113d0:	68fb      	ldr	r3, [r7, #12]
 80113d2:	330b      	adds	r3, #11
 80113d4:	781a      	ldrb	r2, [r3, #0]
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	330b      	adds	r3, #11
 80113da:	f042 0220 	orr.w	r2, r2, #32
 80113de:	b2d2      	uxtb	r2, r2
 80113e0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80113e2:	687b      	ldr	r3, [r7, #4]
 80113e4:	6818      	ldr	r0, [r3, #0]
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	689b      	ldr	r3, [r3, #8]
 80113ea:	461a      	mov	r2, r3
 80113ec:	68f9      	ldr	r1, [r7, #12]
 80113ee:	f7fe f942 	bl	800f676 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80113f2:	68fb      	ldr	r3, [r7, #12]
 80113f4:	f103 021c 	add.w	r2, r3, #28
 80113f8:	687b      	ldr	r3, [r7, #4]
 80113fa:	68db      	ldr	r3, [r3, #12]
 80113fc:	4619      	mov	r1, r3
 80113fe:	4610      	mov	r0, r2
 8011400:	f7fd f906 	bl	800e610 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011404:	68fb      	ldr	r3, [r7, #12]
 8011406:	3316      	adds	r3, #22
 8011408:	6939      	ldr	r1, [r7, #16]
 801140a:	4618      	mov	r0, r3
 801140c:	f7fd f900 	bl	800e610 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	3312      	adds	r3, #18
 8011414:	2100      	movs	r1, #0
 8011416:	4618      	mov	r0, r3
 8011418:	f7fd f8df 	bl	800e5da <st_word>
					fs->wflag = 1;
 801141c:	68bb      	ldr	r3, [r7, #8]
 801141e:	2201      	movs	r2, #1
 8011420:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	4618      	mov	r0, r3
 8011426:	f7fd fbad 	bl	800eb84 <sync_fs>
 801142a:	4603      	mov	r3, r0
 801142c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	7d1b      	ldrb	r3, [r3, #20]
 8011432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011436:	b2da      	uxtb	r2, r3
 8011438:	687b      	ldr	r3, [r7, #4]
 801143a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801143c:	68bb      	ldr	r3, [r7, #8]
 801143e:	7dfa      	ldrb	r2, [r7, #23]
 8011440:	4611      	mov	r1, r2
 8011442:	4618      	mov	r0, r3
 8011444:	f7fd f9a4 	bl	800e790 <unlock_fs>
 8011448:	7dfb      	ldrb	r3, [r7, #23]
}
 801144a:	4618      	mov	r0, r3
 801144c:	3718      	adds	r7, #24
 801144e:	46bd      	mov	sp, r7
 8011450:	bd80      	pop	{r7, pc}

08011452 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011452:	b580      	push	{r7, lr}
 8011454:	b084      	sub	sp, #16
 8011456:	af00      	add	r7, sp, #0
 8011458:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801145a:	6878      	ldr	r0, [r7, #4]
 801145c:	f7ff ff70 	bl	8011340 <f_sync>
 8011460:	4603      	mov	r3, r0
 8011462:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011464:	7bfb      	ldrb	r3, [r7, #15]
 8011466:	2b00      	cmp	r3, #0
 8011468:	d11d      	bne.n	80114a6 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	f107 0208 	add.w	r2, r7, #8
 8011470:	4611      	mov	r1, r2
 8011472:	4618      	mov	r0, r3
 8011474:	f7ff fa92 	bl	801099c <validate>
 8011478:	4603      	mov	r3, r0
 801147a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801147c:	7bfb      	ldrb	r3, [r7, #15]
 801147e:	2b00      	cmp	r3, #0
 8011480:	d111      	bne.n	80114a6 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	691b      	ldr	r3, [r3, #16]
 8011486:	4618      	mov	r0, r3
 8011488:	f7fd faaa 	bl	800e9e0 <dec_lock>
 801148c:	4603      	mov	r3, r0
 801148e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011490:	7bfb      	ldrb	r3, [r7, #15]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d102      	bne.n	801149c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	2200      	movs	r2, #0
 801149a:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 801149c:	68bb      	ldr	r3, [r7, #8]
 801149e:	2100      	movs	r1, #0
 80114a0:	4618      	mov	r0, r3
 80114a2:	f7fd f975 	bl	800e790 <unlock_fs>
#endif
		}
	}
	return res;
 80114a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80114a8:	4618      	mov	r0, r3
 80114aa:	3710      	adds	r7, #16
 80114ac:	46bd      	mov	sp, r7
 80114ae:	bd80      	pop	{r7, pc}

080114b0 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80114b0:	b580      	push	{r7, lr}
 80114b2:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 80114b6:	af00      	add	r7, sp, #0
 80114b8:	1d3b      	adds	r3, r7, #4
 80114ba:	6018      	str	r0, [r3, #0]
 80114bc:	463b      	mov	r3, r7
 80114be:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80114c0:	f507 7102 	add.w	r1, r7, #520	; 0x208
 80114c4:	1d3b      	adds	r3, r7, #4
 80114c6:	2200      	movs	r2, #0
 80114c8:	4618      	mov	r0, r3
 80114ca:	f7fe ffdd 	bl	8010488 <find_volume>
 80114ce:	4603      	mov	r3, r0
 80114d0:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
	if (res == FR_OK) {
 80114d4:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d127      	bne.n	801152c <f_stat+0x7c>
		INIT_NAMBUF(dj.obj.fs);
 80114dc:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80114e0:	f107 0208 	add.w	r2, r7, #8
 80114e4:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 80114e6:	1d3b      	adds	r3, r7, #4
 80114e8:	681a      	ldr	r2, [r3, #0]
 80114ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80114ee:	4611      	mov	r1, r2
 80114f0:	4618      	mov	r0, r3
 80114f2:	f7fe feb9 	bl	8010268 <follow_path>
 80114f6:	4603      	mov	r3, r0
 80114f8:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		if (res == FR_OK) {				/* Follow completed */
 80114fc:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8011500:	2b00      	cmp	r3, #0
 8011502:	d113      	bne.n	801152c <f_stat+0x7c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8011504:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8011508:	b25b      	sxtb	r3, r3
 801150a:	2b00      	cmp	r3, #0
 801150c:	da03      	bge.n	8011516 <f_stat+0x66>
				res = FR_INVALID_NAME;
 801150e:	2306      	movs	r3, #6
 8011510:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 8011514:	e00a      	b.n	801152c <f_stat+0x7c>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8011516:	463b      	mov	r3, r7
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d006      	beq.n	801152c <f_stat+0x7c>
 801151e:	463b      	mov	r3, r7
 8011520:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011524:	6819      	ldr	r1, [r3, #0]
 8011526:	4610      	mov	r0, r2
 8011528:	f7fe fc08 	bl	800fd3c <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 801152c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8011530:	f897 223f 	ldrb.w	r2, [r7, #575]	; 0x23f
 8011534:	4611      	mov	r1, r2
 8011536:	4618      	mov	r0, r3
 8011538:	f7fd f92a 	bl	800e790 <unlock_fs>
 801153c:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
}
 8011540:	4618      	mov	r0, r3
 8011542:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8011546:	46bd      	mov	sp, r7
 8011548:	bd80      	pop	{r7, pc}

0801154a <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 801154a:	b580      	push	{r7, lr}
 801154c:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8011550:	af00      	add	r7, sp, #0
 8011552:	1d3b      	adds	r3, r7, #4
 8011554:	6018      	str	r0, [r3, #0]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011556:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 801155a:	1d3b      	adds	r3, r7, #4
 801155c:	2202      	movs	r2, #2
 801155e:	4618      	mov	r0, r3
 8011560:	f7fe ff92 	bl	8010488 <find_volume>
 8011564:	4603      	mov	r3, r0
 8011566:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
	dj.obj.fs = fs;
 801156a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801156e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	if (res == FR_OK) {
 8011572:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8011576:	2b00      	cmp	r3, #0
 8011578:	f040 8134 	bne.w	80117e4 <f_mkdir+0x29a>
		INIT_NAMBUF(fs);
 801157c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8011580:	f107 020c 	add.w	r2, r7, #12
 8011584:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);			/* Follow the file path */
 8011586:	1d3b      	adds	r3, r7, #4
 8011588:	681a      	ldr	r2, [r3, #0]
 801158a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801158e:	4611      	mov	r1, r2
 8011590:	4618      	mov	r0, r3
 8011592:	f7fe fe69 	bl	8010268 <follow_path>
 8011596:	4603      	mov	r3, r0
 8011598:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 801159c:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d102      	bne.n	80115aa <f_mkdir+0x60>
 80115a4:	2308      	movs	r3, #8
 80115a6:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80115aa:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80115ae:	2b04      	cmp	r3, #4
 80115b0:	f040 8118 	bne.w	80117e4 <f_mkdir+0x29a>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80115b4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80115b8:	2100      	movs	r1, #0
 80115ba:	4618      	mov	r0, r3
 80115bc:	f7fd fdc6 	bl	800f14c <create_chain>
 80115c0:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80115c4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80115c8:	895b      	ldrh	r3, [r3, #10]
 80115ca:	461a      	mov	r2, r3
 80115cc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80115d0:	899b      	ldrh	r3, [r3, #12]
 80115d2:	fb03 f302 	mul.w	r3, r3, r2
 80115d6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
			res = FR_OK;
 80115da:	2300      	movs	r3, #0
 80115dc:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80115e0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80115e4:	2b00      	cmp	r3, #0
 80115e6:	d102      	bne.n	80115ee <f_mkdir+0xa4>
 80115e8:	2307      	movs	r3, #7
 80115ea:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 1) res = FR_INT_ERR;
 80115ee:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80115f2:	2b01      	cmp	r3, #1
 80115f4:	d102      	bne.n	80115fc <f_mkdir+0xb2>
 80115f6:	2302      	movs	r3, #2
 80115f8:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 80115fc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8011600:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011604:	d102      	bne.n	801160c <f_mkdir+0xc2>
 8011606:	2301      	movs	r3, #1
 8011608:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 801160c:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8011610:	2b00      	cmp	r3, #0
 8011612:	d107      	bne.n	8011624 <f_mkdir+0xda>
 8011614:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8011618:	4618      	mov	r0, r3
 801161a:	f7fd fa41 	bl	800eaa0 <sync_window>
 801161e:	4603      	mov	r3, r0
 8011620:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			tm = GET_FATTIME();
 8011624:	f7fb fa0e 	bl	800ca44 <get_fattime>
 8011628:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
			if (res == FR_OK) {					/* Initialize the new directory table */
 801162c:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8011630:	2b00      	cmp	r3, #0
 8011632:	f040 8094 	bne.w	801175e <f_mkdir+0x214>
				dsc = clust2sect(fs, dcl);
 8011636:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801163a:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 801163e:	4618      	mov	r0, r3
 8011640:	f7fd fb10 	bl	800ec64 <clust2sect>
 8011644:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
				dir = fs->win;
 8011648:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801164c:	333c      	adds	r3, #60	; 0x3c
 801164e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				mem_set(dir, 0, SS(fs));
 8011652:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8011656:	899b      	ldrh	r3, [r3, #12]
 8011658:	461a      	mov	r2, r3
 801165a:	2100      	movs	r1, #0
 801165c:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8011660:	f7fd f823 	bl	800e6aa <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8011664:	220b      	movs	r2, #11
 8011666:	2120      	movs	r1, #32
 8011668:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 801166c:	f7fd f81d 	bl	800e6aa <mem_set>
					dir[DIR_Name] = '.';
 8011670:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8011674:	222e      	movs	r2, #46	; 0x2e
 8011676:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8011678:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801167c:	330b      	adds	r3, #11
 801167e:	2210      	movs	r2, #16
 8011680:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8011682:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8011686:	3316      	adds	r3, #22
 8011688:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 801168c:	4618      	mov	r0, r3
 801168e:	f7fc ffbf 	bl	800e610 <st_dword>
					st_clust(fs, dir, dcl);
 8011692:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8011696:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 801169a:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 801169e:	4618      	mov	r0, r3
 80116a0:	f7fd ffe9 	bl	800f676 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80116a4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80116a8:	3320      	adds	r3, #32
 80116aa:	2220      	movs	r2, #32
 80116ac:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80116b0:	4618      	mov	r0, r3
 80116b2:	f7fc ffd9 	bl	800e668 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80116b6:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80116ba:	3321      	adds	r3, #33	; 0x21
 80116bc:	222e      	movs	r2, #46	; 0x2e
 80116be:	701a      	strb	r2, [r3, #0]
 80116c0:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80116c4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80116c8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80116cc:	781b      	ldrb	r3, [r3, #0]
 80116ce:	2b03      	cmp	r3, #3
 80116d0:	d109      	bne.n	80116e6 <f_mkdir+0x19c>
 80116d2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80116d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80116d8:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 80116dc:	429a      	cmp	r2, r3
 80116de:	d102      	bne.n	80116e6 <f_mkdir+0x19c>
 80116e0:	2300      	movs	r3, #0
 80116e2:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
					st_clust(fs, dir + SZDIRE, pcl);
 80116e6:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80116ea:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80116ee:	3320      	adds	r3, #32
 80116f0:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 80116f4:	4619      	mov	r1, r3
 80116f6:	f7fd ffbe 	bl	800f676 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80116fa:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80116fe:	895b      	ldrh	r3, [r3, #10]
 8011700:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 8011704:	e025      	b.n	8011752 <f_mkdir+0x208>
					fs->winsect = dsc++;
 8011706:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801170a:	1c5a      	adds	r2, r3, #1
 801170c:	f8c7 2254 	str.w	r2, [r7, #596]	; 0x254
 8011710:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8011714:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 8011716:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801171a:	2201      	movs	r2, #1
 801171c:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801171e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8011722:	4618      	mov	r0, r3
 8011724:	f7fd f9bc 	bl	800eaa0 <sync_window>
 8011728:	4603      	mov	r3, r0
 801172a:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
					if (res != FR_OK) break;
 801172e:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8011732:	2b00      	cmp	r3, #0
 8011734:	d112      	bne.n	801175c <f_mkdir+0x212>
					mem_set(dir, 0, SS(fs));
 8011736:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801173a:	899b      	ldrh	r3, [r3, #12]
 801173c:	461a      	mov	r2, r3
 801173e:	2100      	movs	r1, #0
 8011740:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8011744:	f7fc ffb1 	bl	800e6aa <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8011748:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801174c:	3b01      	subs	r3, #1
 801174e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 8011752:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8011756:	2b00      	cmp	r3, #0
 8011758:	d1d5      	bne.n	8011706 <f_mkdir+0x1bc>
 801175a:	e000      	b.n	801175e <f_mkdir+0x214>
					if (res != FR_OK) break;
 801175c:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801175e:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8011762:	2b00      	cmp	r3, #0
 8011764:	d107      	bne.n	8011776 <f_mkdir+0x22c>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8011766:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801176a:	4618      	mov	r0, r3
 801176c:	f7fe f9ee 	bl	800fb4c <dir_register>
 8011770:	4603      	mov	r3, r0
 8011772:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			}
			if (res == FR_OK) {
 8011776:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 801177a:	2b00      	cmp	r3, #0
 801177c:	d12a      	bne.n	80117d4 <f_mkdir+0x28a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801177e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8011782:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8011786:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801178a:	3316      	adds	r3, #22
 801178c:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8011790:	4618      	mov	r0, r3
 8011792:	f7fc ff3d 	bl	800e610 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8011796:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801179a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 801179e:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80117a2:	4618      	mov	r0, r3
 80117a4:	f7fd ff67 	bl	800f676 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80117a8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80117ac:	330b      	adds	r3, #11
 80117ae:	2210      	movs	r2, #16
 80117b0:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80117b2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80117b6:	2201      	movs	r2, #1
 80117b8:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80117ba:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d110      	bne.n	80117e4 <f_mkdir+0x29a>
					res = sync_fs(fs);
 80117c2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80117c6:	4618      	mov	r0, r3
 80117c8:	f7fd f9dc 	bl	800eb84 <sync_fs>
 80117cc:	4603      	mov	r3, r0
 80117ce:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 80117d2:	e007      	b.n	80117e4 <f_mkdir+0x29a>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80117d4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80117d8:	2200      	movs	r2, #0
 80117da:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 80117de:	4618      	mov	r0, r3
 80117e0:	f7fd fc4f 	bl	800f082 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80117e4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80117e8:	f897 225f 	ldrb.w	r2, [r7, #607]	; 0x25f
 80117ec:	4611      	mov	r1, r2
 80117ee:	4618      	mov	r0, r3
 80117f0:	f7fc ffce 	bl	800e790 <unlock_fs>
 80117f4:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
}
 80117f8:	4618      	mov	r0, r3
 80117fa:	f507 7718 	add.w	r7, r7, #608	; 0x260
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd80      	pop	{r7, pc}
	...

08011804 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011804:	b480      	push	{r7}
 8011806:	b087      	sub	sp, #28
 8011808:	af00      	add	r7, sp, #0
 801180a:	60f8      	str	r0, [r7, #12]
 801180c:	60b9      	str	r1, [r7, #8]
 801180e:	4613      	mov	r3, r2
 8011810:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011812:	2301      	movs	r3, #1
 8011814:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011816:	2300      	movs	r3, #0
 8011818:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801181a:	4b1f      	ldr	r3, [pc, #124]	; (8011898 <FATFS_LinkDriverEx+0x94>)
 801181c:	7a5b      	ldrb	r3, [r3, #9]
 801181e:	b2db      	uxtb	r3, r3
 8011820:	2b00      	cmp	r3, #0
 8011822:	d131      	bne.n	8011888 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011824:	4b1c      	ldr	r3, [pc, #112]	; (8011898 <FATFS_LinkDriverEx+0x94>)
 8011826:	7a5b      	ldrb	r3, [r3, #9]
 8011828:	b2db      	uxtb	r3, r3
 801182a:	461a      	mov	r2, r3
 801182c:	4b1a      	ldr	r3, [pc, #104]	; (8011898 <FATFS_LinkDriverEx+0x94>)
 801182e:	2100      	movs	r1, #0
 8011830:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011832:	4b19      	ldr	r3, [pc, #100]	; (8011898 <FATFS_LinkDriverEx+0x94>)
 8011834:	7a5b      	ldrb	r3, [r3, #9]
 8011836:	b2db      	uxtb	r3, r3
 8011838:	4a17      	ldr	r2, [pc, #92]	; (8011898 <FATFS_LinkDriverEx+0x94>)
 801183a:	009b      	lsls	r3, r3, #2
 801183c:	4413      	add	r3, r2
 801183e:	68fa      	ldr	r2, [r7, #12]
 8011840:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011842:	4b15      	ldr	r3, [pc, #84]	; (8011898 <FATFS_LinkDriverEx+0x94>)
 8011844:	7a5b      	ldrb	r3, [r3, #9]
 8011846:	b2db      	uxtb	r3, r3
 8011848:	461a      	mov	r2, r3
 801184a:	4b13      	ldr	r3, [pc, #76]	; (8011898 <FATFS_LinkDriverEx+0x94>)
 801184c:	4413      	add	r3, r2
 801184e:	79fa      	ldrb	r2, [r7, #7]
 8011850:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011852:	4b11      	ldr	r3, [pc, #68]	; (8011898 <FATFS_LinkDriverEx+0x94>)
 8011854:	7a5b      	ldrb	r3, [r3, #9]
 8011856:	b2db      	uxtb	r3, r3
 8011858:	1c5a      	adds	r2, r3, #1
 801185a:	b2d1      	uxtb	r1, r2
 801185c:	4a0e      	ldr	r2, [pc, #56]	; (8011898 <FATFS_LinkDriverEx+0x94>)
 801185e:	7251      	strb	r1, [r2, #9]
 8011860:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011862:	7dbb      	ldrb	r3, [r7, #22]
 8011864:	3330      	adds	r3, #48	; 0x30
 8011866:	b2da      	uxtb	r2, r3
 8011868:	68bb      	ldr	r3, [r7, #8]
 801186a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 801186c:	68bb      	ldr	r3, [r7, #8]
 801186e:	3301      	adds	r3, #1
 8011870:	223a      	movs	r2, #58	; 0x3a
 8011872:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011874:	68bb      	ldr	r3, [r7, #8]
 8011876:	3302      	adds	r3, #2
 8011878:	222f      	movs	r2, #47	; 0x2f
 801187a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 801187c:	68bb      	ldr	r3, [r7, #8]
 801187e:	3303      	adds	r3, #3
 8011880:	2200      	movs	r2, #0
 8011882:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011884:	2300      	movs	r3, #0
 8011886:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011888:	7dfb      	ldrb	r3, [r7, #23]
}
 801188a:	4618      	mov	r0, r3
 801188c:	371c      	adds	r7, #28
 801188e:	46bd      	mov	sp, r7
 8011890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011894:	4770      	bx	lr
 8011896:	bf00      	nop
 8011898:	200007b4 	.word	0x200007b4

0801189c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b082      	sub	sp, #8
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
 80118a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80118a6:	2200      	movs	r2, #0
 80118a8:	6839      	ldr	r1, [r7, #0]
 80118aa:	6878      	ldr	r0, [r7, #4]
 80118ac:	f7ff ffaa 	bl	8011804 <FATFS_LinkDriverEx>
 80118b0:	4603      	mov	r3, r0
}
 80118b2:	4618      	mov	r0, r3
 80118b4:	3708      	adds	r7, #8
 80118b6:	46bd      	mov	sp, r7
 80118b8:	bd80      	pop	{r7, pc}
	...

080118bc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80118bc:	b480      	push	{r7}
 80118be:	b085      	sub	sp, #20
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	4603      	mov	r3, r0
 80118c4:	6039      	str	r1, [r7, #0]
 80118c6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80118c8:	88fb      	ldrh	r3, [r7, #6]
 80118ca:	2b7f      	cmp	r3, #127	; 0x7f
 80118cc:	d802      	bhi.n	80118d4 <ff_convert+0x18>
		c = chr;
 80118ce:	88fb      	ldrh	r3, [r7, #6]
 80118d0:	81fb      	strh	r3, [r7, #14]
 80118d2:	e025      	b.n	8011920 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80118d4:	683b      	ldr	r3, [r7, #0]
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d00b      	beq.n	80118f2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80118da:	88fb      	ldrh	r3, [r7, #6]
 80118dc:	2bff      	cmp	r3, #255	; 0xff
 80118de:	d805      	bhi.n	80118ec <ff_convert+0x30>
 80118e0:	88fb      	ldrh	r3, [r7, #6]
 80118e2:	3b80      	subs	r3, #128	; 0x80
 80118e4:	4a12      	ldr	r2, [pc, #72]	; (8011930 <ff_convert+0x74>)
 80118e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80118ea:	e000      	b.n	80118ee <ff_convert+0x32>
 80118ec:	2300      	movs	r3, #0
 80118ee:	81fb      	strh	r3, [r7, #14]
 80118f0:	e016      	b.n	8011920 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80118f2:	2300      	movs	r3, #0
 80118f4:	81fb      	strh	r3, [r7, #14]
 80118f6:	e009      	b.n	801190c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80118f8:	89fb      	ldrh	r3, [r7, #14]
 80118fa:	4a0d      	ldr	r2, [pc, #52]	; (8011930 <ff_convert+0x74>)
 80118fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011900:	88fa      	ldrh	r2, [r7, #6]
 8011902:	429a      	cmp	r2, r3
 8011904:	d006      	beq.n	8011914 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8011906:	89fb      	ldrh	r3, [r7, #14]
 8011908:	3301      	adds	r3, #1
 801190a:	81fb      	strh	r3, [r7, #14]
 801190c:	89fb      	ldrh	r3, [r7, #14]
 801190e:	2b7f      	cmp	r3, #127	; 0x7f
 8011910:	d9f2      	bls.n	80118f8 <ff_convert+0x3c>
 8011912:	e000      	b.n	8011916 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011914:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8011916:	89fb      	ldrh	r3, [r7, #14]
 8011918:	3380      	adds	r3, #128	; 0x80
 801191a:	b29b      	uxth	r3, r3
 801191c:	b2db      	uxtb	r3, r3
 801191e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011920:	89fb      	ldrh	r3, [r7, #14]
}
 8011922:	4618      	mov	r0, r3
 8011924:	3714      	adds	r7, #20
 8011926:	46bd      	mov	sp, r7
 8011928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192c:	4770      	bx	lr
 801192e:	bf00      	nop
 8011930:	08019f00 	.word	0x08019f00

08011934 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8011934:	b480      	push	{r7}
 8011936:	b087      	sub	sp, #28
 8011938:	af00      	add	r7, sp, #0
 801193a:	4603      	mov	r3, r0
 801193c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801193e:	88fb      	ldrh	r3, [r7, #6]
 8011940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011944:	d201      	bcs.n	801194a <ff_wtoupper+0x16>
 8011946:	4b3e      	ldr	r3, [pc, #248]	; (8011a40 <ff_wtoupper+0x10c>)
 8011948:	e000      	b.n	801194c <ff_wtoupper+0x18>
 801194a:	4b3e      	ldr	r3, [pc, #248]	; (8011a44 <ff_wtoupper+0x110>)
 801194c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801194e:	697b      	ldr	r3, [r7, #20]
 8011950:	1c9a      	adds	r2, r3, #2
 8011952:	617a      	str	r2, [r7, #20]
 8011954:	881b      	ldrh	r3, [r3, #0]
 8011956:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8011958:	8a7b      	ldrh	r3, [r7, #18]
 801195a:	2b00      	cmp	r3, #0
 801195c:	d068      	beq.n	8011a30 <ff_wtoupper+0xfc>
 801195e:	88fa      	ldrh	r2, [r7, #6]
 8011960:	8a7b      	ldrh	r3, [r7, #18]
 8011962:	429a      	cmp	r2, r3
 8011964:	d364      	bcc.n	8011a30 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8011966:	697b      	ldr	r3, [r7, #20]
 8011968:	1c9a      	adds	r2, r3, #2
 801196a:	617a      	str	r2, [r7, #20]
 801196c:	881b      	ldrh	r3, [r3, #0]
 801196e:	823b      	strh	r3, [r7, #16]
 8011970:	8a3b      	ldrh	r3, [r7, #16]
 8011972:	0a1b      	lsrs	r3, r3, #8
 8011974:	81fb      	strh	r3, [r7, #14]
 8011976:	8a3b      	ldrh	r3, [r7, #16]
 8011978:	b2db      	uxtb	r3, r3
 801197a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 801197c:	88fa      	ldrh	r2, [r7, #6]
 801197e:	8a79      	ldrh	r1, [r7, #18]
 8011980:	8a3b      	ldrh	r3, [r7, #16]
 8011982:	440b      	add	r3, r1
 8011984:	429a      	cmp	r2, r3
 8011986:	da49      	bge.n	8011a1c <ff_wtoupper+0xe8>
			switch (cmd) {
 8011988:	89fb      	ldrh	r3, [r7, #14]
 801198a:	2b08      	cmp	r3, #8
 801198c:	d84f      	bhi.n	8011a2e <ff_wtoupper+0xfa>
 801198e:	a201      	add	r2, pc, #4	; (adr r2, 8011994 <ff_wtoupper+0x60>)
 8011990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011994:	080119b9 	.word	0x080119b9
 8011998:	080119cb 	.word	0x080119cb
 801199c:	080119e1 	.word	0x080119e1
 80119a0:	080119e9 	.word	0x080119e9
 80119a4:	080119f1 	.word	0x080119f1
 80119a8:	080119f9 	.word	0x080119f9
 80119ac:	08011a01 	.word	0x08011a01
 80119b0:	08011a09 	.word	0x08011a09
 80119b4:	08011a11 	.word	0x08011a11
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80119b8:	88fa      	ldrh	r2, [r7, #6]
 80119ba:	8a7b      	ldrh	r3, [r7, #18]
 80119bc:	1ad3      	subs	r3, r2, r3
 80119be:	005b      	lsls	r3, r3, #1
 80119c0:	697a      	ldr	r2, [r7, #20]
 80119c2:	4413      	add	r3, r2
 80119c4:	881b      	ldrh	r3, [r3, #0]
 80119c6:	80fb      	strh	r3, [r7, #6]
 80119c8:	e027      	b.n	8011a1a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80119ca:	88fa      	ldrh	r2, [r7, #6]
 80119cc:	8a7b      	ldrh	r3, [r7, #18]
 80119ce:	1ad3      	subs	r3, r2, r3
 80119d0:	b29b      	uxth	r3, r3
 80119d2:	f003 0301 	and.w	r3, r3, #1
 80119d6:	b29b      	uxth	r3, r3
 80119d8:	88fa      	ldrh	r2, [r7, #6]
 80119da:	1ad3      	subs	r3, r2, r3
 80119dc:	80fb      	strh	r3, [r7, #6]
 80119de:	e01c      	b.n	8011a1a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80119e0:	88fb      	ldrh	r3, [r7, #6]
 80119e2:	3b10      	subs	r3, #16
 80119e4:	80fb      	strh	r3, [r7, #6]
 80119e6:	e018      	b.n	8011a1a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80119e8:	88fb      	ldrh	r3, [r7, #6]
 80119ea:	3b20      	subs	r3, #32
 80119ec:	80fb      	strh	r3, [r7, #6]
 80119ee:	e014      	b.n	8011a1a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80119f0:	88fb      	ldrh	r3, [r7, #6]
 80119f2:	3b30      	subs	r3, #48	; 0x30
 80119f4:	80fb      	strh	r3, [r7, #6]
 80119f6:	e010      	b.n	8011a1a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80119f8:	88fb      	ldrh	r3, [r7, #6]
 80119fa:	3b1a      	subs	r3, #26
 80119fc:	80fb      	strh	r3, [r7, #6]
 80119fe:	e00c      	b.n	8011a1a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8011a00:	88fb      	ldrh	r3, [r7, #6]
 8011a02:	3308      	adds	r3, #8
 8011a04:	80fb      	strh	r3, [r7, #6]
 8011a06:	e008      	b.n	8011a1a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011a08:	88fb      	ldrh	r3, [r7, #6]
 8011a0a:	3b50      	subs	r3, #80	; 0x50
 8011a0c:	80fb      	strh	r3, [r7, #6]
 8011a0e:	e004      	b.n	8011a1a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8011a10:	88fb      	ldrh	r3, [r7, #6]
 8011a12:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8011a16:	80fb      	strh	r3, [r7, #6]
 8011a18:	bf00      	nop
			}
			break;
 8011a1a:	e008      	b.n	8011a2e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011a1c:	89fb      	ldrh	r3, [r7, #14]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d195      	bne.n	801194e <ff_wtoupper+0x1a>
 8011a22:	8a3b      	ldrh	r3, [r7, #16]
 8011a24:	005b      	lsls	r3, r3, #1
 8011a26:	697a      	ldr	r2, [r7, #20]
 8011a28:	4413      	add	r3, r2
 8011a2a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011a2c:	e78f      	b.n	801194e <ff_wtoupper+0x1a>
			break;
 8011a2e:	bf00      	nop
	}

	return chr;
 8011a30:	88fb      	ldrh	r3, [r7, #6]
}
 8011a32:	4618      	mov	r0, r3
 8011a34:	371c      	adds	r7, #28
 8011a36:	46bd      	mov	sp, r7
 8011a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a3c:	4770      	bx	lr
 8011a3e:	bf00      	nop
 8011a40:	0801a000 	.word	0x0801a000
 8011a44:	0801a1f4 	.word	0x0801a1f4

08011a48 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8011a48:	b580      	push	{r7, lr}
 8011a4a:	b084      	sub	sp, #16
 8011a4c:	af00      	add	r7, sp, #0
 8011a4e:	4603      	mov	r3, r0
 8011a50:	6039      	str	r1, [r7, #0]
 8011a52:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8011a54:	2200      	movs	r2, #0
 8011a56:	2101      	movs	r1, #1
 8011a58:	2001      	movs	r0, #1
 8011a5a:	f000 f978 	bl	8011d4e <osSemaphoreNew>
 8011a5e:	4602      	mov	r2, r0
 8011a60:	683b      	ldr	r3, [r7, #0]
 8011a62:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8011a64:	683b      	ldr	r3, [r7, #0]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	bf14      	ite	ne
 8011a6c:	2301      	movne	r3, #1
 8011a6e:	2300      	moveq	r3, #0
 8011a70:	b2db      	uxtb	r3, r3
 8011a72:	60fb      	str	r3, [r7, #12]

    return ret;
 8011a74:	68fb      	ldr	r3, [r7, #12]
}
 8011a76:	4618      	mov	r0, r3
 8011a78:	3710      	adds	r7, #16
 8011a7a:	46bd      	mov	sp, r7
 8011a7c:	bd80      	pop	{r7, pc}

08011a7e <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8011a7e:	b580      	push	{r7, lr}
 8011a80:	b082      	sub	sp, #8
 8011a82:	af00      	add	r7, sp, #0
 8011a84:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8011a86:	6878      	ldr	r0, [r7, #4]
 8011a88:	f000 fa80 	bl	8011f8c <osSemaphoreDelete>
#endif
    return 1;
 8011a8c:	2301      	movs	r3, #1
}
 8011a8e:	4618      	mov	r0, r3
 8011a90:	3708      	adds	r7, #8
 8011a92:	46bd      	mov	sp, r7
 8011a94:	bd80      	pop	{r7, pc}

08011a96 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8011a96:	b580      	push	{r7, lr}
 8011a98:	b084      	sub	sp, #16
 8011a9a:	af00      	add	r7, sp, #0
 8011a9c:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8011aa2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8011aa6:	6878      	ldr	r0, [r7, #4]
 8011aa8:	f000 f9da 	bl	8011e60 <osSemaphoreAcquire>
 8011aac:	4603      	mov	r3, r0
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d101      	bne.n	8011ab6 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8011ab2:	2301      	movs	r3, #1
 8011ab4:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011ab6:	68fb      	ldr	r3, [r7, #12]
}
 8011ab8:	4618      	mov	r0, r3
 8011aba:	3710      	adds	r7, #16
 8011abc:	46bd      	mov	sp, r7
 8011abe:	bd80      	pop	{r7, pc}

08011ac0 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8011ac0:	b580      	push	{r7, lr}
 8011ac2:	b082      	sub	sp, #8
 8011ac4:	af00      	add	r7, sp, #0
 8011ac6:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8011ac8:	6878      	ldr	r0, [r7, #4]
 8011aca:	f000 fa1b 	bl	8011f04 <osSemaphoreRelease>
#endif
}
 8011ace:	bf00      	nop
 8011ad0:	3708      	adds	r7, #8
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bd80      	pop	{r7, pc}
	...

08011ad8 <__NVIC_SetPriority>:
{
 8011ad8:	b480      	push	{r7}
 8011ada:	b083      	sub	sp, #12
 8011adc:	af00      	add	r7, sp, #0
 8011ade:	4603      	mov	r3, r0
 8011ae0:	6039      	str	r1, [r7, #0]
 8011ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8011ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	db0a      	blt.n	8011b02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011aec:	683b      	ldr	r3, [r7, #0]
 8011aee:	b2da      	uxtb	r2, r3
 8011af0:	490c      	ldr	r1, [pc, #48]	; (8011b24 <__NVIC_SetPriority+0x4c>)
 8011af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011af6:	0112      	lsls	r2, r2, #4
 8011af8:	b2d2      	uxtb	r2, r2
 8011afa:	440b      	add	r3, r1
 8011afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8011b00:	e00a      	b.n	8011b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8011b02:	683b      	ldr	r3, [r7, #0]
 8011b04:	b2da      	uxtb	r2, r3
 8011b06:	4908      	ldr	r1, [pc, #32]	; (8011b28 <__NVIC_SetPriority+0x50>)
 8011b08:	79fb      	ldrb	r3, [r7, #7]
 8011b0a:	f003 030f 	and.w	r3, r3, #15
 8011b0e:	3b04      	subs	r3, #4
 8011b10:	0112      	lsls	r2, r2, #4
 8011b12:	b2d2      	uxtb	r2, r2
 8011b14:	440b      	add	r3, r1
 8011b16:	761a      	strb	r2, [r3, #24]
}
 8011b18:	bf00      	nop
 8011b1a:	370c      	adds	r7, #12
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b22:	4770      	bx	lr
 8011b24:	e000e100 	.word	0xe000e100
 8011b28:	e000ed00 	.word	0xe000ed00

08011b2c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8011b30:	4b05      	ldr	r3, [pc, #20]	; (8011b48 <SysTick_Handler+0x1c>)
 8011b32:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8011b34:	f002 fcae 	bl	8014494 <xTaskGetSchedulerState>
 8011b38:	4603      	mov	r3, r0
 8011b3a:	2b01      	cmp	r3, #1
 8011b3c:	d001      	beq.n	8011b42 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8011b3e:	f003 fcd3 	bl	80154e8 <xPortSysTickHandler>
  }
}
 8011b42:	bf00      	nop
 8011b44:	bd80      	pop	{r7, pc}
 8011b46:	bf00      	nop
 8011b48:	e000e010 	.word	0xe000e010

08011b4c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8011b4c:	b580      	push	{r7, lr}
 8011b4e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8011b50:	2100      	movs	r1, #0
 8011b52:	f06f 0004 	mvn.w	r0, #4
 8011b56:	f7ff ffbf 	bl	8011ad8 <__NVIC_SetPriority>
#endif
}
 8011b5a:	bf00      	nop
 8011b5c:	bd80      	pop	{r7, pc}
	...

08011b60 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8011b60:	b480      	push	{r7}
 8011b62:	b083      	sub	sp, #12
 8011b64:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011b66:	f3ef 8305 	mrs	r3, IPSR
 8011b6a:	603b      	str	r3, [r7, #0]
  return(result);
 8011b6c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d003      	beq.n	8011b7a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8011b72:	f06f 0305 	mvn.w	r3, #5
 8011b76:	607b      	str	r3, [r7, #4]
 8011b78:	e00c      	b.n	8011b94 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8011b7a:	4b0a      	ldr	r3, [pc, #40]	; (8011ba4 <osKernelInitialize+0x44>)
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	2b00      	cmp	r3, #0
 8011b80:	d105      	bne.n	8011b8e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8011b82:	4b08      	ldr	r3, [pc, #32]	; (8011ba4 <osKernelInitialize+0x44>)
 8011b84:	2201      	movs	r2, #1
 8011b86:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8011b88:	2300      	movs	r3, #0
 8011b8a:	607b      	str	r3, [r7, #4]
 8011b8c:	e002      	b.n	8011b94 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8011b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011b92:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011b94:	687b      	ldr	r3, [r7, #4]
}
 8011b96:	4618      	mov	r0, r3
 8011b98:	370c      	adds	r7, #12
 8011b9a:	46bd      	mov	sp, r7
 8011b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ba0:	4770      	bx	lr
 8011ba2:	bf00      	nop
 8011ba4:	200007c0 	.word	0x200007c0

08011ba8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8011ba8:	b580      	push	{r7, lr}
 8011baa:	b082      	sub	sp, #8
 8011bac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011bae:	f3ef 8305 	mrs	r3, IPSR
 8011bb2:	603b      	str	r3, [r7, #0]
  return(result);
 8011bb4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d003      	beq.n	8011bc2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8011bba:	f06f 0305 	mvn.w	r3, #5
 8011bbe:	607b      	str	r3, [r7, #4]
 8011bc0:	e010      	b.n	8011be4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8011bc2:	4b0b      	ldr	r3, [pc, #44]	; (8011bf0 <osKernelStart+0x48>)
 8011bc4:	681b      	ldr	r3, [r3, #0]
 8011bc6:	2b01      	cmp	r3, #1
 8011bc8:	d109      	bne.n	8011bde <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8011bca:	f7ff ffbf 	bl	8011b4c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8011bce:	4b08      	ldr	r3, [pc, #32]	; (8011bf0 <osKernelStart+0x48>)
 8011bd0:	2202      	movs	r2, #2
 8011bd2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8011bd4:	f001 fe7c 	bl	80138d0 <vTaskStartScheduler>
      stat = osOK;
 8011bd8:	2300      	movs	r3, #0
 8011bda:	607b      	str	r3, [r7, #4]
 8011bdc:	e002      	b.n	8011be4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8011bde:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011be2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8011be4:	687b      	ldr	r3, [r7, #4]
}
 8011be6:	4618      	mov	r0, r3
 8011be8:	3708      	adds	r7, #8
 8011bea:	46bd      	mov	sp, r7
 8011bec:	bd80      	pop	{r7, pc}
 8011bee:	bf00      	nop
 8011bf0:	200007c0 	.word	0x200007c0

08011bf4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b08e      	sub	sp, #56	; 0x38
 8011bf8:	af04      	add	r7, sp, #16
 8011bfa:	60f8      	str	r0, [r7, #12]
 8011bfc:	60b9      	str	r1, [r7, #8]
 8011bfe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8011c00:	2300      	movs	r3, #0
 8011c02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011c04:	f3ef 8305 	mrs	r3, IPSR
 8011c08:	617b      	str	r3, [r7, #20]
  return(result);
 8011c0a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8011c0c:	2b00      	cmp	r3, #0
 8011c0e:	d17e      	bne.n	8011d0e <osThreadNew+0x11a>
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d07b      	beq.n	8011d0e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8011c16:	2380      	movs	r3, #128	; 0x80
 8011c18:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8011c1a:	2318      	movs	r3, #24
 8011c1c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8011c1e:	2300      	movs	r3, #0
 8011c20:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8011c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011c26:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d045      	beq.n	8011cba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	681b      	ldr	r3, [r3, #0]
 8011c32:	2b00      	cmp	r3, #0
 8011c34:	d002      	beq.n	8011c3c <osThreadNew+0x48>
        name = attr->name;
 8011c36:	687b      	ldr	r3, [r7, #4]
 8011c38:	681b      	ldr	r3, [r3, #0]
 8011c3a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	699b      	ldr	r3, [r3, #24]
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d002      	beq.n	8011c4a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8011c44:	687b      	ldr	r3, [r7, #4]
 8011c46:	699b      	ldr	r3, [r3, #24]
 8011c48:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8011c4a:	69fb      	ldr	r3, [r7, #28]
 8011c4c:	2b00      	cmp	r3, #0
 8011c4e:	d008      	beq.n	8011c62 <osThreadNew+0x6e>
 8011c50:	69fb      	ldr	r3, [r7, #28]
 8011c52:	2b38      	cmp	r3, #56	; 0x38
 8011c54:	d805      	bhi.n	8011c62 <osThreadNew+0x6e>
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	685b      	ldr	r3, [r3, #4]
 8011c5a:	f003 0301 	and.w	r3, r3, #1
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	d001      	beq.n	8011c66 <osThreadNew+0x72>
        return (NULL);
 8011c62:	2300      	movs	r3, #0
 8011c64:	e054      	b.n	8011d10 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	695b      	ldr	r3, [r3, #20]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d003      	beq.n	8011c76 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	695b      	ldr	r3, [r3, #20]
 8011c72:	089b      	lsrs	r3, r3, #2
 8011c74:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	689b      	ldr	r3, [r3, #8]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d00e      	beq.n	8011c9c <osThreadNew+0xa8>
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	68db      	ldr	r3, [r3, #12]
 8011c82:	2bbf      	cmp	r3, #191	; 0xbf
 8011c84:	d90a      	bls.n	8011c9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8011c8a:	2b00      	cmp	r3, #0
 8011c8c:	d006      	beq.n	8011c9c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	695b      	ldr	r3, [r3, #20]
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d002      	beq.n	8011c9c <osThreadNew+0xa8>
        mem = 1;
 8011c96:	2301      	movs	r3, #1
 8011c98:	61bb      	str	r3, [r7, #24]
 8011c9a:	e010      	b.n	8011cbe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	689b      	ldr	r3, [r3, #8]
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d10c      	bne.n	8011cbe <osThreadNew+0xca>
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	68db      	ldr	r3, [r3, #12]
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d108      	bne.n	8011cbe <osThreadNew+0xca>
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	691b      	ldr	r3, [r3, #16]
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	d104      	bne.n	8011cbe <osThreadNew+0xca>
          mem = 0;
 8011cb4:	2300      	movs	r3, #0
 8011cb6:	61bb      	str	r3, [r7, #24]
 8011cb8:	e001      	b.n	8011cbe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8011cba:	2300      	movs	r3, #0
 8011cbc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8011cbe:	69bb      	ldr	r3, [r7, #24]
 8011cc0:	2b01      	cmp	r3, #1
 8011cc2:	d110      	bne.n	8011ce6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8011cc8:	687a      	ldr	r2, [r7, #4]
 8011cca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8011ccc:	9202      	str	r2, [sp, #8]
 8011cce:	9301      	str	r3, [sp, #4]
 8011cd0:	69fb      	ldr	r3, [r7, #28]
 8011cd2:	9300      	str	r3, [sp, #0]
 8011cd4:	68bb      	ldr	r3, [r7, #8]
 8011cd6:	6a3a      	ldr	r2, [r7, #32]
 8011cd8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011cda:	68f8      	ldr	r0, [r7, #12]
 8011cdc:	f001 fba2 	bl	8013424 <xTaskCreateStatic>
 8011ce0:	4603      	mov	r3, r0
 8011ce2:	613b      	str	r3, [r7, #16]
 8011ce4:	e013      	b.n	8011d0e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8011ce6:	69bb      	ldr	r3, [r7, #24]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d110      	bne.n	8011d0e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8011cec:	6a3b      	ldr	r3, [r7, #32]
 8011cee:	b29a      	uxth	r2, r3
 8011cf0:	f107 0310 	add.w	r3, r7, #16
 8011cf4:	9301      	str	r3, [sp, #4]
 8011cf6:	69fb      	ldr	r3, [r7, #28]
 8011cf8:	9300      	str	r3, [sp, #0]
 8011cfa:	68bb      	ldr	r3, [r7, #8]
 8011cfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011cfe:	68f8      	ldr	r0, [r7, #12]
 8011d00:	f001 fbed 	bl	80134de <xTaskCreate>
 8011d04:	4603      	mov	r3, r0
 8011d06:	2b01      	cmp	r3, #1
 8011d08:	d001      	beq.n	8011d0e <osThreadNew+0x11a>
            hTask = NULL;
 8011d0a:	2300      	movs	r3, #0
 8011d0c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8011d0e:	693b      	ldr	r3, [r7, #16]
}
 8011d10:	4618      	mov	r0, r3
 8011d12:	3728      	adds	r7, #40	; 0x28
 8011d14:	46bd      	mov	sp, r7
 8011d16:	bd80      	pop	{r7, pc}

08011d18 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b084      	sub	sp, #16
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011d20:	f3ef 8305 	mrs	r3, IPSR
 8011d24:	60bb      	str	r3, [r7, #8]
  return(result);
 8011d26:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8011d28:	2b00      	cmp	r3, #0
 8011d2a:	d003      	beq.n	8011d34 <osDelay+0x1c>
    stat = osErrorISR;
 8011d2c:	f06f 0305 	mvn.w	r3, #5
 8011d30:	60fb      	str	r3, [r7, #12]
 8011d32:	e007      	b.n	8011d44 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8011d34:	2300      	movs	r3, #0
 8011d36:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d002      	beq.n	8011d44 <osDelay+0x2c>
      vTaskDelay(ticks);
 8011d3e:	6878      	ldr	r0, [r7, #4]
 8011d40:	f001 fd2c 	bl	801379c <vTaskDelay>
    }
  }

  return (stat);
 8011d44:	68fb      	ldr	r3, [r7, #12]
}
 8011d46:	4618      	mov	r0, r3
 8011d48:	3710      	adds	r7, #16
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd80      	pop	{r7, pc}

08011d4e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8011d4e:	b580      	push	{r7, lr}
 8011d50:	b08a      	sub	sp, #40	; 0x28
 8011d52:	af02      	add	r7, sp, #8
 8011d54:	60f8      	str	r0, [r7, #12]
 8011d56:	60b9      	str	r1, [r7, #8]
 8011d58:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011d5e:	f3ef 8305 	mrs	r3, IPSR
 8011d62:	613b      	str	r3, [r7, #16]
  return(result);
 8011d64:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d175      	bne.n	8011e56 <osSemaphoreNew+0x108>
 8011d6a:	68fb      	ldr	r3, [r7, #12]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	d072      	beq.n	8011e56 <osSemaphoreNew+0x108>
 8011d70:	68ba      	ldr	r2, [r7, #8]
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	429a      	cmp	r2, r3
 8011d76:	d86e      	bhi.n	8011e56 <osSemaphoreNew+0x108>
    mem = -1;
 8011d78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011d7c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d015      	beq.n	8011db0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	689b      	ldr	r3, [r3, #8]
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d006      	beq.n	8011d9a <osSemaphoreNew+0x4c>
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	68db      	ldr	r3, [r3, #12]
 8011d90:	2b4f      	cmp	r3, #79	; 0x4f
 8011d92:	d902      	bls.n	8011d9a <osSemaphoreNew+0x4c>
        mem = 1;
 8011d94:	2301      	movs	r3, #1
 8011d96:	61bb      	str	r3, [r7, #24]
 8011d98:	e00c      	b.n	8011db4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	689b      	ldr	r3, [r3, #8]
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d108      	bne.n	8011db4 <osSemaphoreNew+0x66>
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	68db      	ldr	r3, [r3, #12]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d104      	bne.n	8011db4 <osSemaphoreNew+0x66>
          mem = 0;
 8011daa:	2300      	movs	r3, #0
 8011dac:	61bb      	str	r3, [r7, #24]
 8011dae:	e001      	b.n	8011db4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8011db0:	2300      	movs	r3, #0
 8011db2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8011db4:	69bb      	ldr	r3, [r7, #24]
 8011db6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011dba:	d04c      	beq.n	8011e56 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	2b01      	cmp	r3, #1
 8011dc0:	d128      	bne.n	8011e14 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8011dc2:	69bb      	ldr	r3, [r7, #24]
 8011dc4:	2b01      	cmp	r3, #1
 8011dc6:	d10a      	bne.n	8011dde <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	689b      	ldr	r3, [r3, #8]
 8011dcc:	2203      	movs	r2, #3
 8011dce:	9200      	str	r2, [sp, #0]
 8011dd0:	2200      	movs	r2, #0
 8011dd2:	2100      	movs	r1, #0
 8011dd4:	2001      	movs	r0, #1
 8011dd6:	f000 fb7f 	bl	80124d8 <xQueueGenericCreateStatic>
 8011dda:	61f8      	str	r0, [r7, #28]
 8011ddc:	e005      	b.n	8011dea <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8011dde:	2203      	movs	r2, #3
 8011de0:	2100      	movs	r1, #0
 8011de2:	2001      	movs	r0, #1
 8011de4:	f000 fbf0 	bl	80125c8 <xQueueGenericCreate>
 8011de8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8011dea:	69fb      	ldr	r3, [r7, #28]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d022      	beq.n	8011e36 <osSemaphoreNew+0xe8>
 8011df0:	68bb      	ldr	r3, [r7, #8]
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d01f      	beq.n	8011e36 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011df6:	2300      	movs	r3, #0
 8011df8:	2200      	movs	r2, #0
 8011dfa:	2100      	movs	r1, #0
 8011dfc:	69f8      	ldr	r0, [r7, #28]
 8011dfe:	f000 fcab 	bl	8012758 <xQueueGenericSend>
 8011e02:	4603      	mov	r3, r0
 8011e04:	2b01      	cmp	r3, #1
 8011e06:	d016      	beq.n	8011e36 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8011e08:	69f8      	ldr	r0, [r7, #28]
 8011e0a:	f001 f937 	bl	801307c <vQueueDelete>
            hSemaphore = NULL;
 8011e0e:	2300      	movs	r3, #0
 8011e10:	61fb      	str	r3, [r7, #28]
 8011e12:	e010      	b.n	8011e36 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8011e14:	69bb      	ldr	r3, [r7, #24]
 8011e16:	2b01      	cmp	r3, #1
 8011e18:	d108      	bne.n	8011e2c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	689b      	ldr	r3, [r3, #8]
 8011e1e:	461a      	mov	r2, r3
 8011e20:	68b9      	ldr	r1, [r7, #8]
 8011e22:	68f8      	ldr	r0, [r7, #12]
 8011e24:	f000 fc2d 	bl	8012682 <xQueueCreateCountingSemaphoreStatic>
 8011e28:	61f8      	str	r0, [r7, #28]
 8011e2a:	e004      	b.n	8011e36 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8011e2c:	68b9      	ldr	r1, [r7, #8]
 8011e2e:	68f8      	ldr	r0, [r7, #12]
 8011e30:	f000 fc5e 	bl	80126f0 <xQueueCreateCountingSemaphore>
 8011e34:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8011e36:	69fb      	ldr	r3, [r7, #28]
 8011e38:	2b00      	cmp	r3, #0
 8011e3a:	d00c      	beq.n	8011e56 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8011e3c:	687b      	ldr	r3, [r7, #4]
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d003      	beq.n	8011e4a <osSemaphoreNew+0xfc>
          name = attr->name;
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	617b      	str	r3, [r7, #20]
 8011e48:	e001      	b.n	8011e4e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8011e4e:	6979      	ldr	r1, [r7, #20]
 8011e50:	69f8      	ldr	r0, [r7, #28]
 8011e52:	f001 fa5f 	bl	8013314 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8011e56:	69fb      	ldr	r3, [r7, #28]
}
 8011e58:	4618      	mov	r0, r3
 8011e5a:	3720      	adds	r7, #32
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}

08011e60 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b086      	sub	sp, #24
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
 8011e68:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011e6e:	2300      	movs	r3, #0
 8011e70:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8011e72:	693b      	ldr	r3, [r7, #16]
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	d103      	bne.n	8011e80 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8011e78:	f06f 0303 	mvn.w	r3, #3
 8011e7c:	617b      	str	r3, [r7, #20]
 8011e7e:	e039      	b.n	8011ef4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011e80:	f3ef 8305 	mrs	r3, IPSR
 8011e84:	60fb      	str	r3, [r7, #12]
  return(result);
 8011e86:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d022      	beq.n	8011ed2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8011e8c:	683b      	ldr	r3, [r7, #0]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d003      	beq.n	8011e9a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8011e92:	f06f 0303 	mvn.w	r3, #3
 8011e96:	617b      	str	r3, [r7, #20]
 8011e98:	e02c      	b.n	8011ef4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8011e9a:	2300      	movs	r3, #0
 8011e9c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8011e9e:	f107 0308 	add.w	r3, r7, #8
 8011ea2:	461a      	mov	r2, r3
 8011ea4:	2100      	movs	r1, #0
 8011ea6:	6938      	ldr	r0, [r7, #16]
 8011ea8:	f001 f868 	bl	8012f7c <xQueueReceiveFromISR>
 8011eac:	4603      	mov	r3, r0
 8011eae:	2b01      	cmp	r3, #1
 8011eb0:	d003      	beq.n	8011eba <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8011eb2:	f06f 0302 	mvn.w	r3, #2
 8011eb6:	617b      	str	r3, [r7, #20]
 8011eb8:	e01c      	b.n	8011ef4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8011eba:	68bb      	ldr	r3, [r7, #8]
 8011ebc:	2b00      	cmp	r3, #0
 8011ebe:	d019      	beq.n	8011ef4 <osSemaphoreAcquire+0x94>
 8011ec0:	4b0f      	ldr	r3, [pc, #60]	; (8011f00 <osSemaphoreAcquire+0xa0>)
 8011ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ec6:	601a      	str	r2, [r3, #0]
 8011ec8:	f3bf 8f4f 	dsb	sy
 8011ecc:	f3bf 8f6f 	isb	sy
 8011ed0:	e010      	b.n	8011ef4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8011ed2:	6839      	ldr	r1, [r7, #0]
 8011ed4:	6938      	ldr	r0, [r7, #16]
 8011ed6:	f000 ff45 	bl	8012d64 <xQueueSemaphoreTake>
 8011eda:	4603      	mov	r3, r0
 8011edc:	2b01      	cmp	r3, #1
 8011ede:	d009      	beq.n	8011ef4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8011ee0:	683b      	ldr	r3, [r7, #0]
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d003      	beq.n	8011eee <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8011ee6:	f06f 0301 	mvn.w	r3, #1
 8011eea:	617b      	str	r3, [r7, #20]
 8011eec:	e002      	b.n	8011ef4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8011eee:	f06f 0302 	mvn.w	r3, #2
 8011ef2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8011ef4:	697b      	ldr	r3, [r7, #20]
}
 8011ef6:	4618      	mov	r0, r3
 8011ef8:	3718      	adds	r7, #24
 8011efa:	46bd      	mov	sp, r7
 8011efc:	bd80      	pop	{r7, pc}
 8011efe:	bf00      	nop
 8011f00:	e000ed04 	.word	0xe000ed04

08011f04 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8011f04:	b580      	push	{r7, lr}
 8011f06:	b086      	sub	sp, #24
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8011f10:	2300      	movs	r3, #0
 8011f12:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8011f14:	693b      	ldr	r3, [r7, #16]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d103      	bne.n	8011f22 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8011f1a:	f06f 0303 	mvn.w	r3, #3
 8011f1e:	617b      	str	r3, [r7, #20]
 8011f20:	e02c      	b.n	8011f7c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011f22:	f3ef 8305 	mrs	r3, IPSR
 8011f26:	60fb      	str	r3, [r7, #12]
  return(result);
 8011f28:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d01a      	beq.n	8011f64 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8011f2e:	2300      	movs	r3, #0
 8011f30:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8011f32:	f107 0308 	add.w	r3, r7, #8
 8011f36:	4619      	mov	r1, r3
 8011f38:	6938      	ldr	r0, [r7, #16]
 8011f3a:	f000 fda6 	bl	8012a8a <xQueueGiveFromISR>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	2b01      	cmp	r3, #1
 8011f42:	d003      	beq.n	8011f4c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8011f44:	f06f 0302 	mvn.w	r3, #2
 8011f48:	617b      	str	r3, [r7, #20]
 8011f4a:	e017      	b.n	8011f7c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8011f4c:	68bb      	ldr	r3, [r7, #8]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d014      	beq.n	8011f7c <osSemaphoreRelease+0x78>
 8011f52:	4b0d      	ldr	r3, [pc, #52]	; (8011f88 <osSemaphoreRelease+0x84>)
 8011f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f58:	601a      	str	r2, [r3, #0]
 8011f5a:	f3bf 8f4f 	dsb	sy
 8011f5e:	f3bf 8f6f 	isb	sy
 8011f62:	e00b      	b.n	8011f7c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011f64:	2300      	movs	r3, #0
 8011f66:	2200      	movs	r2, #0
 8011f68:	2100      	movs	r1, #0
 8011f6a:	6938      	ldr	r0, [r7, #16]
 8011f6c:	f000 fbf4 	bl	8012758 <xQueueGenericSend>
 8011f70:	4603      	mov	r3, r0
 8011f72:	2b01      	cmp	r3, #1
 8011f74:	d002      	beq.n	8011f7c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8011f76:	f06f 0302 	mvn.w	r3, #2
 8011f7a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8011f7c:	697b      	ldr	r3, [r7, #20]
}
 8011f7e:	4618      	mov	r0, r3
 8011f80:	3718      	adds	r7, #24
 8011f82:	46bd      	mov	sp, r7
 8011f84:	bd80      	pop	{r7, pc}
 8011f86:	bf00      	nop
 8011f88:	e000ed04 	.word	0xe000ed04

08011f8c <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8011f8c:	b580      	push	{r7, lr}
 8011f8e:	b086      	sub	sp, #24
 8011f90:	af00      	add	r7, sp, #0
 8011f92:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011f94:	687b      	ldr	r3, [r7, #4]
 8011f96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011f98:	f3ef 8305 	mrs	r3, IPSR
 8011f9c:	60fb      	str	r3, [r7, #12]
  return(result);
 8011f9e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8011fa0:	2b00      	cmp	r3, #0
 8011fa2:	d003      	beq.n	8011fac <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8011fa4:	f06f 0305 	mvn.w	r3, #5
 8011fa8:	617b      	str	r3, [r7, #20]
 8011faa:	e00e      	b.n	8011fca <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8011fac:	693b      	ldr	r3, [r7, #16]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d103      	bne.n	8011fba <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8011fb2:	f06f 0303 	mvn.w	r3, #3
 8011fb6:	617b      	str	r3, [r7, #20]
 8011fb8:	e007      	b.n	8011fca <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8011fba:	6938      	ldr	r0, [r7, #16]
 8011fbc:	f001 f9d4 	bl	8013368 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8011fc0:	2300      	movs	r3, #0
 8011fc2:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8011fc4:	6938      	ldr	r0, [r7, #16]
 8011fc6:	f001 f859 	bl	801307c <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8011fca:	697b      	ldr	r3, [r7, #20]
}
 8011fcc:	4618      	mov	r0, r3
 8011fce:	3718      	adds	r7, #24
 8011fd0:	46bd      	mov	sp, r7
 8011fd2:	bd80      	pop	{r7, pc}

08011fd4 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8011fd4:	b580      	push	{r7, lr}
 8011fd6:	b08a      	sub	sp, #40	; 0x28
 8011fd8:	af02      	add	r7, sp, #8
 8011fda:	60f8      	str	r0, [r7, #12]
 8011fdc:	60b9      	str	r1, [r7, #8]
 8011fde:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8011fe0:	2300      	movs	r3, #0
 8011fe2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011fe4:	f3ef 8305 	mrs	r3, IPSR
 8011fe8:	613b      	str	r3, [r7, #16]
  return(result);
 8011fea:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d15f      	bne.n	80120b0 <osMessageQueueNew+0xdc>
 8011ff0:	68fb      	ldr	r3, [r7, #12]
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d05c      	beq.n	80120b0 <osMessageQueueNew+0xdc>
 8011ff6:	68bb      	ldr	r3, [r7, #8]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d059      	beq.n	80120b0 <osMessageQueueNew+0xdc>
    mem = -1;
 8011ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012000:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012002:	687b      	ldr	r3, [r7, #4]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d029      	beq.n	801205c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	689b      	ldr	r3, [r3, #8]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d012      	beq.n	8012036 <osMessageQueueNew+0x62>
 8012010:	687b      	ldr	r3, [r7, #4]
 8012012:	68db      	ldr	r3, [r3, #12]
 8012014:	2b4f      	cmp	r3, #79	; 0x4f
 8012016:	d90e      	bls.n	8012036 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012018:	687b      	ldr	r3, [r7, #4]
 801201a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801201c:	2b00      	cmp	r3, #0
 801201e:	d00a      	beq.n	8012036 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012020:	687b      	ldr	r3, [r7, #4]
 8012022:	695a      	ldr	r2, [r3, #20]
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	68b9      	ldr	r1, [r7, #8]
 8012028:	fb01 f303 	mul.w	r3, r1, r3
 801202c:	429a      	cmp	r2, r3
 801202e:	d302      	bcc.n	8012036 <osMessageQueueNew+0x62>
        mem = 1;
 8012030:	2301      	movs	r3, #1
 8012032:	61bb      	str	r3, [r7, #24]
 8012034:	e014      	b.n	8012060 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	689b      	ldr	r3, [r3, #8]
 801203a:	2b00      	cmp	r3, #0
 801203c:	d110      	bne.n	8012060 <osMessageQueueNew+0x8c>
 801203e:	687b      	ldr	r3, [r7, #4]
 8012040:	68db      	ldr	r3, [r3, #12]
 8012042:	2b00      	cmp	r3, #0
 8012044:	d10c      	bne.n	8012060 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012046:	687b      	ldr	r3, [r7, #4]
 8012048:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 801204a:	2b00      	cmp	r3, #0
 801204c:	d108      	bne.n	8012060 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	695b      	ldr	r3, [r3, #20]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d104      	bne.n	8012060 <osMessageQueueNew+0x8c>
          mem = 0;
 8012056:	2300      	movs	r3, #0
 8012058:	61bb      	str	r3, [r7, #24]
 801205a:	e001      	b.n	8012060 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 801205c:	2300      	movs	r3, #0
 801205e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012060:	69bb      	ldr	r3, [r7, #24]
 8012062:	2b01      	cmp	r3, #1
 8012064:	d10b      	bne.n	801207e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8012066:	687b      	ldr	r3, [r7, #4]
 8012068:	691a      	ldr	r2, [r3, #16]
 801206a:	687b      	ldr	r3, [r7, #4]
 801206c:	689b      	ldr	r3, [r3, #8]
 801206e:	2100      	movs	r1, #0
 8012070:	9100      	str	r1, [sp, #0]
 8012072:	68b9      	ldr	r1, [r7, #8]
 8012074:	68f8      	ldr	r0, [r7, #12]
 8012076:	f000 fa2f 	bl	80124d8 <xQueueGenericCreateStatic>
 801207a:	61f8      	str	r0, [r7, #28]
 801207c:	e008      	b.n	8012090 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801207e:	69bb      	ldr	r3, [r7, #24]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d105      	bne.n	8012090 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8012084:	2200      	movs	r2, #0
 8012086:	68b9      	ldr	r1, [r7, #8]
 8012088:	68f8      	ldr	r0, [r7, #12]
 801208a:	f000 fa9d 	bl	80125c8 <xQueueGenericCreate>
 801208e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8012090:	69fb      	ldr	r3, [r7, #28]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d00c      	beq.n	80120b0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d003      	beq.n	80120a4 <osMessageQueueNew+0xd0>
        name = attr->name;
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	617b      	str	r3, [r7, #20]
 80120a2:	e001      	b.n	80120a8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80120a4:	2300      	movs	r3, #0
 80120a6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80120a8:	6979      	ldr	r1, [r7, #20]
 80120aa:	69f8      	ldr	r0, [r7, #28]
 80120ac:	f001 f932 	bl	8013314 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80120b0:	69fb      	ldr	r3, [r7, #28]
}
 80120b2:	4618      	mov	r0, r3
 80120b4:	3720      	adds	r7, #32
 80120b6:	46bd      	mov	sp, r7
 80120b8:	bd80      	pop	{r7, pc}
	...

080120bc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80120bc:	b580      	push	{r7, lr}
 80120be:	b088      	sub	sp, #32
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	60f8      	str	r0, [r7, #12]
 80120c4:	60b9      	str	r1, [r7, #8]
 80120c6:	603b      	str	r3, [r7, #0]
 80120c8:	4613      	mov	r3, r2
 80120ca:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80120cc:	68fb      	ldr	r3, [r7, #12]
 80120ce:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80120d0:	2300      	movs	r3, #0
 80120d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80120d4:	f3ef 8305 	mrs	r3, IPSR
 80120d8:	617b      	str	r3, [r7, #20]
  return(result);
 80120da:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80120dc:	2b00      	cmp	r3, #0
 80120de:	d028      	beq.n	8012132 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80120e0:	69bb      	ldr	r3, [r7, #24]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d005      	beq.n	80120f2 <osMessageQueuePut+0x36>
 80120e6:	68bb      	ldr	r3, [r7, #8]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d002      	beq.n	80120f2 <osMessageQueuePut+0x36>
 80120ec:	683b      	ldr	r3, [r7, #0]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d003      	beq.n	80120fa <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 80120f2:	f06f 0303 	mvn.w	r3, #3
 80120f6:	61fb      	str	r3, [r7, #28]
 80120f8:	e038      	b.n	801216c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 80120fa:	2300      	movs	r3, #0
 80120fc:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 80120fe:	f107 0210 	add.w	r2, r7, #16
 8012102:	2300      	movs	r3, #0
 8012104:	68b9      	ldr	r1, [r7, #8]
 8012106:	69b8      	ldr	r0, [r7, #24]
 8012108:	f000 fc24 	bl	8012954 <xQueueGenericSendFromISR>
 801210c:	4603      	mov	r3, r0
 801210e:	2b01      	cmp	r3, #1
 8012110:	d003      	beq.n	801211a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8012112:	f06f 0302 	mvn.w	r3, #2
 8012116:	61fb      	str	r3, [r7, #28]
 8012118:	e028      	b.n	801216c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801211a:	693b      	ldr	r3, [r7, #16]
 801211c:	2b00      	cmp	r3, #0
 801211e:	d025      	beq.n	801216c <osMessageQueuePut+0xb0>
 8012120:	4b15      	ldr	r3, [pc, #84]	; (8012178 <osMessageQueuePut+0xbc>)
 8012122:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012126:	601a      	str	r2, [r3, #0]
 8012128:	f3bf 8f4f 	dsb	sy
 801212c:	f3bf 8f6f 	isb	sy
 8012130:	e01c      	b.n	801216c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012132:	69bb      	ldr	r3, [r7, #24]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d002      	beq.n	801213e <osMessageQueuePut+0x82>
 8012138:	68bb      	ldr	r3, [r7, #8]
 801213a:	2b00      	cmp	r3, #0
 801213c:	d103      	bne.n	8012146 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801213e:	f06f 0303 	mvn.w	r3, #3
 8012142:	61fb      	str	r3, [r7, #28]
 8012144:	e012      	b.n	801216c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012146:	2300      	movs	r3, #0
 8012148:	683a      	ldr	r2, [r7, #0]
 801214a:	68b9      	ldr	r1, [r7, #8]
 801214c:	69b8      	ldr	r0, [r7, #24]
 801214e:	f000 fb03 	bl	8012758 <xQueueGenericSend>
 8012152:	4603      	mov	r3, r0
 8012154:	2b01      	cmp	r3, #1
 8012156:	d009      	beq.n	801216c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8012158:	683b      	ldr	r3, [r7, #0]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d003      	beq.n	8012166 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 801215e:	f06f 0301 	mvn.w	r3, #1
 8012162:	61fb      	str	r3, [r7, #28]
 8012164:	e002      	b.n	801216c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8012166:	f06f 0302 	mvn.w	r3, #2
 801216a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 801216c:	69fb      	ldr	r3, [r7, #28]
}
 801216e:	4618      	mov	r0, r3
 8012170:	3720      	adds	r7, #32
 8012172:	46bd      	mov	sp, r7
 8012174:	bd80      	pop	{r7, pc}
 8012176:	bf00      	nop
 8012178:	e000ed04 	.word	0xe000ed04

0801217c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 801217c:	b580      	push	{r7, lr}
 801217e:	b088      	sub	sp, #32
 8012180:	af00      	add	r7, sp, #0
 8012182:	60f8      	str	r0, [r7, #12]
 8012184:	60b9      	str	r1, [r7, #8]
 8012186:	607a      	str	r2, [r7, #4]
 8012188:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 801218e:	2300      	movs	r3, #0
 8012190:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012192:	f3ef 8305 	mrs	r3, IPSR
 8012196:	617b      	str	r3, [r7, #20]
  return(result);
 8012198:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801219a:	2b00      	cmp	r3, #0
 801219c:	d028      	beq.n	80121f0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 801219e:	69bb      	ldr	r3, [r7, #24]
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d005      	beq.n	80121b0 <osMessageQueueGet+0x34>
 80121a4:	68bb      	ldr	r3, [r7, #8]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d002      	beq.n	80121b0 <osMessageQueueGet+0x34>
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d003      	beq.n	80121b8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80121b0:	f06f 0303 	mvn.w	r3, #3
 80121b4:	61fb      	str	r3, [r7, #28]
 80121b6:	e037      	b.n	8012228 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80121b8:	2300      	movs	r3, #0
 80121ba:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80121bc:	f107 0310 	add.w	r3, r7, #16
 80121c0:	461a      	mov	r2, r3
 80121c2:	68b9      	ldr	r1, [r7, #8]
 80121c4:	69b8      	ldr	r0, [r7, #24]
 80121c6:	f000 fed9 	bl	8012f7c <xQueueReceiveFromISR>
 80121ca:	4603      	mov	r3, r0
 80121cc:	2b01      	cmp	r3, #1
 80121ce:	d003      	beq.n	80121d8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80121d0:	f06f 0302 	mvn.w	r3, #2
 80121d4:	61fb      	str	r3, [r7, #28]
 80121d6:	e027      	b.n	8012228 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80121d8:	693b      	ldr	r3, [r7, #16]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d024      	beq.n	8012228 <osMessageQueueGet+0xac>
 80121de:	4b15      	ldr	r3, [pc, #84]	; (8012234 <osMessageQueueGet+0xb8>)
 80121e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80121e4:	601a      	str	r2, [r3, #0]
 80121e6:	f3bf 8f4f 	dsb	sy
 80121ea:	f3bf 8f6f 	isb	sy
 80121ee:	e01b      	b.n	8012228 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80121f0:	69bb      	ldr	r3, [r7, #24]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d002      	beq.n	80121fc <osMessageQueueGet+0x80>
 80121f6:	68bb      	ldr	r3, [r7, #8]
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d103      	bne.n	8012204 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80121fc:	f06f 0303 	mvn.w	r3, #3
 8012200:	61fb      	str	r3, [r7, #28]
 8012202:	e011      	b.n	8012228 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012204:	683a      	ldr	r2, [r7, #0]
 8012206:	68b9      	ldr	r1, [r7, #8]
 8012208:	69b8      	ldr	r0, [r7, #24]
 801220a:	f000 fccb 	bl	8012ba4 <xQueueReceive>
 801220e:	4603      	mov	r3, r0
 8012210:	2b01      	cmp	r3, #1
 8012212:	d009      	beq.n	8012228 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8012214:	683b      	ldr	r3, [r7, #0]
 8012216:	2b00      	cmp	r3, #0
 8012218:	d003      	beq.n	8012222 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801221a:	f06f 0301 	mvn.w	r3, #1
 801221e:	61fb      	str	r3, [r7, #28]
 8012220:	e002      	b.n	8012228 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8012222:	f06f 0302 	mvn.w	r3, #2
 8012226:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012228:	69fb      	ldr	r3, [r7, #28]
}
 801222a:	4618      	mov	r0, r3
 801222c:	3720      	adds	r7, #32
 801222e:	46bd      	mov	sp, r7
 8012230:	bd80      	pop	{r7, pc}
 8012232:	bf00      	nop
 8012234:	e000ed04 	.word	0xe000ed04

08012238 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012238:	b480      	push	{r7}
 801223a:	b085      	sub	sp, #20
 801223c:	af00      	add	r7, sp, #0
 801223e:	60f8      	str	r0, [r7, #12]
 8012240:	60b9      	str	r1, [r7, #8]
 8012242:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012244:	68fb      	ldr	r3, [r7, #12]
 8012246:	4a07      	ldr	r2, [pc, #28]	; (8012264 <vApplicationGetIdleTaskMemory+0x2c>)
 8012248:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801224a:	68bb      	ldr	r3, [r7, #8]
 801224c:	4a06      	ldr	r2, [pc, #24]	; (8012268 <vApplicationGetIdleTaskMemory+0x30>)
 801224e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	2280      	movs	r2, #128	; 0x80
 8012254:	601a      	str	r2, [r3, #0]
}
 8012256:	bf00      	nop
 8012258:	3714      	adds	r7, #20
 801225a:	46bd      	mov	sp, r7
 801225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012260:	4770      	bx	lr
 8012262:	bf00      	nop
 8012264:	200007c4 	.word	0x200007c4
 8012268:	20000884 	.word	0x20000884

0801226c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 801226c:	b480      	push	{r7}
 801226e:	b085      	sub	sp, #20
 8012270:	af00      	add	r7, sp, #0
 8012272:	60f8      	str	r0, [r7, #12]
 8012274:	60b9      	str	r1, [r7, #8]
 8012276:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	4a07      	ldr	r2, [pc, #28]	; (8012298 <vApplicationGetTimerTaskMemory+0x2c>)
 801227c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801227e:	68bb      	ldr	r3, [r7, #8]
 8012280:	4a06      	ldr	r2, [pc, #24]	; (801229c <vApplicationGetTimerTaskMemory+0x30>)
 8012282:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012284:	687b      	ldr	r3, [r7, #4]
 8012286:	f44f 7280 	mov.w	r2, #256	; 0x100
 801228a:	601a      	str	r2, [r3, #0]
}
 801228c:	bf00      	nop
 801228e:	3714      	adds	r7, #20
 8012290:	46bd      	mov	sp, r7
 8012292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012296:	4770      	bx	lr
 8012298:	20000a84 	.word	0x20000a84
 801229c:	20000b44 	.word	0x20000b44

080122a0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80122a0:	b480      	push	{r7}
 80122a2:	b083      	sub	sp, #12
 80122a4:	af00      	add	r7, sp, #0
 80122a6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	f103 0208 	add.w	r2, r3, #8
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80122b8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	f103 0208 	add.w	r2, r3, #8
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	f103 0208 	add.w	r2, r3, #8
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	2200      	movs	r2, #0
 80122d2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80122d4:	bf00      	nop
 80122d6:	370c      	adds	r7, #12
 80122d8:	46bd      	mov	sp, r7
 80122da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122de:	4770      	bx	lr

080122e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80122e0:	b480      	push	{r7}
 80122e2:	b083      	sub	sp, #12
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	2200      	movs	r2, #0
 80122ec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80122ee:	bf00      	nop
 80122f0:	370c      	adds	r7, #12
 80122f2:	46bd      	mov	sp, r7
 80122f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f8:	4770      	bx	lr

080122fa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80122fa:	b480      	push	{r7}
 80122fc:	b085      	sub	sp, #20
 80122fe:	af00      	add	r7, sp, #0
 8012300:	6078      	str	r0, [r7, #4]
 8012302:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	685b      	ldr	r3, [r3, #4]
 8012308:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801230a:	683b      	ldr	r3, [r7, #0]
 801230c:	68fa      	ldr	r2, [r7, #12]
 801230e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	689a      	ldr	r2, [r3, #8]
 8012314:	683b      	ldr	r3, [r7, #0]
 8012316:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012318:	68fb      	ldr	r3, [r7, #12]
 801231a:	689b      	ldr	r3, [r3, #8]
 801231c:	683a      	ldr	r2, [r7, #0]
 801231e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012320:	68fb      	ldr	r3, [r7, #12]
 8012322:	683a      	ldr	r2, [r7, #0]
 8012324:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012326:	683b      	ldr	r3, [r7, #0]
 8012328:	687a      	ldr	r2, [r7, #4]
 801232a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	1c5a      	adds	r2, r3, #1
 8012332:	687b      	ldr	r3, [r7, #4]
 8012334:	601a      	str	r2, [r3, #0]
}
 8012336:	bf00      	nop
 8012338:	3714      	adds	r7, #20
 801233a:	46bd      	mov	sp, r7
 801233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012340:	4770      	bx	lr

08012342 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012342:	b480      	push	{r7}
 8012344:	b085      	sub	sp, #20
 8012346:	af00      	add	r7, sp, #0
 8012348:	6078      	str	r0, [r7, #4]
 801234a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801234c:	683b      	ldr	r3, [r7, #0]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012352:	68bb      	ldr	r3, [r7, #8]
 8012354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012358:	d103      	bne.n	8012362 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801235a:	687b      	ldr	r3, [r7, #4]
 801235c:	691b      	ldr	r3, [r3, #16]
 801235e:	60fb      	str	r3, [r7, #12]
 8012360:	e00c      	b.n	801237c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012362:	687b      	ldr	r3, [r7, #4]
 8012364:	3308      	adds	r3, #8
 8012366:	60fb      	str	r3, [r7, #12]
 8012368:	e002      	b.n	8012370 <vListInsert+0x2e>
 801236a:	68fb      	ldr	r3, [r7, #12]
 801236c:	685b      	ldr	r3, [r3, #4]
 801236e:	60fb      	str	r3, [r7, #12]
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	685b      	ldr	r3, [r3, #4]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	68ba      	ldr	r2, [r7, #8]
 8012378:	429a      	cmp	r2, r3
 801237a:	d2f6      	bcs.n	801236a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	685a      	ldr	r2, [r3, #4]
 8012380:	683b      	ldr	r3, [r7, #0]
 8012382:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012384:	683b      	ldr	r3, [r7, #0]
 8012386:	685b      	ldr	r3, [r3, #4]
 8012388:	683a      	ldr	r2, [r7, #0]
 801238a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801238c:	683b      	ldr	r3, [r7, #0]
 801238e:	68fa      	ldr	r2, [r7, #12]
 8012390:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012392:	68fb      	ldr	r3, [r7, #12]
 8012394:	683a      	ldr	r2, [r7, #0]
 8012396:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012398:	683b      	ldr	r3, [r7, #0]
 801239a:	687a      	ldr	r2, [r7, #4]
 801239c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801239e:	687b      	ldr	r3, [r7, #4]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	1c5a      	adds	r2, r3, #1
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	601a      	str	r2, [r3, #0]
}
 80123a8:	bf00      	nop
 80123aa:	3714      	adds	r7, #20
 80123ac:	46bd      	mov	sp, r7
 80123ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b2:	4770      	bx	lr

080123b4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80123b4:	b480      	push	{r7}
 80123b6:	b085      	sub	sp, #20
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	691b      	ldr	r3, [r3, #16]
 80123c0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	685b      	ldr	r3, [r3, #4]
 80123c6:	687a      	ldr	r2, [r7, #4]
 80123c8:	6892      	ldr	r2, [r2, #8]
 80123ca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80123cc:	687b      	ldr	r3, [r7, #4]
 80123ce:	689b      	ldr	r3, [r3, #8]
 80123d0:	687a      	ldr	r2, [r7, #4]
 80123d2:	6852      	ldr	r2, [r2, #4]
 80123d4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80123d6:	68fb      	ldr	r3, [r7, #12]
 80123d8:	685b      	ldr	r3, [r3, #4]
 80123da:	687a      	ldr	r2, [r7, #4]
 80123dc:	429a      	cmp	r2, r3
 80123de:	d103      	bne.n	80123e8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	689a      	ldr	r2, [r3, #8]
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	2200      	movs	r2, #0
 80123ec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80123ee:	68fb      	ldr	r3, [r7, #12]
 80123f0:	681b      	ldr	r3, [r3, #0]
 80123f2:	1e5a      	subs	r2, r3, #1
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	681b      	ldr	r3, [r3, #0]
}
 80123fc:	4618      	mov	r0, r3
 80123fe:	3714      	adds	r7, #20
 8012400:	46bd      	mov	sp, r7
 8012402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012406:	4770      	bx	lr

08012408 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b084      	sub	sp, #16
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
 8012410:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012412:	687b      	ldr	r3, [r7, #4]
 8012414:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	2b00      	cmp	r3, #0
 801241a:	d10a      	bne.n	8012432 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801241c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012420:	f383 8811 	msr	BASEPRI, r3
 8012424:	f3bf 8f6f 	isb	sy
 8012428:	f3bf 8f4f 	dsb	sy
 801242c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801242e:	bf00      	nop
 8012430:	e7fe      	b.n	8012430 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012432:	f002 ffc7 	bl	80153c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	681a      	ldr	r2, [r3, #0]
 801243a:	68fb      	ldr	r3, [r7, #12]
 801243c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801243e:	68f9      	ldr	r1, [r7, #12]
 8012440:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012442:	fb01 f303 	mul.w	r3, r1, r3
 8012446:	441a      	add	r2, r3
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801244c:	68fb      	ldr	r3, [r7, #12]
 801244e:	2200      	movs	r2, #0
 8012450:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	681a      	ldr	r2, [r3, #0]
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	681a      	ldr	r2, [r3, #0]
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012462:	3b01      	subs	r3, #1
 8012464:	68f9      	ldr	r1, [r7, #12]
 8012466:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012468:	fb01 f303 	mul.w	r3, r1, r3
 801246c:	441a      	add	r2, r3
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012472:	68fb      	ldr	r3, [r7, #12]
 8012474:	22ff      	movs	r2, #255	; 0xff
 8012476:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	22ff      	movs	r2, #255	; 0xff
 801247e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012482:	683b      	ldr	r3, [r7, #0]
 8012484:	2b00      	cmp	r3, #0
 8012486:	d114      	bne.n	80124b2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	691b      	ldr	r3, [r3, #16]
 801248c:	2b00      	cmp	r3, #0
 801248e:	d01a      	beq.n	80124c6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	3310      	adds	r3, #16
 8012494:	4618      	mov	r0, r3
 8012496:	f001 fd67 	bl	8013f68 <xTaskRemoveFromEventList>
 801249a:	4603      	mov	r3, r0
 801249c:	2b00      	cmp	r3, #0
 801249e:	d012      	beq.n	80124c6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80124a0:	4b0c      	ldr	r3, [pc, #48]	; (80124d4 <xQueueGenericReset+0xcc>)
 80124a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124a6:	601a      	str	r2, [r3, #0]
 80124a8:	f3bf 8f4f 	dsb	sy
 80124ac:	f3bf 8f6f 	isb	sy
 80124b0:	e009      	b.n	80124c6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	3310      	adds	r3, #16
 80124b6:	4618      	mov	r0, r3
 80124b8:	f7ff fef2 	bl	80122a0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80124bc:	68fb      	ldr	r3, [r7, #12]
 80124be:	3324      	adds	r3, #36	; 0x24
 80124c0:	4618      	mov	r0, r3
 80124c2:	f7ff feed 	bl	80122a0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80124c6:	f002 ffad 	bl	8015424 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80124ca:	2301      	movs	r3, #1
}
 80124cc:	4618      	mov	r0, r3
 80124ce:	3710      	adds	r7, #16
 80124d0:	46bd      	mov	sp, r7
 80124d2:	bd80      	pop	{r7, pc}
 80124d4:	e000ed04 	.word	0xe000ed04

080124d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b08e      	sub	sp, #56	; 0x38
 80124dc:	af02      	add	r7, sp, #8
 80124de:	60f8      	str	r0, [r7, #12]
 80124e0:	60b9      	str	r1, [r7, #8]
 80124e2:	607a      	str	r2, [r7, #4]
 80124e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80124e6:	68fb      	ldr	r3, [r7, #12]
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d10a      	bne.n	8012502 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80124ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124f0:	f383 8811 	msr	BASEPRI, r3
 80124f4:	f3bf 8f6f 	isb	sy
 80124f8:	f3bf 8f4f 	dsb	sy
 80124fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80124fe:	bf00      	nop
 8012500:	e7fe      	b.n	8012500 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012502:	683b      	ldr	r3, [r7, #0]
 8012504:	2b00      	cmp	r3, #0
 8012506:	d10a      	bne.n	801251e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8012508:	f04f 0350 	mov.w	r3, #80	; 0x50
 801250c:	f383 8811 	msr	BASEPRI, r3
 8012510:	f3bf 8f6f 	isb	sy
 8012514:	f3bf 8f4f 	dsb	sy
 8012518:	627b      	str	r3, [r7, #36]	; 0x24
}
 801251a:	bf00      	nop
 801251c:	e7fe      	b.n	801251c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d002      	beq.n	801252a <xQueueGenericCreateStatic+0x52>
 8012524:	68bb      	ldr	r3, [r7, #8]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d001      	beq.n	801252e <xQueueGenericCreateStatic+0x56>
 801252a:	2301      	movs	r3, #1
 801252c:	e000      	b.n	8012530 <xQueueGenericCreateStatic+0x58>
 801252e:	2300      	movs	r3, #0
 8012530:	2b00      	cmp	r3, #0
 8012532:	d10a      	bne.n	801254a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8012534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012538:	f383 8811 	msr	BASEPRI, r3
 801253c:	f3bf 8f6f 	isb	sy
 8012540:	f3bf 8f4f 	dsb	sy
 8012544:	623b      	str	r3, [r7, #32]
}
 8012546:	bf00      	nop
 8012548:	e7fe      	b.n	8012548 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d102      	bne.n	8012556 <xQueueGenericCreateStatic+0x7e>
 8012550:	68bb      	ldr	r3, [r7, #8]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d101      	bne.n	801255a <xQueueGenericCreateStatic+0x82>
 8012556:	2301      	movs	r3, #1
 8012558:	e000      	b.n	801255c <xQueueGenericCreateStatic+0x84>
 801255a:	2300      	movs	r3, #0
 801255c:	2b00      	cmp	r3, #0
 801255e:	d10a      	bne.n	8012576 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012564:	f383 8811 	msr	BASEPRI, r3
 8012568:	f3bf 8f6f 	isb	sy
 801256c:	f3bf 8f4f 	dsb	sy
 8012570:	61fb      	str	r3, [r7, #28]
}
 8012572:	bf00      	nop
 8012574:	e7fe      	b.n	8012574 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012576:	2350      	movs	r3, #80	; 0x50
 8012578:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 801257a:	697b      	ldr	r3, [r7, #20]
 801257c:	2b50      	cmp	r3, #80	; 0x50
 801257e:	d00a      	beq.n	8012596 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012584:	f383 8811 	msr	BASEPRI, r3
 8012588:	f3bf 8f6f 	isb	sy
 801258c:	f3bf 8f4f 	dsb	sy
 8012590:	61bb      	str	r3, [r7, #24]
}
 8012592:	bf00      	nop
 8012594:	e7fe      	b.n	8012594 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012596:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012598:	683b      	ldr	r3, [r7, #0]
 801259a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 801259c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801259e:	2b00      	cmp	r3, #0
 80125a0:	d00d      	beq.n	80125be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80125a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125a4:	2201      	movs	r2, #1
 80125a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80125aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80125ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80125b0:	9300      	str	r3, [sp, #0]
 80125b2:	4613      	mov	r3, r2
 80125b4:	687a      	ldr	r2, [r7, #4]
 80125b6:	68b9      	ldr	r1, [r7, #8]
 80125b8:	68f8      	ldr	r0, [r7, #12]
 80125ba:	f000 f83f 	bl	801263c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80125be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80125c0:	4618      	mov	r0, r3
 80125c2:	3730      	adds	r7, #48	; 0x30
 80125c4:	46bd      	mov	sp, r7
 80125c6:	bd80      	pop	{r7, pc}

080125c8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80125c8:	b580      	push	{r7, lr}
 80125ca:	b08a      	sub	sp, #40	; 0x28
 80125cc:	af02      	add	r7, sp, #8
 80125ce:	60f8      	str	r0, [r7, #12]
 80125d0:	60b9      	str	r1, [r7, #8]
 80125d2:	4613      	mov	r3, r2
 80125d4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80125d6:	68fb      	ldr	r3, [r7, #12]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d10a      	bne.n	80125f2 <xQueueGenericCreate+0x2a>
	__asm volatile
 80125dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125e0:	f383 8811 	msr	BASEPRI, r3
 80125e4:	f3bf 8f6f 	isb	sy
 80125e8:	f3bf 8f4f 	dsb	sy
 80125ec:	613b      	str	r3, [r7, #16]
}
 80125ee:	bf00      	nop
 80125f0:	e7fe      	b.n	80125f0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80125f2:	68fb      	ldr	r3, [r7, #12]
 80125f4:	68ba      	ldr	r2, [r7, #8]
 80125f6:	fb02 f303 	mul.w	r3, r2, r3
 80125fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80125fc:	69fb      	ldr	r3, [r7, #28]
 80125fe:	3350      	adds	r3, #80	; 0x50
 8012600:	4618      	mov	r0, r3
 8012602:	f003 f801 	bl	8015608 <pvPortMalloc>
 8012606:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012608:	69bb      	ldr	r3, [r7, #24]
 801260a:	2b00      	cmp	r3, #0
 801260c:	d011      	beq.n	8012632 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801260e:	69bb      	ldr	r3, [r7, #24]
 8012610:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012612:	697b      	ldr	r3, [r7, #20]
 8012614:	3350      	adds	r3, #80	; 0x50
 8012616:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012618:	69bb      	ldr	r3, [r7, #24]
 801261a:	2200      	movs	r2, #0
 801261c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012620:	79fa      	ldrb	r2, [r7, #7]
 8012622:	69bb      	ldr	r3, [r7, #24]
 8012624:	9300      	str	r3, [sp, #0]
 8012626:	4613      	mov	r3, r2
 8012628:	697a      	ldr	r2, [r7, #20]
 801262a:	68b9      	ldr	r1, [r7, #8]
 801262c:	68f8      	ldr	r0, [r7, #12]
 801262e:	f000 f805 	bl	801263c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012632:	69bb      	ldr	r3, [r7, #24]
	}
 8012634:	4618      	mov	r0, r3
 8012636:	3720      	adds	r7, #32
 8012638:	46bd      	mov	sp, r7
 801263a:	bd80      	pop	{r7, pc}

0801263c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801263c:	b580      	push	{r7, lr}
 801263e:	b084      	sub	sp, #16
 8012640:	af00      	add	r7, sp, #0
 8012642:	60f8      	str	r0, [r7, #12]
 8012644:	60b9      	str	r1, [r7, #8]
 8012646:	607a      	str	r2, [r7, #4]
 8012648:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801264a:	68bb      	ldr	r3, [r7, #8]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d103      	bne.n	8012658 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8012650:	69bb      	ldr	r3, [r7, #24]
 8012652:	69ba      	ldr	r2, [r7, #24]
 8012654:	601a      	str	r2, [r3, #0]
 8012656:	e002      	b.n	801265e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8012658:	69bb      	ldr	r3, [r7, #24]
 801265a:	687a      	ldr	r2, [r7, #4]
 801265c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801265e:	69bb      	ldr	r3, [r7, #24]
 8012660:	68fa      	ldr	r2, [r7, #12]
 8012662:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8012664:	69bb      	ldr	r3, [r7, #24]
 8012666:	68ba      	ldr	r2, [r7, #8]
 8012668:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801266a:	2101      	movs	r1, #1
 801266c:	69b8      	ldr	r0, [r7, #24]
 801266e:	f7ff fecb 	bl	8012408 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8012672:	69bb      	ldr	r3, [r7, #24]
 8012674:	78fa      	ldrb	r2, [r7, #3]
 8012676:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801267a:	bf00      	nop
 801267c:	3710      	adds	r7, #16
 801267e:	46bd      	mov	sp, r7
 8012680:	bd80      	pop	{r7, pc}

08012682 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8012682:	b580      	push	{r7, lr}
 8012684:	b08a      	sub	sp, #40	; 0x28
 8012686:	af02      	add	r7, sp, #8
 8012688:	60f8      	str	r0, [r7, #12]
 801268a:	60b9      	str	r1, [r7, #8]
 801268c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801268e:	68fb      	ldr	r3, [r7, #12]
 8012690:	2b00      	cmp	r3, #0
 8012692:	d10a      	bne.n	80126aa <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8012694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012698:	f383 8811 	msr	BASEPRI, r3
 801269c:	f3bf 8f6f 	isb	sy
 80126a0:	f3bf 8f4f 	dsb	sy
 80126a4:	61bb      	str	r3, [r7, #24]
}
 80126a6:	bf00      	nop
 80126a8:	e7fe      	b.n	80126a8 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80126aa:	68ba      	ldr	r2, [r7, #8]
 80126ac:	68fb      	ldr	r3, [r7, #12]
 80126ae:	429a      	cmp	r2, r3
 80126b0:	d90a      	bls.n	80126c8 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80126b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126b6:	f383 8811 	msr	BASEPRI, r3
 80126ba:	f3bf 8f6f 	isb	sy
 80126be:	f3bf 8f4f 	dsb	sy
 80126c2:	617b      	str	r3, [r7, #20]
}
 80126c4:	bf00      	nop
 80126c6:	e7fe      	b.n	80126c6 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80126c8:	2302      	movs	r3, #2
 80126ca:	9300      	str	r3, [sp, #0]
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	2200      	movs	r2, #0
 80126d0:	2100      	movs	r1, #0
 80126d2:	68f8      	ldr	r0, [r7, #12]
 80126d4:	f7ff ff00 	bl	80124d8 <xQueueGenericCreateStatic>
 80126d8:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80126da:	69fb      	ldr	r3, [r7, #28]
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d002      	beq.n	80126e6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80126e0:	69fb      	ldr	r3, [r7, #28]
 80126e2:	68ba      	ldr	r2, [r7, #8]
 80126e4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80126e6:	69fb      	ldr	r3, [r7, #28]
	}
 80126e8:	4618      	mov	r0, r3
 80126ea:	3720      	adds	r7, #32
 80126ec:	46bd      	mov	sp, r7
 80126ee:	bd80      	pop	{r7, pc}

080126f0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b086      	sub	sp, #24
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	6078      	str	r0, [r7, #4]
 80126f8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d10a      	bne.n	8012716 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8012700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012704:	f383 8811 	msr	BASEPRI, r3
 8012708:	f3bf 8f6f 	isb	sy
 801270c:	f3bf 8f4f 	dsb	sy
 8012710:	613b      	str	r3, [r7, #16]
}
 8012712:	bf00      	nop
 8012714:	e7fe      	b.n	8012714 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8012716:	683a      	ldr	r2, [r7, #0]
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	429a      	cmp	r2, r3
 801271c:	d90a      	bls.n	8012734 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 801271e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012722:	f383 8811 	msr	BASEPRI, r3
 8012726:	f3bf 8f6f 	isb	sy
 801272a:	f3bf 8f4f 	dsb	sy
 801272e:	60fb      	str	r3, [r7, #12]
}
 8012730:	bf00      	nop
 8012732:	e7fe      	b.n	8012732 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8012734:	2202      	movs	r2, #2
 8012736:	2100      	movs	r1, #0
 8012738:	6878      	ldr	r0, [r7, #4]
 801273a:	f7ff ff45 	bl	80125c8 <xQueueGenericCreate>
 801273e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8012740:	697b      	ldr	r3, [r7, #20]
 8012742:	2b00      	cmp	r3, #0
 8012744:	d002      	beq.n	801274c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8012746:	697b      	ldr	r3, [r7, #20]
 8012748:	683a      	ldr	r2, [r7, #0]
 801274a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801274c:	697b      	ldr	r3, [r7, #20]
	}
 801274e:	4618      	mov	r0, r3
 8012750:	3718      	adds	r7, #24
 8012752:	46bd      	mov	sp, r7
 8012754:	bd80      	pop	{r7, pc}
	...

08012758 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b08e      	sub	sp, #56	; 0x38
 801275c:	af00      	add	r7, sp, #0
 801275e:	60f8      	str	r0, [r7, #12]
 8012760:	60b9      	str	r1, [r7, #8]
 8012762:	607a      	str	r2, [r7, #4]
 8012764:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8012766:	2300      	movs	r3, #0
 8012768:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801276e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012770:	2b00      	cmp	r3, #0
 8012772:	d10a      	bne.n	801278a <xQueueGenericSend+0x32>
	__asm volatile
 8012774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012778:	f383 8811 	msr	BASEPRI, r3
 801277c:	f3bf 8f6f 	isb	sy
 8012780:	f3bf 8f4f 	dsb	sy
 8012784:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012786:	bf00      	nop
 8012788:	e7fe      	b.n	8012788 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801278a:	68bb      	ldr	r3, [r7, #8]
 801278c:	2b00      	cmp	r3, #0
 801278e:	d103      	bne.n	8012798 <xQueueGenericSend+0x40>
 8012790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012794:	2b00      	cmp	r3, #0
 8012796:	d101      	bne.n	801279c <xQueueGenericSend+0x44>
 8012798:	2301      	movs	r3, #1
 801279a:	e000      	b.n	801279e <xQueueGenericSend+0x46>
 801279c:	2300      	movs	r3, #0
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d10a      	bne.n	80127b8 <xQueueGenericSend+0x60>
	__asm volatile
 80127a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127a6:	f383 8811 	msr	BASEPRI, r3
 80127aa:	f3bf 8f6f 	isb	sy
 80127ae:	f3bf 8f4f 	dsb	sy
 80127b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80127b4:	bf00      	nop
 80127b6:	e7fe      	b.n	80127b6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80127b8:	683b      	ldr	r3, [r7, #0]
 80127ba:	2b02      	cmp	r3, #2
 80127bc:	d103      	bne.n	80127c6 <xQueueGenericSend+0x6e>
 80127be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127c2:	2b01      	cmp	r3, #1
 80127c4:	d101      	bne.n	80127ca <xQueueGenericSend+0x72>
 80127c6:	2301      	movs	r3, #1
 80127c8:	e000      	b.n	80127cc <xQueueGenericSend+0x74>
 80127ca:	2300      	movs	r3, #0
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d10a      	bne.n	80127e6 <xQueueGenericSend+0x8e>
	__asm volatile
 80127d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127d4:	f383 8811 	msr	BASEPRI, r3
 80127d8:	f3bf 8f6f 	isb	sy
 80127dc:	f3bf 8f4f 	dsb	sy
 80127e0:	623b      	str	r3, [r7, #32]
}
 80127e2:	bf00      	nop
 80127e4:	e7fe      	b.n	80127e4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80127e6:	f001 fe55 	bl	8014494 <xTaskGetSchedulerState>
 80127ea:	4603      	mov	r3, r0
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d102      	bne.n	80127f6 <xQueueGenericSend+0x9e>
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d101      	bne.n	80127fa <xQueueGenericSend+0xa2>
 80127f6:	2301      	movs	r3, #1
 80127f8:	e000      	b.n	80127fc <xQueueGenericSend+0xa4>
 80127fa:	2300      	movs	r3, #0
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d10a      	bne.n	8012816 <xQueueGenericSend+0xbe>
	__asm volatile
 8012800:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012804:	f383 8811 	msr	BASEPRI, r3
 8012808:	f3bf 8f6f 	isb	sy
 801280c:	f3bf 8f4f 	dsb	sy
 8012810:	61fb      	str	r3, [r7, #28]
}
 8012812:	bf00      	nop
 8012814:	e7fe      	b.n	8012814 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012816:	f002 fdd5 	bl	80153c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801281a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801281c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012820:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012822:	429a      	cmp	r2, r3
 8012824:	d302      	bcc.n	801282c <xQueueGenericSend+0xd4>
 8012826:	683b      	ldr	r3, [r7, #0]
 8012828:	2b02      	cmp	r3, #2
 801282a:	d129      	bne.n	8012880 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801282c:	683a      	ldr	r2, [r7, #0]
 801282e:	68b9      	ldr	r1, [r7, #8]
 8012830:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012832:	f000 fc5e 	bl	80130f2 <prvCopyDataToQueue>
 8012836:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801283c:	2b00      	cmp	r3, #0
 801283e:	d010      	beq.n	8012862 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012842:	3324      	adds	r3, #36	; 0x24
 8012844:	4618      	mov	r0, r3
 8012846:	f001 fb8f 	bl	8013f68 <xTaskRemoveFromEventList>
 801284a:	4603      	mov	r3, r0
 801284c:	2b00      	cmp	r3, #0
 801284e:	d013      	beq.n	8012878 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012850:	4b3f      	ldr	r3, [pc, #252]	; (8012950 <xQueueGenericSend+0x1f8>)
 8012852:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012856:	601a      	str	r2, [r3, #0]
 8012858:	f3bf 8f4f 	dsb	sy
 801285c:	f3bf 8f6f 	isb	sy
 8012860:	e00a      	b.n	8012878 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8012862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012864:	2b00      	cmp	r3, #0
 8012866:	d007      	beq.n	8012878 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8012868:	4b39      	ldr	r3, [pc, #228]	; (8012950 <xQueueGenericSend+0x1f8>)
 801286a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801286e:	601a      	str	r2, [r3, #0]
 8012870:	f3bf 8f4f 	dsb	sy
 8012874:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8012878:	f002 fdd4 	bl	8015424 <vPortExitCritical>
				return pdPASS;
 801287c:	2301      	movs	r3, #1
 801287e:	e063      	b.n	8012948 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012880:	687b      	ldr	r3, [r7, #4]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d103      	bne.n	801288e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012886:	f002 fdcd 	bl	8015424 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801288a:	2300      	movs	r3, #0
 801288c:	e05c      	b.n	8012948 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801288e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012890:	2b00      	cmp	r3, #0
 8012892:	d106      	bne.n	80128a2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012894:	f107 0314 	add.w	r3, r7, #20
 8012898:	4618      	mov	r0, r3
 801289a:	f001 fbc9 	bl	8014030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801289e:	2301      	movs	r3, #1
 80128a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80128a2:	f002 fdbf 	bl	8015424 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80128a6:	f001 f887 	bl	80139b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80128aa:	f002 fd8b 	bl	80153c4 <vPortEnterCritical>
 80128ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80128b4:	b25b      	sxtb	r3, r3
 80128b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80128ba:	d103      	bne.n	80128c4 <xQueueGenericSend+0x16c>
 80128bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128be:	2200      	movs	r2, #0
 80128c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80128c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80128ca:	b25b      	sxtb	r3, r3
 80128cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80128d0:	d103      	bne.n	80128da <xQueueGenericSend+0x182>
 80128d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128d4:	2200      	movs	r2, #0
 80128d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80128da:	f002 fda3 	bl	8015424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80128de:	1d3a      	adds	r2, r7, #4
 80128e0:	f107 0314 	add.w	r3, r7, #20
 80128e4:	4611      	mov	r1, r2
 80128e6:	4618      	mov	r0, r3
 80128e8:	f001 fbb8 	bl	801405c <xTaskCheckForTimeOut>
 80128ec:	4603      	mov	r3, r0
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d124      	bne.n	801293c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80128f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80128f4:	f000 fcf5 	bl	80132e2 <prvIsQueueFull>
 80128f8:	4603      	mov	r3, r0
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d018      	beq.n	8012930 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80128fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012900:	3310      	adds	r3, #16
 8012902:	687a      	ldr	r2, [r7, #4]
 8012904:	4611      	mov	r1, r2
 8012906:	4618      	mov	r0, r3
 8012908:	f001 fade 	bl	8013ec8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 801290c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801290e:	f000 fc80 	bl	8013212 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012912:	f001 f85f 	bl	80139d4 <xTaskResumeAll>
 8012916:	4603      	mov	r3, r0
 8012918:	2b00      	cmp	r3, #0
 801291a:	f47f af7c 	bne.w	8012816 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 801291e:	4b0c      	ldr	r3, [pc, #48]	; (8012950 <xQueueGenericSend+0x1f8>)
 8012920:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012924:	601a      	str	r2, [r3, #0]
 8012926:	f3bf 8f4f 	dsb	sy
 801292a:	f3bf 8f6f 	isb	sy
 801292e:	e772      	b.n	8012816 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012930:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012932:	f000 fc6e 	bl	8013212 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012936:	f001 f84d 	bl	80139d4 <xTaskResumeAll>
 801293a:	e76c      	b.n	8012816 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801293c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801293e:	f000 fc68 	bl	8013212 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012942:	f001 f847 	bl	80139d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8012946:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8012948:	4618      	mov	r0, r3
 801294a:	3738      	adds	r7, #56	; 0x38
 801294c:	46bd      	mov	sp, r7
 801294e:	bd80      	pop	{r7, pc}
 8012950:	e000ed04 	.word	0xe000ed04

08012954 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012954:	b580      	push	{r7, lr}
 8012956:	b090      	sub	sp, #64	; 0x40
 8012958:	af00      	add	r7, sp, #0
 801295a:	60f8      	str	r0, [r7, #12]
 801295c:	60b9      	str	r1, [r7, #8]
 801295e:	607a      	str	r2, [r7, #4]
 8012960:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8012966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012968:	2b00      	cmp	r3, #0
 801296a:	d10a      	bne.n	8012982 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801296c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012970:	f383 8811 	msr	BASEPRI, r3
 8012974:	f3bf 8f6f 	isb	sy
 8012978:	f3bf 8f4f 	dsb	sy
 801297c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801297e:	bf00      	nop
 8012980:	e7fe      	b.n	8012980 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012982:	68bb      	ldr	r3, [r7, #8]
 8012984:	2b00      	cmp	r3, #0
 8012986:	d103      	bne.n	8012990 <xQueueGenericSendFromISR+0x3c>
 8012988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801298a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801298c:	2b00      	cmp	r3, #0
 801298e:	d101      	bne.n	8012994 <xQueueGenericSendFromISR+0x40>
 8012990:	2301      	movs	r3, #1
 8012992:	e000      	b.n	8012996 <xQueueGenericSendFromISR+0x42>
 8012994:	2300      	movs	r3, #0
 8012996:	2b00      	cmp	r3, #0
 8012998:	d10a      	bne.n	80129b0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801299a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801299e:	f383 8811 	msr	BASEPRI, r3
 80129a2:	f3bf 8f6f 	isb	sy
 80129a6:	f3bf 8f4f 	dsb	sy
 80129aa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80129ac:	bf00      	nop
 80129ae:	e7fe      	b.n	80129ae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80129b0:	683b      	ldr	r3, [r7, #0]
 80129b2:	2b02      	cmp	r3, #2
 80129b4:	d103      	bne.n	80129be <xQueueGenericSendFromISR+0x6a>
 80129b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80129b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80129ba:	2b01      	cmp	r3, #1
 80129bc:	d101      	bne.n	80129c2 <xQueueGenericSendFromISR+0x6e>
 80129be:	2301      	movs	r3, #1
 80129c0:	e000      	b.n	80129c4 <xQueueGenericSendFromISR+0x70>
 80129c2:	2300      	movs	r3, #0
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d10a      	bne.n	80129de <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80129c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129cc:	f383 8811 	msr	BASEPRI, r3
 80129d0:	f3bf 8f6f 	isb	sy
 80129d4:	f3bf 8f4f 	dsb	sy
 80129d8:	623b      	str	r3, [r7, #32]
}
 80129da:	bf00      	nop
 80129dc:	e7fe      	b.n	80129dc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80129de:	f002 fdd3 	bl	8015588 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80129e2:	f3ef 8211 	mrs	r2, BASEPRI
 80129e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129ea:	f383 8811 	msr	BASEPRI, r3
 80129ee:	f3bf 8f6f 	isb	sy
 80129f2:	f3bf 8f4f 	dsb	sy
 80129f6:	61fa      	str	r2, [r7, #28]
 80129f8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80129fa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80129fc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80129fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a06:	429a      	cmp	r2, r3
 8012a08:	d302      	bcc.n	8012a10 <xQueueGenericSendFromISR+0xbc>
 8012a0a:	683b      	ldr	r3, [r7, #0]
 8012a0c:	2b02      	cmp	r3, #2
 8012a0e:	d12f      	bne.n	8012a70 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012a10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012a20:	683a      	ldr	r2, [r7, #0]
 8012a22:	68b9      	ldr	r1, [r7, #8]
 8012a24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8012a26:	f000 fb64 	bl	80130f2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012a2a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8012a2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012a32:	d112      	bne.n	8012a5a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d016      	beq.n	8012a6a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012a3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a3e:	3324      	adds	r3, #36	; 0x24
 8012a40:	4618      	mov	r0, r3
 8012a42:	f001 fa91 	bl	8013f68 <xTaskRemoveFromEventList>
 8012a46:	4603      	mov	r3, r0
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d00e      	beq.n	8012a6a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d00b      	beq.n	8012a6a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	2201      	movs	r2, #1
 8012a56:	601a      	str	r2, [r3, #0]
 8012a58:	e007      	b.n	8012a6a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012a5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8012a5e:	3301      	adds	r3, #1
 8012a60:	b2db      	uxtb	r3, r3
 8012a62:	b25a      	sxtb	r2, r3
 8012a64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012a66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012a6a:	2301      	movs	r3, #1
 8012a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8012a6e:	e001      	b.n	8012a74 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012a70:	2300      	movs	r3, #0
 8012a72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012a76:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012a78:	697b      	ldr	r3, [r7, #20]
 8012a7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012a7e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012a80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012a82:	4618      	mov	r0, r3
 8012a84:	3740      	adds	r7, #64	; 0x40
 8012a86:	46bd      	mov	sp, r7
 8012a88:	bd80      	pop	{r7, pc}

08012a8a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012a8a:	b580      	push	{r7, lr}
 8012a8c:	b08e      	sub	sp, #56	; 0x38
 8012a8e:	af00      	add	r7, sp, #0
 8012a90:	6078      	str	r0, [r7, #4]
 8012a92:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a9a:	2b00      	cmp	r3, #0
 8012a9c:	d10a      	bne.n	8012ab4 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8012a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012aa2:	f383 8811 	msr	BASEPRI, r3
 8012aa6:	f3bf 8f6f 	isb	sy
 8012aaa:	f3bf 8f4f 	dsb	sy
 8012aae:	623b      	str	r3, [r7, #32]
}
 8012ab0:	bf00      	nop
 8012ab2:	e7fe      	b.n	8012ab2 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d00a      	beq.n	8012ad2 <xQueueGiveFromISR+0x48>
	__asm volatile
 8012abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ac0:	f383 8811 	msr	BASEPRI, r3
 8012ac4:	f3bf 8f6f 	isb	sy
 8012ac8:	f3bf 8f4f 	dsb	sy
 8012acc:	61fb      	str	r3, [r7, #28]
}
 8012ace:	bf00      	nop
 8012ad0:	e7fe      	b.n	8012ad0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d103      	bne.n	8012ae2 <xQueueGiveFromISR+0x58>
 8012ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012adc:	689b      	ldr	r3, [r3, #8]
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d101      	bne.n	8012ae6 <xQueueGiveFromISR+0x5c>
 8012ae2:	2301      	movs	r3, #1
 8012ae4:	e000      	b.n	8012ae8 <xQueueGiveFromISR+0x5e>
 8012ae6:	2300      	movs	r3, #0
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d10a      	bne.n	8012b02 <xQueueGiveFromISR+0x78>
	__asm volatile
 8012aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012af0:	f383 8811 	msr	BASEPRI, r3
 8012af4:	f3bf 8f6f 	isb	sy
 8012af8:	f3bf 8f4f 	dsb	sy
 8012afc:	61bb      	str	r3, [r7, #24]
}
 8012afe:	bf00      	nop
 8012b00:	e7fe      	b.n	8012b00 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012b02:	f002 fd41 	bl	8015588 <vPortValidateInterruptPriority>
	__asm volatile
 8012b06:	f3ef 8211 	mrs	r2, BASEPRI
 8012b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b0e:	f383 8811 	msr	BASEPRI, r3
 8012b12:	f3bf 8f6f 	isb	sy
 8012b16:	f3bf 8f4f 	dsb	sy
 8012b1a:	617a      	str	r2, [r7, #20]
 8012b1c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012b1e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012b20:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b26:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b2e:	429a      	cmp	r2, r3
 8012b30:	d22b      	bcs.n	8012b8a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b3e:	1c5a      	adds	r2, r3, #1
 8012b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b42:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012b44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012b48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012b4c:	d112      	bne.n	8012b74 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d016      	beq.n	8012b84 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b58:	3324      	adds	r3, #36	; 0x24
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	f001 fa04 	bl	8013f68 <xTaskRemoveFromEventList>
 8012b60:	4603      	mov	r3, r0
 8012b62:	2b00      	cmp	r3, #0
 8012b64:	d00e      	beq.n	8012b84 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012b66:	683b      	ldr	r3, [r7, #0]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d00b      	beq.n	8012b84 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012b6c:	683b      	ldr	r3, [r7, #0]
 8012b6e:	2201      	movs	r2, #1
 8012b70:	601a      	str	r2, [r3, #0]
 8012b72:	e007      	b.n	8012b84 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012b74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012b78:	3301      	adds	r3, #1
 8012b7a:	b2db      	uxtb	r3, r3
 8012b7c:	b25a      	sxtb	r2, r3
 8012b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012b84:	2301      	movs	r3, #1
 8012b86:	637b      	str	r3, [r7, #52]	; 0x34
 8012b88:	e001      	b.n	8012b8e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	637b      	str	r3, [r7, #52]	; 0x34
 8012b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b90:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	f383 8811 	msr	BASEPRI, r3
}
 8012b98:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	3738      	adds	r7, #56	; 0x38
 8012ba0:	46bd      	mov	sp, r7
 8012ba2:	bd80      	pop	{r7, pc}

08012ba4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012ba4:	b580      	push	{r7, lr}
 8012ba6:	b08c      	sub	sp, #48	; 0x30
 8012ba8:	af00      	add	r7, sp, #0
 8012baa:	60f8      	str	r0, [r7, #12]
 8012bac:	60b9      	str	r1, [r7, #8]
 8012bae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d10a      	bne.n	8012bd4 <xQueueReceive+0x30>
	__asm volatile
 8012bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bc2:	f383 8811 	msr	BASEPRI, r3
 8012bc6:	f3bf 8f6f 	isb	sy
 8012bca:	f3bf 8f4f 	dsb	sy
 8012bce:	623b      	str	r3, [r7, #32]
}
 8012bd0:	bf00      	nop
 8012bd2:	e7fe      	b.n	8012bd2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012bd4:	68bb      	ldr	r3, [r7, #8]
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d103      	bne.n	8012be2 <xQueueReceive+0x3e>
 8012bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d101      	bne.n	8012be6 <xQueueReceive+0x42>
 8012be2:	2301      	movs	r3, #1
 8012be4:	e000      	b.n	8012be8 <xQueueReceive+0x44>
 8012be6:	2300      	movs	r3, #0
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d10a      	bne.n	8012c02 <xQueueReceive+0x5e>
	__asm volatile
 8012bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012bf0:	f383 8811 	msr	BASEPRI, r3
 8012bf4:	f3bf 8f6f 	isb	sy
 8012bf8:	f3bf 8f4f 	dsb	sy
 8012bfc:	61fb      	str	r3, [r7, #28]
}
 8012bfe:	bf00      	nop
 8012c00:	e7fe      	b.n	8012c00 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012c02:	f001 fc47 	bl	8014494 <xTaskGetSchedulerState>
 8012c06:	4603      	mov	r3, r0
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d102      	bne.n	8012c12 <xQueueReceive+0x6e>
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d101      	bne.n	8012c16 <xQueueReceive+0x72>
 8012c12:	2301      	movs	r3, #1
 8012c14:	e000      	b.n	8012c18 <xQueueReceive+0x74>
 8012c16:	2300      	movs	r3, #0
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d10a      	bne.n	8012c32 <xQueueReceive+0x8e>
	__asm volatile
 8012c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c20:	f383 8811 	msr	BASEPRI, r3
 8012c24:	f3bf 8f6f 	isb	sy
 8012c28:	f3bf 8f4f 	dsb	sy
 8012c2c:	61bb      	str	r3, [r7, #24]
}
 8012c2e:	bf00      	nop
 8012c30:	e7fe      	b.n	8012c30 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012c32:	f002 fbc7 	bl	80153c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012c3a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d01f      	beq.n	8012c82 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012c42:	68b9      	ldr	r1, [r7, #8]
 8012c44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012c46:	f000 fabe 	bl	80131c6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c4c:	1e5a      	subs	r2, r3, #1
 8012c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c50:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c54:	691b      	ldr	r3, [r3, #16]
 8012c56:	2b00      	cmp	r3, #0
 8012c58:	d00f      	beq.n	8012c7a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c5c:	3310      	adds	r3, #16
 8012c5e:	4618      	mov	r0, r3
 8012c60:	f001 f982 	bl	8013f68 <xTaskRemoveFromEventList>
 8012c64:	4603      	mov	r3, r0
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	d007      	beq.n	8012c7a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012c6a:	4b3d      	ldr	r3, [pc, #244]	; (8012d60 <xQueueReceive+0x1bc>)
 8012c6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012c70:	601a      	str	r2, [r3, #0]
 8012c72:	f3bf 8f4f 	dsb	sy
 8012c76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012c7a:	f002 fbd3 	bl	8015424 <vPortExitCritical>
				return pdPASS;
 8012c7e:	2301      	movs	r3, #1
 8012c80:	e069      	b.n	8012d56 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d103      	bne.n	8012c90 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012c88:	f002 fbcc 	bl	8015424 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	e062      	b.n	8012d56 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c92:	2b00      	cmp	r3, #0
 8012c94:	d106      	bne.n	8012ca4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012c96:	f107 0310 	add.w	r3, r7, #16
 8012c9a:	4618      	mov	r0, r3
 8012c9c:	f001 f9c8 	bl	8014030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012ca0:	2301      	movs	r3, #1
 8012ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012ca4:	f002 fbbe 	bl	8015424 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012ca8:	f000 fe86 	bl	80139b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012cac:	f002 fb8a 	bl	80153c4 <vPortEnterCritical>
 8012cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012cb6:	b25b      	sxtb	r3, r3
 8012cb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012cbc:	d103      	bne.n	8012cc6 <xQueueReceive+0x122>
 8012cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cc0:	2200      	movs	r2, #0
 8012cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012ccc:	b25b      	sxtb	r3, r3
 8012cce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012cd2:	d103      	bne.n	8012cdc <xQueueReceive+0x138>
 8012cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cd6:	2200      	movs	r2, #0
 8012cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012cdc:	f002 fba2 	bl	8015424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012ce0:	1d3a      	adds	r2, r7, #4
 8012ce2:	f107 0310 	add.w	r3, r7, #16
 8012ce6:	4611      	mov	r1, r2
 8012ce8:	4618      	mov	r0, r3
 8012cea:	f001 f9b7 	bl	801405c <xTaskCheckForTimeOut>
 8012cee:	4603      	mov	r3, r0
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d123      	bne.n	8012d3c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012cf6:	f000 fade 	bl	80132b6 <prvIsQueueEmpty>
 8012cfa:	4603      	mov	r3, r0
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d017      	beq.n	8012d30 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d02:	3324      	adds	r3, #36	; 0x24
 8012d04:	687a      	ldr	r2, [r7, #4]
 8012d06:	4611      	mov	r1, r2
 8012d08:	4618      	mov	r0, r3
 8012d0a:	f001 f8dd 	bl	8013ec8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012d0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d10:	f000 fa7f 	bl	8013212 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012d14:	f000 fe5e 	bl	80139d4 <xTaskResumeAll>
 8012d18:	4603      	mov	r3, r0
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d189      	bne.n	8012c32 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8012d1e:	4b10      	ldr	r3, [pc, #64]	; (8012d60 <xQueueReceive+0x1bc>)
 8012d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d24:	601a      	str	r2, [r3, #0]
 8012d26:	f3bf 8f4f 	dsb	sy
 8012d2a:	f3bf 8f6f 	isb	sy
 8012d2e:	e780      	b.n	8012c32 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012d30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d32:	f000 fa6e 	bl	8013212 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012d36:	f000 fe4d 	bl	80139d4 <xTaskResumeAll>
 8012d3a:	e77a      	b.n	8012c32 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012d3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d3e:	f000 fa68 	bl	8013212 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012d42:	f000 fe47 	bl	80139d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012d46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d48:	f000 fab5 	bl	80132b6 <prvIsQueueEmpty>
 8012d4c:	4603      	mov	r3, r0
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	f43f af6f 	beq.w	8012c32 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012d54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012d56:	4618      	mov	r0, r3
 8012d58:	3730      	adds	r7, #48	; 0x30
 8012d5a:	46bd      	mov	sp, r7
 8012d5c:	bd80      	pop	{r7, pc}
 8012d5e:	bf00      	nop
 8012d60:	e000ed04 	.word	0xe000ed04

08012d64 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b08e      	sub	sp, #56	; 0x38
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
 8012d6c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012d6e:	2300      	movs	r3, #0
 8012d70:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012d76:	2300      	movs	r3, #0
 8012d78:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d7c:	2b00      	cmp	r3, #0
 8012d7e:	d10a      	bne.n	8012d96 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8012d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d84:	f383 8811 	msr	BASEPRI, r3
 8012d88:	f3bf 8f6f 	isb	sy
 8012d8c:	f3bf 8f4f 	dsb	sy
 8012d90:	623b      	str	r3, [r7, #32]
}
 8012d92:	bf00      	nop
 8012d94:	e7fe      	b.n	8012d94 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d00a      	beq.n	8012db4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8012d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012da2:	f383 8811 	msr	BASEPRI, r3
 8012da6:	f3bf 8f6f 	isb	sy
 8012daa:	f3bf 8f4f 	dsb	sy
 8012dae:	61fb      	str	r3, [r7, #28]
}
 8012db0:	bf00      	nop
 8012db2:	e7fe      	b.n	8012db2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012db4:	f001 fb6e 	bl	8014494 <xTaskGetSchedulerState>
 8012db8:	4603      	mov	r3, r0
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d102      	bne.n	8012dc4 <xQueueSemaphoreTake+0x60>
 8012dbe:	683b      	ldr	r3, [r7, #0]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d101      	bne.n	8012dc8 <xQueueSemaphoreTake+0x64>
 8012dc4:	2301      	movs	r3, #1
 8012dc6:	e000      	b.n	8012dca <xQueueSemaphoreTake+0x66>
 8012dc8:	2300      	movs	r3, #0
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d10a      	bne.n	8012de4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8012dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dd2:	f383 8811 	msr	BASEPRI, r3
 8012dd6:	f3bf 8f6f 	isb	sy
 8012dda:	f3bf 8f4f 	dsb	sy
 8012dde:	61bb      	str	r3, [r7, #24]
}
 8012de0:	bf00      	nop
 8012de2:	e7fe      	b.n	8012de2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012de4:	f002 faee 	bl	80153c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012dec:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d024      	beq.n	8012e3e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012df6:	1e5a      	subs	r2, r3, #1
 8012df8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dfa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d104      	bne.n	8012e0e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012e04:	f001 fdfc 	bl	8014a00 <pvTaskIncrementMutexHeldCount>
 8012e08:	4602      	mov	r2, r0
 8012e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e0c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e10:	691b      	ldr	r3, [r3, #16]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d00f      	beq.n	8012e36 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e18:	3310      	adds	r3, #16
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	f001 f8a4 	bl	8013f68 <xTaskRemoveFromEventList>
 8012e20:	4603      	mov	r3, r0
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d007      	beq.n	8012e36 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012e26:	4b54      	ldr	r3, [pc, #336]	; (8012f78 <xQueueSemaphoreTake+0x214>)
 8012e28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e2c:	601a      	str	r2, [r3, #0]
 8012e2e:	f3bf 8f4f 	dsb	sy
 8012e32:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012e36:	f002 faf5 	bl	8015424 <vPortExitCritical>
				return pdPASS;
 8012e3a:	2301      	movs	r3, #1
 8012e3c:	e097      	b.n	8012f6e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012e3e:	683b      	ldr	r3, [r7, #0]
 8012e40:	2b00      	cmp	r3, #0
 8012e42:	d111      	bne.n	8012e68 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e46:	2b00      	cmp	r3, #0
 8012e48:	d00a      	beq.n	8012e60 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8012e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e4e:	f383 8811 	msr	BASEPRI, r3
 8012e52:	f3bf 8f6f 	isb	sy
 8012e56:	f3bf 8f4f 	dsb	sy
 8012e5a:	617b      	str	r3, [r7, #20]
}
 8012e5c:	bf00      	nop
 8012e5e:	e7fe      	b.n	8012e5e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012e60:	f002 fae0 	bl	8015424 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012e64:	2300      	movs	r3, #0
 8012e66:	e082      	b.n	8012f6e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d106      	bne.n	8012e7c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012e6e:	f107 030c 	add.w	r3, r7, #12
 8012e72:	4618      	mov	r0, r3
 8012e74:	f001 f8dc 	bl	8014030 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012e78:	2301      	movs	r3, #1
 8012e7a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012e7c:	f002 fad2 	bl	8015424 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012e80:	f000 fd9a 	bl	80139b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012e84:	f002 fa9e 	bl	80153c4 <vPortEnterCritical>
 8012e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e8a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012e8e:	b25b      	sxtb	r3, r3
 8012e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012e94:	d103      	bne.n	8012e9e <xQueueSemaphoreTake+0x13a>
 8012e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e98:	2200      	movs	r2, #0
 8012e9a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ea0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012ea4:	b25b      	sxtb	r3, r3
 8012ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012eaa:	d103      	bne.n	8012eb4 <xQueueSemaphoreTake+0x150>
 8012eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eae:	2200      	movs	r2, #0
 8012eb0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012eb4:	f002 fab6 	bl	8015424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012eb8:	463a      	mov	r2, r7
 8012eba:	f107 030c 	add.w	r3, r7, #12
 8012ebe:	4611      	mov	r1, r2
 8012ec0:	4618      	mov	r0, r3
 8012ec2:	f001 f8cb 	bl	801405c <xTaskCheckForTimeOut>
 8012ec6:	4603      	mov	r3, r0
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d132      	bne.n	8012f32 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012ecc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012ece:	f000 f9f2 	bl	80132b6 <prvIsQueueEmpty>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d026      	beq.n	8012f26 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012eda:	681b      	ldr	r3, [r3, #0]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d109      	bne.n	8012ef4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8012ee0:	f002 fa70 	bl	80153c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ee6:	689b      	ldr	r3, [r3, #8]
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f001 faf1 	bl	80144d0 <xTaskPriorityInherit>
 8012eee:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012ef0:	f002 fa98 	bl	8015424 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ef6:	3324      	adds	r3, #36	; 0x24
 8012ef8:	683a      	ldr	r2, [r7, #0]
 8012efa:	4611      	mov	r1, r2
 8012efc:	4618      	mov	r0, r3
 8012efe:	f000 ffe3 	bl	8013ec8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012f02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f04:	f000 f985 	bl	8013212 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012f08:	f000 fd64 	bl	80139d4 <xTaskResumeAll>
 8012f0c:	4603      	mov	r3, r0
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	f47f af68 	bne.w	8012de4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8012f14:	4b18      	ldr	r3, [pc, #96]	; (8012f78 <xQueueSemaphoreTake+0x214>)
 8012f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f1a:	601a      	str	r2, [r3, #0]
 8012f1c:	f3bf 8f4f 	dsb	sy
 8012f20:	f3bf 8f6f 	isb	sy
 8012f24:	e75e      	b.n	8012de4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012f26:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f28:	f000 f973 	bl	8013212 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012f2c:	f000 fd52 	bl	80139d4 <xTaskResumeAll>
 8012f30:	e758      	b.n	8012de4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012f32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f34:	f000 f96d 	bl	8013212 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012f38:	f000 fd4c 	bl	80139d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012f3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f3e:	f000 f9ba 	bl	80132b6 <prvIsQueueEmpty>
 8012f42:	4603      	mov	r3, r0
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	f43f af4d 	beq.w	8012de4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d00d      	beq.n	8012f6c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8012f50:	f002 fa38 	bl	80153c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012f54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f56:	f000 f8b4 	bl	80130c2 <prvGetDisinheritPriorityAfterTimeout>
 8012f5a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f5e:	689b      	ldr	r3, [r3, #8]
 8012f60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012f62:	4618      	mov	r0, r3
 8012f64:	f001 fb8a 	bl	801467c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012f68:	f002 fa5c 	bl	8015424 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012f6c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012f6e:	4618      	mov	r0, r3
 8012f70:	3738      	adds	r7, #56	; 0x38
 8012f72:	46bd      	mov	sp, r7
 8012f74:	bd80      	pop	{r7, pc}
 8012f76:	bf00      	nop
 8012f78:	e000ed04 	.word	0xe000ed04

08012f7c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012f7c:	b580      	push	{r7, lr}
 8012f7e:	b08e      	sub	sp, #56	; 0x38
 8012f80:	af00      	add	r7, sp, #0
 8012f82:	60f8      	str	r0, [r7, #12]
 8012f84:	60b9      	str	r1, [r7, #8]
 8012f86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8012f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d10a      	bne.n	8012fa8 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8012f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f96:	f383 8811 	msr	BASEPRI, r3
 8012f9a:	f3bf 8f6f 	isb	sy
 8012f9e:	f3bf 8f4f 	dsb	sy
 8012fa2:	623b      	str	r3, [r7, #32]
}
 8012fa4:	bf00      	nop
 8012fa6:	e7fe      	b.n	8012fa6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012fa8:	68bb      	ldr	r3, [r7, #8]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d103      	bne.n	8012fb6 <xQueueReceiveFromISR+0x3a>
 8012fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d101      	bne.n	8012fba <xQueueReceiveFromISR+0x3e>
 8012fb6:	2301      	movs	r3, #1
 8012fb8:	e000      	b.n	8012fbc <xQueueReceiveFromISR+0x40>
 8012fba:	2300      	movs	r3, #0
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d10a      	bne.n	8012fd6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8012fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fc4:	f383 8811 	msr	BASEPRI, r3
 8012fc8:	f3bf 8f6f 	isb	sy
 8012fcc:	f3bf 8f4f 	dsb	sy
 8012fd0:	61fb      	str	r3, [r7, #28]
}
 8012fd2:	bf00      	nop
 8012fd4:	e7fe      	b.n	8012fd4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012fd6:	f002 fad7 	bl	8015588 <vPortValidateInterruptPriority>
	__asm volatile
 8012fda:	f3ef 8211 	mrs	r2, BASEPRI
 8012fde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fe2:	f383 8811 	msr	BASEPRI, r3
 8012fe6:	f3bf 8f6f 	isb	sy
 8012fea:	f3bf 8f4f 	dsb	sy
 8012fee:	61ba      	str	r2, [r7, #24]
 8012ff0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012ff2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012ff4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ffa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d02f      	beq.n	8013062 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013004:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013008:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 801300c:	68b9      	ldr	r1, [r7, #8]
 801300e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013010:	f000 f8d9 	bl	80131c6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013016:	1e5a      	subs	r2, r3, #1
 8013018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801301a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 801301c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013020:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013024:	d112      	bne.n	801304c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013028:	691b      	ldr	r3, [r3, #16]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d016      	beq.n	801305c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801302e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013030:	3310      	adds	r3, #16
 8013032:	4618      	mov	r0, r3
 8013034:	f000 ff98 	bl	8013f68 <xTaskRemoveFromEventList>
 8013038:	4603      	mov	r3, r0
 801303a:	2b00      	cmp	r3, #0
 801303c:	d00e      	beq.n	801305c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d00b      	beq.n	801305c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	2201      	movs	r2, #1
 8013048:	601a      	str	r2, [r3, #0]
 801304a:	e007      	b.n	801305c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 801304c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013050:	3301      	adds	r3, #1
 8013052:	b2db      	uxtb	r3, r3
 8013054:	b25a      	sxtb	r2, r3
 8013056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 801305c:	2301      	movs	r3, #1
 801305e:	637b      	str	r3, [r7, #52]	; 0x34
 8013060:	e001      	b.n	8013066 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8013062:	2300      	movs	r3, #0
 8013064:	637b      	str	r3, [r7, #52]	; 0x34
 8013066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013068:	613b      	str	r3, [r7, #16]
	__asm volatile
 801306a:	693b      	ldr	r3, [r7, #16]
 801306c:	f383 8811 	msr	BASEPRI, r3
}
 8013070:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013072:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013074:	4618      	mov	r0, r3
 8013076:	3738      	adds	r7, #56	; 0x38
 8013078:	46bd      	mov	sp, r7
 801307a:	bd80      	pop	{r7, pc}

0801307c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b084      	sub	sp, #16
 8013080:	af00      	add	r7, sp, #0
 8013082:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	2b00      	cmp	r3, #0
 801308c:	d10a      	bne.n	80130a4 <vQueueDelete+0x28>
	__asm volatile
 801308e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013092:	f383 8811 	msr	BASEPRI, r3
 8013096:	f3bf 8f6f 	isb	sy
 801309a:	f3bf 8f4f 	dsb	sy
 801309e:	60bb      	str	r3, [r7, #8]
}
 80130a0:	bf00      	nop
 80130a2:	e7fe      	b.n	80130a2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80130a4:	68f8      	ldr	r0, [r7, #12]
 80130a6:	f000 f95f 	bl	8013368 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d102      	bne.n	80130ba <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80130b4:	68f8      	ldr	r0, [r7, #12]
 80130b6:	f002 fb73 	bl	80157a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80130ba:	bf00      	nop
 80130bc:	3710      	adds	r7, #16
 80130be:	46bd      	mov	sp, r7
 80130c0:	bd80      	pop	{r7, pc}

080130c2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80130c2:	b480      	push	{r7}
 80130c4:	b085      	sub	sp, #20
 80130c6:	af00      	add	r7, sp, #0
 80130c8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80130ce:	2b00      	cmp	r3, #0
 80130d0:	d006      	beq.n	80130e0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130d6:	681b      	ldr	r3, [r3, #0]
 80130d8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80130dc:	60fb      	str	r3, [r7, #12]
 80130de:	e001      	b.n	80130e4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80130e0:	2300      	movs	r3, #0
 80130e2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80130e4:	68fb      	ldr	r3, [r7, #12]
	}
 80130e6:	4618      	mov	r0, r3
 80130e8:	3714      	adds	r7, #20
 80130ea:	46bd      	mov	sp, r7
 80130ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f0:	4770      	bx	lr

080130f2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80130f2:	b580      	push	{r7, lr}
 80130f4:	b086      	sub	sp, #24
 80130f6:	af00      	add	r7, sp, #0
 80130f8:	60f8      	str	r0, [r7, #12]
 80130fa:	60b9      	str	r1, [r7, #8]
 80130fc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80130fe:	2300      	movs	r3, #0
 8013100:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013106:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013108:	68fb      	ldr	r3, [r7, #12]
 801310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801310c:	2b00      	cmp	r3, #0
 801310e:	d10d      	bne.n	801312c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	2b00      	cmp	r3, #0
 8013116:	d14d      	bne.n	80131b4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013118:	68fb      	ldr	r3, [r7, #12]
 801311a:	689b      	ldr	r3, [r3, #8]
 801311c:	4618      	mov	r0, r3
 801311e:	f001 fa3f 	bl	80145a0 <xTaskPriorityDisinherit>
 8013122:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	2200      	movs	r2, #0
 8013128:	609a      	str	r2, [r3, #8]
 801312a:	e043      	b.n	80131b4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801312c:	687b      	ldr	r3, [r7, #4]
 801312e:	2b00      	cmp	r3, #0
 8013130:	d119      	bne.n	8013166 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	6858      	ldr	r0, [r3, #4]
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801313a:	461a      	mov	r2, r3
 801313c:	68b9      	ldr	r1, [r7, #8]
 801313e:	f003 facf 	bl	80166e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	685a      	ldr	r2, [r3, #4]
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801314a:	441a      	add	r2, r3
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	685a      	ldr	r2, [r3, #4]
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	689b      	ldr	r3, [r3, #8]
 8013158:	429a      	cmp	r2, r3
 801315a:	d32b      	bcc.n	80131b4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801315c:	68fb      	ldr	r3, [r7, #12]
 801315e:	681a      	ldr	r2, [r3, #0]
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	605a      	str	r2, [r3, #4]
 8013164:	e026      	b.n	80131b4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	68d8      	ldr	r0, [r3, #12]
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801316e:	461a      	mov	r2, r3
 8013170:	68b9      	ldr	r1, [r7, #8]
 8013172:	f003 fab5 	bl	80166e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013176:	68fb      	ldr	r3, [r7, #12]
 8013178:	68da      	ldr	r2, [r3, #12]
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801317e:	425b      	negs	r3, r3
 8013180:	441a      	add	r2, r3
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013186:	68fb      	ldr	r3, [r7, #12]
 8013188:	68da      	ldr	r2, [r3, #12]
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	429a      	cmp	r2, r3
 8013190:	d207      	bcs.n	80131a2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013192:	68fb      	ldr	r3, [r7, #12]
 8013194:	689a      	ldr	r2, [r3, #8]
 8013196:	68fb      	ldr	r3, [r7, #12]
 8013198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801319a:	425b      	negs	r3, r3
 801319c:	441a      	add	r2, r3
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	2b02      	cmp	r3, #2
 80131a6:	d105      	bne.n	80131b4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80131a8:	693b      	ldr	r3, [r7, #16]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d002      	beq.n	80131b4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80131ae:	693b      	ldr	r3, [r7, #16]
 80131b0:	3b01      	subs	r3, #1
 80131b2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80131b4:	693b      	ldr	r3, [r7, #16]
 80131b6:	1c5a      	adds	r2, r3, #1
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80131bc:	697b      	ldr	r3, [r7, #20]
}
 80131be:	4618      	mov	r0, r3
 80131c0:	3718      	adds	r7, #24
 80131c2:	46bd      	mov	sp, r7
 80131c4:	bd80      	pop	{r7, pc}

080131c6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80131c6:	b580      	push	{r7, lr}
 80131c8:	b082      	sub	sp, #8
 80131ca:	af00      	add	r7, sp, #0
 80131cc:	6078      	str	r0, [r7, #4]
 80131ce:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d018      	beq.n	801320a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	68da      	ldr	r2, [r3, #12]
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80131e0:	441a      	add	r2, r3
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	68da      	ldr	r2, [r3, #12]
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	689b      	ldr	r3, [r3, #8]
 80131ee:	429a      	cmp	r2, r3
 80131f0:	d303      	bcc.n	80131fa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	681a      	ldr	r2, [r3, #0]
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80131fa:	687b      	ldr	r3, [r7, #4]
 80131fc:	68d9      	ldr	r1, [r3, #12]
 80131fe:	687b      	ldr	r3, [r7, #4]
 8013200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013202:	461a      	mov	r2, r3
 8013204:	6838      	ldr	r0, [r7, #0]
 8013206:	f003 fa6b 	bl	80166e0 <memcpy>
	}
}
 801320a:	bf00      	nop
 801320c:	3708      	adds	r7, #8
 801320e:	46bd      	mov	sp, r7
 8013210:	bd80      	pop	{r7, pc}

08013212 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013212:	b580      	push	{r7, lr}
 8013214:	b084      	sub	sp, #16
 8013216:	af00      	add	r7, sp, #0
 8013218:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801321a:	f002 f8d3 	bl	80153c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013224:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013226:	e011      	b.n	801324c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013228:	687b      	ldr	r3, [r7, #4]
 801322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801322c:	2b00      	cmp	r3, #0
 801322e:	d012      	beq.n	8013256 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	3324      	adds	r3, #36	; 0x24
 8013234:	4618      	mov	r0, r3
 8013236:	f000 fe97 	bl	8013f68 <xTaskRemoveFromEventList>
 801323a:	4603      	mov	r3, r0
 801323c:	2b00      	cmp	r3, #0
 801323e:	d001      	beq.n	8013244 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013240:	f000 ff6e 	bl	8014120 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013244:	7bfb      	ldrb	r3, [r7, #15]
 8013246:	3b01      	subs	r3, #1
 8013248:	b2db      	uxtb	r3, r3
 801324a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801324c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013250:	2b00      	cmp	r3, #0
 8013252:	dce9      	bgt.n	8013228 <prvUnlockQueue+0x16>
 8013254:	e000      	b.n	8013258 <prvUnlockQueue+0x46>
					break;
 8013256:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	22ff      	movs	r2, #255	; 0xff
 801325c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013260:	f002 f8e0 	bl	8015424 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013264:	f002 f8ae 	bl	80153c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801326e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013270:	e011      	b.n	8013296 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	691b      	ldr	r3, [r3, #16]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d012      	beq.n	80132a0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	3310      	adds	r3, #16
 801327e:	4618      	mov	r0, r3
 8013280:	f000 fe72 	bl	8013f68 <xTaskRemoveFromEventList>
 8013284:	4603      	mov	r3, r0
 8013286:	2b00      	cmp	r3, #0
 8013288:	d001      	beq.n	801328e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801328a:	f000 ff49 	bl	8014120 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801328e:	7bbb      	ldrb	r3, [r7, #14]
 8013290:	3b01      	subs	r3, #1
 8013292:	b2db      	uxtb	r3, r3
 8013294:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013296:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801329a:	2b00      	cmp	r3, #0
 801329c:	dce9      	bgt.n	8013272 <prvUnlockQueue+0x60>
 801329e:	e000      	b.n	80132a2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80132a0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	22ff      	movs	r2, #255	; 0xff
 80132a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80132aa:	f002 f8bb 	bl	8015424 <vPortExitCritical>
}
 80132ae:	bf00      	nop
 80132b0:	3710      	adds	r7, #16
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bd80      	pop	{r7, pc}

080132b6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80132b6:	b580      	push	{r7, lr}
 80132b8:	b084      	sub	sp, #16
 80132ba:	af00      	add	r7, sp, #0
 80132bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80132be:	f002 f881 	bl	80153c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d102      	bne.n	80132d0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80132ca:	2301      	movs	r3, #1
 80132cc:	60fb      	str	r3, [r7, #12]
 80132ce:	e001      	b.n	80132d4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80132d0:	2300      	movs	r3, #0
 80132d2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80132d4:	f002 f8a6 	bl	8015424 <vPortExitCritical>

	return xReturn;
 80132d8:	68fb      	ldr	r3, [r7, #12]
}
 80132da:	4618      	mov	r0, r3
 80132dc:	3710      	adds	r7, #16
 80132de:	46bd      	mov	sp, r7
 80132e0:	bd80      	pop	{r7, pc}

080132e2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80132e2:	b580      	push	{r7, lr}
 80132e4:	b084      	sub	sp, #16
 80132e6:	af00      	add	r7, sp, #0
 80132e8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80132ea:	f002 f86b 	bl	80153c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80132f6:	429a      	cmp	r2, r3
 80132f8:	d102      	bne.n	8013300 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80132fa:	2301      	movs	r3, #1
 80132fc:	60fb      	str	r3, [r7, #12]
 80132fe:	e001      	b.n	8013304 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013300:	2300      	movs	r3, #0
 8013302:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013304:	f002 f88e 	bl	8015424 <vPortExitCritical>

	return xReturn;
 8013308:	68fb      	ldr	r3, [r7, #12]
}
 801330a:	4618      	mov	r0, r3
 801330c:	3710      	adds	r7, #16
 801330e:	46bd      	mov	sp, r7
 8013310:	bd80      	pop	{r7, pc}
	...

08013314 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013314:	b480      	push	{r7}
 8013316:	b085      	sub	sp, #20
 8013318:	af00      	add	r7, sp, #0
 801331a:	6078      	str	r0, [r7, #4]
 801331c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801331e:	2300      	movs	r3, #0
 8013320:	60fb      	str	r3, [r7, #12]
 8013322:	e014      	b.n	801334e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013324:	4a0f      	ldr	r2, [pc, #60]	; (8013364 <vQueueAddToRegistry+0x50>)
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d10b      	bne.n	8013348 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013330:	490c      	ldr	r1, [pc, #48]	; (8013364 <vQueueAddToRegistry+0x50>)
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	683a      	ldr	r2, [r7, #0]
 8013336:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 801333a:	4a0a      	ldr	r2, [pc, #40]	; (8013364 <vQueueAddToRegistry+0x50>)
 801333c:	68fb      	ldr	r3, [r7, #12]
 801333e:	00db      	lsls	r3, r3, #3
 8013340:	4413      	add	r3, r2
 8013342:	687a      	ldr	r2, [r7, #4]
 8013344:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013346:	e006      	b.n	8013356 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	3301      	adds	r3, #1
 801334c:	60fb      	str	r3, [r7, #12]
 801334e:	68fb      	ldr	r3, [r7, #12]
 8013350:	2b07      	cmp	r3, #7
 8013352:	d9e7      	bls.n	8013324 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013354:	bf00      	nop
 8013356:	bf00      	nop
 8013358:	3714      	adds	r7, #20
 801335a:	46bd      	mov	sp, r7
 801335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013360:	4770      	bx	lr
 8013362:	bf00      	nop
 8013364:	200153a8 	.word	0x200153a8

08013368 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013368:	b480      	push	{r7}
 801336a:	b085      	sub	sp, #20
 801336c:	af00      	add	r7, sp, #0
 801336e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013370:	2300      	movs	r3, #0
 8013372:	60fb      	str	r3, [r7, #12]
 8013374:	e016      	b.n	80133a4 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013376:	4a10      	ldr	r2, [pc, #64]	; (80133b8 <vQueueUnregisterQueue+0x50>)
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	00db      	lsls	r3, r3, #3
 801337c:	4413      	add	r3, r2
 801337e:	685b      	ldr	r3, [r3, #4]
 8013380:	687a      	ldr	r2, [r7, #4]
 8013382:	429a      	cmp	r2, r3
 8013384:	d10b      	bne.n	801339e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013386:	4a0c      	ldr	r2, [pc, #48]	; (80133b8 <vQueueUnregisterQueue+0x50>)
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	2100      	movs	r1, #0
 801338c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013390:	4a09      	ldr	r2, [pc, #36]	; (80133b8 <vQueueUnregisterQueue+0x50>)
 8013392:	68fb      	ldr	r3, [r7, #12]
 8013394:	00db      	lsls	r3, r3, #3
 8013396:	4413      	add	r3, r2
 8013398:	2200      	movs	r2, #0
 801339a:	605a      	str	r2, [r3, #4]
				break;
 801339c:	e006      	b.n	80133ac <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	3301      	adds	r3, #1
 80133a2:	60fb      	str	r3, [r7, #12]
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	2b07      	cmp	r3, #7
 80133a8:	d9e5      	bls.n	8013376 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80133aa:	bf00      	nop
 80133ac:	bf00      	nop
 80133ae:	3714      	adds	r7, #20
 80133b0:	46bd      	mov	sp, r7
 80133b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133b6:	4770      	bx	lr
 80133b8:	200153a8 	.word	0x200153a8

080133bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80133bc:	b580      	push	{r7, lr}
 80133be:	b086      	sub	sp, #24
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	60f8      	str	r0, [r7, #12]
 80133c4:	60b9      	str	r1, [r7, #8]
 80133c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80133cc:	f001 fffa 	bl	80153c4 <vPortEnterCritical>
 80133d0:	697b      	ldr	r3, [r7, #20]
 80133d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80133d6:	b25b      	sxtb	r3, r3
 80133d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80133dc:	d103      	bne.n	80133e6 <vQueueWaitForMessageRestricted+0x2a>
 80133de:	697b      	ldr	r3, [r7, #20]
 80133e0:	2200      	movs	r2, #0
 80133e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80133e6:	697b      	ldr	r3, [r7, #20]
 80133e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80133ec:	b25b      	sxtb	r3, r3
 80133ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80133f2:	d103      	bne.n	80133fc <vQueueWaitForMessageRestricted+0x40>
 80133f4:	697b      	ldr	r3, [r7, #20]
 80133f6:	2200      	movs	r2, #0
 80133f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80133fc:	f002 f812 	bl	8015424 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013400:	697b      	ldr	r3, [r7, #20]
 8013402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013404:	2b00      	cmp	r3, #0
 8013406:	d106      	bne.n	8013416 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013408:	697b      	ldr	r3, [r7, #20]
 801340a:	3324      	adds	r3, #36	; 0x24
 801340c:	687a      	ldr	r2, [r7, #4]
 801340e:	68b9      	ldr	r1, [r7, #8]
 8013410:	4618      	mov	r0, r3
 8013412:	f000 fd7d 	bl	8013f10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013416:	6978      	ldr	r0, [r7, #20]
 8013418:	f7ff fefb 	bl	8013212 <prvUnlockQueue>
	}
 801341c:	bf00      	nop
 801341e:	3718      	adds	r7, #24
 8013420:	46bd      	mov	sp, r7
 8013422:	bd80      	pop	{r7, pc}

08013424 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013424:	b580      	push	{r7, lr}
 8013426:	b08e      	sub	sp, #56	; 0x38
 8013428:	af04      	add	r7, sp, #16
 801342a:	60f8      	str	r0, [r7, #12]
 801342c:	60b9      	str	r1, [r7, #8]
 801342e:	607a      	str	r2, [r7, #4]
 8013430:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013434:	2b00      	cmp	r3, #0
 8013436:	d10a      	bne.n	801344e <xTaskCreateStatic+0x2a>
	__asm volatile
 8013438:	f04f 0350 	mov.w	r3, #80	; 0x50
 801343c:	f383 8811 	msr	BASEPRI, r3
 8013440:	f3bf 8f6f 	isb	sy
 8013444:	f3bf 8f4f 	dsb	sy
 8013448:	623b      	str	r3, [r7, #32]
}
 801344a:	bf00      	nop
 801344c:	e7fe      	b.n	801344c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801344e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013450:	2b00      	cmp	r3, #0
 8013452:	d10a      	bne.n	801346a <xTaskCreateStatic+0x46>
	__asm volatile
 8013454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013458:	f383 8811 	msr	BASEPRI, r3
 801345c:	f3bf 8f6f 	isb	sy
 8013460:	f3bf 8f4f 	dsb	sy
 8013464:	61fb      	str	r3, [r7, #28]
}
 8013466:	bf00      	nop
 8013468:	e7fe      	b.n	8013468 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801346a:	23c0      	movs	r3, #192	; 0xc0
 801346c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801346e:	693b      	ldr	r3, [r7, #16]
 8013470:	2bc0      	cmp	r3, #192	; 0xc0
 8013472:	d00a      	beq.n	801348a <xTaskCreateStatic+0x66>
	__asm volatile
 8013474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013478:	f383 8811 	msr	BASEPRI, r3
 801347c:	f3bf 8f6f 	isb	sy
 8013480:	f3bf 8f4f 	dsb	sy
 8013484:	61bb      	str	r3, [r7, #24]
}
 8013486:	bf00      	nop
 8013488:	e7fe      	b.n	8013488 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801348a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 801348c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801348e:	2b00      	cmp	r3, #0
 8013490:	d01e      	beq.n	80134d0 <xTaskCreateStatic+0xac>
 8013492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013494:	2b00      	cmp	r3, #0
 8013496:	d01b      	beq.n	80134d0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801349a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 801349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801349e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134a0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80134a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134a4:	2202      	movs	r2, #2
 80134a6:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80134aa:	2300      	movs	r3, #0
 80134ac:	9303      	str	r3, [sp, #12]
 80134ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134b0:	9302      	str	r3, [sp, #8]
 80134b2:	f107 0314 	add.w	r3, r7, #20
 80134b6:	9301      	str	r3, [sp, #4]
 80134b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ba:	9300      	str	r3, [sp, #0]
 80134bc:	683b      	ldr	r3, [r7, #0]
 80134be:	687a      	ldr	r2, [r7, #4]
 80134c0:	68b9      	ldr	r1, [r7, #8]
 80134c2:	68f8      	ldr	r0, [r7, #12]
 80134c4:	f000 f850 	bl	8013568 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80134c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80134ca:	f000 f8f7 	bl	80136bc <prvAddNewTaskToReadyList>
 80134ce:	e001      	b.n	80134d4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80134d0:	2300      	movs	r3, #0
 80134d2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80134d4:	697b      	ldr	r3, [r7, #20]
	}
 80134d6:	4618      	mov	r0, r3
 80134d8:	3728      	adds	r7, #40	; 0x28
 80134da:	46bd      	mov	sp, r7
 80134dc:	bd80      	pop	{r7, pc}

080134de <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80134de:	b580      	push	{r7, lr}
 80134e0:	b08c      	sub	sp, #48	; 0x30
 80134e2:	af04      	add	r7, sp, #16
 80134e4:	60f8      	str	r0, [r7, #12]
 80134e6:	60b9      	str	r1, [r7, #8]
 80134e8:	603b      	str	r3, [r7, #0]
 80134ea:	4613      	mov	r3, r2
 80134ec:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80134ee:	88fb      	ldrh	r3, [r7, #6]
 80134f0:	009b      	lsls	r3, r3, #2
 80134f2:	4618      	mov	r0, r3
 80134f4:	f002 f888 	bl	8015608 <pvPortMalloc>
 80134f8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80134fa:	697b      	ldr	r3, [r7, #20]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d00e      	beq.n	801351e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013500:	20c0      	movs	r0, #192	; 0xc0
 8013502:	f002 f881 	bl	8015608 <pvPortMalloc>
 8013506:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013508:	69fb      	ldr	r3, [r7, #28]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d003      	beq.n	8013516 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801350e:	69fb      	ldr	r3, [r7, #28]
 8013510:	697a      	ldr	r2, [r7, #20]
 8013512:	631a      	str	r2, [r3, #48]	; 0x30
 8013514:	e005      	b.n	8013522 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013516:	6978      	ldr	r0, [r7, #20]
 8013518:	f002 f942 	bl	80157a0 <vPortFree>
 801351c:	e001      	b.n	8013522 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801351e:	2300      	movs	r3, #0
 8013520:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013522:	69fb      	ldr	r3, [r7, #28]
 8013524:	2b00      	cmp	r3, #0
 8013526:	d017      	beq.n	8013558 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013528:	69fb      	ldr	r3, [r7, #28]
 801352a:	2200      	movs	r2, #0
 801352c:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013530:	88fa      	ldrh	r2, [r7, #6]
 8013532:	2300      	movs	r3, #0
 8013534:	9303      	str	r3, [sp, #12]
 8013536:	69fb      	ldr	r3, [r7, #28]
 8013538:	9302      	str	r3, [sp, #8]
 801353a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801353c:	9301      	str	r3, [sp, #4]
 801353e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013540:	9300      	str	r3, [sp, #0]
 8013542:	683b      	ldr	r3, [r7, #0]
 8013544:	68b9      	ldr	r1, [r7, #8]
 8013546:	68f8      	ldr	r0, [r7, #12]
 8013548:	f000 f80e 	bl	8013568 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801354c:	69f8      	ldr	r0, [r7, #28]
 801354e:	f000 f8b5 	bl	80136bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013552:	2301      	movs	r3, #1
 8013554:	61bb      	str	r3, [r7, #24]
 8013556:	e002      	b.n	801355e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013558:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801355c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801355e:	69bb      	ldr	r3, [r7, #24]
	}
 8013560:	4618      	mov	r0, r3
 8013562:	3720      	adds	r7, #32
 8013564:	46bd      	mov	sp, r7
 8013566:	bd80      	pop	{r7, pc}

08013568 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b088      	sub	sp, #32
 801356c:	af00      	add	r7, sp, #0
 801356e:	60f8      	str	r0, [r7, #12]
 8013570:	60b9      	str	r1, [r7, #8]
 8013572:	607a      	str	r2, [r7, #4]
 8013574:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013578:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	009b      	lsls	r3, r3, #2
 801357e:	461a      	mov	r2, r3
 8013580:	21a5      	movs	r1, #165	; 0xa5
 8013582:	f003 f8bb 	bl	80166fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013588:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013590:	3b01      	subs	r3, #1
 8013592:	009b      	lsls	r3, r3, #2
 8013594:	4413      	add	r3, r2
 8013596:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013598:	69bb      	ldr	r3, [r7, #24]
 801359a:	f023 0307 	bic.w	r3, r3, #7
 801359e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80135a0:	69bb      	ldr	r3, [r7, #24]
 80135a2:	f003 0307 	and.w	r3, r3, #7
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	d00a      	beq.n	80135c0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80135aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135ae:	f383 8811 	msr	BASEPRI, r3
 80135b2:	f3bf 8f6f 	isb	sy
 80135b6:	f3bf 8f4f 	dsb	sy
 80135ba:	617b      	str	r3, [r7, #20]
}
 80135bc:	bf00      	nop
 80135be:	e7fe      	b.n	80135be <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	2b00      	cmp	r3, #0
 80135c4:	d01f      	beq.n	8013606 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80135c6:	2300      	movs	r3, #0
 80135c8:	61fb      	str	r3, [r7, #28]
 80135ca:	e012      	b.n	80135f2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80135cc:	68ba      	ldr	r2, [r7, #8]
 80135ce:	69fb      	ldr	r3, [r7, #28]
 80135d0:	4413      	add	r3, r2
 80135d2:	7819      	ldrb	r1, [r3, #0]
 80135d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80135d6:	69fb      	ldr	r3, [r7, #28]
 80135d8:	4413      	add	r3, r2
 80135da:	3334      	adds	r3, #52	; 0x34
 80135dc:	460a      	mov	r2, r1
 80135de:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80135e0:	68ba      	ldr	r2, [r7, #8]
 80135e2:	69fb      	ldr	r3, [r7, #28]
 80135e4:	4413      	add	r3, r2
 80135e6:	781b      	ldrb	r3, [r3, #0]
 80135e8:	2b00      	cmp	r3, #0
 80135ea:	d006      	beq.n	80135fa <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80135ec:	69fb      	ldr	r3, [r7, #28]
 80135ee:	3301      	adds	r3, #1
 80135f0:	61fb      	str	r3, [r7, #28]
 80135f2:	69fb      	ldr	r3, [r7, #28]
 80135f4:	2b0f      	cmp	r3, #15
 80135f6:	d9e9      	bls.n	80135cc <prvInitialiseNewTask+0x64>
 80135f8:	e000      	b.n	80135fc <prvInitialiseNewTask+0x94>
			{
				break;
 80135fa:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80135fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135fe:	2200      	movs	r2, #0
 8013600:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013604:	e003      	b.n	801360e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013608:	2200      	movs	r2, #0
 801360a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801360e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013610:	2b37      	cmp	r3, #55	; 0x37
 8013612:	d901      	bls.n	8013618 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013614:	2337      	movs	r3, #55	; 0x37
 8013616:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801361a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801361c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801361e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013620:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013622:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013626:	2200      	movs	r2, #0
 8013628:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801362a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801362c:	3304      	adds	r3, #4
 801362e:	4618      	mov	r0, r3
 8013630:	f7fe fe56 	bl	80122e0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013636:	3318      	adds	r3, #24
 8013638:	4618      	mov	r0, r3
 801363a:	f7fe fe51 	bl	80122e0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801363e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013640:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013642:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013646:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801364a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801364c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801364e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013652:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8013654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013656:	2200      	movs	r2, #0
 8013658:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801365c:	2200      	movs	r2, #0
 801365e:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8013662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013664:	2200      	movs	r2, #0
 8013666:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801366a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801366c:	3358      	adds	r3, #88	; 0x58
 801366e:	2260      	movs	r2, #96	; 0x60
 8013670:	2100      	movs	r1, #0
 8013672:	4618      	mov	r0, r3
 8013674:	f003 f842 	bl	80166fc <memset>
 8013678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801367a:	4a0d      	ldr	r2, [pc, #52]	; (80136b0 <prvInitialiseNewTask+0x148>)
 801367c:	65da      	str	r2, [r3, #92]	; 0x5c
 801367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013680:	4a0c      	ldr	r2, [pc, #48]	; (80136b4 <prvInitialiseNewTask+0x14c>)
 8013682:	661a      	str	r2, [r3, #96]	; 0x60
 8013684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013686:	4a0c      	ldr	r2, [pc, #48]	; (80136b8 <prvInitialiseNewTask+0x150>)
 8013688:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801368a:	683a      	ldr	r2, [r7, #0]
 801368c:	68f9      	ldr	r1, [r7, #12]
 801368e:	69b8      	ldr	r0, [r7, #24]
 8013690:	f001 fd6c 	bl	801516c <pxPortInitialiseStack>
 8013694:	4602      	mov	r2, r0
 8013696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013698:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801369a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801369c:	2b00      	cmp	r3, #0
 801369e:	d002      	beq.n	80136a6 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80136a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80136a6:	bf00      	nop
 80136a8:	3720      	adds	r7, #32
 80136aa:	46bd      	mov	sp, r7
 80136ac:	bd80      	pop	{r7, pc}
 80136ae:	bf00      	nop
 80136b0:	0801a2d0 	.word	0x0801a2d0
 80136b4:	0801a2f0 	.word	0x0801a2f0
 80136b8:	0801a2b0 	.word	0x0801a2b0

080136bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b082      	sub	sp, #8
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80136c4:	f001 fe7e 	bl	80153c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80136c8:	4b2d      	ldr	r3, [pc, #180]	; (8013780 <prvAddNewTaskToReadyList+0xc4>)
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	3301      	adds	r3, #1
 80136ce:	4a2c      	ldr	r2, [pc, #176]	; (8013780 <prvAddNewTaskToReadyList+0xc4>)
 80136d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80136d2:	4b2c      	ldr	r3, [pc, #176]	; (8013784 <prvAddNewTaskToReadyList+0xc8>)
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d109      	bne.n	80136ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80136da:	4a2a      	ldr	r2, [pc, #168]	; (8013784 <prvAddNewTaskToReadyList+0xc8>)
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80136e0:	4b27      	ldr	r3, [pc, #156]	; (8013780 <prvAddNewTaskToReadyList+0xc4>)
 80136e2:	681b      	ldr	r3, [r3, #0]
 80136e4:	2b01      	cmp	r3, #1
 80136e6:	d110      	bne.n	801370a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80136e8:	f000 fd3e 	bl	8014168 <prvInitialiseTaskLists>
 80136ec:	e00d      	b.n	801370a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80136ee:	4b26      	ldr	r3, [pc, #152]	; (8013788 <prvAddNewTaskToReadyList+0xcc>)
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d109      	bne.n	801370a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80136f6:	4b23      	ldr	r3, [pc, #140]	; (8013784 <prvAddNewTaskToReadyList+0xc8>)
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013700:	429a      	cmp	r2, r3
 8013702:	d802      	bhi.n	801370a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8013704:	4a1f      	ldr	r2, [pc, #124]	; (8013784 <prvAddNewTaskToReadyList+0xc8>)
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801370a:	4b20      	ldr	r3, [pc, #128]	; (801378c <prvAddNewTaskToReadyList+0xd0>)
 801370c:	681b      	ldr	r3, [r3, #0]
 801370e:	3301      	adds	r3, #1
 8013710:	4a1e      	ldr	r2, [pc, #120]	; (801378c <prvAddNewTaskToReadyList+0xd0>)
 8013712:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8013714:	4b1d      	ldr	r3, [pc, #116]	; (801378c <prvAddNewTaskToReadyList+0xd0>)
 8013716:	681a      	ldr	r2, [r3, #0]
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013720:	4b1b      	ldr	r3, [pc, #108]	; (8013790 <prvAddNewTaskToReadyList+0xd4>)
 8013722:	681b      	ldr	r3, [r3, #0]
 8013724:	429a      	cmp	r2, r3
 8013726:	d903      	bls.n	8013730 <prvAddNewTaskToReadyList+0x74>
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801372c:	4a18      	ldr	r2, [pc, #96]	; (8013790 <prvAddNewTaskToReadyList+0xd4>)
 801372e:	6013      	str	r3, [r2, #0]
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013734:	4613      	mov	r3, r2
 8013736:	009b      	lsls	r3, r3, #2
 8013738:	4413      	add	r3, r2
 801373a:	009b      	lsls	r3, r3, #2
 801373c:	4a15      	ldr	r2, [pc, #84]	; (8013794 <prvAddNewTaskToReadyList+0xd8>)
 801373e:	441a      	add	r2, r3
 8013740:	687b      	ldr	r3, [r7, #4]
 8013742:	3304      	adds	r3, #4
 8013744:	4619      	mov	r1, r3
 8013746:	4610      	mov	r0, r2
 8013748:	f7fe fdd7 	bl	80122fa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801374c:	f001 fe6a 	bl	8015424 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8013750:	4b0d      	ldr	r3, [pc, #52]	; (8013788 <prvAddNewTaskToReadyList+0xcc>)
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	2b00      	cmp	r3, #0
 8013756:	d00e      	beq.n	8013776 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013758:	4b0a      	ldr	r3, [pc, #40]	; (8013784 <prvAddNewTaskToReadyList+0xc8>)
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013762:	429a      	cmp	r2, r3
 8013764:	d207      	bcs.n	8013776 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8013766:	4b0c      	ldr	r3, [pc, #48]	; (8013798 <prvAddNewTaskToReadyList+0xdc>)
 8013768:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801376c:	601a      	str	r2, [r3, #0]
 801376e:	f3bf 8f4f 	dsb	sy
 8013772:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013776:	bf00      	nop
 8013778:	3708      	adds	r7, #8
 801377a:	46bd      	mov	sp, r7
 801377c:	bd80      	pop	{r7, pc}
 801377e:	bf00      	nop
 8013780:	20001418 	.word	0x20001418
 8013784:	20000f44 	.word	0x20000f44
 8013788:	20001424 	.word	0x20001424
 801378c:	20001434 	.word	0x20001434
 8013790:	20001420 	.word	0x20001420
 8013794:	20000f48 	.word	0x20000f48
 8013798:	e000ed04 	.word	0xe000ed04

0801379c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801379c:	b580      	push	{r7, lr}
 801379e:	b084      	sub	sp, #16
 80137a0:	af00      	add	r7, sp, #0
 80137a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80137a4:	2300      	movs	r3, #0
 80137a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d017      	beq.n	80137de <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80137ae:	4b13      	ldr	r3, [pc, #76]	; (80137fc <vTaskDelay+0x60>)
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	2b00      	cmp	r3, #0
 80137b4:	d00a      	beq.n	80137cc <vTaskDelay+0x30>
	__asm volatile
 80137b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137ba:	f383 8811 	msr	BASEPRI, r3
 80137be:	f3bf 8f6f 	isb	sy
 80137c2:	f3bf 8f4f 	dsb	sy
 80137c6:	60bb      	str	r3, [r7, #8]
}
 80137c8:	bf00      	nop
 80137ca:	e7fe      	b.n	80137ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80137cc:	f000 f8f4 	bl	80139b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80137d0:	2100      	movs	r1, #0
 80137d2:	6878      	ldr	r0, [r7, #4]
 80137d4:	f001 f928 	bl	8014a28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80137d8:	f000 f8fc 	bl	80139d4 <xTaskResumeAll>
 80137dc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80137de:	68fb      	ldr	r3, [r7, #12]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d107      	bne.n	80137f4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80137e4:	4b06      	ldr	r3, [pc, #24]	; (8013800 <vTaskDelay+0x64>)
 80137e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137ea:	601a      	str	r2, [r3, #0]
 80137ec:	f3bf 8f4f 	dsb	sy
 80137f0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80137f4:	bf00      	nop
 80137f6:	3710      	adds	r7, #16
 80137f8:	46bd      	mov	sp, r7
 80137fa:	bd80      	pop	{r7, pc}
 80137fc:	20001440 	.word	0x20001440
 8013800:	e000ed04 	.word	0xe000ed04

08013804 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8013804:	b580      	push	{r7, lr}
 8013806:	b088      	sub	sp, #32
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8013810:	69bb      	ldr	r3, [r7, #24]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d10a      	bne.n	801382c <eTaskGetState+0x28>
	__asm volatile
 8013816:	f04f 0350 	mov.w	r3, #80	; 0x50
 801381a:	f383 8811 	msr	BASEPRI, r3
 801381e:	f3bf 8f6f 	isb	sy
 8013822:	f3bf 8f4f 	dsb	sy
 8013826:	60bb      	str	r3, [r7, #8]
}
 8013828:	bf00      	nop
 801382a:	e7fe      	b.n	801382a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 801382c:	4b23      	ldr	r3, [pc, #140]	; (80138bc <eTaskGetState+0xb8>)
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	69ba      	ldr	r2, [r7, #24]
 8013832:	429a      	cmp	r2, r3
 8013834:	d102      	bne.n	801383c <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8013836:	2300      	movs	r3, #0
 8013838:	77fb      	strb	r3, [r7, #31]
 801383a:	e03a      	b.n	80138b2 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 801383c:	f001 fdc2 	bl	80153c4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8013840:	69bb      	ldr	r3, [r7, #24]
 8013842:	695b      	ldr	r3, [r3, #20]
 8013844:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8013846:	4b1e      	ldr	r3, [pc, #120]	; (80138c0 <eTaskGetState+0xbc>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 801384c:	4b1d      	ldr	r3, [pc, #116]	; (80138c4 <eTaskGetState+0xc0>)
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8013852:	f001 fde7 	bl	8015424 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8013856:	697a      	ldr	r2, [r7, #20]
 8013858:	693b      	ldr	r3, [r7, #16]
 801385a:	429a      	cmp	r2, r3
 801385c:	d003      	beq.n	8013866 <eTaskGetState+0x62>
 801385e:	697a      	ldr	r2, [r7, #20]
 8013860:	68fb      	ldr	r3, [r7, #12]
 8013862:	429a      	cmp	r2, r3
 8013864:	d102      	bne.n	801386c <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8013866:	2302      	movs	r3, #2
 8013868:	77fb      	strb	r3, [r7, #31]
 801386a:	e022      	b.n	80138b2 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 801386c:	697b      	ldr	r3, [r7, #20]
 801386e:	4a16      	ldr	r2, [pc, #88]	; (80138c8 <eTaskGetState+0xc4>)
 8013870:	4293      	cmp	r3, r2
 8013872:	d112      	bne.n	801389a <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8013874:	69bb      	ldr	r3, [r7, #24]
 8013876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013878:	2b00      	cmp	r3, #0
 801387a:	d10b      	bne.n	8013894 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801387c:	69bb      	ldr	r3, [r7, #24]
 801387e:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8013882:	b2db      	uxtb	r3, r3
 8013884:	2b01      	cmp	r3, #1
 8013886:	d102      	bne.n	801388e <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8013888:	2302      	movs	r3, #2
 801388a:	77fb      	strb	r3, [r7, #31]
 801388c:	e011      	b.n	80138b2 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 801388e:	2303      	movs	r3, #3
 8013890:	77fb      	strb	r3, [r7, #31]
 8013892:	e00e      	b.n	80138b2 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8013894:	2302      	movs	r3, #2
 8013896:	77fb      	strb	r3, [r7, #31]
 8013898:	e00b      	b.n	80138b2 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 801389a:	697b      	ldr	r3, [r7, #20]
 801389c:	4a0b      	ldr	r2, [pc, #44]	; (80138cc <eTaskGetState+0xc8>)
 801389e:	4293      	cmp	r3, r2
 80138a0:	d002      	beq.n	80138a8 <eTaskGetState+0xa4>
 80138a2:	697b      	ldr	r3, [r7, #20]
 80138a4:	2b00      	cmp	r3, #0
 80138a6:	d102      	bne.n	80138ae <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80138a8:	2304      	movs	r3, #4
 80138aa:	77fb      	strb	r3, [r7, #31]
 80138ac:	e001      	b.n	80138b2 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80138ae:	2301      	movs	r3, #1
 80138b0:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80138b2:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80138b4:	4618      	mov	r0, r3
 80138b6:	3720      	adds	r7, #32
 80138b8:	46bd      	mov	sp, r7
 80138ba:	bd80      	pop	{r7, pc}
 80138bc:	20000f44 	.word	0x20000f44
 80138c0:	200013d0 	.word	0x200013d0
 80138c4:	200013d4 	.word	0x200013d4
 80138c8:	20001404 	.word	0x20001404
 80138cc:	200013ec 	.word	0x200013ec

080138d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80138d0:	b580      	push	{r7, lr}
 80138d2:	b08a      	sub	sp, #40	; 0x28
 80138d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80138d6:	2300      	movs	r3, #0
 80138d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80138da:	2300      	movs	r3, #0
 80138dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80138de:	463a      	mov	r2, r7
 80138e0:	1d39      	adds	r1, r7, #4
 80138e2:	f107 0308 	add.w	r3, r7, #8
 80138e6:	4618      	mov	r0, r3
 80138e8:	f7fe fca6 	bl	8012238 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80138ec:	6839      	ldr	r1, [r7, #0]
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	68ba      	ldr	r2, [r7, #8]
 80138f2:	9202      	str	r2, [sp, #8]
 80138f4:	9301      	str	r3, [sp, #4]
 80138f6:	2300      	movs	r3, #0
 80138f8:	9300      	str	r3, [sp, #0]
 80138fa:	2300      	movs	r3, #0
 80138fc:	460a      	mov	r2, r1
 80138fe:	4925      	ldr	r1, [pc, #148]	; (8013994 <vTaskStartScheduler+0xc4>)
 8013900:	4825      	ldr	r0, [pc, #148]	; (8013998 <vTaskStartScheduler+0xc8>)
 8013902:	f7ff fd8f 	bl	8013424 <xTaskCreateStatic>
 8013906:	4603      	mov	r3, r0
 8013908:	4a24      	ldr	r2, [pc, #144]	; (801399c <vTaskStartScheduler+0xcc>)
 801390a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801390c:	4b23      	ldr	r3, [pc, #140]	; (801399c <vTaskStartScheduler+0xcc>)
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	2b00      	cmp	r3, #0
 8013912:	d002      	beq.n	801391a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013914:	2301      	movs	r3, #1
 8013916:	617b      	str	r3, [r7, #20]
 8013918:	e001      	b.n	801391e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801391a:	2300      	movs	r3, #0
 801391c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801391e:	697b      	ldr	r3, [r7, #20]
 8013920:	2b01      	cmp	r3, #1
 8013922:	d102      	bne.n	801392a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8013924:	f001 f8d4 	bl	8014ad0 <xTimerCreateTimerTask>
 8013928:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801392a:	697b      	ldr	r3, [r7, #20]
 801392c:	2b01      	cmp	r3, #1
 801392e:	d11e      	bne.n	801396e <vTaskStartScheduler+0x9e>
	__asm volatile
 8013930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013934:	f383 8811 	msr	BASEPRI, r3
 8013938:	f3bf 8f6f 	isb	sy
 801393c:	f3bf 8f4f 	dsb	sy
 8013940:	613b      	str	r3, [r7, #16]
}
 8013942:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013944:	4b16      	ldr	r3, [pc, #88]	; (80139a0 <vTaskStartScheduler+0xd0>)
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	3358      	adds	r3, #88	; 0x58
 801394a:	4a16      	ldr	r2, [pc, #88]	; (80139a4 <vTaskStartScheduler+0xd4>)
 801394c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801394e:	4b16      	ldr	r3, [pc, #88]	; (80139a8 <vTaskStartScheduler+0xd8>)
 8013950:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013954:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013956:	4b15      	ldr	r3, [pc, #84]	; (80139ac <vTaskStartScheduler+0xdc>)
 8013958:	2201      	movs	r2, #1
 801395a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801395c:	4b14      	ldr	r3, [pc, #80]	; (80139b0 <vTaskStartScheduler+0xe0>)
 801395e:	2200      	movs	r2, #0
 8013960:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8013962:	4b14      	ldr	r3, [pc, #80]	; (80139b4 <vTaskStartScheduler+0xe4>)
 8013964:	2200      	movs	r2, #0
 8013966:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013968:	f001 fc8a 	bl	8015280 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801396c:	e00e      	b.n	801398c <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801396e:	697b      	ldr	r3, [r7, #20]
 8013970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013974:	d10a      	bne.n	801398c <vTaskStartScheduler+0xbc>
	__asm volatile
 8013976:	f04f 0350 	mov.w	r3, #80	; 0x50
 801397a:	f383 8811 	msr	BASEPRI, r3
 801397e:	f3bf 8f6f 	isb	sy
 8013982:	f3bf 8f4f 	dsb	sy
 8013986:	60fb      	str	r3, [r7, #12]
}
 8013988:	bf00      	nop
 801398a:	e7fe      	b.n	801398a <vTaskStartScheduler+0xba>
}
 801398c:	bf00      	nop
 801398e:	3718      	adds	r7, #24
 8013990:	46bd      	mov	sp, r7
 8013992:	bd80      	pop	{r7, pc}
 8013994:	08019a58 	.word	0x08019a58
 8013998:	08014139 	.word	0x08014139
 801399c:	2000143c 	.word	0x2000143c
 80139a0:	20000f44 	.word	0x20000f44
 80139a4:	200001a0 	.word	0x200001a0
 80139a8:	20001438 	.word	0x20001438
 80139ac:	20001424 	.word	0x20001424
 80139b0:	2000141c 	.word	0x2000141c
 80139b4:	20010fe0 	.word	0x20010fe0

080139b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80139b8:	b480      	push	{r7}
 80139ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80139bc:	4b04      	ldr	r3, [pc, #16]	; (80139d0 <vTaskSuspendAll+0x18>)
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	3301      	adds	r3, #1
 80139c2:	4a03      	ldr	r2, [pc, #12]	; (80139d0 <vTaskSuspendAll+0x18>)
 80139c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80139c6:	bf00      	nop
 80139c8:	46bd      	mov	sp, r7
 80139ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ce:	4770      	bx	lr
 80139d0:	20001440 	.word	0x20001440

080139d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80139d4:	b580      	push	{r7, lr}
 80139d6:	b084      	sub	sp, #16
 80139d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80139da:	2300      	movs	r3, #0
 80139dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80139de:	2300      	movs	r3, #0
 80139e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80139e2:	4b42      	ldr	r3, [pc, #264]	; (8013aec <xTaskResumeAll+0x118>)
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d10a      	bne.n	8013a00 <xTaskResumeAll+0x2c>
	__asm volatile
 80139ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139ee:	f383 8811 	msr	BASEPRI, r3
 80139f2:	f3bf 8f6f 	isb	sy
 80139f6:	f3bf 8f4f 	dsb	sy
 80139fa:	603b      	str	r3, [r7, #0]
}
 80139fc:	bf00      	nop
 80139fe:	e7fe      	b.n	80139fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013a00:	f001 fce0 	bl	80153c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013a04:	4b39      	ldr	r3, [pc, #228]	; (8013aec <xTaskResumeAll+0x118>)
 8013a06:	681b      	ldr	r3, [r3, #0]
 8013a08:	3b01      	subs	r3, #1
 8013a0a:	4a38      	ldr	r2, [pc, #224]	; (8013aec <xTaskResumeAll+0x118>)
 8013a0c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013a0e:	4b37      	ldr	r3, [pc, #220]	; (8013aec <xTaskResumeAll+0x118>)
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d162      	bne.n	8013adc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013a16:	4b36      	ldr	r3, [pc, #216]	; (8013af0 <xTaskResumeAll+0x11c>)
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d05e      	beq.n	8013adc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013a1e:	e02f      	b.n	8013a80 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013a20:	4b34      	ldr	r3, [pc, #208]	; (8013af4 <xTaskResumeAll+0x120>)
 8013a22:	68db      	ldr	r3, [r3, #12]
 8013a24:	68db      	ldr	r3, [r3, #12]
 8013a26:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	3318      	adds	r3, #24
 8013a2c:	4618      	mov	r0, r3
 8013a2e:	f7fe fcc1 	bl	80123b4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	3304      	adds	r3, #4
 8013a36:	4618      	mov	r0, r3
 8013a38:	f7fe fcbc 	bl	80123b4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a40:	4b2d      	ldr	r3, [pc, #180]	; (8013af8 <xTaskResumeAll+0x124>)
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	429a      	cmp	r2, r3
 8013a46:	d903      	bls.n	8013a50 <xTaskResumeAll+0x7c>
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a4c:	4a2a      	ldr	r2, [pc, #168]	; (8013af8 <xTaskResumeAll+0x124>)
 8013a4e:	6013      	str	r3, [r2, #0]
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a54:	4613      	mov	r3, r2
 8013a56:	009b      	lsls	r3, r3, #2
 8013a58:	4413      	add	r3, r2
 8013a5a:	009b      	lsls	r3, r3, #2
 8013a5c:	4a27      	ldr	r2, [pc, #156]	; (8013afc <xTaskResumeAll+0x128>)
 8013a5e:	441a      	add	r2, r3
 8013a60:	68fb      	ldr	r3, [r7, #12]
 8013a62:	3304      	adds	r3, #4
 8013a64:	4619      	mov	r1, r3
 8013a66:	4610      	mov	r0, r2
 8013a68:	f7fe fc47 	bl	80122fa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013a70:	4b23      	ldr	r3, [pc, #140]	; (8013b00 <xTaskResumeAll+0x12c>)
 8013a72:	681b      	ldr	r3, [r3, #0]
 8013a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013a76:	429a      	cmp	r2, r3
 8013a78:	d302      	bcc.n	8013a80 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8013a7a:	4b22      	ldr	r3, [pc, #136]	; (8013b04 <xTaskResumeAll+0x130>)
 8013a7c:	2201      	movs	r2, #1
 8013a7e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013a80:	4b1c      	ldr	r3, [pc, #112]	; (8013af4 <xTaskResumeAll+0x120>)
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d1cb      	bne.n	8013a20 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013a88:	68fb      	ldr	r3, [r7, #12]
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d001      	beq.n	8013a92 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013a8e:	f000 fce1 	bl	8014454 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8013a92:	4b1d      	ldr	r3, [pc, #116]	; (8013b08 <xTaskResumeAll+0x134>)
 8013a94:	681b      	ldr	r3, [r3, #0]
 8013a96:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8013a98:	687b      	ldr	r3, [r7, #4]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d010      	beq.n	8013ac0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013a9e:	f000 f8d7 	bl	8013c50 <xTaskIncrementTick>
 8013aa2:	4603      	mov	r3, r0
 8013aa4:	2b00      	cmp	r3, #0
 8013aa6:	d002      	beq.n	8013aae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8013aa8:	4b16      	ldr	r3, [pc, #88]	; (8013b04 <xTaskResumeAll+0x130>)
 8013aaa:	2201      	movs	r2, #1
 8013aac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	3b01      	subs	r3, #1
 8013ab2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d1f1      	bne.n	8013a9e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8013aba:	4b13      	ldr	r3, [pc, #76]	; (8013b08 <xTaskResumeAll+0x134>)
 8013abc:	2200      	movs	r2, #0
 8013abe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013ac0:	4b10      	ldr	r3, [pc, #64]	; (8013b04 <xTaskResumeAll+0x130>)
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	2b00      	cmp	r3, #0
 8013ac6:	d009      	beq.n	8013adc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013ac8:	2301      	movs	r3, #1
 8013aca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013acc:	4b0f      	ldr	r3, [pc, #60]	; (8013b0c <xTaskResumeAll+0x138>)
 8013ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ad2:	601a      	str	r2, [r3, #0]
 8013ad4:	f3bf 8f4f 	dsb	sy
 8013ad8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013adc:	f001 fca2 	bl	8015424 <vPortExitCritical>

	return xAlreadyYielded;
 8013ae0:	68bb      	ldr	r3, [r7, #8]
}
 8013ae2:	4618      	mov	r0, r3
 8013ae4:	3710      	adds	r7, #16
 8013ae6:	46bd      	mov	sp, r7
 8013ae8:	bd80      	pop	{r7, pc}
 8013aea:	bf00      	nop
 8013aec:	20001440 	.word	0x20001440
 8013af0:	20001418 	.word	0x20001418
 8013af4:	200013d8 	.word	0x200013d8
 8013af8:	20001420 	.word	0x20001420
 8013afc:	20000f48 	.word	0x20000f48
 8013b00:	20000f44 	.word	0x20000f44
 8013b04:	2000142c 	.word	0x2000142c
 8013b08:	20001428 	.word	0x20001428
 8013b0c:	e000ed04 	.word	0xe000ed04

08013b10 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013b10:	b480      	push	{r7}
 8013b12:	b083      	sub	sp, #12
 8013b14:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013b16:	4b05      	ldr	r3, [pc, #20]	; (8013b2c <xTaskGetTickCount+0x1c>)
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013b1c:	687b      	ldr	r3, [r7, #4]
}
 8013b1e:	4618      	mov	r0, r3
 8013b20:	370c      	adds	r7, #12
 8013b22:	46bd      	mov	sp, r7
 8013b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b28:	4770      	bx	lr
 8013b2a:	bf00      	nop
 8013b2c:	2000141c 	.word	0x2000141c

08013b30 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b086      	sub	sp, #24
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	60f8      	str	r0, [r7, #12]
 8013b38:	60b9      	str	r1, [r7, #8]
 8013b3a:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8013b3c:	2300      	movs	r3, #0
 8013b3e:	617b      	str	r3, [r7, #20]
 8013b40:	2338      	movs	r3, #56	; 0x38
 8013b42:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8013b44:	f7ff ff38 	bl	80139b8 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8013b48:	4b3a      	ldr	r3, [pc, #232]	; (8013c34 <uxTaskGetSystemState+0x104>)
 8013b4a:	681b      	ldr	r3, [r3, #0]
 8013b4c:	68ba      	ldr	r2, [r7, #8]
 8013b4e:	429a      	cmp	r2, r3
 8013b50:	d369      	bcc.n	8013c26 <uxTaskGetSystemState+0xf6>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8013b52:	693b      	ldr	r3, [r7, #16]
 8013b54:	3b01      	subs	r3, #1
 8013b56:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8013b58:	697a      	ldr	r2, [r7, #20]
 8013b5a:	4613      	mov	r3, r2
 8013b5c:	00db      	lsls	r3, r3, #3
 8013b5e:	4413      	add	r3, r2
 8013b60:	009b      	lsls	r3, r3, #2
 8013b62:	461a      	mov	r2, r3
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	1898      	adds	r0, r3, r2
 8013b68:	693a      	ldr	r2, [r7, #16]
 8013b6a:	4613      	mov	r3, r2
 8013b6c:	009b      	lsls	r3, r3, #2
 8013b6e:	4413      	add	r3, r2
 8013b70:	009b      	lsls	r3, r3, #2
 8013b72:	4a31      	ldr	r2, [pc, #196]	; (8013c38 <uxTaskGetSystemState+0x108>)
 8013b74:	4413      	add	r3, r2
 8013b76:	2201      	movs	r2, #1
 8013b78:	4619      	mov	r1, r3
 8013b7a:	f000 fbc9 	bl	8014310 <prvListTasksWithinSingleList>
 8013b7e:	4602      	mov	r2, r0
 8013b80:	697b      	ldr	r3, [r7, #20]
 8013b82:	4413      	add	r3, r2
 8013b84:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013b86:	693b      	ldr	r3, [r7, #16]
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d1e2      	bne.n	8013b52 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8013b8c:	697a      	ldr	r2, [r7, #20]
 8013b8e:	4613      	mov	r3, r2
 8013b90:	00db      	lsls	r3, r3, #3
 8013b92:	4413      	add	r3, r2
 8013b94:	009b      	lsls	r3, r3, #2
 8013b96:	461a      	mov	r2, r3
 8013b98:	68fb      	ldr	r3, [r7, #12]
 8013b9a:	4413      	add	r3, r2
 8013b9c:	4a27      	ldr	r2, [pc, #156]	; (8013c3c <uxTaskGetSystemState+0x10c>)
 8013b9e:	6811      	ldr	r1, [r2, #0]
 8013ba0:	2202      	movs	r2, #2
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	f000 fbb4 	bl	8014310 <prvListTasksWithinSingleList>
 8013ba8:	4602      	mov	r2, r0
 8013baa:	697b      	ldr	r3, [r7, #20]
 8013bac:	4413      	add	r3, r2
 8013bae:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8013bb0:	697a      	ldr	r2, [r7, #20]
 8013bb2:	4613      	mov	r3, r2
 8013bb4:	00db      	lsls	r3, r3, #3
 8013bb6:	4413      	add	r3, r2
 8013bb8:	009b      	lsls	r3, r3, #2
 8013bba:	461a      	mov	r2, r3
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	4413      	add	r3, r2
 8013bc0:	4a1f      	ldr	r2, [pc, #124]	; (8013c40 <uxTaskGetSystemState+0x110>)
 8013bc2:	6811      	ldr	r1, [r2, #0]
 8013bc4:	2202      	movs	r2, #2
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	f000 fba2 	bl	8014310 <prvListTasksWithinSingleList>
 8013bcc:	4602      	mov	r2, r0
 8013bce:	697b      	ldr	r3, [r7, #20]
 8013bd0:	4413      	add	r3, r2
 8013bd2:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8013bd4:	697a      	ldr	r2, [r7, #20]
 8013bd6:	4613      	mov	r3, r2
 8013bd8:	00db      	lsls	r3, r3, #3
 8013bda:	4413      	add	r3, r2
 8013bdc:	009b      	lsls	r3, r3, #2
 8013bde:	461a      	mov	r2, r3
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	4413      	add	r3, r2
 8013be4:	2204      	movs	r2, #4
 8013be6:	4917      	ldr	r1, [pc, #92]	; (8013c44 <uxTaskGetSystemState+0x114>)
 8013be8:	4618      	mov	r0, r3
 8013bea:	f000 fb91 	bl	8014310 <prvListTasksWithinSingleList>
 8013bee:	4602      	mov	r2, r0
 8013bf0:	697b      	ldr	r3, [r7, #20]
 8013bf2:	4413      	add	r3, r2
 8013bf4:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8013bf6:	697a      	ldr	r2, [r7, #20]
 8013bf8:	4613      	mov	r3, r2
 8013bfa:	00db      	lsls	r3, r3, #3
 8013bfc:	4413      	add	r3, r2
 8013bfe:	009b      	lsls	r3, r3, #2
 8013c00:	461a      	mov	r2, r3
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	4413      	add	r3, r2
 8013c06:	2203      	movs	r2, #3
 8013c08:	490f      	ldr	r1, [pc, #60]	; (8013c48 <uxTaskGetSystemState+0x118>)
 8013c0a:	4618      	mov	r0, r3
 8013c0c:	f000 fb80 	bl	8014310 <prvListTasksWithinSingleList>
 8013c10:	4602      	mov	r2, r0
 8013c12:	697b      	ldr	r3, [r7, #20]
 8013c14:	4413      	add	r3, r2
 8013c16:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d003      	beq.n	8013c26 <uxTaskGetSystemState+0xf6>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8013c1e:	4b0b      	ldr	r3, [pc, #44]	; (8013c4c <uxTaskGetSystemState+0x11c>)
 8013c20:	681a      	ldr	r2, [r3, #0]
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8013c26:	f7ff fed5 	bl	80139d4 <xTaskResumeAll>

		return uxTask;
 8013c2a:	697b      	ldr	r3, [r7, #20]
	}
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	3718      	adds	r7, #24
 8013c30:	46bd      	mov	sp, r7
 8013c32:	bd80      	pop	{r7, pc}
 8013c34:	20001418 	.word	0x20001418
 8013c38:	20000f48 	.word	0x20000f48
 8013c3c:	200013d0 	.word	0x200013d0
 8013c40:	200013d4 	.word	0x200013d4
 8013c44:	200013ec 	.word	0x200013ec
 8013c48:	20001404 	.word	0x20001404
 8013c4c:	20010fe0 	.word	0x20010fe0

08013c50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013c50:	b580      	push	{r7, lr}
 8013c52:	b086      	sub	sp, #24
 8013c54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013c56:	2300      	movs	r3, #0
 8013c58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013c5a:	4b4f      	ldr	r3, [pc, #316]	; (8013d98 <xTaskIncrementTick+0x148>)
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	f040 808f 	bne.w	8013d82 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013c64:	4b4d      	ldr	r3, [pc, #308]	; (8013d9c <xTaskIncrementTick+0x14c>)
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	3301      	adds	r3, #1
 8013c6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013c6c:	4a4b      	ldr	r2, [pc, #300]	; (8013d9c <xTaskIncrementTick+0x14c>)
 8013c6e:	693b      	ldr	r3, [r7, #16]
 8013c70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013c72:	693b      	ldr	r3, [r7, #16]
 8013c74:	2b00      	cmp	r3, #0
 8013c76:	d120      	bne.n	8013cba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8013c78:	4b49      	ldr	r3, [pc, #292]	; (8013da0 <xTaskIncrementTick+0x150>)
 8013c7a:	681b      	ldr	r3, [r3, #0]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d00a      	beq.n	8013c98 <xTaskIncrementTick+0x48>
	__asm volatile
 8013c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c86:	f383 8811 	msr	BASEPRI, r3
 8013c8a:	f3bf 8f6f 	isb	sy
 8013c8e:	f3bf 8f4f 	dsb	sy
 8013c92:	603b      	str	r3, [r7, #0]
}
 8013c94:	bf00      	nop
 8013c96:	e7fe      	b.n	8013c96 <xTaskIncrementTick+0x46>
 8013c98:	4b41      	ldr	r3, [pc, #260]	; (8013da0 <xTaskIncrementTick+0x150>)
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	60fb      	str	r3, [r7, #12]
 8013c9e:	4b41      	ldr	r3, [pc, #260]	; (8013da4 <xTaskIncrementTick+0x154>)
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	4a3f      	ldr	r2, [pc, #252]	; (8013da0 <xTaskIncrementTick+0x150>)
 8013ca4:	6013      	str	r3, [r2, #0]
 8013ca6:	4a3f      	ldr	r2, [pc, #252]	; (8013da4 <xTaskIncrementTick+0x154>)
 8013ca8:	68fb      	ldr	r3, [r7, #12]
 8013caa:	6013      	str	r3, [r2, #0]
 8013cac:	4b3e      	ldr	r3, [pc, #248]	; (8013da8 <xTaskIncrementTick+0x158>)
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	3301      	adds	r3, #1
 8013cb2:	4a3d      	ldr	r2, [pc, #244]	; (8013da8 <xTaskIncrementTick+0x158>)
 8013cb4:	6013      	str	r3, [r2, #0]
 8013cb6:	f000 fbcd 	bl	8014454 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013cba:	4b3c      	ldr	r3, [pc, #240]	; (8013dac <xTaskIncrementTick+0x15c>)
 8013cbc:	681b      	ldr	r3, [r3, #0]
 8013cbe:	693a      	ldr	r2, [r7, #16]
 8013cc0:	429a      	cmp	r2, r3
 8013cc2:	d349      	bcc.n	8013d58 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013cc4:	4b36      	ldr	r3, [pc, #216]	; (8013da0 <xTaskIncrementTick+0x150>)
 8013cc6:	681b      	ldr	r3, [r3, #0]
 8013cc8:	681b      	ldr	r3, [r3, #0]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d104      	bne.n	8013cd8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013cce:	4b37      	ldr	r3, [pc, #220]	; (8013dac <xTaskIncrementTick+0x15c>)
 8013cd0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013cd4:	601a      	str	r2, [r3, #0]
					break;
 8013cd6:	e03f      	b.n	8013d58 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013cd8:	4b31      	ldr	r3, [pc, #196]	; (8013da0 <xTaskIncrementTick+0x150>)
 8013cda:	681b      	ldr	r3, [r3, #0]
 8013cdc:	68db      	ldr	r3, [r3, #12]
 8013cde:	68db      	ldr	r3, [r3, #12]
 8013ce0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013ce2:	68bb      	ldr	r3, [r7, #8]
 8013ce4:	685b      	ldr	r3, [r3, #4]
 8013ce6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013ce8:	693a      	ldr	r2, [r7, #16]
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	429a      	cmp	r2, r3
 8013cee:	d203      	bcs.n	8013cf8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013cf0:	4a2e      	ldr	r2, [pc, #184]	; (8013dac <xTaskIncrementTick+0x15c>)
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013cf6:	e02f      	b.n	8013d58 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013cf8:	68bb      	ldr	r3, [r7, #8]
 8013cfa:	3304      	adds	r3, #4
 8013cfc:	4618      	mov	r0, r3
 8013cfe:	f7fe fb59 	bl	80123b4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013d02:	68bb      	ldr	r3, [r7, #8]
 8013d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d004      	beq.n	8013d14 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013d0a:	68bb      	ldr	r3, [r7, #8]
 8013d0c:	3318      	adds	r3, #24
 8013d0e:	4618      	mov	r0, r3
 8013d10:	f7fe fb50 	bl	80123b4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013d14:	68bb      	ldr	r3, [r7, #8]
 8013d16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d18:	4b25      	ldr	r3, [pc, #148]	; (8013db0 <xTaskIncrementTick+0x160>)
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	429a      	cmp	r2, r3
 8013d1e:	d903      	bls.n	8013d28 <xTaskIncrementTick+0xd8>
 8013d20:	68bb      	ldr	r3, [r7, #8]
 8013d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d24:	4a22      	ldr	r2, [pc, #136]	; (8013db0 <xTaskIncrementTick+0x160>)
 8013d26:	6013      	str	r3, [r2, #0]
 8013d28:	68bb      	ldr	r3, [r7, #8]
 8013d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d2c:	4613      	mov	r3, r2
 8013d2e:	009b      	lsls	r3, r3, #2
 8013d30:	4413      	add	r3, r2
 8013d32:	009b      	lsls	r3, r3, #2
 8013d34:	4a1f      	ldr	r2, [pc, #124]	; (8013db4 <xTaskIncrementTick+0x164>)
 8013d36:	441a      	add	r2, r3
 8013d38:	68bb      	ldr	r3, [r7, #8]
 8013d3a:	3304      	adds	r3, #4
 8013d3c:	4619      	mov	r1, r3
 8013d3e:	4610      	mov	r0, r2
 8013d40:	f7fe fadb 	bl	80122fa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013d44:	68bb      	ldr	r3, [r7, #8]
 8013d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d48:	4b1b      	ldr	r3, [pc, #108]	; (8013db8 <xTaskIncrementTick+0x168>)
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013d4e:	429a      	cmp	r2, r3
 8013d50:	d3b8      	bcc.n	8013cc4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8013d52:	2301      	movs	r3, #1
 8013d54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013d56:	e7b5      	b.n	8013cc4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013d58:	4b17      	ldr	r3, [pc, #92]	; (8013db8 <xTaskIncrementTick+0x168>)
 8013d5a:	681b      	ldr	r3, [r3, #0]
 8013d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013d5e:	4915      	ldr	r1, [pc, #84]	; (8013db4 <xTaskIncrementTick+0x164>)
 8013d60:	4613      	mov	r3, r2
 8013d62:	009b      	lsls	r3, r3, #2
 8013d64:	4413      	add	r3, r2
 8013d66:	009b      	lsls	r3, r3, #2
 8013d68:	440b      	add	r3, r1
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	2b01      	cmp	r3, #1
 8013d6e:	d901      	bls.n	8013d74 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8013d70:	2301      	movs	r3, #1
 8013d72:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8013d74:	4b11      	ldr	r3, [pc, #68]	; (8013dbc <xTaskIncrementTick+0x16c>)
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d007      	beq.n	8013d8c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8013d7c:	2301      	movs	r3, #1
 8013d7e:	617b      	str	r3, [r7, #20]
 8013d80:	e004      	b.n	8013d8c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8013d82:	4b0f      	ldr	r3, [pc, #60]	; (8013dc0 <xTaskIncrementTick+0x170>)
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	3301      	adds	r3, #1
 8013d88:	4a0d      	ldr	r2, [pc, #52]	; (8013dc0 <xTaskIncrementTick+0x170>)
 8013d8a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8013d8c:	697b      	ldr	r3, [r7, #20]
}
 8013d8e:	4618      	mov	r0, r3
 8013d90:	3718      	adds	r7, #24
 8013d92:	46bd      	mov	sp, r7
 8013d94:	bd80      	pop	{r7, pc}
 8013d96:	bf00      	nop
 8013d98:	20001440 	.word	0x20001440
 8013d9c:	2000141c 	.word	0x2000141c
 8013da0:	200013d0 	.word	0x200013d0
 8013da4:	200013d4 	.word	0x200013d4
 8013da8:	20001430 	.word	0x20001430
 8013dac:	20001438 	.word	0x20001438
 8013db0:	20001420 	.word	0x20001420
 8013db4:	20000f48 	.word	0x20000f48
 8013db8:	20000f44 	.word	0x20000f44
 8013dbc:	2000142c 	.word	0x2000142c
 8013dc0:	20001428 	.word	0x20001428

08013dc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013dc4:	b480      	push	{r7}
 8013dc6:	b085      	sub	sp, #20
 8013dc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013dca:	4b36      	ldr	r3, [pc, #216]	; (8013ea4 <vTaskSwitchContext+0xe0>)
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d003      	beq.n	8013dda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013dd2:	4b35      	ldr	r3, [pc, #212]	; (8013ea8 <vTaskSwitchContext+0xe4>)
 8013dd4:	2201      	movs	r2, #1
 8013dd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013dd8:	e05e      	b.n	8013e98 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 8013dda:	4b33      	ldr	r3, [pc, #204]	; (8013ea8 <vTaskSwitchContext+0xe4>)
 8013ddc:	2200      	movs	r2, #0
 8013dde:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8013de0:	4b32      	ldr	r3, [pc, #200]	; (8013eac <vTaskSwitchContext+0xe8>)
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	4a32      	ldr	r2, [pc, #200]	; (8013eb0 <vTaskSwitchContext+0xec>)
 8013de6:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8013de8:	4b31      	ldr	r3, [pc, #196]	; (8013eb0 <vTaskSwitchContext+0xec>)
 8013dea:	681a      	ldr	r2, [r3, #0]
 8013dec:	4b31      	ldr	r3, [pc, #196]	; (8013eb4 <vTaskSwitchContext+0xf0>)
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	429a      	cmp	r2, r3
 8013df2:	d909      	bls.n	8013e08 <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8013df4:	4b30      	ldr	r3, [pc, #192]	; (8013eb8 <vTaskSwitchContext+0xf4>)
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8013dfa:	4a2d      	ldr	r2, [pc, #180]	; (8013eb0 <vTaskSwitchContext+0xec>)
 8013dfc:	6810      	ldr	r0, [r2, #0]
 8013dfe:	4a2d      	ldr	r2, [pc, #180]	; (8013eb4 <vTaskSwitchContext+0xf0>)
 8013e00:	6812      	ldr	r2, [r2, #0]
 8013e02:	1a82      	subs	r2, r0, r2
 8013e04:	440a      	add	r2, r1
 8013e06:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8013e08:	4b29      	ldr	r3, [pc, #164]	; (8013eb0 <vTaskSwitchContext+0xec>)
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	4a29      	ldr	r2, [pc, #164]	; (8013eb4 <vTaskSwitchContext+0xf0>)
 8013e0e:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e10:	4b2a      	ldr	r3, [pc, #168]	; (8013ebc <vTaskSwitchContext+0xf8>)
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	60fb      	str	r3, [r7, #12]
 8013e16:	e010      	b.n	8013e3a <vTaskSwitchContext+0x76>
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	2b00      	cmp	r3, #0
 8013e1c:	d10a      	bne.n	8013e34 <vTaskSwitchContext+0x70>
	__asm volatile
 8013e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e22:	f383 8811 	msr	BASEPRI, r3
 8013e26:	f3bf 8f6f 	isb	sy
 8013e2a:	f3bf 8f4f 	dsb	sy
 8013e2e:	607b      	str	r3, [r7, #4]
}
 8013e30:	bf00      	nop
 8013e32:	e7fe      	b.n	8013e32 <vTaskSwitchContext+0x6e>
 8013e34:	68fb      	ldr	r3, [r7, #12]
 8013e36:	3b01      	subs	r3, #1
 8013e38:	60fb      	str	r3, [r7, #12]
 8013e3a:	4921      	ldr	r1, [pc, #132]	; (8013ec0 <vTaskSwitchContext+0xfc>)
 8013e3c:	68fa      	ldr	r2, [r7, #12]
 8013e3e:	4613      	mov	r3, r2
 8013e40:	009b      	lsls	r3, r3, #2
 8013e42:	4413      	add	r3, r2
 8013e44:	009b      	lsls	r3, r3, #2
 8013e46:	440b      	add	r3, r1
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d0e4      	beq.n	8013e18 <vTaskSwitchContext+0x54>
 8013e4e:	68fa      	ldr	r2, [r7, #12]
 8013e50:	4613      	mov	r3, r2
 8013e52:	009b      	lsls	r3, r3, #2
 8013e54:	4413      	add	r3, r2
 8013e56:	009b      	lsls	r3, r3, #2
 8013e58:	4a19      	ldr	r2, [pc, #100]	; (8013ec0 <vTaskSwitchContext+0xfc>)
 8013e5a:	4413      	add	r3, r2
 8013e5c:	60bb      	str	r3, [r7, #8]
 8013e5e:	68bb      	ldr	r3, [r7, #8]
 8013e60:	685b      	ldr	r3, [r3, #4]
 8013e62:	685a      	ldr	r2, [r3, #4]
 8013e64:	68bb      	ldr	r3, [r7, #8]
 8013e66:	605a      	str	r2, [r3, #4]
 8013e68:	68bb      	ldr	r3, [r7, #8]
 8013e6a:	685a      	ldr	r2, [r3, #4]
 8013e6c:	68bb      	ldr	r3, [r7, #8]
 8013e6e:	3308      	adds	r3, #8
 8013e70:	429a      	cmp	r2, r3
 8013e72:	d104      	bne.n	8013e7e <vTaskSwitchContext+0xba>
 8013e74:	68bb      	ldr	r3, [r7, #8]
 8013e76:	685b      	ldr	r3, [r3, #4]
 8013e78:	685a      	ldr	r2, [r3, #4]
 8013e7a:	68bb      	ldr	r3, [r7, #8]
 8013e7c:	605a      	str	r2, [r3, #4]
 8013e7e:	68bb      	ldr	r3, [r7, #8]
 8013e80:	685b      	ldr	r3, [r3, #4]
 8013e82:	68db      	ldr	r3, [r3, #12]
 8013e84:	4a0c      	ldr	r2, [pc, #48]	; (8013eb8 <vTaskSwitchContext+0xf4>)
 8013e86:	6013      	str	r3, [r2, #0]
 8013e88:	4a0c      	ldr	r2, [pc, #48]	; (8013ebc <vTaskSwitchContext+0xf8>)
 8013e8a:	68fb      	ldr	r3, [r7, #12]
 8013e8c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013e8e:	4b0a      	ldr	r3, [pc, #40]	; (8013eb8 <vTaskSwitchContext+0xf4>)
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	3358      	adds	r3, #88	; 0x58
 8013e94:	4a0b      	ldr	r2, [pc, #44]	; (8013ec4 <vTaskSwitchContext+0x100>)
 8013e96:	6013      	str	r3, [r2, #0]
}
 8013e98:	bf00      	nop
 8013e9a:	3714      	adds	r7, #20
 8013e9c:	46bd      	mov	sp, r7
 8013e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ea2:	4770      	bx	lr
 8013ea4:	20001440 	.word	0x20001440
 8013ea8:	2000142c 	.word	0x2000142c
 8013eac:	20010fe0 	.word	0x20010fe0
 8013eb0:	20001448 	.word	0x20001448
 8013eb4:	20001444 	.word	0x20001444
 8013eb8:	20000f44 	.word	0x20000f44
 8013ebc:	20001420 	.word	0x20001420
 8013ec0:	20000f48 	.word	0x20000f48
 8013ec4:	200001a0 	.word	0x200001a0

08013ec8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013ec8:	b580      	push	{r7, lr}
 8013eca:	b084      	sub	sp, #16
 8013ecc:	af00      	add	r7, sp, #0
 8013ece:	6078      	str	r0, [r7, #4]
 8013ed0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	2b00      	cmp	r3, #0
 8013ed6:	d10a      	bne.n	8013eee <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8013ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013edc:	f383 8811 	msr	BASEPRI, r3
 8013ee0:	f3bf 8f6f 	isb	sy
 8013ee4:	f3bf 8f4f 	dsb	sy
 8013ee8:	60fb      	str	r3, [r7, #12]
}
 8013eea:	bf00      	nop
 8013eec:	e7fe      	b.n	8013eec <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013eee:	4b07      	ldr	r3, [pc, #28]	; (8013f0c <vTaskPlaceOnEventList+0x44>)
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	3318      	adds	r3, #24
 8013ef4:	4619      	mov	r1, r3
 8013ef6:	6878      	ldr	r0, [r7, #4]
 8013ef8:	f7fe fa23 	bl	8012342 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013efc:	2101      	movs	r1, #1
 8013efe:	6838      	ldr	r0, [r7, #0]
 8013f00:	f000 fd92 	bl	8014a28 <prvAddCurrentTaskToDelayedList>
}
 8013f04:	bf00      	nop
 8013f06:	3710      	adds	r7, #16
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	bd80      	pop	{r7, pc}
 8013f0c:	20000f44 	.word	0x20000f44

08013f10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013f10:	b580      	push	{r7, lr}
 8013f12:	b086      	sub	sp, #24
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	60f8      	str	r0, [r7, #12]
 8013f18:	60b9      	str	r1, [r7, #8]
 8013f1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d10a      	bne.n	8013f38 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8013f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f26:	f383 8811 	msr	BASEPRI, r3
 8013f2a:	f3bf 8f6f 	isb	sy
 8013f2e:	f3bf 8f4f 	dsb	sy
 8013f32:	617b      	str	r3, [r7, #20]
}
 8013f34:	bf00      	nop
 8013f36:	e7fe      	b.n	8013f36 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013f38:	4b0a      	ldr	r3, [pc, #40]	; (8013f64 <vTaskPlaceOnEventListRestricted+0x54>)
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	3318      	adds	r3, #24
 8013f3e:	4619      	mov	r1, r3
 8013f40:	68f8      	ldr	r0, [r7, #12]
 8013f42:	f7fe f9da 	bl	80122fa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d002      	beq.n	8013f52 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8013f4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013f50:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8013f52:	6879      	ldr	r1, [r7, #4]
 8013f54:	68b8      	ldr	r0, [r7, #8]
 8013f56:	f000 fd67 	bl	8014a28 <prvAddCurrentTaskToDelayedList>
	}
 8013f5a:	bf00      	nop
 8013f5c:	3718      	adds	r7, #24
 8013f5e:	46bd      	mov	sp, r7
 8013f60:	bd80      	pop	{r7, pc}
 8013f62:	bf00      	nop
 8013f64:	20000f44 	.word	0x20000f44

08013f68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013f68:	b580      	push	{r7, lr}
 8013f6a:	b086      	sub	sp, #24
 8013f6c:	af00      	add	r7, sp, #0
 8013f6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f70:	687b      	ldr	r3, [r7, #4]
 8013f72:	68db      	ldr	r3, [r3, #12]
 8013f74:	68db      	ldr	r3, [r3, #12]
 8013f76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013f78:	693b      	ldr	r3, [r7, #16]
 8013f7a:	2b00      	cmp	r3, #0
 8013f7c:	d10a      	bne.n	8013f94 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8013f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f82:	f383 8811 	msr	BASEPRI, r3
 8013f86:	f3bf 8f6f 	isb	sy
 8013f8a:	f3bf 8f4f 	dsb	sy
 8013f8e:	60fb      	str	r3, [r7, #12]
}
 8013f90:	bf00      	nop
 8013f92:	e7fe      	b.n	8013f92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013f94:	693b      	ldr	r3, [r7, #16]
 8013f96:	3318      	adds	r3, #24
 8013f98:	4618      	mov	r0, r3
 8013f9a:	f7fe fa0b 	bl	80123b4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013f9e:	4b1e      	ldr	r3, [pc, #120]	; (8014018 <xTaskRemoveFromEventList+0xb0>)
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	2b00      	cmp	r3, #0
 8013fa4:	d11d      	bne.n	8013fe2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013fa6:	693b      	ldr	r3, [r7, #16]
 8013fa8:	3304      	adds	r3, #4
 8013faa:	4618      	mov	r0, r3
 8013fac:	f7fe fa02 	bl	80123b4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013fb0:	693b      	ldr	r3, [r7, #16]
 8013fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fb4:	4b19      	ldr	r3, [pc, #100]	; (801401c <xTaskRemoveFromEventList+0xb4>)
 8013fb6:	681b      	ldr	r3, [r3, #0]
 8013fb8:	429a      	cmp	r2, r3
 8013fba:	d903      	bls.n	8013fc4 <xTaskRemoveFromEventList+0x5c>
 8013fbc:	693b      	ldr	r3, [r7, #16]
 8013fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fc0:	4a16      	ldr	r2, [pc, #88]	; (801401c <xTaskRemoveFromEventList+0xb4>)
 8013fc2:	6013      	str	r3, [r2, #0]
 8013fc4:	693b      	ldr	r3, [r7, #16]
 8013fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fc8:	4613      	mov	r3, r2
 8013fca:	009b      	lsls	r3, r3, #2
 8013fcc:	4413      	add	r3, r2
 8013fce:	009b      	lsls	r3, r3, #2
 8013fd0:	4a13      	ldr	r2, [pc, #76]	; (8014020 <xTaskRemoveFromEventList+0xb8>)
 8013fd2:	441a      	add	r2, r3
 8013fd4:	693b      	ldr	r3, [r7, #16]
 8013fd6:	3304      	adds	r3, #4
 8013fd8:	4619      	mov	r1, r3
 8013fda:	4610      	mov	r0, r2
 8013fdc:	f7fe f98d 	bl	80122fa <vListInsertEnd>
 8013fe0:	e005      	b.n	8013fee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013fe2:	693b      	ldr	r3, [r7, #16]
 8013fe4:	3318      	adds	r3, #24
 8013fe6:	4619      	mov	r1, r3
 8013fe8:	480e      	ldr	r0, [pc, #56]	; (8014024 <xTaskRemoveFromEventList+0xbc>)
 8013fea:	f7fe f986 	bl	80122fa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013fee:	693b      	ldr	r3, [r7, #16]
 8013ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ff2:	4b0d      	ldr	r3, [pc, #52]	; (8014028 <xTaskRemoveFromEventList+0xc0>)
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ff8:	429a      	cmp	r2, r3
 8013ffa:	d905      	bls.n	8014008 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013ffc:	2301      	movs	r3, #1
 8013ffe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014000:	4b0a      	ldr	r3, [pc, #40]	; (801402c <xTaskRemoveFromEventList+0xc4>)
 8014002:	2201      	movs	r2, #1
 8014004:	601a      	str	r2, [r3, #0]
 8014006:	e001      	b.n	801400c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014008:	2300      	movs	r3, #0
 801400a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801400c:	697b      	ldr	r3, [r7, #20]
}
 801400e:	4618      	mov	r0, r3
 8014010:	3718      	adds	r7, #24
 8014012:	46bd      	mov	sp, r7
 8014014:	bd80      	pop	{r7, pc}
 8014016:	bf00      	nop
 8014018:	20001440 	.word	0x20001440
 801401c:	20001420 	.word	0x20001420
 8014020:	20000f48 	.word	0x20000f48
 8014024:	200013d8 	.word	0x200013d8
 8014028:	20000f44 	.word	0x20000f44
 801402c:	2000142c 	.word	0x2000142c

08014030 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014030:	b480      	push	{r7}
 8014032:	b083      	sub	sp, #12
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014038:	4b06      	ldr	r3, [pc, #24]	; (8014054 <vTaskInternalSetTimeOutState+0x24>)
 801403a:	681a      	ldr	r2, [r3, #0]
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014040:	4b05      	ldr	r3, [pc, #20]	; (8014058 <vTaskInternalSetTimeOutState+0x28>)
 8014042:	681a      	ldr	r2, [r3, #0]
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	605a      	str	r2, [r3, #4]
}
 8014048:	bf00      	nop
 801404a:	370c      	adds	r7, #12
 801404c:	46bd      	mov	sp, r7
 801404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014052:	4770      	bx	lr
 8014054:	20001430 	.word	0x20001430
 8014058:	2000141c 	.word	0x2000141c

0801405c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801405c:	b580      	push	{r7, lr}
 801405e:	b088      	sub	sp, #32
 8014060:	af00      	add	r7, sp, #0
 8014062:	6078      	str	r0, [r7, #4]
 8014064:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	2b00      	cmp	r3, #0
 801406a:	d10a      	bne.n	8014082 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801406c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014070:	f383 8811 	msr	BASEPRI, r3
 8014074:	f3bf 8f6f 	isb	sy
 8014078:	f3bf 8f4f 	dsb	sy
 801407c:	613b      	str	r3, [r7, #16]
}
 801407e:	bf00      	nop
 8014080:	e7fe      	b.n	8014080 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014082:	683b      	ldr	r3, [r7, #0]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d10a      	bne.n	801409e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014088:	f04f 0350 	mov.w	r3, #80	; 0x50
 801408c:	f383 8811 	msr	BASEPRI, r3
 8014090:	f3bf 8f6f 	isb	sy
 8014094:	f3bf 8f4f 	dsb	sy
 8014098:	60fb      	str	r3, [r7, #12]
}
 801409a:	bf00      	nop
 801409c:	e7fe      	b.n	801409c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801409e:	f001 f991 	bl	80153c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80140a2:	4b1d      	ldr	r3, [pc, #116]	; (8014118 <xTaskCheckForTimeOut+0xbc>)
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	685b      	ldr	r3, [r3, #4]
 80140ac:	69ba      	ldr	r2, [r7, #24]
 80140ae:	1ad3      	subs	r3, r2, r3
 80140b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80140b2:	683b      	ldr	r3, [r7, #0]
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80140ba:	d102      	bne.n	80140c2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80140bc:	2300      	movs	r3, #0
 80140be:	61fb      	str	r3, [r7, #28]
 80140c0:	e023      	b.n	801410a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	681a      	ldr	r2, [r3, #0]
 80140c6:	4b15      	ldr	r3, [pc, #84]	; (801411c <xTaskCheckForTimeOut+0xc0>)
 80140c8:	681b      	ldr	r3, [r3, #0]
 80140ca:	429a      	cmp	r2, r3
 80140cc:	d007      	beq.n	80140de <xTaskCheckForTimeOut+0x82>
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	685b      	ldr	r3, [r3, #4]
 80140d2:	69ba      	ldr	r2, [r7, #24]
 80140d4:	429a      	cmp	r2, r3
 80140d6:	d302      	bcc.n	80140de <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80140d8:	2301      	movs	r3, #1
 80140da:	61fb      	str	r3, [r7, #28]
 80140dc:	e015      	b.n	801410a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80140de:	683b      	ldr	r3, [r7, #0]
 80140e0:	681b      	ldr	r3, [r3, #0]
 80140e2:	697a      	ldr	r2, [r7, #20]
 80140e4:	429a      	cmp	r2, r3
 80140e6:	d20b      	bcs.n	8014100 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80140e8:	683b      	ldr	r3, [r7, #0]
 80140ea:	681a      	ldr	r2, [r3, #0]
 80140ec:	697b      	ldr	r3, [r7, #20]
 80140ee:	1ad2      	subs	r2, r2, r3
 80140f0:	683b      	ldr	r3, [r7, #0]
 80140f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80140f4:	6878      	ldr	r0, [r7, #4]
 80140f6:	f7ff ff9b 	bl	8014030 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80140fa:	2300      	movs	r3, #0
 80140fc:	61fb      	str	r3, [r7, #28]
 80140fe:	e004      	b.n	801410a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014100:	683b      	ldr	r3, [r7, #0]
 8014102:	2200      	movs	r2, #0
 8014104:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014106:	2301      	movs	r3, #1
 8014108:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801410a:	f001 f98b 	bl	8015424 <vPortExitCritical>

	return xReturn;
 801410e:	69fb      	ldr	r3, [r7, #28]
}
 8014110:	4618      	mov	r0, r3
 8014112:	3720      	adds	r7, #32
 8014114:	46bd      	mov	sp, r7
 8014116:	bd80      	pop	{r7, pc}
 8014118:	2000141c 	.word	0x2000141c
 801411c:	20001430 	.word	0x20001430

08014120 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014120:	b480      	push	{r7}
 8014122:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014124:	4b03      	ldr	r3, [pc, #12]	; (8014134 <vTaskMissedYield+0x14>)
 8014126:	2201      	movs	r2, #1
 8014128:	601a      	str	r2, [r3, #0]
}
 801412a:	bf00      	nop
 801412c:	46bd      	mov	sp, r7
 801412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014132:	4770      	bx	lr
 8014134:	2000142c 	.word	0x2000142c

08014138 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014138:	b580      	push	{r7, lr}
 801413a:	b082      	sub	sp, #8
 801413c:	af00      	add	r7, sp, #0
 801413e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014140:	f000 f852 	bl	80141e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014144:	4b06      	ldr	r3, [pc, #24]	; (8014160 <prvIdleTask+0x28>)
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	2b01      	cmp	r3, #1
 801414a:	d9f9      	bls.n	8014140 <prvIdleTask+0x8>
			{
				taskYIELD();
 801414c:	4b05      	ldr	r3, [pc, #20]	; (8014164 <prvIdleTask+0x2c>)
 801414e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014152:	601a      	str	r2, [r3, #0]
 8014154:	f3bf 8f4f 	dsb	sy
 8014158:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801415c:	e7f0      	b.n	8014140 <prvIdleTask+0x8>
 801415e:	bf00      	nop
 8014160:	20000f48 	.word	0x20000f48
 8014164:	e000ed04 	.word	0xe000ed04

08014168 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014168:	b580      	push	{r7, lr}
 801416a:	b082      	sub	sp, #8
 801416c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801416e:	2300      	movs	r3, #0
 8014170:	607b      	str	r3, [r7, #4]
 8014172:	e00c      	b.n	801418e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014174:	687a      	ldr	r2, [r7, #4]
 8014176:	4613      	mov	r3, r2
 8014178:	009b      	lsls	r3, r3, #2
 801417a:	4413      	add	r3, r2
 801417c:	009b      	lsls	r3, r3, #2
 801417e:	4a12      	ldr	r2, [pc, #72]	; (80141c8 <prvInitialiseTaskLists+0x60>)
 8014180:	4413      	add	r3, r2
 8014182:	4618      	mov	r0, r3
 8014184:	f7fe f88c 	bl	80122a0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	3301      	adds	r3, #1
 801418c:	607b      	str	r3, [r7, #4]
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	2b37      	cmp	r3, #55	; 0x37
 8014192:	d9ef      	bls.n	8014174 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014194:	480d      	ldr	r0, [pc, #52]	; (80141cc <prvInitialiseTaskLists+0x64>)
 8014196:	f7fe f883 	bl	80122a0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801419a:	480d      	ldr	r0, [pc, #52]	; (80141d0 <prvInitialiseTaskLists+0x68>)
 801419c:	f7fe f880 	bl	80122a0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80141a0:	480c      	ldr	r0, [pc, #48]	; (80141d4 <prvInitialiseTaskLists+0x6c>)
 80141a2:	f7fe f87d 	bl	80122a0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80141a6:	480c      	ldr	r0, [pc, #48]	; (80141d8 <prvInitialiseTaskLists+0x70>)
 80141a8:	f7fe f87a 	bl	80122a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80141ac:	480b      	ldr	r0, [pc, #44]	; (80141dc <prvInitialiseTaskLists+0x74>)
 80141ae:	f7fe f877 	bl	80122a0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80141b2:	4b0b      	ldr	r3, [pc, #44]	; (80141e0 <prvInitialiseTaskLists+0x78>)
 80141b4:	4a05      	ldr	r2, [pc, #20]	; (80141cc <prvInitialiseTaskLists+0x64>)
 80141b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80141b8:	4b0a      	ldr	r3, [pc, #40]	; (80141e4 <prvInitialiseTaskLists+0x7c>)
 80141ba:	4a05      	ldr	r2, [pc, #20]	; (80141d0 <prvInitialiseTaskLists+0x68>)
 80141bc:	601a      	str	r2, [r3, #0]
}
 80141be:	bf00      	nop
 80141c0:	3708      	adds	r7, #8
 80141c2:	46bd      	mov	sp, r7
 80141c4:	bd80      	pop	{r7, pc}
 80141c6:	bf00      	nop
 80141c8:	20000f48 	.word	0x20000f48
 80141cc:	200013a8 	.word	0x200013a8
 80141d0:	200013bc 	.word	0x200013bc
 80141d4:	200013d8 	.word	0x200013d8
 80141d8:	200013ec 	.word	0x200013ec
 80141dc:	20001404 	.word	0x20001404
 80141e0:	200013d0 	.word	0x200013d0
 80141e4:	200013d4 	.word	0x200013d4

080141e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b082      	sub	sp, #8
 80141ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80141ee:	e019      	b.n	8014224 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80141f0:	f001 f8e8 	bl	80153c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80141f4:	4b10      	ldr	r3, [pc, #64]	; (8014238 <prvCheckTasksWaitingTermination+0x50>)
 80141f6:	68db      	ldr	r3, [r3, #12]
 80141f8:	68db      	ldr	r3, [r3, #12]
 80141fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	3304      	adds	r3, #4
 8014200:	4618      	mov	r0, r3
 8014202:	f7fe f8d7 	bl	80123b4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014206:	4b0d      	ldr	r3, [pc, #52]	; (801423c <prvCheckTasksWaitingTermination+0x54>)
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	3b01      	subs	r3, #1
 801420c:	4a0b      	ldr	r2, [pc, #44]	; (801423c <prvCheckTasksWaitingTermination+0x54>)
 801420e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014210:	4b0b      	ldr	r3, [pc, #44]	; (8014240 <prvCheckTasksWaitingTermination+0x58>)
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	3b01      	subs	r3, #1
 8014216:	4a0a      	ldr	r2, [pc, #40]	; (8014240 <prvCheckTasksWaitingTermination+0x58>)
 8014218:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801421a:	f001 f903 	bl	8015424 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801421e:	6878      	ldr	r0, [r7, #4]
 8014220:	f000 f8e4 	bl	80143ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014224:	4b06      	ldr	r3, [pc, #24]	; (8014240 <prvCheckTasksWaitingTermination+0x58>)
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	2b00      	cmp	r3, #0
 801422a:	d1e1      	bne.n	80141f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801422c:	bf00      	nop
 801422e:	bf00      	nop
 8014230:	3708      	adds	r7, #8
 8014232:	46bd      	mov	sp, r7
 8014234:	bd80      	pop	{r7, pc}
 8014236:	bf00      	nop
 8014238:	200013ec 	.word	0x200013ec
 801423c:	20001418 	.word	0x20001418
 8014240:	20001400 	.word	0x20001400

08014244 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8014244:	b580      	push	{r7, lr}
 8014246:	b086      	sub	sp, #24
 8014248:	af00      	add	r7, sp, #0
 801424a:	60f8      	str	r0, [r7, #12]
 801424c:	60b9      	str	r1, [r7, #8]
 801424e:	607a      	str	r2, [r7, #4]
 8014250:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8014252:	68fb      	ldr	r3, [r7, #12]
 8014254:	2b00      	cmp	r3, #0
 8014256:	d102      	bne.n	801425e <vTaskGetInfo+0x1a>
 8014258:	4b2c      	ldr	r3, [pc, #176]	; (801430c <vTaskGetInfo+0xc8>)
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	e000      	b.n	8014260 <vTaskGetInfo+0x1c>
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8014262:	68bb      	ldr	r3, [r7, #8]
 8014264:	697a      	ldr	r2, [r7, #20]
 8014266:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8014268:	697b      	ldr	r3, [r7, #20]
 801426a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801426e:	68bb      	ldr	r3, [r7, #8]
 8014270:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8014272:	697b      	ldr	r3, [r7, #20]
 8014274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014276:	68bb      	ldr	r3, [r7, #8]
 8014278:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 801427a:	697b      	ldr	r3, [r7, #20]
 801427c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801427e:	68bb      	ldr	r3, [r7, #8]
 8014280:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8014282:	697b      	ldr	r3, [r7, #20]
 8014284:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014286:	68bb      	ldr	r3, [r7, #8]
 8014288:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 801428a:	697b      	ldr	r3, [r7, #20]
 801428c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801428e:	68bb      	ldr	r3, [r7, #8]
 8014290:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8014292:	697b      	ldr	r3, [r7, #20]
 8014294:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014296:	68bb      	ldr	r3, [r7, #8]
 8014298:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 801429a:	78fb      	ldrb	r3, [r7, #3]
 801429c:	2b05      	cmp	r3, #5
 801429e:	d01a      	beq.n	80142d6 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 80142a0:	4b1a      	ldr	r3, [pc, #104]	; (801430c <vTaskGetInfo+0xc8>)
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	697a      	ldr	r2, [r7, #20]
 80142a6:	429a      	cmp	r2, r3
 80142a8:	d103      	bne.n	80142b2 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 80142aa:	68bb      	ldr	r3, [r7, #8]
 80142ac:	2200      	movs	r2, #0
 80142ae:	731a      	strb	r2, [r3, #12]
 80142b0:	e018      	b.n	80142e4 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 80142b2:	68bb      	ldr	r3, [r7, #8]
 80142b4:	78fa      	ldrb	r2, [r7, #3]
 80142b6:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 80142b8:	78fb      	ldrb	r3, [r7, #3]
 80142ba:	2b03      	cmp	r3, #3
 80142bc:	d112      	bne.n	80142e4 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 80142be:	f7ff fb7b 	bl	80139b8 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80142c2:	697b      	ldr	r3, [r7, #20]
 80142c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d002      	beq.n	80142d0 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 80142ca:	68bb      	ldr	r3, [r7, #8]
 80142cc:	2202      	movs	r2, #2
 80142ce:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 80142d0:	f7ff fb80 	bl	80139d4 <xTaskResumeAll>
 80142d4:	e006      	b.n	80142e4 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 80142d6:	6978      	ldr	r0, [r7, #20]
 80142d8:	f7ff fa94 	bl	8013804 <eTaskGetState>
 80142dc:	4603      	mov	r3, r0
 80142de:	461a      	mov	r2, r3
 80142e0:	68bb      	ldr	r3, [r7, #8]
 80142e2:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d009      	beq.n	80142fe <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 80142ea:	697b      	ldr	r3, [r7, #20]
 80142ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80142ee:	4618      	mov	r0, r3
 80142f0:	f000 f860 	bl	80143b4 <prvTaskCheckFreeStackSpace>
 80142f4:	4603      	mov	r3, r0
 80142f6:	461a      	mov	r2, r3
 80142f8:	68bb      	ldr	r3, [r7, #8]
 80142fa:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 80142fc:	e002      	b.n	8014304 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 80142fe:	68bb      	ldr	r3, [r7, #8]
 8014300:	2200      	movs	r2, #0
 8014302:	841a      	strh	r2, [r3, #32]
	}
 8014304:	bf00      	nop
 8014306:	3718      	adds	r7, #24
 8014308:	46bd      	mov	sp, r7
 801430a:	bd80      	pop	{r7, pc}
 801430c:	20000f44 	.word	0x20000f44

08014310 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8014310:	b580      	push	{r7, lr}
 8014312:	b08a      	sub	sp, #40	; 0x28
 8014314:	af00      	add	r7, sp, #0
 8014316:	60f8      	str	r0, [r7, #12]
 8014318:	60b9      	str	r1, [r7, #8]
 801431a:	4613      	mov	r3, r2
 801431c:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 801431e:	2300      	movs	r3, #0
 8014320:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8014322:	68bb      	ldr	r3, [r7, #8]
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d03f      	beq.n	80143aa <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801432a:	68bb      	ldr	r3, [r7, #8]
 801432c:	623b      	str	r3, [r7, #32]
 801432e:	6a3b      	ldr	r3, [r7, #32]
 8014330:	685b      	ldr	r3, [r3, #4]
 8014332:	685a      	ldr	r2, [r3, #4]
 8014334:	6a3b      	ldr	r3, [r7, #32]
 8014336:	605a      	str	r2, [r3, #4]
 8014338:	6a3b      	ldr	r3, [r7, #32]
 801433a:	685a      	ldr	r2, [r3, #4]
 801433c:	6a3b      	ldr	r3, [r7, #32]
 801433e:	3308      	adds	r3, #8
 8014340:	429a      	cmp	r2, r3
 8014342:	d104      	bne.n	801434e <prvListTasksWithinSingleList+0x3e>
 8014344:	6a3b      	ldr	r3, [r7, #32]
 8014346:	685b      	ldr	r3, [r3, #4]
 8014348:	685a      	ldr	r2, [r3, #4]
 801434a:	6a3b      	ldr	r3, [r7, #32]
 801434c:	605a      	str	r2, [r3, #4]
 801434e:	6a3b      	ldr	r3, [r7, #32]
 8014350:	685b      	ldr	r3, [r3, #4]
 8014352:	68db      	ldr	r3, [r3, #12]
 8014354:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014356:	68bb      	ldr	r3, [r7, #8]
 8014358:	61bb      	str	r3, [r7, #24]
 801435a:	69bb      	ldr	r3, [r7, #24]
 801435c:	685b      	ldr	r3, [r3, #4]
 801435e:	685a      	ldr	r2, [r3, #4]
 8014360:	69bb      	ldr	r3, [r7, #24]
 8014362:	605a      	str	r2, [r3, #4]
 8014364:	69bb      	ldr	r3, [r7, #24]
 8014366:	685a      	ldr	r2, [r3, #4]
 8014368:	69bb      	ldr	r3, [r7, #24]
 801436a:	3308      	adds	r3, #8
 801436c:	429a      	cmp	r2, r3
 801436e:	d104      	bne.n	801437a <prvListTasksWithinSingleList+0x6a>
 8014370:	69bb      	ldr	r3, [r7, #24]
 8014372:	685b      	ldr	r3, [r3, #4]
 8014374:	685a      	ldr	r2, [r3, #4]
 8014376:	69bb      	ldr	r3, [r7, #24]
 8014378:	605a      	str	r2, [r3, #4]
 801437a:	69bb      	ldr	r3, [r7, #24]
 801437c:	685b      	ldr	r3, [r3, #4]
 801437e:	68db      	ldr	r3, [r3, #12]
 8014380:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8014382:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014384:	4613      	mov	r3, r2
 8014386:	00db      	lsls	r3, r3, #3
 8014388:	4413      	add	r3, r2
 801438a:	009b      	lsls	r3, r3, #2
 801438c:	461a      	mov	r2, r3
 801438e:	68fb      	ldr	r3, [r7, #12]
 8014390:	1899      	adds	r1, r3, r2
 8014392:	79fb      	ldrb	r3, [r7, #7]
 8014394:	2201      	movs	r2, #1
 8014396:	6978      	ldr	r0, [r7, #20]
 8014398:	f7ff ff54 	bl	8014244 <vTaskGetInfo>
				uxTask++;
 801439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801439e:	3301      	adds	r3, #1
 80143a0:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 80143a2:	697a      	ldr	r2, [r7, #20]
 80143a4:	69fb      	ldr	r3, [r7, #28]
 80143a6:	429a      	cmp	r2, r3
 80143a8:	d1d5      	bne.n	8014356 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 80143aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80143ac:	4618      	mov	r0, r3
 80143ae:	3728      	adds	r7, #40	; 0x28
 80143b0:	46bd      	mov	sp, r7
 80143b2:	bd80      	pop	{r7, pc}

080143b4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80143b4:	b480      	push	{r7}
 80143b6:	b085      	sub	sp, #20
 80143b8:	af00      	add	r7, sp, #0
 80143ba:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80143bc:	2300      	movs	r3, #0
 80143be:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80143c0:	e005      	b.n	80143ce <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	3301      	adds	r3, #1
 80143c6:	607b      	str	r3, [r7, #4]
			ulCount++;
 80143c8:	68fb      	ldr	r3, [r7, #12]
 80143ca:	3301      	adds	r3, #1
 80143cc:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80143ce:	687b      	ldr	r3, [r7, #4]
 80143d0:	781b      	ldrb	r3, [r3, #0]
 80143d2:	2ba5      	cmp	r3, #165	; 0xa5
 80143d4:	d0f5      	beq.n	80143c2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80143d6:	68fb      	ldr	r3, [r7, #12]
 80143d8:	089b      	lsrs	r3, r3, #2
 80143da:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80143dc:	68fb      	ldr	r3, [r7, #12]
 80143de:	b29b      	uxth	r3, r3
	}
 80143e0:	4618      	mov	r0, r3
 80143e2:	3714      	adds	r7, #20
 80143e4:	46bd      	mov	sp, r7
 80143e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ea:	4770      	bx	lr

080143ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80143ec:	b580      	push	{r7, lr}
 80143ee:	b084      	sub	sp, #16
 80143f0:	af00      	add	r7, sp, #0
 80143f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	3358      	adds	r3, #88	; 0x58
 80143f8:	4618      	mov	r0, r3
 80143fa:	f002 fea9 	bl	8017150 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8014404:	2b00      	cmp	r3, #0
 8014406:	d108      	bne.n	801441a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801440c:	4618      	mov	r0, r3
 801440e:	f001 f9c7 	bl	80157a0 <vPortFree>
				vPortFree( pxTCB );
 8014412:	6878      	ldr	r0, [r7, #4]
 8014414:	f001 f9c4 	bl	80157a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014418:	e018      	b.n	801444c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8014420:	2b01      	cmp	r3, #1
 8014422:	d103      	bne.n	801442c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8014424:	6878      	ldr	r0, [r7, #4]
 8014426:	f001 f9bb 	bl	80157a0 <vPortFree>
	}
 801442a:	e00f      	b.n	801444c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8014432:	2b02      	cmp	r3, #2
 8014434:	d00a      	beq.n	801444c <prvDeleteTCB+0x60>
	__asm volatile
 8014436:	f04f 0350 	mov.w	r3, #80	; 0x50
 801443a:	f383 8811 	msr	BASEPRI, r3
 801443e:	f3bf 8f6f 	isb	sy
 8014442:	f3bf 8f4f 	dsb	sy
 8014446:	60fb      	str	r3, [r7, #12]
}
 8014448:	bf00      	nop
 801444a:	e7fe      	b.n	801444a <prvDeleteTCB+0x5e>
	}
 801444c:	bf00      	nop
 801444e:	3710      	adds	r7, #16
 8014450:	46bd      	mov	sp, r7
 8014452:	bd80      	pop	{r7, pc}

08014454 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014454:	b480      	push	{r7}
 8014456:	b083      	sub	sp, #12
 8014458:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801445a:	4b0c      	ldr	r3, [pc, #48]	; (801448c <prvResetNextTaskUnblockTime+0x38>)
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	681b      	ldr	r3, [r3, #0]
 8014460:	2b00      	cmp	r3, #0
 8014462:	d104      	bne.n	801446e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014464:	4b0a      	ldr	r3, [pc, #40]	; (8014490 <prvResetNextTaskUnblockTime+0x3c>)
 8014466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801446a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801446c:	e008      	b.n	8014480 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801446e:	4b07      	ldr	r3, [pc, #28]	; (801448c <prvResetNextTaskUnblockTime+0x38>)
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	68db      	ldr	r3, [r3, #12]
 8014474:	68db      	ldr	r3, [r3, #12]
 8014476:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	685b      	ldr	r3, [r3, #4]
 801447c:	4a04      	ldr	r2, [pc, #16]	; (8014490 <prvResetNextTaskUnblockTime+0x3c>)
 801447e:	6013      	str	r3, [r2, #0]
}
 8014480:	bf00      	nop
 8014482:	370c      	adds	r7, #12
 8014484:	46bd      	mov	sp, r7
 8014486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801448a:	4770      	bx	lr
 801448c:	200013d0 	.word	0x200013d0
 8014490:	20001438 	.word	0x20001438

08014494 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014494:	b480      	push	{r7}
 8014496:	b083      	sub	sp, #12
 8014498:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801449a:	4b0b      	ldr	r3, [pc, #44]	; (80144c8 <xTaskGetSchedulerState+0x34>)
 801449c:	681b      	ldr	r3, [r3, #0]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d102      	bne.n	80144a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80144a2:	2301      	movs	r3, #1
 80144a4:	607b      	str	r3, [r7, #4]
 80144a6:	e008      	b.n	80144ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80144a8:	4b08      	ldr	r3, [pc, #32]	; (80144cc <xTaskGetSchedulerState+0x38>)
 80144aa:	681b      	ldr	r3, [r3, #0]
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	d102      	bne.n	80144b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80144b0:	2302      	movs	r3, #2
 80144b2:	607b      	str	r3, [r7, #4]
 80144b4:	e001      	b.n	80144ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80144b6:	2300      	movs	r3, #0
 80144b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80144ba:	687b      	ldr	r3, [r7, #4]
	}
 80144bc:	4618      	mov	r0, r3
 80144be:	370c      	adds	r7, #12
 80144c0:	46bd      	mov	sp, r7
 80144c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c6:	4770      	bx	lr
 80144c8:	20001424 	.word	0x20001424
 80144cc:	20001440 	.word	0x20001440

080144d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b084      	sub	sp, #16
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80144d8:	687b      	ldr	r3, [r7, #4]
 80144da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80144dc:	2300      	movs	r3, #0
 80144de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d051      	beq.n	801458a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80144e6:	68bb      	ldr	r3, [r7, #8]
 80144e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144ea:	4b2a      	ldr	r3, [pc, #168]	; (8014594 <xTaskPriorityInherit+0xc4>)
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144f0:	429a      	cmp	r2, r3
 80144f2:	d241      	bcs.n	8014578 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80144f4:	68bb      	ldr	r3, [r7, #8]
 80144f6:	699b      	ldr	r3, [r3, #24]
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	db06      	blt.n	801450a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80144fc:	4b25      	ldr	r3, [pc, #148]	; (8014594 <xTaskPriorityInherit+0xc4>)
 80144fe:	681b      	ldr	r3, [r3, #0]
 8014500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014502:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014506:	68bb      	ldr	r3, [r7, #8]
 8014508:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801450a:	68bb      	ldr	r3, [r7, #8]
 801450c:	6959      	ldr	r1, [r3, #20]
 801450e:	68bb      	ldr	r3, [r7, #8]
 8014510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014512:	4613      	mov	r3, r2
 8014514:	009b      	lsls	r3, r3, #2
 8014516:	4413      	add	r3, r2
 8014518:	009b      	lsls	r3, r3, #2
 801451a:	4a1f      	ldr	r2, [pc, #124]	; (8014598 <xTaskPriorityInherit+0xc8>)
 801451c:	4413      	add	r3, r2
 801451e:	4299      	cmp	r1, r3
 8014520:	d122      	bne.n	8014568 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014522:	68bb      	ldr	r3, [r7, #8]
 8014524:	3304      	adds	r3, #4
 8014526:	4618      	mov	r0, r3
 8014528:	f7fd ff44 	bl	80123b4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801452c:	4b19      	ldr	r3, [pc, #100]	; (8014594 <xTaskPriorityInherit+0xc4>)
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014532:	68bb      	ldr	r3, [r7, #8]
 8014534:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014536:	68bb      	ldr	r3, [r7, #8]
 8014538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801453a:	4b18      	ldr	r3, [pc, #96]	; (801459c <xTaskPriorityInherit+0xcc>)
 801453c:	681b      	ldr	r3, [r3, #0]
 801453e:	429a      	cmp	r2, r3
 8014540:	d903      	bls.n	801454a <xTaskPriorityInherit+0x7a>
 8014542:	68bb      	ldr	r3, [r7, #8]
 8014544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014546:	4a15      	ldr	r2, [pc, #84]	; (801459c <xTaskPriorityInherit+0xcc>)
 8014548:	6013      	str	r3, [r2, #0]
 801454a:	68bb      	ldr	r3, [r7, #8]
 801454c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801454e:	4613      	mov	r3, r2
 8014550:	009b      	lsls	r3, r3, #2
 8014552:	4413      	add	r3, r2
 8014554:	009b      	lsls	r3, r3, #2
 8014556:	4a10      	ldr	r2, [pc, #64]	; (8014598 <xTaskPriorityInherit+0xc8>)
 8014558:	441a      	add	r2, r3
 801455a:	68bb      	ldr	r3, [r7, #8]
 801455c:	3304      	adds	r3, #4
 801455e:	4619      	mov	r1, r3
 8014560:	4610      	mov	r0, r2
 8014562:	f7fd feca 	bl	80122fa <vListInsertEnd>
 8014566:	e004      	b.n	8014572 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014568:	4b0a      	ldr	r3, [pc, #40]	; (8014594 <xTaskPriorityInherit+0xc4>)
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801456e:	68bb      	ldr	r3, [r7, #8]
 8014570:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014572:	2301      	movs	r3, #1
 8014574:	60fb      	str	r3, [r7, #12]
 8014576:	e008      	b.n	801458a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014578:	68bb      	ldr	r3, [r7, #8]
 801457a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801457c:	4b05      	ldr	r3, [pc, #20]	; (8014594 <xTaskPriorityInherit+0xc4>)
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014582:	429a      	cmp	r2, r3
 8014584:	d201      	bcs.n	801458a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014586:	2301      	movs	r3, #1
 8014588:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801458a:	68fb      	ldr	r3, [r7, #12]
	}
 801458c:	4618      	mov	r0, r3
 801458e:	3710      	adds	r7, #16
 8014590:	46bd      	mov	sp, r7
 8014592:	bd80      	pop	{r7, pc}
 8014594:	20000f44 	.word	0x20000f44
 8014598:	20000f48 	.word	0x20000f48
 801459c:	20001420 	.word	0x20001420

080145a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80145a0:	b580      	push	{r7, lr}
 80145a2:	b086      	sub	sp, #24
 80145a4:	af00      	add	r7, sp, #0
 80145a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80145ac:	2300      	movs	r3, #0
 80145ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d056      	beq.n	8014664 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80145b6:	4b2e      	ldr	r3, [pc, #184]	; (8014670 <xTaskPriorityDisinherit+0xd0>)
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	693a      	ldr	r2, [r7, #16]
 80145bc:	429a      	cmp	r2, r3
 80145be:	d00a      	beq.n	80145d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80145c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145c4:	f383 8811 	msr	BASEPRI, r3
 80145c8:	f3bf 8f6f 	isb	sy
 80145cc:	f3bf 8f4f 	dsb	sy
 80145d0:	60fb      	str	r3, [r7, #12]
}
 80145d2:	bf00      	nop
 80145d4:	e7fe      	b.n	80145d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80145d6:	693b      	ldr	r3, [r7, #16]
 80145d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80145da:	2b00      	cmp	r3, #0
 80145dc:	d10a      	bne.n	80145f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80145de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145e2:	f383 8811 	msr	BASEPRI, r3
 80145e6:	f3bf 8f6f 	isb	sy
 80145ea:	f3bf 8f4f 	dsb	sy
 80145ee:	60bb      	str	r3, [r7, #8]
}
 80145f0:	bf00      	nop
 80145f2:	e7fe      	b.n	80145f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80145f4:	693b      	ldr	r3, [r7, #16]
 80145f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80145f8:	1e5a      	subs	r2, r3, #1
 80145fa:	693b      	ldr	r3, [r7, #16]
 80145fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80145fe:	693b      	ldr	r3, [r7, #16]
 8014600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014602:	693b      	ldr	r3, [r7, #16]
 8014604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014606:	429a      	cmp	r2, r3
 8014608:	d02c      	beq.n	8014664 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801460a:	693b      	ldr	r3, [r7, #16]
 801460c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801460e:	2b00      	cmp	r3, #0
 8014610:	d128      	bne.n	8014664 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014612:	693b      	ldr	r3, [r7, #16]
 8014614:	3304      	adds	r3, #4
 8014616:	4618      	mov	r0, r3
 8014618:	f7fd fecc 	bl	80123b4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801461c:	693b      	ldr	r3, [r7, #16]
 801461e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014620:	693b      	ldr	r3, [r7, #16]
 8014622:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014624:	693b      	ldr	r3, [r7, #16]
 8014626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014628:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801462c:	693b      	ldr	r3, [r7, #16]
 801462e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014630:	693b      	ldr	r3, [r7, #16]
 8014632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014634:	4b0f      	ldr	r3, [pc, #60]	; (8014674 <xTaskPriorityDisinherit+0xd4>)
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	429a      	cmp	r2, r3
 801463a:	d903      	bls.n	8014644 <xTaskPriorityDisinherit+0xa4>
 801463c:	693b      	ldr	r3, [r7, #16]
 801463e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014640:	4a0c      	ldr	r2, [pc, #48]	; (8014674 <xTaskPriorityDisinherit+0xd4>)
 8014642:	6013      	str	r3, [r2, #0]
 8014644:	693b      	ldr	r3, [r7, #16]
 8014646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014648:	4613      	mov	r3, r2
 801464a:	009b      	lsls	r3, r3, #2
 801464c:	4413      	add	r3, r2
 801464e:	009b      	lsls	r3, r3, #2
 8014650:	4a09      	ldr	r2, [pc, #36]	; (8014678 <xTaskPriorityDisinherit+0xd8>)
 8014652:	441a      	add	r2, r3
 8014654:	693b      	ldr	r3, [r7, #16]
 8014656:	3304      	adds	r3, #4
 8014658:	4619      	mov	r1, r3
 801465a:	4610      	mov	r0, r2
 801465c:	f7fd fe4d 	bl	80122fa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014660:	2301      	movs	r3, #1
 8014662:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014664:	697b      	ldr	r3, [r7, #20]
	}
 8014666:	4618      	mov	r0, r3
 8014668:	3718      	adds	r7, #24
 801466a:	46bd      	mov	sp, r7
 801466c:	bd80      	pop	{r7, pc}
 801466e:	bf00      	nop
 8014670:	20000f44 	.word	0x20000f44
 8014674:	20001420 	.word	0x20001420
 8014678:	20000f48 	.word	0x20000f48

0801467c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801467c:	b580      	push	{r7, lr}
 801467e:	b088      	sub	sp, #32
 8014680:	af00      	add	r7, sp, #0
 8014682:	6078      	str	r0, [r7, #4]
 8014684:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801468a:	2301      	movs	r3, #1
 801468c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	2b00      	cmp	r3, #0
 8014692:	d06a      	beq.n	801476a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8014694:	69bb      	ldr	r3, [r7, #24]
 8014696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014698:	2b00      	cmp	r3, #0
 801469a:	d10a      	bne.n	80146b2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 801469c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146a0:	f383 8811 	msr	BASEPRI, r3
 80146a4:	f3bf 8f6f 	isb	sy
 80146a8:	f3bf 8f4f 	dsb	sy
 80146ac:	60fb      	str	r3, [r7, #12]
}
 80146ae:	bf00      	nop
 80146b0:	e7fe      	b.n	80146b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80146b2:	69bb      	ldr	r3, [r7, #24]
 80146b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80146b6:	683a      	ldr	r2, [r7, #0]
 80146b8:	429a      	cmp	r2, r3
 80146ba:	d902      	bls.n	80146c2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80146bc:	683b      	ldr	r3, [r7, #0]
 80146be:	61fb      	str	r3, [r7, #28]
 80146c0:	e002      	b.n	80146c8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80146c2:	69bb      	ldr	r3, [r7, #24]
 80146c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80146c6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80146c8:	69bb      	ldr	r3, [r7, #24]
 80146ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146cc:	69fa      	ldr	r2, [r7, #28]
 80146ce:	429a      	cmp	r2, r3
 80146d0:	d04b      	beq.n	801476a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80146d2:	69bb      	ldr	r3, [r7, #24]
 80146d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80146d6:	697a      	ldr	r2, [r7, #20]
 80146d8:	429a      	cmp	r2, r3
 80146da:	d146      	bne.n	801476a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80146dc:	4b25      	ldr	r3, [pc, #148]	; (8014774 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	69ba      	ldr	r2, [r7, #24]
 80146e2:	429a      	cmp	r2, r3
 80146e4:	d10a      	bne.n	80146fc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80146e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146ea:	f383 8811 	msr	BASEPRI, r3
 80146ee:	f3bf 8f6f 	isb	sy
 80146f2:	f3bf 8f4f 	dsb	sy
 80146f6:	60bb      	str	r3, [r7, #8]
}
 80146f8:	bf00      	nop
 80146fa:	e7fe      	b.n	80146fa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80146fc:	69bb      	ldr	r3, [r7, #24]
 80146fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014700:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8014702:	69bb      	ldr	r3, [r7, #24]
 8014704:	69fa      	ldr	r2, [r7, #28]
 8014706:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014708:	69bb      	ldr	r3, [r7, #24]
 801470a:	699b      	ldr	r3, [r3, #24]
 801470c:	2b00      	cmp	r3, #0
 801470e:	db04      	blt.n	801471a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014710:	69fb      	ldr	r3, [r7, #28]
 8014712:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014716:	69bb      	ldr	r3, [r7, #24]
 8014718:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801471a:	69bb      	ldr	r3, [r7, #24]
 801471c:	6959      	ldr	r1, [r3, #20]
 801471e:	693a      	ldr	r2, [r7, #16]
 8014720:	4613      	mov	r3, r2
 8014722:	009b      	lsls	r3, r3, #2
 8014724:	4413      	add	r3, r2
 8014726:	009b      	lsls	r3, r3, #2
 8014728:	4a13      	ldr	r2, [pc, #76]	; (8014778 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801472a:	4413      	add	r3, r2
 801472c:	4299      	cmp	r1, r3
 801472e:	d11c      	bne.n	801476a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014730:	69bb      	ldr	r3, [r7, #24]
 8014732:	3304      	adds	r3, #4
 8014734:	4618      	mov	r0, r3
 8014736:	f7fd fe3d 	bl	80123b4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801473a:	69bb      	ldr	r3, [r7, #24]
 801473c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801473e:	4b0f      	ldr	r3, [pc, #60]	; (801477c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	429a      	cmp	r2, r3
 8014744:	d903      	bls.n	801474e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8014746:	69bb      	ldr	r3, [r7, #24]
 8014748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801474a:	4a0c      	ldr	r2, [pc, #48]	; (801477c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801474c:	6013      	str	r3, [r2, #0]
 801474e:	69bb      	ldr	r3, [r7, #24]
 8014750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014752:	4613      	mov	r3, r2
 8014754:	009b      	lsls	r3, r3, #2
 8014756:	4413      	add	r3, r2
 8014758:	009b      	lsls	r3, r3, #2
 801475a:	4a07      	ldr	r2, [pc, #28]	; (8014778 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 801475c:	441a      	add	r2, r3
 801475e:	69bb      	ldr	r3, [r7, #24]
 8014760:	3304      	adds	r3, #4
 8014762:	4619      	mov	r1, r3
 8014764:	4610      	mov	r0, r2
 8014766:	f7fd fdc8 	bl	80122fa <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801476a:	bf00      	nop
 801476c:	3720      	adds	r7, #32
 801476e:	46bd      	mov	sp, r7
 8014770:	bd80      	pop	{r7, pc}
 8014772:	bf00      	nop
 8014774:	20000f44 	.word	0x20000f44
 8014778:	20000f48 	.word	0x20000f48
 801477c:	20001420 	.word	0x20001420

08014780 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8014780:	b580      	push	{r7, lr}
 8014782:	b084      	sub	sp, #16
 8014784:	af00      	add	r7, sp, #0
 8014786:	6078      	str	r0, [r7, #4]
 8014788:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 801478a:	6839      	ldr	r1, [r7, #0]
 801478c:	6878      	ldr	r0, [r7, #4]
 801478e:	f002 fdbd 	bl	801730c <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8014792:	6878      	ldr	r0, [r7, #4]
 8014794:	f7eb fd1c 	bl	80001d0 <strlen>
 8014798:	60f8      	str	r0, [r7, #12]
 801479a:	e007      	b.n	80147ac <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 801479c:	687a      	ldr	r2, [r7, #4]
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	4413      	add	r3, r2
 80147a2:	2220      	movs	r2, #32
 80147a4:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	3301      	adds	r3, #1
 80147aa:	60fb      	str	r3, [r7, #12]
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	2b0e      	cmp	r3, #14
 80147b0:	d9f4      	bls.n	801479c <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 80147b2:	687a      	ldr	r2, [r7, #4]
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	4413      	add	r3, r2
 80147b8:	2200      	movs	r2, #0
 80147ba:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 80147bc:	687a      	ldr	r2, [r7, #4]
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	4413      	add	r3, r2
	}
 80147c2:	4618      	mov	r0, r3
 80147c4:	3710      	adds	r7, #16
 80147c6:	46bd      	mov	sp, r7
 80147c8:	bd80      	pop	{r7, pc}
	...

080147cc <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 80147cc:	b590      	push	{r4, r7, lr}
 80147ce:	b089      	sub	sp, #36	; 0x24
 80147d0:	af02      	add	r7, sp, #8
 80147d2:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	2200      	movs	r2, #0
 80147d8:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 80147da:	4b45      	ldr	r3, [pc, #276]	; (80148f0 <vTaskList+0x124>)
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 80147e0:	4b43      	ldr	r3, [pc, #268]	; (80148f0 <vTaskList+0x124>)
 80147e2:	681a      	ldr	r2, [r3, #0]
 80147e4:	4613      	mov	r3, r2
 80147e6:	00db      	lsls	r3, r3, #3
 80147e8:	4413      	add	r3, r2
 80147ea:	009b      	lsls	r3, r3, #2
 80147ec:	4618      	mov	r0, r3
 80147ee:	f000 ff0b 	bl	8015608 <pvPortMalloc>
 80147f2:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 80147f4:	68bb      	ldr	r3, [r7, #8]
 80147f6:	2b00      	cmp	r3, #0
 80147f8:	d076      	beq.n	80148e8 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 80147fa:	2200      	movs	r2, #0
 80147fc:	68f9      	ldr	r1, [r7, #12]
 80147fe:	68b8      	ldr	r0, [r7, #8]
 8014800:	f7ff f996 	bl	8013b30 <uxTaskGetSystemState>
 8014804:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8014806:	2300      	movs	r3, #0
 8014808:	617b      	str	r3, [r7, #20]
 801480a:	e066      	b.n	80148da <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 801480c:	697a      	ldr	r2, [r7, #20]
 801480e:	4613      	mov	r3, r2
 8014810:	00db      	lsls	r3, r3, #3
 8014812:	4413      	add	r3, r2
 8014814:	009b      	lsls	r3, r3, #2
 8014816:	461a      	mov	r2, r3
 8014818:	68bb      	ldr	r3, [r7, #8]
 801481a:	4413      	add	r3, r2
 801481c:	7b1b      	ldrb	r3, [r3, #12]
 801481e:	2b04      	cmp	r3, #4
 8014820:	d81b      	bhi.n	801485a <vTaskList+0x8e>
 8014822:	a201      	add	r2, pc, #4	; (adr r2, 8014828 <vTaskList+0x5c>)
 8014824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014828:	0801483d 	.word	0x0801483d
 801482c:	08014843 	.word	0x08014843
 8014830:	08014849 	.word	0x08014849
 8014834:	0801484f 	.word	0x0801484f
 8014838:	08014855 	.word	0x08014855
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 801483c:	2358      	movs	r3, #88	; 0x58
 801483e:	74fb      	strb	r3, [r7, #19]
										break;
 8014840:	e00e      	b.n	8014860 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 8014842:	2352      	movs	r3, #82	; 0x52
 8014844:	74fb      	strb	r3, [r7, #19]
										break;
 8014846:	e00b      	b.n	8014860 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8014848:	2342      	movs	r3, #66	; 0x42
 801484a:	74fb      	strb	r3, [r7, #19]
										break;
 801484c:	e008      	b.n	8014860 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 801484e:	2353      	movs	r3, #83	; 0x53
 8014850:	74fb      	strb	r3, [r7, #19]
										break;
 8014852:	e005      	b.n	8014860 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8014854:	2344      	movs	r3, #68	; 0x44
 8014856:	74fb      	strb	r3, [r7, #19]
										break;
 8014858:	e002      	b.n	8014860 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 801485a:	2300      	movs	r3, #0
 801485c:	74fb      	strb	r3, [r7, #19]
										break;
 801485e:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8014860:	697a      	ldr	r2, [r7, #20]
 8014862:	4613      	mov	r3, r2
 8014864:	00db      	lsls	r3, r3, #3
 8014866:	4413      	add	r3, r2
 8014868:	009b      	lsls	r3, r3, #2
 801486a:	461a      	mov	r2, r3
 801486c:	68bb      	ldr	r3, [r7, #8]
 801486e:	4413      	add	r3, r2
 8014870:	685b      	ldr	r3, [r3, #4]
 8014872:	4619      	mov	r1, r3
 8014874:	6878      	ldr	r0, [r7, #4]
 8014876:	f7ff ff83 	bl	8014780 <prvWriteNameToBuffer>
 801487a:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 801487c:	7cf9      	ldrb	r1, [r7, #19]
 801487e:	697a      	ldr	r2, [r7, #20]
 8014880:	4613      	mov	r3, r2
 8014882:	00db      	lsls	r3, r3, #3
 8014884:	4413      	add	r3, r2
 8014886:	009b      	lsls	r3, r3, #2
 8014888:	461a      	mov	r2, r3
 801488a:	68bb      	ldr	r3, [r7, #8]
 801488c:	4413      	add	r3, r2
 801488e:	6918      	ldr	r0, [r3, #16]
 8014890:	697a      	ldr	r2, [r7, #20]
 8014892:	4613      	mov	r3, r2
 8014894:	00db      	lsls	r3, r3, #3
 8014896:	4413      	add	r3, r2
 8014898:	009b      	lsls	r3, r3, #2
 801489a:	461a      	mov	r2, r3
 801489c:	68bb      	ldr	r3, [r7, #8]
 801489e:	4413      	add	r3, r2
 80148a0:	8c1b      	ldrh	r3, [r3, #32]
 80148a2:	461c      	mov	r4, r3
 80148a4:	697a      	ldr	r2, [r7, #20]
 80148a6:	4613      	mov	r3, r2
 80148a8:	00db      	lsls	r3, r3, #3
 80148aa:	4413      	add	r3, r2
 80148ac:	009b      	lsls	r3, r3, #2
 80148ae:	461a      	mov	r2, r3
 80148b0:	68bb      	ldr	r3, [r7, #8]
 80148b2:	4413      	add	r3, r2
 80148b4:	689b      	ldr	r3, [r3, #8]
 80148b6:	9301      	str	r3, [sp, #4]
 80148b8:	9400      	str	r4, [sp, #0]
 80148ba:	4603      	mov	r3, r0
 80148bc:	460a      	mov	r2, r1
 80148be:	490d      	ldr	r1, [pc, #52]	; (80148f4 <vTaskList+0x128>)
 80148c0:	6878      	ldr	r0, [r7, #4]
 80148c2:	f002 fcb1 	bl	8017228 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 80148c6:	6878      	ldr	r0, [r7, #4]
 80148c8:	f7eb fc82 	bl	80001d0 <strlen>
 80148cc:	4602      	mov	r2, r0
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	4413      	add	r3, r2
 80148d2:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 80148d4:	697b      	ldr	r3, [r7, #20]
 80148d6:	3301      	adds	r3, #1
 80148d8:	617b      	str	r3, [r7, #20]
 80148da:	697a      	ldr	r2, [r7, #20]
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	429a      	cmp	r2, r3
 80148e0:	d394      	bcc.n	801480c <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 80148e2:	68b8      	ldr	r0, [r7, #8]
 80148e4:	f000 ff5c 	bl	80157a0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80148e8:	bf00      	nop
 80148ea:	371c      	adds	r7, #28
 80148ec:	46bd      	mov	sp, r7
 80148ee:	bd90      	pop	{r4, r7, pc}
 80148f0:	20001418 	.word	0x20001418
 80148f4:	08019a60 	.word	0x08019a60

080148f8 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b088      	sub	sp, #32
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	2200      	movs	r2, #0
 8014904:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8014906:	4b3a      	ldr	r3, [pc, #232]	; (80149f0 <vTaskGetRunTimeStats+0xf8>)
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 801490c:	4b38      	ldr	r3, [pc, #224]	; (80149f0 <vTaskGetRunTimeStats+0xf8>)
 801490e:	681a      	ldr	r2, [r3, #0]
 8014910:	4613      	mov	r3, r2
 8014912:	00db      	lsls	r3, r3, #3
 8014914:	4413      	add	r3, r2
 8014916:	009b      	lsls	r3, r3, #2
 8014918:	4618      	mov	r0, r3
 801491a:	f000 fe75 	bl	8015608 <pvPortMalloc>
 801491e:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 8014920:	697b      	ldr	r3, [r7, #20]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d05f      	beq.n	80149e6 <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8014926:	f107 030c 	add.w	r3, r7, #12
 801492a:	461a      	mov	r2, r3
 801492c:	69b9      	ldr	r1, [r7, #24]
 801492e:	6978      	ldr	r0, [r7, #20]
 8014930:	f7ff f8fe 	bl	8013b30 <uxTaskGetSystemState>
 8014934:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	4a2e      	ldr	r2, [pc, #184]	; (80149f4 <vTaskGetRunTimeStats+0xfc>)
 801493a:	fba2 2303 	umull	r2, r3, r2, r3
 801493e:	095b      	lsrs	r3, r3, #5
 8014940:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d04b      	beq.n	80149e0 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 8014948:	2300      	movs	r3, #0
 801494a:	61fb      	str	r3, [r7, #28]
 801494c:	e044      	b.n	80149d8 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 801494e:	69fa      	ldr	r2, [r7, #28]
 8014950:	4613      	mov	r3, r2
 8014952:	00db      	lsls	r3, r3, #3
 8014954:	4413      	add	r3, r2
 8014956:	009b      	lsls	r3, r3, #2
 8014958:	461a      	mov	r2, r3
 801495a:	697b      	ldr	r3, [r7, #20]
 801495c:	4413      	add	r3, r2
 801495e:	699a      	ldr	r2, [r3, #24]
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	fbb2 f3f3 	udiv	r3, r2, r3
 8014966:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8014968:	69fa      	ldr	r2, [r7, #28]
 801496a:	4613      	mov	r3, r2
 801496c:	00db      	lsls	r3, r3, #3
 801496e:	4413      	add	r3, r2
 8014970:	009b      	lsls	r3, r3, #2
 8014972:	461a      	mov	r2, r3
 8014974:	697b      	ldr	r3, [r7, #20]
 8014976:	4413      	add	r3, r2
 8014978:	685b      	ldr	r3, [r3, #4]
 801497a:	4619      	mov	r1, r3
 801497c:	6878      	ldr	r0, [r7, #4]
 801497e:	f7ff feff 	bl	8014780 <prvWriteNameToBuffer>
 8014982:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 8014984:	693b      	ldr	r3, [r7, #16]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d00e      	beq.n	80149a8 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 801498a:	69fa      	ldr	r2, [r7, #28]
 801498c:	4613      	mov	r3, r2
 801498e:	00db      	lsls	r3, r3, #3
 8014990:	4413      	add	r3, r2
 8014992:	009b      	lsls	r3, r3, #2
 8014994:	461a      	mov	r2, r3
 8014996:	697b      	ldr	r3, [r7, #20]
 8014998:	4413      	add	r3, r2
 801499a:	699a      	ldr	r2, [r3, #24]
 801499c:	693b      	ldr	r3, [r7, #16]
 801499e:	4916      	ldr	r1, [pc, #88]	; (80149f8 <vTaskGetRunTimeStats+0x100>)
 80149a0:	6878      	ldr	r0, [r7, #4]
 80149a2:	f002 fc41 	bl	8017228 <siprintf>
 80149a6:	e00d      	b.n	80149c4 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 80149a8:	69fa      	ldr	r2, [r7, #28]
 80149aa:	4613      	mov	r3, r2
 80149ac:	00db      	lsls	r3, r3, #3
 80149ae:	4413      	add	r3, r2
 80149b0:	009b      	lsls	r3, r3, #2
 80149b2:	461a      	mov	r2, r3
 80149b4:	697b      	ldr	r3, [r7, #20]
 80149b6:	4413      	add	r3, r2
 80149b8:	699b      	ldr	r3, [r3, #24]
 80149ba:	461a      	mov	r2, r3
 80149bc:	490f      	ldr	r1, [pc, #60]	; (80149fc <vTaskGetRunTimeStats+0x104>)
 80149be:	6878      	ldr	r0, [r7, #4]
 80149c0:	f002 fc32 	bl	8017228 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 80149c4:	6878      	ldr	r0, [r7, #4]
 80149c6:	f7eb fc03 	bl	80001d0 <strlen>
 80149ca:	4602      	mov	r2, r0
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	4413      	add	r3, r2
 80149d0:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 80149d2:	69fb      	ldr	r3, [r7, #28]
 80149d4:	3301      	adds	r3, #1
 80149d6:	61fb      	str	r3, [r7, #28]
 80149d8:	69fa      	ldr	r2, [r7, #28]
 80149da:	69bb      	ldr	r3, [r7, #24]
 80149dc:	429a      	cmp	r2, r3
 80149de:	d3b6      	bcc.n	801494e <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 80149e0:	6978      	ldr	r0, [r7, #20]
 80149e2:	f000 fedd 	bl	80157a0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80149e6:	bf00      	nop
 80149e8:	3720      	adds	r7, #32
 80149ea:	46bd      	mov	sp, r7
 80149ec:	bd80      	pop	{r7, pc}
 80149ee:	bf00      	nop
 80149f0:	20001418 	.word	0x20001418
 80149f4:	51eb851f 	.word	0x51eb851f
 80149f8:	08019a70 	.word	0x08019a70
 80149fc:	08019a7c 	.word	0x08019a7c

08014a00 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8014a00:	b480      	push	{r7}
 8014a02:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014a04:	4b07      	ldr	r3, [pc, #28]	; (8014a24 <pvTaskIncrementMutexHeldCount+0x24>)
 8014a06:	681b      	ldr	r3, [r3, #0]
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d004      	beq.n	8014a16 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014a0c:	4b05      	ldr	r3, [pc, #20]	; (8014a24 <pvTaskIncrementMutexHeldCount+0x24>)
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014a12:	3201      	adds	r2, #1
 8014a14:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8014a16:	4b03      	ldr	r3, [pc, #12]	; (8014a24 <pvTaskIncrementMutexHeldCount+0x24>)
 8014a18:	681b      	ldr	r3, [r3, #0]
	}
 8014a1a:	4618      	mov	r0, r3
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a22:	4770      	bx	lr
 8014a24:	20000f44 	.word	0x20000f44

08014a28 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b084      	sub	sp, #16
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
 8014a30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8014a32:	4b21      	ldr	r3, [pc, #132]	; (8014ab8 <prvAddCurrentTaskToDelayedList+0x90>)
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014a38:	4b20      	ldr	r3, [pc, #128]	; (8014abc <prvAddCurrentTaskToDelayedList+0x94>)
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	3304      	adds	r3, #4
 8014a3e:	4618      	mov	r0, r3
 8014a40:	f7fd fcb8 	bl	80123b4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014a4a:	d10a      	bne.n	8014a62 <prvAddCurrentTaskToDelayedList+0x3a>
 8014a4c:	683b      	ldr	r3, [r7, #0]
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d007      	beq.n	8014a62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014a52:	4b1a      	ldr	r3, [pc, #104]	; (8014abc <prvAddCurrentTaskToDelayedList+0x94>)
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	3304      	adds	r3, #4
 8014a58:	4619      	mov	r1, r3
 8014a5a:	4819      	ldr	r0, [pc, #100]	; (8014ac0 <prvAddCurrentTaskToDelayedList+0x98>)
 8014a5c:	f7fd fc4d 	bl	80122fa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8014a60:	e026      	b.n	8014ab0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8014a62:	68fa      	ldr	r2, [r7, #12]
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	4413      	add	r3, r2
 8014a68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014a6a:	4b14      	ldr	r3, [pc, #80]	; (8014abc <prvAddCurrentTaskToDelayedList+0x94>)
 8014a6c:	681b      	ldr	r3, [r3, #0]
 8014a6e:	68ba      	ldr	r2, [r7, #8]
 8014a70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8014a72:	68ba      	ldr	r2, [r7, #8]
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	429a      	cmp	r2, r3
 8014a78:	d209      	bcs.n	8014a8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014a7a:	4b12      	ldr	r3, [pc, #72]	; (8014ac4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8014a7c:	681a      	ldr	r2, [r3, #0]
 8014a7e:	4b0f      	ldr	r3, [pc, #60]	; (8014abc <prvAddCurrentTaskToDelayedList+0x94>)
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	3304      	adds	r3, #4
 8014a84:	4619      	mov	r1, r3
 8014a86:	4610      	mov	r0, r2
 8014a88:	f7fd fc5b 	bl	8012342 <vListInsert>
}
 8014a8c:	e010      	b.n	8014ab0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014a8e:	4b0e      	ldr	r3, [pc, #56]	; (8014ac8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8014a90:	681a      	ldr	r2, [r3, #0]
 8014a92:	4b0a      	ldr	r3, [pc, #40]	; (8014abc <prvAddCurrentTaskToDelayedList+0x94>)
 8014a94:	681b      	ldr	r3, [r3, #0]
 8014a96:	3304      	adds	r3, #4
 8014a98:	4619      	mov	r1, r3
 8014a9a:	4610      	mov	r0, r2
 8014a9c:	f7fd fc51 	bl	8012342 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8014aa0:	4b0a      	ldr	r3, [pc, #40]	; (8014acc <prvAddCurrentTaskToDelayedList+0xa4>)
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	68ba      	ldr	r2, [r7, #8]
 8014aa6:	429a      	cmp	r2, r3
 8014aa8:	d202      	bcs.n	8014ab0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8014aaa:	4a08      	ldr	r2, [pc, #32]	; (8014acc <prvAddCurrentTaskToDelayedList+0xa4>)
 8014aac:	68bb      	ldr	r3, [r7, #8]
 8014aae:	6013      	str	r3, [r2, #0]
}
 8014ab0:	bf00      	nop
 8014ab2:	3710      	adds	r7, #16
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	bd80      	pop	{r7, pc}
 8014ab8:	2000141c 	.word	0x2000141c
 8014abc:	20000f44 	.word	0x20000f44
 8014ac0:	20001404 	.word	0x20001404
 8014ac4:	200013d4 	.word	0x200013d4
 8014ac8:	200013d0 	.word	0x200013d0
 8014acc:	20001438 	.word	0x20001438

08014ad0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8014ad0:	b580      	push	{r7, lr}
 8014ad2:	b08a      	sub	sp, #40	; 0x28
 8014ad4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8014ad6:	2300      	movs	r3, #0
 8014ad8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8014ada:	f000 fb07 	bl	80150ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8014ade:	4b1c      	ldr	r3, [pc, #112]	; (8014b50 <xTimerCreateTimerTask+0x80>)
 8014ae0:	681b      	ldr	r3, [r3, #0]
 8014ae2:	2b00      	cmp	r3, #0
 8014ae4:	d021      	beq.n	8014b2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8014aea:	2300      	movs	r3, #0
 8014aec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8014aee:	1d3a      	adds	r2, r7, #4
 8014af0:	f107 0108 	add.w	r1, r7, #8
 8014af4:	f107 030c 	add.w	r3, r7, #12
 8014af8:	4618      	mov	r0, r3
 8014afa:	f7fd fbb7 	bl	801226c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8014afe:	6879      	ldr	r1, [r7, #4]
 8014b00:	68bb      	ldr	r3, [r7, #8]
 8014b02:	68fa      	ldr	r2, [r7, #12]
 8014b04:	9202      	str	r2, [sp, #8]
 8014b06:	9301      	str	r3, [sp, #4]
 8014b08:	2302      	movs	r3, #2
 8014b0a:	9300      	str	r3, [sp, #0]
 8014b0c:	2300      	movs	r3, #0
 8014b0e:	460a      	mov	r2, r1
 8014b10:	4910      	ldr	r1, [pc, #64]	; (8014b54 <xTimerCreateTimerTask+0x84>)
 8014b12:	4811      	ldr	r0, [pc, #68]	; (8014b58 <xTimerCreateTimerTask+0x88>)
 8014b14:	f7fe fc86 	bl	8013424 <xTaskCreateStatic>
 8014b18:	4603      	mov	r3, r0
 8014b1a:	4a10      	ldr	r2, [pc, #64]	; (8014b5c <xTimerCreateTimerTask+0x8c>)
 8014b1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8014b1e:	4b0f      	ldr	r3, [pc, #60]	; (8014b5c <xTimerCreateTimerTask+0x8c>)
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d001      	beq.n	8014b2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8014b26:	2301      	movs	r3, #1
 8014b28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8014b2a:	697b      	ldr	r3, [r7, #20]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d10a      	bne.n	8014b46 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8014b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b34:	f383 8811 	msr	BASEPRI, r3
 8014b38:	f3bf 8f6f 	isb	sy
 8014b3c:	f3bf 8f4f 	dsb	sy
 8014b40:	613b      	str	r3, [r7, #16]
}
 8014b42:	bf00      	nop
 8014b44:	e7fe      	b.n	8014b44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8014b46:	697b      	ldr	r3, [r7, #20]
}
 8014b48:	4618      	mov	r0, r3
 8014b4a:	3718      	adds	r7, #24
 8014b4c:	46bd      	mov	sp, r7
 8014b4e:	bd80      	pop	{r7, pc}
 8014b50:	2000147c 	.word	0x2000147c
 8014b54:	08019a88 	.word	0x08019a88
 8014b58:	08014c95 	.word	0x08014c95
 8014b5c:	20001480 	.word	0x20001480

08014b60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8014b60:	b580      	push	{r7, lr}
 8014b62:	b08a      	sub	sp, #40	; 0x28
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	60f8      	str	r0, [r7, #12]
 8014b68:	60b9      	str	r1, [r7, #8]
 8014b6a:	607a      	str	r2, [r7, #4]
 8014b6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8014b6e:	2300      	movs	r3, #0
 8014b70:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8014b72:	68fb      	ldr	r3, [r7, #12]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d10a      	bne.n	8014b8e <xTimerGenericCommand+0x2e>
	__asm volatile
 8014b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b7c:	f383 8811 	msr	BASEPRI, r3
 8014b80:	f3bf 8f6f 	isb	sy
 8014b84:	f3bf 8f4f 	dsb	sy
 8014b88:	623b      	str	r3, [r7, #32]
}
 8014b8a:	bf00      	nop
 8014b8c:	e7fe      	b.n	8014b8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8014b8e:	4b1a      	ldr	r3, [pc, #104]	; (8014bf8 <xTimerGenericCommand+0x98>)
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d02a      	beq.n	8014bec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8014b96:	68bb      	ldr	r3, [r7, #8]
 8014b98:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8014b9a:	687b      	ldr	r3, [r7, #4]
 8014b9c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8014b9e:	68fb      	ldr	r3, [r7, #12]
 8014ba0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8014ba2:	68bb      	ldr	r3, [r7, #8]
 8014ba4:	2b05      	cmp	r3, #5
 8014ba6:	dc18      	bgt.n	8014bda <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8014ba8:	f7ff fc74 	bl	8014494 <xTaskGetSchedulerState>
 8014bac:	4603      	mov	r3, r0
 8014bae:	2b02      	cmp	r3, #2
 8014bb0:	d109      	bne.n	8014bc6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8014bb2:	4b11      	ldr	r3, [pc, #68]	; (8014bf8 <xTimerGenericCommand+0x98>)
 8014bb4:	6818      	ldr	r0, [r3, #0]
 8014bb6:	f107 0110 	add.w	r1, r7, #16
 8014bba:	2300      	movs	r3, #0
 8014bbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014bbe:	f7fd fdcb 	bl	8012758 <xQueueGenericSend>
 8014bc2:	6278      	str	r0, [r7, #36]	; 0x24
 8014bc4:	e012      	b.n	8014bec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8014bc6:	4b0c      	ldr	r3, [pc, #48]	; (8014bf8 <xTimerGenericCommand+0x98>)
 8014bc8:	6818      	ldr	r0, [r3, #0]
 8014bca:	f107 0110 	add.w	r1, r7, #16
 8014bce:	2300      	movs	r3, #0
 8014bd0:	2200      	movs	r2, #0
 8014bd2:	f7fd fdc1 	bl	8012758 <xQueueGenericSend>
 8014bd6:	6278      	str	r0, [r7, #36]	; 0x24
 8014bd8:	e008      	b.n	8014bec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8014bda:	4b07      	ldr	r3, [pc, #28]	; (8014bf8 <xTimerGenericCommand+0x98>)
 8014bdc:	6818      	ldr	r0, [r3, #0]
 8014bde:	f107 0110 	add.w	r1, r7, #16
 8014be2:	2300      	movs	r3, #0
 8014be4:	683a      	ldr	r2, [r7, #0]
 8014be6:	f7fd feb5 	bl	8012954 <xQueueGenericSendFromISR>
 8014bea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8014bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8014bee:	4618      	mov	r0, r3
 8014bf0:	3728      	adds	r7, #40	; 0x28
 8014bf2:	46bd      	mov	sp, r7
 8014bf4:	bd80      	pop	{r7, pc}
 8014bf6:	bf00      	nop
 8014bf8:	2000147c 	.word	0x2000147c

08014bfc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8014bfc:	b580      	push	{r7, lr}
 8014bfe:	b088      	sub	sp, #32
 8014c00:	af02      	add	r7, sp, #8
 8014c02:	6078      	str	r0, [r7, #4]
 8014c04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014c06:	4b22      	ldr	r3, [pc, #136]	; (8014c90 <prvProcessExpiredTimer+0x94>)
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	68db      	ldr	r3, [r3, #12]
 8014c0c:	68db      	ldr	r3, [r3, #12]
 8014c0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014c10:	697b      	ldr	r3, [r7, #20]
 8014c12:	3304      	adds	r3, #4
 8014c14:	4618      	mov	r0, r3
 8014c16:	f7fd fbcd 	bl	80123b4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014c1a:	697b      	ldr	r3, [r7, #20]
 8014c1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014c20:	f003 0304 	and.w	r3, r3, #4
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d022      	beq.n	8014c6e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8014c28:	697b      	ldr	r3, [r7, #20]
 8014c2a:	699a      	ldr	r2, [r3, #24]
 8014c2c:	687b      	ldr	r3, [r7, #4]
 8014c2e:	18d1      	adds	r1, r2, r3
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	683a      	ldr	r2, [r7, #0]
 8014c34:	6978      	ldr	r0, [r7, #20]
 8014c36:	f000 f8d1 	bl	8014ddc <prvInsertTimerInActiveList>
 8014c3a:	4603      	mov	r3, r0
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d01f      	beq.n	8014c80 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8014c40:	2300      	movs	r3, #0
 8014c42:	9300      	str	r3, [sp, #0]
 8014c44:	2300      	movs	r3, #0
 8014c46:	687a      	ldr	r2, [r7, #4]
 8014c48:	2100      	movs	r1, #0
 8014c4a:	6978      	ldr	r0, [r7, #20]
 8014c4c:	f7ff ff88 	bl	8014b60 <xTimerGenericCommand>
 8014c50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8014c52:	693b      	ldr	r3, [r7, #16]
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d113      	bne.n	8014c80 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8014c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c5c:	f383 8811 	msr	BASEPRI, r3
 8014c60:	f3bf 8f6f 	isb	sy
 8014c64:	f3bf 8f4f 	dsb	sy
 8014c68:	60fb      	str	r3, [r7, #12]
}
 8014c6a:	bf00      	nop
 8014c6c:	e7fe      	b.n	8014c6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014c6e:	697b      	ldr	r3, [r7, #20]
 8014c70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014c74:	f023 0301 	bic.w	r3, r3, #1
 8014c78:	b2da      	uxtb	r2, r3
 8014c7a:	697b      	ldr	r3, [r7, #20]
 8014c7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014c80:	697b      	ldr	r3, [r7, #20]
 8014c82:	6a1b      	ldr	r3, [r3, #32]
 8014c84:	6978      	ldr	r0, [r7, #20]
 8014c86:	4798      	blx	r3
}
 8014c88:	bf00      	nop
 8014c8a:	3718      	adds	r7, #24
 8014c8c:	46bd      	mov	sp, r7
 8014c8e:	bd80      	pop	{r7, pc}
 8014c90:	20001474 	.word	0x20001474

08014c94 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8014c94:	b580      	push	{r7, lr}
 8014c96:	b084      	sub	sp, #16
 8014c98:	af00      	add	r7, sp, #0
 8014c9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014c9c:	f107 0308 	add.w	r3, r7, #8
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	f000 f857 	bl	8014d54 <prvGetNextExpireTime>
 8014ca6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8014ca8:	68bb      	ldr	r3, [r7, #8]
 8014caa:	4619      	mov	r1, r3
 8014cac:	68f8      	ldr	r0, [r7, #12]
 8014cae:	f000 f803 	bl	8014cb8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8014cb2:	f000 f8d5 	bl	8014e60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8014cb6:	e7f1      	b.n	8014c9c <prvTimerTask+0x8>

08014cb8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	b084      	sub	sp, #16
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	6078      	str	r0, [r7, #4]
 8014cc0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8014cc2:	f7fe fe79 	bl	80139b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014cc6:	f107 0308 	add.w	r3, r7, #8
 8014cca:	4618      	mov	r0, r3
 8014ccc:	f000 f866 	bl	8014d9c <prvSampleTimeNow>
 8014cd0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8014cd2:	68bb      	ldr	r3, [r7, #8]
 8014cd4:	2b00      	cmp	r3, #0
 8014cd6:	d130      	bne.n	8014d3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8014cd8:	683b      	ldr	r3, [r7, #0]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d10a      	bne.n	8014cf4 <prvProcessTimerOrBlockTask+0x3c>
 8014cde:	687a      	ldr	r2, [r7, #4]
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	429a      	cmp	r2, r3
 8014ce4:	d806      	bhi.n	8014cf4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8014ce6:	f7fe fe75 	bl	80139d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8014cea:	68f9      	ldr	r1, [r7, #12]
 8014cec:	6878      	ldr	r0, [r7, #4]
 8014cee:	f7ff ff85 	bl	8014bfc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8014cf2:	e024      	b.n	8014d3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8014cf4:	683b      	ldr	r3, [r7, #0]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d008      	beq.n	8014d0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8014cfa:	4b13      	ldr	r3, [pc, #76]	; (8014d48 <prvProcessTimerOrBlockTask+0x90>)
 8014cfc:	681b      	ldr	r3, [r3, #0]
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d101      	bne.n	8014d08 <prvProcessTimerOrBlockTask+0x50>
 8014d04:	2301      	movs	r3, #1
 8014d06:	e000      	b.n	8014d0a <prvProcessTimerOrBlockTask+0x52>
 8014d08:	2300      	movs	r3, #0
 8014d0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8014d0c:	4b0f      	ldr	r3, [pc, #60]	; (8014d4c <prvProcessTimerOrBlockTask+0x94>)
 8014d0e:	6818      	ldr	r0, [r3, #0]
 8014d10:	687a      	ldr	r2, [r7, #4]
 8014d12:	68fb      	ldr	r3, [r7, #12]
 8014d14:	1ad3      	subs	r3, r2, r3
 8014d16:	683a      	ldr	r2, [r7, #0]
 8014d18:	4619      	mov	r1, r3
 8014d1a:	f7fe fb4f 	bl	80133bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8014d1e:	f7fe fe59 	bl	80139d4 <xTaskResumeAll>
 8014d22:	4603      	mov	r3, r0
 8014d24:	2b00      	cmp	r3, #0
 8014d26:	d10a      	bne.n	8014d3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8014d28:	4b09      	ldr	r3, [pc, #36]	; (8014d50 <prvProcessTimerOrBlockTask+0x98>)
 8014d2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d2e:	601a      	str	r2, [r3, #0]
 8014d30:	f3bf 8f4f 	dsb	sy
 8014d34:	f3bf 8f6f 	isb	sy
}
 8014d38:	e001      	b.n	8014d3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8014d3a:	f7fe fe4b 	bl	80139d4 <xTaskResumeAll>
}
 8014d3e:	bf00      	nop
 8014d40:	3710      	adds	r7, #16
 8014d42:	46bd      	mov	sp, r7
 8014d44:	bd80      	pop	{r7, pc}
 8014d46:	bf00      	nop
 8014d48:	20001478 	.word	0x20001478
 8014d4c:	2000147c 	.word	0x2000147c
 8014d50:	e000ed04 	.word	0xe000ed04

08014d54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8014d54:	b480      	push	{r7}
 8014d56:	b085      	sub	sp, #20
 8014d58:	af00      	add	r7, sp, #0
 8014d5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8014d5c:	4b0e      	ldr	r3, [pc, #56]	; (8014d98 <prvGetNextExpireTime+0x44>)
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	681b      	ldr	r3, [r3, #0]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d101      	bne.n	8014d6a <prvGetNextExpireTime+0x16>
 8014d66:	2201      	movs	r2, #1
 8014d68:	e000      	b.n	8014d6c <prvGetNextExpireTime+0x18>
 8014d6a:	2200      	movs	r2, #0
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	681b      	ldr	r3, [r3, #0]
 8014d74:	2b00      	cmp	r3, #0
 8014d76:	d105      	bne.n	8014d84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014d78:	4b07      	ldr	r3, [pc, #28]	; (8014d98 <prvGetNextExpireTime+0x44>)
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	68db      	ldr	r3, [r3, #12]
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	60fb      	str	r3, [r7, #12]
 8014d82:	e001      	b.n	8014d88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8014d84:	2300      	movs	r3, #0
 8014d86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8014d88:	68fb      	ldr	r3, [r7, #12]
}
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	3714      	adds	r7, #20
 8014d8e:	46bd      	mov	sp, r7
 8014d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d94:	4770      	bx	lr
 8014d96:	bf00      	nop
 8014d98:	20001474 	.word	0x20001474

08014d9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8014d9c:	b580      	push	{r7, lr}
 8014d9e:	b084      	sub	sp, #16
 8014da0:	af00      	add	r7, sp, #0
 8014da2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8014da4:	f7fe feb4 	bl	8013b10 <xTaskGetTickCount>
 8014da8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8014daa:	4b0b      	ldr	r3, [pc, #44]	; (8014dd8 <prvSampleTimeNow+0x3c>)
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	68fa      	ldr	r2, [r7, #12]
 8014db0:	429a      	cmp	r2, r3
 8014db2:	d205      	bcs.n	8014dc0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8014db4:	f000 f936 	bl	8015024 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	2201      	movs	r2, #1
 8014dbc:	601a      	str	r2, [r3, #0]
 8014dbe:	e002      	b.n	8014dc6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	2200      	movs	r2, #0
 8014dc4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8014dc6:	4a04      	ldr	r2, [pc, #16]	; (8014dd8 <prvSampleTimeNow+0x3c>)
 8014dc8:	68fb      	ldr	r3, [r7, #12]
 8014dca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8014dcc:	68fb      	ldr	r3, [r7, #12]
}
 8014dce:	4618      	mov	r0, r3
 8014dd0:	3710      	adds	r7, #16
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	bd80      	pop	{r7, pc}
 8014dd6:	bf00      	nop
 8014dd8:	20001484 	.word	0x20001484

08014ddc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b086      	sub	sp, #24
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	60f8      	str	r0, [r7, #12]
 8014de4:	60b9      	str	r1, [r7, #8]
 8014de6:	607a      	str	r2, [r7, #4]
 8014de8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8014dea:	2300      	movs	r3, #0
 8014dec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8014dee:	68fb      	ldr	r3, [r7, #12]
 8014df0:	68ba      	ldr	r2, [r7, #8]
 8014df2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014df4:	68fb      	ldr	r3, [r7, #12]
 8014df6:	68fa      	ldr	r2, [r7, #12]
 8014df8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8014dfa:	68ba      	ldr	r2, [r7, #8]
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	429a      	cmp	r2, r3
 8014e00:	d812      	bhi.n	8014e28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014e02:	687a      	ldr	r2, [r7, #4]
 8014e04:	683b      	ldr	r3, [r7, #0]
 8014e06:	1ad2      	subs	r2, r2, r3
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	699b      	ldr	r3, [r3, #24]
 8014e0c:	429a      	cmp	r2, r3
 8014e0e:	d302      	bcc.n	8014e16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8014e10:	2301      	movs	r3, #1
 8014e12:	617b      	str	r3, [r7, #20]
 8014e14:	e01b      	b.n	8014e4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8014e16:	4b10      	ldr	r3, [pc, #64]	; (8014e58 <prvInsertTimerInActiveList+0x7c>)
 8014e18:	681a      	ldr	r2, [r3, #0]
 8014e1a:	68fb      	ldr	r3, [r7, #12]
 8014e1c:	3304      	adds	r3, #4
 8014e1e:	4619      	mov	r1, r3
 8014e20:	4610      	mov	r0, r2
 8014e22:	f7fd fa8e 	bl	8012342 <vListInsert>
 8014e26:	e012      	b.n	8014e4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8014e28:	687a      	ldr	r2, [r7, #4]
 8014e2a:	683b      	ldr	r3, [r7, #0]
 8014e2c:	429a      	cmp	r2, r3
 8014e2e:	d206      	bcs.n	8014e3e <prvInsertTimerInActiveList+0x62>
 8014e30:	68ba      	ldr	r2, [r7, #8]
 8014e32:	683b      	ldr	r3, [r7, #0]
 8014e34:	429a      	cmp	r2, r3
 8014e36:	d302      	bcc.n	8014e3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8014e38:	2301      	movs	r3, #1
 8014e3a:	617b      	str	r3, [r7, #20]
 8014e3c:	e007      	b.n	8014e4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8014e3e:	4b07      	ldr	r3, [pc, #28]	; (8014e5c <prvInsertTimerInActiveList+0x80>)
 8014e40:	681a      	ldr	r2, [r3, #0]
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	3304      	adds	r3, #4
 8014e46:	4619      	mov	r1, r3
 8014e48:	4610      	mov	r0, r2
 8014e4a:	f7fd fa7a 	bl	8012342 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8014e4e:	697b      	ldr	r3, [r7, #20]
}
 8014e50:	4618      	mov	r0, r3
 8014e52:	3718      	adds	r7, #24
 8014e54:	46bd      	mov	sp, r7
 8014e56:	bd80      	pop	{r7, pc}
 8014e58:	20001478 	.word	0x20001478
 8014e5c:	20001474 	.word	0x20001474

08014e60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8014e60:	b580      	push	{r7, lr}
 8014e62:	b08e      	sub	sp, #56	; 0x38
 8014e64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014e66:	e0ca      	b.n	8014ffe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	da18      	bge.n	8014ea0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8014e6e:	1d3b      	adds	r3, r7, #4
 8014e70:	3304      	adds	r3, #4
 8014e72:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8014e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d10a      	bne.n	8014e90 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8014e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e7e:	f383 8811 	msr	BASEPRI, r3
 8014e82:	f3bf 8f6f 	isb	sy
 8014e86:	f3bf 8f4f 	dsb	sy
 8014e8a:	61fb      	str	r3, [r7, #28]
}
 8014e8c:	bf00      	nop
 8014e8e:	e7fe      	b.n	8014e8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8014e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014e96:	6850      	ldr	r0, [r2, #4]
 8014e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014e9a:	6892      	ldr	r2, [r2, #8]
 8014e9c:	4611      	mov	r1, r2
 8014e9e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	f2c0 80aa 	blt.w	8014ffc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8014eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eae:	695b      	ldr	r3, [r3, #20]
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d004      	beq.n	8014ebe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8014eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eb6:	3304      	adds	r3, #4
 8014eb8:	4618      	mov	r0, r3
 8014eba:	f7fd fa7b 	bl	80123b4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8014ebe:	463b      	mov	r3, r7
 8014ec0:	4618      	mov	r0, r3
 8014ec2:	f7ff ff6b 	bl	8014d9c <prvSampleTimeNow>
 8014ec6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	2b09      	cmp	r3, #9
 8014ecc:	f200 8097 	bhi.w	8014ffe <prvProcessReceivedCommands+0x19e>
 8014ed0:	a201      	add	r2, pc, #4	; (adr r2, 8014ed8 <prvProcessReceivedCommands+0x78>)
 8014ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ed6:	bf00      	nop
 8014ed8:	08014f01 	.word	0x08014f01
 8014edc:	08014f01 	.word	0x08014f01
 8014ee0:	08014f01 	.word	0x08014f01
 8014ee4:	08014f75 	.word	0x08014f75
 8014ee8:	08014f89 	.word	0x08014f89
 8014eec:	08014fd3 	.word	0x08014fd3
 8014ef0:	08014f01 	.word	0x08014f01
 8014ef4:	08014f01 	.word	0x08014f01
 8014ef8:	08014f75 	.word	0x08014f75
 8014efc:	08014f89 	.word	0x08014f89
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014f06:	f043 0301 	orr.w	r3, r3, #1
 8014f0a:	b2da      	uxtb	r2, r3
 8014f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8014f12:	68ba      	ldr	r2, [r7, #8]
 8014f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f16:	699b      	ldr	r3, [r3, #24]
 8014f18:	18d1      	adds	r1, r2, r3
 8014f1a:	68bb      	ldr	r3, [r7, #8]
 8014f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014f20:	f7ff ff5c 	bl	8014ddc <prvInsertTimerInActiveList>
 8014f24:	4603      	mov	r3, r0
 8014f26:	2b00      	cmp	r3, #0
 8014f28:	d069      	beq.n	8014ffe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f2c:	6a1b      	ldr	r3, [r3, #32]
 8014f2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014f30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8014f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014f38:	f003 0304 	and.w	r3, r3, #4
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d05e      	beq.n	8014ffe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8014f40:	68ba      	ldr	r2, [r7, #8]
 8014f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f44:	699b      	ldr	r3, [r3, #24]
 8014f46:	441a      	add	r2, r3
 8014f48:	2300      	movs	r3, #0
 8014f4a:	9300      	str	r3, [sp, #0]
 8014f4c:	2300      	movs	r3, #0
 8014f4e:	2100      	movs	r1, #0
 8014f50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014f52:	f7ff fe05 	bl	8014b60 <xTimerGenericCommand>
 8014f56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014f58:	6a3b      	ldr	r3, [r7, #32]
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	d14f      	bne.n	8014ffe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8014f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f62:	f383 8811 	msr	BASEPRI, r3
 8014f66:	f3bf 8f6f 	isb	sy
 8014f6a:	f3bf 8f4f 	dsb	sy
 8014f6e:	61bb      	str	r3, [r7, #24]
}
 8014f70:	bf00      	nop
 8014f72:	e7fe      	b.n	8014f72 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014f7a:	f023 0301 	bic.w	r3, r3, #1
 8014f7e:	b2da      	uxtb	r2, r3
 8014f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8014f86:	e03a      	b.n	8014ffe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8014f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014f8e:	f043 0301 	orr.w	r3, r3, #1
 8014f92:	b2da      	uxtb	r2, r3
 8014f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8014f9a:	68ba      	ldr	r2, [r7, #8]
 8014f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f9e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8014fa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fa2:	699b      	ldr	r3, [r3, #24]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	d10a      	bne.n	8014fbe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8014fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fac:	f383 8811 	msr	BASEPRI, r3
 8014fb0:	f3bf 8f6f 	isb	sy
 8014fb4:	f3bf 8f4f 	dsb	sy
 8014fb8:	617b      	str	r3, [r7, #20]
}
 8014fba:	bf00      	nop
 8014fbc:	e7fe      	b.n	8014fbc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8014fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fc0:	699a      	ldr	r2, [r3, #24]
 8014fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fc4:	18d1      	adds	r1, r2, r3
 8014fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014fca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014fcc:	f7ff ff06 	bl	8014ddc <prvInsertTimerInActiveList>
					break;
 8014fd0:	e015      	b.n	8014ffe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8014fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014fd8:	f003 0302 	and.w	r3, r3, #2
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d103      	bne.n	8014fe8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8014fe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014fe2:	f000 fbdd 	bl	80157a0 <vPortFree>
 8014fe6:	e00a      	b.n	8014ffe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014fea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014fee:	f023 0301 	bic.w	r3, r3, #1
 8014ff2:	b2da      	uxtb	r2, r3
 8014ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ff6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014ffa:	e000      	b.n	8014ffe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014ffc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8014ffe:	4b08      	ldr	r3, [pc, #32]	; (8015020 <prvProcessReceivedCommands+0x1c0>)
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	1d39      	adds	r1, r7, #4
 8015004:	2200      	movs	r2, #0
 8015006:	4618      	mov	r0, r3
 8015008:	f7fd fdcc 	bl	8012ba4 <xQueueReceive>
 801500c:	4603      	mov	r3, r0
 801500e:	2b00      	cmp	r3, #0
 8015010:	f47f af2a 	bne.w	8014e68 <prvProcessReceivedCommands+0x8>
	}
}
 8015014:	bf00      	nop
 8015016:	bf00      	nop
 8015018:	3730      	adds	r7, #48	; 0x30
 801501a:	46bd      	mov	sp, r7
 801501c:	bd80      	pop	{r7, pc}
 801501e:	bf00      	nop
 8015020:	2000147c 	.word	0x2000147c

08015024 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015024:	b580      	push	{r7, lr}
 8015026:	b088      	sub	sp, #32
 8015028:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801502a:	e048      	b.n	80150be <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801502c:	4b2d      	ldr	r3, [pc, #180]	; (80150e4 <prvSwitchTimerLists+0xc0>)
 801502e:	681b      	ldr	r3, [r3, #0]
 8015030:	68db      	ldr	r3, [r3, #12]
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015036:	4b2b      	ldr	r3, [pc, #172]	; (80150e4 <prvSwitchTimerLists+0xc0>)
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	68db      	ldr	r3, [r3, #12]
 801503c:	68db      	ldr	r3, [r3, #12]
 801503e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	3304      	adds	r3, #4
 8015044:	4618      	mov	r0, r3
 8015046:	f7fd f9b5 	bl	80123b4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	6a1b      	ldr	r3, [r3, #32]
 801504e:	68f8      	ldr	r0, [r7, #12]
 8015050:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015058:	f003 0304 	and.w	r3, r3, #4
 801505c:	2b00      	cmp	r3, #0
 801505e:	d02e      	beq.n	80150be <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	699b      	ldr	r3, [r3, #24]
 8015064:	693a      	ldr	r2, [r7, #16]
 8015066:	4413      	add	r3, r2
 8015068:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801506a:	68ba      	ldr	r2, [r7, #8]
 801506c:	693b      	ldr	r3, [r7, #16]
 801506e:	429a      	cmp	r2, r3
 8015070:	d90e      	bls.n	8015090 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	68ba      	ldr	r2, [r7, #8]
 8015076:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	68fa      	ldr	r2, [r7, #12]
 801507c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801507e:	4b19      	ldr	r3, [pc, #100]	; (80150e4 <prvSwitchTimerLists+0xc0>)
 8015080:	681a      	ldr	r2, [r3, #0]
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	3304      	adds	r3, #4
 8015086:	4619      	mov	r1, r3
 8015088:	4610      	mov	r0, r2
 801508a:	f7fd f95a 	bl	8012342 <vListInsert>
 801508e:	e016      	b.n	80150be <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015090:	2300      	movs	r3, #0
 8015092:	9300      	str	r3, [sp, #0]
 8015094:	2300      	movs	r3, #0
 8015096:	693a      	ldr	r2, [r7, #16]
 8015098:	2100      	movs	r1, #0
 801509a:	68f8      	ldr	r0, [r7, #12]
 801509c:	f7ff fd60 	bl	8014b60 <xTimerGenericCommand>
 80150a0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	2b00      	cmp	r3, #0
 80150a6:	d10a      	bne.n	80150be <prvSwitchTimerLists+0x9a>
	__asm volatile
 80150a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150ac:	f383 8811 	msr	BASEPRI, r3
 80150b0:	f3bf 8f6f 	isb	sy
 80150b4:	f3bf 8f4f 	dsb	sy
 80150b8:	603b      	str	r3, [r7, #0]
}
 80150ba:	bf00      	nop
 80150bc:	e7fe      	b.n	80150bc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80150be:	4b09      	ldr	r3, [pc, #36]	; (80150e4 <prvSwitchTimerLists+0xc0>)
 80150c0:	681b      	ldr	r3, [r3, #0]
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	2b00      	cmp	r3, #0
 80150c6:	d1b1      	bne.n	801502c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80150c8:	4b06      	ldr	r3, [pc, #24]	; (80150e4 <prvSwitchTimerLists+0xc0>)
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80150ce:	4b06      	ldr	r3, [pc, #24]	; (80150e8 <prvSwitchTimerLists+0xc4>)
 80150d0:	681b      	ldr	r3, [r3, #0]
 80150d2:	4a04      	ldr	r2, [pc, #16]	; (80150e4 <prvSwitchTimerLists+0xc0>)
 80150d4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80150d6:	4a04      	ldr	r2, [pc, #16]	; (80150e8 <prvSwitchTimerLists+0xc4>)
 80150d8:	697b      	ldr	r3, [r7, #20]
 80150da:	6013      	str	r3, [r2, #0]
}
 80150dc:	bf00      	nop
 80150de:	3718      	adds	r7, #24
 80150e0:	46bd      	mov	sp, r7
 80150e2:	bd80      	pop	{r7, pc}
 80150e4:	20001474 	.word	0x20001474
 80150e8:	20001478 	.word	0x20001478

080150ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b082      	sub	sp, #8
 80150f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80150f2:	f000 f967 	bl	80153c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80150f6:	4b15      	ldr	r3, [pc, #84]	; (801514c <prvCheckForValidListAndQueue+0x60>)
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	2b00      	cmp	r3, #0
 80150fc:	d120      	bne.n	8015140 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80150fe:	4814      	ldr	r0, [pc, #80]	; (8015150 <prvCheckForValidListAndQueue+0x64>)
 8015100:	f7fd f8ce 	bl	80122a0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015104:	4813      	ldr	r0, [pc, #76]	; (8015154 <prvCheckForValidListAndQueue+0x68>)
 8015106:	f7fd f8cb 	bl	80122a0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801510a:	4b13      	ldr	r3, [pc, #76]	; (8015158 <prvCheckForValidListAndQueue+0x6c>)
 801510c:	4a10      	ldr	r2, [pc, #64]	; (8015150 <prvCheckForValidListAndQueue+0x64>)
 801510e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015110:	4b12      	ldr	r3, [pc, #72]	; (801515c <prvCheckForValidListAndQueue+0x70>)
 8015112:	4a10      	ldr	r2, [pc, #64]	; (8015154 <prvCheckForValidListAndQueue+0x68>)
 8015114:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015116:	2300      	movs	r3, #0
 8015118:	9300      	str	r3, [sp, #0]
 801511a:	4b11      	ldr	r3, [pc, #68]	; (8015160 <prvCheckForValidListAndQueue+0x74>)
 801511c:	4a11      	ldr	r2, [pc, #68]	; (8015164 <prvCheckForValidListAndQueue+0x78>)
 801511e:	2110      	movs	r1, #16
 8015120:	200a      	movs	r0, #10
 8015122:	f7fd f9d9 	bl	80124d8 <xQueueGenericCreateStatic>
 8015126:	4603      	mov	r3, r0
 8015128:	4a08      	ldr	r2, [pc, #32]	; (801514c <prvCheckForValidListAndQueue+0x60>)
 801512a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801512c:	4b07      	ldr	r3, [pc, #28]	; (801514c <prvCheckForValidListAndQueue+0x60>)
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d005      	beq.n	8015140 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015134:	4b05      	ldr	r3, [pc, #20]	; (801514c <prvCheckForValidListAndQueue+0x60>)
 8015136:	681b      	ldr	r3, [r3, #0]
 8015138:	490b      	ldr	r1, [pc, #44]	; (8015168 <prvCheckForValidListAndQueue+0x7c>)
 801513a:	4618      	mov	r0, r3
 801513c:	f7fe f8ea 	bl	8013314 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015140:	f000 f970 	bl	8015424 <vPortExitCritical>
}
 8015144:	bf00      	nop
 8015146:	46bd      	mov	sp, r7
 8015148:	bd80      	pop	{r7, pc}
 801514a:	bf00      	nop
 801514c:	2000147c 	.word	0x2000147c
 8015150:	2000144c 	.word	0x2000144c
 8015154:	20001460 	.word	0x20001460
 8015158:	20001474 	.word	0x20001474
 801515c:	20001478 	.word	0x20001478
 8015160:	20001528 	.word	0x20001528
 8015164:	20001488 	.word	0x20001488
 8015168:	08019a90 	.word	0x08019a90

0801516c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801516c:	b480      	push	{r7}
 801516e:	b085      	sub	sp, #20
 8015170:	af00      	add	r7, sp, #0
 8015172:	60f8      	str	r0, [r7, #12]
 8015174:	60b9      	str	r1, [r7, #8]
 8015176:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	3b04      	subs	r3, #4
 801517c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015184:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	3b04      	subs	r3, #4
 801518a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801518c:	68bb      	ldr	r3, [r7, #8]
 801518e:	f023 0201 	bic.w	r2, r3, #1
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	3b04      	subs	r3, #4
 801519a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801519c:	4a0c      	ldr	r2, [pc, #48]	; (80151d0 <pxPortInitialiseStack+0x64>)
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	3b14      	subs	r3, #20
 80151a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80151a8:	687a      	ldr	r2, [r7, #4]
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80151ae:	68fb      	ldr	r3, [r7, #12]
 80151b0:	3b04      	subs	r3, #4
 80151b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80151b4:	68fb      	ldr	r3, [r7, #12]
 80151b6:	f06f 0202 	mvn.w	r2, #2
 80151ba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	3b20      	subs	r3, #32
 80151c0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80151c2:	68fb      	ldr	r3, [r7, #12]
}
 80151c4:	4618      	mov	r0, r3
 80151c6:	3714      	adds	r7, #20
 80151c8:	46bd      	mov	sp, r7
 80151ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ce:	4770      	bx	lr
 80151d0:	080151d5 	.word	0x080151d5

080151d4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80151d4:	b480      	push	{r7}
 80151d6:	b085      	sub	sp, #20
 80151d8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80151da:	2300      	movs	r3, #0
 80151dc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80151de:	4b12      	ldr	r3, [pc, #72]	; (8015228 <prvTaskExitError+0x54>)
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80151e6:	d00a      	beq.n	80151fe <prvTaskExitError+0x2a>
	__asm volatile
 80151e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151ec:	f383 8811 	msr	BASEPRI, r3
 80151f0:	f3bf 8f6f 	isb	sy
 80151f4:	f3bf 8f4f 	dsb	sy
 80151f8:	60fb      	str	r3, [r7, #12]
}
 80151fa:	bf00      	nop
 80151fc:	e7fe      	b.n	80151fc <prvTaskExitError+0x28>
	__asm volatile
 80151fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015202:	f383 8811 	msr	BASEPRI, r3
 8015206:	f3bf 8f6f 	isb	sy
 801520a:	f3bf 8f4f 	dsb	sy
 801520e:	60bb      	str	r3, [r7, #8]
}
 8015210:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015212:	bf00      	nop
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	2b00      	cmp	r3, #0
 8015218:	d0fc      	beq.n	8015214 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801521a:	bf00      	nop
 801521c:	bf00      	nop
 801521e:	3714      	adds	r7, #20
 8015220:	46bd      	mov	sp, r7
 8015222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015226:	4770      	bx	lr
 8015228:	20000138 	.word	0x20000138
 801522c:	00000000 	.word	0x00000000

08015230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015230:	4b07      	ldr	r3, [pc, #28]	; (8015250 <pxCurrentTCBConst2>)
 8015232:	6819      	ldr	r1, [r3, #0]
 8015234:	6808      	ldr	r0, [r1, #0]
 8015236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801523a:	f380 8809 	msr	PSP, r0
 801523e:	f3bf 8f6f 	isb	sy
 8015242:	f04f 0000 	mov.w	r0, #0
 8015246:	f380 8811 	msr	BASEPRI, r0
 801524a:	4770      	bx	lr
 801524c:	f3af 8000 	nop.w

08015250 <pxCurrentTCBConst2>:
 8015250:	20000f44 	.word	0x20000f44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015254:	bf00      	nop
 8015256:	bf00      	nop

08015258 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015258:	4808      	ldr	r0, [pc, #32]	; (801527c <prvPortStartFirstTask+0x24>)
 801525a:	6800      	ldr	r0, [r0, #0]
 801525c:	6800      	ldr	r0, [r0, #0]
 801525e:	f380 8808 	msr	MSP, r0
 8015262:	f04f 0000 	mov.w	r0, #0
 8015266:	f380 8814 	msr	CONTROL, r0
 801526a:	b662      	cpsie	i
 801526c:	b661      	cpsie	f
 801526e:	f3bf 8f4f 	dsb	sy
 8015272:	f3bf 8f6f 	isb	sy
 8015276:	df00      	svc	0
 8015278:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801527a:	bf00      	nop
 801527c:	e000ed08 	.word	0xe000ed08

08015280 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b086      	sub	sp, #24
 8015284:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015286:	4b46      	ldr	r3, [pc, #280]	; (80153a0 <xPortStartScheduler+0x120>)
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	4a46      	ldr	r2, [pc, #280]	; (80153a4 <xPortStartScheduler+0x124>)
 801528c:	4293      	cmp	r3, r2
 801528e:	d10a      	bne.n	80152a6 <xPortStartScheduler+0x26>
	__asm volatile
 8015290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015294:	f383 8811 	msr	BASEPRI, r3
 8015298:	f3bf 8f6f 	isb	sy
 801529c:	f3bf 8f4f 	dsb	sy
 80152a0:	613b      	str	r3, [r7, #16]
}
 80152a2:	bf00      	nop
 80152a4:	e7fe      	b.n	80152a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80152a6:	4b3e      	ldr	r3, [pc, #248]	; (80153a0 <xPortStartScheduler+0x120>)
 80152a8:	681b      	ldr	r3, [r3, #0]
 80152aa:	4a3f      	ldr	r2, [pc, #252]	; (80153a8 <xPortStartScheduler+0x128>)
 80152ac:	4293      	cmp	r3, r2
 80152ae:	d10a      	bne.n	80152c6 <xPortStartScheduler+0x46>
	__asm volatile
 80152b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152b4:	f383 8811 	msr	BASEPRI, r3
 80152b8:	f3bf 8f6f 	isb	sy
 80152bc:	f3bf 8f4f 	dsb	sy
 80152c0:	60fb      	str	r3, [r7, #12]
}
 80152c2:	bf00      	nop
 80152c4:	e7fe      	b.n	80152c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80152c6:	4b39      	ldr	r3, [pc, #228]	; (80153ac <xPortStartScheduler+0x12c>)
 80152c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80152ca:	697b      	ldr	r3, [r7, #20]
 80152cc:	781b      	ldrb	r3, [r3, #0]
 80152ce:	b2db      	uxtb	r3, r3
 80152d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80152d2:	697b      	ldr	r3, [r7, #20]
 80152d4:	22ff      	movs	r2, #255	; 0xff
 80152d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80152d8:	697b      	ldr	r3, [r7, #20]
 80152da:	781b      	ldrb	r3, [r3, #0]
 80152dc:	b2db      	uxtb	r3, r3
 80152de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80152e0:	78fb      	ldrb	r3, [r7, #3]
 80152e2:	b2db      	uxtb	r3, r3
 80152e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80152e8:	b2da      	uxtb	r2, r3
 80152ea:	4b31      	ldr	r3, [pc, #196]	; (80153b0 <xPortStartScheduler+0x130>)
 80152ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80152ee:	4b31      	ldr	r3, [pc, #196]	; (80153b4 <xPortStartScheduler+0x134>)
 80152f0:	2207      	movs	r2, #7
 80152f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80152f4:	e009      	b.n	801530a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80152f6:	4b2f      	ldr	r3, [pc, #188]	; (80153b4 <xPortStartScheduler+0x134>)
 80152f8:	681b      	ldr	r3, [r3, #0]
 80152fa:	3b01      	subs	r3, #1
 80152fc:	4a2d      	ldr	r2, [pc, #180]	; (80153b4 <xPortStartScheduler+0x134>)
 80152fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015300:	78fb      	ldrb	r3, [r7, #3]
 8015302:	b2db      	uxtb	r3, r3
 8015304:	005b      	lsls	r3, r3, #1
 8015306:	b2db      	uxtb	r3, r3
 8015308:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801530a:	78fb      	ldrb	r3, [r7, #3]
 801530c:	b2db      	uxtb	r3, r3
 801530e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015312:	2b80      	cmp	r3, #128	; 0x80
 8015314:	d0ef      	beq.n	80152f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015316:	4b27      	ldr	r3, [pc, #156]	; (80153b4 <xPortStartScheduler+0x134>)
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	f1c3 0307 	rsb	r3, r3, #7
 801531e:	2b04      	cmp	r3, #4
 8015320:	d00a      	beq.n	8015338 <xPortStartScheduler+0xb8>
	__asm volatile
 8015322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015326:	f383 8811 	msr	BASEPRI, r3
 801532a:	f3bf 8f6f 	isb	sy
 801532e:	f3bf 8f4f 	dsb	sy
 8015332:	60bb      	str	r3, [r7, #8]
}
 8015334:	bf00      	nop
 8015336:	e7fe      	b.n	8015336 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015338:	4b1e      	ldr	r3, [pc, #120]	; (80153b4 <xPortStartScheduler+0x134>)
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	021b      	lsls	r3, r3, #8
 801533e:	4a1d      	ldr	r2, [pc, #116]	; (80153b4 <xPortStartScheduler+0x134>)
 8015340:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015342:	4b1c      	ldr	r3, [pc, #112]	; (80153b4 <xPortStartScheduler+0x134>)
 8015344:	681b      	ldr	r3, [r3, #0]
 8015346:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801534a:	4a1a      	ldr	r2, [pc, #104]	; (80153b4 <xPortStartScheduler+0x134>)
 801534c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	b2da      	uxtb	r2, r3
 8015352:	697b      	ldr	r3, [r7, #20]
 8015354:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015356:	4b18      	ldr	r3, [pc, #96]	; (80153b8 <xPortStartScheduler+0x138>)
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	4a17      	ldr	r2, [pc, #92]	; (80153b8 <xPortStartScheduler+0x138>)
 801535c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015360:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015362:	4b15      	ldr	r3, [pc, #84]	; (80153b8 <xPortStartScheduler+0x138>)
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	4a14      	ldr	r2, [pc, #80]	; (80153b8 <xPortStartScheduler+0x138>)
 8015368:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801536c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801536e:	f000 f8dd 	bl	801552c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015372:	4b12      	ldr	r3, [pc, #72]	; (80153bc <xPortStartScheduler+0x13c>)
 8015374:	2200      	movs	r2, #0
 8015376:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015378:	f000 f8fc 	bl	8015574 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801537c:	4b10      	ldr	r3, [pc, #64]	; (80153c0 <xPortStartScheduler+0x140>)
 801537e:	681b      	ldr	r3, [r3, #0]
 8015380:	4a0f      	ldr	r2, [pc, #60]	; (80153c0 <xPortStartScheduler+0x140>)
 8015382:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015386:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015388:	f7ff ff66 	bl	8015258 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801538c:	f7fe fd1a 	bl	8013dc4 <vTaskSwitchContext>
	prvTaskExitError();
 8015390:	f7ff ff20 	bl	80151d4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015394:	2300      	movs	r3, #0
}
 8015396:	4618      	mov	r0, r3
 8015398:	3718      	adds	r7, #24
 801539a:	46bd      	mov	sp, r7
 801539c:	bd80      	pop	{r7, pc}
 801539e:	bf00      	nop
 80153a0:	e000ed00 	.word	0xe000ed00
 80153a4:	410fc271 	.word	0x410fc271
 80153a8:	410fc270 	.word	0x410fc270
 80153ac:	e000e400 	.word	0xe000e400
 80153b0:	20001578 	.word	0x20001578
 80153b4:	2000157c 	.word	0x2000157c
 80153b8:	e000ed20 	.word	0xe000ed20
 80153bc:	20000138 	.word	0x20000138
 80153c0:	e000ef34 	.word	0xe000ef34

080153c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80153c4:	b480      	push	{r7}
 80153c6:	b083      	sub	sp, #12
 80153c8:	af00      	add	r7, sp, #0
	__asm volatile
 80153ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153ce:	f383 8811 	msr	BASEPRI, r3
 80153d2:	f3bf 8f6f 	isb	sy
 80153d6:	f3bf 8f4f 	dsb	sy
 80153da:	607b      	str	r3, [r7, #4]
}
 80153dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80153de:	4b0f      	ldr	r3, [pc, #60]	; (801541c <vPortEnterCritical+0x58>)
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	3301      	adds	r3, #1
 80153e4:	4a0d      	ldr	r2, [pc, #52]	; (801541c <vPortEnterCritical+0x58>)
 80153e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80153e8:	4b0c      	ldr	r3, [pc, #48]	; (801541c <vPortEnterCritical+0x58>)
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	2b01      	cmp	r3, #1
 80153ee:	d10f      	bne.n	8015410 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80153f0:	4b0b      	ldr	r3, [pc, #44]	; (8015420 <vPortEnterCritical+0x5c>)
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	b2db      	uxtb	r3, r3
 80153f6:	2b00      	cmp	r3, #0
 80153f8:	d00a      	beq.n	8015410 <vPortEnterCritical+0x4c>
	__asm volatile
 80153fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153fe:	f383 8811 	msr	BASEPRI, r3
 8015402:	f3bf 8f6f 	isb	sy
 8015406:	f3bf 8f4f 	dsb	sy
 801540a:	603b      	str	r3, [r7, #0]
}
 801540c:	bf00      	nop
 801540e:	e7fe      	b.n	801540e <vPortEnterCritical+0x4a>
	}
}
 8015410:	bf00      	nop
 8015412:	370c      	adds	r7, #12
 8015414:	46bd      	mov	sp, r7
 8015416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801541a:	4770      	bx	lr
 801541c:	20000138 	.word	0x20000138
 8015420:	e000ed04 	.word	0xe000ed04

08015424 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015424:	b480      	push	{r7}
 8015426:	b083      	sub	sp, #12
 8015428:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801542a:	4b12      	ldr	r3, [pc, #72]	; (8015474 <vPortExitCritical+0x50>)
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	2b00      	cmp	r3, #0
 8015430:	d10a      	bne.n	8015448 <vPortExitCritical+0x24>
	__asm volatile
 8015432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015436:	f383 8811 	msr	BASEPRI, r3
 801543a:	f3bf 8f6f 	isb	sy
 801543e:	f3bf 8f4f 	dsb	sy
 8015442:	607b      	str	r3, [r7, #4]
}
 8015444:	bf00      	nop
 8015446:	e7fe      	b.n	8015446 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015448:	4b0a      	ldr	r3, [pc, #40]	; (8015474 <vPortExitCritical+0x50>)
 801544a:	681b      	ldr	r3, [r3, #0]
 801544c:	3b01      	subs	r3, #1
 801544e:	4a09      	ldr	r2, [pc, #36]	; (8015474 <vPortExitCritical+0x50>)
 8015450:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015452:	4b08      	ldr	r3, [pc, #32]	; (8015474 <vPortExitCritical+0x50>)
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	2b00      	cmp	r3, #0
 8015458:	d105      	bne.n	8015466 <vPortExitCritical+0x42>
 801545a:	2300      	movs	r3, #0
 801545c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801545e:	683b      	ldr	r3, [r7, #0]
 8015460:	f383 8811 	msr	BASEPRI, r3
}
 8015464:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015466:	bf00      	nop
 8015468:	370c      	adds	r7, #12
 801546a:	46bd      	mov	sp, r7
 801546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015470:	4770      	bx	lr
 8015472:	bf00      	nop
 8015474:	20000138 	.word	0x20000138
	...

08015480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015480:	f3ef 8009 	mrs	r0, PSP
 8015484:	f3bf 8f6f 	isb	sy
 8015488:	4b15      	ldr	r3, [pc, #84]	; (80154e0 <pxCurrentTCBConst>)
 801548a:	681a      	ldr	r2, [r3, #0]
 801548c:	f01e 0f10 	tst.w	lr, #16
 8015490:	bf08      	it	eq
 8015492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801549a:	6010      	str	r0, [r2, #0]
 801549c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80154a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80154a4:	f380 8811 	msr	BASEPRI, r0
 80154a8:	f3bf 8f4f 	dsb	sy
 80154ac:	f3bf 8f6f 	isb	sy
 80154b0:	f7fe fc88 	bl	8013dc4 <vTaskSwitchContext>
 80154b4:	f04f 0000 	mov.w	r0, #0
 80154b8:	f380 8811 	msr	BASEPRI, r0
 80154bc:	bc09      	pop	{r0, r3}
 80154be:	6819      	ldr	r1, [r3, #0]
 80154c0:	6808      	ldr	r0, [r1, #0]
 80154c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154c6:	f01e 0f10 	tst.w	lr, #16
 80154ca:	bf08      	it	eq
 80154cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80154d0:	f380 8809 	msr	PSP, r0
 80154d4:	f3bf 8f6f 	isb	sy
 80154d8:	4770      	bx	lr
 80154da:	bf00      	nop
 80154dc:	f3af 8000 	nop.w

080154e0 <pxCurrentTCBConst>:
 80154e0:	20000f44 	.word	0x20000f44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80154e4:	bf00      	nop
 80154e6:	bf00      	nop

080154e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b082      	sub	sp, #8
 80154ec:	af00      	add	r7, sp, #0
	__asm volatile
 80154ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154f2:	f383 8811 	msr	BASEPRI, r3
 80154f6:	f3bf 8f6f 	isb	sy
 80154fa:	f3bf 8f4f 	dsb	sy
 80154fe:	607b      	str	r3, [r7, #4]
}
 8015500:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015502:	f7fe fba5 	bl	8013c50 <xTaskIncrementTick>
 8015506:	4603      	mov	r3, r0
 8015508:	2b00      	cmp	r3, #0
 801550a:	d003      	beq.n	8015514 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801550c:	4b06      	ldr	r3, [pc, #24]	; (8015528 <xPortSysTickHandler+0x40>)
 801550e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015512:	601a      	str	r2, [r3, #0]
 8015514:	2300      	movs	r3, #0
 8015516:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015518:	683b      	ldr	r3, [r7, #0]
 801551a:	f383 8811 	msr	BASEPRI, r3
}
 801551e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015520:	bf00      	nop
 8015522:	3708      	adds	r7, #8
 8015524:	46bd      	mov	sp, r7
 8015526:	bd80      	pop	{r7, pc}
 8015528:	e000ed04 	.word	0xe000ed04

0801552c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801552c:	b480      	push	{r7}
 801552e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015530:	4b0b      	ldr	r3, [pc, #44]	; (8015560 <vPortSetupTimerInterrupt+0x34>)
 8015532:	2200      	movs	r2, #0
 8015534:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015536:	4b0b      	ldr	r3, [pc, #44]	; (8015564 <vPortSetupTimerInterrupt+0x38>)
 8015538:	2200      	movs	r2, #0
 801553a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801553c:	4b0a      	ldr	r3, [pc, #40]	; (8015568 <vPortSetupTimerInterrupt+0x3c>)
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	4a0a      	ldr	r2, [pc, #40]	; (801556c <vPortSetupTimerInterrupt+0x40>)
 8015542:	fba2 2303 	umull	r2, r3, r2, r3
 8015546:	099b      	lsrs	r3, r3, #6
 8015548:	4a09      	ldr	r2, [pc, #36]	; (8015570 <vPortSetupTimerInterrupt+0x44>)
 801554a:	3b01      	subs	r3, #1
 801554c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801554e:	4b04      	ldr	r3, [pc, #16]	; (8015560 <vPortSetupTimerInterrupt+0x34>)
 8015550:	2207      	movs	r2, #7
 8015552:	601a      	str	r2, [r3, #0]
}
 8015554:	bf00      	nop
 8015556:	46bd      	mov	sp, r7
 8015558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801555c:	4770      	bx	lr
 801555e:	bf00      	nop
 8015560:	e000e010 	.word	0xe000e010
 8015564:	e000e018 	.word	0xe000e018
 8015568:	20000004 	.word	0x20000004
 801556c:	10624dd3 	.word	0x10624dd3
 8015570:	e000e014 	.word	0xe000e014

08015574 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015574:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015584 <vPortEnableVFP+0x10>
 8015578:	6801      	ldr	r1, [r0, #0]
 801557a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801557e:	6001      	str	r1, [r0, #0]
 8015580:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015582:	bf00      	nop
 8015584:	e000ed88 	.word	0xe000ed88

08015588 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015588:	b480      	push	{r7}
 801558a:	b085      	sub	sp, #20
 801558c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801558e:	f3ef 8305 	mrs	r3, IPSR
 8015592:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	2b0f      	cmp	r3, #15
 8015598:	d914      	bls.n	80155c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801559a:	4a17      	ldr	r2, [pc, #92]	; (80155f8 <vPortValidateInterruptPriority+0x70>)
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	4413      	add	r3, r2
 80155a0:	781b      	ldrb	r3, [r3, #0]
 80155a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80155a4:	4b15      	ldr	r3, [pc, #84]	; (80155fc <vPortValidateInterruptPriority+0x74>)
 80155a6:	781b      	ldrb	r3, [r3, #0]
 80155a8:	7afa      	ldrb	r2, [r7, #11]
 80155aa:	429a      	cmp	r2, r3
 80155ac:	d20a      	bcs.n	80155c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80155ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155b2:	f383 8811 	msr	BASEPRI, r3
 80155b6:	f3bf 8f6f 	isb	sy
 80155ba:	f3bf 8f4f 	dsb	sy
 80155be:	607b      	str	r3, [r7, #4]
}
 80155c0:	bf00      	nop
 80155c2:	e7fe      	b.n	80155c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80155c4:	4b0e      	ldr	r3, [pc, #56]	; (8015600 <vPortValidateInterruptPriority+0x78>)
 80155c6:	681b      	ldr	r3, [r3, #0]
 80155c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80155cc:	4b0d      	ldr	r3, [pc, #52]	; (8015604 <vPortValidateInterruptPriority+0x7c>)
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	429a      	cmp	r2, r3
 80155d2:	d90a      	bls.n	80155ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80155d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155d8:	f383 8811 	msr	BASEPRI, r3
 80155dc:	f3bf 8f6f 	isb	sy
 80155e0:	f3bf 8f4f 	dsb	sy
 80155e4:	603b      	str	r3, [r7, #0]
}
 80155e6:	bf00      	nop
 80155e8:	e7fe      	b.n	80155e8 <vPortValidateInterruptPriority+0x60>
	}
 80155ea:	bf00      	nop
 80155ec:	3714      	adds	r7, #20
 80155ee:	46bd      	mov	sp, r7
 80155f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f4:	4770      	bx	lr
 80155f6:	bf00      	nop
 80155f8:	e000e3f0 	.word	0xe000e3f0
 80155fc:	20001578 	.word	0x20001578
 8015600:	e000ed0c 	.word	0xe000ed0c
 8015604:	2000157c 	.word	0x2000157c

08015608 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015608:	b580      	push	{r7, lr}
 801560a:	b08a      	sub	sp, #40	; 0x28
 801560c:	af00      	add	r7, sp, #0
 801560e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015610:	2300      	movs	r3, #0
 8015612:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015614:	f7fe f9d0 	bl	80139b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015618:	4b5b      	ldr	r3, [pc, #364]	; (8015788 <pvPortMalloc+0x180>)
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	2b00      	cmp	r3, #0
 801561e:	d101      	bne.n	8015624 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015620:	f000 f92c 	bl	801587c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015624:	4b59      	ldr	r3, [pc, #356]	; (801578c <pvPortMalloc+0x184>)
 8015626:	681a      	ldr	r2, [r3, #0]
 8015628:	687b      	ldr	r3, [r7, #4]
 801562a:	4013      	ands	r3, r2
 801562c:	2b00      	cmp	r3, #0
 801562e:	f040 8093 	bne.w	8015758 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	2b00      	cmp	r3, #0
 8015636:	d01d      	beq.n	8015674 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015638:	2208      	movs	r2, #8
 801563a:	687b      	ldr	r3, [r7, #4]
 801563c:	4413      	add	r3, r2
 801563e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	f003 0307 	and.w	r3, r3, #7
 8015646:	2b00      	cmp	r3, #0
 8015648:	d014      	beq.n	8015674 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	f023 0307 	bic.w	r3, r3, #7
 8015650:	3308      	adds	r3, #8
 8015652:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015654:	687b      	ldr	r3, [r7, #4]
 8015656:	f003 0307 	and.w	r3, r3, #7
 801565a:	2b00      	cmp	r3, #0
 801565c:	d00a      	beq.n	8015674 <pvPortMalloc+0x6c>
	__asm volatile
 801565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015662:	f383 8811 	msr	BASEPRI, r3
 8015666:	f3bf 8f6f 	isb	sy
 801566a:	f3bf 8f4f 	dsb	sy
 801566e:	617b      	str	r3, [r7, #20]
}
 8015670:	bf00      	nop
 8015672:	e7fe      	b.n	8015672 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	2b00      	cmp	r3, #0
 8015678:	d06e      	beq.n	8015758 <pvPortMalloc+0x150>
 801567a:	4b45      	ldr	r3, [pc, #276]	; (8015790 <pvPortMalloc+0x188>)
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	687a      	ldr	r2, [r7, #4]
 8015680:	429a      	cmp	r2, r3
 8015682:	d869      	bhi.n	8015758 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015684:	4b43      	ldr	r3, [pc, #268]	; (8015794 <pvPortMalloc+0x18c>)
 8015686:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015688:	4b42      	ldr	r3, [pc, #264]	; (8015794 <pvPortMalloc+0x18c>)
 801568a:	681b      	ldr	r3, [r3, #0]
 801568c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801568e:	e004      	b.n	801569a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015692:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801569c:	685b      	ldr	r3, [r3, #4]
 801569e:	687a      	ldr	r2, [r7, #4]
 80156a0:	429a      	cmp	r2, r3
 80156a2:	d903      	bls.n	80156ac <pvPortMalloc+0xa4>
 80156a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	2b00      	cmp	r3, #0
 80156aa:	d1f1      	bne.n	8015690 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80156ac:	4b36      	ldr	r3, [pc, #216]	; (8015788 <pvPortMalloc+0x180>)
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156b2:	429a      	cmp	r2, r3
 80156b4:	d050      	beq.n	8015758 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80156b6:	6a3b      	ldr	r3, [r7, #32]
 80156b8:	681b      	ldr	r3, [r3, #0]
 80156ba:	2208      	movs	r2, #8
 80156bc:	4413      	add	r3, r2
 80156be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80156c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156c2:	681a      	ldr	r2, [r3, #0]
 80156c4:	6a3b      	ldr	r3, [r7, #32]
 80156c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80156c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ca:	685a      	ldr	r2, [r3, #4]
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	1ad2      	subs	r2, r2, r3
 80156d0:	2308      	movs	r3, #8
 80156d2:	005b      	lsls	r3, r3, #1
 80156d4:	429a      	cmp	r2, r3
 80156d6:	d91f      	bls.n	8015718 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80156d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	4413      	add	r3, r2
 80156de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80156e0:	69bb      	ldr	r3, [r7, #24]
 80156e2:	f003 0307 	and.w	r3, r3, #7
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d00a      	beq.n	8015700 <pvPortMalloc+0xf8>
	__asm volatile
 80156ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156ee:	f383 8811 	msr	BASEPRI, r3
 80156f2:	f3bf 8f6f 	isb	sy
 80156f6:	f3bf 8f4f 	dsb	sy
 80156fa:	613b      	str	r3, [r7, #16]
}
 80156fc:	bf00      	nop
 80156fe:	e7fe      	b.n	80156fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015702:	685a      	ldr	r2, [r3, #4]
 8015704:	687b      	ldr	r3, [r7, #4]
 8015706:	1ad2      	subs	r2, r2, r3
 8015708:	69bb      	ldr	r3, [r7, #24]
 801570a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801570c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801570e:	687a      	ldr	r2, [r7, #4]
 8015710:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015712:	69b8      	ldr	r0, [r7, #24]
 8015714:	f000 f914 	bl	8015940 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015718:	4b1d      	ldr	r3, [pc, #116]	; (8015790 <pvPortMalloc+0x188>)
 801571a:	681a      	ldr	r2, [r3, #0]
 801571c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801571e:	685b      	ldr	r3, [r3, #4]
 8015720:	1ad3      	subs	r3, r2, r3
 8015722:	4a1b      	ldr	r2, [pc, #108]	; (8015790 <pvPortMalloc+0x188>)
 8015724:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015726:	4b1a      	ldr	r3, [pc, #104]	; (8015790 <pvPortMalloc+0x188>)
 8015728:	681a      	ldr	r2, [r3, #0]
 801572a:	4b1b      	ldr	r3, [pc, #108]	; (8015798 <pvPortMalloc+0x190>)
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	429a      	cmp	r2, r3
 8015730:	d203      	bcs.n	801573a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015732:	4b17      	ldr	r3, [pc, #92]	; (8015790 <pvPortMalloc+0x188>)
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	4a18      	ldr	r2, [pc, #96]	; (8015798 <pvPortMalloc+0x190>)
 8015738:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801573a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801573c:	685a      	ldr	r2, [r3, #4]
 801573e:	4b13      	ldr	r3, [pc, #76]	; (801578c <pvPortMalloc+0x184>)
 8015740:	681b      	ldr	r3, [r3, #0]
 8015742:	431a      	orrs	r2, r3
 8015744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015746:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801574a:	2200      	movs	r2, #0
 801574c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801574e:	4b13      	ldr	r3, [pc, #76]	; (801579c <pvPortMalloc+0x194>)
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	3301      	adds	r3, #1
 8015754:	4a11      	ldr	r2, [pc, #68]	; (801579c <pvPortMalloc+0x194>)
 8015756:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015758:	f7fe f93c 	bl	80139d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801575c:	69fb      	ldr	r3, [r7, #28]
 801575e:	f003 0307 	and.w	r3, r3, #7
 8015762:	2b00      	cmp	r3, #0
 8015764:	d00a      	beq.n	801577c <pvPortMalloc+0x174>
	__asm volatile
 8015766:	f04f 0350 	mov.w	r3, #80	; 0x50
 801576a:	f383 8811 	msr	BASEPRI, r3
 801576e:	f3bf 8f6f 	isb	sy
 8015772:	f3bf 8f4f 	dsb	sy
 8015776:	60fb      	str	r3, [r7, #12]
}
 8015778:	bf00      	nop
 801577a:	e7fe      	b.n	801577a <pvPortMalloc+0x172>
	return pvReturn;
 801577c:	69fb      	ldr	r3, [r7, #28]
}
 801577e:	4618      	mov	r0, r3
 8015780:	3728      	adds	r7, #40	; 0x28
 8015782:	46bd      	mov	sp, r7
 8015784:	bd80      	pop	{r7, pc}
 8015786:	bf00      	nop
 8015788:	20005bd8 	.word	0x20005bd8
 801578c:	20005bec 	.word	0x20005bec
 8015790:	20005bdc 	.word	0x20005bdc
 8015794:	20005bd0 	.word	0x20005bd0
 8015798:	20005be0 	.word	0x20005be0
 801579c:	20005be4 	.word	0x20005be4

080157a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	b086      	sub	sp, #24
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80157a8:	687b      	ldr	r3, [r7, #4]
 80157aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80157ac:	687b      	ldr	r3, [r7, #4]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	d04d      	beq.n	801584e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80157b2:	2308      	movs	r3, #8
 80157b4:	425b      	negs	r3, r3
 80157b6:	697a      	ldr	r2, [r7, #20]
 80157b8:	4413      	add	r3, r2
 80157ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80157bc:	697b      	ldr	r3, [r7, #20]
 80157be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80157c0:	693b      	ldr	r3, [r7, #16]
 80157c2:	685a      	ldr	r2, [r3, #4]
 80157c4:	4b24      	ldr	r3, [pc, #144]	; (8015858 <vPortFree+0xb8>)
 80157c6:	681b      	ldr	r3, [r3, #0]
 80157c8:	4013      	ands	r3, r2
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d10a      	bne.n	80157e4 <vPortFree+0x44>
	__asm volatile
 80157ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157d2:	f383 8811 	msr	BASEPRI, r3
 80157d6:	f3bf 8f6f 	isb	sy
 80157da:	f3bf 8f4f 	dsb	sy
 80157de:	60fb      	str	r3, [r7, #12]
}
 80157e0:	bf00      	nop
 80157e2:	e7fe      	b.n	80157e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80157e4:	693b      	ldr	r3, [r7, #16]
 80157e6:	681b      	ldr	r3, [r3, #0]
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d00a      	beq.n	8015802 <vPortFree+0x62>
	__asm volatile
 80157ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157f0:	f383 8811 	msr	BASEPRI, r3
 80157f4:	f3bf 8f6f 	isb	sy
 80157f8:	f3bf 8f4f 	dsb	sy
 80157fc:	60bb      	str	r3, [r7, #8]
}
 80157fe:	bf00      	nop
 8015800:	e7fe      	b.n	8015800 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015802:	693b      	ldr	r3, [r7, #16]
 8015804:	685a      	ldr	r2, [r3, #4]
 8015806:	4b14      	ldr	r3, [pc, #80]	; (8015858 <vPortFree+0xb8>)
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	4013      	ands	r3, r2
 801580c:	2b00      	cmp	r3, #0
 801580e:	d01e      	beq.n	801584e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015810:	693b      	ldr	r3, [r7, #16]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	2b00      	cmp	r3, #0
 8015816:	d11a      	bne.n	801584e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015818:	693b      	ldr	r3, [r7, #16]
 801581a:	685a      	ldr	r2, [r3, #4]
 801581c:	4b0e      	ldr	r3, [pc, #56]	; (8015858 <vPortFree+0xb8>)
 801581e:	681b      	ldr	r3, [r3, #0]
 8015820:	43db      	mvns	r3, r3
 8015822:	401a      	ands	r2, r3
 8015824:	693b      	ldr	r3, [r7, #16]
 8015826:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015828:	f7fe f8c6 	bl	80139b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801582c:	693b      	ldr	r3, [r7, #16]
 801582e:	685a      	ldr	r2, [r3, #4]
 8015830:	4b0a      	ldr	r3, [pc, #40]	; (801585c <vPortFree+0xbc>)
 8015832:	681b      	ldr	r3, [r3, #0]
 8015834:	4413      	add	r3, r2
 8015836:	4a09      	ldr	r2, [pc, #36]	; (801585c <vPortFree+0xbc>)
 8015838:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801583a:	6938      	ldr	r0, [r7, #16]
 801583c:	f000 f880 	bl	8015940 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015840:	4b07      	ldr	r3, [pc, #28]	; (8015860 <vPortFree+0xc0>)
 8015842:	681b      	ldr	r3, [r3, #0]
 8015844:	3301      	adds	r3, #1
 8015846:	4a06      	ldr	r2, [pc, #24]	; (8015860 <vPortFree+0xc0>)
 8015848:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801584a:	f7fe f8c3 	bl	80139d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801584e:	bf00      	nop
 8015850:	3718      	adds	r7, #24
 8015852:	46bd      	mov	sp, r7
 8015854:	bd80      	pop	{r7, pc}
 8015856:	bf00      	nop
 8015858:	20005bec 	.word	0x20005bec
 801585c:	20005bdc 	.word	0x20005bdc
 8015860:	20005be8 	.word	0x20005be8

08015864 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8015864:	b480      	push	{r7}
 8015866:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8015868:	4b03      	ldr	r3, [pc, #12]	; (8015878 <xPortGetFreeHeapSize+0x14>)
 801586a:	681b      	ldr	r3, [r3, #0]
}
 801586c:	4618      	mov	r0, r3
 801586e:	46bd      	mov	sp, r7
 8015870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015874:	4770      	bx	lr
 8015876:	bf00      	nop
 8015878:	20005bdc 	.word	0x20005bdc

0801587c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801587c:	b480      	push	{r7}
 801587e:	b085      	sub	sp, #20
 8015880:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015882:	f244 6350 	movw	r3, #18000	; 0x4650
 8015886:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015888:	4b27      	ldr	r3, [pc, #156]	; (8015928 <prvHeapInit+0xac>)
 801588a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801588c:	68fb      	ldr	r3, [r7, #12]
 801588e:	f003 0307 	and.w	r3, r3, #7
 8015892:	2b00      	cmp	r3, #0
 8015894:	d00c      	beq.n	80158b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015896:	68fb      	ldr	r3, [r7, #12]
 8015898:	3307      	adds	r3, #7
 801589a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	f023 0307 	bic.w	r3, r3, #7
 80158a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80158a4:	68ba      	ldr	r2, [r7, #8]
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	1ad3      	subs	r3, r2, r3
 80158aa:	4a1f      	ldr	r2, [pc, #124]	; (8015928 <prvHeapInit+0xac>)
 80158ac:	4413      	add	r3, r2
 80158ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80158b0:	68fb      	ldr	r3, [r7, #12]
 80158b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80158b4:	4a1d      	ldr	r2, [pc, #116]	; (801592c <prvHeapInit+0xb0>)
 80158b6:	687b      	ldr	r3, [r7, #4]
 80158b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80158ba:	4b1c      	ldr	r3, [pc, #112]	; (801592c <prvHeapInit+0xb0>)
 80158bc:	2200      	movs	r2, #0
 80158be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	68ba      	ldr	r2, [r7, #8]
 80158c4:	4413      	add	r3, r2
 80158c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80158c8:	2208      	movs	r2, #8
 80158ca:	68fb      	ldr	r3, [r7, #12]
 80158cc:	1a9b      	subs	r3, r3, r2
 80158ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	f023 0307 	bic.w	r3, r3, #7
 80158d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80158d8:	68fb      	ldr	r3, [r7, #12]
 80158da:	4a15      	ldr	r2, [pc, #84]	; (8015930 <prvHeapInit+0xb4>)
 80158dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80158de:	4b14      	ldr	r3, [pc, #80]	; (8015930 <prvHeapInit+0xb4>)
 80158e0:	681b      	ldr	r3, [r3, #0]
 80158e2:	2200      	movs	r2, #0
 80158e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80158e6:	4b12      	ldr	r3, [pc, #72]	; (8015930 <prvHeapInit+0xb4>)
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	2200      	movs	r2, #0
 80158ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80158ee:	687b      	ldr	r3, [r7, #4]
 80158f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80158f2:	683b      	ldr	r3, [r7, #0]
 80158f4:	68fa      	ldr	r2, [r7, #12]
 80158f6:	1ad2      	subs	r2, r2, r3
 80158f8:	683b      	ldr	r3, [r7, #0]
 80158fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80158fc:	4b0c      	ldr	r3, [pc, #48]	; (8015930 <prvHeapInit+0xb4>)
 80158fe:	681a      	ldr	r2, [r3, #0]
 8015900:	683b      	ldr	r3, [r7, #0]
 8015902:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015904:	683b      	ldr	r3, [r7, #0]
 8015906:	685b      	ldr	r3, [r3, #4]
 8015908:	4a0a      	ldr	r2, [pc, #40]	; (8015934 <prvHeapInit+0xb8>)
 801590a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801590c:	683b      	ldr	r3, [r7, #0]
 801590e:	685b      	ldr	r3, [r3, #4]
 8015910:	4a09      	ldr	r2, [pc, #36]	; (8015938 <prvHeapInit+0xbc>)
 8015912:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015914:	4b09      	ldr	r3, [pc, #36]	; (801593c <prvHeapInit+0xc0>)
 8015916:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801591a:	601a      	str	r2, [r3, #0]
}
 801591c:	bf00      	nop
 801591e:	3714      	adds	r7, #20
 8015920:	46bd      	mov	sp, r7
 8015922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015926:	4770      	bx	lr
 8015928:	20001580 	.word	0x20001580
 801592c:	20005bd0 	.word	0x20005bd0
 8015930:	20005bd8 	.word	0x20005bd8
 8015934:	20005be0 	.word	0x20005be0
 8015938:	20005bdc 	.word	0x20005bdc
 801593c:	20005bec 	.word	0x20005bec

08015940 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015940:	b480      	push	{r7}
 8015942:	b085      	sub	sp, #20
 8015944:	af00      	add	r7, sp, #0
 8015946:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015948:	4b28      	ldr	r3, [pc, #160]	; (80159ec <prvInsertBlockIntoFreeList+0xac>)
 801594a:	60fb      	str	r3, [r7, #12]
 801594c:	e002      	b.n	8015954 <prvInsertBlockIntoFreeList+0x14>
 801594e:	68fb      	ldr	r3, [r7, #12]
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	60fb      	str	r3, [r7, #12]
 8015954:	68fb      	ldr	r3, [r7, #12]
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	687a      	ldr	r2, [r7, #4]
 801595a:	429a      	cmp	r2, r3
 801595c:	d8f7      	bhi.n	801594e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801595e:	68fb      	ldr	r3, [r7, #12]
 8015960:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	685b      	ldr	r3, [r3, #4]
 8015966:	68ba      	ldr	r2, [r7, #8]
 8015968:	4413      	add	r3, r2
 801596a:	687a      	ldr	r2, [r7, #4]
 801596c:	429a      	cmp	r2, r3
 801596e:	d108      	bne.n	8015982 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	685a      	ldr	r2, [r3, #4]
 8015974:	687b      	ldr	r3, [r7, #4]
 8015976:	685b      	ldr	r3, [r3, #4]
 8015978:	441a      	add	r2, r3
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801597e:	68fb      	ldr	r3, [r7, #12]
 8015980:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	685b      	ldr	r3, [r3, #4]
 801598a:	68ba      	ldr	r2, [r7, #8]
 801598c:	441a      	add	r2, r3
 801598e:	68fb      	ldr	r3, [r7, #12]
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	429a      	cmp	r2, r3
 8015994:	d118      	bne.n	80159c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	681a      	ldr	r2, [r3, #0]
 801599a:	4b15      	ldr	r3, [pc, #84]	; (80159f0 <prvInsertBlockIntoFreeList+0xb0>)
 801599c:	681b      	ldr	r3, [r3, #0]
 801599e:	429a      	cmp	r2, r3
 80159a0:	d00d      	beq.n	80159be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	685a      	ldr	r2, [r3, #4]
 80159a6:	68fb      	ldr	r3, [r7, #12]
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	685b      	ldr	r3, [r3, #4]
 80159ac:	441a      	add	r2, r3
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80159b2:	68fb      	ldr	r3, [r7, #12]
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	681a      	ldr	r2, [r3, #0]
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	601a      	str	r2, [r3, #0]
 80159bc:	e008      	b.n	80159d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80159be:	4b0c      	ldr	r3, [pc, #48]	; (80159f0 <prvInsertBlockIntoFreeList+0xb0>)
 80159c0:	681a      	ldr	r2, [r3, #0]
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	601a      	str	r2, [r3, #0]
 80159c6:	e003      	b.n	80159d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80159c8:	68fb      	ldr	r3, [r7, #12]
 80159ca:	681a      	ldr	r2, [r3, #0]
 80159cc:	687b      	ldr	r3, [r7, #4]
 80159ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80159d0:	68fa      	ldr	r2, [r7, #12]
 80159d2:	687b      	ldr	r3, [r7, #4]
 80159d4:	429a      	cmp	r2, r3
 80159d6:	d002      	beq.n	80159de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80159d8:	68fb      	ldr	r3, [r7, #12]
 80159da:	687a      	ldr	r2, [r7, #4]
 80159dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80159de:	bf00      	nop
 80159e0:	3714      	adds	r7, #20
 80159e2:	46bd      	mov	sp, r7
 80159e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e8:	4770      	bx	lr
 80159ea:	bf00      	nop
 80159ec:	20005bd0 	.word	0x20005bd0
 80159f0:	20005bd8 	.word	0x20005bd8

080159f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80159f4:	b580      	push	{r7, lr}
 80159f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80159f8:	2200      	movs	r2, #0
 80159fa:	4912      	ldr	r1, [pc, #72]	; (8015a44 <MX_USB_DEVICE_Init+0x50>)
 80159fc:	4812      	ldr	r0, [pc, #72]	; (8015a48 <MX_USB_DEVICE_Init+0x54>)
 80159fe:	f7f7 fba9 	bl	800d154 <USBD_Init>
 8015a02:	4603      	mov	r3, r0
 8015a04:	2b00      	cmp	r3, #0
 8015a06:	d001      	beq.n	8015a0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8015a08:	f7ef f818 	bl	8004a3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015a0c:	490f      	ldr	r1, [pc, #60]	; (8015a4c <MX_USB_DEVICE_Init+0x58>)
 8015a0e:	480e      	ldr	r0, [pc, #56]	; (8015a48 <MX_USB_DEVICE_Init+0x54>)
 8015a10:	f7f7 fbd0 	bl	800d1b4 <USBD_RegisterClass>
 8015a14:	4603      	mov	r3, r0
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d001      	beq.n	8015a1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8015a1a:	f7ef f80f 	bl	8004a3c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015a1e:	490c      	ldr	r1, [pc, #48]	; (8015a50 <MX_USB_DEVICE_Init+0x5c>)
 8015a20:	4809      	ldr	r0, [pc, #36]	; (8015a48 <MX_USB_DEVICE_Init+0x54>)
 8015a22:	f7f7 faf1 	bl	800d008 <USBD_CDC_RegisterInterface>
 8015a26:	4603      	mov	r3, r0
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d001      	beq.n	8015a30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8015a2c:	f7ef f806 	bl	8004a3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015a30:	4805      	ldr	r0, [pc, #20]	; (8015a48 <MX_USB_DEVICE_Init+0x54>)
 8015a32:	f7f7 fbe6 	bl	800d202 <USBD_Start>
 8015a36:	4603      	mov	r3, r0
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d001      	beq.n	8015a40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8015a3c:	f7ee fffe 	bl	8004a3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015a40:	bf00      	nop
 8015a42:	bd80      	pop	{r7, pc}
 8015a44:	20000150 	.word	0x20000150
 8015a48:	200153e8 	.word	0x200153e8
 8015a4c:	20000034 	.word	0x20000034
 8015a50:	2000013c 	.word	0x2000013c

08015a54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015a54:	b580      	push	{r7, lr}
 8015a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015a58:	2200      	movs	r2, #0
 8015a5a:	4905      	ldr	r1, [pc, #20]	; (8015a70 <CDC_Init_FS+0x1c>)
 8015a5c:	4805      	ldr	r0, [pc, #20]	; (8015a74 <CDC_Init_FS+0x20>)
 8015a5e:	f7f7 fae8 	bl	800d032 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8015a62:	4905      	ldr	r1, [pc, #20]	; (8015a78 <CDC_Init_FS+0x24>)
 8015a64:	4803      	ldr	r0, [pc, #12]	; (8015a74 <CDC_Init_FS+0x20>)
 8015a66:	f7f7 fb02 	bl	800d06e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8015a6a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	bd80      	pop	{r7, pc}
 8015a70:	20015eb8 	.word	0x20015eb8
 8015a74:	200153e8 	.word	0x200153e8
 8015a78:	200156b8 	.word	0x200156b8

08015a7c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015a7c:	b480      	push	{r7}
 8015a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015a80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015a82:	4618      	mov	r0, r3
 8015a84:	46bd      	mov	sp, r7
 8015a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a8a:	4770      	bx	lr

08015a8c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8015a8c:	b480      	push	{r7}
 8015a8e:	b083      	sub	sp, #12
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	4603      	mov	r3, r0
 8015a94:	6039      	str	r1, [r7, #0]
 8015a96:	71fb      	strb	r3, [r7, #7]
 8015a98:	4613      	mov	r3, r2
 8015a9a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8015a9c:	79fb      	ldrb	r3, [r7, #7]
 8015a9e:	2b23      	cmp	r3, #35	; 0x23
 8015aa0:	d84a      	bhi.n	8015b38 <CDC_Control_FS+0xac>
 8015aa2:	a201      	add	r2, pc, #4	; (adr r2, 8015aa8 <CDC_Control_FS+0x1c>)
 8015aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015aa8:	08015b39 	.word	0x08015b39
 8015aac:	08015b39 	.word	0x08015b39
 8015ab0:	08015b39 	.word	0x08015b39
 8015ab4:	08015b39 	.word	0x08015b39
 8015ab8:	08015b39 	.word	0x08015b39
 8015abc:	08015b39 	.word	0x08015b39
 8015ac0:	08015b39 	.word	0x08015b39
 8015ac4:	08015b39 	.word	0x08015b39
 8015ac8:	08015b39 	.word	0x08015b39
 8015acc:	08015b39 	.word	0x08015b39
 8015ad0:	08015b39 	.word	0x08015b39
 8015ad4:	08015b39 	.word	0x08015b39
 8015ad8:	08015b39 	.word	0x08015b39
 8015adc:	08015b39 	.word	0x08015b39
 8015ae0:	08015b39 	.word	0x08015b39
 8015ae4:	08015b39 	.word	0x08015b39
 8015ae8:	08015b39 	.word	0x08015b39
 8015aec:	08015b39 	.word	0x08015b39
 8015af0:	08015b39 	.word	0x08015b39
 8015af4:	08015b39 	.word	0x08015b39
 8015af8:	08015b39 	.word	0x08015b39
 8015afc:	08015b39 	.word	0x08015b39
 8015b00:	08015b39 	.word	0x08015b39
 8015b04:	08015b39 	.word	0x08015b39
 8015b08:	08015b39 	.word	0x08015b39
 8015b0c:	08015b39 	.word	0x08015b39
 8015b10:	08015b39 	.word	0x08015b39
 8015b14:	08015b39 	.word	0x08015b39
 8015b18:	08015b39 	.word	0x08015b39
 8015b1c:	08015b39 	.word	0x08015b39
 8015b20:	08015b39 	.word	0x08015b39
 8015b24:	08015b39 	.word	0x08015b39
 8015b28:	08015b39 	.word	0x08015b39
 8015b2c:	08015b39 	.word	0x08015b39
 8015b30:	08015b39 	.word	0x08015b39
 8015b34:	08015b39 	.word	0x08015b39
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8015b38:	bf00      	nop
  }

  return (USBD_OK);
 8015b3a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8015b3c:	4618      	mov	r0, r3
 8015b3e:	370c      	adds	r7, #12
 8015b40:	46bd      	mov	sp, r7
 8015b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b46:	4770      	bx	lr

08015b48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8015b48:	b580      	push	{r7, lr}
 8015b4a:	b082      	sub	sp, #8
 8015b4c:	af00      	add	r7, sp, #0
 8015b4e:	6078      	str	r0, [r7, #4]
 8015b50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8015b52:	6879      	ldr	r1, [r7, #4]
 8015b54:	4805      	ldr	r0, [pc, #20]	; (8015b6c <CDC_Receive_FS+0x24>)
 8015b56:	f7f7 fa8a 	bl	800d06e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8015b5a:	4804      	ldr	r0, [pc, #16]	; (8015b6c <CDC_Receive_FS+0x24>)
 8015b5c:	f7f7 fad0 	bl	800d100 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8015b60:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8015b62:	4618      	mov	r0, r3
 8015b64:	3708      	adds	r7, #8
 8015b66:	46bd      	mov	sp, r7
 8015b68:	bd80      	pop	{r7, pc}
 8015b6a:	bf00      	nop
 8015b6c:	200153e8 	.word	0x200153e8

08015b70 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8015b70:	b580      	push	{r7, lr}
 8015b72:	b084      	sub	sp, #16
 8015b74:	af00      	add	r7, sp, #0
 8015b76:	6078      	str	r0, [r7, #4]
 8015b78:	460b      	mov	r3, r1
 8015b7a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8015b7c:	2300      	movs	r3, #0
 8015b7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8015b80:	4b0d      	ldr	r3, [pc, #52]	; (8015bb8 <CDC_Transmit_FS+0x48>)
 8015b82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015b86:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8015b88:	68bb      	ldr	r3, [r7, #8]
 8015b8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8015b8e:	2b00      	cmp	r3, #0
 8015b90:	d001      	beq.n	8015b96 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8015b92:	2301      	movs	r3, #1
 8015b94:	e00b      	b.n	8015bae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8015b96:	887b      	ldrh	r3, [r7, #2]
 8015b98:	461a      	mov	r2, r3
 8015b9a:	6879      	ldr	r1, [r7, #4]
 8015b9c:	4806      	ldr	r0, [pc, #24]	; (8015bb8 <CDC_Transmit_FS+0x48>)
 8015b9e:	f7f7 fa48 	bl	800d032 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8015ba2:	4805      	ldr	r0, [pc, #20]	; (8015bb8 <CDC_Transmit_FS+0x48>)
 8015ba4:	f7f7 fa7c 	bl	800d0a0 <USBD_CDC_TransmitPacket>
 8015ba8:	4603      	mov	r3, r0
 8015baa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8015bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8015bae:	4618      	mov	r0, r3
 8015bb0:	3710      	adds	r7, #16
 8015bb2:	46bd      	mov	sp, r7
 8015bb4:	bd80      	pop	{r7, pc}
 8015bb6:	bf00      	nop
 8015bb8:	200153e8 	.word	0x200153e8

08015bbc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8015bbc:	b480      	push	{r7}
 8015bbe:	b087      	sub	sp, #28
 8015bc0:	af00      	add	r7, sp, #0
 8015bc2:	60f8      	str	r0, [r7, #12]
 8015bc4:	60b9      	str	r1, [r7, #8]
 8015bc6:	4613      	mov	r3, r2
 8015bc8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8015bca:	2300      	movs	r3, #0
 8015bcc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8015bce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	371c      	adds	r7, #28
 8015bd6:	46bd      	mov	sp, r7
 8015bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bdc:	4770      	bx	lr
	...

08015be0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015be0:	b480      	push	{r7}
 8015be2:	b083      	sub	sp, #12
 8015be4:	af00      	add	r7, sp, #0
 8015be6:	4603      	mov	r3, r0
 8015be8:	6039      	str	r1, [r7, #0]
 8015bea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8015bec:	683b      	ldr	r3, [r7, #0]
 8015bee:	2212      	movs	r2, #18
 8015bf0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015bf2:	4b03      	ldr	r3, [pc, #12]	; (8015c00 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	370c      	adds	r7, #12
 8015bf8:	46bd      	mov	sp, r7
 8015bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bfe:	4770      	bx	lr
 8015c00:	2000016c 	.word	0x2000016c

08015c04 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015c04:	b480      	push	{r7}
 8015c06:	b083      	sub	sp, #12
 8015c08:	af00      	add	r7, sp, #0
 8015c0a:	4603      	mov	r3, r0
 8015c0c:	6039      	str	r1, [r7, #0]
 8015c0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015c10:	683b      	ldr	r3, [r7, #0]
 8015c12:	2204      	movs	r2, #4
 8015c14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015c16:	4b03      	ldr	r3, [pc, #12]	; (8015c24 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8015c18:	4618      	mov	r0, r3
 8015c1a:	370c      	adds	r7, #12
 8015c1c:	46bd      	mov	sp, r7
 8015c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c22:	4770      	bx	lr
 8015c24:	20000180 	.word	0x20000180

08015c28 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015c28:	b580      	push	{r7, lr}
 8015c2a:	b082      	sub	sp, #8
 8015c2c:	af00      	add	r7, sp, #0
 8015c2e:	4603      	mov	r3, r0
 8015c30:	6039      	str	r1, [r7, #0]
 8015c32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015c34:	79fb      	ldrb	r3, [r7, #7]
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	d105      	bne.n	8015c46 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015c3a:	683a      	ldr	r2, [r7, #0]
 8015c3c:	4907      	ldr	r1, [pc, #28]	; (8015c5c <USBD_FS_ProductStrDescriptor+0x34>)
 8015c3e:	4808      	ldr	r0, [pc, #32]	; (8015c60 <USBD_FS_ProductStrDescriptor+0x38>)
 8015c40:	f7f8 fb11 	bl	800e266 <USBD_GetString>
 8015c44:	e004      	b.n	8015c50 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8015c46:	683a      	ldr	r2, [r7, #0]
 8015c48:	4904      	ldr	r1, [pc, #16]	; (8015c5c <USBD_FS_ProductStrDescriptor+0x34>)
 8015c4a:	4805      	ldr	r0, [pc, #20]	; (8015c60 <USBD_FS_ProductStrDescriptor+0x38>)
 8015c4c:	f7f8 fb0b 	bl	800e266 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015c50:	4b02      	ldr	r3, [pc, #8]	; (8015c5c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8015c52:	4618      	mov	r0, r3
 8015c54:	3708      	adds	r7, #8
 8015c56:	46bd      	mov	sp, r7
 8015c58:	bd80      	pop	{r7, pc}
 8015c5a:	bf00      	nop
 8015c5c:	200166b8 	.word	0x200166b8
 8015c60:	08019a98 	.word	0x08019a98

08015c64 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015c64:	b580      	push	{r7, lr}
 8015c66:	b082      	sub	sp, #8
 8015c68:	af00      	add	r7, sp, #0
 8015c6a:	4603      	mov	r3, r0
 8015c6c:	6039      	str	r1, [r7, #0]
 8015c6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8015c70:	683a      	ldr	r2, [r7, #0]
 8015c72:	4904      	ldr	r1, [pc, #16]	; (8015c84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8015c74:	4804      	ldr	r0, [pc, #16]	; (8015c88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8015c76:	f7f8 faf6 	bl	800e266 <USBD_GetString>
  return USBD_StrDesc;
 8015c7a:	4b02      	ldr	r3, [pc, #8]	; (8015c84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	3708      	adds	r7, #8
 8015c80:	46bd      	mov	sp, r7
 8015c82:	bd80      	pop	{r7, pc}
 8015c84:	200166b8 	.word	0x200166b8
 8015c88:	08019ab0 	.word	0x08019ab0

08015c8c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015c8c:	b580      	push	{r7, lr}
 8015c8e:	b082      	sub	sp, #8
 8015c90:	af00      	add	r7, sp, #0
 8015c92:	4603      	mov	r3, r0
 8015c94:	6039      	str	r1, [r7, #0]
 8015c96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8015c98:	683b      	ldr	r3, [r7, #0]
 8015c9a:	221a      	movs	r2, #26
 8015c9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8015c9e:	f000 f843 	bl	8015d28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8015ca2:	4b02      	ldr	r3, [pc, #8]	; (8015cac <USBD_FS_SerialStrDescriptor+0x20>)
}
 8015ca4:	4618      	mov	r0, r3
 8015ca6:	3708      	adds	r7, #8
 8015ca8:	46bd      	mov	sp, r7
 8015caa:	bd80      	pop	{r7, pc}
 8015cac:	20000184 	.word	0x20000184

08015cb0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015cb0:	b580      	push	{r7, lr}
 8015cb2:	b082      	sub	sp, #8
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	4603      	mov	r3, r0
 8015cb8:	6039      	str	r1, [r7, #0]
 8015cba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8015cbc:	79fb      	ldrb	r3, [r7, #7]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	d105      	bne.n	8015cce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015cc2:	683a      	ldr	r2, [r7, #0]
 8015cc4:	4907      	ldr	r1, [pc, #28]	; (8015ce4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015cc6:	4808      	ldr	r0, [pc, #32]	; (8015ce8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015cc8:	f7f8 facd 	bl	800e266 <USBD_GetString>
 8015ccc:	e004      	b.n	8015cd8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015cce:	683a      	ldr	r2, [r7, #0]
 8015cd0:	4904      	ldr	r1, [pc, #16]	; (8015ce4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8015cd2:	4805      	ldr	r0, [pc, #20]	; (8015ce8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8015cd4:	f7f8 fac7 	bl	800e266 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015cd8:	4b02      	ldr	r3, [pc, #8]	; (8015ce4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8015cda:	4618      	mov	r0, r3
 8015cdc:	3708      	adds	r7, #8
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd80      	pop	{r7, pc}
 8015ce2:	bf00      	nop
 8015ce4:	200166b8 	.word	0x200166b8
 8015ce8:	08019ac4 	.word	0x08019ac4

08015cec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015cec:	b580      	push	{r7, lr}
 8015cee:	b082      	sub	sp, #8
 8015cf0:	af00      	add	r7, sp, #0
 8015cf2:	4603      	mov	r3, r0
 8015cf4:	6039      	str	r1, [r7, #0]
 8015cf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015cf8:	79fb      	ldrb	r3, [r7, #7]
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d105      	bne.n	8015d0a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015cfe:	683a      	ldr	r2, [r7, #0]
 8015d00:	4907      	ldr	r1, [pc, #28]	; (8015d20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015d02:	4808      	ldr	r0, [pc, #32]	; (8015d24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015d04:	f7f8 faaf 	bl	800e266 <USBD_GetString>
 8015d08:	e004      	b.n	8015d14 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015d0a:	683a      	ldr	r2, [r7, #0]
 8015d0c:	4904      	ldr	r1, [pc, #16]	; (8015d20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8015d0e:	4805      	ldr	r0, [pc, #20]	; (8015d24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8015d10:	f7f8 faa9 	bl	800e266 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015d14:	4b02      	ldr	r3, [pc, #8]	; (8015d20 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8015d16:	4618      	mov	r0, r3
 8015d18:	3708      	adds	r7, #8
 8015d1a:	46bd      	mov	sp, r7
 8015d1c:	bd80      	pop	{r7, pc}
 8015d1e:	bf00      	nop
 8015d20:	200166b8 	.word	0x200166b8
 8015d24:	08019ad0 	.word	0x08019ad0

08015d28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015d28:	b580      	push	{r7, lr}
 8015d2a:	b084      	sub	sp, #16
 8015d2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8015d2e:	4b0f      	ldr	r3, [pc, #60]	; (8015d6c <Get_SerialNum+0x44>)
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015d34:	4b0e      	ldr	r3, [pc, #56]	; (8015d70 <Get_SerialNum+0x48>)
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8015d3a:	4b0e      	ldr	r3, [pc, #56]	; (8015d74 <Get_SerialNum+0x4c>)
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015d40:	68fa      	ldr	r2, [r7, #12]
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	4413      	add	r3, r2
 8015d46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015d48:	68fb      	ldr	r3, [r7, #12]
 8015d4a:	2b00      	cmp	r3, #0
 8015d4c:	d009      	beq.n	8015d62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8015d4e:	2208      	movs	r2, #8
 8015d50:	4909      	ldr	r1, [pc, #36]	; (8015d78 <Get_SerialNum+0x50>)
 8015d52:	68f8      	ldr	r0, [r7, #12]
 8015d54:	f000 f814 	bl	8015d80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8015d58:	2204      	movs	r2, #4
 8015d5a:	4908      	ldr	r1, [pc, #32]	; (8015d7c <Get_SerialNum+0x54>)
 8015d5c:	68b8      	ldr	r0, [r7, #8]
 8015d5e:	f000 f80f 	bl	8015d80 <IntToUnicode>
  }
}
 8015d62:	bf00      	nop
 8015d64:	3710      	adds	r7, #16
 8015d66:	46bd      	mov	sp, r7
 8015d68:	bd80      	pop	{r7, pc}
 8015d6a:	bf00      	nop
 8015d6c:	1fff7a10 	.word	0x1fff7a10
 8015d70:	1fff7a14 	.word	0x1fff7a14
 8015d74:	1fff7a18 	.word	0x1fff7a18
 8015d78:	20000186 	.word	0x20000186
 8015d7c:	20000196 	.word	0x20000196

08015d80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8015d80:	b480      	push	{r7}
 8015d82:	b087      	sub	sp, #28
 8015d84:	af00      	add	r7, sp, #0
 8015d86:	60f8      	str	r0, [r7, #12]
 8015d88:	60b9      	str	r1, [r7, #8]
 8015d8a:	4613      	mov	r3, r2
 8015d8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8015d8e:	2300      	movs	r3, #0
 8015d90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8015d92:	2300      	movs	r3, #0
 8015d94:	75fb      	strb	r3, [r7, #23]
 8015d96:	e027      	b.n	8015de8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8015d98:	68fb      	ldr	r3, [r7, #12]
 8015d9a:	0f1b      	lsrs	r3, r3, #28
 8015d9c:	2b09      	cmp	r3, #9
 8015d9e:	d80b      	bhi.n	8015db8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8015da0:	68fb      	ldr	r3, [r7, #12]
 8015da2:	0f1b      	lsrs	r3, r3, #28
 8015da4:	b2da      	uxtb	r2, r3
 8015da6:	7dfb      	ldrb	r3, [r7, #23]
 8015da8:	005b      	lsls	r3, r3, #1
 8015daa:	4619      	mov	r1, r3
 8015dac:	68bb      	ldr	r3, [r7, #8]
 8015dae:	440b      	add	r3, r1
 8015db0:	3230      	adds	r2, #48	; 0x30
 8015db2:	b2d2      	uxtb	r2, r2
 8015db4:	701a      	strb	r2, [r3, #0]
 8015db6:	e00a      	b.n	8015dce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015db8:	68fb      	ldr	r3, [r7, #12]
 8015dba:	0f1b      	lsrs	r3, r3, #28
 8015dbc:	b2da      	uxtb	r2, r3
 8015dbe:	7dfb      	ldrb	r3, [r7, #23]
 8015dc0:	005b      	lsls	r3, r3, #1
 8015dc2:	4619      	mov	r1, r3
 8015dc4:	68bb      	ldr	r3, [r7, #8]
 8015dc6:	440b      	add	r3, r1
 8015dc8:	3237      	adds	r2, #55	; 0x37
 8015dca:	b2d2      	uxtb	r2, r2
 8015dcc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	011b      	lsls	r3, r3, #4
 8015dd2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015dd4:	7dfb      	ldrb	r3, [r7, #23]
 8015dd6:	005b      	lsls	r3, r3, #1
 8015dd8:	3301      	adds	r3, #1
 8015dda:	68ba      	ldr	r2, [r7, #8]
 8015ddc:	4413      	add	r3, r2
 8015dde:	2200      	movs	r2, #0
 8015de0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015de2:	7dfb      	ldrb	r3, [r7, #23]
 8015de4:	3301      	adds	r3, #1
 8015de6:	75fb      	strb	r3, [r7, #23]
 8015de8:	7dfa      	ldrb	r2, [r7, #23]
 8015dea:	79fb      	ldrb	r3, [r7, #7]
 8015dec:	429a      	cmp	r2, r3
 8015dee:	d3d3      	bcc.n	8015d98 <IntToUnicode+0x18>
  }
}
 8015df0:	bf00      	nop
 8015df2:	bf00      	nop
 8015df4:	371c      	adds	r7, #28
 8015df6:	46bd      	mov	sp, r7
 8015df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dfc:	4770      	bx	lr
	...

08015e00 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015e00:	b580      	push	{r7, lr}
 8015e02:	b08a      	sub	sp, #40	; 0x28
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015e08:	f107 0314 	add.w	r3, r7, #20
 8015e0c:	2200      	movs	r2, #0
 8015e0e:	601a      	str	r2, [r3, #0]
 8015e10:	605a      	str	r2, [r3, #4]
 8015e12:	609a      	str	r2, [r3, #8]
 8015e14:	60da      	str	r2, [r3, #12]
 8015e16:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015e20:	d147      	bne.n	8015eb2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015e22:	2300      	movs	r3, #0
 8015e24:	613b      	str	r3, [r7, #16]
 8015e26:	4b25      	ldr	r3, [pc, #148]	; (8015ebc <HAL_PCD_MspInit+0xbc>)
 8015e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e2a:	4a24      	ldr	r2, [pc, #144]	; (8015ebc <HAL_PCD_MspInit+0xbc>)
 8015e2c:	f043 0301 	orr.w	r3, r3, #1
 8015e30:	6313      	str	r3, [r2, #48]	; 0x30
 8015e32:	4b22      	ldr	r3, [pc, #136]	; (8015ebc <HAL_PCD_MspInit+0xbc>)
 8015e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e36:	f003 0301 	and.w	r3, r3, #1
 8015e3a:	613b      	str	r3, [r7, #16]
 8015e3c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8015e3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8015e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8015e44:	2300      	movs	r3, #0
 8015e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015e48:	2300      	movs	r3, #0
 8015e4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8015e4c:	f107 0314 	add.w	r3, r7, #20
 8015e50:	4619      	mov	r1, r3
 8015e52:	481b      	ldr	r0, [pc, #108]	; (8015ec0 <HAL_PCD_MspInit+0xc0>)
 8015e54:	f7f0 f94c 	bl	80060f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8015e58:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8015e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015e5e:	2302      	movs	r3, #2
 8015e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015e62:	2300      	movs	r3, #0
 8015e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015e66:	2300      	movs	r3, #0
 8015e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015e6a:	230a      	movs	r3, #10
 8015e6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015e6e:	f107 0314 	add.w	r3, r7, #20
 8015e72:	4619      	mov	r1, r3
 8015e74:	4812      	ldr	r0, [pc, #72]	; (8015ec0 <HAL_PCD_MspInit+0xc0>)
 8015e76:	f7f0 f93b 	bl	80060f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015e7a:	4b10      	ldr	r3, [pc, #64]	; (8015ebc <HAL_PCD_MspInit+0xbc>)
 8015e7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015e7e:	4a0f      	ldr	r2, [pc, #60]	; (8015ebc <HAL_PCD_MspInit+0xbc>)
 8015e80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015e84:	6353      	str	r3, [r2, #52]	; 0x34
 8015e86:	2300      	movs	r3, #0
 8015e88:	60fb      	str	r3, [r7, #12]
 8015e8a:	4b0c      	ldr	r3, [pc, #48]	; (8015ebc <HAL_PCD_MspInit+0xbc>)
 8015e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015e8e:	4a0b      	ldr	r2, [pc, #44]	; (8015ebc <HAL_PCD_MspInit+0xbc>)
 8015e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015e94:	6453      	str	r3, [r2, #68]	; 0x44
 8015e96:	4b09      	ldr	r3, [pc, #36]	; (8015ebc <HAL_PCD_MspInit+0xbc>)
 8015e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015e9e:	60fb      	str	r3, [r7, #12]
 8015ea0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8015ea2:	2200      	movs	r2, #0
 8015ea4:	2105      	movs	r1, #5
 8015ea6:	2043      	movs	r0, #67	; 0x43
 8015ea8:	f7f0 f8f8 	bl	800609c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015eac:	2043      	movs	r0, #67	; 0x43
 8015eae:	f7f0 f911 	bl	80060d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015eb2:	bf00      	nop
 8015eb4:	3728      	adds	r7, #40	; 0x28
 8015eb6:	46bd      	mov	sp, r7
 8015eb8:	bd80      	pop	{r7, pc}
 8015eba:	bf00      	nop
 8015ebc:	40023800 	.word	0x40023800
 8015ec0:	40020000 	.word	0x40020000

08015ec4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b082      	sub	sp, #8
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8015ed8:	4619      	mov	r1, r3
 8015eda:	4610      	mov	r0, r2
 8015edc:	f7f7 f9dc 	bl	800d298 <USBD_LL_SetupStage>
}
 8015ee0:	bf00      	nop
 8015ee2:	3708      	adds	r7, #8
 8015ee4:	46bd      	mov	sp, r7
 8015ee6:	bd80      	pop	{r7, pc}

08015ee8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015ee8:	b580      	push	{r7, lr}
 8015eea:	b082      	sub	sp, #8
 8015eec:	af00      	add	r7, sp, #0
 8015eee:	6078      	str	r0, [r7, #4]
 8015ef0:	460b      	mov	r3, r1
 8015ef2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015efa:	78fa      	ldrb	r2, [r7, #3]
 8015efc:	6879      	ldr	r1, [r7, #4]
 8015efe:	4613      	mov	r3, r2
 8015f00:	00db      	lsls	r3, r3, #3
 8015f02:	1a9b      	subs	r3, r3, r2
 8015f04:	009b      	lsls	r3, r3, #2
 8015f06:	440b      	add	r3, r1
 8015f08:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8015f0c:	681a      	ldr	r2, [r3, #0]
 8015f0e:	78fb      	ldrb	r3, [r7, #3]
 8015f10:	4619      	mov	r1, r3
 8015f12:	f7f7 fa16 	bl	800d342 <USBD_LL_DataOutStage>
}
 8015f16:	bf00      	nop
 8015f18:	3708      	adds	r7, #8
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	bd80      	pop	{r7, pc}

08015f1e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f1e:	b580      	push	{r7, lr}
 8015f20:	b082      	sub	sp, #8
 8015f22:	af00      	add	r7, sp, #0
 8015f24:	6078      	str	r0, [r7, #4]
 8015f26:	460b      	mov	r3, r1
 8015f28:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015f30:	78fa      	ldrb	r2, [r7, #3]
 8015f32:	6879      	ldr	r1, [r7, #4]
 8015f34:	4613      	mov	r3, r2
 8015f36:	00db      	lsls	r3, r3, #3
 8015f38:	1a9b      	subs	r3, r3, r2
 8015f3a:	009b      	lsls	r3, r3, #2
 8015f3c:	440b      	add	r3, r1
 8015f3e:	3348      	adds	r3, #72	; 0x48
 8015f40:	681a      	ldr	r2, [r3, #0]
 8015f42:	78fb      	ldrb	r3, [r7, #3]
 8015f44:	4619      	mov	r1, r3
 8015f46:	f7f7 fa5f 	bl	800d408 <USBD_LL_DataInStage>
}
 8015f4a:	bf00      	nop
 8015f4c:	3708      	adds	r7, #8
 8015f4e:	46bd      	mov	sp, r7
 8015f50:	bd80      	pop	{r7, pc}

08015f52 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f52:	b580      	push	{r7, lr}
 8015f54:	b082      	sub	sp, #8
 8015f56:	af00      	add	r7, sp, #0
 8015f58:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015f60:	4618      	mov	r0, r3
 8015f62:	f7f7 fb73 	bl	800d64c <USBD_LL_SOF>
}
 8015f66:	bf00      	nop
 8015f68:	3708      	adds	r7, #8
 8015f6a:	46bd      	mov	sp, r7
 8015f6c:	bd80      	pop	{r7, pc}

08015f6e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015f6e:	b580      	push	{r7, lr}
 8015f70:	b084      	sub	sp, #16
 8015f72:	af00      	add	r7, sp, #0
 8015f74:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015f76:	2301      	movs	r3, #1
 8015f78:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	68db      	ldr	r3, [r3, #12]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d102      	bne.n	8015f88 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8015f82:	2300      	movs	r3, #0
 8015f84:	73fb      	strb	r3, [r7, #15]
 8015f86:	e008      	b.n	8015f9a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8015f88:	687b      	ldr	r3, [r7, #4]
 8015f8a:	68db      	ldr	r3, [r3, #12]
 8015f8c:	2b02      	cmp	r3, #2
 8015f8e:	d102      	bne.n	8015f96 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8015f90:	2301      	movs	r3, #1
 8015f92:	73fb      	strb	r3, [r7, #15]
 8015f94:	e001      	b.n	8015f9a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8015f96:	f7ee fd51 	bl	8004a3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015fa0:	7bfa      	ldrb	r2, [r7, #15]
 8015fa2:	4611      	mov	r1, r2
 8015fa4:	4618      	mov	r0, r3
 8015fa6:	f7f7 fb13 	bl	800d5d0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	f7f7 fabf 	bl	800d534 <USBD_LL_Reset>
}
 8015fb6:	bf00      	nop
 8015fb8:	3710      	adds	r7, #16
 8015fba:	46bd      	mov	sp, r7
 8015fbc:	bd80      	pop	{r7, pc}
	...

08015fc0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	b082      	sub	sp, #8
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015fce:	4618      	mov	r0, r3
 8015fd0:	f7f7 fb0e 	bl	800d5f0 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	687a      	ldr	r2, [r7, #4]
 8015fe0:	6812      	ldr	r2, [r2, #0]
 8015fe2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015fe6:	f043 0301 	orr.w	r3, r3, #1
 8015fea:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015fec:	687b      	ldr	r3, [r7, #4]
 8015fee:	6a1b      	ldr	r3, [r3, #32]
 8015ff0:	2b00      	cmp	r3, #0
 8015ff2:	d005      	beq.n	8016000 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015ff4:	4b04      	ldr	r3, [pc, #16]	; (8016008 <HAL_PCD_SuspendCallback+0x48>)
 8015ff6:	691b      	ldr	r3, [r3, #16]
 8015ff8:	4a03      	ldr	r2, [pc, #12]	; (8016008 <HAL_PCD_SuspendCallback+0x48>)
 8015ffa:	f043 0306 	orr.w	r3, r3, #6
 8015ffe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8016000:	bf00      	nop
 8016002:	3708      	adds	r7, #8
 8016004:	46bd      	mov	sp, r7
 8016006:	bd80      	pop	{r7, pc}
 8016008:	e000ed00 	.word	0xe000ed00

0801600c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801600c:	b580      	push	{r7, lr}
 801600e:	b082      	sub	sp, #8
 8016010:	af00      	add	r7, sp, #0
 8016012:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801601a:	4618      	mov	r0, r3
 801601c:	f7f7 fafe 	bl	800d61c <USBD_LL_Resume>
}
 8016020:	bf00      	nop
 8016022:	3708      	adds	r7, #8
 8016024:	46bd      	mov	sp, r7
 8016026:	bd80      	pop	{r7, pc}

08016028 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016028:	b580      	push	{r7, lr}
 801602a:	b082      	sub	sp, #8
 801602c:	af00      	add	r7, sp, #0
 801602e:	6078      	str	r0, [r7, #4]
 8016030:	460b      	mov	r3, r1
 8016032:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801603a:	78fa      	ldrb	r2, [r7, #3]
 801603c:	4611      	mov	r1, r2
 801603e:	4618      	mov	r0, r3
 8016040:	f7f7 fb4c 	bl	800d6dc <USBD_LL_IsoOUTIncomplete>
}
 8016044:	bf00      	nop
 8016046:	3708      	adds	r7, #8
 8016048:	46bd      	mov	sp, r7
 801604a:	bd80      	pop	{r7, pc}

0801604c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801604c:	b580      	push	{r7, lr}
 801604e:	b082      	sub	sp, #8
 8016050:	af00      	add	r7, sp, #0
 8016052:	6078      	str	r0, [r7, #4]
 8016054:	460b      	mov	r3, r1
 8016056:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801605e:	78fa      	ldrb	r2, [r7, #3]
 8016060:	4611      	mov	r1, r2
 8016062:	4618      	mov	r0, r3
 8016064:	f7f7 fb14 	bl	800d690 <USBD_LL_IsoINIncomplete>
}
 8016068:	bf00      	nop
 801606a:	3708      	adds	r7, #8
 801606c:	46bd      	mov	sp, r7
 801606e:	bd80      	pop	{r7, pc}

08016070 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016070:	b580      	push	{r7, lr}
 8016072:	b082      	sub	sp, #8
 8016074:	af00      	add	r7, sp, #0
 8016076:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016078:	687b      	ldr	r3, [r7, #4]
 801607a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801607e:	4618      	mov	r0, r3
 8016080:	f7f7 fb52 	bl	800d728 <USBD_LL_DevConnected>
}
 8016084:	bf00      	nop
 8016086:	3708      	adds	r7, #8
 8016088:	46bd      	mov	sp, r7
 801608a:	bd80      	pop	{r7, pc}

0801608c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801608c:	b580      	push	{r7, lr}
 801608e:	b082      	sub	sp, #8
 8016090:	af00      	add	r7, sp, #0
 8016092:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801609a:	4618      	mov	r0, r3
 801609c:	f7f7 fb4f 	bl	800d73e <USBD_LL_DevDisconnected>
}
 80160a0:	bf00      	nop
 80160a2:	3708      	adds	r7, #8
 80160a4:	46bd      	mov	sp, r7
 80160a6:	bd80      	pop	{r7, pc}

080160a8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b082      	sub	sp, #8
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	781b      	ldrb	r3, [r3, #0]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d13c      	bne.n	8016132 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80160b8:	4a20      	ldr	r2, [pc, #128]	; (801613c <USBD_LL_Init+0x94>)
 80160ba:	687b      	ldr	r3, [r7, #4]
 80160bc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80160c0:	687b      	ldr	r3, [r7, #4]
 80160c2:	4a1e      	ldr	r2, [pc, #120]	; (801613c <USBD_LL_Init+0x94>)
 80160c4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80160c8:	4b1c      	ldr	r3, [pc, #112]	; (801613c <USBD_LL_Init+0x94>)
 80160ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80160ce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80160d0:	4b1a      	ldr	r3, [pc, #104]	; (801613c <USBD_LL_Init+0x94>)
 80160d2:	2204      	movs	r2, #4
 80160d4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80160d6:	4b19      	ldr	r3, [pc, #100]	; (801613c <USBD_LL_Init+0x94>)
 80160d8:	2202      	movs	r2, #2
 80160da:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80160dc:	4b17      	ldr	r3, [pc, #92]	; (801613c <USBD_LL_Init+0x94>)
 80160de:	2200      	movs	r2, #0
 80160e0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80160e2:	4b16      	ldr	r3, [pc, #88]	; (801613c <USBD_LL_Init+0x94>)
 80160e4:	2202      	movs	r2, #2
 80160e6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80160e8:	4b14      	ldr	r3, [pc, #80]	; (801613c <USBD_LL_Init+0x94>)
 80160ea:	2200      	movs	r2, #0
 80160ec:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80160ee:	4b13      	ldr	r3, [pc, #76]	; (801613c <USBD_LL_Init+0x94>)
 80160f0:	2200      	movs	r2, #0
 80160f2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80160f4:	4b11      	ldr	r3, [pc, #68]	; (801613c <USBD_LL_Init+0x94>)
 80160f6:	2200      	movs	r2, #0
 80160f8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80160fa:	4b10      	ldr	r3, [pc, #64]	; (801613c <USBD_LL_Init+0x94>)
 80160fc:	2200      	movs	r2, #0
 80160fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016100:	4b0e      	ldr	r3, [pc, #56]	; (801613c <USBD_LL_Init+0x94>)
 8016102:	2200      	movs	r2, #0
 8016104:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016106:	480d      	ldr	r0, [pc, #52]	; (801613c <USBD_LL_Init+0x94>)
 8016108:	f7f1 fc4b 	bl	80079a2 <HAL_PCD_Init>
 801610c:	4603      	mov	r3, r0
 801610e:	2b00      	cmp	r3, #0
 8016110:	d001      	beq.n	8016116 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8016112:	f7ee fc93 	bl	8004a3c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016116:	2180      	movs	r1, #128	; 0x80
 8016118:	4808      	ldr	r0, [pc, #32]	; (801613c <USBD_LL_Init+0x94>)
 801611a:	f7f2 fda8 	bl	8008c6e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801611e:	2240      	movs	r2, #64	; 0x40
 8016120:	2100      	movs	r1, #0
 8016122:	4806      	ldr	r0, [pc, #24]	; (801613c <USBD_LL_Init+0x94>)
 8016124:	f7f2 fd5c 	bl	8008be0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016128:	2280      	movs	r2, #128	; 0x80
 801612a:	2101      	movs	r1, #1
 801612c:	4803      	ldr	r0, [pc, #12]	; (801613c <USBD_LL_Init+0x94>)
 801612e:	f7f2 fd57 	bl	8008be0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016132:	2300      	movs	r3, #0
}
 8016134:	4618      	mov	r0, r3
 8016136:	3708      	adds	r7, #8
 8016138:	46bd      	mov	sp, r7
 801613a:	bd80      	pop	{r7, pc}
 801613c:	200168b8 	.word	0x200168b8

08016140 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b084      	sub	sp, #16
 8016144:	af00      	add	r7, sp, #0
 8016146:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016148:	2300      	movs	r3, #0
 801614a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801614c:	2300      	movs	r3, #0
 801614e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016156:	4618      	mov	r0, r3
 8016158:	f7f1 fd40 	bl	8007bdc <HAL_PCD_Start>
 801615c:	4603      	mov	r3, r0
 801615e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016160:	7bfb      	ldrb	r3, [r7, #15]
 8016162:	4618      	mov	r0, r3
 8016164:	f000 f942 	bl	80163ec <USBD_Get_USB_Status>
 8016168:	4603      	mov	r3, r0
 801616a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801616c:	7bbb      	ldrb	r3, [r7, #14]
}
 801616e:	4618      	mov	r0, r3
 8016170:	3710      	adds	r7, #16
 8016172:	46bd      	mov	sp, r7
 8016174:	bd80      	pop	{r7, pc}

08016176 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016176:	b580      	push	{r7, lr}
 8016178:	b084      	sub	sp, #16
 801617a:	af00      	add	r7, sp, #0
 801617c:	6078      	str	r0, [r7, #4]
 801617e:	4608      	mov	r0, r1
 8016180:	4611      	mov	r1, r2
 8016182:	461a      	mov	r2, r3
 8016184:	4603      	mov	r3, r0
 8016186:	70fb      	strb	r3, [r7, #3]
 8016188:	460b      	mov	r3, r1
 801618a:	70bb      	strb	r3, [r7, #2]
 801618c:	4613      	mov	r3, r2
 801618e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016190:	2300      	movs	r3, #0
 8016192:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016194:	2300      	movs	r3, #0
 8016196:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016198:	687b      	ldr	r3, [r7, #4]
 801619a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801619e:	78bb      	ldrb	r3, [r7, #2]
 80161a0:	883a      	ldrh	r2, [r7, #0]
 80161a2:	78f9      	ldrb	r1, [r7, #3]
 80161a4:	f7f2 f924 	bl	80083f0 <HAL_PCD_EP_Open>
 80161a8:	4603      	mov	r3, r0
 80161aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80161ac:	7bfb      	ldrb	r3, [r7, #15]
 80161ae:	4618      	mov	r0, r3
 80161b0:	f000 f91c 	bl	80163ec <USBD_Get_USB_Status>
 80161b4:	4603      	mov	r3, r0
 80161b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80161b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80161ba:	4618      	mov	r0, r3
 80161bc:	3710      	adds	r7, #16
 80161be:	46bd      	mov	sp, r7
 80161c0:	bd80      	pop	{r7, pc}

080161c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80161c2:	b580      	push	{r7, lr}
 80161c4:	b084      	sub	sp, #16
 80161c6:	af00      	add	r7, sp, #0
 80161c8:	6078      	str	r0, [r7, #4]
 80161ca:	460b      	mov	r3, r1
 80161cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80161ce:	2300      	movs	r3, #0
 80161d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80161d2:	2300      	movs	r3, #0
 80161d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80161d6:	687b      	ldr	r3, [r7, #4]
 80161d8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80161dc:	78fa      	ldrb	r2, [r7, #3]
 80161de:	4611      	mov	r1, r2
 80161e0:	4618      	mov	r0, r3
 80161e2:	f7f2 f96d 	bl	80084c0 <HAL_PCD_EP_Close>
 80161e6:	4603      	mov	r3, r0
 80161e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80161ea:	7bfb      	ldrb	r3, [r7, #15]
 80161ec:	4618      	mov	r0, r3
 80161ee:	f000 f8fd 	bl	80163ec <USBD_Get_USB_Status>
 80161f2:	4603      	mov	r3, r0
 80161f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80161f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80161f8:	4618      	mov	r0, r3
 80161fa:	3710      	adds	r7, #16
 80161fc:	46bd      	mov	sp, r7
 80161fe:	bd80      	pop	{r7, pc}

08016200 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016200:	b580      	push	{r7, lr}
 8016202:	b084      	sub	sp, #16
 8016204:	af00      	add	r7, sp, #0
 8016206:	6078      	str	r0, [r7, #4]
 8016208:	460b      	mov	r3, r1
 801620a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801620c:	2300      	movs	r3, #0
 801620e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016210:	2300      	movs	r3, #0
 8016212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016214:	687b      	ldr	r3, [r7, #4]
 8016216:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801621a:	78fa      	ldrb	r2, [r7, #3]
 801621c:	4611      	mov	r1, r2
 801621e:	4618      	mov	r0, r3
 8016220:	f7f2 fa45 	bl	80086ae <HAL_PCD_EP_SetStall>
 8016224:	4603      	mov	r3, r0
 8016226:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016228:	7bfb      	ldrb	r3, [r7, #15]
 801622a:	4618      	mov	r0, r3
 801622c:	f000 f8de 	bl	80163ec <USBD_Get_USB_Status>
 8016230:	4603      	mov	r3, r0
 8016232:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016234:	7bbb      	ldrb	r3, [r7, #14]
}
 8016236:	4618      	mov	r0, r3
 8016238:	3710      	adds	r7, #16
 801623a:	46bd      	mov	sp, r7
 801623c:	bd80      	pop	{r7, pc}

0801623e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801623e:	b580      	push	{r7, lr}
 8016240:	b084      	sub	sp, #16
 8016242:	af00      	add	r7, sp, #0
 8016244:	6078      	str	r0, [r7, #4]
 8016246:	460b      	mov	r3, r1
 8016248:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801624a:	2300      	movs	r3, #0
 801624c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801624e:	2300      	movs	r3, #0
 8016250:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016258:	78fa      	ldrb	r2, [r7, #3]
 801625a:	4611      	mov	r1, r2
 801625c:	4618      	mov	r0, r3
 801625e:	f7f2 fa8a 	bl	8008776 <HAL_PCD_EP_ClrStall>
 8016262:	4603      	mov	r3, r0
 8016264:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016266:	7bfb      	ldrb	r3, [r7, #15]
 8016268:	4618      	mov	r0, r3
 801626a:	f000 f8bf 	bl	80163ec <USBD_Get_USB_Status>
 801626e:	4603      	mov	r3, r0
 8016270:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016272:	7bbb      	ldrb	r3, [r7, #14]
}
 8016274:	4618      	mov	r0, r3
 8016276:	3710      	adds	r7, #16
 8016278:	46bd      	mov	sp, r7
 801627a:	bd80      	pop	{r7, pc}

0801627c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801627c:	b480      	push	{r7}
 801627e:	b085      	sub	sp, #20
 8016280:	af00      	add	r7, sp, #0
 8016282:	6078      	str	r0, [r7, #4]
 8016284:	460b      	mov	r3, r1
 8016286:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016288:	687b      	ldr	r3, [r7, #4]
 801628a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801628e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016290:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016294:	2b00      	cmp	r3, #0
 8016296:	da0b      	bge.n	80162b0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016298:	78fb      	ldrb	r3, [r7, #3]
 801629a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801629e:	68f9      	ldr	r1, [r7, #12]
 80162a0:	4613      	mov	r3, r2
 80162a2:	00db      	lsls	r3, r3, #3
 80162a4:	1a9b      	subs	r3, r3, r2
 80162a6:	009b      	lsls	r3, r3, #2
 80162a8:	440b      	add	r3, r1
 80162aa:	333e      	adds	r3, #62	; 0x3e
 80162ac:	781b      	ldrb	r3, [r3, #0]
 80162ae:	e00b      	b.n	80162c8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80162b0:	78fb      	ldrb	r3, [r7, #3]
 80162b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80162b6:	68f9      	ldr	r1, [r7, #12]
 80162b8:	4613      	mov	r3, r2
 80162ba:	00db      	lsls	r3, r3, #3
 80162bc:	1a9b      	subs	r3, r3, r2
 80162be:	009b      	lsls	r3, r3, #2
 80162c0:	440b      	add	r3, r1
 80162c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80162c6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80162c8:	4618      	mov	r0, r3
 80162ca:	3714      	adds	r7, #20
 80162cc:	46bd      	mov	sp, r7
 80162ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162d2:	4770      	bx	lr

080162d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80162d4:	b580      	push	{r7, lr}
 80162d6:	b084      	sub	sp, #16
 80162d8:	af00      	add	r7, sp, #0
 80162da:	6078      	str	r0, [r7, #4]
 80162dc:	460b      	mov	r3, r1
 80162de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80162e0:	2300      	movs	r3, #0
 80162e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80162e4:	2300      	movs	r3, #0
 80162e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80162ee:	78fa      	ldrb	r2, [r7, #3]
 80162f0:	4611      	mov	r1, r2
 80162f2:	4618      	mov	r0, r3
 80162f4:	f7f2 f857 	bl	80083a6 <HAL_PCD_SetAddress>
 80162f8:	4603      	mov	r3, r0
 80162fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80162fc:	7bfb      	ldrb	r3, [r7, #15]
 80162fe:	4618      	mov	r0, r3
 8016300:	f000 f874 	bl	80163ec <USBD_Get_USB_Status>
 8016304:	4603      	mov	r3, r0
 8016306:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016308:	7bbb      	ldrb	r3, [r7, #14]
}
 801630a:	4618      	mov	r0, r3
 801630c:	3710      	adds	r7, #16
 801630e:	46bd      	mov	sp, r7
 8016310:	bd80      	pop	{r7, pc}

08016312 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016312:	b580      	push	{r7, lr}
 8016314:	b086      	sub	sp, #24
 8016316:	af00      	add	r7, sp, #0
 8016318:	60f8      	str	r0, [r7, #12]
 801631a:	607a      	str	r2, [r7, #4]
 801631c:	603b      	str	r3, [r7, #0]
 801631e:	460b      	mov	r3, r1
 8016320:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016322:	2300      	movs	r3, #0
 8016324:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016326:	2300      	movs	r3, #0
 8016328:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801632a:	68fb      	ldr	r3, [r7, #12]
 801632c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016330:	7af9      	ldrb	r1, [r7, #11]
 8016332:	683b      	ldr	r3, [r7, #0]
 8016334:	687a      	ldr	r2, [r7, #4]
 8016336:	f7f2 f970 	bl	800861a <HAL_PCD_EP_Transmit>
 801633a:	4603      	mov	r3, r0
 801633c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801633e:	7dfb      	ldrb	r3, [r7, #23]
 8016340:	4618      	mov	r0, r3
 8016342:	f000 f853 	bl	80163ec <USBD_Get_USB_Status>
 8016346:	4603      	mov	r3, r0
 8016348:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801634a:	7dbb      	ldrb	r3, [r7, #22]
}
 801634c:	4618      	mov	r0, r3
 801634e:	3718      	adds	r7, #24
 8016350:	46bd      	mov	sp, r7
 8016352:	bd80      	pop	{r7, pc}

08016354 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016354:	b580      	push	{r7, lr}
 8016356:	b086      	sub	sp, #24
 8016358:	af00      	add	r7, sp, #0
 801635a:	60f8      	str	r0, [r7, #12]
 801635c:	607a      	str	r2, [r7, #4]
 801635e:	603b      	str	r3, [r7, #0]
 8016360:	460b      	mov	r3, r1
 8016362:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016364:	2300      	movs	r3, #0
 8016366:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016368:	2300      	movs	r3, #0
 801636a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801636c:	68fb      	ldr	r3, [r7, #12]
 801636e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016372:	7af9      	ldrb	r1, [r7, #11]
 8016374:	683b      	ldr	r3, [r7, #0]
 8016376:	687a      	ldr	r2, [r7, #4]
 8016378:	f7f2 f8ec 	bl	8008554 <HAL_PCD_EP_Receive>
 801637c:	4603      	mov	r3, r0
 801637e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016380:	7dfb      	ldrb	r3, [r7, #23]
 8016382:	4618      	mov	r0, r3
 8016384:	f000 f832 	bl	80163ec <USBD_Get_USB_Status>
 8016388:	4603      	mov	r3, r0
 801638a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801638c:	7dbb      	ldrb	r3, [r7, #22]
}
 801638e:	4618      	mov	r0, r3
 8016390:	3718      	adds	r7, #24
 8016392:	46bd      	mov	sp, r7
 8016394:	bd80      	pop	{r7, pc}

08016396 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016396:	b580      	push	{r7, lr}
 8016398:	b082      	sub	sp, #8
 801639a:	af00      	add	r7, sp, #0
 801639c:	6078      	str	r0, [r7, #4]
 801639e:	460b      	mov	r3, r1
 80163a0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80163a8:	78fa      	ldrb	r2, [r7, #3]
 80163aa:	4611      	mov	r1, r2
 80163ac:	4618      	mov	r0, r3
 80163ae:	f7f2 f91c 	bl	80085ea <HAL_PCD_EP_GetRxCount>
 80163b2:	4603      	mov	r3, r0
}
 80163b4:	4618      	mov	r0, r3
 80163b6:	3708      	adds	r7, #8
 80163b8:	46bd      	mov	sp, r7
 80163ba:	bd80      	pop	{r7, pc}

080163bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80163bc:	b480      	push	{r7}
 80163be:	b083      	sub	sp, #12
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80163c4:	4b03      	ldr	r3, [pc, #12]	; (80163d4 <USBD_static_malloc+0x18>)
}
 80163c6:	4618      	mov	r0, r3
 80163c8:	370c      	adds	r7, #12
 80163ca:	46bd      	mov	sp, r7
 80163cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163d0:	4770      	bx	lr
 80163d2:	bf00      	nop
 80163d4:	20005bf0 	.word	0x20005bf0

080163d8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80163d8:	b480      	push	{r7}
 80163da:	b083      	sub	sp, #12
 80163dc:	af00      	add	r7, sp, #0
 80163de:	6078      	str	r0, [r7, #4]

}
 80163e0:	bf00      	nop
 80163e2:	370c      	adds	r7, #12
 80163e4:	46bd      	mov	sp, r7
 80163e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ea:	4770      	bx	lr

080163ec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80163ec:	b480      	push	{r7}
 80163ee:	b085      	sub	sp, #20
 80163f0:	af00      	add	r7, sp, #0
 80163f2:	4603      	mov	r3, r0
 80163f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80163f6:	2300      	movs	r3, #0
 80163f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80163fa:	79fb      	ldrb	r3, [r7, #7]
 80163fc:	2b03      	cmp	r3, #3
 80163fe:	d817      	bhi.n	8016430 <USBD_Get_USB_Status+0x44>
 8016400:	a201      	add	r2, pc, #4	; (adr r2, 8016408 <USBD_Get_USB_Status+0x1c>)
 8016402:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016406:	bf00      	nop
 8016408:	08016419 	.word	0x08016419
 801640c:	0801641f 	.word	0x0801641f
 8016410:	08016425 	.word	0x08016425
 8016414:	0801642b 	.word	0x0801642b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016418:	2300      	movs	r3, #0
 801641a:	73fb      	strb	r3, [r7, #15]
    break;
 801641c:	e00b      	b.n	8016436 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801641e:	2303      	movs	r3, #3
 8016420:	73fb      	strb	r3, [r7, #15]
    break;
 8016422:	e008      	b.n	8016436 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016424:	2301      	movs	r3, #1
 8016426:	73fb      	strb	r3, [r7, #15]
    break;
 8016428:	e005      	b.n	8016436 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801642a:	2303      	movs	r3, #3
 801642c:	73fb      	strb	r3, [r7, #15]
    break;
 801642e:	e002      	b.n	8016436 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016430:	2303      	movs	r3, #3
 8016432:	73fb      	strb	r3, [r7, #15]
    break;
 8016434:	bf00      	nop
  }
  return usb_status;
 8016436:	7bfb      	ldrb	r3, [r7, #15]
}
 8016438:	4618      	mov	r0, r3
 801643a:	3714      	adds	r7, #20
 801643c:	46bd      	mov	sp, r7
 801643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016442:	4770      	bx	lr

08016444 <__errno>:
 8016444:	4b01      	ldr	r3, [pc, #4]	; (801644c <__errno+0x8>)
 8016446:	6818      	ldr	r0, [r3, #0]
 8016448:	4770      	bx	lr
 801644a:	bf00      	nop
 801644c:	200001a0 	.word	0x200001a0

08016450 <std>:
 8016450:	2300      	movs	r3, #0
 8016452:	b510      	push	{r4, lr}
 8016454:	4604      	mov	r4, r0
 8016456:	e9c0 3300 	strd	r3, r3, [r0]
 801645a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801645e:	6083      	str	r3, [r0, #8]
 8016460:	8181      	strh	r1, [r0, #12]
 8016462:	6643      	str	r3, [r0, #100]	; 0x64
 8016464:	81c2      	strh	r2, [r0, #14]
 8016466:	6183      	str	r3, [r0, #24]
 8016468:	4619      	mov	r1, r3
 801646a:	2208      	movs	r2, #8
 801646c:	305c      	adds	r0, #92	; 0x5c
 801646e:	f000 f945 	bl	80166fc <memset>
 8016472:	4b05      	ldr	r3, [pc, #20]	; (8016488 <std+0x38>)
 8016474:	6263      	str	r3, [r4, #36]	; 0x24
 8016476:	4b05      	ldr	r3, [pc, #20]	; (801648c <std+0x3c>)
 8016478:	62a3      	str	r3, [r4, #40]	; 0x28
 801647a:	4b05      	ldr	r3, [pc, #20]	; (8016490 <std+0x40>)
 801647c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801647e:	4b05      	ldr	r3, [pc, #20]	; (8016494 <std+0x44>)
 8016480:	6224      	str	r4, [r4, #32]
 8016482:	6323      	str	r3, [r4, #48]	; 0x30
 8016484:	bd10      	pop	{r4, pc}
 8016486:	bf00      	nop
 8016488:	08017269 	.word	0x08017269
 801648c:	0801728b 	.word	0x0801728b
 8016490:	080172c3 	.word	0x080172c3
 8016494:	080172e7 	.word	0x080172e7

08016498 <_cleanup_r>:
 8016498:	4901      	ldr	r1, [pc, #4]	; (80164a0 <_cleanup_r+0x8>)
 801649a:	f000 b8af 	b.w	80165fc <_fwalk_reent>
 801649e:	bf00      	nop
 80164a0:	080181e5 	.word	0x080181e5

080164a4 <__sfmoreglue>:
 80164a4:	b570      	push	{r4, r5, r6, lr}
 80164a6:	1e4a      	subs	r2, r1, #1
 80164a8:	2568      	movs	r5, #104	; 0x68
 80164aa:	4355      	muls	r5, r2
 80164ac:	460e      	mov	r6, r1
 80164ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80164b2:	f000 f97b 	bl	80167ac <_malloc_r>
 80164b6:	4604      	mov	r4, r0
 80164b8:	b140      	cbz	r0, 80164cc <__sfmoreglue+0x28>
 80164ba:	2100      	movs	r1, #0
 80164bc:	e9c0 1600 	strd	r1, r6, [r0]
 80164c0:	300c      	adds	r0, #12
 80164c2:	60a0      	str	r0, [r4, #8]
 80164c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80164c8:	f000 f918 	bl	80166fc <memset>
 80164cc:	4620      	mov	r0, r4
 80164ce:	bd70      	pop	{r4, r5, r6, pc}

080164d0 <__sfp_lock_acquire>:
 80164d0:	4801      	ldr	r0, [pc, #4]	; (80164d8 <__sfp_lock_acquire+0x8>)
 80164d2:	f000 b8f2 	b.w	80166ba <__retarget_lock_acquire_recursive>
 80164d6:	bf00      	nop
 80164d8:	20016cc8 	.word	0x20016cc8

080164dc <__sfp_lock_release>:
 80164dc:	4801      	ldr	r0, [pc, #4]	; (80164e4 <__sfp_lock_release+0x8>)
 80164de:	f000 b8ed 	b.w	80166bc <__retarget_lock_release_recursive>
 80164e2:	bf00      	nop
 80164e4:	20016cc8 	.word	0x20016cc8

080164e8 <__sinit_lock_acquire>:
 80164e8:	4801      	ldr	r0, [pc, #4]	; (80164f0 <__sinit_lock_acquire+0x8>)
 80164ea:	f000 b8e6 	b.w	80166ba <__retarget_lock_acquire_recursive>
 80164ee:	bf00      	nop
 80164f0:	20016cc3 	.word	0x20016cc3

080164f4 <__sinit_lock_release>:
 80164f4:	4801      	ldr	r0, [pc, #4]	; (80164fc <__sinit_lock_release+0x8>)
 80164f6:	f000 b8e1 	b.w	80166bc <__retarget_lock_release_recursive>
 80164fa:	bf00      	nop
 80164fc:	20016cc3 	.word	0x20016cc3

08016500 <__sinit>:
 8016500:	b510      	push	{r4, lr}
 8016502:	4604      	mov	r4, r0
 8016504:	f7ff fff0 	bl	80164e8 <__sinit_lock_acquire>
 8016508:	69a3      	ldr	r3, [r4, #24]
 801650a:	b11b      	cbz	r3, 8016514 <__sinit+0x14>
 801650c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016510:	f7ff bff0 	b.w	80164f4 <__sinit_lock_release>
 8016514:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016518:	6523      	str	r3, [r4, #80]	; 0x50
 801651a:	4b13      	ldr	r3, [pc, #76]	; (8016568 <__sinit+0x68>)
 801651c:	4a13      	ldr	r2, [pc, #76]	; (801656c <__sinit+0x6c>)
 801651e:	681b      	ldr	r3, [r3, #0]
 8016520:	62a2      	str	r2, [r4, #40]	; 0x28
 8016522:	42a3      	cmp	r3, r4
 8016524:	bf04      	itt	eq
 8016526:	2301      	moveq	r3, #1
 8016528:	61a3      	streq	r3, [r4, #24]
 801652a:	4620      	mov	r0, r4
 801652c:	f000 f820 	bl	8016570 <__sfp>
 8016530:	6060      	str	r0, [r4, #4]
 8016532:	4620      	mov	r0, r4
 8016534:	f000 f81c 	bl	8016570 <__sfp>
 8016538:	60a0      	str	r0, [r4, #8]
 801653a:	4620      	mov	r0, r4
 801653c:	f000 f818 	bl	8016570 <__sfp>
 8016540:	2200      	movs	r2, #0
 8016542:	60e0      	str	r0, [r4, #12]
 8016544:	2104      	movs	r1, #4
 8016546:	6860      	ldr	r0, [r4, #4]
 8016548:	f7ff ff82 	bl	8016450 <std>
 801654c:	68a0      	ldr	r0, [r4, #8]
 801654e:	2201      	movs	r2, #1
 8016550:	2109      	movs	r1, #9
 8016552:	f7ff ff7d 	bl	8016450 <std>
 8016556:	68e0      	ldr	r0, [r4, #12]
 8016558:	2202      	movs	r2, #2
 801655a:	2112      	movs	r1, #18
 801655c:	f7ff ff78 	bl	8016450 <std>
 8016560:	2301      	movs	r3, #1
 8016562:	61a3      	str	r3, [r4, #24]
 8016564:	e7d2      	b.n	801650c <__sinit+0xc>
 8016566:	bf00      	nop
 8016568:	0801a310 	.word	0x0801a310
 801656c:	08016499 	.word	0x08016499

08016570 <__sfp>:
 8016570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016572:	4607      	mov	r7, r0
 8016574:	f7ff ffac 	bl	80164d0 <__sfp_lock_acquire>
 8016578:	4b1e      	ldr	r3, [pc, #120]	; (80165f4 <__sfp+0x84>)
 801657a:	681e      	ldr	r6, [r3, #0]
 801657c:	69b3      	ldr	r3, [r6, #24]
 801657e:	b913      	cbnz	r3, 8016586 <__sfp+0x16>
 8016580:	4630      	mov	r0, r6
 8016582:	f7ff ffbd 	bl	8016500 <__sinit>
 8016586:	3648      	adds	r6, #72	; 0x48
 8016588:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801658c:	3b01      	subs	r3, #1
 801658e:	d503      	bpl.n	8016598 <__sfp+0x28>
 8016590:	6833      	ldr	r3, [r6, #0]
 8016592:	b30b      	cbz	r3, 80165d8 <__sfp+0x68>
 8016594:	6836      	ldr	r6, [r6, #0]
 8016596:	e7f7      	b.n	8016588 <__sfp+0x18>
 8016598:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801659c:	b9d5      	cbnz	r5, 80165d4 <__sfp+0x64>
 801659e:	4b16      	ldr	r3, [pc, #88]	; (80165f8 <__sfp+0x88>)
 80165a0:	60e3      	str	r3, [r4, #12]
 80165a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80165a6:	6665      	str	r5, [r4, #100]	; 0x64
 80165a8:	f000 f886 	bl	80166b8 <__retarget_lock_init_recursive>
 80165ac:	f7ff ff96 	bl	80164dc <__sfp_lock_release>
 80165b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80165b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80165b8:	6025      	str	r5, [r4, #0]
 80165ba:	61a5      	str	r5, [r4, #24]
 80165bc:	2208      	movs	r2, #8
 80165be:	4629      	mov	r1, r5
 80165c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80165c4:	f000 f89a 	bl	80166fc <memset>
 80165c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80165cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80165d0:	4620      	mov	r0, r4
 80165d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80165d4:	3468      	adds	r4, #104	; 0x68
 80165d6:	e7d9      	b.n	801658c <__sfp+0x1c>
 80165d8:	2104      	movs	r1, #4
 80165da:	4638      	mov	r0, r7
 80165dc:	f7ff ff62 	bl	80164a4 <__sfmoreglue>
 80165e0:	4604      	mov	r4, r0
 80165e2:	6030      	str	r0, [r6, #0]
 80165e4:	2800      	cmp	r0, #0
 80165e6:	d1d5      	bne.n	8016594 <__sfp+0x24>
 80165e8:	f7ff ff78 	bl	80164dc <__sfp_lock_release>
 80165ec:	230c      	movs	r3, #12
 80165ee:	603b      	str	r3, [r7, #0]
 80165f0:	e7ee      	b.n	80165d0 <__sfp+0x60>
 80165f2:	bf00      	nop
 80165f4:	0801a310 	.word	0x0801a310
 80165f8:	ffff0001 	.word	0xffff0001

080165fc <_fwalk_reent>:
 80165fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016600:	4606      	mov	r6, r0
 8016602:	4688      	mov	r8, r1
 8016604:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016608:	2700      	movs	r7, #0
 801660a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801660e:	f1b9 0901 	subs.w	r9, r9, #1
 8016612:	d505      	bpl.n	8016620 <_fwalk_reent+0x24>
 8016614:	6824      	ldr	r4, [r4, #0]
 8016616:	2c00      	cmp	r4, #0
 8016618:	d1f7      	bne.n	801660a <_fwalk_reent+0xe>
 801661a:	4638      	mov	r0, r7
 801661c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016620:	89ab      	ldrh	r3, [r5, #12]
 8016622:	2b01      	cmp	r3, #1
 8016624:	d907      	bls.n	8016636 <_fwalk_reent+0x3a>
 8016626:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801662a:	3301      	adds	r3, #1
 801662c:	d003      	beq.n	8016636 <_fwalk_reent+0x3a>
 801662e:	4629      	mov	r1, r5
 8016630:	4630      	mov	r0, r6
 8016632:	47c0      	blx	r8
 8016634:	4307      	orrs	r7, r0
 8016636:	3568      	adds	r5, #104	; 0x68
 8016638:	e7e9      	b.n	801660e <_fwalk_reent+0x12>
	...

0801663c <__libc_init_array>:
 801663c:	b570      	push	{r4, r5, r6, lr}
 801663e:	4d0d      	ldr	r5, [pc, #52]	; (8016674 <__libc_init_array+0x38>)
 8016640:	4c0d      	ldr	r4, [pc, #52]	; (8016678 <__libc_init_array+0x3c>)
 8016642:	1b64      	subs	r4, r4, r5
 8016644:	10a4      	asrs	r4, r4, #2
 8016646:	2600      	movs	r6, #0
 8016648:	42a6      	cmp	r6, r4
 801664a:	d109      	bne.n	8016660 <__libc_init_array+0x24>
 801664c:	4d0b      	ldr	r5, [pc, #44]	; (801667c <__libc_init_array+0x40>)
 801664e:	4c0c      	ldr	r4, [pc, #48]	; (8016680 <__libc_init_array+0x44>)
 8016650:	f002 fea4 	bl	801939c <_init>
 8016654:	1b64      	subs	r4, r4, r5
 8016656:	10a4      	asrs	r4, r4, #2
 8016658:	2600      	movs	r6, #0
 801665a:	42a6      	cmp	r6, r4
 801665c:	d105      	bne.n	801666a <__libc_init_array+0x2e>
 801665e:	bd70      	pop	{r4, r5, r6, pc}
 8016660:	f855 3b04 	ldr.w	r3, [r5], #4
 8016664:	4798      	blx	r3
 8016666:	3601      	adds	r6, #1
 8016668:	e7ee      	b.n	8016648 <__libc_init_array+0xc>
 801666a:	f855 3b04 	ldr.w	r3, [r5], #4
 801666e:	4798      	blx	r3
 8016670:	3601      	adds	r6, #1
 8016672:	e7f2      	b.n	801665a <__libc_init_array+0x1e>
 8016674:	0801a6c4 	.word	0x0801a6c4
 8016678:	0801a6c4 	.word	0x0801a6c4
 801667c:	0801a6c4 	.word	0x0801a6c4
 8016680:	0801a6c8 	.word	0x0801a6c8

08016684 <__itoa>:
 8016684:	1e93      	subs	r3, r2, #2
 8016686:	2b22      	cmp	r3, #34	; 0x22
 8016688:	b510      	push	{r4, lr}
 801668a:	460c      	mov	r4, r1
 801668c:	d904      	bls.n	8016698 <__itoa+0x14>
 801668e:	2300      	movs	r3, #0
 8016690:	700b      	strb	r3, [r1, #0]
 8016692:	461c      	mov	r4, r3
 8016694:	4620      	mov	r0, r4
 8016696:	bd10      	pop	{r4, pc}
 8016698:	2a0a      	cmp	r2, #10
 801669a:	d109      	bne.n	80166b0 <__itoa+0x2c>
 801669c:	2800      	cmp	r0, #0
 801669e:	da07      	bge.n	80166b0 <__itoa+0x2c>
 80166a0:	232d      	movs	r3, #45	; 0x2d
 80166a2:	700b      	strb	r3, [r1, #0]
 80166a4:	4240      	negs	r0, r0
 80166a6:	2101      	movs	r1, #1
 80166a8:	4421      	add	r1, r4
 80166aa:	f000 fe37 	bl	801731c <__utoa>
 80166ae:	e7f1      	b.n	8016694 <__itoa+0x10>
 80166b0:	2100      	movs	r1, #0
 80166b2:	e7f9      	b.n	80166a8 <__itoa+0x24>

080166b4 <itoa>:
 80166b4:	f7ff bfe6 	b.w	8016684 <__itoa>

080166b8 <__retarget_lock_init_recursive>:
 80166b8:	4770      	bx	lr

080166ba <__retarget_lock_acquire_recursive>:
 80166ba:	4770      	bx	lr

080166bc <__retarget_lock_release_recursive>:
 80166bc:	4770      	bx	lr
	...

080166c0 <malloc>:
 80166c0:	4b02      	ldr	r3, [pc, #8]	; (80166cc <malloc+0xc>)
 80166c2:	4601      	mov	r1, r0
 80166c4:	6818      	ldr	r0, [r3, #0]
 80166c6:	f000 b871 	b.w	80167ac <_malloc_r>
 80166ca:	bf00      	nop
 80166cc:	200001a0 	.word	0x200001a0

080166d0 <free>:
 80166d0:	4b02      	ldr	r3, [pc, #8]	; (80166dc <free+0xc>)
 80166d2:	4601      	mov	r1, r0
 80166d4:	6818      	ldr	r0, [r3, #0]
 80166d6:	f000 b819 	b.w	801670c <_free_r>
 80166da:	bf00      	nop
 80166dc:	200001a0 	.word	0x200001a0

080166e0 <memcpy>:
 80166e0:	440a      	add	r2, r1
 80166e2:	4291      	cmp	r1, r2
 80166e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80166e8:	d100      	bne.n	80166ec <memcpy+0xc>
 80166ea:	4770      	bx	lr
 80166ec:	b510      	push	{r4, lr}
 80166ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80166f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80166f6:	4291      	cmp	r1, r2
 80166f8:	d1f9      	bne.n	80166ee <memcpy+0xe>
 80166fa:	bd10      	pop	{r4, pc}

080166fc <memset>:
 80166fc:	4402      	add	r2, r0
 80166fe:	4603      	mov	r3, r0
 8016700:	4293      	cmp	r3, r2
 8016702:	d100      	bne.n	8016706 <memset+0xa>
 8016704:	4770      	bx	lr
 8016706:	f803 1b01 	strb.w	r1, [r3], #1
 801670a:	e7f9      	b.n	8016700 <memset+0x4>

0801670c <_free_r>:
 801670c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801670e:	2900      	cmp	r1, #0
 8016710:	d048      	beq.n	80167a4 <_free_r+0x98>
 8016712:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016716:	9001      	str	r0, [sp, #4]
 8016718:	2b00      	cmp	r3, #0
 801671a:	f1a1 0404 	sub.w	r4, r1, #4
 801671e:	bfb8      	it	lt
 8016720:	18e4      	addlt	r4, r4, r3
 8016722:	f001 fdb1 	bl	8018288 <__malloc_lock>
 8016726:	4a20      	ldr	r2, [pc, #128]	; (80167a8 <_free_r+0x9c>)
 8016728:	9801      	ldr	r0, [sp, #4]
 801672a:	6813      	ldr	r3, [r2, #0]
 801672c:	4615      	mov	r5, r2
 801672e:	b933      	cbnz	r3, 801673e <_free_r+0x32>
 8016730:	6063      	str	r3, [r4, #4]
 8016732:	6014      	str	r4, [r2, #0]
 8016734:	b003      	add	sp, #12
 8016736:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801673a:	f001 bdab 	b.w	8018294 <__malloc_unlock>
 801673e:	42a3      	cmp	r3, r4
 8016740:	d90b      	bls.n	801675a <_free_r+0x4e>
 8016742:	6821      	ldr	r1, [r4, #0]
 8016744:	1862      	adds	r2, r4, r1
 8016746:	4293      	cmp	r3, r2
 8016748:	bf04      	itt	eq
 801674a:	681a      	ldreq	r2, [r3, #0]
 801674c:	685b      	ldreq	r3, [r3, #4]
 801674e:	6063      	str	r3, [r4, #4]
 8016750:	bf04      	itt	eq
 8016752:	1852      	addeq	r2, r2, r1
 8016754:	6022      	streq	r2, [r4, #0]
 8016756:	602c      	str	r4, [r5, #0]
 8016758:	e7ec      	b.n	8016734 <_free_r+0x28>
 801675a:	461a      	mov	r2, r3
 801675c:	685b      	ldr	r3, [r3, #4]
 801675e:	b10b      	cbz	r3, 8016764 <_free_r+0x58>
 8016760:	42a3      	cmp	r3, r4
 8016762:	d9fa      	bls.n	801675a <_free_r+0x4e>
 8016764:	6811      	ldr	r1, [r2, #0]
 8016766:	1855      	adds	r5, r2, r1
 8016768:	42a5      	cmp	r5, r4
 801676a:	d10b      	bne.n	8016784 <_free_r+0x78>
 801676c:	6824      	ldr	r4, [r4, #0]
 801676e:	4421      	add	r1, r4
 8016770:	1854      	adds	r4, r2, r1
 8016772:	42a3      	cmp	r3, r4
 8016774:	6011      	str	r1, [r2, #0]
 8016776:	d1dd      	bne.n	8016734 <_free_r+0x28>
 8016778:	681c      	ldr	r4, [r3, #0]
 801677a:	685b      	ldr	r3, [r3, #4]
 801677c:	6053      	str	r3, [r2, #4]
 801677e:	4421      	add	r1, r4
 8016780:	6011      	str	r1, [r2, #0]
 8016782:	e7d7      	b.n	8016734 <_free_r+0x28>
 8016784:	d902      	bls.n	801678c <_free_r+0x80>
 8016786:	230c      	movs	r3, #12
 8016788:	6003      	str	r3, [r0, #0]
 801678a:	e7d3      	b.n	8016734 <_free_r+0x28>
 801678c:	6825      	ldr	r5, [r4, #0]
 801678e:	1961      	adds	r1, r4, r5
 8016790:	428b      	cmp	r3, r1
 8016792:	bf04      	itt	eq
 8016794:	6819      	ldreq	r1, [r3, #0]
 8016796:	685b      	ldreq	r3, [r3, #4]
 8016798:	6063      	str	r3, [r4, #4]
 801679a:	bf04      	itt	eq
 801679c:	1949      	addeq	r1, r1, r5
 801679e:	6021      	streq	r1, [r4, #0]
 80167a0:	6054      	str	r4, [r2, #4]
 80167a2:	e7c7      	b.n	8016734 <_free_r+0x28>
 80167a4:	b003      	add	sp, #12
 80167a6:	bd30      	pop	{r4, r5, pc}
 80167a8:	20005e10 	.word	0x20005e10

080167ac <_malloc_r>:
 80167ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167ae:	1ccd      	adds	r5, r1, #3
 80167b0:	f025 0503 	bic.w	r5, r5, #3
 80167b4:	3508      	adds	r5, #8
 80167b6:	2d0c      	cmp	r5, #12
 80167b8:	bf38      	it	cc
 80167ba:	250c      	movcc	r5, #12
 80167bc:	2d00      	cmp	r5, #0
 80167be:	4606      	mov	r6, r0
 80167c0:	db01      	blt.n	80167c6 <_malloc_r+0x1a>
 80167c2:	42a9      	cmp	r1, r5
 80167c4:	d903      	bls.n	80167ce <_malloc_r+0x22>
 80167c6:	230c      	movs	r3, #12
 80167c8:	6033      	str	r3, [r6, #0]
 80167ca:	2000      	movs	r0, #0
 80167cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80167ce:	f001 fd5b 	bl	8018288 <__malloc_lock>
 80167d2:	4921      	ldr	r1, [pc, #132]	; (8016858 <_malloc_r+0xac>)
 80167d4:	680a      	ldr	r2, [r1, #0]
 80167d6:	4614      	mov	r4, r2
 80167d8:	b99c      	cbnz	r4, 8016802 <_malloc_r+0x56>
 80167da:	4f20      	ldr	r7, [pc, #128]	; (801685c <_malloc_r+0xb0>)
 80167dc:	683b      	ldr	r3, [r7, #0]
 80167de:	b923      	cbnz	r3, 80167ea <_malloc_r+0x3e>
 80167e0:	4621      	mov	r1, r4
 80167e2:	4630      	mov	r0, r6
 80167e4:	f000 fd10 	bl	8017208 <_sbrk_r>
 80167e8:	6038      	str	r0, [r7, #0]
 80167ea:	4629      	mov	r1, r5
 80167ec:	4630      	mov	r0, r6
 80167ee:	f000 fd0b 	bl	8017208 <_sbrk_r>
 80167f2:	1c43      	adds	r3, r0, #1
 80167f4:	d123      	bne.n	801683e <_malloc_r+0x92>
 80167f6:	230c      	movs	r3, #12
 80167f8:	6033      	str	r3, [r6, #0]
 80167fa:	4630      	mov	r0, r6
 80167fc:	f001 fd4a 	bl	8018294 <__malloc_unlock>
 8016800:	e7e3      	b.n	80167ca <_malloc_r+0x1e>
 8016802:	6823      	ldr	r3, [r4, #0]
 8016804:	1b5b      	subs	r3, r3, r5
 8016806:	d417      	bmi.n	8016838 <_malloc_r+0x8c>
 8016808:	2b0b      	cmp	r3, #11
 801680a:	d903      	bls.n	8016814 <_malloc_r+0x68>
 801680c:	6023      	str	r3, [r4, #0]
 801680e:	441c      	add	r4, r3
 8016810:	6025      	str	r5, [r4, #0]
 8016812:	e004      	b.n	801681e <_malloc_r+0x72>
 8016814:	6863      	ldr	r3, [r4, #4]
 8016816:	42a2      	cmp	r2, r4
 8016818:	bf0c      	ite	eq
 801681a:	600b      	streq	r3, [r1, #0]
 801681c:	6053      	strne	r3, [r2, #4]
 801681e:	4630      	mov	r0, r6
 8016820:	f001 fd38 	bl	8018294 <__malloc_unlock>
 8016824:	f104 000b 	add.w	r0, r4, #11
 8016828:	1d23      	adds	r3, r4, #4
 801682a:	f020 0007 	bic.w	r0, r0, #7
 801682e:	1ac2      	subs	r2, r0, r3
 8016830:	d0cc      	beq.n	80167cc <_malloc_r+0x20>
 8016832:	1a1b      	subs	r3, r3, r0
 8016834:	50a3      	str	r3, [r4, r2]
 8016836:	e7c9      	b.n	80167cc <_malloc_r+0x20>
 8016838:	4622      	mov	r2, r4
 801683a:	6864      	ldr	r4, [r4, #4]
 801683c:	e7cc      	b.n	80167d8 <_malloc_r+0x2c>
 801683e:	1cc4      	adds	r4, r0, #3
 8016840:	f024 0403 	bic.w	r4, r4, #3
 8016844:	42a0      	cmp	r0, r4
 8016846:	d0e3      	beq.n	8016810 <_malloc_r+0x64>
 8016848:	1a21      	subs	r1, r4, r0
 801684a:	4630      	mov	r0, r6
 801684c:	f000 fcdc 	bl	8017208 <_sbrk_r>
 8016850:	3001      	adds	r0, #1
 8016852:	d1dd      	bne.n	8016810 <_malloc_r+0x64>
 8016854:	e7cf      	b.n	80167f6 <_malloc_r+0x4a>
 8016856:	bf00      	nop
 8016858:	20005e10 	.word	0x20005e10
 801685c:	20005e14 	.word	0x20005e14

08016860 <__cvt>:
 8016860:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016864:	ec55 4b10 	vmov	r4, r5, d0
 8016868:	2d00      	cmp	r5, #0
 801686a:	460e      	mov	r6, r1
 801686c:	4619      	mov	r1, r3
 801686e:	462b      	mov	r3, r5
 8016870:	bfbb      	ittet	lt
 8016872:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8016876:	461d      	movlt	r5, r3
 8016878:	2300      	movge	r3, #0
 801687a:	232d      	movlt	r3, #45	; 0x2d
 801687c:	700b      	strb	r3, [r1, #0]
 801687e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016880:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8016884:	4691      	mov	r9, r2
 8016886:	f023 0820 	bic.w	r8, r3, #32
 801688a:	bfbc      	itt	lt
 801688c:	4622      	movlt	r2, r4
 801688e:	4614      	movlt	r4, r2
 8016890:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016894:	d005      	beq.n	80168a2 <__cvt+0x42>
 8016896:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801689a:	d100      	bne.n	801689e <__cvt+0x3e>
 801689c:	3601      	adds	r6, #1
 801689e:	2102      	movs	r1, #2
 80168a0:	e000      	b.n	80168a4 <__cvt+0x44>
 80168a2:	2103      	movs	r1, #3
 80168a4:	ab03      	add	r3, sp, #12
 80168a6:	9301      	str	r3, [sp, #4]
 80168a8:	ab02      	add	r3, sp, #8
 80168aa:	9300      	str	r3, [sp, #0]
 80168ac:	ec45 4b10 	vmov	d0, r4, r5
 80168b0:	4653      	mov	r3, sl
 80168b2:	4632      	mov	r2, r6
 80168b4:	f000 fe24 	bl	8017500 <_dtoa_r>
 80168b8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80168bc:	4607      	mov	r7, r0
 80168be:	d102      	bne.n	80168c6 <__cvt+0x66>
 80168c0:	f019 0f01 	tst.w	r9, #1
 80168c4:	d022      	beq.n	801690c <__cvt+0xac>
 80168c6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80168ca:	eb07 0906 	add.w	r9, r7, r6
 80168ce:	d110      	bne.n	80168f2 <__cvt+0x92>
 80168d0:	783b      	ldrb	r3, [r7, #0]
 80168d2:	2b30      	cmp	r3, #48	; 0x30
 80168d4:	d10a      	bne.n	80168ec <__cvt+0x8c>
 80168d6:	2200      	movs	r2, #0
 80168d8:	2300      	movs	r3, #0
 80168da:	4620      	mov	r0, r4
 80168dc:	4629      	mov	r1, r5
 80168de:	f7ea f8f3 	bl	8000ac8 <__aeabi_dcmpeq>
 80168e2:	b918      	cbnz	r0, 80168ec <__cvt+0x8c>
 80168e4:	f1c6 0601 	rsb	r6, r6, #1
 80168e8:	f8ca 6000 	str.w	r6, [sl]
 80168ec:	f8da 3000 	ldr.w	r3, [sl]
 80168f0:	4499      	add	r9, r3
 80168f2:	2200      	movs	r2, #0
 80168f4:	2300      	movs	r3, #0
 80168f6:	4620      	mov	r0, r4
 80168f8:	4629      	mov	r1, r5
 80168fa:	f7ea f8e5 	bl	8000ac8 <__aeabi_dcmpeq>
 80168fe:	b108      	cbz	r0, 8016904 <__cvt+0xa4>
 8016900:	f8cd 900c 	str.w	r9, [sp, #12]
 8016904:	2230      	movs	r2, #48	; 0x30
 8016906:	9b03      	ldr	r3, [sp, #12]
 8016908:	454b      	cmp	r3, r9
 801690a:	d307      	bcc.n	801691c <__cvt+0xbc>
 801690c:	9b03      	ldr	r3, [sp, #12]
 801690e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8016910:	1bdb      	subs	r3, r3, r7
 8016912:	4638      	mov	r0, r7
 8016914:	6013      	str	r3, [r2, #0]
 8016916:	b004      	add	sp, #16
 8016918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801691c:	1c59      	adds	r1, r3, #1
 801691e:	9103      	str	r1, [sp, #12]
 8016920:	701a      	strb	r2, [r3, #0]
 8016922:	e7f0      	b.n	8016906 <__cvt+0xa6>

08016924 <__exponent>:
 8016924:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016926:	4603      	mov	r3, r0
 8016928:	2900      	cmp	r1, #0
 801692a:	bfb8      	it	lt
 801692c:	4249      	neglt	r1, r1
 801692e:	f803 2b02 	strb.w	r2, [r3], #2
 8016932:	bfb4      	ite	lt
 8016934:	222d      	movlt	r2, #45	; 0x2d
 8016936:	222b      	movge	r2, #43	; 0x2b
 8016938:	2909      	cmp	r1, #9
 801693a:	7042      	strb	r2, [r0, #1]
 801693c:	dd2a      	ble.n	8016994 <__exponent+0x70>
 801693e:	f10d 0407 	add.w	r4, sp, #7
 8016942:	46a4      	mov	ip, r4
 8016944:	270a      	movs	r7, #10
 8016946:	46a6      	mov	lr, r4
 8016948:	460a      	mov	r2, r1
 801694a:	fb91 f6f7 	sdiv	r6, r1, r7
 801694e:	fb07 1516 	mls	r5, r7, r6, r1
 8016952:	3530      	adds	r5, #48	; 0x30
 8016954:	2a63      	cmp	r2, #99	; 0x63
 8016956:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801695a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801695e:	4631      	mov	r1, r6
 8016960:	dcf1      	bgt.n	8016946 <__exponent+0x22>
 8016962:	3130      	adds	r1, #48	; 0x30
 8016964:	f1ae 0502 	sub.w	r5, lr, #2
 8016968:	f804 1c01 	strb.w	r1, [r4, #-1]
 801696c:	1c44      	adds	r4, r0, #1
 801696e:	4629      	mov	r1, r5
 8016970:	4561      	cmp	r1, ip
 8016972:	d30a      	bcc.n	801698a <__exponent+0x66>
 8016974:	f10d 0209 	add.w	r2, sp, #9
 8016978:	eba2 020e 	sub.w	r2, r2, lr
 801697c:	4565      	cmp	r5, ip
 801697e:	bf88      	it	hi
 8016980:	2200      	movhi	r2, #0
 8016982:	4413      	add	r3, r2
 8016984:	1a18      	subs	r0, r3, r0
 8016986:	b003      	add	sp, #12
 8016988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801698a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801698e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8016992:	e7ed      	b.n	8016970 <__exponent+0x4c>
 8016994:	2330      	movs	r3, #48	; 0x30
 8016996:	3130      	adds	r1, #48	; 0x30
 8016998:	7083      	strb	r3, [r0, #2]
 801699a:	70c1      	strb	r1, [r0, #3]
 801699c:	1d03      	adds	r3, r0, #4
 801699e:	e7f1      	b.n	8016984 <__exponent+0x60>

080169a0 <_printf_float>:
 80169a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169a4:	ed2d 8b02 	vpush	{d8}
 80169a8:	b08d      	sub	sp, #52	; 0x34
 80169aa:	460c      	mov	r4, r1
 80169ac:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80169b0:	4616      	mov	r6, r2
 80169b2:	461f      	mov	r7, r3
 80169b4:	4605      	mov	r5, r0
 80169b6:	f001 fc51 	bl	801825c <_localeconv_r>
 80169ba:	f8d0 a000 	ldr.w	sl, [r0]
 80169be:	4650      	mov	r0, sl
 80169c0:	f7e9 fc06 	bl	80001d0 <strlen>
 80169c4:	2300      	movs	r3, #0
 80169c6:	930a      	str	r3, [sp, #40]	; 0x28
 80169c8:	6823      	ldr	r3, [r4, #0]
 80169ca:	9305      	str	r3, [sp, #20]
 80169cc:	f8d8 3000 	ldr.w	r3, [r8]
 80169d0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80169d4:	3307      	adds	r3, #7
 80169d6:	f023 0307 	bic.w	r3, r3, #7
 80169da:	f103 0208 	add.w	r2, r3, #8
 80169de:	f8c8 2000 	str.w	r2, [r8]
 80169e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169e6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80169ea:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80169ee:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80169f2:	9307      	str	r3, [sp, #28]
 80169f4:	f8cd 8018 	str.w	r8, [sp, #24]
 80169f8:	ee08 0a10 	vmov	s16, r0
 80169fc:	4b9f      	ldr	r3, [pc, #636]	; (8016c7c <_printf_float+0x2dc>)
 80169fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016a02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016a06:	f7ea f891 	bl	8000b2c <__aeabi_dcmpun>
 8016a0a:	bb88      	cbnz	r0, 8016a70 <_printf_float+0xd0>
 8016a0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8016a10:	4b9a      	ldr	r3, [pc, #616]	; (8016c7c <_printf_float+0x2dc>)
 8016a12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016a16:	f7ea f86b 	bl	8000af0 <__aeabi_dcmple>
 8016a1a:	bb48      	cbnz	r0, 8016a70 <_printf_float+0xd0>
 8016a1c:	2200      	movs	r2, #0
 8016a1e:	2300      	movs	r3, #0
 8016a20:	4640      	mov	r0, r8
 8016a22:	4649      	mov	r1, r9
 8016a24:	f7ea f85a 	bl	8000adc <__aeabi_dcmplt>
 8016a28:	b110      	cbz	r0, 8016a30 <_printf_float+0x90>
 8016a2a:	232d      	movs	r3, #45	; 0x2d
 8016a2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016a30:	4b93      	ldr	r3, [pc, #588]	; (8016c80 <_printf_float+0x2e0>)
 8016a32:	4894      	ldr	r0, [pc, #592]	; (8016c84 <_printf_float+0x2e4>)
 8016a34:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8016a38:	bf94      	ite	ls
 8016a3a:	4698      	movls	r8, r3
 8016a3c:	4680      	movhi	r8, r0
 8016a3e:	2303      	movs	r3, #3
 8016a40:	6123      	str	r3, [r4, #16]
 8016a42:	9b05      	ldr	r3, [sp, #20]
 8016a44:	f023 0204 	bic.w	r2, r3, #4
 8016a48:	6022      	str	r2, [r4, #0]
 8016a4a:	f04f 0900 	mov.w	r9, #0
 8016a4e:	9700      	str	r7, [sp, #0]
 8016a50:	4633      	mov	r3, r6
 8016a52:	aa0b      	add	r2, sp, #44	; 0x2c
 8016a54:	4621      	mov	r1, r4
 8016a56:	4628      	mov	r0, r5
 8016a58:	f000 f9d8 	bl	8016e0c <_printf_common>
 8016a5c:	3001      	adds	r0, #1
 8016a5e:	f040 8090 	bne.w	8016b82 <_printf_float+0x1e2>
 8016a62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016a66:	b00d      	add	sp, #52	; 0x34
 8016a68:	ecbd 8b02 	vpop	{d8}
 8016a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016a70:	4642      	mov	r2, r8
 8016a72:	464b      	mov	r3, r9
 8016a74:	4640      	mov	r0, r8
 8016a76:	4649      	mov	r1, r9
 8016a78:	f7ea f858 	bl	8000b2c <__aeabi_dcmpun>
 8016a7c:	b140      	cbz	r0, 8016a90 <_printf_float+0xf0>
 8016a7e:	464b      	mov	r3, r9
 8016a80:	2b00      	cmp	r3, #0
 8016a82:	bfbc      	itt	lt
 8016a84:	232d      	movlt	r3, #45	; 0x2d
 8016a86:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8016a8a:	487f      	ldr	r0, [pc, #508]	; (8016c88 <_printf_float+0x2e8>)
 8016a8c:	4b7f      	ldr	r3, [pc, #508]	; (8016c8c <_printf_float+0x2ec>)
 8016a8e:	e7d1      	b.n	8016a34 <_printf_float+0x94>
 8016a90:	6863      	ldr	r3, [r4, #4]
 8016a92:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8016a96:	9206      	str	r2, [sp, #24]
 8016a98:	1c5a      	adds	r2, r3, #1
 8016a9a:	d13f      	bne.n	8016b1c <_printf_float+0x17c>
 8016a9c:	2306      	movs	r3, #6
 8016a9e:	6063      	str	r3, [r4, #4]
 8016aa0:	9b05      	ldr	r3, [sp, #20]
 8016aa2:	6861      	ldr	r1, [r4, #4]
 8016aa4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016aa8:	2300      	movs	r3, #0
 8016aaa:	9303      	str	r3, [sp, #12]
 8016aac:	ab0a      	add	r3, sp, #40	; 0x28
 8016aae:	e9cd b301 	strd	fp, r3, [sp, #4]
 8016ab2:	ab09      	add	r3, sp, #36	; 0x24
 8016ab4:	ec49 8b10 	vmov	d0, r8, r9
 8016ab8:	9300      	str	r3, [sp, #0]
 8016aba:	6022      	str	r2, [r4, #0]
 8016abc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8016ac0:	4628      	mov	r0, r5
 8016ac2:	f7ff fecd 	bl	8016860 <__cvt>
 8016ac6:	9b06      	ldr	r3, [sp, #24]
 8016ac8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016aca:	2b47      	cmp	r3, #71	; 0x47
 8016acc:	4680      	mov	r8, r0
 8016ace:	d108      	bne.n	8016ae2 <_printf_float+0x142>
 8016ad0:	1cc8      	adds	r0, r1, #3
 8016ad2:	db02      	blt.n	8016ada <_printf_float+0x13a>
 8016ad4:	6863      	ldr	r3, [r4, #4]
 8016ad6:	4299      	cmp	r1, r3
 8016ad8:	dd41      	ble.n	8016b5e <_printf_float+0x1be>
 8016ada:	f1ab 0b02 	sub.w	fp, fp, #2
 8016ade:	fa5f fb8b 	uxtb.w	fp, fp
 8016ae2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016ae6:	d820      	bhi.n	8016b2a <_printf_float+0x18a>
 8016ae8:	3901      	subs	r1, #1
 8016aea:	465a      	mov	r2, fp
 8016aec:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8016af0:	9109      	str	r1, [sp, #36]	; 0x24
 8016af2:	f7ff ff17 	bl	8016924 <__exponent>
 8016af6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016af8:	1813      	adds	r3, r2, r0
 8016afa:	2a01      	cmp	r2, #1
 8016afc:	4681      	mov	r9, r0
 8016afe:	6123      	str	r3, [r4, #16]
 8016b00:	dc02      	bgt.n	8016b08 <_printf_float+0x168>
 8016b02:	6822      	ldr	r2, [r4, #0]
 8016b04:	07d2      	lsls	r2, r2, #31
 8016b06:	d501      	bpl.n	8016b0c <_printf_float+0x16c>
 8016b08:	3301      	adds	r3, #1
 8016b0a:	6123      	str	r3, [r4, #16]
 8016b0c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d09c      	beq.n	8016a4e <_printf_float+0xae>
 8016b14:	232d      	movs	r3, #45	; 0x2d
 8016b16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016b1a:	e798      	b.n	8016a4e <_printf_float+0xae>
 8016b1c:	9a06      	ldr	r2, [sp, #24]
 8016b1e:	2a47      	cmp	r2, #71	; 0x47
 8016b20:	d1be      	bne.n	8016aa0 <_printf_float+0x100>
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d1bc      	bne.n	8016aa0 <_printf_float+0x100>
 8016b26:	2301      	movs	r3, #1
 8016b28:	e7b9      	b.n	8016a9e <_printf_float+0xfe>
 8016b2a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8016b2e:	d118      	bne.n	8016b62 <_printf_float+0x1c2>
 8016b30:	2900      	cmp	r1, #0
 8016b32:	6863      	ldr	r3, [r4, #4]
 8016b34:	dd0b      	ble.n	8016b4e <_printf_float+0x1ae>
 8016b36:	6121      	str	r1, [r4, #16]
 8016b38:	b913      	cbnz	r3, 8016b40 <_printf_float+0x1a0>
 8016b3a:	6822      	ldr	r2, [r4, #0]
 8016b3c:	07d0      	lsls	r0, r2, #31
 8016b3e:	d502      	bpl.n	8016b46 <_printf_float+0x1a6>
 8016b40:	3301      	adds	r3, #1
 8016b42:	440b      	add	r3, r1
 8016b44:	6123      	str	r3, [r4, #16]
 8016b46:	65a1      	str	r1, [r4, #88]	; 0x58
 8016b48:	f04f 0900 	mov.w	r9, #0
 8016b4c:	e7de      	b.n	8016b0c <_printf_float+0x16c>
 8016b4e:	b913      	cbnz	r3, 8016b56 <_printf_float+0x1b6>
 8016b50:	6822      	ldr	r2, [r4, #0]
 8016b52:	07d2      	lsls	r2, r2, #31
 8016b54:	d501      	bpl.n	8016b5a <_printf_float+0x1ba>
 8016b56:	3302      	adds	r3, #2
 8016b58:	e7f4      	b.n	8016b44 <_printf_float+0x1a4>
 8016b5a:	2301      	movs	r3, #1
 8016b5c:	e7f2      	b.n	8016b44 <_printf_float+0x1a4>
 8016b5e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8016b62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016b64:	4299      	cmp	r1, r3
 8016b66:	db05      	blt.n	8016b74 <_printf_float+0x1d4>
 8016b68:	6823      	ldr	r3, [r4, #0]
 8016b6a:	6121      	str	r1, [r4, #16]
 8016b6c:	07d8      	lsls	r0, r3, #31
 8016b6e:	d5ea      	bpl.n	8016b46 <_printf_float+0x1a6>
 8016b70:	1c4b      	adds	r3, r1, #1
 8016b72:	e7e7      	b.n	8016b44 <_printf_float+0x1a4>
 8016b74:	2900      	cmp	r1, #0
 8016b76:	bfd4      	ite	le
 8016b78:	f1c1 0202 	rsble	r2, r1, #2
 8016b7c:	2201      	movgt	r2, #1
 8016b7e:	4413      	add	r3, r2
 8016b80:	e7e0      	b.n	8016b44 <_printf_float+0x1a4>
 8016b82:	6823      	ldr	r3, [r4, #0]
 8016b84:	055a      	lsls	r2, r3, #21
 8016b86:	d407      	bmi.n	8016b98 <_printf_float+0x1f8>
 8016b88:	6923      	ldr	r3, [r4, #16]
 8016b8a:	4642      	mov	r2, r8
 8016b8c:	4631      	mov	r1, r6
 8016b8e:	4628      	mov	r0, r5
 8016b90:	47b8      	blx	r7
 8016b92:	3001      	adds	r0, #1
 8016b94:	d12c      	bne.n	8016bf0 <_printf_float+0x250>
 8016b96:	e764      	b.n	8016a62 <_printf_float+0xc2>
 8016b98:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016b9c:	f240 80e0 	bls.w	8016d60 <_printf_float+0x3c0>
 8016ba0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016ba4:	2200      	movs	r2, #0
 8016ba6:	2300      	movs	r3, #0
 8016ba8:	f7e9 ff8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8016bac:	2800      	cmp	r0, #0
 8016bae:	d034      	beq.n	8016c1a <_printf_float+0x27a>
 8016bb0:	4a37      	ldr	r2, [pc, #220]	; (8016c90 <_printf_float+0x2f0>)
 8016bb2:	2301      	movs	r3, #1
 8016bb4:	4631      	mov	r1, r6
 8016bb6:	4628      	mov	r0, r5
 8016bb8:	47b8      	blx	r7
 8016bba:	3001      	adds	r0, #1
 8016bbc:	f43f af51 	beq.w	8016a62 <_printf_float+0xc2>
 8016bc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016bc4:	429a      	cmp	r2, r3
 8016bc6:	db02      	blt.n	8016bce <_printf_float+0x22e>
 8016bc8:	6823      	ldr	r3, [r4, #0]
 8016bca:	07d8      	lsls	r0, r3, #31
 8016bcc:	d510      	bpl.n	8016bf0 <_printf_float+0x250>
 8016bce:	ee18 3a10 	vmov	r3, s16
 8016bd2:	4652      	mov	r2, sl
 8016bd4:	4631      	mov	r1, r6
 8016bd6:	4628      	mov	r0, r5
 8016bd8:	47b8      	blx	r7
 8016bda:	3001      	adds	r0, #1
 8016bdc:	f43f af41 	beq.w	8016a62 <_printf_float+0xc2>
 8016be0:	f04f 0800 	mov.w	r8, #0
 8016be4:	f104 091a 	add.w	r9, r4, #26
 8016be8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016bea:	3b01      	subs	r3, #1
 8016bec:	4543      	cmp	r3, r8
 8016bee:	dc09      	bgt.n	8016c04 <_printf_float+0x264>
 8016bf0:	6823      	ldr	r3, [r4, #0]
 8016bf2:	079b      	lsls	r3, r3, #30
 8016bf4:	f100 8105 	bmi.w	8016e02 <_printf_float+0x462>
 8016bf8:	68e0      	ldr	r0, [r4, #12]
 8016bfa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016bfc:	4298      	cmp	r0, r3
 8016bfe:	bfb8      	it	lt
 8016c00:	4618      	movlt	r0, r3
 8016c02:	e730      	b.n	8016a66 <_printf_float+0xc6>
 8016c04:	2301      	movs	r3, #1
 8016c06:	464a      	mov	r2, r9
 8016c08:	4631      	mov	r1, r6
 8016c0a:	4628      	mov	r0, r5
 8016c0c:	47b8      	blx	r7
 8016c0e:	3001      	adds	r0, #1
 8016c10:	f43f af27 	beq.w	8016a62 <_printf_float+0xc2>
 8016c14:	f108 0801 	add.w	r8, r8, #1
 8016c18:	e7e6      	b.n	8016be8 <_printf_float+0x248>
 8016c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c1c:	2b00      	cmp	r3, #0
 8016c1e:	dc39      	bgt.n	8016c94 <_printf_float+0x2f4>
 8016c20:	4a1b      	ldr	r2, [pc, #108]	; (8016c90 <_printf_float+0x2f0>)
 8016c22:	2301      	movs	r3, #1
 8016c24:	4631      	mov	r1, r6
 8016c26:	4628      	mov	r0, r5
 8016c28:	47b8      	blx	r7
 8016c2a:	3001      	adds	r0, #1
 8016c2c:	f43f af19 	beq.w	8016a62 <_printf_float+0xc2>
 8016c30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016c34:	4313      	orrs	r3, r2
 8016c36:	d102      	bne.n	8016c3e <_printf_float+0x29e>
 8016c38:	6823      	ldr	r3, [r4, #0]
 8016c3a:	07d9      	lsls	r1, r3, #31
 8016c3c:	d5d8      	bpl.n	8016bf0 <_printf_float+0x250>
 8016c3e:	ee18 3a10 	vmov	r3, s16
 8016c42:	4652      	mov	r2, sl
 8016c44:	4631      	mov	r1, r6
 8016c46:	4628      	mov	r0, r5
 8016c48:	47b8      	blx	r7
 8016c4a:	3001      	adds	r0, #1
 8016c4c:	f43f af09 	beq.w	8016a62 <_printf_float+0xc2>
 8016c50:	f04f 0900 	mov.w	r9, #0
 8016c54:	f104 0a1a 	add.w	sl, r4, #26
 8016c58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016c5a:	425b      	negs	r3, r3
 8016c5c:	454b      	cmp	r3, r9
 8016c5e:	dc01      	bgt.n	8016c64 <_printf_float+0x2c4>
 8016c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016c62:	e792      	b.n	8016b8a <_printf_float+0x1ea>
 8016c64:	2301      	movs	r3, #1
 8016c66:	4652      	mov	r2, sl
 8016c68:	4631      	mov	r1, r6
 8016c6a:	4628      	mov	r0, r5
 8016c6c:	47b8      	blx	r7
 8016c6e:	3001      	adds	r0, #1
 8016c70:	f43f aef7 	beq.w	8016a62 <_printf_float+0xc2>
 8016c74:	f109 0901 	add.w	r9, r9, #1
 8016c78:	e7ee      	b.n	8016c58 <_printf_float+0x2b8>
 8016c7a:	bf00      	nop
 8016c7c:	7fefffff 	.word	0x7fefffff
 8016c80:	0801a314 	.word	0x0801a314
 8016c84:	0801a318 	.word	0x0801a318
 8016c88:	0801a320 	.word	0x0801a320
 8016c8c:	0801a31c 	.word	0x0801a31c
 8016c90:	0801a324 	.word	0x0801a324
 8016c94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016c96:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016c98:	429a      	cmp	r2, r3
 8016c9a:	bfa8      	it	ge
 8016c9c:	461a      	movge	r2, r3
 8016c9e:	2a00      	cmp	r2, #0
 8016ca0:	4691      	mov	r9, r2
 8016ca2:	dc37      	bgt.n	8016d14 <_printf_float+0x374>
 8016ca4:	f04f 0b00 	mov.w	fp, #0
 8016ca8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016cac:	f104 021a 	add.w	r2, r4, #26
 8016cb0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8016cb2:	9305      	str	r3, [sp, #20]
 8016cb4:	eba3 0309 	sub.w	r3, r3, r9
 8016cb8:	455b      	cmp	r3, fp
 8016cba:	dc33      	bgt.n	8016d24 <_printf_float+0x384>
 8016cbc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016cc0:	429a      	cmp	r2, r3
 8016cc2:	db3b      	blt.n	8016d3c <_printf_float+0x39c>
 8016cc4:	6823      	ldr	r3, [r4, #0]
 8016cc6:	07da      	lsls	r2, r3, #31
 8016cc8:	d438      	bmi.n	8016d3c <_printf_float+0x39c>
 8016cca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016ccc:	9b05      	ldr	r3, [sp, #20]
 8016cce:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016cd0:	1ad3      	subs	r3, r2, r3
 8016cd2:	eba2 0901 	sub.w	r9, r2, r1
 8016cd6:	4599      	cmp	r9, r3
 8016cd8:	bfa8      	it	ge
 8016cda:	4699      	movge	r9, r3
 8016cdc:	f1b9 0f00 	cmp.w	r9, #0
 8016ce0:	dc35      	bgt.n	8016d4e <_printf_float+0x3ae>
 8016ce2:	f04f 0800 	mov.w	r8, #0
 8016ce6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016cea:	f104 0a1a 	add.w	sl, r4, #26
 8016cee:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016cf2:	1a9b      	subs	r3, r3, r2
 8016cf4:	eba3 0309 	sub.w	r3, r3, r9
 8016cf8:	4543      	cmp	r3, r8
 8016cfa:	f77f af79 	ble.w	8016bf0 <_printf_float+0x250>
 8016cfe:	2301      	movs	r3, #1
 8016d00:	4652      	mov	r2, sl
 8016d02:	4631      	mov	r1, r6
 8016d04:	4628      	mov	r0, r5
 8016d06:	47b8      	blx	r7
 8016d08:	3001      	adds	r0, #1
 8016d0a:	f43f aeaa 	beq.w	8016a62 <_printf_float+0xc2>
 8016d0e:	f108 0801 	add.w	r8, r8, #1
 8016d12:	e7ec      	b.n	8016cee <_printf_float+0x34e>
 8016d14:	4613      	mov	r3, r2
 8016d16:	4631      	mov	r1, r6
 8016d18:	4642      	mov	r2, r8
 8016d1a:	4628      	mov	r0, r5
 8016d1c:	47b8      	blx	r7
 8016d1e:	3001      	adds	r0, #1
 8016d20:	d1c0      	bne.n	8016ca4 <_printf_float+0x304>
 8016d22:	e69e      	b.n	8016a62 <_printf_float+0xc2>
 8016d24:	2301      	movs	r3, #1
 8016d26:	4631      	mov	r1, r6
 8016d28:	4628      	mov	r0, r5
 8016d2a:	9205      	str	r2, [sp, #20]
 8016d2c:	47b8      	blx	r7
 8016d2e:	3001      	adds	r0, #1
 8016d30:	f43f ae97 	beq.w	8016a62 <_printf_float+0xc2>
 8016d34:	9a05      	ldr	r2, [sp, #20]
 8016d36:	f10b 0b01 	add.w	fp, fp, #1
 8016d3a:	e7b9      	b.n	8016cb0 <_printf_float+0x310>
 8016d3c:	ee18 3a10 	vmov	r3, s16
 8016d40:	4652      	mov	r2, sl
 8016d42:	4631      	mov	r1, r6
 8016d44:	4628      	mov	r0, r5
 8016d46:	47b8      	blx	r7
 8016d48:	3001      	adds	r0, #1
 8016d4a:	d1be      	bne.n	8016cca <_printf_float+0x32a>
 8016d4c:	e689      	b.n	8016a62 <_printf_float+0xc2>
 8016d4e:	9a05      	ldr	r2, [sp, #20]
 8016d50:	464b      	mov	r3, r9
 8016d52:	4442      	add	r2, r8
 8016d54:	4631      	mov	r1, r6
 8016d56:	4628      	mov	r0, r5
 8016d58:	47b8      	blx	r7
 8016d5a:	3001      	adds	r0, #1
 8016d5c:	d1c1      	bne.n	8016ce2 <_printf_float+0x342>
 8016d5e:	e680      	b.n	8016a62 <_printf_float+0xc2>
 8016d60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016d62:	2a01      	cmp	r2, #1
 8016d64:	dc01      	bgt.n	8016d6a <_printf_float+0x3ca>
 8016d66:	07db      	lsls	r3, r3, #31
 8016d68:	d538      	bpl.n	8016ddc <_printf_float+0x43c>
 8016d6a:	2301      	movs	r3, #1
 8016d6c:	4642      	mov	r2, r8
 8016d6e:	4631      	mov	r1, r6
 8016d70:	4628      	mov	r0, r5
 8016d72:	47b8      	blx	r7
 8016d74:	3001      	adds	r0, #1
 8016d76:	f43f ae74 	beq.w	8016a62 <_printf_float+0xc2>
 8016d7a:	ee18 3a10 	vmov	r3, s16
 8016d7e:	4652      	mov	r2, sl
 8016d80:	4631      	mov	r1, r6
 8016d82:	4628      	mov	r0, r5
 8016d84:	47b8      	blx	r7
 8016d86:	3001      	adds	r0, #1
 8016d88:	f43f ae6b 	beq.w	8016a62 <_printf_float+0xc2>
 8016d8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016d90:	2200      	movs	r2, #0
 8016d92:	2300      	movs	r3, #0
 8016d94:	f7e9 fe98 	bl	8000ac8 <__aeabi_dcmpeq>
 8016d98:	b9d8      	cbnz	r0, 8016dd2 <_printf_float+0x432>
 8016d9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016d9c:	f108 0201 	add.w	r2, r8, #1
 8016da0:	3b01      	subs	r3, #1
 8016da2:	4631      	mov	r1, r6
 8016da4:	4628      	mov	r0, r5
 8016da6:	47b8      	blx	r7
 8016da8:	3001      	adds	r0, #1
 8016daa:	d10e      	bne.n	8016dca <_printf_float+0x42a>
 8016dac:	e659      	b.n	8016a62 <_printf_float+0xc2>
 8016dae:	2301      	movs	r3, #1
 8016db0:	4652      	mov	r2, sl
 8016db2:	4631      	mov	r1, r6
 8016db4:	4628      	mov	r0, r5
 8016db6:	47b8      	blx	r7
 8016db8:	3001      	adds	r0, #1
 8016dba:	f43f ae52 	beq.w	8016a62 <_printf_float+0xc2>
 8016dbe:	f108 0801 	add.w	r8, r8, #1
 8016dc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016dc4:	3b01      	subs	r3, #1
 8016dc6:	4543      	cmp	r3, r8
 8016dc8:	dcf1      	bgt.n	8016dae <_printf_float+0x40e>
 8016dca:	464b      	mov	r3, r9
 8016dcc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8016dd0:	e6dc      	b.n	8016b8c <_printf_float+0x1ec>
 8016dd2:	f04f 0800 	mov.w	r8, #0
 8016dd6:	f104 0a1a 	add.w	sl, r4, #26
 8016dda:	e7f2      	b.n	8016dc2 <_printf_float+0x422>
 8016ddc:	2301      	movs	r3, #1
 8016dde:	4642      	mov	r2, r8
 8016de0:	e7df      	b.n	8016da2 <_printf_float+0x402>
 8016de2:	2301      	movs	r3, #1
 8016de4:	464a      	mov	r2, r9
 8016de6:	4631      	mov	r1, r6
 8016de8:	4628      	mov	r0, r5
 8016dea:	47b8      	blx	r7
 8016dec:	3001      	adds	r0, #1
 8016dee:	f43f ae38 	beq.w	8016a62 <_printf_float+0xc2>
 8016df2:	f108 0801 	add.w	r8, r8, #1
 8016df6:	68e3      	ldr	r3, [r4, #12]
 8016df8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016dfa:	1a5b      	subs	r3, r3, r1
 8016dfc:	4543      	cmp	r3, r8
 8016dfe:	dcf0      	bgt.n	8016de2 <_printf_float+0x442>
 8016e00:	e6fa      	b.n	8016bf8 <_printf_float+0x258>
 8016e02:	f04f 0800 	mov.w	r8, #0
 8016e06:	f104 0919 	add.w	r9, r4, #25
 8016e0a:	e7f4      	b.n	8016df6 <_printf_float+0x456>

08016e0c <_printf_common>:
 8016e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016e10:	4616      	mov	r6, r2
 8016e12:	4699      	mov	r9, r3
 8016e14:	688a      	ldr	r2, [r1, #8]
 8016e16:	690b      	ldr	r3, [r1, #16]
 8016e18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016e1c:	4293      	cmp	r3, r2
 8016e1e:	bfb8      	it	lt
 8016e20:	4613      	movlt	r3, r2
 8016e22:	6033      	str	r3, [r6, #0]
 8016e24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016e28:	4607      	mov	r7, r0
 8016e2a:	460c      	mov	r4, r1
 8016e2c:	b10a      	cbz	r2, 8016e32 <_printf_common+0x26>
 8016e2e:	3301      	adds	r3, #1
 8016e30:	6033      	str	r3, [r6, #0]
 8016e32:	6823      	ldr	r3, [r4, #0]
 8016e34:	0699      	lsls	r1, r3, #26
 8016e36:	bf42      	ittt	mi
 8016e38:	6833      	ldrmi	r3, [r6, #0]
 8016e3a:	3302      	addmi	r3, #2
 8016e3c:	6033      	strmi	r3, [r6, #0]
 8016e3e:	6825      	ldr	r5, [r4, #0]
 8016e40:	f015 0506 	ands.w	r5, r5, #6
 8016e44:	d106      	bne.n	8016e54 <_printf_common+0x48>
 8016e46:	f104 0a19 	add.w	sl, r4, #25
 8016e4a:	68e3      	ldr	r3, [r4, #12]
 8016e4c:	6832      	ldr	r2, [r6, #0]
 8016e4e:	1a9b      	subs	r3, r3, r2
 8016e50:	42ab      	cmp	r3, r5
 8016e52:	dc26      	bgt.n	8016ea2 <_printf_common+0x96>
 8016e54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8016e58:	1e13      	subs	r3, r2, #0
 8016e5a:	6822      	ldr	r2, [r4, #0]
 8016e5c:	bf18      	it	ne
 8016e5e:	2301      	movne	r3, #1
 8016e60:	0692      	lsls	r2, r2, #26
 8016e62:	d42b      	bmi.n	8016ebc <_printf_common+0xb0>
 8016e64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016e68:	4649      	mov	r1, r9
 8016e6a:	4638      	mov	r0, r7
 8016e6c:	47c0      	blx	r8
 8016e6e:	3001      	adds	r0, #1
 8016e70:	d01e      	beq.n	8016eb0 <_printf_common+0xa4>
 8016e72:	6823      	ldr	r3, [r4, #0]
 8016e74:	68e5      	ldr	r5, [r4, #12]
 8016e76:	6832      	ldr	r2, [r6, #0]
 8016e78:	f003 0306 	and.w	r3, r3, #6
 8016e7c:	2b04      	cmp	r3, #4
 8016e7e:	bf08      	it	eq
 8016e80:	1aad      	subeq	r5, r5, r2
 8016e82:	68a3      	ldr	r3, [r4, #8]
 8016e84:	6922      	ldr	r2, [r4, #16]
 8016e86:	bf0c      	ite	eq
 8016e88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016e8c:	2500      	movne	r5, #0
 8016e8e:	4293      	cmp	r3, r2
 8016e90:	bfc4      	itt	gt
 8016e92:	1a9b      	subgt	r3, r3, r2
 8016e94:	18ed      	addgt	r5, r5, r3
 8016e96:	2600      	movs	r6, #0
 8016e98:	341a      	adds	r4, #26
 8016e9a:	42b5      	cmp	r5, r6
 8016e9c:	d11a      	bne.n	8016ed4 <_printf_common+0xc8>
 8016e9e:	2000      	movs	r0, #0
 8016ea0:	e008      	b.n	8016eb4 <_printf_common+0xa8>
 8016ea2:	2301      	movs	r3, #1
 8016ea4:	4652      	mov	r2, sl
 8016ea6:	4649      	mov	r1, r9
 8016ea8:	4638      	mov	r0, r7
 8016eaa:	47c0      	blx	r8
 8016eac:	3001      	adds	r0, #1
 8016eae:	d103      	bne.n	8016eb8 <_printf_common+0xac>
 8016eb0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016eb8:	3501      	adds	r5, #1
 8016eba:	e7c6      	b.n	8016e4a <_printf_common+0x3e>
 8016ebc:	18e1      	adds	r1, r4, r3
 8016ebe:	1c5a      	adds	r2, r3, #1
 8016ec0:	2030      	movs	r0, #48	; 0x30
 8016ec2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016ec6:	4422      	add	r2, r4
 8016ec8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016ecc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8016ed0:	3302      	adds	r3, #2
 8016ed2:	e7c7      	b.n	8016e64 <_printf_common+0x58>
 8016ed4:	2301      	movs	r3, #1
 8016ed6:	4622      	mov	r2, r4
 8016ed8:	4649      	mov	r1, r9
 8016eda:	4638      	mov	r0, r7
 8016edc:	47c0      	blx	r8
 8016ede:	3001      	adds	r0, #1
 8016ee0:	d0e6      	beq.n	8016eb0 <_printf_common+0xa4>
 8016ee2:	3601      	adds	r6, #1
 8016ee4:	e7d9      	b.n	8016e9a <_printf_common+0x8e>
	...

08016ee8 <_printf_i>:
 8016ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016eec:	460c      	mov	r4, r1
 8016eee:	4691      	mov	r9, r2
 8016ef0:	7e27      	ldrb	r7, [r4, #24]
 8016ef2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016ef4:	2f78      	cmp	r7, #120	; 0x78
 8016ef6:	4680      	mov	r8, r0
 8016ef8:	469a      	mov	sl, r3
 8016efa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8016efe:	d807      	bhi.n	8016f10 <_printf_i+0x28>
 8016f00:	2f62      	cmp	r7, #98	; 0x62
 8016f02:	d80a      	bhi.n	8016f1a <_printf_i+0x32>
 8016f04:	2f00      	cmp	r7, #0
 8016f06:	f000 80d8 	beq.w	80170ba <_printf_i+0x1d2>
 8016f0a:	2f58      	cmp	r7, #88	; 0x58
 8016f0c:	f000 80a3 	beq.w	8017056 <_printf_i+0x16e>
 8016f10:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016f14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016f18:	e03a      	b.n	8016f90 <_printf_i+0xa8>
 8016f1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8016f1e:	2b15      	cmp	r3, #21
 8016f20:	d8f6      	bhi.n	8016f10 <_printf_i+0x28>
 8016f22:	a001      	add	r0, pc, #4	; (adr r0, 8016f28 <_printf_i+0x40>)
 8016f24:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016f28:	08016f81 	.word	0x08016f81
 8016f2c:	08016f95 	.word	0x08016f95
 8016f30:	08016f11 	.word	0x08016f11
 8016f34:	08016f11 	.word	0x08016f11
 8016f38:	08016f11 	.word	0x08016f11
 8016f3c:	08016f11 	.word	0x08016f11
 8016f40:	08016f95 	.word	0x08016f95
 8016f44:	08016f11 	.word	0x08016f11
 8016f48:	08016f11 	.word	0x08016f11
 8016f4c:	08016f11 	.word	0x08016f11
 8016f50:	08016f11 	.word	0x08016f11
 8016f54:	080170a1 	.word	0x080170a1
 8016f58:	08016fc5 	.word	0x08016fc5
 8016f5c:	08017083 	.word	0x08017083
 8016f60:	08016f11 	.word	0x08016f11
 8016f64:	08016f11 	.word	0x08016f11
 8016f68:	080170c3 	.word	0x080170c3
 8016f6c:	08016f11 	.word	0x08016f11
 8016f70:	08016fc5 	.word	0x08016fc5
 8016f74:	08016f11 	.word	0x08016f11
 8016f78:	08016f11 	.word	0x08016f11
 8016f7c:	0801708b 	.word	0x0801708b
 8016f80:	680b      	ldr	r3, [r1, #0]
 8016f82:	1d1a      	adds	r2, r3, #4
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	600a      	str	r2, [r1, #0]
 8016f88:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016f8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016f90:	2301      	movs	r3, #1
 8016f92:	e0a3      	b.n	80170dc <_printf_i+0x1f4>
 8016f94:	6825      	ldr	r5, [r4, #0]
 8016f96:	6808      	ldr	r0, [r1, #0]
 8016f98:	062e      	lsls	r6, r5, #24
 8016f9a:	f100 0304 	add.w	r3, r0, #4
 8016f9e:	d50a      	bpl.n	8016fb6 <_printf_i+0xce>
 8016fa0:	6805      	ldr	r5, [r0, #0]
 8016fa2:	600b      	str	r3, [r1, #0]
 8016fa4:	2d00      	cmp	r5, #0
 8016fa6:	da03      	bge.n	8016fb0 <_printf_i+0xc8>
 8016fa8:	232d      	movs	r3, #45	; 0x2d
 8016faa:	426d      	negs	r5, r5
 8016fac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016fb0:	485e      	ldr	r0, [pc, #376]	; (801712c <_printf_i+0x244>)
 8016fb2:	230a      	movs	r3, #10
 8016fb4:	e019      	b.n	8016fea <_printf_i+0x102>
 8016fb6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8016fba:	6805      	ldr	r5, [r0, #0]
 8016fbc:	600b      	str	r3, [r1, #0]
 8016fbe:	bf18      	it	ne
 8016fc0:	b22d      	sxthne	r5, r5
 8016fc2:	e7ef      	b.n	8016fa4 <_printf_i+0xbc>
 8016fc4:	680b      	ldr	r3, [r1, #0]
 8016fc6:	6825      	ldr	r5, [r4, #0]
 8016fc8:	1d18      	adds	r0, r3, #4
 8016fca:	6008      	str	r0, [r1, #0]
 8016fcc:	0628      	lsls	r0, r5, #24
 8016fce:	d501      	bpl.n	8016fd4 <_printf_i+0xec>
 8016fd0:	681d      	ldr	r5, [r3, #0]
 8016fd2:	e002      	b.n	8016fda <_printf_i+0xf2>
 8016fd4:	0669      	lsls	r1, r5, #25
 8016fd6:	d5fb      	bpl.n	8016fd0 <_printf_i+0xe8>
 8016fd8:	881d      	ldrh	r5, [r3, #0]
 8016fda:	4854      	ldr	r0, [pc, #336]	; (801712c <_printf_i+0x244>)
 8016fdc:	2f6f      	cmp	r7, #111	; 0x6f
 8016fde:	bf0c      	ite	eq
 8016fe0:	2308      	moveq	r3, #8
 8016fe2:	230a      	movne	r3, #10
 8016fe4:	2100      	movs	r1, #0
 8016fe6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016fea:	6866      	ldr	r6, [r4, #4]
 8016fec:	60a6      	str	r6, [r4, #8]
 8016fee:	2e00      	cmp	r6, #0
 8016ff0:	bfa2      	ittt	ge
 8016ff2:	6821      	ldrge	r1, [r4, #0]
 8016ff4:	f021 0104 	bicge.w	r1, r1, #4
 8016ff8:	6021      	strge	r1, [r4, #0]
 8016ffa:	b90d      	cbnz	r5, 8017000 <_printf_i+0x118>
 8016ffc:	2e00      	cmp	r6, #0
 8016ffe:	d04d      	beq.n	801709c <_printf_i+0x1b4>
 8017000:	4616      	mov	r6, r2
 8017002:	fbb5 f1f3 	udiv	r1, r5, r3
 8017006:	fb03 5711 	mls	r7, r3, r1, r5
 801700a:	5dc7      	ldrb	r7, [r0, r7]
 801700c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8017010:	462f      	mov	r7, r5
 8017012:	42bb      	cmp	r3, r7
 8017014:	460d      	mov	r5, r1
 8017016:	d9f4      	bls.n	8017002 <_printf_i+0x11a>
 8017018:	2b08      	cmp	r3, #8
 801701a:	d10b      	bne.n	8017034 <_printf_i+0x14c>
 801701c:	6823      	ldr	r3, [r4, #0]
 801701e:	07df      	lsls	r7, r3, #31
 8017020:	d508      	bpl.n	8017034 <_printf_i+0x14c>
 8017022:	6923      	ldr	r3, [r4, #16]
 8017024:	6861      	ldr	r1, [r4, #4]
 8017026:	4299      	cmp	r1, r3
 8017028:	bfde      	ittt	le
 801702a:	2330      	movle	r3, #48	; 0x30
 801702c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8017030:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8017034:	1b92      	subs	r2, r2, r6
 8017036:	6122      	str	r2, [r4, #16]
 8017038:	f8cd a000 	str.w	sl, [sp]
 801703c:	464b      	mov	r3, r9
 801703e:	aa03      	add	r2, sp, #12
 8017040:	4621      	mov	r1, r4
 8017042:	4640      	mov	r0, r8
 8017044:	f7ff fee2 	bl	8016e0c <_printf_common>
 8017048:	3001      	adds	r0, #1
 801704a:	d14c      	bne.n	80170e6 <_printf_i+0x1fe>
 801704c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017050:	b004      	add	sp, #16
 8017052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017056:	4835      	ldr	r0, [pc, #212]	; (801712c <_printf_i+0x244>)
 8017058:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801705c:	6823      	ldr	r3, [r4, #0]
 801705e:	680e      	ldr	r6, [r1, #0]
 8017060:	061f      	lsls	r7, r3, #24
 8017062:	f856 5b04 	ldr.w	r5, [r6], #4
 8017066:	600e      	str	r6, [r1, #0]
 8017068:	d514      	bpl.n	8017094 <_printf_i+0x1ac>
 801706a:	07d9      	lsls	r1, r3, #31
 801706c:	bf44      	itt	mi
 801706e:	f043 0320 	orrmi.w	r3, r3, #32
 8017072:	6023      	strmi	r3, [r4, #0]
 8017074:	b91d      	cbnz	r5, 801707e <_printf_i+0x196>
 8017076:	6823      	ldr	r3, [r4, #0]
 8017078:	f023 0320 	bic.w	r3, r3, #32
 801707c:	6023      	str	r3, [r4, #0]
 801707e:	2310      	movs	r3, #16
 8017080:	e7b0      	b.n	8016fe4 <_printf_i+0xfc>
 8017082:	6823      	ldr	r3, [r4, #0]
 8017084:	f043 0320 	orr.w	r3, r3, #32
 8017088:	6023      	str	r3, [r4, #0]
 801708a:	2378      	movs	r3, #120	; 0x78
 801708c:	4828      	ldr	r0, [pc, #160]	; (8017130 <_printf_i+0x248>)
 801708e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017092:	e7e3      	b.n	801705c <_printf_i+0x174>
 8017094:	065e      	lsls	r6, r3, #25
 8017096:	bf48      	it	mi
 8017098:	b2ad      	uxthmi	r5, r5
 801709a:	e7e6      	b.n	801706a <_printf_i+0x182>
 801709c:	4616      	mov	r6, r2
 801709e:	e7bb      	b.n	8017018 <_printf_i+0x130>
 80170a0:	680b      	ldr	r3, [r1, #0]
 80170a2:	6826      	ldr	r6, [r4, #0]
 80170a4:	6960      	ldr	r0, [r4, #20]
 80170a6:	1d1d      	adds	r5, r3, #4
 80170a8:	600d      	str	r5, [r1, #0]
 80170aa:	0635      	lsls	r5, r6, #24
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	d501      	bpl.n	80170b4 <_printf_i+0x1cc>
 80170b0:	6018      	str	r0, [r3, #0]
 80170b2:	e002      	b.n	80170ba <_printf_i+0x1d2>
 80170b4:	0671      	lsls	r1, r6, #25
 80170b6:	d5fb      	bpl.n	80170b0 <_printf_i+0x1c8>
 80170b8:	8018      	strh	r0, [r3, #0]
 80170ba:	2300      	movs	r3, #0
 80170bc:	6123      	str	r3, [r4, #16]
 80170be:	4616      	mov	r6, r2
 80170c0:	e7ba      	b.n	8017038 <_printf_i+0x150>
 80170c2:	680b      	ldr	r3, [r1, #0]
 80170c4:	1d1a      	adds	r2, r3, #4
 80170c6:	600a      	str	r2, [r1, #0]
 80170c8:	681e      	ldr	r6, [r3, #0]
 80170ca:	6862      	ldr	r2, [r4, #4]
 80170cc:	2100      	movs	r1, #0
 80170ce:	4630      	mov	r0, r6
 80170d0:	f7e9 f886 	bl	80001e0 <memchr>
 80170d4:	b108      	cbz	r0, 80170da <_printf_i+0x1f2>
 80170d6:	1b80      	subs	r0, r0, r6
 80170d8:	6060      	str	r0, [r4, #4]
 80170da:	6863      	ldr	r3, [r4, #4]
 80170dc:	6123      	str	r3, [r4, #16]
 80170de:	2300      	movs	r3, #0
 80170e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80170e4:	e7a8      	b.n	8017038 <_printf_i+0x150>
 80170e6:	6923      	ldr	r3, [r4, #16]
 80170e8:	4632      	mov	r2, r6
 80170ea:	4649      	mov	r1, r9
 80170ec:	4640      	mov	r0, r8
 80170ee:	47d0      	blx	sl
 80170f0:	3001      	adds	r0, #1
 80170f2:	d0ab      	beq.n	801704c <_printf_i+0x164>
 80170f4:	6823      	ldr	r3, [r4, #0]
 80170f6:	079b      	lsls	r3, r3, #30
 80170f8:	d413      	bmi.n	8017122 <_printf_i+0x23a>
 80170fa:	68e0      	ldr	r0, [r4, #12]
 80170fc:	9b03      	ldr	r3, [sp, #12]
 80170fe:	4298      	cmp	r0, r3
 8017100:	bfb8      	it	lt
 8017102:	4618      	movlt	r0, r3
 8017104:	e7a4      	b.n	8017050 <_printf_i+0x168>
 8017106:	2301      	movs	r3, #1
 8017108:	4632      	mov	r2, r6
 801710a:	4649      	mov	r1, r9
 801710c:	4640      	mov	r0, r8
 801710e:	47d0      	blx	sl
 8017110:	3001      	adds	r0, #1
 8017112:	d09b      	beq.n	801704c <_printf_i+0x164>
 8017114:	3501      	adds	r5, #1
 8017116:	68e3      	ldr	r3, [r4, #12]
 8017118:	9903      	ldr	r1, [sp, #12]
 801711a:	1a5b      	subs	r3, r3, r1
 801711c:	42ab      	cmp	r3, r5
 801711e:	dcf2      	bgt.n	8017106 <_printf_i+0x21e>
 8017120:	e7eb      	b.n	80170fa <_printf_i+0x212>
 8017122:	2500      	movs	r5, #0
 8017124:	f104 0619 	add.w	r6, r4, #25
 8017128:	e7f5      	b.n	8017116 <_printf_i+0x22e>
 801712a:	bf00      	nop
 801712c:	0801a326 	.word	0x0801a326
 8017130:	0801a337 	.word	0x0801a337

08017134 <cleanup_glue>:
 8017134:	b538      	push	{r3, r4, r5, lr}
 8017136:	460c      	mov	r4, r1
 8017138:	6809      	ldr	r1, [r1, #0]
 801713a:	4605      	mov	r5, r0
 801713c:	b109      	cbz	r1, 8017142 <cleanup_glue+0xe>
 801713e:	f7ff fff9 	bl	8017134 <cleanup_glue>
 8017142:	4621      	mov	r1, r4
 8017144:	4628      	mov	r0, r5
 8017146:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801714a:	f7ff badf 	b.w	801670c <_free_r>
	...

08017150 <_reclaim_reent>:
 8017150:	4b2c      	ldr	r3, [pc, #176]	; (8017204 <_reclaim_reent+0xb4>)
 8017152:	681b      	ldr	r3, [r3, #0]
 8017154:	4283      	cmp	r3, r0
 8017156:	b570      	push	{r4, r5, r6, lr}
 8017158:	4604      	mov	r4, r0
 801715a:	d051      	beq.n	8017200 <_reclaim_reent+0xb0>
 801715c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801715e:	b143      	cbz	r3, 8017172 <_reclaim_reent+0x22>
 8017160:	68db      	ldr	r3, [r3, #12]
 8017162:	2b00      	cmp	r3, #0
 8017164:	d14a      	bne.n	80171fc <_reclaim_reent+0xac>
 8017166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017168:	6819      	ldr	r1, [r3, #0]
 801716a:	b111      	cbz	r1, 8017172 <_reclaim_reent+0x22>
 801716c:	4620      	mov	r0, r4
 801716e:	f7ff facd 	bl	801670c <_free_r>
 8017172:	6961      	ldr	r1, [r4, #20]
 8017174:	b111      	cbz	r1, 801717c <_reclaim_reent+0x2c>
 8017176:	4620      	mov	r0, r4
 8017178:	f7ff fac8 	bl	801670c <_free_r>
 801717c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801717e:	b111      	cbz	r1, 8017186 <_reclaim_reent+0x36>
 8017180:	4620      	mov	r0, r4
 8017182:	f7ff fac3 	bl	801670c <_free_r>
 8017186:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017188:	b111      	cbz	r1, 8017190 <_reclaim_reent+0x40>
 801718a:	4620      	mov	r0, r4
 801718c:	f7ff fabe 	bl	801670c <_free_r>
 8017190:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8017192:	b111      	cbz	r1, 801719a <_reclaim_reent+0x4a>
 8017194:	4620      	mov	r0, r4
 8017196:	f7ff fab9 	bl	801670c <_free_r>
 801719a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801719c:	b111      	cbz	r1, 80171a4 <_reclaim_reent+0x54>
 801719e:	4620      	mov	r0, r4
 80171a0:	f7ff fab4 	bl	801670c <_free_r>
 80171a4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80171a6:	b111      	cbz	r1, 80171ae <_reclaim_reent+0x5e>
 80171a8:	4620      	mov	r0, r4
 80171aa:	f7ff faaf 	bl	801670c <_free_r>
 80171ae:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80171b0:	b111      	cbz	r1, 80171b8 <_reclaim_reent+0x68>
 80171b2:	4620      	mov	r0, r4
 80171b4:	f7ff faaa 	bl	801670c <_free_r>
 80171b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80171ba:	b111      	cbz	r1, 80171c2 <_reclaim_reent+0x72>
 80171bc:	4620      	mov	r0, r4
 80171be:	f7ff faa5 	bl	801670c <_free_r>
 80171c2:	69a3      	ldr	r3, [r4, #24]
 80171c4:	b1e3      	cbz	r3, 8017200 <_reclaim_reent+0xb0>
 80171c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80171c8:	4620      	mov	r0, r4
 80171ca:	4798      	blx	r3
 80171cc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80171ce:	b1b9      	cbz	r1, 8017200 <_reclaim_reent+0xb0>
 80171d0:	4620      	mov	r0, r4
 80171d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80171d6:	f7ff bfad 	b.w	8017134 <cleanup_glue>
 80171da:	5949      	ldr	r1, [r1, r5]
 80171dc:	b941      	cbnz	r1, 80171f0 <_reclaim_reent+0xa0>
 80171de:	3504      	adds	r5, #4
 80171e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80171e2:	2d80      	cmp	r5, #128	; 0x80
 80171e4:	68d9      	ldr	r1, [r3, #12]
 80171e6:	d1f8      	bne.n	80171da <_reclaim_reent+0x8a>
 80171e8:	4620      	mov	r0, r4
 80171ea:	f7ff fa8f 	bl	801670c <_free_r>
 80171ee:	e7ba      	b.n	8017166 <_reclaim_reent+0x16>
 80171f0:	680e      	ldr	r6, [r1, #0]
 80171f2:	4620      	mov	r0, r4
 80171f4:	f7ff fa8a 	bl	801670c <_free_r>
 80171f8:	4631      	mov	r1, r6
 80171fa:	e7ef      	b.n	80171dc <_reclaim_reent+0x8c>
 80171fc:	2500      	movs	r5, #0
 80171fe:	e7ef      	b.n	80171e0 <_reclaim_reent+0x90>
 8017200:	bd70      	pop	{r4, r5, r6, pc}
 8017202:	bf00      	nop
 8017204:	200001a0 	.word	0x200001a0

08017208 <_sbrk_r>:
 8017208:	b538      	push	{r3, r4, r5, lr}
 801720a:	4d06      	ldr	r5, [pc, #24]	; (8017224 <_sbrk_r+0x1c>)
 801720c:	2300      	movs	r3, #0
 801720e:	4604      	mov	r4, r0
 8017210:	4608      	mov	r0, r1
 8017212:	602b      	str	r3, [r5, #0]
 8017214:	f7ed ff4e 	bl	80050b4 <_sbrk>
 8017218:	1c43      	adds	r3, r0, #1
 801721a:	d102      	bne.n	8017222 <_sbrk_r+0x1a>
 801721c:	682b      	ldr	r3, [r5, #0]
 801721e:	b103      	cbz	r3, 8017222 <_sbrk_r+0x1a>
 8017220:	6023      	str	r3, [r4, #0]
 8017222:	bd38      	pop	{r3, r4, r5, pc}
 8017224:	20016ccc 	.word	0x20016ccc

08017228 <siprintf>:
 8017228:	b40e      	push	{r1, r2, r3}
 801722a:	b500      	push	{lr}
 801722c:	b09c      	sub	sp, #112	; 0x70
 801722e:	ab1d      	add	r3, sp, #116	; 0x74
 8017230:	9002      	str	r0, [sp, #8]
 8017232:	9006      	str	r0, [sp, #24]
 8017234:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017238:	4809      	ldr	r0, [pc, #36]	; (8017260 <siprintf+0x38>)
 801723a:	9107      	str	r1, [sp, #28]
 801723c:	9104      	str	r1, [sp, #16]
 801723e:	4909      	ldr	r1, [pc, #36]	; (8017264 <siprintf+0x3c>)
 8017240:	f853 2b04 	ldr.w	r2, [r3], #4
 8017244:	9105      	str	r1, [sp, #20]
 8017246:	6800      	ldr	r0, [r0, #0]
 8017248:	9301      	str	r3, [sp, #4]
 801724a:	a902      	add	r1, sp, #8
 801724c:	f001 fc10 	bl	8018a70 <_svfiprintf_r>
 8017250:	9b02      	ldr	r3, [sp, #8]
 8017252:	2200      	movs	r2, #0
 8017254:	701a      	strb	r2, [r3, #0]
 8017256:	b01c      	add	sp, #112	; 0x70
 8017258:	f85d eb04 	ldr.w	lr, [sp], #4
 801725c:	b003      	add	sp, #12
 801725e:	4770      	bx	lr
 8017260:	200001a0 	.word	0x200001a0
 8017264:	ffff0208 	.word	0xffff0208

08017268 <__sread>:
 8017268:	b510      	push	{r4, lr}
 801726a:	460c      	mov	r4, r1
 801726c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017270:	f001 fcfe 	bl	8018c70 <_read_r>
 8017274:	2800      	cmp	r0, #0
 8017276:	bfab      	itete	ge
 8017278:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801727a:	89a3      	ldrhlt	r3, [r4, #12]
 801727c:	181b      	addge	r3, r3, r0
 801727e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017282:	bfac      	ite	ge
 8017284:	6563      	strge	r3, [r4, #84]	; 0x54
 8017286:	81a3      	strhlt	r3, [r4, #12]
 8017288:	bd10      	pop	{r4, pc}

0801728a <__swrite>:
 801728a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801728e:	461f      	mov	r7, r3
 8017290:	898b      	ldrh	r3, [r1, #12]
 8017292:	05db      	lsls	r3, r3, #23
 8017294:	4605      	mov	r5, r0
 8017296:	460c      	mov	r4, r1
 8017298:	4616      	mov	r6, r2
 801729a:	d505      	bpl.n	80172a8 <__swrite+0x1e>
 801729c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172a0:	2302      	movs	r3, #2
 80172a2:	2200      	movs	r2, #0
 80172a4:	f000 ffde 	bl	8018264 <_lseek_r>
 80172a8:	89a3      	ldrh	r3, [r4, #12]
 80172aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80172ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80172b2:	81a3      	strh	r3, [r4, #12]
 80172b4:	4632      	mov	r2, r6
 80172b6:	463b      	mov	r3, r7
 80172b8:	4628      	mov	r0, r5
 80172ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80172be:	f000 b86f 	b.w	80173a0 <_write_r>

080172c2 <__sseek>:
 80172c2:	b510      	push	{r4, lr}
 80172c4:	460c      	mov	r4, r1
 80172c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172ca:	f000 ffcb 	bl	8018264 <_lseek_r>
 80172ce:	1c43      	adds	r3, r0, #1
 80172d0:	89a3      	ldrh	r3, [r4, #12]
 80172d2:	bf15      	itete	ne
 80172d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80172d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80172da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80172de:	81a3      	strheq	r3, [r4, #12]
 80172e0:	bf18      	it	ne
 80172e2:	81a3      	strhne	r3, [r4, #12]
 80172e4:	bd10      	pop	{r4, pc}

080172e6 <__sclose>:
 80172e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172ea:	f000 b86b 	b.w	80173c4 <_close_r>

080172ee <strcat>:
 80172ee:	b510      	push	{r4, lr}
 80172f0:	4602      	mov	r2, r0
 80172f2:	7814      	ldrb	r4, [r2, #0]
 80172f4:	4613      	mov	r3, r2
 80172f6:	3201      	adds	r2, #1
 80172f8:	2c00      	cmp	r4, #0
 80172fa:	d1fa      	bne.n	80172f2 <strcat+0x4>
 80172fc:	3b01      	subs	r3, #1
 80172fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017302:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017306:	2a00      	cmp	r2, #0
 8017308:	d1f9      	bne.n	80172fe <strcat+0x10>
 801730a:	bd10      	pop	{r4, pc}

0801730c <strcpy>:
 801730c:	4603      	mov	r3, r0
 801730e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017312:	f803 2b01 	strb.w	r2, [r3], #1
 8017316:	2a00      	cmp	r2, #0
 8017318:	d1f9      	bne.n	801730e <strcpy+0x2>
 801731a:	4770      	bx	lr

0801731c <__utoa>:
 801731c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801731e:	4c1f      	ldr	r4, [pc, #124]	; (801739c <__utoa+0x80>)
 8017320:	b08b      	sub	sp, #44	; 0x2c
 8017322:	4605      	mov	r5, r0
 8017324:	460b      	mov	r3, r1
 8017326:	466e      	mov	r6, sp
 8017328:	f104 0c20 	add.w	ip, r4, #32
 801732c:	6820      	ldr	r0, [r4, #0]
 801732e:	6861      	ldr	r1, [r4, #4]
 8017330:	4637      	mov	r7, r6
 8017332:	c703      	stmia	r7!, {r0, r1}
 8017334:	3408      	adds	r4, #8
 8017336:	4564      	cmp	r4, ip
 8017338:	463e      	mov	r6, r7
 801733a:	d1f7      	bne.n	801732c <__utoa+0x10>
 801733c:	7921      	ldrb	r1, [r4, #4]
 801733e:	7139      	strb	r1, [r7, #4]
 8017340:	1e91      	subs	r1, r2, #2
 8017342:	6820      	ldr	r0, [r4, #0]
 8017344:	6038      	str	r0, [r7, #0]
 8017346:	2922      	cmp	r1, #34	; 0x22
 8017348:	f04f 0100 	mov.w	r1, #0
 801734c:	d904      	bls.n	8017358 <__utoa+0x3c>
 801734e:	7019      	strb	r1, [r3, #0]
 8017350:	460b      	mov	r3, r1
 8017352:	4618      	mov	r0, r3
 8017354:	b00b      	add	sp, #44	; 0x2c
 8017356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017358:	1e58      	subs	r0, r3, #1
 801735a:	4684      	mov	ip, r0
 801735c:	fbb5 f7f2 	udiv	r7, r5, r2
 8017360:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8017364:	fb02 5617 	mls	r6, r2, r7, r5
 8017368:	4476      	add	r6, lr
 801736a:	460c      	mov	r4, r1
 801736c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8017370:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8017374:	462e      	mov	r6, r5
 8017376:	42b2      	cmp	r2, r6
 8017378:	f101 0101 	add.w	r1, r1, #1
 801737c:	463d      	mov	r5, r7
 801737e:	d9ed      	bls.n	801735c <__utoa+0x40>
 8017380:	2200      	movs	r2, #0
 8017382:	545a      	strb	r2, [r3, r1]
 8017384:	1919      	adds	r1, r3, r4
 8017386:	1aa5      	subs	r5, r4, r2
 8017388:	42aa      	cmp	r2, r5
 801738a:	dae2      	bge.n	8017352 <__utoa+0x36>
 801738c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8017390:	780e      	ldrb	r6, [r1, #0]
 8017392:	7006      	strb	r6, [r0, #0]
 8017394:	3201      	adds	r2, #1
 8017396:	f801 5901 	strb.w	r5, [r1], #-1
 801739a:	e7f4      	b.n	8017386 <__utoa+0x6a>
 801739c:	0801a348 	.word	0x0801a348

080173a0 <_write_r>:
 80173a0:	b538      	push	{r3, r4, r5, lr}
 80173a2:	4d07      	ldr	r5, [pc, #28]	; (80173c0 <_write_r+0x20>)
 80173a4:	4604      	mov	r4, r0
 80173a6:	4608      	mov	r0, r1
 80173a8:	4611      	mov	r1, r2
 80173aa:	2200      	movs	r2, #0
 80173ac:	602a      	str	r2, [r5, #0]
 80173ae:	461a      	mov	r2, r3
 80173b0:	f7ed fe2f 	bl	8005012 <_write>
 80173b4:	1c43      	adds	r3, r0, #1
 80173b6:	d102      	bne.n	80173be <_write_r+0x1e>
 80173b8:	682b      	ldr	r3, [r5, #0]
 80173ba:	b103      	cbz	r3, 80173be <_write_r+0x1e>
 80173bc:	6023      	str	r3, [r4, #0]
 80173be:	bd38      	pop	{r3, r4, r5, pc}
 80173c0:	20016ccc 	.word	0x20016ccc

080173c4 <_close_r>:
 80173c4:	b538      	push	{r3, r4, r5, lr}
 80173c6:	4d06      	ldr	r5, [pc, #24]	; (80173e0 <_close_r+0x1c>)
 80173c8:	2300      	movs	r3, #0
 80173ca:	4604      	mov	r4, r0
 80173cc:	4608      	mov	r0, r1
 80173ce:	602b      	str	r3, [r5, #0]
 80173d0:	f7ed fe3b 	bl	800504a <_close>
 80173d4:	1c43      	adds	r3, r0, #1
 80173d6:	d102      	bne.n	80173de <_close_r+0x1a>
 80173d8:	682b      	ldr	r3, [r5, #0]
 80173da:	b103      	cbz	r3, 80173de <_close_r+0x1a>
 80173dc:	6023      	str	r3, [r4, #0]
 80173de:	bd38      	pop	{r3, r4, r5, pc}
 80173e0:	20016ccc 	.word	0x20016ccc

080173e4 <quorem>:
 80173e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173e8:	6903      	ldr	r3, [r0, #16]
 80173ea:	690c      	ldr	r4, [r1, #16]
 80173ec:	42a3      	cmp	r3, r4
 80173ee:	4607      	mov	r7, r0
 80173f0:	f2c0 8081 	blt.w	80174f6 <quorem+0x112>
 80173f4:	3c01      	subs	r4, #1
 80173f6:	f101 0814 	add.w	r8, r1, #20
 80173fa:	f100 0514 	add.w	r5, r0, #20
 80173fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017402:	9301      	str	r3, [sp, #4]
 8017404:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017408:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801740c:	3301      	adds	r3, #1
 801740e:	429a      	cmp	r2, r3
 8017410:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017414:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017418:	fbb2 f6f3 	udiv	r6, r2, r3
 801741c:	d331      	bcc.n	8017482 <quorem+0x9e>
 801741e:	f04f 0e00 	mov.w	lr, #0
 8017422:	4640      	mov	r0, r8
 8017424:	46ac      	mov	ip, r5
 8017426:	46f2      	mov	sl, lr
 8017428:	f850 2b04 	ldr.w	r2, [r0], #4
 801742c:	b293      	uxth	r3, r2
 801742e:	fb06 e303 	mla	r3, r6, r3, lr
 8017432:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017436:	b29b      	uxth	r3, r3
 8017438:	ebaa 0303 	sub.w	r3, sl, r3
 801743c:	0c12      	lsrs	r2, r2, #16
 801743e:	f8dc a000 	ldr.w	sl, [ip]
 8017442:	fb06 e202 	mla	r2, r6, r2, lr
 8017446:	fa13 f38a 	uxtah	r3, r3, sl
 801744a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801744e:	fa1f fa82 	uxth.w	sl, r2
 8017452:	f8dc 2000 	ldr.w	r2, [ip]
 8017456:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801745a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801745e:	b29b      	uxth	r3, r3
 8017460:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017464:	4581      	cmp	r9, r0
 8017466:	f84c 3b04 	str.w	r3, [ip], #4
 801746a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801746e:	d2db      	bcs.n	8017428 <quorem+0x44>
 8017470:	f855 300b 	ldr.w	r3, [r5, fp]
 8017474:	b92b      	cbnz	r3, 8017482 <quorem+0x9e>
 8017476:	9b01      	ldr	r3, [sp, #4]
 8017478:	3b04      	subs	r3, #4
 801747a:	429d      	cmp	r5, r3
 801747c:	461a      	mov	r2, r3
 801747e:	d32e      	bcc.n	80174de <quorem+0xfa>
 8017480:	613c      	str	r4, [r7, #16]
 8017482:	4638      	mov	r0, r7
 8017484:	f001 f98a 	bl	801879c <__mcmp>
 8017488:	2800      	cmp	r0, #0
 801748a:	db24      	blt.n	80174d6 <quorem+0xf2>
 801748c:	3601      	adds	r6, #1
 801748e:	4628      	mov	r0, r5
 8017490:	f04f 0c00 	mov.w	ip, #0
 8017494:	f858 2b04 	ldr.w	r2, [r8], #4
 8017498:	f8d0 e000 	ldr.w	lr, [r0]
 801749c:	b293      	uxth	r3, r2
 801749e:	ebac 0303 	sub.w	r3, ip, r3
 80174a2:	0c12      	lsrs	r2, r2, #16
 80174a4:	fa13 f38e 	uxtah	r3, r3, lr
 80174a8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80174ac:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80174b0:	b29b      	uxth	r3, r3
 80174b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80174b6:	45c1      	cmp	r9, r8
 80174b8:	f840 3b04 	str.w	r3, [r0], #4
 80174bc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80174c0:	d2e8      	bcs.n	8017494 <quorem+0xb0>
 80174c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80174c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80174ca:	b922      	cbnz	r2, 80174d6 <quorem+0xf2>
 80174cc:	3b04      	subs	r3, #4
 80174ce:	429d      	cmp	r5, r3
 80174d0:	461a      	mov	r2, r3
 80174d2:	d30a      	bcc.n	80174ea <quorem+0x106>
 80174d4:	613c      	str	r4, [r7, #16]
 80174d6:	4630      	mov	r0, r6
 80174d8:	b003      	add	sp, #12
 80174da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80174de:	6812      	ldr	r2, [r2, #0]
 80174e0:	3b04      	subs	r3, #4
 80174e2:	2a00      	cmp	r2, #0
 80174e4:	d1cc      	bne.n	8017480 <quorem+0x9c>
 80174e6:	3c01      	subs	r4, #1
 80174e8:	e7c7      	b.n	801747a <quorem+0x96>
 80174ea:	6812      	ldr	r2, [r2, #0]
 80174ec:	3b04      	subs	r3, #4
 80174ee:	2a00      	cmp	r2, #0
 80174f0:	d1f0      	bne.n	80174d4 <quorem+0xf0>
 80174f2:	3c01      	subs	r4, #1
 80174f4:	e7eb      	b.n	80174ce <quorem+0xea>
 80174f6:	2000      	movs	r0, #0
 80174f8:	e7ee      	b.n	80174d8 <quorem+0xf4>
 80174fa:	0000      	movs	r0, r0
 80174fc:	0000      	movs	r0, r0
	...

08017500 <_dtoa_r>:
 8017500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017504:	ed2d 8b02 	vpush	{d8}
 8017508:	ec57 6b10 	vmov	r6, r7, d0
 801750c:	b095      	sub	sp, #84	; 0x54
 801750e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017510:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017514:	9105      	str	r1, [sp, #20]
 8017516:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801751a:	4604      	mov	r4, r0
 801751c:	9209      	str	r2, [sp, #36]	; 0x24
 801751e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017520:	b975      	cbnz	r5, 8017540 <_dtoa_r+0x40>
 8017522:	2010      	movs	r0, #16
 8017524:	f7ff f8cc 	bl	80166c0 <malloc>
 8017528:	4602      	mov	r2, r0
 801752a:	6260      	str	r0, [r4, #36]	; 0x24
 801752c:	b920      	cbnz	r0, 8017538 <_dtoa_r+0x38>
 801752e:	4bb2      	ldr	r3, [pc, #712]	; (80177f8 <_dtoa_r+0x2f8>)
 8017530:	21ea      	movs	r1, #234	; 0xea
 8017532:	48b2      	ldr	r0, [pc, #712]	; (80177fc <_dtoa_r+0x2fc>)
 8017534:	f001 fbae 	bl	8018c94 <__assert_func>
 8017538:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801753c:	6005      	str	r5, [r0, #0]
 801753e:	60c5      	str	r5, [r0, #12]
 8017540:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017542:	6819      	ldr	r1, [r3, #0]
 8017544:	b151      	cbz	r1, 801755c <_dtoa_r+0x5c>
 8017546:	685a      	ldr	r2, [r3, #4]
 8017548:	604a      	str	r2, [r1, #4]
 801754a:	2301      	movs	r3, #1
 801754c:	4093      	lsls	r3, r2
 801754e:	608b      	str	r3, [r1, #8]
 8017550:	4620      	mov	r0, r4
 8017552:	f000 fee5 	bl	8018320 <_Bfree>
 8017556:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017558:	2200      	movs	r2, #0
 801755a:	601a      	str	r2, [r3, #0]
 801755c:	1e3b      	subs	r3, r7, #0
 801755e:	bfb9      	ittee	lt
 8017560:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017564:	9303      	strlt	r3, [sp, #12]
 8017566:	2300      	movge	r3, #0
 8017568:	f8c8 3000 	strge.w	r3, [r8]
 801756c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8017570:	4ba3      	ldr	r3, [pc, #652]	; (8017800 <_dtoa_r+0x300>)
 8017572:	bfbc      	itt	lt
 8017574:	2201      	movlt	r2, #1
 8017576:	f8c8 2000 	strlt.w	r2, [r8]
 801757a:	ea33 0309 	bics.w	r3, r3, r9
 801757e:	d11b      	bne.n	80175b8 <_dtoa_r+0xb8>
 8017580:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017582:	f242 730f 	movw	r3, #9999	; 0x270f
 8017586:	6013      	str	r3, [r2, #0]
 8017588:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801758c:	4333      	orrs	r3, r6
 801758e:	f000 857a 	beq.w	8018086 <_dtoa_r+0xb86>
 8017592:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017594:	b963      	cbnz	r3, 80175b0 <_dtoa_r+0xb0>
 8017596:	4b9b      	ldr	r3, [pc, #620]	; (8017804 <_dtoa_r+0x304>)
 8017598:	e024      	b.n	80175e4 <_dtoa_r+0xe4>
 801759a:	4b9b      	ldr	r3, [pc, #620]	; (8017808 <_dtoa_r+0x308>)
 801759c:	9300      	str	r3, [sp, #0]
 801759e:	3308      	adds	r3, #8
 80175a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80175a2:	6013      	str	r3, [r2, #0]
 80175a4:	9800      	ldr	r0, [sp, #0]
 80175a6:	b015      	add	sp, #84	; 0x54
 80175a8:	ecbd 8b02 	vpop	{d8}
 80175ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175b0:	4b94      	ldr	r3, [pc, #592]	; (8017804 <_dtoa_r+0x304>)
 80175b2:	9300      	str	r3, [sp, #0]
 80175b4:	3303      	adds	r3, #3
 80175b6:	e7f3      	b.n	80175a0 <_dtoa_r+0xa0>
 80175b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80175bc:	2200      	movs	r2, #0
 80175be:	ec51 0b17 	vmov	r0, r1, d7
 80175c2:	2300      	movs	r3, #0
 80175c4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80175c8:	f7e9 fa7e 	bl	8000ac8 <__aeabi_dcmpeq>
 80175cc:	4680      	mov	r8, r0
 80175ce:	b158      	cbz	r0, 80175e8 <_dtoa_r+0xe8>
 80175d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80175d2:	2301      	movs	r3, #1
 80175d4:	6013      	str	r3, [r2, #0]
 80175d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80175d8:	2b00      	cmp	r3, #0
 80175da:	f000 8551 	beq.w	8018080 <_dtoa_r+0xb80>
 80175de:	488b      	ldr	r0, [pc, #556]	; (801780c <_dtoa_r+0x30c>)
 80175e0:	6018      	str	r0, [r3, #0]
 80175e2:	1e43      	subs	r3, r0, #1
 80175e4:	9300      	str	r3, [sp, #0]
 80175e6:	e7dd      	b.n	80175a4 <_dtoa_r+0xa4>
 80175e8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80175ec:	aa12      	add	r2, sp, #72	; 0x48
 80175ee:	a913      	add	r1, sp, #76	; 0x4c
 80175f0:	4620      	mov	r0, r4
 80175f2:	f001 f977 	bl	80188e4 <__d2b>
 80175f6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80175fa:	4683      	mov	fp, r0
 80175fc:	2d00      	cmp	r5, #0
 80175fe:	d07c      	beq.n	80176fa <_dtoa_r+0x1fa>
 8017600:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017602:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8017606:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801760a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801760e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8017612:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8017616:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801761a:	4b7d      	ldr	r3, [pc, #500]	; (8017810 <_dtoa_r+0x310>)
 801761c:	2200      	movs	r2, #0
 801761e:	4630      	mov	r0, r6
 8017620:	4639      	mov	r1, r7
 8017622:	f7e8 fe31 	bl	8000288 <__aeabi_dsub>
 8017626:	a36e      	add	r3, pc, #440	; (adr r3, 80177e0 <_dtoa_r+0x2e0>)
 8017628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801762c:	f7e8 ffe4 	bl	80005f8 <__aeabi_dmul>
 8017630:	a36d      	add	r3, pc, #436	; (adr r3, 80177e8 <_dtoa_r+0x2e8>)
 8017632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017636:	f7e8 fe29 	bl	800028c <__adddf3>
 801763a:	4606      	mov	r6, r0
 801763c:	4628      	mov	r0, r5
 801763e:	460f      	mov	r7, r1
 8017640:	f7e8 ff70 	bl	8000524 <__aeabi_i2d>
 8017644:	a36a      	add	r3, pc, #424	; (adr r3, 80177f0 <_dtoa_r+0x2f0>)
 8017646:	e9d3 2300 	ldrd	r2, r3, [r3]
 801764a:	f7e8 ffd5 	bl	80005f8 <__aeabi_dmul>
 801764e:	4602      	mov	r2, r0
 8017650:	460b      	mov	r3, r1
 8017652:	4630      	mov	r0, r6
 8017654:	4639      	mov	r1, r7
 8017656:	f7e8 fe19 	bl	800028c <__adddf3>
 801765a:	4606      	mov	r6, r0
 801765c:	460f      	mov	r7, r1
 801765e:	f7e9 fa7b 	bl	8000b58 <__aeabi_d2iz>
 8017662:	2200      	movs	r2, #0
 8017664:	4682      	mov	sl, r0
 8017666:	2300      	movs	r3, #0
 8017668:	4630      	mov	r0, r6
 801766a:	4639      	mov	r1, r7
 801766c:	f7e9 fa36 	bl	8000adc <__aeabi_dcmplt>
 8017670:	b148      	cbz	r0, 8017686 <_dtoa_r+0x186>
 8017672:	4650      	mov	r0, sl
 8017674:	f7e8 ff56 	bl	8000524 <__aeabi_i2d>
 8017678:	4632      	mov	r2, r6
 801767a:	463b      	mov	r3, r7
 801767c:	f7e9 fa24 	bl	8000ac8 <__aeabi_dcmpeq>
 8017680:	b908      	cbnz	r0, 8017686 <_dtoa_r+0x186>
 8017682:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8017686:	f1ba 0f16 	cmp.w	sl, #22
 801768a:	d854      	bhi.n	8017736 <_dtoa_r+0x236>
 801768c:	4b61      	ldr	r3, [pc, #388]	; (8017814 <_dtoa_r+0x314>)
 801768e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8017692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017696:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801769a:	f7e9 fa1f 	bl	8000adc <__aeabi_dcmplt>
 801769e:	2800      	cmp	r0, #0
 80176a0:	d04b      	beq.n	801773a <_dtoa_r+0x23a>
 80176a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80176a6:	2300      	movs	r3, #0
 80176a8:	930e      	str	r3, [sp, #56]	; 0x38
 80176aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80176ac:	1b5d      	subs	r5, r3, r5
 80176ae:	1e6b      	subs	r3, r5, #1
 80176b0:	9304      	str	r3, [sp, #16]
 80176b2:	bf43      	ittte	mi
 80176b4:	2300      	movmi	r3, #0
 80176b6:	f1c5 0801 	rsbmi	r8, r5, #1
 80176ba:	9304      	strmi	r3, [sp, #16]
 80176bc:	f04f 0800 	movpl.w	r8, #0
 80176c0:	f1ba 0f00 	cmp.w	sl, #0
 80176c4:	db3b      	blt.n	801773e <_dtoa_r+0x23e>
 80176c6:	9b04      	ldr	r3, [sp, #16]
 80176c8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80176cc:	4453      	add	r3, sl
 80176ce:	9304      	str	r3, [sp, #16]
 80176d0:	2300      	movs	r3, #0
 80176d2:	9306      	str	r3, [sp, #24]
 80176d4:	9b05      	ldr	r3, [sp, #20]
 80176d6:	2b09      	cmp	r3, #9
 80176d8:	d869      	bhi.n	80177ae <_dtoa_r+0x2ae>
 80176da:	2b05      	cmp	r3, #5
 80176dc:	bfc4      	itt	gt
 80176de:	3b04      	subgt	r3, #4
 80176e0:	9305      	strgt	r3, [sp, #20]
 80176e2:	9b05      	ldr	r3, [sp, #20]
 80176e4:	f1a3 0302 	sub.w	r3, r3, #2
 80176e8:	bfcc      	ite	gt
 80176ea:	2500      	movgt	r5, #0
 80176ec:	2501      	movle	r5, #1
 80176ee:	2b03      	cmp	r3, #3
 80176f0:	d869      	bhi.n	80177c6 <_dtoa_r+0x2c6>
 80176f2:	e8df f003 	tbb	[pc, r3]
 80176f6:	4e2c      	.short	0x4e2c
 80176f8:	5a4c      	.short	0x5a4c
 80176fa:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80176fe:	441d      	add	r5, r3
 8017700:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8017704:	2b20      	cmp	r3, #32
 8017706:	bfc1      	itttt	gt
 8017708:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801770c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8017710:	fa09 f303 	lslgt.w	r3, r9, r3
 8017714:	fa26 f000 	lsrgt.w	r0, r6, r0
 8017718:	bfda      	itte	le
 801771a:	f1c3 0320 	rsble	r3, r3, #32
 801771e:	fa06 f003 	lslle.w	r0, r6, r3
 8017722:	4318      	orrgt	r0, r3
 8017724:	f7e8 feee 	bl	8000504 <__aeabi_ui2d>
 8017728:	2301      	movs	r3, #1
 801772a:	4606      	mov	r6, r0
 801772c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8017730:	3d01      	subs	r5, #1
 8017732:	9310      	str	r3, [sp, #64]	; 0x40
 8017734:	e771      	b.n	801761a <_dtoa_r+0x11a>
 8017736:	2301      	movs	r3, #1
 8017738:	e7b6      	b.n	80176a8 <_dtoa_r+0x1a8>
 801773a:	900e      	str	r0, [sp, #56]	; 0x38
 801773c:	e7b5      	b.n	80176aa <_dtoa_r+0x1aa>
 801773e:	f1ca 0300 	rsb	r3, sl, #0
 8017742:	9306      	str	r3, [sp, #24]
 8017744:	2300      	movs	r3, #0
 8017746:	eba8 080a 	sub.w	r8, r8, sl
 801774a:	930d      	str	r3, [sp, #52]	; 0x34
 801774c:	e7c2      	b.n	80176d4 <_dtoa_r+0x1d4>
 801774e:	2300      	movs	r3, #0
 8017750:	9308      	str	r3, [sp, #32]
 8017752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017754:	2b00      	cmp	r3, #0
 8017756:	dc39      	bgt.n	80177cc <_dtoa_r+0x2cc>
 8017758:	f04f 0901 	mov.w	r9, #1
 801775c:	f8cd 9004 	str.w	r9, [sp, #4]
 8017760:	464b      	mov	r3, r9
 8017762:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8017766:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8017768:	2200      	movs	r2, #0
 801776a:	6042      	str	r2, [r0, #4]
 801776c:	2204      	movs	r2, #4
 801776e:	f102 0614 	add.w	r6, r2, #20
 8017772:	429e      	cmp	r6, r3
 8017774:	6841      	ldr	r1, [r0, #4]
 8017776:	d92f      	bls.n	80177d8 <_dtoa_r+0x2d8>
 8017778:	4620      	mov	r0, r4
 801777a:	f000 fd91 	bl	80182a0 <_Balloc>
 801777e:	9000      	str	r0, [sp, #0]
 8017780:	2800      	cmp	r0, #0
 8017782:	d14b      	bne.n	801781c <_dtoa_r+0x31c>
 8017784:	4b24      	ldr	r3, [pc, #144]	; (8017818 <_dtoa_r+0x318>)
 8017786:	4602      	mov	r2, r0
 8017788:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801778c:	e6d1      	b.n	8017532 <_dtoa_r+0x32>
 801778e:	2301      	movs	r3, #1
 8017790:	e7de      	b.n	8017750 <_dtoa_r+0x250>
 8017792:	2300      	movs	r3, #0
 8017794:	9308      	str	r3, [sp, #32]
 8017796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017798:	eb0a 0903 	add.w	r9, sl, r3
 801779c:	f109 0301 	add.w	r3, r9, #1
 80177a0:	2b01      	cmp	r3, #1
 80177a2:	9301      	str	r3, [sp, #4]
 80177a4:	bfb8      	it	lt
 80177a6:	2301      	movlt	r3, #1
 80177a8:	e7dd      	b.n	8017766 <_dtoa_r+0x266>
 80177aa:	2301      	movs	r3, #1
 80177ac:	e7f2      	b.n	8017794 <_dtoa_r+0x294>
 80177ae:	2501      	movs	r5, #1
 80177b0:	2300      	movs	r3, #0
 80177b2:	9305      	str	r3, [sp, #20]
 80177b4:	9508      	str	r5, [sp, #32]
 80177b6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80177ba:	2200      	movs	r2, #0
 80177bc:	f8cd 9004 	str.w	r9, [sp, #4]
 80177c0:	2312      	movs	r3, #18
 80177c2:	9209      	str	r2, [sp, #36]	; 0x24
 80177c4:	e7cf      	b.n	8017766 <_dtoa_r+0x266>
 80177c6:	2301      	movs	r3, #1
 80177c8:	9308      	str	r3, [sp, #32]
 80177ca:	e7f4      	b.n	80177b6 <_dtoa_r+0x2b6>
 80177cc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80177d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80177d4:	464b      	mov	r3, r9
 80177d6:	e7c6      	b.n	8017766 <_dtoa_r+0x266>
 80177d8:	3101      	adds	r1, #1
 80177da:	6041      	str	r1, [r0, #4]
 80177dc:	0052      	lsls	r2, r2, #1
 80177de:	e7c6      	b.n	801776e <_dtoa_r+0x26e>
 80177e0:	636f4361 	.word	0x636f4361
 80177e4:	3fd287a7 	.word	0x3fd287a7
 80177e8:	8b60c8b3 	.word	0x8b60c8b3
 80177ec:	3fc68a28 	.word	0x3fc68a28
 80177f0:	509f79fb 	.word	0x509f79fb
 80177f4:	3fd34413 	.word	0x3fd34413
 80177f8:	0801a37a 	.word	0x0801a37a
 80177fc:	0801a391 	.word	0x0801a391
 8017800:	7ff00000 	.word	0x7ff00000
 8017804:	0801a376 	.word	0x0801a376
 8017808:	0801a36d 	.word	0x0801a36d
 801780c:	0801a325 	.word	0x0801a325
 8017810:	3ff80000 	.word	0x3ff80000
 8017814:	0801a490 	.word	0x0801a490
 8017818:	0801a3f0 	.word	0x0801a3f0
 801781c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801781e:	9a00      	ldr	r2, [sp, #0]
 8017820:	601a      	str	r2, [r3, #0]
 8017822:	9b01      	ldr	r3, [sp, #4]
 8017824:	2b0e      	cmp	r3, #14
 8017826:	f200 80ad 	bhi.w	8017984 <_dtoa_r+0x484>
 801782a:	2d00      	cmp	r5, #0
 801782c:	f000 80aa 	beq.w	8017984 <_dtoa_r+0x484>
 8017830:	f1ba 0f00 	cmp.w	sl, #0
 8017834:	dd36      	ble.n	80178a4 <_dtoa_r+0x3a4>
 8017836:	4ac3      	ldr	r2, [pc, #780]	; (8017b44 <_dtoa_r+0x644>)
 8017838:	f00a 030f 	and.w	r3, sl, #15
 801783c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017840:	ed93 7b00 	vldr	d7, [r3]
 8017844:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8017848:	ea4f 172a 	mov.w	r7, sl, asr #4
 801784c:	eeb0 8a47 	vmov.f32	s16, s14
 8017850:	eef0 8a67 	vmov.f32	s17, s15
 8017854:	d016      	beq.n	8017884 <_dtoa_r+0x384>
 8017856:	4bbc      	ldr	r3, [pc, #752]	; (8017b48 <_dtoa_r+0x648>)
 8017858:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801785c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8017860:	f7e8 fff4 	bl	800084c <__aeabi_ddiv>
 8017864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017868:	f007 070f 	and.w	r7, r7, #15
 801786c:	2503      	movs	r5, #3
 801786e:	4eb6      	ldr	r6, [pc, #728]	; (8017b48 <_dtoa_r+0x648>)
 8017870:	b957      	cbnz	r7, 8017888 <_dtoa_r+0x388>
 8017872:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017876:	ec53 2b18 	vmov	r2, r3, d8
 801787a:	f7e8 ffe7 	bl	800084c <__aeabi_ddiv>
 801787e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017882:	e029      	b.n	80178d8 <_dtoa_r+0x3d8>
 8017884:	2502      	movs	r5, #2
 8017886:	e7f2      	b.n	801786e <_dtoa_r+0x36e>
 8017888:	07f9      	lsls	r1, r7, #31
 801788a:	d508      	bpl.n	801789e <_dtoa_r+0x39e>
 801788c:	ec51 0b18 	vmov	r0, r1, d8
 8017890:	e9d6 2300 	ldrd	r2, r3, [r6]
 8017894:	f7e8 feb0 	bl	80005f8 <__aeabi_dmul>
 8017898:	ec41 0b18 	vmov	d8, r0, r1
 801789c:	3501      	adds	r5, #1
 801789e:	107f      	asrs	r7, r7, #1
 80178a0:	3608      	adds	r6, #8
 80178a2:	e7e5      	b.n	8017870 <_dtoa_r+0x370>
 80178a4:	f000 80a6 	beq.w	80179f4 <_dtoa_r+0x4f4>
 80178a8:	f1ca 0600 	rsb	r6, sl, #0
 80178ac:	4ba5      	ldr	r3, [pc, #660]	; (8017b44 <_dtoa_r+0x644>)
 80178ae:	4fa6      	ldr	r7, [pc, #664]	; (8017b48 <_dtoa_r+0x648>)
 80178b0:	f006 020f 	and.w	r2, r6, #15
 80178b4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80178b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80178bc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80178c0:	f7e8 fe9a 	bl	80005f8 <__aeabi_dmul>
 80178c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80178c8:	1136      	asrs	r6, r6, #4
 80178ca:	2300      	movs	r3, #0
 80178cc:	2502      	movs	r5, #2
 80178ce:	2e00      	cmp	r6, #0
 80178d0:	f040 8085 	bne.w	80179de <_dtoa_r+0x4de>
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d1d2      	bne.n	801787e <_dtoa_r+0x37e>
 80178d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80178da:	2b00      	cmp	r3, #0
 80178dc:	f000 808c 	beq.w	80179f8 <_dtoa_r+0x4f8>
 80178e0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80178e4:	4b99      	ldr	r3, [pc, #612]	; (8017b4c <_dtoa_r+0x64c>)
 80178e6:	2200      	movs	r2, #0
 80178e8:	4630      	mov	r0, r6
 80178ea:	4639      	mov	r1, r7
 80178ec:	f7e9 f8f6 	bl	8000adc <__aeabi_dcmplt>
 80178f0:	2800      	cmp	r0, #0
 80178f2:	f000 8081 	beq.w	80179f8 <_dtoa_r+0x4f8>
 80178f6:	9b01      	ldr	r3, [sp, #4]
 80178f8:	2b00      	cmp	r3, #0
 80178fa:	d07d      	beq.n	80179f8 <_dtoa_r+0x4f8>
 80178fc:	f1b9 0f00 	cmp.w	r9, #0
 8017900:	dd3c      	ble.n	801797c <_dtoa_r+0x47c>
 8017902:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8017906:	9307      	str	r3, [sp, #28]
 8017908:	2200      	movs	r2, #0
 801790a:	4b91      	ldr	r3, [pc, #580]	; (8017b50 <_dtoa_r+0x650>)
 801790c:	4630      	mov	r0, r6
 801790e:	4639      	mov	r1, r7
 8017910:	f7e8 fe72 	bl	80005f8 <__aeabi_dmul>
 8017914:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017918:	3501      	adds	r5, #1
 801791a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 801791e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017922:	4628      	mov	r0, r5
 8017924:	f7e8 fdfe 	bl	8000524 <__aeabi_i2d>
 8017928:	4632      	mov	r2, r6
 801792a:	463b      	mov	r3, r7
 801792c:	f7e8 fe64 	bl	80005f8 <__aeabi_dmul>
 8017930:	4b88      	ldr	r3, [pc, #544]	; (8017b54 <_dtoa_r+0x654>)
 8017932:	2200      	movs	r2, #0
 8017934:	f7e8 fcaa 	bl	800028c <__adddf3>
 8017938:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 801793c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017940:	9303      	str	r3, [sp, #12]
 8017942:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017944:	2b00      	cmp	r3, #0
 8017946:	d15c      	bne.n	8017a02 <_dtoa_r+0x502>
 8017948:	4b83      	ldr	r3, [pc, #524]	; (8017b58 <_dtoa_r+0x658>)
 801794a:	2200      	movs	r2, #0
 801794c:	4630      	mov	r0, r6
 801794e:	4639      	mov	r1, r7
 8017950:	f7e8 fc9a 	bl	8000288 <__aeabi_dsub>
 8017954:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017958:	4606      	mov	r6, r0
 801795a:	460f      	mov	r7, r1
 801795c:	f7e9 f8dc 	bl	8000b18 <__aeabi_dcmpgt>
 8017960:	2800      	cmp	r0, #0
 8017962:	f040 8296 	bne.w	8017e92 <_dtoa_r+0x992>
 8017966:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801796a:	4630      	mov	r0, r6
 801796c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017970:	4639      	mov	r1, r7
 8017972:	f7e9 f8b3 	bl	8000adc <__aeabi_dcmplt>
 8017976:	2800      	cmp	r0, #0
 8017978:	f040 8288 	bne.w	8017e8c <_dtoa_r+0x98c>
 801797c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017980:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8017984:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8017986:	2b00      	cmp	r3, #0
 8017988:	f2c0 8158 	blt.w	8017c3c <_dtoa_r+0x73c>
 801798c:	f1ba 0f0e 	cmp.w	sl, #14
 8017990:	f300 8154 	bgt.w	8017c3c <_dtoa_r+0x73c>
 8017994:	4b6b      	ldr	r3, [pc, #428]	; (8017b44 <_dtoa_r+0x644>)
 8017996:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801799a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801799e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	f280 80e3 	bge.w	8017b6c <_dtoa_r+0x66c>
 80179a6:	9b01      	ldr	r3, [sp, #4]
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	f300 80df 	bgt.w	8017b6c <_dtoa_r+0x66c>
 80179ae:	f040 826d 	bne.w	8017e8c <_dtoa_r+0x98c>
 80179b2:	4b69      	ldr	r3, [pc, #420]	; (8017b58 <_dtoa_r+0x658>)
 80179b4:	2200      	movs	r2, #0
 80179b6:	4640      	mov	r0, r8
 80179b8:	4649      	mov	r1, r9
 80179ba:	f7e8 fe1d 	bl	80005f8 <__aeabi_dmul>
 80179be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80179c2:	f7e9 f89f 	bl	8000b04 <__aeabi_dcmpge>
 80179c6:	9e01      	ldr	r6, [sp, #4]
 80179c8:	4637      	mov	r7, r6
 80179ca:	2800      	cmp	r0, #0
 80179cc:	f040 8243 	bne.w	8017e56 <_dtoa_r+0x956>
 80179d0:	9d00      	ldr	r5, [sp, #0]
 80179d2:	2331      	movs	r3, #49	; 0x31
 80179d4:	f805 3b01 	strb.w	r3, [r5], #1
 80179d8:	f10a 0a01 	add.w	sl, sl, #1
 80179dc:	e23f      	b.n	8017e5e <_dtoa_r+0x95e>
 80179de:	07f2      	lsls	r2, r6, #31
 80179e0:	d505      	bpl.n	80179ee <_dtoa_r+0x4ee>
 80179e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80179e6:	f7e8 fe07 	bl	80005f8 <__aeabi_dmul>
 80179ea:	3501      	adds	r5, #1
 80179ec:	2301      	movs	r3, #1
 80179ee:	1076      	asrs	r6, r6, #1
 80179f0:	3708      	adds	r7, #8
 80179f2:	e76c      	b.n	80178ce <_dtoa_r+0x3ce>
 80179f4:	2502      	movs	r5, #2
 80179f6:	e76f      	b.n	80178d8 <_dtoa_r+0x3d8>
 80179f8:	9b01      	ldr	r3, [sp, #4]
 80179fa:	f8cd a01c 	str.w	sl, [sp, #28]
 80179fe:	930c      	str	r3, [sp, #48]	; 0x30
 8017a00:	e78d      	b.n	801791e <_dtoa_r+0x41e>
 8017a02:	9900      	ldr	r1, [sp, #0]
 8017a04:	980c      	ldr	r0, [sp, #48]	; 0x30
 8017a06:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017a08:	4b4e      	ldr	r3, [pc, #312]	; (8017b44 <_dtoa_r+0x644>)
 8017a0a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017a0e:	4401      	add	r1, r0
 8017a10:	9102      	str	r1, [sp, #8]
 8017a12:	9908      	ldr	r1, [sp, #32]
 8017a14:	eeb0 8a47 	vmov.f32	s16, s14
 8017a18:	eef0 8a67 	vmov.f32	s17, s15
 8017a1c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8017a20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017a24:	2900      	cmp	r1, #0
 8017a26:	d045      	beq.n	8017ab4 <_dtoa_r+0x5b4>
 8017a28:	494c      	ldr	r1, [pc, #304]	; (8017b5c <_dtoa_r+0x65c>)
 8017a2a:	2000      	movs	r0, #0
 8017a2c:	f7e8 ff0e 	bl	800084c <__aeabi_ddiv>
 8017a30:	ec53 2b18 	vmov	r2, r3, d8
 8017a34:	f7e8 fc28 	bl	8000288 <__aeabi_dsub>
 8017a38:	9d00      	ldr	r5, [sp, #0]
 8017a3a:	ec41 0b18 	vmov	d8, r0, r1
 8017a3e:	4639      	mov	r1, r7
 8017a40:	4630      	mov	r0, r6
 8017a42:	f7e9 f889 	bl	8000b58 <__aeabi_d2iz>
 8017a46:	900c      	str	r0, [sp, #48]	; 0x30
 8017a48:	f7e8 fd6c 	bl	8000524 <__aeabi_i2d>
 8017a4c:	4602      	mov	r2, r0
 8017a4e:	460b      	mov	r3, r1
 8017a50:	4630      	mov	r0, r6
 8017a52:	4639      	mov	r1, r7
 8017a54:	f7e8 fc18 	bl	8000288 <__aeabi_dsub>
 8017a58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8017a5a:	3330      	adds	r3, #48	; 0x30
 8017a5c:	f805 3b01 	strb.w	r3, [r5], #1
 8017a60:	ec53 2b18 	vmov	r2, r3, d8
 8017a64:	4606      	mov	r6, r0
 8017a66:	460f      	mov	r7, r1
 8017a68:	f7e9 f838 	bl	8000adc <__aeabi_dcmplt>
 8017a6c:	2800      	cmp	r0, #0
 8017a6e:	d165      	bne.n	8017b3c <_dtoa_r+0x63c>
 8017a70:	4632      	mov	r2, r6
 8017a72:	463b      	mov	r3, r7
 8017a74:	4935      	ldr	r1, [pc, #212]	; (8017b4c <_dtoa_r+0x64c>)
 8017a76:	2000      	movs	r0, #0
 8017a78:	f7e8 fc06 	bl	8000288 <__aeabi_dsub>
 8017a7c:	ec53 2b18 	vmov	r2, r3, d8
 8017a80:	f7e9 f82c 	bl	8000adc <__aeabi_dcmplt>
 8017a84:	2800      	cmp	r0, #0
 8017a86:	f040 80b9 	bne.w	8017bfc <_dtoa_r+0x6fc>
 8017a8a:	9b02      	ldr	r3, [sp, #8]
 8017a8c:	429d      	cmp	r5, r3
 8017a8e:	f43f af75 	beq.w	801797c <_dtoa_r+0x47c>
 8017a92:	4b2f      	ldr	r3, [pc, #188]	; (8017b50 <_dtoa_r+0x650>)
 8017a94:	ec51 0b18 	vmov	r0, r1, d8
 8017a98:	2200      	movs	r2, #0
 8017a9a:	f7e8 fdad 	bl	80005f8 <__aeabi_dmul>
 8017a9e:	4b2c      	ldr	r3, [pc, #176]	; (8017b50 <_dtoa_r+0x650>)
 8017aa0:	ec41 0b18 	vmov	d8, r0, r1
 8017aa4:	2200      	movs	r2, #0
 8017aa6:	4630      	mov	r0, r6
 8017aa8:	4639      	mov	r1, r7
 8017aaa:	f7e8 fda5 	bl	80005f8 <__aeabi_dmul>
 8017aae:	4606      	mov	r6, r0
 8017ab0:	460f      	mov	r7, r1
 8017ab2:	e7c4      	b.n	8017a3e <_dtoa_r+0x53e>
 8017ab4:	ec51 0b17 	vmov	r0, r1, d7
 8017ab8:	f7e8 fd9e 	bl	80005f8 <__aeabi_dmul>
 8017abc:	9b02      	ldr	r3, [sp, #8]
 8017abe:	9d00      	ldr	r5, [sp, #0]
 8017ac0:	930c      	str	r3, [sp, #48]	; 0x30
 8017ac2:	ec41 0b18 	vmov	d8, r0, r1
 8017ac6:	4639      	mov	r1, r7
 8017ac8:	4630      	mov	r0, r6
 8017aca:	f7e9 f845 	bl	8000b58 <__aeabi_d2iz>
 8017ace:	9011      	str	r0, [sp, #68]	; 0x44
 8017ad0:	f7e8 fd28 	bl	8000524 <__aeabi_i2d>
 8017ad4:	4602      	mov	r2, r0
 8017ad6:	460b      	mov	r3, r1
 8017ad8:	4630      	mov	r0, r6
 8017ada:	4639      	mov	r1, r7
 8017adc:	f7e8 fbd4 	bl	8000288 <__aeabi_dsub>
 8017ae0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8017ae2:	3330      	adds	r3, #48	; 0x30
 8017ae4:	f805 3b01 	strb.w	r3, [r5], #1
 8017ae8:	9b02      	ldr	r3, [sp, #8]
 8017aea:	429d      	cmp	r5, r3
 8017aec:	4606      	mov	r6, r0
 8017aee:	460f      	mov	r7, r1
 8017af0:	f04f 0200 	mov.w	r2, #0
 8017af4:	d134      	bne.n	8017b60 <_dtoa_r+0x660>
 8017af6:	4b19      	ldr	r3, [pc, #100]	; (8017b5c <_dtoa_r+0x65c>)
 8017af8:	ec51 0b18 	vmov	r0, r1, d8
 8017afc:	f7e8 fbc6 	bl	800028c <__adddf3>
 8017b00:	4602      	mov	r2, r0
 8017b02:	460b      	mov	r3, r1
 8017b04:	4630      	mov	r0, r6
 8017b06:	4639      	mov	r1, r7
 8017b08:	f7e9 f806 	bl	8000b18 <__aeabi_dcmpgt>
 8017b0c:	2800      	cmp	r0, #0
 8017b0e:	d175      	bne.n	8017bfc <_dtoa_r+0x6fc>
 8017b10:	ec53 2b18 	vmov	r2, r3, d8
 8017b14:	4911      	ldr	r1, [pc, #68]	; (8017b5c <_dtoa_r+0x65c>)
 8017b16:	2000      	movs	r0, #0
 8017b18:	f7e8 fbb6 	bl	8000288 <__aeabi_dsub>
 8017b1c:	4602      	mov	r2, r0
 8017b1e:	460b      	mov	r3, r1
 8017b20:	4630      	mov	r0, r6
 8017b22:	4639      	mov	r1, r7
 8017b24:	f7e8 ffda 	bl	8000adc <__aeabi_dcmplt>
 8017b28:	2800      	cmp	r0, #0
 8017b2a:	f43f af27 	beq.w	801797c <_dtoa_r+0x47c>
 8017b2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017b30:	1e6b      	subs	r3, r5, #1
 8017b32:	930c      	str	r3, [sp, #48]	; 0x30
 8017b34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017b38:	2b30      	cmp	r3, #48	; 0x30
 8017b3a:	d0f8      	beq.n	8017b2e <_dtoa_r+0x62e>
 8017b3c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8017b40:	e04a      	b.n	8017bd8 <_dtoa_r+0x6d8>
 8017b42:	bf00      	nop
 8017b44:	0801a490 	.word	0x0801a490
 8017b48:	0801a468 	.word	0x0801a468
 8017b4c:	3ff00000 	.word	0x3ff00000
 8017b50:	40240000 	.word	0x40240000
 8017b54:	401c0000 	.word	0x401c0000
 8017b58:	40140000 	.word	0x40140000
 8017b5c:	3fe00000 	.word	0x3fe00000
 8017b60:	4baf      	ldr	r3, [pc, #700]	; (8017e20 <_dtoa_r+0x920>)
 8017b62:	f7e8 fd49 	bl	80005f8 <__aeabi_dmul>
 8017b66:	4606      	mov	r6, r0
 8017b68:	460f      	mov	r7, r1
 8017b6a:	e7ac      	b.n	8017ac6 <_dtoa_r+0x5c6>
 8017b6c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8017b70:	9d00      	ldr	r5, [sp, #0]
 8017b72:	4642      	mov	r2, r8
 8017b74:	464b      	mov	r3, r9
 8017b76:	4630      	mov	r0, r6
 8017b78:	4639      	mov	r1, r7
 8017b7a:	f7e8 fe67 	bl	800084c <__aeabi_ddiv>
 8017b7e:	f7e8 ffeb 	bl	8000b58 <__aeabi_d2iz>
 8017b82:	9002      	str	r0, [sp, #8]
 8017b84:	f7e8 fcce 	bl	8000524 <__aeabi_i2d>
 8017b88:	4642      	mov	r2, r8
 8017b8a:	464b      	mov	r3, r9
 8017b8c:	f7e8 fd34 	bl	80005f8 <__aeabi_dmul>
 8017b90:	4602      	mov	r2, r0
 8017b92:	460b      	mov	r3, r1
 8017b94:	4630      	mov	r0, r6
 8017b96:	4639      	mov	r1, r7
 8017b98:	f7e8 fb76 	bl	8000288 <__aeabi_dsub>
 8017b9c:	9e02      	ldr	r6, [sp, #8]
 8017b9e:	9f01      	ldr	r7, [sp, #4]
 8017ba0:	3630      	adds	r6, #48	; 0x30
 8017ba2:	f805 6b01 	strb.w	r6, [r5], #1
 8017ba6:	9e00      	ldr	r6, [sp, #0]
 8017ba8:	1bae      	subs	r6, r5, r6
 8017baa:	42b7      	cmp	r7, r6
 8017bac:	4602      	mov	r2, r0
 8017bae:	460b      	mov	r3, r1
 8017bb0:	d137      	bne.n	8017c22 <_dtoa_r+0x722>
 8017bb2:	f7e8 fb6b 	bl	800028c <__adddf3>
 8017bb6:	4642      	mov	r2, r8
 8017bb8:	464b      	mov	r3, r9
 8017bba:	4606      	mov	r6, r0
 8017bbc:	460f      	mov	r7, r1
 8017bbe:	f7e8 ffab 	bl	8000b18 <__aeabi_dcmpgt>
 8017bc2:	b9c8      	cbnz	r0, 8017bf8 <_dtoa_r+0x6f8>
 8017bc4:	4642      	mov	r2, r8
 8017bc6:	464b      	mov	r3, r9
 8017bc8:	4630      	mov	r0, r6
 8017bca:	4639      	mov	r1, r7
 8017bcc:	f7e8 ff7c 	bl	8000ac8 <__aeabi_dcmpeq>
 8017bd0:	b110      	cbz	r0, 8017bd8 <_dtoa_r+0x6d8>
 8017bd2:	9b02      	ldr	r3, [sp, #8]
 8017bd4:	07d9      	lsls	r1, r3, #31
 8017bd6:	d40f      	bmi.n	8017bf8 <_dtoa_r+0x6f8>
 8017bd8:	4620      	mov	r0, r4
 8017bda:	4659      	mov	r1, fp
 8017bdc:	f000 fba0 	bl	8018320 <_Bfree>
 8017be0:	2300      	movs	r3, #0
 8017be2:	702b      	strb	r3, [r5, #0]
 8017be4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8017be6:	f10a 0001 	add.w	r0, sl, #1
 8017bea:	6018      	str	r0, [r3, #0]
 8017bec:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	f43f acd8 	beq.w	80175a4 <_dtoa_r+0xa4>
 8017bf4:	601d      	str	r5, [r3, #0]
 8017bf6:	e4d5      	b.n	80175a4 <_dtoa_r+0xa4>
 8017bf8:	f8cd a01c 	str.w	sl, [sp, #28]
 8017bfc:	462b      	mov	r3, r5
 8017bfe:	461d      	mov	r5, r3
 8017c00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8017c04:	2a39      	cmp	r2, #57	; 0x39
 8017c06:	d108      	bne.n	8017c1a <_dtoa_r+0x71a>
 8017c08:	9a00      	ldr	r2, [sp, #0]
 8017c0a:	429a      	cmp	r2, r3
 8017c0c:	d1f7      	bne.n	8017bfe <_dtoa_r+0x6fe>
 8017c0e:	9a07      	ldr	r2, [sp, #28]
 8017c10:	9900      	ldr	r1, [sp, #0]
 8017c12:	3201      	adds	r2, #1
 8017c14:	9207      	str	r2, [sp, #28]
 8017c16:	2230      	movs	r2, #48	; 0x30
 8017c18:	700a      	strb	r2, [r1, #0]
 8017c1a:	781a      	ldrb	r2, [r3, #0]
 8017c1c:	3201      	adds	r2, #1
 8017c1e:	701a      	strb	r2, [r3, #0]
 8017c20:	e78c      	b.n	8017b3c <_dtoa_r+0x63c>
 8017c22:	4b7f      	ldr	r3, [pc, #508]	; (8017e20 <_dtoa_r+0x920>)
 8017c24:	2200      	movs	r2, #0
 8017c26:	f7e8 fce7 	bl	80005f8 <__aeabi_dmul>
 8017c2a:	2200      	movs	r2, #0
 8017c2c:	2300      	movs	r3, #0
 8017c2e:	4606      	mov	r6, r0
 8017c30:	460f      	mov	r7, r1
 8017c32:	f7e8 ff49 	bl	8000ac8 <__aeabi_dcmpeq>
 8017c36:	2800      	cmp	r0, #0
 8017c38:	d09b      	beq.n	8017b72 <_dtoa_r+0x672>
 8017c3a:	e7cd      	b.n	8017bd8 <_dtoa_r+0x6d8>
 8017c3c:	9a08      	ldr	r2, [sp, #32]
 8017c3e:	2a00      	cmp	r2, #0
 8017c40:	f000 80c4 	beq.w	8017dcc <_dtoa_r+0x8cc>
 8017c44:	9a05      	ldr	r2, [sp, #20]
 8017c46:	2a01      	cmp	r2, #1
 8017c48:	f300 80a8 	bgt.w	8017d9c <_dtoa_r+0x89c>
 8017c4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017c4e:	2a00      	cmp	r2, #0
 8017c50:	f000 80a0 	beq.w	8017d94 <_dtoa_r+0x894>
 8017c54:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8017c58:	9e06      	ldr	r6, [sp, #24]
 8017c5a:	4645      	mov	r5, r8
 8017c5c:	9a04      	ldr	r2, [sp, #16]
 8017c5e:	2101      	movs	r1, #1
 8017c60:	441a      	add	r2, r3
 8017c62:	4620      	mov	r0, r4
 8017c64:	4498      	add	r8, r3
 8017c66:	9204      	str	r2, [sp, #16]
 8017c68:	f000 fc16 	bl	8018498 <__i2b>
 8017c6c:	4607      	mov	r7, r0
 8017c6e:	2d00      	cmp	r5, #0
 8017c70:	dd0b      	ble.n	8017c8a <_dtoa_r+0x78a>
 8017c72:	9b04      	ldr	r3, [sp, #16]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	dd08      	ble.n	8017c8a <_dtoa_r+0x78a>
 8017c78:	42ab      	cmp	r3, r5
 8017c7a:	9a04      	ldr	r2, [sp, #16]
 8017c7c:	bfa8      	it	ge
 8017c7e:	462b      	movge	r3, r5
 8017c80:	eba8 0803 	sub.w	r8, r8, r3
 8017c84:	1aed      	subs	r5, r5, r3
 8017c86:	1ad3      	subs	r3, r2, r3
 8017c88:	9304      	str	r3, [sp, #16]
 8017c8a:	9b06      	ldr	r3, [sp, #24]
 8017c8c:	b1fb      	cbz	r3, 8017cce <_dtoa_r+0x7ce>
 8017c8e:	9b08      	ldr	r3, [sp, #32]
 8017c90:	2b00      	cmp	r3, #0
 8017c92:	f000 809f 	beq.w	8017dd4 <_dtoa_r+0x8d4>
 8017c96:	2e00      	cmp	r6, #0
 8017c98:	dd11      	ble.n	8017cbe <_dtoa_r+0x7be>
 8017c9a:	4639      	mov	r1, r7
 8017c9c:	4632      	mov	r2, r6
 8017c9e:	4620      	mov	r0, r4
 8017ca0:	f000 fcb6 	bl	8018610 <__pow5mult>
 8017ca4:	465a      	mov	r2, fp
 8017ca6:	4601      	mov	r1, r0
 8017ca8:	4607      	mov	r7, r0
 8017caa:	4620      	mov	r0, r4
 8017cac:	f000 fc0a 	bl	80184c4 <__multiply>
 8017cb0:	4659      	mov	r1, fp
 8017cb2:	9007      	str	r0, [sp, #28]
 8017cb4:	4620      	mov	r0, r4
 8017cb6:	f000 fb33 	bl	8018320 <_Bfree>
 8017cba:	9b07      	ldr	r3, [sp, #28]
 8017cbc:	469b      	mov	fp, r3
 8017cbe:	9b06      	ldr	r3, [sp, #24]
 8017cc0:	1b9a      	subs	r2, r3, r6
 8017cc2:	d004      	beq.n	8017cce <_dtoa_r+0x7ce>
 8017cc4:	4659      	mov	r1, fp
 8017cc6:	4620      	mov	r0, r4
 8017cc8:	f000 fca2 	bl	8018610 <__pow5mult>
 8017ccc:	4683      	mov	fp, r0
 8017cce:	2101      	movs	r1, #1
 8017cd0:	4620      	mov	r0, r4
 8017cd2:	f000 fbe1 	bl	8018498 <__i2b>
 8017cd6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	4606      	mov	r6, r0
 8017cdc:	dd7c      	ble.n	8017dd8 <_dtoa_r+0x8d8>
 8017cde:	461a      	mov	r2, r3
 8017ce0:	4601      	mov	r1, r0
 8017ce2:	4620      	mov	r0, r4
 8017ce4:	f000 fc94 	bl	8018610 <__pow5mult>
 8017ce8:	9b05      	ldr	r3, [sp, #20]
 8017cea:	2b01      	cmp	r3, #1
 8017cec:	4606      	mov	r6, r0
 8017cee:	dd76      	ble.n	8017dde <_dtoa_r+0x8de>
 8017cf0:	2300      	movs	r3, #0
 8017cf2:	9306      	str	r3, [sp, #24]
 8017cf4:	6933      	ldr	r3, [r6, #16]
 8017cf6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8017cfa:	6918      	ldr	r0, [r3, #16]
 8017cfc:	f000 fb7c 	bl	80183f8 <__hi0bits>
 8017d00:	f1c0 0020 	rsb	r0, r0, #32
 8017d04:	9b04      	ldr	r3, [sp, #16]
 8017d06:	4418      	add	r0, r3
 8017d08:	f010 001f 	ands.w	r0, r0, #31
 8017d0c:	f000 8086 	beq.w	8017e1c <_dtoa_r+0x91c>
 8017d10:	f1c0 0320 	rsb	r3, r0, #32
 8017d14:	2b04      	cmp	r3, #4
 8017d16:	dd7f      	ble.n	8017e18 <_dtoa_r+0x918>
 8017d18:	f1c0 001c 	rsb	r0, r0, #28
 8017d1c:	9b04      	ldr	r3, [sp, #16]
 8017d1e:	4403      	add	r3, r0
 8017d20:	4480      	add	r8, r0
 8017d22:	4405      	add	r5, r0
 8017d24:	9304      	str	r3, [sp, #16]
 8017d26:	f1b8 0f00 	cmp.w	r8, #0
 8017d2a:	dd05      	ble.n	8017d38 <_dtoa_r+0x838>
 8017d2c:	4659      	mov	r1, fp
 8017d2e:	4642      	mov	r2, r8
 8017d30:	4620      	mov	r0, r4
 8017d32:	f000 fcc7 	bl	80186c4 <__lshift>
 8017d36:	4683      	mov	fp, r0
 8017d38:	9b04      	ldr	r3, [sp, #16]
 8017d3a:	2b00      	cmp	r3, #0
 8017d3c:	dd05      	ble.n	8017d4a <_dtoa_r+0x84a>
 8017d3e:	4631      	mov	r1, r6
 8017d40:	461a      	mov	r2, r3
 8017d42:	4620      	mov	r0, r4
 8017d44:	f000 fcbe 	bl	80186c4 <__lshift>
 8017d48:	4606      	mov	r6, r0
 8017d4a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d069      	beq.n	8017e24 <_dtoa_r+0x924>
 8017d50:	4631      	mov	r1, r6
 8017d52:	4658      	mov	r0, fp
 8017d54:	f000 fd22 	bl	801879c <__mcmp>
 8017d58:	2800      	cmp	r0, #0
 8017d5a:	da63      	bge.n	8017e24 <_dtoa_r+0x924>
 8017d5c:	2300      	movs	r3, #0
 8017d5e:	4659      	mov	r1, fp
 8017d60:	220a      	movs	r2, #10
 8017d62:	4620      	mov	r0, r4
 8017d64:	f000 fafe 	bl	8018364 <__multadd>
 8017d68:	9b08      	ldr	r3, [sp, #32]
 8017d6a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8017d6e:	4683      	mov	fp, r0
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	f000 818f 	beq.w	8018094 <_dtoa_r+0xb94>
 8017d76:	4639      	mov	r1, r7
 8017d78:	2300      	movs	r3, #0
 8017d7a:	220a      	movs	r2, #10
 8017d7c:	4620      	mov	r0, r4
 8017d7e:	f000 faf1 	bl	8018364 <__multadd>
 8017d82:	f1b9 0f00 	cmp.w	r9, #0
 8017d86:	4607      	mov	r7, r0
 8017d88:	f300 808e 	bgt.w	8017ea8 <_dtoa_r+0x9a8>
 8017d8c:	9b05      	ldr	r3, [sp, #20]
 8017d8e:	2b02      	cmp	r3, #2
 8017d90:	dc50      	bgt.n	8017e34 <_dtoa_r+0x934>
 8017d92:	e089      	b.n	8017ea8 <_dtoa_r+0x9a8>
 8017d94:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8017d96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8017d9a:	e75d      	b.n	8017c58 <_dtoa_r+0x758>
 8017d9c:	9b01      	ldr	r3, [sp, #4]
 8017d9e:	1e5e      	subs	r6, r3, #1
 8017da0:	9b06      	ldr	r3, [sp, #24]
 8017da2:	42b3      	cmp	r3, r6
 8017da4:	bfbf      	itttt	lt
 8017da6:	9b06      	ldrlt	r3, [sp, #24]
 8017da8:	9606      	strlt	r6, [sp, #24]
 8017daa:	1af2      	sublt	r2, r6, r3
 8017dac:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8017dae:	bfb6      	itet	lt
 8017db0:	189b      	addlt	r3, r3, r2
 8017db2:	1b9e      	subge	r6, r3, r6
 8017db4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8017db6:	9b01      	ldr	r3, [sp, #4]
 8017db8:	bfb8      	it	lt
 8017dba:	2600      	movlt	r6, #0
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	bfb5      	itete	lt
 8017dc0:	eba8 0503 	sublt.w	r5, r8, r3
 8017dc4:	9b01      	ldrge	r3, [sp, #4]
 8017dc6:	2300      	movlt	r3, #0
 8017dc8:	4645      	movge	r5, r8
 8017dca:	e747      	b.n	8017c5c <_dtoa_r+0x75c>
 8017dcc:	9e06      	ldr	r6, [sp, #24]
 8017dce:	9f08      	ldr	r7, [sp, #32]
 8017dd0:	4645      	mov	r5, r8
 8017dd2:	e74c      	b.n	8017c6e <_dtoa_r+0x76e>
 8017dd4:	9a06      	ldr	r2, [sp, #24]
 8017dd6:	e775      	b.n	8017cc4 <_dtoa_r+0x7c4>
 8017dd8:	9b05      	ldr	r3, [sp, #20]
 8017dda:	2b01      	cmp	r3, #1
 8017ddc:	dc18      	bgt.n	8017e10 <_dtoa_r+0x910>
 8017dde:	9b02      	ldr	r3, [sp, #8]
 8017de0:	b9b3      	cbnz	r3, 8017e10 <_dtoa_r+0x910>
 8017de2:	9b03      	ldr	r3, [sp, #12]
 8017de4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017de8:	b9a3      	cbnz	r3, 8017e14 <_dtoa_r+0x914>
 8017dea:	9b03      	ldr	r3, [sp, #12]
 8017dec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017df0:	0d1b      	lsrs	r3, r3, #20
 8017df2:	051b      	lsls	r3, r3, #20
 8017df4:	b12b      	cbz	r3, 8017e02 <_dtoa_r+0x902>
 8017df6:	9b04      	ldr	r3, [sp, #16]
 8017df8:	3301      	adds	r3, #1
 8017dfa:	9304      	str	r3, [sp, #16]
 8017dfc:	f108 0801 	add.w	r8, r8, #1
 8017e00:	2301      	movs	r3, #1
 8017e02:	9306      	str	r3, [sp, #24]
 8017e04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	f47f af74 	bne.w	8017cf4 <_dtoa_r+0x7f4>
 8017e0c:	2001      	movs	r0, #1
 8017e0e:	e779      	b.n	8017d04 <_dtoa_r+0x804>
 8017e10:	2300      	movs	r3, #0
 8017e12:	e7f6      	b.n	8017e02 <_dtoa_r+0x902>
 8017e14:	9b02      	ldr	r3, [sp, #8]
 8017e16:	e7f4      	b.n	8017e02 <_dtoa_r+0x902>
 8017e18:	d085      	beq.n	8017d26 <_dtoa_r+0x826>
 8017e1a:	4618      	mov	r0, r3
 8017e1c:	301c      	adds	r0, #28
 8017e1e:	e77d      	b.n	8017d1c <_dtoa_r+0x81c>
 8017e20:	40240000 	.word	0x40240000
 8017e24:	9b01      	ldr	r3, [sp, #4]
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	dc38      	bgt.n	8017e9c <_dtoa_r+0x99c>
 8017e2a:	9b05      	ldr	r3, [sp, #20]
 8017e2c:	2b02      	cmp	r3, #2
 8017e2e:	dd35      	ble.n	8017e9c <_dtoa_r+0x99c>
 8017e30:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017e34:	f1b9 0f00 	cmp.w	r9, #0
 8017e38:	d10d      	bne.n	8017e56 <_dtoa_r+0x956>
 8017e3a:	4631      	mov	r1, r6
 8017e3c:	464b      	mov	r3, r9
 8017e3e:	2205      	movs	r2, #5
 8017e40:	4620      	mov	r0, r4
 8017e42:	f000 fa8f 	bl	8018364 <__multadd>
 8017e46:	4601      	mov	r1, r0
 8017e48:	4606      	mov	r6, r0
 8017e4a:	4658      	mov	r0, fp
 8017e4c:	f000 fca6 	bl	801879c <__mcmp>
 8017e50:	2800      	cmp	r0, #0
 8017e52:	f73f adbd 	bgt.w	80179d0 <_dtoa_r+0x4d0>
 8017e56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e58:	9d00      	ldr	r5, [sp, #0]
 8017e5a:	ea6f 0a03 	mvn.w	sl, r3
 8017e5e:	f04f 0800 	mov.w	r8, #0
 8017e62:	4631      	mov	r1, r6
 8017e64:	4620      	mov	r0, r4
 8017e66:	f000 fa5b 	bl	8018320 <_Bfree>
 8017e6a:	2f00      	cmp	r7, #0
 8017e6c:	f43f aeb4 	beq.w	8017bd8 <_dtoa_r+0x6d8>
 8017e70:	f1b8 0f00 	cmp.w	r8, #0
 8017e74:	d005      	beq.n	8017e82 <_dtoa_r+0x982>
 8017e76:	45b8      	cmp	r8, r7
 8017e78:	d003      	beq.n	8017e82 <_dtoa_r+0x982>
 8017e7a:	4641      	mov	r1, r8
 8017e7c:	4620      	mov	r0, r4
 8017e7e:	f000 fa4f 	bl	8018320 <_Bfree>
 8017e82:	4639      	mov	r1, r7
 8017e84:	4620      	mov	r0, r4
 8017e86:	f000 fa4b 	bl	8018320 <_Bfree>
 8017e8a:	e6a5      	b.n	8017bd8 <_dtoa_r+0x6d8>
 8017e8c:	2600      	movs	r6, #0
 8017e8e:	4637      	mov	r7, r6
 8017e90:	e7e1      	b.n	8017e56 <_dtoa_r+0x956>
 8017e92:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8017e94:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8017e98:	4637      	mov	r7, r6
 8017e9a:	e599      	b.n	80179d0 <_dtoa_r+0x4d0>
 8017e9c:	9b08      	ldr	r3, [sp, #32]
 8017e9e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8017ea2:	2b00      	cmp	r3, #0
 8017ea4:	f000 80fd 	beq.w	80180a2 <_dtoa_r+0xba2>
 8017ea8:	2d00      	cmp	r5, #0
 8017eaa:	dd05      	ble.n	8017eb8 <_dtoa_r+0x9b8>
 8017eac:	4639      	mov	r1, r7
 8017eae:	462a      	mov	r2, r5
 8017eb0:	4620      	mov	r0, r4
 8017eb2:	f000 fc07 	bl	80186c4 <__lshift>
 8017eb6:	4607      	mov	r7, r0
 8017eb8:	9b06      	ldr	r3, [sp, #24]
 8017eba:	2b00      	cmp	r3, #0
 8017ebc:	d05c      	beq.n	8017f78 <_dtoa_r+0xa78>
 8017ebe:	6879      	ldr	r1, [r7, #4]
 8017ec0:	4620      	mov	r0, r4
 8017ec2:	f000 f9ed 	bl	80182a0 <_Balloc>
 8017ec6:	4605      	mov	r5, r0
 8017ec8:	b928      	cbnz	r0, 8017ed6 <_dtoa_r+0x9d6>
 8017eca:	4b80      	ldr	r3, [pc, #512]	; (80180cc <_dtoa_r+0xbcc>)
 8017ecc:	4602      	mov	r2, r0
 8017ece:	f240 21ea 	movw	r1, #746	; 0x2ea
 8017ed2:	f7ff bb2e 	b.w	8017532 <_dtoa_r+0x32>
 8017ed6:	693a      	ldr	r2, [r7, #16]
 8017ed8:	3202      	adds	r2, #2
 8017eda:	0092      	lsls	r2, r2, #2
 8017edc:	f107 010c 	add.w	r1, r7, #12
 8017ee0:	300c      	adds	r0, #12
 8017ee2:	f7fe fbfd 	bl	80166e0 <memcpy>
 8017ee6:	2201      	movs	r2, #1
 8017ee8:	4629      	mov	r1, r5
 8017eea:	4620      	mov	r0, r4
 8017eec:	f000 fbea 	bl	80186c4 <__lshift>
 8017ef0:	9b00      	ldr	r3, [sp, #0]
 8017ef2:	3301      	adds	r3, #1
 8017ef4:	9301      	str	r3, [sp, #4]
 8017ef6:	9b00      	ldr	r3, [sp, #0]
 8017ef8:	444b      	add	r3, r9
 8017efa:	9307      	str	r3, [sp, #28]
 8017efc:	9b02      	ldr	r3, [sp, #8]
 8017efe:	f003 0301 	and.w	r3, r3, #1
 8017f02:	46b8      	mov	r8, r7
 8017f04:	9306      	str	r3, [sp, #24]
 8017f06:	4607      	mov	r7, r0
 8017f08:	9b01      	ldr	r3, [sp, #4]
 8017f0a:	4631      	mov	r1, r6
 8017f0c:	3b01      	subs	r3, #1
 8017f0e:	4658      	mov	r0, fp
 8017f10:	9302      	str	r3, [sp, #8]
 8017f12:	f7ff fa67 	bl	80173e4 <quorem>
 8017f16:	4603      	mov	r3, r0
 8017f18:	3330      	adds	r3, #48	; 0x30
 8017f1a:	9004      	str	r0, [sp, #16]
 8017f1c:	4641      	mov	r1, r8
 8017f1e:	4658      	mov	r0, fp
 8017f20:	9308      	str	r3, [sp, #32]
 8017f22:	f000 fc3b 	bl	801879c <__mcmp>
 8017f26:	463a      	mov	r2, r7
 8017f28:	4681      	mov	r9, r0
 8017f2a:	4631      	mov	r1, r6
 8017f2c:	4620      	mov	r0, r4
 8017f2e:	f000 fc51 	bl	80187d4 <__mdiff>
 8017f32:	68c2      	ldr	r2, [r0, #12]
 8017f34:	9b08      	ldr	r3, [sp, #32]
 8017f36:	4605      	mov	r5, r0
 8017f38:	bb02      	cbnz	r2, 8017f7c <_dtoa_r+0xa7c>
 8017f3a:	4601      	mov	r1, r0
 8017f3c:	4658      	mov	r0, fp
 8017f3e:	f000 fc2d 	bl	801879c <__mcmp>
 8017f42:	9b08      	ldr	r3, [sp, #32]
 8017f44:	4602      	mov	r2, r0
 8017f46:	4629      	mov	r1, r5
 8017f48:	4620      	mov	r0, r4
 8017f4a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8017f4e:	f000 f9e7 	bl	8018320 <_Bfree>
 8017f52:	9b05      	ldr	r3, [sp, #20]
 8017f54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017f56:	9d01      	ldr	r5, [sp, #4]
 8017f58:	ea43 0102 	orr.w	r1, r3, r2
 8017f5c:	9b06      	ldr	r3, [sp, #24]
 8017f5e:	430b      	orrs	r3, r1
 8017f60:	9b08      	ldr	r3, [sp, #32]
 8017f62:	d10d      	bne.n	8017f80 <_dtoa_r+0xa80>
 8017f64:	2b39      	cmp	r3, #57	; 0x39
 8017f66:	d029      	beq.n	8017fbc <_dtoa_r+0xabc>
 8017f68:	f1b9 0f00 	cmp.w	r9, #0
 8017f6c:	dd01      	ble.n	8017f72 <_dtoa_r+0xa72>
 8017f6e:	9b04      	ldr	r3, [sp, #16]
 8017f70:	3331      	adds	r3, #49	; 0x31
 8017f72:	9a02      	ldr	r2, [sp, #8]
 8017f74:	7013      	strb	r3, [r2, #0]
 8017f76:	e774      	b.n	8017e62 <_dtoa_r+0x962>
 8017f78:	4638      	mov	r0, r7
 8017f7a:	e7b9      	b.n	8017ef0 <_dtoa_r+0x9f0>
 8017f7c:	2201      	movs	r2, #1
 8017f7e:	e7e2      	b.n	8017f46 <_dtoa_r+0xa46>
 8017f80:	f1b9 0f00 	cmp.w	r9, #0
 8017f84:	db06      	blt.n	8017f94 <_dtoa_r+0xa94>
 8017f86:	9905      	ldr	r1, [sp, #20]
 8017f88:	ea41 0909 	orr.w	r9, r1, r9
 8017f8c:	9906      	ldr	r1, [sp, #24]
 8017f8e:	ea59 0101 	orrs.w	r1, r9, r1
 8017f92:	d120      	bne.n	8017fd6 <_dtoa_r+0xad6>
 8017f94:	2a00      	cmp	r2, #0
 8017f96:	ddec      	ble.n	8017f72 <_dtoa_r+0xa72>
 8017f98:	4659      	mov	r1, fp
 8017f9a:	2201      	movs	r2, #1
 8017f9c:	4620      	mov	r0, r4
 8017f9e:	9301      	str	r3, [sp, #4]
 8017fa0:	f000 fb90 	bl	80186c4 <__lshift>
 8017fa4:	4631      	mov	r1, r6
 8017fa6:	4683      	mov	fp, r0
 8017fa8:	f000 fbf8 	bl	801879c <__mcmp>
 8017fac:	2800      	cmp	r0, #0
 8017fae:	9b01      	ldr	r3, [sp, #4]
 8017fb0:	dc02      	bgt.n	8017fb8 <_dtoa_r+0xab8>
 8017fb2:	d1de      	bne.n	8017f72 <_dtoa_r+0xa72>
 8017fb4:	07da      	lsls	r2, r3, #31
 8017fb6:	d5dc      	bpl.n	8017f72 <_dtoa_r+0xa72>
 8017fb8:	2b39      	cmp	r3, #57	; 0x39
 8017fba:	d1d8      	bne.n	8017f6e <_dtoa_r+0xa6e>
 8017fbc:	9a02      	ldr	r2, [sp, #8]
 8017fbe:	2339      	movs	r3, #57	; 0x39
 8017fc0:	7013      	strb	r3, [r2, #0]
 8017fc2:	462b      	mov	r3, r5
 8017fc4:	461d      	mov	r5, r3
 8017fc6:	3b01      	subs	r3, #1
 8017fc8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8017fcc:	2a39      	cmp	r2, #57	; 0x39
 8017fce:	d050      	beq.n	8018072 <_dtoa_r+0xb72>
 8017fd0:	3201      	adds	r2, #1
 8017fd2:	701a      	strb	r2, [r3, #0]
 8017fd4:	e745      	b.n	8017e62 <_dtoa_r+0x962>
 8017fd6:	2a00      	cmp	r2, #0
 8017fd8:	dd03      	ble.n	8017fe2 <_dtoa_r+0xae2>
 8017fda:	2b39      	cmp	r3, #57	; 0x39
 8017fdc:	d0ee      	beq.n	8017fbc <_dtoa_r+0xabc>
 8017fde:	3301      	adds	r3, #1
 8017fe0:	e7c7      	b.n	8017f72 <_dtoa_r+0xa72>
 8017fe2:	9a01      	ldr	r2, [sp, #4]
 8017fe4:	9907      	ldr	r1, [sp, #28]
 8017fe6:	f802 3c01 	strb.w	r3, [r2, #-1]
 8017fea:	428a      	cmp	r2, r1
 8017fec:	d02a      	beq.n	8018044 <_dtoa_r+0xb44>
 8017fee:	4659      	mov	r1, fp
 8017ff0:	2300      	movs	r3, #0
 8017ff2:	220a      	movs	r2, #10
 8017ff4:	4620      	mov	r0, r4
 8017ff6:	f000 f9b5 	bl	8018364 <__multadd>
 8017ffa:	45b8      	cmp	r8, r7
 8017ffc:	4683      	mov	fp, r0
 8017ffe:	f04f 0300 	mov.w	r3, #0
 8018002:	f04f 020a 	mov.w	r2, #10
 8018006:	4641      	mov	r1, r8
 8018008:	4620      	mov	r0, r4
 801800a:	d107      	bne.n	801801c <_dtoa_r+0xb1c>
 801800c:	f000 f9aa 	bl	8018364 <__multadd>
 8018010:	4680      	mov	r8, r0
 8018012:	4607      	mov	r7, r0
 8018014:	9b01      	ldr	r3, [sp, #4]
 8018016:	3301      	adds	r3, #1
 8018018:	9301      	str	r3, [sp, #4]
 801801a:	e775      	b.n	8017f08 <_dtoa_r+0xa08>
 801801c:	f000 f9a2 	bl	8018364 <__multadd>
 8018020:	4639      	mov	r1, r7
 8018022:	4680      	mov	r8, r0
 8018024:	2300      	movs	r3, #0
 8018026:	220a      	movs	r2, #10
 8018028:	4620      	mov	r0, r4
 801802a:	f000 f99b 	bl	8018364 <__multadd>
 801802e:	4607      	mov	r7, r0
 8018030:	e7f0      	b.n	8018014 <_dtoa_r+0xb14>
 8018032:	f1b9 0f00 	cmp.w	r9, #0
 8018036:	9a00      	ldr	r2, [sp, #0]
 8018038:	bfcc      	ite	gt
 801803a:	464d      	movgt	r5, r9
 801803c:	2501      	movle	r5, #1
 801803e:	4415      	add	r5, r2
 8018040:	f04f 0800 	mov.w	r8, #0
 8018044:	4659      	mov	r1, fp
 8018046:	2201      	movs	r2, #1
 8018048:	4620      	mov	r0, r4
 801804a:	9301      	str	r3, [sp, #4]
 801804c:	f000 fb3a 	bl	80186c4 <__lshift>
 8018050:	4631      	mov	r1, r6
 8018052:	4683      	mov	fp, r0
 8018054:	f000 fba2 	bl	801879c <__mcmp>
 8018058:	2800      	cmp	r0, #0
 801805a:	dcb2      	bgt.n	8017fc2 <_dtoa_r+0xac2>
 801805c:	d102      	bne.n	8018064 <_dtoa_r+0xb64>
 801805e:	9b01      	ldr	r3, [sp, #4]
 8018060:	07db      	lsls	r3, r3, #31
 8018062:	d4ae      	bmi.n	8017fc2 <_dtoa_r+0xac2>
 8018064:	462b      	mov	r3, r5
 8018066:	461d      	mov	r5, r3
 8018068:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801806c:	2a30      	cmp	r2, #48	; 0x30
 801806e:	d0fa      	beq.n	8018066 <_dtoa_r+0xb66>
 8018070:	e6f7      	b.n	8017e62 <_dtoa_r+0x962>
 8018072:	9a00      	ldr	r2, [sp, #0]
 8018074:	429a      	cmp	r2, r3
 8018076:	d1a5      	bne.n	8017fc4 <_dtoa_r+0xac4>
 8018078:	f10a 0a01 	add.w	sl, sl, #1
 801807c:	2331      	movs	r3, #49	; 0x31
 801807e:	e779      	b.n	8017f74 <_dtoa_r+0xa74>
 8018080:	4b13      	ldr	r3, [pc, #76]	; (80180d0 <_dtoa_r+0xbd0>)
 8018082:	f7ff baaf 	b.w	80175e4 <_dtoa_r+0xe4>
 8018086:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018088:	2b00      	cmp	r3, #0
 801808a:	f47f aa86 	bne.w	801759a <_dtoa_r+0x9a>
 801808e:	4b11      	ldr	r3, [pc, #68]	; (80180d4 <_dtoa_r+0xbd4>)
 8018090:	f7ff baa8 	b.w	80175e4 <_dtoa_r+0xe4>
 8018094:	f1b9 0f00 	cmp.w	r9, #0
 8018098:	dc03      	bgt.n	80180a2 <_dtoa_r+0xba2>
 801809a:	9b05      	ldr	r3, [sp, #20]
 801809c:	2b02      	cmp	r3, #2
 801809e:	f73f aec9 	bgt.w	8017e34 <_dtoa_r+0x934>
 80180a2:	9d00      	ldr	r5, [sp, #0]
 80180a4:	4631      	mov	r1, r6
 80180a6:	4658      	mov	r0, fp
 80180a8:	f7ff f99c 	bl	80173e4 <quorem>
 80180ac:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80180b0:	f805 3b01 	strb.w	r3, [r5], #1
 80180b4:	9a00      	ldr	r2, [sp, #0]
 80180b6:	1aaa      	subs	r2, r5, r2
 80180b8:	4591      	cmp	r9, r2
 80180ba:	ddba      	ble.n	8018032 <_dtoa_r+0xb32>
 80180bc:	4659      	mov	r1, fp
 80180be:	2300      	movs	r3, #0
 80180c0:	220a      	movs	r2, #10
 80180c2:	4620      	mov	r0, r4
 80180c4:	f000 f94e 	bl	8018364 <__multadd>
 80180c8:	4683      	mov	fp, r0
 80180ca:	e7eb      	b.n	80180a4 <_dtoa_r+0xba4>
 80180cc:	0801a3f0 	.word	0x0801a3f0
 80180d0:	0801a324 	.word	0x0801a324
 80180d4:	0801a36d 	.word	0x0801a36d

080180d8 <__sflush_r>:
 80180d8:	898a      	ldrh	r2, [r1, #12]
 80180da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180de:	4605      	mov	r5, r0
 80180e0:	0710      	lsls	r0, r2, #28
 80180e2:	460c      	mov	r4, r1
 80180e4:	d458      	bmi.n	8018198 <__sflush_r+0xc0>
 80180e6:	684b      	ldr	r3, [r1, #4]
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	dc05      	bgt.n	80180f8 <__sflush_r+0x20>
 80180ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	dc02      	bgt.n	80180f8 <__sflush_r+0x20>
 80180f2:	2000      	movs	r0, #0
 80180f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80180f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80180fa:	2e00      	cmp	r6, #0
 80180fc:	d0f9      	beq.n	80180f2 <__sflush_r+0x1a>
 80180fe:	2300      	movs	r3, #0
 8018100:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018104:	682f      	ldr	r7, [r5, #0]
 8018106:	602b      	str	r3, [r5, #0]
 8018108:	d032      	beq.n	8018170 <__sflush_r+0x98>
 801810a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801810c:	89a3      	ldrh	r3, [r4, #12]
 801810e:	075a      	lsls	r2, r3, #29
 8018110:	d505      	bpl.n	801811e <__sflush_r+0x46>
 8018112:	6863      	ldr	r3, [r4, #4]
 8018114:	1ac0      	subs	r0, r0, r3
 8018116:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018118:	b10b      	cbz	r3, 801811e <__sflush_r+0x46>
 801811a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801811c:	1ac0      	subs	r0, r0, r3
 801811e:	2300      	movs	r3, #0
 8018120:	4602      	mov	r2, r0
 8018122:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018124:	6a21      	ldr	r1, [r4, #32]
 8018126:	4628      	mov	r0, r5
 8018128:	47b0      	blx	r6
 801812a:	1c43      	adds	r3, r0, #1
 801812c:	89a3      	ldrh	r3, [r4, #12]
 801812e:	d106      	bne.n	801813e <__sflush_r+0x66>
 8018130:	6829      	ldr	r1, [r5, #0]
 8018132:	291d      	cmp	r1, #29
 8018134:	d82c      	bhi.n	8018190 <__sflush_r+0xb8>
 8018136:	4a2a      	ldr	r2, [pc, #168]	; (80181e0 <__sflush_r+0x108>)
 8018138:	40ca      	lsrs	r2, r1
 801813a:	07d6      	lsls	r6, r2, #31
 801813c:	d528      	bpl.n	8018190 <__sflush_r+0xb8>
 801813e:	2200      	movs	r2, #0
 8018140:	6062      	str	r2, [r4, #4]
 8018142:	04d9      	lsls	r1, r3, #19
 8018144:	6922      	ldr	r2, [r4, #16]
 8018146:	6022      	str	r2, [r4, #0]
 8018148:	d504      	bpl.n	8018154 <__sflush_r+0x7c>
 801814a:	1c42      	adds	r2, r0, #1
 801814c:	d101      	bne.n	8018152 <__sflush_r+0x7a>
 801814e:	682b      	ldr	r3, [r5, #0]
 8018150:	b903      	cbnz	r3, 8018154 <__sflush_r+0x7c>
 8018152:	6560      	str	r0, [r4, #84]	; 0x54
 8018154:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018156:	602f      	str	r7, [r5, #0]
 8018158:	2900      	cmp	r1, #0
 801815a:	d0ca      	beq.n	80180f2 <__sflush_r+0x1a>
 801815c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018160:	4299      	cmp	r1, r3
 8018162:	d002      	beq.n	801816a <__sflush_r+0x92>
 8018164:	4628      	mov	r0, r5
 8018166:	f7fe fad1 	bl	801670c <_free_r>
 801816a:	2000      	movs	r0, #0
 801816c:	6360      	str	r0, [r4, #52]	; 0x34
 801816e:	e7c1      	b.n	80180f4 <__sflush_r+0x1c>
 8018170:	6a21      	ldr	r1, [r4, #32]
 8018172:	2301      	movs	r3, #1
 8018174:	4628      	mov	r0, r5
 8018176:	47b0      	blx	r6
 8018178:	1c41      	adds	r1, r0, #1
 801817a:	d1c7      	bne.n	801810c <__sflush_r+0x34>
 801817c:	682b      	ldr	r3, [r5, #0]
 801817e:	2b00      	cmp	r3, #0
 8018180:	d0c4      	beq.n	801810c <__sflush_r+0x34>
 8018182:	2b1d      	cmp	r3, #29
 8018184:	d001      	beq.n	801818a <__sflush_r+0xb2>
 8018186:	2b16      	cmp	r3, #22
 8018188:	d101      	bne.n	801818e <__sflush_r+0xb6>
 801818a:	602f      	str	r7, [r5, #0]
 801818c:	e7b1      	b.n	80180f2 <__sflush_r+0x1a>
 801818e:	89a3      	ldrh	r3, [r4, #12]
 8018190:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018194:	81a3      	strh	r3, [r4, #12]
 8018196:	e7ad      	b.n	80180f4 <__sflush_r+0x1c>
 8018198:	690f      	ldr	r7, [r1, #16]
 801819a:	2f00      	cmp	r7, #0
 801819c:	d0a9      	beq.n	80180f2 <__sflush_r+0x1a>
 801819e:	0793      	lsls	r3, r2, #30
 80181a0:	680e      	ldr	r6, [r1, #0]
 80181a2:	bf08      	it	eq
 80181a4:	694b      	ldreq	r3, [r1, #20]
 80181a6:	600f      	str	r7, [r1, #0]
 80181a8:	bf18      	it	ne
 80181aa:	2300      	movne	r3, #0
 80181ac:	eba6 0807 	sub.w	r8, r6, r7
 80181b0:	608b      	str	r3, [r1, #8]
 80181b2:	f1b8 0f00 	cmp.w	r8, #0
 80181b6:	dd9c      	ble.n	80180f2 <__sflush_r+0x1a>
 80181b8:	6a21      	ldr	r1, [r4, #32]
 80181ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80181bc:	4643      	mov	r3, r8
 80181be:	463a      	mov	r2, r7
 80181c0:	4628      	mov	r0, r5
 80181c2:	47b0      	blx	r6
 80181c4:	2800      	cmp	r0, #0
 80181c6:	dc06      	bgt.n	80181d6 <__sflush_r+0xfe>
 80181c8:	89a3      	ldrh	r3, [r4, #12]
 80181ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80181ce:	81a3      	strh	r3, [r4, #12]
 80181d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80181d4:	e78e      	b.n	80180f4 <__sflush_r+0x1c>
 80181d6:	4407      	add	r7, r0
 80181d8:	eba8 0800 	sub.w	r8, r8, r0
 80181dc:	e7e9      	b.n	80181b2 <__sflush_r+0xda>
 80181de:	bf00      	nop
 80181e0:	20400001 	.word	0x20400001

080181e4 <_fflush_r>:
 80181e4:	b538      	push	{r3, r4, r5, lr}
 80181e6:	690b      	ldr	r3, [r1, #16]
 80181e8:	4605      	mov	r5, r0
 80181ea:	460c      	mov	r4, r1
 80181ec:	b913      	cbnz	r3, 80181f4 <_fflush_r+0x10>
 80181ee:	2500      	movs	r5, #0
 80181f0:	4628      	mov	r0, r5
 80181f2:	bd38      	pop	{r3, r4, r5, pc}
 80181f4:	b118      	cbz	r0, 80181fe <_fflush_r+0x1a>
 80181f6:	6983      	ldr	r3, [r0, #24]
 80181f8:	b90b      	cbnz	r3, 80181fe <_fflush_r+0x1a>
 80181fa:	f7fe f981 	bl	8016500 <__sinit>
 80181fe:	4b14      	ldr	r3, [pc, #80]	; (8018250 <_fflush_r+0x6c>)
 8018200:	429c      	cmp	r4, r3
 8018202:	d11b      	bne.n	801823c <_fflush_r+0x58>
 8018204:	686c      	ldr	r4, [r5, #4]
 8018206:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801820a:	2b00      	cmp	r3, #0
 801820c:	d0ef      	beq.n	80181ee <_fflush_r+0xa>
 801820e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018210:	07d0      	lsls	r0, r2, #31
 8018212:	d404      	bmi.n	801821e <_fflush_r+0x3a>
 8018214:	0599      	lsls	r1, r3, #22
 8018216:	d402      	bmi.n	801821e <_fflush_r+0x3a>
 8018218:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801821a:	f7fe fa4e 	bl	80166ba <__retarget_lock_acquire_recursive>
 801821e:	4628      	mov	r0, r5
 8018220:	4621      	mov	r1, r4
 8018222:	f7ff ff59 	bl	80180d8 <__sflush_r>
 8018226:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018228:	07da      	lsls	r2, r3, #31
 801822a:	4605      	mov	r5, r0
 801822c:	d4e0      	bmi.n	80181f0 <_fflush_r+0xc>
 801822e:	89a3      	ldrh	r3, [r4, #12]
 8018230:	059b      	lsls	r3, r3, #22
 8018232:	d4dd      	bmi.n	80181f0 <_fflush_r+0xc>
 8018234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018236:	f7fe fa41 	bl	80166bc <__retarget_lock_release_recursive>
 801823a:	e7d9      	b.n	80181f0 <_fflush_r+0xc>
 801823c:	4b05      	ldr	r3, [pc, #20]	; (8018254 <_fflush_r+0x70>)
 801823e:	429c      	cmp	r4, r3
 8018240:	d101      	bne.n	8018246 <_fflush_r+0x62>
 8018242:	68ac      	ldr	r4, [r5, #8]
 8018244:	e7df      	b.n	8018206 <_fflush_r+0x22>
 8018246:	4b04      	ldr	r3, [pc, #16]	; (8018258 <_fflush_r+0x74>)
 8018248:	429c      	cmp	r4, r3
 801824a:	bf08      	it	eq
 801824c:	68ec      	ldreq	r4, [r5, #12]
 801824e:	e7da      	b.n	8018206 <_fflush_r+0x22>
 8018250:	0801a2d0 	.word	0x0801a2d0
 8018254:	0801a2f0 	.word	0x0801a2f0
 8018258:	0801a2b0 	.word	0x0801a2b0

0801825c <_localeconv_r>:
 801825c:	4800      	ldr	r0, [pc, #0]	; (8018260 <_localeconv_r+0x4>)
 801825e:	4770      	bx	lr
 8018260:	200002f4 	.word	0x200002f4

08018264 <_lseek_r>:
 8018264:	b538      	push	{r3, r4, r5, lr}
 8018266:	4d07      	ldr	r5, [pc, #28]	; (8018284 <_lseek_r+0x20>)
 8018268:	4604      	mov	r4, r0
 801826a:	4608      	mov	r0, r1
 801826c:	4611      	mov	r1, r2
 801826e:	2200      	movs	r2, #0
 8018270:	602a      	str	r2, [r5, #0]
 8018272:	461a      	mov	r2, r3
 8018274:	f7ec ff10 	bl	8005098 <_lseek>
 8018278:	1c43      	adds	r3, r0, #1
 801827a:	d102      	bne.n	8018282 <_lseek_r+0x1e>
 801827c:	682b      	ldr	r3, [r5, #0]
 801827e:	b103      	cbz	r3, 8018282 <_lseek_r+0x1e>
 8018280:	6023      	str	r3, [r4, #0]
 8018282:	bd38      	pop	{r3, r4, r5, pc}
 8018284:	20016ccc 	.word	0x20016ccc

08018288 <__malloc_lock>:
 8018288:	4801      	ldr	r0, [pc, #4]	; (8018290 <__malloc_lock+0x8>)
 801828a:	f7fe ba16 	b.w	80166ba <__retarget_lock_acquire_recursive>
 801828e:	bf00      	nop
 8018290:	20016cc4 	.word	0x20016cc4

08018294 <__malloc_unlock>:
 8018294:	4801      	ldr	r0, [pc, #4]	; (801829c <__malloc_unlock+0x8>)
 8018296:	f7fe ba11 	b.w	80166bc <__retarget_lock_release_recursive>
 801829a:	bf00      	nop
 801829c:	20016cc4 	.word	0x20016cc4

080182a0 <_Balloc>:
 80182a0:	b570      	push	{r4, r5, r6, lr}
 80182a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80182a4:	4604      	mov	r4, r0
 80182a6:	460d      	mov	r5, r1
 80182a8:	b976      	cbnz	r6, 80182c8 <_Balloc+0x28>
 80182aa:	2010      	movs	r0, #16
 80182ac:	f7fe fa08 	bl	80166c0 <malloc>
 80182b0:	4602      	mov	r2, r0
 80182b2:	6260      	str	r0, [r4, #36]	; 0x24
 80182b4:	b920      	cbnz	r0, 80182c0 <_Balloc+0x20>
 80182b6:	4b18      	ldr	r3, [pc, #96]	; (8018318 <_Balloc+0x78>)
 80182b8:	4818      	ldr	r0, [pc, #96]	; (801831c <_Balloc+0x7c>)
 80182ba:	2166      	movs	r1, #102	; 0x66
 80182bc:	f000 fcea 	bl	8018c94 <__assert_func>
 80182c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80182c4:	6006      	str	r6, [r0, #0]
 80182c6:	60c6      	str	r6, [r0, #12]
 80182c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80182ca:	68f3      	ldr	r3, [r6, #12]
 80182cc:	b183      	cbz	r3, 80182f0 <_Balloc+0x50>
 80182ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80182d0:	68db      	ldr	r3, [r3, #12]
 80182d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80182d6:	b9b8      	cbnz	r0, 8018308 <_Balloc+0x68>
 80182d8:	2101      	movs	r1, #1
 80182da:	fa01 f605 	lsl.w	r6, r1, r5
 80182de:	1d72      	adds	r2, r6, #5
 80182e0:	0092      	lsls	r2, r2, #2
 80182e2:	4620      	mov	r0, r4
 80182e4:	f000 fb5a 	bl	801899c <_calloc_r>
 80182e8:	b160      	cbz	r0, 8018304 <_Balloc+0x64>
 80182ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80182ee:	e00e      	b.n	801830e <_Balloc+0x6e>
 80182f0:	2221      	movs	r2, #33	; 0x21
 80182f2:	2104      	movs	r1, #4
 80182f4:	4620      	mov	r0, r4
 80182f6:	f000 fb51 	bl	801899c <_calloc_r>
 80182fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80182fc:	60f0      	str	r0, [r6, #12]
 80182fe:	68db      	ldr	r3, [r3, #12]
 8018300:	2b00      	cmp	r3, #0
 8018302:	d1e4      	bne.n	80182ce <_Balloc+0x2e>
 8018304:	2000      	movs	r0, #0
 8018306:	bd70      	pop	{r4, r5, r6, pc}
 8018308:	6802      	ldr	r2, [r0, #0]
 801830a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801830e:	2300      	movs	r3, #0
 8018310:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018314:	e7f7      	b.n	8018306 <_Balloc+0x66>
 8018316:	bf00      	nop
 8018318:	0801a37a 	.word	0x0801a37a
 801831c:	0801a401 	.word	0x0801a401

08018320 <_Bfree>:
 8018320:	b570      	push	{r4, r5, r6, lr}
 8018322:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018324:	4605      	mov	r5, r0
 8018326:	460c      	mov	r4, r1
 8018328:	b976      	cbnz	r6, 8018348 <_Bfree+0x28>
 801832a:	2010      	movs	r0, #16
 801832c:	f7fe f9c8 	bl	80166c0 <malloc>
 8018330:	4602      	mov	r2, r0
 8018332:	6268      	str	r0, [r5, #36]	; 0x24
 8018334:	b920      	cbnz	r0, 8018340 <_Bfree+0x20>
 8018336:	4b09      	ldr	r3, [pc, #36]	; (801835c <_Bfree+0x3c>)
 8018338:	4809      	ldr	r0, [pc, #36]	; (8018360 <_Bfree+0x40>)
 801833a:	218a      	movs	r1, #138	; 0x8a
 801833c:	f000 fcaa 	bl	8018c94 <__assert_func>
 8018340:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018344:	6006      	str	r6, [r0, #0]
 8018346:	60c6      	str	r6, [r0, #12]
 8018348:	b13c      	cbz	r4, 801835a <_Bfree+0x3a>
 801834a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801834c:	6862      	ldr	r2, [r4, #4]
 801834e:	68db      	ldr	r3, [r3, #12]
 8018350:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018354:	6021      	str	r1, [r4, #0]
 8018356:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801835a:	bd70      	pop	{r4, r5, r6, pc}
 801835c:	0801a37a 	.word	0x0801a37a
 8018360:	0801a401 	.word	0x0801a401

08018364 <__multadd>:
 8018364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018368:	690e      	ldr	r6, [r1, #16]
 801836a:	4607      	mov	r7, r0
 801836c:	4698      	mov	r8, r3
 801836e:	460c      	mov	r4, r1
 8018370:	f101 0014 	add.w	r0, r1, #20
 8018374:	2300      	movs	r3, #0
 8018376:	6805      	ldr	r5, [r0, #0]
 8018378:	b2a9      	uxth	r1, r5
 801837a:	fb02 8101 	mla	r1, r2, r1, r8
 801837e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8018382:	0c2d      	lsrs	r5, r5, #16
 8018384:	fb02 c505 	mla	r5, r2, r5, ip
 8018388:	b289      	uxth	r1, r1
 801838a:	3301      	adds	r3, #1
 801838c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8018390:	429e      	cmp	r6, r3
 8018392:	f840 1b04 	str.w	r1, [r0], #4
 8018396:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801839a:	dcec      	bgt.n	8018376 <__multadd+0x12>
 801839c:	f1b8 0f00 	cmp.w	r8, #0
 80183a0:	d022      	beq.n	80183e8 <__multadd+0x84>
 80183a2:	68a3      	ldr	r3, [r4, #8]
 80183a4:	42b3      	cmp	r3, r6
 80183a6:	dc19      	bgt.n	80183dc <__multadd+0x78>
 80183a8:	6861      	ldr	r1, [r4, #4]
 80183aa:	4638      	mov	r0, r7
 80183ac:	3101      	adds	r1, #1
 80183ae:	f7ff ff77 	bl	80182a0 <_Balloc>
 80183b2:	4605      	mov	r5, r0
 80183b4:	b928      	cbnz	r0, 80183c2 <__multadd+0x5e>
 80183b6:	4602      	mov	r2, r0
 80183b8:	4b0d      	ldr	r3, [pc, #52]	; (80183f0 <__multadd+0x8c>)
 80183ba:	480e      	ldr	r0, [pc, #56]	; (80183f4 <__multadd+0x90>)
 80183bc:	21b5      	movs	r1, #181	; 0xb5
 80183be:	f000 fc69 	bl	8018c94 <__assert_func>
 80183c2:	6922      	ldr	r2, [r4, #16]
 80183c4:	3202      	adds	r2, #2
 80183c6:	f104 010c 	add.w	r1, r4, #12
 80183ca:	0092      	lsls	r2, r2, #2
 80183cc:	300c      	adds	r0, #12
 80183ce:	f7fe f987 	bl	80166e0 <memcpy>
 80183d2:	4621      	mov	r1, r4
 80183d4:	4638      	mov	r0, r7
 80183d6:	f7ff ffa3 	bl	8018320 <_Bfree>
 80183da:	462c      	mov	r4, r5
 80183dc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80183e0:	3601      	adds	r6, #1
 80183e2:	f8c3 8014 	str.w	r8, [r3, #20]
 80183e6:	6126      	str	r6, [r4, #16]
 80183e8:	4620      	mov	r0, r4
 80183ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183ee:	bf00      	nop
 80183f0:	0801a3f0 	.word	0x0801a3f0
 80183f4:	0801a401 	.word	0x0801a401

080183f8 <__hi0bits>:
 80183f8:	0c03      	lsrs	r3, r0, #16
 80183fa:	041b      	lsls	r3, r3, #16
 80183fc:	b9d3      	cbnz	r3, 8018434 <__hi0bits+0x3c>
 80183fe:	0400      	lsls	r0, r0, #16
 8018400:	2310      	movs	r3, #16
 8018402:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018406:	bf04      	itt	eq
 8018408:	0200      	lsleq	r0, r0, #8
 801840a:	3308      	addeq	r3, #8
 801840c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018410:	bf04      	itt	eq
 8018412:	0100      	lsleq	r0, r0, #4
 8018414:	3304      	addeq	r3, #4
 8018416:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801841a:	bf04      	itt	eq
 801841c:	0080      	lsleq	r0, r0, #2
 801841e:	3302      	addeq	r3, #2
 8018420:	2800      	cmp	r0, #0
 8018422:	db05      	blt.n	8018430 <__hi0bits+0x38>
 8018424:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018428:	f103 0301 	add.w	r3, r3, #1
 801842c:	bf08      	it	eq
 801842e:	2320      	moveq	r3, #32
 8018430:	4618      	mov	r0, r3
 8018432:	4770      	bx	lr
 8018434:	2300      	movs	r3, #0
 8018436:	e7e4      	b.n	8018402 <__hi0bits+0xa>

08018438 <__lo0bits>:
 8018438:	6803      	ldr	r3, [r0, #0]
 801843a:	f013 0207 	ands.w	r2, r3, #7
 801843e:	4601      	mov	r1, r0
 8018440:	d00b      	beq.n	801845a <__lo0bits+0x22>
 8018442:	07da      	lsls	r2, r3, #31
 8018444:	d424      	bmi.n	8018490 <__lo0bits+0x58>
 8018446:	0798      	lsls	r0, r3, #30
 8018448:	bf49      	itett	mi
 801844a:	085b      	lsrmi	r3, r3, #1
 801844c:	089b      	lsrpl	r3, r3, #2
 801844e:	2001      	movmi	r0, #1
 8018450:	600b      	strmi	r3, [r1, #0]
 8018452:	bf5c      	itt	pl
 8018454:	600b      	strpl	r3, [r1, #0]
 8018456:	2002      	movpl	r0, #2
 8018458:	4770      	bx	lr
 801845a:	b298      	uxth	r0, r3
 801845c:	b9b0      	cbnz	r0, 801848c <__lo0bits+0x54>
 801845e:	0c1b      	lsrs	r3, r3, #16
 8018460:	2010      	movs	r0, #16
 8018462:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018466:	bf04      	itt	eq
 8018468:	0a1b      	lsreq	r3, r3, #8
 801846a:	3008      	addeq	r0, #8
 801846c:	071a      	lsls	r2, r3, #28
 801846e:	bf04      	itt	eq
 8018470:	091b      	lsreq	r3, r3, #4
 8018472:	3004      	addeq	r0, #4
 8018474:	079a      	lsls	r2, r3, #30
 8018476:	bf04      	itt	eq
 8018478:	089b      	lsreq	r3, r3, #2
 801847a:	3002      	addeq	r0, #2
 801847c:	07da      	lsls	r2, r3, #31
 801847e:	d403      	bmi.n	8018488 <__lo0bits+0x50>
 8018480:	085b      	lsrs	r3, r3, #1
 8018482:	f100 0001 	add.w	r0, r0, #1
 8018486:	d005      	beq.n	8018494 <__lo0bits+0x5c>
 8018488:	600b      	str	r3, [r1, #0]
 801848a:	4770      	bx	lr
 801848c:	4610      	mov	r0, r2
 801848e:	e7e8      	b.n	8018462 <__lo0bits+0x2a>
 8018490:	2000      	movs	r0, #0
 8018492:	4770      	bx	lr
 8018494:	2020      	movs	r0, #32
 8018496:	4770      	bx	lr

08018498 <__i2b>:
 8018498:	b510      	push	{r4, lr}
 801849a:	460c      	mov	r4, r1
 801849c:	2101      	movs	r1, #1
 801849e:	f7ff feff 	bl	80182a0 <_Balloc>
 80184a2:	4602      	mov	r2, r0
 80184a4:	b928      	cbnz	r0, 80184b2 <__i2b+0x1a>
 80184a6:	4b05      	ldr	r3, [pc, #20]	; (80184bc <__i2b+0x24>)
 80184a8:	4805      	ldr	r0, [pc, #20]	; (80184c0 <__i2b+0x28>)
 80184aa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80184ae:	f000 fbf1 	bl	8018c94 <__assert_func>
 80184b2:	2301      	movs	r3, #1
 80184b4:	6144      	str	r4, [r0, #20]
 80184b6:	6103      	str	r3, [r0, #16]
 80184b8:	bd10      	pop	{r4, pc}
 80184ba:	bf00      	nop
 80184bc:	0801a3f0 	.word	0x0801a3f0
 80184c0:	0801a401 	.word	0x0801a401

080184c4 <__multiply>:
 80184c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80184c8:	4614      	mov	r4, r2
 80184ca:	690a      	ldr	r2, [r1, #16]
 80184cc:	6923      	ldr	r3, [r4, #16]
 80184ce:	429a      	cmp	r2, r3
 80184d0:	bfb8      	it	lt
 80184d2:	460b      	movlt	r3, r1
 80184d4:	460d      	mov	r5, r1
 80184d6:	bfbc      	itt	lt
 80184d8:	4625      	movlt	r5, r4
 80184da:	461c      	movlt	r4, r3
 80184dc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80184e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80184e4:	68ab      	ldr	r3, [r5, #8]
 80184e6:	6869      	ldr	r1, [r5, #4]
 80184e8:	eb0a 0709 	add.w	r7, sl, r9
 80184ec:	42bb      	cmp	r3, r7
 80184ee:	b085      	sub	sp, #20
 80184f0:	bfb8      	it	lt
 80184f2:	3101      	addlt	r1, #1
 80184f4:	f7ff fed4 	bl	80182a0 <_Balloc>
 80184f8:	b930      	cbnz	r0, 8018508 <__multiply+0x44>
 80184fa:	4602      	mov	r2, r0
 80184fc:	4b42      	ldr	r3, [pc, #264]	; (8018608 <__multiply+0x144>)
 80184fe:	4843      	ldr	r0, [pc, #268]	; (801860c <__multiply+0x148>)
 8018500:	f240 115d 	movw	r1, #349	; 0x15d
 8018504:	f000 fbc6 	bl	8018c94 <__assert_func>
 8018508:	f100 0614 	add.w	r6, r0, #20
 801850c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8018510:	4633      	mov	r3, r6
 8018512:	2200      	movs	r2, #0
 8018514:	4543      	cmp	r3, r8
 8018516:	d31e      	bcc.n	8018556 <__multiply+0x92>
 8018518:	f105 0c14 	add.w	ip, r5, #20
 801851c:	f104 0314 	add.w	r3, r4, #20
 8018520:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8018524:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8018528:	9202      	str	r2, [sp, #8]
 801852a:	ebac 0205 	sub.w	r2, ip, r5
 801852e:	3a15      	subs	r2, #21
 8018530:	f022 0203 	bic.w	r2, r2, #3
 8018534:	3204      	adds	r2, #4
 8018536:	f105 0115 	add.w	r1, r5, #21
 801853a:	458c      	cmp	ip, r1
 801853c:	bf38      	it	cc
 801853e:	2204      	movcc	r2, #4
 8018540:	9201      	str	r2, [sp, #4]
 8018542:	9a02      	ldr	r2, [sp, #8]
 8018544:	9303      	str	r3, [sp, #12]
 8018546:	429a      	cmp	r2, r3
 8018548:	d808      	bhi.n	801855c <__multiply+0x98>
 801854a:	2f00      	cmp	r7, #0
 801854c:	dc55      	bgt.n	80185fa <__multiply+0x136>
 801854e:	6107      	str	r7, [r0, #16]
 8018550:	b005      	add	sp, #20
 8018552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018556:	f843 2b04 	str.w	r2, [r3], #4
 801855a:	e7db      	b.n	8018514 <__multiply+0x50>
 801855c:	f8b3 a000 	ldrh.w	sl, [r3]
 8018560:	f1ba 0f00 	cmp.w	sl, #0
 8018564:	d020      	beq.n	80185a8 <__multiply+0xe4>
 8018566:	f105 0e14 	add.w	lr, r5, #20
 801856a:	46b1      	mov	r9, r6
 801856c:	2200      	movs	r2, #0
 801856e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8018572:	f8d9 b000 	ldr.w	fp, [r9]
 8018576:	b2a1      	uxth	r1, r4
 8018578:	fa1f fb8b 	uxth.w	fp, fp
 801857c:	fb0a b101 	mla	r1, sl, r1, fp
 8018580:	4411      	add	r1, r2
 8018582:	f8d9 2000 	ldr.w	r2, [r9]
 8018586:	0c24      	lsrs	r4, r4, #16
 8018588:	0c12      	lsrs	r2, r2, #16
 801858a:	fb0a 2404 	mla	r4, sl, r4, r2
 801858e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8018592:	b289      	uxth	r1, r1
 8018594:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8018598:	45f4      	cmp	ip, lr
 801859a:	f849 1b04 	str.w	r1, [r9], #4
 801859e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80185a2:	d8e4      	bhi.n	801856e <__multiply+0xaa>
 80185a4:	9901      	ldr	r1, [sp, #4]
 80185a6:	5072      	str	r2, [r6, r1]
 80185a8:	9a03      	ldr	r2, [sp, #12]
 80185aa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80185ae:	3304      	adds	r3, #4
 80185b0:	f1b9 0f00 	cmp.w	r9, #0
 80185b4:	d01f      	beq.n	80185f6 <__multiply+0x132>
 80185b6:	6834      	ldr	r4, [r6, #0]
 80185b8:	f105 0114 	add.w	r1, r5, #20
 80185bc:	46b6      	mov	lr, r6
 80185be:	f04f 0a00 	mov.w	sl, #0
 80185c2:	880a      	ldrh	r2, [r1, #0]
 80185c4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80185c8:	fb09 b202 	mla	r2, r9, r2, fp
 80185cc:	4492      	add	sl, r2
 80185ce:	b2a4      	uxth	r4, r4
 80185d0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80185d4:	f84e 4b04 	str.w	r4, [lr], #4
 80185d8:	f851 4b04 	ldr.w	r4, [r1], #4
 80185dc:	f8be 2000 	ldrh.w	r2, [lr]
 80185e0:	0c24      	lsrs	r4, r4, #16
 80185e2:	fb09 2404 	mla	r4, r9, r4, r2
 80185e6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 80185ea:	458c      	cmp	ip, r1
 80185ec:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80185f0:	d8e7      	bhi.n	80185c2 <__multiply+0xfe>
 80185f2:	9a01      	ldr	r2, [sp, #4]
 80185f4:	50b4      	str	r4, [r6, r2]
 80185f6:	3604      	adds	r6, #4
 80185f8:	e7a3      	b.n	8018542 <__multiply+0x7e>
 80185fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80185fe:	2b00      	cmp	r3, #0
 8018600:	d1a5      	bne.n	801854e <__multiply+0x8a>
 8018602:	3f01      	subs	r7, #1
 8018604:	e7a1      	b.n	801854a <__multiply+0x86>
 8018606:	bf00      	nop
 8018608:	0801a3f0 	.word	0x0801a3f0
 801860c:	0801a401 	.word	0x0801a401

08018610 <__pow5mult>:
 8018610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018614:	4615      	mov	r5, r2
 8018616:	f012 0203 	ands.w	r2, r2, #3
 801861a:	4606      	mov	r6, r0
 801861c:	460f      	mov	r7, r1
 801861e:	d007      	beq.n	8018630 <__pow5mult+0x20>
 8018620:	4c25      	ldr	r4, [pc, #148]	; (80186b8 <__pow5mult+0xa8>)
 8018622:	3a01      	subs	r2, #1
 8018624:	2300      	movs	r3, #0
 8018626:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801862a:	f7ff fe9b 	bl	8018364 <__multadd>
 801862e:	4607      	mov	r7, r0
 8018630:	10ad      	asrs	r5, r5, #2
 8018632:	d03d      	beq.n	80186b0 <__pow5mult+0xa0>
 8018634:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018636:	b97c      	cbnz	r4, 8018658 <__pow5mult+0x48>
 8018638:	2010      	movs	r0, #16
 801863a:	f7fe f841 	bl	80166c0 <malloc>
 801863e:	4602      	mov	r2, r0
 8018640:	6270      	str	r0, [r6, #36]	; 0x24
 8018642:	b928      	cbnz	r0, 8018650 <__pow5mult+0x40>
 8018644:	4b1d      	ldr	r3, [pc, #116]	; (80186bc <__pow5mult+0xac>)
 8018646:	481e      	ldr	r0, [pc, #120]	; (80186c0 <__pow5mult+0xb0>)
 8018648:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801864c:	f000 fb22 	bl	8018c94 <__assert_func>
 8018650:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8018654:	6004      	str	r4, [r0, #0]
 8018656:	60c4      	str	r4, [r0, #12]
 8018658:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801865c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8018660:	b94c      	cbnz	r4, 8018676 <__pow5mult+0x66>
 8018662:	f240 2171 	movw	r1, #625	; 0x271
 8018666:	4630      	mov	r0, r6
 8018668:	f7ff ff16 	bl	8018498 <__i2b>
 801866c:	2300      	movs	r3, #0
 801866e:	f8c8 0008 	str.w	r0, [r8, #8]
 8018672:	4604      	mov	r4, r0
 8018674:	6003      	str	r3, [r0, #0]
 8018676:	f04f 0900 	mov.w	r9, #0
 801867a:	07eb      	lsls	r3, r5, #31
 801867c:	d50a      	bpl.n	8018694 <__pow5mult+0x84>
 801867e:	4639      	mov	r1, r7
 8018680:	4622      	mov	r2, r4
 8018682:	4630      	mov	r0, r6
 8018684:	f7ff ff1e 	bl	80184c4 <__multiply>
 8018688:	4639      	mov	r1, r7
 801868a:	4680      	mov	r8, r0
 801868c:	4630      	mov	r0, r6
 801868e:	f7ff fe47 	bl	8018320 <_Bfree>
 8018692:	4647      	mov	r7, r8
 8018694:	106d      	asrs	r5, r5, #1
 8018696:	d00b      	beq.n	80186b0 <__pow5mult+0xa0>
 8018698:	6820      	ldr	r0, [r4, #0]
 801869a:	b938      	cbnz	r0, 80186ac <__pow5mult+0x9c>
 801869c:	4622      	mov	r2, r4
 801869e:	4621      	mov	r1, r4
 80186a0:	4630      	mov	r0, r6
 80186a2:	f7ff ff0f 	bl	80184c4 <__multiply>
 80186a6:	6020      	str	r0, [r4, #0]
 80186a8:	f8c0 9000 	str.w	r9, [r0]
 80186ac:	4604      	mov	r4, r0
 80186ae:	e7e4      	b.n	801867a <__pow5mult+0x6a>
 80186b0:	4638      	mov	r0, r7
 80186b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80186b6:	bf00      	nop
 80186b8:	0801a558 	.word	0x0801a558
 80186bc:	0801a37a 	.word	0x0801a37a
 80186c0:	0801a401 	.word	0x0801a401

080186c4 <__lshift>:
 80186c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80186c8:	460c      	mov	r4, r1
 80186ca:	6849      	ldr	r1, [r1, #4]
 80186cc:	6923      	ldr	r3, [r4, #16]
 80186ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80186d2:	68a3      	ldr	r3, [r4, #8]
 80186d4:	4607      	mov	r7, r0
 80186d6:	4691      	mov	r9, r2
 80186d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80186dc:	f108 0601 	add.w	r6, r8, #1
 80186e0:	42b3      	cmp	r3, r6
 80186e2:	db0b      	blt.n	80186fc <__lshift+0x38>
 80186e4:	4638      	mov	r0, r7
 80186e6:	f7ff fddb 	bl	80182a0 <_Balloc>
 80186ea:	4605      	mov	r5, r0
 80186ec:	b948      	cbnz	r0, 8018702 <__lshift+0x3e>
 80186ee:	4602      	mov	r2, r0
 80186f0:	4b28      	ldr	r3, [pc, #160]	; (8018794 <__lshift+0xd0>)
 80186f2:	4829      	ldr	r0, [pc, #164]	; (8018798 <__lshift+0xd4>)
 80186f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80186f8:	f000 facc 	bl	8018c94 <__assert_func>
 80186fc:	3101      	adds	r1, #1
 80186fe:	005b      	lsls	r3, r3, #1
 8018700:	e7ee      	b.n	80186e0 <__lshift+0x1c>
 8018702:	2300      	movs	r3, #0
 8018704:	f100 0114 	add.w	r1, r0, #20
 8018708:	f100 0210 	add.w	r2, r0, #16
 801870c:	4618      	mov	r0, r3
 801870e:	4553      	cmp	r3, sl
 8018710:	db33      	blt.n	801877a <__lshift+0xb6>
 8018712:	6920      	ldr	r0, [r4, #16]
 8018714:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8018718:	f104 0314 	add.w	r3, r4, #20
 801871c:	f019 091f 	ands.w	r9, r9, #31
 8018720:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8018724:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8018728:	d02b      	beq.n	8018782 <__lshift+0xbe>
 801872a:	f1c9 0e20 	rsb	lr, r9, #32
 801872e:	468a      	mov	sl, r1
 8018730:	2200      	movs	r2, #0
 8018732:	6818      	ldr	r0, [r3, #0]
 8018734:	fa00 f009 	lsl.w	r0, r0, r9
 8018738:	4302      	orrs	r2, r0
 801873a:	f84a 2b04 	str.w	r2, [sl], #4
 801873e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018742:	459c      	cmp	ip, r3
 8018744:	fa22 f20e 	lsr.w	r2, r2, lr
 8018748:	d8f3      	bhi.n	8018732 <__lshift+0x6e>
 801874a:	ebac 0304 	sub.w	r3, ip, r4
 801874e:	3b15      	subs	r3, #21
 8018750:	f023 0303 	bic.w	r3, r3, #3
 8018754:	3304      	adds	r3, #4
 8018756:	f104 0015 	add.w	r0, r4, #21
 801875a:	4584      	cmp	ip, r0
 801875c:	bf38      	it	cc
 801875e:	2304      	movcc	r3, #4
 8018760:	50ca      	str	r2, [r1, r3]
 8018762:	b10a      	cbz	r2, 8018768 <__lshift+0xa4>
 8018764:	f108 0602 	add.w	r6, r8, #2
 8018768:	3e01      	subs	r6, #1
 801876a:	4638      	mov	r0, r7
 801876c:	612e      	str	r6, [r5, #16]
 801876e:	4621      	mov	r1, r4
 8018770:	f7ff fdd6 	bl	8018320 <_Bfree>
 8018774:	4628      	mov	r0, r5
 8018776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801877a:	f842 0f04 	str.w	r0, [r2, #4]!
 801877e:	3301      	adds	r3, #1
 8018780:	e7c5      	b.n	801870e <__lshift+0x4a>
 8018782:	3904      	subs	r1, #4
 8018784:	f853 2b04 	ldr.w	r2, [r3], #4
 8018788:	f841 2f04 	str.w	r2, [r1, #4]!
 801878c:	459c      	cmp	ip, r3
 801878e:	d8f9      	bhi.n	8018784 <__lshift+0xc0>
 8018790:	e7ea      	b.n	8018768 <__lshift+0xa4>
 8018792:	bf00      	nop
 8018794:	0801a3f0 	.word	0x0801a3f0
 8018798:	0801a401 	.word	0x0801a401

0801879c <__mcmp>:
 801879c:	b530      	push	{r4, r5, lr}
 801879e:	6902      	ldr	r2, [r0, #16]
 80187a0:	690c      	ldr	r4, [r1, #16]
 80187a2:	1b12      	subs	r2, r2, r4
 80187a4:	d10e      	bne.n	80187c4 <__mcmp+0x28>
 80187a6:	f100 0314 	add.w	r3, r0, #20
 80187aa:	3114      	adds	r1, #20
 80187ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80187b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80187b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80187b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80187bc:	42a5      	cmp	r5, r4
 80187be:	d003      	beq.n	80187c8 <__mcmp+0x2c>
 80187c0:	d305      	bcc.n	80187ce <__mcmp+0x32>
 80187c2:	2201      	movs	r2, #1
 80187c4:	4610      	mov	r0, r2
 80187c6:	bd30      	pop	{r4, r5, pc}
 80187c8:	4283      	cmp	r3, r0
 80187ca:	d3f3      	bcc.n	80187b4 <__mcmp+0x18>
 80187cc:	e7fa      	b.n	80187c4 <__mcmp+0x28>
 80187ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80187d2:	e7f7      	b.n	80187c4 <__mcmp+0x28>

080187d4 <__mdiff>:
 80187d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80187d8:	460c      	mov	r4, r1
 80187da:	4606      	mov	r6, r0
 80187dc:	4611      	mov	r1, r2
 80187de:	4620      	mov	r0, r4
 80187e0:	4617      	mov	r7, r2
 80187e2:	f7ff ffdb 	bl	801879c <__mcmp>
 80187e6:	1e05      	subs	r5, r0, #0
 80187e8:	d110      	bne.n	801880c <__mdiff+0x38>
 80187ea:	4629      	mov	r1, r5
 80187ec:	4630      	mov	r0, r6
 80187ee:	f7ff fd57 	bl	80182a0 <_Balloc>
 80187f2:	b930      	cbnz	r0, 8018802 <__mdiff+0x2e>
 80187f4:	4b39      	ldr	r3, [pc, #228]	; (80188dc <__mdiff+0x108>)
 80187f6:	4602      	mov	r2, r0
 80187f8:	f240 2132 	movw	r1, #562	; 0x232
 80187fc:	4838      	ldr	r0, [pc, #224]	; (80188e0 <__mdiff+0x10c>)
 80187fe:	f000 fa49 	bl	8018c94 <__assert_func>
 8018802:	2301      	movs	r3, #1
 8018804:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8018808:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801880c:	bfa4      	itt	ge
 801880e:	463b      	movge	r3, r7
 8018810:	4627      	movge	r7, r4
 8018812:	4630      	mov	r0, r6
 8018814:	6879      	ldr	r1, [r7, #4]
 8018816:	bfa6      	itte	ge
 8018818:	461c      	movge	r4, r3
 801881a:	2500      	movge	r5, #0
 801881c:	2501      	movlt	r5, #1
 801881e:	f7ff fd3f 	bl	80182a0 <_Balloc>
 8018822:	b920      	cbnz	r0, 801882e <__mdiff+0x5a>
 8018824:	4b2d      	ldr	r3, [pc, #180]	; (80188dc <__mdiff+0x108>)
 8018826:	4602      	mov	r2, r0
 8018828:	f44f 7110 	mov.w	r1, #576	; 0x240
 801882c:	e7e6      	b.n	80187fc <__mdiff+0x28>
 801882e:	693e      	ldr	r6, [r7, #16]
 8018830:	60c5      	str	r5, [r0, #12]
 8018832:	6925      	ldr	r5, [r4, #16]
 8018834:	f107 0114 	add.w	r1, r7, #20
 8018838:	f104 0914 	add.w	r9, r4, #20
 801883c:	f100 0e14 	add.w	lr, r0, #20
 8018840:	f107 0210 	add.w	r2, r7, #16
 8018844:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8018848:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801884c:	46f2      	mov	sl, lr
 801884e:	2700      	movs	r7, #0
 8018850:	f859 3b04 	ldr.w	r3, [r9], #4
 8018854:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8018858:	fa1f f883 	uxth.w	r8, r3
 801885c:	fa17 f78b 	uxtah	r7, r7, fp
 8018860:	0c1b      	lsrs	r3, r3, #16
 8018862:	eba7 0808 	sub.w	r8, r7, r8
 8018866:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801886a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801886e:	fa1f f888 	uxth.w	r8, r8
 8018872:	141f      	asrs	r7, r3, #16
 8018874:	454d      	cmp	r5, r9
 8018876:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801887a:	f84a 3b04 	str.w	r3, [sl], #4
 801887e:	d8e7      	bhi.n	8018850 <__mdiff+0x7c>
 8018880:	1b2b      	subs	r3, r5, r4
 8018882:	3b15      	subs	r3, #21
 8018884:	f023 0303 	bic.w	r3, r3, #3
 8018888:	3304      	adds	r3, #4
 801888a:	3415      	adds	r4, #21
 801888c:	42a5      	cmp	r5, r4
 801888e:	bf38      	it	cc
 8018890:	2304      	movcc	r3, #4
 8018892:	4419      	add	r1, r3
 8018894:	4473      	add	r3, lr
 8018896:	469e      	mov	lr, r3
 8018898:	460d      	mov	r5, r1
 801889a:	4565      	cmp	r5, ip
 801889c:	d30e      	bcc.n	80188bc <__mdiff+0xe8>
 801889e:	f10c 0203 	add.w	r2, ip, #3
 80188a2:	1a52      	subs	r2, r2, r1
 80188a4:	f022 0203 	bic.w	r2, r2, #3
 80188a8:	3903      	subs	r1, #3
 80188aa:	458c      	cmp	ip, r1
 80188ac:	bf38      	it	cc
 80188ae:	2200      	movcc	r2, #0
 80188b0:	441a      	add	r2, r3
 80188b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80188b6:	b17b      	cbz	r3, 80188d8 <__mdiff+0x104>
 80188b8:	6106      	str	r6, [r0, #16]
 80188ba:	e7a5      	b.n	8018808 <__mdiff+0x34>
 80188bc:	f855 8b04 	ldr.w	r8, [r5], #4
 80188c0:	fa17 f488 	uxtah	r4, r7, r8
 80188c4:	1422      	asrs	r2, r4, #16
 80188c6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80188ca:	b2a4      	uxth	r4, r4
 80188cc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80188d0:	f84e 4b04 	str.w	r4, [lr], #4
 80188d4:	1417      	asrs	r7, r2, #16
 80188d6:	e7e0      	b.n	801889a <__mdiff+0xc6>
 80188d8:	3e01      	subs	r6, #1
 80188da:	e7ea      	b.n	80188b2 <__mdiff+0xde>
 80188dc:	0801a3f0 	.word	0x0801a3f0
 80188e0:	0801a401 	.word	0x0801a401

080188e4 <__d2b>:
 80188e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80188e8:	4689      	mov	r9, r1
 80188ea:	2101      	movs	r1, #1
 80188ec:	ec57 6b10 	vmov	r6, r7, d0
 80188f0:	4690      	mov	r8, r2
 80188f2:	f7ff fcd5 	bl	80182a0 <_Balloc>
 80188f6:	4604      	mov	r4, r0
 80188f8:	b930      	cbnz	r0, 8018908 <__d2b+0x24>
 80188fa:	4602      	mov	r2, r0
 80188fc:	4b25      	ldr	r3, [pc, #148]	; (8018994 <__d2b+0xb0>)
 80188fe:	4826      	ldr	r0, [pc, #152]	; (8018998 <__d2b+0xb4>)
 8018900:	f240 310a 	movw	r1, #778	; 0x30a
 8018904:	f000 f9c6 	bl	8018c94 <__assert_func>
 8018908:	f3c7 550a 	ubfx	r5, r7, #20, #11
 801890c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8018910:	bb35      	cbnz	r5, 8018960 <__d2b+0x7c>
 8018912:	2e00      	cmp	r6, #0
 8018914:	9301      	str	r3, [sp, #4]
 8018916:	d028      	beq.n	801896a <__d2b+0x86>
 8018918:	4668      	mov	r0, sp
 801891a:	9600      	str	r6, [sp, #0]
 801891c:	f7ff fd8c 	bl	8018438 <__lo0bits>
 8018920:	9900      	ldr	r1, [sp, #0]
 8018922:	b300      	cbz	r0, 8018966 <__d2b+0x82>
 8018924:	9a01      	ldr	r2, [sp, #4]
 8018926:	f1c0 0320 	rsb	r3, r0, #32
 801892a:	fa02 f303 	lsl.w	r3, r2, r3
 801892e:	430b      	orrs	r3, r1
 8018930:	40c2      	lsrs	r2, r0
 8018932:	6163      	str	r3, [r4, #20]
 8018934:	9201      	str	r2, [sp, #4]
 8018936:	9b01      	ldr	r3, [sp, #4]
 8018938:	61a3      	str	r3, [r4, #24]
 801893a:	2b00      	cmp	r3, #0
 801893c:	bf14      	ite	ne
 801893e:	2202      	movne	r2, #2
 8018940:	2201      	moveq	r2, #1
 8018942:	6122      	str	r2, [r4, #16]
 8018944:	b1d5      	cbz	r5, 801897c <__d2b+0x98>
 8018946:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801894a:	4405      	add	r5, r0
 801894c:	f8c9 5000 	str.w	r5, [r9]
 8018950:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8018954:	f8c8 0000 	str.w	r0, [r8]
 8018958:	4620      	mov	r0, r4
 801895a:	b003      	add	sp, #12
 801895c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018960:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8018964:	e7d5      	b.n	8018912 <__d2b+0x2e>
 8018966:	6161      	str	r1, [r4, #20]
 8018968:	e7e5      	b.n	8018936 <__d2b+0x52>
 801896a:	a801      	add	r0, sp, #4
 801896c:	f7ff fd64 	bl	8018438 <__lo0bits>
 8018970:	9b01      	ldr	r3, [sp, #4]
 8018972:	6163      	str	r3, [r4, #20]
 8018974:	2201      	movs	r2, #1
 8018976:	6122      	str	r2, [r4, #16]
 8018978:	3020      	adds	r0, #32
 801897a:	e7e3      	b.n	8018944 <__d2b+0x60>
 801897c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018980:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8018984:	f8c9 0000 	str.w	r0, [r9]
 8018988:	6918      	ldr	r0, [r3, #16]
 801898a:	f7ff fd35 	bl	80183f8 <__hi0bits>
 801898e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8018992:	e7df      	b.n	8018954 <__d2b+0x70>
 8018994:	0801a3f0 	.word	0x0801a3f0
 8018998:	0801a401 	.word	0x0801a401

0801899c <_calloc_r>:
 801899c:	b513      	push	{r0, r1, r4, lr}
 801899e:	434a      	muls	r2, r1
 80189a0:	4611      	mov	r1, r2
 80189a2:	9201      	str	r2, [sp, #4]
 80189a4:	f7fd ff02 	bl	80167ac <_malloc_r>
 80189a8:	4604      	mov	r4, r0
 80189aa:	b118      	cbz	r0, 80189b4 <_calloc_r+0x18>
 80189ac:	9a01      	ldr	r2, [sp, #4]
 80189ae:	2100      	movs	r1, #0
 80189b0:	f7fd fea4 	bl	80166fc <memset>
 80189b4:	4620      	mov	r0, r4
 80189b6:	b002      	add	sp, #8
 80189b8:	bd10      	pop	{r4, pc}

080189ba <__ssputs_r>:
 80189ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80189be:	688e      	ldr	r6, [r1, #8]
 80189c0:	429e      	cmp	r6, r3
 80189c2:	4682      	mov	sl, r0
 80189c4:	460c      	mov	r4, r1
 80189c6:	4690      	mov	r8, r2
 80189c8:	461f      	mov	r7, r3
 80189ca:	d838      	bhi.n	8018a3e <__ssputs_r+0x84>
 80189cc:	898a      	ldrh	r2, [r1, #12]
 80189ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80189d2:	d032      	beq.n	8018a3a <__ssputs_r+0x80>
 80189d4:	6825      	ldr	r5, [r4, #0]
 80189d6:	6909      	ldr	r1, [r1, #16]
 80189d8:	eba5 0901 	sub.w	r9, r5, r1
 80189dc:	6965      	ldr	r5, [r4, #20]
 80189de:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80189e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80189e6:	3301      	adds	r3, #1
 80189e8:	444b      	add	r3, r9
 80189ea:	106d      	asrs	r5, r5, #1
 80189ec:	429d      	cmp	r5, r3
 80189ee:	bf38      	it	cc
 80189f0:	461d      	movcc	r5, r3
 80189f2:	0553      	lsls	r3, r2, #21
 80189f4:	d531      	bpl.n	8018a5a <__ssputs_r+0xa0>
 80189f6:	4629      	mov	r1, r5
 80189f8:	f7fd fed8 	bl	80167ac <_malloc_r>
 80189fc:	4606      	mov	r6, r0
 80189fe:	b950      	cbnz	r0, 8018a16 <__ssputs_r+0x5c>
 8018a00:	230c      	movs	r3, #12
 8018a02:	f8ca 3000 	str.w	r3, [sl]
 8018a06:	89a3      	ldrh	r3, [r4, #12]
 8018a08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018a0c:	81a3      	strh	r3, [r4, #12]
 8018a0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018a16:	6921      	ldr	r1, [r4, #16]
 8018a18:	464a      	mov	r2, r9
 8018a1a:	f7fd fe61 	bl	80166e0 <memcpy>
 8018a1e:	89a3      	ldrh	r3, [r4, #12]
 8018a20:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8018a24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018a28:	81a3      	strh	r3, [r4, #12]
 8018a2a:	6126      	str	r6, [r4, #16]
 8018a2c:	6165      	str	r5, [r4, #20]
 8018a2e:	444e      	add	r6, r9
 8018a30:	eba5 0509 	sub.w	r5, r5, r9
 8018a34:	6026      	str	r6, [r4, #0]
 8018a36:	60a5      	str	r5, [r4, #8]
 8018a38:	463e      	mov	r6, r7
 8018a3a:	42be      	cmp	r6, r7
 8018a3c:	d900      	bls.n	8018a40 <__ssputs_r+0x86>
 8018a3e:	463e      	mov	r6, r7
 8018a40:	4632      	mov	r2, r6
 8018a42:	6820      	ldr	r0, [r4, #0]
 8018a44:	4641      	mov	r1, r8
 8018a46:	f000 f967 	bl	8018d18 <memmove>
 8018a4a:	68a3      	ldr	r3, [r4, #8]
 8018a4c:	6822      	ldr	r2, [r4, #0]
 8018a4e:	1b9b      	subs	r3, r3, r6
 8018a50:	4432      	add	r2, r6
 8018a52:	60a3      	str	r3, [r4, #8]
 8018a54:	6022      	str	r2, [r4, #0]
 8018a56:	2000      	movs	r0, #0
 8018a58:	e7db      	b.n	8018a12 <__ssputs_r+0x58>
 8018a5a:	462a      	mov	r2, r5
 8018a5c:	f000 f976 	bl	8018d4c <_realloc_r>
 8018a60:	4606      	mov	r6, r0
 8018a62:	2800      	cmp	r0, #0
 8018a64:	d1e1      	bne.n	8018a2a <__ssputs_r+0x70>
 8018a66:	6921      	ldr	r1, [r4, #16]
 8018a68:	4650      	mov	r0, sl
 8018a6a:	f7fd fe4f 	bl	801670c <_free_r>
 8018a6e:	e7c7      	b.n	8018a00 <__ssputs_r+0x46>

08018a70 <_svfiprintf_r>:
 8018a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018a74:	4698      	mov	r8, r3
 8018a76:	898b      	ldrh	r3, [r1, #12]
 8018a78:	061b      	lsls	r3, r3, #24
 8018a7a:	b09d      	sub	sp, #116	; 0x74
 8018a7c:	4607      	mov	r7, r0
 8018a7e:	460d      	mov	r5, r1
 8018a80:	4614      	mov	r4, r2
 8018a82:	d50e      	bpl.n	8018aa2 <_svfiprintf_r+0x32>
 8018a84:	690b      	ldr	r3, [r1, #16]
 8018a86:	b963      	cbnz	r3, 8018aa2 <_svfiprintf_r+0x32>
 8018a88:	2140      	movs	r1, #64	; 0x40
 8018a8a:	f7fd fe8f 	bl	80167ac <_malloc_r>
 8018a8e:	6028      	str	r0, [r5, #0]
 8018a90:	6128      	str	r0, [r5, #16]
 8018a92:	b920      	cbnz	r0, 8018a9e <_svfiprintf_r+0x2e>
 8018a94:	230c      	movs	r3, #12
 8018a96:	603b      	str	r3, [r7, #0]
 8018a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018a9c:	e0d1      	b.n	8018c42 <_svfiprintf_r+0x1d2>
 8018a9e:	2340      	movs	r3, #64	; 0x40
 8018aa0:	616b      	str	r3, [r5, #20]
 8018aa2:	2300      	movs	r3, #0
 8018aa4:	9309      	str	r3, [sp, #36]	; 0x24
 8018aa6:	2320      	movs	r3, #32
 8018aa8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018aac:	f8cd 800c 	str.w	r8, [sp, #12]
 8018ab0:	2330      	movs	r3, #48	; 0x30
 8018ab2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018c5c <_svfiprintf_r+0x1ec>
 8018ab6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018aba:	f04f 0901 	mov.w	r9, #1
 8018abe:	4623      	mov	r3, r4
 8018ac0:	469a      	mov	sl, r3
 8018ac2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018ac6:	b10a      	cbz	r2, 8018acc <_svfiprintf_r+0x5c>
 8018ac8:	2a25      	cmp	r2, #37	; 0x25
 8018aca:	d1f9      	bne.n	8018ac0 <_svfiprintf_r+0x50>
 8018acc:	ebba 0b04 	subs.w	fp, sl, r4
 8018ad0:	d00b      	beq.n	8018aea <_svfiprintf_r+0x7a>
 8018ad2:	465b      	mov	r3, fp
 8018ad4:	4622      	mov	r2, r4
 8018ad6:	4629      	mov	r1, r5
 8018ad8:	4638      	mov	r0, r7
 8018ada:	f7ff ff6e 	bl	80189ba <__ssputs_r>
 8018ade:	3001      	adds	r0, #1
 8018ae0:	f000 80aa 	beq.w	8018c38 <_svfiprintf_r+0x1c8>
 8018ae4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018ae6:	445a      	add	r2, fp
 8018ae8:	9209      	str	r2, [sp, #36]	; 0x24
 8018aea:	f89a 3000 	ldrb.w	r3, [sl]
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	f000 80a2 	beq.w	8018c38 <_svfiprintf_r+0x1c8>
 8018af4:	2300      	movs	r3, #0
 8018af6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018afa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018afe:	f10a 0a01 	add.w	sl, sl, #1
 8018b02:	9304      	str	r3, [sp, #16]
 8018b04:	9307      	str	r3, [sp, #28]
 8018b06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018b0a:	931a      	str	r3, [sp, #104]	; 0x68
 8018b0c:	4654      	mov	r4, sl
 8018b0e:	2205      	movs	r2, #5
 8018b10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018b14:	4851      	ldr	r0, [pc, #324]	; (8018c5c <_svfiprintf_r+0x1ec>)
 8018b16:	f7e7 fb63 	bl	80001e0 <memchr>
 8018b1a:	9a04      	ldr	r2, [sp, #16]
 8018b1c:	b9d8      	cbnz	r0, 8018b56 <_svfiprintf_r+0xe6>
 8018b1e:	06d0      	lsls	r0, r2, #27
 8018b20:	bf44      	itt	mi
 8018b22:	2320      	movmi	r3, #32
 8018b24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018b28:	0711      	lsls	r1, r2, #28
 8018b2a:	bf44      	itt	mi
 8018b2c:	232b      	movmi	r3, #43	; 0x2b
 8018b2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018b32:	f89a 3000 	ldrb.w	r3, [sl]
 8018b36:	2b2a      	cmp	r3, #42	; 0x2a
 8018b38:	d015      	beq.n	8018b66 <_svfiprintf_r+0xf6>
 8018b3a:	9a07      	ldr	r2, [sp, #28]
 8018b3c:	4654      	mov	r4, sl
 8018b3e:	2000      	movs	r0, #0
 8018b40:	f04f 0c0a 	mov.w	ip, #10
 8018b44:	4621      	mov	r1, r4
 8018b46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018b4a:	3b30      	subs	r3, #48	; 0x30
 8018b4c:	2b09      	cmp	r3, #9
 8018b4e:	d94e      	bls.n	8018bee <_svfiprintf_r+0x17e>
 8018b50:	b1b0      	cbz	r0, 8018b80 <_svfiprintf_r+0x110>
 8018b52:	9207      	str	r2, [sp, #28]
 8018b54:	e014      	b.n	8018b80 <_svfiprintf_r+0x110>
 8018b56:	eba0 0308 	sub.w	r3, r0, r8
 8018b5a:	fa09 f303 	lsl.w	r3, r9, r3
 8018b5e:	4313      	orrs	r3, r2
 8018b60:	9304      	str	r3, [sp, #16]
 8018b62:	46a2      	mov	sl, r4
 8018b64:	e7d2      	b.n	8018b0c <_svfiprintf_r+0x9c>
 8018b66:	9b03      	ldr	r3, [sp, #12]
 8018b68:	1d19      	adds	r1, r3, #4
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	9103      	str	r1, [sp, #12]
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	bfbb      	ittet	lt
 8018b72:	425b      	neglt	r3, r3
 8018b74:	f042 0202 	orrlt.w	r2, r2, #2
 8018b78:	9307      	strge	r3, [sp, #28]
 8018b7a:	9307      	strlt	r3, [sp, #28]
 8018b7c:	bfb8      	it	lt
 8018b7e:	9204      	strlt	r2, [sp, #16]
 8018b80:	7823      	ldrb	r3, [r4, #0]
 8018b82:	2b2e      	cmp	r3, #46	; 0x2e
 8018b84:	d10c      	bne.n	8018ba0 <_svfiprintf_r+0x130>
 8018b86:	7863      	ldrb	r3, [r4, #1]
 8018b88:	2b2a      	cmp	r3, #42	; 0x2a
 8018b8a:	d135      	bne.n	8018bf8 <_svfiprintf_r+0x188>
 8018b8c:	9b03      	ldr	r3, [sp, #12]
 8018b8e:	1d1a      	adds	r2, r3, #4
 8018b90:	681b      	ldr	r3, [r3, #0]
 8018b92:	9203      	str	r2, [sp, #12]
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	bfb8      	it	lt
 8018b98:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018b9c:	3402      	adds	r4, #2
 8018b9e:	9305      	str	r3, [sp, #20]
 8018ba0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018c6c <_svfiprintf_r+0x1fc>
 8018ba4:	7821      	ldrb	r1, [r4, #0]
 8018ba6:	2203      	movs	r2, #3
 8018ba8:	4650      	mov	r0, sl
 8018baa:	f7e7 fb19 	bl	80001e0 <memchr>
 8018bae:	b140      	cbz	r0, 8018bc2 <_svfiprintf_r+0x152>
 8018bb0:	2340      	movs	r3, #64	; 0x40
 8018bb2:	eba0 000a 	sub.w	r0, r0, sl
 8018bb6:	fa03 f000 	lsl.w	r0, r3, r0
 8018bba:	9b04      	ldr	r3, [sp, #16]
 8018bbc:	4303      	orrs	r3, r0
 8018bbe:	3401      	adds	r4, #1
 8018bc0:	9304      	str	r3, [sp, #16]
 8018bc2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018bc6:	4826      	ldr	r0, [pc, #152]	; (8018c60 <_svfiprintf_r+0x1f0>)
 8018bc8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018bcc:	2206      	movs	r2, #6
 8018bce:	f7e7 fb07 	bl	80001e0 <memchr>
 8018bd2:	2800      	cmp	r0, #0
 8018bd4:	d038      	beq.n	8018c48 <_svfiprintf_r+0x1d8>
 8018bd6:	4b23      	ldr	r3, [pc, #140]	; (8018c64 <_svfiprintf_r+0x1f4>)
 8018bd8:	bb1b      	cbnz	r3, 8018c22 <_svfiprintf_r+0x1b2>
 8018bda:	9b03      	ldr	r3, [sp, #12]
 8018bdc:	3307      	adds	r3, #7
 8018bde:	f023 0307 	bic.w	r3, r3, #7
 8018be2:	3308      	adds	r3, #8
 8018be4:	9303      	str	r3, [sp, #12]
 8018be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018be8:	4433      	add	r3, r6
 8018bea:	9309      	str	r3, [sp, #36]	; 0x24
 8018bec:	e767      	b.n	8018abe <_svfiprintf_r+0x4e>
 8018bee:	fb0c 3202 	mla	r2, ip, r2, r3
 8018bf2:	460c      	mov	r4, r1
 8018bf4:	2001      	movs	r0, #1
 8018bf6:	e7a5      	b.n	8018b44 <_svfiprintf_r+0xd4>
 8018bf8:	2300      	movs	r3, #0
 8018bfa:	3401      	adds	r4, #1
 8018bfc:	9305      	str	r3, [sp, #20]
 8018bfe:	4619      	mov	r1, r3
 8018c00:	f04f 0c0a 	mov.w	ip, #10
 8018c04:	4620      	mov	r0, r4
 8018c06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018c0a:	3a30      	subs	r2, #48	; 0x30
 8018c0c:	2a09      	cmp	r2, #9
 8018c0e:	d903      	bls.n	8018c18 <_svfiprintf_r+0x1a8>
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d0c5      	beq.n	8018ba0 <_svfiprintf_r+0x130>
 8018c14:	9105      	str	r1, [sp, #20]
 8018c16:	e7c3      	b.n	8018ba0 <_svfiprintf_r+0x130>
 8018c18:	fb0c 2101 	mla	r1, ip, r1, r2
 8018c1c:	4604      	mov	r4, r0
 8018c1e:	2301      	movs	r3, #1
 8018c20:	e7f0      	b.n	8018c04 <_svfiprintf_r+0x194>
 8018c22:	ab03      	add	r3, sp, #12
 8018c24:	9300      	str	r3, [sp, #0]
 8018c26:	462a      	mov	r2, r5
 8018c28:	4b0f      	ldr	r3, [pc, #60]	; (8018c68 <_svfiprintf_r+0x1f8>)
 8018c2a:	a904      	add	r1, sp, #16
 8018c2c:	4638      	mov	r0, r7
 8018c2e:	f7fd feb7 	bl	80169a0 <_printf_float>
 8018c32:	1c42      	adds	r2, r0, #1
 8018c34:	4606      	mov	r6, r0
 8018c36:	d1d6      	bne.n	8018be6 <_svfiprintf_r+0x176>
 8018c38:	89ab      	ldrh	r3, [r5, #12]
 8018c3a:	065b      	lsls	r3, r3, #25
 8018c3c:	f53f af2c 	bmi.w	8018a98 <_svfiprintf_r+0x28>
 8018c40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018c42:	b01d      	add	sp, #116	; 0x74
 8018c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018c48:	ab03      	add	r3, sp, #12
 8018c4a:	9300      	str	r3, [sp, #0]
 8018c4c:	462a      	mov	r2, r5
 8018c4e:	4b06      	ldr	r3, [pc, #24]	; (8018c68 <_svfiprintf_r+0x1f8>)
 8018c50:	a904      	add	r1, sp, #16
 8018c52:	4638      	mov	r0, r7
 8018c54:	f7fe f948 	bl	8016ee8 <_printf_i>
 8018c58:	e7eb      	b.n	8018c32 <_svfiprintf_r+0x1c2>
 8018c5a:	bf00      	nop
 8018c5c:	0801a564 	.word	0x0801a564
 8018c60:	0801a56e 	.word	0x0801a56e
 8018c64:	080169a1 	.word	0x080169a1
 8018c68:	080189bb 	.word	0x080189bb
 8018c6c:	0801a56a 	.word	0x0801a56a

08018c70 <_read_r>:
 8018c70:	b538      	push	{r3, r4, r5, lr}
 8018c72:	4d07      	ldr	r5, [pc, #28]	; (8018c90 <_read_r+0x20>)
 8018c74:	4604      	mov	r4, r0
 8018c76:	4608      	mov	r0, r1
 8018c78:	4611      	mov	r1, r2
 8018c7a:	2200      	movs	r2, #0
 8018c7c:	602a      	str	r2, [r5, #0]
 8018c7e:	461a      	mov	r2, r3
 8018c80:	f7ec f9aa 	bl	8004fd8 <_read>
 8018c84:	1c43      	adds	r3, r0, #1
 8018c86:	d102      	bne.n	8018c8e <_read_r+0x1e>
 8018c88:	682b      	ldr	r3, [r5, #0]
 8018c8a:	b103      	cbz	r3, 8018c8e <_read_r+0x1e>
 8018c8c:	6023      	str	r3, [r4, #0]
 8018c8e:	bd38      	pop	{r3, r4, r5, pc}
 8018c90:	20016ccc 	.word	0x20016ccc

08018c94 <__assert_func>:
 8018c94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018c96:	4614      	mov	r4, r2
 8018c98:	461a      	mov	r2, r3
 8018c9a:	4b09      	ldr	r3, [pc, #36]	; (8018cc0 <__assert_func+0x2c>)
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	4605      	mov	r5, r0
 8018ca0:	68d8      	ldr	r0, [r3, #12]
 8018ca2:	b14c      	cbz	r4, 8018cb8 <__assert_func+0x24>
 8018ca4:	4b07      	ldr	r3, [pc, #28]	; (8018cc4 <__assert_func+0x30>)
 8018ca6:	9100      	str	r1, [sp, #0]
 8018ca8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018cac:	4906      	ldr	r1, [pc, #24]	; (8018cc8 <__assert_func+0x34>)
 8018cae:	462b      	mov	r3, r5
 8018cb0:	f000 f80e 	bl	8018cd0 <fiprintf>
 8018cb4:	f000 fa98 	bl	80191e8 <abort>
 8018cb8:	4b04      	ldr	r3, [pc, #16]	; (8018ccc <__assert_func+0x38>)
 8018cba:	461c      	mov	r4, r3
 8018cbc:	e7f3      	b.n	8018ca6 <__assert_func+0x12>
 8018cbe:	bf00      	nop
 8018cc0:	200001a0 	.word	0x200001a0
 8018cc4:	0801a575 	.word	0x0801a575
 8018cc8:	0801a582 	.word	0x0801a582
 8018ccc:	0801a5b0 	.word	0x0801a5b0

08018cd0 <fiprintf>:
 8018cd0:	b40e      	push	{r1, r2, r3}
 8018cd2:	b503      	push	{r0, r1, lr}
 8018cd4:	4601      	mov	r1, r0
 8018cd6:	ab03      	add	r3, sp, #12
 8018cd8:	4805      	ldr	r0, [pc, #20]	; (8018cf0 <fiprintf+0x20>)
 8018cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8018cde:	6800      	ldr	r0, [r0, #0]
 8018ce0:	9301      	str	r3, [sp, #4]
 8018ce2:	f000 f883 	bl	8018dec <_vfiprintf_r>
 8018ce6:	b002      	add	sp, #8
 8018ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8018cec:	b003      	add	sp, #12
 8018cee:	4770      	bx	lr
 8018cf0:	200001a0 	.word	0x200001a0

08018cf4 <__ascii_mbtowc>:
 8018cf4:	b082      	sub	sp, #8
 8018cf6:	b901      	cbnz	r1, 8018cfa <__ascii_mbtowc+0x6>
 8018cf8:	a901      	add	r1, sp, #4
 8018cfa:	b142      	cbz	r2, 8018d0e <__ascii_mbtowc+0x1a>
 8018cfc:	b14b      	cbz	r3, 8018d12 <__ascii_mbtowc+0x1e>
 8018cfe:	7813      	ldrb	r3, [r2, #0]
 8018d00:	600b      	str	r3, [r1, #0]
 8018d02:	7812      	ldrb	r2, [r2, #0]
 8018d04:	1e10      	subs	r0, r2, #0
 8018d06:	bf18      	it	ne
 8018d08:	2001      	movne	r0, #1
 8018d0a:	b002      	add	sp, #8
 8018d0c:	4770      	bx	lr
 8018d0e:	4610      	mov	r0, r2
 8018d10:	e7fb      	b.n	8018d0a <__ascii_mbtowc+0x16>
 8018d12:	f06f 0001 	mvn.w	r0, #1
 8018d16:	e7f8      	b.n	8018d0a <__ascii_mbtowc+0x16>

08018d18 <memmove>:
 8018d18:	4288      	cmp	r0, r1
 8018d1a:	b510      	push	{r4, lr}
 8018d1c:	eb01 0402 	add.w	r4, r1, r2
 8018d20:	d902      	bls.n	8018d28 <memmove+0x10>
 8018d22:	4284      	cmp	r4, r0
 8018d24:	4623      	mov	r3, r4
 8018d26:	d807      	bhi.n	8018d38 <memmove+0x20>
 8018d28:	1e43      	subs	r3, r0, #1
 8018d2a:	42a1      	cmp	r1, r4
 8018d2c:	d008      	beq.n	8018d40 <memmove+0x28>
 8018d2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018d32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018d36:	e7f8      	b.n	8018d2a <memmove+0x12>
 8018d38:	4402      	add	r2, r0
 8018d3a:	4601      	mov	r1, r0
 8018d3c:	428a      	cmp	r2, r1
 8018d3e:	d100      	bne.n	8018d42 <memmove+0x2a>
 8018d40:	bd10      	pop	{r4, pc}
 8018d42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8018d46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8018d4a:	e7f7      	b.n	8018d3c <memmove+0x24>

08018d4c <_realloc_r>:
 8018d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018d4e:	4607      	mov	r7, r0
 8018d50:	4614      	mov	r4, r2
 8018d52:	460e      	mov	r6, r1
 8018d54:	b921      	cbnz	r1, 8018d60 <_realloc_r+0x14>
 8018d56:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8018d5a:	4611      	mov	r1, r2
 8018d5c:	f7fd bd26 	b.w	80167ac <_malloc_r>
 8018d60:	b922      	cbnz	r2, 8018d6c <_realloc_r+0x20>
 8018d62:	f7fd fcd3 	bl	801670c <_free_r>
 8018d66:	4625      	mov	r5, r4
 8018d68:	4628      	mov	r0, r5
 8018d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018d6c:	f000 faa8 	bl	80192c0 <_malloc_usable_size_r>
 8018d70:	42a0      	cmp	r0, r4
 8018d72:	d20f      	bcs.n	8018d94 <_realloc_r+0x48>
 8018d74:	4621      	mov	r1, r4
 8018d76:	4638      	mov	r0, r7
 8018d78:	f7fd fd18 	bl	80167ac <_malloc_r>
 8018d7c:	4605      	mov	r5, r0
 8018d7e:	2800      	cmp	r0, #0
 8018d80:	d0f2      	beq.n	8018d68 <_realloc_r+0x1c>
 8018d82:	4631      	mov	r1, r6
 8018d84:	4622      	mov	r2, r4
 8018d86:	f7fd fcab 	bl	80166e0 <memcpy>
 8018d8a:	4631      	mov	r1, r6
 8018d8c:	4638      	mov	r0, r7
 8018d8e:	f7fd fcbd 	bl	801670c <_free_r>
 8018d92:	e7e9      	b.n	8018d68 <_realloc_r+0x1c>
 8018d94:	4635      	mov	r5, r6
 8018d96:	e7e7      	b.n	8018d68 <_realloc_r+0x1c>

08018d98 <__sfputc_r>:
 8018d98:	6893      	ldr	r3, [r2, #8]
 8018d9a:	3b01      	subs	r3, #1
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	b410      	push	{r4}
 8018da0:	6093      	str	r3, [r2, #8]
 8018da2:	da08      	bge.n	8018db6 <__sfputc_r+0x1e>
 8018da4:	6994      	ldr	r4, [r2, #24]
 8018da6:	42a3      	cmp	r3, r4
 8018da8:	db01      	blt.n	8018dae <__sfputc_r+0x16>
 8018daa:	290a      	cmp	r1, #10
 8018dac:	d103      	bne.n	8018db6 <__sfputc_r+0x1e>
 8018dae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018db2:	f000 b94b 	b.w	801904c <__swbuf_r>
 8018db6:	6813      	ldr	r3, [r2, #0]
 8018db8:	1c58      	adds	r0, r3, #1
 8018dba:	6010      	str	r0, [r2, #0]
 8018dbc:	7019      	strb	r1, [r3, #0]
 8018dbe:	4608      	mov	r0, r1
 8018dc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018dc4:	4770      	bx	lr

08018dc6 <__sfputs_r>:
 8018dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018dc8:	4606      	mov	r6, r0
 8018dca:	460f      	mov	r7, r1
 8018dcc:	4614      	mov	r4, r2
 8018dce:	18d5      	adds	r5, r2, r3
 8018dd0:	42ac      	cmp	r4, r5
 8018dd2:	d101      	bne.n	8018dd8 <__sfputs_r+0x12>
 8018dd4:	2000      	movs	r0, #0
 8018dd6:	e007      	b.n	8018de8 <__sfputs_r+0x22>
 8018dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ddc:	463a      	mov	r2, r7
 8018dde:	4630      	mov	r0, r6
 8018de0:	f7ff ffda 	bl	8018d98 <__sfputc_r>
 8018de4:	1c43      	adds	r3, r0, #1
 8018de6:	d1f3      	bne.n	8018dd0 <__sfputs_r+0xa>
 8018de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018dec <_vfiprintf_r>:
 8018dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018df0:	460d      	mov	r5, r1
 8018df2:	b09d      	sub	sp, #116	; 0x74
 8018df4:	4614      	mov	r4, r2
 8018df6:	4698      	mov	r8, r3
 8018df8:	4606      	mov	r6, r0
 8018dfa:	b118      	cbz	r0, 8018e04 <_vfiprintf_r+0x18>
 8018dfc:	6983      	ldr	r3, [r0, #24]
 8018dfe:	b90b      	cbnz	r3, 8018e04 <_vfiprintf_r+0x18>
 8018e00:	f7fd fb7e 	bl	8016500 <__sinit>
 8018e04:	4b89      	ldr	r3, [pc, #548]	; (801902c <_vfiprintf_r+0x240>)
 8018e06:	429d      	cmp	r5, r3
 8018e08:	d11b      	bne.n	8018e42 <_vfiprintf_r+0x56>
 8018e0a:	6875      	ldr	r5, [r6, #4]
 8018e0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018e0e:	07d9      	lsls	r1, r3, #31
 8018e10:	d405      	bmi.n	8018e1e <_vfiprintf_r+0x32>
 8018e12:	89ab      	ldrh	r3, [r5, #12]
 8018e14:	059a      	lsls	r2, r3, #22
 8018e16:	d402      	bmi.n	8018e1e <_vfiprintf_r+0x32>
 8018e18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018e1a:	f7fd fc4e 	bl	80166ba <__retarget_lock_acquire_recursive>
 8018e1e:	89ab      	ldrh	r3, [r5, #12]
 8018e20:	071b      	lsls	r3, r3, #28
 8018e22:	d501      	bpl.n	8018e28 <_vfiprintf_r+0x3c>
 8018e24:	692b      	ldr	r3, [r5, #16]
 8018e26:	b9eb      	cbnz	r3, 8018e64 <_vfiprintf_r+0x78>
 8018e28:	4629      	mov	r1, r5
 8018e2a:	4630      	mov	r0, r6
 8018e2c:	f000 f96e 	bl	801910c <__swsetup_r>
 8018e30:	b1c0      	cbz	r0, 8018e64 <_vfiprintf_r+0x78>
 8018e32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018e34:	07dc      	lsls	r4, r3, #31
 8018e36:	d50e      	bpl.n	8018e56 <_vfiprintf_r+0x6a>
 8018e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018e3c:	b01d      	add	sp, #116	; 0x74
 8018e3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018e42:	4b7b      	ldr	r3, [pc, #492]	; (8019030 <_vfiprintf_r+0x244>)
 8018e44:	429d      	cmp	r5, r3
 8018e46:	d101      	bne.n	8018e4c <_vfiprintf_r+0x60>
 8018e48:	68b5      	ldr	r5, [r6, #8]
 8018e4a:	e7df      	b.n	8018e0c <_vfiprintf_r+0x20>
 8018e4c:	4b79      	ldr	r3, [pc, #484]	; (8019034 <_vfiprintf_r+0x248>)
 8018e4e:	429d      	cmp	r5, r3
 8018e50:	bf08      	it	eq
 8018e52:	68f5      	ldreq	r5, [r6, #12]
 8018e54:	e7da      	b.n	8018e0c <_vfiprintf_r+0x20>
 8018e56:	89ab      	ldrh	r3, [r5, #12]
 8018e58:	0598      	lsls	r0, r3, #22
 8018e5a:	d4ed      	bmi.n	8018e38 <_vfiprintf_r+0x4c>
 8018e5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018e5e:	f7fd fc2d 	bl	80166bc <__retarget_lock_release_recursive>
 8018e62:	e7e9      	b.n	8018e38 <_vfiprintf_r+0x4c>
 8018e64:	2300      	movs	r3, #0
 8018e66:	9309      	str	r3, [sp, #36]	; 0x24
 8018e68:	2320      	movs	r3, #32
 8018e6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018e6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8018e72:	2330      	movs	r3, #48	; 0x30
 8018e74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8019038 <_vfiprintf_r+0x24c>
 8018e78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018e7c:	f04f 0901 	mov.w	r9, #1
 8018e80:	4623      	mov	r3, r4
 8018e82:	469a      	mov	sl, r3
 8018e84:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018e88:	b10a      	cbz	r2, 8018e8e <_vfiprintf_r+0xa2>
 8018e8a:	2a25      	cmp	r2, #37	; 0x25
 8018e8c:	d1f9      	bne.n	8018e82 <_vfiprintf_r+0x96>
 8018e8e:	ebba 0b04 	subs.w	fp, sl, r4
 8018e92:	d00b      	beq.n	8018eac <_vfiprintf_r+0xc0>
 8018e94:	465b      	mov	r3, fp
 8018e96:	4622      	mov	r2, r4
 8018e98:	4629      	mov	r1, r5
 8018e9a:	4630      	mov	r0, r6
 8018e9c:	f7ff ff93 	bl	8018dc6 <__sfputs_r>
 8018ea0:	3001      	adds	r0, #1
 8018ea2:	f000 80aa 	beq.w	8018ffa <_vfiprintf_r+0x20e>
 8018ea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018ea8:	445a      	add	r2, fp
 8018eaa:	9209      	str	r2, [sp, #36]	; 0x24
 8018eac:	f89a 3000 	ldrb.w	r3, [sl]
 8018eb0:	2b00      	cmp	r3, #0
 8018eb2:	f000 80a2 	beq.w	8018ffa <_vfiprintf_r+0x20e>
 8018eb6:	2300      	movs	r3, #0
 8018eb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018ebc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018ec0:	f10a 0a01 	add.w	sl, sl, #1
 8018ec4:	9304      	str	r3, [sp, #16]
 8018ec6:	9307      	str	r3, [sp, #28]
 8018ec8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018ecc:	931a      	str	r3, [sp, #104]	; 0x68
 8018ece:	4654      	mov	r4, sl
 8018ed0:	2205      	movs	r2, #5
 8018ed2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018ed6:	4858      	ldr	r0, [pc, #352]	; (8019038 <_vfiprintf_r+0x24c>)
 8018ed8:	f7e7 f982 	bl	80001e0 <memchr>
 8018edc:	9a04      	ldr	r2, [sp, #16]
 8018ede:	b9d8      	cbnz	r0, 8018f18 <_vfiprintf_r+0x12c>
 8018ee0:	06d1      	lsls	r1, r2, #27
 8018ee2:	bf44      	itt	mi
 8018ee4:	2320      	movmi	r3, #32
 8018ee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018eea:	0713      	lsls	r3, r2, #28
 8018eec:	bf44      	itt	mi
 8018eee:	232b      	movmi	r3, #43	; 0x2b
 8018ef0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8018ef8:	2b2a      	cmp	r3, #42	; 0x2a
 8018efa:	d015      	beq.n	8018f28 <_vfiprintf_r+0x13c>
 8018efc:	9a07      	ldr	r2, [sp, #28]
 8018efe:	4654      	mov	r4, sl
 8018f00:	2000      	movs	r0, #0
 8018f02:	f04f 0c0a 	mov.w	ip, #10
 8018f06:	4621      	mov	r1, r4
 8018f08:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018f0c:	3b30      	subs	r3, #48	; 0x30
 8018f0e:	2b09      	cmp	r3, #9
 8018f10:	d94e      	bls.n	8018fb0 <_vfiprintf_r+0x1c4>
 8018f12:	b1b0      	cbz	r0, 8018f42 <_vfiprintf_r+0x156>
 8018f14:	9207      	str	r2, [sp, #28]
 8018f16:	e014      	b.n	8018f42 <_vfiprintf_r+0x156>
 8018f18:	eba0 0308 	sub.w	r3, r0, r8
 8018f1c:	fa09 f303 	lsl.w	r3, r9, r3
 8018f20:	4313      	orrs	r3, r2
 8018f22:	9304      	str	r3, [sp, #16]
 8018f24:	46a2      	mov	sl, r4
 8018f26:	e7d2      	b.n	8018ece <_vfiprintf_r+0xe2>
 8018f28:	9b03      	ldr	r3, [sp, #12]
 8018f2a:	1d19      	adds	r1, r3, #4
 8018f2c:	681b      	ldr	r3, [r3, #0]
 8018f2e:	9103      	str	r1, [sp, #12]
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	bfbb      	ittet	lt
 8018f34:	425b      	neglt	r3, r3
 8018f36:	f042 0202 	orrlt.w	r2, r2, #2
 8018f3a:	9307      	strge	r3, [sp, #28]
 8018f3c:	9307      	strlt	r3, [sp, #28]
 8018f3e:	bfb8      	it	lt
 8018f40:	9204      	strlt	r2, [sp, #16]
 8018f42:	7823      	ldrb	r3, [r4, #0]
 8018f44:	2b2e      	cmp	r3, #46	; 0x2e
 8018f46:	d10c      	bne.n	8018f62 <_vfiprintf_r+0x176>
 8018f48:	7863      	ldrb	r3, [r4, #1]
 8018f4a:	2b2a      	cmp	r3, #42	; 0x2a
 8018f4c:	d135      	bne.n	8018fba <_vfiprintf_r+0x1ce>
 8018f4e:	9b03      	ldr	r3, [sp, #12]
 8018f50:	1d1a      	adds	r2, r3, #4
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	9203      	str	r2, [sp, #12]
 8018f56:	2b00      	cmp	r3, #0
 8018f58:	bfb8      	it	lt
 8018f5a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018f5e:	3402      	adds	r4, #2
 8018f60:	9305      	str	r3, [sp, #20]
 8018f62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019048 <_vfiprintf_r+0x25c>
 8018f66:	7821      	ldrb	r1, [r4, #0]
 8018f68:	2203      	movs	r2, #3
 8018f6a:	4650      	mov	r0, sl
 8018f6c:	f7e7 f938 	bl	80001e0 <memchr>
 8018f70:	b140      	cbz	r0, 8018f84 <_vfiprintf_r+0x198>
 8018f72:	2340      	movs	r3, #64	; 0x40
 8018f74:	eba0 000a 	sub.w	r0, r0, sl
 8018f78:	fa03 f000 	lsl.w	r0, r3, r0
 8018f7c:	9b04      	ldr	r3, [sp, #16]
 8018f7e:	4303      	orrs	r3, r0
 8018f80:	3401      	adds	r4, #1
 8018f82:	9304      	str	r3, [sp, #16]
 8018f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018f88:	482c      	ldr	r0, [pc, #176]	; (801903c <_vfiprintf_r+0x250>)
 8018f8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018f8e:	2206      	movs	r2, #6
 8018f90:	f7e7 f926 	bl	80001e0 <memchr>
 8018f94:	2800      	cmp	r0, #0
 8018f96:	d03f      	beq.n	8019018 <_vfiprintf_r+0x22c>
 8018f98:	4b29      	ldr	r3, [pc, #164]	; (8019040 <_vfiprintf_r+0x254>)
 8018f9a:	bb1b      	cbnz	r3, 8018fe4 <_vfiprintf_r+0x1f8>
 8018f9c:	9b03      	ldr	r3, [sp, #12]
 8018f9e:	3307      	adds	r3, #7
 8018fa0:	f023 0307 	bic.w	r3, r3, #7
 8018fa4:	3308      	adds	r3, #8
 8018fa6:	9303      	str	r3, [sp, #12]
 8018fa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018faa:	443b      	add	r3, r7
 8018fac:	9309      	str	r3, [sp, #36]	; 0x24
 8018fae:	e767      	b.n	8018e80 <_vfiprintf_r+0x94>
 8018fb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8018fb4:	460c      	mov	r4, r1
 8018fb6:	2001      	movs	r0, #1
 8018fb8:	e7a5      	b.n	8018f06 <_vfiprintf_r+0x11a>
 8018fba:	2300      	movs	r3, #0
 8018fbc:	3401      	adds	r4, #1
 8018fbe:	9305      	str	r3, [sp, #20]
 8018fc0:	4619      	mov	r1, r3
 8018fc2:	f04f 0c0a 	mov.w	ip, #10
 8018fc6:	4620      	mov	r0, r4
 8018fc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018fcc:	3a30      	subs	r2, #48	; 0x30
 8018fce:	2a09      	cmp	r2, #9
 8018fd0:	d903      	bls.n	8018fda <_vfiprintf_r+0x1ee>
 8018fd2:	2b00      	cmp	r3, #0
 8018fd4:	d0c5      	beq.n	8018f62 <_vfiprintf_r+0x176>
 8018fd6:	9105      	str	r1, [sp, #20]
 8018fd8:	e7c3      	b.n	8018f62 <_vfiprintf_r+0x176>
 8018fda:	fb0c 2101 	mla	r1, ip, r1, r2
 8018fde:	4604      	mov	r4, r0
 8018fe0:	2301      	movs	r3, #1
 8018fe2:	e7f0      	b.n	8018fc6 <_vfiprintf_r+0x1da>
 8018fe4:	ab03      	add	r3, sp, #12
 8018fe6:	9300      	str	r3, [sp, #0]
 8018fe8:	462a      	mov	r2, r5
 8018fea:	4b16      	ldr	r3, [pc, #88]	; (8019044 <_vfiprintf_r+0x258>)
 8018fec:	a904      	add	r1, sp, #16
 8018fee:	4630      	mov	r0, r6
 8018ff0:	f7fd fcd6 	bl	80169a0 <_printf_float>
 8018ff4:	4607      	mov	r7, r0
 8018ff6:	1c78      	adds	r0, r7, #1
 8018ff8:	d1d6      	bne.n	8018fa8 <_vfiprintf_r+0x1bc>
 8018ffa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018ffc:	07d9      	lsls	r1, r3, #31
 8018ffe:	d405      	bmi.n	801900c <_vfiprintf_r+0x220>
 8019000:	89ab      	ldrh	r3, [r5, #12]
 8019002:	059a      	lsls	r2, r3, #22
 8019004:	d402      	bmi.n	801900c <_vfiprintf_r+0x220>
 8019006:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8019008:	f7fd fb58 	bl	80166bc <__retarget_lock_release_recursive>
 801900c:	89ab      	ldrh	r3, [r5, #12]
 801900e:	065b      	lsls	r3, r3, #25
 8019010:	f53f af12 	bmi.w	8018e38 <_vfiprintf_r+0x4c>
 8019014:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019016:	e711      	b.n	8018e3c <_vfiprintf_r+0x50>
 8019018:	ab03      	add	r3, sp, #12
 801901a:	9300      	str	r3, [sp, #0]
 801901c:	462a      	mov	r2, r5
 801901e:	4b09      	ldr	r3, [pc, #36]	; (8019044 <_vfiprintf_r+0x258>)
 8019020:	a904      	add	r1, sp, #16
 8019022:	4630      	mov	r0, r6
 8019024:	f7fd ff60 	bl	8016ee8 <_printf_i>
 8019028:	e7e4      	b.n	8018ff4 <_vfiprintf_r+0x208>
 801902a:	bf00      	nop
 801902c:	0801a2d0 	.word	0x0801a2d0
 8019030:	0801a2f0 	.word	0x0801a2f0
 8019034:	0801a2b0 	.word	0x0801a2b0
 8019038:	0801a564 	.word	0x0801a564
 801903c:	0801a56e 	.word	0x0801a56e
 8019040:	080169a1 	.word	0x080169a1
 8019044:	08018dc7 	.word	0x08018dc7
 8019048:	0801a56a 	.word	0x0801a56a

0801904c <__swbuf_r>:
 801904c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801904e:	460e      	mov	r6, r1
 8019050:	4614      	mov	r4, r2
 8019052:	4605      	mov	r5, r0
 8019054:	b118      	cbz	r0, 801905e <__swbuf_r+0x12>
 8019056:	6983      	ldr	r3, [r0, #24]
 8019058:	b90b      	cbnz	r3, 801905e <__swbuf_r+0x12>
 801905a:	f7fd fa51 	bl	8016500 <__sinit>
 801905e:	4b21      	ldr	r3, [pc, #132]	; (80190e4 <__swbuf_r+0x98>)
 8019060:	429c      	cmp	r4, r3
 8019062:	d12b      	bne.n	80190bc <__swbuf_r+0x70>
 8019064:	686c      	ldr	r4, [r5, #4]
 8019066:	69a3      	ldr	r3, [r4, #24]
 8019068:	60a3      	str	r3, [r4, #8]
 801906a:	89a3      	ldrh	r3, [r4, #12]
 801906c:	071a      	lsls	r2, r3, #28
 801906e:	d52f      	bpl.n	80190d0 <__swbuf_r+0x84>
 8019070:	6923      	ldr	r3, [r4, #16]
 8019072:	b36b      	cbz	r3, 80190d0 <__swbuf_r+0x84>
 8019074:	6923      	ldr	r3, [r4, #16]
 8019076:	6820      	ldr	r0, [r4, #0]
 8019078:	1ac0      	subs	r0, r0, r3
 801907a:	6963      	ldr	r3, [r4, #20]
 801907c:	b2f6      	uxtb	r6, r6
 801907e:	4283      	cmp	r3, r0
 8019080:	4637      	mov	r7, r6
 8019082:	dc04      	bgt.n	801908e <__swbuf_r+0x42>
 8019084:	4621      	mov	r1, r4
 8019086:	4628      	mov	r0, r5
 8019088:	f7ff f8ac 	bl	80181e4 <_fflush_r>
 801908c:	bb30      	cbnz	r0, 80190dc <__swbuf_r+0x90>
 801908e:	68a3      	ldr	r3, [r4, #8]
 8019090:	3b01      	subs	r3, #1
 8019092:	60a3      	str	r3, [r4, #8]
 8019094:	6823      	ldr	r3, [r4, #0]
 8019096:	1c5a      	adds	r2, r3, #1
 8019098:	6022      	str	r2, [r4, #0]
 801909a:	701e      	strb	r6, [r3, #0]
 801909c:	6963      	ldr	r3, [r4, #20]
 801909e:	3001      	adds	r0, #1
 80190a0:	4283      	cmp	r3, r0
 80190a2:	d004      	beq.n	80190ae <__swbuf_r+0x62>
 80190a4:	89a3      	ldrh	r3, [r4, #12]
 80190a6:	07db      	lsls	r3, r3, #31
 80190a8:	d506      	bpl.n	80190b8 <__swbuf_r+0x6c>
 80190aa:	2e0a      	cmp	r6, #10
 80190ac:	d104      	bne.n	80190b8 <__swbuf_r+0x6c>
 80190ae:	4621      	mov	r1, r4
 80190b0:	4628      	mov	r0, r5
 80190b2:	f7ff f897 	bl	80181e4 <_fflush_r>
 80190b6:	b988      	cbnz	r0, 80190dc <__swbuf_r+0x90>
 80190b8:	4638      	mov	r0, r7
 80190ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80190bc:	4b0a      	ldr	r3, [pc, #40]	; (80190e8 <__swbuf_r+0x9c>)
 80190be:	429c      	cmp	r4, r3
 80190c0:	d101      	bne.n	80190c6 <__swbuf_r+0x7a>
 80190c2:	68ac      	ldr	r4, [r5, #8]
 80190c4:	e7cf      	b.n	8019066 <__swbuf_r+0x1a>
 80190c6:	4b09      	ldr	r3, [pc, #36]	; (80190ec <__swbuf_r+0xa0>)
 80190c8:	429c      	cmp	r4, r3
 80190ca:	bf08      	it	eq
 80190cc:	68ec      	ldreq	r4, [r5, #12]
 80190ce:	e7ca      	b.n	8019066 <__swbuf_r+0x1a>
 80190d0:	4621      	mov	r1, r4
 80190d2:	4628      	mov	r0, r5
 80190d4:	f000 f81a 	bl	801910c <__swsetup_r>
 80190d8:	2800      	cmp	r0, #0
 80190da:	d0cb      	beq.n	8019074 <__swbuf_r+0x28>
 80190dc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80190e0:	e7ea      	b.n	80190b8 <__swbuf_r+0x6c>
 80190e2:	bf00      	nop
 80190e4:	0801a2d0 	.word	0x0801a2d0
 80190e8:	0801a2f0 	.word	0x0801a2f0
 80190ec:	0801a2b0 	.word	0x0801a2b0

080190f0 <__ascii_wctomb>:
 80190f0:	b149      	cbz	r1, 8019106 <__ascii_wctomb+0x16>
 80190f2:	2aff      	cmp	r2, #255	; 0xff
 80190f4:	bf85      	ittet	hi
 80190f6:	238a      	movhi	r3, #138	; 0x8a
 80190f8:	6003      	strhi	r3, [r0, #0]
 80190fa:	700a      	strbls	r2, [r1, #0]
 80190fc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8019100:	bf98      	it	ls
 8019102:	2001      	movls	r0, #1
 8019104:	4770      	bx	lr
 8019106:	4608      	mov	r0, r1
 8019108:	4770      	bx	lr
	...

0801910c <__swsetup_r>:
 801910c:	4b32      	ldr	r3, [pc, #200]	; (80191d8 <__swsetup_r+0xcc>)
 801910e:	b570      	push	{r4, r5, r6, lr}
 8019110:	681d      	ldr	r5, [r3, #0]
 8019112:	4606      	mov	r6, r0
 8019114:	460c      	mov	r4, r1
 8019116:	b125      	cbz	r5, 8019122 <__swsetup_r+0x16>
 8019118:	69ab      	ldr	r3, [r5, #24]
 801911a:	b913      	cbnz	r3, 8019122 <__swsetup_r+0x16>
 801911c:	4628      	mov	r0, r5
 801911e:	f7fd f9ef 	bl	8016500 <__sinit>
 8019122:	4b2e      	ldr	r3, [pc, #184]	; (80191dc <__swsetup_r+0xd0>)
 8019124:	429c      	cmp	r4, r3
 8019126:	d10f      	bne.n	8019148 <__swsetup_r+0x3c>
 8019128:	686c      	ldr	r4, [r5, #4]
 801912a:	89a3      	ldrh	r3, [r4, #12]
 801912c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019130:	0719      	lsls	r1, r3, #28
 8019132:	d42c      	bmi.n	801918e <__swsetup_r+0x82>
 8019134:	06dd      	lsls	r5, r3, #27
 8019136:	d411      	bmi.n	801915c <__swsetup_r+0x50>
 8019138:	2309      	movs	r3, #9
 801913a:	6033      	str	r3, [r6, #0]
 801913c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019140:	81a3      	strh	r3, [r4, #12]
 8019142:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019146:	e03e      	b.n	80191c6 <__swsetup_r+0xba>
 8019148:	4b25      	ldr	r3, [pc, #148]	; (80191e0 <__swsetup_r+0xd4>)
 801914a:	429c      	cmp	r4, r3
 801914c:	d101      	bne.n	8019152 <__swsetup_r+0x46>
 801914e:	68ac      	ldr	r4, [r5, #8]
 8019150:	e7eb      	b.n	801912a <__swsetup_r+0x1e>
 8019152:	4b24      	ldr	r3, [pc, #144]	; (80191e4 <__swsetup_r+0xd8>)
 8019154:	429c      	cmp	r4, r3
 8019156:	bf08      	it	eq
 8019158:	68ec      	ldreq	r4, [r5, #12]
 801915a:	e7e6      	b.n	801912a <__swsetup_r+0x1e>
 801915c:	0758      	lsls	r0, r3, #29
 801915e:	d512      	bpl.n	8019186 <__swsetup_r+0x7a>
 8019160:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019162:	b141      	cbz	r1, 8019176 <__swsetup_r+0x6a>
 8019164:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019168:	4299      	cmp	r1, r3
 801916a:	d002      	beq.n	8019172 <__swsetup_r+0x66>
 801916c:	4630      	mov	r0, r6
 801916e:	f7fd facd 	bl	801670c <_free_r>
 8019172:	2300      	movs	r3, #0
 8019174:	6363      	str	r3, [r4, #52]	; 0x34
 8019176:	89a3      	ldrh	r3, [r4, #12]
 8019178:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801917c:	81a3      	strh	r3, [r4, #12]
 801917e:	2300      	movs	r3, #0
 8019180:	6063      	str	r3, [r4, #4]
 8019182:	6923      	ldr	r3, [r4, #16]
 8019184:	6023      	str	r3, [r4, #0]
 8019186:	89a3      	ldrh	r3, [r4, #12]
 8019188:	f043 0308 	orr.w	r3, r3, #8
 801918c:	81a3      	strh	r3, [r4, #12]
 801918e:	6923      	ldr	r3, [r4, #16]
 8019190:	b94b      	cbnz	r3, 80191a6 <__swsetup_r+0x9a>
 8019192:	89a3      	ldrh	r3, [r4, #12]
 8019194:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019198:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801919c:	d003      	beq.n	80191a6 <__swsetup_r+0x9a>
 801919e:	4621      	mov	r1, r4
 80191a0:	4630      	mov	r0, r6
 80191a2:	f000 f84d 	bl	8019240 <__smakebuf_r>
 80191a6:	89a0      	ldrh	r0, [r4, #12]
 80191a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80191ac:	f010 0301 	ands.w	r3, r0, #1
 80191b0:	d00a      	beq.n	80191c8 <__swsetup_r+0xbc>
 80191b2:	2300      	movs	r3, #0
 80191b4:	60a3      	str	r3, [r4, #8]
 80191b6:	6963      	ldr	r3, [r4, #20]
 80191b8:	425b      	negs	r3, r3
 80191ba:	61a3      	str	r3, [r4, #24]
 80191bc:	6923      	ldr	r3, [r4, #16]
 80191be:	b943      	cbnz	r3, 80191d2 <__swsetup_r+0xc6>
 80191c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80191c4:	d1ba      	bne.n	801913c <__swsetup_r+0x30>
 80191c6:	bd70      	pop	{r4, r5, r6, pc}
 80191c8:	0781      	lsls	r1, r0, #30
 80191ca:	bf58      	it	pl
 80191cc:	6963      	ldrpl	r3, [r4, #20]
 80191ce:	60a3      	str	r3, [r4, #8]
 80191d0:	e7f4      	b.n	80191bc <__swsetup_r+0xb0>
 80191d2:	2000      	movs	r0, #0
 80191d4:	e7f7      	b.n	80191c6 <__swsetup_r+0xba>
 80191d6:	bf00      	nop
 80191d8:	200001a0 	.word	0x200001a0
 80191dc:	0801a2d0 	.word	0x0801a2d0
 80191e0:	0801a2f0 	.word	0x0801a2f0
 80191e4:	0801a2b0 	.word	0x0801a2b0

080191e8 <abort>:
 80191e8:	b508      	push	{r3, lr}
 80191ea:	2006      	movs	r0, #6
 80191ec:	f000 f898 	bl	8019320 <raise>
 80191f0:	2001      	movs	r0, #1
 80191f2:	f7eb fee7 	bl	8004fc4 <_exit>

080191f6 <__swhatbuf_r>:
 80191f6:	b570      	push	{r4, r5, r6, lr}
 80191f8:	460e      	mov	r6, r1
 80191fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80191fe:	2900      	cmp	r1, #0
 8019200:	b096      	sub	sp, #88	; 0x58
 8019202:	4614      	mov	r4, r2
 8019204:	461d      	mov	r5, r3
 8019206:	da07      	bge.n	8019218 <__swhatbuf_r+0x22>
 8019208:	2300      	movs	r3, #0
 801920a:	602b      	str	r3, [r5, #0]
 801920c:	89b3      	ldrh	r3, [r6, #12]
 801920e:	061a      	lsls	r2, r3, #24
 8019210:	d410      	bmi.n	8019234 <__swhatbuf_r+0x3e>
 8019212:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019216:	e00e      	b.n	8019236 <__swhatbuf_r+0x40>
 8019218:	466a      	mov	r2, sp
 801921a:	f000 f89d 	bl	8019358 <_fstat_r>
 801921e:	2800      	cmp	r0, #0
 8019220:	dbf2      	blt.n	8019208 <__swhatbuf_r+0x12>
 8019222:	9a01      	ldr	r2, [sp, #4]
 8019224:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019228:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801922c:	425a      	negs	r2, r3
 801922e:	415a      	adcs	r2, r3
 8019230:	602a      	str	r2, [r5, #0]
 8019232:	e7ee      	b.n	8019212 <__swhatbuf_r+0x1c>
 8019234:	2340      	movs	r3, #64	; 0x40
 8019236:	2000      	movs	r0, #0
 8019238:	6023      	str	r3, [r4, #0]
 801923a:	b016      	add	sp, #88	; 0x58
 801923c:	bd70      	pop	{r4, r5, r6, pc}
	...

08019240 <__smakebuf_r>:
 8019240:	898b      	ldrh	r3, [r1, #12]
 8019242:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019244:	079d      	lsls	r5, r3, #30
 8019246:	4606      	mov	r6, r0
 8019248:	460c      	mov	r4, r1
 801924a:	d507      	bpl.n	801925c <__smakebuf_r+0x1c>
 801924c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019250:	6023      	str	r3, [r4, #0]
 8019252:	6123      	str	r3, [r4, #16]
 8019254:	2301      	movs	r3, #1
 8019256:	6163      	str	r3, [r4, #20]
 8019258:	b002      	add	sp, #8
 801925a:	bd70      	pop	{r4, r5, r6, pc}
 801925c:	ab01      	add	r3, sp, #4
 801925e:	466a      	mov	r2, sp
 8019260:	f7ff ffc9 	bl	80191f6 <__swhatbuf_r>
 8019264:	9900      	ldr	r1, [sp, #0]
 8019266:	4605      	mov	r5, r0
 8019268:	4630      	mov	r0, r6
 801926a:	f7fd fa9f 	bl	80167ac <_malloc_r>
 801926e:	b948      	cbnz	r0, 8019284 <__smakebuf_r+0x44>
 8019270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019274:	059a      	lsls	r2, r3, #22
 8019276:	d4ef      	bmi.n	8019258 <__smakebuf_r+0x18>
 8019278:	f023 0303 	bic.w	r3, r3, #3
 801927c:	f043 0302 	orr.w	r3, r3, #2
 8019280:	81a3      	strh	r3, [r4, #12]
 8019282:	e7e3      	b.n	801924c <__smakebuf_r+0xc>
 8019284:	4b0d      	ldr	r3, [pc, #52]	; (80192bc <__smakebuf_r+0x7c>)
 8019286:	62b3      	str	r3, [r6, #40]	; 0x28
 8019288:	89a3      	ldrh	r3, [r4, #12]
 801928a:	6020      	str	r0, [r4, #0]
 801928c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019290:	81a3      	strh	r3, [r4, #12]
 8019292:	9b00      	ldr	r3, [sp, #0]
 8019294:	6163      	str	r3, [r4, #20]
 8019296:	9b01      	ldr	r3, [sp, #4]
 8019298:	6120      	str	r0, [r4, #16]
 801929a:	b15b      	cbz	r3, 80192b4 <__smakebuf_r+0x74>
 801929c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80192a0:	4630      	mov	r0, r6
 80192a2:	f000 f86b 	bl	801937c <_isatty_r>
 80192a6:	b128      	cbz	r0, 80192b4 <__smakebuf_r+0x74>
 80192a8:	89a3      	ldrh	r3, [r4, #12]
 80192aa:	f023 0303 	bic.w	r3, r3, #3
 80192ae:	f043 0301 	orr.w	r3, r3, #1
 80192b2:	81a3      	strh	r3, [r4, #12]
 80192b4:	89a0      	ldrh	r0, [r4, #12]
 80192b6:	4305      	orrs	r5, r0
 80192b8:	81a5      	strh	r5, [r4, #12]
 80192ba:	e7cd      	b.n	8019258 <__smakebuf_r+0x18>
 80192bc:	08016499 	.word	0x08016499

080192c0 <_malloc_usable_size_r>:
 80192c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80192c4:	1f18      	subs	r0, r3, #4
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	bfbc      	itt	lt
 80192ca:	580b      	ldrlt	r3, [r1, r0]
 80192cc:	18c0      	addlt	r0, r0, r3
 80192ce:	4770      	bx	lr

080192d0 <_raise_r>:
 80192d0:	291f      	cmp	r1, #31
 80192d2:	b538      	push	{r3, r4, r5, lr}
 80192d4:	4604      	mov	r4, r0
 80192d6:	460d      	mov	r5, r1
 80192d8:	d904      	bls.n	80192e4 <_raise_r+0x14>
 80192da:	2316      	movs	r3, #22
 80192dc:	6003      	str	r3, [r0, #0]
 80192de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80192e2:	bd38      	pop	{r3, r4, r5, pc}
 80192e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80192e6:	b112      	cbz	r2, 80192ee <_raise_r+0x1e>
 80192e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80192ec:	b94b      	cbnz	r3, 8019302 <_raise_r+0x32>
 80192ee:	4620      	mov	r0, r4
 80192f0:	f000 f830 	bl	8019354 <_getpid_r>
 80192f4:	462a      	mov	r2, r5
 80192f6:	4601      	mov	r1, r0
 80192f8:	4620      	mov	r0, r4
 80192fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80192fe:	f000 b817 	b.w	8019330 <_kill_r>
 8019302:	2b01      	cmp	r3, #1
 8019304:	d00a      	beq.n	801931c <_raise_r+0x4c>
 8019306:	1c59      	adds	r1, r3, #1
 8019308:	d103      	bne.n	8019312 <_raise_r+0x42>
 801930a:	2316      	movs	r3, #22
 801930c:	6003      	str	r3, [r0, #0]
 801930e:	2001      	movs	r0, #1
 8019310:	e7e7      	b.n	80192e2 <_raise_r+0x12>
 8019312:	2400      	movs	r4, #0
 8019314:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019318:	4628      	mov	r0, r5
 801931a:	4798      	blx	r3
 801931c:	2000      	movs	r0, #0
 801931e:	e7e0      	b.n	80192e2 <_raise_r+0x12>

08019320 <raise>:
 8019320:	4b02      	ldr	r3, [pc, #8]	; (801932c <raise+0xc>)
 8019322:	4601      	mov	r1, r0
 8019324:	6818      	ldr	r0, [r3, #0]
 8019326:	f7ff bfd3 	b.w	80192d0 <_raise_r>
 801932a:	bf00      	nop
 801932c:	200001a0 	.word	0x200001a0

08019330 <_kill_r>:
 8019330:	b538      	push	{r3, r4, r5, lr}
 8019332:	4d07      	ldr	r5, [pc, #28]	; (8019350 <_kill_r+0x20>)
 8019334:	2300      	movs	r3, #0
 8019336:	4604      	mov	r4, r0
 8019338:	4608      	mov	r0, r1
 801933a:	4611      	mov	r1, r2
 801933c:	602b      	str	r3, [r5, #0]
 801933e:	f7eb fe31 	bl	8004fa4 <_kill>
 8019342:	1c43      	adds	r3, r0, #1
 8019344:	d102      	bne.n	801934c <_kill_r+0x1c>
 8019346:	682b      	ldr	r3, [r5, #0]
 8019348:	b103      	cbz	r3, 801934c <_kill_r+0x1c>
 801934a:	6023      	str	r3, [r4, #0]
 801934c:	bd38      	pop	{r3, r4, r5, pc}
 801934e:	bf00      	nop
 8019350:	20016ccc 	.word	0x20016ccc

08019354 <_getpid_r>:
 8019354:	f7eb be1e 	b.w	8004f94 <_getpid>

08019358 <_fstat_r>:
 8019358:	b538      	push	{r3, r4, r5, lr}
 801935a:	4d07      	ldr	r5, [pc, #28]	; (8019378 <_fstat_r+0x20>)
 801935c:	2300      	movs	r3, #0
 801935e:	4604      	mov	r4, r0
 8019360:	4608      	mov	r0, r1
 8019362:	4611      	mov	r1, r2
 8019364:	602b      	str	r3, [r5, #0]
 8019366:	f7eb fe7c 	bl	8005062 <_fstat>
 801936a:	1c43      	adds	r3, r0, #1
 801936c:	d102      	bne.n	8019374 <_fstat_r+0x1c>
 801936e:	682b      	ldr	r3, [r5, #0]
 8019370:	b103      	cbz	r3, 8019374 <_fstat_r+0x1c>
 8019372:	6023      	str	r3, [r4, #0]
 8019374:	bd38      	pop	{r3, r4, r5, pc}
 8019376:	bf00      	nop
 8019378:	20016ccc 	.word	0x20016ccc

0801937c <_isatty_r>:
 801937c:	b538      	push	{r3, r4, r5, lr}
 801937e:	4d06      	ldr	r5, [pc, #24]	; (8019398 <_isatty_r+0x1c>)
 8019380:	2300      	movs	r3, #0
 8019382:	4604      	mov	r4, r0
 8019384:	4608      	mov	r0, r1
 8019386:	602b      	str	r3, [r5, #0]
 8019388:	f7eb fe7b 	bl	8005082 <_isatty>
 801938c:	1c43      	adds	r3, r0, #1
 801938e:	d102      	bne.n	8019396 <_isatty_r+0x1a>
 8019390:	682b      	ldr	r3, [r5, #0]
 8019392:	b103      	cbz	r3, 8019396 <_isatty_r+0x1a>
 8019394:	6023      	str	r3, [r4, #0]
 8019396:	bd38      	pop	{r3, r4, r5, pc}
 8019398:	20016ccc 	.word	0x20016ccc

0801939c <_init>:
 801939c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801939e:	bf00      	nop
 80193a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80193a2:	bc08      	pop	{r3}
 80193a4:	469e      	mov	lr, r3
 80193a6:	4770      	bx	lr

080193a8 <_fini>:
 80193a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80193aa:	bf00      	nop
 80193ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80193ae:	bc08      	pop	{r3}
 80193b0:	469e      	mov	lr, r3
 80193b2:	4770      	bx	lr
