
5.FreeRTOS_STM32F407VG_SPI_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019be4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004d9c  08019d78  08019d78  00029d78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801eb14  0801eb14  00030398  2**0
                  CONTENTS
  4 .ARM          00000008  0801eb14  0801eb14  0002eb14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801eb1c  0801eb1c  00030398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801eb1c  0801eb1c  0002eb1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801eb20  0801eb20  0002eb20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000398  20000000  0801eb24  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030398  2**0
                  CONTENTS
 10 .bss          0001ecc8  20000398  20000398  00030398  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  2001f060  2001f060  00030398  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030398  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003d7d0  00000000  00000000  000303c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007b8a  00000000  00000000  0006db98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002810  00000000  00000000  00075728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000024f0  00000000  00000000  00077f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002c763  00000000  00000000  0007a428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003908e  00000000  00000000  000a6b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7678  00000000  00000000  000dfc19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001c7291  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b8dc  00000000  00000000  001c72e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000398 	.word	0x20000398
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08019d5c 	.word	0x08019d5c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000039c 	.word	0x2000039c
 80001cc:	08019d5c 	.word	0x08019d5c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8000f48:	2305      	movs	r3, #5
 8000f4a:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f001 f9ef 	bl	8002334 <null_ptr_check>
 8000f56:	4603      	mov	r3, r0
 8000f58:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8000f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d133      	bne.n	8000fca <bme280_init+0x8a>
		while (try_count) {
 8000f62:	e028      	b.n	8000fb6 <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000f64:	f107 010d 	add.w	r1, r7, #13
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	20d0      	movs	r0, #208	; 0xd0
 8000f6e:	f000 f832 	bl	8000fd6 <bme280_get_regs>
 8000f72:	4603      	mov	r3, r0
 8000f74:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8000f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d114      	bne.n	8000fa8 <bme280_init+0x68>
 8000f7e:	7b7b      	ldrb	r3, [r7, #13]
 8000f80:	2b60      	cmp	r3, #96	; 0x60
 8000f82:	d111      	bne.n	8000fa8 <bme280_init+0x68>
				dev->chip_id = chip_id;
 8000f84:	7b7a      	ldrb	r2, [r7, #13]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f000 f976 	bl	800127c <bme280_soft_reset>
 8000f90:	4603      	mov	r3, r0
 8000f92:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8000f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d110      	bne.n	8000fbe <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f001 f83f 	bl	8002020 <get_calib_data>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8000fa6:	e00a      	b.n	8000fbe <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	2001      	movs	r0, #1
 8000fae:	4798      	blx	r3
			--try_count;
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8000fb6:	7bbb      	ldrb	r3, [r7, #14]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1d3      	bne.n	8000f64 <bme280_init+0x24>
 8000fbc:	e000      	b.n	8000fc0 <bme280_init+0x80>
				break;
 8000fbe:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8000fc0:	7bbb      	ldrb	r3, [r7, #14]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8000fc6:	23fe      	movs	r3, #254	; 0xfe
 8000fc8:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8000fd6:	b590      	push	{r4, r7, lr}
 8000fd8:	b087      	sub	sp, #28
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f001 f9a3 	bl	8002334 <null_ptr_check>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8000ff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d117      	bne.n	800102a <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	789b      	ldrb	r3, [r3, #2]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d003      	beq.n	800100a <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001008:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685c      	ldr	r4, [r3, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	7858      	ldrb	r0, [r3, #1]
 8001012:	89bb      	ldrh	r3, [r7, #12]
 8001014:	7bf9      	ldrb	r1, [r7, #15]
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	47a0      	blx	r4
 800101a:	4603      	mov	r3, r0
 800101c:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 800101e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 8001026:	23fc      	movs	r3, #252	; 0xfc
 8001028:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800102a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800102e:	4618      	mov	r0, r3
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd90      	pop	{r4, r7, pc}

08001036 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8001036:	b590      	push	{r4, r7, lr}
 8001038:	b08d      	sub	sp, #52	; 0x34
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	4613      	mov	r3, r2
 8001044:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b0a      	cmp	r3, #10
 800104a:	d901      	bls.n	8001050 <bme280_set_regs+0x1a>
		len = 10;
 800104c:	230a      	movs	r3, #10
 800104e:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001050:	6838      	ldr	r0, [r7, #0]
 8001052:	f001 f96f 	bl	8002334 <null_ptr_check>
 8001056:	4603      	mov	r3, r0
 8001058:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 800105c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001060:	2b00      	cmp	r3, #0
 8001062:	d154      	bne.n	800110e <bme280_set_regs+0xd8>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d051      	beq.n	800110e <bme280_set_regs+0xd8>
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d04e      	beq.n	800110e <bme280_set_regs+0xd8>
		if (len != 0) {
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d047      	beq.n	8001106 <bme280_set_regs+0xd0>
			temp_buff[0] = reg_data[0];
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	789b      	ldrb	r3, [r3, #2]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d01a      	beq.n	80010ba <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001084:	2300      	movs	r3, #0
 8001086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800108a:	e011      	b.n	80010b0 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800108c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	4413      	add	r3, r2
 8001094:	781a      	ldrb	r2, [r3, #0]
 8001096:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800109a:	68f9      	ldr	r1, [r7, #12]
 800109c:	440b      	add	r3, r1
 800109e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010aa:	3301      	adds	r3, #1
 80010ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80010b0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d3e8      	bcc.n	800108c <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d90b      	bls.n	80010d8 <bme280_set_regs+0xa2>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f107 0114 	add.w	r1, r7, #20
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f000 ffee 	bl	80020aa <interleave_reg_addr>
				temp_len = len * 2;
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010d6:	e001      	b.n	80010dc <bme280_set_regs+0xa6>
			} else {
				temp_len = len;
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	689c      	ldr	r4, [r3, #8]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	7858      	ldrb	r0, [r3, #1]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	7819      	ldrb	r1, [r3, #0]
 80010e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80010ea:	f107 0214 	add.w	r2, r7, #20
 80010ee:	47a0      	blx	r4
 80010f0:	4603      	mov	r3, r0
 80010f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 80010f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00b      	beq.n	8001116 <bme280_set_regs+0xe0>
				rslt = BME280_E_COMM_FAIL;
 80010fe:	23fc      	movs	r3, #252	; 0xfc
 8001100:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8001104:	e007      	b.n	8001116 <bme280_set_regs+0xe0>
		} else {
			rslt = BME280_E_INVALID_LEN;
 8001106:	23fd      	movs	r3, #253	; 0xfd
 8001108:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 800110c:	e003      	b.n	8001116 <bme280_set_regs+0xe0>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800110e:	23ff      	movs	r3, #255	; 0xff
 8001110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001114:	e000      	b.n	8001118 <bme280_set_regs+0xe2>
		if (len != 0) {
 8001116:	bf00      	nop
	}


	return rslt;
 8001118:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800111c:	4618      	mov	r0, r3
 800111e:	3734      	adds	r7, #52	; 0x34
 8001120:	46bd      	mov	sp, r7
 8001122:	bd90      	pop	{r4, r7, pc}

08001124 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001130:	6838      	ldr	r0, [r7, #0]
 8001132:	f001 f8ff 	bl	8002334 <null_ptr_check>
 8001136:	4603      	mov	r3, r0
 8001138:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d13f      	bne.n	80011c2 <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8001142:	f107 030e 	add.w	r3, r7, #14
 8001146:	6839      	ldr	r1, [r7, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f874 	bl	8001236 <bme280_get_sensor_mode>
 800114e:	4603      	mov	r3, r0
 8001150:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8001152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d107      	bne.n	800116a <bme280_set_sensor_settings+0x46>
 800115a:	7bbb      	ldrb	r3, [r7, #14]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d004      	beq.n	800116a <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8001160:	6838      	ldr	r0, [r7, #0]
 8001162:	f000 fb4e 	bl	8001802 <put_device_to_sleep>
 8001166:	4603      	mov	r3, r0
 8001168:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d127      	bne.n	80011c2 <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	4619      	mov	r1, r3
 8001176:	2007      	movs	r0, #7
 8001178:	f001 f8c0 	bl	80022fc <are_settings_changed>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f000 f98a 	bl	80014a6 <set_osr_settings>
 8001192:	4603      	mov	r3, r0
 8001194:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d111      	bne.n	80011c2 <bme280_set_sensor_settings+0x9e>
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	4619      	mov	r1, r3
 80011a2:	2018      	movs	r0, #24
 80011a4:	f001 f8aa 	bl	80022fc <are_settings_changed>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d009      	beq.n	80011c2 <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fa11 	bl	80015e0 <set_filter_standby_settings>
 80011be:	4603      	mov	r3, r0
 80011c0:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 80011c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	6039      	str	r1, [r7, #0]
 80011d8:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011da:	6838      	ldr	r0, [r7, #0]
 80011dc:	f001 f8aa 	bl	8002334 <null_ptr_check>
 80011e0:	4603      	mov	r3, r0
 80011e2:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80011e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d11e      	bne.n	800122a <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80011ec:	f107 030e 	add.w	r3, r7, #14
 80011f0:	6839      	ldr	r1, [r7, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f81f 	bl	8001236 <bme280_get_sensor_mode>
 80011f8:	4603      	mov	r3, r0
 80011fa:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80011fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d107      	bne.n	8001214 <bme280_set_sensor_mode+0x46>
 8001204:	7bbb      	ldrb	r3, [r7, #14]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d004      	beq.n	8001214 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 800120a:	6838      	ldr	r0, [r7, #0]
 800120c:	f000 faf9 	bl	8001802 <put_device_to_sleep>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8001214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d106      	bne.n	800122a <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	6839      	ldr	r1, [r7, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 fabb 	bl	800179c <write_power_mode>
 8001226:	4603      	mov	r3, r0
 8001228:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b084      	sub	sp, #16
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001240:	6838      	ldr	r0, [r7, #0]
 8001242:	f001 f877 	bl	8002334 <null_ptr_check>
 8001246:	4603      	mov	r3, r0
 8001248:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 800124a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10e      	bne.n	8001270 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	2201      	movs	r2, #1
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	20f4      	movs	r0, #244	; 0xf4
 800125a:	f7ff febc 	bl	8000fd6 <bme280_get_regs>
 800125e:	4603      	mov	r3, r0
 8001260:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	b2da      	uxtb	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8001270:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8001284:	23e0      	movs	r3, #224	; 0xe0
 8001286:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8001288:	23b6      	movs	r3, #182	; 0xb6
 800128a:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f001 f851 	bl	8002334 <null_ptr_check>
 8001292:	4603      	mov	r3, r0
 8001294:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10d      	bne.n	80012ba <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800129e:	f107 010d 	add.w	r1, r7, #13
 80012a2:	f107 000e 	add.w	r0, r7, #14
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f7ff fec4 	bl	8001036 <bme280_set_regs>
 80012ae:	4603      	mov	r3, r0
 80012b0:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	2002      	movs	r0, #2
 80012b8:	4798      	blx	r3
	}

	return rslt;
 80012ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b08a      	sub	sp, #40	; 0x28
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f001 f823 	bl	8002334 <null_ptr_check>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 80012f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d124      	bne.n	8001346 <bme280_get_sensor_data+0x80>
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d021      	beq.n	8001346 <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8001302:	f107 011c 	add.w	r1, r7, #28
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2208      	movs	r2, #8
 800130a:	20f7      	movs	r0, #247	; 0xf7
 800130c:	f7ff fe63 	bl	8000fd6 <bme280_get_regs>
 8001310:	4603      	mov	r3, r0
 8001312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 8001316:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800131a:	2b00      	cmp	r3, #0
 800131c:	d116      	bne.n	800134c <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 800131e:	f107 0210 	add.w	r2, r7, #16
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f000 f815 	bl	8001358 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3310      	adds	r3, #16
 8001332:	f107 0110 	add.w	r1, r7, #16
 8001336:	7bf8      	ldrb	r0, [r7, #15]
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	f000 f853 	bl	80013e4 <bme280_compensate_data>
 800133e:	4603      	mov	r3, r0
 8001340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8001344:	e002      	b.n	800134c <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001346:	23ff      	movs	r3, #255	; 0xff
 8001348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 800134c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001350:	4618      	mov	r0, r3
 8001352:	3728      	adds	r7, #40	; 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8001358:	b480      	push	{r7}
 800135a:	b087      	sub	sp, #28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	031b      	lsls	r3, r3, #12
 8001368:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3301      	adds	r3, #1
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	011b      	lsls	r3, r3, #4
 8001372:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3302      	adds	r3, #2
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	b2db      	uxtb	r3, r3
 800137e:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	431a      	orrs	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	431a      	orrs	r2, r3
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3303      	adds	r3, #3
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	031b      	lsls	r3, r3, #12
 8001396:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3304      	adds	r3, #4
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	011b      	lsls	r3, r3, #4
 80013a0:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3305      	adds	r3, #5
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	091b      	lsrs	r3, r3, #4
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	431a      	orrs	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	431a      	orrs	r2, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3306      	adds	r3, #6
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3307      	adds	r3, #7
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	431a      	orrs	r2, r3
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	609a      	str	r2, [r3, #8]
}
 80013d8:	bf00      	nop
 80013da:	371c      	adds	r7, #28
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	4603      	mov	r3, r0
 80013f2:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d04b      	beq.n	8001496 <bme280_compensate_data+0xb2>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d048      	beq.n	8001496 <bme280_compensate_data+0xb2>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d045      	beq.n	8001496 <bme280_compensate_data+0xb2>
		/* Initialize to zero */
		comp_data->temperature = 0;
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	e9c1 2302 	strd	r2, r3, [r1, #8]
		comp_data->pressure = 0;
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	e9c1 2300 	strd	r2, r3, [r1]
		comp_data->humidity = 0;
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	e9c1 2304 	strd	r2, r3, [r1, #16]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00a      	beq.n	8001454 <bme280_compensate_data+0x70>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 800143e:	6839      	ldr	r1, [r7, #0]
 8001440:	68b8      	ldr	r0, [r7, #8]
 8001442:	f000 fa2b 	bl	800189c <compensate_temperature>
 8001446:	eeb0 7a40 	vmov.f32	s14, s0
 800144a:	eef0 7a60 	vmov.f32	s15, s1
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	ed83 7b02 	vstr	d7, [r3, #8]
		}
		if (sensor_comp & BME280_PRESS) {
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00a      	beq.n	8001474 <bme280_compensate_data+0x90>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 800145e:	6839      	ldr	r1, [r7, #0]
 8001460:	68b8      	ldr	r0, [r7, #8]
 8001462:	f000 faed 	bl	8001a40 <compensate_pressure>
 8001466:	eeb0 7a40 	vmov.f32	s14, s0
 800146a:	eef0 7a60 	vmov.f32	s15, s1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	ed83 7b00 	vstr	d7, [r3]
		}
		if (sensor_comp & BME280_HUM) {
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00d      	beq.n	800149a <bme280_compensate_data+0xb6>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 800147e:	6839      	ldr	r1, [r7, #0]
 8001480:	68b8      	ldr	r0, [r7, #8]
 8001482:	f000 fcad 	bl	8001de0 <compensate_humidity>
 8001486:	eeb0 7a40 	vmov.f32	s14, s0
 800148a:	eef0 7a60 	vmov.f32	s15, s1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	ed83 7b04 	vstr	d7, [r3, #16]
		if (sensor_comp & BME280_HUM) {
 8001494:	e001      	b.n	800149a <bme280_compensate_data+0xb6>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001496:	23ff      	movs	r3, #255	; 0xff
 8001498:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800149a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80014b4:	2301      	movs	r3, #1
 80014b6:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d005      	beq.n	80014ce <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	68b8      	ldr	r0, [r7, #8]
 80014c6:	f000 f815 	bl	80014f4 <set_osr_humidity_settings>
 80014ca:	4603      	mov	r3, r0
 80014cc:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d007      	beq.n	80014e8 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f842 	bl	8001568 <set_osr_press_temp_settings>
 80014e4:	4603      	mov	r3, r0
 80014e6:	75fb      	strb	r3, [r7, #23]

	return rslt;
 80014e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80014fe:	23f2      	movs	r3, #242	; 0xf2
 8001500:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	789b      	ldrb	r3, [r3, #2]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	b2db      	uxtb	r3, r3
 800150c:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800150e:	f107 010e 	add.w	r1, r7, #14
 8001512:	f107 000c 	add.w	r0, r7, #12
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	2201      	movs	r2, #1
 800151a:	f7ff fd8c 	bl	8001036 <bme280_set_regs>
 800151e:	4603      	mov	r3, r0
 8001520:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d118      	bne.n	800155c <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 800152a:	23f4      	movs	r3, #244	; 0xf4
 800152c:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 800152e:	7b38      	ldrb	r0, [r7, #12]
 8001530:	f107 010d 	add.w	r1, r7, #13
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	2201      	movs	r2, #1
 8001538:	f7ff fd4d 	bl	8000fd6 <bme280_get_regs>
 800153c:	4603      	mov	r3, r0
 800153e:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8001540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d109      	bne.n	800155c <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001548:	f107 010d 	add.w	r1, r7, #13
 800154c:	f107 000c 	add.w	r0, r7, #12
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	2201      	movs	r2, #1
 8001554:	f7ff fd6f 	bl	8001036 <bme280_set_regs>
 8001558:	4603      	mov	r3, r0
 800155a:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800155c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8001576:	23f4      	movs	r3, #244	; 0xf4
 8001578:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800157a:	7db8      	ldrb	r0, [r7, #22]
 800157c:	f107 0115 	add.w	r1, r7, #21
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f7ff fd27 	bl	8000fd6 <bme280_get_regs>
 8001588:	4603      	mov	r3, r0
 800158a:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 800158c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d11f      	bne.n	80015d4 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 800159e:	f107 0315 	add.w	r3, r7, #21
 80015a2:	68b9      	ldr	r1, [r7, #8]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 f88e 	bl	80016c6 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 80015b4:	f107 0315 	add.w	r3, r7, #21
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f8a0 	bl	8001700 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80015c0:	f107 0115 	add.w	r1, r7, #21
 80015c4:	f107 0016 	add.w	r0, r7, #22
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f7ff fd33 	bl	8001036 <bme280_set_regs>
 80015d0:	4603      	mov	r3, r0
 80015d2:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80015d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 80015ee:	23f5      	movs	r3, #245	; 0xf5
 80015f0:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80015f2:	7db8      	ldrb	r0, [r7, #22]
 80015f4:	f107 0115 	add.w	r1, r7, #21
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f7ff fceb 	bl	8000fd6 <bme280_get_regs>
 8001600:	4603      	mov	r3, r0
 8001602:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8001604:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d11f      	bne.n	800164c <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 8001616:	f107 0315 	add.w	r3, r7, #21
 800161a:	68b9      	ldr	r1, [r7, #8]
 800161c:	4618      	mov	r0, r3
 800161e:	f000 f81b 	bl	8001658 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 800162c:	f107 0315 	add.w	r3, r7, #21
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f82d 	bl	8001692 <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001638:	f107 0115 	add.w	r1, r7, #21
 800163c:	f107 0016 	add.w	r0, r7, #22
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f7ff fcf7 	bl	8001036 <bme280_set_regs>
 8001648:	4603      	mov	r3, r0
 800164a:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800164c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b25b      	sxtb	r3, r3
 8001668:	f023 031c 	bic.w	r3, r3, #28
 800166c:	b25a      	sxtb	r2, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	78db      	ldrb	r3, [r3, #3]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	b25b      	sxtb	r3, r3
 8001676:	f003 031c 	and.w	r3, r3, #28
 800167a:	b25b      	sxtb	r3, r3
 800167c:	4313      	orrs	r3, r2
 800167e:	b25b      	sxtb	r3, r3
 8001680:	b2da      	uxtb	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	701a      	strb	r2, [r3, #0]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	b25b      	sxtb	r3, r3
 80016a2:	f003 031f 	and.w	r3, r3, #31
 80016a6:	b25a      	sxtb	r2, r3
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	791b      	ldrb	r3, [r3, #4]
 80016ac:	015b      	lsls	r3, r3, #5
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	701a      	strb	r2, [r3, #0]
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b25b      	sxtb	r3, r3
 80016d6:	f023 031c 	bic.w	r3, r3, #28
 80016da:	b25a      	sxtb	r2, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	b25b      	sxtb	r3, r3
 80016e4:	f003 031c 	and.w	r3, r3, #28
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b25b      	sxtb	r3, r3
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	701a      	strb	r2, [r3, #0]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	b25b      	sxtb	r3, r3
 8001710:	f003 031f 	and.w	r3, r3, #31
 8001714:	b25a      	sxtb	r2, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	785b      	ldrb	r3, [r3, #1]
 800171a:	015b      	lsls	r3, r3, #5
 800171c:	b25b      	sxtb	r3, r3
 800171e:	4313      	orrs	r3, r2
 8001720:	b25b      	sxtb	r3, r3
 8001722:	b2da      	uxtb	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	701a      	strb	r2, [r3, #0]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	b2da      	uxtb	r2, r3
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3302      	adds	r3, #2
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	109b      	asrs	r3, r3, #2
 8001754:	b2db      	uxtb	r3, r3
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	b2da      	uxtb	r2, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3302      	adds	r3, #2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	b2da      	uxtb	r2, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3303      	adds	r3, #3
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	109b      	asrs	r3, r3, #2
 8001776:	b2db      	uxtb	r3, r3
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	b2da      	uxtb	r2, r3
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3303      	adds	r3, #3
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	095b      	lsrs	r3, r3, #5
 800178a:	b2da      	uxtb	r2, r3
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	711a      	strb	r2, [r3, #4]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80017a8:	23f4      	movs	r3, #244	; 0xf4
 80017aa:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80017ac:	7bb8      	ldrb	r0, [r7, #14]
 80017ae:	f107 010d 	add.w	r1, r7, #13
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f7ff fc0e 	bl	8000fd6 <bme280_get_regs>
 80017ba:	4603      	mov	r3, r0
 80017bc:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 80017be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d117      	bne.n	80017f6 <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80017c6:	7b7b      	ldrb	r3, [r7, #13]
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	f023 0303 	bic.w	r3, r3, #3
 80017ce:	b25a      	sxtb	r2, r3
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	b25b      	sxtb	r3, r3
 80017da:	4313      	orrs	r3, r2
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80017e2:	f107 010d 	add.w	r1, r7, #13
 80017e6:	f107 000e 	add.w	r0, r7, #14
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f7ff fc22 	bl	8001036 <bme280_set_regs>
 80017f2:	4603      	mov	r3, r0
 80017f4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80017f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 800180a:	f107 0110 	add.w	r1, r7, #16
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2204      	movs	r2, #4
 8001812:	20f2      	movs	r0, #242	; 0xf2
 8001814:	f7ff fbdf 	bl	8000fd6 <bme280_get_regs>
 8001818:	4603      	mov	r3, r0
 800181a:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 800181c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d118      	bne.n	8001856 <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 8001824:	f107 0208 	add.w	r2, r7, #8
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	4611      	mov	r1, r2
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff80 	bl	8001734 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff fd21 	bl	800127c <bme280_soft_reset>
 800183a:	4603      	mov	r3, r0
 800183c:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 800183e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d107      	bne.n	8001856 <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	f000 f808 	bl	8001862 <reload_device_settings>
 8001852:	4603      	mov	r3, r0
 8001854:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001856:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b084      	sub	sp, #16
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	201f      	movs	r0, #31
 8001872:	f7ff fe18 	bl	80014a6 <set_osr_settings>
 8001876:	4603      	mov	r3, r0
 8001878:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d106      	bne.n	8001890 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	201f      	movs	r0, #31
 8001888:	f7ff feaa 	bl	80015e0 <set_filter_standby_settings>
 800188c:	4603      	mov	r3, r0
 800188e:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8001890:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 800189c:	b5b0      	push	{r4, r5, r7, lr}
 800189e:	b08c      	sub	sp, #48	; 0x30
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double temperature;
	double temperature_min = -40;
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	4b5f      	ldr	r3, [pc, #380]	; (8001a28 <compensate_temperature+0x18c>)
 80018ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temperature_max = 85;
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	4b5d      	ldr	r3, [pc, #372]	; (8001a2c <compensate_temperature+0x190>)
 80018b6:	e9c7 2306 	strd	r2, r3, [r7, #24]

	var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fe20 	bl	8000504 <__aeabi_ui2d>
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	4b59      	ldr	r3, [pc, #356]	; (8001a30 <compensate_temperature+0x194>)
 80018ca:	f7fe ffbf 	bl	800084c <__aeabi_ddiv>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4614      	mov	r4, r2
 80018d4:	461d      	mov	r5, r3
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fe12 	bl	8000504 <__aeabi_ui2d>
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	4b53      	ldr	r3, [pc, #332]	; (8001a34 <compensate_temperature+0x198>)
 80018e6:	f7fe ffb1 	bl	800084c <__aeabi_ddiv>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4620      	mov	r0, r4
 80018f0:	4629      	mov	r1, r5
 80018f2:	f7fe fcc9 	bl	8000288 <__aeabi_dsub>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var1 = var1 * ((double)calib_data->dig_T2);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fe0d 	bl	8000524 <__aeabi_i2d>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001912:	f7fe fe71 	bl	80005f8 <__aeabi_dmul>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fdee 	bl	8000504 <__aeabi_ui2d>
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001930:	f7fe ff8c 	bl	800084c <__aeabi_ddiv>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4614      	mov	r4, r2
 800193a:	461d      	mov	r5, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fddf 	bl	8000504 <__aeabi_ui2d>
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <compensate_temperature+0x19c>)
 800194c:	f7fe ff7e 	bl	800084c <__aeabi_ddiv>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4620      	mov	r0, r4
 8001956:	4629      	mov	r1, r5
 8001958:	f7fe fc96 	bl	8000288 <__aeabi_dsub>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 8001964:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001968:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800196c:	f7fe fe44 	bl	80005f8 <__aeabi_dmul>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4614      	mov	r4, r2
 8001976:	461d      	mov	r5, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fdd0 	bl	8000524 <__aeabi_i2d>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4620      	mov	r0, r4
 800198a:	4629      	mov	r1, r5
 800198c:	f7fe fe34 	bl	80005f8 <__aeabi_dmul>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	e9c7 2302 	strd	r2, r3, [r7, #8]
	calib_data->t_fine = (int32_t)(var1 + var2);
 8001998:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800199c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019a0:	f7fe fc74 	bl	800028c <__adddf3>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f7ff f8d4 	bl	8000b58 <__aeabi_d2iz>
 80019b0:	4602      	mov	r2, r0
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (var1 + var2) / 5120.0;
 80019b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019be:	f7fe fc65 	bl	800028c <__adddf3>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <compensate_temperature+0x1a0>)
 80019d0:	f7fe ff3c 	bl	800084c <__aeabi_ddiv>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (temperature < temperature_min)
 80019dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019e4:	f7ff f87a 	bl	8000adc <__aeabi_dcmplt>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d004      	beq.n	80019f8 <compensate_temperature+0x15c>
		temperature = temperature_min;
 80019ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80019f6:	e00c      	b.n	8001a12 <compensate_temperature+0x176>
	else if (temperature > temperature_max)
 80019f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a00:	f7ff f88a 	bl	8000b18 <__aeabi_dcmpgt>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <compensate_temperature+0x176>
		temperature = temperature_max;
 8001a0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a0e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	return temperature;
 8001a12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a16:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a1a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a1e:	eef0 0a67 	vmov.f32	s1, s15
 8001a22:	3730      	adds	r7, #48	; 0x30
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bdb0      	pop	{r4, r5, r7, pc}
 8001a28:	c0440000 	.word	0xc0440000
 8001a2c:	40554000 	.word	0x40554000
 8001a30:	40d00000 	.word	0x40d00000
 8001a34:	40900000 	.word	0x40900000
 8001a38:	40c00000 	.word	0x40c00000
 8001a3c:	40b40000 	.word	0x40b40000

08001a40 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b08e      	sub	sp, #56	; 0x38
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double var3;
	double pressure;
	double pressure_min = 30000.0;
 8001a4a:	a3d9      	add	r3, pc, #868	; (adr r3, 8001db0 <compensate_pressure+0x370>)
 8001a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a50:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double pressure_max = 110000.0;
 8001a54:	a3d8      	add	r3, pc, #864	; (adr r3, 8001db8 <compensate_pressure+0x378>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	e9c7 2308 	strd	r2, r3, [r7, #32]

	var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fd5e 	bl	8000524 <__aeabi_i2d>
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a70:	f7fe feec 	bl	800084c <__aeabi_ddiv>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	4bc1      	ldr	r3, [pc, #772]	; (8001d88 <compensate_pressure+0x348>)
 8001a82:	f7fe fc01 	bl	8000288 <__aeabi_dsub>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 8001a8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a96:	f7fe fdaf 	bl	80005f8 <__aeabi_dmul>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4614      	mov	r4, r2
 8001aa0:	461d      	mov	r5, r3
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fd3b 	bl	8000524 <__aeabi_i2d>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	f7fe fd9f 	bl	80005f8 <__aeabi_dmul>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	4bb1      	ldr	r3, [pc, #708]	; (8001d8c <compensate_pressure+0x34c>)
 8001ac8:	f7fe fec0 	bl	800084c <__aeabi_ddiv>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fd22 	bl	8000524 <__aeabi_i2d>
 8001ae0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ae4:	f7fe fd88 	bl	80005f8 <__aeabi_dmul>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4610      	mov	r0, r2
 8001aee:	4619      	mov	r1, r3
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	f7fe fbca 	bl	800028c <__adddf3>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b00:	f7fe fbc4 	bl	800028c <__adddf3>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	4b9f      	ldr	r3, [pc, #636]	; (8001d90 <compensate_pressure+0x350>)
 8001b12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b16:	f7fe fe99 	bl	800084c <__aeabi_ddiv>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4614      	mov	r4, r2
 8001b20:	461d      	mov	r5, r3
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fcfb 	bl	8000524 <__aeabi_i2d>
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	4b98      	ldr	r3, [pc, #608]	; (8001d94 <compensate_pressure+0x354>)
 8001b34:	f7fe fd60 	bl	80005f8 <__aeabi_dmul>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	4629      	mov	r1, r5
 8001b40:	f7fe fba4 	bl	800028c <__adddf3>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fce6 	bl	8000524 <__aeabi_i2d>
 8001b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b5c:	f7fe fd4c 	bl	80005f8 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b6c:	f7fe fd44 	bl	80005f8 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	4b86      	ldr	r3, [pc, #536]	; (8001d98 <compensate_pressure+0x358>)
 8001b7e:	f7fe fe65 	bl	800084c <__aeabi_ddiv>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fcc7 	bl	8000524 <__aeabi_i2d>
 8001b96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b9a:	f7fe fd2d 	bl	80005f8 <__aeabi_dmul>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001baa:	f7fe fb6f 	bl	800028c <__adddf3>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	4b77      	ldr	r3, [pc, #476]	; (8001d98 <compensate_pressure+0x358>)
 8001bbc:	f7fe fe46 	bl	800084c <__aeabi_ddiv>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	4b6f      	ldr	r3, [pc, #444]	; (8001d8c <compensate_pressure+0x34c>)
 8001bce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bd2:	f7fe fe3b 	bl	800084c <__aeabi_ddiv>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	4b6e      	ldr	r3, [pc, #440]	; (8001d9c <compensate_pressure+0x35c>)
 8001be4:	f7fe fb52 	bl	800028c <__adddf3>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4614      	mov	r4, r2
 8001bee:	461d      	mov	r5, r3
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	88db      	ldrh	r3, [r3, #6]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fc85 	bl	8000504 <__aeabi_ui2d>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4620      	mov	r0, r4
 8001c00:	4629      	mov	r1, r5
 8001c02:	f7fe fcf9 	bl	80005f8 <__aeabi_dmul>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	/* avoid exception caused by division by zero */
	if (var1) {
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c1a:	f7fe ff55 	bl	8000ac8 <__aeabi_dcmpeq>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f040 80cd 	bne.w	8001dc0 <compensate_pressure+0x380>
		pressure = 1048576.0 - (double) uncomp_data->pressure;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fc6a 	bl	8000504 <__aeabi_ui2d>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	f04f 0000 	mov.w	r0, #0
 8001c38:	4959      	ldr	r1, [pc, #356]	; (8001da0 <compensate_pressure+0x360>)
 8001c3a:	f7fe fb25 	bl	8000288 <__aeabi_dsub>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	4b56      	ldr	r3, [pc, #344]	; (8001da4 <compensate_pressure+0x364>)
 8001c4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c50:	f7fe fdfc 	bl	800084c <__aeabi_ddiv>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c5c:	f7fe fb14 	bl	8000288 <__aeabi_dsub>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	a345      	add	r3, pc, #276	; (adr r3, 8001d80 <compensate_pressure+0x340>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	f7fe fcc3 	bl	80005f8 <__aeabi_dmul>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c7e:	f7fe fde5 	bl	800084c <__aeabi_ddiv>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fc47 	bl	8000524 <__aeabi_i2d>
 8001c96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c9a:	f7fe fcad 	bl	80005f8 <__aeabi_dmul>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001caa:	f7fe fca5 	bl	80005f8 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	4b3b      	ldr	r3, [pc, #236]	; (8001da8 <compensate_pressure+0x368>)
 8001cbc:	f7fe fdc6 	bl	800084c <__aeabi_ddiv>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fc28 	bl	8000524 <__aeabi_i2d>
 8001cd4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cd8:	f7fe fc8e 	bl	80005f8 <__aeabi_dmul>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <compensate_pressure+0x34c>)
 8001cea:	f7fe fdaf 	bl	800084c <__aeabi_ddiv>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0;
 8001cf6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cfa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cfe:	f7fe fac5 	bl	800028c <__adddf3>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4614      	mov	r4, r2
 8001d08:	461d      	mov	r5, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fc07 	bl	8000524 <__aeabi_i2d>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	4629      	mov	r1, r5
 8001d1e:	f7fe fab5 	bl	800028c <__adddf3>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4610      	mov	r0, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <compensate_pressure+0x36c>)
 8001d30:	f7fe fd8c 	bl	800084c <__aeabi_ddiv>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d3c:	f7fe faa6 	bl	800028c <__adddf3>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		if (pressure < pressure_min)
 8001d48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d4c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d50:	f7fe fec4 	bl	8000adc <__aeabi_dcmplt>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d004      	beq.n	8001d64 <compensate_pressure+0x324>
			pressure = pressure_min;
 8001d5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d5e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001d62:	e031      	b.n	8001dc8 <compensate_pressure+0x388>
		else if (pressure > pressure_max)
 8001d64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d68:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d6c:	f7fe fed4 	bl	8000b18 <__aeabi_dcmpgt>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d028      	beq.n	8001dc8 <compensate_pressure+0x388>
			pressure = pressure_max;
 8001d76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d7a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001d7e:	e023      	b.n	8001dc8 <compensate_pressure+0x388>
 8001d80:	00000000 	.word	0x00000000
 8001d84:	40b86a00 	.word	0x40b86a00
 8001d88:	40ef4000 	.word	0x40ef4000
 8001d8c:	40e00000 	.word	0x40e00000
 8001d90:	40100000 	.word	0x40100000
 8001d94:	40f00000 	.word	0x40f00000
 8001d98:	41200000 	.word	0x41200000
 8001d9c:	3ff00000 	.word	0x3ff00000
 8001da0:	41300000 	.word	0x41300000
 8001da4:	40b00000 	.word	0x40b00000
 8001da8:	41e00000 	.word	0x41e00000
 8001dac:	40300000 	.word	0x40300000
 8001db0:	00000000 	.word	0x00000000
 8001db4:	40dd4c00 	.word	0x40dd4c00
 8001db8:	00000000 	.word	0x00000000
 8001dbc:	40fadb00 	.word	0x40fadb00
	} else { /* Invalid case */
		pressure = pressure_min;
 8001dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dc4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	return pressure;
 8001dc8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001dcc:	ec43 2b17 	vmov	d7, r2, r3
}
 8001dd0:	eeb0 0a47 	vmov.f32	s0, s14
 8001dd4:	eef0 0a67 	vmov.f32	s1, s15
 8001dd8:	3738      	adds	r7, #56	; 0x38
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dde:	bf00      	nop

08001de0 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001de0:	b5b0      	push	{r4, r5, r7, lr}
 8001de2:	b094      	sub	sp, #80	; 0x50
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
	double humidity;
	double humidity_min = 0.0;
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double humidity_max = 100.0;
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	4b81      	ldr	r3, [pc, #516]	; (8002000 <compensate_humidity+0x220>)
 8001dfc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double var3;
	double var4;
	double var5;
	double var6;

	var1 = ((double)calib_data->t_fine) - 76800.0;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fb8d 	bl	8000524 <__aeabi_i2d>
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	4b7d      	ldr	r3, [pc, #500]	; (8002004 <compensate_humidity+0x224>)
 8001e10:	f7fe fa3a 	bl	8000288 <__aeabi_dsub>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fb7e 	bl	8000524 <__aeabi_i2d>
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	4b76      	ldr	r3, [pc, #472]	; (8002008 <compensate_humidity+0x228>)
 8001e2e:	f7fe fbe3 	bl	80005f8 <__aeabi_dmul>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4614      	mov	r4, r2
 8001e38:	461d      	mov	r5, r3
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fb6f 	bl	8000524 <__aeabi_i2d>
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	4b70      	ldr	r3, [pc, #448]	; (800200c <compensate_humidity+0x22c>)
 8001e4c:	f7fe fcfe 	bl	800084c <__aeabi_ddiv>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4610      	mov	r0, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e5c:	f7fe fbcc 	bl	80005f8 <__aeabi_dmul>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4620      	mov	r0, r4
 8001e66:	4629      	mov	r1, r5
 8001e68:	f7fe fa10 	bl	800028c <__adddf3>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = uncomp_data->humidity - var2;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fb43 	bl	8000504 <__aeabi_ui2d>
 8001e7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e82:	f7fe fa01 	bl	8000288 <__aeabi_dsub>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var4 = ((double)calib_data->dig_H2) / 65536.0;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fb45 	bl	8000524 <__aeabi_i2d>
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	4b5c      	ldr	r3, [pc, #368]	; (8002010 <compensate_humidity+0x230>)
 8001ea0:	f7fe fcd4 	bl	800084c <__aeabi_ddiv>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	7f1b      	ldrb	r3, [r3, #28]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fb27 	bl	8000504 <__aeabi_ui2d>
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	4b56      	ldr	r3, [pc, #344]	; (8002014 <compensate_humidity+0x234>)
 8001ebc:	f7fe fcc6 	bl	800084c <__aeabi_ddiv>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ecc:	f7fe fb94 	bl	80005f8 <__aeabi_dmul>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	4b4e      	ldr	r3, [pc, #312]	; (8002018 <compensate_humidity+0x238>)
 8001ede:	f7fe f9d5 	bl	800028c <__adddf3>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fb17 	bl	8000524 <__aeabi_i2d>
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	4b46      	ldr	r3, [pc, #280]	; (8002014 <compensate_humidity+0x234>)
 8001efc:	f7fe fca6 	bl	800084c <__aeabi_ddiv>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4610      	mov	r0, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f0c:	f7fe fb74 	bl	80005f8 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f1c:	f7fe fb6c 	bl	80005f8 <__aeabi_dmul>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	4b3a      	ldr	r3, [pc, #232]	; (8002018 <compensate_humidity+0x238>)
 8001f2e:	f7fe f9ad 	bl	800028c <__adddf3>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var6 = var3 * var4 * (var5 * var6);
 8001f3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f3e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f42:	f7fe fb59 	bl	80005f8 <__aeabi_dmul>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4614      	mov	r4, r2
 8001f4c:	461d      	mov	r5, r3
 8001f4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f56:	f7fe fb4f 	bl	80005f8 <__aeabi_dmul>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4620      	mov	r0, r4
 8001f60:	4629      	mov	r1, r5
 8001f62:	f7fe fb49 	bl	80005f8 <__aeabi_dmul>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	7e1b      	ldrb	r3, [r3, #24]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fac6 	bl	8000504 <__aeabi_ui2d>
 8001f78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f7c:	f7fe fb3c 	bl	80005f8 <__aeabi_dmul>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	4b23      	ldr	r3, [pc, #140]	; (800201c <compensate_humidity+0x23c>)
 8001f8e:	f7fe fc5d 	bl	800084c <__aeabi_ddiv>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	f04f 0000 	mov.w	r0, #0
 8001f9a:	491f      	ldr	r1, [pc, #124]	; (8002018 <compensate_humidity+0x238>)
 8001f9c:	f7fe f974 	bl	8000288 <__aeabi_dsub>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fa8:	f7fe fb26 	bl	80005f8 <__aeabi_dmul>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if (humidity > humidity_max)
 8001fb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fb8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001fbc:	f7fe fdac 	bl	8000b18 <__aeabi_dcmpgt>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d004      	beq.n	8001fd0 <compensate_humidity+0x1f0>
		humidity = humidity_max;
 8001fc6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fca:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001fce:	e00c      	b.n	8001fea <compensate_humidity+0x20a>
	else if (humidity < humidity_min)
 8001fd0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fd4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001fd8:	f7fe fd80 	bl	8000adc <__aeabi_dcmplt>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <compensate_humidity+0x20a>
		humidity = humidity_min;
 8001fe2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fe6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	return humidity;
 8001fea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001fee:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ff6:	eef0 0a67 	vmov.f32	s1, s15
 8001ffa:	3750      	adds	r7, #80	; 0x50
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8002000:	40590000 	.word	0x40590000
 8002004:	40f2c000 	.word	0x40f2c000
 8002008:	40500000 	.word	0x40500000
 800200c:	40d00000 	.word	0x40d00000
 8002010:	40f00000 	.word	0x40f00000
 8002014:	41900000 	.word	0x41900000
 8002018:	3ff00000 	.word	0x3ff00000
 800201c:	41200000 	.word	0x41200000

08002020 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002028:	2388      	movs	r3, #136	; 0x88
 800202a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	f107 0310 	add.w	r3, r7, #16
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
 8002040:	611a      	str	r2, [r3, #16]
 8002042:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8002044:	f107 010c 	add.w	r1, r7, #12
 8002048:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	221a      	movs	r2, #26
 8002050:	f7fe ffc1 	bl	8000fd6 <bme280_get_regs>
 8002054:	4603      	mov	r3, r0
 8002056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 800205a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800205e:	2b00      	cmp	r3, #0
 8002060:	d11d      	bne.n	800209e <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 8002062:	f107 030c 	add.w	r3, r7, #12
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4618      	mov	r0, r3
 800206a:	f000 f84a 	bl	8002102 <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 800206e:	23e1      	movs	r3, #225	; 0xe1
 8002070:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8002074:	f107 010c 	add.w	r1, r7, #12
 8002078:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2207      	movs	r2, #7
 8002080:	f7fe ffa9 	bl	8000fd6 <bme280_get_regs>
 8002084:	4603      	mov	r3, r0
 8002086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 800208a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800208e:	2b00      	cmp	r3, #0
 8002090:	d105      	bne.n	800209e <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 8002092:	f107 030c 	add.w	r3, r7, #12
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4618      	mov	r0, r3
 800209a:	f000 f8e1 	bl	8002260 <parse_humidity_calib_data>
		}
	}

	return rslt;
 800209e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3728      	adds	r7, #40	; 0x28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b087      	sub	sp, #28
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 80020b8:	2301      	movs	r3, #1
 80020ba:	75fb      	strb	r3, [r7, #23]
 80020bc:	e016      	b.n	80020ec <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 80020be:	7dfb      	ldrb	r3, [r7, #23]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	441a      	add	r2, r3
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	3b01      	subs	r3, #1
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	440b      	add	r3, r1
 80020ce:	7812      	ldrb	r2, [r2, #0]
 80020d0:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 80020d2:	7dfb      	ldrb	r3, [r7, #23]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	441a      	add	r2, r3
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4619      	mov	r1, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	440b      	add	r3, r1
 80020e2:	7812      	ldrb	r2, [r2, #0]
 80020e4:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
 80020e8:	3301      	adds	r3, #1
 80020ea:	75fb      	strb	r3, [r7, #23]
 80020ec:	7dfa      	ldrb	r2, [r7, #23]
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d3e4      	bcc.n	80020be <interleave_reg_addr+0x14>
	}
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002102:	b480      	push	{r7}
 8002104:	b085      	sub	sp, #20
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	3310      	adds	r3, #16
 8002110:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3301      	adds	r3, #1
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	b21a      	sxth	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	b21b      	sxth	r3, r3
 8002122:	4313      	orrs	r3, r2
 8002124:	b21b      	sxth	r3, r3
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3303      	adds	r3, #3
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	b21a      	sxth	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3302      	adds	r3, #2
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	b21b      	sxth	r3, r3
 800213e:	4313      	orrs	r3, r2
 8002140:	b21a      	sxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3305      	adds	r3, #5
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	b21a      	sxth	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3304      	adds	r3, #4
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b21b      	sxth	r3, r3
 8002158:	4313      	orrs	r3, r2
 800215a:	b21a      	sxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3307      	adds	r3, #7
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	b21a      	sxth	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3306      	adds	r3, #6
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	b21b      	sxth	r3, r3
 8002172:	4313      	orrs	r3, r2
 8002174:	b21b      	sxth	r3, r3
 8002176:	b29a      	uxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3309      	adds	r3, #9
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	021b      	lsls	r3, r3, #8
 8002184:	b21a      	sxth	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3308      	adds	r3, #8
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b21b      	sxth	r3, r3
 800218e:	4313      	orrs	r3, r2
 8002190:	b21a      	sxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	330b      	adds	r3, #11
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	b21a      	sxth	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	330a      	adds	r3, #10
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	4313      	orrs	r3, r2
 80021aa:	b21a      	sxth	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	330d      	adds	r3, #13
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	021b      	lsls	r3, r3, #8
 80021b8:	b21a      	sxth	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	330c      	adds	r3, #12
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	4313      	orrs	r3, r2
 80021c4:	b21a      	sxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	330f      	adds	r3, #15
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	021b      	lsls	r3, r3, #8
 80021d2:	b21a      	sxth	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	330e      	adds	r3, #14
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	b21b      	sxth	r3, r3
 80021dc:	4313      	orrs	r3, r2
 80021de:	b21a      	sxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3311      	adds	r3, #17
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	b21a      	sxth	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3310      	adds	r3, #16
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	b21b      	sxth	r3, r3
 80021f6:	4313      	orrs	r3, r2
 80021f8:	b21a      	sxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3313      	adds	r3, #19
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	b21a      	sxth	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3312      	adds	r3, #18
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	b21b      	sxth	r3, r3
 8002210:	4313      	orrs	r3, r2
 8002212:	b21a      	sxth	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3315      	adds	r3, #21
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	b21a      	sxth	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3314      	adds	r3, #20
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b21b      	sxth	r3, r3
 800222a:	4313      	orrs	r3, r2
 800222c:	b21a      	sxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3317      	adds	r3, #23
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	b21a      	sxth	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3316      	adds	r3, #22
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b21b      	sxth	r3, r3
 8002244:	4313      	orrs	r3, r2
 8002246:	b21a      	sxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7e5a      	ldrb	r2, [r3, #25]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	761a      	strb	r2, [r3, #24]

}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	3310      	adds	r3, #16
 800226e:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3301      	adds	r3, #1
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	b21a      	sxth	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	b21b      	sxth	r3, r3
 8002280:	4313      	orrs	r3, r2
 8002282:	b21a      	sxth	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	789a      	ldrb	r2, [r3, #2]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3303      	adds	r3, #3
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	b25b      	sxtb	r3, r3
 8002298:	b29b      	uxth	r3, r3
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	b29b      	uxth	r3, r3
 800229e:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3304      	adds	r3, #4
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	f003 030f 	and.w	r3, r3, #15
 80022ac:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80022ae:	8a7a      	ldrh	r2, [r7, #18]
 80022b0:	8a3b      	ldrh	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	b21a      	sxth	r2, r3
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3305      	adds	r3, #5
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	b25b      	sxtb	r3, r3
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3304      	adds	r3, #4
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 80022d6:	89fa      	ldrh	r2, [r7, #14]
 80022d8:	89bb      	ldrh	r3, [r7, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	b21a      	sxth	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3306      	adds	r3, #6
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	b25a      	sxtb	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80022f0:	bf00      	nop
 80022f2:	371c      	adds	r7, #28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	460a      	mov	r2, r1
 8002306:	71fb      	strb	r3, [r7, #7]
 8002308:	4613      	mov	r3, r2
 800230a:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 800230c:	2300      	movs	r3, #0
 800230e:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8002310:	79fa      	ldrb	r2, [r7, #7]
 8002312:	79bb      	ldrb	r3, [r7, #6]
 8002314:	4013      	ands	r3, r2
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 800231c:	2301      	movs	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
 8002320:	e001      	b.n	8002326 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 8002322:	2300      	movs	r3, #0
 8002324:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8002326:	7bfb      	ldrb	r3, [r7, #15]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00b      	beq.n	800235a <null_ptr_check+0x26>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d007      	beq.n	800235a <null_ptr_check+0x26>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <null_ptr_check+0x26>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d102      	bne.n	8002360 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 800235a:	23ff      	movs	r3, #255	; 0xff
 800235c:	73fb      	strb	r3, [r7, #15]
 800235e:	e001      	b.n	8002364 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002364:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]

	// Передати в чергу !!!!!!!!!!  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	//HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 0);   // was 1
 8002390:	2200      	movs	r2, #0
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	480a      	ldr	r0, [pc, #40]	; (80023c0 <Mount_SD+0x38>)
 8002396:	f00f f82b 	bl	80113f0 <f_mount>
 800239a:	4603      	mov	r3, r0
 800239c:	461a      	mov	r2, r3
 800239e:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <Mount_SD+0x3c>)
 80023a0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <Mount_SD+0x3c>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <Mount_SD+0x2a>
	{
		Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 80023aa:	4807      	ldr	r0, [pc, #28]	; (80023c8 <Mount_SD+0x40>)
 80023ac:	f7ff ffe2 	bl	8002374 <Send_Uart>
	}
	else
	{
		Send_Uart("SD CARD mounted successfully...\n");
	}
}
 80023b0:	e002      	b.n	80023b8 <Mount_SD+0x30>
		Send_Uart("SD CARD mounted successfully...\n");
 80023b2:	4806      	ldr	r0, [pc, #24]	; (80023cc <Mount_SD+0x44>)
 80023b4:	f7ff ffde 	bl	8002374 <Send_Uart>
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20007f60 	.word	0x20007f60
 80023c4:	20008fac 	.word	0x20008fac
 80023c8:	08019d78 	.word	0x08019d78
 80023cc:	08019d9c 	.word	0x08019d9c

080023d0 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 80023d8:	2201      	movs	r2, #1
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	2000      	movs	r0, #0
 80023de:	f00f f807 	bl	80113f0 <f_mount>
 80023e2:	4603      	mov	r3, r0
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <Unmount_SD+0x38>)
 80023e8:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <Unmount_SD+0x38>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d103      	bne.n	80023fa <Unmount_SD+0x2a>
 80023f2:	4806      	ldr	r0, [pc, #24]	; (800240c <Unmount_SD+0x3c>)
 80023f4:	f7ff ffbe 	bl	8002374 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 80023f8:	e002      	b.n	8002400 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 80023fa:	4805      	ldr	r0, [pc, #20]	; (8002410 <Unmount_SD+0x40>)
 80023fc:	f7ff ffba 	bl	8002374 <Send_Uart>
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20008fac 	.word	0x20008fac
 800240c:	08019dc0 	.word	0x08019dc0
 8002410:	08019de8 	.word	0x08019de8

08002414 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 800241c:	4940      	ldr	r1, [pc, #256]	; (8002520 <Create_File+0x10c>)
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f00f fd28 	bl	8011e74 <f_stat>
 8002424:	4603      	mov	r3, r0
 8002426:	461a      	mov	r2, r3
 8002428:	4b3e      	ldr	r3, [pc, #248]	; (8002524 <Create_File+0x110>)
 800242a:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 800242c:	4b3d      	ldr	r3, [pc, #244]	; (8002524 <Create_File+0x110>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d111      	bne.n	8002458 <Create_File+0x44>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8002434:	2064      	movs	r0, #100	; 0x64
 8002436:	f013 fdc7 	bl	8015fc8 <pvPortMalloc>
 800243a:	60f8      	str	r0, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	493a      	ldr	r1, [pc, #232]	; (8002528 <Create_File+0x114>)
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f015 fbd1 	bl	8017be8 <siprintf>
		Send_Uart(buf);
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f7ff ff94 	bl	8002374 <Send_Uart>
		vPortFree(buf);
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f013 fe87 	bl	8016160 <vPortFree>
	    return fresult;
 8002452:	4b34      	ldr	r3, [pc, #208]	; (8002524 <Create_File+0x110>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	e05f      	b.n	8002518 <Create_File+0x104>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8002458:	220b      	movs	r2, #11
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4833      	ldr	r0, [pc, #204]	; (800252c <Create_File+0x118>)
 800245e:	f00f f82b 	bl	80114b8 <f_open>
 8002462:	4603      	mov	r3, r0
 8002464:	461a      	mov	r2, r3
 8002466:	4b2f      	ldr	r3, [pc, #188]	; (8002524 <Create_File+0x110>)
 8002468:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800246a:	4b2e      	ldr	r3, [pc, #184]	; (8002524 <Create_File+0x110>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d014      	beq.n	800249c <Create_File+0x88>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8002472:	2064      	movs	r0, #100	; 0x64
 8002474:	f013 fda8 	bl	8015fc8 <pvPortMalloc>
 8002478:	6138      	str	r0, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 800247a:	4b2a      	ldr	r3, [pc, #168]	; (8002524 <Create_File+0x110>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	492b      	ldr	r1, [pc, #172]	; (8002530 <Create_File+0x11c>)
 8002484:	6938      	ldr	r0, [r7, #16]
 8002486:	f015 fbaf 	bl	8017be8 <siprintf>
			Send_Uart(buf);
 800248a:	6938      	ldr	r0, [r7, #16]
 800248c:	f7ff ff72 	bl	8002374 <Send_Uart>
			vPortFree(buf);
 8002490:	6938      	ldr	r0, [r7, #16]
 8002492:	f013 fe65 	bl	8016160 <vPortFree>
		    return fresult;
 8002496:	4b23      	ldr	r3, [pc, #140]	; (8002524 <Create_File+0x110>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	e03d      	b.n	8002518 <Create_File+0x104>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 800249c:	2064      	movs	r0, #100	; 0x64
 800249e:	f013 fd93 	bl	8015fc8 <pvPortMalloc>
 80024a2:	61f8      	str	r0, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	4923      	ldr	r1, [pc, #140]	; (8002534 <Create_File+0x120>)
 80024a8:	69f8      	ldr	r0, [r7, #28]
 80024aa:	f015 fb9d 	bl	8017be8 <siprintf>
			Send_Uart(buf);
 80024ae:	69f8      	ldr	r0, [r7, #28]
 80024b0:	f7ff ff60 	bl	8002374 <Send_Uart>
			vPortFree(buf);
 80024b4:	69f8      	ldr	r0, [r7, #28]
 80024b6:	f013 fe53 	bl	8016160 <vPortFree>
		}

		fresult = f_close(&fil);
 80024ba:	481c      	ldr	r0, [pc, #112]	; (800252c <Create_File+0x118>)
 80024bc:	f00f fcab 	bl	8011e16 <f_close>
 80024c0:	4603      	mov	r3, r0
 80024c2:	461a      	mov	r2, r3
 80024c4:	4b17      	ldr	r3, [pc, #92]	; (8002524 <Create_File+0x110>)
 80024c6:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80024c8:	4b16      	ldr	r3, [pc, #88]	; (8002524 <Create_File+0x110>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d012      	beq.n	80024f6 <Create_File+0xe2>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80024d0:	2064      	movs	r0, #100	; 0x64
 80024d2:	f013 fd79 	bl	8015fc8 <pvPortMalloc>
 80024d6:	6178      	str	r0, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 80024d8:	4b12      	ldr	r3, [pc, #72]	; (8002524 <Create_File+0x110>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4915      	ldr	r1, [pc, #84]	; (8002538 <Create_File+0x124>)
 80024e2:	6978      	ldr	r0, [r7, #20]
 80024e4:	f015 fb80 	bl	8017be8 <siprintf>
			Send_Uart(buf);
 80024e8:	6978      	ldr	r0, [r7, #20]
 80024ea:	f7ff ff43 	bl	8002374 <Send_Uart>
			vPortFree(buf);
 80024ee:	6978      	ldr	r0, [r7, #20]
 80024f0:	f013 fe36 	bl	8016160 <vPortFree>
 80024f4:	e00e      	b.n	8002514 <Create_File+0x100>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80024f6:	2064      	movs	r0, #100	; 0x64
 80024f8:	f013 fd66 	bl	8015fc8 <pvPortMalloc>
 80024fc:	61b8      	str	r0, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	490e      	ldr	r1, [pc, #56]	; (800253c <Create_File+0x128>)
 8002502:	69b8      	ldr	r0, [r7, #24]
 8002504:	f015 fb70 	bl	8017be8 <siprintf>
			Send_Uart(buf);
 8002508:	69b8      	ldr	r0, [r7, #24]
 800250a:	f7ff ff33 	bl	8002374 <Send_Uart>
			vPortFree(buf);
 800250e:	69b8      	ldr	r0, [r7, #24]
 8002510:	f013 fe26 	bl	8016160 <vPortFree>
		}
	}
    return fresult;
 8002514:	4b03      	ldr	r3, [pc, #12]	; (8002524 <Create_File+0x110>)
 8002516:	781b      	ldrb	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3720      	adds	r7, #32
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20007e48 	.word	0x20007e48
 8002524:	20008fac 	.word	0x20008fac
 8002528:	08019fb8 	.word	0x08019fb8
 800252c:	20008fb4 	.word	0x20008fb4
 8002530:	08019ff0 	.word	0x08019ff0
 8002534:	0801a018 	.word	0x0801a018
 8002538:	0801a058 	.word	0x0801a058
 800253c:	08019f98 	.word	0x08019f98

08002540 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800254a:	4953      	ldr	r1, [pc, #332]	; (8002698 <Update_File+0x158>)
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f00f fc91 	bl	8011e74 <f_stat>
 8002552:	4603      	mov	r3, r0
 8002554:	461a      	mov	r2, r3
 8002556:	4b51      	ldr	r3, [pc, #324]	; (800269c <Update_File+0x15c>)
 8002558:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800255a:	4b50      	ldr	r3, [pc, #320]	; (800269c <Update_File+0x15c>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d011      	beq.n	8002586 <Update_File+0x46>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8002562:	2064      	movs	r0, #100	; 0x64
 8002564:	f013 fd30 	bl	8015fc8 <pvPortMalloc>
 8002568:	60b8      	str	r0, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	494c      	ldr	r1, [pc, #304]	; (80026a0 <Update_File+0x160>)
 800256e:	68b8      	ldr	r0, [r7, #8]
 8002570:	f015 fb3a 	bl	8017be8 <siprintf>
		Send_Uart (buf);
 8002574:	68b8      	ldr	r0, [r7, #8]
 8002576:	f7ff fefd 	bl	8002374 <Send_Uart>
		vPortFree(buf);
 800257a:	68b8      	ldr	r0, [r7, #8]
 800257c:	f013 fdf0 	bl	8016160 <vPortFree>
	    return fresult;
 8002580:	4b46      	ldr	r3, [pc, #280]	; (800269c <Update_File+0x15c>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	e083      	b.n	800268e <Update_File+0x14e>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8002586:	2232      	movs	r2, #50	; 0x32
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4846      	ldr	r0, [pc, #280]	; (80026a4 <Update_File+0x164>)
 800258c:	f00e ff94 	bl	80114b8 <f_open>
 8002590:	4603      	mov	r3, r0
 8002592:	461a      	mov	r2, r3
 8002594:	4b41      	ldr	r3, [pc, #260]	; (800269c <Update_File+0x15c>)
 8002596:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8002598:	4b40      	ldr	r3, [pc, #256]	; (800269c <Update_File+0x15c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d014      	beq.n	80025ca <Update_File+0x8a>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80025a0:	2064      	movs	r0, #100	; 0x64
 80025a2:	f013 fd11 	bl	8015fc8 <pvPortMalloc>
 80025a6:	60f8      	str	r0, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80025a8:	4b3c      	ldr	r3, [pc, #240]	; (800269c <Update_File+0x15c>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	493d      	ldr	r1, [pc, #244]	; (80026a8 <Update_File+0x168>)
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f015 fb18 	bl	8017be8 <siprintf>
	    	Send_Uart(buf);
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f7ff fedb 	bl	8002374 <Send_Uart>
	        vPortFree(buf);
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f013 fdce 	bl	8016160 <vPortFree>
	        return fresult;
 80025c4:	4b35      	ldr	r3, [pc, #212]	; (800269c <Update_File+0x15c>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	e061      	b.n	800268e <Update_File+0x14e>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 80025ca:	6838      	ldr	r0, [r7, #0]
 80025cc:	f7fd fe00 	bl	80001d0 <strlen>
 80025d0:	4602      	mov	r2, r0
 80025d2:	4b36      	ldr	r3, [pc, #216]	; (80026ac <Update_File+0x16c>)
 80025d4:	6839      	ldr	r1, [r7, #0]
 80025d6:	4833      	ldr	r0, [pc, #204]	; (80026a4 <Update_File+0x164>)
 80025d8:	f00f f9d1 	bl	801197e <f_write>
 80025dc:	4603      	mov	r3, r0
 80025de:	461a      	mov	r2, r3
 80025e0:	4b2e      	ldr	r3, [pc, #184]	; (800269c <Update_File+0x15c>)
 80025e2:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80025e4:	4b2d      	ldr	r3, [pc, #180]	; (800269c <Update_File+0x15c>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d012      	beq.n	8002612 <Update_File+0xd2>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80025ec:	2064      	movs	r0, #100	; 0x64
 80025ee:	f013 fceb 	bl	8015fc8 <pvPortMalloc>
 80025f2:	61b8      	str	r0, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 80025f4:	4b29      	ldr	r3, [pc, #164]	; (800269c <Update_File+0x15c>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	492c      	ldr	r1, [pc, #176]	; (80026b0 <Update_File+0x170>)
 80025fe:	69b8      	ldr	r0, [r7, #24]
 8002600:	f015 faf2 	bl	8017be8 <siprintf>
	    	Send_Uart(buf);
 8002604:	69b8      	ldr	r0, [r7, #24]
 8002606:	f7ff feb5 	bl	8002374 <Send_Uart>
	    	vPortFree(buf);
 800260a:	69b8      	ldr	r0, [r7, #24]
 800260c:	f013 fda8 	bl	8016160 <vPortFree>
 8002610:	e00e      	b.n	8002630 <Update_File+0xf0>
	    }

	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8002612:	2064      	movs	r0, #100	; 0x64
 8002614:	f013 fcd8 	bl	8015fc8 <pvPortMalloc>
 8002618:	61f8      	str	r0, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4925      	ldr	r1, [pc, #148]	; (80026b4 <Update_File+0x174>)
 800261e:	69f8      	ldr	r0, [r7, #28]
 8002620:	f015 fae2 	bl	8017be8 <siprintf>
	    	Send_Uart(buf);
 8002624:	69f8      	ldr	r0, [r7, #28]
 8002626:	f7ff fea5 	bl	8002374 <Send_Uart>
	    	vPortFree(buf);
 800262a:	69f8      	ldr	r0, [r7, #28]
 800262c:	f013 fd98 	bl	8016160 <vPortFree>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8002630:	481c      	ldr	r0, [pc, #112]	; (80026a4 <Update_File+0x164>)
 8002632:	f00f fbf0 	bl	8011e16 <f_close>
 8002636:	4603      	mov	r3, r0
 8002638:	461a      	mov	r2, r3
 800263a:	4b18      	ldr	r3, [pc, #96]	; (800269c <Update_File+0x15c>)
 800263c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800263e:	4b17      	ldr	r3, [pc, #92]	; (800269c <Update_File+0x15c>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d012      	beq.n	800266c <Update_File+0x12c>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8002646:	2064      	movs	r0, #100	; 0x64
 8002648:	f013 fcbe 	bl	8015fc8 <pvPortMalloc>
 800264c:	6138      	str	r0, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800264e:	4b13      	ldr	r3, [pc, #76]	; (800269c <Update_File+0x15c>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4918      	ldr	r1, [pc, #96]	; (80026b8 <Update_File+0x178>)
 8002658:	6938      	ldr	r0, [r7, #16]
 800265a:	f015 fac5 	bl	8017be8 <siprintf>
	    	Send_Uart(buf);
 800265e:	6938      	ldr	r0, [r7, #16]
 8002660:	f7ff fe88 	bl	8002374 <Send_Uart>
	    	vPortFree(buf);
 8002664:	6938      	ldr	r0, [r7, #16]
 8002666:	f013 fd7b 	bl	8016160 <vPortFree>
 800266a:	e00e      	b.n	800268a <Update_File+0x14a>
	    }
	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 800266c:	2064      	movs	r0, #100	; 0x64
 800266e:	f013 fcab 	bl	8015fc8 <pvPortMalloc>
 8002672:	6178      	str	r0, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	4911      	ldr	r1, [pc, #68]	; (80026bc <Update_File+0x17c>)
 8002678:	6978      	ldr	r0, [r7, #20]
 800267a:	f015 fab5 	bl	8017be8 <siprintf>
	    	Send_Uart(buf);
 800267e:	6978      	ldr	r0, [r7, #20]
 8002680:	f7ff fe78 	bl	8002374 <Send_Uart>
	    	vPortFree(buf);
 8002684:	6978      	ldr	r0, [r7, #20]
 8002686:	f013 fd6b 	bl	8016160 <vPortFree>
	     }
	}
    return fresult;
 800268a:	4b04      	ldr	r3, [pc, #16]	; (800269c <Update_File+0x15c>)
 800268c:	781b      	ldrb	r3, [r3, #0]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3720      	adds	r7, #32
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20007e48 	.word	0x20007e48
 800269c:	20008fac 	.word	0x20008fac
 80026a0:	08019e40 	.word	0x08019e40
 80026a4:	20008fb4 	.word	0x20008fb4
 80026a8:	08019e60 	.word	0x08019e60
 80026ac:	20008fa4 	.word	0x20008fa4
 80026b0:	0801a07c 	.word	0x0801a07c
 80026b4:	0801a0a4 	.word	0x0801a0a4
 80026b8:	08019f70 	.word	0x08019f70
 80026bc:	08019f98 	.word	0x08019f98

080026c0 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f00f fc20 	bl	8011f0e <f_mkdir>
 80026ce:	4603      	mov	r3, r0
 80026d0:	461a      	mov	r2, r3
 80026d2:	4b17      	ldr	r3, [pc, #92]	; (8002730 <Create_Dir+0x70>)
 80026d4:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80026d6:	4b16      	ldr	r3, [pc, #88]	; (8002730 <Create_Dir+0x70>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10f      	bne.n	80026fe <Create_Dir+0x3e>
    {
    	char *buf = pvPortMalloc(100*sizeof(char));
 80026de:	2064      	movs	r0, #100	; 0x64
 80026e0:	f013 fc72 	bl	8015fc8 <pvPortMalloc>
 80026e4:	60b8      	str	r0, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n", name);
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	4912      	ldr	r1, [pc, #72]	; (8002734 <Create_Dir+0x74>)
 80026ea:	68b8      	ldr	r0, [r7, #8]
 80026ec:	f015 fa7c 	bl	8017be8 <siprintf>
    	Send_Uart (buf);
 80026f0:	68b8      	ldr	r0, [r7, #8]
 80026f2:	f7ff fe3f 	bl	8002374 <Send_Uart>
    	vPortFree(buf);
 80026f6:	68b8      	ldr	r0, [r7, #8]
 80026f8:	f013 fd32 	bl	8016160 <vPortFree>
 80026fc:	e011      	b.n	8002722 <Create_Dir+0x62>
    }
    else
    {
    	char *buf = pvPortMalloc(100*sizeof(char));
 80026fe:	2064      	movs	r0, #100	; 0x64
 8002700:	f013 fc62 	bl	8015fc8 <pvPortMalloc>
 8002704:	60f8      	str	r0, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <Create_Dir+0x70>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	490a      	ldr	r1, [pc, #40]	; (8002738 <Create_Dir+0x78>)
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f015 fa69 	bl	8017be8 <siprintf>
    	Send_Uart(buf);
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f7ff fe2c 	bl	8002374 <Send_Uart>
    	vPortFree(buf);
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f013 fd1f 	bl	8016160 <vPortFree>
    }
    return fresult;
 8002722:	4b03      	ldr	r3, [pc, #12]	; (8002730 <Create_Dir+0x70>)
 8002724:	781b      	ldrb	r3, [r3, #0]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20008fac 	.word	0x20008fac
 8002734:	0801a104 	.word	0x0801a104
 8002738:	0801a128 	.word	0x0801a128

0800273c <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002740:	2200      	movs	r2, #0
 8002742:	2140      	movs	r1, #64	; 0x40
 8002744:	4802      	ldr	r0, [pc, #8]	; (8002750 <SELECT+0x14>)
 8002746:	f004 f8b1 	bl	80068ac <HAL_GPIO_WritePin>
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40020800 	.word	0x40020800

08002754 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002758:	2201      	movs	r2, #1
 800275a:	2140      	movs	r1, #64	; 0x40
 800275c:	4802      	ldr	r0, [pc, #8]	; (8002768 <DESELECT+0x14>)
 800275e:	f004 f8a5 	bl	80068ac <HAL_GPIO_WritePin>
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40020800 	.word	0x40020800

0800276c <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002776:	bf00      	nop
 8002778:	4808      	ldr	r0, [pc, #32]	; (800279c <SPI_TxByte+0x30>)
 800277a:	f008 fc9b 	bl	800b0b4 <HAL_SPI_GetState>
 800277e:	4603      	mov	r3, r0
 8002780:	2b01      	cmp	r3, #1
 8002782:	d1f9      	bne.n	8002778 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8002784:	1df9      	adds	r1, r7, #7
 8002786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800278a:	2201      	movs	r2, #1
 800278c:	4803      	ldr	r0, [pc, #12]	; (800279c <SPI_TxByte+0x30>)
 800278e:	f007 ffa9 	bl	800a6e4 <HAL_SPI_Transmit>
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	2001a380 	.word	0x2001a380

080027a0 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80027a6:	23ff      	movs	r3, #255	; 0xff
 80027a8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80027ae:	bf00      	nop
 80027b0:	4809      	ldr	r0, [pc, #36]	; (80027d8 <SPI_RxByte+0x38>)
 80027b2:	f008 fc7f 	bl	800b0b4 <HAL_SPI_GetState>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d1f9      	bne.n	80027b0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80027bc:	1dba      	adds	r2, r7, #6
 80027be:	1df9      	adds	r1, r7, #7
 80027c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	2301      	movs	r3, #1
 80027c8:	4803      	ldr	r0, [pc, #12]	; (80027d8 <SPI_RxByte+0x38>)
 80027ca:	f008 f8c7 	bl	800a95c <HAL_SPI_TransmitReceive>
  
  return data;
 80027ce:	79bb      	ldrb	r3, [r7, #6]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	2001a380 	.word	0x2001a380

080027dc <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80027e4:	f7ff ffdc 	bl	80027a0 <SPI_RxByte>
 80027e8:	4603      	mov	r3, r0
 80027ea:	461a      	mov	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	701a      	strb	r2, [r3, #0]
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 80027fe:	4b0b      	ldr	r3, [pc, #44]	; (800282c <SD_ReadyWait+0x34>)
 8002800:	2232      	movs	r2, #50	; 0x32
 8002802:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8002804:	f7ff ffcc 	bl	80027a0 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8002808:	f7ff ffca 	bl	80027a0 <SPI_RxByte>
 800280c:	4603      	mov	r3, r0
 800280e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	2bff      	cmp	r3, #255	; 0xff
 8002814:	d004      	beq.n	8002820 <SD_ReadyWait+0x28>
 8002816:	4b05      	ldr	r3, [pc, #20]	; (800282c <SD_ReadyWait+0x34>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f3      	bne.n	8002808 <SD_ReadyWait+0x10>
  
  return res;
 8002820:	79fb      	ldrb	r3, [r7, #7]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	2001a378 	.word	0x2001a378

08002830 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8002836:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800283a:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 800283c:	f7ff ff8a 	bl	8002754 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8002840:	2300      	movs	r3, #0
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	e005      	b.n	8002852 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8002846:	20ff      	movs	r0, #255	; 0xff
 8002848:	f7ff ff90 	bl	800276c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	3301      	adds	r3, #1
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	2b09      	cmp	r3, #9
 8002856:	ddf6      	ble.n	8002846 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8002858:	f7ff ff70 	bl	800273c <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 800285c:	2340      	movs	r3, #64	; 0x40
 800285e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8002870:	2395      	movs	r3, #149	; 0x95
 8002872:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	e009      	b.n	800288e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800287a:	1d3a      	adds	r2, r7, #4
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff ff72 	bl	800276c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3301      	adds	r3, #1
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b05      	cmp	r3, #5
 8002892:	ddf2      	ble.n	800287a <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8002894:	e002      	b.n	800289c <SD_PowerOn+0x6c>
  {
    Count--;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	3b01      	subs	r3, #1
 800289a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 800289c:	f7ff ff80 	bl	80027a0 <SPI_RxByte>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d002      	beq.n	80028ac <SD_PowerOn+0x7c>
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f4      	bne.n	8002896 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 80028ac:	f7ff ff52 	bl	8002754 <DESELECT>
  SPI_TxByte(0XFF);
 80028b0:	20ff      	movs	r0, #255	; 0xff
 80028b2:	f7ff ff5b 	bl	800276c <SPI_TxByte>
  
  PowerFlag = 1;
 80028b6:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <SD_PowerOn+0x94>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
}
 80028bc:	bf00      	nop
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	200003b5 	.word	0x200003b5

080028c8 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <SD_PowerOff+0x14>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
}
 80028d2:	bf00      	nop
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	200003b5 	.word	0x200003b5

080028e0 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80028e4:	4b03      	ldr	r3, [pc, #12]	; (80028f4 <SD_CheckPower+0x14>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	200003b5 	.word	0x200003b5

080028f8 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8002902:	4b17      	ldr	r3, [pc, #92]	; (8002960 <SD_RxDataBlock+0x68>)
 8002904:	220a      	movs	r2, #10
 8002906:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8002908:	f7ff ff4a 	bl	80027a0 <SPI_RxByte>
 800290c:	4603      	mov	r3, r0
 800290e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	2bff      	cmp	r3, #255	; 0xff
 8002914:	d104      	bne.n	8002920 <SD_RxDataBlock+0x28>
 8002916:	4b12      	ldr	r3, [pc, #72]	; (8002960 <SD_RxDataBlock+0x68>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1f3      	bne.n	8002908 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	2bfe      	cmp	r3, #254	; 0xfe
 8002924:	d001      	beq.n	800292a <SD_RxDataBlock+0x32>
    return FALSE;
 8002926:	2300      	movs	r3, #0
 8002928:	e016      	b.n	8002958 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff53 	bl	80027dc <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff4d 	bl	80027dc <SPI_RxBytePtr>
  } while(btr -= 2);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	3b02      	subs	r3, #2
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1ed      	bne.n	800292a <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 800294e:	f7ff ff27 	bl	80027a0 <SPI_RxByte>
  SPI_RxByte();
 8002952:	f7ff ff25 	bl	80027a0 <SPI_RxByte>
  
  return TRUE;
 8002956:	2301      	movs	r3, #1
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	2001ad10 	.word	0x2001ad10

08002964 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8002974:	f7ff ff40 	bl	80027f8 <SD_ReadyWait>
 8002978:	4603      	mov	r3, r0
 800297a:	2bff      	cmp	r3, #255	; 0xff
 800297c:	d001      	beq.n	8002982 <SD_TxDataBlock+0x1e>
    return FALSE;
 800297e:	2300      	movs	r3, #0
 8002980:	e040      	b.n	8002a04 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8002982:	78fb      	ldrb	r3, [r7, #3]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fef1 	bl	800276c <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	2bfd      	cmp	r3, #253	; 0xfd
 800298e:	d031      	beq.n	80029f4 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fee5 	bl	800276c <SPI_TxByte>
      SPI_TxByte(*buff++);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fede 	bl	800276c <SPI_TxByte>
    } while (--wc);
 80029b0:	7bbb      	ldrb	r3, [r7, #14]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	73bb      	strb	r3, [r7, #14]
 80029b6:	7bbb      	ldrb	r3, [r7, #14]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1eb      	bne.n	8002994 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 80029bc:	f7ff fef0 	bl	80027a0 <SPI_RxByte>
    SPI_RxByte();
 80029c0:	f7ff feee 	bl	80027a0 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 80029c4:	e00b      	b.n	80029de <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 80029c6:	f7ff feeb 	bl	80027a0 <SPI_RxByte>
 80029ca:	4603      	mov	r3, r0
 80029cc:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	f003 031f 	and.w	r3, r3, #31
 80029d4:	2b05      	cmp	r3, #5
 80029d6:	d006      	beq.n	80029e6 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 80029d8:	7b7b      	ldrb	r3, [r7, #13]
 80029da:	3301      	adds	r3, #1
 80029dc:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 80029de:	7b7b      	ldrb	r3, [r7, #13]
 80029e0:	2b40      	cmp	r3, #64	; 0x40
 80029e2:	d9f0      	bls.n	80029c6 <SD_TxDataBlock+0x62>
 80029e4:	e000      	b.n	80029e8 <SD_TxDataBlock+0x84>
        break;
 80029e6:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80029e8:	bf00      	nop
 80029ea:	f7ff fed9 	bl	80027a0 <SPI_RxByte>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0fa      	beq.n	80029ea <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	f003 031f 	and.w	r3, r3, #31
 80029fa:	2b05      	cmp	r3, #5
 80029fc:	d101      	bne.n	8002a02 <SD_TxDataBlock+0x9e>
    return TRUE;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	6039      	str	r1, [r7, #0]
 8002a16:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8002a18:	f7ff feee 	bl	80027f8 <SD_ReadyWait>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2bff      	cmp	r3, #255	; 0xff
 8002a20:	d001      	beq.n	8002a26 <SD_SendCmd+0x1a>
    return 0xFF;
 8002a22:	23ff      	movs	r3, #255	; 0xff
 8002a24:	e040      	b.n	8002aa8 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fe9f 	bl	800276c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	0e1b      	lsrs	r3, r3, #24
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff fe99 	bl	800276c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	0c1b      	lsrs	r3, r3, #16
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff fe93 	bl	800276c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	0a1b      	lsrs	r3, r3, #8
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fe8d 	bl	800276c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fe88 	bl	800276c <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	2b40      	cmp	r3, #64	; 0x40
 8002a64:	d101      	bne.n	8002a6a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8002a66:	2395      	movs	r3, #149	; 0x95
 8002a68:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	2b48      	cmp	r3, #72	; 0x48
 8002a6e:	d101      	bne.n	8002a74 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8002a70:	2387      	movs	r3, #135	; 0x87
 8002a72:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fe78 	bl	800276c <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	2b4c      	cmp	r3, #76	; 0x4c
 8002a80:	d101      	bne.n	8002a86 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8002a82:	f7ff fe8d 	bl	80027a0 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8002a86:	230a      	movs	r3, #10
 8002a88:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8002a8a:	f7ff fe89 	bl	80027a0 <SPI_RxByte>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8002a92:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	da05      	bge.n	8002aa6 <SD_SendCmd+0x9a>
 8002a9a:	7bbb      	ldrb	r3, [r7, #14]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	73bb      	strb	r3, [r7, #14]
 8002aa0:	7bbb      	ldrb	r3, [r7, #14]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f1      	bne.n	8002a8a <SD_SendCmd+0x7e>
  
  return res;
 8002aa6:	7b7b      	ldrb	r3, [r7, #13]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0d5      	b.n	8002c70 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8002ac4:	4b6c      	ldr	r3, [pc, #432]	; (8002c78 <SD_disk_initialize+0x1c8>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <SD_disk_initialize+0x2a>
    return Stat;        
 8002ad2:	4b69      	ldr	r3, [pc, #420]	; (8002c78 <SD_disk_initialize+0x1c8>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	e0ca      	b.n	8002c70 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8002ada:	f7ff fea9 	bl	8002830 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8002ade:	f7ff fe2d 	bl	800273c <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	2040      	movs	r0, #64	; 0x40
 8002aea:	f7ff ff8f 	bl	8002a0c <SD_SendCmd>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	f040 80a5 	bne.w	8002c40 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8002af6:	4b61      	ldr	r3, [pc, #388]	; (8002c7c <SD_disk_initialize+0x1cc>)
 8002af8:	2264      	movs	r2, #100	; 0x64
 8002afa:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8002afc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002b00:	2048      	movs	r0, #72	; 0x48
 8002b02:	f7ff ff83 	bl	8002a0c <SD_SendCmd>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d158      	bne.n	8002bbe <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	73fb      	strb	r3, [r7, #15]
 8002b10:	e00c      	b.n	8002b2c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8002b12:	7bfc      	ldrb	r4, [r7, #15]
 8002b14:	f7ff fe44 	bl	80027a0 <SPI_RxByte>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f107 0310 	add.w	r3, r7, #16
 8002b20:	4423      	add	r3, r4
 8002b22:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d9ef      	bls.n	8002b12 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8002b32:	7abb      	ldrb	r3, [r7, #10]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	f040 8083 	bne.w	8002c40 <SD_disk_initialize+0x190>
 8002b3a:	7afb      	ldrb	r3, [r7, #11]
 8002b3c:	2baa      	cmp	r3, #170	; 0xaa
 8002b3e:	d17f      	bne.n	8002c40 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8002b40:	2100      	movs	r1, #0
 8002b42:	2077      	movs	r0, #119	; 0x77
 8002b44:	f7ff ff62 	bl	8002a0c <SD_SendCmd>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d807      	bhi.n	8002b5e <SD_disk_initialize+0xae>
 8002b4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002b52:	2069      	movs	r0, #105	; 0x69
 8002b54:	f7ff ff5a 	bl	8002a0c <SD_SendCmd>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d005      	beq.n	8002b6a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8002b5e:	4b47      	ldr	r3, [pc, #284]	; (8002c7c <SD_disk_initialize+0x1cc>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1eb      	bne.n	8002b40 <SD_disk_initialize+0x90>
 8002b68:	e000      	b.n	8002b6c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8002b6a:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8002b6c:	4b43      	ldr	r3, [pc, #268]	; (8002c7c <SD_disk_initialize+0x1cc>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d064      	beq.n	8002c40 <SD_disk_initialize+0x190>
 8002b76:	2100      	movs	r1, #0
 8002b78:	207a      	movs	r0, #122	; 0x7a
 8002b7a:	f7ff ff47 	bl	8002a0c <SD_SendCmd>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d15d      	bne.n	8002c40 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8002b84:	2300      	movs	r3, #0
 8002b86:	73fb      	strb	r3, [r7, #15]
 8002b88:	e00c      	b.n	8002ba4 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8002b8a:	7bfc      	ldrb	r4, [r7, #15]
 8002b8c:	f7ff fe08 	bl	80027a0 <SPI_RxByte>
 8002b90:	4603      	mov	r3, r0
 8002b92:	461a      	mov	r2, r3
 8002b94:	f107 0310 	add.w	r3, r7, #16
 8002b98:	4423      	add	r3, r4
 8002b9a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d9ef      	bls.n	8002b8a <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8002baa:	7a3b      	ldrb	r3, [r7, #8]
 8002bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <SD_disk_initialize+0x108>
 8002bb4:	2306      	movs	r3, #6
 8002bb6:	e000      	b.n	8002bba <SD_disk_initialize+0x10a>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	73bb      	strb	r3, [r7, #14]
 8002bbc:	e040      	b.n	8002c40 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	2077      	movs	r0, #119	; 0x77
 8002bc2:	f7ff ff23 	bl	8002a0c <SD_SendCmd>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d808      	bhi.n	8002bde <SD_disk_initialize+0x12e>
 8002bcc:	2100      	movs	r1, #0
 8002bce:	2069      	movs	r0, #105	; 0x69
 8002bd0:	f7ff ff1c 	bl	8002a0c <SD_SendCmd>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d801      	bhi.n	8002bde <SD_disk_initialize+0x12e>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e000      	b.n	8002be0 <SD_disk_initialize+0x130>
 8002bde:	2301      	movs	r3, #1
 8002be0:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8002be2:	7bbb      	ldrb	r3, [r7, #14]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d10e      	bne.n	8002c06 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8002be8:	2100      	movs	r1, #0
 8002bea:	2077      	movs	r0, #119	; 0x77
 8002bec:	f7ff ff0e 	bl	8002a0c <SD_SendCmd>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d80e      	bhi.n	8002c14 <SD_disk_initialize+0x164>
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	2069      	movs	r0, #105	; 0x69
 8002bfa:	f7ff ff07 	bl	8002a0c <SD_SendCmd>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d107      	bne.n	8002c14 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8002c04:	e00d      	b.n	8002c22 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8002c06:	2100      	movs	r1, #0
 8002c08:	2041      	movs	r0, #65	; 0x41
 8002c0a:	f7ff feff 	bl	8002a0c <SD_SendCmd>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8002c14:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <SD_disk_initialize+0x1cc>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1e1      	bne.n	8002be2 <SD_disk_initialize+0x132>
 8002c1e:	e000      	b.n	8002c22 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8002c20:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8002c22:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <SD_disk_initialize+0x1cc>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d007      	beq.n	8002c3c <SD_disk_initialize+0x18c>
 8002c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c30:	2050      	movs	r0, #80	; 0x50
 8002c32:	f7ff feeb 	bl	8002a0c <SD_SendCmd>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8002c40:	4a0f      	ldr	r2, [pc, #60]	; (8002c80 <SD_disk_initialize+0x1d0>)
 8002c42:	7bbb      	ldrb	r3, [r7, #14]
 8002c44:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8002c46:	f7ff fd85 	bl	8002754 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8002c4a:	f7ff fda9 	bl	80027a0 <SPI_RxByte>
  
  if (type) 
 8002c4e:	7bbb      	ldrb	r3, [r7, #14]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8002c54:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <SD_disk_initialize+0x1c8>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <SD_disk_initialize+0x1c8>)
 8002c62:	701a      	strb	r2, [r3, #0]
 8002c64:	e001      	b.n	8002c6a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8002c66:	f7ff fe2f 	bl	80028c8 <SD_PowerOff>
  }
  
  return Stat;
 8002c6a:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <SD_disk_initialize+0x1c8>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	b2db      	uxtb	r3, r3
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd90      	pop	{r4, r7, pc}
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	2001ad10 	.word	0x2001ad10
 8002c80:	200003b4 	.word	0x200003b4

08002c84 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8002c94:	2301      	movs	r3, #1
 8002c96:	e002      	b.n	8002c9e <SD_disk_status+0x1a>
  
  return Stat;
 8002c98:	4b04      	ldr	r3, [pc, #16]	; (8002cac <SD_disk_status+0x28>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	b2db      	uxtb	r3, r3
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	20000000 	.word	0x20000000

08002cb0 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d102      	bne.n	8002ccc <SD_disk_read+0x1c>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <SD_disk_read+0x20>
    return RES_PARERR;
 8002ccc:	2304      	movs	r3, #4
 8002cce:	e051      	b.n	8002d74 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8002cd0:	4b2a      	ldr	r3, [pc, #168]	; (8002d7c <SD_disk_read+0xcc>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e048      	b.n	8002d74 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8002ce2:	4b27      	ldr	r3, [pc, #156]	; (8002d80 <SD_disk_read+0xd0>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d102      	bne.n	8002cf4 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	025b      	lsls	r3, r3, #9
 8002cf2:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8002cf4:	f7ff fd22 	bl	800273c <SELECT>
  
  if (count == 1) 
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d111      	bne.n	8002d22 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	2051      	movs	r0, #81	; 0x51
 8002d02:	f7ff fe83 	bl	8002a0c <SD_SendCmd>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d129      	bne.n	8002d60 <SD_disk_read+0xb0>
 8002d0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d10:	68b8      	ldr	r0, [r7, #8]
 8002d12:	f7ff fdf1 	bl	80028f8 <SD_RxDataBlock>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d021      	beq.n	8002d60 <SD_disk_read+0xb0>
      count = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	e01e      	b.n	8002d60 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	2052      	movs	r0, #82	; 0x52
 8002d26:	f7ff fe71 	bl	8002a0c <SD_SendCmd>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d117      	bne.n	8002d60 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8002d30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d34:	68b8      	ldr	r0, [r7, #8]
 8002d36:	f7ff fddf 	bl	80028f8 <SD_RxDataBlock>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00a      	beq.n	8002d56 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002d46:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	603b      	str	r3, [r7, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1ed      	bne.n	8002d30 <SD_disk_read+0x80>
 8002d54:	e000      	b.n	8002d58 <SD_disk_read+0xa8>
          break;
 8002d56:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8002d58:	2100      	movs	r1, #0
 8002d5a:	204c      	movs	r0, #76	; 0x4c
 8002d5c:	f7ff fe56 	bl	8002a0c <SD_SendCmd>
    }
  }
  
  DESELECT();
 8002d60:	f7ff fcf8 	bl	8002754 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8002d64:	f7ff fd1c 	bl	80027a0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	bf14      	ite	ne
 8002d6e:	2301      	movne	r3, #1
 8002d70:	2300      	moveq	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20000000 	.word	0x20000000
 8002d80:	200003b4 	.word	0x200003b4

08002d84 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	607a      	str	r2, [r7, #4]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	4603      	mov	r3, r0
 8002d92:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d102      	bne.n	8002da0 <SD_disk_write+0x1c>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <SD_disk_write+0x20>
    return RES_PARERR;
 8002da0:	2304      	movs	r3, #4
 8002da2:	e06b      	b.n	8002e7c <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8002da4:	4b37      	ldr	r3, [pc, #220]	; (8002e84 <SD_disk_write+0x100>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e062      	b.n	8002e7c <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8002db6:	4b33      	ldr	r3, [pc, #204]	; (8002e84 <SD_disk_write+0x100>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <SD_disk_write+0x44>
    return RES_WRPRT;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e059      	b.n	8002e7c <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8002dc8:	4b2f      	ldr	r3, [pc, #188]	; (8002e88 <SD_disk_write+0x104>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	025b      	lsls	r3, r3, #9
 8002dd8:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8002dda:	f7ff fcaf 	bl	800273c <SELECT>
  
  if (count == 1) 
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d110      	bne.n	8002e06 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	2058      	movs	r0, #88	; 0x58
 8002de8:	f7ff fe10 	bl	8002a0c <SD_SendCmd>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d13a      	bne.n	8002e68 <SD_disk_write+0xe4>
 8002df2:	21fe      	movs	r1, #254	; 0xfe
 8002df4:	68b8      	ldr	r0, [r7, #8]
 8002df6:	f7ff fdb5 	bl	8002964 <SD_TxDataBlock>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d033      	beq.n	8002e68 <SD_disk_write+0xe4>
      count = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	e030      	b.n	8002e68 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8002e06:	4b20      	ldr	r3, [pc, #128]	; (8002e88 <SD_disk_write+0x104>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d007      	beq.n	8002e22 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8002e12:	2100      	movs	r1, #0
 8002e14:	2077      	movs	r0, #119	; 0x77
 8002e16:	f7ff fdf9 	bl	8002a0c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8002e1a:	6839      	ldr	r1, [r7, #0]
 8002e1c:	2057      	movs	r0, #87	; 0x57
 8002e1e:	f7ff fdf5 	bl	8002a0c <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	2059      	movs	r0, #89	; 0x59
 8002e26:	f7ff fdf1 	bl	8002a0c <SD_SendCmd>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d11b      	bne.n	8002e68 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8002e30:	21fc      	movs	r1, #252	; 0xfc
 8002e32:	68b8      	ldr	r0, [r7, #8]
 8002e34:	f7ff fd96 	bl	8002964 <SD_TxDataBlock>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002e44:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1ee      	bne.n	8002e30 <SD_disk_write+0xac>
 8002e52:	e000      	b.n	8002e56 <SD_disk_write+0xd2>
          break;
 8002e54:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8002e56:	21fd      	movs	r1, #253	; 0xfd
 8002e58:	2000      	movs	r0, #0
 8002e5a:	f7ff fd83 	bl	8002964 <SD_TxDataBlock>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <SD_disk_write+0xe4>
      {        
        count = 1;
 8002e64:	2301      	movs	r3, #1
 8002e66:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8002e68:	f7ff fc74 	bl	8002754 <DESELECT>
  SPI_RxByte();
 8002e6c:	f7ff fc98 	bl	80027a0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	bf14      	ite	ne
 8002e76:	2301      	movne	r3, #1
 8002e78:	2300      	moveq	r3, #0
 8002e7a:	b2db      	uxtb	r3, r3
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000000 	.word	0x20000000
 8002e88:	200003b4 	.word	0x200003b4

08002e8c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002e8c:	b590      	push	{r4, r7, lr}
 8002e8e:	b08b      	sub	sp, #44	; 0x2c
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	603a      	str	r2, [r7, #0]
 8002e96:	71fb      	strb	r3, [r7, #7]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8002ea6:	2304      	movs	r3, #4
 8002ea8:	e11b      	b.n	80030e2 <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8002eb0:	79bb      	ldrb	r3, [r7, #6]
 8002eb2:	2b05      	cmp	r3, #5
 8002eb4:	d129      	bne.n	8002f0a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d017      	beq.n	8002eee <SD_disk_ioctl+0x62>
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	dc1f      	bgt.n	8002f02 <SD_disk_ioctl+0x76>
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <SD_disk_ioctl+0x40>
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d00b      	beq.n	8002ee2 <SD_disk_ioctl+0x56>
 8002eca:	e01a      	b.n	8002f02 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8002ecc:	f7ff fd08 	bl	80028e0 <SD_CheckPower>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8002ed6:	f7ff fcf7 	bl	80028c8 <SD_PowerOff>
      res = RES_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002ee0:	e0fd      	b.n	80030de <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8002ee2:	f7ff fca5 	bl	8002830 <SD_PowerOn>
      res = RES_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002eec:	e0f7      	b.n	80030de <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	1c5c      	adds	r4, r3, #1
 8002ef2:	f7ff fcf5 	bl	80028e0 <SD_CheckPower>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8002efa:	2300      	movs	r3, #0
 8002efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002f00:	e0ed      	b.n	80030de <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8002f02:	2304      	movs	r3, #4
 8002f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002f08:	e0e9      	b.n	80030de <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8002f0a:	4b78      	ldr	r3, [pc, #480]	; (80030ec <SD_disk_ioctl+0x260>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e0e2      	b.n	80030e2 <SD_disk_ioctl+0x256>
    
    SELECT();
 8002f1c:	f7ff fc0e 	bl	800273c <SELECT>
    
    switch (ctrl) 
 8002f20:	79bb      	ldrb	r3, [r7, #6]
 8002f22:	2b0d      	cmp	r3, #13
 8002f24:	f200 80cc 	bhi.w	80030c0 <SD_disk_ioctl+0x234>
 8002f28:	a201      	add	r2, pc, #4	; (adr r2, 8002f30 <SD_disk_ioctl+0xa4>)
 8002f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2e:	bf00      	nop
 8002f30:	0800302b 	.word	0x0800302b
 8002f34:	08002f69 	.word	0x08002f69
 8002f38:	0800301b 	.word	0x0800301b
 8002f3c:	080030c1 	.word	0x080030c1
 8002f40:	080030c1 	.word	0x080030c1
 8002f44:	080030c1 	.word	0x080030c1
 8002f48:	080030c1 	.word	0x080030c1
 8002f4c:	080030c1 	.word	0x080030c1
 8002f50:	080030c1 	.word	0x080030c1
 8002f54:	080030c1 	.word	0x080030c1
 8002f58:	080030c1 	.word	0x080030c1
 8002f5c:	0800303d 	.word	0x0800303d
 8002f60:	08003061 	.word	0x08003061
 8002f64:	08003085 	.word	0x08003085
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8002f68:	2100      	movs	r1, #0
 8002f6a:	2049      	movs	r0, #73	; 0x49
 8002f6c:	f7ff fd4e 	bl	8002a0c <SD_SendCmd>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f040 80a8 	bne.w	80030c8 <SD_disk_ioctl+0x23c>
 8002f78:	f107 030c 	add.w	r3, r7, #12
 8002f7c:	2110      	movs	r1, #16
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fcba 	bl	80028f8 <SD_RxDataBlock>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 809e 	beq.w	80030c8 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 8002f8c:	7b3b      	ldrb	r3, [r7, #12]
 8002f8e:	099b      	lsrs	r3, r3, #6
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d10e      	bne.n	8002fb4 <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002f96:	7d7b      	ldrb	r3, [r7, #21]
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	7d3b      	ldrb	r3, [r7, #20]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	021b      	lsls	r3, r3, #8
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8002faa:	8bfb      	ldrh	r3, [r7, #30]
 8002fac:	029a      	lsls	r2, r3, #10
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	e02e      	b.n	8003012 <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002fb4:	7c7b      	ldrb	r3, [r7, #17]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	7dbb      	ldrb	r3, [r7, #22]
 8002fbe:	09db      	lsrs	r3, r3, #7
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	7d7b      	ldrb	r3, [r7, #21]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f003 0306 	and.w	r3, r3, #6
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002fdc:	7d3b      	ldrb	r3, [r7, #20]
 8002fde:	099b      	lsrs	r3, r3, #6
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	7cfb      	ldrb	r3, [r7, #19]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	4413      	add	r3, r2
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	7cbb      	ldrb	r3, [r7, #18]
 8002ff2:	029b      	lsls	r3, r3, #10
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3301      	adds	r3, #1
 8003002:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8003004:	8bfa      	ldrh	r2, [r7, #30]
 8003006:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800300a:	3b09      	subs	r3, #9
 800300c:	409a      	lsls	r2, r3
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8003018:	e056      	b.n	80030c8 <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003020:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003028:	e055      	b.n	80030d6 <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800302a:	f7ff fbe5 	bl	80027f8 <SD_ReadyWait>
 800302e:	4603      	mov	r3, r0
 8003030:	2bff      	cmp	r3, #255	; 0xff
 8003032:	d14b      	bne.n	80030cc <SD_disk_ioctl+0x240>
        res = RES_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800303a:	e047      	b.n	80030cc <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800303c:	2100      	movs	r1, #0
 800303e:	2049      	movs	r0, #73	; 0x49
 8003040:	f7ff fce4 	bl	8002a0c <SD_SendCmd>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d142      	bne.n	80030d0 <SD_disk_ioctl+0x244>
 800304a:	2110      	movs	r1, #16
 800304c:	6a38      	ldr	r0, [r7, #32]
 800304e:	f7ff fc53 	bl	80028f8 <SD_RxDataBlock>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d03b      	beq.n	80030d0 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800305e:	e037      	b.n	80030d0 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8003060:	2100      	movs	r1, #0
 8003062:	204a      	movs	r0, #74	; 0x4a
 8003064:	f7ff fcd2 	bl	8002a0c <SD_SendCmd>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d132      	bne.n	80030d4 <SD_disk_ioctl+0x248>
 800306e:	2110      	movs	r1, #16
 8003070:	6a38      	ldr	r0, [r7, #32]
 8003072:	f7ff fc41 	bl	80028f8 <SD_RxDataBlock>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d02b      	beq.n	80030d4 <SD_disk_ioctl+0x248>
        res = RES_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003082:	e027      	b.n	80030d4 <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8003084:	2100      	movs	r1, #0
 8003086:	207a      	movs	r0, #122	; 0x7a
 8003088:	f7ff fcc0 	bl	8002a0c <SD_SendCmd>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d116      	bne.n	80030c0 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 8003092:	2300      	movs	r3, #0
 8003094:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003098:	e00b      	b.n	80030b2 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 800309a:	6a3c      	ldr	r4, [r7, #32]
 800309c:	1c63      	adds	r3, r4, #1
 800309e:	623b      	str	r3, [r7, #32]
 80030a0:	f7ff fb7e 	bl	80027a0 <SPI_RxByte>
 80030a4:	4603      	mov	r3, r0
 80030a6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80030a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030ac:	3301      	adds	r3, #1
 80030ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80030b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d9ef      	bls.n	800309a <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 80030c0:	2304      	movs	r3, #4
 80030c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80030c6:	e006      	b.n	80030d6 <SD_disk_ioctl+0x24a>
      break;
 80030c8:	bf00      	nop
 80030ca:	e004      	b.n	80030d6 <SD_disk_ioctl+0x24a>
      break;
 80030cc:	bf00      	nop
 80030ce:	e002      	b.n	80030d6 <SD_disk_ioctl+0x24a>
      break;
 80030d0:	bf00      	nop
 80030d2:	e000      	b.n	80030d6 <SD_disk_ioctl+0x24a>
      break;
 80030d4:	bf00      	nop
    }
    
    DESELECT();
 80030d6:	f7ff fb3d 	bl	8002754 <DESELECT>
    SPI_RxByte();
 80030da:	f7ff fb61 	bl	80027a0 <SPI_RxByte>
  }
  
  return res;
 80030de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	372c      	adds	r7, #44	; 0x2c
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd90      	pop	{r4, r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000000 	.word	0x20000000

080030f0 <user_i2c_read>:
int8_t init_bme280(void);
void bme280_measure(void);

//----------------------------------------------------------------------------------------
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af02      	add	r7, sp, #8
 80030f6:	603a      	str	r2, [r7, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	4603      	mov	r3, r0
 80030fc:	71fb      	strb	r3, [r7, #7]
 80030fe:	460b      	mov	r3, r1
 8003100:	71bb      	strb	r3, [r7, #6]
 8003102:	4613      	mov	r3, r2
 8003104:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	b29b      	uxth	r3, r3
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	b299      	uxth	r1, r3
 800310e:	1dba      	adds	r2, r7, #6
 8003110:	230a      	movs	r3, #10
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	2301      	movs	r3, #1
 8003116:	4811      	ldr	r0, [pc, #68]	; (800315c <user_i2c_read+0x6c>)
 8003118:	f003 fd26 	bl	8006b68 <HAL_I2C_Master_Transmit>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <user_i2c_read+0x38>
 8003122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003126:	e014      	b.n	8003152 <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c3, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	b21b      	sxth	r3, r3
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	b21b      	sxth	r3, r3
 8003134:	b299      	uxth	r1, r3
 8003136:	88bb      	ldrh	r3, [r7, #4]
 8003138:	220a      	movs	r2, #10
 800313a:	9200      	str	r2, [sp, #0]
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	4807      	ldr	r0, [pc, #28]	; (800315c <user_i2c_read+0x6c>)
 8003140:	f003 fe10 	bl	8006d64 <HAL_I2C_Master_Receive>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <user_i2c_read+0x60>
 800314a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800314e:	e000      	b.n	8003152 <user_i2c_read+0x62>

  return 0;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	2000a0ec 	.word	0x2000a0ec

08003160 <user_delay_ms>:
//----------------------------------------------------------------------------------------
void user_delay_ms(uint32_t period)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f002 fcfb 	bl	8005b64 <HAL_Delay>
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <user_i2c_write>:
//----------------------------------------------------------------------------------------
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af02      	add	r7, sp, #8
 800317e:	603a      	str	r2, [r7, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]
 8003186:	460b      	mov	r3, r1
 8003188:	71bb      	strb	r3, [r7, #6]
 800318a:	4613      	mov	r3, r2
 800318c:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 800318e:	88bb      	ldrh	r3, [r7, #4]
 8003190:	3301      	adds	r3, #1
 8003192:	4618      	mov	r0, r3
 8003194:	f013 ff74 	bl	8017080 <malloc>
 8003198:	4603      	mov	r3, r0
 800319a:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 800319c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	3301      	adds	r3, #1
 80031a8:	88ba      	ldrh	r2, [r7, #4]
 80031aa:	6839      	ldr	r1, [r7, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f013 ff77 	bl	80170a0 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	b299      	uxth	r1, r3
 80031ba:	88bb      	ldrh	r3, [r7, #4]
 80031bc:	3301      	adds	r3, #1
 80031be:	b29b      	uxth	r3, r3
 80031c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031c4:	9200      	str	r2, [sp, #0]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4808      	ldr	r0, [pc, #32]	; (80031ec <user_i2c_write+0x74>)
 80031ca:	f003 fccd 	bl	8006b68 <HAL_I2C_Master_Transmit>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <user_i2c_write+0x62>
 80031d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031d8:	e003      	b.n	80031e2 <user_i2c_write+0x6a>

  free(buf);
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f013 ff58 	bl	8017090 <free>
  return 0;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	2000a0ec 	.word	0x2000a0ec

080031f0 <delay_us>:
//
//}


bool delay_us(uint16_t us)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 80031fa:	4b11      	ldr	r3, [pc, #68]	; (8003240 <delay_us+0x50>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2200      	movs	r2, #0
 8003200:	625a      	str	r2, [r3, #36]	; 0x24
	tim_val = us/10;
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	4a0f      	ldr	r2, [pc, #60]	; (8003244 <delay_us+0x54>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	08db      	lsrs	r3, r3, #3
 800320c:	b29b      	uxth	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <delay_us+0x58>)
 8003212:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim10);
 8003214:	480a      	ldr	r0, [pc, #40]	; (8003240 <delay_us+0x50>)
 8003216:	f008 f90b 	bl	800b430 <HAL_TIM_Base_Start_IT>
	while(tim_val != 0)
 800321a:	bf00      	nop
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <delay_us+0x58>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1fb      	bne.n	800321c <delay_us+0x2c>
	{

	}
	HAL_TIM_Base_Stop_IT(&htim10);
 8003224:	4806      	ldr	r0, [pc, #24]	; (8003240 <delay_us+0x50>)
 8003226:	f008 f973 	bl	800b510 <HAL_TIM_Base_Stop_IT>
	tim_val = 0;
 800322a:	4b07      	ldr	r3, [pc, #28]	; (8003248 <delay_us+0x58>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
	int s = 99;
 8003230:	2363      	movs	r3, #99	; 0x63
 8003232:	60fb      	str	r3, [r7, #12]
	return true;
 8003234:	2301      	movs	r3, #1
//	{
//
//	}
//	//HAL_TIM_Base_Stop_IT(&htim10);
//	return true;
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	2000a9d8 	.word	0x2000a9d8
 8003244:	cccccccd 	.word	0xcccccccd
 8003248:	200007a4 	.word	0x200007a4

0800324c <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
	 if(hspi == &hspi2)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a0c      	ldr	r2, [pc, #48]	; (8003288 <HAL_SPI_TxCpltCallback+0x3c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d111      	bne.n	8003280 <HAL_SPI_TxCpltCallback+0x34>
	  {
	    dma_spi_cnt--;
 800325c:	4b0b      	ldr	r3, [pc, #44]	; (800328c <HAL_SPI_TxCpltCallback+0x40>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3b01      	subs	r3, #1
 8003262:	4a0a      	ldr	r2, [pc, #40]	; (800328c <HAL_SPI_TxCpltCallback+0x40>)
 8003264:	6013      	str	r3, [r2, #0]
	    if(dma_spi_cnt==0)
 8003266:	4b09      	ldr	r3, [pc, #36]	; (800328c <HAL_SPI_TxCpltCallback+0x40>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d108      	bne.n	8003280 <HAL_SPI_TxCpltCallback+0x34>
	    {
	      HAL_SPI_DMAStop(&hspi2);
 800326e:	4806      	ldr	r0, [pc, #24]	; (8003288 <HAL_SPI_TxCpltCallback+0x3c>)
 8003270:	f007 fdcc 	bl	800ae0c <HAL_SPI_DMAStop>
	      dma_spi_cnt=1;
 8003274:	4b05      	ldr	r3, [pc, #20]	; (800328c <HAL_SPI_TxCpltCallback+0x40>)
 8003276:	2201      	movs	r2, #1
 8003278:	601a      	str	r2, [r3, #0]
	      dma_spi_fl=1;
 800327a:	4b05      	ldr	r3, [pc, #20]	; (8003290 <HAL_SPI_TxCpltCallback+0x44>)
 800327c:	2201      	movs	r2, #1
 800327e:	701a      	strb	r2, [r3, #0]
	    }
	  }
}
 8003280:	bf00      	nop
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	2000a960 	.word	0x2000a960
 800328c:	20000004 	.word	0x20000004
 8003290:	200007a8 	.word	0x200007a8

08003294 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003298:	f002 fc22 	bl	8005ae0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800329c:	f000 f8a4 	bl	80033e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032a0:	f000 fb78 	bl	8003994 <MX_GPIO_Init>
  MX_TIM3_Init();
 80032a4:	f000 fae6 	bl	8003874 <MX_TIM3_Init>
  MX_I2C3_Init();
 80032a8:	f000 f90a 	bl	80034c0 <MX_I2C3_Init>
  MX_TIM2_Init();
 80032ac:	f000 fa96 	bl	80037dc <MX_TIM2_Init>
  MX_TIM10_Init();
 80032b0:	f000 fb2e 	bl	8003910 <MX_TIM10_Init>
  MX_SPI1_Init();
 80032b4:	f000 f9d4 	bl	8003660 <MX_SPI1_Init>
  MX_FATFS_Init();
 80032b8:	f00a f894 	bl	800d3e4 <MX_FATFS_Init>
  MX_TIM1_Init();
 80032bc:	f000 fa3c 	bl	8003738 <MX_TIM1_Init>
  MX_RTC_Init();
 80032c0:	f000 f940 	bl	8003544 <MX_RTC_Init>

  MX_DMA_Init();
 80032c4:	f000 fb46 	bl	8003954 <MX_DMA_Init>
  MX_SPI2_Init();
 80032c8:	f000 fa00 	bl	80036cc <MX_SPI2_Init>

  MX_RNG_Init();
 80032cc:	f000 f926 	bl	800351c <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);		//  This TIM3 using for calculate how many time all tasks was running.
 80032d0:	4829      	ldr	r0, [pc, #164]	; (8003378 <main+0xe4>)
 80032d2:	f008 f8ad 	bl	800b430 <HAL_TIM_Base_Start_IT>

  //HAL_TIM_Base_Start_IT(&htim2);
  //HAL_TIM_Base_Start_IT(&htim10);			// Using for generate us delays
  HAL_TIM_Base_Start_IT(&htim1);			// Blink Green LED
 80032d6:	4829      	ldr	r0, [pc, #164]	; (800337c <main+0xe8>)
 80032d8:	f008 f8aa 	bl	800b430 <HAL_TIM_Base_Start_IT>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80032dc:	f00f f922 	bl	8012524 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (10, sizeof(QUEUE_t), &UARTQueue_attributes);
 80032e0:	4a27      	ldr	r2, [pc, #156]	; (8003380 <main+0xec>)
 80032e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80032e6:	200a      	movs	r0, #10
 80032e8:	f00f fb56 	bl	8012998 <osMessageQueueNew>
 80032ec:	4603      	mov	r3, r0
 80032ee:	4a25      	ldr	r2, [pc, #148]	; (8003384 <main+0xf0>)
 80032f0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80032f2:	4a25      	ldr	r2, [pc, #148]	; (8003388 <main+0xf4>)
 80032f4:	2100      	movs	r1, #0
 80032f6:	4825      	ldr	r0, [pc, #148]	; (800338c <main+0xf8>)
 80032f8:	f00f f95e 	bl	80125b8 <osThreadNew>
 80032fc:	4603      	mov	r3, r0
 80032fe:	4a24      	ldr	r2, [pc, #144]	; (8003390 <main+0xfc>)
 8003300:	6013      	str	r3, [r2, #0]

  /* creation of Blue_LED_Blink */
  Blue_LED_BlinkHandle = osThreadNew(Start_Blue_LED_Blink, NULL, &Blue_LED_Blink_attributes);
 8003302:	4a24      	ldr	r2, [pc, #144]	; (8003394 <main+0x100>)
 8003304:	2100      	movs	r1, #0
 8003306:	4824      	ldr	r0, [pc, #144]	; (8003398 <main+0x104>)
 8003308:	f00f f956 	bl	80125b8 <osThreadNew>
 800330c:	4603      	mov	r3, r0
 800330e:	4a23      	ldr	r2, [pc, #140]	; (800339c <main+0x108>)
 8003310:	6013      	str	r3, [r2, #0]

  /* creation of Show_Resources */
  Show_ResourcesHandle = osThreadNew(Start_Show_Resources, NULL, &Show_Resources_attributes);
 8003312:	4a23      	ldr	r2, [pc, #140]	; (80033a0 <main+0x10c>)
 8003314:	2100      	movs	r1, #0
 8003316:	4823      	ldr	r0, [pc, #140]	; (80033a4 <main+0x110>)
 8003318:	f00f f94e 	bl	80125b8 <osThreadNew>
 800331c:	4603      	mov	r3, r0
 800331e:	4a22      	ldr	r2, [pc, #136]	; (80033a8 <main+0x114>)
 8003320:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(Start_UART_Task, NULL, &UART_Task_attributes);
 8003322:	4a22      	ldr	r2, [pc, #136]	; (80033ac <main+0x118>)
 8003324:	2100      	movs	r1, #0
 8003326:	4822      	ldr	r0, [pc, #136]	; (80033b0 <main+0x11c>)
 8003328:	f00f f946 	bl	80125b8 <osThreadNew>
 800332c:	4603      	mov	r3, r0
 800332e:	4a21      	ldr	r2, [pc, #132]	; (80033b4 <main+0x120>)
 8003330:	6013      	str	r3, [r2, #0]

  /* creation of bme280 */
  bme280Handle = osThreadNew(Start_bme280, NULL, &bme280_attributes);
 8003332:	4a21      	ldr	r2, [pc, #132]	; (80033b8 <main+0x124>)
 8003334:	2100      	movs	r1, #0
 8003336:	4821      	ldr	r0, [pc, #132]	; (80033bc <main+0x128>)
 8003338:	f00f f93e 	bl	80125b8 <osThreadNew>
 800333c:	4603      	mov	r3, r0
 800333e:	4a20      	ldr	r2, [pc, #128]	; (80033c0 <main+0x12c>)
 8003340:	6013      	str	r3, [r2, #0]

  /* creation of AM2302 */
  AM2302Handle = osThreadNew(Start_AM2302, NULL, &AM2302_attributes);
 8003342:	4a20      	ldr	r2, [pc, #128]	; (80033c4 <main+0x130>)
 8003344:	2100      	movs	r1, #0
 8003346:	4820      	ldr	r0, [pc, #128]	; (80033c8 <main+0x134>)
 8003348:	f00f f936 	bl	80125b8 <osThreadNew>
 800334c:	4603      	mov	r3, r0
 800334e:	4a1f      	ldr	r2, [pc, #124]	; (80033cc <main+0x138>)
 8003350:	6013      	str	r3, [r2, #0]

  /* creation of SD_CARD */
  SD_CARDHandle = osThreadNew(Start_SD_CARD, NULL, &SD_CARD_attributes);
 8003352:	4a1f      	ldr	r2, [pc, #124]	; (80033d0 <main+0x13c>)
 8003354:	2100      	movs	r1, #0
 8003356:	481f      	ldr	r0, [pc, #124]	; (80033d4 <main+0x140>)
 8003358:	f00f f92e 	bl	80125b8 <osThreadNew>
 800335c:	4603      	mov	r3, r0
 800335e:	4a1e      	ldr	r2, [pc, #120]	; (80033d8 <main+0x144>)
 8003360:	6013      	str	r3, [r2, #0]

  /* creation of LCD */
  LCDHandle = osThreadNew(Start_LCD, NULL, &LCD_attributes);
 8003362:	4a1e      	ldr	r2, [pc, #120]	; (80033dc <main+0x148>)
 8003364:	2100      	movs	r1, #0
 8003366:	481e      	ldr	r0, [pc, #120]	; (80033e0 <main+0x14c>)
 8003368:	f00f f926 	bl	80125b8 <osThreadNew>
 800336c:	4603      	mov	r3, r0
 800336e:	4a1d      	ldr	r2, [pc, #116]	; (80033e4 <main+0x150>)
 8003370:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003372:	f00f f8fb 	bl	801256c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003376:	e7fe      	b.n	8003376 <main+0xe2>
 8003378:	2000eb78 	.word	0x2000eb78
 800337c:	2001a118 	.word	0x2001a118
 8003380:	0801a5b4 	.word	0x0801a5b4
 8003384:	2000b374 	.word	0x2000b374
 8003388:	0801a494 	.word	0x0801a494
 800338c:	08003c91 	.word	0x08003c91
 8003390:	2000a0a8 	.word	0x2000a0a8
 8003394:	0801a4b8 	.word	0x0801a4b8
 8003398:	08003ca5 	.word	0x08003ca5
 800339c:	2000a9b8 	.word	0x2000a9b8
 80033a0:	0801a4dc 	.word	0x0801a4dc
 80033a4:	08003f21 	.word	0x08003f21
 80033a8:	2001a37c 	.word	0x2001a37c
 80033ac:	0801a500 	.word	0x0801a500
 80033b0:	08004191 	.word	0x08004191
 80033b4:	2000ebc0 	.word	0x2000ebc0
 80033b8:	0801a524 	.word	0x0801a524
 80033bc:	080041ed 	.word	0x080041ed
 80033c0:	2001b664 	.word	0x2001b664
 80033c4:	0801a548 	.word	0x0801a548
 80033c8:	08004565 	.word	0x08004565
 80033cc:	2001a374 	.word	0x2001a374
 80033d0:	0801a56c 	.word	0x0801a56c
 80033d4:	08004921 	.word	0x08004921
 80033d8:	2000b1f0 	.word	0x2000b1f0
 80033dc:	0801a590 	.word	0x0801a590
 80033e0:	080049dd 	.word	0x080049dd
 80033e4:	200197a4 	.word	0x200197a4

080033e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b094      	sub	sp, #80	; 0x50
 80033ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80033ee:	f107 0320 	add.w	r3, r7, #32
 80033f2:	2230      	movs	r2, #48	; 0x30
 80033f4:	2100      	movs	r1, #0
 80033f6:	4618      	mov	r0, r3
 80033f8:	f013 fe60 	bl	80170bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80033fc:	f107 030c 	add.w	r3, r7, #12
 8003400:	2200      	movs	r2, #0
 8003402:	601a      	str	r2, [r3, #0]
 8003404:	605a      	str	r2, [r3, #4]
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	60da      	str	r2, [r3, #12]
 800340a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800340c:	2300      	movs	r3, #0
 800340e:	60bb      	str	r3, [r7, #8]
 8003410:	4b29      	ldr	r3, [pc, #164]	; (80034b8 <SystemClock_Config+0xd0>)
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	4a28      	ldr	r2, [pc, #160]	; (80034b8 <SystemClock_Config+0xd0>)
 8003416:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800341a:	6413      	str	r3, [r2, #64]	; 0x40
 800341c:	4b26      	ldr	r3, [pc, #152]	; (80034b8 <SystemClock_Config+0xd0>)
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003428:	2300      	movs	r3, #0
 800342a:	607b      	str	r3, [r7, #4]
 800342c:	4b23      	ldr	r3, [pc, #140]	; (80034bc <SystemClock_Config+0xd4>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a22      	ldr	r2, [pc, #136]	; (80034bc <SystemClock_Config+0xd4>)
 8003432:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003436:	6013      	str	r3, [r2, #0]
 8003438:	4b20      	ldr	r3, [pc, #128]	; (80034bc <SystemClock_Config+0xd4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003440:	607b      	str	r3, [r7, #4]
 8003442:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003444:	2305      	movs	r3, #5
 8003446:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003448:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800344e:	2301      	movs	r3, #1
 8003450:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003452:	2302      	movs	r3, #2
 8003454:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003456:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800345a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800345c:	2308      	movs	r3, #8
 800345e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8003460:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003464:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003466:	2302      	movs	r3, #2
 8003468:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800346a:	2307      	movs	r3, #7
 800346c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800346e:	f107 0320 	add.w	r3, r7, #32
 8003472:	4618      	mov	r0, r3
 8003474:	f005 fe5a 	bl	800912c <HAL_RCC_OscConfig>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800347e:	f001 fb19 	bl	8004ab4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003482:	230f      	movs	r3, #15
 8003484:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003486:	2302      	movs	r3, #2
 8003488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800348e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003492:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003498:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800349a:	f107 030c 	add.w	r3, r7, #12
 800349e:	2105      	movs	r1, #5
 80034a0:	4618      	mov	r0, r3
 80034a2:	f006 f8bb 	bl	800961c <HAL_RCC_ClockConfig>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80034ac:	f001 fb02 	bl	8004ab4 <Error_Handler>
  }
}
 80034b0:	bf00      	nop
 80034b2:	3750      	adds	r7, #80	; 0x50
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40023800 	.word	0x40023800
 80034bc:	40007000 	.word	0x40007000

080034c0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80034c4:	4b12      	ldr	r3, [pc, #72]	; (8003510 <MX_I2C3_Init+0x50>)
 80034c6:	4a13      	ldr	r2, [pc, #76]	; (8003514 <MX_I2C3_Init+0x54>)
 80034c8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80034ca:	4b11      	ldr	r3, [pc, #68]	; (8003510 <MX_I2C3_Init+0x50>)
 80034cc:	4a12      	ldr	r2, [pc, #72]	; (8003518 <MX_I2C3_Init+0x58>)
 80034ce:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80034d0:	4b0f      	ldr	r3, [pc, #60]	; (8003510 <MX_I2C3_Init+0x50>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80034d6:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <MX_I2C3_Init+0x50>)
 80034d8:	2200      	movs	r2, #0
 80034da:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034dc:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <MX_I2C3_Init+0x50>)
 80034de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034e2:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034e4:	4b0a      	ldr	r3, [pc, #40]	; (8003510 <MX_I2C3_Init+0x50>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80034ea:	4b09      	ldr	r3, [pc, #36]	; (8003510 <MX_I2C3_Init+0x50>)
 80034ec:	2200      	movs	r2, #0
 80034ee:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80034f0:	4b07      	ldr	r3, [pc, #28]	; (8003510 <MX_I2C3_Init+0x50>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80034f6:	4b06      	ldr	r3, [pc, #24]	; (8003510 <MX_I2C3_Init+0x50>)
 80034f8:	2200      	movs	r2, #0
 80034fa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80034fc:	4804      	ldr	r0, [pc, #16]	; (8003510 <MX_I2C3_Init+0x50>)
 80034fe:	f003 f9ef 	bl	80068e0 <HAL_I2C_Init>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003508:	f001 fad4 	bl	8004ab4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800350c:	bf00      	nop
 800350e:	bd80      	pop	{r7, pc}
 8003510:	2000a0ec 	.word	0x2000a0ec
 8003514:	40005c00 	.word	0x40005c00
 8003518:	000186a0 	.word	0x000186a0

0800351c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8003520:	4b06      	ldr	r3, [pc, #24]	; (800353c <MX_RNG_Init+0x20>)
 8003522:	4a07      	ldr	r2, [pc, #28]	; (8003540 <MX_RNG_Init+0x24>)
 8003524:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8003526:	4805      	ldr	r0, [pc, #20]	; (800353c <MX_RNG_Init+0x20>)
 8003528:	f006 fb74 	bl	8009c14 <HAL_RNG_Init>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8003532:	f001 fabf 	bl	8004ab4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8003536:	bf00      	nop
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	2001a364 	.word	0x2001a364
 8003540:	50060800 	.word	0x50060800

08003544 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b090      	sub	sp, #64	; 0x40
 8003548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800354a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800354e:	2200      	movs	r2, #0
 8003550:	601a      	str	r2, [r3, #0]
 8003552:	605a      	str	r2, [r3, #4]
 8003554:	609a      	str	r2, [r3, #8]
 8003556:	60da      	str	r2, [r3, #12]
 8003558:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800355a:	2300      	movs	r3, #0
 800355c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800355e:	463b      	mov	r3, r7
 8003560:	2228      	movs	r2, #40	; 0x28
 8003562:	2100      	movs	r1, #0
 8003564:	4618      	mov	r0, r3
 8003566:	f013 fda9 	bl	80170bc <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800356a:	4b3b      	ldr	r3, [pc, #236]	; (8003658 <MX_RTC_Init+0x114>)
 800356c:	4a3b      	ldr	r2, [pc, #236]	; (800365c <MX_RTC_Init+0x118>)
 800356e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003570:	4b39      	ldr	r3, [pc, #228]	; (8003658 <MX_RTC_Init+0x114>)
 8003572:	2200      	movs	r2, #0
 8003574:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003576:	4b38      	ldr	r3, [pc, #224]	; (8003658 <MX_RTC_Init+0x114>)
 8003578:	227f      	movs	r2, #127	; 0x7f
 800357a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800357c:	4b36      	ldr	r3, [pc, #216]	; (8003658 <MX_RTC_Init+0x114>)
 800357e:	22ff      	movs	r2, #255	; 0xff
 8003580:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003582:	4b35      	ldr	r3, [pc, #212]	; (8003658 <MX_RTC_Init+0x114>)
 8003584:	2200      	movs	r2, #0
 8003586:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003588:	4b33      	ldr	r3, [pc, #204]	; (8003658 <MX_RTC_Init+0x114>)
 800358a:	2200      	movs	r2, #0
 800358c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800358e:	4b32      	ldr	r3, [pc, #200]	; (8003658 <MX_RTC_Init+0x114>)
 8003590:	2200      	movs	r2, #0
 8003592:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003594:	4830      	ldr	r0, [pc, #192]	; (8003658 <MX_RTC_Init+0x114>)
 8003596:	f006 fbd2 	bl	8009d3e <HAL_RTC_Init>
 800359a:	4603      	mov	r3, r0
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80035a0:	f001 fa88 	bl	8004ab4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x23;
 80035a4:	2323      	movs	r3, #35	; 0x23
 80035a6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x59;
 80035aa:	2359      	movs	r3, #89	; 0x59
 80035ac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x45;
 80035b0:	2345      	movs	r3, #69	; 0x45
 80035b2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80035b6:	2300      	movs	r3, #0
 80035b8:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80035ba:	2300      	movs	r3, #0
 80035bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80035be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035c2:	2201      	movs	r2, #1
 80035c4:	4619      	mov	r1, r3
 80035c6:	4824      	ldr	r0, [pc, #144]	; (8003658 <MX_RTC_Init+0x114>)
 80035c8:	f006 fc4a 	bl	8009e60 <HAL_RTC_SetTime>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80035d2:	f001 fa6f 	bl	8004ab4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80035d6:	2302      	movs	r3, #2
 80035d8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_DECEMBER;
 80035dc:	2312      	movs	r3, #18
 80035de:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x28;
 80035e2:	2328      	movs	r3, #40	; 0x28
 80035e4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80035e8:	2300      	movs	r3, #0
 80035ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80035ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035f2:	2201      	movs	r2, #1
 80035f4:	4619      	mov	r1, r3
 80035f6:	4818      	ldr	r0, [pc, #96]	; (8003658 <MX_RTC_Init+0x114>)
 80035f8:	f006 fd4d 	bl	800a096 <HAL_RTC_SetDate>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d001      	beq.n	8003606 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8003602:	f001 fa57 	bl	8004ab4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8003606:	2300      	movs	r3, #0
 8003608:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800360a:	2300      	movs	r3, #0
 800360c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 800360e:	2310      	movs	r3, #16
 8003610:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8003612:	2300      	movs	r3, #0
 8003614:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003616:	2300      	movs	r3, #0
 8003618:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800361a:	2300      	movs	r3, #0
 800361c:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800361e:	2300      	movs	r3, #0
 8003620:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8003622:	2300      	movs	r3, #0
 8003624:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8003626:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800362a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = RTC_WEEKDAY_MONDAY;
 800362c:	2301      	movs	r3, #1
 800362e:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8003632:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003636:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8003638:	463b      	mov	r3, r7
 800363a:	2201      	movs	r2, #1
 800363c:	4619      	mov	r1, r3
 800363e:	4806      	ldr	r0, [pc, #24]	; (8003658 <MX_RTC_Init+0x114>)
 8003640:	f006 fe1f 	bl	800a282 <HAL_RTC_SetAlarm>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800364a:	f001 fa33 	bl	8004ab4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800364e:	bf00      	nop
 8003650:	3740      	adds	r7, #64	; 0x40
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	200197a8 	.word	0x200197a8
 800365c:	40002800 	.word	0x40002800

08003660 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003664:	4b17      	ldr	r3, [pc, #92]	; (80036c4 <MX_SPI1_Init+0x64>)
 8003666:	4a18      	ldr	r2, [pc, #96]	; (80036c8 <MX_SPI1_Init+0x68>)
 8003668:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800366a:	4b16      	ldr	r3, [pc, #88]	; (80036c4 <MX_SPI1_Init+0x64>)
 800366c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003670:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003672:	4b14      	ldr	r3, [pc, #80]	; (80036c4 <MX_SPI1_Init+0x64>)
 8003674:	2200      	movs	r2, #0
 8003676:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003678:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <MX_SPI1_Init+0x64>)
 800367a:	2200      	movs	r2, #0
 800367c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800367e:	4b11      	ldr	r3, [pc, #68]	; (80036c4 <MX_SPI1_Init+0x64>)
 8003680:	2200      	movs	r2, #0
 8003682:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003684:	4b0f      	ldr	r3, [pc, #60]	; (80036c4 <MX_SPI1_Init+0x64>)
 8003686:	2200      	movs	r2, #0
 8003688:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800368a:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <MX_SPI1_Init+0x64>)
 800368c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003690:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003692:	4b0c      	ldr	r3, [pc, #48]	; (80036c4 <MX_SPI1_Init+0x64>)
 8003694:	2220      	movs	r2, #32
 8003696:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003698:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <MX_SPI1_Init+0x64>)
 800369a:	2200      	movs	r2, #0
 800369c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800369e:	4b09      	ldr	r3, [pc, #36]	; (80036c4 <MX_SPI1_Init+0x64>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036a4:	4b07      	ldr	r3, [pc, #28]	; (80036c4 <MX_SPI1_Init+0x64>)
 80036a6:	2200      	movs	r2, #0
 80036a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80036aa:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <MX_SPI1_Init+0x64>)
 80036ac:	220a      	movs	r2, #10
 80036ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80036b0:	4804      	ldr	r0, [pc, #16]	; (80036c4 <MX_SPI1_Init+0x64>)
 80036b2:	f006 ff8e 	bl	800a5d2 <HAL_SPI_Init>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80036bc:	f001 f9fa 	bl	8004ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80036c0:	bf00      	nop
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	2001a380 	.word	0x2001a380
 80036c8:	40013000 	.word	0x40013000

080036cc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80036d0:	4b17      	ldr	r3, [pc, #92]	; (8003730 <MX_SPI2_Init+0x64>)
 80036d2:	4a18      	ldr	r2, [pc, #96]	; (8003734 <MX_SPI2_Init+0x68>)
 80036d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80036d6:	4b16      	ldr	r3, [pc, #88]	; (8003730 <MX_SPI2_Init+0x64>)
 80036d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80036dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80036de:	4b14      	ldr	r3, [pc, #80]	; (8003730 <MX_SPI2_Init+0x64>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80036e4:	4b12      	ldr	r3, [pc, #72]	; (8003730 <MX_SPI2_Init+0x64>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80036ea:	4b11      	ldr	r3, [pc, #68]	; (8003730 <MX_SPI2_Init+0x64>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80036f0:	4b0f      	ldr	r3, [pc, #60]	; (8003730 <MX_SPI2_Init+0x64>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80036f6:	4b0e      	ldr	r3, [pc, #56]	; (8003730 <MX_SPI2_Init+0x64>)
 80036f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036fe:	4b0c      	ldr	r3, [pc, #48]	; (8003730 <MX_SPI2_Init+0x64>)
 8003700:	2200      	movs	r2, #0
 8003702:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003704:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <MX_SPI2_Init+0x64>)
 8003706:	2200      	movs	r2, #0
 8003708:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800370a:	4b09      	ldr	r3, [pc, #36]	; (8003730 <MX_SPI2_Init+0x64>)
 800370c:	2200      	movs	r2, #0
 800370e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003710:	4b07      	ldr	r3, [pc, #28]	; (8003730 <MX_SPI2_Init+0x64>)
 8003712:	2200      	movs	r2, #0
 8003714:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003716:	4b06      	ldr	r3, [pc, #24]	; (8003730 <MX_SPI2_Init+0x64>)
 8003718:	220a      	movs	r2, #10
 800371a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800371c:	4804      	ldr	r0, [pc, #16]	; (8003730 <MX_SPI2_Init+0x64>)
 800371e:	f006 ff58 	bl	800a5d2 <HAL_SPI_Init>
 8003722:	4603      	mov	r3, r0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003728:	f001 f9c4 	bl	8004ab4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800372c:	bf00      	nop
 800372e:	bd80      	pop	{r7, pc}
 8003730:	2000a960 	.word	0x2000a960
 8003734:	40003800 	.word	0x40003800

08003738 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800373e:	f107 0308 	add.w	r3, r7, #8
 8003742:	2200      	movs	r2, #0
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	605a      	str	r2, [r3, #4]
 8003748:	609a      	str	r2, [r3, #8]
 800374a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800374c:	463b      	mov	r3, r7
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]
 8003752:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003754:	4b1f      	ldr	r3, [pc, #124]	; (80037d4 <MX_TIM1_Init+0x9c>)
 8003756:	4a20      	ldr	r2, [pc, #128]	; (80037d8 <MX_TIM1_Init+0xa0>)
 8003758:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16800-1;
 800375a:	4b1e      	ldr	r3, [pc, #120]	; (80037d4 <MX_TIM1_Init+0x9c>)
 800375c:	f244 129f 	movw	r2, #16799	; 0x419f
 8003760:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003762:	4b1c      	ldr	r3, [pc, #112]	; (80037d4 <MX_TIM1_Init+0x9c>)
 8003764:	2200      	movs	r2, #0
 8003766:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8003768:	4b1a      	ldr	r3, [pc, #104]	; (80037d4 <MX_TIM1_Init+0x9c>)
 800376a:	f242 7210 	movw	r2, #10000	; 0x2710
 800376e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003770:	4b18      	ldr	r3, [pc, #96]	; (80037d4 <MX_TIM1_Init+0x9c>)
 8003772:	2200      	movs	r2, #0
 8003774:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003776:	4b17      	ldr	r3, [pc, #92]	; (80037d4 <MX_TIM1_Init+0x9c>)
 8003778:	2200      	movs	r2, #0
 800377a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800377c:	4b15      	ldr	r3, [pc, #84]	; (80037d4 <MX_TIM1_Init+0x9c>)
 800377e:	2200      	movs	r2, #0
 8003780:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003782:	4814      	ldr	r0, [pc, #80]	; (80037d4 <MX_TIM1_Init+0x9c>)
 8003784:	f007 fe04 	bl	800b390 <HAL_TIM_Base_Init>
 8003788:	4603      	mov	r3, r0
 800378a:	2b00      	cmp	r3, #0
 800378c:	d001      	beq.n	8003792 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800378e:	f001 f991 	bl	8004ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003792:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003796:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003798:	f107 0308 	add.w	r3, r7, #8
 800379c:	4619      	mov	r1, r3
 800379e:	480d      	ldr	r0, [pc, #52]	; (80037d4 <MX_TIM1_Init+0x9c>)
 80037a0:	f007 ffed 	bl	800b77e <HAL_TIM_ConfigClockSource>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d001      	beq.n	80037ae <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80037aa:	f001 f983 	bl	8004ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80037ae:	2320      	movs	r3, #32
 80037b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037b2:	2300      	movs	r3, #0
 80037b4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80037b6:	463b      	mov	r3, r7
 80037b8:	4619      	mov	r1, r3
 80037ba:	4806      	ldr	r0, [pc, #24]	; (80037d4 <MX_TIM1_Init+0x9c>)
 80037bc:	f008 fa08 	bl	800bbd0 <HAL_TIMEx_MasterConfigSynchronization>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80037c6:	f001 f975 	bl	8004ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80037ca:	bf00      	nop
 80037cc:	3718      	adds	r7, #24
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	2001a118 	.word	0x2001a118
 80037d8:	40010000 	.word	0x40010000

080037dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037e2:	f107 0308 	add.w	r3, r7, #8
 80037e6:	2200      	movs	r2, #0
 80037e8:	601a      	str	r2, [r3, #0]
 80037ea:	605a      	str	r2, [r3, #4]
 80037ec:	609a      	str	r2, [r3, #8]
 80037ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037f0:	463b      	mov	r3, r7
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80037f8:	4b1d      	ldr	r3, [pc, #116]	; (8003870 <MX_TIM2_Init+0x94>)
 80037fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037fe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8003800:	4b1b      	ldr	r3, [pc, #108]	; (8003870 <MX_TIM2_Init+0x94>)
 8003802:	220a      	movs	r2, #10
 8003804:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003806:	4b1a      	ldr	r3, [pc, #104]	; (8003870 <MX_TIM2_Init+0x94>)
 8003808:	2200      	movs	r2, #0
 800380a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800380c:	4b18      	ldr	r3, [pc, #96]	; (8003870 <MX_TIM2_Init+0x94>)
 800380e:	220a      	movs	r2, #10
 8003810:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003812:	4b17      	ldr	r3, [pc, #92]	; (8003870 <MX_TIM2_Init+0x94>)
 8003814:	2200      	movs	r2, #0
 8003816:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003818:	4b15      	ldr	r3, [pc, #84]	; (8003870 <MX_TIM2_Init+0x94>)
 800381a:	2200      	movs	r2, #0
 800381c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800381e:	4814      	ldr	r0, [pc, #80]	; (8003870 <MX_TIM2_Init+0x94>)
 8003820:	f007 fdb6 	bl	800b390 <HAL_TIM_Base_Init>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d001      	beq.n	800382e <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 800382a:	f001 f943 	bl	8004ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800382e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003832:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003834:	f107 0308 	add.w	r3, r7, #8
 8003838:	4619      	mov	r1, r3
 800383a:	480d      	ldr	r0, [pc, #52]	; (8003870 <MX_TIM2_Init+0x94>)
 800383c:	f007 ff9f 	bl	800b77e <HAL_TIM_ConfigClockSource>
 8003840:	4603      	mov	r3, r0
 8003842:	2b00      	cmp	r3, #0
 8003844:	d001      	beq.n	800384a <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 8003846:	f001 f935 	bl	8004ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800384a:	2300      	movs	r3, #0
 800384c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800384e:	2300      	movs	r3, #0
 8003850:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003852:	463b      	mov	r3, r7
 8003854:	4619      	mov	r1, r3
 8003856:	4806      	ldr	r0, [pc, #24]	; (8003870 <MX_TIM2_Init+0x94>)
 8003858:	f008 f9ba 	bl	800bbd0 <HAL_TIMEx_MasterConfigSynchronization>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8003862:	f001 f927 	bl	8004ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003866:	bf00      	nop
 8003868:	3718      	adds	r7, #24
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	2001a498 	.word	0x2001a498

08003874 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800387a:	f107 0308 	add.w	r3, r7, #8
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	605a      	str	r2, [r3, #4]
 8003884:	609a      	str	r2, [r3, #8]
 8003886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003888:	463b      	mov	r3, r7
 800388a:	2200      	movs	r2, #0
 800388c:	601a      	str	r2, [r3, #0]
 800388e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003890:	4b1d      	ldr	r3, [pc, #116]	; (8003908 <MX_TIM3_Init+0x94>)
 8003892:	4a1e      	ldr	r2, [pc, #120]	; (800390c <MX_TIM3_Init+0x98>)
 8003894:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 8003896:	4b1c      	ldr	r3, [pc, #112]	; (8003908 <MX_TIM3_Init+0x94>)
 8003898:	f240 3247 	movw	r2, #839	; 0x347
 800389c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800389e:	4b1a      	ldr	r3, [pc, #104]	; (8003908 <MX_TIM3_Init+0x94>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 80038a4:	4b18      	ldr	r3, [pc, #96]	; (8003908 <MX_TIM3_Init+0x94>)
 80038a6:	220a      	movs	r2, #10
 80038a8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038aa:	4b17      	ldr	r3, [pc, #92]	; (8003908 <MX_TIM3_Init+0x94>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038b0:	4b15      	ldr	r3, [pc, #84]	; (8003908 <MX_TIM3_Init+0x94>)
 80038b2:	2280      	movs	r2, #128	; 0x80
 80038b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80038b6:	4814      	ldr	r0, [pc, #80]	; (8003908 <MX_TIM3_Init+0x94>)
 80038b8:	f007 fd6a 	bl	800b390 <HAL_TIM_Base_Init>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80038c2:	f001 f8f7 	bl	8004ab4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038ca:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80038cc:	f107 0308 	add.w	r3, r7, #8
 80038d0:	4619      	mov	r1, r3
 80038d2:	480d      	ldr	r0, [pc, #52]	; (8003908 <MX_TIM3_Init+0x94>)
 80038d4:	f007 ff53 	bl	800b77e <HAL_TIM_ConfigClockSource>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80038de:	f001 f8e9 	bl	8004ab4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038e2:	2300      	movs	r3, #0
 80038e4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038e6:	2300      	movs	r3, #0
 80038e8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80038ea:	463b      	mov	r3, r7
 80038ec:	4619      	mov	r1, r3
 80038ee:	4806      	ldr	r0, [pc, #24]	; (8003908 <MX_TIM3_Init+0x94>)
 80038f0:	f008 f96e 	bl	800bbd0 <HAL_TIMEx_MasterConfigSynchronization>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80038fa:	f001 f8db 	bl	8004ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80038fe:	bf00      	nop
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	2000eb78 	.word	0x2000eb78
 800390c:	40000400 	.word	0x40000400

08003910 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003914:	4b0d      	ldr	r3, [pc, #52]	; (800394c <MX_TIM10_Init+0x3c>)
 8003916:	4a0e      	ldr	r2, [pc, #56]	; (8003950 <MX_TIM10_Init+0x40>)
 8003918:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 800391a:	4b0c      	ldr	r3, [pc, #48]	; (800394c <MX_TIM10_Init+0x3c>)
 800391c:	22a7      	movs	r2, #167	; 0xa7
 800391e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003920:	4b0a      	ldr	r3, [pc, #40]	; (800394c <MX_TIM10_Init+0x3c>)
 8003922:	2200      	movs	r2, #0
 8003924:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10-1;
 8003926:	4b09      	ldr	r3, [pc, #36]	; (800394c <MX_TIM10_Init+0x3c>)
 8003928:	2209      	movs	r2, #9
 800392a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800392c:	4b07      	ldr	r3, [pc, #28]	; (800394c <MX_TIM10_Init+0x3c>)
 800392e:	2200      	movs	r2, #0
 8003930:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003932:	4b06      	ldr	r3, [pc, #24]	; (800394c <MX_TIM10_Init+0x3c>)
 8003934:	2280      	movs	r2, #128	; 0x80
 8003936:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8003938:	4804      	ldr	r0, [pc, #16]	; (800394c <MX_TIM10_Init+0x3c>)
 800393a:	f007 fd29 	bl	800b390 <HAL_TIM_Base_Init>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 8003944:	f001 f8b6 	bl	8004ab4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8003948:	bf00      	nop
 800394a:	bd80      	pop	{r7, pc}
 800394c:	2000a9d8 	.word	0x2000a9d8
 8003950:	40014400 	.word	0x40014400

08003954 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	607b      	str	r3, [r7, #4]
 800395e:	4b0c      	ldr	r3, [pc, #48]	; (8003990 <MX_DMA_Init+0x3c>)
 8003960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003962:	4a0b      	ldr	r2, [pc, #44]	; (8003990 <MX_DMA_Init+0x3c>)
 8003964:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003968:	6313      	str	r3, [r2, #48]	; 0x30
 800396a:	4b09      	ldr	r3, [pc, #36]	; (8003990 <MX_DMA_Init+0x3c>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003972:	607b      	str	r3, [r7, #4]
 8003974:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8003976:	2200      	movs	r2, #0
 8003978:	2105      	movs	r1, #5
 800397a:	200f      	movs	r0, #15
 800397c:	f002 f9ce 	bl	8005d1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003980:	200f      	movs	r0, #15
 8003982:	f002 f9e7 	bl	8005d54 <HAL_NVIC_EnableIRQ>

}
 8003986:	bf00      	nop
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40023800 	.word	0x40023800

08003994 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08c      	sub	sp, #48	; 0x30
 8003998:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800399a:	f107 031c 	add.w	r3, r7, #28
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	605a      	str	r2, [r3, #4]
 80039a4:	609a      	str	r2, [r3, #8]
 80039a6:	60da      	str	r2, [r3, #12]
 80039a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80039aa:	2300      	movs	r3, #0
 80039ac:	61bb      	str	r3, [r7, #24]
 80039ae:	4bb2      	ldr	r3, [pc, #712]	; (8003c78 <MX_GPIO_Init+0x2e4>)
 80039b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b2:	4ab1      	ldr	r2, [pc, #708]	; (8003c78 <MX_GPIO_Init+0x2e4>)
 80039b4:	f043 0310 	orr.w	r3, r3, #16
 80039b8:	6313      	str	r3, [r2, #48]	; 0x30
 80039ba:	4baf      	ldr	r3, [pc, #700]	; (8003c78 <MX_GPIO_Init+0x2e4>)
 80039bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039be:	f003 0310 	and.w	r3, r3, #16
 80039c2:	61bb      	str	r3, [r7, #24]
 80039c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039c6:	2300      	movs	r3, #0
 80039c8:	617b      	str	r3, [r7, #20]
 80039ca:	4bab      	ldr	r3, [pc, #684]	; (8003c78 <MX_GPIO_Init+0x2e4>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	4aaa      	ldr	r2, [pc, #680]	; (8003c78 <MX_GPIO_Init+0x2e4>)
 80039d0:	f043 0304 	orr.w	r3, r3, #4
 80039d4:	6313      	str	r3, [r2, #48]	; 0x30
 80039d6:	4ba8      	ldr	r3, [pc, #672]	; (8003c78 <MX_GPIO_Init+0x2e4>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80039e2:	2300      	movs	r3, #0
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	4ba4      	ldr	r3, [pc, #656]	; (8003c78 <MX_GPIO_Init+0x2e4>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	4aa3      	ldr	r2, [pc, #652]	; (8003c78 <MX_GPIO_Init+0x2e4>)
 80039ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039f0:	6313      	str	r3, [r2, #48]	; 0x30
 80039f2:	4ba1      	ldr	r3, [pc, #644]	; (8003c78 <MX_GPIO_Init+0x2e4>)
 80039f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039fa:	613b      	str	r3, [r7, #16]
 80039fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039fe:	2300      	movs	r3, #0
 8003a00:	60fb      	str	r3, [r7, #12]
 8003a02:	4b9d      	ldr	r3, [pc, #628]	; (8003c78 <MX_GPIO_Init+0x2e4>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	4a9c      	ldr	r2, [pc, #624]	; (8003c78 <MX_GPIO_Init+0x2e4>)
 8003a08:	f043 0301 	orr.w	r3, r3, #1
 8003a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a0e:	4b9a      	ldr	r3, [pc, #616]	; (8003c78 <MX_GPIO_Init+0x2e4>)
 8003a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	60fb      	str	r3, [r7, #12]
 8003a18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60bb      	str	r3, [r7, #8]
 8003a1e:	4b96      	ldr	r3, [pc, #600]	; (8003c78 <MX_GPIO_Init+0x2e4>)
 8003a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a22:	4a95      	ldr	r2, [pc, #596]	; (8003c78 <MX_GPIO_Init+0x2e4>)
 8003a24:	f043 0302 	orr.w	r3, r3, #2
 8003a28:	6313      	str	r3, [r2, #48]	; 0x30
 8003a2a:	4b93      	ldr	r3, [pc, #588]	; (8003c78 <MX_GPIO_Init+0x2e4>)
 8003a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a2e:	f003 0302 	and.w	r3, r3, #2
 8003a32:	60bb      	str	r3, [r7, #8]
 8003a34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a36:	2300      	movs	r3, #0
 8003a38:	607b      	str	r3, [r7, #4]
 8003a3a:	4b8f      	ldr	r3, [pc, #572]	; (8003c78 <MX_GPIO_Init+0x2e4>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	4a8e      	ldr	r2, [pc, #568]	; (8003c78 <MX_GPIO_Init+0x2e4>)
 8003a40:	f043 0308 	orr.w	r3, r3, #8
 8003a44:	6313      	str	r3, [r2, #48]	; 0x30
 8003a46:	4b8c      	ldr	r3, [pc, #560]	; (8003c78 <MX_GPIO_Init+0x2e4>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	607b      	str	r3, [r7, #4]
 8003a50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 8003a52:	2200      	movs	r2, #0
 8003a54:	217c      	movs	r1, #124	; 0x7c
 8003a56:	4889      	ldr	r0, [pc, #548]	; (8003c7c <MX_GPIO_Init+0x2e8>)
 8003a58:	f002 ff28 	bl	80068ac <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	2101      	movs	r1, #1
 8003a60:	4887      	ldr	r0, [pc, #540]	; (8003c80 <MX_GPIO_Init+0x2ec>)
 8003a62:	f002 ff23 	bl	80068ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AM2302_Pin|CS_microSD_Pin, GPIO_PIN_RESET);
 8003a66:	2200      	movs	r2, #0
 8003a68:	2142      	movs	r1, #66	; 0x42
 8003a6a:	4885      	ldr	r0, [pc, #532]	; (8003c80 <MX_GPIO_Init+0x2ec>)
 8003a6c:	f002 ff1e 	bl	80068ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003a70:	2200      	movs	r2, #0
 8003a72:	f24f 0110 	movw	r1, #61456	; 0xf010
 8003a76:	4883      	ldr	r0, [pc, #524]	; (8003c84 <MX_GPIO_Init+0x2f0>)
 8003a78:	f002 ff18 	bl	80068ac <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8003a82:	4881      	ldr	r0, [pc, #516]	; (8003c88 <MX_GPIO_Init+0x2f4>)
 8003a84:	f002 ff12 	bl	80068ac <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_I2C_SPI_Pin CS_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin;
 8003a88:	231c      	movs	r3, #28
 8003a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a94:	2300      	movs	r3, #0
 8003a96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a98:	f107 031c 	add.w	r3, r7, #28
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	4877      	ldr	r0, [pc, #476]	; (8003c7c <MX_GPIO_Init+0x2e8>)
 8003aa0:	f002 fd68 	bl	8006574 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = RESET_LCD_Pin|DC_LCD_Pin;
 8003aa4:	2360      	movs	r3, #96	; 0x60
 8003aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aac:	2300      	movs	r3, #0
 8003aae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003ab4:	f107 031c 	add.w	r3, r7, #28
 8003ab8:	4619      	mov	r1, r3
 8003aba:	4870      	ldr	r0, [pc, #448]	; (8003c7c <MX_GPIO_Init+0x2e8>)
 8003abc:	f002 fd5a 	bl	8006574 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8003ac0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ac4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003ace:	f107 031c 	add.w	r3, r7, #28
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	486a      	ldr	r0, [pc, #424]	; (8003c80 <MX_GPIO_Init+0x2ec>)
 8003ad6:	f002 fd4d 	bl	8006574 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin AM2302_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|AM2302_Pin;
 8003ada:	2303      	movs	r3, #3
 8003adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003aea:	f107 031c 	add.w	r3, r7, #28
 8003aee:	4619      	mov	r1, r3
 8003af0:	4863      	ldr	r0, [pc, #396]	; (8003c80 <MX_GPIO_Init+0x2ec>)
 8003af2:	f002 fd3f 	bl	8006574 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003af6:	2308      	movs	r3, #8
 8003af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003afa:	2302      	movs	r3, #2
 8003afc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b02:	2300      	movs	r3, #0
 8003b04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003b06:	2305      	movs	r3, #5
 8003b08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003b0a:	f107 031c 	add.w	r3, r7, #28
 8003b0e:	4619      	mov	r1, r3
 8003b10:	485b      	ldr	r0, [pc, #364]	; (8003c80 <MX_GPIO_Init+0x2ec>)
 8003b12:	f002 fd2f 	bl	8006574 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003b16:	2301      	movs	r3, #1
 8003b18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003b1a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b20:	2300      	movs	r3, #0
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003b24:	f107 031c 	add.w	r3, r7, #28
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4858      	ldr	r0, [pc, #352]	; (8003c8c <MX_GPIO_Init+0x2f8>)
 8003b2c:	f002 fd22 	bl	8006574 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003b30:	2310      	movs	r3, #16
 8003b32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b34:	2302      	movs	r3, #2
 8003b36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003b40:	2306      	movs	r3, #6
 8003b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003b44:	f107 031c 	add.w	r3, r7, #28
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4850      	ldr	r0, [pc, #320]	; (8003c8c <MX_GPIO_Init+0x2f8>)
 8003b4c:	f002 fd12 	bl	8006574 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003b50:	2304      	movs	r3, #4
 8003b52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b54:	2300      	movs	r3, #0
 8003b56:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b58:	2300      	movs	r3, #0
 8003b5a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003b5c:	f107 031c 	add.w	r3, r7, #28
 8003b60:	4619      	mov	r1, r3
 8003b62:	4849      	ldr	r0, [pc, #292]	; (8003c88 <MX_GPIO_Init+0x2f4>)
 8003b64:	f002 fd06 	bl	8006574 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8003b68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b6e:	2302      	movs	r3, #2
 8003b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b76:	2300      	movs	r3, #0
 8003b78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003b7a:	2305      	movs	r3, #5
 8003b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8003b7e:	f107 031c 	add.w	r3, r7, #28
 8003b82:	4619      	mov	r1, r3
 8003b84:	4840      	ldr	r0, [pc, #256]	; (8003c88 <MX_GPIO_Init+0x2f4>)
 8003b86:	f002 fcf5 	bl	8006574 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003b8a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8003b8e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b90:	2301      	movs	r3, #1
 8003b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b94:	2300      	movs	r3, #0
 8003b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003b9c:	f107 031c 	add.w	r3, r7, #28
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4838      	ldr	r0, [pc, #224]	; (8003c84 <MX_GPIO_Init+0x2f0>)
 8003ba4:	f002 fce6 	bl	8006574 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_microSD_Pin */
  GPIO_InitStruct.Pin = CS_microSD_Pin;
 8003ba8:	2340      	movs	r3, #64	; 0x40
 8003baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bac:	2301      	movs	r3, #1
 8003bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_microSD_GPIO_Port, &GPIO_InitStruct);
 8003bb8:	f107 031c 	add.w	r3, r7, #28
 8003bbc:	4619      	mov	r1, r3
 8003bbe:	4830      	ldr	r0, [pc, #192]	; (8003c80 <MX_GPIO_Init+0x2ec>)
 8003bc0:	f002 fcd8 	bl	8006574 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003bc4:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003bc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bca:	2302      	movs	r3, #2
 8003bcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003bd6:	2306      	movs	r3, #6
 8003bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003bda:	f107 031c 	add.w	r3, r7, #28
 8003bde:	4619      	mov	r1, r3
 8003be0:	4827      	ldr	r0, [pc, #156]	; (8003c80 <MX_GPIO_Init+0x2ec>)
 8003be2:	f002 fcc7 	bl	8006574 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003be6:	2320      	movs	r3, #32
 8003be8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bea:	2300      	movs	r3, #0
 8003bec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003bf2:	f107 031c 	add.w	r3, r7, #28
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	4822      	ldr	r0, [pc, #136]	; (8003c84 <MX_GPIO_Init+0x2f0>)
 8003bfa:	f002 fcbb 	bl	8006574 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003bfe:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003c02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c04:	2312      	movs	r3, #18
 8003c06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003c10:	2304      	movs	r3, #4
 8003c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c14:	f107 031c 	add.w	r3, r7, #28
 8003c18:	4619      	mov	r1, r3
 8003c1a:	481b      	ldr	r0, [pc, #108]	; (8003c88 <MX_GPIO_Init+0x2f4>)
 8003c1c:	f002 fcaa 	bl	8006574 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8003c20:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c26:	2301      	movs	r3, #1
 8003c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c32:	f107 031c 	add.w	r3, r7, #28
 8003c36:	4619      	mov	r1, r3
 8003c38:	4813      	ldr	r0, [pc, #76]	; (8003c88 <MX_GPIO_Init+0x2f4>)
 8003c3a:	f002 fc9b 	bl	8006574 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c42:	2300      	movs	r3, #0
 8003c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c46:	2300      	movs	r3, #0
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8003c4a:	f107 031c 	add.w	r3, r7, #28
 8003c4e:	4619      	mov	r1, r3
 8003c50:	480a      	ldr	r0, [pc, #40]	; (8003c7c <MX_GPIO_Init+0x2e8>)
 8003c52:	f002 fc8f 	bl	8006574 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003c56:	2302      	movs	r3, #2
 8003c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003c5a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003c5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c60:	2300      	movs	r3, #0
 8003c62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003c64:	f107 031c 	add.w	r3, r7, #28
 8003c68:	4619      	mov	r1, r3
 8003c6a:	4804      	ldr	r0, [pc, #16]	; (8003c7c <MX_GPIO_Init+0x2e8>)
 8003c6c:	f002 fc82 	bl	8006574 <HAL_GPIO_Init>

}
 8003c70:	bf00      	nop
 8003c72:	3730      	adds	r7, #48	; 0x30
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	40021000 	.word	0x40021000
 8003c80:	40020800 	.word	0x40020800
 8003c84:	40020c00 	.word	0x40020c00
 8003c88:	40020400 	.word	0x40020400
 8003c8c:	40020000 	.word	0x40020000

08003c90 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003c98:	f012 fb8c 	bl	80163b4 <MX_USB_DEVICE_Init>

  for(;;)
  {
//	  osDelay(1000);
//	  ILI9341_Draw_Text( "TEST 1234567890 !!!", 5,0, WHITE, 2, BLACK);
	  osDelay(10);
 8003c9c:	200a      	movs	r0, #10
 8003c9e:	f00e fd1d 	bl	80126dc <osDelay>
 8003ca2:	e7fb      	b.n	8003c9c <StartDefaultTask+0xc>

08003ca4 <Start_Blue_LED_Blink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Blue_LED_Blink */
void Start_Blue_LED_Blink(void *argument)
{
 8003ca4:	b5b0      	push	{r4, r5, r7, lr}
 8003ca6:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 8003caa:	af00      	add	r7, sp, #0
 8003cac:	1d3b      	adds	r3, r7, #4
 8003cae:	6018      	str	r0, [r3, #0]
	 * For STM32F407 discovery dev board needs remove R26, and connect battery to VBAT (near R26).
	 * Also, need solder the LF Crystal and two capacitors.
	 */

	// 1. Set time
	  RTC_TimeTypeDef sTime = {0};
 8003cb0:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	601a      	str	r2, [r3, #0]
 8003cb8:	605a      	str	r2, [r3, #4]
 8003cba:	609a      	str	r2, [r3, #8]
 8003cbc:	60da      	str	r2, [r3, #12]
 8003cbe:	611a      	str	r2, [r3, #16]
//	  sTime.Minutes = 33;
//	  sTime.Seconds = 00;
//	  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
	  // Set date

	  RTC_DateTypeDef sDate = {0};
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
//	  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
	  /////////////////////////////////////////////////////////////////////

	QUEUE_t msg;												// Make a queue

	char buff[50] = {0};
 8003cc6:	f107 0314 	add.w	r3, r7, #20
 8003cca:	2200      	movs	r2, #0
 8003ccc:	601a      	str	r2, [r3, #0]
 8003cce:	3304      	adds	r3, #4
 8003cd0:	222e      	movs	r2, #46	; 0x2e
 8003cd2:	2100      	movs	r1, #0
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f013 f9f1 	bl	80170bc <memset>
	char buf[5] = {0};
 8003cda:	f107 030c 	add.w	r3, r7, #12
 8003cde:	2200      	movs	r2, #0
 8003ce0:	601a      	str	r2, [r3, #0]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	711a      	strb	r2, [r3, #4]
	char str_end_of_line[4] = {'\r','\n','\0'};
 8003ce6:	f107 0308 	add.w	r3, r7, #8
 8003cea:	f640 220d 	movw	r2, #2573	; 0xa0d
 8003cee:	601a      	str	r2, [r3, #0]
	for(;;)
	{
//		speed_test_LCD(5);

		// Blue LED blink
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003cf6:	4883      	ldr	r0, [pc, #524]	; (8003f04 <Start_Blue_LED_Blink+0x260>)
 8003cf8:	f002 fdd8 	bl	80068ac <HAL_GPIO_WritePin>
		osDelay(100);
 8003cfc:	2064      	movs	r0, #100	; 0x64
 8003cfe:	f00e fced 	bl	80126dc <osDelay>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET);
 8003d02:	2200      	movs	r2, #0
 8003d04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d08:	487e      	ldr	r0, [pc, #504]	; (8003f04 <Start_Blue_LED_Blink+0x260>)
 8003d0a:	f002 fdcf 	bl	80068ac <HAL_GPIO_WritePin>
		osDelay(900);
 8003d0e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8003d12:	f00e fce3 	bl	80126dc <osDelay>

		// RTC part
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);						// Get time (write in sDime struct)
 8003d16:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	487a      	ldr	r0, [pc, #488]	; (8003f08 <Start_Blue_LED_Blink+0x264>)
 8003d20:	f006 f95b 	bl	8009fda <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);						// Get data (write in sDime struct)
 8003d24:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8003d28:	2200      	movs	r2, #0
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4876      	ldr	r0, [pc, #472]	; (8003f08 <Start_Blue_LED_Blink+0x264>)
 8003d2e:	f006 fa59 	bl	800a1e4 <HAL_RTC_GetDate>

		memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
 8003d32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d3a:	2100      	movs	r1, #0
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f013 f9bd 	bl	80170bc <memset>
		memset(buff, 0, sizeof(buff));
 8003d42:	f107 0314 	add.w	r3, r7, #20
 8003d46:	2232      	movs	r2, #50	; 0x32
 8003d48:	2100      	movs	r1, #0
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f013 f9b6 	bl	80170bc <memset>

		strcat(msg.Buf, "RTC DATA AND TIME >>>>>>>    " );
 8003d50:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7fc fa3b 	bl	80001d0 <strlen>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d62:	4413      	add	r3, r2
 8003d64:	4a69      	ldr	r2, [pc, #420]	; (8003f0c <Start_Blue_LED_Blink+0x268>)
 8003d66:	461d      	mov	r5, r3
 8003d68:	4614      	mov	r4, r2
 8003d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d6c:	6028      	str	r0, [r5, #0]
 8003d6e:	6069      	str	r1, [r5, #4]
 8003d70:	60aa      	str	r2, [r5, #8]
 8003d72:	60eb      	str	r3, [r5, #12]
 8003d74:	cc07      	ldmia	r4!, {r0, r1, r2}
 8003d76:	6128      	str	r0, [r5, #16]
 8003d78:	6169      	str	r1, [r5, #20]
 8003d7a:	61aa      	str	r2, [r5, #24]
 8003d7c:	8823      	ldrh	r3, [r4, #0]
 8003d7e:	83ab      	strh	r3, [r5, #28]

		// Date
		itoa(sDate.Year, buf, 10);
 8003d80:	f897 344b 	ldrb.w	r3, [r7, #1099]	; 0x44b
 8003d84:	4618      	mov	r0, r3
 8003d86:	f107 030c 	add.w	r3, r7, #12
 8003d8a:	220a      	movs	r2, #10
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	f013 f971 	bl	8017074 <itoa>
		strcat(msg.Buf, buf);
 8003d92:	f107 020c 	add.w	r2, r7, #12
 8003d96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f013 ff86 	bl	8017cae <strcat>

		itoa(sDate.Month, buf, 10);
 8003da2:	f897 3449 	ldrb.w	r3, [r7, #1097]	; 0x449
 8003da6:	4618      	mov	r0, r3
 8003da8:	f107 030c 	add.w	r3, r7, #12
 8003dac:	220a      	movs	r2, #10
 8003dae:	4619      	mov	r1, r3
 8003db0:	f013 f960 	bl	8017074 <itoa>
		strcat(msg.Buf, "-");
 8003db4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fc fa09 	bl	80001d0 <strlen>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003dc6:	4413      	add	r3, r2
 8003dc8:	4951      	ldr	r1, [pc, #324]	; (8003f10 <Start_Blue_LED_Blink+0x26c>)
 8003dca:	461a      	mov	r2, r3
 8003dcc:	460b      	mov	r3, r1
 8003dce:	881b      	ldrh	r3, [r3, #0]
 8003dd0:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003dd2:	f107 020c 	add.w	r2, r7, #12
 8003dd6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003dda:	4611      	mov	r1, r2
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f013 ff66 	bl	8017cae <strcat>

		itoa(sDate.Date, buf, 10);
 8003de2:	f897 344a 	ldrb.w	r3, [r7, #1098]	; 0x44a
 8003de6:	4618      	mov	r0, r3
 8003de8:	f107 030c 	add.w	r3, r7, #12
 8003dec:	220a      	movs	r2, #10
 8003dee:	4619      	mov	r1, r3
 8003df0:	f013 f940 	bl	8017074 <itoa>
		strcat(msg.Buf, "-");
 8003df4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f7fc f9e9 	bl	80001d0 <strlen>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	461a      	mov	r2, r3
 8003e02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e06:	4413      	add	r3, r2
 8003e08:	4941      	ldr	r1, [pc, #260]	; (8003f10 <Start_Blue_LED_Blink+0x26c>)
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	881b      	ldrh	r3, [r3, #0]
 8003e10:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003e12:	f107 020c 	add.w	r2, r7, #12
 8003e16:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e1a:	4611      	mov	r1, r2
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f013 ff46 	bl	8017cae <strcat>

		strcat(msg.Buf, " | ");
 8003e22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fc f9d2 	bl	80001d0 <strlen>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	461a      	mov	r2, r3
 8003e30:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e34:	4413      	add	r3, r2
 8003e36:	4a37      	ldr	r2, [pc, #220]	; (8003f14 <Start_Blue_LED_Blink+0x270>)
 8003e38:	6810      	ldr	r0, [r2, #0]
 8003e3a:	6018      	str	r0, [r3, #0]

		// Time
		itoa(sTime.Hours, buf, 10);
 8003e3c:	f897 344c 	ldrb.w	r3, [r7, #1100]	; 0x44c
 8003e40:	4618      	mov	r0, r3
 8003e42:	f107 030c 	add.w	r3, r7, #12
 8003e46:	220a      	movs	r2, #10
 8003e48:	4619      	mov	r1, r3
 8003e4a:	f013 f913 	bl	8017074 <itoa>
		strcat(msg.Buf, buf);
 8003e4e:	f107 020c 	add.w	r2, r7, #12
 8003e52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e56:	4611      	mov	r1, r2
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f013 ff28 	bl	8017cae <strcat>

		itoa(sTime.Minutes, buf, 10);
 8003e5e:	f897 344d 	ldrb.w	r3, [r7, #1101]	; 0x44d
 8003e62:	4618      	mov	r0, r3
 8003e64:	f107 030c 	add.w	r3, r7, #12
 8003e68:	220a      	movs	r2, #10
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	f013 f902 	bl	8017074 <itoa>
		strcat(msg.Buf, ":");
 8003e70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e74:	4618      	mov	r0, r3
 8003e76:	f7fc f9ab 	bl	80001d0 <strlen>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	461a      	mov	r2, r3
 8003e7e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e82:	4413      	add	r3, r2
 8003e84:	4924      	ldr	r1, [pc, #144]	; (8003f18 <Start_Blue_LED_Blink+0x274>)
 8003e86:	461a      	mov	r2, r3
 8003e88:	460b      	mov	r3, r1
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003e8e:	f107 020c 	add.w	r2, r7, #12
 8003e92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e96:	4611      	mov	r1, r2
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f013 ff08 	bl	8017cae <strcat>

		itoa(sTime.Seconds, buf, 10);
 8003e9e:	f897 344e 	ldrb.w	r3, [r7, #1102]	; 0x44e
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f107 030c 	add.w	r3, r7, #12
 8003ea8:	220a      	movs	r2, #10
 8003eaa:	4619      	mov	r1, r3
 8003eac:	f013 f8e2 	bl	8017074 <itoa>
		strcat(msg.Buf, ":");
 8003eb0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7fc f98b 	bl	80001d0 <strlen>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ec2:	4413      	add	r3, r2
 8003ec4:	4914      	ldr	r1, [pc, #80]	; (8003f18 <Start_Blue_LED_Blink+0x274>)
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	460b      	mov	r3, r1
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003ece:	f107 020c 	add.w	r2, r7, #12
 8003ed2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ed6:	4611      	mov	r1, r2
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f013 fee8 	bl	8017cae <strcat>

		strcat(msg.Buf, str_end_of_line);
 8003ede:	f107 0208 	add.w	r2, r7, #8
 8003ee2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f013 fee0 	bl	8017cae <strcat>
		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 8003eee:	4b0b      	ldr	r3, [pc, #44]	; (8003f1c <Start_Blue_LED_Blink+0x278>)
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003ef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003efa:	2200      	movs	r2, #0
 8003efc:	f00e fdc0 	bl	8012a80 <osMessageQueuePut>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 8003f00:	e6f6      	b.n	8003cf0 <Start_Blue_LED_Blink+0x4c>
 8003f02:	bf00      	nop
 8003f04:	40020c00 	.word	0x40020c00
 8003f08:	200197a8 	.word	0x200197a8
 8003f0c:	0801a1f0 	.word	0x0801a1f0
 8003f10:	0801a210 	.word	0x0801a210
 8003f14:	0801a214 	.word	0x0801a214
 8003f18:	0801a218 	.word	0x0801a218
 8003f1c:	2000b374 	.word	0x2000b374

08003f20 <Start_Show_Resources>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Show_Resources */
void Start_Show_Resources(void *argument)
{
 8003f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f22:	f2ad 4d84 	subw	sp, sp, #1156	; 0x484
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	1d3b      	adds	r3, r7, #4
 8003f2a:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_Show_Resources */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(5000);												// Every 5 second task management will print data
 8003f2c:	f241 3088 	movw	r0, #5000	; 0x1388
 8003f30:	f00e fbd4 	bl	80126dc <osDelay>

	  char str_end_of_line[3] = {'\r','\n'};
 8003f34:	4a8d      	ldr	r2, [pc, #564]	; (800416c <Start_Show_Resources+0x24c>)
 8003f36:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8003f3a:	6812      	ldr	r2, [r2, #0]
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	8019      	strh	r1, [r3, #0]
 8003f40:	3302      	adds	r3, #2
 8003f42:	0c12      	lsrs	r2, r2, #16
 8003f44:	701a      	strb	r2, [r3, #0]
	  char str_sig = '-';
 8003f46:	232d      	movs	r3, #45	; 0x2d
 8003f48:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
	  char buff[10] = {0};
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8003f52:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 8003f56:	2200      	movs	r2, #0
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	809a      	strh	r2, [r3, #4]

	  QUEUE_t msg;												// Make a queue
	  memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 8003f5c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f60:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f64:	2100      	movs	r1, #0
 8003f66:	4618      	mov	r0, r3
 8003f68:	f013 f8a8 	bl	80170bc <memset>
	  strcat(msg.Buf, ">>>>> Free heap memory: ");				// Add string to another (Total heap)
 8003f6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f70:	4618      	mov	r0, r3
 8003f72:	f7fc f92d 	bl	80001d0 <strlen>
 8003f76:	4603      	mov	r3, r0
 8003f78:	461a      	mov	r2, r3
 8003f7a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f7e:	4413      	add	r3, r2
 8003f80:	4a7b      	ldr	r2, [pc, #492]	; (8004170 <Start_Show_Resources+0x250>)
 8003f82:	461d      	mov	r5, r3
 8003f84:	4614      	mov	r4, r2
 8003f86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f88:	6028      	str	r0, [r5, #0]
 8003f8a:	6069      	str	r1, [r5, #4]
 8003f8c:	60aa      	str	r2, [r5, #8]
 8003f8e:	60eb      	str	r3, [r5, #12]
 8003f90:	cc03      	ldmia	r4!, {r0, r1}
 8003f92:	6128      	str	r0, [r5, #16]
 8003f94:	6169      	str	r1, [r5, #20]
 8003f96:	7823      	ldrb	r3, [r4, #0]
 8003f98:	762b      	strb	r3, [r5, #24]

	  freemem = xPortGetFreeHeapSize();							// Function return how many free memory.
 8003f9a:	f012 f943 	bl	8016224 <xPortGetFreeHeapSize>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	461a      	mov	r2, r3
 8003fa2:	4b74      	ldr	r3, [pc, #464]	; (8004174 <Start_Show_Resources+0x254>)
 8003fa4:	601a      	str	r2, [r3, #0]
	  itoa(freemem, buff, 10);
 8003fa6:	4b73      	ldr	r3, [pc, #460]	; (8004174 <Start_Show_Resources+0x254>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8003fae:	220a      	movs	r2, #10
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f013 f85f 	bl	8017074 <itoa>
	  strcat(msg.Buf, buff);
 8003fb6:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8003fba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003fbe:	4611      	mov	r1, r2
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f013 fe74 	bl	8017cae <strcat>
	  strcat(msg.Buf, str_end_of_line);
 8003fc6:	f207 4274 	addw	r2, r7, #1140	; 0x474
 8003fca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003fce:	4611      	mov	r1, r2
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f013 fe6c 	bl	8017cae <strcat>

	  // add a hat
	  strcat(msg.Buf, "| TASK NAME           | STATUS |   PRIOR	|  STACK  |    NUM  |\n\r\0");
 8003fd6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fc f8f8 	bl	80001d0 <strlen>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003fe8:	4413      	add	r3, r2
 8003fea:	4a63      	ldr	r2, [pc, #396]	; (8004178 <Start_Show_Resources+0x258>)
 8003fec:	4618      	mov	r0, r3
 8003fee:	4611      	mov	r1, r2
 8003ff0:	2341      	movs	r3, #65	; 0x41
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	f013 f854 	bl	80170a0 <memcpy>

	  vTaskList(str_management_memory_str);						// Fill in str_management_memory_str array management task information
 8003ff8:	4860      	ldr	r0, [pc, #384]	; (800417c <Start_Show_Resources+0x25c>)
 8003ffa:	f011 f8c9 	bl	8015190 <vTaskList>

	  // Finding the  end of string
	  uint16_t buffer_size = 0;
 8003ffe:	2300      	movs	r3, #0
 8004000:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  while(msg.Buf[buffer_size] != '\0')
 8004004:	e004      	b.n	8004010 <Start_Show_Resources+0xf0>
	  {
	  	buffer_size ++;
 8004006:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 800400a:	3301      	adds	r3, #1
 800400c:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  while(msg.Buf[buffer_size] != '\0')
 8004010:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 8004014:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004018:	5cd3      	ldrb	r3, [r2, r3]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d1f3      	bne.n	8004006 <Start_Show_Resources+0xe6>
	  }

	  // Add str_management_memory_str to queue string
	  int i = 0;
 800401e:	2300      	movs	r3, #0
 8004020:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8004024:	2300      	movs	r3, #0
 8004026:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 800402a:	e011      	b.n	8004050 <Start_Show_Resources+0x130>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 800402c:	f8b7 247e 	ldrh.w	r2, [r7, #1150]	; 0x47e
 8004030:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8004034:	4413      	add	r3, r2
 8004036:	4951      	ldr	r1, [pc, #324]	; (800417c <Start_Show_Resources+0x25c>)
 8004038:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 800403c:	440a      	add	r2, r1
 800403e:	7811      	ldrb	r1, [r2, #0]
 8004040:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8004044:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8004046:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800404a:	3301      	adds	r3, #1
 800404c:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8004050:	4a4a      	ldr	r2, [pc, #296]	; (800417c <Start_Show_Resources+0x25c>)
 8004052:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8004056:	4413      	add	r3, r2
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1e6      	bne.n	800402c <Start_Show_Resources+0x10c>
	  }

	  // add a hat
	  char str_line[] = {"-----------------------\n\r"};
 800405e:	4b48      	ldr	r3, [pc, #288]	; (8004180 <Start_Show_Resources+0x260>)
 8004060:	f207 444c 	addw	r4, r7, #1100	; 0x44c
 8004064:	461d      	mov	r5, r3
 8004066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800406a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800406e:	c403      	stmia	r4!, {r0, r1}
 8004070:	8022      	strh	r2, [r4, #0]
	  char str_head_2[] = {"| TASK NAME           | ABS TIME |              TASK TIME% |\n\r"};
 8004072:	f107 030c 	add.w	r3, r7, #12
 8004076:	4a43      	ldr	r2, [pc, #268]	; (8004184 <Start_Show_Resources+0x264>)
 8004078:	461c      	mov	r4, r3
 800407a:	4615      	mov	r5, r2
 800407c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800407e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004080:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004084:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004086:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004088:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800408c:	c407      	stmia	r4!, {r0, r1, r2}
 800408e:	8023      	strh	r3, [r4, #0]
 8004090:	3402      	adds	r4, #2
 8004092:	0c1b      	lsrs	r3, r3, #16
 8004094:	7023      	strb	r3, [r4, #0]
	  strcat(msg.Buf, str_line);
 8004096:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 800409a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800409e:	4611      	mov	r1, r2
 80040a0:	4618      	mov	r0, r3
 80040a2:	f013 fe04 	bl	8017cae <strcat>
	  strcat(msg.Buf, str_head_2);
 80040a6:	f107 020c 	add.w	r2, r7, #12
 80040aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80040ae:	4611      	mov	r1, r2
 80040b0:	4618      	mov	r0, r3
 80040b2:	f013 fdfc 	bl	8017cae <strcat>

	  memset(str_management_memory_str, 0, sizeof(str_management_memory_str));	// Clean buffer
 80040b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80040ba:	2100      	movs	r1, #0
 80040bc:	482f      	ldr	r0, [pc, #188]	; (800417c <Start_Show_Resources+0x25c>)
 80040be:	f012 fffd 	bl	80170bc <memset>

	  vTaskGetRunTimeStats(str_management_memory_str);							// Function return how much time all functions running.
 80040c2:	482e      	ldr	r0, [pc, #184]	; (800417c <Start_Show_Resources+0x25c>)
 80040c4:	f011 f8fa 	bl	80152bc <vTaskGetRunTimeStats>

	  buffer_size = buffer_size + i + (sizeof(str_line)-1) + (sizeof(str_head_2)-1);           // НЕ ВИВОДИТЬ СТРОКУ !!!!!!!!!!!!!!!!!! <<<<<<<<<<<<<<<<<<<
 80040c8:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 80040cc:	b29a      	uxth	r2, r3
 80040ce:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 80040d2:	4413      	add	r3, r2
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3357      	adds	r3, #87	; 0x57
 80040d8:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 80040dc:	2300      	movs	r3, #0
 80040de:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 80040e2:	e011      	b.n	8004108 <Start_Show_Resources+0x1e8>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 80040e4:	f8b7 247e 	ldrh.w	r2, [r7, #1150]	; 0x47e
 80040e8:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 80040ec:	4413      	add	r3, r2
 80040ee:	4923      	ldr	r1, [pc, #140]	; (800417c <Start_Show_Resources+0x25c>)
 80040f0:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 80040f4:	440a      	add	r2, r1
 80040f6:	7811      	ldrb	r1, [r2, #0]
 80040f8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80040fc:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 80040fe:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8004102:	3301      	adds	r3, #1
 8004104:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8004108:	4a1c      	ldr	r2, [pc, #112]	; (800417c <Start_Show_Resources+0x25c>)
 800410a:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800410e:	4413      	add	r3, r2
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d1e6      	bne.n	80040e4 <Start_Show_Resources+0x1c4>
	  }
	  strcat(msg.Buf, "#########################################\n\r");
 8004116:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800411a:	4618      	mov	r0, r3
 800411c:	f7fc f858 	bl	80001d0 <strlen>
 8004120:	4603      	mov	r3, r0
 8004122:	461a      	mov	r2, r3
 8004124:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004128:	4413      	add	r3, r2
 800412a:	4a17      	ldr	r2, [pc, #92]	; (8004188 <Start_Show_Resources+0x268>)
 800412c:	4614      	mov	r4, r2
 800412e:	469c      	mov	ip, r3
 8004130:	f104 0e20 	add.w	lr, r4, #32
 8004134:	4665      	mov	r5, ip
 8004136:	4626      	mov	r6, r4
 8004138:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800413a:	6028      	str	r0, [r5, #0]
 800413c:	6069      	str	r1, [r5, #4]
 800413e:	60aa      	str	r2, [r5, #8]
 8004140:	60eb      	str	r3, [r5, #12]
 8004142:	3410      	adds	r4, #16
 8004144:	f10c 0c10 	add.w	ip, ip, #16
 8004148:	4574      	cmp	r4, lr
 800414a:	d1f3      	bne.n	8004134 <Start_Show_Resources+0x214>
 800414c:	4665      	mov	r5, ip
 800414e:	4623      	mov	r3, r4
 8004150:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004152:	6028      	str	r0, [r5, #0]
 8004154:	6069      	str	r1, [r5, #4]
 8004156:	60aa      	str	r2, [r5, #8]

	  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 8004158:	4b0c      	ldr	r3, [pc, #48]	; (800418c <Start_Show_Resources+0x26c>)
 800415a:	6818      	ldr	r0, [r3, #0]
 800415c:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8004160:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004164:	2200      	movs	r2, #0
 8004166:	f00e fc8b 	bl	8012a80 <osMessageQueuePut>
  {
 800416a:	e6df      	b.n	8003f2c <Start_Show_Resources+0xc>
 800416c:	0801a2a8 	.word	0x0801a2a8
 8004170:	0801a21c 	.word	0x0801a21c
 8004174:	200007a0 	.word	0x200007a0
 8004178:	0801a238 	.word	0x0801a238
 800417c:	200003b8 	.word	0x200003b8
 8004180:	0801a2ac 	.word	0x0801a2ac
 8004184:	0801a2c8 	.word	0x0801a2c8
 8004188:	0801a27c 	.word	0x0801a27c
 800418c:	2000b374 	.word	0x2000b374

08004190 <Start_UART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_UART_Task */
void Start_UART_Task(void *argument)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8004196:	af00      	add	r7, sp, #0
 8004198:	1d3b      	adds	r3, r7, #4
 800419a:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  QUEUE_t msg;
  for(;;)
  {
	// osMessageQueueGet waiting data on a queue (If data are in queue so print it)
	osMessageQueueGet(UARTQueueHandle, &msg, 0, osWaitForever);			// Write for data on queue
 800419c:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <Start_UART_Task+0x58>)
 800419e:	6818      	ldr	r0, [r3, #0]
 80041a0:	f107 010c 	add.w	r1, r7, #12
 80041a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041a8:	2200      	movs	r2, #0
 80041aa:	f00e fcc9 	bl	8012b40 <osMessageQueueGet>
	// Counting how many characters will be transmitted
	uint16_t buffer_size = 0;
 80041ae:	2300      	movs	r3, #0
 80041b0:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 80041b4:	e004      	b.n	80041c0 <Start_UART_Task+0x30>
	{
		buffer_size ++;
 80041b6:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 80041ba:	3301      	adds	r3, #1
 80041bc:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 80041c0:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 80041c4:	f107 020c 	add.w	r2, r7, #12
 80041c8:	5cd3      	ldrb	r3, [r2, r3]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f3      	bne.n	80041b6 <Start_UART_Task+0x26>
	}
	// Transmit over virtual comport
	CDC_Transmit_FS(msg.Buf, buffer_size);						// Transmit data over virtual comport
 80041ce:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 80041d2:	f107 030c 	add.w	r3, r7, #12
 80041d6:	4611      	mov	r1, r2
 80041d8:	4618      	mov	r0, r3
 80041da:	f012 f9a9 	bl	8016530 <CDC_Transmit_FS>
    osDelay(1);
 80041de:	2001      	movs	r0, #1
 80041e0:	f00e fa7c 	bl	80126dc <osDelay>
  {
 80041e4:	e7da      	b.n	800419c <Start_UART_Task+0xc>
 80041e6:	bf00      	nop
 80041e8:	2000b374 	.word	0x2000b374

080041ec <Start_bme280>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_bme280 */
void Start_bme280(void *argument)
{
 80041ec:	b5b0      	push	{r4, r5, r7, lr}
 80041ee:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 80041f2:	af04      	add	r7, sp, #16
 80041f4:	1d3b      	adds	r3, r7, #4
 80041f6:	6018      	str	r0, [r3, #0]
  /* Infinite loop */

	QUEUE_t msg;												// Make a queue
	//memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'

	uint16_t STATUS=0;
 80041f8:	2300      	movs	r3, #0
 80041fa:	f8a7 345e 	strh.w	r3, [r7, #1118]	; 0x45e
	uint16_t addres_device = 0x76;  		 	// BME280
 80041fe:	2376      	movs	r3, #118	; 0x76
 8004200:	f8a7 345c 	strh.w	r3, [r7, #1116]	; 0x45c
	uint16_t id_addr = 0xD0;
 8004204:	23d0      	movs	r3, #208	; 0xd0
 8004206:	f8a7 345a 	strh.w	r3, [r7, #1114]	; 0x45a
	uint8_t id = 96;							// in hex form
 800420a:	2360      	movs	r3, #96	; 0x60
 800420c:	f887 3459 	strb.w	r3, [r7, #1113]	; 0x459
	uint8_t buff=0;        						// Return 0x96 -> Dec 60
 8004210:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 8004214:	2200      	movs	r2, #0
 8004216:	701a      	strb	r2, [r3, #0]

	// For debug
	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 8004218:	f8b7 345c 	ldrh.w	r3, [r7, #1116]	; 0x45c
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	b299      	uxth	r1, r3
 8004220:	f8b7 245a 	ldrh.w	r2, [r7, #1114]	; 0x45a
 8004224:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004228:	9302      	str	r3, [sp, #8]
 800422a:	2301      	movs	r3, #1
 800422c:	9301      	str	r3, [sp, #4]
 800422e:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 8004232:	9300      	str	r3, [sp, #0]
 8004234:	2301      	movs	r3, #1
 8004236:	48bb      	ldr	r0, [pc, #748]	; (8004524 <Start_bme280+0x338>)
 8004238:	f002 ffba 	bl	80071b0 <HAL_I2C_Mem_Read>
 800423c:	4603      	mov	r3, r0
 800423e:	f8a7 345e 	strh.w	r3, [r7, #1118]	; 0x45e
		// Error !!! BME280 didn't found
	}


	// Init BME280
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 8004242:	4bb9      	ldr	r3, [pc, #740]	; (8004528 <Start_bme280+0x33c>)
 8004244:	2276      	movs	r2, #118	; 0x76
 8004246:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 8004248:	4bb7      	ldr	r3, [pc, #732]	; (8004528 <Start_bme280+0x33c>)
 800424a:	2201      	movs	r2, #1
 800424c:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 800424e:	4bb6      	ldr	r3, [pc, #728]	; (8004528 <Start_bme280+0x33c>)
 8004250:	4ab6      	ldr	r2, [pc, #728]	; (800452c <Start_bme280+0x340>)
 8004252:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 8004254:	4bb4      	ldr	r3, [pc, #720]	; (8004528 <Start_bme280+0x33c>)
 8004256:	4ab6      	ldr	r2, [pc, #728]	; (8004530 <Start_bme280+0x344>)
 8004258:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 800425a:	4bb3      	ldr	r3, [pc, #716]	; (8004528 <Start_bme280+0x33c>)
 800425c:	4ab5      	ldr	r2, [pc, #724]	; (8004534 <Start_bme280+0x348>)
 800425e:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&dev);
 8004260:	48b1      	ldr	r0, [pc, #708]	; (8004528 <Start_bme280+0x33c>)
 8004262:	f7fc fe6d 	bl	8000f40 <bme280_init>
 8004266:	4603      	mov	r3, r0
 8004268:	461a      	mov	r2, r3
 800426a:	4bb3      	ldr	r3, [pc, #716]	; (8004538 <Start_bme280+0x34c>)
 800426c:	701a      	strb	r2, [r3, #0]

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 800426e:	4bae      	ldr	r3, [pc, #696]	; (8004528 <Start_bme280+0x33c>)
 8004270:	2201      	movs	r2, #1
 8004272:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8004276:	4bac      	ldr	r3, [pc, #688]	; (8004528 <Start_bme280+0x33c>)
 8004278:	2205      	movs	r2, #5
 800427a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 800427e:	4baa      	ldr	r3, [pc, #680]	; (8004528 <Start_bme280+0x33c>)
 8004280:	2202      	movs	r2, #2
 8004282:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 8004286:	4ba8      	ldr	r3, [pc, #672]	; (8004528 <Start_bme280+0x33c>)
 8004288:	2204      	movs	r2, #4
 800428a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 800428e:	49a6      	ldr	r1, [pc, #664]	; (8004528 <Start_bme280+0x33c>)
 8004290:	200f      	movs	r0, #15
 8004292:	f7fc ff47 	bl	8001124 <bme280_set_sensor_settings>
 8004296:	4603      	mov	r3, r0
 8004298:	461a      	mov	r2, r3
 800429a:	4ba7      	ldr	r3, [pc, #668]	; (8004538 <Start_bme280+0x34c>)
 800429c:	701a      	strb	r2, [r3, #0]

	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 800429e:	49a2      	ldr	r1, [pc, #648]	; (8004528 <Start_bme280+0x33c>)
 80042a0:	2003      	movs	r0, #3
 80042a2:	f7fc ff94 	bl	80011ce <bme280_set_sensor_mode>
 80042a6:	4603      	mov	r3, r0
 80042a8:	461a      	mov	r2, r3
 80042aa:	4ba3      	ldr	r3, [pc, #652]	; (8004538 <Start_bme280+0x34c>)
 80042ac:	701a      	strb	r2, [r3, #0]

	dev.delay_ms(40);
 80042ae:	4b9e      	ldr	r3, [pc, #632]	; (8004528 <Start_bme280+0x33c>)
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	2028      	movs	r0, #40	; 0x28
 80042b4:	4798      	blx	r3

  for(;;)
  {
	  osDelay(1000);
 80042b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80042ba:	f00e fa0f 	bl	80126dc <osDelay>

	  char str_t_h_and_p[50] = {0};
 80042be:	f107 0308 	add.w	r3, r7, #8
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	3304      	adds	r3, #4
 80042c8:	222e      	movs	r2, #46	; 0x2e
 80042ca:	2100      	movs	r1, #0
 80042cc:	4618      	mov	r0, r3
 80042ce:	f012 fef5 	bl	80170bc <memset>
	  char str_thp_buffer[12] = {0};
 80042d2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80042d6:	2200      	movs	r2, #0
 80042d8:	601a      	str	r2, [r3, #0]
 80042da:	3304      	adds	r3, #4
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	605a      	str	r2, [r3, #4]

	  memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
 80042e2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80042e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042ea:	2100      	movs	r1, #0
 80042ec:	4618      	mov	r0, r3
 80042ee:	f012 fee5 	bl	80170bc <memset>
	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);		// Get data from sensor
 80042f2:	4a8d      	ldr	r2, [pc, #564]	; (8004528 <Start_bme280+0x33c>)
 80042f4:	4991      	ldr	r1, [pc, #580]	; (800453c <Start_bme280+0x350>)
 80042f6:	2007      	movs	r0, #7
 80042f8:	f7fc ffe5 	bl	80012c6 <bme280_get_sensor_data>
 80042fc:	4603      	mov	r3, r0
 80042fe:	461a      	mov	r2, r3
 8004300:	4b8d      	ldr	r3, [pc, #564]	; (8004538 <Start_bme280+0x34c>)
 8004302:	701a      	strb	r2, [r3, #0]

	  if(rslt == BME280_OK)
 8004304:	4b8c      	ldr	r3, [pc, #560]	; (8004538 <Start_bme280+0x34c>)
 8004306:	f993 3000 	ldrsb.w	r3, [r3]
 800430a:	2b00      	cmp	r3, #0
 800430c:	f040 80e5 	bne.w	80044da <Start_bme280+0x2ee>
	  {
	  		// Save data variables
	  		float BME280_temperature = comp_data.temperature;
 8004310:	4b8a      	ldr	r3, [pc, #552]	; (800453c <Start_bme280+0x350>)
 8004312:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8004316:	4610      	mov	r0, r2
 8004318:	4619      	mov	r1, r3
 800431a:	f7fc fc45 	bl	8000ba8 <__aeabi_d2f>
 800431e:	4603      	mov	r3, r0
 8004320:	f207 4254 	addw	r2, r7, #1108	; 0x454
 8004324:	6013      	str	r3, [r2, #0]
	  		float BME280_humidity = comp_data.humidity;
 8004326:	4b85      	ldr	r3, [pc, #532]	; (800453c <Start_bme280+0x350>)
 8004328:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800432c:	4610      	mov	r0, r2
 800432e:	4619      	mov	r1, r3
 8004330:	f7fc fc3a 	bl	8000ba8 <__aeabi_d2f>
 8004334:	4603      	mov	r3, r0
 8004336:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 800433a:	6013      	str	r3, [r2, #0]
	  		float BME280_preasure = comp_data.pressure;
 800433c:	4b7f      	ldr	r3, [pc, #508]	; (800453c <Start_bme280+0x350>)
 800433e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004342:	4610      	mov	r0, r2
 8004344:	4619      	mov	r1, r3
 8004346:	f7fc fc2f 	bl	8000ba8 <__aeabi_d2f>
 800434a:	4603      	mov	r3, r0
 800434c:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8004350:	6013      	str	r3, [r2, #0]

	  		// Write T, H and P in str_t_h_and_p buffer
	  		// Write TEMPERATURE
	  		strcat(str_t_h_and_p, "BEE280: \n\r");
 8004352:	f107 0308 	add.w	r3, r7, #8
 8004356:	4618      	mov	r0, r3
 8004358:	f7fb ff3a 	bl	80001d0 <strlen>
 800435c:	4603      	mov	r3, r0
 800435e:	461a      	mov	r2, r3
 8004360:	f107 0308 	add.w	r3, r7, #8
 8004364:	4413      	add	r3, r2
 8004366:	4976      	ldr	r1, [pc, #472]	; (8004540 <Start_bme280+0x354>)
 8004368:	461a      	mov	r2, r3
 800436a:	460b      	mov	r3, r1
 800436c:	cb03      	ldmia	r3!, {r0, r1}
 800436e:	6010      	str	r0, [r2, #0]
 8004370:	6051      	str	r1, [r2, #4]
 8004372:	8819      	ldrh	r1, [r3, #0]
 8004374:	789b      	ldrb	r3, [r3, #2]
 8004376:	8111      	strh	r1, [r2, #8]
 8004378:	7293      	strb	r3, [r2, #10]
	  		strcat(str_t_h_and_p, "T: ");
 800437a:	f107 0308 	add.w	r3, r7, #8
 800437e:	4618      	mov	r0, r3
 8004380:	f7fb ff26 	bl	80001d0 <strlen>
 8004384:	4603      	mov	r3, r0
 8004386:	461a      	mov	r2, r3
 8004388:	f107 0308 	add.w	r3, r7, #8
 800438c:	4413      	add	r3, r2
 800438e:	4a6d      	ldr	r2, [pc, #436]	; (8004544 <Start_bme280+0x358>)
 8004390:	6810      	ldr	r0, [r2, #0]
 8004392:	6018      	str	r0, [r3, #0]
	  		sprintf(str_thp_buffer, "%f", BME280_temperature);
 8004394:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8004398:	6818      	ldr	r0, [r3, #0]
 800439a:	f7fc f8d5 	bl	8000548 <__aeabi_f2d>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80043a6:	4968      	ldr	r1, [pc, #416]	; (8004548 <Start_bme280+0x35c>)
 80043a8:	f013 fc1e 	bl	8017be8 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 80043ac:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80043b0:	f107 0308 	add.w	r3, r7, #8
 80043b4:	4611      	mov	r1, r2
 80043b6:	4618      	mov	r0, r3
 80043b8:	f013 fc79 	bl	8017cae <strcat>
	  		strcat(str_t_h_and_p, " C\n\r");
 80043bc:	f107 0308 	add.w	r3, r7, #8
 80043c0:	4618      	mov	r0, r3
 80043c2:	f7fb ff05 	bl	80001d0 <strlen>
 80043c6:	4603      	mov	r3, r0
 80043c8:	461a      	mov	r2, r3
 80043ca:	f107 0308 	add.w	r3, r7, #8
 80043ce:	4413      	add	r3, r2
 80043d0:	4a5e      	ldr	r2, [pc, #376]	; (800454c <Start_bme280+0x360>)
 80043d2:	6810      	ldr	r0, [r2, #0]
 80043d4:	6018      	str	r0, [r3, #0]
 80043d6:	7912      	ldrb	r2, [r2, #4]
 80043d8:	711a      	strb	r2, [r3, #4]

	  		// Write HUMIDYTY
	  		memset(str_thp_buffer, 0, sizeof(str_thp_buffer));
 80043da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80043de:	220c      	movs	r2, #12
 80043e0:	2100      	movs	r1, #0
 80043e2:	4618      	mov	r0, r3
 80043e4:	f012 fe6a 	bl	80170bc <memset>
	  		strcat(str_t_h_and_p, "H: ");
 80043e8:	f107 0308 	add.w	r3, r7, #8
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7fb feef 	bl	80001d0 <strlen>
 80043f2:	4603      	mov	r3, r0
 80043f4:	461a      	mov	r2, r3
 80043f6:	f107 0308 	add.w	r3, r7, #8
 80043fa:	4413      	add	r3, r2
 80043fc:	4a54      	ldr	r2, [pc, #336]	; (8004550 <Start_bme280+0x364>)
 80043fe:	6810      	ldr	r0, [r2, #0]
 8004400:	6018      	str	r0, [r3, #0]
	  		sprintf(str_thp_buffer, "%f", BME280_humidity);
 8004402:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8004406:	6818      	ldr	r0, [r3, #0]
 8004408:	f7fc f89e 	bl	8000548 <__aeabi_f2d>
 800440c:	4602      	mov	r2, r0
 800440e:	460b      	mov	r3, r1
 8004410:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8004414:	494c      	ldr	r1, [pc, #304]	; (8004548 <Start_bme280+0x35c>)
 8004416:	f013 fbe7 	bl	8017be8 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 800441a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800441e:	f107 0308 	add.w	r3, r7, #8
 8004422:	4611      	mov	r1, r2
 8004424:	4618      	mov	r0, r3
 8004426:	f013 fc42 	bl	8017cae <strcat>
	  		strcat(str_t_h_and_p, " C\n\r");
 800442a:	f107 0308 	add.w	r3, r7, #8
 800442e:	4618      	mov	r0, r3
 8004430:	f7fb fece 	bl	80001d0 <strlen>
 8004434:	4603      	mov	r3, r0
 8004436:	461a      	mov	r2, r3
 8004438:	f107 0308 	add.w	r3, r7, #8
 800443c:	4413      	add	r3, r2
 800443e:	4a43      	ldr	r2, [pc, #268]	; (800454c <Start_bme280+0x360>)
 8004440:	6810      	ldr	r0, [r2, #0]
 8004442:	6018      	str	r0, [r3, #0]
 8004444:	7912      	ldrb	r2, [r2, #4]
 8004446:	711a      	strb	r2, [r3, #4]

	  		// Write PRERASURE
	  		memset(str_thp_buffer, 0, sizeof(str_thp_buffer));
 8004448:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800444c:	220c      	movs	r2, #12
 800444e:	2100      	movs	r1, #0
 8004450:	4618      	mov	r0, r3
 8004452:	f012 fe33 	bl	80170bc <memset>
	  		strcat(str_t_h_and_p, "P: ");
 8004456:	f107 0308 	add.w	r3, r7, #8
 800445a:	4618      	mov	r0, r3
 800445c:	f7fb feb8 	bl	80001d0 <strlen>
 8004460:	4603      	mov	r3, r0
 8004462:	461a      	mov	r2, r3
 8004464:	f107 0308 	add.w	r3, r7, #8
 8004468:	4413      	add	r3, r2
 800446a:	4a3a      	ldr	r2, [pc, #232]	; (8004554 <Start_bme280+0x368>)
 800446c:	6810      	ldr	r0, [r2, #0]
 800446e:	6018      	str	r0, [r3, #0]
	  		sprintf(str_thp_buffer, "%f", BME280_preasure);
 8004470:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8004474:	6818      	ldr	r0, [r3, #0]
 8004476:	f7fc f867 	bl	8000548 <__aeabi_f2d>
 800447a:	4602      	mov	r2, r0
 800447c:	460b      	mov	r3, r1
 800447e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8004482:	4931      	ldr	r1, [pc, #196]	; (8004548 <Start_bme280+0x35c>)
 8004484:	f013 fbb0 	bl	8017be8 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 8004488:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800448c:	f107 0308 	add.w	r3, r7, #8
 8004490:	4611      	mov	r1, r2
 8004492:	4618      	mov	r0, r3
 8004494:	f013 fc0b 	bl	8017cae <strcat>
	  		strcat(str_t_h_and_p, " mm\n\r\0");
 8004498:	f107 0308 	add.w	r3, r7, #8
 800449c:	4618      	mov	r0, r3
 800449e:	f7fb fe97 	bl	80001d0 <strlen>
 80044a2:	4603      	mov	r3, r0
 80044a4:	461a      	mov	r2, r3
 80044a6:	f107 0308 	add.w	r3, r7, #8
 80044aa:	4413      	add	r3, r2
 80044ac:	4a2a      	ldr	r2, [pc, #168]	; (8004558 <Start_bme280+0x36c>)
 80044ae:	6810      	ldr	r0, [r2, #0]
 80044b0:	6018      	str	r0, [r3, #0]
 80044b2:	8892      	ldrh	r2, [r2, #4]
 80044b4:	809a      	strh	r2, [r3, #4]

	  		strcat(msg.Buf, str_t_h_and_p);										//	Write main buffer with data in queue
 80044b6:	f107 0208 	add.w	r2, r7, #8
 80044ba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80044be:	4611      	mov	r1, r2
 80044c0:	4618      	mov	r0, r3
 80044c2:	f013 fbf4 	bl	8017cae <strcat>

	  		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)
 80044c6:	4b25      	ldr	r3, [pc, #148]	; (800455c <Start_bme280+0x370>)
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80044ce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80044d2:	2200      	movs	r2, #0
 80044d4:	f00e fad4 	bl	8012a80 <osMessageQueuePut>
 80044d8:	e6ed      	b.n	80042b6 <Start_bme280+0xca>

	  }
	  else
	  {
		  strcat(str_t_h_and_p, "ERROR!!! BME280 didn't found\n\r");
 80044da:	f107 0308 	add.w	r3, r7, #8
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fb fe76 	bl	80001d0 <strlen>
 80044e4:	4603      	mov	r3, r0
 80044e6:	461a      	mov	r2, r3
 80044e8:	f107 0308 	add.w	r3, r7, #8
 80044ec:	4413      	add	r3, r2
 80044ee:	4a1c      	ldr	r2, [pc, #112]	; (8004560 <Start_bme280+0x374>)
 80044f0:	461d      	mov	r5, r3
 80044f2:	4614      	mov	r4, r2
 80044f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80044f6:	6028      	str	r0, [r5, #0]
 80044f8:	6069      	str	r1, [r5, #4]
 80044fa:	60aa      	str	r2, [r5, #8]
 80044fc:	60eb      	str	r3, [r5, #12]
 80044fe:	cc07      	ldmia	r4!, {r0, r1, r2}
 8004500:	6128      	str	r0, [r5, #16]
 8004502:	6169      	str	r1, [r5, #20]
 8004504:	61aa      	str	r2, [r5, #24]
 8004506:	8823      	ldrh	r3, [r4, #0]
 8004508:	78a2      	ldrb	r2, [r4, #2]
 800450a:	83ab      	strh	r3, [r5, #28]
 800450c:	4613      	mov	r3, r2
 800450e:	77ab      	strb	r3, [r5, #30]
		  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)
 8004510:	4b12      	ldr	r3, [pc, #72]	; (800455c <Start_bme280+0x370>)
 8004512:	6818      	ldr	r0, [r3, #0]
 8004514:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8004518:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800451c:	2200      	movs	r2, #0
 800451e:	f00e faaf 	bl	8012a80 <osMessageQueuePut>
  {
 8004522:	e6c8      	b.n	80042b6 <Start_bme280+0xca>
 8004524:	2000a0ec 	.word	0x2000a0ec
 8004528:	2000a0ac 	.word	0x2000a0ac
 800452c:	080030f1 	.word	0x080030f1
 8004530:	08003179 	.word	0x08003179
 8004534:	08003161 	.word	0x08003161
 8004538:	2000a9bc 	.word	0x2000a9bc
 800453c:	2000a9c0 	.word	0x2000a9c0
 8004540:	0801a308 	.word	0x0801a308
 8004544:	0801a314 	.word	0x0801a314
 8004548:	0801a318 	.word	0x0801a318
 800454c:	0801a31c 	.word	0x0801a31c
 8004550:	0801a324 	.word	0x0801a324
 8004554:	0801a328 	.word	0x0801a328
 8004558:	0801a32c 	.word	0x0801a32c
 800455c:	2000b374 	.word	0x2000b374
 8004560:	0801a334 	.word	0x0801a334

08004564 <Start_AM2302>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_AM2302 */
void Start_AM2302(void *argument)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 800456a:	af00      	add	r7, sp, #0
 800456c:	1d3b      	adds	r3, r7, #4
 800456e:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_AM2302 */
  /* Infinite loop */
	QUEUE_t msg;												// Make a queue
	memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 8004570:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004574:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004578:	2100      	movs	r1, #0
 800457a:	4618      	mov	r0, r3
 800457c:	f012 fd9e 	bl	80170bc <memset>

	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 8004580:	4b48      	ldr	r3, [pc, #288]	; (80046a4 <Start_AM2302+0x140>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a47      	ldr	r2, [pc, #284]	; (80046a4 <Start_AM2302+0x140>)
 8004586:	f043 0304 	orr.w	r3, r3, #4
 800458a:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 800458c:	4b45      	ldr	r3, [pc, #276]	; (80046a4 <Start_AM2302+0x140>)
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	4a44      	ldr	r2, [pc, #272]	; (80046a4 <Start_AM2302+0x140>)
 8004592:	f023 0302 	bic.w	r3, r3, #2
 8004596:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 8004598:	4b42      	ldr	r3, [pc, #264]	; (80046a4 <Start_AM2302+0x140>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	4a41      	ldr	r2, [pc, #260]	; (80046a4 <Start_AM2302+0x140>)
 800459e:	f043 0302 	orr.w	r3, r3, #2
 80045a2:	6093      	str	r3, [r2, #8]
	GPIOC->ODR ^= 0x02; 							// set GPIOC pin 1 on high
 80045a4:	4b3f      	ldr	r3, [pc, #252]	; (80046a4 <Start_AM2302+0x140>)
 80045a6:	695b      	ldr	r3, [r3, #20]
 80045a8:	4a3e      	ldr	r2, [pc, #248]	; (80046a4 <Start_AM2302+0x140>)
 80045aa:	f083 0302 	eor.w	r3, r3, #2
 80045ae:	6153      	str	r3, [r2, #20]
	osDelay(2000);									// First init must be 2 seconds delay
 80045b0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80045b4:	f00e f892 	bl	80126dc <osDelay>

  for(;;)
  {
	  osDelay(3000);			// Measure every 3 seconds
 80045b8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80045bc:	f00e f88e 	bl	80126dc <osDelay>
	   * __                ________________________
	   * 	 \			    /				         \
	   * 	  \____________/			              \_
	   */

	  	bool get_data_status = false;
 80045c0:	2300      	movs	r3, #0
 80045c2:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  	int j = 0;   							// Counter bytes
 80045c6:	2300      	movs	r3, #0
 80045c8:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
	  	int i = 0;								// Counter bits
 80045cc:	2300      	movs	r3, #0
 80045ce:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
	  	uint8_t data[4] = {0};					// Buffer for incoming data from sensor
 80045d2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80045d6:	2200      	movs	r2, #0
 80045d8:	601a      	str	r2, [r3, #0]
	  	float temper, hum;						// Buffer variables

	  	// Init GPIO like output
	  	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 80045da:	4b32      	ldr	r3, [pc, #200]	; (80046a4 <Start_AM2302+0x140>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a31      	ldr	r2, [pc, #196]	; (80046a4 <Start_AM2302+0x140>)
 80045e0:	f043 0304 	orr.w	r3, r3, #4
 80045e4:	6013      	str	r3, [r2, #0]
	  	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 80045e6:	4b2f      	ldr	r3, [pc, #188]	; (80046a4 <Start_AM2302+0x140>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	4a2e      	ldr	r2, [pc, #184]	; (80046a4 <Start_AM2302+0x140>)
 80045ec:	f023 0302 	bic.w	r3, r3, #2
 80045f0:	6053      	str	r3, [r2, #4]
	  	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 80045f2:	4b2c      	ldr	r3, [pc, #176]	; (80046a4 <Start_AM2302+0x140>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	4a2b      	ldr	r2, [pc, #172]	; (80046a4 <Start_AM2302+0x140>)
 80045f8:	f043 0302 	orr.w	r3, r3, #2
 80045fc:	6093      	str	r3, [r2, #8]

	  	GPIOC->ODR &= ~0x02;		// Low level
 80045fe:	4b29      	ldr	r3, [pc, #164]	; (80046a4 <Start_AM2302+0x140>)
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	4a28      	ldr	r2, [pc, #160]	; (80046a4 <Start_AM2302+0x140>)
 8004604:	f023 0302 	bic.w	r3, r3, #2
 8004608:	6153      	str	r3, [r2, #20]
	  	osDelay(18);
 800460a:	2012      	movs	r0, #18
 800460c:	f00e f866 	bl	80126dc <osDelay>
	  	GPIOC->ODR ^= 0x02;			// High level
 8004610:	4b24      	ldr	r3, [pc, #144]	; (80046a4 <Start_AM2302+0x140>)
 8004612:	695b      	ldr	r3, [r3, #20]
 8004614:	4a23      	ldr	r2, [pc, #140]	; (80046a4 <Start_AM2302+0x140>)
 8004616:	f083 0302 	eor.w	r3, r3, #2
 800461a:	6153      	str	r3, [r2, #20]
	  	delay_us(40);
 800461c:	2028      	movs	r0, #40	; 0x28
 800461e:	f7fe fde7 	bl	80031f0 <delay_us>

	  	// Make input pin C1
	  	GPIOC->MODER &= ~0x04;  	// Set Pin C1 Input   (MODER GPIOC_1 Must be 00)
 8004622:	4b20      	ldr	r3, [pc, #128]	; (80046a4 <Start_AM2302+0x140>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4a1f      	ldr	r2, [pc, #124]	; (80046a4 <Start_AM2302+0x140>)
 8004628:	f023 0304 	bic.w	r3, r3, #4
 800462c:	6013      	str	r3, [r2, #0]
	  	GPIOC->PUPDR &= ~0x04;		// Set Pin C1 Pull up
 800462e:	4b1d      	ldr	r3, [pc, #116]	; (80046a4 <Start_AM2302+0x140>)
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	4a1c      	ldr	r2, [pc, #112]	; (80046a4 <Start_AM2302+0x140>)
 8004634:	f023 0304 	bic.w	r3, r3, #4
 8004638:	60d3      	str	r3, [r2, #12]

	  	if(GPIOC->IDR & GPIO_IDR_ID1)		// Sensor must pull down
 800463a:	4b1a      	ldr	r3, [pc, #104]	; (80046a4 <Start_AM2302+0x140>)
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d003      	beq.n	800464e <Start_AM2302+0xea>
	  	{
	  		get_data_status = false; 					// Error. Sensor not response
 8004646:	2300      	movs	r3, #0
 8004648:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 800464c:	e002      	b.n	8004654 <Start_AM2302+0xf0>
	  	}
	  	else
	  	{
	  		get_data_status = true;
 800464e:	2301      	movs	r3, #1
 8004650:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  	}

	  	delay_us(80);
 8004654:	2050      	movs	r0, #80	; 0x50
 8004656:	f7fe fdcb 	bl	80031f0 <delay_us>

	  	if(!(GPIOC->IDR & GPIO_IDR_ID1))  	// Sensor must pull up
 800465a:	4b12      	ldr	r3, [pc, #72]	; (80046a4 <Start_AM2302+0x140>)
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d103      	bne.n	800466e <Start_AM2302+0x10a>
	  	{
	  		get_data_status = false; 					// Error. Sensor not response
 8004666:	2300      	movs	r3, #0
 8004668:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 800466c:	e002      	b.n	8004674 <Start_AM2302+0x110>
	  	}
	  	else
	  	{
	  		get_data_status = true;
 800466e:	2301      	movs	r3, #1
 8004670:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  	}
	  	delay_us(80);
 8004674:	2050      	movs	r0, #80	; 0x50
 8004676:	f7fe fdbb 	bl	80031f0 <delay_us>

	  	if(get_data_status == true)
 800467a:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 800467e:	2b00      	cmp	r3, #0
 8004680:	d09a      	beq.n	80045b8 <Start_AM2302+0x54>
	  	{
	  		for(j = 0; j <5; j++)							// Reading 5 bytes
 8004682:	2300      	movs	r3, #0
 8004684:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 8004688:	e050      	b.n	800472c <Start_AM2302+0x1c8>
	  		{
	  			data[4-j] = 0;
 800468a:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 800468e:	f1c3 0304 	rsb	r3, r3, #4
 8004692:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004696:	2100      	movs	r1, #0
 8004698:	54d1      	strb	r1, [r2, r3]
	  			for(i = 0; i < 8; i++)						// Reading 8 bits
 800469a:	2300      	movs	r3, #0
 800469c:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 80046a0:	e038      	b.n	8004714 <Start_AM2302+0x1b0>
 80046a2:	bf00      	nop
 80046a4:	40020800 	.word	0x40020800
	  			{
	  				while(!(GPIOC->IDR & GPIO_IDR_ID1));	// While signal is "0"
 80046a8:	bf00      	nop
 80046aa:	4b95      	ldr	r3, [pc, #596]	; (8004900 <Start_AM2302+0x39c>)
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f003 0302 	and.w	r3, r3, #2
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d0f9      	beq.n	80046aa <Start_AM2302+0x146>
	  				delay_us(30);
 80046b6:	201e      	movs	r0, #30
 80046b8:	f7fe fd9a 	bl	80031f0 <delay_us>
	  				if(GPIOC->IDR & GPIO_IDR_ID1)			// If signal is high when wrute "1" in buffer (data[])
 80046bc:	4b90      	ldr	r3, [pc, #576]	; (8004900 <Start_AM2302+0x39c>)
 80046be:	691b      	ldr	r3, [r3, #16]
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d019      	beq.n	80046fc <Start_AM2302+0x198>
	  				{
	  					data[4-j] |= (1 << (7 - i));        // Shift received bite
 80046c8:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80046cc:	f1c3 0304 	rsb	r3, r3, #4
 80046d0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80046d4:	5cd3      	ldrb	r3, [r2, r3]
 80046d6:	b25a      	sxtb	r2, r3
 80046d8:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80046dc:	f1c3 0307 	rsb	r3, r3, #7
 80046e0:	2101      	movs	r1, #1
 80046e2:	fa01 f303 	lsl.w	r3, r1, r3
 80046e6:	b25b      	sxtb	r3, r3
 80046e8:	4313      	orrs	r3, r2
 80046ea:	b25a      	sxtb	r2, r3
 80046ec:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80046f0:	f1c3 0304 	rsb	r3, r3, #4
 80046f4:	b2d1      	uxtb	r1, r2
 80046f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80046fa:	54d1      	strb	r1, [r2, r3]
	  				}
	  				while(GPIOC->IDR & GPIO_IDR_ID1);		// Wait end of "1" signal
 80046fc:	bf00      	nop
 80046fe:	4b80      	ldr	r3, [pc, #512]	; (8004900 <Start_AM2302+0x39c>)
 8004700:	691b      	ldr	r3, [r3, #16]
 8004702:	f003 0302 	and.w	r3, r3, #2
 8004706:	2b00      	cmp	r3, #0
 8004708:	d1f9      	bne.n	80046fe <Start_AM2302+0x19a>
	  			for(i = 0; i < 8; i++)						// Reading 8 bits
 800470a:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 800470e:	3301      	adds	r3, #1
 8004710:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8004714:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8004718:	2b07      	cmp	r3, #7
 800471a:	ddc5      	ble.n	80046a8 <Start_AM2302+0x144>
	  			}
	  			get_data_status = true;										// Data was been written okay
 800471c:	2301      	movs	r3, #1
 800471e:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  		for(j = 0; j <5; j++)							// Reading 5 bytes
 8004722:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8004726:	3301      	adds	r3, #1
 8004728:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 800472c:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8004730:	2b04      	cmp	r3, #4
 8004732:	ddaa      	ble.n	800468a <Start_AM2302+0x126>
	  		}

	  		temper = (float)((*(uint16_t*)(data+1)) & 0x3FFF) /10;
 8004734:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004738:	3301      	adds	r3, #1
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004740:	ee07 3a90 	vmov	s15, r3
 8004744:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004748:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800474c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004750:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8004754:	edc3 7a00 	vstr	s15, [r3]
	  		if((*(uint16_t*)(data+1)) & 0x8000) temper  *= -1.0;
 8004758:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800475c:	3301      	adds	r3, #1
 800475e:	881b      	ldrh	r3, [r3, #0]
 8004760:	b21b      	sxth	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	da13      	bge.n	800478e <Start_AM2302+0x22a>
 8004766:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800476a:	6818      	ldr	r0, [r3, #0]
 800476c:	f7fb feec 	bl	8000548 <__aeabi_f2d>
 8004770:	4602      	mov	r2, r0
 8004772:	460b      	mov	r3, r1
 8004774:	4610      	mov	r0, r2
 8004776:	4619      	mov	r1, r3
 8004778:	f7fc fa16 	bl	8000ba8 <__aeabi_d2f>
 800477c:	4603      	mov	r3, r0
 800477e:	ee07 3a90 	vmov	s15, r3
 8004782:	eef1 7a67 	vneg.f32	s15, s15
 8004786:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800478a:	edc3 7a00 	vstr	s15, [r3]
	  		hum = (float)(*(int16_t*)(data+3)) / 10;
 800478e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004792:	3303      	adds	r3, #3
 8004794:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004798:	ee07 3a90 	vmov	s15, r3
 800479c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047a0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80047a4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047a8:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 80047ac:	edc3 7a00 	vstr	s15, [r3]

	  		// Write data in queue
	  		char str_t_and_h[50] = {0};
 80047b0:	f107 0308 	add.w	r3, r7, #8
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	3304      	adds	r3, #4
 80047ba:	222e      	movs	r2, #46	; 0x2e
 80047bc:	2100      	movs	r1, #0
 80047be:	4618      	mov	r0, r3
 80047c0:	f012 fc7c 	bl	80170bc <memset>
	  		char str_t_and_h_buffer[12] = {0};
 80047c4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80047c8:	2200      	movs	r2, #0
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	3304      	adds	r3, #4
 80047ce:	2200      	movs	r2, #0
 80047d0:	601a      	str	r2, [r3, #0]
 80047d2:	605a      	str	r2, [r3, #4]

	  		memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
 80047d4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80047d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80047dc:	2100      	movs	r1, #0
 80047de:	4618      	mov	r0, r3
 80047e0:	f012 fc6c 	bl	80170bc <memset>

	  		// Write T and  H P in str_t_h buffer
	  		// Write TEMPERATURE
	  		strcat(str_t_and_h, "AM2302: \n\r");
 80047e4:	f107 0308 	add.w	r3, r7, #8
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7fb fcf1 	bl	80001d0 <strlen>
 80047ee:	4603      	mov	r3, r0
 80047f0:	461a      	mov	r2, r3
 80047f2:	f107 0308 	add.w	r3, r7, #8
 80047f6:	4413      	add	r3, r2
 80047f8:	4942      	ldr	r1, [pc, #264]	; (8004904 <Start_AM2302+0x3a0>)
 80047fa:	461a      	mov	r2, r3
 80047fc:	460b      	mov	r3, r1
 80047fe:	cb03      	ldmia	r3!, {r0, r1}
 8004800:	6010      	str	r0, [r2, #0]
 8004802:	6051      	str	r1, [r2, #4]
 8004804:	8819      	ldrh	r1, [r3, #0]
 8004806:	789b      	ldrb	r3, [r3, #2]
 8004808:	8111      	strh	r1, [r2, #8]
 800480a:	7293      	strb	r3, [r2, #10]
	  		strcat(str_t_and_h, "T: ");
 800480c:	f107 0308 	add.w	r3, r7, #8
 8004810:	4618      	mov	r0, r3
 8004812:	f7fb fcdd 	bl	80001d0 <strlen>
 8004816:	4603      	mov	r3, r0
 8004818:	461a      	mov	r2, r3
 800481a:	f107 0308 	add.w	r3, r7, #8
 800481e:	4413      	add	r3, r2
 8004820:	4a39      	ldr	r2, [pc, #228]	; (8004908 <Start_AM2302+0x3a4>)
 8004822:	6810      	ldr	r0, [r2, #0]
 8004824:	6018      	str	r0, [r3, #0]
	  		sprintf(str_t_and_h_buffer, "%f", temper);
 8004826:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800482a:	6818      	ldr	r0, [r3, #0]
 800482c:	f7fb fe8c 	bl	8000548 <__aeabi_f2d>
 8004830:	4602      	mov	r2, r0
 8004832:	460b      	mov	r3, r1
 8004834:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8004838:	4934      	ldr	r1, [pc, #208]	; (800490c <Start_AM2302+0x3a8>)
 800483a:	f013 f9d5 	bl	8017be8 <siprintf>
	  		strcat(str_t_and_h, str_t_and_h_buffer);
 800483e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004842:	f107 0308 	add.w	r3, r7, #8
 8004846:	4611      	mov	r1, r2
 8004848:	4618      	mov	r0, r3
 800484a:	f013 fa30 	bl	8017cae <strcat>
	  		strcat(str_t_and_h, " C\n\r");
 800484e:	f107 0308 	add.w	r3, r7, #8
 8004852:	4618      	mov	r0, r3
 8004854:	f7fb fcbc 	bl	80001d0 <strlen>
 8004858:	4603      	mov	r3, r0
 800485a:	461a      	mov	r2, r3
 800485c:	f107 0308 	add.w	r3, r7, #8
 8004860:	4413      	add	r3, r2
 8004862:	4a2b      	ldr	r2, [pc, #172]	; (8004910 <Start_AM2302+0x3ac>)
 8004864:	6810      	ldr	r0, [r2, #0]
 8004866:	6018      	str	r0, [r3, #0]
 8004868:	7912      	ldrb	r2, [r2, #4]
 800486a:	711a      	strb	r2, [r3, #4]

	  		// Write HUMIDYTY
	  		memset(str_t_and_h_buffer, 0, sizeof(str_t_and_h_buffer));
 800486c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004870:	220c      	movs	r2, #12
 8004872:	2100      	movs	r1, #0
 8004874:	4618      	mov	r0, r3
 8004876:	f012 fc21 	bl	80170bc <memset>

	  		strcat(str_t_and_h, "H: ");
 800487a:	f107 0308 	add.w	r3, r7, #8
 800487e:	4618      	mov	r0, r3
 8004880:	f7fb fca6 	bl	80001d0 <strlen>
 8004884:	4603      	mov	r3, r0
 8004886:	461a      	mov	r2, r3
 8004888:	f107 0308 	add.w	r3, r7, #8
 800488c:	4413      	add	r3, r2
 800488e:	4a21      	ldr	r2, [pc, #132]	; (8004914 <Start_AM2302+0x3b0>)
 8004890:	6810      	ldr	r0, [r2, #0]
 8004892:	6018      	str	r0, [r3, #0]
	  		sprintf(str_t_and_h_buffer, "%f", hum);
 8004894:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	f7fb fe55 	bl	8000548 <__aeabi_f2d>
 800489e:	4602      	mov	r2, r0
 80048a0:	460b      	mov	r3, r1
 80048a2:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80048a6:	4919      	ldr	r1, [pc, #100]	; (800490c <Start_AM2302+0x3a8>)
 80048a8:	f013 f99e 	bl	8017be8 <siprintf>
	  		strcat(str_t_and_h, str_t_and_h_buffer);
 80048ac:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80048b0:	f107 0308 	add.w	r3, r7, #8
 80048b4:	4611      	mov	r1, r2
 80048b6:	4618      	mov	r0, r3
 80048b8:	f013 f9f9 	bl	8017cae <strcat>
	  		strcat(str_t_and_h, " C\n\r\0");
 80048bc:	f107 0308 	add.w	r3, r7, #8
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7fb fc85 	bl	80001d0 <strlen>
 80048c6:	4603      	mov	r3, r0
 80048c8:	461a      	mov	r2, r3
 80048ca:	f107 0308 	add.w	r3, r7, #8
 80048ce:	4413      	add	r3, r2
 80048d0:	4a11      	ldr	r2, [pc, #68]	; (8004918 <Start_AM2302+0x3b4>)
 80048d2:	6810      	ldr	r0, [r2, #0]
 80048d4:	6018      	str	r0, [r3, #0]
 80048d6:	7912      	ldrb	r2, [r2, #4]
 80048d8:	711a      	strb	r2, [r3, #4]

	  		strcat(msg.Buf, str_t_and_h);										//	Write main buffer with data in queue
 80048da:	f107 0208 	add.w	r2, r7, #8
 80048de:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80048e2:	4611      	mov	r1, r2
 80048e4:	4618      	mov	r0, r3
 80048e6:	f013 f9e2 	bl	8017cae <strcat>

	  		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)
 80048ea:	4b0c      	ldr	r3, [pc, #48]	; (800491c <Start_AM2302+0x3b8>)
 80048ec:	6818      	ldr	r0, [r3, #0]
 80048ee:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80048f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80048f6:	2200      	movs	r2, #0
 80048f8:	f00e f8c2 	bl	8012a80 <osMessageQueuePut>
  {
 80048fc:	e65c      	b.n	80045b8 <Start_AM2302+0x54>
 80048fe:	bf00      	nop
 8004900:	40020800 	.word	0x40020800
 8004904:	0801a354 	.word	0x0801a354
 8004908:	0801a314 	.word	0x0801a314
 800490c:	0801a318 	.word	0x0801a318
 8004910:	0801a31c 	.word	0x0801a31c
 8004914:	0801a324 	.word	0x0801a324
 8004918:	0801a360 	.word	0x0801a360
 800491c:	2000b374 	.word	0x2000b374

08004920 <Start_SD_CARD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_SD_CARD */
void Start_SD_CARD(void *argument)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b086      	sub	sp, #24
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_SD_CARD */
  /* Infinite loop */

	Mount_SD("/");
 8004928:	4823      	ldr	r0, [pc, #140]	; (80049b8 <Start_SD_CARD+0x98>)
 800492a:	f7fd fd2d 	bl	8002388 <Mount_SD>

	Create_File("test_data_1.txt");
 800492e:	4823      	ldr	r0, [pc, #140]	; (80049bc <Start_SD_CARD+0x9c>)
 8004930:	f7fd fd70 	bl	8002414 <Create_File>
	Update_File("test_data_1.txt","\n\rStart recording\r\n");	// Add data to the end of file
 8004934:	4922      	ldr	r1, [pc, #136]	; (80049c0 <Start_SD_CARD+0xa0>)
 8004936:	4821      	ldr	r0, [pc, #132]	; (80049bc <Start_SD_CARD+0x9c>)
 8004938:	f7fd fe02 	bl	8002540 <Update_File>

	// Create folders
	Create_Dir("test_folder_1");
 800493c:	4821      	ldr	r0, [pc, #132]	; (80049c4 <Start_SD_CARD+0xa4>)
 800493e:	f7fd febf 	bl	80026c0 <Create_Dir>
	Create_Dir("test_folder_2");
 8004942:	4821      	ldr	r0, [pc, #132]	; (80049c8 <Start_SD_CARD+0xa8>)
 8004944:	f7fd febc 	bl	80026c0 <Create_Dir>
	Create_Dir("test_folder_3");
 8004948:	4820      	ldr	r0, [pc, #128]	; (80049cc <Start_SD_CARD+0xac>)
 800494a:	f7fd feb9 	bl	80026c0 <Create_Dir>

	Unmount_SD("/");
 800494e:	481a      	ldr	r0, [pc, #104]	; (80049b8 <Start_SD_CARD+0x98>)
 8004950:	f7fd fd3e 	bl	80023d0 <Unmount_SD>
	static int i = 0;											// Test data for write

  for(;;)
  {
	  // Log data ewery one second
	  osDelay(1000);
 8004954:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004958:	f00d fec0 	bl	80126dc <osDelay>
	  HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);			// LED ON
 800495c:	2201      	movs	r2, #1
 800495e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004962:	481b      	ldr	r0, [pc, #108]	; (80049d0 <Start_SD_CARD+0xb0>)
 8004964:	f001 ffa2 	bl	80068ac <HAL_GPIO_WritePin>

	  Mount_SD("/");
 8004968:	4813      	ldr	r0, [pc, #76]	; (80049b8 <Start_SD_CARD+0x98>)
 800496a:	f7fd fd0d 	bl	8002388 <Mount_SD>

	  char data[10] = {0};
 800496e:	2300      	movs	r3, #0
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	f107 0310 	add.w	r3, r7, #16
 8004976:	2200      	movs	r2, #0
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	809a      	strh	r2, [r3, #4]
	  sprintf(data, "%d\n", i);
 800497c:	4b15      	ldr	r3, [pc, #84]	; (80049d4 <Start_SD_CARD+0xb4>)
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	f107 030c 	add.w	r3, r7, #12
 8004984:	4914      	ldr	r1, [pc, #80]	; (80049d8 <Start_SD_CARD+0xb8>)
 8004986:	4618      	mov	r0, r3
 8004988:	f013 f92e 	bl	8017be8 <siprintf>
	  Update_File("test_data_1.txt", data);						// Add data to the end of file
 800498c:	f107 030c 	add.w	r3, r7, #12
 8004990:	4619      	mov	r1, r3
 8004992:	480a      	ldr	r0, [pc, #40]	; (80049bc <Start_SD_CARD+0x9c>)
 8004994:	f7fd fdd4 	bl	8002540 <Update_File>
	  i++;
 8004998:	4b0e      	ldr	r3, [pc, #56]	; (80049d4 <Start_SD_CARD+0xb4>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	3301      	adds	r3, #1
 800499e:	4a0d      	ldr	r2, [pc, #52]	; (80049d4 <Start_SD_CARD+0xb4>)
 80049a0:	6013      	str	r3, [r2, #0]

	  Unmount_SD("/");
 80049a2:	4805      	ldr	r0, [pc, #20]	; (80049b8 <Start_SD_CARD+0x98>)
 80049a4:	f7fd fd14 	bl	80023d0 <Unmount_SD>

	  HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_RESET);		// LED OFF
 80049a8:	2200      	movs	r2, #0
 80049aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80049ae:	4808      	ldr	r0, [pc, #32]	; (80049d0 <Start_SD_CARD+0xb0>)
 80049b0:	f001 ff7c 	bl	80068ac <HAL_GPIO_WritePin>
  {
 80049b4:	e7ce      	b.n	8004954 <Start_SD_CARD+0x34>
 80049b6:	bf00      	nop
 80049b8:	0801a368 	.word	0x0801a368
 80049bc:	0801a36c 	.word	0x0801a36c
 80049c0:	0801a37c 	.word	0x0801a37c
 80049c4:	0801a390 	.word	0x0801a390
 80049c8:	0801a3a0 	.word	0x0801a3a0
 80049cc:	0801a3b0 	.word	0x0801a3b0
 80049d0:	40020c00 	.word	0x40020c00
 80049d4:	200007ac 	.word	0x200007ac
 80049d8:	0801a3c0 	.word	0x0801a3c0

080049dc <Start_LCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LCD */
void Start_LCD(void *argument)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LCD */
  /* Infinite loop */
	TFT9341_ini(240, 320);
 80049e4:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80049e8:	20f0      	movs	r0, #240	; 0xf0
 80049ea:	f000 fca1 	bl	8005330 <TFT9341_ini>
	TFT9341_FillScreen(TFT9341_BLUE);
 80049ee:	201f      	movs	r0, #31
 80049f0:	f000 ff0c 	bl	800580c <TFT9341_FillScreen>
	uint16_t i,j;

  for(;;)
  {
	  osDelay(2000);
 80049f4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80049f8:	f00d fe70 	bl	80126dc <osDelay>
	  speed_test();
 80049fc:	f000 ff68 	bl	80058d0 <speed_test>
	  TFT9341_FillScreen(TFT9341_BLACK);
 8004a00:	2000      	movs	r0, #0
 8004a02:	f000 ff03 	bl	800580c <TFT9341_FillScreen>
	  osDelay(2000);
 8004a06:	e7f5      	b.n	80049f4 <Start_LCD+0x18>

08004a08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b082      	sub	sp, #8
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	// Handler for generate us dalay 			( FOR AM2302 )
	if(htim->Instance == TIM10) 				//check if the interrupt comes from TIM10
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a20      	ldr	r2, [pc, #128]	; (8004a98 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d10c      	bne.n	8004a34 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		if(tim_val > 0)
 8004a1a:	4b20      	ldr	r3, [pc, #128]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d005      	beq.n	8004a2e <HAL_TIM_PeriodElapsedCallback+0x26>
		{
			tim_val = tim_val - 1;
 8004a22:	4b1e      	ldr	r3, [pc, #120]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	3b01      	subs	r3, #1
 8004a28:	4a1c      	ldr	r2, [pc, #112]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004a2a:	6013      	str	r3, [r2, #0]
 8004a2c:	e002      	b.n	8004a34 <HAL_TIM_PeriodElapsedCallback+0x2c>
		}
		else									// For avoid overflow variable
		{
			tim_val = 0;
 8004a2e:	4b1b      	ldr	r3, [pc, #108]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	601a      	str	r2, [r3, #0]
	{
		//HAL_GPIO_TogglePin(GPIOD, LD4_Pin);		// Green LED
	}

	// Handler for count how many time works any tasks
	if(htim->Instance == TIM3)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a19      	ldr	r2, [pc, #100]	; (8004aa0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d104      	bne.n	8004a48 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		ulHighFreqebcyTimerTicks++;					// Update time tasks counter
 8004a3e:	4b19      	ldr	r3, [pc, #100]	; (8004aa4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	3301      	adds	r3, #1
 8004a44:	4a17      	ldr	r2, [pc, #92]	; (8004aa4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004a46:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a16      	ldr	r2, [pc, #88]	; (8004aa8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d101      	bne.n	8004a56 <HAL_TIM_PeriodElapsedCallback+0x4e>
    HAL_IncTick();
 8004a52:	f001 f867 	bl	8005b24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

	if (htim->Instance == TIM14)		// For SD works (use in fatfs_sd.c file)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a13      	ldr	r2, [pc, #76]	; (8004aa8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d117      	bne.n	8004a90 <HAL_TIM_PeriodElapsedCallback+0x88>
	{
		if(Timer1 > 0)
 8004a60:	4b12      	ldr	r3, [pc, #72]	; (8004aac <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	b2db      	uxtb	r3, r3
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d006      	beq.n	8004a78 <HAL_TIM_PeriodElapsedCallback+0x70>
		    Timer1--;
 8004a6a:	4b10      	ldr	r3, [pc, #64]	; (8004aac <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	3b01      	subs	r3, #1
 8004a72:	b2da      	uxtb	r2, r3
 8004a74:	4b0d      	ldr	r3, [pc, #52]	; (8004aac <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004a76:	701a      	strb	r2, [r3, #0]

		  if(Timer2 > 0)
 8004a78:	4b0d      	ldr	r3, [pc, #52]	; (8004ab0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d006      	beq.n	8004a90 <HAL_TIM_PeriodElapsedCallback+0x88>
		    Timer2--;
 8004a82:	4b0b      	ldr	r3, [pc, #44]	; (8004ab0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	4b08      	ldr	r3, [pc, #32]	; (8004ab0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004a8e:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END Callback 1 */
}
 8004a90:	bf00      	nop
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40014400 	.word	0x40014400
 8004a9c:	200007a4 	.word	0x200007a4
 8004aa0:	40000400 	.word	0x40000400
 8004aa4:	2001a360 	.word	0x2001a360
 8004aa8:	40002000 	.word	0x40002000
 8004aac:	2001ad10 	.word	0x2001ad10
 8004ab0:	2001a378 	.word	0x2001a378

08004ab4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004ab8:	b672      	cpsid	i
}
 8004aba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004abc:	e7fe      	b.n	8004abc <Error_Handler+0x8>
	...

08004ac0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b082      	sub	sp, #8
 8004ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	607b      	str	r3, [r7, #4]
 8004aca:	4b12      	ldr	r3, [pc, #72]	; (8004b14 <HAL_MspInit+0x54>)
 8004acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ace:	4a11      	ldr	r2, [pc, #68]	; (8004b14 <HAL_MspInit+0x54>)
 8004ad0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ad4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ad6:	4b0f      	ldr	r3, [pc, #60]	; (8004b14 <HAL_MspInit+0x54>)
 8004ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ada:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ade:	607b      	str	r3, [r7, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	603b      	str	r3, [r7, #0]
 8004ae6:	4b0b      	ldr	r3, [pc, #44]	; (8004b14 <HAL_MspInit+0x54>)
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	4a0a      	ldr	r2, [pc, #40]	; (8004b14 <HAL_MspInit+0x54>)
 8004aec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004af0:	6413      	str	r3, [r2, #64]	; 0x40
 8004af2:	4b08      	ldr	r3, [pc, #32]	; (8004b14 <HAL_MspInit+0x54>)
 8004af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004afa:	603b      	str	r3, [r7, #0]
 8004afc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004afe:	2200      	movs	r2, #0
 8004b00:	210f      	movs	r1, #15
 8004b02:	f06f 0001 	mvn.w	r0, #1
 8004b06:	f001 f909 	bl	8005d1c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b0a:	bf00      	nop
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	40023800 	.word	0x40023800

08004b18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b08a      	sub	sp, #40	; 0x28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b20:	f107 0314 	add.w	r3, r7, #20
 8004b24:	2200      	movs	r2, #0
 8004b26:	601a      	str	r2, [r3, #0]
 8004b28:	605a      	str	r2, [r3, #4]
 8004b2a:	609a      	str	r2, [r3, #8]
 8004b2c:	60da      	str	r2, [r3, #12]
 8004b2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	4a29      	ldr	r2, [pc, #164]	; (8004bdc <HAL_I2C_MspInit+0xc4>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d14b      	bne.n	8004bd2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	613b      	str	r3, [r7, #16]
 8004b3e:	4b28      	ldr	r3, [pc, #160]	; (8004be0 <HAL_I2C_MspInit+0xc8>)
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	4a27      	ldr	r2, [pc, #156]	; (8004be0 <HAL_I2C_MspInit+0xc8>)
 8004b44:	f043 0304 	orr.w	r3, r3, #4
 8004b48:	6313      	str	r3, [r2, #48]	; 0x30
 8004b4a:	4b25      	ldr	r3, [pc, #148]	; (8004be0 <HAL_I2C_MspInit+0xc8>)
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	f003 0304 	and.w	r3, r3, #4
 8004b52:	613b      	str	r3, [r7, #16]
 8004b54:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b56:	2300      	movs	r3, #0
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	4b21      	ldr	r3, [pc, #132]	; (8004be0 <HAL_I2C_MspInit+0xc8>)
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5e:	4a20      	ldr	r2, [pc, #128]	; (8004be0 <HAL_I2C_MspInit+0xc8>)
 8004b60:	f043 0301 	orr.w	r3, r3, #1
 8004b64:	6313      	str	r3, [r2, #48]	; 0x30
 8004b66:	4b1e      	ldr	r3, [pc, #120]	; (8004be0 <HAL_I2C_MspInit+0xc8>)
 8004b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004b72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b78:	2312      	movs	r3, #18
 8004b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b80:	2303      	movs	r3, #3
 8004b82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004b84:	2304      	movs	r3, #4
 8004b86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004b88:	f107 0314 	add.w	r3, r7, #20
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	4815      	ldr	r0, [pc, #84]	; (8004be4 <HAL_I2C_MspInit+0xcc>)
 8004b90:	f001 fcf0 	bl	8006574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004b94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004b9a:	2312      	movs	r3, #18
 8004b9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004ba6:	2304      	movs	r3, #4
 8004ba8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004baa:	f107 0314 	add.w	r3, r7, #20
 8004bae:	4619      	mov	r1, r3
 8004bb0:	480d      	ldr	r0, [pc, #52]	; (8004be8 <HAL_I2C_MspInit+0xd0>)
 8004bb2:	f001 fcdf 	bl	8006574 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60bb      	str	r3, [r7, #8]
 8004bba:	4b09      	ldr	r3, [pc, #36]	; (8004be0 <HAL_I2C_MspInit+0xc8>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	4a08      	ldr	r2, [pc, #32]	; (8004be0 <HAL_I2C_MspInit+0xc8>)
 8004bc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8004bc6:	4b06      	ldr	r3, [pc, #24]	; (8004be0 <HAL_I2C_MspInit+0xc8>)
 8004bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bce:	60bb      	str	r3, [r7, #8]
 8004bd0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004bd2:	bf00      	nop
 8004bd4:	3728      	adds	r7, #40	; 0x28
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	bf00      	nop
 8004bdc:	40005c00 	.word	0x40005c00
 8004be0:	40023800 	.word	0x40023800
 8004be4:	40020800 	.word	0x40020800
 8004be8:	40020000 	.word	0x40020000

08004bec <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8004bec:	b480      	push	{r7}
 8004bee:	b085      	sub	sp, #20
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a0b      	ldr	r2, [pc, #44]	; (8004c28 <HAL_RNG_MspInit+0x3c>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d10d      	bne.n	8004c1a <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60fb      	str	r3, [r7, #12]
 8004c02:	4b0a      	ldr	r3, [pc, #40]	; (8004c2c <HAL_RNG_MspInit+0x40>)
 8004c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c06:	4a09      	ldr	r2, [pc, #36]	; (8004c2c <HAL_RNG_MspInit+0x40>)
 8004c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c0c:	6353      	str	r3, [r2, #52]	; 0x34
 8004c0e:	4b07      	ldr	r3, [pc, #28]	; (8004c2c <HAL_RNG_MspInit+0x40>)
 8004c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c16:	60fb      	str	r3, [r7, #12]
 8004c18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8004c1a:	bf00      	nop
 8004c1c:	3714      	adds	r7, #20
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	50060800 	.word	0x50060800
 8004c2c:	40023800 	.word	0x40023800

08004c30 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b086      	sub	sp, #24
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004c38:	f107 0308 	add.w	r3, r7, #8
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	601a      	str	r2, [r3, #0]
 8004c40:	605a      	str	r2, [r3, #4]
 8004c42:	609a      	str	r2, [r3, #8]
 8004c44:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a0c      	ldr	r2, [pc, #48]	; (8004c7c <HAL_RTC_MspInit+0x4c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d111      	bne.n	8004c74 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004c50:	2302      	movs	r3, #2
 8004c52:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004c54:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c58:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004c5a:	f107 0308 	add.w	r3, r7, #8
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f004 fef6 	bl	8009a50 <HAL_RCCEx_PeriphCLKConfig>
 8004c64:	4603      	mov	r3, r0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004c6a:	f7ff ff23 	bl	8004ab4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004c6e:	4b04      	ldr	r3, [pc, #16]	; (8004c80 <HAL_RTC_MspInit+0x50>)
 8004c70:	2201      	movs	r2, #1
 8004c72:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004c74:	bf00      	nop
 8004c76:	3718      	adds	r7, #24
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	40002800 	.word	0x40002800
 8004c80:	42470e3c 	.word	0x42470e3c

08004c84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b08c      	sub	sp, #48	; 0x30
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c8c:	f107 031c 	add.w	r3, r7, #28
 8004c90:	2200      	movs	r2, #0
 8004c92:	601a      	str	r2, [r3, #0]
 8004c94:	605a      	str	r2, [r3, #4]
 8004c96:	609a      	str	r2, [r3, #8]
 8004c98:	60da      	str	r2, [r3, #12]
 8004c9a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a5d      	ldr	r2, [pc, #372]	; (8004e18 <HAL_SPI_MspInit+0x194>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d12c      	bne.n	8004d00 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	61bb      	str	r3, [r7, #24]
 8004caa:	4b5c      	ldr	r3, [pc, #368]	; (8004e1c <HAL_SPI_MspInit+0x198>)
 8004cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cae:	4a5b      	ldr	r2, [pc, #364]	; (8004e1c <HAL_SPI_MspInit+0x198>)
 8004cb0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8004cb6:	4b59      	ldr	r3, [pc, #356]	; (8004e1c <HAL_SPI_MspInit+0x198>)
 8004cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cbe:	61bb      	str	r3, [r7, #24]
 8004cc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	617b      	str	r3, [r7, #20]
 8004cc6:	4b55      	ldr	r3, [pc, #340]	; (8004e1c <HAL_SPI_MspInit+0x198>)
 8004cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cca:	4a54      	ldr	r2, [pc, #336]	; (8004e1c <HAL_SPI_MspInit+0x198>)
 8004ccc:	f043 0301 	orr.w	r3, r3, #1
 8004cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8004cd2:	4b52      	ldr	r3, [pc, #328]	; (8004e1c <HAL_SPI_MspInit+0x198>)
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	617b      	str	r3, [r7, #20]
 8004cdc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8004cde:	23e0      	movs	r3, #224	; 0xe0
 8004ce0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004cea:	2302      	movs	r3, #2
 8004cec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004cee:	2305      	movs	r3, #5
 8004cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cf2:	f107 031c 	add.w	r3, r7, #28
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	4849      	ldr	r0, [pc, #292]	; (8004e20 <HAL_SPI_MspInit+0x19c>)
 8004cfa:	f001 fc3b 	bl	8006574 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004cfe:	e086      	b.n	8004e0e <HAL_SPI_MspInit+0x18a>
  else if(hspi->Instance==SPI2)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a47      	ldr	r2, [pc, #284]	; (8004e24 <HAL_SPI_MspInit+0x1a0>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	f040 8081 	bne.w	8004e0e <HAL_SPI_MspInit+0x18a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	613b      	str	r3, [r7, #16]
 8004d10:	4b42      	ldr	r3, [pc, #264]	; (8004e1c <HAL_SPI_MspInit+0x198>)
 8004d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d14:	4a41      	ldr	r2, [pc, #260]	; (8004e1c <HAL_SPI_MspInit+0x198>)
 8004d16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d1a:	6413      	str	r3, [r2, #64]	; 0x40
 8004d1c:	4b3f      	ldr	r3, [pc, #252]	; (8004e1c <HAL_SPI_MspInit+0x198>)
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d24:	613b      	str	r3, [r7, #16]
 8004d26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60fb      	str	r3, [r7, #12]
 8004d2c:	4b3b      	ldr	r3, [pc, #236]	; (8004e1c <HAL_SPI_MspInit+0x198>)
 8004d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d30:	4a3a      	ldr	r2, [pc, #232]	; (8004e1c <HAL_SPI_MspInit+0x198>)
 8004d32:	f043 0304 	orr.w	r3, r3, #4
 8004d36:	6313      	str	r3, [r2, #48]	; 0x30
 8004d38:	4b38      	ldr	r3, [pc, #224]	; (8004e1c <HAL_SPI_MspInit+0x198>)
 8004d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	60fb      	str	r3, [r7, #12]
 8004d42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d44:	2300      	movs	r3, #0
 8004d46:	60bb      	str	r3, [r7, #8]
 8004d48:	4b34      	ldr	r3, [pc, #208]	; (8004e1c <HAL_SPI_MspInit+0x198>)
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	4a33      	ldr	r2, [pc, #204]	; (8004e1c <HAL_SPI_MspInit+0x198>)
 8004d4e:	f043 0302 	orr.w	r3, r3, #2
 8004d52:	6313      	str	r3, [r2, #48]	; 0x30
 8004d54:	4b31      	ldr	r3, [pc, #196]	; (8004e1c <HAL_SPI_MspInit+0x198>)
 8004d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d58:	f003 0302 	and.w	r3, r3, #2
 8004d5c:	60bb      	str	r3, [r7, #8]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004d60:	2304      	movs	r3, #4
 8004d62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d64:	2302      	movs	r3, #2
 8004d66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d6c:	2303      	movs	r3, #3
 8004d6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004d70:	2305      	movs	r3, #5
 8004d72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d74:	f107 031c 	add.w	r3, r7, #28
 8004d78:	4619      	mov	r1, r3
 8004d7a:	482b      	ldr	r0, [pc, #172]	; (8004e28 <HAL_SPI_MspInit+0x1a4>)
 8004d7c:	f001 fbfa 	bl	8006574 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004d80:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d86:	2302      	movs	r3, #2
 8004d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d8e:	2303      	movs	r3, #3
 8004d90:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004d92:	2305      	movs	r3, #5
 8004d94:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d96:	f107 031c 	add.w	r3, r7, #28
 8004d9a:	4619      	mov	r1, r3
 8004d9c:	4823      	ldr	r0, [pc, #140]	; (8004e2c <HAL_SPI_MspInit+0x1a8>)
 8004d9e:	f001 fbe9 	bl	8006574 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8004da2:	4b23      	ldr	r3, [pc, #140]	; (8004e30 <HAL_SPI_MspInit+0x1ac>)
 8004da4:	4a23      	ldr	r2, [pc, #140]	; (8004e34 <HAL_SPI_MspInit+0x1b0>)
 8004da6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8004da8:	4b21      	ldr	r3, [pc, #132]	; (8004e30 <HAL_SPI_MspInit+0x1ac>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004dae:	4b20      	ldr	r3, [pc, #128]	; (8004e30 <HAL_SPI_MspInit+0x1ac>)
 8004db0:	2240      	movs	r2, #64	; 0x40
 8004db2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004db4:	4b1e      	ldr	r3, [pc, #120]	; (8004e30 <HAL_SPI_MspInit+0x1ac>)
 8004db6:	2200      	movs	r2, #0
 8004db8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004dba:	4b1d      	ldr	r3, [pc, #116]	; (8004e30 <HAL_SPI_MspInit+0x1ac>)
 8004dbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004dc0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004dc2:	4b1b      	ldr	r3, [pc, #108]	; (8004e30 <HAL_SPI_MspInit+0x1ac>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004dc8:	4b19      	ldr	r3, [pc, #100]	; (8004e30 <HAL_SPI_MspInit+0x1ac>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8004dce:	4b18      	ldr	r3, [pc, #96]	; (8004e30 <HAL_SPI_MspInit+0x1ac>)
 8004dd0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004dd4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004dd6:	4b16      	ldr	r3, [pc, #88]	; (8004e30 <HAL_SPI_MspInit+0x1ac>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004ddc:	4b14      	ldr	r3, [pc, #80]	; (8004e30 <HAL_SPI_MspInit+0x1ac>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8004de2:	4813      	ldr	r0, [pc, #76]	; (8004e30 <HAL_SPI_MspInit+0x1ac>)
 8004de4:	f000 ffc4 	bl	8005d70 <HAL_DMA_Init>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d001      	beq.n	8004df2 <HAL_SPI_MspInit+0x16e>
      Error_Handler();
 8004dee:	f7ff fe61 	bl	8004ab4 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	4a0e      	ldr	r2, [pc, #56]	; (8004e30 <HAL_SPI_MspInit+0x1ac>)
 8004df6:	649a      	str	r2, [r3, #72]	; 0x48
 8004df8:	4a0d      	ldr	r2, [pc, #52]	; (8004e30 <HAL_SPI_MspInit+0x1ac>)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8004dfe:	2200      	movs	r2, #0
 8004e00:	2105      	movs	r1, #5
 8004e02:	2024      	movs	r0, #36	; 0x24
 8004e04:	f000 ff8a 	bl	8005d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004e08:	2024      	movs	r0, #36	; 0x24
 8004e0a:	f000 ffa3 	bl	8005d54 <HAL_NVIC_EnableIRQ>
}
 8004e0e:	bf00      	nop
 8004e10:	3730      	adds	r7, #48	; 0x30
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	40013000 	.word	0x40013000
 8004e1c:	40023800 	.word	0x40023800
 8004e20:	40020000 	.word	0x40020000
 8004e24:	40003800 	.word	0x40003800
 8004e28:	40020800 	.word	0x40020800
 8004e2c:	40020400 	.word	0x40020400
 8004e30:	2001acb0 	.word	0x2001acb0
 8004e34:	40026070 	.word	0x40026070

08004e38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a38      	ldr	r2, [pc, #224]	; (8004f28 <HAL_TIM_Base_MspInit+0xf0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d116      	bne.n	8004e78 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	617b      	str	r3, [r7, #20]
 8004e4e:	4b37      	ldr	r3, [pc, #220]	; (8004f2c <HAL_TIM_Base_MspInit+0xf4>)
 8004e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e52:	4a36      	ldr	r2, [pc, #216]	; (8004f2c <HAL_TIM_Base_MspInit+0xf4>)
 8004e54:	f043 0301 	orr.w	r3, r3, #1
 8004e58:	6453      	str	r3, [r2, #68]	; 0x44
 8004e5a:	4b34      	ldr	r3, [pc, #208]	; (8004f2c <HAL_TIM_Base_MspInit+0xf4>)
 8004e5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	617b      	str	r3, [r7, #20]
 8004e64:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8004e66:	2200      	movs	r2, #0
 8004e68:	2105      	movs	r1, #5
 8004e6a:	2019      	movs	r0, #25
 8004e6c:	f000 ff56 	bl	8005d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004e70:	2019      	movs	r0, #25
 8004e72:	f000 ff6f 	bl	8005d54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8004e76:	e052      	b.n	8004f1e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM2)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e80:	d116      	bne.n	8004eb0 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004e82:	2300      	movs	r3, #0
 8004e84:	613b      	str	r3, [r7, #16]
 8004e86:	4b29      	ldr	r3, [pc, #164]	; (8004f2c <HAL_TIM_Base_MspInit+0xf4>)
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	4a28      	ldr	r2, [pc, #160]	; (8004f2c <HAL_TIM_Base_MspInit+0xf4>)
 8004e8c:	f043 0301 	orr.w	r3, r3, #1
 8004e90:	6413      	str	r3, [r2, #64]	; 0x40
 8004e92:	4b26      	ldr	r3, [pc, #152]	; (8004f2c <HAL_TIM_Base_MspInit+0xf4>)
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	f003 0301 	and.w	r3, r3, #1
 8004e9a:	613b      	str	r3, [r7, #16]
 8004e9c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	2105      	movs	r1, #5
 8004ea2:	201c      	movs	r0, #28
 8004ea4:	f000 ff3a 	bl	8005d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004ea8:	201c      	movs	r0, #28
 8004eaa:	f000 ff53 	bl	8005d54 <HAL_NVIC_EnableIRQ>
}
 8004eae:	e036      	b.n	8004f1e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a1e      	ldr	r2, [pc, #120]	; (8004f30 <HAL_TIM_Base_MspInit+0xf8>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d116      	bne.n	8004ee8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	4b1b      	ldr	r3, [pc, #108]	; (8004f2c <HAL_TIM_Base_MspInit+0xf4>)
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	4a1a      	ldr	r2, [pc, #104]	; (8004f2c <HAL_TIM_Base_MspInit+0xf4>)
 8004ec4:	f043 0302 	orr.w	r3, r3, #2
 8004ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8004eca:	4b18      	ldr	r3, [pc, #96]	; (8004f2c <HAL_TIM_Base_MspInit+0xf4>)
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	f003 0302 	and.w	r3, r3, #2
 8004ed2:	60fb      	str	r3, [r7, #12]
 8004ed4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	2105      	movs	r1, #5
 8004eda:	201d      	movs	r0, #29
 8004edc:	f000 ff1e 	bl	8005d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004ee0:	201d      	movs	r0, #29
 8004ee2:	f000 ff37 	bl	8005d54 <HAL_NVIC_EnableIRQ>
}
 8004ee6:	e01a      	b.n	8004f1e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	4a11      	ldr	r2, [pc, #68]	; (8004f34 <HAL_TIM_Base_MspInit+0xfc>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d115      	bne.n	8004f1e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	60bb      	str	r3, [r7, #8]
 8004ef6:	4b0d      	ldr	r3, [pc, #52]	; (8004f2c <HAL_TIM_Base_MspInit+0xf4>)
 8004ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004efa:	4a0c      	ldr	r2, [pc, #48]	; (8004f2c <HAL_TIM_Base_MspInit+0xf4>)
 8004efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f00:	6453      	str	r3, [r2, #68]	; 0x44
 8004f02:	4b0a      	ldr	r3, [pc, #40]	; (8004f2c <HAL_TIM_Base_MspInit+0xf4>)
 8004f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0a:	60bb      	str	r3, [r7, #8]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8004f0e:	2200      	movs	r2, #0
 8004f10:	2105      	movs	r1, #5
 8004f12:	2019      	movs	r0, #25
 8004f14:	f000 ff02 	bl	8005d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004f18:	2019      	movs	r0, #25
 8004f1a:	f000 ff1b 	bl	8005d54 <HAL_NVIC_EnableIRQ>
}
 8004f1e:	bf00      	nop
 8004f20:	3718      	adds	r7, #24
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	40010000 	.word	0x40010000
 8004f2c:	40023800 	.word	0x40023800
 8004f30:	40000400 	.word	0x40000400
 8004f34:	40014400 	.word	0x40014400

08004f38 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b08c      	sub	sp, #48	; 0x30
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004f40:	2300      	movs	r3, #0
 8004f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004f44:	2300      	movs	r3, #0
 8004f46:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8004f48:	2200      	movs	r2, #0
 8004f4a:	6879      	ldr	r1, [r7, #4]
 8004f4c:	202d      	movs	r0, #45	; 0x2d
 8004f4e:	f000 fee5 	bl	8005d1c <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004f52:	202d      	movs	r0, #45	; 0x2d
 8004f54:	f000 fefe 	bl	8005d54 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	4b1f      	ldr	r3, [pc, #124]	; (8004fdc <HAL_InitTick+0xa4>)
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f60:	4a1e      	ldr	r2, [pc, #120]	; (8004fdc <HAL_InitTick+0xa4>)
 8004f62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f66:	6413      	str	r3, [r2, #64]	; 0x40
 8004f68:	4b1c      	ldr	r3, [pc, #112]	; (8004fdc <HAL_InitTick+0xa4>)
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f70:	60fb      	str	r3, [r7, #12]
 8004f72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004f74:	f107 0210 	add.w	r2, r7, #16
 8004f78:	f107 0314 	add.w	r3, r7, #20
 8004f7c:	4611      	mov	r1, r2
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f004 fd34 	bl	80099ec <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004f84:	f004 fd1e 	bl	80099c4 <HAL_RCC_GetPCLK1Freq>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	005b      	lsls	r3, r3, #1
 8004f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f90:	4a13      	ldr	r2, [pc, #76]	; (8004fe0 <HAL_InitTick+0xa8>)
 8004f92:	fba2 2303 	umull	r2, r3, r2, r3
 8004f96:	0c9b      	lsrs	r3, r3, #18
 8004f98:	3b01      	subs	r3, #1
 8004f9a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8004f9c:	4b11      	ldr	r3, [pc, #68]	; (8004fe4 <HAL_InitTick+0xac>)
 8004f9e:	4a12      	ldr	r2, [pc, #72]	; (8004fe8 <HAL_InitTick+0xb0>)
 8004fa0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8004fa2:	4b10      	ldr	r3, [pc, #64]	; (8004fe4 <HAL_InitTick+0xac>)
 8004fa4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004fa8:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8004faa:	4a0e      	ldr	r2, [pc, #56]	; (8004fe4 <HAL_InitTick+0xac>)
 8004fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fae:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8004fb0:	4b0c      	ldr	r3, [pc, #48]	; (8004fe4 <HAL_InitTick+0xac>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004fb6:	4b0b      	ldr	r3, [pc, #44]	; (8004fe4 <HAL_InitTick+0xac>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8004fbc:	4809      	ldr	r0, [pc, #36]	; (8004fe4 <HAL_InitTick+0xac>)
 8004fbe:	f006 f9e7 	bl	800b390 <HAL_TIM_Base_Init>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d104      	bne.n	8004fd2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8004fc8:	4806      	ldr	r0, [pc, #24]	; (8004fe4 <HAL_InitTick+0xac>)
 8004fca:	f006 fa31 	bl	800b430 <HAL_TIM_Base_Start_IT>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	e000      	b.n	8004fd4 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
}
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	3730      	adds	r7, #48	; 0x30
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	40023800 	.word	0x40023800
 8004fe0:	431bde83 	.word	0x431bde83
 8004fe4:	2001b668 	.word	0x2001b668
 8004fe8:	40002000 	.word	0x40002000

08004fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004fec:	b480      	push	{r7}
 8004fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ff0:	e7fe      	b.n	8004ff0 <NMI_Handler+0x4>

08004ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ff2:	b480      	push	{r7}
 8004ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ff6:	e7fe      	b.n	8004ff6 <HardFault_Handler+0x4>

08004ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ffc:	e7fe      	b.n	8004ffc <MemManage_Handler+0x4>

08004ffe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ffe:	b480      	push	{r7}
 8005000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005002:	e7fe      	b.n	8005002 <BusFault_Handler+0x4>

08005004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005008:	e7fe      	b.n	8005008 <UsageFault_Handler+0x4>

0800500a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800500a:	b480      	push	{r7}
 800500c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800500e:	bf00      	nop
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800501c:	4802      	ldr	r0, [pc, #8]	; (8005028 <DMA1_Stream4_IRQHandler+0x10>)
 800501e:	f001 f83f 	bl	80060a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005022:	bf00      	nop
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	2001acb0 	.word	0x2001acb0

0800502c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */


  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005030:	4803      	ldr	r0, [pc, #12]	; (8005040 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8005032:	f006 fa9c 	bl	800b56e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8005036:	4803      	ldr	r0, [pc, #12]	; (8005044 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8005038:	f006 fa99 	bl	800b56e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800503c:	bf00      	nop
 800503e:	bd80      	pop	{r7, pc}
 8005040:	2001a118 	.word	0x2001a118
 8005044:	2000a9d8 	.word	0x2000a9d8

08005048 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//	HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800504c:	4802      	ldr	r0, [pc, #8]	; (8005058 <TIM2_IRQHandler+0x10>)
 800504e:	f006 fa8e 	bl	800b56e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005052:	bf00      	nop
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	2001a498 	.word	0x2001a498

0800505c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005060:	4802      	ldr	r0, [pc, #8]	; (800506c <TIM3_IRQHandler+0x10>)
 8005062:	f006 fa84 	bl	800b56e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005066:	bf00      	nop
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	2000eb78 	.word	0x2000eb78

08005070 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8005074:	4802      	ldr	r0, [pc, #8]	; (8005080 <SPI2_IRQHandler+0x10>)
 8005076:	f005 ff09 	bl	800ae8c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800507a:	bf00      	nop
 800507c:	bd80      	pop	{r7, pc}
 800507e:	bf00      	nop
 8005080:	2000a960 	.word	0x2000a960

08005084 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8005088:	4802      	ldr	r0, [pc, #8]	; (8005094 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800508a:	f006 fa70 	bl	800b56e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800508e:	bf00      	nop
 8005090:	bd80      	pop	{r7, pc}
 8005092:	bf00      	nop
 8005094:	2001b668 	.word	0x2001b668

08005098 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800509c:	4802      	ldr	r0, [pc, #8]	; (80050a8 <OTG_FS_IRQHandler+0x10>)
 800509e:	f003 f812 	bl	80080c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80050a2:	bf00      	nop
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	2001ec48 	.word	0x2001ec48

080050ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80050ac:	b480      	push	{r7}
 80050ae:	af00      	add	r7, sp, #0
	return 1;
 80050b0:	2301      	movs	r3, #1
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <_kill>:

int _kill(int pid, int sig)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b082      	sub	sp, #8
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80050c6:	f011 fe9d 	bl	8016e04 <__errno>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2216      	movs	r2, #22
 80050ce:	601a      	str	r2, [r3, #0]
	return -1;
 80050d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3708      	adds	r7, #8
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <_exit>:

void _exit (int status)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80050e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f7ff ffe7 	bl	80050bc <_kill>
	while (1) {}		/* Make sure we hang here */
 80050ee:	e7fe      	b.n	80050ee <_exit+0x12>

080050f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050fc:	2300      	movs	r3, #0
 80050fe:	617b      	str	r3, [r7, #20]
 8005100:	e00a      	b.n	8005118 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005102:	f3af 8000 	nop.w
 8005106:	4601      	mov	r1, r0
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	1c5a      	adds	r2, r3, #1
 800510c:	60ba      	str	r2, [r7, #8]
 800510e:	b2ca      	uxtb	r2, r1
 8005110:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	3301      	adds	r3, #1
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	429a      	cmp	r2, r3
 800511e:	dbf0      	blt.n	8005102 <_read+0x12>
	}

return len;
 8005120:	687b      	ldr	r3, [r7, #4]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3718      	adds	r7, #24
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}

0800512a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800512a:	b580      	push	{r7, lr}
 800512c:	b086      	sub	sp, #24
 800512e:	af00      	add	r7, sp, #0
 8005130:	60f8      	str	r0, [r7, #12]
 8005132:	60b9      	str	r1, [r7, #8]
 8005134:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005136:	2300      	movs	r3, #0
 8005138:	617b      	str	r3, [r7, #20]
 800513a:	e009      	b.n	8005150 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	1c5a      	adds	r2, r3, #1
 8005140:	60ba      	str	r2, [r7, #8]
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	4618      	mov	r0, r3
 8005146:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800514a:	697b      	ldr	r3, [r7, #20]
 800514c:	3301      	adds	r3, #1
 800514e:	617b      	str	r3, [r7, #20]
 8005150:	697a      	ldr	r2, [r7, #20]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	429a      	cmp	r2, r3
 8005156:	dbf1      	blt.n	800513c <_write+0x12>
	}
	return len;
 8005158:	687b      	ldr	r3, [r7, #4]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3718      	adds	r7, #24
 800515e:	46bd      	mov	sp, r7
 8005160:	bd80      	pop	{r7, pc}

08005162 <_close>:

int _close(int file)
{
 8005162:	b480      	push	{r7}
 8005164:	b083      	sub	sp, #12
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
	return -1;
 800516a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800516e:	4618      	mov	r0, r3
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
 8005182:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800518a:	605a      	str	r2, [r3, #4]
	return 0;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	370c      	adds	r7, #12
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <_isatty>:

int _isatty(int file)
{
 800519a:	b480      	push	{r7}
 800519c:	b083      	sub	sp, #12
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
	return 1;
 80051a2:	2301      	movs	r3, #1
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b085      	sub	sp, #20
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
	return 0;
 80051bc:	2300      	movs	r3, #0
}
 80051be:	4618      	mov	r0, r3
 80051c0:	3714      	adds	r7, #20
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr
	...

080051cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b086      	sub	sp, #24
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80051d4:	4a14      	ldr	r2, [pc, #80]	; (8005228 <_sbrk+0x5c>)
 80051d6:	4b15      	ldr	r3, [pc, #84]	; (800522c <_sbrk+0x60>)
 80051d8:	1ad3      	subs	r3, r2, r3
 80051da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80051e0:	4b13      	ldr	r3, [pc, #76]	; (8005230 <_sbrk+0x64>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d102      	bne.n	80051ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80051e8:	4b11      	ldr	r3, [pc, #68]	; (8005230 <_sbrk+0x64>)
 80051ea:	4a12      	ldr	r2, [pc, #72]	; (8005234 <_sbrk+0x68>)
 80051ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80051ee:	4b10      	ldr	r3, [pc, #64]	; (8005230 <_sbrk+0x64>)
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	4413      	add	r3, r2
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d207      	bcs.n	800520c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80051fc:	f011 fe02 	bl	8016e04 <__errno>
 8005200:	4603      	mov	r3, r0
 8005202:	220c      	movs	r2, #12
 8005204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005206:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800520a:	e009      	b.n	8005220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800520c:	4b08      	ldr	r3, [pc, #32]	; (8005230 <_sbrk+0x64>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005212:	4b07      	ldr	r3, [pc, #28]	; (8005230 <_sbrk+0x64>)
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4413      	add	r3, r2
 800521a:	4a05      	ldr	r2, [pc, #20]	; (8005230 <_sbrk+0x64>)
 800521c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800521e:	68fb      	ldr	r3, [r7, #12]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3718      	adds	r7, #24
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	20020000 	.word	0x20020000
 800522c:	00000400 	.word	0x00000400
 8005230:	200007b0 	.word	0x200007b0
 8005234:	2001f060 	.word	0x2001f060

08005238 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005238:	b480      	push	{r7}
 800523a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800523c:	4b06      	ldr	r3, [pc, #24]	; (8005258 <SystemInit+0x20>)
 800523e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005242:	4a05      	ldr	r2, [pc, #20]	; (8005258 <SystemInit+0x20>)
 8005244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800524c:	bf00      	nop
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	e000ed00 	.word	0xe000ed00

0800525c <TFT9341_FontsIni>:

static void TFT9341_WriteData(uint8_t* buff, size_t buff_size);

// ---------------------------------------------------------------------------------
void TFT9341_FontsIni(void)
{
 800525c:	b480      	push	{r7}
 800525e:	af00      	add	r7, sp, #0
  Font8.Height = 8;
 8005260:	4b16      	ldr	r3, [pc, #88]	; (80052bc <TFT9341_FontsIni+0x60>)
 8005262:	2208      	movs	r2, #8
 8005264:	80da      	strh	r2, [r3, #6]
  Font8.Width = 5;
 8005266:	4b15      	ldr	r3, [pc, #84]	; (80052bc <TFT9341_FontsIni+0x60>)
 8005268:	2205      	movs	r2, #5
 800526a:	809a      	strh	r2, [r3, #4]
  Font12.Height = 12;
 800526c:	4b14      	ldr	r3, [pc, #80]	; (80052c0 <TFT9341_FontsIni+0x64>)
 800526e:	220c      	movs	r2, #12
 8005270:	80da      	strh	r2, [r3, #6]
  Font12.Width = 7;
 8005272:	4b13      	ldr	r3, [pc, #76]	; (80052c0 <TFT9341_FontsIni+0x64>)
 8005274:	2207      	movs	r2, #7
 8005276:	809a      	strh	r2, [r3, #4]
  Font16.Height = 16;
 8005278:	4b12      	ldr	r3, [pc, #72]	; (80052c4 <TFT9341_FontsIni+0x68>)
 800527a:	2210      	movs	r2, #16
 800527c:	80da      	strh	r2, [r3, #6]
  Font16.Width = 11;
 800527e:	4b11      	ldr	r3, [pc, #68]	; (80052c4 <TFT9341_FontsIni+0x68>)
 8005280:	220b      	movs	r2, #11
 8005282:	809a      	strh	r2, [r3, #4]
  Font20.Height = 20;
 8005284:	4b10      	ldr	r3, [pc, #64]	; (80052c8 <TFT9341_FontsIni+0x6c>)
 8005286:	2214      	movs	r2, #20
 8005288:	80da      	strh	r2, [r3, #6]
  Font20.Width = 14;
 800528a:	4b0f      	ldr	r3, [pc, #60]	; (80052c8 <TFT9341_FontsIni+0x6c>)
 800528c:	220e      	movs	r2, #14
 800528e:	809a      	strh	r2, [r3, #4]
  Font24.Height = 24;
 8005290:	4b0e      	ldr	r3, [pc, #56]	; (80052cc <TFT9341_FontsIni+0x70>)
 8005292:	2218      	movs	r2, #24
 8005294:	80da      	strh	r2, [r3, #6]
  Font24.Width = 17;
 8005296:	4b0d      	ldr	r3, [pc, #52]	; (80052cc <TFT9341_FontsIni+0x70>)
 8005298:	2211      	movs	r2, #17
 800529a:	809a      	strh	r2, [r3, #4]
  lcdprop.BackColor=TFT9341_BLACK;
 800529c:	4b0c      	ldr	r3, [pc, #48]	; (80052d0 <TFT9341_FontsIni+0x74>)
 800529e:	2200      	movs	r2, #0
 80052a0:	805a      	strh	r2, [r3, #2]
  lcdprop.TextColor=TFT9341_GREEN;
 80052a2:	4b0b      	ldr	r3, [pc, #44]	; (80052d0 <TFT9341_FontsIni+0x74>)
 80052a4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80052a8:	801a      	strh	r2, [r3, #0]
  lcdprop.pFont=&Font16;
 80052aa:	4b09      	ldr	r3, [pc, #36]	; (80052d0 <TFT9341_FontsIni+0x74>)
 80052ac:	4a05      	ldr	r2, [pc, #20]	; (80052c4 <TFT9341_FontsIni+0x68>)
 80052ae:	605a      	str	r2, [r3, #4]
}
 80052b0:	bf00      	nop
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	2000002c 	.word	0x2000002c
 80052c0:	2000000c 	.word	0x2000000c
 80052c4:	20000014 	.word	0x20000014
 80052c8:	2000001c 	.word	0x2000001c
 80052cc:	20000024 	.word	0x20000024
 80052d0:	2001b6b4 	.word	0x2001b6b4

080052d4 <TFT9341_SendCommand>:
	DC_DATA();
	HAL_SPI_Transmit (&hspi2, &dt, 1, 5000);
}
// ---------------------------------------------------------------------------------
void TFT9341_SendCommand(uint8_t cmd)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	4603      	mov	r3, r0
 80052dc:	71fb      	strb	r3, [r7, #7]
  DC_COMMAND();
 80052de:	2200      	movs	r2, #0
 80052e0:	2140      	movs	r1, #64	; 0x40
 80052e2:	4807      	ldr	r0, [pc, #28]	; (8005300 <TFT9341_SendCommand+0x2c>)
 80052e4:	f001 fae2 	bl	80068ac <HAL_GPIO_WritePin>
  HAL_SPI_Transmit (&hspi2, &cmd, 1, 5000);
 80052e8:	1df9      	adds	r1, r7, #7
 80052ea:	f241 3388 	movw	r3, #5000	; 0x1388
 80052ee:	2201      	movs	r2, #1
 80052f0:	4804      	ldr	r0, [pc, #16]	; (8005304 <TFT9341_SendCommand+0x30>)
 80052f2:	f005 f9f7 	bl	800a6e4 <HAL_SPI_Transmit>
}
 80052f6:	bf00      	nop
 80052f8:	3708      	adds	r7, #8
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	40021000 	.word	0x40021000
 8005304:	2000a960 	.word	0x2000a960

08005308 <TFT9341_reset>:
// ---------------------------------------------------------------------------------
void TFT9341_reset(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	af00      	add	r7, sp, #0
	RESET_ACTIVE();
 800530c:	2200      	movs	r2, #0
 800530e:	2120      	movs	r1, #32
 8005310:	4806      	ldr	r0, [pc, #24]	; (800532c <TFT9341_reset+0x24>)
 8005312:	f001 facb 	bl	80068ac <HAL_GPIO_WritePin>
	osDelay(5);
 8005316:	2005      	movs	r0, #5
 8005318:	f00d f9e0 	bl	80126dc <osDelay>
	RESET_IDLE();
 800531c:	2201      	movs	r2, #1
 800531e:	2120      	movs	r1, #32
 8005320:	4802      	ldr	r0, [pc, #8]	; (800532c <TFT9341_reset+0x24>)
 8005322:	f001 fac3 	bl	80068ac <HAL_GPIO_WritePin>
}
 8005326:	bf00      	nop
 8005328:	bd80      	pop	{r7, pc}
 800532a:	bf00      	nop
 800532c:	40021000 	.word	0x40021000

08005330 <TFT9341_ini>:
// ---------------------------------------------------------------------------------
void TFT9341_ini(uint16_t w_size, uint16_t h_size)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b086      	sub	sp, #24
 8005334:	af00      	add	r7, sp, #0
 8005336:	4603      	mov	r3, r0
 8005338:	460a      	mov	r2, r1
 800533a:	80fb      	strh	r3, [r7, #6]
 800533c:	4613      	mov	r3, r2
 800533e:	80bb      	strh	r3, [r7, #4]
  uint8_t data[15];
  CS_ACTIVE();
 8005340:	2200      	movs	r2, #0
 8005342:	2110      	movs	r1, #16
 8005344:	48a3      	ldr	r0, [pc, #652]	; (80055d4 <TFT9341_ini+0x2a4>)
 8005346:	f001 fab1 	bl	80068ac <HAL_GPIO_WritePin>
  TFT9341_reset();
 800534a:	f7ff ffdd 	bl	8005308 <TFT9341_reset>

  //Software Reset
  TFT9341_SendCommand(0x01);
 800534e:	2001      	movs	r0, #1
 8005350:	f7ff ffc0 	bl	80052d4 <TFT9341_SendCommand>
  osDelay(1000);
 8005354:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005358:	f00d f9c0 	bl	80126dc <osDelay>

  //Power Control A
    data[0] = 0x39;
 800535c:	2339      	movs	r3, #57	; 0x39
 800535e:	723b      	strb	r3, [r7, #8]
    data[1] = 0x2C;
 8005360:	232c      	movs	r3, #44	; 0x2c
 8005362:	727b      	strb	r3, [r7, #9]
    data[2] = 0x00;
 8005364:	2300      	movs	r3, #0
 8005366:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x34;
 8005368:	2334      	movs	r3, #52	; 0x34
 800536a:	72fb      	strb	r3, [r7, #11]
    data[4] = 0x02;
 800536c:	2302      	movs	r3, #2
 800536e:	733b      	strb	r3, [r7, #12]
    TFT9341_SendCommand(0xCB);
 8005370:	20cb      	movs	r0, #203	; 0xcb
 8005372:	f7ff ffaf 	bl	80052d4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 5);
 8005376:	f107 0308 	add.w	r3, r7, #8
 800537a:	2105      	movs	r1, #5
 800537c:	4618      	mov	r0, r3
 800537e:	f000 f92f 	bl	80055e0 <TFT9341_WriteData>
    //Power Control B
    data[0] = 0x00;
 8005382:	2300      	movs	r3, #0
 8005384:	723b      	strb	r3, [r7, #8]
    data[1] = 0xC1;
 8005386:	23c1      	movs	r3, #193	; 0xc1
 8005388:	727b      	strb	r3, [r7, #9]
    data[2] = 0x30;
 800538a:	2330      	movs	r3, #48	; 0x30
 800538c:	72bb      	strb	r3, [r7, #10]
    TFT9341_SendCommand(0xCF);
 800538e:	20cf      	movs	r0, #207	; 0xcf
 8005390:	f7ff ffa0 	bl	80052d4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 3);
 8005394:	f107 0308 	add.w	r3, r7, #8
 8005398:	2103      	movs	r1, #3
 800539a:	4618      	mov	r0, r3
 800539c:	f000 f920 	bl	80055e0 <TFT9341_WriteData>
    //Driver timing control A
    data[0] = 0x85;
 80053a0:	2385      	movs	r3, #133	; 0x85
 80053a2:	723b      	strb	r3, [r7, #8]
    data[1] = 0x00;
 80053a4:	2300      	movs	r3, #0
 80053a6:	727b      	strb	r3, [r7, #9]
    data[2] = 0x78;
 80053a8:	2378      	movs	r3, #120	; 0x78
 80053aa:	72bb      	strb	r3, [r7, #10]
    TFT9341_SendCommand(0xE8);
 80053ac:	20e8      	movs	r0, #232	; 0xe8
 80053ae:	f7ff ff91 	bl	80052d4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 3);
 80053b2:	f107 0308 	add.w	r3, r7, #8
 80053b6:	2103      	movs	r1, #3
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 f911 	bl	80055e0 <TFT9341_WriteData>
    //Driver timing control B
    data[0] = 0x00;
 80053be:	2300      	movs	r3, #0
 80053c0:	723b      	strb	r3, [r7, #8]
    data[1] = 0x00;
 80053c2:	2300      	movs	r3, #0
 80053c4:	727b      	strb	r3, [r7, #9]
    TFT9341_SendCommand(0xEA);
 80053c6:	20ea      	movs	r0, #234	; 0xea
 80053c8:	f7ff ff84 	bl	80052d4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 2);
 80053cc:	f107 0308 	add.w	r3, r7, #8
 80053d0:	2102      	movs	r1, #2
 80053d2:	4618      	mov	r0, r3
 80053d4:	f000 f904 	bl	80055e0 <TFT9341_WriteData>
    //Power on Sequence control
    data[0] = 0x64;
 80053d8:	2364      	movs	r3, #100	; 0x64
 80053da:	723b      	strb	r3, [r7, #8]
    data[1] = 0x03;
 80053dc:	2303      	movs	r3, #3
 80053de:	727b      	strb	r3, [r7, #9]
    data[2] = 0x12;
 80053e0:	2312      	movs	r3, #18
 80053e2:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x81;
 80053e4:	2381      	movs	r3, #129	; 0x81
 80053e6:	72fb      	strb	r3, [r7, #11]
    TFT9341_SendCommand(0xED);
 80053e8:	20ed      	movs	r0, #237	; 0xed
 80053ea:	f7ff ff73 	bl	80052d4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 4);
 80053ee:	f107 0308 	add.w	r3, r7, #8
 80053f2:	2104      	movs	r1, #4
 80053f4:	4618      	mov	r0, r3
 80053f6:	f000 f8f3 	bl	80055e0 <TFT9341_WriteData>
    //Pump ratio control
    data[0] = 0x20;
 80053fa:	2320      	movs	r3, #32
 80053fc:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xF7);
 80053fe:	20f7      	movs	r0, #247	; 0xf7
 8005400:	f7ff ff68 	bl	80052d4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8005404:	f107 0308 	add.w	r3, r7, #8
 8005408:	2101      	movs	r1, #1
 800540a:	4618      	mov	r0, r3
 800540c:	f000 f8e8 	bl	80055e0 <TFT9341_WriteData>
    //Power Control,VRH[5:0]
    data[0] = 0x10;
 8005410:	2310      	movs	r3, #16
 8005412:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xC0);
 8005414:	20c0      	movs	r0, #192	; 0xc0
 8005416:	f7ff ff5d 	bl	80052d4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 800541a:	f107 0308 	add.w	r3, r7, #8
 800541e:	2101      	movs	r1, #1
 8005420:	4618      	mov	r0, r3
 8005422:	f000 f8dd 	bl	80055e0 <TFT9341_WriteData>
    //Power Control,SAP[2:0];BT[3:0]
    data[0] = 0x10;
 8005426:	2310      	movs	r3, #16
 8005428:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xC1);
 800542a:	20c1      	movs	r0, #193	; 0xc1
 800542c:	f7ff ff52 	bl	80052d4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8005430:	f107 0308 	add.w	r3, r7, #8
 8005434:	2101      	movs	r1, #1
 8005436:	4618      	mov	r0, r3
 8005438:	f000 f8d2 	bl	80055e0 <TFT9341_WriteData>
    //VCOM Control 1
    data[0] = 0x3E;
 800543c:	233e      	movs	r3, #62	; 0x3e
 800543e:	723b      	strb	r3, [r7, #8]
    data[1] = 0x28;
 8005440:	2328      	movs	r3, #40	; 0x28
 8005442:	727b      	strb	r3, [r7, #9]
    TFT9341_SendCommand(0xC5);
 8005444:	20c5      	movs	r0, #197	; 0xc5
 8005446:	f7ff ff45 	bl	80052d4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 2);
 800544a:	f107 0308 	add.w	r3, r7, #8
 800544e:	2102      	movs	r1, #2
 8005450:	4618      	mov	r0, r3
 8005452:	f000 f8c5 	bl	80055e0 <TFT9341_WriteData>
    //VCOM Control 2
    data[0] = 0x86;
 8005456:	2386      	movs	r3, #134	; 0x86
 8005458:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xC7);
 800545a:	20c7      	movs	r0, #199	; 0xc7
 800545c:	f7ff ff3a 	bl	80052d4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8005460:	f107 0308 	add.w	r3, r7, #8
 8005464:	2101      	movs	r1, #1
 8005466:	4618      	mov	r0, r3
 8005468:	f000 f8ba 	bl	80055e0 <TFT9341_WriteData>
    //Memory Acsess Control
    data[0] = 0x48;
 800546c:	2348      	movs	r3, #72	; 0x48
 800546e:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x36);
 8005470:	2036      	movs	r0, #54	; 0x36
 8005472:	f7ff ff2f 	bl	80052d4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8005476:	f107 0308 	add.w	r3, r7, #8
 800547a:	2101      	movs	r1, #1
 800547c:	4618      	mov	r0, r3
 800547e:	f000 f8af 	bl	80055e0 <TFT9341_WriteData>
    //Pixel Format Set
    data[0] = 0x55;//16bit
 8005482:	2355      	movs	r3, #85	; 0x55
 8005484:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x3A);
 8005486:	203a      	movs	r0, #58	; 0x3a
 8005488:	f7ff ff24 	bl	80052d4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 800548c:	f107 0308 	add.w	r3, r7, #8
 8005490:	2101      	movs	r1, #1
 8005492:	4618      	mov	r0, r3
 8005494:	f000 f8a4 	bl	80055e0 <TFT9341_WriteData>
    //Frame Rratio Control, Standard RGB Color
    data[0] = 0x00;
 8005498:	2300      	movs	r3, #0
 800549a:	723b      	strb	r3, [r7, #8]
    data[1] = 0x18;
 800549c:	2318      	movs	r3, #24
 800549e:	727b      	strb	r3, [r7, #9]
    TFT9341_SendCommand(0xB1);
 80054a0:	20b1      	movs	r0, #177	; 0xb1
 80054a2:	f7ff ff17 	bl	80052d4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 2);
 80054a6:	f107 0308 	add.w	r3, r7, #8
 80054aa:	2102      	movs	r1, #2
 80054ac:	4618      	mov	r0, r3
 80054ae:	f000 f897 	bl	80055e0 <TFT9341_WriteData>
    //Display Function Control
    data[0] = 0x08;
 80054b2:	2308      	movs	r3, #8
 80054b4:	723b      	strb	r3, [r7, #8]
    data[1] = 0x82;
 80054b6:	2382      	movs	r3, #130	; 0x82
 80054b8:	727b      	strb	r3, [r7, #9]
    data[2] = 0x27;//320 строк
 80054ba:	2327      	movs	r3, #39	; 0x27
 80054bc:	72bb      	strb	r3, [r7, #10]
    TFT9341_SendCommand(0xB6);
 80054be:	20b6      	movs	r0, #182	; 0xb6
 80054c0:	f7ff ff08 	bl	80052d4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 3);
 80054c4:	f107 0308 	add.w	r3, r7, #8
 80054c8:	2103      	movs	r1, #3
 80054ca:	4618      	mov	r0, r3
 80054cc:	f000 f888 	bl	80055e0 <TFT9341_WriteData>
    //Enable 3G (пока не знаю что это за режим)
    data[0] = 0x00;//не включаем
 80054d0:	2300      	movs	r3, #0
 80054d2:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xF2);
 80054d4:	20f2      	movs	r0, #242	; 0xf2
 80054d6:	f7ff fefd 	bl	80052d4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 80054da:	f107 0308 	add.w	r3, r7, #8
 80054de:	2101      	movs	r1, #1
 80054e0:	4618      	mov	r0, r3
 80054e2:	f000 f87d 	bl	80055e0 <TFT9341_WriteData>
    //Gamma set
    data[0] = 0x01;//Gamma Curve (G2.2) (Кривая цветовой гаммы)
 80054e6:	2301      	movs	r3, #1
 80054e8:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x26);
 80054ea:	2026      	movs	r0, #38	; 0x26
 80054ec:	f7ff fef2 	bl	80052d4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 80054f0:	f107 0308 	add.w	r3, r7, #8
 80054f4:	2101      	movs	r1, #1
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 f872 	bl	80055e0 <TFT9341_WriteData>
    //Positive Gamma  Correction
    data[0] = 0x0F;
 80054fc:	230f      	movs	r3, #15
 80054fe:	723b      	strb	r3, [r7, #8]
    data[1] = 0x31;
 8005500:	2331      	movs	r3, #49	; 0x31
 8005502:	727b      	strb	r3, [r7, #9]
    data[2] = 0x2B;
 8005504:	232b      	movs	r3, #43	; 0x2b
 8005506:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x0C;
 8005508:	230c      	movs	r3, #12
 800550a:	72fb      	strb	r3, [r7, #11]
    data[4] = 0x0E;
 800550c:	230e      	movs	r3, #14
 800550e:	733b      	strb	r3, [r7, #12]
    data[5] = 0x08;
 8005510:	2308      	movs	r3, #8
 8005512:	737b      	strb	r3, [r7, #13]
    data[6] = 0x4E;
 8005514:	234e      	movs	r3, #78	; 0x4e
 8005516:	73bb      	strb	r3, [r7, #14]
    data[7] = 0xF1;
 8005518:	23f1      	movs	r3, #241	; 0xf1
 800551a:	73fb      	strb	r3, [r7, #15]
    data[8] = 0x37;
 800551c:	2337      	movs	r3, #55	; 0x37
 800551e:	743b      	strb	r3, [r7, #16]
    data[9] = 0x07;
 8005520:	2307      	movs	r3, #7
 8005522:	747b      	strb	r3, [r7, #17]
    data[10] = 0x10;
 8005524:	2310      	movs	r3, #16
 8005526:	74bb      	strb	r3, [r7, #18]
    data[11] = 0x03;
 8005528:	2303      	movs	r3, #3
 800552a:	74fb      	strb	r3, [r7, #19]
    data[12] = 0x0E;
 800552c:	230e      	movs	r3, #14
 800552e:	753b      	strb	r3, [r7, #20]
    data[13] = 0x09;
 8005530:	2309      	movs	r3, #9
 8005532:	757b      	strb	r3, [r7, #21]
    data[14] = 0x00;
 8005534:	2300      	movs	r3, #0
 8005536:	75bb      	strb	r3, [r7, #22]
    TFT9341_SendCommand(0xE0);
 8005538:	20e0      	movs	r0, #224	; 0xe0
 800553a:	f7ff fecb 	bl	80052d4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 15);
 800553e:	f107 0308 	add.w	r3, r7, #8
 8005542:	210f      	movs	r1, #15
 8005544:	4618      	mov	r0, r3
 8005546:	f000 f84b 	bl	80055e0 <TFT9341_WriteData>
    //Negative Gamma  Correction
    data[0] = 0x00;
 800554a:	2300      	movs	r3, #0
 800554c:	723b      	strb	r3, [r7, #8]
    data[1] = 0x0E;
 800554e:	230e      	movs	r3, #14
 8005550:	727b      	strb	r3, [r7, #9]
    data[2] = 0x14;
 8005552:	2314      	movs	r3, #20
 8005554:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x03;
 8005556:	2303      	movs	r3, #3
 8005558:	72fb      	strb	r3, [r7, #11]
    data[4] = 0x11;
 800555a:	2311      	movs	r3, #17
 800555c:	733b      	strb	r3, [r7, #12]
    data[5] = 0x07;
 800555e:	2307      	movs	r3, #7
 8005560:	737b      	strb	r3, [r7, #13]
    data[6] = 0x31;
 8005562:	2331      	movs	r3, #49	; 0x31
 8005564:	73bb      	strb	r3, [r7, #14]
    data[7] = 0xC1;
 8005566:	23c1      	movs	r3, #193	; 0xc1
 8005568:	73fb      	strb	r3, [r7, #15]
    data[8] = 0x48;
 800556a:	2348      	movs	r3, #72	; 0x48
 800556c:	743b      	strb	r3, [r7, #16]
    data[9] = 0x08;
 800556e:	2308      	movs	r3, #8
 8005570:	747b      	strb	r3, [r7, #17]
    data[10] = 0x0F;
 8005572:	230f      	movs	r3, #15
 8005574:	74bb      	strb	r3, [r7, #18]
    data[11] = 0x0C;
 8005576:	230c      	movs	r3, #12
 8005578:	74fb      	strb	r3, [r7, #19]
    data[12] = 0x31;
 800557a:	2331      	movs	r3, #49	; 0x31
 800557c:	753b      	strb	r3, [r7, #20]
    data[13] = 0x36;
 800557e:	2336      	movs	r3, #54	; 0x36
 8005580:	757b      	strb	r3, [r7, #21]
    data[14] = 0x0F;
 8005582:	230f      	movs	r3, #15
 8005584:	75bb      	strb	r3, [r7, #22]
    TFT9341_SendCommand(0xE1);
 8005586:	20e1      	movs	r0, #225	; 0xe1
 8005588:	f7ff fea4 	bl	80052d4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 15);
 800558c:	f107 0308 	add.w	r3, r7, #8
 8005590:	210f      	movs	r1, #15
 8005592:	4618      	mov	r0, r3
 8005594:	f000 f824 	bl	80055e0 <TFT9341_WriteData>
    TFT9341_SendCommand(0x11);//Выйдем из спящего режима
 8005598:	2011      	movs	r0, #17
 800559a:	f7ff fe9b 	bl	80052d4 <TFT9341_SendCommand>

    osDelay(120);
 800559e:	2078      	movs	r0, #120	; 0x78
 80055a0:	f00d f89c 	bl	80126dc <osDelay>

    //Display ON
    data[0] = TFT9341_ROTATION;
 80055a4:	2348      	movs	r3, #72	; 0x48
 80055a6:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x29);
 80055a8:	2029      	movs	r0, #41	; 0x29
 80055aa:	f7ff fe93 	bl	80052d4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 80055ae:	f107 0308 	add.w	r3, r7, #8
 80055b2:	2101      	movs	r1, #1
 80055b4:	4618      	mov	r0, r3
 80055b6:	f000 f813 	bl	80055e0 <TFT9341_WriteData>

    TFT9341_WIDTH = w_size;
 80055ba:	4a07      	ldr	r2, [pc, #28]	; (80055d8 <TFT9341_ini+0x2a8>)
 80055bc:	88fb      	ldrh	r3, [r7, #6]
 80055be:	8013      	strh	r3, [r2, #0]
    TFT9341_HEIGHT = h_size;
 80055c0:	4a06      	ldr	r2, [pc, #24]	; (80055dc <TFT9341_ini+0x2ac>)
 80055c2:	88bb      	ldrh	r3, [r7, #4]
 80055c4:	8013      	strh	r3, [r2, #0]

    TFT9341_FontsIni();
 80055c6:	f7ff fe49 	bl	800525c <TFT9341_FontsIni>
}
 80055ca:	bf00      	nop
 80055cc:	3718      	adds	r7, #24
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	40021000 	.word	0x40021000
 80055d8:	2001b6bc 	.word	0x2001b6bc
 80055dc:	2001b6b0 	.word	0x2001b6b0

080055e0 <TFT9341_WriteData>:
// ---------------------------------------------------------------------------------
static void TFT9341_WriteData(uint8_t* buff, size_t buff_size)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
	DC_DATA();
 80055ea:	2201      	movs	r2, #1
 80055ec:	2140      	movs	r1, #64	; 0x40
 80055ee:	4811      	ldr	r0, [pc, #68]	; (8005634 <TFT9341_WriteData+0x54>)
 80055f0:	f001 f95c 	bl	80068ac <HAL_GPIO_WritePin>
	while(buff_size > 0)
 80055f4:	e015      	b.n	8005622 <TFT9341_WriteData+0x42>
	{
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055fc:	bf28      	it	cs
 80055fe:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8005602:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi2, buff, chunk_size, HAL_MAX_DELAY);
 8005604:	89fa      	ldrh	r2, [r7, #14]
 8005606:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800560a:	6879      	ldr	r1, [r7, #4]
 800560c:	480a      	ldr	r0, [pc, #40]	; (8005638 <TFT9341_WriteData+0x58>)
 800560e:	f005 f869 	bl	800a6e4 <HAL_SPI_Transmit>
		buff += chunk_size;
 8005612:	89fb      	ldrh	r3, [r7, #14]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	4413      	add	r3, r2
 8005618:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 800561a:	89fb      	ldrh	r3, [r7, #14]
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	603b      	str	r3, [r7, #0]
	while(buff_size > 0)
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d1e6      	bne.n	80055f6 <TFT9341_WriteData+0x16>
	}
}
 8005628:	bf00      	nop
 800562a:	bf00      	nop
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	40021000 	.word	0x40021000
 8005638:	2000a960 	.word	0x2000a960

0800563c <TFT9341_SetAddrWindow>:
// ---------------------------------------------------------------------------------
static void TFT9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 800563c:	b590      	push	{r4, r7, lr}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	4604      	mov	r4, r0
 8005644:	4608      	mov	r0, r1
 8005646:	4611      	mov	r1, r2
 8005648:	461a      	mov	r2, r3
 800564a:	4623      	mov	r3, r4
 800564c:	80fb      	strh	r3, [r7, #6]
 800564e:	4603      	mov	r3, r0
 8005650:	80bb      	strh	r3, [r7, #4]
 8005652:	460b      	mov	r3, r1
 8005654:	807b      	strh	r3, [r7, #2]
 8005656:	4613      	mov	r3, r2
 8005658:	803b      	strh	r3, [r7, #0]
  // column address set
  TFT9341_SendCommand(0x2A); // CASET
 800565a:	202a      	movs	r0, #42	; 0x2a
 800565c:	f7ff fe3a 	bl	80052d4 <TFT9341_SendCommand>
  {
    uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8005660:	88fb      	ldrh	r3, [r7, #6]
 8005662:	0a1b      	lsrs	r3, r3, #8
 8005664:	b29b      	uxth	r3, r3
 8005666:	b2db      	uxtb	r3, r3
 8005668:	733b      	strb	r3, [r7, #12]
 800566a:	88fb      	ldrh	r3, [r7, #6]
 800566c:	b2db      	uxtb	r3, r3
 800566e:	737b      	strb	r3, [r7, #13]
 8005670:	887b      	ldrh	r3, [r7, #2]
 8005672:	0a1b      	lsrs	r3, r3, #8
 8005674:	b29b      	uxth	r3, r3
 8005676:	b2db      	uxtb	r3, r3
 8005678:	73bb      	strb	r3, [r7, #14]
 800567a:	887b      	ldrh	r3, [r7, #2]
 800567c:	b2db      	uxtb	r3, r3
 800567e:	73fb      	strb	r3, [r7, #15]
    TFT9341_WriteData(data, sizeof(data));
 8005680:	f107 030c 	add.w	r3, r7, #12
 8005684:	2104      	movs	r1, #4
 8005686:	4618      	mov	r0, r3
 8005688:	f7ff ffaa 	bl	80055e0 <TFT9341_WriteData>
  }

  // row address set
  TFT9341_SendCommand(0x2B); // RASET
 800568c:	202b      	movs	r0, #43	; 0x2b
 800568e:	f7ff fe21 	bl	80052d4 <TFT9341_SendCommand>
  {
    uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8005692:	88bb      	ldrh	r3, [r7, #4]
 8005694:	0a1b      	lsrs	r3, r3, #8
 8005696:	b29b      	uxth	r3, r3
 8005698:	b2db      	uxtb	r3, r3
 800569a:	723b      	strb	r3, [r7, #8]
 800569c:	88bb      	ldrh	r3, [r7, #4]
 800569e:	b2db      	uxtb	r3, r3
 80056a0:	727b      	strb	r3, [r7, #9]
 80056a2:	883b      	ldrh	r3, [r7, #0]
 80056a4:	0a1b      	lsrs	r3, r3, #8
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	72bb      	strb	r3, [r7, #10]
 80056ac:	883b      	ldrh	r3, [r7, #0]
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	72fb      	strb	r3, [r7, #11]
    TFT9341_WriteData(data, sizeof(data));
 80056b2:	f107 0308 	add.w	r3, r7, #8
 80056b6:	2104      	movs	r1, #4
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7ff ff91 	bl	80055e0 <TFT9341_WriteData>
  }

  // write to RAM
  TFT9341_SendCommand(0x2C); // RAMWR
 80056be:	202c      	movs	r0, #44	; 0x2c
 80056c0:	f7ff fe08 	bl	80052d4 <TFT9341_SendCommand>
}
 80056c4:	bf00      	nop
 80056c6:	3714      	adds	r7, #20
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd90      	pop	{r4, r7, pc}

080056cc <TFT9341_FillRect>:
// ---------------------------------------------------------------------------------
void TFT9341_FillRect(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color)
{
 80056cc:	b590      	push	{r4, r7, lr}
 80056ce:	b089      	sub	sp, #36	; 0x24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	4604      	mov	r4, r0
 80056d4:	4608      	mov	r0, r1
 80056d6:	4611      	mov	r1, r2
 80056d8:	461a      	mov	r2, r3
 80056da:	4623      	mov	r3, r4
 80056dc:	80fb      	strh	r3, [r7, #6]
 80056de:	4603      	mov	r3, r0
 80056e0:	80bb      	strh	r3, [r7, #4]
 80056e2:	460b      	mov	r3, r1
 80056e4:	807b      	strh	r3, [r7, #2]
 80056e6:	4613      	mov	r3, r2
 80056e8:	803b      	strh	r3, [r7, #0]

	uint32_t i, n, cnt, buf_size;
		if(x1>x2) swap(x1,x2);
 80056ea:	88fa      	ldrh	r2, [r7, #6]
 80056ec:	887b      	ldrh	r3, [r7, #2]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d905      	bls.n	80056fe <TFT9341_FillRect+0x32>
 80056f2:	88fb      	ldrh	r3, [r7, #6]
 80056f4:	827b      	strh	r3, [r7, #18]
 80056f6:	887b      	ldrh	r3, [r7, #2]
 80056f8:	80fb      	strh	r3, [r7, #6]
 80056fa:	8a7b      	ldrh	r3, [r7, #18]
 80056fc:	807b      	strh	r3, [r7, #2]
		if(y1>y2) swap(y1,y2);
 80056fe:	88ba      	ldrh	r2, [r7, #4]
 8005700:	883b      	ldrh	r3, [r7, #0]
 8005702:	429a      	cmp	r2, r3
 8005704:	d905      	bls.n	8005712 <TFT9341_FillRect+0x46>
 8005706:	88bb      	ldrh	r3, [r7, #4]
 8005708:	823b      	strh	r3, [r7, #16]
 800570a:	883b      	ldrh	r3, [r7, #0]
 800570c:	80bb      	strh	r3, [r7, #4]
 800570e:	8a3b      	ldrh	r3, [r7, #16]
 8005710:	803b      	strh	r3, [r7, #0]
	  TFT9341_SetAddrWindow(x1, y1, x2, y2);
 8005712:	883b      	ldrh	r3, [r7, #0]
 8005714:	887a      	ldrh	r2, [r7, #2]
 8005716:	88b9      	ldrh	r1, [r7, #4]
 8005718:	88f8      	ldrh	r0, [r7, #6]
 800571a:	f7ff ff8f 	bl	800563c <TFT9341_SetAddrWindow>
	  DC_DATA();
 800571e:	2201      	movs	r2, #1
 8005720:	2140      	movs	r1, #64	; 0x40
 8005722:	4835      	ldr	r0, [pc, #212]	; (80057f8 <TFT9341_FillRect+0x12c>)
 8005724:	f001 f8c2 	bl	80068ac <HAL_GPIO_WritePin>
	  n = (x2-x1+1)*(y2-y1+1)*2;
 8005728:	887a      	ldrh	r2, [r7, #2]
 800572a:	88fb      	ldrh	r3, [r7, #6]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	3301      	adds	r3, #1
 8005730:	8839      	ldrh	r1, [r7, #0]
 8005732:	88ba      	ldrh	r2, [r7, #4]
 8005734:	1a8a      	subs	r2, r1, r2
 8005736:	3201      	adds	r2, #1
 8005738:	fb02 f303 	mul.w	r3, r2, r3
 800573c:	005b      	lsls	r3, r3, #1
 800573e:	60fb      	str	r3, [r7, #12]
	  if(n<=8192)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005746:	d804      	bhi.n	8005752 <TFT9341_FillRect+0x86>
	  {
	    cnt = 1;
 8005748:	2301      	movs	r3, #1
 800574a:	61bb      	str	r3, [r7, #24]
	    buf_size = n;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	e021      	b.n	8005796 <TFT9341_FillRect+0xca>
	  }
	  else
	  {
	    cnt = n/2;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	085b      	lsrs	r3, r3, #1
 8005756:	61bb      	str	r3, [r7, #24]
	    buf_size = 2;
 8005758:	2302      	movs	r3, #2
 800575a:	617b      	str	r3, [r7, #20]
	    for(i = 8; i < n/8; i++)
 800575c:	2308      	movs	r3, #8
 800575e:	61fb      	str	r3, [r7, #28]
 8005760:	e014      	b.n	800578c <TFT9341_FillRect+0xc0>
	    {
	      if(n%i == 0)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	69fa      	ldr	r2, [r7, #28]
 8005766:	fbb3 f2f2 	udiv	r2, r3, r2
 800576a:	69f9      	ldr	r1, [r7, #28]
 800576c:	fb01 f202 	mul.w	r2, r1, r2
 8005770:	1a9b      	subs	r3, r3, r2
 8005772:	2b00      	cmp	r3, #0
 8005774:	d107      	bne.n	8005786 <TFT9341_FillRect+0xba>
	      {
	        cnt = i;
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	61bb      	str	r3, [r7, #24]
	        buf_size = n/i;
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	69fb      	ldr	r3, [r7, #28]
 800577e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005782:	617b      	str	r3, [r7, #20]
	        break;
 8005784:	e007      	b.n	8005796 <TFT9341_FillRect+0xca>
	    for(i = 8; i < n/8; i++)
 8005786:	69fb      	ldr	r3, [r7, #28]
 8005788:	3301      	adds	r3, #1
 800578a:	61fb      	str	r3, [r7, #28]
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	08db      	lsrs	r3, r3, #3
 8005790:	69fa      	ldr	r2, [r7, #28]
 8005792:	429a      	cmp	r2, r3
 8005794:	d3e5      	bcc.n	8005762 <TFT9341_FillRect+0x96>
	      }
	    }
	  }
	  for(i = 0; i < buf_size/2; i++)
 8005796:	2300      	movs	r3, #0
 8005798:	61fb      	str	r3, [r7, #28]
 800579a:	e011      	b.n	80057c0 <TFT9341_FillRect+0xf4>
	  {
	    frm_buf[i*2] = color >> 8;
 800579c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800579e:	0a1b      	lsrs	r3, r3, #8
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	b2d1      	uxtb	r1, r2
 80057a8:	4a14      	ldr	r2, [pc, #80]	; (80057fc <TFT9341_FillRect+0x130>)
 80057aa:	54d1      	strb	r1, [r2, r3]
	    frm_buf[i*2+1] = color & 0xFF;
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	005b      	lsls	r3, r3, #1
 80057b0:	3301      	adds	r3, #1
 80057b2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 80057b4:	b2d1      	uxtb	r1, r2
 80057b6:	4a11      	ldr	r2, [pc, #68]	; (80057fc <TFT9341_FillRect+0x130>)
 80057b8:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; i < buf_size/2; i++)
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	3301      	adds	r3, #1
 80057be:	61fb      	str	r3, [r7, #28]
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	085b      	lsrs	r3, r3, #1
 80057c4:	69fa      	ldr	r2, [r7, #28]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d3e8      	bcc.n	800579c <TFT9341_FillRect+0xd0>
	  }
	  dma_spi_cnt = cnt;
 80057ca:	4a0d      	ldr	r2, [pc, #52]	; (8005800 <TFT9341_FillRect+0x134>)
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	6013      	str	r3, [r2, #0]
	  HAL_SPI_Transmit_DMA(&hspi2, frm_buf, buf_size);
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	b29b      	uxth	r3, r3
 80057d4:	461a      	mov	r2, r3
 80057d6:	4909      	ldr	r1, [pc, #36]	; (80057fc <TFT9341_FillRect+0x130>)
 80057d8:	480a      	ldr	r0, [pc, #40]	; (8005804 <TFT9341_FillRect+0x138>)
 80057da:	f005 fa61 	bl	800aca0 <HAL_SPI_Transmit_DMA>
	  while(!dma_spi_fl) {}
 80057de:	bf00      	nop
 80057e0:	4b09      	ldr	r3, [pc, #36]	; (8005808 <TFT9341_FillRect+0x13c>)
 80057e2:	781b      	ldrb	r3, [r3, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d0fb      	beq.n	80057e0 <TFT9341_FillRect+0x114>
	  dma_spi_fl=0;
 80057e8:	4b07      	ldr	r3, [pc, #28]	; (8005808 <TFT9341_FillRect+0x13c>)
 80057ea:	2200      	movs	r2, #0
 80057ec:	701a      	strb	r2, [r3, #0]
//  DC_DATA();
//  for(uint32_t i = 0; i < (x2-x1+1)*(y2-y1+1); i++)
//  {
//      HAL_SPI_Transmit(&hspi2, data, 2, HAL_MAX_DELAY);
//  }
}
 80057ee:	bf00      	nop
 80057f0:	3724      	adds	r7, #36	; 0x24
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd90      	pop	{r4, r7, pc}
 80057f6:	bf00      	nop
 80057f8:	40021000 	.word	0x40021000
 80057fc:	200007b4 	.word	0x200007b4
 8005800:	20000004 	.word	0x20000004
 8005804:	2000a960 	.word	0x2000a960
 8005808:	200007a8 	.word	0x200007a8

0800580c <TFT9341_FillScreen>:
// ---------------------------------------------------------------------------------
void TFT9341_FillScreen(uint16_t color)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	4603      	mov	r3, r0
 8005814:	80fb      	strh	r3, [r7, #6]
	uint32_t i, n;
	  TFT9341_SetAddrWindow(0, 0, TFT9341_WIDTH-1, TFT9341_HEIGHT-1);
 8005816:	4b21      	ldr	r3, [pc, #132]	; (800589c <TFT9341_FillScreen+0x90>)
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	3b01      	subs	r3, #1
 800581c:	b29a      	uxth	r2, r3
 800581e:	4b20      	ldr	r3, [pc, #128]	; (80058a0 <TFT9341_FillScreen+0x94>)
 8005820:	881b      	ldrh	r3, [r3, #0]
 8005822:	3b01      	subs	r3, #1
 8005824:	b29b      	uxth	r3, r3
 8005826:	2100      	movs	r1, #0
 8005828:	2000      	movs	r0, #0
 800582a:	f7ff ff07 	bl	800563c <TFT9341_SetAddrWindow>
	  for(i=0;i<3200;i++)
 800582e:	2300      	movs	r3, #0
 8005830:	60fb      	str	r3, [r7, #12]
 8005832:	e011      	b.n	8005858 <TFT9341_FillScreen+0x4c>
	  {
	    frm_buf[i*2] = color >> 8;
 8005834:	88fb      	ldrh	r3, [r7, #6]
 8005836:	0a1b      	lsrs	r3, r3, #8
 8005838:	b29a      	uxth	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	b2d1      	uxtb	r1, r2
 8005840:	4a18      	ldr	r2, [pc, #96]	; (80058a4 <TFT9341_FillScreen+0x98>)
 8005842:	54d1      	strb	r1, [r2, r3]
	    frm_buf[i*2+1] = color & 0xFF;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	005b      	lsls	r3, r3, #1
 8005848:	3301      	adds	r3, #1
 800584a:	88fa      	ldrh	r2, [r7, #6]
 800584c:	b2d1      	uxtb	r1, r2
 800584e:	4a15      	ldr	r2, [pc, #84]	; (80058a4 <TFT9341_FillScreen+0x98>)
 8005850:	54d1      	strb	r1, [r2, r3]
	  for(i=0;i<3200;i++)
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	3301      	adds	r3, #1
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 800585e:	d3e9      	bcc.n	8005834 <TFT9341_FillScreen+0x28>
	  }
	  n = 6400;
 8005860:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8005864:	60bb      	str	r3, [r7, #8]
	  DC_DATA();
 8005866:	2201      	movs	r2, #1
 8005868:	2140      	movs	r1, #64	; 0x40
 800586a:	480f      	ldr	r0, [pc, #60]	; (80058a8 <TFT9341_FillScreen+0x9c>)
 800586c:	f001 f81e 	bl	80068ac <HAL_GPIO_WritePin>
	  dma_spi_cnt = 24;
 8005870:	4b0e      	ldr	r3, [pc, #56]	; (80058ac <TFT9341_FillScreen+0xa0>)
 8005872:	2218      	movs	r2, #24
 8005874:	601a      	str	r2, [r3, #0]
	  HAL_SPI_Transmit_DMA(&hspi2, frm_buf, n);
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	b29b      	uxth	r3, r3
 800587a:	461a      	mov	r2, r3
 800587c:	4909      	ldr	r1, [pc, #36]	; (80058a4 <TFT9341_FillScreen+0x98>)
 800587e:	480c      	ldr	r0, [pc, #48]	; (80058b0 <TFT9341_FillScreen+0xa4>)
 8005880:	f005 fa0e 	bl	800aca0 <HAL_SPI_Transmit_DMA>
	  while(!dma_spi_fl) {}
 8005884:	bf00      	nop
 8005886:	4b0b      	ldr	r3, [pc, #44]	; (80058b4 <TFT9341_FillScreen+0xa8>)
 8005888:	781b      	ldrb	r3, [r3, #0]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d0fb      	beq.n	8005886 <TFT9341_FillScreen+0x7a>
	  dma_spi_fl=0;
 800588e:	4b09      	ldr	r3, [pc, #36]	; (80058b4 <TFT9341_FillScreen+0xa8>)
 8005890:	2200      	movs	r2, #0
 8005892:	701a      	strb	r2, [r3, #0]

	////////////////////////////////
	  // Without DMA
  //TFT9341_FillRect(0, 0, TFT9341_WIDTH-1, TFT9341_HEIGHT-1, color);
}
 8005894:	bf00      	nop
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	2001b6bc 	.word	0x2001b6bc
 80058a0:	2001b6b0 	.word	0x2001b6b0
 80058a4:	200007b4 	.word	0x200007b4
 80058a8:	40021000 	.word	0x40021000
 80058ac:	20000004 	.word	0x20000004
 80058b0:	2000a960 	.word	0x2000a960
 80058b4:	200007a8 	.word	0x200007a8

080058b8 <TFT9341_RandColor>:
// ---------------------------------------------------------------------------------
uint16_t TFT9341_RandColor(void)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
	return HAL_RNG_GetRandomNumber(&hrng)&0x0000FFFF;
 80058bc:	4803      	ldr	r0, [pc, #12]	; (80058cc <TFT9341_RandColor+0x14>)
 80058be:	f004 fa29 	bl	8009d14 <HAL_RNG_GetRandomNumber>
 80058c2:	4603      	mov	r3, r0
 80058c4:	b29b      	uxth	r3, r3
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	bd80      	pop	{r7, pc}
 80058ca:	bf00      	nop
 80058cc:	2001a364 	.word	0x2001a364

080058d0 <speed_test>:

// ---------------------------------------------------------------------------------
////////////////////////////// TEST
// Without DMA: 8 seconds
void speed_test(void)
{
 80058d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058d4:	b084      	sub	sp, #16
 80058d6:	af02      	add	r7, sp, #8
	HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET);
 80058d8:	2201      	movs	r2, #1
 80058da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80058de:	4867      	ldr	r0, [pc, #412]	; (8005a7c <speed_test+0x1ac>)
 80058e0:	f000 ffe4 	bl	80068ac <HAL_GPIO_WritePin>
	int i = 0;
 80058e4:	2300      	movs	r3, #0
 80058e6:	607b      	str	r3, [r7, #4]
	for(i = 0; i < 10; i++)
 80058e8:	2300      	movs	r3, #0
 80058ea:	607b      	str	r3, [r7, #4]
 80058ec:	e008      	b.n	8005900 <speed_test+0x30>
	{
		// TEST 1fill all dysplay random colors
		TFT9341_FillScreen(TFT9341_RandColor());
 80058ee:	f7ff ffe3 	bl	80058b8 <TFT9341_RandColor>
 80058f2:	4603      	mov	r3, r0
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7ff ff89 	bl	800580c <TFT9341_FillScreen>
	for(i = 0; i < 10; i++)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	3301      	adds	r3, #1
 80058fe:	607b      	str	r3, [r7, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2b09      	cmp	r3, #9
 8005904:	ddf3      	ble.n	80058ee <speed_test+0x1e>
	    //osDelay(200);
	}

	for(i = 0; i < 10; i++)
 8005906:	2300      	movs	r3, #0
 8005908:	607b      	str	r3, [r7, #4]
 800590a:	e063      	b.n	80059d4 <speed_test+0x104>
	{
		// TEST 2
		TFT9341_FillRect(0, 0, TFT9341_WIDTH/2-1, TFT9341_HEIGHT/2-1, TFT9341_RandColor());
 800590c:	4b5c      	ldr	r3, [pc, #368]	; (8005a80 <speed_test+0x1b0>)
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	085b      	lsrs	r3, r3, #1
 8005912:	b29b      	uxth	r3, r3
 8005914:	3b01      	subs	r3, #1
 8005916:	b29c      	uxth	r4, r3
 8005918:	4b5a      	ldr	r3, [pc, #360]	; (8005a84 <speed_test+0x1b4>)
 800591a:	881b      	ldrh	r3, [r3, #0]
 800591c:	085b      	lsrs	r3, r3, #1
 800591e:	b29b      	uxth	r3, r3
 8005920:	3b01      	subs	r3, #1
 8005922:	b29d      	uxth	r5, r3
 8005924:	f7ff ffc8 	bl	80058b8 <TFT9341_RandColor>
 8005928:	4603      	mov	r3, r0
 800592a:	9300      	str	r3, [sp, #0]
 800592c:	462b      	mov	r3, r5
 800592e:	4622      	mov	r2, r4
 8005930:	2100      	movs	r1, #0
 8005932:	2000      	movs	r0, #0
 8005934:	f7ff feca 	bl	80056cc <TFT9341_FillRect>
		//HAL_Delay(300);
		TFT9341_FillRect(TFT9341_WIDTH/2, 0, TFT9341_WIDTH-1, TFT9341_HEIGHT/2-1, TFT9341_RandColor());
 8005938:	4b51      	ldr	r3, [pc, #324]	; (8005a80 <speed_test+0x1b0>)
 800593a:	881b      	ldrh	r3, [r3, #0]
 800593c:	085b      	lsrs	r3, r3, #1
 800593e:	b29c      	uxth	r4, r3
 8005940:	4b4f      	ldr	r3, [pc, #316]	; (8005a80 <speed_test+0x1b0>)
 8005942:	881b      	ldrh	r3, [r3, #0]
 8005944:	3b01      	subs	r3, #1
 8005946:	b29d      	uxth	r5, r3
 8005948:	4b4e      	ldr	r3, [pc, #312]	; (8005a84 <speed_test+0x1b4>)
 800594a:	881b      	ldrh	r3, [r3, #0]
 800594c:	085b      	lsrs	r3, r3, #1
 800594e:	b29b      	uxth	r3, r3
 8005950:	3b01      	subs	r3, #1
 8005952:	b29e      	uxth	r6, r3
 8005954:	f7ff ffb0 	bl	80058b8 <TFT9341_RandColor>
 8005958:	4603      	mov	r3, r0
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	4633      	mov	r3, r6
 800595e:	462a      	mov	r2, r5
 8005960:	2100      	movs	r1, #0
 8005962:	4620      	mov	r0, r4
 8005964:	f7ff feb2 	bl	80056cc <TFT9341_FillRect>
		//HAL_Delay(300);
		TFT9341_FillRect(0, TFT9341_HEIGHT/2, TFT9341_WIDTH/2-1, TFT9341_HEIGHT-1, TFT9341_RandColor());
 8005968:	4b46      	ldr	r3, [pc, #280]	; (8005a84 <speed_test+0x1b4>)
 800596a:	881b      	ldrh	r3, [r3, #0]
 800596c:	085b      	lsrs	r3, r3, #1
 800596e:	b29c      	uxth	r4, r3
 8005970:	4b43      	ldr	r3, [pc, #268]	; (8005a80 <speed_test+0x1b0>)
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	085b      	lsrs	r3, r3, #1
 8005976:	b29b      	uxth	r3, r3
 8005978:	3b01      	subs	r3, #1
 800597a:	b29d      	uxth	r5, r3
 800597c:	4b41      	ldr	r3, [pc, #260]	; (8005a84 <speed_test+0x1b4>)
 800597e:	881b      	ldrh	r3, [r3, #0]
 8005980:	3b01      	subs	r3, #1
 8005982:	b29e      	uxth	r6, r3
 8005984:	f7ff ff98 	bl	80058b8 <TFT9341_RandColor>
 8005988:	4603      	mov	r3, r0
 800598a:	9300      	str	r3, [sp, #0]
 800598c:	4633      	mov	r3, r6
 800598e:	462a      	mov	r2, r5
 8005990:	4621      	mov	r1, r4
 8005992:	2000      	movs	r0, #0
 8005994:	f7ff fe9a 	bl	80056cc <TFT9341_FillRect>
		//HAL_Delay(300);
		TFT9341_FillRect(TFT9341_WIDTH/2, TFT9341_HEIGHT/2, TFT9341_WIDTH-1, TFT9341_HEIGHT-1, TFT9341_RandColor());
 8005998:	4b39      	ldr	r3, [pc, #228]	; (8005a80 <speed_test+0x1b0>)
 800599a:	881b      	ldrh	r3, [r3, #0]
 800599c:	085b      	lsrs	r3, r3, #1
 800599e:	b29c      	uxth	r4, r3
 80059a0:	4b38      	ldr	r3, [pc, #224]	; (8005a84 <speed_test+0x1b4>)
 80059a2:	881b      	ldrh	r3, [r3, #0]
 80059a4:	085b      	lsrs	r3, r3, #1
 80059a6:	b29d      	uxth	r5, r3
 80059a8:	4b35      	ldr	r3, [pc, #212]	; (8005a80 <speed_test+0x1b0>)
 80059aa:	881b      	ldrh	r3, [r3, #0]
 80059ac:	3b01      	subs	r3, #1
 80059ae:	b29e      	uxth	r6, r3
 80059b0:	4b34      	ldr	r3, [pc, #208]	; (8005a84 <speed_test+0x1b4>)
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	3b01      	subs	r3, #1
 80059b6:	fa1f f883 	uxth.w	r8, r3
 80059ba:	f7ff ff7d 	bl	80058b8 <TFT9341_RandColor>
 80059be:	4603      	mov	r3, r0
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	4643      	mov	r3, r8
 80059c4:	4632      	mov	r2, r6
 80059c6:	4629      	mov	r1, r5
 80059c8:	4620      	mov	r0, r4
 80059ca:	f7ff fe7f 	bl	80056cc <TFT9341_FillRect>
	for(i = 0; i < 10; i++)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	3301      	adds	r3, #1
 80059d2:	607b      	str	r3, [r7, #4]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b09      	cmp	r3, #9
 80059d8:	dd98      	ble.n	800590c <speed_test+0x3c>
		//HAL_Delay(300);
	}

	for(i = 0; i < 10; i++)
 80059da:	2300      	movs	r3, #0
 80059dc:	607b      	str	r3, [r7, #4]
 80059de:	e03d      	b.n	8005a5c <speed_test+0x18c>
	{
		  // TEST 3
		TFT9341_FillRect(HAL_RNG_GetRandomNumber(&hrng)%TFT9341_WIDTH,
 80059e0:	4829      	ldr	r0, [pc, #164]	; (8005a88 <speed_test+0x1b8>)
 80059e2:	f004 f997 	bl	8009d14 <HAL_RNG_GetRandomNumber>
 80059e6:	4603      	mov	r3, r0
 80059e8:	4a25      	ldr	r2, [pc, #148]	; (8005a80 <speed_test+0x1b0>)
 80059ea:	8812      	ldrh	r2, [r2, #0]
 80059ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80059f0:	fb02 f201 	mul.w	r2, r2, r1
 80059f4:	1a9b      	subs	r3, r3, r2
 80059f6:	b29c      	uxth	r4, r3
		HAL_RNG_GetRandomNumber(&hrng)%TFT9341_HEIGHT,
 80059f8:	4823      	ldr	r0, [pc, #140]	; (8005a88 <speed_test+0x1b8>)
 80059fa:	f004 f98b 	bl	8009d14 <HAL_RNG_GetRandomNumber>
 80059fe:	4603      	mov	r3, r0
 8005a00:	4a20      	ldr	r2, [pc, #128]	; (8005a84 <speed_test+0x1b4>)
 8005a02:	8812      	ldrh	r2, [r2, #0]
 8005a04:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a08:	fb02 f201 	mul.w	r2, r2, r1
 8005a0c:	1a9b      	subs	r3, r3, r2
		TFT9341_FillRect(HAL_RNG_GetRandomNumber(&hrng)%TFT9341_WIDTH,
 8005a0e:	b29d      	uxth	r5, r3
		HAL_RNG_GetRandomNumber(&hrng)%TFT9341_WIDTH,
 8005a10:	481d      	ldr	r0, [pc, #116]	; (8005a88 <speed_test+0x1b8>)
 8005a12:	f004 f97f 	bl	8009d14 <HAL_RNG_GetRandomNumber>
 8005a16:	4603      	mov	r3, r0
 8005a18:	4a19      	ldr	r2, [pc, #100]	; (8005a80 <speed_test+0x1b0>)
 8005a1a:	8812      	ldrh	r2, [r2, #0]
 8005a1c:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a20:	fb02 f201 	mul.w	r2, r2, r1
 8005a24:	1a9b      	subs	r3, r3, r2
		TFT9341_FillRect(HAL_RNG_GetRandomNumber(&hrng)%TFT9341_WIDTH,
 8005a26:	b29e      	uxth	r6, r3
		HAL_RNG_GetRandomNumber(&hrng)%TFT9341_HEIGHT,
 8005a28:	4817      	ldr	r0, [pc, #92]	; (8005a88 <speed_test+0x1b8>)
 8005a2a:	f004 f973 	bl	8009d14 <HAL_RNG_GetRandomNumber>
 8005a2e:	4603      	mov	r3, r0
 8005a30:	4a14      	ldr	r2, [pc, #80]	; (8005a84 <speed_test+0x1b4>)
 8005a32:	8812      	ldrh	r2, [r2, #0]
 8005a34:	fbb3 f1f2 	udiv	r1, r3, r2
 8005a38:	fb02 f201 	mul.w	r2, r2, r1
 8005a3c:	1a9b      	subs	r3, r3, r2
		TFT9341_FillRect(HAL_RNG_GetRandomNumber(&hrng)%TFT9341_WIDTH,
 8005a3e:	fa1f f883 	uxth.w	r8, r3
 8005a42:	f7ff ff39 	bl	80058b8 <TFT9341_RandColor>
 8005a46:	4603      	mov	r3, r0
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	4643      	mov	r3, r8
 8005a4c:	4632      	mov	r2, r6
 8005a4e:	4629      	mov	r1, r5
 8005a50:	4620      	mov	r0, r4
 8005a52:	f7ff fe3b 	bl	80056cc <TFT9341_FillRect>
	for(i = 0; i < 10; i++)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	607b      	str	r3, [r7, #4]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b09      	cmp	r3, #9
 8005a60:	ddbe      	ble.n	80059e0 <speed_test+0x110>
		TFT9341_RandColor());
		//HAL_Delay(100);
	}
	HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_RESET);
 8005a62:	2200      	movs	r2, #0
 8005a64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005a68:	4804      	ldr	r0, [pc, #16]	; (8005a7c <speed_test+0x1ac>)
 8005a6a:	f000 ff1f 	bl	80068ac <HAL_GPIO_WritePin>

	i = 0;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	607b      	str	r3, [r7, #4]
}
 8005a72:	bf00      	nop
 8005a74:	3708      	adds	r7, #8
 8005a76:	46bd      	mov	sp, r7
 8005a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a7c:	40020c00 	.word	0x40020c00
 8005a80:	2001b6bc 	.word	0x2001b6bc
 8005a84:	2001b6b0 	.word	0x2001b6b0
 8005a88:	2001a364 	.word	0x2001a364

08005a8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8005a8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005ac4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005a90:	480d      	ldr	r0, [pc, #52]	; (8005ac8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005a92:	490e      	ldr	r1, [pc, #56]	; (8005acc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005a94:	4a0e      	ldr	r2, [pc, #56]	; (8005ad0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005a98:	e002      	b.n	8005aa0 <LoopCopyDataInit>

08005a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a9e:	3304      	adds	r3, #4

08005aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005aa4:	d3f9      	bcc.n	8005a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005aa6:	4a0b      	ldr	r2, [pc, #44]	; (8005ad4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005aa8:	4c0b      	ldr	r4, [pc, #44]	; (8005ad8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005aac:	e001      	b.n	8005ab2 <LoopFillZerobss>

08005aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ab0:	3204      	adds	r2, #4

08005ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ab4:	d3fb      	bcc.n	8005aae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005ab6:	f7ff fbbf 	bl	8005238 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005aba:	f011 fa9f 	bl	8016ffc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005abe:	f7fd fbe9 	bl	8003294 <main>
  bx  lr    
 8005ac2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005ac4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005ac8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005acc:	20000398 	.word	0x20000398
  ldr r2, =_sidata
 8005ad0:	0801eb24 	.word	0x0801eb24
  ldr r2, =_sbss
 8005ad4:	20000398 	.word	0x20000398
  ldr r4, =_ebss
 8005ad8:	2001f060 	.word	0x2001f060

08005adc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005adc:	e7fe      	b.n	8005adc <ADC_IRQHandler>
	...

08005ae0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005ae4:	4b0e      	ldr	r3, [pc, #56]	; (8005b20 <HAL_Init+0x40>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a0d      	ldr	r2, [pc, #52]	; (8005b20 <HAL_Init+0x40>)
 8005aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005aee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005af0:	4b0b      	ldr	r3, [pc, #44]	; (8005b20 <HAL_Init+0x40>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a0a      	ldr	r2, [pc, #40]	; (8005b20 <HAL_Init+0x40>)
 8005af6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005afa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005afc:	4b08      	ldr	r3, [pc, #32]	; (8005b20 <HAL_Init+0x40>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a07      	ldr	r2, [pc, #28]	; (8005b20 <HAL_Init+0x40>)
 8005b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b08:	2003      	movs	r0, #3
 8005b0a:	f000 f8fc 	bl	8005d06 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b0e:	200f      	movs	r0, #15
 8005b10:	f7ff fa12 	bl	8004f38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005b14:	f7fe ffd4 	bl	8004ac0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	bd80      	pop	{r7, pc}
 8005b1e:	bf00      	nop
 8005b20:	40023c00 	.word	0x40023c00

08005b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b24:	b480      	push	{r7}
 8005b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b28:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <HAL_IncTick+0x20>)
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <HAL_IncTick+0x24>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4413      	add	r3, r2
 8005b34:	4a04      	ldr	r2, [pc, #16]	; (8005b48 <HAL_IncTick+0x24>)
 8005b36:	6013      	str	r3, [r2, #0]
}
 8005b38:	bf00      	nop
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	20000038 	.word	0x20000038
 8005b48:	2001b6c0 	.word	0x2001b6c0

08005b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8005b50:	4b03      	ldr	r3, [pc, #12]	; (8005b60 <HAL_GetTick+0x14>)
 8005b52:	681b      	ldr	r3, [r3, #0]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	46bd      	mov	sp, r7
 8005b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5c:	4770      	bx	lr
 8005b5e:	bf00      	nop
 8005b60:	2001b6c0 	.word	0x2001b6c0

08005b64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b6c:	f7ff ffee 	bl	8005b4c <HAL_GetTick>
 8005b70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b7c:	d005      	beq.n	8005b8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b7e:	4b0a      	ldr	r3, [pc, #40]	; (8005ba8 <HAL_Delay+0x44>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	461a      	mov	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	4413      	add	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005b8a:	bf00      	nop
 8005b8c:	f7ff ffde 	bl	8005b4c <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d8f7      	bhi.n	8005b8c <HAL_Delay+0x28>
  {
  }
}
 8005b9c:	bf00      	nop
 8005b9e:	bf00      	nop
 8005ba0:	3710      	adds	r7, #16
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	20000038 	.word	0x20000038

08005bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b085      	sub	sp, #20
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f003 0307 	and.w	r3, r3, #7
 8005bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bbc:	4b0c      	ldr	r3, [pc, #48]	; (8005bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005bc2:	68ba      	ldr	r2, [r7, #8]
 8005bc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005bc8:	4013      	ands	r3, r2
 8005bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005bd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005bd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005bde:	4a04      	ldr	r2, [pc, #16]	; (8005bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	60d3      	str	r3, [r2, #12]
}
 8005be4:	bf00      	nop
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr
 8005bf0:	e000ed00 	.word	0xe000ed00

08005bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bf8:	4b04      	ldr	r3, [pc, #16]	; (8005c0c <__NVIC_GetPriorityGrouping+0x18>)
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	0a1b      	lsrs	r3, r3, #8
 8005bfe:	f003 0307 	and.w	r3, r3, #7
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	e000ed00 	.word	0xe000ed00

08005c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	4603      	mov	r3, r0
 8005c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	db0b      	blt.n	8005c3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c22:	79fb      	ldrb	r3, [r7, #7]
 8005c24:	f003 021f 	and.w	r2, r3, #31
 8005c28:	4907      	ldr	r1, [pc, #28]	; (8005c48 <__NVIC_EnableIRQ+0x38>)
 8005c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c2e:	095b      	lsrs	r3, r3, #5
 8005c30:	2001      	movs	r0, #1
 8005c32:	fa00 f202 	lsl.w	r2, r0, r2
 8005c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005c3a:	bf00      	nop
 8005c3c:	370c      	adds	r7, #12
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	e000e100 	.word	0xe000e100

08005c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	4603      	mov	r3, r0
 8005c54:	6039      	str	r1, [r7, #0]
 8005c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	db0a      	blt.n	8005c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	b2da      	uxtb	r2, r3
 8005c64:	490c      	ldr	r1, [pc, #48]	; (8005c98 <__NVIC_SetPriority+0x4c>)
 8005c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c6a:	0112      	lsls	r2, r2, #4
 8005c6c:	b2d2      	uxtb	r2, r2
 8005c6e:	440b      	add	r3, r1
 8005c70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005c74:	e00a      	b.n	8005c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	4908      	ldr	r1, [pc, #32]	; (8005c9c <__NVIC_SetPriority+0x50>)
 8005c7c:	79fb      	ldrb	r3, [r7, #7]
 8005c7e:	f003 030f 	and.w	r3, r3, #15
 8005c82:	3b04      	subs	r3, #4
 8005c84:	0112      	lsls	r2, r2, #4
 8005c86:	b2d2      	uxtb	r2, r2
 8005c88:	440b      	add	r3, r1
 8005c8a:	761a      	strb	r2, [r3, #24]
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr
 8005c98:	e000e100 	.word	0xe000e100
 8005c9c:	e000ed00 	.word	0xe000ed00

08005ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b089      	sub	sp, #36	; 0x24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f003 0307 	and.w	r3, r3, #7
 8005cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	f1c3 0307 	rsb	r3, r3, #7
 8005cba:	2b04      	cmp	r3, #4
 8005cbc:	bf28      	it	cs
 8005cbe:	2304      	movcs	r3, #4
 8005cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	3304      	adds	r3, #4
 8005cc6:	2b06      	cmp	r3, #6
 8005cc8:	d902      	bls.n	8005cd0 <NVIC_EncodePriority+0x30>
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	3b03      	subs	r3, #3
 8005cce:	e000      	b.n	8005cd2 <NVIC_EncodePriority+0x32>
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005cd8:	69bb      	ldr	r3, [r7, #24]
 8005cda:	fa02 f303 	lsl.w	r3, r2, r3
 8005cde:	43da      	mvns	r2, r3
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	401a      	ands	r2, r3
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005ce8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf2:	43d9      	mvns	r1, r3
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005cf8:	4313      	orrs	r3, r2
         );
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3724      	adds	r7, #36	; 0x24
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr

08005d06 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d06:	b580      	push	{r7, lr}
 8005d08:	b082      	sub	sp, #8
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f7ff ff4c 	bl	8005bac <__NVIC_SetPriorityGrouping>
}
 8005d14:	bf00      	nop
 8005d16:	3708      	adds	r7, #8
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	bd80      	pop	{r7, pc}

08005d1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b086      	sub	sp, #24
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	4603      	mov	r3, r0
 8005d24:	60b9      	str	r1, [r7, #8]
 8005d26:	607a      	str	r2, [r7, #4]
 8005d28:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d2e:	f7ff ff61 	bl	8005bf4 <__NVIC_GetPriorityGrouping>
 8005d32:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	68b9      	ldr	r1, [r7, #8]
 8005d38:	6978      	ldr	r0, [r7, #20]
 8005d3a:	f7ff ffb1 	bl	8005ca0 <NVIC_EncodePriority>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d44:	4611      	mov	r1, r2
 8005d46:	4618      	mov	r0, r3
 8005d48:	f7ff ff80 	bl	8005c4c <__NVIC_SetPriority>
}
 8005d4c:	bf00      	nop
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b082      	sub	sp, #8
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7ff ff54 	bl	8005c10 <__NVIC_EnableIRQ>
}
 8005d68:	bf00      	nop
 8005d6a:	3708      	adds	r7, #8
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005d7c:	f7ff fee6 	bl	8005b4c <HAL_GetTick>
 8005d80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e099      	b.n	8005ec0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2202      	movs	r2, #2
 8005d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681a      	ldr	r2, [r3, #0]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f022 0201 	bic.w	r2, r2, #1
 8005daa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dac:	e00f      	b.n	8005dce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005dae:	f7ff fecd 	bl	8005b4c <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	2b05      	cmp	r3, #5
 8005dba:	d908      	bls.n	8005dce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2203      	movs	r2, #3
 8005dc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e078      	b.n	8005ec0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1e8      	bne.n	8005dae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	4b38      	ldr	r3, [pc, #224]	; (8005ec8 <HAL_DMA_Init+0x158>)
 8005de8:	4013      	ands	r3, r2
 8005dea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005dfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	691b      	ldr	r3, [r3, #16]
 8005e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	2b04      	cmp	r3, #4
 8005e26:	d107      	bne.n	8005e38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e30:	4313      	orrs	r3, r2
 8005e32:	697a      	ldr	r2, [r7, #20]
 8005e34:	4313      	orrs	r3, r2
 8005e36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	697a      	ldr	r2, [r7, #20]
 8005e3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f023 0307 	bic.w	r3, r3, #7
 8005e4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5e:	2b04      	cmp	r3, #4
 8005e60:	d117      	bne.n	8005e92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00e      	beq.n	8005e92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f000 fb01 	bl	800647c <DMA_CheckFifoParam>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d008      	beq.n	8005e92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2240      	movs	r2, #64	; 0x40
 8005e84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e016      	b.n	8005ec0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fab8 	bl	8006410 <DMA_CalcBaseAndBitshift>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ea8:	223f      	movs	r2, #63	; 0x3f
 8005eaa:	409a      	lsls	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3718      	adds	r7, #24
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	f010803f 	.word	0xf010803f

08005ecc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b086      	sub	sp, #24
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
 8005ed8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eda:	2300      	movs	r3, #0
 8005edc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d101      	bne.n	8005ef2 <HAL_DMA_Start_IT+0x26>
 8005eee:	2302      	movs	r3, #2
 8005ef0:	e040      	b.n	8005f74 <HAL_DMA_Start_IT+0xa8>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d12f      	bne.n	8005f66 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2202      	movs	r2, #2
 8005f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	68b9      	ldr	r1, [r7, #8]
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 fa4a 	bl	80063b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f24:	223f      	movs	r2, #63	; 0x3f
 8005f26:	409a      	lsls	r2, r3
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f042 0216 	orr.w	r2, r2, #22
 8005f3a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d007      	beq.n	8005f54 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f042 0208 	orr.w	r2, r2, #8
 8005f52:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0201 	orr.w	r2, r2, #1
 8005f62:	601a      	str	r2, [r3, #0]
 8005f64:	e005      	b.n	8005f72 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2200      	movs	r2, #0
 8005f6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005f6e:	2302      	movs	r3, #2
 8005f70:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005f72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3718      	adds	r7, #24
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}

08005f7c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f88:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005f8a:	f7ff fddf 	bl	8005b4c <HAL_GetTick>
 8005f8e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b02      	cmp	r3, #2
 8005f9a:	d008      	beq.n	8005fae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2280      	movs	r2, #128	; 0x80
 8005fa0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	e052      	b.n	8006054 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	681a      	ldr	r2, [r3, #0]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f022 0216 	bic.w	r2, r2, #22
 8005fbc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	695a      	ldr	r2, [r3, #20]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005fcc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d103      	bne.n	8005fde <HAL_DMA_Abort+0x62>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d007      	beq.n	8005fee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0208 	bic.w	r2, r2, #8
 8005fec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 0201 	bic.w	r2, r2, #1
 8005ffc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ffe:	e013      	b.n	8006028 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006000:	f7ff fda4 	bl	8005b4c <HAL_GetTick>
 8006004:	4602      	mov	r2, r0
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	1ad3      	subs	r3, r2, r3
 800600a:	2b05      	cmp	r3, #5
 800600c:	d90c      	bls.n	8006028 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2220      	movs	r2, #32
 8006012:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2203      	movs	r2, #3
 8006018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e015      	b.n	8006054 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d1e4      	bne.n	8006000 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800603a:	223f      	movs	r2, #63	; 0x3f
 800603c:	409a      	lsls	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2201      	movs	r2, #1
 8006046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2200      	movs	r2, #0
 800604e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800605c:	b480      	push	{r7}
 800605e:	b083      	sub	sp, #12
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b02      	cmp	r3, #2
 800606e:	d004      	beq.n	800607a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2280      	movs	r2, #128	; 0x80
 8006074:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e00c      	b.n	8006094 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2205      	movs	r2, #5
 800607e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f022 0201 	bic.w	r2, r2, #1
 8006090:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	370c      	adds	r7, #12
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80060a0:	b580      	push	{r7, lr}
 80060a2:	b086      	sub	sp, #24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80060ac:	4b92      	ldr	r3, [pc, #584]	; (80062f8 <HAL_DMA_IRQHandler+0x258>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a92      	ldr	r2, [pc, #584]	; (80062fc <HAL_DMA_IRQHandler+0x25c>)
 80060b2:	fba2 2303 	umull	r2, r3, r2, r3
 80060b6:	0a9b      	lsrs	r3, r3, #10
 80060b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060ca:	2208      	movs	r2, #8
 80060cc:	409a      	lsls	r2, r3
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	4013      	ands	r3, r2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d01a      	beq.n	800610c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0304 	and.w	r3, r3, #4
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d013      	beq.n	800610c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f022 0204 	bic.w	r2, r2, #4
 80060f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f8:	2208      	movs	r2, #8
 80060fa:	409a      	lsls	r2, r3
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006104:	f043 0201 	orr.w	r2, r3, #1
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006110:	2201      	movs	r2, #1
 8006112:	409a      	lsls	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	4013      	ands	r3, r2
 8006118:	2b00      	cmp	r3, #0
 800611a:	d012      	beq.n	8006142 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00b      	beq.n	8006142 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800612e:	2201      	movs	r2, #1
 8006130:	409a      	lsls	r2, r3
 8006132:	693b      	ldr	r3, [r7, #16]
 8006134:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800613a:	f043 0202 	orr.w	r2, r3, #2
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006146:	2204      	movs	r2, #4
 8006148:	409a      	lsls	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4013      	ands	r3, r2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d012      	beq.n	8006178 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0302 	and.w	r3, r3, #2
 800615c:	2b00      	cmp	r3, #0
 800615e:	d00b      	beq.n	8006178 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006164:	2204      	movs	r2, #4
 8006166:	409a      	lsls	r2, r3
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006170:	f043 0204 	orr.w	r2, r3, #4
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800617c:	2210      	movs	r2, #16
 800617e:	409a      	lsls	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4013      	ands	r3, r2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d043      	beq.n	8006210 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f003 0308 	and.w	r3, r3, #8
 8006192:	2b00      	cmp	r3, #0
 8006194:	d03c      	beq.n	8006210 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800619a:	2210      	movs	r2, #16
 800619c:	409a      	lsls	r2, r3
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d018      	beq.n	80061e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d108      	bne.n	80061d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d024      	beq.n	8006210 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ca:	6878      	ldr	r0, [r7, #4]
 80061cc:	4798      	blx	r3
 80061ce:	e01f      	b.n	8006210 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d01b      	beq.n	8006210 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	4798      	blx	r3
 80061e0:	e016      	b.n	8006210 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d107      	bne.n	8006200 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f022 0208 	bic.w	r2, r2, #8
 80061fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006204:	2b00      	cmp	r3, #0
 8006206:	d003      	beq.n	8006210 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800620c:	6878      	ldr	r0, [r7, #4]
 800620e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006214:	2220      	movs	r2, #32
 8006216:	409a      	lsls	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4013      	ands	r3, r2
 800621c:	2b00      	cmp	r3, #0
 800621e:	f000 808e 	beq.w	800633e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0310 	and.w	r3, r3, #16
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 8086 	beq.w	800633e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006236:	2220      	movs	r2, #32
 8006238:	409a      	lsls	r2, r3
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006244:	b2db      	uxtb	r3, r3
 8006246:	2b05      	cmp	r3, #5
 8006248:	d136      	bne.n	80062b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f022 0216 	bic.w	r2, r2, #22
 8006258:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	695a      	ldr	r2, [r3, #20]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006268:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	2b00      	cmp	r3, #0
 8006270:	d103      	bne.n	800627a <HAL_DMA_IRQHandler+0x1da>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006276:	2b00      	cmp	r3, #0
 8006278:	d007      	beq.n	800628a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f022 0208 	bic.w	r2, r2, #8
 8006288:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800628e:	223f      	movs	r2, #63	; 0x3f
 8006290:	409a      	lsls	r2, r3
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d07d      	beq.n	80063aa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	4798      	blx	r3
        }
        return;
 80062b6:	e078      	b.n	80063aa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d01c      	beq.n	8006300 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d108      	bne.n	80062e6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d030      	beq.n	800633e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	4798      	blx	r3
 80062e4:	e02b      	b.n	800633e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d027      	beq.n	800633e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	4798      	blx	r3
 80062f6:	e022      	b.n	800633e <HAL_DMA_IRQHandler+0x29e>
 80062f8:	20000008 	.word	0x20000008
 80062fc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800630a:	2b00      	cmp	r3, #0
 800630c:	d10f      	bne.n	800632e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f022 0210 	bic.w	r2, r2, #16
 800631c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800633a:	6878      	ldr	r0, [r7, #4]
 800633c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006342:	2b00      	cmp	r3, #0
 8006344:	d032      	beq.n	80063ac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d022      	beq.n	8006398 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2205      	movs	r2, #5
 8006356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	681a      	ldr	r2, [r3, #0]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f022 0201 	bic.w	r2, r2, #1
 8006368:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	3301      	adds	r3, #1
 800636e:	60bb      	str	r3, [r7, #8]
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	429a      	cmp	r2, r3
 8006374:	d307      	bcc.n	8006386 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1f2      	bne.n	800636a <HAL_DMA_IRQHandler+0x2ca>
 8006384:	e000      	b.n	8006388 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006386:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800639c:	2b00      	cmp	r3, #0
 800639e:	d005      	beq.n	80063ac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	4798      	blx	r3
 80063a8:	e000      	b.n	80063ac <HAL_DMA_IRQHandler+0x30c>
        return;
 80063aa:	bf00      	nop
    }
  }
}
 80063ac:	3718      	adds	r7, #24
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop

080063b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	60f8      	str	r0, [r7, #12]
 80063bc:	60b9      	str	r1, [r7, #8]
 80063be:	607a      	str	r2, [r7, #4]
 80063c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80063d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	2b40      	cmp	r3, #64	; 0x40
 80063e0:	d108      	bne.n	80063f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80063f2:	e007      	b.n	8006404 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	60da      	str	r2, [r3, #12]
}
 8006404:	bf00      	nop
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	b2db      	uxtb	r3, r3
 800641e:	3b10      	subs	r3, #16
 8006420:	4a14      	ldr	r2, [pc, #80]	; (8006474 <DMA_CalcBaseAndBitshift+0x64>)
 8006422:	fba2 2303 	umull	r2, r3, r2, r3
 8006426:	091b      	lsrs	r3, r3, #4
 8006428:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800642a:	4a13      	ldr	r2, [pc, #76]	; (8006478 <DMA_CalcBaseAndBitshift+0x68>)
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	4413      	add	r3, r2
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	461a      	mov	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2b03      	cmp	r3, #3
 800643c:	d909      	bls.n	8006452 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006446:	f023 0303 	bic.w	r3, r3, #3
 800644a:	1d1a      	adds	r2, r3, #4
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	659a      	str	r2, [r3, #88]	; 0x58
 8006450:	e007      	b.n	8006462 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800645a:	f023 0303 	bic.w	r3, r3, #3
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006466:	4618      	mov	r0, r3
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	aaaaaaab 	.word	0xaaaaaaab
 8006478:	0801e2c0 	.word	0x0801e2c0

0800647c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800647c:	b480      	push	{r7}
 800647e:	b085      	sub	sp, #20
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800648c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	699b      	ldr	r3, [r3, #24]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d11f      	bne.n	80064d6 <DMA_CheckFifoParam+0x5a>
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	2b03      	cmp	r3, #3
 800649a:	d856      	bhi.n	800654a <DMA_CheckFifoParam+0xce>
 800649c:	a201      	add	r2, pc, #4	; (adr r2, 80064a4 <DMA_CheckFifoParam+0x28>)
 800649e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064a2:	bf00      	nop
 80064a4:	080064b5 	.word	0x080064b5
 80064a8:	080064c7 	.word	0x080064c7
 80064ac:	080064b5 	.word	0x080064b5
 80064b0:	0800654b 	.word	0x0800654b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d046      	beq.n	800654e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80064c0:	2301      	movs	r3, #1
 80064c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064c4:	e043      	b.n	800654e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80064ce:	d140      	bne.n	8006552 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064d4:	e03d      	b.n	8006552 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064de:	d121      	bne.n	8006524 <DMA_CheckFifoParam+0xa8>
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	2b03      	cmp	r3, #3
 80064e4:	d837      	bhi.n	8006556 <DMA_CheckFifoParam+0xda>
 80064e6:	a201      	add	r2, pc, #4	; (adr r2, 80064ec <DMA_CheckFifoParam+0x70>)
 80064e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064ec:	080064fd 	.word	0x080064fd
 80064f0:	08006503 	.word	0x08006503
 80064f4:	080064fd 	.word	0x080064fd
 80064f8:	08006515 	.word	0x08006515
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	73fb      	strb	r3, [r7, #15]
      break;
 8006500:	e030      	b.n	8006564 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006506:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800650a:	2b00      	cmp	r3, #0
 800650c:	d025      	beq.n	800655a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006512:	e022      	b.n	800655a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006518:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800651c:	d11f      	bne.n	800655e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006522:	e01c      	b.n	800655e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006524:	68bb      	ldr	r3, [r7, #8]
 8006526:	2b02      	cmp	r3, #2
 8006528:	d903      	bls.n	8006532 <DMA_CheckFifoParam+0xb6>
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2b03      	cmp	r3, #3
 800652e:	d003      	beq.n	8006538 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006530:	e018      	b.n	8006564 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006532:	2301      	movs	r3, #1
 8006534:	73fb      	strb	r3, [r7, #15]
      break;
 8006536:	e015      	b.n	8006564 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00e      	beq.n	8006562 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006544:	2301      	movs	r3, #1
 8006546:	73fb      	strb	r3, [r7, #15]
      break;
 8006548:	e00b      	b.n	8006562 <DMA_CheckFifoParam+0xe6>
      break;
 800654a:	bf00      	nop
 800654c:	e00a      	b.n	8006564 <DMA_CheckFifoParam+0xe8>
      break;
 800654e:	bf00      	nop
 8006550:	e008      	b.n	8006564 <DMA_CheckFifoParam+0xe8>
      break;
 8006552:	bf00      	nop
 8006554:	e006      	b.n	8006564 <DMA_CheckFifoParam+0xe8>
      break;
 8006556:	bf00      	nop
 8006558:	e004      	b.n	8006564 <DMA_CheckFifoParam+0xe8>
      break;
 800655a:	bf00      	nop
 800655c:	e002      	b.n	8006564 <DMA_CheckFifoParam+0xe8>
      break;   
 800655e:	bf00      	nop
 8006560:	e000      	b.n	8006564 <DMA_CheckFifoParam+0xe8>
      break;
 8006562:	bf00      	nop
    }
  } 
  
  return status; 
 8006564:	7bfb      	ldrb	r3, [r7, #15]
}
 8006566:	4618      	mov	r0, r3
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop

08006574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006574:	b480      	push	{r7}
 8006576:	b089      	sub	sp, #36	; 0x24
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800657e:	2300      	movs	r3, #0
 8006580:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006582:	2300      	movs	r3, #0
 8006584:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006586:	2300      	movs	r3, #0
 8006588:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800658a:	2300      	movs	r3, #0
 800658c:	61fb      	str	r3, [r7, #28]
 800658e:	e16b      	b.n	8006868 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006590:	2201      	movs	r2, #1
 8006592:	69fb      	ldr	r3, [r7, #28]
 8006594:	fa02 f303 	lsl.w	r3, r2, r3
 8006598:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	4013      	ands	r3, r2
 80065a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80065a4:	693a      	ldr	r2, [r7, #16]
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	f040 815a 	bne.w	8006862 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	f003 0303 	and.w	r3, r3, #3
 80065b6:	2b01      	cmp	r3, #1
 80065b8:	d005      	beq.n	80065c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80065c2:	2b02      	cmp	r3, #2
 80065c4:	d130      	bne.n	8006628 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	005b      	lsls	r3, r3, #1
 80065d0:	2203      	movs	r2, #3
 80065d2:	fa02 f303 	lsl.w	r3, r2, r3
 80065d6:	43db      	mvns	r3, r3
 80065d8:	69ba      	ldr	r2, [r7, #24]
 80065da:	4013      	ands	r3, r2
 80065dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	68da      	ldr	r2, [r3, #12]
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	005b      	lsls	r3, r3, #1
 80065e6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ea:	69ba      	ldr	r2, [r7, #24]
 80065ec:	4313      	orrs	r3, r2
 80065ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	69ba      	ldr	r2, [r7, #24]
 80065f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80065fc:	2201      	movs	r2, #1
 80065fe:	69fb      	ldr	r3, [r7, #28]
 8006600:	fa02 f303 	lsl.w	r3, r2, r3
 8006604:	43db      	mvns	r3, r3
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	4013      	ands	r3, r2
 800660a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	091b      	lsrs	r3, r3, #4
 8006612:	f003 0201 	and.w	r2, r3, #1
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	fa02 f303 	lsl.w	r3, r2, r3
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	4313      	orrs	r3, r2
 8006620:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	69ba      	ldr	r2, [r7, #24]
 8006626:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f003 0303 	and.w	r3, r3, #3
 8006630:	2b03      	cmp	r3, #3
 8006632:	d017      	beq.n	8006664 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	005b      	lsls	r3, r3, #1
 800663e:	2203      	movs	r2, #3
 8006640:	fa02 f303 	lsl.w	r3, r2, r3
 8006644:	43db      	mvns	r3, r3
 8006646:	69ba      	ldr	r2, [r7, #24]
 8006648:	4013      	ands	r3, r2
 800664a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	689a      	ldr	r2, [r3, #8]
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	005b      	lsls	r3, r3, #1
 8006654:	fa02 f303 	lsl.w	r3, r2, r3
 8006658:	69ba      	ldr	r2, [r7, #24]
 800665a:	4313      	orrs	r3, r2
 800665c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	69ba      	ldr	r2, [r7, #24]
 8006662:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	f003 0303 	and.w	r3, r3, #3
 800666c:	2b02      	cmp	r3, #2
 800666e:	d123      	bne.n	80066b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006670:	69fb      	ldr	r3, [r7, #28]
 8006672:	08da      	lsrs	r2, r3, #3
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	3208      	adds	r2, #8
 8006678:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800667c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	f003 0307 	and.w	r3, r3, #7
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	220f      	movs	r2, #15
 8006688:	fa02 f303 	lsl.w	r3, r2, r3
 800668c:	43db      	mvns	r3, r3
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	4013      	ands	r3, r2
 8006692:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	691a      	ldr	r2, [r3, #16]
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	f003 0307 	and.w	r3, r3, #7
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	fa02 f303 	lsl.w	r3, r2, r3
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80066aa:	69fb      	ldr	r3, [r7, #28]
 80066ac:	08da      	lsrs	r2, r3, #3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	3208      	adds	r2, #8
 80066b2:	69b9      	ldr	r1, [r7, #24]
 80066b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	005b      	lsls	r3, r3, #1
 80066c2:	2203      	movs	r2, #3
 80066c4:	fa02 f303 	lsl.w	r3, r2, r3
 80066c8:	43db      	mvns	r3, r3
 80066ca:	69ba      	ldr	r2, [r7, #24]
 80066cc:	4013      	ands	r3, r2
 80066ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f003 0203 	and.w	r2, r3, #3
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	005b      	lsls	r3, r3, #1
 80066dc:	fa02 f303 	lsl.w	r3, r2, r3
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	69ba      	ldr	r2, [r7, #24]
 80066ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 80b4 	beq.w	8006862 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066fa:	2300      	movs	r3, #0
 80066fc:	60fb      	str	r3, [r7, #12]
 80066fe:	4b60      	ldr	r3, [pc, #384]	; (8006880 <HAL_GPIO_Init+0x30c>)
 8006700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006702:	4a5f      	ldr	r2, [pc, #380]	; (8006880 <HAL_GPIO_Init+0x30c>)
 8006704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006708:	6453      	str	r3, [r2, #68]	; 0x44
 800670a:	4b5d      	ldr	r3, [pc, #372]	; (8006880 <HAL_GPIO_Init+0x30c>)
 800670c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800670e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006712:	60fb      	str	r3, [r7, #12]
 8006714:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006716:	4a5b      	ldr	r2, [pc, #364]	; (8006884 <HAL_GPIO_Init+0x310>)
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	089b      	lsrs	r3, r3, #2
 800671c:	3302      	adds	r3, #2
 800671e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006722:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	f003 0303 	and.w	r3, r3, #3
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	220f      	movs	r2, #15
 800672e:	fa02 f303 	lsl.w	r3, r2, r3
 8006732:	43db      	mvns	r3, r3
 8006734:	69ba      	ldr	r2, [r7, #24]
 8006736:	4013      	ands	r3, r2
 8006738:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a52      	ldr	r2, [pc, #328]	; (8006888 <HAL_GPIO_Init+0x314>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d02b      	beq.n	800679a <HAL_GPIO_Init+0x226>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a51      	ldr	r2, [pc, #324]	; (800688c <HAL_GPIO_Init+0x318>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d025      	beq.n	8006796 <HAL_GPIO_Init+0x222>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a50      	ldr	r2, [pc, #320]	; (8006890 <HAL_GPIO_Init+0x31c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d01f      	beq.n	8006792 <HAL_GPIO_Init+0x21e>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	4a4f      	ldr	r2, [pc, #316]	; (8006894 <HAL_GPIO_Init+0x320>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d019      	beq.n	800678e <HAL_GPIO_Init+0x21a>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a4e      	ldr	r2, [pc, #312]	; (8006898 <HAL_GPIO_Init+0x324>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d013      	beq.n	800678a <HAL_GPIO_Init+0x216>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	4a4d      	ldr	r2, [pc, #308]	; (800689c <HAL_GPIO_Init+0x328>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d00d      	beq.n	8006786 <HAL_GPIO_Init+0x212>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a4c      	ldr	r2, [pc, #304]	; (80068a0 <HAL_GPIO_Init+0x32c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d007      	beq.n	8006782 <HAL_GPIO_Init+0x20e>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a4b      	ldr	r2, [pc, #300]	; (80068a4 <HAL_GPIO_Init+0x330>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d101      	bne.n	800677e <HAL_GPIO_Init+0x20a>
 800677a:	2307      	movs	r3, #7
 800677c:	e00e      	b.n	800679c <HAL_GPIO_Init+0x228>
 800677e:	2308      	movs	r3, #8
 8006780:	e00c      	b.n	800679c <HAL_GPIO_Init+0x228>
 8006782:	2306      	movs	r3, #6
 8006784:	e00a      	b.n	800679c <HAL_GPIO_Init+0x228>
 8006786:	2305      	movs	r3, #5
 8006788:	e008      	b.n	800679c <HAL_GPIO_Init+0x228>
 800678a:	2304      	movs	r3, #4
 800678c:	e006      	b.n	800679c <HAL_GPIO_Init+0x228>
 800678e:	2303      	movs	r3, #3
 8006790:	e004      	b.n	800679c <HAL_GPIO_Init+0x228>
 8006792:	2302      	movs	r3, #2
 8006794:	e002      	b.n	800679c <HAL_GPIO_Init+0x228>
 8006796:	2301      	movs	r3, #1
 8006798:	e000      	b.n	800679c <HAL_GPIO_Init+0x228>
 800679a:	2300      	movs	r3, #0
 800679c:	69fa      	ldr	r2, [r7, #28]
 800679e:	f002 0203 	and.w	r2, r2, #3
 80067a2:	0092      	lsls	r2, r2, #2
 80067a4:	4093      	lsls	r3, r2
 80067a6:	69ba      	ldr	r2, [r7, #24]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80067ac:	4935      	ldr	r1, [pc, #212]	; (8006884 <HAL_GPIO_Init+0x310>)
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	089b      	lsrs	r3, r3, #2
 80067b2:	3302      	adds	r3, #2
 80067b4:	69ba      	ldr	r2, [r7, #24]
 80067b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80067ba:	4b3b      	ldr	r3, [pc, #236]	; (80068a8 <HAL_GPIO_Init+0x334>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	43db      	mvns	r3, r3
 80067c4:	69ba      	ldr	r2, [r7, #24]
 80067c6:	4013      	ands	r3, r2
 80067c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d003      	beq.n	80067de <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80067d6:	69ba      	ldr	r2, [r7, #24]
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	4313      	orrs	r3, r2
 80067dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80067de:	4a32      	ldr	r2, [pc, #200]	; (80068a8 <HAL_GPIO_Init+0x334>)
 80067e0:	69bb      	ldr	r3, [r7, #24]
 80067e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80067e4:	4b30      	ldr	r3, [pc, #192]	; (80068a8 <HAL_GPIO_Init+0x334>)
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	43db      	mvns	r3, r3
 80067ee:	69ba      	ldr	r2, [r7, #24]
 80067f0:	4013      	ands	r3, r2
 80067f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d003      	beq.n	8006808 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006800:	69ba      	ldr	r2, [r7, #24]
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	4313      	orrs	r3, r2
 8006806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006808:	4a27      	ldr	r2, [pc, #156]	; (80068a8 <HAL_GPIO_Init+0x334>)
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800680e:	4b26      	ldr	r3, [pc, #152]	; (80068a8 <HAL_GPIO_Init+0x334>)
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	43db      	mvns	r3, r3
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	4013      	ands	r3, r2
 800681c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800682a:	69ba      	ldr	r2, [r7, #24]
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	4313      	orrs	r3, r2
 8006830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006832:	4a1d      	ldr	r2, [pc, #116]	; (80068a8 <HAL_GPIO_Init+0x334>)
 8006834:	69bb      	ldr	r3, [r7, #24]
 8006836:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006838:	4b1b      	ldr	r3, [pc, #108]	; (80068a8 <HAL_GPIO_Init+0x334>)
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	43db      	mvns	r3, r3
 8006842:	69ba      	ldr	r2, [r7, #24]
 8006844:	4013      	ands	r3, r2
 8006846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d003      	beq.n	800685c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006854:	69ba      	ldr	r2, [r7, #24]
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	4313      	orrs	r3, r2
 800685a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800685c:	4a12      	ldr	r2, [pc, #72]	; (80068a8 <HAL_GPIO_Init+0x334>)
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	3301      	adds	r3, #1
 8006866:	61fb      	str	r3, [r7, #28]
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	2b0f      	cmp	r3, #15
 800686c:	f67f ae90 	bls.w	8006590 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006870:	bf00      	nop
 8006872:	bf00      	nop
 8006874:	3724      	adds	r7, #36	; 0x24
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr
 800687e:	bf00      	nop
 8006880:	40023800 	.word	0x40023800
 8006884:	40013800 	.word	0x40013800
 8006888:	40020000 	.word	0x40020000
 800688c:	40020400 	.word	0x40020400
 8006890:	40020800 	.word	0x40020800
 8006894:	40020c00 	.word	0x40020c00
 8006898:	40021000 	.word	0x40021000
 800689c:	40021400 	.word	0x40021400
 80068a0:	40021800 	.word	0x40021800
 80068a4:	40021c00 	.word	0x40021c00
 80068a8:	40013c00 	.word	0x40013c00

080068ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	460b      	mov	r3, r1
 80068b6:	807b      	strh	r3, [r7, #2]
 80068b8:	4613      	mov	r3, r2
 80068ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80068bc:	787b      	ldrb	r3, [r7, #1]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80068c2:	887a      	ldrh	r2, [r7, #2]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80068c8:	e003      	b.n	80068d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80068ca:	887b      	ldrh	r3, [r7, #2]
 80068cc:	041a      	lsls	r2, r3, #16
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	619a      	str	r2, [r3, #24]
}
 80068d2:	bf00      	nop
 80068d4:	370c      	adds	r7, #12
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
	...

080068e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b084      	sub	sp, #16
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d101      	bne.n	80068f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e12b      	b.n	8006b4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d106      	bne.n	800690c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2200      	movs	r2, #0
 8006902:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7fe f906 	bl	8004b18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2224      	movs	r2, #36	; 0x24
 8006910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 0201 	bic.w	r2, r2, #1
 8006922:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006932:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006942:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006944:	f003 f83e 	bl	80099c4 <HAL_RCC_GetPCLK1Freq>
 8006948:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	4a81      	ldr	r2, [pc, #516]	; (8006b54 <HAL_I2C_Init+0x274>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d807      	bhi.n	8006964 <HAL_I2C_Init+0x84>
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4a80      	ldr	r2, [pc, #512]	; (8006b58 <HAL_I2C_Init+0x278>)
 8006958:	4293      	cmp	r3, r2
 800695a:	bf94      	ite	ls
 800695c:	2301      	movls	r3, #1
 800695e:	2300      	movhi	r3, #0
 8006960:	b2db      	uxtb	r3, r3
 8006962:	e006      	b.n	8006972 <HAL_I2C_Init+0x92>
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4a7d      	ldr	r2, [pc, #500]	; (8006b5c <HAL_I2C_Init+0x27c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	bf94      	ite	ls
 800696c:	2301      	movls	r3, #1
 800696e:	2300      	movhi	r3, #0
 8006970:	b2db      	uxtb	r3, r3
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e0e7      	b.n	8006b4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	4a78      	ldr	r2, [pc, #480]	; (8006b60 <HAL_I2C_Init+0x280>)
 800697e:	fba2 2303 	umull	r2, r3, r2, r3
 8006982:	0c9b      	lsrs	r3, r3, #18
 8006984:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	685b      	ldr	r3, [r3, #4]
 800698c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	430a      	orrs	r2, r1
 8006998:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	6a1b      	ldr	r3, [r3, #32]
 80069a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	4a6a      	ldr	r2, [pc, #424]	; (8006b54 <HAL_I2C_Init+0x274>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d802      	bhi.n	80069b4 <HAL_I2C_Init+0xd4>
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	3301      	adds	r3, #1
 80069b2:	e009      	b.n	80069c8 <HAL_I2C_Init+0xe8>
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80069ba:	fb02 f303 	mul.w	r3, r2, r3
 80069be:	4a69      	ldr	r2, [pc, #420]	; (8006b64 <HAL_I2C_Init+0x284>)
 80069c0:	fba2 2303 	umull	r2, r3, r2, r3
 80069c4:	099b      	lsrs	r3, r3, #6
 80069c6:	3301      	adds	r3, #1
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	6812      	ldr	r2, [r2, #0]
 80069cc:	430b      	orrs	r3, r1
 80069ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	69db      	ldr	r3, [r3, #28]
 80069d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80069da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	495c      	ldr	r1, [pc, #368]	; (8006b54 <HAL_I2C_Init+0x274>)
 80069e4:	428b      	cmp	r3, r1
 80069e6:	d819      	bhi.n	8006a1c <HAL_I2C_Init+0x13c>
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	1e59      	subs	r1, r3, #1
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	005b      	lsls	r3, r3, #1
 80069f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80069f6:	1c59      	adds	r1, r3, #1
 80069f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80069fc:	400b      	ands	r3, r1
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00a      	beq.n	8006a18 <HAL_I2C_Init+0x138>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	1e59      	subs	r1, r3, #1
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	005b      	lsls	r3, r3, #1
 8006a0c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006a10:	3301      	adds	r3, #1
 8006a12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a16:	e051      	b.n	8006abc <HAL_I2C_Init+0x1dc>
 8006a18:	2304      	movs	r3, #4
 8006a1a:	e04f      	b.n	8006abc <HAL_I2C_Init+0x1dc>
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d111      	bne.n	8006a48 <HAL_I2C_Init+0x168>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	1e58      	subs	r0, r3, #1
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6859      	ldr	r1, [r3, #4]
 8006a2c:	460b      	mov	r3, r1
 8006a2e:	005b      	lsls	r3, r3, #1
 8006a30:	440b      	add	r3, r1
 8006a32:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a36:	3301      	adds	r3, #1
 8006a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	bf0c      	ite	eq
 8006a40:	2301      	moveq	r3, #1
 8006a42:	2300      	movne	r3, #0
 8006a44:	b2db      	uxtb	r3, r3
 8006a46:	e012      	b.n	8006a6e <HAL_I2C_Init+0x18e>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	1e58      	subs	r0, r3, #1
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6859      	ldr	r1, [r3, #4]
 8006a50:	460b      	mov	r3, r1
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	440b      	add	r3, r1
 8006a56:	0099      	lsls	r1, r3, #2
 8006a58:	440b      	add	r3, r1
 8006a5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a5e:	3301      	adds	r3, #1
 8006a60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	bf0c      	ite	eq
 8006a68:	2301      	moveq	r3, #1
 8006a6a:	2300      	movne	r3, #0
 8006a6c:	b2db      	uxtb	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d001      	beq.n	8006a76 <HAL_I2C_Init+0x196>
 8006a72:	2301      	movs	r3, #1
 8006a74:	e022      	b.n	8006abc <HAL_I2C_Init+0x1dc>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d10e      	bne.n	8006a9c <HAL_I2C_Init+0x1bc>
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	1e58      	subs	r0, r3, #1
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6859      	ldr	r1, [r3, #4]
 8006a86:	460b      	mov	r3, r1
 8006a88:	005b      	lsls	r3, r3, #1
 8006a8a:	440b      	add	r3, r1
 8006a8c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006a90:	3301      	adds	r3, #1
 8006a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a9a:	e00f      	b.n	8006abc <HAL_I2C_Init+0x1dc>
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	1e58      	subs	r0, r3, #1
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6859      	ldr	r1, [r3, #4]
 8006aa4:	460b      	mov	r3, r1
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	440b      	add	r3, r1
 8006aaa:	0099      	lsls	r1, r3, #2
 8006aac:	440b      	add	r3, r1
 8006aae:	fbb0 f3f3 	udiv	r3, r0, r3
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006ab8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006abc:	6879      	ldr	r1, [r7, #4]
 8006abe:	6809      	ldr	r1, [r1, #0]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	69da      	ldr	r2, [r3, #28]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	431a      	orrs	r2, r3
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	430a      	orrs	r2, r1
 8006ade:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	689b      	ldr	r3, [r3, #8]
 8006ae6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006aea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	6911      	ldr	r1, [r2, #16]
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	68d2      	ldr	r2, [r2, #12]
 8006af6:	4311      	orrs	r1, r2
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	6812      	ldr	r2, [r2, #0]
 8006afc:	430b      	orrs	r3, r1
 8006afe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	68db      	ldr	r3, [r3, #12]
 8006b06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	695a      	ldr	r2, [r3, #20]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	431a      	orrs	r2, r3
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	430a      	orrs	r2, r1
 8006b1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	f042 0201 	orr.w	r2, r2, #1
 8006b2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2200      	movs	r2, #0
 8006b30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2220      	movs	r2, #32
 8006b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2200      	movs	r2, #0
 8006b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	000186a0 	.word	0x000186a0
 8006b58:	001e847f 	.word	0x001e847f
 8006b5c:	003d08ff 	.word	0x003d08ff
 8006b60:	431bde83 	.word	0x431bde83
 8006b64:	10624dd3 	.word	0x10624dd3

08006b68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b088      	sub	sp, #32
 8006b6c:	af02      	add	r7, sp, #8
 8006b6e:	60f8      	str	r0, [r7, #12]
 8006b70:	607a      	str	r2, [r7, #4]
 8006b72:	461a      	mov	r2, r3
 8006b74:	460b      	mov	r3, r1
 8006b76:	817b      	strh	r3, [r7, #10]
 8006b78:	4613      	mov	r3, r2
 8006b7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006b7c:	f7fe ffe6 	bl	8005b4c <HAL_GetTick>
 8006b80:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b20      	cmp	r3, #32
 8006b8c:	f040 80e0 	bne.w	8006d50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	9300      	str	r3, [sp, #0]
 8006b94:	2319      	movs	r3, #25
 8006b96:	2201      	movs	r2, #1
 8006b98:	4970      	ldr	r1, [pc, #448]	; (8006d5c <HAL_I2C_Master_Transmit+0x1f4>)
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f000 ff66 	bl	8007a6c <I2C_WaitOnFlagUntilTimeout>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	e0d3      	b.n	8006d52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d101      	bne.n	8006bb8 <HAL_I2C_Master_Transmit+0x50>
 8006bb4:	2302      	movs	r3, #2
 8006bb6:	e0cc      	b.n	8006d52 <HAL_I2C_Master_Transmit+0x1ea>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d007      	beq.n	8006bde <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	681a      	ldr	r2, [r3, #0]
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f042 0201 	orr.w	r2, r2, #1
 8006bdc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	681a      	ldr	r2, [r3, #0]
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006bec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2221      	movs	r2, #33	; 0x21
 8006bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2210      	movs	r2, #16
 8006bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2200      	movs	r2, #0
 8006c02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	893a      	ldrh	r2, [r7, #8]
 8006c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	4a50      	ldr	r2, [pc, #320]	; (8006d60 <HAL_I2C_Master_Transmit+0x1f8>)
 8006c1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006c20:	8979      	ldrh	r1, [r7, #10]
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	6a3a      	ldr	r2, [r7, #32]
 8006c26:	68f8      	ldr	r0, [r7, #12]
 8006c28:	f000 fce8 	bl	80075fc <I2C_MasterRequestWrite>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d001      	beq.n	8006c36 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006c32:	2301      	movs	r3, #1
 8006c34:	e08d      	b.n	8006d52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c36:	2300      	movs	r3, #0
 8006c38:	613b      	str	r3, [r7, #16]
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	613b      	str	r3, [r7, #16]
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	613b      	str	r3, [r7, #16]
 8006c4a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006c4c:	e066      	b.n	8006d1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	6a39      	ldr	r1, [r7, #32]
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 ffe0 	bl	8007c18 <I2C_WaitOnTXEFlagUntilTimeout>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00d      	beq.n	8006c7a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	d107      	bne.n	8006c76 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e06b      	b.n	8006d52 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7e:	781a      	ldrb	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8a:	1c5a      	adds	r2, r3, #1
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	3b01      	subs	r3, #1
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	b29a      	uxth	r2, r3
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	695b      	ldr	r3, [r3, #20]
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b04      	cmp	r3, #4
 8006cb6:	d11b      	bne.n	8006cf0 <HAL_I2C_Master_Transmit+0x188>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d017      	beq.n	8006cf0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc4:	781a      	ldrb	r2, [r3, #0]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd0:	1c5a      	adds	r2, r3, #1
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	3b01      	subs	r3, #1
 8006cde:	b29a      	uxth	r2, r3
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ce8:	3b01      	subs	r3, #1
 8006cea:	b29a      	uxth	r2, r3
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006cf0:	697a      	ldr	r2, [r7, #20]
 8006cf2:	6a39      	ldr	r1, [r7, #32]
 8006cf4:	68f8      	ldr	r0, [r7, #12]
 8006cf6:	f000 ffd0 	bl	8007c9a <I2C_WaitOnBTFFlagUntilTimeout>
 8006cfa:	4603      	mov	r3, r0
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d00d      	beq.n	8006d1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d04:	2b04      	cmp	r3, #4
 8006d06:	d107      	bne.n	8006d18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	681a      	ldr	r2, [r3, #0]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	e01a      	b.n	8006d52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d194      	bne.n	8006c4e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006d32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	2220      	movs	r2, #32
 8006d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	e000      	b.n	8006d52 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006d50:	2302      	movs	r3, #2
  }
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3718      	adds	r7, #24
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	00100002 	.word	0x00100002
 8006d60:	ffff0000 	.word	0xffff0000

08006d64 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b08c      	sub	sp, #48	; 0x30
 8006d68:	af02      	add	r7, sp, #8
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	607a      	str	r2, [r7, #4]
 8006d6e:	461a      	mov	r2, r3
 8006d70:	460b      	mov	r3, r1
 8006d72:	817b      	strh	r3, [r7, #10]
 8006d74:	4613      	mov	r3, r2
 8006d76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006d78:	f7fe fee8 	bl	8005b4c <HAL_GetTick>
 8006d7c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b20      	cmp	r3, #32
 8006d88:	f040 820b 	bne.w	80071a2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	9300      	str	r3, [sp, #0]
 8006d90:	2319      	movs	r3, #25
 8006d92:	2201      	movs	r2, #1
 8006d94:	497c      	ldr	r1, [pc, #496]	; (8006f88 <HAL_I2C_Master_Receive+0x224>)
 8006d96:	68f8      	ldr	r0, [r7, #12]
 8006d98:	f000 fe68 	bl	8007a6c <I2C_WaitOnFlagUntilTimeout>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8006da2:	2302      	movs	r3, #2
 8006da4:	e1fe      	b.n	80071a4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d101      	bne.n	8006db4 <HAL_I2C_Master_Receive+0x50>
 8006db0:	2302      	movs	r3, #2
 8006db2:	e1f7      	b.n	80071a4 <HAL_I2C_Master_Receive+0x440>
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	2201      	movs	r2, #1
 8006db8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 0301 	and.w	r3, r3, #1
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d007      	beq.n	8006dda <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f042 0201 	orr.w	r2, r2, #1
 8006dd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006de8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	2222      	movs	r2, #34	; 0x22
 8006dee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2210      	movs	r2, #16
 8006df6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	687a      	ldr	r2, [r7, #4]
 8006e04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	893a      	ldrh	r2, [r7, #8]
 8006e0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e10:	b29a      	uxth	r2, r3
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	4a5c      	ldr	r2, [pc, #368]	; (8006f8c <HAL_I2C_Master_Receive+0x228>)
 8006e1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006e1c:	8979      	ldrh	r1, [r7, #10]
 8006e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f000 fc6c 	bl	8007700 <I2C_MasterRequestRead>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8006e2e:	2301      	movs	r3, #1
 8006e30:	e1b8      	b.n	80071a4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d113      	bne.n	8006e62 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	623b      	str	r3, [r7, #32]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	695b      	ldr	r3, [r3, #20]
 8006e44:	623b      	str	r3, [r7, #32]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	623b      	str	r3, [r7, #32]
 8006e4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e5e:	601a      	str	r2, [r3, #0]
 8006e60:	e18c      	b.n	800717c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e66:	2b01      	cmp	r3, #1
 8006e68:	d11b      	bne.n	8006ea2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	61fb      	str	r3, [r7, #28]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	61fb      	str	r3, [r7, #28]
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	61fb      	str	r3, [r7, #28]
 8006e8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e9e:	601a      	str	r2, [r3, #0]
 8006ea0:	e16c      	b.n	800717c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ea6:	2b02      	cmp	r3, #2
 8006ea8:	d11b      	bne.n	8006ee2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	681a      	ldr	r2, [r3, #0]
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006eb8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ec8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006eca:	2300      	movs	r3, #0
 8006ecc:	61bb      	str	r3, [r7, #24]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	695b      	ldr	r3, [r3, #20]
 8006ed4:	61bb      	str	r3, [r7, #24]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	61bb      	str	r3, [r7, #24]
 8006ede:	69bb      	ldr	r3, [r7, #24]
 8006ee0:	e14c      	b.n	800717c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006ef0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	617b      	str	r3, [r7, #20]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	695b      	ldr	r3, [r3, #20]
 8006efc:	617b      	str	r3, [r7, #20]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	699b      	ldr	r3, [r3, #24]
 8006f04:	617b      	str	r3, [r7, #20]
 8006f06:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006f08:	e138      	b.n	800717c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	f200 80f1 	bhi.w	80070f6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d123      	bne.n	8006f64 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 fefb 	bl	8007d1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d001      	beq.n	8006f30 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	e139      	b.n	80071a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	691a      	ldr	r2, [r3, #16]
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3a:	b2d2      	uxtb	r2, r2
 8006f3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f42:	1c5a      	adds	r2, r3, #1
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f4c:	3b01      	subs	r3, #1
 8006f4e:	b29a      	uxth	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f58:	b29b      	uxth	r3, r3
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	b29a      	uxth	r2, r3
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006f62:	e10b      	b.n	800717c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d14e      	bne.n	800700a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	9300      	str	r3, [sp, #0]
 8006f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f72:	2200      	movs	r2, #0
 8006f74:	4906      	ldr	r1, [pc, #24]	; (8006f90 <HAL_I2C_Master_Receive+0x22c>)
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f000 fd78 	bl	8007a6c <I2C_WaitOnFlagUntilTimeout>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d008      	beq.n	8006f94 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e10e      	b.n	80071a4 <HAL_I2C_Master_Receive+0x440>
 8006f86:	bf00      	nop
 8006f88:	00100002 	.word	0x00100002
 8006f8c:	ffff0000 	.word	0xffff0000
 8006f90:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fa2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	691a      	ldr	r2, [r3, #16]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fae:	b2d2      	uxtb	r2, r2
 8006fb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb6:	1c5a      	adds	r2, r3, #1
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fc0:	3b01      	subs	r3, #1
 8006fc2:	b29a      	uxth	r2, r3
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	3b01      	subs	r3, #1
 8006fd0:	b29a      	uxth	r2, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	691a      	ldr	r2, [r3, #16]
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe0:	b2d2      	uxtb	r2, r2
 8006fe2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe8:	1c5a      	adds	r2, r3, #1
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	b29a      	uxth	r2, r3
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ffe:	b29b      	uxth	r3, r3
 8007000:	3b01      	subs	r3, #1
 8007002:	b29a      	uxth	r2, r3
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007008:	e0b8      	b.n	800717c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800700a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700c:	9300      	str	r3, [sp, #0]
 800700e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007010:	2200      	movs	r2, #0
 8007012:	4966      	ldr	r1, [pc, #408]	; (80071ac <HAL_I2C_Master_Receive+0x448>)
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f000 fd29 	bl	8007a6c <I2C_WaitOnFlagUntilTimeout>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d001      	beq.n	8007024 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007020:	2301      	movs	r3, #1
 8007022:	e0bf      	b.n	80071a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007032:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	691a      	ldr	r2, [r3, #16]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703e:	b2d2      	uxtb	r2, r2
 8007040:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007046:	1c5a      	adds	r2, r3, #1
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007050:	3b01      	subs	r3, #1
 8007052:	b29a      	uxth	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800705c:	b29b      	uxth	r3, r3
 800705e:	3b01      	subs	r3, #1
 8007060:	b29a      	uxth	r2, r3
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007068:	9300      	str	r3, [sp, #0]
 800706a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800706c:	2200      	movs	r2, #0
 800706e:	494f      	ldr	r1, [pc, #316]	; (80071ac <HAL_I2C_Master_Receive+0x448>)
 8007070:	68f8      	ldr	r0, [r7, #12]
 8007072:	f000 fcfb 	bl	8007a6c <I2C_WaitOnFlagUntilTimeout>
 8007076:	4603      	mov	r3, r0
 8007078:	2b00      	cmp	r3, #0
 800707a:	d001      	beq.n	8007080 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e091      	b.n	80071a4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800708e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	691a      	ldr	r2, [r3, #16]
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070a2:	1c5a      	adds	r2, r3, #1
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ac:	3b01      	subs	r3, #1
 80070ae:	b29a      	uxth	r2, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	3b01      	subs	r3, #1
 80070bc:	b29a      	uxth	r2, r3
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	691a      	ldr	r2, [r3, #16]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070cc:	b2d2      	uxtb	r2, r2
 80070ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d4:	1c5a      	adds	r2, r3, #1
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070de:	3b01      	subs	r3, #1
 80070e0:	b29a      	uxth	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	3b01      	subs	r3, #1
 80070ee:	b29a      	uxth	r2, r3
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80070f4:	e042      	b.n	800717c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80070f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80070fa:	68f8      	ldr	r0, [r7, #12]
 80070fc:	f000 fe0e 	bl	8007d1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007100:	4603      	mov	r3, r0
 8007102:	2b00      	cmp	r3, #0
 8007104:	d001      	beq.n	800710a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007106:	2301      	movs	r3, #1
 8007108:	e04c      	b.n	80071a4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	691a      	ldr	r2, [r3, #16]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007114:	b2d2      	uxtb	r2, r2
 8007116:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800711c:	1c5a      	adds	r2, r3, #1
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007126:	3b01      	subs	r3, #1
 8007128:	b29a      	uxth	r2, r3
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007132:	b29b      	uxth	r3, r3
 8007134:	3b01      	subs	r3, #1
 8007136:	b29a      	uxth	r2, r3
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	695b      	ldr	r3, [r3, #20]
 8007142:	f003 0304 	and.w	r3, r3, #4
 8007146:	2b04      	cmp	r3, #4
 8007148:	d118      	bne.n	800717c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	691a      	ldr	r2, [r3, #16]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007154:	b2d2      	uxtb	r2, r2
 8007156:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800715c:	1c5a      	adds	r2, r3, #1
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007166:	3b01      	subs	r3, #1
 8007168:	b29a      	uxth	r2, r3
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007172:	b29b      	uxth	r3, r3
 8007174:	3b01      	subs	r3, #1
 8007176:	b29a      	uxth	r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007180:	2b00      	cmp	r3, #0
 8007182:	f47f aec2 	bne.w	8006f0a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2220      	movs	r2, #32
 800718a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800719e:	2300      	movs	r3, #0
 80071a0:	e000      	b.n	80071a4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80071a2:	2302      	movs	r3, #2
  }
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3728      	adds	r7, #40	; 0x28
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}
 80071ac:	00010004 	.word	0x00010004

080071b0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b08c      	sub	sp, #48	; 0x30
 80071b4:	af02      	add	r7, sp, #8
 80071b6:	60f8      	str	r0, [r7, #12]
 80071b8:	4608      	mov	r0, r1
 80071ba:	4611      	mov	r1, r2
 80071bc:	461a      	mov	r2, r3
 80071be:	4603      	mov	r3, r0
 80071c0:	817b      	strh	r3, [r7, #10]
 80071c2:	460b      	mov	r3, r1
 80071c4:	813b      	strh	r3, [r7, #8]
 80071c6:	4613      	mov	r3, r2
 80071c8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80071ca:	f7fe fcbf 	bl	8005b4c <HAL_GetTick>
 80071ce:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b20      	cmp	r3, #32
 80071da:	f040 8208 	bne.w	80075ee <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	2319      	movs	r3, #25
 80071e4:	2201      	movs	r2, #1
 80071e6:	497b      	ldr	r1, [pc, #492]	; (80073d4 <HAL_I2C_Mem_Read+0x224>)
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f000 fc3f 	bl	8007a6c <I2C_WaitOnFlagUntilTimeout>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d001      	beq.n	80071f8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80071f4:	2302      	movs	r3, #2
 80071f6:	e1fb      	b.n	80075f0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d101      	bne.n	8007206 <HAL_I2C_Mem_Read+0x56>
 8007202:	2302      	movs	r3, #2
 8007204:	e1f4      	b.n	80075f0 <HAL_I2C_Mem_Read+0x440>
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2201      	movs	r2, #1
 800720a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f003 0301 	and.w	r3, r3, #1
 8007218:	2b01      	cmp	r3, #1
 800721a:	d007      	beq.n	800722c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f042 0201 	orr.w	r2, r2, #1
 800722a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800723a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2222      	movs	r2, #34	; 0x22
 8007240:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2240      	movs	r2, #64	; 0x40
 8007248:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007256:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800725c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007262:	b29a      	uxth	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	4a5b      	ldr	r2, [pc, #364]	; (80073d8 <HAL_I2C_Mem_Read+0x228>)
 800726c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800726e:	88f8      	ldrh	r0, [r7, #6]
 8007270:	893a      	ldrh	r2, [r7, #8]
 8007272:	8979      	ldrh	r1, [r7, #10]
 8007274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007276:	9301      	str	r3, [sp, #4]
 8007278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800727a:	9300      	str	r3, [sp, #0]
 800727c:	4603      	mov	r3, r0
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f000 fb0c 	bl	800789c <I2C_RequestMemoryRead>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800728a:	2301      	movs	r3, #1
 800728c:	e1b0      	b.n	80075f0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007292:	2b00      	cmp	r3, #0
 8007294:	d113      	bne.n	80072be <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007296:	2300      	movs	r3, #0
 8007298:	623b      	str	r3, [r7, #32]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	695b      	ldr	r3, [r3, #20]
 80072a0:	623b      	str	r3, [r7, #32]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	699b      	ldr	r3, [r3, #24]
 80072a8:	623b      	str	r3, [r7, #32]
 80072aa:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681a      	ldr	r2, [r3, #0]
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	e184      	b.n	80075c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d11b      	bne.n	80072fe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681a      	ldr	r2, [r3, #0]
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80072d4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80072d6:	2300      	movs	r3, #0
 80072d8:	61fb      	str	r3, [r7, #28]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	695b      	ldr	r3, [r3, #20]
 80072e0:	61fb      	str	r3, [r7, #28]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	699b      	ldr	r3, [r3, #24]
 80072e8:	61fb      	str	r3, [r7, #28]
 80072ea:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	e164      	b.n	80075c8 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007302:	2b02      	cmp	r3, #2
 8007304:	d11b      	bne.n	800733e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681a      	ldr	r2, [r3, #0]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007314:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007324:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007326:	2300      	movs	r3, #0
 8007328:	61bb      	str	r3, [r7, #24]
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	695b      	ldr	r3, [r3, #20]
 8007330:	61bb      	str	r3, [r7, #24]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	699b      	ldr	r3, [r3, #24]
 8007338:	61bb      	str	r3, [r7, #24]
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	e144      	b.n	80075c8 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800733e:	2300      	movs	r3, #0
 8007340:	617b      	str	r3, [r7, #20]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	695b      	ldr	r3, [r3, #20]
 8007348:	617b      	str	r3, [r7, #20]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	699b      	ldr	r3, [r3, #24]
 8007350:	617b      	str	r3, [r7, #20]
 8007352:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007354:	e138      	b.n	80075c8 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800735a:	2b03      	cmp	r3, #3
 800735c:	f200 80f1 	bhi.w	8007542 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007364:	2b01      	cmp	r3, #1
 8007366:	d123      	bne.n	80073b0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800736a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	f000 fcd5 	bl	8007d1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8007372:	4603      	mov	r3, r0
 8007374:	2b00      	cmp	r3, #0
 8007376:	d001      	beq.n	800737c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007378:	2301      	movs	r3, #1
 800737a:	e139      	b.n	80075f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	691a      	ldr	r2, [r3, #16]
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007386:	b2d2      	uxtb	r2, r2
 8007388:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007398:	3b01      	subs	r3, #1
 800739a:	b29a      	uxth	r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	3b01      	subs	r3, #1
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	855a      	strh	r2, [r3, #42]	; 0x2a
 80073ae:	e10b      	b.n	80075c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073b4:	2b02      	cmp	r3, #2
 80073b6:	d14e      	bne.n	8007456 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80073b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073be:	2200      	movs	r2, #0
 80073c0:	4906      	ldr	r1, [pc, #24]	; (80073dc <HAL_I2C_Mem_Read+0x22c>)
 80073c2:	68f8      	ldr	r0, [r7, #12]
 80073c4:	f000 fb52 	bl	8007a6c <I2C_WaitOnFlagUntilTimeout>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d008      	beq.n	80073e0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e10e      	b.n	80075f0 <HAL_I2C_Mem_Read+0x440>
 80073d2:	bf00      	nop
 80073d4:	00100002 	.word	0x00100002
 80073d8:	ffff0000 	.word	0xffff0000
 80073dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	681a      	ldr	r2, [r3, #0]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80073ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	691a      	ldr	r2, [r3, #16]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fa:	b2d2      	uxtb	r2, r2
 80073fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007402:	1c5a      	adds	r2, r3, #1
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800740c:	3b01      	subs	r3, #1
 800740e:	b29a      	uxth	r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007418:	b29b      	uxth	r3, r3
 800741a:	3b01      	subs	r3, #1
 800741c:	b29a      	uxth	r2, r3
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	691a      	ldr	r2, [r3, #16]
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742c:	b2d2      	uxtb	r2, r2
 800742e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007434:	1c5a      	adds	r2, r3, #1
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800743e:	3b01      	subs	r3, #1
 8007440:	b29a      	uxth	r2, r3
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800744a:	b29b      	uxth	r3, r3
 800744c:	3b01      	subs	r3, #1
 800744e:	b29a      	uxth	r2, r3
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007454:	e0b8      	b.n	80075c8 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800745c:	2200      	movs	r2, #0
 800745e:	4966      	ldr	r1, [pc, #408]	; (80075f8 <HAL_I2C_Mem_Read+0x448>)
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f000 fb03 	bl	8007a6c <I2C_WaitOnFlagUntilTimeout>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d001      	beq.n	8007470 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e0bf      	b.n	80075f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800747e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	691a      	ldr	r2, [r3, #16]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748a:	b2d2      	uxtb	r2, r2
 800748c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007492:	1c5a      	adds	r2, r3, #1
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800749c:	3b01      	subs	r3, #1
 800749e:	b29a      	uxth	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	3b01      	subs	r3, #1
 80074ac:	b29a      	uxth	r2, r3
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80074b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b4:	9300      	str	r3, [sp, #0]
 80074b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b8:	2200      	movs	r2, #0
 80074ba:	494f      	ldr	r1, [pc, #316]	; (80075f8 <HAL_I2C_Mem_Read+0x448>)
 80074bc:	68f8      	ldr	r0, [r7, #12]
 80074be:	f000 fad5 	bl	8007a6c <I2C_WaitOnFlagUntilTimeout>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80074c8:	2301      	movs	r3, #1
 80074ca:	e091      	b.n	80075f0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	691a      	ldr	r2, [r3, #16]
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074e6:	b2d2      	uxtb	r2, r2
 80074e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ee:	1c5a      	adds	r2, r3, #1
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074f8:	3b01      	subs	r3, #1
 80074fa:	b29a      	uxth	r2, r3
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007504:	b29b      	uxth	r3, r3
 8007506:	3b01      	subs	r3, #1
 8007508:	b29a      	uxth	r2, r3
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	691a      	ldr	r2, [r3, #16]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007518:	b2d2      	uxtb	r2, r2
 800751a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007520:	1c5a      	adds	r2, r3, #1
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800752a:	3b01      	subs	r3, #1
 800752c:	b29a      	uxth	r2, r3
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007536:	b29b      	uxth	r3, r3
 8007538:	3b01      	subs	r3, #1
 800753a:	b29a      	uxth	r2, r3
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007540:	e042      	b.n	80075c8 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007544:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f000 fbe8 	bl	8007d1c <I2C_WaitOnRXNEFlagUntilTimeout>
 800754c:	4603      	mov	r3, r0
 800754e:	2b00      	cmp	r3, #0
 8007550:	d001      	beq.n	8007556 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	e04c      	b.n	80075f0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	691a      	ldr	r2, [r3, #16]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007560:	b2d2      	uxtb	r2, r2
 8007562:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007572:	3b01      	subs	r3, #1
 8007574:	b29a      	uxth	r2, r3
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800757e:	b29b      	uxth	r3, r3
 8007580:	3b01      	subs	r3, #1
 8007582:	b29a      	uxth	r2, r3
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	695b      	ldr	r3, [r3, #20]
 800758e:	f003 0304 	and.w	r3, r3, #4
 8007592:	2b04      	cmp	r3, #4
 8007594:	d118      	bne.n	80075c8 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	691a      	ldr	r2, [r3, #16]
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a0:	b2d2      	uxtb	r2, r2
 80075a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a8:	1c5a      	adds	r2, r3, #1
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075b2:	3b01      	subs	r3, #1
 80075b4:	b29a      	uxth	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075be:	b29b      	uxth	r3, r3
 80075c0:	3b01      	subs	r3, #1
 80075c2:	b29a      	uxth	r2, r3
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f47f aec2 	bne.w	8007356 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2220      	movs	r2, #32
 80075d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2200      	movs	r2, #0
 80075de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	e000      	b.n	80075f0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80075ee:	2302      	movs	r3, #2
  }
}
 80075f0:	4618      	mov	r0, r3
 80075f2:	3728      	adds	r7, #40	; 0x28
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	00010004 	.word	0x00010004

080075fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b088      	sub	sp, #32
 8007600:	af02      	add	r7, sp, #8
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	607a      	str	r2, [r7, #4]
 8007606:	603b      	str	r3, [r7, #0]
 8007608:	460b      	mov	r3, r1
 800760a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007610:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	2b08      	cmp	r3, #8
 8007616:	d006      	beq.n	8007626 <I2C_MasterRequestWrite+0x2a>
 8007618:	697b      	ldr	r3, [r7, #20]
 800761a:	2b01      	cmp	r3, #1
 800761c:	d003      	beq.n	8007626 <I2C_MasterRequestWrite+0x2a>
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007624:	d108      	bne.n	8007638 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007634:	601a      	str	r2, [r3, #0]
 8007636:	e00b      	b.n	8007650 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800763c:	2b12      	cmp	r3, #18
 800763e:	d107      	bne.n	8007650 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681a      	ldr	r2, [r3, #0]
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800764e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f000 fa05 	bl	8007a6c <I2C_WaitOnFlagUntilTimeout>
 8007662:	4603      	mov	r3, r0
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00d      	beq.n	8007684 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007676:	d103      	bne.n	8007680 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800767e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	e035      	b.n	80076f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800768c:	d108      	bne.n	80076a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800768e:	897b      	ldrh	r3, [r7, #10]
 8007690:	b2db      	uxtb	r3, r3
 8007692:	461a      	mov	r2, r3
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800769c:	611a      	str	r2, [r3, #16]
 800769e:	e01b      	b.n	80076d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80076a0:	897b      	ldrh	r3, [r7, #10]
 80076a2:	11db      	asrs	r3, r3, #7
 80076a4:	b2db      	uxtb	r3, r3
 80076a6:	f003 0306 	and.w	r3, r3, #6
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	f063 030f 	orn	r3, r3, #15
 80076b0:	b2da      	uxtb	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	490e      	ldr	r1, [pc, #56]	; (80076f8 <I2C_MasterRequestWrite+0xfc>)
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f000 fa2b 	bl	8007b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d001      	beq.n	80076ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e010      	b.n	80076f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80076ce:	897b      	ldrh	r3, [r7, #10]
 80076d0:	b2da      	uxtb	r2, r3
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	687a      	ldr	r2, [r7, #4]
 80076dc:	4907      	ldr	r1, [pc, #28]	; (80076fc <I2C_MasterRequestWrite+0x100>)
 80076de:	68f8      	ldr	r0, [r7, #12]
 80076e0:	f000 fa1b 	bl	8007b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d001      	beq.n	80076ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e000      	b.n	80076f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	4618      	mov	r0, r3
 80076f2:	3718      	adds	r7, #24
 80076f4:	46bd      	mov	sp, r7
 80076f6:	bd80      	pop	{r7, pc}
 80076f8:	00010008 	.word	0x00010008
 80076fc:	00010002 	.word	0x00010002

08007700 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b088      	sub	sp, #32
 8007704:	af02      	add	r7, sp, #8
 8007706:	60f8      	str	r0, [r7, #12]
 8007708:	607a      	str	r2, [r7, #4]
 800770a:	603b      	str	r3, [r7, #0]
 800770c:	460b      	mov	r3, r1
 800770e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007714:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	681a      	ldr	r2, [r3, #0]
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007724:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	2b08      	cmp	r3, #8
 800772a:	d006      	beq.n	800773a <I2C_MasterRequestRead+0x3a>
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d003      	beq.n	800773a <I2C_MasterRequestRead+0x3a>
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007738:	d108      	bne.n	800774c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681a      	ldr	r2, [r3, #0]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007748:	601a      	str	r2, [r3, #0]
 800774a:	e00b      	b.n	8007764 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007750:	2b11      	cmp	r3, #17
 8007752:	d107      	bne.n	8007764 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	681a      	ldr	r2, [r3, #0]
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007762:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	9300      	str	r3, [sp, #0]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007770:	68f8      	ldr	r0, [r7, #12]
 8007772:	f000 f97b 	bl	8007a6c <I2C_WaitOnFlagUntilTimeout>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00d      	beq.n	8007798 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800778a:	d103      	bne.n	8007794 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007792:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e079      	b.n	800788c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	691b      	ldr	r3, [r3, #16]
 800779c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80077a0:	d108      	bne.n	80077b4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80077a2:	897b      	ldrh	r3, [r7, #10]
 80077a4:	b2db      	uxtb	r3, r3
 80077a6:	f043 0301 	orr.w	r3, r3, #1
 80077aa:	b2da      	uxtb	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	611a      	str	r2, [r3, #16]
 80077b2:	e05f      	b.n	8007874 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80077b4:	897b      	ldrh	r3, [r7, #10]
 80077b6:	11db      	asrs	r3, r3, #7
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	f003 0306 	and.w	r3, r3, #6
 80077be:	b2db      	uxtb	r3, r3
 80077c0:	f063 030f 	orn	r3, r3, #15
 80077c4:	b2da      	uxtb	r2, r3
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	4930      	ldr	r1, [pc, #192]	; (8007894 <I2C_MasterRequestRead+0x194>)
 80077d2:	68f8      	ldr	r0, [r7, #12]
 80077d4:	f000 f9a1 	bl	8007b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077d8:	4603      	mov	r3, r0
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d001      	beq.n	80077e2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e054      	b.n	800788c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80077e2:	897b      	ldrh	r3, [r7, #10]
 80077e4:	b2da      	uxtb	r2, r3
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	4929      	ldr	r1, [pc, #164]	; (8007898 <I2C_MasterRequestRead+0x198>)
 80077f2:	68f8      	ldr	r0, [r7, #12]
 80077f4:	f000 f991 	bl	8007b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d001      	beq.n	8007802 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e044      	b.n	800788c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007802:	2300      	movs	r3, #0
 8007804:	613b      	str	r3, [r7, #16]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	695b      	ldr	r3, [r3, #20]
 800780c:	613b      	str	r3, [r7, #16]
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	699b      	ldr	r3, [r3, #24]
 8007814:	613b      	str	r3, [r7, #16]
 8007816:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007826:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	9300      	str	r3, [sp, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2200      	movs	r2, #0
 8007830:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007834:	68f8      	ldr	r0, [r7, #12]
 8007836:	f000 f919 	bl	8007a6c <I2C_WaitOnFlagUntilTimeout>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00d      	beq.n	800785c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800784a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800784e:	d103      	bne.n	8007858 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007856:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8007858:	2303      	movs	r3, #3
 800785a:	e017      	b.n	800788c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800785c:	897b      	ldrh	r3, [r7, #10]
 800785e:	11db      	asrs	r3, r3, #7
 8007860:	b2db      	uxtb	r3, r3
 8007862:	f003 0306 	and.w	r3, r3, #6
 8007866:	b2db      	uxtb	r3, r3
 8007868:	f063 030e 	orn	r3, r3, #14
 800786c:	b2da      	uxtb	r2, r3
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	4907      	ldr	r1, [pc, #28]	; (8007898 <I2C_MasterRequestRead+0x198>)
 800787a:	68f8      	ldr	r0, [r7, #12]
 800787c:	f000 f94d 	bl	8007b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d001      	beq.n	800788a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8007886:	2301      	movs	r3, #1
 8007888:	e000      	b.n	800788c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800788a:	2300      	movs	r3, #0
}
 800788c:	4618      	mov	r0, r3
 800788e:	3718      	adds	r7, #24
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}
 8007894:	00010008 	.word	0x00010008
 8007898:	00010002 	.word	0x00010002

0800789c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b088      	sub	sp, #32
 80078a0:	af02      	add	r7, sp, #8
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	4608      	mov	r0, r1
 80078a6:	4611      	mov	r1, r2
 80078a8:	461a      	mov	r2, r3
 80078aa:	4603      	mov	r3, r0
 80078ac:	817b      	strh	r3, [r7, #10]
 80078ae:	460b      	mov	r3, r1
 80078b0:	813b      	strh	r3, [r7, #8]
 80078b2:	4613      	mov	r3, r2
 80078b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	681a      	ldr	r2, [r3, #0]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80078d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80078d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	6a3b      	ldr	r3, [r7, #32]
 80078dc:	2200      	movs	r2, #0
 80078de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80078e2:	68f8      	ldr	r0, [r7, #12]
 80078e4:	f000 f8c2 	bl	8007a6c <I2C_WaitOnFlagUntilTimeout>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d00d      	beq.n	800790a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078fc:	d103      	bne.n	8007906 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007904:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	e0aa      	b.n	8007a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800790a:	897b      	ldrh	r3, [r7, #10]
 800790c:	b2db      	uxtb	r3, r3
 800790e:	461a      	mov	r2, r3
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007918:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791c:	6a3a      	ldr	r2, [r7, #32]
 800791e:	4952      	ldr	r1, [pc, #328]	; (8007a68 <I2C_RequestMemoryRead+0x1cc>)
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f000 f8fa 	bl	8007b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d001      	beq.n	8007930 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e097      	b.n	8007a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007930:	2300      	movs	r3, #0
 8007932:	617b      	str	r3, [r7, #20]
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	695b      	ldr	r3, [r3, #20]
 800793a:	617b      	str	r3, [r7, #20]
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	699b      	ldr	r3, [r3, #24]
 8007942:	617b      	str	r3, [r7, #20]
 8007944:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007948:	6a39      	ldr	r1, [r7, #32]
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f000 f964 	bl	8007c18 <I2C_WaitOnTXEFlagUntilTimeout>
 8007950:	4603      	mov	r3, r0
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00d      	beq.n	8007972 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800795a:	2b04      	cmp	r3, #4
 800795c:	d107      	bne.n	800796e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800796c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e076      	b.n	8007a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007972:	88fb      	ldrh	r3, [r7, #6]
 8007974:	2b01      	cmp	r3, #1
 8007976:	d105      	bne.n	8007984 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007978:	893b      	ldrh	r3, [r7, #8]
 800797a:	b2da      	uxtb	r2, r3
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	611a      	str	r2, [r3, #16]
 8007982:	e021      	b.n	80079c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007984:	893b      	ldrh	r3, [r7, #8]
 8007986:	0a1b      	lsrs	r3, r3, #8
 8007988:	b29b      	uxth	r3, r3
 800798a:	b2da      	uxtb	r2, r3
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007994:	6a39      	ldr	r1, [r7, #32]
 8007996:	68f8      	ldr	r0, [r7, #12]
 8007998:	f000 f93e 	bl	8007c18 <I2C_WaitOnTXEFlagUntilTimeout>
 800799c:	4603      	mov	r3, r0
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00d      	beq.n	80079be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079a6:	2b04      	cmp	r3, #4
 80079a8:	d107      	bne.n	80079ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80079ba:	2301      	movs	r3, #1
 80079bc:	e050      	b.n	8007a60 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80079be:	893b      	ldrh	r3, [r7, #8]
 80079c0:	b2da      	uxtb	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80079c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80079ca:	6a39      	ldr	r1, [r7, #32]
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	f000 f923 	bl	8007c18 <I2C_WaitOnTXEFlagUntilTimeout>
 80079d2:	4603      	mov	r3, r0
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00d      	beq.n	80079f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079dc:	2b04      	cmp	r3, #4
 80079de:	d107      	bne.n	80079f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681a      	ldr	r2, [r3, #0]
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80079f0:	2301      	movs	r3, #1
 80079f2:	e035      	b.n	8007a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a02:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a06:	9300      	str	r3, [sp, #0]
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f000 f82b 	bl	8007a6c <I2C_WaitOnFlagUntilTimeout>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00d      	beq.n	8007a38 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a2a:	d103      	bne.n	8007a34 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007a32:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007a34:	2303      	movs	r3, #3
 8007a36:	e013      	b.n	8007a60 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007a38:	897b      	ldrh	r3, [r7, #10]
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	f043 0301 	orr.w	r3, r3, #1
 8007a40:	b2da      	uxtb	r2, r3
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a4a:	6a3a      	ldr	r2, [r7, #32]
 8007a4c:	4906      	ldr	r1, [pc, #24]	; (8007a68 <I2C_RequestMemoryRead+0x1cc>)
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f000 f863 	bl	8007b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e000      	b.n	8007a60 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3718      	adds	r7, #24
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	00010002 	.word	0x00010002

08007a6c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b084      	sub	sp, #16
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	60b9      	str	r1, [r7, #8]
 8007a76:	603b      	str	r3, [r7, #0]
 8007a78:	4613      	mov	r3, r2
 8007a7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a7c:	e025      	b.n	8007aca <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007a84:	d021      	beq.n	8007aca <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a86:	f7fe f861 	bl	8005b4c <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	683a      	ldr	r2, [r7, #0]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d302      	bcc.n	8007a9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d116      	bne.n	8007aca <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2220      	movs	r2, #32
 8007aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab6:	f043 0220 	orr.w	r2, r3, #32
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e023      	b.n	8007b12 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	0c1b      	lsrs	r3, r3, #16
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d10d      	bne.n	8007af0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	695b      	ldr	r3, [r3, #20]
 8007ada:	43da      	mvns	r2, r3
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	4013      	ands	r3, r2
 8007ae0:	b29b      	uxth	r3, r3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	bf0c      	ite	eq
 8007ae6:	2301      	moveq	r3, #1
 8007ae8:	2300      	movne	r3, #0
 8007aea:	b2db      	uxtb	r3, r3
 8007aec:	461a      	mov	r2, r3
 8007aee:	e00c      	b.n	8007b0a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	43da      	mvns	r2, r3
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	4013      	ands	r3, r2
 8007afc:	b29b      	uxth	r3, r3
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	bf0c      	ite	eq
 8007b02:	2301      	moveq	r3, #1
 8007b04:	2300      	movne	r3, #0
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	461a      	mov	r2, r3
 8007b0a:	79fb      	ldrb	r3, [r7, #7]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d0b6      	beq.n	8007a7e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b084      	sub	sp, #16
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	60f8      	str	r0, [r7, #12]
 8007b22:	60b9      	str	r1, [r7, #8]
 8007b24:	607a      	str	r2, [r7, #4]
 8007b26:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007b28:	e051      	b.n	8007bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	695b      	ldr	r3, [r3, #20]
 8007b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007b38:	d123      	bne.n	8007b82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	681a      	ldr	r2, [r3, #0]
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b48:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007b52:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2220      	movs	r2, #32
 8007b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b6e:	f043 0204 	orr.w	r2, r3, #4
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e046      	b.n	8007c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b88:	d021      	beq.n	8007bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b8a:	f7fd ffdf 	bl	8005b4c <HAL_GetTick>
 8007b8e:	4602      	mov	r2, r0
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	1ad3      	subs	r3, r2, r3
 8007b94:	687a      	ldr	r2, [r7, #4]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d302      	bcc.n	8007ba0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d116      	bne.n	8007bce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2220      	movs	r2, #32
 8007baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bba:	f043 0220 	orr.w	r2, r3, #32
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	e020      	b.n	8007c10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	0c1b      	lsrs	r3, r3, #16
 8007bd2:	b2db      	uxtb	r3, r3
 8007bd4:	2b01      	cmp	r3, #1
 8007bd6:	d10c      	bne.n	8007bf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	695b      	ldr	r3, [r3, #20]
 8007bde:	43da      	mvns	r2, r3
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	4013      	ands	r3, r2
 8007be4:	b29b      	uxth	r3, r3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	bf14      	ite	ne
 8007bea:	2301      	movne	r3, #1
 8007bec:	2300      	moveq	r3, #0
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	e00b      	b.n	8007c0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	699b      	ldr	r3, [r3, #24]
 8007bf8:	43da      	mvns	r2, r3
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	bf14      	ite	ne
 8007c04:	2301      	movne	r3, #1
 8007c06:	2300      	moveq	r3, #0
 8007c08:	b2db      	uxtb	r3, r3
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d18d      	bne.n	8007b2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8007c0e:	2300      	movs	r3, #0
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3710      	adds	r7, #16
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}

08007c18 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b084      	sub	sp, #16
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	60f8      	str	r0, [r7, #12]
 8007c20:	60b9      	str	r1, [r7, #8]
 8007c22:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c24:	e02d      	b.n	8007c82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f000 f8ce 	bl	8007dc8 <I2C_IsAcknowledgeFailed>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d001      	beq.n	8007c36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007c32:	2301      	movs	r3, #1
 8007c34:	e02d      	b.n	8007c92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c3c:	d021      	beq.n	8007c82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c3e:	f7fd ff85 	bl	8005b4c <HAL_GetTick>
 8007c42:	4602      	mov	r2, r0
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	68ba      	ldr	r2, [r7, #8]
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d302      	bcc.n	8007c54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d116      	bne.n	8007c82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	2220      	movs	r2, #32
 8007c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c6e:	f043 0220 	orr.w	r2, r3, #32
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007c7e:	2301      	movs	r3, #1
 8007c80:	e007      	b.n	8007c92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	695b      	ldr	r3, [r3, #20]
 8007c88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c8c:	2b80      	cmp	r3, #128	; 0x80
 8007c8e:	d1ca      	bne.n	8007c26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	3710      	adds	r7, #16
 8007c96:	46bd      	mov	sp, r7
 8007c98:	bd80      	pop	{r7, pc}

08007c9a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c9a:	b580      	push	{r7, lr}
 8007c9c:	b084      	sub	sp, #16
 8007c9e:	af00      	add	r7, sp, #0
 8007ca0:	60f8      	str	r0, [r7, #12]
 8007ca2:	60b9      	str	r1, [r7, #8]
 8007ca4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007ca6:	e02d      	b.n	8007d04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007ca8:	68f8      	ldr	r0, [r7, #12]
 8007caa:	f000 f88d 	bl	8007dc8 <I2C_IsAcknowledgeFailed>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d001      	beq.n	8007cb8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e02d      	b.n	8007d14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cb8:	68bb      	ldr	r3, [r7, #8]
 8007cba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cbe:	d021      	beq.n	8007d04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cc0:	f7fd ff44 	bl	8005b4c <HAL_GetTick>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	1ad3      	subs	r3, r2, r3
 8007cca:	68ba      	ldr	r2, [r7, #8]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d302      	bcc.n	8007cd6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d116      	bne.n	8007d04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	2220      	movs	r2, #32
 8007ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf0:	f043 0220 	orr.w	r2, r3, #32
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	e007      	b.n	8007d14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	f003 0304 	and.w	r3, r3, #4
 8007d0e:	2b04      	cmp	r3, #4
 8007d10:	d1ca      	bne.n	8007ca8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007d12:	2300      	movs	r3, #0
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}

08007d1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	60f8      	str	r0, [r7, #12]
 8007d24:	60b9      	str	r1, [r7, #8]
 8007d26:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007d28:	e042      	b.n	8007db0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	695b      	ldr	r3, [r3, #20]
 8007d30:	f003 0310 	and.w	r3, r3, #16
 8007d34:	2b10      	cmp	r3, #16
 8007d36:	d119      	bne.n	8007d6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f06f 0210 	mvn.w	r2, #16
 8007d40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2200      	movs	r2, #0
 8007d46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2220      	movs	r2, #32
 8007d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	2200      	movs	r2, #0
 8007d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	2200      	movs	r2, #0
 8007d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007d68:	2301      	movs	r3, #1
 8007d6a:	e029      	b.n	8007dc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d6c:	f7fd feee 	bl	8005b4c <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d302      	bcc.n	8007d82 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d116      	bne.n	8007db0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	2200      	movs	r2, #0
 8007d86:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	2220      	movs	r2, #32
 8007d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d9c:	f043 0220 	orr.w	r2, r3, #32
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2200      	movs	r2, #0
 8007da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e007      	b.n	8007dc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	695b      	ldr	r3, [r3, #20]
 8007db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dba:	2b40      	cmp	r3, #64	; 0x40
 8007dbc:	d1b5      	bne.n	8007d2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007dbe:	2300      	movs	r3, #0
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	3710      	adds	r7, #16
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bd80      	pop	{r7, pc}

08007dc8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b083      	sub	sp, #12
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007dde:	d11b      	bne.n	8007e18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007de8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2220      	movs	r2, #32
 8007df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e04:	f043 0204 	orr.w	r2, r3, #4
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e000      	b.n	8007e1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	370c      	adds	r7, #12
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e24:	4770      	bx	lr

08007e26 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007e26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e28:	b08f      	sub	sp, #60	; 0x3c
 8007e2a:	af0a      	add	r7, sp, #40	; 0x28
 8007e2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d101      	bne.n	8007e38 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007e34:	2301      	movs	r3, #1
 8007e36:	e10f      	b.n	8008058 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8007e44:	b2db      	uxtb	r3, r3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d106      	bne.n	8007e58 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f00e fcb4 	bl	80167c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2203      	movs	r2, #3
 8007e5c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8007e60:	68bb      	ldr	r3, [r7, #8]
 8007e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d102      	bne.n	8007e72 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4618      	mov	r0, r3
 8007e78:	f004 f84f 	bl	800bf1a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	603b      	str	r3, [r7, #0]
 8007e82:	687e      	ldr	r6, [r7, #4]
 8007e84:	466d      	mov	r5, sp
 8007e86:	f106 0410 	add.w	r4, r6, #16
 8007e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007e8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007e90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007e92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8007e96:	e885 0003 	stmia.w	r5, {r0, r1}
 8007e9a:	1d33      	adds	r3, r6, #4
 8007e9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007e9e:	6838      	ldr	r0, [r7, #0]
 8007ea0:	f003 ff26 	bl	800bcf0 <USB_CoreInit>
 8007ea4:	4603      	mov	r3, r0
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d005      	beq.n	8007eb6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2202      	movs	r2, #2
 8007eae:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	e0d0      	b.n	8008058 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2100      	movs	r1, #0
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f004 f83d 	bl	800bf3c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	73fb      	strb	r3, [r7, #15]
 8007ec6:	e04a      	b.n	8007f5e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8007ec8:	7bfa      	ldrb	r2, [r7, #15]
 8007eca:	6879      	ldr	r1, [r7, #4]
 8007ecc:	4613      	mov	r3, r2
 8007ece:	00db      	lsls	r3, r3, #3
 8007ed0:	1a9b      	subs	r3, r3, r2
 8007ed2:	009b      	lsls	r3, r3, #2
 8007ed4:	440b      	add	r3, r1
 8007ed6:	333d      	adds	r3, #61	; 0x3d
 8007ed8:	2201      	movs	r2, #1
 8007eda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8007edc:	7bfa      	ldrb	r2, [r7, #15]
 8007ede:	6879      	ldr	r1, [r7, #4]
 8007ee0:	4613      	mov	r3, r2
 8007ee2:	00db      	lsls	r3, r3, #3
 8007ee4:	1a9b      	subs	r3, r3, r2
 8007ee6:	009b      	lsls	r3, r3, #2
 8007ee8:	440b      	add	r3, r1
 8007eea:	333c      	adds	r3, #60	; 0x3c
 8007eec:	7bfa      	ldrb	r2, [r7, #15]
 8007eee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8007ef0:	7bfa      	ldrb	r2, [r7, #15]
 8007ef2:	7bfb      	ldrb	r3, [r7, #15]
 8007ef4:	b298      	uxth	r0, r3
 8007ef6:	6879      	ldr	r1, [r7, #4]
 8007ef8:	4613      	mov	r3, r2
 8007efa:	00db      	lsls	r3, r3, #3
 8007efc:	1a9b      	subs	r3, r3, r2
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	440b      	add	r3, r1
 8007f02:	3342      	adds	r3, #66	; 0x42
 8007f04:	4602      	mov	r2, r0
 8007f06:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007f08:	7bfa      	ldrb	r2, [r7, #15]
 8007f0a:	6879      	ldr	r1, [r7, #4]
 8007f0c:	4613      	mov	r3, r2
 8007f0e:	00db      	lsls	r3, r3, #3
 8007f10:	1a9b      	subs	r3, r3, r2
 8007f12:	009b      	lsls	r3, r3, #2
 8007f14:	440b      	add	r3, r1
 8007f16:	333f      	adds	r3, #63	; 0x3f
 8007f18:	2200      	movs	r2, #0
 8007f1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8007f1c:	7bfa      	ldrb	r2, [r7, #15]
 8007f1e:	6879      	ldr	r1, [r7, #4]
 8007f20:	4613      	mov	r3, r2
 8007f22:	00db      	lsls	r3, r3, #3
 8007f24:	1a9b      	subs	r3, r3, r2
 8007f26:	009b      	lsls	r3, r3, #2
 8007f28:	440b      	add	r3, r1
 8007f2a:	3344      	adds	r3, #68	; 0x44
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8007f30:	7bfa      	ldrb	r2, [r7, #15]
 8007f32:	6879      	ldr	r1, [r7, #4]
 8007f34:	4613      	mov	r3, r2
 8007f36:	00db      	lsls	r3, r3, #3
 8007f38:	1a9b      	subs	r3, r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	440b      	add	r3, r1
 8007f3e:	3348      	adds	r3, #72	; 0x48
 8007f40:	2200      	movs	r2, #0
 8007f42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007f44:	7bfa      	ldrb	r2, [r7, #15]
 8007f46:	6879      	ldr	r1, [r7, #4]
 8007f48:	4613      	mov	r3, r2
 8007f4a:	00db      	lsls	r3, r3, #3
 8007f4c:	1a9b      	subs	r3, r3, r2
 8007f4e:	009b      	lsls	r3, r3, #2
 8007f50:	440b      	add	r3, r1
 8007f52:	3350      	adds	r3, #80	; 0x50
 8007f54:	2200      	movs	r2, #0
 8007f56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	73fb      	strb	r3, [r7, #15]
 8007f5e:	7bfa      	ldrb	r2, [r7, #15]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d3af      	bcc.n	8007ec8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007f68:	2300      	movs	r3, #0
 8007f6a:	73fb      	strb	r3, [r7, #15]
 8007f6c:	e044      	b.n	8007ff8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8007f6e:	7bfa      	ldrb	r2, [r7, #15]
 8007f70:	6879      	ldr	r1, [r7, #4]
 8007f72:	4613      	mov	r3, r2
 8007f74:	00db      	lsls	r3, r3, #3
 8007f76:	1a9b      	subs	r3, r3, r2
 8007f78:	009b      	lsls	r3, r3, #2
 8007f7a:	440b      	add	r3, r1
 8007f7c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8007f80:	2200      	movs	r2, #0
 8007f82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8007f84:	7bfa      	ldrb	r2, [r7, #15]
 8007f86:	6879      	ldr	r1, [r7, #4]
 8007f88:	4613      	mov	r3, r2
 8007f8a:	00db      	lsls	r3, r3, #3
 8007f8c:	1a9b      	subs	r3, r3, r2
 8007f8e:	009b      	lsls	r3, r3, #2
 8007f90:	440b      	add	r3, r1
 8007f92:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8007f96:	7bfa      	ldrb	r2, [r7, #15]
 8007f98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8007f9a:	7bfa      	ldrb	r2, [r7, #15]
 8007f9c:	6879      	ldr	r1, [r7, #4]
 8007f9e:	4613      	mov	r3, r2
 8007fa0:	00db      	lsls	r3, r3, #3
 8007fa2:	1a9b      	subs	r3, r3, r2
 8007fa4:	009b      	lsls	r3, r3, #2
 8007fa6:	440b      	add	r3, r1
 8007fa8:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8007fac:	2200      	movs	r2, #0
 8007fae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8007fb0:	7bfa      	ldrb	r2, [r7, #15]
 8007fb2:	6879      	ldr	r1, [r7, #4]
 8007fb4:	4613      	mov	r3, r2
 8007fb6:	00db      	lsls	r3, r3, #3
 8007fb8:	1a9b      	subs	r3, r3, r2
 8007fba:	009b      	lsls	r3, r3, #2
 8007fbc:	440b      	add	r3, r1
 8007fbe:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8007fc6:	7bfa      	ldrb	r2, [r7, #15]
 8007fc8:	6879      	ldr	r1, [r7, #4]
 8007fca:	4613      	mov	r3, r2
 8007fcc:	00db      	lsls	r3, r3, #3
 8007fce:	1a9b      	subs	r3, r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	440b      	add	r3, r1
 8007fd4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007fd8:	2200      	movs	r2, #0
 8007fda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8007fdc:	7bfa      	ldrb	r2, [r7, #15]
 8007fde:	6879      	ldr	r1, [r7, #4]
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	00db      	lsls	r3, r3, #3
 8007fe4:	1a9b      	subs	r3, r3, r2
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	440b      	add	r3, r1
 8007fea:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007fee:	2200      	movs	r2, #0
 8007ff0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007ff2:	7bfb      	ldrb	r3, [r7, #15]
 8007ff4:	3301      	adds	r3, #1
 8007ff6:	73fb      	strb	r3, [r7, #15]
 8007ff8:	7bfa      	ldrb	r2, [r7, #15]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	685b      	ldr	r3, [r3, #4]
 8007ffe:	429a      	cmp	r2, r3
 8008000:	d3b5      	bcc.n	8007f6e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	603b      	str	r3, [r7, #0]
 8008008:	687e      	ldr	r6, [r7, #4]
 800800a:	466d      	mov	r5, sp
 800800c:	f106 0410 	add.w	r4, r6, #16
 8008010:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008012:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008016:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008018:	e894 0003 	ldmia.w	r4, {r0, r1}
 800801c:	e885 0003 	stmia.w	r5, {r0, r1}
 8008020:	1d33      	adds	r3, r6, #4
 8008022:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008024:	6838      	ldr	r0, [r7, #0]
 8008026:	f003 ffd5 	bl	800bfd4 <USB_DevInit>
 800802a:	4603      	mov	r3, r0
 800802c:	2b00      	cmp	r3, #0
 800802e:	d005      	beq.n	800803c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2202      	movs	r2, #2
 8008034:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008038:	2301      	movs	r3, #1
 800803a:	e00d      	b.n	8008058 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	4618      	mov	r0, r3
 8008052:	f005 f851 	bl	800d0f8 <USB_DevDisconnect>

  return HAL_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3714      	adds	r7, #20
 800805c:	46bd      	mov	sp, r7
 800805e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008060 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b084      	sub	sp, #16
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008074:	2b01      	cmp	r3, #1
 8008076:	d101      	bne.n	800807c <HAL_PCD_Start+0x1c>
 8008078:	2302      	movs	r3, #2
 800807a:	e020      	b.n	80080be <HAL_PCD_Start+0x5e>
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008088:	2b01      	cmp	r3, #1
 800808a:	d109      	bne.n	80080a0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008090:	2b01      	cmp	r3, #1
 8008092:	d005      	beq.n	80080a0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008098:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4618      	mov	r0, r3
 80080a6:	f003 ff27 	bl	800bef8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4618      	mov	r0, r3
 80080b0:	f005 f801 	bl	800d0b6 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80080c6:	b590      	push	{r4, r7, lr}
 80080c8:	b08d      	sub	sp, #52	; 0x34
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080d4:	6a3b      	ldr	r3, [r7, #32]
 80080d6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4618      	mov	r0, r3
 80080de:	f005 f8bf 	bl	800d260 <USB_GetMode>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	f040 839d 	bne.w	8008824 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	4618      	mov	r0, r3
 80080f0:	f005 f823 	bl	800d13a <USB_ReadInterrupts>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f000 8393 	beq.w	8008822 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4618      	mov	r0, r3
 8008102:	f005 f81a 	bl	800d13a <USB_ReadInterrupts>
 8008106:	4603      	mov	r3, r0
 8008108:	f003 0302 	and.w	r3, r3, #2
 800810c:	2b02      	cmp	r3, #2
 800810e:	d107      	bne.n	8008120 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	695a      	ldr	r2, [r3, #20]
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f002 0202 	and.w	r2, r2, #2
 800811e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4618      	mov	r0, r3
 8008126:	f005 f808 	bl	800d13a <USB_ReadInterrupts>
 800812a:	4603      	mov	r3, r0
 800812c:	f003 0310 	and.w	r3, r3, #16
 8008130:	2b10      	cmp	r3, #16
 8008132:	d161      	bne.n	80081f8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	699a      	ldr	r2, [r3, #24]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f022 0210 	bic.w	r2, r2, #16
 8008142:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008144:	6a3b      	ldr	r3, [r7, #32]
 8008146:	6a1b      	ldr	r3, [r3, #32]
 8008148:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800814a:	69bb      	ldr	r3, [r7, #24]
 800814c:	f003 020f 	and.w	r2, r3, #15
 8008150:	4613      	mov	r3, r2
 8008152:	00db      	lsls	r3, r3, #3
 8008154:	1a9b      	subs	r3, r3, r2
 8008156:	009b      	lsls	r3, r3, #2
 8008158:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800815c:	687a      	ldr	r2, [r7, #4]
 800815e:	4413      	add	r3, r2
 8008160:	3304      	adds	r3, #4
 8008162:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	0c5b      	lsrs	r3, r3, #17
 8008168:	f003 030f 	and.w	r3, r3, #15
 800816c:	2b02      	cmp	r3, #2
 800816e:	d124      	bne.n	80081ba <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008170:	69ba      	ldr	r2, [r7, #24]
 8008172:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008176:	4013      	ands	r3, r2
 8008178:	2b00      	cmp	r3, #0
 800817a:	d035      	beq.n	80081e8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008180:	69bb      	ldr	r3, [r7, #24]
 8008182:	091b      	lsrs	r3, r3, #4
 8008184:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008186:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800818a:	b29b      	uxth	r3, r3
 800818c:	461a      	mov	r2, r3
 800818e:	6a38      	ldr	r0, [r7, #32]
 8008190:	f004 fe3f 	bl	800ce12 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	68da      	ldr	r2, [r3, #12]
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	091b      	lsrs	r3, r3, #4
 800819c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80081a0:	441a      	add	r2, r3
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	699a      	ldr	r2, [r3, #24]
 80081aa:	69bb      	ldr	r3, [r7, #24]
 80081ac:	091b      	lsrs	r3, r3, #4
 80081ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80081b2:	441a      	add	r2, r3
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	619a      	str	r2, [r3, #24]
 80081b8:	e016      	b.n	80081e8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80081ba:	69bb      	ldr	r3, [r7, #24]
 80081bc:	0c5b      	lsrs	r3, r3, #17
 80081be:	f003 030f 	and.w	r3, r3, #15
 80081c2:	2b06      	cmp	r3, #6
 80081c4:	d110      	bne.n	80081e8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80081cc:	2208      	movs	r2, #8
 80081ce:	4619      	mov	r1, r3
 80081d0:	6a38      	ldr	r0, [r7, #32]
 80081d2:	f004 fe1e 	bl	800ce12 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	699a      	ldr	r2, [r3, #24]
 80081da:	69bb      	ldr	r3, [r7, #24]
 80081dc:	091b      	lsrs	r3, r3, #4
 80081de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80081e2:	441a      	add	r2, r3
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	699a      	ldr	r2, [r3, #24]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f042 0210 	orr.w	r2, r2, #16
 80081f6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4618      	mov	r0, r3
 80081fe:	f004 ff9c 	bl	800d13a <USB_ReadInterrupts>
 8008202:	4603      	mov	r3, r0
 8008204:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008208:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800820c:	d16e      	bne.n	80082ec <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800820e:	2300      	movs	r3, #0
 8008210:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4618      	mov	r0, r3
 8008218:	f004 ffa2 	bl	800d160 <USB_ReadDevAllOutEpInterrupt>
 800821c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800821e:	e062      	b.n	80082e6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	2b00      	cmp	r3, #0
 8008228:	d057      	beq.n	80082da <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008230:	b2d2      	uxtb	r2, r2
 8008232:	4611      	mov	r1, r2
 8008234:	4618      	mov	r0, r3
 8008236:	f004 ffc7 	bl	800d1c8 <USB_ReadDevOutEPInterrupt>
 800823a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	f003 0301 	and.w	r3, r3, #1
 8008242:	2b00      	cmp	r3, #0
 8008244:	d00c      	beq.n	8008260 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008248:	015a      	lsls	r2, r3, #5
 800824a:	69fb      	ldr	r3, [r7, #28]
 800824c:	4413      	add	r3, r2
 800824e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008252:	461a      	mov	r2, r3
 8008254:	2301      	movs	r3, #1
 8008256:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008258:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 fdb0 	bl	8008dc0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008260:	693b      	ldr	r3, [r7, #16]
 8008262:	f003 0308 	and.w	r3, r3, #8
 8008266:	2b00      	cmp	r3, #0
 8008268:	d00c      	beq.n	8008284 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800826a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800826c:	015a      	lsls	r2, r3, #5
 800826e:	69fb      	ldr	r3, [r7, #28]
 8008270:	4413      	add	r3, r2
 8008272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008276:	461a      	mov	r2, r3
 8008278:	2308      	movs	r3, #8
 800827a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800827c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800827e:	6878      	ldr	r0, [r7, #4]
 8008280:	f000 feaa 	bl	8008fd8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	f003 0310 	and.w	r3, r3, #16
 800828a:	2b00      	cmp	r3, #0
 800828c:	d008      	beq.n	80082a0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800828e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008290:	015a      	lsls	r2, r3, #5
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	4413      	add	r3, r2
 8008296:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800829a:	461a      	mov	r2, r3
 800829c:	2310      	movs	r3, #16
 800829e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80082a0:	693b      	ldr	r3, [r7, #16]
 80082a2:	f003 0320 	and.w	r3, r3, #32
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d008      	beq.n	80082bc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80082aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ac:	015a      	lsls	r2, r3, #5
 80082ae:	69fb      	ldr	r3, [r7, #28]
 80082b0:	4413      	add	r3, r2
 80082b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082b6:	461a      	mov	r2, r3
 80082b8:	2320      	movs	r3, #32
 80082ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80082bc:	693b      	ldr	r3, [r7, #16]
 80082be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d009      	beq.n	80082da <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80082c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c8:	015a      	lsls	r2, r3, #5
 80082ca:	69fb      	ldr	r3, [r7, #28]
 80082cc:	4413      	add	r3, r2
 80082ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d2:	461a      	mov	r2, r3
 80082d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80082d8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80082da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082dc:	3301      	adds	r3, #1
 80082de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80082e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e2:	085b      	lsrs	r3, r3, #1
 80082e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80082e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d199      	bne.n	8008220 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4618      	mov	r0, r3
 80082f2:	f004 ff22 	bl	800d13a <USB_ReadInterrupts>
 80082f6:	4603      	mov	r3, r0
 80082f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80082fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008300:	f040 80c0 	bne.w	8008484 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4618      	mov	r0, r3
 800830a:	f004 ff43 	bl	800d194 <USB_ReadDevAllInEpInterrupt>
 800830e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008310:	2300      	movs	r3, #0
 8008312:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008314:	e0b2      	b.n	800847c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008318:	f003 0301 	and.w	r3, r3, #1
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 80a7 	beq.w	8008470 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008328:	b2d2      	uxtb	r2, r2
 800832a:	4611      	mov	r1, r2
 800832c:	4618      	mov	r0, r3
 800832e:	f004 ff69 	bl	800d204 <USB_ReadDevInEPInterrupt>
 8008332:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	f003 0301 	and.w	r3, r3, #1
 800833a:	2b00      	cmp	r3, #0
 800833c:	d057      	beq.n	80083ee <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800833e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008340:	f003 030f 	and.w	r3, r3, #15
 8008344:	2201      	movs	r2, #1
 8008346:	fa02 f303 	lsl.w	r3, r2, r3
 800834a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	43db      	mvns	r3, r3
 8008358:	69f9      	ldr	r1, [r7, #28]
 800835a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800835e:	4013      	ands	r3, r2
 8008360:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008364:	015a      	lsls	r2, r3, #5
 8008366:	69fb      	ldr	r3, [r7, #28]
 8008368:	4413      	add	r3, r2
 800836a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800836e:	461a      	mov	r2, r3
 8008370:	2301      	movs	r3, #1
 8008372:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	691b      	ldr	r3, [r3, #16]
 8008378:	2b01      	cmp	r3, #1
 800837a:	d132      	bne.n	80083e2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800837c:	6879      	ldr	r1, [r7, #4]
 800837e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008380:	4613      	mov	r3, r2
 8008382:	00db      	lsls	r3, r3, #3
 8008384:	1a9b      	subs	r3, r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	440b      	add	r3, r1
 800838a:	3348      	adds	r3, #72	; 0x48
 800838c:	6819      	ldr	r1, [r3, #0]
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008392:	4613      	mov	r3, r2
 8008394:	00db      	lsls	r3, r3, #3
 8008396:	1a9b      	subs	r3, r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	4403      	add	r3, r0
 800839c:	3344      	adds	r3, #68	; 0x44
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4419      	add	r1, r3
 80083a2:	6878      	ldr	r0, [r7, #4]
 80083a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083a6:	4613      	mov	r3, r2
 80083a8:	00db      	lsls	r3, r3, #3
 80083aa:	1a9b      	subs	r3, r3, r2
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	4403      	add	r3, r0
 80083b0:	3348      	adds	r3, #72	; 0x48
 80083b2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d113      	bne.n	80083e2 <HAL_PCD_IRQHandler+0x31c>
 80083ba:	6879      	ldr	r1, [r7, #4]
 80083bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80083be:	4613      	mov	r3, r2
 80083c0:	00db      	lsls	r3, r3, #3
 80083c2:	1a9b      	subs	r3, r3, r2
 80083c4:	009b      	lsls	r3, r3, #2
 80083c6:	440b      	add	r3, r1
 80083c8:	3350      	adds	r3, #80	; 0x50
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d108      	bne.n	80083e2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	6818      	ldr	r0, [r3, #0]
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80083da:	461a      	mov	r2, r3
 80083dc:	2101      	movs	r1, #1
 80083de:	f004 ff71 	bl	800d2c4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80083e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	4619      	mov	r1, r3
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f00e fa78 	bl	80168de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80083ee:	693b      	ldr	r3, [r7, #16]
 80083f0:	f003 0308 	and.w	r3, r3, #8
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d008      	beq.n	800840a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80083f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fa:	015a      	lsls	r2, r3, #5
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	4413      	add	r3, r2
 8008400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008404:	461a      	mov	r2, r3
 8008406:	2308      	movs	r3, #8
 8008408:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	f003 0310 	and.w	r3, r3, #16
 8008410:	2b00      	cmp	r3, #0
 8008412:	d008      	beq.n	8008426 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008416:	015a      	lsls	r2, r3, #5
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	4413      	add	r3, r2
 800841c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008420:	461a      	mov	r2, r3
 8008422:	2310      	movs	r3, #16
 8008424:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800842c:	2b00      	cmp	r3, #0
 800842e:	d008      	beq.n	8008442 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008432:	015a      	lsls	r2, r3, #5
 8008434:	69fb      	ldr	r3, [r7, #28]
 8008436:	4413      	add	r3, r2
 8008438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800843c:	461a      	mov	r2, r3
 800843e:	2340      	movs	r3, #64	; 0x40
 8008440:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	f003 0302 	and.w	r3, r3, #2
 8008448:	2b00      	cmp	r3, #0
 800844a:	d008      	beq.n	800845e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800844c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800844e:	015a      	lsls	r2, r3, #5
 8008450:	69fb      	ldr	r3, [r7, #28]
 8008452:	4413      	add	r3, r2
 8008454:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008458:	461a      	mov	r2, r3
 800845a:	2302      	movs	r3, #2
 800845c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008464:	2b00      	cmp	r3, #0
 8008466:	d003      	beq.n	8008470 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008468:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 fc1b 	bl	8008ca6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008472:	3301      	adds	r3, #1
 8008474:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008478:	085b      	lsrs	r3, r3, #1
 800847a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800847c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847e:	2b00      	cmp	r3, #0
 8008480:	f47f af49 	bne.w	8008316 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4618      	mov	r0, r3
 800848a:	f004 fe56 	bl	800d13a <USB_ReadInterrupts>
 800848e:	4603      	mov	r3, r0
 8008490:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008494:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008498:	d122      	bne.n	80084e0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800849a:	69fb      	ldr	r3, [r7, #28]
 800849c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	69fa      	ldr	r2, [r7, #28]
 80084a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084a8:	f023 0301 	bic.w	r3, r3, #1
 80084ac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d108      	bne.n	80084ca <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	2200      	movs	r2, #0
 80084bc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80084c0:	2100      	movs	r1, #0
 80084c2:	6878      	ldr	r0, [r7, #4]
 80084c4:	f000 fe26 	bl	8009114 <HAL_PCDEx_LPM_Callback>
 80084c8:	e002      	b.n	80084d0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f00e fa7e 	bl	80169cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	695a      	ldr	r2, [r3, #20]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80084de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4618      	mov	r0, r3
 80084e6:	f004 fe28 	bl	800d13a <USB_ReadInterrupts>
 80084ea:	4603      	mov	r3, r0
 80084ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80084f4:	d112      	bne.n	800851c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	f003 0301 	and.w	r3, r3, #1
 8008502:	2b01      	cmp	r3, #1
 8008504:	d102      	bne.n	800850c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f00e fa3a 	bl	8016980 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	695a      	ldr	r2, [r3, #20]
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800851a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4618      	mov	r0, r3
 8008522:	f004 fe0a 	bl	800d13a <USB_ReadInterrupts>
 8008526:	4603      	mov	r3, r0
 8008528:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800852c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008530:	f040 80c7 	bne.w	80086c2 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008534:	69fb      	ldr	r3, [r7, #28]
 8008536:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800853a:	685b      	ldr	r3, [r3, #4]
 800853c:	69fa      	ldr	r2, [r7, #28]
 800853e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008542:	f023 0301 	bic.w	r3, r3, #1
 8008546:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	2110      	movs	r1, #16
 800854e:	4618      	mov	r0, r3
 8008550:	f003 fea4 	bl	800c29c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008554:	2300      	movs	r3, #0
 8008556:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008558:	e056      	b.n	8008608 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800855a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855c:	015a      	lsls	r2, r3, #5
 800855e:	69fb      	ldr	r3, [r7, #28]
 8008560:	4413      	add	r3, r2
 8008562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008566:	461a      	mov	r2, r3
 8008568:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800856c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800856e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008570:	015a      	lsls	r2, r3, #5
 8008572:	69fb      	ldr	r3, [r7, #28]
 8008574:	4413      	add	r3, r2
 8008576:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800857e:	0151      	lsls	r1, r2, #5
 8008580:	69fa      	ldr	r2, [r7, #28]
 8008582:	440a      	add	r2, r1
 8008584:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008588:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800858c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800858e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008590:	015a      	lsls	r2, r3, #5
 8008592:	69fb      	ldr	r3, [r7, #28]
 8008594:	4413      	add	r3, r2
 8008596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800859e:	0151      	lsls	r1, r2, #5
 80085a0:	69fa      	ldr	r2, [r7, #28]
 80085a2:	440a      	add	r2, r1
 80085a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80085a8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80085ac:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80085ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085b0:	015a      	lsls	r2, r3, #5
 80085b2:	69fb      	ldr	r3, [r7, #28]
 80085b4:	4413      	add	r3, r2
 80085b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ba:	461a      	mov	r2, r3
 80085bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80085c0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80085c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085c4:	015a      	lsls	r2, r3, #5
 80085c6:	69fb      	ldr	r3, [r7, #28]
 80085c8:	4413      	add	r3, r2
 80085ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085d2:	0151      	lsls	r1, r2, #5
 80085d4:	69fa      	ldr	r2, [r7, #28]
 80085d6:	440a      	add	r2, r1
 80085d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80085e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80085e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80085e4:	015a      	lsls	r2, r3, #5
 80085e6:	69fb      	ldr	r3, [r7, #28]
 80085e8:	4413      	add	r3, r2
 80085ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085f2:	0151      	lsls	r1, r2, #5
 80085f4:	69fa      	ldr	r2, [r7, #28]
 80085f6:	440a      	add	r2, r1
 80085f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085fc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008600:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008604:	3301      	adds	r3, #1
 8008606:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	685b      	ldr	r3, [r3, #4]
 800860c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800860e:	429a      	cmp	r2, r3
 8008610:	d3a3      	bcc.n	800855a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008612:	69fb      	ldr	r3, [r7, #28]
 8008614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008618:	69db      	ldr	r3, [r3, #28]
 800861a:	69fa      	ldr	r2, [r7, #28]
 800861c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008620:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008624:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800862a:	2b00      	cmp	r3, #0
 800862c:	d016      	beq.n	800865c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008638:	69fa      	ldr	r2, [r7, #28]
 800863a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800863e:	f043 030b 	orr.w	r3, r3, #11
 8008642:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800864c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800864e:	69fa      	ldr	r2, [r7, #28]
 8008650:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008654:	f043 030b 	orr.w	r3, r3, #11
 8008658:	6453      	str	r3, [r2, #68]	; 0x44
 800865a:	e015      	b.n	8008688 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008662:	695b      	ldr	r3, [r3, #20]
 8008664:	69fa      	ldr	r2, [r7, #28]
 8008666:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800866a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800866e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008672:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008674:	69fb      	ldr	r3, [r7, #28]
 8008676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800867a:	691b      	ldr	r3, [r3, #16]
 800867c:	69fa      	ldr	r2, [r7, #28]
 800867e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008682:	f043 030b 	orr.w	r3, r3, #11
 8008686:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	69fa      	ldr	r2, [r7, #28]
 8008692:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008696:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800869a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6818      	ldr	r0, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80086ac:	461a      	mov	r2, r3
 80086ae:	f004 fe09 	bl	800d2c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	695a      	ldr	r2, [r3, #20]
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80086c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4618      	mov	r0, r3
 80086c8:	f004 fd37 	bl	800d13a <USB_ReadInterrupts>
 80086cc:	4603      	mov	r3, r0
 80086ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80086d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086d6:	d124      	bne.n	8008722 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4618      	mov	r0, r3
 80086de:	f004 fdcd 	bl	800d27c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	4618      	mov	r0, r3
 80086e8:	f003 fe35 	bl	800c356 <USB_GetDevSpeed>
 80086ec:	4603      	mov	r3, r0
 80086ee:	461a      	mov	r2, r3
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681c      	ldr	r4, [r3, #0]
 80086f8:	f001 f958 	bl	80099ac <HAL_RCC_GetHCLKFreq>
 80086fc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8008702:	b2db      	uxtb	r3, r3
 8008704:	461a      	mov	r2, r3
 8008706:	4620      	mov	r0, r4
 8008708:	f003 fb54 	bl	800bdb4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f00e f90e 	bl	801692e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	695a      	ldr	r2, [r3, #20]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8008720:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4618      	mov	r0, r3
 8008728:	f004 fd07 	bl	800d13a <USB_ReadInterrupts>
 800872c:	4603      	mov	r3, r0
 800872e:	f003 0308 	and.w	r3, r3, #8
 8008732:	2b08      	cmp	r3, #8
 8008734:	d10a      	bne.n	800874c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f00e f8eb 	bl	8016912 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	695a      	ldr	r2, [r3, #20]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	f002 0208 	and.w	r2, r2, #8
 800874a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4618      	mov	r0, r3
 8008752:	f004 fcf2 	bl	800d13a <USB_ReadInterrupts>
 8008756:	4603      	mov	r3, r0
 8008758:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800875c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008760:	d10f      	bne.n	8008782 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008762:	2300      	movs	r3, #0
 8008764:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008768:	b2db      	uxtb	r3, r3
 800876a:	4619      	mov	r1, r3
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f00e f94d 	bl	8016a0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	695a      	ldr	r2, [r3, #20]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008780:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4618      	mov	r0, r3
 8008788:	f004 fcd7 	bl	800d13a <USB_ReadInterrupts>
 800878c:	4603      	mov	r3, r0
 800878e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008792:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008796:	d10f      	bne.n	80087b8 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008798:	2300      	movs	r3, #0
 800879a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800879c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	4619      	mov	r1, r3
 80087a2:	6878      	ldr	r0, [r7, #4]
 80087a4:	f00e f920 	bl	80169e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	695a      	ldr	r2, [r3, #20]
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80087b6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4618      	mov	r0, r3
 80087be:	f004 fcbc 	bl	800d13a <USB_ReadInterrupts>
 80087c2:	4603      	mov	r3, r0
 80087c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80087c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087cc:	d10a      	bne.n	80087e4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80087ce:	6878      	ldr	r0, [r7, #4]
 80087d0:	f00e f92e 	bl	8016a30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	695a      	ldr	r2, [r3, #20]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80087e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	4618      	mov	r0, r3
 80087ea:	f004 fca6 	bl	800d13a <USB_ReadInterrupts>
 80087ee:	4603      	mov	r3, r0
 80087f0:	f003 0304 	and.w	r3, r3, #4
 80087f4:	2b04      	cmp	r3, #4
 80087f6:	d115      	bne.n	8008824 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	f003 0304 	and.w	r3, r3, #4
 8008806:	2b00      	cmp	r3, #0
 8008808:	d002      	beq.n	8008810 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800880a:	6878      	ldr	r0, [r7, #4]
 800880c:	f00e f91e 	bl	8016a4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	6859      	ldr	r1, [r3, #4]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	69ba      	ldr	r2, [r7, #24]
 800881c:	430a      	orrs	r2, r1
 800881e:	605a      	str	r2, [r3, #4]
 8008820:	e000      	b.n	8008824 <HAL_PCD_IRQHandler+0x75e>
      return;
 8008822:	bf00      	nop
    }
  }
}
 8008824:	3734      	adds	r7, #52	; 0x34
 8008826:	46bd      	mov	sp, r7
 8008828:	bd90      	pop	{r4, r7, pc}

0800882a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800882a:	b580      	push	{r7, lr}
 800882c:	b082      	sub	sp, #8
 800882e:	af00      	add	r7, sp, #0
 8008830:	6078      	str	r0, [r7, #4]
 8008832:	460b      	mov	r3, r1
 8008834:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800883c:	2b01      	cmp	r3, #1
 800883e:	d101      	bne.n	8008844 <HAL_PCD_SetAddress+0x1a>
 8008840:	2302      	movs	r3, #2
 8008842:	e013      	b.n	800886c <HAL_PCD_SetAddress+0x42>
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	78fa      	ldrb	r2, [r7, #3]
 8008850:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	78fa      	ldrb	r2, [r7, #3]
 800885a:	4611      	mov	r1, r2
 800885c:	4618      	mov	r0, r3
 800885e:	f004 fc04 	bl	800d06a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	4608      	mov	r0, r1
 800887e:	4611      	mov	r1, r2
 8008880:	461a      	mov	r2, r3
 8008882:	4603      	mov	r3, r0
 8008884:	70fb      	strb	r3, [r7, #3]
 8008886:	460b      	mov	r3, r1
 8008888:	803b      	strh	r3, [r7, #0]
 800888a:	4613      	mov	r3, r2
 800888c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800888e:	2300      	movs	r3, #0
 8008890:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008892:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008896:	2b00      	cmp	r3, #0
 8008898:	da0f      	bge.n	80088ba <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800889a:	78fb      	ldrb	r3, [r7, #3]
 800889c:	f003 020f 	and.w	r2, r3, #15
 80088a0:	4613      	mov	r3, r2
 80088a2:	00db      	lsls	r3, r3, #3
 80088a4:	1a9b      	subs	r3, r3, r2
 80088a6:	009b      	lsls	r3, r3, #2
 80088a8:	3338      	adds	r3, #56	; 0x38
 80088aa:	687a      	ldr	r2, [r7, #4]
 80088ac:	4413      	add	r3, r2
 80088ae:	3304      	adds	r3, #4
 80088b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	2201      	movs	r2, #1
 80088b6:	705a      	strb	r2, [r3, #1]
 80088b8:	e00f      	b.n	80088da <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80088ba:	78fb      	ldrb	r3, [r7, #3]
 80088bc:	f003 020f 	and.w	r2, r3, #15
 80088c0:	4613      	mov	r3, r2
 80088c2:	00db      	lsls	r3, r3, #3
 80088c4:	1a9b      	subs	r3, r3, r2
 80088c6:	009b      	lsls	r3, r3, #2
 80088c8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80088cc:	687a      	ldr	r2, [r7, #4]
 80088ce:	4413      	add	r3, r2
 80088d0:	3304      	adds	r3, #4
 80088d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	2200      	movs	r2, #0
 80088d8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80088da:	78fb      	ldrb	r3, [r7, #3]
 80088dc:	f003 030f 	and.w	r3, r3, #15
 80088e0:	b2da      	uxtb	r2, r3
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80088e6:	883a      	ldrh	r2, [r7, #0]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	78ba      	ldrb	r2, [r7, #2]
 80088f0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	785b      	ldrb	r3, [r3, #1]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d004      	beq.n	8008904 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	781b      	ldrb	r3, [r3, #0]
 80088fe:	b29a      	uxth	r2, r3
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008904:	78bb      	ldrb	r3, [r7, #2]
 8008906:	2b02      	cmp	r3, #2
 8008908:	d102      	bne.n	8008910 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2200      	movs	r2, #0
 800890e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008916:	2b01      	cmp	r3, #1
 8008918:	d101      	bne.n	800891e <HAL_PCD_EP_Open+0xaa>
 800891a:	2302      	movs	r3, #2
 800891c:	e00e      	b.n	800893c <HAL_PCD_EP_Open+0xc8>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2201      	movs	r2, #1
 8008922:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	68f9      	ldr	r1, [r7, #12]
 800892c:	4618      	mov	r0, r3
 800892e:	f003 fd37 	bl	800c3a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800893a:	7afb      	ldrb	r3, [r7, #11]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3710      	adds	r7, #16
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b084      	sub	sp, #16
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	460b      	mov	r3, r1
 800894e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008950:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008954:	2b00      	cmp	r3, #0
 8008956:	da0f      	bge.n	8008978 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008958:	78fb      	ldrb	r3, [r7, #3]
 800895a:	f003 020f 	and.w	r2, r3, #15
 800895e:	4613      	mov	r3, r2
 8008960:	00db      	lsls	r3, r3, #3
 8008962:	1a9b      	subs	r3, r3, r2
 8008964:	009b      	lsls	r3, r3, #2
 8008966:	3338      	adds	r3, #56	; 0x38
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	4413      	add	r3, r2
 800896c:	3304      	adds	r3, #4
 800896e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2201      	movs	r2, #1
 8008974:	705a      	strb	r2, [r3, #1]
 8008976:	e00f      	b.n	8008998 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008978:	78fb      	ldrb	r3, [r7, #3]
 800897a:	f003 020f 	and.w	r2, r3, #15
 800897e:	4613      	mov	r3, r2
 8008980:	00db      	lsls	r3, r3, #3
 8008982:	1a9b      	subs	r3, r3, r2
 8008984:	009b      	lsls	r3, r3, #2
 8008986:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800898a:	687a      	ldr	r2, [r7, #4]
 800898c:	4413      	add	r3, r2
 800898e:	3304      	adds	r3, #4
 8008990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	2200      	movs	r2, #0
 8008996:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008998:	78fb      	ldrb	r3, [r7, #3]
 800899a:	f003 030f 	and.w	r3, r3, #15
 800899e:	b2da      	uxtb	r2, r3
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80089aa:	2b01      	cmp	r3, #1
 80089ac:	d101      	bne.n	80089b2 <HAL_PCD_EP_Close+0x6e>
 80089ae:	2302      	movs	r3, #2
 80089b0:	e00e      	b.n	80089d0 <HAL_PCD_EP_Close+0x8c>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2201      	movs	r2, #1
 80089b6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	68f9      	ldr	r1, [r7, #12]
 80089c0:	4618      	mov	r0, r3
 80089c2:	f003 fd75 	bl	800c4b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	2200      	movs	r2, #0
 80089ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80089ce:	2300      	movs	r3, #0
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	607a      	str	r2, [r7, #4]
 80089e2:	603b      	str	r3, [r7, #0]
 80089e4:	460b      	mov	r3, r1
 80089e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80089e8:	7afb      	ldrb	r3, [r7, #11]
 80089ea:	f003 020f 	and.w	r2, r3, #15
 80089ee:	4613      	mov	r3, r2
 80089f0:	00db      	lsls	r3, r3, #3
 80089f2:	1a9b      	subs	r3, r3, r2
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	4413      	add	r3, r2
 80089fe:	3304      	adds	r3, #4
 8008a00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	687a      	ldr	r2, [r7, #4]
 8008a06:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	683a      	ldr	r2, [r7, #0]
 8008a0c:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	2200      	movs	r2, #0
 8008a12:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	2200      	movs	r2, #0
 8008a18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008a1a:	7afb      	ldrb	r3, [r7, #11]
 8008a1c:	f003 030f 	and.w	r3, r3, #15
 8008a20:	b2da      	uxtb	r2, r3
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	691b      	ldr	r3, [r3, #16]
 8008a2a:	2b01      	cmp	r3, #1
 8008a2c:	d102      	bne.n	8008a34 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008a34:	7afb      	ldrb	r3, [r7, #11]
 8008a36:	f003 030f 	and.w	r3, r3, #15
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d109      	bne.n	8008a52 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	6818      	ldr	r0, [r3, #0]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	691b      	ldr	r3, [r3, #16]
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	461a      	mov	r2, r3
 8008a4a:	6979      	ldr	r1, [r7, #20]
 8008a4c:	f004 f850 	bl	800caf0 <USB_EP0StartXfer>
 8008a50:	e008      	b.n	8008a64 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	6818      	ldr	r0, [r3, #0]
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	b2db      	uxtb	r3, r3
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	6979      	ldr	r1, [r7, #20]
 8008a60:	f003 fe02 	bl	800c668 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3718      	adds	r7, #24
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008a6e:	b480      	push	{r7}
 8008a70:	b083      	sub	sp, #12
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	6078      	str	r0, [r7, #4]
 8008a76:	460b      	mov	r3, r1
 8008a78:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008a7a:	78fb      	ldrb	r3, [r7, #3]
 8008a7c:	f003 020f 	and.w	r2, r3, #15
 8008a80:	6879      	ldr	r1, [r7, #4]
 8008a82:	4613      	mov	r3, r2
 8008a84:	00db      	lsls	r3, r3, #3
 8008a86:	1a9b      	subs	r3, r3, r2
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	440b      	add	r3, r1
 8008a8c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008a90:	681b      	ldr	r3, [r3, #0]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	370c      	adds	r7, #12
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008a9e:	b580      	push	{r7, lr}
 8008aa0:	b086      	sub	sp, #24
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	60f8      	str	r0, [r7, #12]
 8008aa6:	607a      	str	r2, [r7, #4]
 8008aa8:	603b      	str	r3, [r7, #0]
 8008aaa:	460b      	mov	r3, r1
 8008aac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008aae:	7afb      	ldrb	r3, [r7, #11]
 8008ab0:	f003 020f 	and.w	r2, r3, #15
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	00db      	lsls	r3, r3, #3
 8008ab8:	1a9b      	subs	r3, r3, r2
 8008aba:	009b      	lsls	r3, r3, #2
 8008abc:	3338      	adds	r3, #56	; 0x38
 8008abe:	68fa      	ldr	r2, [r7, #12]
 8008ac0:	4413      	add	r3, r2
 8008ac2:	3304      	adds	r3, #4
 8008ac4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	687a      	ldr	r2, [r7, #4]
 8008aca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	683a      	ldr	r2, [r7, #0]
 8008ad0:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008ad2:	697b      	ldr	r3, [r7, #20]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	2201      	movs	r2, #1
 8008adc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ade:	7afb      	ldrb	r3, [r7, #11]
 8008ae0:	f003 030f 	and.w	r3, r3, #15
 8008ae4:	b2da      	uxtb	r2, r3
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	691b      	ldr	r3, [r3, #16]
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d102      	bne.n	8008af8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008af8:	7afb      	ldrb	r3, [r7, #11]
 8008afa:	f003 030f 	and.w	r3, r3, #15
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d109      	bne.n	8008b16 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	6818      	ldr	r0, [r3, #0]
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	6979      	ldr	r1, [r7, #20]
 8008b10:	f003 ffee 	bl	800caf0 <USB_EP0StartXfer>
 8008b14:	e008      	b.n	8008b28 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	6818      	ldr	r0, [r3, #0]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	461a      	mov	r2, r3
 8008b22:	6979      	ldr	r1, [r7, #20]
 8008b24:	f003 fda0 	bl	800c668 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008b28:	2300      	movs	r3, #0
}
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3718      	adds	r7, #24
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}

08008b32 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008b32:	b580      	push	{r7, lr}
 8008b34:	b084      	sub	sp, #16
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
 8008b3a:	460b      	mov	r3, r1
 8008b3c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008b3e:	78fb      	ldrb	r3, [r7, #3]
 8008b40:	f003 020f 	and.w	r2, r3, #15
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d901      	bls.n	8008b50 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e050      	b.n	8008bf2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008b50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	da0f      	bge.n	8008b78 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b58:	78fb      	ldrb	r3, [r7, #3]
 8008b5a:	f003 020f 	and.w	r2, r3, #15
 8008b5e:	4613      	mov	r3, r2
 8008b60:	00db      	lsls	r3, r3, #3
 8008b62:	1a9b      	subs	r3, r3, r2
 8008b64:	009b      	lsls	r3, r3, #2
 8008b66:	3338      	adds	r3, #56	; 0x38
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	4413      	add	r3, r2
 8008b6c:	3304      	adds	r3, #4
 8008b6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	2201      	movs	r2, #1
 8008b74:	705a      	strb	r2, [r3, #1]
 8008b76:	e00d      	b.n	8008b94 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008b78:	78fa      	ldrb	r2, [r7, #3]
 8008b7a:	4613      	mov	r3, r2
 8008b7c:	00db      	lsls	r3, r3, #3
 8008b7e:	1a9b      	subs	r3, r3, r2
 8008b80:	009b      	lsls	r3, r3, #2
 8008b82:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008b86:	687a      	ldr	r2, [r7, #4]
 8008b88:	4413      	add	r3, r2
 8008b8a:	3304      	adds	r3, #4
 8008b8c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	2201      	movs	r2, #1
 8008b98:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008b9a:	78fb      	ldrb	r3, [r7, #3]
 8008b9c:	f003 030f 	and.w	r3, r3, #15
 8008ba0:	b2da      	uxtb	r2, r3
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008bac:	2b01      	cmp	r3, #1
 8008bae:	d101      	bne.n	8008bb4 <HAL_PCD_EP_SetStall+0x82>
 8008bb0:	2302      	movs	r3, #2
 8008bb2:	e01e      	b.n	8008bf2 <HAL_PCD_EP_SetStall+0xc0>
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	68f9      	ldr	r1, [r7, #12]
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f004 f97d 	bl	800cec2 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008bc8:	78fb      	ldrb	r3, [r7, #3]
 8008bca:	f003 030f 	and.w	r3, r3, #15
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d10a      	bne.n	8008be8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6818      	ldr	r0, [r3, #0]
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	691b      	ldr	r3, [r3, #16]
 8008bda:	b2d9      	uxtb	r1, r3
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008be2:	461a      	mov	r2, r3
 8008be4:	f004 fb6e 	bl	800d2c4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2200      	movs	r2, #0
 8008bec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3710      	adds	r7, #16
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b084      	sub	sp, #16
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	6078      	str	r0, [r7, #4]
 8008c02:	460b      	mov	r3, r1
 8008c04:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008c06:	78fb      	ldrb	r3, [r7, #3]
 8008c08:	f003 020f 	and.w	r2, r3, #15
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	685b      	ldr	r3, [r3, #4]
 8008c10:	429a      	cmp	r2, r3
 8008c12:	d901      	bls.n	8008c18 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e042      	b.n	8008c9e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008c18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	da0f      	bge.n	8008c40 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c20:	78fb      	ldrb	r3, [r7, #3]
 8008c22:	f003 020f 	and.w	r2, r3, #15
 8008c26:	4613      	mov	r3, r2
 8008c28:	00db      	lsls	r3, r3, #3
 8008c2a:	1a9b      	subs	r3, r3, r2
 8008c2c:	009b      	lsls	r3, r3, #2
 8008c2e:	3338      	adds	r3, #56	; 0x38
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	4413      	add	r3, r2
 8008c34:	3304      	adds	r3, #4
 8008c36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2201      	movs	r2, #1
 8008c3c:	705a      	strb	r2, [r3, #1]
 8008c3e:	e00f      	b.n	8008c60 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c40:	78fb      	ldrb	r3, [r7, #3]
 8008c42:	f003 020f 	and.w	r2, r3, #15
 8008c46:	4613      	mov	r3, r2
 8008c48:	00db      	lsls	r3, r3, #3
 8008c4a:	1a9b      	subs	r3, r3, r2
 8008c4c:	009b      	lsls	r3, r3, #2
 8008c4e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	4413      	add	r3, r2
 8008c56:	3304      	adds	r3, #4
 8008c58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008c66:	78fb      	ldrb	r3, [r7, #3]
 8008c68:	f003 030f 	and.w	r3, r3, #15
 8008c6c:	b2da      	uxtb	r2, r3
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d101      	bne.n	8008c80 <HAL_PCD_EP_ClrStall+0x86>
 8008c7c:	2302      	movs	r3, #2
 8008c7e:	e00e      	b.n	8008c9e <HAL_PCD_EP_ClrStall+0xa4>
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2201      	movs	r2, #1
 8008c84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	68f9      	ldr	r1, [r7, #12]
 8008c8e:	4618      	mov	r0, r3
 8008c90:	f004 f985 	bl	800cf9e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008c9c:	2300      	movs	r3, #0
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b08a      	sub	sp, #40	; 0x28
 8008caa:	af02      	add	r7, sp, #8
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008cba:	683a      	ldr	r2, [r7, #0]
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	00db      	lsls	r3, r3, #3
 8008cc0:	1a9b      	subs	r3, r3, r2
 8008cc2:	009b      	lsls	r3, r3, #2
 8008cc4:	3338      	adds	r3, #56	; 0x38
 8008cc6:	687a      	ldr	r2, [r7, #4]
 8008cc8:	4413      	add	r3, r2
 8008cca:	3304      	adds	r3, #4
 8008ccc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	699a      	ldr	r2, [r3, #24]
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	695b      	ldr	r3, [r3, #20]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d901      	bls.n	8008cde <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	e06c      	b.n	8008db8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	695a      	ldr	r2, [r3, #20]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	699b      	ldr	r3, [r3, #24]
 8008ce6:	1ad3      	subs	r3, r2, r3
 8008ce8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	689b      	ldr	r3, [r3, #8]
 8008cee:	69fa      	ldr	r2, [r7, #28]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d902      	bls.n	8008cfa <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	3303      	adds	r3, #3
 8008cfe:	089b      	lsrs	r3, r3, #2
 8008d00:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008d02:	e02b      	b.n	8008d5c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	695a      	ldr	r2, [r3, #20]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	1ad3      	subs	r3, r2, r3
 8008d0e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	69fa      	ldr	r2, [r7, #28]
 8008d16:	429a      	cmp	r2, r3
 8008d18:	d902      	bls.n	8008d20 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	689b      	ldr	r3, [r3, #8]
 8008d1e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	3303      	adds	r3, #3
 8008d24:	089b      	lsrs	r3, r3, #2
 8008d26:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	68d9      	ldr	r1, [r3, #12]
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	b2da      	uxtb	r2, r3
 8008d30:	69fb      	ldr	r3, [r7, #28]
 8008d32:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	9300      	str	r3, [sp, #0]
 8008d3c:	4603      	mov	r3, r0
 8008d3e:	6978      	ldr	r0, [r7, #20]
 8008d40:	f004 f829 	bl	800cd96 <USB_WritePacket>

    ep->xfer_buff  += len;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	68da      	ldr	r2, [r3, #12]
 8008d48:	69fb      	ldr	r3, [r7, #28]
 8008d4a:	441a      	add	r2, r3
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	699a      	ldr	r2, [r3, #24]
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	441a      	add	r2, r3
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	015a      	lsls	r2, r3, #5
 8008d60:	693b      	ldr	r3, [r7, #16]
 8008d62:	4413      	add	r3, r2
 8008d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	b29b      	uxth	r3, r3
 8008d6c:	69ba      	ldr	r2, [r7, #24]
 8008d6e:	429a      	cmp	r2, r3
 8008d70:	d809      	bhi.n	8008d86 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	699a      	ldr	r2, [r3, #24]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d203      	bcs.n	8008d86 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	695b      	ldr	r3, [r3, #20]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1be      	bne.n	8008d04 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	695a      	ldr	r2, [r3, #20]
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	699b      	ldr	r3, [r3, #24]
 8008d8e:	429a      	cmp	r2, r3
 8008d90:	d811      	bhi.n	8008db6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	f003 030f 	and.w	r3, r3, #15
 8008d98:	2201      	movs	r2, #1
 8008d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8008d9e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008da6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	43db      	mvns	r3, r3
 8008dac:	6939      	ldr	r1, [r7, #16]
 8008dae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008db2:	4013      	ands	r3, r2
 8008db4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8008db6:	2300      	movs	r3, #0
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3720      	adds	r7, #32
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}

08008dc0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b086      	sub	sp, #24
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008dd4:	697b      	ldr	r3, [r7, #20]
 8008dd6:	333c      	adds	r3, #60	; 0x3c
 8008dd8:	3304      	adds	r3, #4
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	015a      	lsls	r2, r3, #5
 8008de2:	693b      	ldr	r3, [r7, #16]
 8008de4:	4413      	add	r3, r2
 8008de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dea:	689b      	ldr	r3, [r3, #8]
 8008dec:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	691b      	ldr	r3, [r3, #16]
 8008df2:	2b01      	cmp	r3, #1
 8008df4:	f040 80a0 	bne.w	8008f38 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8008df8:	68bb      	ldr	r3, [r7, #8]
 8008dfa:	f003 0308 	and.w	r3, r3, #8
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d015      	beq.n	8008e2e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	4a72      	ldr	r2, [pc, #456]	; (8008fd0 <PCD_EP_OutXfrComplete_int+0x210>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	f240 80dd 	bls.w	8008fc6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	f000 80d7 	beq.w	8008fc6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008e18:	683b      	ldr	r3, [r7, #0]
 8008e1a:	015a      	lsls	r2, r3, #5
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	4413      	add	r3, r2
 8008e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e24:	461a      	mov	r2, r3
 8008e26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e2a:	6093      	str	r3, [r2, #8]
 8008e2c:	e0cb      	b.n	8008fc6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	f003 0320 	and.w	r3, r3, #32
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d009      	beq.n	8008e4c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	015a      	lsls	r2, r3, #5
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	4413      	add	r3, r2
 8008e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e44:	461a      	mov	r2, r3
 8008e46:	2320      	movs	r3, #32
 8008e48:	6093      	str	r3, [r2, #8]
 8008e4a:	e0bc      	b.n	8008fc6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	f040 80b7 	bne.w	8008fc6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	4a5d      	ldr	r2, [pc, #372]	; (8008fd0 <PCD_EP_OutXfrComplete_int+0x210>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d90f      	bls.n	8008e80 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8008e60:	68bb      	ldr	r3, [r7, #8]
 8008e62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00a      	beq.n	8008e80 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008e6a:	683b      	ldr	r3, [r7, #0]
 8008e6c:	015a      	lsls	r2, r3, #5
 8008e6e:	693b      	ldr	r3, [r7, #16]
 8008e70:	4413      	add	r3, r2
 8008e72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e76:	461a      	mov	r2, r3
 8008e78:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e7c:	6093      	str	r3, [r2, #8]
 8008e7e:	e0a2      	b.n	8008fc6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8008e80:	6879      	ldr	r1, [r7, #4]
 8008e82:	683a      	ldr	r2, [r7, #0]
 8008e84:	4613      	mov	r3, r2
 8008e86:	00db      	lsls	r3, r3, #3
 8008e88:	1a9b      	subs	r3, r3, r2
 8008e8a:	009b      	lsls	r3, r3, #2
 8008e8c:	440b      	add	r3, r1
 8008e8e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008e92:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	0159      	lsls	r1, r3, #5
 8008e98:	693b      	ldr	r3, [r7, #16]
 8008e9a:	440b      	add	r3, r1
 8008e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8008ea6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8008ea8:	6878      	ldr	r0, [r7, #4]
 8008eaa:	683a      	ldr	r2, [r7, #0]
 8008eac:	4613      	mov	r3, r2
 8008eae:	00db      	lsls	r3, r3, #3
 8008eb0:	1a9b      	subs	r3, r3, r2
 8008eb2:	009b      	lsls	r3, r3, #2
 8008eb4:	4403      	add	r3, r0
 8008eb6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008eba:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8008ebc:	6879      	ldr	r1, [r7, #4]
 8008ebe:	683a      	ldr	r2, [r7, #0]
 8008ec0:	4613      	mov	r3, r2
 8008ec2:	00db      	lsls	r3, r3, #3
 8008ec4:	1a9b      	subs	r3, r3, r2
 8008ec6:	009b      	lsls	r3, r3, #2
 8008ec8:	440b      	add	r3, r1
 8008eca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008ece:	6819      	ldr	r1, [r3, #0]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	683a      	ldr	r2, [r7, #0]
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	00db      	lsls	r3, r3, #3
 8008ed8:	1a9b      	subs	r3, r3, r2
 8008eda:	009b      	lsls	r3, r3, #2
 8008edc:	4403      	add	r3, r0
 8008ede:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4419      	add	r1, r3
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	683a      	ldr	r2, [r7, #0]
 8008eea:	4613      	mov	r3, r2
 8008eec:	00db      	lsls	r3, r3, #3
 8008eee:	1a9b      	subs	r3, r3, r2
 8008ef0:	009b      	lsls	r3, r3, #2
 8008ef2:	4403      	add	r3, r0
 8008ef4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008ef8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d114      	bne.n	8008f2a <PCD_EP_OutXfrComplete_int+0x16a>
 8008f00:	6879      	ldr	r1, [r7, #4]
 8008f02:	683a      	ldr	r2, [r7, #0]
 8008f04:	4613      	mov	r3, r2
 8008f06:	00db      	lsls	r3, r3, #3
 8008f08:	1a9b      	subs	r3, r3, r2
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	440b      	add	r3, r1
 8008f0e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d108      	bne.n	8008f2a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	6818      	ldr	r0, [r3, #0]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008f22:	461a      	mov	r2, r3
 8008f24:	2101      	movs	r1, #1
 8008f26:	f004 f9cd 	bl	800d2c4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	b2db      	uxtb	r3, r3
 8008f2e:	4619      	mov	r1, r3
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f00d fcb9 	bl	80168a8 <HAL_PCD_DataOutStageCallback>
 8008f36:	e046      	b.n	8008fc6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	4a26      	ldr	r2, [pc, #152]	; (8008fd4 <PCD_EP_OutXfrComplete_int+0x214>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d124      	bne.n	8008f8a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8008f40:	68bb      	ldr	r3, [r7, #8]
 8008f42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00a      	beq.n	8008f60 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	015a      	lsls	r2, r3, #5
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f56:	461a      	mov	r2, r3
 8008f58:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f5c:	6093      	str	r3, [r2, #8]
 8008f5e:	e032      	b.n	8008fc6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	f003 0320 	and.w	r3, r3, #32
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d008      	beq.n	8008f7c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	015a      	lsls	r2, r3, #5
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	4413      	add	r3, r2
 8008f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f76:	461a      	mov	r2, r3
 8008f78:	2320      	movs	r3, #32
 8008f7a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	b2db      	uxtb	r3, r3
 8008f80:	4619      	mov	r1, r3
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f00d fc90 	bl	80168a8 <HAL_PCD_DataOutStageCallback>
 8008f88:	e01d      	b.n	8008fc6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d114      	bne.n	8008fba <PCD_EP_OutXfrComplete_int+0x1fa>
 8008f90:	6879      	ldr	r1, [r7, #4]
 8008f92:	683a      	ldr	r2, [r7, #0]
 8008f94:	4613      	mov	r3, r2
 8008f96:	00db      	lsls	r3, r3, #3
 8008f98:	1a9b      	subs	r3, r3, r2
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	440b      	add	r3, r1
 8008f9e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d108      	bne.n	8008fba <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6818      	ldr	r0, [r3, #0]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	f004 f985 	bl	800d2c4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	b2db      	uxtb	r3, r3
 8008fbe:	4619      	mov	r1, r3
 8008fc0:	6878      	ldr	r0, [r7, #4]
 8008fc2:	f00d fc71 	bl	80168a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3718      	adds	r7, #24
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}
 8008fd0:	4f54300a 	.word	0x4f54300a
 8008fd4:	4f54310a 	.word	0x4f54310a

08008fd8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	b086      	sub	sp, #24
 8008fdc:	af00      	add	r7, sp, #0
 8008fde:	6078      	str	r0, [r7, #4]
 8008fe0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fe8:	697b      	ldr	r3, [r7, #20]
 8008fea:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008fec:	697b      	ldr	r3, [r7, #20]
 8008fee:	333c      	adds	r3, #60	; 0x3c
 8008ff0:	3304      	adds	r3, #4
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	015a      	lsls	r2, r3, #5
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	4a15      	ldr	r2, [pc, #84]	; (8009060 <PCD_EP_OutSetupPacket_int+0x88>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d90e      	bls.n	800902c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009014:	2b00      	cmp	r3, #0
 8009016:	d009      	beq.n	800902c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	015a      	lsls	r2, r3, #5
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	4413      	add	r3, r2
 8009020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009024:	461a      	mov	r2, r3
 8009026:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800902a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800902c:	6878      	ldr	r0, [r7, #4]
 800902e:	f00d fc29 	bl	8016884 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	4a0a      	ldr	r2, [pc, #40]	; (8009060 <PCD_EP_OutSetupPacket_int+0x88>)
 8009036:	4293      	cmp	r3, r2
 8009038:	d90c      	bls.n	8009054 <PCD_EP_OutSetupPacket_int+0x7c>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	691b      	ldr	r3, [r3, #16]
 800903e:	2b01      	cmp	r3, #1
 8009040:	d108      	bne.n	8009054 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6818      	ldr	r0, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800904c:	461a      	mov	r2, r3
 800904e:	2101      	movs	r1, #1
 8009050:	f004 f938 	bl	800d2c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	3718      	adds	r7, #24
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	bf00      	nop
 8009060:	4f54300a 	.word	0x4f54300a

08009064 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009064:	b480      	push	{r7}
 8009066:	b085      	sub	sp, #20
 8009068:	af00      	add	r7, sp, #0
 800906a:	6078      	str	r0, [r7, #4]
 800906c:	460b      	mov	r3, r1
 800906e:	70fb      	strb	r3, [r7, #3]
 8009070:	4613      	mov	r3, r2
 8009072:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800907c:	78fb      	ldrb	r3, [r7, #3]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d107      	bne.n	8009092 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009082:	883b      	ldrh	r3, [r7, #0]
 8009084:	0419      	lsls	r1, r3, #16
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	68ba      	ldr	r2, [r7, #8]
 800908c:	430a      	orrs	r2, r1
 800908e:	629a      	str	r2, [r3, #40]	; 0x28
 8009090:	e028      	b.n	80090e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009098:	0c1b      	lsrs	r3, r3, #16
 800909a:	68ba      	ldr	r2, [r7, #8]
 800909c:	4413      	add	r3, r2
 800909e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80090a0:	2300      	movs	r3, #0
 80090a2:	73fb      	strb	r3, [r7, #15]
 80090a4:	e00d      	b.n	80090c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	7bfb      	ldrb	r3, [r7, #15]
 80090ac:	3340      	adds	r3, #64	; 0x40
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4413      	add	r3, r2
 80090b2:	685b      	ldr	r3, [r3, #4]
 80090b4:	0c1b      	lsrs	r3, r3, #16
 80090b6:	68ba      	ldr	r2, [r7, #8]
 80090b8:	4413      	add	r3, r2
 80090ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80090bc:	7bfb      	ldrb	r3, [r7, #15]
 80090be:	3301      	adds	r3, #1
 80090c0:	73fb      	strb	r3, [r7, #15]
 80090c2:	7bfa      	ldrb	r2, [r7, #15]
 80090c4:	78fb      	ldrb	r3, [r7, #3]
 80090c6:	3b01      	subs	r3, #1
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d3ec      	bcc.n	80090a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80090cc:	883b      	ldrh	r3, [r7, #0]
 80090ce:	0418      	lsls	r0, r3, #16
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6819      	ldr	r1, [r3, #0]
 80090d4:	78fb      	ldrb	r3, [r7, #3]
 80090d6:	3b01      	subs	r3, #1
 80090d8:	68ba      	ldr	r2, [r7, #8]
 80090da:	4302      	orrs	r2, r0
 80090dc:	3340      	adds	r3, #64	; 0x40
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	440b      	add	r3, r1
 80090e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80090e4:	2300      	movs	r3, #0
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3714      	adds	r7, #20
 80090ea:	46bd      	mov	sp, r7
 80090ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f0:	4770      	bx	lr

080090f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80090f2:	b480      	push	{r7}
 80090f4:	b083      	sub	sp, #12
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	6078      	str	r0, [r7, #4]
 80090fa:	460b      	mov	r3, r1
 80090fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	887a      	ldrh	r2, [r7, #2]
 8009104:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009106:	2300      	movs	r3, #0
}
 8009108:	4618      	mov	r0, r3
 800910a:	370c      	adds	r7, #12
 800910c:	46bd      	mov	sp, r7
 800910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009112:	4770      	bx	lr

08009114 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009114:	b480      	push	{r7}
 8009116:	b083      	sub	sp, #12
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	460b      	mov	r3, r1
 800911e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009120:	bf00      	nop
 8009122:	370c      	adds	r7, #12
 8009124:	46bd      	mov	sp, r7
 8009126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800912a:	4770      	bx	lr

0800912c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b086      	sub	sp, #24
 8009130:	af00      	add	r7, sp, #0
 8009132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d101      	bne.n	800913e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800913a:	2301      	movs	r3, #1
 800913c:	e264      	b.n	8009608 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f003 0301 	and.w	r3, r3, #1
 8009146:	2b00      	cmp	r3, #0
 8009148:	d075      	beq.n	8009236 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800914a:	4ba3      	ldr	r3, [pc, #652]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	f003 030c 	and.w	r3, r3, #12
 8009152:	2b04      	cmp	r3, #4
 8009154:	d00c      	beq.n	8009170 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009156:	4ba0      	ldr	r3, [pc, #640]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800915e:	2b08      	cmp	r3, #8
 8009160:	d112      	bne.n	8009188 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009162:	4b9d      	ldr	r3, [pc, #628]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800916a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800916e:	d10b      	bne.n	8009188 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009170:	4b99      	ldr	r3, [pc, #612]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009178:	2b00      	cmp	r3, #0
 800917a:	d05b      	beq.n	8009234 <HAL_RCC_OscConfig+0x108>
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d157      	bne.n	8009234 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009184:	2301      	movs	r3, #1
 8009186:	e23f      	b.n	8009608 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	685b      	ldr	r3, [r3, #4]
 800918c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009190:	d106      	bne.n	80091a0 <HAL_RCC_OscConfig+0x74>
 8009192:	4b91      	ldr	r3, [pc, #580]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a90      	ldr	r2, [pc, #576]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 8009198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800919c:	6013      	str	r3, [r2, #0]
 800919e:	e01d      	b.n	80091dc <HAL_RCC_OscConfig+0xb0>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80091a8:	d10c      	bne.n	80091c4 <HAL_RCC_OscConfig+0x98>
 80091aa:	4b8b      	ldr	r3, [pc, #556]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	4a8a      	ldr	r2, [pc, #552]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 80091b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80091b4:	6013      	str	r3, [r2, #0]
 80091b6:	4b88      	ldr	r3, [pc, #544]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a87      	ldr	r2, [pc, #540]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 80091bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091c0:	6013      	str	r3, [r2, #0]
 80091c2:	e00b      	b.n	80091dc <HAL_RCC_OscConfig+0xb0>
 80091c4:	4b84      	ldr	r3, [pc, #528]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a83      	ldr	r2, [pc, #524]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 80091ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091ce:	6013      	str	r3, [r2, #0]
 80091d0:	4b81      	ldr	r3, [pc, #516]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	4a80      	ldr	r2, [pc, #512]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 80091d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80091da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	685b      	ldr	r3, [r3, #4]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d013      	beq.n	800920c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80091e4:	f7fc fcb2 	bl	8005b4c <HAL_GetTick>
 80091e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091ea:	e008      	b.n	80091fe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80091ec:	f7fc fcae 	bl	8005b4c <HAL_GetTick>
 80091f0:	4602      	mov	r2, r0
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	1ad3      	subs	r3, r2, r3
 80091f6:	2b64      	cmp	r3, #100	; 0x64
 80091f8:	d901      	bls.n	80091fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80091fa:	2303      	movs	r3, #3
 80091fc:	e204      	b.n	8009608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80091fe:	4b76      	ldr	r3, [pc, #472]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009206:	2b00      	cmp	r3, #0
 8009208:	d0f0      	beq.n	80091ec <HAL_RCC_OscConfig+0xc0>
 800920a:	e014      	b.n	8009236 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800920c:	f7fc fc9e 	bl	8005b4c <HAL_GetTick>
 8009210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009212:	e008      	b.n	8009226 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009214:	f7fc fc9a 	bl	8005b4c <HAL_GetTick>
 8009218:	4602      	mov	r2, r0
 800921a:	693b      	ldr	r3, [r7, #16]
 800921c:	1ad3      	subs	r3, r2, r3
 800921e:	2b64      	cmp	r3, #100	; 0x64
 8009220:	d901      	bls.n	8009226 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009222:	2303      	movs	r3, #3
 8009224:	e1f0      	b.n	8009608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009226:	4b6c      	ldr	r3, [pc, #432]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800922e:	2b00      	cmp	r3, #0
 8009230:	d1f0      	bne.n	8009214 <HAL_RCC_OscConfig+0xe8>
 8009232:	e000      	b.n	8009236 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009234:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	f003 0302 	and.w	r3, r3, #2
 800923e:	2b00      	cmp	r3, #0
 8009240:	d063      	beq.n	800930a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009242:	4b65      	ldr	r3, [pc, #404]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	f003 030c 	and.w	r3, r3, #12
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00b      	beq.n	8009266 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800924e:	4b62      	ldr	r3, [pc, #392]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 8009250:	689b      	ldr	r3, [r3, #8]
 8009252:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009256:	2b08      	cmp	r3, #8
 8009258:	d11c      	bne.n	8009294 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800925a:	4b5f      	ldr	r3, [pc, #380]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009262:	2b00      	cmp	r3, #0
 8009264:	d116      	bne.n	8009294 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009266:	4b5c      	ldr	r3, [pc, #368]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	f003 0302 	and.w	r3, r3, #2
 800926e:	2b00      	cmp	r3, #0
 8009270:	d005      	beq.n	800927e <HAL_RCC_OscConfig+0x152>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	68db      	ldr	r3, [r3, #12]
 8009276:	2b01      	cmp	r3, #1
 8009278:	d001      	beq.n	800927e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800927a:	2301      	movs	r3, #1
 800927c:	e1c4      	b.n	8009608 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800927e:	4b56      	ldr	r3, [pc, #344]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	691b      	ldr	r3, [r3, #16]
 800928a:	00db      	lsls	r3, r3, #3
 800928c:	4952      	ldr	r1, [pc, #328]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 800928e:	4313      	orrs	r3, r2
 8009290:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009292:	e03a      	b.n	800930a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d020      	beq.n	80092de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800929c:	4b4f      	ldr	r3, [pc, #316]	; (80093dc <HAL_RCC_OscConfig+0x2b0>)
 800929e:	2201      	movs	r2, #1
 80092a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092a2:	f7fc fc53 	bl	8005b4c <HAL_GetTick>
 80092a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092a8:	e008      	b.n	80092bc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80092aa:	f7fc fc4f 	bl	8005b4c <HAL_GetTick>
 80092ae:	4602      	mov	r2, r0
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	1ad3      	subs	r3, r2, r3
 80092b4:	2b02      	cmp	r3, #2
 80092b6:	d901      	bls.n	80092bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80092b8:	2303      	movs	r3, #3
 80092ba:	e1a5      	b.n	8009608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80092bc:	4b46      	ldr	r3, [pc, #280]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f003 0302 	and.w	r3, r3, #2
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d0f0      	beq.n	80092aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80092c8:	4b43      	ldr	r3, [pc, #268]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	691b      	ldr	r3, [r3, #16]
 80092d4:	00db      	lsls	r3, r3, #3
 80092d6:	4940      	ldr	r1, [pc, #256]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 80092d8:	4313      	orrs	r3, r2
 80092da:	600b      	str	r3, [r1, #0]
 80092dc:	e015      	b.n	800930a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80092de:	4b3f      	ldr	r3, [pc, #252]	; (80093dc <HAL_RCC_OscConfig+0x2b0>)
 80092e0:	2200      	movs	r2, #0
 80092e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092e4:	f7fc fc32 	bl	8005b4c <HAL_GetTick>
 80092e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092ea:	e008      	b.n	80092fe <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80092ec:	f7fc fc2e 	bl	8005b4c <HAL_GetTick>
 80092f0:	4602      	mov	r2, r0
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	1ad3      	subs	r3, r2, r3
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	d901      	bls.n	80092fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80092fa:	2303      	movs	r3, #3
 80092fc:	e184      	b.n	8009608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80092fe:	4b36      	ldr	r3, [pc, #216]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f003 0302 	and.w	r3, r3, #2
 8009306:	2b00      	cmp	r3, #0
 8009308:	d1f0      	bne.n	80092ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 0308 	and.w	r3, r3, #8
 8009312:	2b00      	cmp	r3, #0
 8009314:	d030      	beq.n	8009378 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	695b      	ldr	r3, [r3, #20]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d016      	beq.n	800934c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800931e:	4b30      	ldr	r3, [pc, #192]	; (80093e0 <HAL_RCC_OscConfig+0x2b4>)
 8009320:	2201      	movs	r2, #1
 8009322:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009324:	f7fc fc12 	bl	8005b4c <HAL_GetTick>
 8009328:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800932a:	e008      	b.n	800933e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800932c:	f7fc fc0e 	bl	8005b4c <HAL_GetTick>
 8009330:	4602      	mov	r2, r0
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	1ad3      	subs	r3, r2, r3
 8009336:	2b02      	cmp	r3, #2
 8009338:	d901      	bls.n	800933e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800933a:	2303      	movs	r3, #3
 800933c:	e164      	b.n	8009608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800933e:	4b26      	ldr	r3, [pc, #152]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 8009340:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009342:	f003 0302 	and.w	r3, r3, #2
 8009346:	2b00      	cmp	r3, #0
 8009348:	d0f0      	beq.n	800932c <HAL_RCC_OscConfig+0x200>
 800934a:	e015      	b.n	8009378 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800934c:	4b24      	ldr	r3, [pc, #144]	; (80093e0 <HAL_RCC_OscConfig+0x2b4>)
 800934e:	2200      	movs	r2, #0
 8009350:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009352:	f7fc fbfb 	bl	8005b4c <HAL_GetTick>
 8009356:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009358:	e008      	b.n	800936c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800935a:	f7fc fbf7 	bl	8005b4c <HAL_GetTick>
 800935e:	4602      	mov	r2, r0
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	1ad3      	subs	r3, r2, r3
 8009364:	2b02      	cmp	r3, #2
 8009366:	d901      	bls.n	800936c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009368:	2303      	movs	r3, #3
 800936a:	e14d      	b.n	8009608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800936c:	4b1a      	ldr	r3, [pc, #104]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 800936e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009370:	f003 0302 	and.w	r3, r3, #2
 8009374:	2b00      	cmp	r3, #0
 8009376:	d1f0      	bne.n	800935a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 0304 	and.w	r3, r3, #4
 8009380:	2b00      	cmp	r3, #0
 8009382:	f000 80a0 	beq.w	80094c6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009386:	2300      	movs	r3, #0
 8009388:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800938a:	4b13      	ldr	r3, [pc, #76]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 800938c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800938e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009392:	2b00      	cmp	r3, #0
 8009394:	d10f      	bne.n	80093b6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009396:	2300      	movs	r3, #0
 8009398:	60bb      	str	r3, [r7, #8]
 800939a:	4b0f      	ldr	r3, [pc, #60]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 800939c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800939e:	4a0e      	ldr	r2, [pc, #56]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 80093a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093a4:	6413      	str	r3, [r2, #64]	; 0x40
 80093a6:	4b0c      	ldr	r3, [pc, #48]	; (80093d8 <HAL_RCC_OscConfig+0x2ac>)
 80093a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80093ae:	60bb      	str	r3, [r7, #8]
 80093b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80093b2:	2301      	movs	r3, #1
 80093b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093b6:	4b0b      	ldr	r3, [pc, #44]	; (80093e4 <HAL_RCC_OscConfig+0x2b8>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d121      	bne.n	8009406 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80093c2:	4b08      	ldr	r3, [pc, #32]	; (80093e4 <HAL_RCC_OscConfig+0x2b8>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a07      	ldr	r2, [pc, #28]	; (80093e4 <HAL_RCC_OscConfig+0x2b8>)
 80093c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80093cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80093ce:	f7fc fbbd 	bl	8005b4c <HAL_GetTick>
 80093d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093d4:	e011      	b.n	80093fa <HAL_RCC_OscConfig+0x2ce>
 80093d6:	bf00      	nop
 80093d8:	40023800 	.word	0x40023800
 80093dc:	42470000 	.word	0x42470000
 80093e0:	42470e80 	.word	0x42470e80
 80093e4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80093e8:	f7fc fbb0 	bl	8005b4c <HAL_GetTick>
 80093ec:	4602      	mov	r2, r0
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	1ad3      	subs	r3, r2, r3
 80093f2:	2b02      	cmp	r3, #2
 80093f4:	d901      	bls.n	80093fa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80093f6:	2303      	movs	r3, #3
 80093f8:	e106      	b.n	8009608 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80093fa:	4b85      	ldr	r3, [pc, #532]	; (8009610 <HAL_RCC_OscConfig+0x4e4>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009402:	2b00      	cmp	r3, #0
 8009404:	d0f0      	beq.n	80093e8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	689b      	ldr	r3, [r3, #8]
 800940a:	2b01      	cmp	r3, #1
 800940c:	d106      	bne.n	800941c <HAL_RCC_OscConfig+0x2f0>
 800940e:	4b81      	ldr	r3, [pc, #516]	; (8009614 <HAL_RCC_OscConfig+0x4e8>)
 8009410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009412:	4a80      	ldr	r2, [pc, #512]	; (8009614 <HAL_RCC_OscConfig+0x4e8>)
 8009414:	f043 0301 	orr.w	r3, r3, #1
 8009418:	6713      	str	r3, [r2, #112]	; 0x70
 800941a:	e01c      	b.n	8009456 <HAL_RCC_OscConfig+0x32a>
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	2b05      	cmp	r3, #5
 8009422:	d10c      	bne.n	800943e <HAL_RCC_OscConfig+0x312>
 8009424:	4b7b      	ldr	r3, [pc, #492]	; (8009614 <HAL_RCC_OscConfig+0x4e8>)
 8009426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009428:	4a7a      	ldr	r2, [pc, #488]	; (8009614 <HAL_RCC_OscConfig+0x4e8>)
 800942a:	f043 0304 	orr.w	r3, r3, #4
 800942e:	6713      	str	r3, [r2, #112]	; 0x70
 8009430:	4b78      	ldr	r3, [pc, #480]	; (8009614 <HAL_RCC_OscConfig+0x4e8>)
 8009432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009434:	4a77      	ldr	r2, [pc, #476]	; (8009614 <HAL_RCC_OscConfig+0x4e8>)
 8009436:	f043 0301 	orr.w	r3, r3, #1
 800943a:	6713      	str	r3, [r2, #112]	; 0x70
 800943c:	e00b      	b.n	8009456 <HAL_RCC_OscConfig+0x32a>
 800943e:	4b75      	ldr	r3, [pc, #468]	; (8009614 <HAL_RCC_OscConfig+0x4e8>)
 8009440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009442:	4a74      	ldr	r2, [pc, #464]	; (8009614 <HAL_RCC_OscConfig+0x4e8>)
 8009444:	f023 0301 	bic.w	r3, r3, #1
 8009448:	6713      	str	r3, [r2, #112]	; 0x70
 800944a:	4b72      	ldr	r3, [pc, #456]	; (8009614 <HAL_RCC_OscConfig+0x4e8>)
 800944c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800944e:	4a71      	ldr	r2, [pc, #452]	; (8009614 <HAL_RCC_OscConfig+0x4e8>)
 8009450:	f023 0304 	bic.w	r3, r3, #4
 8009454:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d015      	beq.n	800948a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800945e:	f7fc fb75 	bl	8005b4c <HAL_GetTick>
 8009462:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009464:	e00a      	b.n	800947c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009466:	f7fc fb71 	bl	8005b4c <HAL_GetTick>
 800946a:	4602      	mov	r2, r0
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	1ad3      	subs	r3, r2, r3
 8009470:	f241 3288 	movw	r2, #5000	; 0x1388
 8009474:	4293      	cmp	r3, r2
 8009476:	d901      	bls.n	800947c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009478:	2303      	movs	r3, #3
 800947a:	e0c5      	b.n	8009608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800947c:	4b65      	ldr	r3, [pc, #404]	; (8009614 <HAL_RCC_OscConfig+0x4e8>)
 800947e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009480:	f003 0302 	and.w	r3, r3, #2
 8009484:	2b00      	cmp	r3, #0
 8009486:	d0ee      	beq.n	8009466 <HAL_RCC_OscConfig+0x33a>
 8009488:	e014      	b.n	80094b4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800948a:	f7fc fb5f 	bl	8005b4c <HAL_GetTick>
 800948e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009490:	e00a      	b.n	80094a8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009492:	f7fc fb5b 	bl	8005b4c <HAL_GetTick>
 8009496:	4602      	mov	r2, r0
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	f241 3288 	movw	r2, #5000	; 0x1388
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d901      	bls.n	80094a8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80094a4:	2303      	movs	r3, #3
 80094a6:	e0af      	b.n	8009608 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80094a8:	4b5a      	ldr	r3, [pc, #360]	; (8009614 <HAL_RCC_OscConfig+0x4e8>)
 80094aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094ac:	f003 0302 	and.w	r3, r3, #2
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d1ee      	bne.n	8009492 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80094b4:	7dfb      	ldrb	r3, [r7, #23]
 80094b6:	2b01      	cmp	r3, #1
 80094b8:	d105      	bne.n	80094c6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80094ba:	4b56      	ldr	r3, [pc, #344]	; (8009614 <HAL_RCC_OscConfig+0x4e8>)
 80094bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094be:	4a55      	ldr	r2, [pc, #340]	; (8009614 <HAL_RCC_OscConfig+0x4e8>)
 80094c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094c4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	699b      	ldr	r3, [r3, #24]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	f000 809b 	beq.w	8009606 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80094d0:	4b50      	ldr	r3, [pc, #320]	; (8009614 <HAL_RCC_OscConfig+0x4e8>)
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	f003 030c 	and.w	r3, r3, #12
 80094d8:	2b08      	cmp	r3, #8
 80094da:	d05c      	beq.n	8009596 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	699b      	ldr	r3, [r3, #24]
 80094e0:	2b02      	cmp	r3, #2
 80094e2:	d141      	bne.n	8009568 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80094e4:	4b4c      	ldr	r3, [pc, #304]	; (8009618 <HAL_RCC_OscConfig+0x4ec>)
 80094e6:	2200      	movs	r2, #0
 80094e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80094ea:	f7fc fb2f 	bl	8005b4c <HAL_GetTick>
 80094ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80094f0:	e008      	b.n	8009504 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80094f2:	f7fc fb2b 	bl	8005b4c <HAL_GetTick>
 80094f6:	4602      	mov	r2, r0
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	1ad3      	subs	r3, r2, r3
 80094fc:	2b02      	cmp	r3, #2
 80094fe:	d901      	bls.n	8009504 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009500:	2303      	movs	r3, #3
 8009502:	e081      	b.n	8009608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009504:	4b43      	ldr	r3, [pc, #268]	; (8009614 <HAL_RCC_OscConfig+0x4e8>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800950c:	2b00      	cmp	r3, #0
 800950e:	d1f0      	bne.n	80094f2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	69da      	ldr	r2, [r3, #28]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6a1b      	ldr	r3, [r3, #32]
 8009518:	431a      	orrs	r2, r3
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951e:	019b      	lsls	r3, r3, #6
 8009520:	431a      	orrs	r2, r3
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009526:	085b      	lsrs	r3, r3, #1
 8009528:	3b01      	subs	r3, #1
 800952a:	041b      	lsls	r3, r3, #16
 800952c:	431a      	orrs	r2, r3
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009532:	061b      	lsls	r3, r3, #24
 8009534:	4937      	ldr	r1, [pc, #220]	; (8009614 <HAL_RCC_OscConfig+0x4e8>)
 8009536:	4313      	orrs	r3, r2
 8009538:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800953a:	4b37      	ldr	r3, [pc, #220]	; (8009618 <HAL_RCC_OscConfig+0x4ec>)
 800953c:	2201      	movs	r2, #1
 800953e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009540:	f7fc fb04 	bl	8005b4c <HAL_GetTick>
 8009544:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009546:	e008      	b.n	800955a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009548:	f7fc fb00 	bl	8005b4c <HAL_GetTick>
 800954c:	4602      	mov	r2, r0
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	1ad3      	subs	r3, r2, r3
 8009552:	2b02      	cmp	r3, #2
 8009554:	d901      	bls.n	800955a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009556:	2303      	movs	r3, #3
 8009558:	e056      	b.n	8009608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800955a:	4b2e      	ldr	r3, [pc, #184]	; (8009614 <HAL_RCC_OscConfig+0x4e8>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009562:	2b00      	cmp	r3, #0
 8009564:	d0f0      	beq.n	8009548 <HAL_RCC_OscConfig+0x41c>
 8009566:	e04e      	b.n	8009606 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009568:	4b2b      	ldr	r3, [pc, #172]	; (8009618 <HAL_RCC_OscConfig+0x4ec>)
 800956a:	2200      	movs	r2, #0
 800956c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800956e:	f7fc faed 	bl	8005b4c <HAL_GetTick>
 8009572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009574:	e008      	b.n	8009588 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009576:	f7fc fae9 	bl	8005b4c <HAL_GetTick>
 800957a:	4602      	mov	r2, r0
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	1ad3      	subs	r3, r2, r3
 8009580:	2b02      	cmp	r3, #2
 8009582:	d901      	bls.n	8009588 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009584:	2303      	movs	r3, #3
 8009586:	e03f      	b.n	8009608 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009588:	4b22      	ldr	r3, [pc, #136]	; (8009614 <HAL_RCC_OscConfig+0x4e8>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1f0      	bne.n	8009576 <HAL_RCC_OscConfig+0x44a>
 8009594:	e037      	b.n	8009606 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	699b      	ldr	r3, [r3, #24]
 800959a:	2b01      	cmp	r3, #1
 800959c:	d101      	bne.n	80095a2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800959e:	2301      	movs	r3, #1
 80095a0:	e032      	b.n	8009608 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80095a2:	4b1c      	ldr	r3, [pc, #112]	; (8009614 <HAL_RCC_OscConfig+0x4e8>)
 80095a4:	685b      	ldr	r3, [r3, #4]
 80095a6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	699b      	ldr	r3, [r3, #24]
 80095ac:	2b01      	cmp	r3, #1
 80095ae:	d028      	beq.n	8009602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80095ba:	429a      	cmp	r2, r3
 80095bc:	d121      	bne.n	8009602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d11a      	bne.n	8009602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80095d2:	4013      	ands	r3, r2
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80095d8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80095da:	4293      	cmp	r3, r2
 80095dc:	d111      	bne.n	8009602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e8:	085b      	lsrs	r3, r3, #1
 80095ea:	3b01      	subs	r3, #1
 80095ec:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d107      	bne.n	8009602 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095fc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80095fe:	429a      	cmp	r2, r3
 8009600:	d001      	beq.n	8009606 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8009602:	2301      	movs	r3, #1
 8009604:	e000      	b.n	8009608 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009606:	2300      	movs	r3, #0
}
 8009608:	4618      	mov	r0, r3
 800960a:	3718      	adds	r7, #24
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}
 8009610:	40007000 	.word	0x40007000
 8009614:	40023800 	.word	0x40023800
 8009618:	42470060 	.word	0x42470060

0800961c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800961c:	b580      	push	{r7, lr}
 800961e:	b084      	sub	sp, #16
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d101      	bne.n	8009630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	e0cc      	b.n	80097ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009630:	4b68      	ldr	r3, [pc, #416]	; (80097d4 <HAL_RCC_ClockConfig+0x1b8>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	f003 0307 	and.w	r3, r3, #7
 8009638:	683a      	ldr	r2, [r7, #0]
 800963a:	429a      	cmp	r2, r3
 800963c:	d90c      	bls.n	8009658 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800963e:	4b65      	ldr	r3, [pc, #404]	; (80097d4 <HAL_RCC_ClockConfig+0x1b8>)
 8009640:	683a      	ldr	r2, [r7, #0]
 8009642:	b2d2      	uxtb	r2, r2
 8009644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009646:	4b63      	ldr	r3, [pc, #396]	; (80097d4 <HAL_RCC_ClockConfig+0x1b8>)
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f003 0307 	and.w	r3, r3, #7
 800964e:	683a      	ldr	r2, [r7, #0]
 8009650:	429a      	cmp	r2, r3
 8009652:	d001      	beq.n	8009658 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009654:	2301      	movs	r3, #1
 8009656:	e0b8      	b.n	80097ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f003 0302 	and.w	r3, r3, #2
 8009660:	2b00      	cmp	r3, #0
 8009662:	d020      	beq.n	80096a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f003 0304 	and.w	r3, r3, #4
 800966c:	2b00      	cmp	r3, #0
 800966e:	d005      	beq.n	800967c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009670:	4b59      	ldr	r3, [pc, #356]	; (80097d8 <HAL_RCC_ClockConfig+0x1bc>)
 8009672:	689b      	ldr	r3, [r3, #8]
 8009674:	4a58      	ldr	r2, [pc, #352]	; (80097d8 <HAL_RCC_ClockConfig+0x1bc>)
 8009676:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800967a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 0308 	and.w	r3, r3, #8
 8009684:	2b00      	cmp	r3, #0
 8009686:	d005      	beq.n	8009694 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009688:	4b53      	ldr	r3, [pc, #332]	; (80097d8 <HAL_RCC_ClockConfig+0x1bc>)
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	4a52      	ldr	r2, [pc, #328]	; (80097d8 <HAL_RCC_ClockConfig+0x1bc>)
 800968e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009692:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009694:	4b50      	ldr	r3, [pc, #320]	; (80097d8 <HAL_RCC_ClockConfig+0x1bc>)
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	494d      	ldr	r1, [pc, #308]	; (80097d8 <HAL_RCC_ClockConfig+0x1bc>)
 80096a2:	4313      	orrs	r3, r2
 80096a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f003 0301 	and.w	r3, r3, #1
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d044      	beq.n	800973c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d107      	bne.n	80096ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80096ba:	4b47      	ldr	r3, [pc, #284]	; (80097d8 <HAL_RCC_ClockConfig+0x1bc>)
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d119      	bne.n	80096fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096c6:	2301      	movs	r3, #1
 80096c8:	e07f      	b.n	80097ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	685b      	ldr	r3, [r3, #4]
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d003      	beq.n	80096da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80096d6:	2b03      	cmp	r3, #3
 80096d8:	d107      	bne.n	80096ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80096da:	4b3f      	ldr	r3, [pc, #252]	; (80097d8 <HAL_RCC_ClockConfig+0x1bc>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d109      	bne.n	80096fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096e6:	2301      	movs	r3, #1
 80096e8:	e06f      	b.n	80097ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80096ea:	4b3b      	ldr	r3, [pc, #236]	; (80097d8 <HAL_RCC_ClockConfig+0x1bc>)
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f003 0302 	and.w	r3, r3, #2
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d101      	bne.n	80096fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80096f6:	2301      	movs	r3, #1
 80096f8:	e067      	b.n	80097ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80096fa:	4b37      	ldr	r3, [pc, #220]	; (80097d8 <HAL_RCC_ClockConfig+0x1bc>)
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	f023 0203 	bic.w	r2, r3, #3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	4934      	ldr	r1, [pc, #208]	; (80097d8 <HAL_RCC_ClockConfig+0x1bc>)
 8009708:	4313      	orrs	r3, r2
 800970a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800970c:	f7fc fa1e 	bl	8005b4c <HAL_GetTick>
 8009710:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009712:	e00a      	b.n	800972a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009714:	f7fc fa1a 	bl	8005b4c <HAL_GetTick>
 8009718:	4602      	mov	r2, r0
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009722:	4293      	cmp	r3, r2
 8009724:	d901      	bls.n	800972a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009726:	2303      	movs	r3, #3
 8009728:	e04f      	b.n	80097ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800972a:	4b2b      	ldr	r3, [pc, #172]	; (80097d8 <HAL_RCC_ClockConfig+0x1bc>)
 800972c:	689b      	ldr	r3, [r3, #8]
 800972e:	f003 020c 	and.w	r2, r3, #12
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	685b      	ldr	r3, [r3, #4]
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	429a      	cmp	r2, r3
 800973a:	d1eb      	bne.n	8009714 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800973c:	4b25      	ldr	r3, [pc, #148]	; (80097d4 <HAL_RCC_ClockConfig+0x1b8>)
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 0307 	and.w	r3, r3, #7
 8009744:	683a      	ldr	r2, [r7, #0]
 8009746:	429a      	cmp	r2, r3
 8009748:	d20c      	bcs.n	8009764 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800974a:	4b22      	ldr	r3, [pc, #136]	; (80097d4 <HAL_RCC_ClockConfig+0x1b8>)
 800974c:	683a      	ldr	r2, [r7, #0]
 800974e:	b2d2      	uxtb	r2, r2
 8009750:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009752:	4b20      	ldr	r3, [pc, #128]	; (80097d4 <HAL_RCC_ClockConfig+0x1b8>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	f003 0307 	and.w	r3, r3, #7
 800975a:	683a      	ldr	r2, [r7, #0]
 800975c:	429a      	cmp	r2, r3
 800975e:	d001      	beq.n	8009764 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8009760:	2301      	movs	r3, #1
 8009762:	e032      	b.n	80097ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	f003 0304 	and.w	r3, r3, #4
 800976c:	2b00      	cmp	r3, #0
 800976e:	d008      	beq.n	8009782 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009770:	4b19      	ldr	r3, [pc, #100]	; (80097d8 <HAL_RCC_ClockConfig+0x1bc>)
 8009772:	689b      	ldr	r3, [r3, #8]
 8009774:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	4916      	ldr	r1, [pc, #88]	; (80097d8 <HAL_RCC_ClockConfig+0x1bc>)
 800977e:	4313      	orrs	r3, r2
 8009780:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	f003 0308 	and.w	r3, r3, #8
 800978a:	2b00      	cmp	r3, #0
 800978c:	d009      	beq.n	80097a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800978e:	4b12      	ldr	r3, [pc, #72]	; (80097d8 <HAL_RCC_ClockConfig+0x1bc>)
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	00db      	lsls	r3, r3, #3
 800979c:	490e      	ldr	r1, [pc, #56]	; (80097d8 <HAL_RCC_ClockConfig+0x1bc>)
 800979e:	4313      	orrs	r3, r2
 80097a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80097a2:	f000 f821 	bl	80097e8 <HAL_RCC_GetSysClockFreq>
 80097a6:	4602      	mov	r2, r0
 80097a8:	4b0b      	ldr	r3, [pc, #44]	; (80097d8 <HAL_RCC_ClockConfig+0x1bc>)
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	091b      	lsrs	r3, r3, #4
 80097ae:	f003 030f 	and.w	r3, r3, #15
 80097b2:	490a      	ldr	r1, [pc, #40]	; (80097dc <HAL_RCC_ClockConfig+0x1c0>)
 80097b4:	5ccb      	ldrb	r3, [r1, r3]
 80097b6:	fa22 f303 	lsr.w	r3, r2, r3
 80097ba:	4a09      	ldr	r2, [pc, #36]	; (80097e0 <HAL_RCC_ClockConfig+0x1c4>)
 80097bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80097be:	4b09      	ldr	r3, [pc, #36]	; (80097e4 <HAL_RCC_ClockConfig+0x1c8>)
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4618      	mov	r0, r3
 80097c4:	f7fb fbb8 	bl	8004f38 <HAL_InitTick>

  return HAL_OK;
 80097c8:	2300      	movs	r3, #0
}
 80097ca:	4618      	mov	r0, r3
 80097cc:	3710      	adds	r7, #16
 80097ce:	46bd      	mov	sp, r7
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	bf00      	nop
 80097d4:	40023c00 	.word	0x40023c00
 80097d8:	40023800 	.word	0x40023800
 80097dc:	0801a5cc 	.word	0x0801a5cc
 80097e0:	20000008 	.word	0x20000008
 80097e4:	20000034 	.word	0x20000034

080097e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80097e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80097ec:	b084      	sub	sp, #16
 80097ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80097f0:	2300      	movs	r3, #0
 80097f2:	607b      	str	r3, [r7, #4]
 80097f4:	2300      	movs	r3, #0
 80097f6:	60fb      	str	r3, [r7, #12]
 80097f8:	2300      	movs	r3, #0
 80097fa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80097fc:	2300      	movs	r3, #0
 80097fe:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009800:	4b67      	ldr	r3, [pc, #412]	; (80099a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	f003 030c 	and.w	r3, r3, #12
 8009808:	2b08      	cmp	r3, #8
 800980a:	d00d      	beq.n	8009828 <HAL_RCC_GetSysClockFreq+0x40>
 800980c:	2b08      	cmp	r3, #8
 800980e:	f200 80bd 	bhi.w	800998c <HAL_RCC_GetSysClockFreq+0x1a4>
 8009812:	2b00      	cmp	r3, #0
 8009814:	d002      	beq.n	800981c <HAL_RCC_GetSysClockFreq+0x34>
 8009816:	2b04      	cmp	r3, #4
 8009818:	d003      	beq.n	8009822 <HAL_RCC_GetSysClockFreq+0x3a>
 800981a:	e0b7      	b.n	800998c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800981c:	4b61      	ldr	r3, [pc, #388]	; (80099a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800981e:	60bb      	str	r3, [r7, #8]
       break;
 8009820:	e0b7      	b.n	8009992 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009822:	4b61      	ldr	r3, [pc, #388]	; (80099a8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8009824:	60bb      	str	r3, [r7, #8]
      break;
 8009826:	e0b4      	b.n	8009992 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009828:	4b5d      	ldr	r3, [pc, #372]	; (80099a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800982a:	685b      	ldr	r3, [r3, #4]
 800982c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009830:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009832:	4b5b      	ldr	r3, [pc, #364]	; (80099a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800983a:	2b00      	cmp	r3, #0
 800983c:	d04d      	beq.n	80098da <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800983e:	4b58      	ldr	r3, [pc, #352]	; (80099a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	099b      	lsrs	r3, r3, #6
 8009844:	461a      	mov	r2, r3
 8009846:	f04f 0300 	mov.w	r3, #0
 800984a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800984e:	f04f 0100 	mov.w	r1, #0
 8009852:	ea02 0800 	and.w	r8, r2, r0
 8009856:	ea03 0901 	and.w	r9, r3, r1
 800985a:	4640      	mov	r0, r8
 800985c:	4649      	mov	r1, r9
 800985e:	f04f 0200 	mov.w	r2, #0
 8009862:	f04f 0300 	mov.w	r3, #0
 8009866:	014b      	lsls	r3, r1, #5
 8009868:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800986c:	0142      	lsls	r2, r0, #5
 800986e:	4610      	mov	r0, r2
 8009870:	4619      	mov	r1, r3
 8009872:	ebb0 0008 	subs.w	r0, r0, r8
 8009876:	eb61 0109 	sbc.w	r1, r1, r9
 800987a:	f04f 0200 	mov.w	r2, #0
 800987e:	f04f 0300 	mov.w	r3, #0
 8009882:	018b      	lsls	r3, r1, #6
 8009884:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009888:	0182      	lsls	r2, r0, #6
 800988a:	1a12      	subs	r2, r2, r0
 800988c:	eb63 0301 	sbc.w	r3, r3, r1
 8009890:	f04f 0000 	mov.w	r0, #0
 8009894:	f04f 0100 	mov.w	r1, #0
 8009898:	00d9      	lsls	r1, r3, #3
 800989a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800989e:	00d0      	lsls	r0, r2, #3
 80098a0:	4602      	mov	r2, r0
 80098a2:	460b      	mov	r3, r1
 80098a4:	eb12 0208 	adds.w	r2, r2, r8
 80098a8:	eb43 0309 	adc.w	r3, r3, r9
 80098ac:	f04f 0000 	mov.w	r0, #0
 80098b0:	f04f 0100 	mov.w	r1, #0
 80098b4:	0259      	lsls	r1, r3, #9
 80098b6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80098ba:	0250      	lsls	r0, r2, #9
 80098bc:	4602      	mov	r2, r0
 80098be:	460b      	mov	r3, r1
 80098c0:	4610      	mov	r0, r2
 80098c2:	4619      	mov	r1, r3
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	461a      	mov	r2, r3
 80098c8:	f04f 0300 	mov.w	r3, #0
 80098cc:	f7f7 f9bc 	bl	8000c48 <__aeabi_uldivmod>
 80098d0:	4602      	mov	r2, r0
 80098d2:	460b      	mov	r3, r1
 80098d4:	4613      	mov	r3, r2
 80098d6:	60fb      	str	r3, [r7, #12]
 80098d8:	e04a      	b.n	8009970 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80098da:	4b31      	ldr	r3, [pc, #196]	; (80099a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	099b      	lsrs	r3, r3, #6
 80098e0:	461a      	mov	r2, r3
 80098e2:	f04f 0300 	mov.w	r3, #0
 80098e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80098ea:	f04f 0100 	mov.w	r1, #0
 80098ee:	ea02 0400 	and.w	r4, r2, r0
 80098f2:	ea03 0501 	and.w	r5, r3, r1
 80098f6:	4620      	mov	r0, r4
 80098f8:	4629      	mov	r1, r5
 80098fa:	f04f 0200 	mov.w	r2, #0
 80098fe:	f04f 0300 	mov.w	r3, #0
 8009902:	014b      	lsls	r3, r1, #5
 8009904:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8009908:	0142      	lsls	r2, r0, #5
 800990a:	4610      	mov	r0, r2
 800990c:	4619      	mov	r1, r3
 800990e:	1b00      	subs	r0, r0, r4
 8009910:	eb61 0105 	sbc.w	r1, r1, r5
 8009914:	f04f 0200 	mov.w	r2, #0
 8009918:	f04f 0300 	mov.w	r3, #0
 800991c:	018b      	lsls	r3, r1, #6
 800991e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009922:	0182      	lsls	r2, r0, #6
 8009924:	1a12      	subs	r2, r2, r0
 8009926:	eb63 0301 	sbc.w	r3, r3, r1
 800992a:	f04f 0000 	mov.w	r0, #0
 800992e:	f04f 0100 	mov.w	r1, #0
 8009932:	00d9      	lsls	r1, r3, #3
 8009934:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009938:	00d0      	lsls	r0, r2, #3
 800993a:	4602      	mov	r2, r0
 800993c:	460b      	mov	r3, r1
 800993e:	1912      	adds	r2, r2, r4
 8009940:	eb45 0303 	adc.w	r3, r5, r3
 8009944:	f04f 0000 	mov.w	r0, #0
 8009948:	f04f 0100 	mov.w	r1, #0
 800994c:	0299      	lsls	r1, r3, #10
 800994e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8009952:	0290      	lsls	r0, r2, #10
 8009954:	4602      	mov	r2, r0
 8009956:	460b      	mov	r3, r1
 8009958:	4610      	mov	r0, r2
 800995a:	4619      	mov	r1, r3
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	461a      	mov	r2, r3
 8009960:	f04f 0300 	mov.w	r3, #0
 8009964:	f7f7 f970 	bl	8000c48 <__aeabi_uldivmod>
 8009968:	4602      	mov	r2, r0
 800996a:	460b      	mov	r3, r1
 800996c:	4613      	mov	r3, r2
 800996e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009970:	4b0b      	ldr	r3, [pc, #44]	; (80099a0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	0c1b      	lsrs	r3, r3, #16
 8009976:	f003 0303 	and.w	r3, r3, #3
 800997a:	3301      	adds	r3, #1
 800997c:	005b      	lsls	r3, r3, #1
 800997e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	fbb2 f3f3 	udiv	r3, r2, r3
 8009988:	60bb      	str	r3, [r7, #8]
      break;
 800998a:	e002      	b.n	8009992 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800998c:	4b05      	ldr	r3, [pc, #20]	; (80099a4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800998e:	60bb      	str	r3, [r7, #8]
      break;
 8009990:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009992:	68bb      	ldr	r3, [r7, #8]
}
 8009994:	4618      	mov	r0, r3
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800999e:	bf00      	nop
 80099a0:	40023800 	.word	0x40023800
 80099a4:	00f42400 	.word	0x00f42400
 80099a8:	007a1200 	.word	0x007a1200

080099ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80099ac:	b480      	push	{r7}
 80099ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80099b0:	4b03      	ldr	r3, [pc, #12]	; (80099c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80099b2:	681b      	ldr	r3, [r3, #0]
}
 80099b4:	4618      	mov	r0, r3
 80099b6:	46bd      	mov	sp, r7
 80099b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099bc:	4770      	bx	lr
 80099be:	bf00      	nop
 80099c0:	20000008 	.word	0x20000008

080099c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80099c8:	f7ff fff0 	bl	80099ac <HAL_RCC_GetHCLKFreq>
 80099cc:	4602      	mov	r2, r0
 80099ce:	4b05      	ldr	r3, [pc, #20]	; (80099e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	0a9b      	lsrs	r3, r3, #10
 80099d4:	f003 0307 	and.w	r3, r3, #7
 80099d8:	4903      	ldr	r1, [pc, #12]	; (80099e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80099da:	5ccb      	ldrb	r3, [r1, r3]
 80099dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	bd80      	pop	{r7, pc}
 80099e4:	40023800 	.word	0x40023800
 80099e8:	0801a5dc 	.word	0x0801a5dc

080099ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
 80099f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	220f      	movs	r2, #15
 80099fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80099fc:	4b12      	ldr	r3, [pc, #72]	; (8009a48 <HAL_RCC_GetClockConfig+0x5c>)
 80099fe:	689b      	ldr	r3, [r3, #8]
 8009a00:	f003 0203 	and.w	r2, r3, #3
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009a08:	4b0f      	ldr	r3, [pc, #60]	; (8009a48 <HAL_RCC_GetClockConfig+0x5c>)
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8009a14:	4b0c      	ldr	r3, [pc, #48]	; (8009a48 <HAL_RCC_GetClockConfig+0x5c>)
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8009a20:	4b09      	ldr	r3, [pc, #36]	; (8009a48 <HAL_RCC_GetClockConfig+0x5c>)
 8009a22:	689b      	ldr	r3, [r3, #8]
 8009a24:	08db      	lsrs	r3, r3, #3
 8009a26:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009a2e:	4b07      	ldr	r3, [pc, #28]	; (8009a4c <HAL_RCC_GetClockConfig+0x60>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f003 0207 	and.w	r2, r3, #7
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	601a      	str	r2, [r3, #0]
}
 8009a3a:	bf00      	nop
 8009a3c:	370c      	adds	r7, #12
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a44:	4770      	bx	lr
 8009a46:	bf00      	nop
 8009a48:	40023800 	.word	0x40023800
 8009a4c:	40023c00 	.word	0x40023c00

08009a50 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b086      	sub	sp, #24
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009a58:	2300      	movs	r3, #0
 8009a5a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 0301 	and.w	r3, r3, #1
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d105      	bne.n	8009a78 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d035      	beq.n	8009ae4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009a78:	4b62      	ldr	r3, [pc, #392]	; (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009a7a:	2200      	movs	r2, #0
 8009a7c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009a7e:	f7fc f865 	bl	8005b4c <HAL_GetTick>
 8009a82:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009a84:	e008      	b.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009a86:	f7fc f861 	bl	8005b4c <HAL_GetTick>
 8009a8a:	4602      	mov	r2, r0
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	1ad3      	subs	r3, r2, r3
 8009a90:	2b02      	cmp	r3, #2
 8009a92:	d901      	bls.n	8009a98 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a94:	2303      	movs	r3, #3
 8009a96:	e0b0      	b.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009a98:	4b5b      	ldr	r3, [pc, #364]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1f0      	bne.n	8009a86 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	019a      	lsls	r2, r3, #6
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	689b      	ldr	r3, [r3, #8]
 8009aae:	071b      	lsls	r3, r3, #28
 8009ab0:	4955      	ldr	r1, [pc, #340]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009ab8:	4b52      	ldr	r3, [pc, #328]	; (8009c04 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009aba:	2201      	movs	r2, #1
 8009abc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009abe:	f7fc f845 	bl	8005b4c <HAL_GetTick>
 8009ac2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009ac4:	e008      	b.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8009ac6:	f7fc f841 	bl	8005b4c <HAL_GetTick>
 8009aca:	4602      	mov	r2, r0
 8009acc:	697b      	ldr	r3, [r7, #20]
 8009ace:	1ad3      	subs	r3, r2, r3
 8009ad0:	2b02      	cmp	r3, #2
 8009ad2:	d901      	bls.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009ad4:	2303      	movs	r3, #3
 8009ad6:	e090      	b.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009ad8:	4b4b      	ldr	r3, [pc, #300]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d0f0      	beq.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f003 0302 	and.w	r3, r3, #2
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f000 8083 	beq.w	8009bf8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009af2:	2300      	movs	r3, #0
 8009af4:	60fb      	str	r3, [r7, #12]
 8009af6:	4b44      	ldr	r3, [pc, #272]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009afa:	4a43      	ldr	r2, [pc, #268]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009afc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009b00:	6413      	str	r3, [r2, #64]	; 0x40
 8009b02:	4b41      	ldr	r3, [pc, #260]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b0a:	60fb      	str	r3, [r7, #12]
 8009b0c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009b0e:	4b3f      	ldr	r3, [pc, #252]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a3e      	ldr	r2, [pc, #248]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009b18:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009b1a:	f7fc f817 	bl	8005b4c <HAL_GetTick>
 8009b1e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009b20:	e008      	b.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009b22:	f7fc f813 	bl	8005b4c <HAL_GetTick>
 8009b26:	4602      	mov	r2, r0
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	1ad3      	subs	r3, r2, r3
 8009b2c:	2b02      	cmp	r3, #2
 8009b2e:	d901      	bls.n	8009b34 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8009b30:	2303      	movs	r3, #3
 8009b32:	e062      	b.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8009b34:	4b35      	ldr	r3, [pc, #212]	; (8009c0c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d0f0      	beq.n	8009b22 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009b40:	4b31      	ldr	r3, [pc, #196]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b48:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009b4a:	693b      	ldr	r3, [r7, #16]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d02f      	beq.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009b58:	693a      	ldr	r2, [r7, #16]
 8009b5a:	429a      	cmp	r2, r3
 8009b5c:	d028      	beq.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009b5e:	4b2a      	ldr	r3, [pc, #168]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b66:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009b68:	4b29      	ldr	r3, [pc, #164]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009b6e:	4b28      	ldr	r3, [pc, #160]	; (8009c10 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009b70:	2200      	movs	r2, #0
 8009b72:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8009b74:	4a24      	ldr	r2, [pc, #144]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b76:	693b      	ldr	r3, [r7, #16]
 8009b78:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009b7a:	4b23      	ldr	r3, [pc, #140]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009b7e:	f003 0301 	and.w	r3, r3, #1
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d114      	bne.n	8009bb0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8009b86:	f7fb ffe1 	bl	8005b4c <HAL_GetTick>
 8009b8a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009b8c:	e00a      	b.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009b8e:	f7fb ffdd 	bl	8005b4c <HAL_GetTick>
 8009b92:	4602      	mov	r2, r0
 8009b94:	697b      	ldr	r3, [r7, #20]
 8009b96:	1ad3      	subs	r3, r2, r3
 8009b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d901      	bls.n	8009ba4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	e02a      	b.n	8009bfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009ba4:	4b18      	ldr	r3, [pc, #96]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009ba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ba8:	f003 0302 	and.w	r3, r3, #2
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d0ee      	beq.n	8009b8e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	68db      	ldr	r3, [r3, #12]
 8009bb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009bbc:	d10d      	bne.n	8009bda <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8009bbe:	4b12      	ldr	r3, [pc, #72]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8009bce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009bd2:	490d      	ldr	r1, [pc, #52]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	608b      	str	r3, [r1, #8]
 8009bd8:	e005      	b.n	8009be6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009bda:	4b0b      	ldr	r3, [pc, #44]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009bdc:	689b      	ldr	r3, [r3, #8]
 8009bde:	4a0a      	ldr	r2, [pc, #40]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009be0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009be4:	6093      	str	r3, [r2, #8]
 8009be6:	4b08      	ldr	r3, [pc, #32]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009be8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	68db      	ldr	r3, [r3, #12]
 8009bee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009bf2:	4905      	ldr	r1, [pc, #20]	; (8009c08 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3718      	adds	r7, #24
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	42470068 	.word	0x42470068
 8009c08:	40023800 	.word	0x40023800
 8009c0c:	40007000 	.word	0x40007000
 8009c10:	42470e40 	.word	0x42470e40

08009c14 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b082      	sub	sp, #8
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d101      	bne.n	8009c26 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8009c22:	2301      	movs	r3, #1
 8009c24:	e01c      	b.n	8009c60 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	795b      	ldrb	r3, [r3, #5]
 8009c2a:	b2db      	uxtb	r3, r3
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d105      	bne.n	8009c3c <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2200      	movs	r2, #0
 8009c34:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8009c36:	6878      	ldr	r0, [r7, #4]
 8009c38:	f7fa ffd8 	bl	8004bec <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2202      	movs	r2, #2
 8009c40:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	681a      	ldr	r2, [r3, #0]
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f042 0204 	orr.w	r2, r2, #4
 8009c50:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2201      	movs	r2, #1
 8009c56:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8009c5e:	2300      	movs	r3, #0
}
 8009c60:	4618      	mov	r0, r3
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}

08009c68 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b084      	sub	sp, #16
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c72:	2300      	movs	r3, #0
 8009c74:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	791b      	ldrb	r3, [r3, #4]
 8009c7a:	2b01      	cmp	r3, #1
 8009c7c:	d101      	bne.n	8009c82 <HAL_RNG_GenerateRandomNumber+0x1a>
 8009c7e:	2302      	movs	r3, #2
 8009c80:	e044      	b.n	8009d0c <HAL_RNG_GenerateRandomNumber+0xa4>
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2201      	movs	r2, #1
 8009c86:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	795b      	ldrb	r3, [r3, #5]
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d133      	bne.n	8009cfa <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2202      	movs	r2, #2
 8009c96:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009c98:	f7fb ff58 	bl	8005b4c <HAL_GetTick>
 8009c9c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8009c9e:	e018      	b.n	8009cd2 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8009ca0:	f7fb ff54 	bl	8005b4c <HAL_GetTick>
 8009ca4:	4602      	mov	r2, r0
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	1ad3      	subs	r3, r2, r3
 8009caa:	2b02      	cmp	r3, #2
 8009cac:	d911      	bls.n	8009cd2 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	685b      	ldr	r3, [r3, #4]
 8009cb4:	f003 0301 	and.w	r3, r3, #1
 8009cb8:	2b01      	cmp	r3, #1
 8009cba:	d00a      	beq.n	8009cd2 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2202      	movs	r2, #2
 8009cc6:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2200      	movs	r2, #0
 8009ccc:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e01c      	b.n	8009d0c <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	f003 0301 	and.w	r3, r3, #1
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d1df      	bne.n	8009ca0 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	689a      	ldr	r2, [r3, #8]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	68da      	ldr	r2, [r3, #12]
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2201      	movs	r2, #1
 8009cf6:	715a      	strb	r2, [r3, #5]
 8009cf8:	e004      	b.n	8009d04 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2204      	movs	r2, #4
 8009cfe:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8009d00:	2301      	movs	r3, #1
 8009d02:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2200      	movs	r2, #0
 8009d08:	711a      	strb	r2, [r3, #4]

  return status;
 8009d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	3710      	adds	r7, #16
 8009d10:	46bd      	mov	sp, r7
 8009d12:	bd80      	pop	{r7, pc}

08009d14 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8009d14:	b580      	push	{r7, lr}
 8009d16:	b082      	sub	sp, #8
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	330c      	adds	r3, #12
 8009d20:	4619      	mov	r1, r3
 8009d22:	6878      	ldr	r0, [r7, #4]
 8009d24:	f7ff ffa0 	bl	8009c68 <HAL_RNG_GenerateRandomNumber>
 8009d28:	4603      	mov	r3, r0
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d102      	bne.n	8009d34 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	e000      	b.n	8009d36 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8009d34:	2300      	movs	r3, #0
  }
}
 8009d36:	4618      	mov	r0, r3
 8009d38:	3708      	adds	r7, #8
 8009d3a:	46bd      	mov	sp, r7
 8009d3c:	bd80      	pop	{r7, pc}

08009d3e <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009d3e:	b580      	push	{r7, lr}
 8009d40:	b082      	sub	sp, #8
 8009d42:	af00      	add	r7, sp, #0
 8009d44:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d101      	bne.n	8009d50 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e083      	b.n	8009e58 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	7f5b      	ldrb	r3, [r3, #29]
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d105      	bne.n	8009d66 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	2200      	movs	r2, #0
 8009d5e:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009d60:	6878      	ldr	r0, [r7, #4]
 8009d62:	f7fa ff65 	bl	8004c30 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	2202      	movs	r2, #2
 8009d6a:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	22ca      	movs	r2, #202	; 0xca
 8009d72:	625a      	str	r2, [r3, #36]	; 0x24
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	2253      	movs	r2, #83	; 0x53
 8009d7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 fbc0 	bl	800a502 <RTC_EnterInitMode>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d008      	beq.n	8009d9a <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	22ff      	movs	r2, #255	; 0xff
 8009d8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	2204      	movs	r2, #4
 8009d94:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009d96:	2301      	movs	r3, #1
 8009d98:	e05e      	b.n	8009e58 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	689b      	ldr	r3, [r3, #8]
 8009da0:	687a      	ldr	r2, [r7, #4]
 8009da2:	6812      	ldr	r2, [r2, #0]
 8009da4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dac:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	6899      	ldr	r1, [r3, #8]
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	685a      	ldr	r2, [r3, #4]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	691b      	ldr	r3, [r3, #16]
 8009dbc:	431a      	orrs	r2, r3
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	695b      	ldr	r3, [r3, #20]
 8009dc2:	431a      	orrs	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	430a      	orrs	r2, r1
 8009dca:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	68d2      	ldr	r2, [r2, #12]
 8009dd4:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	6919      	ldr	r1, [r3, #16]
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	689b      	ldr	r3, [r3, #8]
 8009de0:	041a      	lsls	r2, r3, #16
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	430a      	orrs	r2, r1
 8009de8:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68da      	ldr	r2, [r3, #12]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009df8:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	f003 0320 	and.w	r3, r3, #32
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d10e      	bne.n	8009e26 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009e08:	6878      	ldr	r0, [r7, #4]
 8009e0a:	f000 fb52 	bl	800a4b2 <HAL_RTC_WaitForSynchro>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d008      	beq.n	8009e26 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	22ff      	movs	r2, #255	; 0xff
 8009e1a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2204      	movs	r2, #4
 8009e20:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8009e22:	2301      	movs	r3, #1
 8009e24:	e018      	b.n	8009e58 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009e34:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	699a      	ldr	r2, [r3, #24]
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	430a      	orrs	r2, r1
 8009e46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	22ff      	movs	r2, #255	; 0xff
 8009e4e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2201      	movs	r2, #1
 8009e54:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8009e56:	2300      	movs	r3, #0
  }
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	3708      	adds	r7, #8
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	bd80      	pop	{r7, pc}

08009e60 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009e60:	b590      	push	{r4, r7, lr}
 8009e62:	b087      	sub	sp, #28
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	7f1b      	ldrb	r3, [r3, #28]
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d101      	bne.n	8009e7c <HAL_RTC_SetTime+0x1c>
 8009e78:	2302      	movs	r3, #2
 8009e7a:	e0aa      	b.n	8009fd2 <HAL_RTC_SetTime+0x172>
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	2202      	movs	r2, #2
 8009e86:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d126      	bne.n	8009edc <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	689b      	ldr	r3, [r3, #8]
 8009e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d102      	bne.n	8009ea2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f000 fb57 	bl	800a55a <RTC_ByteToBcd2>
 8009eac:	4603      	mov	r3, r0
 8009eae:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	785b      	ldrb	r3, [r3, #1]
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	f000 fb50 	bl	800a55a <RTC_ByteToBcd2>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009ebe:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	789b      	ldrb	r3, [r3, #2]
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f000 fb48 	bl	800a55a <RTC_ByteToBcd2>
 8009eca:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8009ecc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	78db      	ldrb	r3, [r3, #3]
 8009ed4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	617b      	str	r3, [r7, #20]
 8009eda:	e018      	b.n	8009f0e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	689b      	ldr	r3, [r3, #8]
 8009ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d102      	bne.n	8009ef0 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	2200      	movs	r2, #0
 8009eee:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009ef0:	68bb      	ldr	r3, [r7, #8]
 8009ef2:	781b      	ldrb	r3, [r3, #0]
 8009ef4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009ef6:	68bb      	ldr	r3, [r7, #8]
 8009ef8:	785b      	ldrb	r3, [r3, #1]
 8009efa:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009efc:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009efe:	68ba      	ldr	r2, [r7, #8]
 8009f00:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8009f02:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	78db      	ldrb	r3, [r3, #3]
 8009f08:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	22ca      	movs	r2, #202	; 0xca
 8009f14:	625a      	str	r2, [r3, #36]	; 0x24
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2253      	movs	r2, #83	; 0x53
 8009f1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009f1e:	68f8      	ldr	r0, [r7, #12]
 8009f20:	f000 faef 	bl	800a502 <RTC_EnterInitMode>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d00b      	beq.n	8009f42 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	22ff      	movs	r2, #255	; 0xff
 8009f30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	2204      	movs	r2, #4
 8009f36:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e047      	b.n	8009fd2 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	697b      	ldr	r3, [r7, #20]
 8009f48:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8009f4c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8009f50:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	689a      	ldr	r2, [r3, #8]
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009f60:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009f62:	68fb      	ldr	r3, [r7, #12]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	6899      	ldr	r1, [r3, #8]
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	68da      	ldr	r2, [r3, #12]
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	691b      	ldr	r3, [r3, #16]
 8009f70:	431a      	orrs	r2, r3
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	430a      	orrs	r2, r1
 8009f78:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	68da      	ldr	r2, [r3, #12]
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009f88:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	f003 0320 	and.w	r3, r3, #32
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d111      	bne.n	8009fbc <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f000 fa8a 	bl	800a4b2 <HAL_RTC_WaitForSynchro>
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d00b      	beq.n	8009fbc <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	22ff      	movs	r2, #255	; 0xff
 8009faa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	2204      	movs	r2, #4
 8009fb0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	e00a      	b.n	8009fd2 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	22ff      	movs	r2, #255	; 0xff
 8009fc2:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2200      	movs	r2, #0
 8009fce:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8009fd0:	2300      	movs	r3, #0
  }
}
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	371c      	adds	r7, #28
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd90      	pop	{r4, r7, pc}

08009fda <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b086      	sub	sp, #24
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	60f8      	str	r0, [r7, #12]
 8009fe2:	60b9      	str	r1, [r7, #8]
 8009fe4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	691b      	ldr	r3, [r3, #16]
 8009ffa:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009ffe:	68bb      	ldr	r3, [r7, #8]
 800a000:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a00c:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a010:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800a012:	697b      	ldr	r3, [r7, #20]
 800a014:	0c1b      	lsrs	r3, r3, #16
 800a016:	b2db      	uxtb	r3, r3
 800a018:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a01c:	b2da      	uxtb	r2, r3
 800a01e:	68bb      	ldr	r3, [r7, #8]
 800a020:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	0a1b      	lsrs	r3, r3, #8
 800a026:	b2db      	uxtb	r3, r3
 800a028:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a02c:	b2da      	uxtb	r2, r3
 800a02e:	68bb      	ldr	r3, [r7, #8]
 800a030:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800a032:	697b      	ldr	r3, [r7, #20]
 800a034:	b2db      	uxtb	r3, r3
 800a036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a03a:	b2da      	uxtb	r2, r3
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	0c1b      	lsrs	r3, r3, #16
 800a044:	b2db      	uxtb	r3, r3
 800a046:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a04a:	b2da      	uxtb	r2, r3
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d11a      	bne.n	800a08c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	781b      	ldrb	r3, [r3, #0]
 800a05a:	4618      	mov	r0, r3
 800a05c:	f000 fa9b 	bl	800a596 <RTC_Bcd2ToByte>
 800a060:	4603      	mov	r3, r0
 800a062:	461a      	mov	r2, r3
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	785b      	ldrb	r3, [r3, #1]
 800a06c:	4618      	mov	r0, r3
 800a06e:	f000 fa92 	bl	800a596 <RTC_Bcd2ToByte>
 800a072:	4603      	mov	r3, r0
 800a074:	461a      	mov	r2, r3
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	789b      	ldrb	r3, [r3, #2]
 800a07e:	4618      	mov	r0, r3
 800a080:	f000 fa89 	bl	800a596 <RTC_Bcd2ToByte>
 800a084:	4603      	mov	r3, r0
 800a086:	461a      	mov	r2, r3
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a08c:	2300      	movs	r3, #0
}
 800a08e:	4618      	mov	r0, r3
 800a090:	3718      	adds	r7, #24
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}

0800a096 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a096:	b590      	push	{r4, r7, lr}
 800a098:	b087      	sub	sp, #28
 800a09a:	af00      	add	r7, sp, #0
 800a09c:	60f8      	str	r0, [r7, #12]
 800a09e:	60b9      	str	r1, [r7, #8]
 800a0a0:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	7f1b      	ldrb	r3, [r3, #28]
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d101      	bne.n	800a0b2 <HAL_RTC_SetDate+0x1c>
 800a0ae:	2302      	movs	r3, #2
 800a0b0:	e094      	b.n	800a1dc <HAL_RTC_SetDate+0x146>
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2202      	movs	r2, #2
 800a0bc:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d10e      	bne.n	800a0e2 <HAL_RTC_SetDate+0x4c>
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	785b      	ldrb	r3, [r3, #1]
 800a0c8:	f003 0310 	and.w	r3, r3, #16
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d008      	beq.n	800a0e2 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	785b      	ldrb	r3, [r3, #1]
 800a0d4:	f023 0310 	bic.w	r3, r3, #16
 800a0d8:	b2db      	uxtb	r3, r3
 800a0da:	330a      	adds	r3, #10
 800a0dc:	b2da      	uxtb	r2, r3
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d11c      	bne.n	800a122 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a0e8:	68bb      	ldr	r3, [r7, #8]
 800a0ea:	78db      	ldrb	r3, [r3, #3]
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f000 fa34 	bl	800a55a <RTC_ByteToBcd2>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	785b      	ldrb	r3, [r3, #1]
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f000 fa2d 	bl	800a55a <RTC_ByteToBcd2>
 800a100:	4603      	mov	r3, r0
 800a102:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a104:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	789b      	ldrb	r3, [r3, #2]
 800a10a:	4618      	mov	r0, r3
 800a10c:	f000 fa25 	bl	800a55a <RTC_ByteToBcd2>
 800a110:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800a112:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a11c:	4313      	orrs	r3, r2
 800a11e:	617b      	str	r3, [r7, #20]
 800a120:	e00e      	b.n	800a140 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a122:	68bb      	ldr	r3, [r7, #8]
 800a124:	78db      	ldrb	r3, [r3, #3]
 800a126:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	785b      	ldrb	r3, [r3, #1]
 800a12c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a12e:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a130:	68ba      	ldr	r2, [r7, #8]
 800a132:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800a134:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800a136:	68bb      	ldr	r3, [r7, #8]
 800a138:	781b      	ldrb	r3, [r3, #0]
 800a13a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a13c:	4313      	orrs	r3, r2
 800a13e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	22ca      	movs	r2, #202	; 0xca
 800a146:	625a      	str	r2, [r3, #36]	; 0x24
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	2253      	movs	r2, #83	; 0x53
 800a14e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a150:	68f8      	ldr	r0, [r7, #12]
 800a152:	f000 f9d6 	bl	800a502 <RTC_EnterInitMode>
 800a156:	4603      	mov	r3, r0
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d00b      	beq.n	800a174 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	22ff      	movs	r2, #255	; 0xff
 800a162:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	2204      	movs	r2, #4
 800a168:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	2200      	movs	r2, #0
 800a16e:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a170:	2301      	movs	r3, #1
 800a172:	e033      	b.n	800a1dc <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	681a      	ldr	r2, [r3, #0]
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a17e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a182:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	68da      	ldr	r2, [r3, #12]
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a192:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	f003 0320 	and.w	r3, r3, #32
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d111      	bne.n	800a1c6 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a1a2:	68f8      	ldr	r0, [r7, #12]
 800a1a4:	f000 f985 	bl	800a4b2 <HAL_RTC_WaitForSynchro>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d00b      	beq.n	800a1c6 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	22ff      	movs	r2, #255	; 0xff
 800a1b4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2204      	movs	r2, #4
 800a1ba:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e00a      	b.n	800a1dc <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	22ff      	movs	r2, #255	; 0xff
 800a1cc:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	2201      	movs	r2, #1
 800a1d2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800a1da:	2300      	movs	r3, #0
  }
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	371c      	adds	r7, #28
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd90      	pop	{r4, r7, pc}

0800a1e4 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b086      	sub	sp, #24
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	60f8      	str	r0, [r7, #12]
 800a1ec:	60b9      	str	r1, [r7, #8]
 800a1ee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	685b      	ldr	r3, [r3, #4]
 800a1fa:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a1fe:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a202:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800a204:	697b      	ldr	r3, [r7, #20]
 800a206:	0c1b      	lsrs	r3, r3, #16
 800a208:	b2da      	uxtb	r2, r3
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	0a1b      	lsrs	r3, r3, #8
 800a212:	b2db      	uxtb	r3, r3
 800a214:	f003 031f 	and.w	r3, r3, #31
 800a218:	b2da      	uxtb	r2, r3
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	b2db      	uxtb	r3, r3
 800a222:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a226:	b2da      	uxtb	r2, r3
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	0b5b      	lsrs	r3, r3, #13
 800a230:	b2db      	uxtb	r3, r3
 800a232:	f003 0307 	and.w	r3, r3, #7
 800a236:	b2da      	uxtb	r2, r3
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d11a      	bne.n	800a278 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800a242:	68bb      	ldr	r3, [r7, #8]
 800a244:	78db      	ldrb	r3, [r3, #3]
 800a246:	4618      	mov	r0, r3
 800a248:	f000 f9a5 	bl	800a596 <RTC_Bcd2ToByte>
 800a24c:	4603      	mov	r3, r0
 800a24e:	461a      	mov	r2, r3
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800a254:	68bb      	ldr	r3, [r7, #8]
 800a256:	785b      	ldrb	r3, [r3, #1]
 800a258:	4618      	mov	r0, r3
 800a25a:	f000 f99c 	bl	800a596 <RTC_Bcd2ToByte>
 800a25e:	4603      	mov	r3, r0
 800a260:	461a      	mov	r2, r3
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	789b      	ldrb	r3, [r3, #2]
 800a26a:	4618      	mov	r0, r3
 800a26c:	f000 f993 	bl	800a596 <RTC_Bcd2ToByte>
 800a270:	4603      	mov	r3, r0
 800a272:	461a      	mov	r2, r3
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800a278:	2300      	movs	r3, #0
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3718      	adds	r7, #24
 800a27e:	46bd      	mov	sp, r7
 800a280:	bd80      	pop	{r7, pc}

0800a282 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800a282:	b590      	push	{r4, r7, lr}
 800a284:	b089      	sub	sp, #36	; 0x24
 800a286:	af00      	add	r7, sp, #0
 800a288:	60f8      	str	r0, [r7, #12]
 800a28a:	60b9      	str	r1, [r7, #8]
 800a28c:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800a28e:	2300      	movs	r3, #0
 800a290:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800a292:	2300      	movs	r3, #0
 800a294:	61fb      	str	r3, [r7, #28]
 800a296:	2300      	movs	r3, #0
 800a298:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	7f1b      	ldrb	r3, [r3, #28]
 800a29e:	2b01      	cmp	r3, #1
 800a2a0:	d101      	bne.n	800a2a6 <HAL_RTC_SetAlarm+0x24>
 800a2a2:	2302      	movs	r3, #2
 800a2a4:	e101      	b.n	800a4aa <HAL_RTC_SetAlarm+0x228>
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2201      	movs	r2, #1
 800a2aa:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	2202      	movs	r2, #2
 800a2b0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d137      	bne.n	800a328 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d102      	bne.n	800a2cc <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a2c6:	68bb      	ldr	r3, [r7, #8]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	781b      	ldrb	r3, [r3, #0]
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f000 f942 	bl	800a55a <RTC_ByteToBcd2>
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	785b      	ldrb	r3, [r3, #1]
 800a2de:	4618      	mov	r0, r3
 800a2e0:	f000 f93b 	bl	800a55a <RTC_ByteToBcd2>
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a2e8:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a2ea:	68bb      	ldr	r3, [r7, #8]
 800a2ec:	789b      	ldrb	r3, [r3, #2]
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	f000 f933 	bl	800a55a <RTC_ByteToBcd2>
 800a2f4:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a2f6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	78db      	ldrb	r3, [r3, #3]
 800a2fe:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800a300:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a30a:	4618      	mov	r0, r3
 800a30c:	f000 f925 	bl	800a55a <RTC_ByteToBcd2>
 800a310:	4603      	mov	r3, r0
 800a312:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a314:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a31c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800a322:	4313      	orrs	r3, r2
 800a324:	61fb      	str	r3, [r7, #28]
 800a326:	e023      	b.n	800a370 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	689b      	ldr	r3, [r3, #8]
 800a32e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a332:	2b00      	cmp	r3, #0
 800a334:	d102      	bne.n	800a33c <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	2200      	movs	r2, #0
 800a33a:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	785b      	ldrb	r3, [r3, #1]
 800a346:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a348:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a34a:	68ba      	ldr	r2, [r7, #8]
 800a34c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800a34e:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a350:	68bb      	ldr	r3, [r7, #8]
 800a352:	78db      	ldrb	r3, [r3, #3]
 800a354:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800a356:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a358:	68bb      	ldr	r3, [r7, #8]
 800a35a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a35e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800a360:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800a366:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800a36c:	4313      	orrs	r3, r2
 800a36e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800a370:	68bb      	ldr	r3, [r7, #8]
 800a372:	685a      	ldr	r2, [r3, #4]
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	699b      	ldr	r3, [r3, #24]
 800a378:	4313      	orrs	r3, r2
 800a37a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	22ca      	movs	r2, #202	; 0xca
 800a382:	625a      	str	r2, [r3, #36]	; 0x24
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	2253      	movs	r2, #83	; 0x53
 800a38a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a390:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a394:	d13f      	bne.n	800a416 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	689a      	ldr	r2, [r3, #8]
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a3a4:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	689a      	ldr	r2, [r3, #8]
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a3b4:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a3b6:	f7fb fbc9 	bl	8005b4c <HAL_GetTick>
 800a3ba:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a3bc:	e013      	b.n	800a3e6 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a3be:	f7fb fbc5 	bl	8005b4c <HAL_GetTick>
 800a3c2:	4602      	mov	r2, r0
 800a3c4:	69bb      	ldr	r3, [r7, #24]
 800a3c6:	1ad3      	subs	r3, r2, r3
 800a3c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3cc:	d90b      	bls.n	800a3e6 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	22ff      	movs	r2, #255	; 0xff
 800a3d4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2203      	movs	r2, #3
 800a3da:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a3e2:	2303      	movs	r3, #3
 800a3e4:	e061      	b.n	800a4aa <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	68db      	ldr	r3, [r3, #12]
 800a3ec:	f003 0301 	and.w	r3, r3, #1
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d0e4      	beq.n	800a3be <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	69fa      	ldr	r2, [r7, #28]
 800a3fa:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	697a      	ldr	r2, [r7, #20]
 800a402:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	689a      	ldr	r2, [r3, #8]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a412:	609a      	str	r2, [r3, #8]
 800a414:	e03e      	b.n	800a494 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	689a      	ldr	r2, [r3, #8]
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a424:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	689a      	ldr	r2, [r3, #8]
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a434:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a436:	f7fb fb89 	bl	8005b4c <HAL_GetTick>
 800a43a:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a43c:	e013      	b.n	800a466 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a43e:	f7fb fb85 	bl	8005b4c <HAL_GetTick>
 800a442:	4602      	mov	r2, r0
 800a444:	69bb      	ldr	r3, [r7, #24]
 800a446:	1ad3      	subs	r3, r2, r3
 800a448:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a44c:	d90b      	bls.n	800a466 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	22ff      	movs	r2, #255	; 0xff
 800a454:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	2203      	movs	r2, #3
 800a45a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2200      	movs	r2, #0
 800a460:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a462:	2303      	movs	r3, #3
 800a464:	e021      	b.n	800a4aa <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	f003 0302 	and.w	r3, r3, #2
 800a470:	2b00      	cmp	r3, #0
 800a472:	d0e4      	beq.n	800a43e <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	69fa      	ldr	r2, [r7, #28]
 800a47a:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	697a      	ldr	r2, [r7, #20]
 800a482:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	689a      	ldr	r2, [r3, #8]
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	681b      	ldr	r3, [r3, #0]
 800a48e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a492:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	22ff      	movs	r2, #255	; 0xff
 800a49a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2201      	movs	r2, #1
 800a4a0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a4a8:	2300      	movs	r3, #0
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3724      	adds	r7, #36	; 0x24
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd90      	pop	{r4, r7, pc}

0800a4b2 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a4b2:	b580      	push	{r7, lr}
 800a4b4:	b084      	sub	sp, #16
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	68da      	ldr	r2, [r3, #12]
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a4cc:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a4ce:	f7fb fb3d 	bl	8005b4c <HAL_GetTick>
 800a4d2:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a4d4:	e009      	b.n	800a4ea <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a4d6:	f7fb fb39 	bl	8005b4c <HAL_GetTick>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	1ad3      	subs	r3, r2, r3
 800a4e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a4e4:	d901      	bls.n	800a4ea <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a4e6:	2303      	movs	r3, #3
 800a4e8:	e007      	b.n	800a4fa <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	68db      	ldr	r3, [r3, #12]
 800a4f0:	f003 0320 	and.w	r3, r3, #32
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d0ee      	beq.n	800a4d6 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a4f8:	2300      	movs	r3, #0
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	3710      	adds	r7, #16
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd80      	pop	{r7, pc}

0800a502 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b084      	sub	sp, #16
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a50a:	2300      	movs	r3, #0
 800a50c:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d119      	bne.n	800a550 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a524:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a526:	f7fb fb11 	bl	8005b4c <HAL_GetTick>
 800a52a:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a52c:	e009      	b.n	800a542 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a52e:	f7fb fb0d 	bl	8005b4c <HAL_GetTick>
 800a532:	4602      	mov	r2, r0
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	1ad3      	subs	r3, r2, r3
 800a538:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a53c:	d901      	bls.n	800a542 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a53e:	2303      	movs	r3, #3
 800a540:	e007      	b.n	800a552 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	68db      	ldr	r3, [r3, #12]
 800a548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d0ee      	beq.n	800a52e <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a550:	2300      	movs	r3, #0
}
 800a552:	4618      	mov	r0, r3
 800a554:	3710      	adds	r7, #16
 800a556:	46bd      	mov	sp, r7
 800a558:	bd80      	pop	{r7, pc}

0800a55a <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a55a:	b480      	push	{r7}
 800a55c:	b085      	sub	sp, #20
 800a55e:	af00      	add	r7, sp, #0
 800a560:	4603      	mov	r3, r0
 800a562:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800a564:	2300      	movs	r3, #0
 800a566:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800a568:	e005      	b.n	800a576 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	3301      	adds	r3, #1
 800a56e:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800a570:	79fb      	ldrb	r3, [r7, #7]
 800a572:	3b0a      	subs	r3, #10
 800a574:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800a576:	79fb      	ldrb	r3, [r7, #7]
 800a578:	2b09      	cmp	r3, #9
 800a57a:	d8f6      	bhi.n	800a56a <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	011b      	lsls	r3, r3, #4
 800a582:	b2da      	uxtb	r2, r3
 800a584:	79fb      	ldrb	r3, [r7, #7]
 800a586:	4313      	orrs	r3, r2
 800a588:	b2db      	uxtb	r3, r3
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3714      	adds	r7, #20
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a596:	b480      	push	{r7}
 800a598:	b085      	sub	sp, #20
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	4603      	mov	r3, r0
 800a59e:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800a5a4:	79fb      	ldrb	r3, [r7, #7]
 800a5a6:	091b      	lsrs	r3, r3, #4
 800a5a8:	b2db      	uxtb	r3, r3
 800a5aa:	461a      	mov	r2, r3
 800a5ac:	4613      	mov	r3, r2
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	4413      	add	r3, r2
 800a5b2:	005b      	lsls	r3, r3, #1
 800a5b4:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800a5b6:	79fb      	ldrb	r3, [r7, #7]
 800a5b8:	f003 030f 	and.w	r3, r3, #15
 800a5bc:	b2da      	uxtb	r2, r3
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	b2db      	uxtb	r3, r3
 800a5c2:	4413      	add	r3, r2
 800a5c4:	b2db      	uxtb	r3, r3
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3714      	adds	r7, #20
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d0:	4770      	bx	lr

0800a5d2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b082      	sub	sp, #8
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d101      	bne.n	800a5e4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a5e0:	2301      	movs	r3, #1
 800a5e2:	e07b      	b.n	800a6dc <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d108      	bne.n	800a5fe <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5f4:	d009      	beq.n	800a60a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	61da      	str	r2, [r3, #28]
 800a5fc:	e005      	b.n	800a60a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2200      	movs	r2, #0
 800a602:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a616:	b2db      	uxtb	r3, r3
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d106      	bne.n	800a62a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a624:	6878      	ldr	r0, [r7, #4]
 800a626:	f7fa fb2d 	bl	8004c84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2202      	movs	r2, #2
 800a62e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a640:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a652:	431a      	orrs	r2, r3
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	68db      	ldr	r3, [r3, #12]
 800a658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a65c:	431a      	orrs	r2, r3
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	691b      	ldr	r3, [r3, #16]
 800a662:	f003 0302 	and.w	r3, r3, #2
 800a666:	431a      	orrs	r2, r3
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	695b      	ldr	r3, [r3, #20]
 800a66c:	f003 0301 	and.w	r3, r3, #1
 800a670:	431a      	orrs	r2, r3
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	699b      	ldr	r3, [r3, #24]
 800a676:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a67a:	431a      	orrs	r2, r3
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	69db      	ldr	r3, [r3, #28]
 800a680:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a684:	431a      	orrs	r2, r3
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	6a1b      	ldr	r3, [r3, #32]
 800a68a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a68e:	ea42 0103 	orr.w	r1, r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a696:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	430a      	orrs	r2, r1
 800a6a0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	699b      	ldr	r3, [r3, #24]
 800a6a6:	0c1b      	lsrs	r3, r3, #16
 800a6a8:	f003 0104 	and.w	r1, r3, #4
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b0:	f003 0210 	and.w	r2, r3, #16
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	430a      	orrs	r2, r1
 800a6ba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	69da      	ldr	r2, [r3, #28]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a6ca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a6da:	2300      	movs	r3, #0
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3708      	adds	r7, #8
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b088      	sub	sp, #32
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	60f8      	str	r0, [r7, #12]
 800a6ec:	60b9      	str	r1, [r7, #8]
 800a6ee:	603b      	str	r3, [r7, #0]
 800a6f0:	4613      	mov	r3, r2
 800a6f2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a6fe:	2b01      	cmp	r3, #1
 800a700:	d101      	bne.n	800a706 <HAL_SPI_Transmit+0x22>
 800a702:	2302      	movs	r3, #2
 800a704:	e126      	b.n	800a954 <HAL_SPI_Transmit+0x270>
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2201      	movs	r2, #1
 800a70a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a70e:	f7fb fa1d 	bl	8005b4c <HAL_GetTick>
 800a712:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a714:	88fb      	ldrh	r3, [r7, #6]
 800a716:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a71e:	b2db      	uxtb	r3, r3
 800a720:	2b01      	cmp	r3, #1
 800a722:	d002      	beq.n	800a72a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a724:	2302      	movs	r3, #2
 800a726:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a728:	e10b      	b.n	800a942 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d002      	beq.n	800a736 <HAL_SPI_Transmit+0x52>
 800a730:	88fb      	ldrh	r3, [r7, #6]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d102      	bne.n	800a73c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a736:	2301      	movs	r3, #1
 800a738:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a73a:	e102      	b.n	800a942 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2203      	movs	r2, #3
 800a740:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	2200      	movs	r2, #0
 800a748:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	68ba      	ldr	r2, [r7, #8]
 800a74e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	88fa      	ldrh	r2, [r7, #6]
 800a754:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	88fa      	ldrh	r2, [r7, #6]
 800a75a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2200      	movs	r2, #0
 800a760:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2200      	movs	r2, #0
 800a766:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2200      	movs	r2, #0
 800a76c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	2200      	movs	r2, #0
 800a772:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2200      	movs	r2, #0
 800a778:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	689b      	ldr	r3, [r3, #8]
 800a77e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a782:	d10f      	bne.n	800a7a4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a792:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a7a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ae:	2b40      	cmp	r3, #64	; 0x40
 800a7b0:	d007      	beq.n	800a7c2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	681a      	ldr	r2, [r3, #0]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7c0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7ca:	d14b      	bne.n	800a864 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	685b      	ldr	r3, [r3, #4]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d002      	beq.n	800a7da <HAL_SPI_Transmit+0xf6>
 800a7d4:	8afb      	ldrh	r3, [r7, #22]
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d13e      	bne.n	800a858 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7de:	881a      	ldrh	r2, [r3, #0]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7ea:	1c9a      	adds	r2, r3, #2
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7f4:	b29b      	uxth	r3, r3
 800a7f6:	3b01      	subs	r3, #1
 800a7f8:	b29a      	uxth	r2, r3
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a7fe:	e02b      	b.n	800a858 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	f003 0302 	and.w	r3, r3, #2
 800a80a:	2b02      	cmp	r3, #2
 800a80c:	d112      	bne.n	800a834 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a812:	881a      	ldrh	r2, [r3, #0]
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a81e:	1c9a      	adds	r2, r3, #2
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a828:	b29b      	uxth	r3, r3
 800a82a:	3b01      	subs	r3, #1
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	86da      	strh	r2, [r3, #54]	; 0x36
 800a832:	e011      	b.n	800a858 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a834:	f7fb f98a 	bl	8005b4c <HAL_GetTick>
 800a838:	4602      	mov	r2, r0
 800a83a:	69bb      	ldr	r3, [r7, #24]
 800a83c:	1ad3      	subs	r3, r2, r3
 800a83e:	683a      	ldr	r2, [r7, #0]
 800a840:	429a      	cmp	r2, r3
 800a842:	d803      	bhi.n	800a84c <HAL_SPI_Transmit+0x168>
 800a844:	683b      	ldr	r3, [r7, #0]
 800a846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a84a:	d102      	bne.n	800a852 <HAL_SPI_Transmit+0x16e>
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d102      	bne.n	800a858 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a852:	2303      	movs	r3, #3
 800a854:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a856:	e074      	b.n	800a942 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d1ce      	bne.n	800a800 <HAL_SPI_Transmit+0x11c>
 800a862:	e04c      	b.n	800a8fe <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	685b      	ldr	r3, [r3, #4]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d002      	beq.n	800a872 <HAL_SPI_Transmit+0x18e>
 800a86c:	8afb      	ldrh	r3, [r7, #22]
 800a86e:	2b01      	cmp	r3, #1
 800a870:	d140      	bne.n	800a8f4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	330c      	adds	r3, #12
 800a87c:	7812      	ldrb	r2, [r2, #0]
 800a87e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a884:	1c5a      	adds	r2, r3, #1
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a88e:	b29b      	uxth	r3, r3
 800a890:	3b01      	subs	r3, #1
 800a892:	b29a      	uxth	r2, r3
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a898:	e02c      	b.n	800a8f4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	689b      	ldr	r3, [r3, #8]
 800a8a0:	f003 0302 	and.w	r3, r3, #2
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	d113      	bne.n	800a8d0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	330c      	adds	r3, #12
 800a8b2:	7812      	ldrb	r2, [r2, #0]
 800a8b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ba:	1c5a      	adds	r2, r3, #1
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8c4:	b29b      	uxth	r3, r3
 800a8c6:	3b01      	subs	r3, #1
 800a8c8:	b29a      	uxth	r2, r3
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	86da      	strh	r2, [r3, #54]	; 0x36
 800a8ce:	e011      	b.n	800a8f4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8d0:	f7fb f93c 	bl	8005b4c <HAL_GetTick>
 800a8d4:	4602      	mov	r2, r0
 800a8d6:	69bb      	ldr	r3, [r7, #24]
 800a8d8:	1ad3      	subs	r3, r2, r3
 800a8da:	683a      	ldr	r2, [r7, #0]
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d803      	bhi.n	800a8e8 <HAL_SPI_Transmit+0x204>
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8e6:	d102      	bne.n	800a8ee <HAL_SPI_Transmit+0x20a>
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d102      	bne.n	800a8f4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a8ee:	2303      	movs	r3, #3
 800a8f0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a8f2:	e026      	b.n	800a942 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d1cd      	bne.n	800a89a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a8fe:	69ba      	ldr	r2, [r7, #24]
 800a900:	6839      	ldr	r1, [r7, #0]
 800a902:	68f8      	ldr	r0, [r7, #12]
 800a904:	f000 fd02 	bl	800b30c <SPI_EndRxTxTransaction>
 800a908:	4603      	mov	r3, r0
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d002      	beq.n	800a914 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2220      	movs	r2, #32
 800a912:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	689b      	ldr	r3, [r3, #8]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d10a      	bne.n	800a932 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a91c:	2300      	movs	r3, #0
 800a91e:	613b      	str	r3, [r7, #16]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	68db      	ldr	r3, [r3, #12]
 800a926:	613b      	str	r3, [r7, #16]
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	689b      	ldr	r3, [r3, #8]
 800a92e:	613b      	str	r3, [r7, #16]
 800a930:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a936:	2b00      	cmp	r3, #0
 800a938:	d002      	beq.n	800a940 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
 800a93c:	77fb      	strb	r3, [r7, #31]
 800a93e:	e000      	b.n	800a942 <HAL_SPI_Transmit+0x25e>
  }

error:
 800a940:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2201      	movs	r2, #1
 800a946:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	2200      	movs	r2, #0
 800a94e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a952:	7ffb      	ldrb	r3, [r7, #31]
}
 800a954:	4618      	mov	r0, r3
 800a956:	3720      	adds	r7, #32
 800a958:	46bd      	mov	sp, r7
 800a95a:	bd80      	pop	{r7, pc}

0800a95c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800a95c:	b580      	push	{r7, lr}
 800a95e:	b08c      	sub	sp, #48	; 0x30
 800a960:	af00      	add	r7, sp, #0
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	60b9      	str	r1, [r7, #8]
 800a966:	607a      	str	r2, [r7, #4]
 800a968:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800a96a:	2301      	movs	r3, #1
 800a96c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a96e:	2300      	movs	r3, #0
 800a970:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a97a:	2b01      	cmp	r3, #1
 800a97c:	d101      	bne.n	800a982 <HAL_SPI_TransmitReceive+0x26>
 800a97e:	2302      	movs	r3, #2
 800a980:	e18a      	b.n	800ac98 <HAL_SPI_TransmitReceive+0x33c>
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	2201      	movs	r2, #1
 800a986:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a98a:	f7fb f8df 	bl	8005b4c <HAL_GetTick>
 800a98e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	685b      	ldr	r3, [r3, #4]
 800a99e:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800a9a0:	887b      	ldrh	r3, [r7, #2]
 800a9a2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a9a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d00f      	beq.n	800a9cc <HAL_SPI_TransmitReceive+0x70>
 800a9ac:	69fb      	ldr	r3, [r7, #28]
 800a9ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a9b2:	d107      	bne.n	800a9c4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	689b      	ldr	r3, [r3, #8]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d103      	bne.n	800a9c4 <HAL_SPI_TransmitReceive+0x68>
 800a9bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a9c0:	2b04      	cmp	r3, #4
 800a9c2:	d003      	beq.n	800a9cc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a9ca:	e15b      	b.n	800ac84 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	d005      	beq.n	800a9de <HAL_SPI_TransmitReceive+0x82>
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d002      	beq.n	800a9de <HAL_SPI_TransmitReceive+0x82>
 800a9d8:	887b      	ldrh	r3, [r7, #2]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d103      	bne.n	800a9e6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800a9e4:	e14e      	b.n	800ac84 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9ec:	b2db      	uxtb	r3, r3
 800a9ee:	2b04      	cmp	r3, #4
 800a9f0:	d003      	beq.n	800a9fa <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2205      	movs	r2, #5
 800a9f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	687a      	ldr	r2, [r7, #4]
 800aa04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	887a      	ldrh	r2, [r7, #2]
 800aa0a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	887a      	ldrh	r2, [r7, #2]
 800aa10:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	68ba      	ldr	r2, [r7, #8]
 800aa16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	887a      	ldrh	r2, [r7, #2]
 800aa1c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	887a      	ldrh	r2, [r7, #2]
 800aa22:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2200      	movs	r2, #0
 800aa28:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa3a:	2b40      	cmp	r3, #64	; 0x40
 800aa3c:	d007      	beq.n	800aa4e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	681a      	ldr	r2, [r3, #0]
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa56:	d178      	bne.n	800ab4a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	685b      	ldr	r3, [r3, #4]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d002      	beq.n	800aa66 <HAL_SPI_TransmitReceive+0x10a>
 800aa60:	8b7b      	ldrh	r3, [r7, #26]
 800aa62:	2b01      	cmp	r3, #1
 800aa64:	d166      	bne.n	800ab34 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa6a:	881a      	ldrh	r2, [r3, #0]
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa76:	1c9a      	adds	r2, r3, #2
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa80:	b29b      	uxth	r3, r3
 800aa82:	3b01      	subs	r3, #1
 800aa84:	b29a      	uxth	r2, r3
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800aa8a:	e053      	b.n	800ab34 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	f003 0302 	and.w	r3, r3, #2
 800aa96:	2b02      	cmp	r3, #2
 800aa98:	d11b      	bne.n	800aad2 <HAL_SPI_TransmitReceive+0x176>
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d016      	beq.n	800aad2 <HAL_SPI_TransmitReceive+0x176>
 800aaa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaa6:	2b01      	cmp	r3, #1
 800aaa8:	d113      	bne.n	800aad2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaae:	881a      	ldrh	r2, [r3, #0]
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aaba:	1c9a      	adds	r2, r3, #2
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	3b01      	subs	r3, #1
 800aac8:	b29a      	uxth	r2, r3
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800aace:	2300      	movs	r3, #0
 800aad0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	689b      	ldr	r3, [r3, #8]
 800aad8:	f003 0301 	and.w	r3, r3, #1
 800aadc:	2b01      	cmp	r3, #1
 800aade:	d119      	bne.n	800ab14 <HAL_SPI_TransmitReceive+0x1b8>
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aae4:	b29b      	uxth	r3, r3
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d014      	beq.n	800ab14 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	68da      	ldr	r2, [r3, #12]
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf4:	b292      	uxth	r2, r2
 800aaf6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aafc:	1c9a      	adds	r2, r3, #2
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab06:	b29b      	uxth	r3, r3
 800ab08:	3b01      	subs	r3, #1
 800ab0a:	b29a      	uxth	r2, r3
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ab10:	2301      	movs	r3, #1
 800ab12:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ab14:	f7fb f81a 	bl	8005b4c <HAL_GetTick>
 800ab18:	4602      	mov	r2, r0
 800ab1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab1c:	1ad3      	subs	r3, r2, r3
 800ab1e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ab20:	429a      	cmp	r2, r3
 800ab22:	d807      	bhi.n	800ab34 <HAL_SPI_TransmitReceive+0x1d8>
 800ab24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab2a:	d003      	beq.n	800ab34 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ab2c:	2303      	movs	r3, #3
 800ab2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ab32:	e0a7      	b.n	800ac84 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d1a6      	bne.n	800aa8c <HAL_SPI_TransmitReceive+0x130>
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d1a1      	bne.n	800aa8c <HAL_SPI_TransmitReceive+0x130>
 800ab48:	e07c      	b.n	800ac44 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d002      	beq.n	800ab58 <HAL_SPI_TransmitReceive+0x1fc>
 800ab52:	8b7b      	ldrh	r3, [r7, #26]
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d16b      	bne.n	800ac30 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	330c      	adds	r3, #12
 800ab62:	7812      	ldrb	r2, [r2, #0]
 800ab64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab6a:	1c5a      	adds	r2, r3, #1
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab74:	b29b      	uxth	r3, r3
 800ab76:	3b01      	subs	r3, #1
 800ab78:	b29a      	uxth	r2, r3
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ab7e:	e057      	b.n	800ac30 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	689b      	ldr	r3, [r3, #8]
 800ab86:	f003 0302 	and.w	r3, r3, #2
 800ab8a:	2b02      	cmp	r3, #2
 800ab8c:	d11c      	bne.n	800abc8 <HAL_SPI_TransmitReceive+0x26c>
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d017      	beq.n	800abc8 <HAL_SPI_TransmitReceive+0x26c>
 800ab98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9a:	2b01      	cmp	r3, #1
 800ab9c:	d114      	bne.n	800abc8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	330c      	adds	r3, #12
 800aba8:	7812      	ldrb	r2, [r2, #0]
 800abaa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abb0:	1c5a      	adds	r2, r3, #1
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800abba:	b29b      	uxth	r3, r3
 800abbc:	3b01      	subs	r3, #1
 800abbe:	b29a      	uxth	r2, r3
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800abc4:	2300      	movs	r3, #0
 800abc6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	689b      	ldr	r3, [r3, #8]
 800abce:	f003 0301 	and.w	r3, r3, #1
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d119      	bne.n	800ac0a <HAL_SPI_TransmitReceive+0x2ae>
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abda:	b29b      	uxth	r3, r3
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d014      	beq.n	800ac0a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	68da      	ldr	r2, [r3, #12]
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abea:	b2d2      	uxtb	r2, r2
 800abec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abf2:	1c5a      	adds	r2, r3, #1
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800abfc:	b29b      	uxth	r3, r3
 800abfe:	3b01      	subs	r3, #1
 800ac00:	b29a      	uxth	r2, r3
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ac06:	2301      	movs	r3, #1
 800ac08:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ac0a:	f7fa ff9f 	bl	8005b4c <HAL_GetTick>
 800ac0e:	4602      	mov	r2, r0
 800ac10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac12:	1ad3      	subs	r3, r2, r3
 800ac14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ac16:	429a      	cmp	r2, r3
 800ac18:	d803      	bhi.n	800ac22 <HAL_SPI_TransmitReceive+0x2c6>
 800ac1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac20:	d102      	bne.n	800ac28 <HAL_SPI_TransmitReceive+0x2cc>
 800ac22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d103      	bne.n	800ac30 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ac28:	2303      	movs	r3, #3
 800ac2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ac2e:	e029      	b.n	800ac84 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac34:	b29b      	uxth	r3, r3
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d1a2      	bne.n	800ab80 <HAL_SPI_TransmitReceive+0x224>
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac3e:	b29b      	uxth	r3, r3
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d19d      	bne.n	800ab80 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ac44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	f000 fb5f 	bl	800b30c <SPI_EndRxTxTransaction>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d006      	beq.n	800ac62 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ac54:	2301      	movs	r3, #1
 800ac56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2220      	movs	r2, #32
 800ac5e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ac60:	e010      	b.n	800ac84 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	689b      	ldr	r3, [r3, #8]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d10b      	bne.n	800ac82 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	617b      	str	r3, [r7, #20]
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	617b      	str	r3, [r7, #20]
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	689b      	ldr	r3, [r3, #8]
 800ac7c:	617b      	str	r3, [r7, #20]
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	e000      	b.n	800ac84 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ac82:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2201      	movs	r2, #1
 800ac88:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ac94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3730      	adds	r7, #48	; 0x30
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800aca0:	b580      	push	{r7, lr}
 800aca2:	b086      	sub	sp, #24
 800aca4:	af00      	add	r7, sp, #0
 800aca6:	60f8      	str	r0, [r7, #12]
 800aca8:	60b9      	str	r1, [r7, #8]
 800acaa:	4613      	mov	r3, r2
 800acac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800acae:	2300      	movs	r3, #0
 800acb0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800acb8:	2b01      	cmp	r3, #1
 800acba:	d101      	bne.n	800acc0 <HAL_SPI_Transmit_DMA+0x20>
 800acbc:	2302      	movs	r3, #2
 800acbe:	e09b      	b.n	800adf8 <HAL_SPI_Transmit_DMA+0x158>
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2201      	movs	r2, #1
 800acc4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800acce:	b2db      	uxtb	r3, r3
 800acd0:	2b01      	cmp	r3, #1
 800acd2:	d002      	beq.n	800acda <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800acd4:	2302      	movs	r3, #2
 800acd6:	75fb      	strb	r3, [r7, #23]
    goto error;
 800acd8:	e089      	b.n	800adee <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800acda:	68bb      	ldr	r3, [r7, #8]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d002      	beq.n	800ace6 <HAL_SPI_Transmit_DMA+0x46>
 800ace0:	88fb      	ldrh	r3, [r7, #6]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d102      	bne.n	800acec <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800ace6:	2301      	movs	r3, #1
 800ace8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800acea:	e080      	b.n	800adee <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2203      	movs	r2, #3
 800acf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2200      	movs	r2, #0
 800acf8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	68ba      	ldr	r2, [r7, #8]
 800acfe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	88fa      	ldrh	r2, [r7, #6]
 800ad04:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	88fa      	ldrh	r2, [r7, #6]
 800ad0a:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	2200      	movs	r2, #0
 800ad16:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2200      	movs	r2, #0
 800ad22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2200      	movs	r2, #0
 800ad28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	689b      	ldr	r3, [r3, #8]
 800ad2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ad32:	d10f      	bne.n	800ad54 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	681a      	ldr	r2, [r3, #0]
 800ad3a:	68fb      	ldr	r3, [r7, #12]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad42:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	681a      	ldr	r2, [r3, #0]
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ad52:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad58:	4a29      	ldr	r2, [pc, #164]	; (800ae00 <HAL_SPI_Transmit_DMA+0x160>)
 800ad5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad60:	4a28      	ldr	r2, [pc, #160]	; (800ae04 <HAL_SPI_Transmit_DMA+0x164>)
 800ad62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad68:	4a27      	ldr	r2, [pc, #156]	; (800ae08 <HAL_SPI_Transmit_DMA+0x168>)
 800ad6a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad70:	2200      	movs	r2, #0
 800ad72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad7c:	4619      	mov	r1, r3
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	330c      	adds	r3, #12
 800ad84:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad8a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800ad8c:	f7fb f89e 	bl	8005ecc <HAL_DMA_Start_IT>
 800ad90:	4603      	mov	r3, r0
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d00c      	beq.n	800adb0 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ad9a:	f043 0210 	orr.w	r2, r3, #16
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800ada2:	2301      	movs	r3, #1
 800ada4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2201      	movs	r2, #1
 800adaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800adae:	e01e      	b.n	800adee <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adba:	2b40      	cmp	r3, #64	; 0x40
 800adbc:	d007      	beq.n	800adce <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800adcc:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	685a      	ldr	r2, [r3, #4]
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	f042 0220 	orr.w	r2, r2, #32
 800addc:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	685a      	ldr	r2, [r3, #4]
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f042 0202 	orr.w	r2, r2, #2
 800adec:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	2200      	movs	r2, #0
 800adf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800adf6:	7dfb      	ldrb	r3, [r7, #23]
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3718      	adds	r7, #24
 800adfc:	46bd      	mov	sp, r7
 800adfe:	bd80      	pop	{r7, pc}
 800ae00:	0800b179 	.word	0x0800b179
 800ae04:	0800b0d1 	.word	0x0800b0d1
 800ae08:	0800b195 	.word	0x0800b195

0800ae0c <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b084      	sub	sp, #16
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ae14:	2300      	movs	r3, #0
 800ae16:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d00f      	beq.n	800ae40 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7fb f8a9 	bl	8005f7c <HAL_DMA_Abort>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d007      	beq.n	800ae40 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae34:	f043 0210 	orr.w	r2, r3, #16
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 800ae3c:	2301      	movs	r3, #1
 800ae3e:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	d00f      	beq.n	800ae68 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f7fb f895 	bl	8005f7c <HAL_DMA_Abort>
 800ae52:	4603      	mov	r3, r0
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d007      	beq.n	800ae68 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae5c:	f043 0210 	orr.w	r2, r3, #16
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 800ae64:	2301      	movs	r3, #1
 800ae66:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	685a      	ldr	r2, [r3, #4]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f022 0203 	bic.w	r2, r2, #3
 800ae76:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2201      	movs	r2, #1
 800ae7c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 800ae80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3710      	adds	r7, #16
 800ae86:	46bd      	mov	sp, r7
 800ae88:	bd80      	pop	{r7, pc}
	...

0800ae8c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b088      	sub	sp, #32
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800aea4:	69bb      	ldr	r3, [r7, #24]
 800aea6:	099b      	lsrs	r3, r3, #6
 800aea8:	f003 0301 	and.w	r3, r3, #1
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d10f      	bne.n	800aed0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800aeb0:	69bb      	ldr	r3, [r7, #24]
 800aeb2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d00a      	beq.n	800aed0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800aeba:	69fb      	ldr	r3, [r7, #28]
 800aebc:	099b      	lsrs	r3, r3, #6
 800aebe:	f003 0301 	and.w	r3, r3, #1
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d004      	beq.n	800aed0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	4798      	blx	r3
    return;
 800aece:	e0d7      	b.n	800b080 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800aed0:	69bb      	ldr	r3, [r7, #24]
 800aed2:	085b      	lsrs	r3, r3, #1
 800aed4:	f003 0301 	and.w	r3, r3, #1
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d00a      	beq.n	800aef2 <HAL_SPI_IRQHandler+0x66>
 800aedc:	69fb      	ldr	r3, [r7, #28]
 800aede:	09db      	lsrs	r3, r3, #7
 800aee0:	f003 0301 	and.w	r3, r3, #1
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d004      	beq.n	800aef2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aeec:	6878      	ldr	r0, [r7, #4]
 800aeee:	4798      	blx	r3
    return;
 800aef0:	e0c6      	b.n	800b080 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800aef2:	69bb      	ldr	r3, [r7, #24]
 800aef4:	095b      	lsrs	r3, r3, #5
 800aef6:	f003 0301 	and.w	r3, r3, #1
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d10c      	bne.n	800af18 <HAL_SPI_IRQHandler+0x8c>
 800aefe:	69bb      	ldr	r3, [r7, #24]
 800af00:	099b      	lsrs	r3, r3, #6
 800af02:	f003 0301 	and.w	r3, r3, #1
 800af06:	2b00      	cmp	r3, #0
 800af08:	d106      	bne.n	800af18 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800af0a:	69bb      	ldr	r3, [r7, #24]
 800af0c:	0a1b      	lsrs	r3, r3, #8
 800af0e:	f003 0301 	and.w	r3, r3, #1
 800af12:	2b00      	cmp	r3, #0
 800af14:	f000 80b4 	beq.w	800b080 <HAL_SPI_IRQHandler+0x1f4>
 800af18:	69fb      	ldr	r3, [r7, #28]
 800af1a:	095b      	lsrs	r3, r3, #5
 800af1c:	f003 0301 	and.w	r3, r3, #1
 800af20:	2b00      	cmp	r3, #0
 800af22:	f000 80ad 	beq.w	800b080 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800af26:	69bb      	ldr	r3, [r7, #24]
 800af28:	099b      	lsrs	r3, r3, #6
 800af2a:	f003 0301 	and.w	r3, r3, #1
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d023      	beq.n	800af7a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	2b03      	cmp	r3, #3
 800af3c:	d011      	beq.n	800af62 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af42:	f043 0204 	orr.w	r2, r3, #4
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af4a:	2300      	movs	r3, #0
 800af4c:	617b      	str	r3, [r7, #20]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	68db      	ldr	r3, [r3, #12]
 800af54:	617b      	str	r3, [r7, #20]
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	617b      	str	r3, [r7, #20]
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	e00b      	b.n	800af7a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800af62:	2300      	movs	r3, #0
 800af64:	613b      	str	r3, [r7, #16]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	613b      	str	r3, [r7, #16]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	613b      	str	r3, [r7, #16]
 800af76:	693b      	ldr	r3, [r7, #16]
        return;
 800af78:	e082      	b.n	800b080 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800af7a:	69bb      	ldr	r3, [r7, #24]
 800af7c:	095b      	lsrs	r3, r3, #5
 800af7e:	f003 0301 	and.w	r3, r3, #1
 800af82:	2b00      	cmp	r3, #0
 800af84:	d014      	beq.n	800afb0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af8a:	f043 0201 	orr.w	r2, r3, #1
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800af92:	2300      	movs	r3, #0
 800af94:	60fb      	str	r3, [r7, #12]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	689b      	ldr	r3, [r3, #8]
 800af9c:	60fb      	str	r3, [r7, #12]
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afac:	601a      	str	r2, [r3, #0]
 800afae:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	0a1b      	lsrs	r3, r3, #8
 800afb4:	f003 0301 	and.w	r3, r3, #1
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d00c      	beq.n	800afd6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afc0:	f043 0208 	orr.w	r2, r3, #8
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800afc8:	2300      	movs	r3, #0
 800afca:	60bb      	str	r3, [r7, #8]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	689b      	ldr	r3, [r3, #8]
 800afd2:	60bb      	str	r3, [r7, #8]
 800afd4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d04f      	beq.n	800b07e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	685a      	ldr	r2, [r3, #4]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800afec:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2201      	movs	r2, #1
 800aff2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	f003 0302 	and.w	r3, r3, #2
 800affc:	2b00      	cmp	r3, #0
 800affe:	d104      	bne.n	800b00a <HAL_SPI_IRQHandler+0x17e>
 800b000:	69fb      	ldr	r3, [r7, #28]
 800b002:	f003 0301 	and.w	r3, r3, #1
 800b006:	2b00      	cmp	r3, #0
 800b008:	d034      	beq.n	800b074 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	685a      	ldr	r2, [r3, #4]
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	f022 0203 	bic.w	r2, r2, #3
 800b018:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d011      	beq.n	800b046 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b026:	4a18      	ldr	r2, [pc, #96]	; (800b088 <HAL_SPI_IRQHandler+0x1fc>)
 800b028:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b02e:	4618      	mov	r0, r3
 800b030:	f7fb f814 	bl	800605c <HAL_DMA_Abort_IT>
 800b034:	4603      	mov	r3, r0
 800b036:	2b00      	cmp	r3, #0
 800b038:	d005      	beq.n	800b046 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b03e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d016      	beq.n	800b07c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b052:	4a0d      	ldr	r2, [pc, #52]	; (800b088 <HAL_SPI_IRQHandler+0x1fc>)
 800b054:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7fa fffe 	bl	800605c <HAL_DMA_Abort_IT>
 800b060:	4603      	mov	r3, r0
 800b062:	2b00      	cmp	r3, #0
 800b064:	d00a      	beq.n	800b07c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b06a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800b072:	e003      	b.n	800b07c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 f813 	bl	800b0a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b07a:	e000      	b.n	800b07e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800b07c:	bf00      	nop
    return;
 800b07e:	bf00      	nop
  }
}
 800b080:	3720      	adds	r7, #32
 800b082:	46bd      	mov	sp, r7
 800b084:	bd80      	pop	{r7, pc}
 800b086:	bf00      	nop
 800b088:	0800b1d5 	.word	0x0800b1d5

0800b08c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b08c:	b480      	push	{r7}
 800b08e:	b083      	sub	sp, #12
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800b094:	bf00      	nop
 800b096:	370c      	adds	r7, #12
 800b098:	46bd      	mov	sp, r7
 800b09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09e:	4770      	bx	lr

0800b0a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b083      	sub	sp, #12
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b0a8:	bf00      	nop
 800b0aa:	370c      	adds	r7, #12
 800b0ac:	46bd      	mov	sp, r7
 800b0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b2:	4770      	bx	lr

0800b0b4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b083      	sub	sp, #12
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b0c2:	b2db      	uxtb	r3, r3
}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	370c      	adds	r7, #12
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr

0800b0d0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b086      	sub	sp, #24
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0dc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b0de:	f7fa fd35 	bl	8005b4c <HAL_GetTick>
 800b0e2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0f2:	d03b      	beq.n	800b16c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b0f4:	697b      	ldr	r3, [r7, #20]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	685a      	ldr	r2, [r3, #4]
 800b0fa:	697b      	ldr	r3, [r7, #20]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f022 0220 	bic.w	r2, r2, #32
 800b102:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b104:	697b      	ldr	r3, [r7, #20]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	685a      	ldr	r2, [r3, #4]
 800b10a:	697b      	ldr	r3, [r7, #20]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f022 0202 	bic.w	r2, r2, #2
 800b112:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b114:	693a      	ldr	r2, [r7, #16]
 800b116:	2164      	movs	r1, #100	; 0x64
 800b118:	6978      	ldr	r0, [r7, #20]
 800b11a:	f000 f8f7 	bl	800b30c <SPI_EndRxTxTransaction>
 800b11e:	4603      	mov	r3, r0
 800b120:	2b00      	cmp	r3, #0
 800b122:	d005      	beq.n	800b130 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b124:	697b      	ldr	r3, [r7, #20]
 800b126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b128:	f043 0220 	orr.w	r2, r3, #32
 800b12c:	697b      	ldr	r3, [r7, #20]
 800b12e:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	689b      	ldr	r3, [r3, #8]
 800b134:	2b00      	cmp	r3, #0
 800b136:	d10a      	bne.n	800b14e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b138:	2300      	movs	r3, #0
 800b13a:	60fb      	str	r3, [r7, #12]
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	68db      	ldr	r3, [r3, #12]
 800b142:	60fb      	str	r3, [r7, #12]
 800b144:	697b      	ldr	r3, [r7, #20]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	689b      	ldr	r3, [r3, #8]
 800b14a:	60fb      	str	r3, [r7, #12]
 800b14c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	2200      	movs	r2, #0
 800b152:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	2201      	movs	r2, #1
 800b158:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b160:	2b00      	cmp	r3, #0
 800b162:	d003      	beq.n	800b16c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b164:	6978      	ldr	r0, [r7, #20]
 800b166:	f7ff ff9b 	bl	800b0a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b16a:	e002      	b.n	800b172 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800b16c:	6978      	ldr	r0, [r7, #20]
 800b16e:	f7f8 f86d 	bl	800324c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b172:	3718      	adds	r7, #24
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b184:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800b186:	68f8      	ldr	r0, [r7, #12]
 800b188:	f7ff ff80 	bl	800b08c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b18c:	bf00      	nop
 800b18e:	3710      	adds	r7, #16
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}

0800b194 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b194:	b580      	push	{r7, lr}
 800b196:	b084      	sub	sp, #16
 800b198:	af00      	add	r7, sp, #0
 800b19a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1a0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	685a      	ldr	r2, [r3, #4]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f022 0203 	bic.w	r2, r2, #3
 800b1b0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1b6:	f043 0210 	orr.w	r2, r3, #16
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	2201      	movs	r2, #1
 800b1c2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b1c6:	68f8      	ldr	r0, [r7, #12]
 800b1c8:	f7ff ff6a 	bl	800b0a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b1cc:	bf00      	nop
 800b1ce:	3710      	adds	r7, #16
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b084      	sub	sp, #16
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b1ee:	68f8      	ldr	r0, [r7, #12]
 800b1f0:	f7ff ff56 	bl	800b0a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b1f4:	bf00      	nop
 800b1f6:	3710      	adds	r7, #16
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b088      	sub	sp, #32
 800b200:	af00      	add	r7, sp, #0
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	60b9      	str	r1, [r7, #8]
 800b206:	603b      	str	r3, [r7, #0]
 800b208:	4613      	mov	r3, r2
 800b20a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b20c:	f7fa fc9e 	bl	8005b4c <HAL_GetTick>
 800b210:	4602      	mov	r2, r0
 800b212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b214:	1a9b      	subs	r3, r3, r2
 800b216:	683a      	ldr	r2, [r7, #0]
 800b218:	4413      	add	r3, r2
 800b21a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b21c:	f7fa fc96 	bl	8005b4c <HAL_GetTick>
 800b220:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b222:	4b39      	ldr	r3, [pc, #228]	; (800b308 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	015b      	lsls	r3, r3, #5
 800b228:	0d1b      	lsrs	r3, r3, #20
 800b22a:	69fa      	ldr	r2, [r7, #28]
 800b22c:	fb02 f303 	mul.w	r3, r2, r3
 800b230:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b232:	e054      	b.n	800b2de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b23a:	d050      	beq.n	800b2de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b23c:	f7fa fc86 	bl	8005b4c <HAL_GetTick>
 800b240:	4602      	mov	r2, r0
 800b242:	69bb      	ldr	r3, [r7, #24]
 800b244:	1ad3      	subs	r3, r2, r3
 800b246:	69fa      	ldr	r2, [r7, #28]
 800b248:	429a      	cmp	r2, r3
 800b24a:	d902      	bls.n	800b252 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d13d      	bne.n	800b2ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	685a      	ldr	r2, [r3, #4]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b260:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b26a:	d111      	bne.n	800b290 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	689b      	ldr	r3, [r3, #8]
 800b270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b274:	d004      	beq.n	800b280 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	689b      	ldr	r3, [r3, #8]
 800b27a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b27e:	d107      	bne.n	800b290 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b28e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b294:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b298:	d10f      	bne.n	800b2ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b2a8:	601a      	str	r2, [r3, #0]
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b2b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2201      	movs	r2, #1
 800b2be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b2ca:	2303      	movs	r3, #3
 800b2cc:	e017      	b.n	800b2fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d101      	bne.n	800b2d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	3b01      	subs	r3, #1
 800b2dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	689a      	ldr	r2, [r3, #8]
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	4013      	ands	r3, r2
 800b2e8:	68ba      	ldr	r2, [r7, #8]
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	bf0c      	ite	eq
 800b2ee:	2301      	moveq	r3, #1
 800b2f0:	2300      	movne	r3, #0
 800b2f2:	b2db      	uxtb	r3, r3
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	79fb      	ldrb	r3, [r7, #7]
 800b2f8:	429a      	cmp	r2, r3
 800b2fa:	d19b      	bne.n	800b234 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b2fc:	2300      	movs	r3, #0
}
 800b2fe:	4618      	mov	r0, r3
 800b300:	3720      	adds	r7, #32
 800b302:	46bd      	mov	sp, r7
 800b304:	bd80      	pop	{r7, pc}
 800b306:	bf00      	nop
 800b308:	20000008 	.word	0x20000008

0800b30c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b30c:	b580      	push	{r7, lr}
 800b30e:	b088      	sub	sp, #32
 800b310:	af02      	add	r7, sp, #8
 800b312:	60f8      	str	r0, [r7, #12]
 800b314:	60b9      	str	r1, [r7, #8]
 800b316:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b318:	4b1b      	ldr	r3, [pc, #108]	; (800b388 <SPI_EndRxTxTransaction+0x7c>)
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	4a1b      	ldr	r2, [pc, #108]	; (800b38c <SPI_EndRxTxTransaction+0x80>)
 800b31e:	fba2 2303 	umull	r2, r3, r2, r3
 800b322:	0d5b      	lsrs	r3, r3, #21
 800b324:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b328:	fb02 f303 	mul.w	r3, r2, r3
 800b32c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	685b      	ldr	r3, [r3, #4]
 800b332:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b336:	d112      	bne.n	800b35e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	9300      	str	r3, [sp, #0]
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	2200      	movs	r2, #0
 800b340:	2180      	movs	r1, #128	; 0x80
 800b342:	68f8      	ldr	r0, [r7, #12]
 800b344:	f7ff ff5a 	bl	800b1fc <SPI_WaitFlagStateUntilTimeout>
 800b348:	4603      	mov	r3, r0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d016      	beq.n	800b37c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b352:	f043 0220 	orr.w	r2, r3, #32
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b35a:	2303      	movs	r3, #3
 800b35c:	e00f      	b.n	800b37e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d00a      	beq.n	800b37a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	3b01      	subs	r3, #1
 800b368:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	689b      	ldr	r3, [r3, #8]
 800b370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b374:	2b80      	cmp	r3, #128	; 0x80
 800b376:	d0f2      	beq.n	800b35e <SPI_EndRxTxTransaction+0x52>
 800b378:	e000      	b.n	800b37c <SPI_EndRxTxTransaction+0x70>
        break;
 800b37a:	bf00      	nop
  }

  return HAL_OK;
 800b37c:	2300      	movs	r3, #0
}
 800b37e:	4618      	mov	r0, r3
 800b380:	3718      	adds	r7, #24
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	20000008 	.word	0x20000008
 800b38c:	165e9f81 	.word	0x165e9f81

0800b390 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d101      	bne.n	800b3a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e041      	b.n	800b426 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3a8:	b2db      	uxtb	r3, r3
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d106      	bne.n	800b3bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f7f9 fd3e 	bl	8004e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2202      	movs	r2, #2
 800b3c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	3304      	adds	r3, #4
 800b3cc:	4619      	mov	r1, r3
 800b3ce:	4610      	mov	r0, r2
 800b3d0:	f000 fac4 	bl	800b95c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	2201      	movs	r2, #1
 800b3d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2201      	movs	r2, #1
 800b3e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	2201      	movs	r2, #1
 800b3e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2201      	movs	r2, #1
 800b400:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2201      	movs	r2, #1
 800b408:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	2201      	movs	r2, #1
 800b410:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2201      	movs	r2, #1
 800b418:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2201      	movs	r2, #1
 800b420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b424:	2300      	movs	r3, #0
}
 800b426:	4618      	mov	r0, r3
 800b428:	3708      	adds	r7, #8
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
	...

0800b430 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b430:	b480      	push	{r7}
 800b432:	b085      	sub	sp, #20
 800b434:	af00      	add	r7, sp, #0
 800b436:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b43e:	b2db      	uxtb	r3, r3
 800b440:	2b01      	cmp	r3, #1
 800b442:	d001      	beq.n	800b448 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b444:	2301      	movs	r3, #1
 800b446:	e04e      	b.n	800b4e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2202      	movs	r2, #2
 800b44c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	68da      	ldr	r2, [r3, #12]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f042 0201 	orr.w	r2, r2, #1
 800b45e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	4a23      	ldr	r2, [pc, #140]	; (800b4f4 <HAL_TIM_Base_Start_IT+0xc4>)
 800b466:	4293      	cmp	r3, r2
 800b468:	d022      	beq.n	800b4b0 <HAL_TIM_Base_Start_IT+0x80>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b472:	d01d      	beq.n	800b4b0 <HAL_TIM_Base_Start_IT+0x80>
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	4a1f      	ldr	r2, [pc, #124]	; (800b4f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800b47a:	4293      	cmp	r3, r2
 800b47c:	d018      	beq.n	800b4b0 <HAL_TIM_Base_Start_IT+0x80>
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	4a1e      	ldr	r2, [pc, #120]	; (800b4fc <HAL_TIM_Base_Start_IT+0xcc>)
 800b484:	4293      	cmp	r3, r2
 800b486:	d013      	beq.n	800b4b0 <HAL_TIM_Base_Start_IT+0x80>
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	681b      	ldr	r3, [r3, #0]
 800b48c:	4a1c      	ldr	r2, [pc, #112]	; (800b500 <HAL_TIM_Base_Start_IT+0xd0>)
 800b48e:	4293      	cmp	r3, r2
 800b490:	d00e      	beq.n	800b4b0 <HAL_TIM_Base_Start_IT+0x80>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	4a1b      	ldr	r2, [pc, #108]	; (800b504 <HAL_TIM_Base_Start_IT+0xd4>)
 800b498:	4293      	cmp	r3, r2
 800b49a:	d009      	beq.n	800b4b0 <HAL_TIM_Base_Start_IT+0x80>
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	4a19      	ldr	r2, [pc, #100]	; (800b508 <HAL_TIM_Base_Start_IT+0xd8>)
 800b4a2:	4293      	cmp	r3, r2
 800b4a4:	d004      	beq.n	800b4b0 <HAL_TIM_Base_Start_IT+0x80>
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	4a18      	ldr	r2, [pc, #96]	; (800b50c <HAL_TIM_Base_Start_IT+0xdc>)
 800b4ac:	4293      	cmp	r3, r2
 800b4ae:	d111      	bne.n	800b4d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	f003 0307 	and.w	r3, r3, #7
 800b4ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2b06      	cmp	r3, #6
 800b4c0:	d010      	beq.n	800b4e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	681a      	ldr	r2, [r3, #0]
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f042 0201 	orr.w	r2, r2, #1
 800b4d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4d2:	e007      	b.n	800b4e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f042 0201 	orr.w	r2, r2, #1
 800b4e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b4e4:	2300      	movs	r3, #0
}
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	3714      	adds	r7, #20
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4f0:	4770      	bx	lr
 800b4f2:	bf00      	nop
 800b4f4:	40010000 	.word	0x40010000
 800b4f8:	40000400 	.word	0x40000400
 800b4fc:	40000800 	.word	0x40000800
 800b500:	40000c00 	.word	0x40000c00
 800b504:	40010400 	.word	0x40010400
 800b508:	40014000 	.word	0x40014000
 800b50c:	40001800 	.word	0x40001800

0800b510 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b510:	b480      	push	{r7}
 800b512:	b083      	sub	sp, #12
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	68da      	ldr	r2, [r3, #12]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	f022 0201 	bic.w	r2, r2, #1
 800b526:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	6a1a      	ldr	r2, [r3, #32]
 800b52e:	f241 1311 	movw	r3, #4369	; 0x1111
 800b532:	4013      	ands	r3, r2
 800b534:	2b00      	cmp	r3, #0
 800b536:	d10f      	bne.n	800b558 <HAL_TIM_Base_Stop_IT+0x48>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	6a1a      	ldr	r2, [r3, #32]
 800b53e:	f240 4344 	movw	r3, #1092	; 0x444
 800b542:	4013      	ands	r3, r2
 800b544:	2b00      	cmp	r3, #0
 800b546:	d107      	bne.n	800b558 <HAL_TIM_Base_Stop_IT+0x48>
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f022 0201 	bic.w	r2, r2, #1
 800b556:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2201      	movs	r2, #1
 800b55c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b560:	2300      	movs	r3, #0
}
 800b562:	4618      	mov	r0, r3
 800b564:	370c      	adds	r7, #12
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b56e:	b580      	push	{r7, lr}
 800b570:	b082      	sub	sp, #8
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	691b      	ldr	r3, [r3, #16]
 800b57c:	f003 0302 	and.w	r3, r3, #2
 800b580:	2b02      	cmp	r3, #2
 800b582:	d122      	bne.n	800b5ca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	68db      	ldr	r3, [r3, #12]
 800b58a:	f003 0302 	and.w	r3, r3, #2
 800b58e:	2b02      	cmp	r3, #2
 800b590:	d11b      	bne.n	800b5ca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f06f 0202 	mvn.w	r2, #2
 800b59a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	2201      	movs	r2, #1
 800b5a0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	699b      	ldr	r3, [r3, #24]
 800b5a8:	f003 0303 	and.w	r3, r3, #3
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d003      	beq.n	800b5b8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f000 f9b5 	bl	800b920 <HAL_TIM_IC_CaptureCallback>
 800b5b6:	e005      	b.n	800b5c4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b5b8:	6878      	ldr	r0, [r7, #4]
 800b5ba:	f000 f9a7 	bl	800b90c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f000 f9b8 	bl	800b934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2200      	movs	r2, #0
 800b5c8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	691b      	ldr	r3, [r3, #16]
 800b5d0:	f003 0304 	and.w	r3, r3, #4
 800b5d4:	2b04      	cmp	r3, #4
 800b5d6:	d122      	bne.n	800b61e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	68db      	ldr	r3, [r3, #12]
 800b5de:	f003 0304 	and.w	r3, r3, #4
 800b5e2:	2b04      	cmp	r3, #4
 800b5e4:	d11b      	bne.n	800b61e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f06f 0204 	mvn.w	r2, #4
 800b5ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2202      	movs	r2, #2
 800b5f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	699b      	ldr	r3, [r3, #24]
 800b5fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b600:	2b00      	cmp	r3, #0
 800b602:	d003      	beq.n	800b60c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f000 f98b 	bl	800b920 <HAL_TIM_IC_CaptureCallback>
 800b60a:	e005      	b.n	800b618 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f000 f97d 	bl	800b90c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b612:	6878      	ldr	r0, [r7, #4]
 800b614:	f000 f98e 	bl	800b934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	2200      	movs	r2, #0
 800b61c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	691b      	ldr	r3, [r3, #16]
 800b624:	f003 0308 	and.w	r3, r3, #8
 800b628:	2b08      	cmp	r3, #8
 800b62a:	d122      	bne.n	800b672 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	f003 0308 	and.w	r3, r3, #8
 800b636:	2b08      	cmp	r3, #8
 800b638:	d11b      	bne.n	800b672 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f06f 0208 	mvn.w	r2, #8
 800b642:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2204      	movs	r2, #4
 800b648:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	69db      	ldr	r3, [r3, #28]
 800b650:	f003 0303 	and.w	r3, r3, #3
 800b654:	2b00      	cmp	r3, #0
 800b656:	d003      	beq.n	800b660 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b658:	6878      	ldr	r0, [r7, #4]
 800b65a:	f000 f961 	bl	800b920 <HAL_TIM_IC_CaptureCallback>
 800b65e:	e005      	b.n	800b66c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b660:	6878      	ldr	r0, [r7, #4]
 800b662:	f000 f953 	bl	800b90c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	f000 f964 	bl	800b934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	f003 0310 	and.w	r3, r3, #16
 800b67c:	2b10      	cmp	r3, #16
 800b67e:	d122      	bne.n	800b6c6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	68db      	ldr	r3, [r3, #12]
 800b686:	f003 0310 	and.w	r3, r3, #16
 800b68a:	2b10      	cmp	r3, #16
 800b68c:	d11b      	bne.n	800b6c6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f06f 0210 	mvn.w	r2, #16
 800b696:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2208      	movs	r2, #8
 800b69c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	69db      	ldr	r3, [r3, #28]
 800b6a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d003      	beq.n	800b6b4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f000 f937 	bl	800b920 <HAL_TIM_IC_CaptureCallback>
 800b6b2:	e005      	b.n	800b6c0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 f929 	bl	800b90c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 f93a 	bl	800b934 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2200      	movs	r2, #0
 800b6c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	691b      	ldr	r3, [r3, #16]
 800b6cc:	f003 0301 	and.w	r3, r3, #1
 800b6d0:	2b01      	cmp	r3, #1
 800b6d2:	d10e      	bne.n	800b6f2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	68db      	ldr	r3, [r3, #12]
 800b6da:	f003 0301 	and.w	r3, r3, #1
 800b6de:	2b01      	cmp	r3, #1
 800b6e0:	d107      	bne.n	800b6f2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f06f 0201 	mvn.w	r2, #1
 800b6ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f7f9 f98b 	bl	8004a08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	691b      	ldr	r3, [r3, #16]
 800b6f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6fc:	2b80      	cmp	r3, #128	; 0x80
 800b6fe:	d10e      	bne.n	800b71e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	68db      	ldr	r3, [r3, #12]
 800b706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b70a:	2b80      	cmp	r3, #128	; 0x80
 800b70c:	d107      	bne.n	800b71e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b716:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b718:	6878      	ldr	r0, [r7, #4]
 800b71a:	f000 fadf 	bl	800bcdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	691b      	ldr	r3, [r3, #16]
 800b724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b728:	2b40      	cmp	r3, #64	; 0x40
 800b72a:	d10e      	bne.n	800b74a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	68db      	ldr	r3, [r3, #12]
 800b732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b736:	2b40      	cmp	r3, #64	; 0x40
 800b738:	d107      	bne.n	800b74a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 f8ff 	bl	800b948 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	691b      	ldr	r3, [r3, #16]
 800b750:	f003 0320 	and.w	r3, r3, #32
 800b754:	2b20      	cmp	r3, #32
 800b756:	d10e      	bne.n	800b776 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	68db      	ldr	r3, [r3, #12]
 800b75e:	f003 0320 	and.w	r3, r3, #32
 800b762:	2b20      	cmp	r3, #32
 800b764:	d107      	bne.n	800b776 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	f06f 0220 	mvn.w	r2, #32
 800b76e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b770:	6878      	ldr	r0, [r7, #4]
 800b772:	f000 faa9 	bl	800bcc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b776:	bf00      	nop
 800b778:	3708      	adds	r7, #8
 800b77a:	46bd      	mov	sp, r7
 800b77c:	bd80      	pop	{r7, pc}

0800b77e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b77e:	b580      	push	{r7, lr}
 800b780:	b084      	sub	sp, #16
 800b782:	af00      	add	r7, sp, #0
 800b784:	6078      	str	r0, [r7, #4]
 800b786:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b788:	2300      	movs	r3, #0
 800b78a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b792:	2b01      	cmp	r3, #1
 800b794:	d101      	bne.n	800b79a <HAL_TIM_ConfigClockSource+0x1c>
 800b796:	2302      	movs	r3, #2
 800b798:	e0b4      	b.n	800b904 <HAL_TIM_ConfigClockSource+0x186>
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	2201      	movs	r2, #1
 800b79e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	2202      	movs	r2, #2
 800b7a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	689b      	ldr	r3, [r3, #8]
 800b7b0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b7b8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b7c0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	68ba      	ldr	r2, [r7, #8]
 800b7c8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7d2:	d03e      	beq.n	800b852 <HAL_TIM_ConfigClockSource+0xd4>
 800b7d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7d8:	f200 8087 	bhi.w	800b8ea <HAL_TIM_ConfigClockSource+0x16c>
 800b7dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7e0:	f000 8086 	beq.w	800b8f0 <HAL_TIM_ConfigClockSource+0x172>
 800b7e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7e8:	d87f      	bhi.n	800b8ea <HAL_TIM_ConfigClockSource+0x16c>
 800b7ea:	2b70      	cmp	r3, #112	; 0x70
 800b7ec:	d01a      	beq.n	800b824 <HAL_TIM_ConfigClockSource+0xa6>
 800b7ee:	2b70      	cmp	r3, #112	; 0x70
 800b7f0:	d87b      	bhi.n	800b8ea <HAL_TIM_ConfigClockSource+0x16c>
 800b7f2:	2b60      	cmp	r3, #96	; 0x60
 800b7f4:	d050      	beq.n	800b898 <HAL_TIM_ConfigClockSource+0x11a>
 800b7f6:	2b60      	cmp	r3, #96	; 0x60
 800b7f8:	d877      	bhi.n	800b8ea <HAL_TIM_ConfigClockSource+0x16c>
 800b7fa:	2b50      	cmp	r3, #80	; 0x50
 800b7fc:	d03c      	beq.n	800b878 <HAL_TIM_ConfigClockSource+0xfa>
 800b7fe:	2b50      	cmp	r3, #80	; 0x50
 800b800:	d873      	bhi.n	800b8ea <HAL_TIM_ConfigClockSource+0x16c>
 800b802:	2b40      	cmp	r3, #64	; 0x40
 800b804:	d058      	beq.n	800b8b8 <HAL_TIM_ConfigClockSource+0x13a>
 800b806:	2b40      	cmp	r3, #64	; 0x40
 800b808:	d86f      	bhi.n	800b8ea <HAL_TIM_ConfigClockSource+0x16c>
 800b80a:	2b30      	cmp	r3, #48	; 0x30
 800b80c:	d064      	beq.n	800b8d8 <HAL_TIM_ConfigClockSource+0x15a>
 800b80e:	2b30      	cmp	r3, #48	; 0x30
 800b810:	d86b      	bhi.n	800b8ea <HAL_TIM_ConfigClockSource+0x16c>
 800b812:	2b20      	cmp	r3, #32
 800b814:	d060      	beq.n	800b8d8 <HAL_TIM_ConfigClockSource+0x15a>
 800b816:	2b20      	cmp	r3, #32
 800b818:	d867      	bhi.n	800b8ea <HAL_TIM_ConfigClockSource+0x16c>
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d05c      	beq.n	800b8d8 <HAL_TIM_ConfigClockSource+0x15a>
 800b81e:	2b10      	cmp	r3, #16
 800b820:	d05a      	beq.n	800b8d8 <HAL_TIM_ConfigClockSource+0x15a>
 800b822:	e062      	b.n	800b8ea <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	6818      	ldr	r0, [r3, #0]
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	6899      	ldr	r1, [r3, #8]
 800b82c:	683b      	ldr	r3, [r7, #0]
 800b82e:	685a      	ldr	r2, [r3, #4]
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	68db      	ldr	r3, [r3, #12]
 800b834:	f000 f9ac 	bl	800bb90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	689b      	ldr	r3, [r3, #8]
 800b83e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b840:	68bb      	ldr	r3, [r7, #8]
 800b842:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b846:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	68ba      	ldr	r2, [r7, #8]
 800b84e:	609a      	str	r2, [r3, #8]
      break;
 800b850:	e04f      	b.n	800b8f2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6818      	ldr	r0, [r3, #0]
 800b856:	683b      	ldr	r3, [r7, #0]
 800b858:	6899      	ldr	r1, [r3, #8]
 800b85a:	683b      	ldr	r3, [r7, #0]
 800b85c:	685a      	ldr	r2, [r3, #4]
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	68db      	ldr	r3, [r3, #12]
 800b862:	f000 f995 	bl	800bb90 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	681b      	ldr	r3, [r3, #0]
 800b86a:	689a      	ldr	r2, [r3, #8]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b874:	609a      	str	r2, [r3, #8]
      break;
 800b876:	e03c      	b.n	800b8f2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6818      	ldr	r0, [r3, #0]
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	6859      	ldr	r1, [r3, #4]
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	461a      	mov	r2, r3
 800b886:	f000 f909 	bl	800ba9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	2150      	movs	r1, #80	; 0x50
 800b890:	4618      	mov	r0, r3
 800b892:	f000 f962 	bl	800bb5a <TIM_ITRx_SetConfig>
      break;
 800b896:	e02c      	b.n	800b8f2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	6818      	ldr	r0, [r3, #0]
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	6859      	ldr	r1, [r3, #4]
 800b8a0:	683b      	ldr	r3, [r7, #0]
 800b8a2:	68db      	ldr	r3, [r3, #12]
 800b8a4:	461a      	mov	r2, r3
 800b8a6:	f000 f928 	bl	800bafa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	2160      	movs	r1, #96	; 0x60
 800b8b0:	4618      	mov	r0, r3
 800b8b2:	f000 f952 	bl	800bb5a <TIM_ITRx_SetConfig>
      break;
 800b8b6:	e01c      	b.n	800b8f2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6818      	ldr	r0, [r3, #0]
 800b8bc:	683b      	ldr	r3, [r7, #0]
 800b8be:	6859      	ldr	r1, [r3, #4]
 800b8c0:	683b      	ldr	r3, [r7, #0]
 800b8c2:	68db      	ldr	r3, [r3, #12]
 800b8c4:	461a      	mov	r2, r3
 800b8c6:	f000 f8e9 	bl	800ba9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	2140      	movs	r1, #64	; 0x40
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	f000 f942 	bl	800bb5a <TIM_ITRx_SetConfig>
      break;
 800b8d6:	e00c      	b.n	800b8f2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681a      	ldr	r2, [r3, #0]
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	4619      	mov	r1, r3
 800b8e2:	4610      	mov	r0, r2
 800b8e4:	f000 f939 	bl	800bb5a <TIM_ITRx_SetConfig>
      break;
 800b8e8:	e003      	b.n	800b8f2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	73fb      	strb	r3, [r7, #15]
      break;
 800b8ee:	e000      	b.n	800b8f2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b8f0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2201      	movs	r2, #1
 800b8f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	2200      	movs	r2, #0
 800b8fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b902:	7bfb      	ldrb	r3, [r7, #15]
}
 800b904:	4618      	mov	r0, r3
 800b906:	3710      	adds	r7, #16
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b90c:	b480      	push	{r7}
 800b90e:	b083      	sub	sp, #12
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b914:	bf00      	nop
 800b916:	370c      	adds	r7, #12
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr

0800b920 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b920:	b480      	push	{r7}
 800b922:	b083      	sub	sp, #12
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b928:	bf00      	nop
 800b92a:	370c      	adds	r7, #12
 800b92c:	46bd      	mov	sp, r7
 800b92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b932:	4770      	bx	lr

0800b934 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b934:	b480      	push	{r7}
 800b936:	b083      	sub	sp, #12
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b93c:	bf00      	nop
 800b93e:	370c      	adds	r7, #12
 800b940:	46bd      	mov	sp, r7
 800b942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b946:	4770      	bx	lr

0800b948 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b948:	b480      	push	{r7}
 800b94a:	b083      	sub	sp, #12
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b950:	bf00      	nop
 800b952:	370c      	adds	r7, #12
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b085      	sub	sp, #20
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	4a40      	ldr	r2, [pc, #256]	; (800ba70 <TIM_Base_SetConfig+0x114>)
 800b970:	4293      	cmp	r3, r2
 800b972:	d013      	beq.n	800b99c <TIM_Base_SetConfig+0x40>
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b97a:	d00f      	beq.n	800b99c <TIM_Base_SetConfig+0x40>
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	4a3d      	ldr	r2, [pc, #244]	; (800ba74 <TIM_Base_SetConfig+0x118>)
 800b980:	4293      	cmp	r3, r2
 800b982:	d00b      	beq.n	800b99c <TIM_Base_SetConfig+0x40>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	4a3c      	ldr	r2, [pc, #240]	; (800ba78 <TIM_Base_SetConfig+0x11c>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d007      	beq.n	800b99c <TIM_Base_SetConfig+0x40>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	4a3b      	ldr	r2, [pc, #236]	; (800ba7c <TIM_Base_SetConfig+0x120>)
 800b990:	4293      	cmp	r3, r2
 800b992:	d003      	beq.n	800b99c <TIM_Base_SetConfig+0x40>
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	4a3a      	ldr	r2, [pc, #232]	; (800ba80 <TIM_Base_SetConfig+0x124>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d108      	bne.n	800b9ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b9a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	685b      	ldr	r3, [r3, #4]
 800b9a8:	68fa      	ldr	r2, [r7, #12]
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	4a2f      	ldr	r2, [pc, #188]	; (800ba70 <TIM_Base_SetConfig+0x114>)
 800b9b2:	4293      	cmp	r3, r2
 800b9b4:	d02b      	beq.n	800ba0e <TIM_Base_SetConfig+0xb2>
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b9bc:	d027      	beq.n	800ba0e <TIM_Base_SetConfig+0xb2>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	4a2c      	ldr	r2, [pc, #176]	; (800ba74 <TIM_Base_SetConfig+0x118>)
 800b9c2:	4293      	cmp	r3, r2
 800b9c4:	d023      	beq.n	800ba0e <TIM_Base_SetConfig+0xb2>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	4a2b      	ldr	r2, [pc, #172]	; (800ba78 <TIM_Base_SetConfig+0x11c>)
 800b9ca:	4293      	cmp	r3, r2
 800b9cc:	d01f      	beq.n	800ba0e <TIM_Base_SetConfig+0xb2>
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	4a2a      	ldr	r2, [pc, #168]	; (800ba7c <TIM_Base_SetConfig+0x120>)
 800b9d2:	4293      	cmp	r3, r2
 800b9d4:	d01b      	beq.n	800ba0e <TIM_Base_SetConfig+0xb2>
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	4a29      	ldr	r2, [pc, #164]	; (800ba80 <TIM_Base_SetConfig+0x124>)
 800b9da:	4293      	cmp	r3, r2
 800b9dc:	d017      	beq.n	800ba0e <TIM_Base_SetConfig+0xb2>
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	4a28      	ldr	r2, [pc, #160]	; (800ba84 <TIM_Base_SetConfig+0x128>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d013      	beq.n	800ba0e <TIM_Base_SetConfig+0xb2>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	4a27      	ldr	r2, [pc, #156]	; (800ba88 <TIM_Base_SetConfig+0x12c>)
 800b9ea:	4293      	cmp	r3, r2
 800b9ec:	d00f      	beq.n	800ba0e <TIM_Base_SetConfig+0xb2>
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	4a26      	ldr	r2, [pc, #152]	; (800ba8c <TIM_Base_SetConfig+0x130>)
 800b9f2:	4293      	cmp	r3, r2
 800b9f4:	d00b      	beq.n	800ba0e <TIM_Base_SetConfig+0xb2>
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	4a25      	ldr	r2, [pc, #148]	; (800ba90 <TIM_Base_SetConfig+0x134>)
 800b9fa:	4293      	cmp	r3, r2
 800b9fc:	d007      	beq.n	800ba0e <TIM_Base_SetConfig+0xb2>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	4a24      	ldr	r2, [pc, #144]	; (800ba94 <TIM_Base_SetConfig+0x138>)
 800ba02:	4293      	cmp	r3, r2
 800ba04:	d003      	beq.n	800ba0e <TIM_Base_SetConfig+0xb2>
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	4a23      	ldr	r2, [pc, #140]	; (800ba98 <TIM_Base_SetConfig+0x13c>)
 800ba0a:	4293      	cmp	r3, r2
 800ba0c:	d108      	bne.n	800ba20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ba16:	683b      	ldr	r3, [r7, #0]
 800ba18:	68db      	ldr	r3, [r3, #12]
 800ba1a:	68fa      	ldr	r2, [r7, #12]
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ba26:	683b      	ldr	r3, [r7, #0]
 800ba28:	695b      	ldr	r3, [r3, #20]
 800ba2a:	4313      	orrs	r3, r2
 800ba2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	68fa      	ldr	r2, [r7, #12]
 800ba32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	689a      	ldr	r2, [r3, #8]
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ba3c:	683b      	ldr	r3, [r7, #0]
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	4a0a      	ldr	r2, [pc, #40]	; (800ba70 <TIM_Base_SetConfig+0x114>)
 800ba48:	4293      	cmp	r3, r2
 800ba4a:	d003      	beq.n	800ba54 <TIM_Base_SetConfig+0xf8>
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	4a0c      	ldr	r2, [pc, #48]	; (800ba80 <TIM_Base_SetConfig+0x124>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d103      	bne.n	800ba5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	691a      	ldr	r2, [r3, #16]
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2201      	movs	r2, #1
 800ba60:	615a      	str	r2, [r3, #20]
}
 800ba62:	bf00      	nop
 800ba64:	3714      	adds	r7, #20
 800ba66:	46bd      	mov	sp, r7
 800ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6c:	4770      	bx	lr
 800ba6e:	bf00      	nop
 800ba70:	40010000 	.word	0x40010000
 800ba74:	40000400 	.word	0x40000400
 800ba78:	40000800 	.word	0x40000800
 800ba7c:	40000c00 	.word	0x40000c00
 800ba80:	40010400 	.word	0x40010400
 800ba84:	40014000 	.word	0x40014000
 800ba88:	40014400 	.word	0x40014400
 800ba8c:	40014800 	.word	0x40014800
 800ba90:	40001800 	.word	0x40001800
 800ba94:	40001c00 	.word	0x40001c00
 800ba98:	40002000 	.word	0x40002000

0800ba9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b087      	sub	sp, #28
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	60f8      	str	r0, [r7, #12]
 800baa4:	60b9      	str	r1, [r7, #8]
 800baa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	6a1b      	ldr	r3, [r3, #32]
 800baac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	6a1b      	ldr	r3, [r3, #32]
 800bab2:	f023 0201 	bic.w	r2, r3, #1
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	699b      	ldr	r3, [r3, #24]
 800babe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bac6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	011b      	lsls	r3, r3, #4
 800bacc:	693a      	ldr	r2, [r7, #16]
 800bace:	4313      	orrs	r3, r2
 800bad0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	f023 030a 	bic.w	r3, r3, #10
 800bad8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bada:	697a      	ldr	r2, [r7, #20]
 800badc:	68bb      	ldr	r3, [r7, #8]
 800bade:	4313      	orrs	r3, r2
 800bae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	693a      	ldr	r2, [r7, #16]
 800bae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bae8:	68fb      	ldr	r3, [r7, #12]
 800baea:	697a      	ldr	r2, [r7, #20]
 800baec:	621a      	str	r2, [r3, #32]
}
 800baee:	bf00      	nop
 800baf0:	371c      	adds	r7, #28
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr

0800bafa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bafa:	b480      	push	{r7}
 800bafc:	b087      	sub	sp, #28
 800bafe:	af00      	add	r7, sp, #0
 800bb00:	60f8      	str	r0, [r7, #12]
 800bb02:	60b9      	str	r1, [r7, #8]
 800bb04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	6a1b      	ldr	r3, [r3, #32]
 800bb0a:	f023 0210 	bic.w	r2, r3, #16
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	699b      	ldr	r3, [r3, #24]
 800bb16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	6a1b      	ldr	r3, [r3, #32]
 800bb1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bb24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	031b      	lsls	r3, r3, #12
 800bb2a:	697a      	ldr	r2, [r7, #20]
 800bb2c:	4313      	orrs	r3, r2
 800bb2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bb30:	693b      	ldr	r3, [r7, #16]
 800bb32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bb36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bb38:	68bb      	ldr	r3, [r7, #8]
 800bb3a:	011b      	lsls	r3, r3, #4
 800bb3c:	693a      	ldr	r2, [r7, #16]
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	697a      	ldr	r2, [r7, #20]
 800bb46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	693a      	ldr	r2, [r7, #16]
 800bb4c:	621a      	str	r2, [r3, #32]
}
 800bb4e:	bf00      	nop
 800bb50:	371c      	adds	r7, #28
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr

0800bb5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bb5a:	b480      	push	{r7}
 800bb5c:	b085      	sub	sp, #20
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
 800bb62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	689b      	ldr	r3, [r3, #8]
 800bb68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bb72:	683a      	ldr	r2, [r7, #0]
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	4313      	orrs	r3, r2
 800bb78:	f043 0307 	orr.w	r3, r3, #7
 800bb7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	68fa      	ldr	r2, [r7, #12]
 800bb82:	609a      	str	r2, [r3, #8]
}
 800bb84:	bf00      	nop
 800bb86:	3714      	adds	r7, #20
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb8e:	4770      	bx	lr

0800bb90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bb90:	b480      	push	{r7}
 800bb92:	b087      	sub	sp, #28
 800bb94:	af00      	add	r7, sp, #0
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	60b9      	str	r1, [r7, #8]
 800bb9a:	607a      	str	r2, [r7, #4]
 800bb9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	689b      	ldr	r3, [r3, #8]
 800bba2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bba4:	697b      	ldr	r3, [r7, #20]
 800bba6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bbaa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	021a      	lsls	r2, r3, #8
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	431a      	orrs	r2, r3
 800bbb4:	68bb      	ldr	r3, [r7, #8]
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	697a      	ldr	r2, [r7, #20]
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	697a      	ldr	r2, [r7, #20]
 800bbc2:	609a      	str	r2, [r3, #8]
}
 800bbc4:	bf00      	nop
 800bbc6:	371c      	adds	r7, #28
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbce:	4770      	bx	lr

0800bbd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b085      	sub	sp, #20
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d101      	bne.n	800bbe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bbe4:	2302      	movs	r3, #2
 800bbe6:	e05a      	b.n	800bc9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2201      	movs	r2, #1
 800bbec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	2202      	movs	r2, #2
 800bbf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	689b      	ldr	r3, [r3, #8]
 800bc06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bc10:	683b      	ldr	r3, [r7, #0]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	68fa      	ldr	r2, [r7, #12]
 800bc16:	4313      	orrs	r3, r2
 800bc18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	68fa      	ldr	r2, [r7, #12]
 800bc20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4a21      	ldr	r2, [pc, #132]	; (800bcac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d022      	beq.n	800bc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc34:	d01d      	beq.n	800bc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	4a1d      	ldr	r2, [pc, #116]	; (800bcb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d018      	beq.n	800bc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	4a1b      	ldr	r2, [pc, #108]	; (800bcb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800bc46:	4293      	cmp	r3, r2
 800bc48:	d013      	beq.n	800bc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4a1a      	ldr	r2, [pc, #104]	; (800bcb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d00e      	beq.n	800bc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	4a18      	ldr	r2, [pc, #96]	; (800bcbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800bc5a:	4293      	cmp	r3, r2
 800bc5c:	d009      	beq.n	800bc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	4a17      	ldr	r2, [pc, #92]	; (800bcc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d004      	beq.n	800bc72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	4a15      	ldr	r2, [pc, #84]	; (800bcc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d10c      	bne.n	800bc8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bc78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bc7a:	683b      	ldr	r3, [r7, #0]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	68ba      	ldr	r2, [r7, #8]
 800bc80:	4313      	orrs	r3, r2
 800bc82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	68ba      	ldr	r2, [r7, #8]
 800bc8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	2201      	movs	r2, #1
 800bc90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2200      	movs	r2, #0
 800bc98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc9c:	2300      	movs	r3, #0
}
 800bc9e:	4618      	mov	r0, r3
 800bca0:	3714      	adds	r7, #20
 800bca2:	46bd      	mov	sp, r7
 800bca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bca8:	4770      	bx	lr
 800bcaa:	bf00      	nop
 800bcac:	40010000 	.word	0x40010000
 800bcb0:	40000400 	.word	0x40000400
 800bcb4:	40000800 	.word	0x40000800
 800bcb8:	40000c00 	.word	0x40000c00
 800bcbc:	40010400 	.word	0x40010400
 800bcc0:	40014000 	.word	0x40014000
 800bcc4:	40001800 	.word	0x40001800

0800bcc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b083      	sub	sp, #12
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bcd0:	bf00      	nop
 800bcd2:	370c      	adds	r7, #12
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr

0800bcdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b083      	sub	sp, #12
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bce4:	bf00      	nop
 800bce6:	370c      	adds	r7, #12
 800bce8:	46bd      	mov	sp, r7
 800bcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcee:	4770      	bx	lr

0800bcf0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bcf0:	b084      	sub	sp, #16
 800bcf2:	b580      	push	{r7, lr}
 800bcf4:	b084      	sub	sp, #16
 800bcf6:	af00      	add	r7, sp, #0
 800bcf8:	6078      	str	r0, [r7, #4]
 800bcfa:	f107 001c 	add.w	r0, r7, #28
 800bcfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800bd02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	d122      	bne.n	800bd4e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	68db      	ldr	r3, [r3, #12]
 800bd18:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800bd1c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd20:	687a      	ldr	r2, [r7, #4]
 800bd22:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	68db      	ldr	r3, [r3, #12]
 800bd28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bd30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bd32:	2b01      	cmp	r3, #1
 800bd34:	d105      	bne.n	800bd42 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	68db      	ldr	r3, [r3, #12]
 800bd3a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	f001 fb1c 	bl	800d380 <USB_CoreReset>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	73fb      	strb	r3, [r7, #15]
 800bd4c:	e01a      	b.n	800bd84 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800bd5a:	6878      	ldr	r0, [r7, #4]
 800bd5c:	f001 fb10 	bl	800d380 <USB_CoreReset>
 800bd60:	4603      	mov	r3, r0
 800bd62:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bd64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d106      	bne.n	800bd78 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd6e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	639a      	str	r2, [r3, #56]	; 0x38
 800bd76:	e005      	b.n	800bd84 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd7c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bd84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd86:	2b01      	cmp	r3, #1
 800bd88:	d10b      	bne.n	800bda2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	689b      	ldr	r3, [r3, #8]
 800bd8e:	f043 0206 	orr.w	r2, r3, #6
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	689b      	ldr	r3, [r3, #8]
 800bd9a:	f043 0220 	orr.w	r2, r3, #32
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bda2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bda4:	4618      	mov	r0, r3
 800bda6:	3710      	adds	r7, #16
 800bda8:	46bd      	mov	sp, r7
 800bdaa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bdae:	b004      	add	sp, #16
 800bdb0:	4770      	bx	lr
	...

0800bdb4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b087      	sub	sp, #28
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bdc2:	79fb      	ldrb	r3, [r7, #7]
 800bdc4:	2b02      	cmp	r3, #2
 800bdc6:	d165      	bne.n	800be94 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bdc8:	68bb      	ldr	r3, [r7, #8]
 800bdca:	4a41      	ldr	r2, [pc, #260]	; (800bed0 <USB_SetTurnaroundTime+0x11c>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d906      	bls.n	800bdde <USB_SetTurnaroundTime+0x2a>
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	4a40      	ldr	r2, [pc, #256]	; (800bed4 <USB_SetTurnaroundTime+0x120>)
 800bdd4:	4293      	cmp	r3, r2
 800bdd6:	d202      	bcs.n	800bdde <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bdd8:	230f      	movs	r3, #15
 800bdda:	617b      	str	r3, [r7, #20]
 800bddc:	e062      	b.n	800bea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	4a3c      	ldr	r2, [pc, #240]	; (800bed4 <USB_SetTurnaroundTime+0x120>)
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d306      	bcc.n	800bdf4 <USB_SetTurnaroundTime+0x40>
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	4a3b      	ldr	r2, [pc, #236]	; (800bed8 <USB_SetTurnaroundTime+0x124>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d202      	bcs.n	800bdf4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bdee:	230e      	movs	r3, #14
 800bdf0:	617b      	str	r3, [r7, #20]
 800bdf2:	e057      	b.n	800bea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	4a38      	ldr	r2, [pc, #224]	; (800bed8 <USB_SetTurnaroundTime+0x124>)
 800bdf8:	4293      	cmp	r3, r2
 800bdfa:	d306      	bcc.n	800be0a <USB_SetTurnaroundTime+0x56>
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	4a37      	ldr	r2, [pc, #220]	; (800bedc <USB_SetTurnaroundTime+0x128>)
 800be00:	4293      	cmp	r3, r2
 800be02:	d202      	bcs.n	800be0a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800be04:	230d      	movs	r3, #13
 800be06:	617b      	str	r3, [r7, #20]
 800be08:	e04c      	b.n	800bea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800be0a:	68bb      	ldr	r3, [r7, #8]
 800be0c:	4a33      	ldr	r2, [pc, #204]	; (800bedc <USB_SetTurnaroundTime+0x128>)
 800be0e:	4293      	cmp	r3, r2
 800be10:	d306      	bcc.n	800be20 <USB_SetTurnaroundTime+0x6c>
 800be12:	68bb      	ldr	r3, [r7, #8]
 800be14:	4a32      	ldr	r2, [pc, #200]	; (800bee0 <USB_SetTurnaroundTime+0x12c>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d802      	bhi.n	800be20 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800be1a:	230c      	movs	r3, #12
 800be1c:	617b      	str	r3, [r7, #20]
 800be1e:	e041      	b.n	800bea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	4a2f      	ldr	r2, [pc, #188]	; (800bee0 <USB_SetTurnaroundTime+0x12c>)
 800be24:	4293      	cmp	r3, r2
 800be26:	d906      	bls.n	800be36 <USB_SetTurnaroundTime+0x82>
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	4a2e      	ldr	r2, [pc, #184]	; (800bee4 <USB_SetTurnaroundTime+0x130>)
 800be2c:	4293      	cmp	r3, r2
 800be2e:	d802      	bhi.n	800be36 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800be30:	230b      	movs	r3, #11
 800be32:	617b      	str	r3, [r7, #20]
 800be34:	e036      	b.n	800bea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	4a2a      	ldr	r2, [pc, #168]	; (800bee4 <USB_SetTurnaroundTime+0x130>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d906      	bls.n	800be4c <USB_SetTurnaroundTime+0x98>
 800be3e:	68bb      	ldr	r3, [r7, #8]
 800be40:	4a29      	ldr	r2, [pc, #164]	; (800bee8 <USB_SetTurnaroundTime+0x134>)
 800be42:	4293      	cmp	r3, r2
 800be44:	d802      	bhi.n	800be4c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800be46:	230a      	movs	r3, #10
 800be48:	617b      	str	r3, [r7, #20]
 800be4a:	e02b      	b.n	800bea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	4a26      	ldr	r2, [pc, #152]	; (800bee8 <USB_SetTurnaroundTime+0x134>)
 800be50:	4293      	cmp	r3, r2
 800be52:	d906      	bls.n	800be62 <USB_SetTurnaroundTime+0xae>
 800be54:	68bb      	ldr	r3, [r7, #8]
 800be56:	4a25      	ldr	r2, [pc, #148]	; (800beec <USB_SetTurnaroundTime+0x138>)
 800be58:	4293      	cmp	r3, r2
 800be5a:	d202      	bcs.n	800be62 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800be5c:	2309      	movs	r3, #9
 800be5e:	617b      	str	r3, [r7, #20]
 800be60:	e020      	b.n	800bea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	4a21      	ldr	r2, [pc, #132]	; (800beec <USB_SetTurnaroundTime+0x138>)
 800be66:	4293      	cmp	r3, r2
 800be68:	d306      	bcc.n	800be78 <USB_SetTurnaroundTime+0xc4>
 800be6a:	68bb      	ldr	r3, [r7, #8]
 800be6c:	4a20      	ldr	r2, [pc, #128]	; (800bef0 <USB_SetTurnaroundTime+0x13c>)
 800be6e:	4293      	cmp	r3, r2
 800be70:	d802      	bhi.n	800be78 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800be72:	2308      	movs	r3, #8
 800be74:	617b      	str	r3, [r7, #20]
 800be76:	e015      	b.n	800bea4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800be78:	68bb      	ldr	r3, [r7, #8]
 800be7a:	4a1d      	ldr	r2, [pc, #116]	; (800bef0 <USB_SetTurnaroundTime+0x13c>)
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d906      	bls.n	800be8e <USB_SetTurnaroundTime+0xda>
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	4a1c      	ldr	r2, [pc, #112]	; (800bef4 <USB_SetTurnaroundTime+0x140>)
 800be84:	4293      	cmp	r3, r2
 800be86:	d202      	bcs.n	800be8e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800be88:	2307      	movs	r3, #7
 800be8a:	617b      	str	r3, [r7, #20]
 800be8c:	e00a      	b.n	800bea4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800be8e:	2306      	movs	r3, #6
 800be90:	617b      	str	r3, [r7, #20]
 800be92:	e007      	b.n	800bea4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800be94:	79fb      	ldrb	r3, [r7, #7]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d102      	bne.n	800bea0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800be9a:	2309      	movs	r3, #9
 800be9c:	617b      	str	r3, [r7, #20]
 800be9e:	e001      	b.n	800bea4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800bea0:	2309      	movs	r3, #9
 800bea2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	68db      	ldr	r3, [r3, #12]
 800bea8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800beb0:	68fb      	ldr	r3, [r7, #12]
 800beb2:	68da      	ldr	r2, [r3, #12]
 800beb4:	697b      	ldr	r3, [r7, #20]
 800beb6:	029b      	lsls	r3, r3, #10
 800beb8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800bebc:	431a      	orrs	r2, r3
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bec2:	2300      	movs	r3, #0
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	371c      	adds	r7, #28
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr
 800bed0:	00d8acbf 	.word	0x00d8acbf
 800bed4:	00e4e1c0 	.word	0x00e4e1c0
 800bed8:	00f42400 	.word	0x00f42400
 800bedc:	01067380 	.word	0x01067380
 800bee0:	011a499f 	.word	0x011a499f
 800bee4:	01312cff 	.word	0x01312cff
 800bee8:	014ca43f 	.word	0x014ca43f
 800beec:	016e3600 	.word	0x016e3600
 800bef0:	01a6ab1f 	.word	0x01a6ab1f
 800bef4:	01e84800 	.word	0x01e84800

0800bef8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bef8:	b480      	push	{r7}
 800befa:	b083      	sub	sp, #12
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	689b      	ldr	r3, [r3, #8]
 800bf04:	f043 0201 	orr.w	r2, r3, #1
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bf0c:	2300      	movs	r3, #0
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	370c      	adds	r7, #12
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr

0800bf1a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf1a:	b480      	push	{r7}
 800bf1c:	b083      	sub	sp, #12
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	689b      	ldr	r3, [r3, #8]
 800bf26:	f023 0201 	bic.w	r2, r3, #1
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800bf2e:	2300      	movs	r3, #0
}
 800bf30:	4618      	mov	r0, r3
 800bf32:	370c      	adds	r7, #12
 800bf34:	46bd      	mov	sp, r7
 800bf36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3a:	4770      	bx	lr

0800bf3c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	6078      	str	r0, [r7, #4]
 800bf44:	460b      	mov	r3, r1
 800bf46:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	68db      	ldr	r3, [r3, #12]
 800bf50:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800bf58:	78fb      	ldrb	r3, [r7, #3]
 800bf5a:	2b01      	cmp	r3, #1
 800bf5c:	d115      	bne.n	800bf8a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	68db      	ldr	r3, [r3, #12]
 800bf62:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bf6a:	2001      	movs	r0, #1
 800bf6c:	f7f9 fdfa 	bl	8005b64 <HAL_Delay>
      ms++;
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	3301      	adds	r3, #1
 800bf74:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800bf76:	6878      	ldr	r0, [r7, #4]
 800bf78:	f001 f972 	bl	800d260 <USB_GetMode>
 800bf7c:	4603      	mov	r3, r0
 800bf7e:	2b01      	cmp	r3, #1
 800bf80:	d01e      	beq.n	800bfc0 <USB_SetCurrentMode+0x84>
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	2b31      	cmp	r3, #49	; 0x31
 800bf86:	d9f0      	bls.n	800bf6a <USB_SetCurrentMode+0x2e>
 800bf88:	e01a      	b.n	800bfc0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800bf8a:	78fb      	ldrb	r3, [r7, #3]
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d115      	bne.n	800bfbc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	68db      	ldr	r3, [r3, #12]
 800bf94:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800bf9c:	2001      	movs	r0, #1
 800bf9e:	f7f9 fde1 	bl	8005b64 <HAL_Delay>
      ms++;
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	3301      	adds	r3, #1
 800bfa6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f001 f959 	bl	800d260 <USB_GetMode>
 800bfae:	4603      	mov	r3, r0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d005      	beq.n	800bfc0 <USB_SetCurrentMode+0x84>
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	2b31      	cmp	r3, #49	; 0x31
 800bfb8:	d9f0      	bls.n	800bf9c <USB_SetCurrentMode+0x60>
 800bfba:	e001      	b.n	800bfc0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bfbc:	2301      	movs	r3, #1
 800bfbe:	e005      	b.n	800bfcc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	2b32      	cmp	r3, #50	; 0x32
 800bfc4:	d101      	bne.n	800bfca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bfc6:	2301      	movs	r3, #1
 800bfc8:	e000      	b.n	800bfcc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bfca:	2300      	movs	r3, #0
}
 800bfcc:	4618      	mov	r0, r3
 800bfce:	3710      	adds	r7, #16
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}

0800bfd4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bfd4:	b084      	sub	sp, #16
 800bfd6:	b580      	push	{r7, lr}
 800bfd8:	b086      	sub	sp, #24
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	6078      	str	r0, [r7, #4]
 800bfde:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bfe2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800bfee:	2300      	movs	r3, #0
 800bff0:	613b      	str	r3, [r7, #16]
 800bff2:	e009      	b.n	800c008 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800bff4:	687a      	ldr	r2, [r7, #4]
 800bff6:	693b      	ldr	r3, [r7, #16]
 800bff8:	3340      	adds	r3, #64	; 0x40
 800bffa:	009b      	lsls	r3, r3, #2
 800bffc:	4413      	add	r3, r2
 800bffe:	2200      	movs	r2, #0
 800c000:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c002:	693b      	ldr	r3, [r7, #16]
 800c004:	3301      	adds	r3, #1
 800c006:	613b      	str	r3, [r7, #16]
 800c008:	693b      	ldr	r3, [r7, #16]
 800c00a:	2b0e      	cmp	r3, #14
 800c00c:	d9f2      	bls.n	800bff4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c00e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c010:	2b00      	cmp	r3, #0
 800c012:	d11c      	bne.n	800c04e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c01a:	685b      	ldr	r3, [r3, #4]
 800c01c:	68fa      	ldr	r2, [r7, #12]
 800c01e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c022:	f043 0302 	orr.w	r3, r3, #2
 800c026:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c02c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c038:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c044:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	639a      	str	r2, [r3, #56]	; 0x38
 800c04c:	e00b      	b.n	800c066 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c052:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c05e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c06c:	461a      	mov	r2, r3
 800c06e:	2300      	movs	r3, #0
 800c070:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c078:	4619      	mov	r1, r3
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c080:	461a      	mov	r2, r3
 800c082:	680b      	ldr	r3, [r1, #0]
 800c084:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c088:	2b01      	cmp	r3, #1
 800c08a:	d10c      	bne.n	800c0a6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d104      	bne.n	800c09c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c092:	2100      	movs	r1, #0
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 f945 	bl	800c324 <USB_SetDevSpeed>
 800c09a:	e008      	b.n	800c0ae <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c09c:	2101      	movs	r1, #1
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f000 f940 	bl	800c324 <USB_SetDevSpeed>
 800c0a4:	e003      	b.n	800c0ae <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c0a6:	2103      	movs	r1, #3
 800c0a8:	6878      	ldr	r0, [r7, #4]
 800c0aa:	f000 f93b 	bl	800c324 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c0ae:	2110      	movs	r1, #16
 800c0b0:	6878      	ldr	r0, [r7, #4]
 800c0b2:	f000 f8f3 	bl	800c29c <USB_FlushTxFifo>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d001      	beq.n	800c0c0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800c0bc:	2301      	movs	r3, #1
 800c0be:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c0c0:	6878      	ldr	r0, [r7, #4]
 800c0c2:	f000 f90f 	bl	800c2e4 <USB_FlushRxFifo>
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d001      	beq.n	800c0d0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	2300      	movs	r3, #0
 800c0da:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0ee:	461a      	mov	r2, r3
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c0f4:	2300      	movs	r3, #0
 800c0f6:	613b      	str	r3, [r7, #16]
 800c0f8:	e043      	b.n	800c182 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	015a      	lsls	r2, r3, #5
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	4413      	add	r3, r2
 800c102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c10c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c110:	d118      	bne.n	800c144 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d10a      	bne.n	800c12e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c118:	693b      	ldr	r3, [r7, #16]
 800c11a:	015a      	lsls	r2, r3, #5
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	4413      	add	r3, r2
 800c120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c124:	461a      	mov	r2, r3
 800c126:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c12a:	6013      	str	r3, [r2, #0]
 800c12c:	e013      	b.n	800c156 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	015a      	lsls	r2, r3, #5
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	4413      	add	r3, r2
 800c136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c13a:	461a      	mov	r2, r3
 800c13c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c140:	6013      	str	r3, [r2, #0]
 800c142:	e008      	b.n	800c156 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	015a      	lsls	r2, r3, #5
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	4413      	add	r3, r2
 800c14c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c150:	461a      	mov	r2, r3
 800c152:	2300      	movs	r3, #0
 800c154:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	015a      	lsls	r2, r3, #5
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	4413      	add	r3, r2
 800c15e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c162:	461a      	mov	r2, r3
 800c164:	2300      	movs	r3, #0
 800c166:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c168:	693b      	ldr	r3, [r7, #16]
 800c16a:	015a      	lsls	r2, r3, #5
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	4413      	add	r3, r2
 800c170:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c174:	461a      	mov	r2, r3
 800c176:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c17a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	3301      	adds	r3, #1
 800c180:	613b      	str	r3, [r7, #16]
 800c182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c184:	693a      	ldr	r2, [r7, #16]
 800c186:	429a      	cmp	r2, r3
 800c188:	d3b7      	bcc.n	800c0fa <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c18a:	2300      	movs	r3, #0
 800c18c:	613b      	str	r3, [r7, #16]
 800c18e:	e043      	b.n	800c218 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	015a      	lsls	r2, r3, #5
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	4413      	add	r3, r2
 800c198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c19c:	681b      	ldr	r3, [r3, #0]
 800c19e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1a6:	d118      	bne.n	800c1da <USB_DevInit+0x206>
    {
      if (i == 0U)
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d10a      	bne.n	800c1c4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c1ae:	693b      	ldr	r3, [r7, #16]
 800c1b0:	015a      	lsls	r2, r3, #5
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	4413      	add	r3, r2
 800c1b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ba:	461a      	mov	r2, r3
 800c1bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c1c0:	6013      	str	r3, [r2, #0]
 800c1c2:	e013      	b.n	800c1ec <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	015a      	lsls	r2, r3, #5
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	4413      	add	r3, r2
 800c1cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1d0:	461a      	mov	r2, r3
 800c1d2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c1d6:	6013      	str	r3, [r2, #0]
 800c1d8:	e008      	b.n	800c1ec <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c1da:	693b      	ldr	r3, [r7, #16]
 800c1dc:	015a      	lsls	r2, r3, #5
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1e6:	461a      	mov	r2, r3
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c1ec:	693b      	ldr	r3, [r7, #16]
 800c1ee:	015a      	lsls	r2, r3, #5
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	4413      	add	r3, r2
 800c1f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1f8:	461a      	mov	r2, r3
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c1fe:	693b      	ldr	r3, [r7, #16]
 800c200:	015a      	lsls	r2, r3, #5
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	4413      	add	r3, r2
 800c206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c20a:	461a      	mov	r2, r3
 800c20c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c210:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	3301      	adds	r3, #1
 800c216:	613b      	str	r3, [r7, #16]
 800c218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c21a:	693a      	ldr	r2, [r7, #16]
 800c21c:	429a      	cmp	r2, r3
 800c21e:	d3b7      	bcc.n	800c190 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c226:	691b      	ldr	r3, [r3, #16]
 800c228:	68fa      	ldr	r2, [r7, #12]
 800c22a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c22e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c232:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2200      	movs	r2, #0
 800c238:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c240:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c244:	2b00      	cmp	r3, #0
 800c246:	d105      	bne.n	800c254 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	699b      	ldr	r3, [r3, #24]
 800c24c:	f043 0210 	orr.w	r2, r3, #16
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	699a      	ldr	r2, [r3, #24]
 800c258:	4b0f      	ldr	r3, [pc, #60]	; (800c298 <USB_DevInit+0x2c4>)
 800c25a:	4313      	orrs	r3, r2
 800c25c:	687a      	ldr	r2, [r7, #4]
 800c25e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c260:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c262:	2b00      	cmp	r3, #0
 800c264:	d005      	beq.n	800c272 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	699b      	ldr	r3, [r3, #24]
 800c26a:	f043 0208 	orr.w	r2, r3, #8
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c272:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c274:	2b01      	cmp	r3, #1
 800c276:	d107      	bne.n	800c288 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	699b      	ldr	r3, [r3, #24]
 800c27c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c280:	f043 0304 	orr.w	r3, r3, #4
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c288:	7dfb      	ldrb	r3, [r7, #23]
}
 800c28a:	4618      	mov	r0, r3
 800c28c:	3718      	adds	r7, #24
 800c28e:	46bd      	mov	sp, r7
 800c290:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c294:	b004      	add	sp, #16
 800c296:	4770      	bx	lr
 800c298:	803c3800 	.word	0x803c3800

0800c29c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b085      	sub	sp, #20
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	6078      	str	r0, [r7, #4]
 800c2a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c2aa:	683b      	ldr	r3, [r7, #0]
 800c2ac:	019b      	lsls	r3, r3, #6
 800c2ae:	f043 0220 	orr.w	r2, r3, #32
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	3301      	adds	r3, #1
 800c2ba:	60fb      	str	r3, [r7, #12]
 800c2bc:	4a08      	ldr	r2, [pc, #32]	; (800c2e0 <USB_FlushTxFifo+0x44>)
 800c2be:	4293      	cmp	r3, r2
 800c2c0:	d901      	bls.n	800c2c6 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800c2c2:	2303      	movs	r3, #3
 800c2c4:	e006      	b.n	800c2d4 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	691b      	ldr	r3, [r3, #16]
 800c2ca:	f003 0320 	and.w	r3, r3, #32
 800c2ce:	2b20      	cmp	r3, #32
 800c2d0:	d0f1      	beq.n	800c2b6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c2d2:	2300      	movs	r3, #0
}
 800c2d4:	4618      	mov	r0, r3
 800c2d6:	3714      	adds	r7, #20
 800c2d8:	46bd      	mov	sp, r7
 800c2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2de:	4770      	bx	lr
 800c2e0:	00030d40 	.word	0x00030d40

0800c2e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c2e4:	b480      	push	{r7}
 800c2e6:	b085      	sub	sp, #20
 800c2e8:	af00      	add	r7, sp, #0
 800c2ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	2210      	movs	r2, #16
 800c2f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	3301      	adds	r3, #1
 800c2fa:	60fb      	str	r3, [r7, #12]
 800c2fc:	4a08      	ldr	r2, [pc, #32]	; (800c320 <USB_FlushRxFifo+0x3c>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d901      	bls.n	800c306 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800c302:	2303      	movs	r3, #3
 800c304:	e006      	b.n	800c314 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	691b      	ldr	r3, [r3, #16]
 800c30a:	f003 0310 	and.w	r3, r3, #16
 800c30e:	2b10      	cmp	r3, #16
 800c310:	d0f1      	beq.n	800c2f6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c312:	2300      	movs	r3, #0
}
 800c314:	4618      	mov	r0, r3
 800c316:	3714      	adds	r7, #20
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr
 800c320:	00030d40 	.word	0x00030d40

0800c324 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c324:	b480      	push	{r7}
 800c326:	b085      	sub	sp, #20
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	460b      	mov	r3, r1
 800c32e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c33a:	681a      	ldr	r2, [r3, #0]
 800c33c:	78fb      	ldrb	r3, [r7, #3]
 800c33e:	68f9      	ldr	r1, [r7, #12]
 800c340:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c344:	4313      	orrs	r3, r2
 800c346:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c348:	2300      	movs	r3, #0
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3714      	adds	r7, #20
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr

0800c356 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c356:	b480      	push	{r7}
 800c358:	b087      	sub	sp, #28
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c362:	693b      	ldr	r3, [r7, #16]
 800c364:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c368:	689b      	ldr	r3, [r3, #8]
 800c36a:	f003 0306 	and.w	r3, r3, #6
 800c36e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d102      	bne.n	800c37c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c376:	2300      	movs	r3, #0
 800c378:	75fb      	strb	r3, [r7, #23]
 800c37a:	e00a      	b.n	800c392 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	2b02      	cmp	r3, #2
 800c380:	d002      	beq.n	800c388 <USB_GetDevSpeed+0x32>
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	2b06      	cmp	r3, #6
 800c386:	d102      	bne.n	800c38e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c388:	2302      	movs	r3, #2
 800c38a:	75fb      	strb	r3, [r7, #23]
 800c38c:	e001      	b.n	800c392 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c38e:	230f      	movs	r3, #15
 800c390:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c392:	7dfb      	ldrb	r3, [r7, #23]
}
 800c394:	4618      	mov	r0, r3
 800c396:	371c      	adds	r7, #28
 800c398:	46bd      	mov	sp, r7
 800c39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c39e:	4770      	bx	lr

0800c3a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c3a0:	b480      	push	{r7}
 800c3a2:	b085      	sub	sp, #20
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
 800c3a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	781b      	ldrb	r3, [r3, #0]
 800c3b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	785b      	ldrb	r3, [r3, #1]
 800c3b8:	2b01      	cmp	r3, #1
 800c3ba:	d13a      	bne.n	800c432 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c3bc:	68fb      	ldr	r3, [r7, #12]
 800c3be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3c2:	69da      	ldr	r2, [r3, #28]
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	f003 030f 	and.w	r3, r3, #15
 800c3cc:	2101      	movs	r1, #1
 800c3ce:	fa01 f303 	lsl.w	r3, r1, r3
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	68f9      	ldr	r1, [r7, #12]
 800c3d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	015a      	lsls	r2, r3, #5
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	4413      	add	r3, r2
 800c3e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c3ea:	681b      	ldr	r3, [r3, #0]
 800c3ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d155      	bne.n	800c4a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	015a      	lsls	r2, r3, #5
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	4413      	add	r3, r2
 800c3fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c400:	681a      	ldr	r2, [r3, #0]
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	689b      	ldr	r3, [r3, #8]
 800c406:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c40a:	683b      	ldr	r3, [r7, #0]
 800c40c:	78db      	ldrb	r3, [r3, #3]
 800c40e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c410:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c412:	68bb      	ldr	r3, [r7, #8]
 800c414:	059b      	lsls	r3, r3, #22
 800c416:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c418:	4313      	orrs	r3, r2
 800c41a:	68ba      	ldr	r2, [r7, #8]
 800c41c:	0151      	lsls	r1, r2, #5
 800c41e:	68fa      	ldr	r2, [r7, #12]
 800c420:	440a      	add	r2, r1
 800c422:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c426:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c42a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c42e:	6013      	str	r3, [r2, #0]
 800c430:	e036      	b.n	800c4a0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c438:	69da      	ldr	r2, [r3, #28]
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	781b      	ldrb	r3, [r3, #0]
 800c43e:	f003 030f 	and.w	r3, r3, #15
 800c442:	2101      	movs	r1, #1
 800c444:	fa01 f303 	lsl.w	r3, r1, r3
 800c448:	041b      	lsls	r3, r3, #16
 800c44a:	68f9      	ldr	r1, [r7, #12]
 800c44c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c450:	4313      	orrs	r3, r2
 800c452:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	015a      	lsls	r2, r3, #5
 800c458:	68fb      	ldr	r3, [r7, #12]
 800c45a:	4413      	add	r3, r2
 800c45c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c466:	2b00      	cmp	r3, #0
 800c468:	d11a      	bne.n	800c4a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	015a      	lsls	r2, r3, #5
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	4413      	add	r3, r2
 800c472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c476:	681a      	ldr	r2, [r3, #0]
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	689b      	ldr	r3, [r3, #8]
 800c47c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c480:	683b      	ldr	r3, [r7, #0]
 800c482:	78db      	ldrb	r3, [r3, #3]
 800c484:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c486:	430b      	orrs	r3, r1
 800c488:	4313      	orrs	r3, r2
 800c48a:	68ba      	ldr	r2, [r7, #8]
 800c48c:	0151      	lsls	r1, r2, #5
 800c48e:	68fa      	ldr	r2, [r7, #12]
 800c490:	440a      	add	r2, r1
 800c492:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c496:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c49a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c49e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c4a0:	2300      	movs	r3, #0
}
 800c4a2:	4618      	mov	r0, r3
 800c4a4:	3714      	adds	r7, #20
 800c4a6:	46bd      	mov	sp, r7
 800c4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ac:	4770      	bx	lr
	...

0800c4b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c4b0:	b480      	push	{r7}
 800c4b2:	b085      	sub	sp, #20
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
 800c4b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c4c4:	683b      	ldr	r3, [r7, #0]
 800c4c6:	785b      	ldrb	r3, [r3, #1]
 800c4c8:	2b01      	cmp	r3, #1
 800c4ca:	d161      	bne.n	800c590 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	015a      	lsls	r2, r3, #5
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	4413      	add	r3, r2
 800c4d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c4de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c4e2:	d11f      	bne.n	800c524 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	015a      	lsls	r2, r3, #5
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	4413      	add	r3, r2
 800c4ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4f0:	681b      	ldr	r3, [r3, #0]
 800c4f2:	68ba      	ldr	r2, [r7, #8]
 800c4f4:	0151      	lsls	r1, r2, #5
 800c4f6:	68fa      	ldr	r2, [r7, #12]
 800c4f8:	440a      	add	r2, r1
 800c4fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c4fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c502:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	015a      	lsls	r2, r3, #5
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	4413      	add	r3, r2
 800c50c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	68ba      	ldr	r2, [r7, #8]
 800c514:	0151      	lsls	r1, r2, #5
 800c516:	68fa      	ldr	r2, [r7, #12]
 800c518:	440a      	add	r2, r1
 800c51a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c51e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c522:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c52a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c52c:	683b      	ldr	r3, [r7, #0]
 800c52e:	781b      	ldrb	r3, [r3, #0]
 800c530:	f003 030f 	and.w	r3, r3, #15
 800c534:	2101      	movs	r1, #1
 800c536:	fa01 f303 	lsl.w	r3, r1, r3
 800c53a:	b29b      	uxth	r3, r3
 800c53c:	43db      	mvns	r3, r3
 800c53e:	68f9      	ldr	r1, [r7, #12]
 800c540:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c544:	4013      	ands	r3, r2
 800c546:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c54e:	69da      	ldr	r2, [r3, #28]
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	781b      	ldrb	r3, [r3, #0]
 800c554:	f003 030f 	and.w	r3, r3, #15
 800c558:	2101      	movs	r1, #1
 800c55a:	fa01 f303 	lsl.w	r3, r1, r3
 800c55e:	b29b      	uxth	r3, r3
 800c560:	43db      	mvns	r3, r3
 800c562:	68f9      	ldr	r1, [r7, #12]
 800c564:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c568:	4013      	ands	r3, r2
 800c56a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	015a      	lsls	r2, r3, #5
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	4413      	add	r3, r2
 800c574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c578:	681a      	ldr	r2, [r3, #0]
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	0159      	lsls	r1, r3, #5
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	440b      	add	r3, r1
 800c582:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c586:	4619      	mov	r1, r3
 800c588:	4b35      	ldr	r3, [pc, #212]	; (800c660 <USB_DeactivateEndpoint+0x1b0>)
 800c58a:	4013      	ands	r3, r2
 800c58c:	600b      	str	r3, [r1, #0]
 800c58e:	e060      	b.n	800c652 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	015a      	lsls	r2, r3, #5
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	4413      	add	r3, r2
 800c598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c5a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c5a6:	d11f      	bne.n	800c5e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c5a8:	68bb      	ldr	r3, [r7, #8]
 800c5aa:	015a      	lsls	r2, r3, #5
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	4413      	add	r3, r2
 800c5b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	68ba      	ldr	r2, [r7, #8]
 800c5b8:	0151      	lsls	r1, r2, #5
 800c5ba:	68fa      	ldr	r2, [r7, #12]
 800c5bc:	440a      	add	r2, r1
 800c5be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c5c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c5c8:	68bb      	ldr	r3, [r7, #8]
 800c5ca:	015a      	lsls	r2, r3, #5
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	4413      	add	r3, r2
 800c5d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	68ba      	ldr	r2, [r7, #8]
 800c5d8:	0151      	lsls	r1, r2, #5
 800c5da:	68fa      	ldr	r2, [r7, #12]
 800c5dc:	440a      	add	r2, r1
 800c5de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c5e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	781b      	ldrb	r3, [r3, #0]
 800c5f4:	f003 030f 	and.w	r3, r3, #15
 800c5f8:	2101      	movs	r1, #1
 800c5fa:	fa01 f303 	lsl.w	r3, r1, r3
 800c5fe:	041b      	lsls	r3, r3, #16
 800c600:	43db      	mvns	r3, r3
 800c602:	68f9      	ldr	r1, [r7, #12]
 800c604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c608:	4013      	ands	r3, r2
 800c60a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c612:	69da      	ldr	r2, [r3, #28]
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	781b      	ldrb	r3, [r3, #0]
 800c618:	f003 030f 	and.w	r3, r3, #15
 800c61c:	2101      	movs	r1, #1
 800c61e:	fa01 f303 	lsl.w	r3, r1, r3
 800c622:	041b      	lsls	r3, r3, #16
 800c624:	43db      	mvns	r3, r3
 800c626:	68f9      	ldr	r1, [r7, #12]
 800c628:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c62c:	4013      	ands	r3, r2
 800c62e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	015a      	lsls	r2, r3, #5
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	4413      	add	r3, r2
 800c638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c63c:	681a      	ldr	r2, [r3, #0]
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	0159      	lsls	r1, r3, #5
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	440b      	add	r3, r1
 800c646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c64a:	4619      	mov	r1, r3
 800c64c:	4b05      	ldr	r3, [pc, #20]	; (800c664 <USB_DeactivateEndpoint+0x1b4>)
 800c64e:	4013      	ands	r3, r2
 800c650:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c652:	2300      	movs	r3, #0
}
 800c654:	4618      	mov	r0, r3
 800c656:	3714      	adds	r7, #20
 800c658:	46bd      	mov	sp, r7
 800c65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c65e:	4770      	bx	lr
 800c660:	ec337800 	.word	0xec337800
 800c664:	eff37800 	.word	0xeff37800

0800c668 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b08a      	sub	sp, #40	; 0x28
 800c66c:	af02      	add	r7, sp, #8
 800c66e:	60f8      	str	r0, [r7, #12]
 800c670:	60b9      	str	r1, [r7, #8]
 800c672:	4613      	mov	r3, r2
 800c674:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	785b      	ldrb	r3, [r3, #1]
 800c684:	2b01      	cmp	r3, #1
 800c686:	f040 815c 	bne.w	800c942 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c68a:	68bb      	ldr	r3, [r7, #8]
 800c68c:	695b      	ldr	r3, [r3, #20]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d132      	bne.n	800c6f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c692:	69bb      	ldr	r3, [r7, #24]
 800c694:	015a      	lsls	r2, r3, #5
 800c696:	69fb      	ldr	r3, [r7, #28]
 800c698:	4413      	add	r3, r2
 800c69a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c69e:	691b      	ldr	r3, [r3, #16]
 800c6a0:	69ba      	ldr	r2, [r7, #24]
 800c6a2:	0151      	lsls	r1, r2, #5
 800c6a4:	69fa      	ldr	r2, [r7, #28]
 800c6a6:	440a      	add	r2, r1
 800c6a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c6b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c6b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c6b6:	69bb      	ldr	r3, [r7, #24]
 800c6b8:	015a      	lsls	r2, r3, #5
 800c6ba:	69fb      	ldr	r3, [r7, #28]
 800c6bc:	4413      	add	r3, r2
 800c6be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6c2:	691b      	ldr	r3, [r3, #16]
 800c6c4:	69ba      	ldr	r2, [r7, #24]
 800c6c6:	0151      	lsls	r1, r2, #5
 800c6c8:	69fa      	ldr	r2, [r7, #28]
 800c6ca:	440a      	add	r2, r1
 800c6cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c6d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c6d6:	69bb      	ldr	r3, [r7, #24]
 800c6d8:	015a      	lsls	r2, r3, #5
 800c6da:	69fb      	ldr	r3, [r7, #28]
 800c6dc:	4413      	add	r3, r2
 800c6de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6e2:	691b      	ldr	r3, [r3, #16]
 800c6e4:	69ba      	ldr	r2, [r7, #24]
 800c6e6:	0151      	lsls	r1, r2, #5
 800c6e8:	69fa      	ldr	r2, [r7, #28]
 800c6ea:	440a      	add	r2, r1
 800c6ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c6f0:	0cdb      	lsrs	r3, r3, #19
 800c6f2:	04db      	lsls	r3, r3, #19
 800c6f4:	6113      	str	r3, [r2, #16]
 800c6f6:	e074      	b.n	800c7e2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c6f8:	69bb      	ldr	r3, [r7, #24]
 800c6fa:	015a      	lsls	r2, r3, #5
 800c6fc:	69fb      	ldr	r3, [r7, #28]
 800c6fe:	4413      	add	r3, r2
 800c700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c704:	691b      	ldr	r3, [r3, #16]
 800c706:	69ba      	ldr	r2, [r7, #24]
 800c708:	0151      	lsls	r1, r2, #5
 800c70a:	69fa      	ldr	r2, [r7, #28]
 800c70c:	440a      	add	r2, r1
 800c70e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c712:	0cdb      	lsrs	r3, r3, #19
 800c714:	04db      	lsls	r3, r3, #19
 800c716:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	015a      	lsls	r2, r3, #5
 800c71c:	69fb      	ldr	r3, [r7, #28]
 800c71e:	4413      	add	r3, r2
 800c720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c724:	691b      	ldr	r3, [r3, #16]
 800c726:	69ba      	ldr	r2, [r7, #24]
 800c728:	0151      	lsls	r1, r2, #5
 800c72a:	69fa      	ldr	r2, [r7, #28]
 800c72c:	440a      	add	r2, r1
 800c72e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c732:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c736:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c73a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c73c:	69bb      	ldr	r3, [r7, #24]
 800c73e:	015a      	lsls	r2, r3, #5
 800c740:	69fb      	ldr	r3, [r7, #28]
 800c742:	4413      	add	r3, r2
 800c744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c748:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c74a:	68bb      	ldr	r3, [r7, #8]
 800c74c:	6959      	ldr	r1, [r3, #20]
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	689b      	ldr	r3, [r3, #8]
 800c752:	440b      	add	r3, r1
 800c754:	1e59      	subs	r1, r3, #1
 800c756:	68bb      	ldr	r3, [r7, #8]
 800c758:	689b      	ldr	r3, [r3, #8]
 800c75a:	fbb1 f3f3 	udiv	r3, r1, r3
 800c75e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c760:	4b9d      	ldr	r3, [pc, #628]	; (800c9d8 <USB_EPStartXfer+0x370>)
 800c762:	400b      	ands	r3, r1
 800c764:	69b9      	ldr	r1, [r7, #24]
 800c766:	0148      	lsls	r0, r1, #5
 800c768:	69f9      	ldr	r1, [r7, #28]
 800c76a:	4401      	add	r1, r0
 800c76c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c770:	4313      	orrs	r3, r2
 800c772:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c774:	69bb      	ldr	r3, [r7, #24]
 800c776:	015a      	lsls	r2, r3, #5
 800c778:	69fb      	ldr	r3, [r7, #28]
 800c77a:	4413      	add	r3, r2
 800c77c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c780:	691a      	ldr	r2, [r3, #16]
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	695b      	ldr	r3, [r3, #20]
 800c786:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c78a:	69b9      	ldr	r1, [r7, #24]
 800c78c:	0148      	lsls	r0, r1, #5
 800c78e:	69f9      	ldr	r1, [r7, #28]
 800c790:	4401      	add	r1, r0
 800c792:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c796:	4313      	orrs	r3, r2
 800c798:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	78db      	ldrb	r3, [r3, #3]
 800c79e:	2b01      	cmp	r3, #1
 800c7a0:	d11f      	bne.n	800c7e2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c7a2:	69bb      	ldr	r3, [r7, #24]
 800c7a4:	015a      	lsls	r2, r3, #5
 800c7a6:	69fb      	ldr	r3, [r7, #28]
 800c7a8:	4413      	add	r3, r2
 800c7aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7ae:	691b      	ldr	r3, [r3, #16]
 800c7b0:	69ba      	ldr	r2, [r7, #24]
 800c7b2:	0151      	lsls	r1, r2, #5
 800c7b4:	69fa      	ldr	r2, [r7, #28]
 800c7b6:	440a      	add	r2, r1
 800c7b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c7c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c7c2:	69bb      	ldr	r3, [r7, #24]
 800c7c4:	015a      	lsls	r2, r3, #5
 800c7c6:	69fb      	ldr	r3, [r7, #28]
 800c7c8:	4413      	add	r3, r2
 800c7ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7ce:	691b      	ldr	r3, [r3, #16]
 800c7d0:	69ba      	ldr	r2, [r7, #24]
 800c7d2:	0151      	lsls	r1, r2, #5
 800c7d4:	69fa      	ldr	r2, [r7, #28]
 800c7d6:	440a      	add	r2, r1
 800c7d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c7dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c7e0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c7e2:	79fb      	ldrb	r3, [r7, #7]
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	d14b      	bne.n	800c880 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	691b      	ldr	r3, [r3, #16]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d009      	beq.n	800c804 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c7f0:	69bb      	ldr	r3, [r7, #24]
 800c7f2:	015a      	lsls	r2, r3, #5
 800c7f4:	69fb      	ldr	r3, [r7, #28]
 800c7f6:	4413      	add	r3, r2
 800c7f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7fc:	461a      	mov	r2, r3
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	691b      	ldr	r3, [r3, #16]
 800c802:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c804:	68bb      	ldr	r3, [r7, #8]
 800c806:	78db      	ldrb	r3, [r3, #3]
 800c808:	2b01      	cmp	r3, #1
 800c80a:	d128      	bne.n	800c85e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c80c:	69fb      	ldr	r3, [r7, #28]
 800c80e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c812:	689b      	ldr	r3, [r3, #8]
 800c814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c818:	2b00      	cmp	r3, #0
 800c81a:	d110      	bne.n	800c83e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c81c:	69bb      	ldr	r3, [r7, #24]
 800c81e:	015a      	lsls	r2, r3, #5
 800c820:	69fb      	ldr	r3, [r7, #28]
 800c822:	4413      	add	r3, r2
 800c824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	69ba      	ldr	r2, [r7, #24]
 800c82c:	0151      	lsls	r1, r2, #5
 800c82e:	69fa      	ldr	r2, [r7, #28]
 800c830:	440a      	add	r2, r1
 800c832:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c836:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c83a:	6013      	str	r3, [r2, #0]
 800c83c:	e00f      	b.n	800c85e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c83e:	69bb      	ldr	r3, [r7, #24]
 800c840:	015a      	lsls	r2, r3, #5
 800c842:	69fb      	ldr	r3, [r7, #28]
 800c844:	4413      	add	r3, r2
 800c846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	69ba      	ldr	r2, [r7, #24]
 800c84e:	0151      	lsls	r1, r2, #5
 800c850:	69fa      	ldr	r2, [r7, #28]
 800c852:	440a      	add	r2, r1
 800c854:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c85c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c85e:	69bb      	ldr	r3, [r7, #24]
 800c860:	015a      	lsls	r2, r3, #5
 800c862:	69fb      	ldr	r3, [r7, #28]
 800c864:	4413      	add	r3, r2
 800c866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	69ba      	ldr	r2, [r7, #24]
 800c86e:	0151      	lsls	r1, r2, #5
 800c870:	69fa      	ldr	r2, [r7, #28]
 800c872:	440a      	add	r2, r1
 800c874:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c878:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c87c:	6013      	str	r3, [r2, #0]
 800c87e:	e12f      	b.n	800cae0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c880:	69bb      	ldr	r3, [r7, #24]
 800c882:	015a      	lsls	r2, r3, #5
 800c884:	69fb      	ldr	r3, [r7, #28]
 800c886:	4413      	add	r3, r2
 800c888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	69ba      	ldr	r2, [r7, #24]
 800c890:	0151      	lsls	r1, r2, #5
 800c892:	69fa      	ldr	r2, [r7, #28]
 800c894:	440a      	add	r2, r1
 800c896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c89a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c89e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c8a0:	68bb      	ldr	r3, [r7, #8]
 800c8a2:	78db      	ldrb	r3, [r3, #3]
 800c8a4:	2b01      	cmp	r3, #1
 800c8a6:	d015      	beq.n	800c8d4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	695b      	ldr	r3, [r3, #20]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	f000 8117 	beq.w	800cae0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c8b2:	69fb      	ldr	r3, [r7, #28]
 800c8b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c8ba:	68bb      	ldr	r3, [r7, #8]
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	f003 030f 	and.w	r3, r3, #15
 800c8c2:	2101      	movs	r1, #1
 800c8c4:	fa01 f303 	lsl.w	r3, r1, r3
 800c8c8:	69f9      	ldr	r1, [r7, #28]
 800c8ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c8ce:	4313      	orrs	r3, r2
 800c8d0:	634b      	str	r3, [r1, #52]	; 0x34
 800c8d2:	e105      	b.n	800cae0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c8d4:	69fb      	ldr	r3, [r7, #28]
 800c8d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8da:	689b      	ldr	r3, [r3, #8]
 800c8dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d110      	bne.n	800c906 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c8e4:	69bb      	ldr	r3, [r7, #24]
 800c8e6:	015a      	lsls	r2, r3, #5
 800c8e8:	69fb      	ldr	r3, [r7, #28]
 800c8ea:	4413      	add	r3, r2
 800c8ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	69ba      	ldr	r2, [r7, #24]
 800c8f4:	0151      	lsls	r1, r2, #5
 800c8f6:	69fa      	ldr	r2, [r7, #28]
 800c8f8:	440a      	add	r2, r1
 800c8fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c8fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c902:	6013      	str	r3, [r2, #0]
 800c904:	e00f      	b.n	800c926 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c906:	69bb      	ldr	r3, [r7, #24]
 800c908:	015a      	lsls	r2, r3, #5
 800c90a:	69fb      	ldr	r3, [r7, #28]
 800c90c:	4413      	add	r3, r2
 800c90e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	69ba      	ldr	r2, [r7, #24]
 800c916:	0151      	lsls	r1, r2, #5
 800c918:	69fa      	ldr	r2, [r7, #28]
 800c91a:	440a      	add	r2, r1
 800c91c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c920:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c924:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	68d9      	ldr	r1, [r3, #12]
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	781a      	ldrb	r2, [r3, #0]
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	695b      	ldr	r3, [r3, #20]
 800c932:	b298      	uxth	r0, r3
 800c934:	79fb      	ldrb	r3, [r7, #7]
 800c936:	9300      	str	r3, [sp, #0]
 800c938:	4603      	mov	r3, r0
 800c93a:	68f8      	ldr	r0, [r7, #12]
 800c93c:	f000 fa2b 	bl	800cd96 <USB_WritePacket>
 800c940:	e0ce      	b.n	800cae0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c942:	69bb      	ldr	r3, [r7, #24]
 800c944:	015a      	lsls	r2, r3, #5
 800c946:	69fb      	ldr	r3, [r7, #28]
 800c948:	4413      	add	r3, r2
 800c94a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c94e:	691b      	ldr	r3, [r3, #16]
 800c950:	69ba      	ldr	r2, [r7, #24]
 800c952:	0151      	lsls	r1, r2, #5
 800c954:	69fa      	ldr	r2, [r7, #28]
 800c956:	440a      	add	r2, r1
 800c958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c95c:	0cdb      	lsrs	r3, r3, #19
 800c95e:	04db      	lsls	r3, r3, #19
 800c960:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c962:	69bb      	ldr	r3, [r7, #24]
 800c964:	015a      	lsls	r2, r3, #5
 800c966:	69fb      	ldr	r3, [r7, #28]
 800c968:	4413      	add	r3, r2
 800c96a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c96e:	691b      	ldr	r3, [r3, #16]
 800c970:	69ba      	ldr	r2, [r7, #24]
 800c972:	0151      	lsls	r1, r2, #5
 800c974:	69fa      	ldr	r2, [r7, #28]
 800c976:	440a      	add	r2, r1
 800c978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c97c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800c980:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800c984:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	695b      	ldr	r3, [r3, #20]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d126      	bne.n	800c9dc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c98e:	69bb      	ldr	r3, [r7, #24]
 800c990:	015a      	lsls	r2, r3, #5
 800c992:	69fb      	ldr	r3, [r7, #28]
 800c994:	4413      	add	r3, r2
 800c996:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c99a:	691a      	ldr	r2, [r3, #16]
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	689b      	ldr	r3, [r3, #8]
 800c9a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c9a4:	69b9      	ldr	r1, [r7, #24]
 800c9a6:	0148      	lsls	r0, r1, #5
 800c9a8:	69f9      	ldr	r1, [r7, #28]
 800c9aa:	4401      	add	r1, r0
 800c9ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c9b0:	4313      	orrs	r3, r2
 800c9b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c9b4:	69bb      	ldr	r3, [r7, #24]
 800c9b6:	015a      	lsls	r2, r3, #5
 800c9b8:	69fb      	ldr	r3, [r7, #28]
 800c9ba:	4413      	add	r3, r2
 800c9bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9c0:	691b      	ldr	r3, [r3, #16]
 800c9c2:	69ba      	ldr	r2, [r7, #24]
 800c9c4:	0151      	lsls	r1, r2, #5
 800c9c6:	69fa      	ldr	r2, [r7, #28]
 800c9c8:	440a      	add	r2, r1
 800c9ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c9ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c9d2:	6113      	str	r3, [r2, #16]
 800c9d4:	e036      	b.n	800ca44 <USB_EPStartXfer+0x3dc>
 800c9d6:	bf00      	nop
 800c9d8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	695a      	ldr	r2, [r3, #20]
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	689b      	ldr	r3, [r3, #8]
 800c9e4:	4413      	add	r3, r2
 800c9e6:	1e5a      	subs	r2, r3, #1
 800c9e8:	68bb      	ldr	r3, [r7, #8]
 800c9ea:	689b      	ldr	r3, [r3, #8]
 800c9ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800c9f0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c9f2:	69bb      	ldr	r3, [r7, #24]
 800c9f4:	015a      	lsls	r2, r3, #5
 800c9f6:	69fb      	ldr	r3, [r7, #28]
 800c9f8:	4413      	add	r3, r2
 800c9fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9fe:	691a      	ldr	r2, [r3, #16]
 800ca00:	8afb      	ldrh	r3, [r7, #22]
 800ca02:	04d9      	lsls	r1, r3, #19
 800ca04:	4b39      	ldr	r3, [pc, #228]	; (800caec <USB_EPStartXfer+0x484>)
 800ca06:	400b      	ands	r3, r1
 800ca08:	69b9      	ldr	r1, [r7, #24]
 800ca0a:	0148      	lsls	r0, r1, #5
 800ca0c:	69f9      	ldr	r1, [r7, #28]
 800ca0e:	4401      	add	r1, r0
 800ca10:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ca14:	4313      	orrs	r3, r2
 800ca16:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800ca18:	69bb      	ldr	r3, [r7, #24]
 800ca1a:	015a      	lsls	r2, r3, #5
 800ca1c:	69fb      	ldr	r3, [r7, #28]
 800ca1e:	4413      	add	r3, r2
 800ca20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca24:	691a      	ldr	r2, [r3, #16]
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	689b      	ldr	r3, [r3, #8]
 800ca2a:	8af9      	ldrh	r1, [r7, #22]
 800ca2c:	fb01 f303 	mul.w	r3, r1, r3
 800ca30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ca34:	69b9      	ldr	r1, [r7, #24]
 800ca36:	0148      	lsls	r0, r1, #5
 800ca38:	69f9      	ldr	r1, [r7, #28]
 800ca3a:	4401      	add	r1, r0
 800ca3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ca40:	4313      	orrs	r3, r2
 800ca42:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ca44:	79fb      	ldrb	r3, [r7, #7]
 800ca46:	2b01      	cmp	r3, #1
 800ca48:	d10d      	bne.n	800ca66 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ca4a:	68bb      	ldr	r3, [r7, #8]
 800ca4c:	68db      	ldr	r3, [r3, #12]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d009      	beq.n	800ca66 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	68d9      	ldr	r1, [r3, #12]
 800ca56:	69bb      	ldr	r3, [r7, #24]
 800ca58:	015a      	lsls	r2, r3, #5
 800ca5a:	69fb      	ldr	r3, [r7, #28]
 800ca5c:	4413      	add	r3, r2
 800ca5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca62:	460a      	mov	r2, r1
 800ca64:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	78db      	ldrb	r3, [r3, #3]
 800ca6a:	2b01      	cmp	r3, #1
 800ca6c:	d128      	bne.n	800cac0 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ca6e:	69fb      	ldr	r3, [r7, #28]
 800ca70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca74:	689b      	ldr	r3, [r3, #8]
 800ca76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d110      	bne.n	800caa0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800ca7e:	69bb      	ldr	r3, [r7, #24]
 800ca80:	015a      	lsls	r2, r3, #5
 800ca82:	69fb      	ldr	r3, [r7, #28]
 800ca84:	4413      	add	r3, r2
 800ca86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	69ba      	ldr	r2, [r7, #24]
 800ca8e:	0151      	lsls	r1, r2, #5
 800ca90:	69fa      	ldr	r2, [r7, #28]
 800ca92:	440a      	add	r2, r1
 800ca94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca9c:	6013      	str	r3, [r2, #0]
 800ca9e:	e00f      	b.n	800cac0 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800caa0:	69bb      	ldr	r3, [r7, #24]
 800caa2:	015a      	lsls	r2, r3, #5
 800caa4:	69fb      	ldr	r3, [r7, #28]
 800caa6:	4413      	add	r3, r2
 800caa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	69ba      	ldr	r2, [r7, #24]
 800cab0:	0151      	lsls	r1, r2, #5
 800cab2:	69fa      	ldr	r2, [r7, #28]
 800cab4:	440a      	add	r2, r1
 800cab6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800caba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cabe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cac0:	69bb      	ldr	r3, [r7, #24]
 800cac2:	015a      	lsls	r2, r3, #5
 800cac4:	69fb      	ldr	r3, [r7, #28]
 800cac6:	4413      	add	r3, r2
 800cac8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	69ba      	ldr	r2, [r7, #24]
 800cad0:	0151      	lsls	r1, r2, #5
 800cad2:	69fa      	ldr	r2, [r7, #28]
 800cad4:	440a      	add	r2, r1
 800cad6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cada:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cade:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cae0:	2300      	movs	r3, #0
}
 800cae2:	4618      	mov	r0, r3
 800cae4:	3720      	adds	r7, #32
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd80      	pop	{r7, pc}
 800caea:	bf00      	nop
 800caec:	1ff80000 	.word	0x1ff80000

0800caf0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800caf0:	b480      	push	{r7}
 800caf2:	b087      	sub	sp, #28
 800caf4:	af00      	add	r7, sp, #0
 800caf6:	60f8      	str	r0, [r7, #12]
 800caf8:	60b9      	str	r1, [r7, #8]
 800cafa:	4613      	mov	r3, r2
 800cafc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800cb02:	68bb      	ldr	r3, [r7, #8]
 800cb04:	781b      	ldrb	r3, [r3, #0]
 800cb06:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cb08:	68bb      	ldr	r3, [r7, #8]
 800cb0a:	785b      	ldrb	r3, [r3, #1]
 800cb0c:	2b01      	cmp	r3, #1
 800cb0e:	f040 80cd 	bne.w	800ccac <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	695b      	ldr	r3, [r3, #20]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d132      	bne.n	800cb80 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cb1a:	693b      	ldr	r3, [r7, #16]
 800cb1c:	015a      	lsls	r2, r3, #5
 800cb1e:	697b      	ldr	r3, [r7, #20]
 800cb20:	4413      	add	r3, r2
 800cb22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb26:	691b      	ldr	r3, [r3, #16]
 800cb28:	693a      	ldr	r2, [r7, #16]
 800cb2a:	0151      	lsls	r1, r2, #5
 800cb2c:	697a      	ldr	r2, [r7, #20]
 800cb2e:	440a      	add	r2, r1
 800cb30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cb38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cb3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cb3e:	693b      	ldr	r3, [r7, #16]
 800cb40:	015a      	lsls	r2, r3, #5
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	4413      	add	r3, r2
 800cb46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb4a:	691b      	ldr	r3, [r3, #16]
 800cb4c:	693a      	ldr	r2, [r7, #16]
 800cb4e:	0151      	lsls	r1, r2, #5
 800cb50:	697a      	ldr	r2, [r7, #20]
 800cb52:	440a      	add	r2, r1
 800cb54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cb5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	015a      	lsls	r2, r3, #5
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	4413      	add	r3, r2
 800cb66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb6a:	691b      	ldr	r3, [r3, #16]
 800cb6c:	693a      	ldr	r2, [r7, #16]
 800cb6e:	0151      	lsls	r1, r2, #5
 800cb70:	697a      	ldr	r2, [r7, #20]
 800cb72:	440a      	add	r2, r1
 800cb74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb78:	0cdb      	lsrs	r3, r3, #19
 800cb7a:	04db      	lsls	r3, r3, #19
 800cb7c:	6113      	str	r3, [r2, #16]
 800cb7e:	e04e      	b.n	800cc1e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cb80:	693b      	ldr	r3, [r7, #16]
 800cb82:	015a      	lsls	r2, r3, #5
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	4413      	add	r3, r2
 800cb88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cb8c:	691b      	ldr	r3, [r3, #16]
 800cb8e:	693a      	ldr	r2, [r7, #16]
 800cb90:	0151      	lsls	r1, r2, #5
 800cb92:	697a      	ldr	r2, [r7, #20]
 800cb94:	440a      	add	r2, r1
 800cb96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cb9a:	0cdb      	lsrs	r3, r3, #19
 800cb9c:	04db      	lsls	r3, r3, #19
 800cb9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	015a      	lsls	r2, r3, #5
 800cba4:	697b      	ldr	r3, [r7, #20]
 800cba6:	4413      	add	r3, r2
 800cba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbac:	691b      	ldr	r3, [r3, #16]
 800cbae:	693a      	ldr	r2, [r7, #16]
 800cbb0:	0151      	lsls	r1, r2, #5
 800cbb2:	697a      	ldr	r2, [r7, #20]
 800cbb4:	440a      	add	r2, r1
 800cbb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cbbe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cbc2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800cbc4:	68bb      	ldr	r3, [r7, #8]
 800cbc6:	695a      	ldr	r2, [r3, #20]
 800cbc8:	68bb      	ldr	r3, [r7, #8]
 800cbca:	689b      	ldr	r3, [r3, #8]
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d903      	bls.n	800cbd8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800cbd0:	68bb      	ldr	r3, [r7, #8]
 800cbd2:	689a      	ldr	r2, [r3, #8]
 800cbd4:	68bb      	ldr	r3, [r7, #8]
 800cbd6:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cbd8:	693b      	ldr	r3, [r7, #16]
 800cbda:	015a      	lsls	r2, r3, #5
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	4413      	add	r3, r2
 800cbe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cbe4:	691b      	ldr	r3, [r3, #16]
 800cbe6:	693a      	ldr	r2, [r7, #16]
 800cbe8:	0151      	lsls	r1, r2, #5
 800cbea:	697a      	ldr	r2, [r7, #20]
 800cbec:	440a      	add	r2, r1
 800cbee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cbf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cbf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cbf8:	693b      	ldr	r3, [r7, #16]
 800cbfa:	015a      	lsls	r2, r3, #5
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	4413      	add	r3, r2
 800cc00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc04:	691a      	ldr	r2, [r3, #16]
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	695b      	ldr	r3, [r3, #20]
 800cc0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cc0e:	6939      	ldr	r1, [r7, #16]
 800cc10:	0148      	lsls	r0, r1, #5
 800cc12:	6979      	ldr	r1, [r7, #20]
 800cc14:	4401      	add	r1, r0
 800cc16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cc1a:	4313      	orrs	r3, r2
 800cc1c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cc1e:	79fb      	ldrb	r3, [r7, #7]
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d11e      	bne.n	800cc62 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cc24:	68bb      	ldr	r3, [r7, #8]
 800cc26:	691b      	ldr	r3, [r3, #16]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d009      	beq.n	800cc40 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cc2c:	693b      	ldr	r3, [r7, #16]
 800cc2e:	015a      	lsls	r2, r3, #5
 800cc30:	697b      	ldr	r3, [r7, #20]
 800cc32:	4413      	add	r3, r2
 800cc34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc38:	461a      	mov	r2, r3
 800cc3a:	68bb      	ldr	r3, [r7, #8]
 800cc3c:	691b      	ldr	r3, [r3, #16]
 800cc3e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cc40:	693b      	ldr	r3, [r7, #16]
 800cc42:	015a      	lsls	r2, r3, #5
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	4413      	add	r3, r2
 800cc48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	693a      	ldr	r2, [r7, #16]
 800cc50:	0151      	lsls	r1, r2, #5
 800cc52:	697a      	ldr	r2, [r7, #20]
 800cc54:	440a      	add	r2, r1
 800cc56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cc5e:	6013      	str	r3, [r2, #0]
 800cc60:	e092      	b.n	800cd88 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	015a      	lsls	r2, r3, #5
 800cc66:	697b      	ldr	r3, [r7, #20]
 800cc68:	4413      	add	r3, r2
 800cc6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	693a      	ldr	r2, [r7, #16]
 800cc72:	0151      	lsls	r1, r2, #5
 800cc74:	697a      	ldr	r2, [r7, #20]
 800cc76:	440a      	add	r2, r1
 800cc78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cc7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cc80:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800cc82:	68bb      	ldr	r3, [r7, #8]
 800cc84:	695b      	ldr	r3, [r3, #20]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d07e      	beq.n	800cd88 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cc8a:	697b      	ldr	r3, [r7, #20]
 800cc8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cc92:	68bb      	ldr	r3, [r7, #8]
 800cc94:	781b      	ldrb	r3, [r3, #0]
 800cc96:	f003 030f 	and.w	r3, r3, #15
 800cc9a:	2101      	movs	r1, #1
 800cc9c:	fa01 f303 	lsl.w	r3, r1, r3
 800cca0:	6979      	ldr	r1, [r7, #20]
 800cca2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cca6:	4313      	orrs	r3, r2
 800cca8:	634b      	str	r3, [r1, #52]	; 0x34
 800ccaa:	e06d      	b.n	800cd88 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ccac:	693b      	ldr	r3, [r7, #16]
 800ccae:	015a      	lsls	r2, r3, #5
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	4413      	add	r3, r2
 800ccb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccb8:	691b      	ldr	r3, [r3, #16]
 800ccba:	693a      	ldr	r2, [r7, #16]
 800ccbc:	0151      	lsls	r1, r2, #5
 800ccbe:	697a      	ldr	r2, [r7, #20]
 800ccc0:	440a      	add	r2, r1
 800ccc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ccc6:	0cdb      	lsrs	r3, r3, #19
 800ccc8:	04db      	lsls	r3, r3, #19
 800ccca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cccc:	693b      	ldr	r3, [r7, #16]
 800ccce:	015a      	lsls	r2, r3, #5
 800ccd0:	697b      	ldr	r3, [r7, #20]
 800ccd2:	4413      	add	r3, r2
 800ccd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccd8:	691b      	ldr	r3, [r3, #16]
 800ccda:	693a      	ldr	r2, [r7, #16]
 800ccdc:	0151      	lsls	r1, r2, #5
 800ccde:	697a      	ldr	r2, [r7, #20]
 800cce0:	440a      	add	r2, r1
 800cce2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cce6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ccea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ccee:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ccf0:	68bb      	ldr	r3, [r7, #8]
 800ccf2:	695b      	ldr	r3, [r3, #20]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d003      	beq.n	800cd00 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800ccf8:	68bb      	ldr	r3, [r7, #8]
 800ccfa:	689a      	ldr	r2, [r3, #8]
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cd00:	693b      	ldr	r3, [r7, #16]
 800cd02:	015a      	lsls	r2, r3, #5
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	4413      	add	r3, r2
 800cd08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd0c:	691b      	ldr	r3, [r3, #16]
 800cd0e:	693a      	ldr	r2, [r7, #16]
 800cd10:	0151      	lsls	r1, r2, #5
 800cd12:	697a      	ldr	r2, [r7, #20]
 800cd14:	440a      	add	r2, r1
 800cd16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cd1e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800cd20:	693b      	ldr	r3, [r7, #16]
 800cd22:	015a      	lsls	r2, r3, #5
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	4413      	add	r3, r2
 800cd28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd2c:	691a      	ldr	r2, [r3, #16]
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	689b      	ldr	r3, [r3, #8]
 800cd32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cd36:	6939      	ldr	r1, [r7, #16]
 800cd38:	0148      	lsls	r0, r1, #5
 800cd3a:	6979      	ldr	r1, [r7, #20]
 800cd3c:	4401      	add	r1, r0
 800cd3e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cd42:	4313      	orrs	r3, r2
 800cd44:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800cd46:	79fb      	ldrb	r3, [r7, #7]
 800cd48:	2b01      	cmp	r3, #1
 800cd4a:	d10d      	bne.n	800cd68 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cd4c:	68bb      	ldr	r3, [r7, #8]
 800cd4e:	68db      	ldr	r3, [r3, #12]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d009      	beq.n	800cd68 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	68d9      	ldr	r1, [r3, #12]
 800cd58:	693b      	ldr	r3, [r7, #16]
 800cd5a:	015a      	lsls	r2, r3, #5
 800cd5c:	697b      	ldr	r3, [r7, #20]
 800cd5e:	4413      	add	r3, r2
 800cd60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd64:	460a      	mov	r2, r1
 800cd66:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	015a      	lsls	r2, r3, #5
 800cd6c:	697b      	ldr	r3, [r7, #20]
 800cd6e:	4413      	add	r3, r2
 800cd70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	693a      	ldr	r2, [r7, #16]
 800cd78:	0151      	lsls	r1, r2, #5
 800cd7a:	697a      	ldr	r2, [r7, #20]
 800cd7c:	440a      	add	r2, r1
 800cd7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cd86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cd88:	2300      	movs	r3, #0
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	371c      	adds	r7, #28
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr

0800cd96 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cd96:	b480      	push	{r7}
 800cd98:	b089      	sub	sp, #36	; 0x24
 800cd9a:	af00      	add	r7, sp, #0
 800cd9c:	60f8      	str	r0, [r7, #12]
 800cd9e:	60b9      	str	r1, [r7, #8]
 800cda0:	4611      	mov	r1, r2
 800cda2:	461a      	mov	r2, r3
 800cda4:	460b      	mov	r3, r1
 800cda6:	71fb      	strb	r3, [r7, #7]
 800cda8:	4613      	mov	r3, r2
 800cdaa:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800cdb0:	68bb      	ldr	r3, [r7, #8]
 800cdb2:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800cdb4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d123      	bne.n	800ce04 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cdbc:	88bb      	ldrh	r3, [r7, #4]
 800cdbe:	3303      	adds	r3, #3
 800cdc0:	089b      	lsrs	r3, r3, #2
 800cdc2:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	61bb      	str	r3, [r7, #24]
 800cdc8:	e018      	b.n	800cdfc <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cdca:	79fb      	ldrb	r3, [r7, #7]
 800cdcc:	031a      	lsls	r2, r3, #12
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	4413      	add	r3, r2
 800cdd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cdd6:	461a      	mov	r2, r3
 800cdd8:	69fb      	ldr	r3, [r7, #28]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cdde:	69fb      	ldr	r3, [r7, #28]
 800cde0:	3301      	adds	r3, #1
 800cde2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cde4:	69fb      	ldr	r3, [r7, #28]
 800cde6:	3301      	adds	r3, #1
 800cde8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cdea:	69fb      	ldr	r3, [r7, #28]
 800cdec:	3301      	adds	r3, #1
 800cdee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800cdf0:	69fb      	ldr	r3, [r7, #28]
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cdf6:	69bb      	ldr	r3, [r7, #24]
 800cdf8:	3301      	adds	r3, #1
 800cdfa:	61bb      	str	r3, [r7, #24]
 800cdfc:	69ba      	ldr	r2, [r7, #24]
 800cdfe:	693b      	ldr	r3, [r7, #16]
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d3e2      	bcc.n	800cdca <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800ce04:	2300      	movs	r3, #0
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3724      	adds	r7, #36	; 0x24
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce10:	4770      	bx	lr

0800ce12 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ce12:	b480      	push	{r7}
 800ce14:	b08b      	sub	sp, #44	; 0x2c
 800ce16:	af00      	add	r7, sp, #0
 800ce18:	60f8      	str	r0, [r7, #12]
 800ce1a:	60b9      	str	r1, [r7, #8]
 800ce1c:	4613      	mov	r3, r2
 800ce1e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ce20:	68fb      	ldr	r3, [r7, #12]
 800ce22:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ce28:	88fb      	ldrh	r3, [r7, #6]
 800ce2a:	089b      	lsrs	r3, r3, #2
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ce30:	88fb      	ldrh	r3, [r7, #6]
 800ce32:	f003 0303 	and.w	r3, r3, #3
 800ce36:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ce38:	2300      	movs	r3, #0
 800ce3a:	623b      	str	r3, [r7, #32]
 800ce3c:	e014      	b.n	800ce68 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ce3e:	69bb      	ldr	r3, [r7, #24]
 800ce40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce44:	681a      	ldr	r2, [r3, #0]
 800ce46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce48:	601a      	str	r2, [r3, #0]
    pDest++;
 800ce4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce4c:	3301      	adds	r3, #1
 800ce4e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ce50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce52:	3301      	adds	r3, #1
 800ce54:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ce56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce58:	3301      	adds	r3, #1
 800ce5a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ce5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce5e:	3301      	adds	r3, #1
 800ce60:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ce62:	6a3b      	ldr	r3, [r7, #32]
 800ce64:	3301      	adds	r3, #1
 800ce66:	623b      	str	r3, [r7, #32]
 800ce68:	6a3a      	ldr	r2, [r7, #32]
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	d3e6      	bcc.n	800ce3e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ce70:	8bfb      	ldrh	r3, [r7, #30]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	d01e      	beq.n	800ceb4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ce76:	2300      	movs	r3, #0
 800ce78:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ce7a:	69bb      	ldr	r3, [r7, #24]
 800ce7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ce80:	461a      	mov	r2, r3
 800ce82:	f107 0310 	add.w	r3, r7, #16
 800ce86:	6812      	ldr	r2, [r2, #0]
 800ce88:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ce8a:	693a      	ldr	r2, [r7, #16]
 800ce8c:	6a3b      	ldr	r3, [r7, #32]
 800ce8e:	b2db      	uxtb	r3, r3
 800ce90:	00db      	lsls	r3, r3, #3
 800ce92:	fa22 f303 	lsr.w	r3, r2, r3
 800ce96:	b2da      	uxtb	r2, r3
 800ce98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce9a:	701a      	strb	r2, [r3, #0]
      i++;
 800ce9c:	6a3b      	ldr	r3, [r7, #32]
 800ce9e:	3301      	adds	r3, #1
 800cea0:	623b      	str	r3, [r7, #32]
      pDest++;
 800cea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea4:	3301      	adds	r3, #1
 800cea6:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800cea8:	8bfb      	ldrh	r3, [r7, #30]
 800ceaa:	3b01      	subs	r3, #1
 800ceac:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ceae:	8bfb      	ldrh	r3, [r7, #30]
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d1ea      	bne.n	800ce8a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ceb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ceb6:	4618      	mov	r0, r3
 800ceb8:	372c      	adds	r7, #44	; 0x2c
 800ceba:	46bd      	mov	sp, r7
 800cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec0:	4770      	bx	lr

0800cec2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cec2:	b480      	push	{r7}
 800cec4:	b085      	sub	sp, #20
 800cec6:	af00      	add	r7, sp, #0
 800cec8:	6078      	str	r0, [r7, #4]
 800ceca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	781b      	ldrb	r3, [r3, #0]
 800ced4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ced6:	683b      	ldr	r3, [r7, #0]
 800ced8:	785b      	ldrb	r3, [r3, #1]
 800ceda:	2b01      	cmp	r3, #1
 800cedc:	d12c      	bne.n	800cf38 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cede:	68bb      	ldr	r3, [r7, #8]
 800cee0:	015a      	lsls	r2, r3, #5
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	4413      	add	r3, r2
 800cee6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	db12      	blt.n	800cf16 <USB_EPSetStall+0x54>
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d00f      	beq.n	800cf16 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cef6:	68bb      	ldr	r3, [r7, #8]
 800cef8:	015a      	lsls	r2, r3, #5
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	4413      	add	r3, r2
 800cefe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	68ba      	ldr	r2, [r7, #8]
 800cf06:	0151      	lsls	r1, r2, #5
 800cf08:	68fa      	ldr	r2, [r7, #12]
 800cf0a:	440a      	add	r2, r1
 800cf0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cf14:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	015a      	lsls	r2, r3, #5
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	4413      	add	r3, r2
 800cf1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf22:	681b      	ldr	r3, [r3, #0]
 800cf24:	68ba      	ldr	r2, [r7, #8]
 800cf26:	0151      	lsls	r1, r2, #5
 800cf28:	68fa      	ldr	r2, [r7, #12]
 800cf2a:	440a      	add	r2, r1
 800cf2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cf34:	6013      	str	r3, [r2, #0]
 800cf36:	e02b      	b.n	800cf90 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cf38:	68bb      	ldr	r3, [r7, #8]
 800cf3a:	015a      	lsls	r2, r3, #5
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	4413      	add	r3, r2
 800cf40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	db12      	blt.n	800cf70 <USB_EPSetStall+0xae>
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d00f      	beq.n	800cf70 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	015a      	lsls	r2, r3, #5
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	4413      	add	r3, r2
 800cf58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	68ba      	ldr	r2, [r7, #8]
 800cf60:	0151      	lsls	r1, r2, #5
 800cf62:	68fa      	ldr	r2, [r7, #12]
 800cf64:	440a      	add	r2, r1
 800cf66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800cf6e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800cf70:	68bb      	ldr	r3, [r7, #8]
 800cf72:	015a      	lsls	r2, r3, #5
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	4413      	add	r3, r2
 800cf78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	68ba      	ldr	r2, [r7, #8]
 800cf80:	0151      	lsls	r1, r2, #5
 800cf82:	68fa      	ldr	r2, [r7, #12]
 800cf84:	440a      	add	r2, r1
 800cf86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cf8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cf8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cf90:	2300      	movs	r3, #0
}
 800cf92:	4618      	mov	r0, r3
 800cf94:	3714      	adds	r7, #20
 800cf96:	46bd      	mov	sp, r7
 800cf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9c:	4770      	bx	lr

0800cf9e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cf9e:	b480      	push	{r7}
 800cfa0:	b085      	sub	sp, #20
 800cfa2:	af00      	add	r7, sp, #0
 800cfa4:	6078      	str	r0, [r7, #4]
 800cfa6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	781b      	ldrb	r3, [r3, #0]
 800cfb0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cfb2:	683b      	ldr	r3, [r7, #0]
 800cfb4:	785b      	ldrb	r3, [r3, #1]
 800cfb6:	2b01      	cmp	r3, #1
 800cfb8:	d128      	bne.n	800d00c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	015a      	lsls	r2, r3, #5
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfc6:	681b      	ldr	r3, [r3, #0]
 800cfc8:	68ba      	ldr	r2, [r7, #8]
 800cfca:	0151      	lsls	r1, r2, #5
 800cfcc:	68fa      	ldr	r2, [r7, #12]
 800cfce:	440a      	add	r2, r1
 800cfd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfd4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cfd8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	78db      	ldrb	r3, [r3, #3]
 800cfde:	2b03      	cmp	r3, #3
 800cfe0:	d003      	beq.n	800cfea <USB_EPClearStall+0x4c>
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	78db      	ldrb	r3, [r3, #3]
 800cfe6:	2b02      	cmp	r3, #2
 800cfe8:	d138      	bne.n	800d05c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	015a      	lsls	r2, r3, #5
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	4413      	add	r3, r2
 800cff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	68ba      	ldr	r2, [r7, #8]
 800cffa:	0151      	lsls	r1, r2, #5
 800cffc:	68fa      	ldr	r2, [r7, #12]
 800cffe:	440a      	add	r2, r1
 800d000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d008:	6013      	str	r3, [r2, #0]
 800d00a:	e027      	b.n	800d05c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	015a      	lsls	r2, r3, #5
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	4413      	add	r3, r2
 800d014:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	68ba      	ldr	r2, [r7, #8]
 800d01c:	0151      	lsls	r1, r2, #5
 800d01e:	68fa      	ldr	r2, [r7, #12]
 800d020:	440a      	add	r2, r1
 800d022:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d026:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d02a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	78db      	ldrb	r3, [r3, #3]
 800d030:	2b03      	cmp	r3, #3
 800d032:	d003      	beq.n	800d03c <USB_EPClearStall+0x9e>
 800d034:	683b      	ldr	r3, [r7, #0]
 800d036:	78db      	ldrb	r3, [r3, #3]
 800d038:	2b02      	cmp	r3, #2
 800d03a:	d10f      	bne.n	800d05c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	015a      	lsls	r2, r3, #5
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	4413      	add	r3, r2
 800d044:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	68ba      	ldr	r2, [r7, #8]
 800d04c:	0151      	lsls	r1, r2, #5
 800d04e:	68fa      	ldr	r2, [r7, #12]
 800d050:	440a      	add	r2, r1
 800d052:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d056:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d05a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d05c:	2300      	movs	r3, #0
}
 800d05e:	4618      	mov	r0, r3
 800d060:	3714      	adds	r7, #20
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr

0800d06a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d06a:	b480      	push	{r7}
 800d06c:	b085      	sub	sp, #20
 800d06e:	af00      	add	r7, sp, #0
 800d070:	6078      	str	r0, [r7, #4]
 800d072:	460b      	mov	r3, r1
 800d074:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	68fa      	ldr	r2, [r7, #12]
 800d084:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d088:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d08c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d094:	681a      	ldr	r2, [r3, #0]
 800d096:	78fb      	ldrb	r3, [r7, #3]
 800d098:	011b      	lsls	r3, r3, #4
 800d09a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d09e:	68f9      	ldr	r1, [r7, #12]
 800d0a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d0a4:	4313      	orrs	r3, r2
 800d0a6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d0a8:	2300      	movs	r3, #0
}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3714      	adds	r7, #20
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0b4:	4770      	bx	lr

0800d0b6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d0b6:	b480      	push	{r7}
 800d0b8:	b085      	sub	sp, #20
 800d0ba:	af00      	add	r7, sp, #0
 800d0bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	68fa      	ldr	r2, [r7, #12]
 800d0cc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d0d0:	f023 0303 	bic.w	r3, r3, #3
 800d0d4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0dc:	685b      	ldr	r3, [r3, #4]
 800d0de:	68fa      	ldr	r2, [r7, #12]
 800d0e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d0e4:	f023 0302 	bic.w	r3, r3, #2
 800d0e8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d0ea:	2300      	movs	r3, #0
}
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	3714      	adds	r7, #20
 800d0f0:	46bd      	mov	sp, r7
 800d0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f6:	4770      	bx	lr

0800d0f8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b085      	sub	sp, #20
 800d0fc:	af00      	add	r7, sp, #0
 800d0fe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	68fa      	ldr	r2, [r7, #12]
 800d10e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d112:	f023 0303 	bic.w	r3, r3, #3
 800d116:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d11e:	685b      	ldr	r3, [r3, #4]
 800d120:	68fa      	ldr	r2, [r7, #12]
 800d122:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d126:	f043 0302 	orr.w	r3, r3, #2
 800d12a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d12c:	2300      	movs	r3, #0
}
 800d12e:	4618      	mov	r0, r3
 800d130:	3714      	adds	r7, #20
 800d132:	46bd      	mov	sp, r7
 800d134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d138:	4770      	bx	lr

0800d13a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d13a:	b480      	push	{r7}
 800d13c:	b085      	sub	sp, #20
 800d13e:	af00      	add	r7, sp, #0
 800d140:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	695b      	ldr	r3, [r3, #20]
 800d146:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	699b      	ldr	r3, [r3, #24]
 800d14c:	68fa      	ldr	r2, [r7, #12]
 800d14e:	4013      	ands	r3, r2
 800d150:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d152:	68fb      	ldr	r3, [r7, #12]
}
 800d154:	4618      	mov	r0, r3
 800d156:	3714      	adds	r7, #20
 800d158:	46bd      	mov	sp, r7
 800d15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15e:	4770      	bx	lr

0800d160 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d160:	b480      	push	{r7}
 800d162:	b085      	sub	sp, #20
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d172:	699b      	ldr	r3, [r3, #24]
 800d174:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d17c:	69db      	ldr	r3, [r3, #28]
 800d17e:	68ba      	ldr	r2, [r7, #8]
 800d180:	4013      	ands	r3, r2
 800d182:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d184:	68bb      	ldr	r3, [r7, #8]
 800d186:	0c1b      	lsrs	r3, r3, #16
}
 800d188:	4618      	mov	r0, r3
 800d18a:	3714      	adds	r7, #20
 800d18c:	46bd      	mov	sp, r7
 800d18e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d192:	4770      	bx	lr

0800d194 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d194:	b480      	push	{r7}
 800d196:	b085      	sub	sp, #20
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1a6:	699b      	ldr	r3, [r3, #24]
 800d1a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1b0:	69db      	ldr	r3, [r3, #28]
 800d1b2:	68ba      	ldr	r2, [r7, #8]
 800d1b4:	4013      	ands	r3, r2
 800d1b6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d1b8:	68bb      	ldr	r3, [r7, #8]
 800d1ba:	b29b      	uxth	r3, r3
}
 800d1bc:	4618      	mov	r0, r3
 800d1be:	3714      	adds	r7, #20
 800d1c0:	46bd      	mov	sp, r7
 800d1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c6:	4770      	bx	lr

0800d1c8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b085      	sub	sp, #20
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	460b      	mov	r3, r1
 800d1d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d1d8:	78fb      	ldrb	r3, [r7, #3]
 800d1da:	015a      	lsls	r2, r3, #5
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	4413      	add	r3, r2
 800d1e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d1e4:	689b      	ldr	r3, [r3, #8]
 800d1e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1ee:	695b      	ldr	r3, [r3, #20]
 800d1f0:	68ba      	ldr	r2, [r7, #8]
 800d1f2:	4013      	ands	r3, r2
 800d1f4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d1f6:	68bb      	ldr	r3, [r7, #8]
}
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	3714      	adds	r7, #20
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d202:	4770      	bx	lr

0800d204 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d204:	b480      	push	{r7}
 800d206:	b087      	sub	sp, #28
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
 800d20c:	460b      	mov	r3, r1
 800d20e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d214:	697b      	ldr	r3, [r7, #20]
 800d216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d21a:	691b      	ldr	r3, [r3, #16]
 800d21c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d226:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d228:	78fb      	ldrb	r3, [r7, #3]
 800d22a:	f003 030f 	and.w	r3, r3, #15
 800d22e:	68fa      	ldr	r2, [r7, #12]
 800d230:	fa22 f303 	lsr.w	r3, r2, r3
 800d234:	01db      	lsls	r3, r3, #7
 800d236:	b2db      	uxtb	r3, r3
 800d238:	693a      	ldr	r2, [r7, #16]
 800d23a:	4313      	orrs	r3, r2
 800d23c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d23e:	78fb      	ldrb	r3, [r7, #3]
 800d240:	015a      	lsls	r2, r3, #5
 800d242:	697b      	ldr	r3, [r7, #20]
 800d244:	4413      	add	r3, r2
 800d246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d24a:	689b      	ldr	r3, [r3, #8]
 800d24c:	693a      	ldr	r2, [r7, #16]
 800d24e:	4013      	ands	r3, r2
 800d250:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d252:	68bb      	ldr	r3, [r7, #8]
}
 800d254:	4618      	mov	r0, r3
 800d256:	371c      	adds	r7, #28
 800d258:	46bd      	mov	sp, r7
 800d25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d25e:	4770      	bx	lr

0800d260 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d260:	b480      	push	{r7}
 800d262:	b083      	sub	sp, #12
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	695b      	ldr	r3, [r3, #20]
 800d26c:	f003 0301 	and.w	r3, r3, #1
}
 800d270:	4618      	mov	r0, r3
 800d272:	370c      	adds	r7, #12
 800d274:	46bd      	mov	sp, r7
 800d276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d27a:	4770      	bx	lr

0800d27c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d27c:	b480      	push	{r7}
 800d27e:	b085      	sub	sp, #20
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	68fa      	ldr	r2, [r7, #12]
 800d292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d296:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800d29a:	f023 0307 	bic.w	r3, r3, #7
 800d29e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2a6:	685b      	ldr	r3, [r3, #4]
 800d2a8:	68fa      	ldr	r2, [r7, #12]
 800d2aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d2ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d2b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d2b4:	2300      	movs	r3, #0
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3714      	adds	r7, #20
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2c0:	4770      	bx	lr
	...

0800d2c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d2c4:	b480      	push	{r7}
 800d2c6:	b087      	sub	sp, #28
 800d2c8:	af00      	add	r7, sp, #0
 800d2ca:	60f8      	str	r0, [r7, #12]
 800d2cc:	460b      	mov	r3, r1
 800d2ce:	607a      	str	r2, [r7, #4]
 800d2d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	333c      	adds	r3, #60	; 0x3c
 800d2da:	3304      	adds	r3, #4
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	4a26      	ldr	r2, [pc, #152]	; (800d37c <USB_EP0_OutStart+0xb8>)
 800d2e4:	4293      	cmp	r3, r2
 800d2e6:	d90a      	bls.n	800d2fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d2e8:	697b      	ldr	r3, [r7, #20]
 800d2ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d2f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d2f8:	d101      	bne.n	800d2fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	e037      	b.n	800d36e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d2fe:	697b      	ldr	r3, [r7, #20]
 800d300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d304:	461a      	mov	r2, r3
 800d306:	2300      	movs	r3, #0
 800d308:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d310:	691b      	ldr	r3, [r3, #16]
 800d312:	697a      	ldr	r2, [r7, #20]
 800d314:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d318:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d31c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d31e:	697b      	ldr	r3, [r7, #20]
 800d320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d324:	691b      	ldr	r3, [r3, #16]
 800d326:	697a      	ldr	r2, [r7, #20]
 800d328:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d32c:	f043 0318 	orr.w	r3, r3, #24
 800d330:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d338:	691b      	ldr	r3, [r3, #16]
 800d33a:	697a      	ldr	r2, [r7, #20]
 800d33c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d340:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d344:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d346:	7afb      	ldrb	r3, [r7, #11]
 800d348:	2b01      	cmp	r3, #1
 800d34a:	d10f      	bne.n	800d36c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d352:	461a      	mov	r2, r3
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d358:	697b      	ldr	r3, [r7, #20]
 800d35a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	697a      	ldr	r2, [r7, #20]
 800d362:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d366:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d36a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d36c:	2300      	movs	r3, #0
}
 800d36e:	4618      	mov	r0, r3
 800d370:	371c      	adds	r7, #28
 800d372:	46bd      	mov	sp, r7
 800d374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d378:	4770      	bx	lr
 800d37a:	bf00      	nop
 800d37c:	4f54300a 	.word	0x4f54300a

0800d380 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d380:	b480      	push	{r7}
 800d382:	b085      	sub	sp, #20
 800d384:	af00      	add	r7, sp, #0
 800d386:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800d388:	2300      	movs	r3, #0
 800d38a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	3301      	adds	r3, #1
 800d390:	60fb      	str	r3, [r7, #12]
 800d392:	4a13      	ldr	r2, [pc, #76]	; (800d3e0 <USB_CoreReset+0x60>)
 800d394:	4293      	cmp	r3, r2
 800d396:	d901      	bls.n	800d39c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800d398:	2303      	movs	r3, #3
 800d39a:	e01a      	b.n	800d3d2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	691b      	ldr	r3, [r3, #16]
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	daf3      	bge.n	800d38c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	691b      	ldr	r3, [r3, #16]
 800d3ac:	f043 0201 	orr.w	r2, r3, #1
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	3301      	adds	r3, #1
 800d3b8:	60fb      	str	r3, [r7, #12]
 800d3ba:	4a09      	ldr	r2, [pc, #36]	; (800d3e0 <USB_CoreReset+0x60>)
 800d3bc:	4293      	cmp	r3, r2
 800d3be:	d901      	bls.n	800d3c4 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800d3c0:	2303      	movs	r3, #3
 800d3c2:	e006      	b.n	800d3d2 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	691b      	ldr	r3, [r3, #16]
 800d3c8:	f003 0301 	and.w	r3, r3, #1
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	d0f1      	beq.n	800d3b4 <USB_CoreReset+0x34>

  return HAL_OK;
 800d3d0:	2300      	movs	r3, #0
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3714      	adds	r7, #20
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3dc:	4770      	bx	lr
 800d3de:	bf00      	nop
 800d3e0:	00030d40 	.word	0x00030d40

0800d3e4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800d3e8:	4904      	ldr	r1, [pc, #16]	; (800d3fc <MX_FATFS_Init+0x18>)
 800d3ea:	4805      	ldr	r0, [pc, #20]	; (800d400 <MX_FATFS_Init+0x1c>)
 800d3ec:	f004 ff38 	bl	8012260 <FATFS_LinkDriver>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	461a      	mov	r2, r3
 800d3f4:	4b03      	ldr	r3, [pc, #12]	; (800d404 <MX_FATFS_Init+0x20>)
 800d3f6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d3f8:	bf00      	nop
 800d3fa:	bd80      	pop	{r7, pc}
 800d3fc:	2001b6c4 	.word	0x2001b6c4
 800d400:	2000003c 	.word	0x2000003c
 800d404:	2001b6c8 	.word	0x2001b6c8

0800d408 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d408:	b480      	push	{r7}
 800d40a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d40c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d40e:	4618      	mov	r0, r3
 800d410:	46bd      	mov	sp, r7
 800d412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d416:	4770      	bx	lr

0800d418 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b082      	sub	sp, #8
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	4603      	mov	r3, r0
 800d420:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize (pdrv);
 800d422:	79fb      	ldrb	r3, [r7, #7]
 800d424:	4618      	mov	r0, r3
 800d426:	f7f5 fb43 	bl	8002ab0 <SD_disk_initialize>
 800d42a:	4603      	mov	r3, r0
 800d42c:	b2db      	uxtb	r3, r3

  /* USER CODE END INIT */
}
 800d42e:	4618      	mov	r0, r3
 800d430:	3708      	adds	r7, #8
 800d432:	46bd      	mov	sp, r7
 800d434:	bd80      	pop	{r7, pc}

0800d436 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800d436:	b580      	push	{r7, lr}
 800d438:	b082      	sub	sp, #8
 800d43a:	af00      	add	r7, sp, #0
 800d43c:	4603      	mov	r3, r0
 800d43e:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status (pdrv);
 800d440:	79fb      	ldrb	r3, [r7, #7]
 800d442:	4618      	mov	r0, r3
 800d444:	f7f5 fc1e 	bl	8002c84 <SD_disk_status>
 800d448:	4603      	mov	r3, r0
 800d44a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800d44c:	4618      	mov	r0, r3
 800d44e:	3708      	adds	r7, #8
 800d450:	46bd      	mov	sp, r7
 800d452:	bd80      	pop	{r7, pc}

0800d454 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800d454:	b580      	push	{r7, lr}
 800d456:	b084      	sub	sp, #16
 800d458:	af00      	add	r7, sp, #0
 800d45a:	60b9      	str	r1, [r7, #8]
 800d45c:	607a      	str	r2, [r7, #4]
 800d45e:	603b      	str	r3, [r7, #0]
 800d460:	4603      	mov	r3, r0
 800d462:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800d464:	7bf8      	ldrb	r0, [r7, #15]
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	687a      	ldr	r2, [r7, #4]
 800d46a:	68b9      	ldr	r1, [r7, #8]
 800d46c:	f7f5 fc20 	bl	8002cb0 <SD_disk_read>
 800d470:	4603      	mov	r3, r0
 800d472:	b2db      	uxtb	r3, r3
   // return RES_OK;
  /* USER CODE END READ */
}
 800d474:	4618      	mov	r0, r3
 800d476:	3710      	adds	r7, #16
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}

0800d47c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b084      	sub	sp, #16
 800d480:	af00      	add	r7, sp, #0
 800d482:	60b9      	str	r1, [r7, #8]
 800d484:	607a      	str	r2, [r7, #4]
 800d486:	603b      	str	r3, [r7, #0]
 800d488:	4603      	mov	r3, r0
 800d48a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
   // return RES_OK;
	return SD_disk_write (pdrv, buff, sector, count);
 800d48c:	7bf8      	ldrb	r0, [r7, #15]
 800d48e:	683b      	ldr	r3, [r7, #0]
 800d490:	687a      	ldr	r2, [r7, #4]
 800d492:	68b9      	ldr	r1, [r7, #8]
 800d494:	f7f5 fc76 	bl	8002d84 <SD_disk_write>
 800d498:	4603      	mov	r3, r0
 800d49a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800d49c:	4618      	mov	r0, r3
 800d49e:	3710      	adds	r7, #16
 800d4a0:	46bd      	mov	sp, r7
 800d4a2:	bd80      	pop	{r7, pc}

0800d4a4 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b082      	sub	sp, #8
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	4603      	mov	r3, r0
 800d4ac:	603a      	str	r2, [r7, #0]
 800d4ae:	71fb      	strb	r3, [r7, #7]
 800d4b0:	460b      	mov	r3, r1
 800d4b2:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl (pdrv,cmd, buff);
 800d4b4:	79fb      	ldrb	r3, [r7, #7]
 800d4b6:	79b9      	ldrb	r1, [r7, #6]
 800d4b8:	683a      	ldr	r2, [r7, #0]
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	f7f5 fce6 	bl	8002e8c <SD_disk_ioctl>
 800d4c0:	4603      	mov	r3, r0
 800d4c2:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	3708      	adds	r7, #8
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	bd80      	pop	{r7, pc}

0800d4cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d4cc:	b580      	push	{r7, lr}
 800d4ce:	b084      	sub	sp, #16
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	6078      	str	r0, [r7, #4]
 800d4d4:	460b      	mov	r3, r1
 800d4d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d4d8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d4dc:	f009 fc4e 	bl	8016d7c <USBD_static_malloc>
 800d4e0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d105      	bne.n	800d4f4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d4f0:	2302      	movs	r3, #2
 800d4f2:	e066      	b.n	800d5c2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	68fa      	ldr	r2, [r7, #12]
 800d4f8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	7c1b      	ldrb	r3, [r3, #16]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d119      	bne.n	800d538 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d504:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d508:	2202      	movs	r2, #2
 800d50a:	2181      	movs	r1, #129	; 0x81
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f009 fb12 	bl	8016b36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	2201      	movs	r2, #1
 800d516:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d518:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d51c:	2202      	movs	r2, #2
 800d51e:	2101      	movs	r1, #1
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f009 fb08 	bl	8016b36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2201      	movs	r2, #1
 800d52a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2210      	movs	r2, #16
 800d532:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800d536:	e016      	b.n	800d566 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800d538:	2340      	movs	r3, #64	; 0x40
 800d53a:	2202      	movs	r2, #2
 800d53c:	2181      	movs	r1, #129	; 0x81
 800d53e:	6878      	ldr	r0, [r7, #4]
 800d540:	f009 faf9 	bl	8016b36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	2201      	movs	r2, #1
 800d548:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800d54a:	2340      	movs	r3, #64	; 0x40
 800d54c:	2202      	movs	r2, #2
 800d54e:	2101      	movs	r1, #1
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f009 faf0 	bl	8016b36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	2201      	movs	r2, #1
 800d55a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	2210      	movs	r2, #16
 800d562:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d566:	2308      	movs	r3, #8
 800d568:	2203      	movs	r2, #3
 800d56a:	2182      	movs	r1, #130	; 0x82
 800d56c:	6878      	ldr	r0, [r7, #4]
 800d56e:	f009 fae2 	bl	8016b36 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2201      	movs	r2, #1
 800d576:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	2200      	movs	r2, #0
 800d588:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d58c:	68fb      	ldr	r3, [r7, #12]
 800d58e:	2200      	movs	r2, #0
 800d590:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	7c1b      	ldrb	r3, [r3, #16]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d109      	bne.n	800d5b0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d5a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d5a6:	2101      	movs	r1, #1
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f009 fbb3 	bl	8016d14 <USBD_LL_PrepareReceive>
 800d5ae:	e007      	b.n	800d5c0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d5b6:	2340      	movs	r3, #64	; 0x40
 800d5b8:	2101      	movs	r1, #1
 800d5ba:	6878      	ldr	r0, [r7, #4]
 800d5bc:	f009 fbaa 	bl	8016d14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d5c0:	2300      	movs	r3, #0
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3710      	adds	r7, #16
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}

0800d5ca <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d5ca:	b580      	push	{r7, lr}
 800d5cc:	b082      	sub	sp, #8
 800d5ce:	af00      	add	r7, sp, #0
 800d5d0:	6078      	str	r0, [r7, #4]
 800d5d2:	460b      	mov	r3, r1
 800d5d4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800d5d6:	2181      	movs	r1, #129	; 0x81
 800d5d8:	6878      	ldr	r0, [r7, #4]
 800d5da:	f009 fad2 	bl	8016b82 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800d5e4:	2101      	movs	r1, #1
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f009 facb 	bl	8016b82 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800d5f4:	2182      	movs	r1, #130	; 0x82
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f009 fac3 	bl	8016b82 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	2200      	movs	r2, #0
 800d600:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2200      	movs	r2, #0
 800d608:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d612:	2b00      	cmp	r3, #0
 800d614:	d00e      	beq.n	800d634 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d61c:	685b      	ldr	r3, [r3, #4]
 800d61e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d626:	4618      	mov	r0, r3
 800d628:	f009 fbb6 	bl	8016d98 <USBD_static_free>
    pdev->pClassData = NULL;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	2200      	movs	r2, #0
 800d630:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d634:	2300      	movs	r3, #0
}
 800d636:	4618      	mov	r0, r3
 800d638:	3708      	adds	r7, #8
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
	...

0800d640 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b086      	sub	sp, #24
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
 800d648:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d650:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d652:	2300      	movs	r3, #0
 800d654:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d656:	2300      	movs	r3, #0
 800d658:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d65a:	2300      	movs	r3, #0
 800d65c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d65e:	693b      	ldr	r3, [r7, #16]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d101      	bne.n	800d668 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800d664:	2303      	movs	r3, #3
 800d666:	e0af      	b.n	800d7c8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d668:	683b      	ldr	r3, [r7, #0]
 800d66a:	781b      	ldrb	r3, [r3, #0]
 800d66c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d670:	2b00      	cmp	r3, #0
 800d672:	d03f      	beq.n	800d6f4 <USBD_CDC_Setup+0xb4>
 800d674:	2b20      	cmp	r3, #32
 800d676:	f040 809f 	bne.w	800d7b8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	88db      	ldrh	r3, [r3, #6]
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d02e      	beq.n	800d6e0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d682:	683b      	ldr	r3, [r7, #0]
 800d684:	781b      	ldrb	r3, [r3, #0]
 800d686:	b25b      	sxtb	r3, r3
 800d688:	2b00      	cmp	r3, #0
 800d68a:	da16      	bge.n	800d6ba <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d692:	689b      	ldr	r3, [r3, #8]
 800d694:	683a      	ldr	r2, [r7, #0]
 800d696:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800d698:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d69a:	683a      	ldr	r2, [r7, #0]
 800d69c:	88d2      	ldrh	r2, [r2, #6]
 800d69e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	88db      	ldrh	r3, [r3, #6]
 800d6a4:	2b07      	cmp	r3, #7
 800d6a6:	bf28      	it	cs
 800d6a8:	2307      	movcs	r3, #7
 800d6aa:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d6ac:	693b      	ldr	r3, [r7, #16]
 800d6ae:	89fa      	ldrh	r2, [r7, #14]
 800d6b0:	4619      	mov	r1, r3
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f001 fb19 	bl	800ecea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800d6b8:	e085      	b.n	800d7c6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	785a      	ldrb	r2, [r3, #1]
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800d6c4:	683b      	ldr	r3, [r7, #0]
 800d6c6:	88db      	ldrh	r3, [r3, #6]
 800d6c8:	b2da      	uxtb	r2, r3
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800d6d0:	6939      	ldr	r1, [r7, #16]
 800d6d2:	683b      	ldr	r3, [r7, #0]
 800d6d4:	88db      	ldrh	r3, [r3, #6]
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	6878      	ldr	r0, [r7, #4]
 800d6da:	f001 fb32 	bl	800ed42 <USBD_CtlPrepareRx>
      break;
 800d6de:	e072      	b.n	800d7c6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d6e6:	689b      	ldr	r3, [r3, #8]
 800d6e8:	683a      	ldr	r2, [r7, #0]
 800d6ea:	7850      	ldrb	r0, [r2, #1]
 800d6ec:	2200      	movs	r2, #0
 800d6ee:	6839      	ldr	r1, [r7, #0]
 800d6f0:	4798      	blx	r3
      break;
 800d6f2:	e068      	b.n	800d7c6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	785b      	ldrb	r3, [r3, #1]
 800d6f8:	2b0b      	cmp	r3, #11
 800d6fa:	d852      	bhi.n	800d7a2 <USBD_CDC_Setup+0x162>
 800d6fc:	a201      	add	r2, pc, #4	; (adr r2, 800d704 <USBD_CDC_Setup+0xc4>)
 800d6fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d702:	bf00      	nop
 800d704:	0800d735 	.word	0x0800d735
 800d708:	0800d7b1 	.word	0x0800d7b1
 800d70c:	0800d7a3 	.word	0x0800d7a3
 800d710:	0800d7a3 	.word	0x0800d7a3
 800d714:	0800d7a3 	.word	0x0800d7a3
 800d718:	0800d7a3 	.word	0x0800d7a3
 800d71c:	0800d7a3 	.word	0x0800d7a3
 800d720:	0800d7a3 	.word	0x0800d7a3
 800d724:	0800d7a3 	.word	0x0800d7a3
 800d728:	0800d7a3 	.word	0x0800d7a3
 800d72c:	0800d75f 	.word	0x0800d75f
 800d730:	0800d789 	.word	0x0800d789
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d73a:	b2db      	uxtb	r3, r3
 800d73c:	2b03      	cmp	r3, #3
 800d73e:	d107      	bne.n	800d750 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d740:	f107 030a 	add.w	r3, r7, #10
 800d744:	2202      	movs	r2, #2
 800d746:	4619      	mov	r1, r3
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f001 face 	bl	800ecea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d74e:	e032      	b.n	800d7b6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d750:	6839      	ldr	r1, [r7, #0]
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f001 fa58 	bl	800ec08 <USBD_CtlError>
            ret = USBD_FAIL;
 800d758:	2303      	movs	r3, #3
 800d75a:	75fb      	strb	r3, [r7, #23]
          break;
 800d75c:	e02b      	b.n	800d7b6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d764:	b2db      	uxtb	r3, r3
 800d766:	2b03      	cmp	r3, #3
 800d768:	d107      	bne.n	800d77a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d76a:	f107 030d 	add.w	r3, r7, #13
 800d76e:	2201      	movs	r2, #1
 800d770:	4619      	mov	r1, r3
 800d772:	6878      	ldr	r0, [r7, #4]
 800d774:	f001 fab9 	bl	800ecea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d778:	e01d      	b.n	800d7b6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800d77a:	6839      	ldr	r1, [r7, #0]
 800d77c:	6878      	ldr	r0, [r7, #4]
 800d77e:	f001 fa43 	bl	800ec08 <USBD_CtlError>
            ret = USBD_FAIL;
 800d782:	2303      	movs	r3, #3
 800d784:	75fb      	strb	r3, [r7, #23]
          break;
 800d786:	e016      	b.n	800d7b6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d78e:	b2db      	uxtb	r3, r3
 800d790:	2b03      	cmp	r3, #3
 800d792:	d00f      	beq.n	800d7b4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800d794:	6839      	ldr	r1, [r7, #0]
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f001 fa36 	bl	800ec08 <USBD_CtlError>
            ret = USBD_FAIL;
 800d79c:	2303      	movs	r3, #3
 800d79e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d7a0:	e008      	b.n	800d7b4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d7a2:	6839      	ldr	r1, [r7, #0]
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f001 fa2f 	bl	800ec08 <USBD_CtlError>
          ret = USBD_FAIL;
 800d7aa:	2303      	movs	r3, #3
 800d7ac:	75fb      	strb	r3, [r7, #23]
          break;
 800d7ae:	e002      	b.n	800d7b6 <USBD_CDC_Setup+0x176>
          break;
 800d7b0:	bf00      	nop
 800d7b2:	e008      	b.n	800d7c6 <USBD_CDC_Setup+0x186>
          break;
 800d7b4:	bf00      	nop
      }
      break;
 800d7b6:	e006      	b.n	800d7c6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800d7b8:	6839      	ldr	r1, [r7, #0]
 800d7ba:	6878      	ldr	r0, [r7, #4]
 800d7bc:	f001 fa24 	bl	800ec08 <USBD_CtlError>
      ret = USBD_FAIL;
 800d7c0:	2303      	movs	r3, #3
 800d7c2:	75fb      	strb	r3, [r7, #23]
      break;
 800d7c4:	bf00      	nop
  }

  return (uint8_t)ret;
 800d7c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3718      	adds	r7, #24
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}

0800d7d0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d7d0:	b580      	push	{r7, lr}
 800d7d2:	b084      	sub	sp, #16
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	6078      	str	r0, [r7, #4]
 800d7d8:	460b      	mov	r3, r1
 800d7da:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800d7e2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d101      	bne.n	800d7f2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d7ee:	2303      	movs	r3, #3
 800d7f0:	e04f      	b.n	800d892 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d7f8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d7fa:	78fa      	ldrb	r2, [r7, #3]
 800d7fc:	6879      	ldr	r1, [r7, #4]
 800d7fe:	4613      	mov	r3, r2
 800d800:	009b      	lsls	r3, r3, #2
 800d802:	4413      	add	r3, r2
 800d804:	009b      	lsls	r3, r3, #2
 800d806:	440b      	add	r3, r1
 800d808:	3318      	adds	r3, #24
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d029      	beq.n	800d864 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800d810:	78fa      	ldrb	r2, [r7, #3]
 800d812:	6879      	ldr	r1, [r7, #4]
 800d814:	4613      	mov	r3, r2
 800d816:	009b      	lsls	r3, r3, #2
 800d818:	4413      	add	r3, r2
 800d81a:	009b      	lsls	r3, r3, #2
 800d81c:	440b      	add	r3, r1
 800d81e:	3318      	adds	r3, #24
 800d820:	681a      	ldr	r2, [r3, #0]
 800d822:	78f9      	ldrb	r1, [r7, #3]
 800d824:	68f8      	ldr	r0, [r7, #12]
 800d826:	460b      	mov	r3, r1
 800d828:	00db      	lsls	r3, r3, #3
 800d82a:	1a5b      	subs	r3, r3, r1
 800d82c:	009b      	lsls	r3, r3, #2
 800d82e:	4403      	add	r3, r0
 800d830:	3344      	adds	r3, #68	; 0x44
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	fbb2 f1f3 	udiv	r1, r2, r3
 800d838:	fb03 f301 	mul.w	r3, r3, r1
 800d83c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d110      	bne.n	800d864 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800d842:	78fa      	ldrb	r2, [r7, #3]
 800d844:	6879      	ldr	r1, [r7, #4]
 800d846:	4613      	mov	r3, r2
 800d848:	009b      	lsls	r3, r3, #2
 800d84a:	4413      	add	r3, r2
 800d84c:	009b      	lsls	r3, r3, #2
 800d84e:	440b      	add	r3, r1
 800d850:	3318      	adds	r3, #24
 800d852:	2200      	movs	r2, #0
 800d854:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d856:	78f9      	ldrb	r1, [r7, #3]
 800d858:	2300      	movs	r3, #0
 800d85a:	2200      	movs	r2, #0
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f009 fa38 	bl	8016cd2 <USBD_LL_Transmit>
 800d862:	e015      	b.n	800d890 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	2200      	movs	r2, #0
 800d868:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d872:	691b      	ldr	r3, [r3, #16]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d00b      	beq.n	800d890 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d87e:	691b      	ldr	r3, [r3, #16]
 800d880:	68ba      	ldr	r2, [r7, #8]
 800d882:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d886:	68ba      	ldr	r2, [r7, #8]
 800d888:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d88c:	78fa      	ldrb	r2, [r7, #3]
 800d88e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d890:	2300      	movs	r3, #0
}
 800d892:	4618      	mov	r0, r3
 800d894:	3710      	adds	r7, #16
 800d896:	46bd      	mov	sp, r7
 800d898:	bd80      	pop	{r7, pc}

0800d89a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d89a:	b580      	push	{r7, lr}
 800d89c:	b084      	sub	sp, #16
 800d89e:	af00      	add	r7, sp, #0
 800d8a0:	6078      	str	r0, [r7, #4]
 800d8a2:	460b      	mov	r3, r1
 800d8a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d8ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d101      	bne.n	800d8bc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d8b8:	2303      	movs	r3, #3
 800d8ba:	e015      	b.n	800d8e8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d8bc:	78fb      	ldrb	r3, [r7, #3]
 800d8be:	4619      	mov	r1, r3
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f009 fa48 	bl	8016d56 <USBD_LL_GetRxDataSize>
 800d8c6:	4602      	mov	r2, r0
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d8d4:	68db      	ldr	r3, [r3, #12]
 800d8d6:	68fa      	ldr	r2, [r7, #12]
 800d8d8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d8dc:	68fa      	ldr	r2, [r7, #12]
 800d8de:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d8e2:	4611      	mov	r1, r2
 800d8e4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d8e6:	2300      	movs	r3, #0
}
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	3710      	adds	r7, #16
 800d8ec:	46bd      	mov	sp, r7
 800d8ee:	bd80      	pop	{r7, pc}

0800d8f0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b084      	sub	sp, #16
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d8fe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d101      	bne.n	800d90a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800d906:	2303      	movs	r3, #3
 800d908:	e01b      	b.n	800d942 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d910:	2b00      	cmp	r3, #0
 800d912:	d015      	beq.n	800d940 <USBD_CDC_EP0_RxReady+0x50>
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d91a:	2bff      	cmp	r3, #255	; 0xff
 800d91c:	d010      	beq.n	800d940 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d924:	689b      	ldr	r3, [r3, #8]
 800d926:	68fa      	ldr	r2, [r7, #12]
 800d928:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800d92c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800d92e:	68fa      	ldr	r2, [r7, #12]
 800d930:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800d934:	b292      	uxth	r2, r2
 800d936:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	22ff      	movs	r2, #255	; 0xff
 800d93c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d940:	2300      	movs	r3, #0
}
 800d942:	4618      	mov	r0, r3
 800d944:	3710      	adds	r7, #16
 800d946:	46bd      	mov	sp, r7
 800d948:	bd80      	pop	{r7, pc}
	...

0800d94c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d94c:	b480      	push	{r7}
 800d94e:	b083      	sub	sp, #12
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	2243      	movs	r2, #67	; 0x43
 800d958:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800d95a:	4b03      	ldr	r3, [pc, #12]	; (800d968 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	370c      	adds	r7, #12
 800d960:	46bd      	mov	sp, r7
 800d962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d966:	4770      	bx	lr
 800d968:	200000d8 	.word	0x200000d8

0800d96c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d96c:	b480      	push	{r7}
 800d96e:	b083      	sub	sp, #12
 800d970:	af00      	add	r7, sp, #0
 800d972:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	2243      	movs	r2, #67	; 0x43
 800d978:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800d97a:	4b03      	ldr	r3, [pc, #12]	; (800d988 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800d97c:	4618      	mov	r0, r3
 800d97e:	370c      	adds	r7, #12
 800d980:	46bd      	mov	sp, r7
 800d982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d986:	4770      	bx	lr
 800d988:	20000094 	.word	0x20000094

0800d98c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d98c:	b480      	push	{r7}
 800d98e:	b083      	sub	sp, #12
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2243      	movs	r2, #67	; 0x43
 800d998:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800d99a:	4b03      	ldr	r3, [pc, #12]	; (800d9a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	370c      	adds	r7, #12
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a6:	4770      	bx	lr
 800d9a8:	2000011c 	.word	0x2000011c

0800d9ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b083      	sub	sp, #12
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	220a      	movs	r2, #10
 800d9b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d9ba:	4b03      	ldr	r3, [pc, #12]	; (800d9c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d9bc:	4618      	mov	r0, r3
 800d9be:	370c      	adds	r7, #12
 800d9c0:	46bd      	mov	sp, r7
 800d9c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c6:	4770      	bx	lr
 800d9c8:	20000050 	.word	0x20000050

0800d9cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b083      	sub	sp, #12
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
 800d9d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d101      	bne.n	800d9e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d9dc:	2303      	movs	r3, #3
 800d9de:	e004      	b.n	800d9ea <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	683a      	ldr	r2, [r7, #0]
 800d9e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d9e8:	2300      	movs	r3, #0
}
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	370c      	adds	r7, #12
 800d9ee:	46bd      	mov	sp, r7
 800d9f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f4:	4770      	bx	lr

0800d9f6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d9f6:	b480      	push	{r7}
 800d9f8:	b087      	sub	sp, #28
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	60f8      	str	r0, [r7, #12]
 800d9fe:	60b9      	str	r1, [r7, #8]
 800da00:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800da02:	68fb      	ldr	r3, [r7, #12]
 800da04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da08:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d101      	bne.n	800da14 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800da10:	2303      	movs	r3, #3
 800da12:	e008      	b.n	800da26 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	68ba      	ldr	r2, [r7, #8]
 800da18:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800da1c:	697b      	ldr	r3, [r7, #20]
 800da1e:	687a      	ldr	r2, [r7, #4]
 800da20:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800da24:	2300      	movs	r3, #0
}
 800da26:	4618      	mov	r0, r3
 800da28:	371c      	adds	r7, #28
 800da2a:	46bd      	mov	sp, r7
 800da2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da30:	4770      	bx	lr

0800da32 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800da32:	b480      	push	{r7}
 800da34:	b085      	sub	sp, #20
 800da36:	af00      	add	r7, sp, #0
 800da38:	6078      	str	r0, [r7, #4]
 800da3a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da42:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d101      	bne.n	800da4e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800da4a:	2303      	movs	r3, #3
 800da4c:	e004      	b.n	800da58 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	683a      	ldr	r2, [r7, #0]
 800da52:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800da56:	2300      	movs	r3, #0
}
 800da58:	4618      	mov	r0, r3
 800da5a:	3714      	adds	r7, #20
 800da5c:	46bd      	mov	sp, r7
 800da5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da62:	4770      	bx	lr

0800da64 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b084      	sub	sp, #16
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da72:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800da74:	2301      	movs	r3, #1
 800da76:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d101      	bne.n	800da86 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800da82:	2303      	movs	r3, #3
 800da84:	e01a      	b.n	800dabc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800da86:	68bb      	ldr	r3, [r7, #8]
 800da88:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d114      	bne.n	800daba <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800da90:	68bb      	ldr	r3, [r7, #8]
 800da92:	2201      	movs	r2, #1
 800da94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800daa2:	68bb      	ldr	r3, [r7, #8]
 800daa4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800daa8:	68bb      	ldr	r3, [r7, #8]
 800daaa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800daae:	2181      	movs	r1, #129	; 0x81
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f009 f90e 	bl	8016cd2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800dab6:	2300      	movs	r3, #0
 800dab8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800daba:	7bfb      	ldrb	r3, [r7, #15]
}
 800dabc:	4618      	mov	r0, r3
 800dabe:	3710      	adds	r7, #16
 800dac0:	46bd      	mov	sp, r7
 800dac2:	bd80      	pop	{r7, pc}

0800dac4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800dac4:	b580      	push	{r7, lr}
 800dac6:	b084      	sub	sp, #16
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dad2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d101      	bne.n	800dae2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800dade:	2303      	movs	r3, #3
 800dae0:	e016      	b.n	800db10 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	7c1b      	ldrb	r3, [r3, #16]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d109      	bne.n	800dafe <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800daf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800daf4:	2101      	movs	r1, #1
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f009 f90c 	bl	8016d14 <USBD_LL_PrepareReceive>
 800dafc:	e007      	b.n	800db0e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800db04:	2340      	movs	r3, #64	; 0x40
 800db06:	2101      	movs	r1, #1
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f009 f903 	bl	8016d14 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800db0e:	2300      	movs	r3, #0
}
 800db10:	4618      	mov	r0, r3
 800db12:	3710      	adds	r7, #16
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}

0800db18 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b086      	sub	sp, #24
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	60f8      	str	r0, [r7, #12]
 800db20:	60b9      	str	r1, [r7, #8]
 800db22:	4613      	mov	r3, r2
 800db24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d101      	bne.n	800db30 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800db2c:	2303      	movs	r3, #3
 800db2e:	e01f      	b.n	800db70 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	2200      	movs	r2, #0
 800db34:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	2200      	movs	r2, #0
 800db3c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	2200      	movs	r2, #0
 800db44:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800db48:	68bb      	ldr	r3, [r7, #8]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d003      	beq.n	800db56 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	68ba      	ldr	r2, [r7, #8]
 800db52:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	2201      	movs	r2, #1
 800db5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	79fa      	ldrb	r2, [r7, #7]
 800db62:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800db64:	68f8      	ldr	r0, [r7, #12]
 800db66:	f008 ff7f 	bl	8016a68 <USBD_LL_Init>
 800db6a:	4603      	mov	r3, r0
 800db6c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800db6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800db70:	4618      	mov	r0, r3
 800db72:	3718      	adds	r7, #24
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}

0800db78 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b084      	sub	sp, #16
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
 800db80:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800db82:	2300      	movs	r3, #0
 800db84:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800db86:	683b      	ldr	r3, [r7, #0]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d101      	bne.n	800db90 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800db8c:	2303      	movs	r3, #3
 800db8e:	e016      	b.n	800dbbe <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	683a      	ldr	r2, [r7, #0]
 800db94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d00b      	beq.n	800dbbc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbac:	f107 020e 	add.w	r2, r7, #14
 800dbb0:	4610      	mov	r0, r2
 800dbb2:	4798      	blx	r3
 800dbb4:	4602      	mov	r2, r0
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800dbbc:	2300      	movs	r3, #0
}
 800dbbe:	4618      	mov	r0, r3
 800dbc0:	3710      	adds	r7, #16
 800dbc2:	46bd      	mov	sp, r7
 800dbc4:	bd80      	pop	{r7, pc}

0800dbc6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dbc6:	b580      	push	{r7, lr}
 800dbc8:	b082      	sub	sp, #8
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f008 ff96 	bl	8016b00 <USBD_LL_Start>
 800dbd4:	4603      	mov	r3, r0
}
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	3708      	adds	r7, #8
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	bd80      	pop	{r7, pc}

0800dbde <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800dbde:	b480      	push	{r7}
 800dbe0:	b083      	sub	sp, #12
 800dbe2:	af00      	add	r7, sp, #0
 800dbe4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dbe6:	2300      	movs	r3, #0
}
 800dbe8:	4618      	mov	r0, r3
 800dbea:	370c      	adds	r7, #12
 800dbec:	46bd      	mov	sp, r7
 800dbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf2:	4770      	bx	lr

0800dbf4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dbf4:	b580      	push	{r7, lr}
 800dbf6:	b084      	sub	sp, #16
 800dbf8:	af00      	add	r7, sp, #0
 800dbfa:	6078      	str	r0, [r7, #4]
 800dbfc:	460b      	mov	r3, r1
 800dbfe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800dc00:	2303      	movs	r3, #3
 800dc02:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d009      	beq.n	800dc22 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	78fa      	ldrb	r2, [r7, #3]
 800dc18:	4611      	mov	r1, r2
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	4798      	blx	r3
 800dc1e:	4603      	mov	r3, r0
 800dc20:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800dc22:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3710      	adds	r7, #16
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}

0800dc2c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dc2c:	b580      	push	{r7, lr}
 800dc2e:	b082      	sub	sp, #8
 800dc30:	af00      	add	r7, sp, #0
 800dc32:	6078      	str	r0, [r7, #4]
 800dc34:	460b      	mov	r3, r1
 800dc36:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d007      	beq.n	800dc52 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc48:	685b      	ldr	r3, [r3, #4]
 800dc4a:	78fa      	ldrb	r2, [r7, #3]
 800dc4c:	4611      	mov	r1, r2
 800dc4e:	6878      	ldr	r0, [r7, #4]
 800dc50:	4798      	blx	r3
  }

  return USBD_OK;
 800dc52:	2300      	movs	r3, #0
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	3708      	adds	r7, #8
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}

0800dc5c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dc5c:	b580      	push	{r7, lr}
 800dc5e:	b084      	sub	sp, #16
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
 800dc64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dc6c:	6839      	ldr	r1, [r7, #0]
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f000 ff90 	bl	800eb94 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2201      	movs	r2, #1
 800dc78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800dc82:	461a      	mov	r2, r3
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dc90:	f003 031f 	and.w	r3, r3, #31
 800dc94:	2b02      	cmp	r3, #2
 800dc96:	d01a      	beq.n	800dcce <USBD_LL_SetupStage+0x72>
 800dc98:	2b02      	cmp	r3, #2
 800dc9a:	d822      	bhi.n	800dce2 <USBD_LL_SetupStage+0x86>
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d002      	beq.n	800dca6 <USBD_LL_SetupStage+0x4a>
 800dca0:	2b01      	cmp	r3, #1
 800dca2:	d00a      	beq.n	800dcba <USBD_LL_SetupStage+0x5e>
 800dca4:	e01d      	b.n	800dce2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dcac:	4619      	mov	r1, r3
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f000 fa62 	bl	800e178 <USBD_StdDevReq>
 800dcb4:	4603      	mov	r3, r0
 800dcb6:	73fb      	strb	r3, [r7, #15]
      break;
 800dcb8:	e020      	b.n	800dcfc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dcc0:	4619      	mov	r1, r3
 800dcc2:	6878      	ldr	r0, [r7, #4]
 800dcc4:	f000 fac6 	bl	800e254 <USBD_StdItfReq>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	73fb      	strb	r3, [r7, #15]
      break;
 800dccc:	e016      	b.n	800dcfc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dcd4:	4619      	mov	r1, r3
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 fb05 	bl	800e2e6 <USBD_StdEPReq>
 800dcdc:	4603      	mov	r3, r0
 800dcde:	73fb      	strb	r3, [r7, #15]
      break;
 800dce0:	e00c      	b.n	800dcfc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dce8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dcec:	b2db      	uxtb	r3, r3
 800dcee:	4619      	mov	r1, r3
 800dcf0:	6878      	ldr	r0, [r7, #4]
 800dcf2:	f008 ff65 	bl	8016bc0 <USBD_LL_StallEP>
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	73fb      	strb	r3, [r7, #15]
      break;
 800dcfa:	bf00      	nop
  }

  return ret;
 800dcfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcfe:	4618      	mov	r0, r3
 800dd00:	3710      	adds	r7, #16
 800dd02:	46bd      	mov	sp, r7
 800dd04:	bd80      	pop	{r7, pc}

0800dd06 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dd06:	b580      	push	{r7, lr}
 800dd08:	b086      	sub	sp, #24
 800dd0a:	af00      	add	r7, sp, #0
 800dd0c:	60f8      	str	r0, [r7, #12]
 800dd0e:	460b      	mov	r3, r1
 800dd10:	607a      	str	r2, [r7, #4]
 800dd12:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800dd14:	7afb      	ldrb	r3, [r7, #11]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d138      	bne.n	800dd8c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800dd20:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dd28:	2b03      	cmp	r3, #3
 800dd2a:	d14a      	bne.n	800ddc2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800dd2c:	693b      	ldr	r3, [r7, #16]
 800dd2e:	689a      	ldr	r2, [r3, #8]
 800dd30:	693b      	ldr	r3, [r7, #16]
 800dd32:	68db      	ldr	r3, [r3, #12]
 800dd34:	429a      	cmp	r2, r3
 800dd36:	d913      	bls.n	800dd60 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800dd38:	693b      	ldr	r3, [r7, #16]
 800dd3a:	689a      	ldr	r2, [r3, #8]
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	68db      	ldr	r3, [r3, #12]
 800dd40:	1ad2      	subs	r2, r2, r3
 800dd42:	693b      	ldr	r3, [r7, #16]
 800dd44:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dd46:	693b      	ldr	r3, [r7, #16]
 800dd48:	68da      	ldr	r2, [r3, #12]
 800dd4a:	693b      	ldr	r3, [r7, #16]
 800dd4c:	689b      	ldr	r3, [r3, #8]
 800dd4e:	4293      	cmp	r3, r2
 800dd50:	bf28      	it	cs
 800dd52:	4613      	movcs	r3, r2
 800dd54:	461a      	mov	r2, r3
 800dd56:	6879      	ldr	r1, [r7, #4]
 800dd58:	68f8      	ldr	r0, [r7, #12]
 800dd5a:	f001 f80f 	bl	800ed7c <USBD_CtlContinueRx>
 800dd5e:	e030      	b.n	800ddc2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd66:	b2db      	uxtb	r3, r3
 800dd68:	2b03      	cmp	r3, #3
 800dd6a:	d10b      	bne.n	800dd84 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd72:	691b      	ldr	r3, [r3, #16]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d005      	beq.n	800dd84 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd7e:	691b      	ldr	r3, [r3, #16]
 800dd80:	68f8      	ldr	r0, [r7, #12]
 800dd82:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800dd84:	68f8      	ldr	r0, [r7, #12]
 800dd86:	f001 f80a 	bl	800ed9e <USBD_CtlSendStatus>
 800dd8a:	e01a      	b.n	800ddc2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd92:	b2db      	uxtb	r3, r3
 800dd94:	2b03      	cmp	r3, #3
 800dd96:	d114      	bne.n	800ddc2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd9e:	699b      	ldr	r3, [r3, #24]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d00e      	beq.n	800ddc2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddaa:	699b      	ldr	r3, [r3, #24]
 800ddac:	7afa      	ldrb	r2, [r7, #11]
 800ddae:	4611      	mov	r1, r2
 800ddb0:	68f8      	ldr	r0, [r7, #12]
 800ddb2:	4798      	blx	r3
 800ddb4:	4603      	mov	r3, r0
 800ddb6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800ddb8:	7dfb      	ldrb	r3, [r7, #23]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d001      	beq.n	800ddc2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800ddbe:	7dfb      	ldrb	r3, [r7, #23]
 800ddc0:	e000      	b.n	800ddc4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800ddc2:	2300      	movs	r3, #0
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3718      	adds	r7, #24
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	bd80      	pop	{r7, pc}

0800ddcc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ddcc:	b580      	push	{r7, lr}
 800ddce:	b086      	sub	sp, #24
 800ddd0:	af00      	add	r7, sp, #0
 800ddd2:	60f8      	str	r0, [r7, #12]
 800ddd4:	460b      	mov	r3, r1
 800ddd6:	607a      	str	r2, [r7, #4]
 800ddd8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800ddda:	7afb      	ldrb	r3, [r7, #11]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d16b      	bne.n	800deb8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800dde0:	68fb      	ldr	r3, [r7, #12]
 800dde2:	3314      	adds	r3, #20
 800dde4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800dde6:	68fb      	ldr	r3, [r7, #12]
 800dde8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ddec:	2b02      	cmp	r3, #2
 800ddee:	d156      	bne.n	800de9e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800ddf0:	693b      	ldr	r3, [r7, #16]
 800ddf2:	689a      	ldr	r2, [r3, #8]
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	68db      	ldr	r3, [r3, #12]
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d914      	bls.n	800de26 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ddfc:	693b      	ldr	r3, [r7, #16]
 800ddfe:	689a      	ldr	r2, [r3, #8]
 800de00:	693b      	ldr	r3, [r7, #16]
 800de02:	68db      	ldr	r3, [r3, #12]
 800de04:	1ad2      	subs	r2, r2, r3
 800de06:	693b      	ldr	r3, [r7, #16]
 800de08:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800de0a:	693b      	ldr	r3, [r7, #16]
 800de0c:	689b      	ldr	r3, [r3, #8]
 800de0e:	461a      	mov	r2, r3
 800de10:	6879      	ldr	r1, [r7, #4]
 800de12:	68f8      	ldr	r0, [r7, #12]
 800de14:	f000 ff84 	bl	800ed20 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800de18:	2300      	movs	r3, #0
 800de1a:	2200      	movs	r2, #0
 800de1c:	2100      	movs	r1, #0
 800de1e:	68f8      	ldr	r0, [r7, #12]
 800de20:	f008 ff78 	bl	8016d14 <USBD_LL_PrepareReceive>
 800de24:	e03b      	b.n	800de9e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800de26:	693b      	ldr	r3, [r7, #16]
 800de28:	68da      	ldr	r2, [r3, #12]
 800de2a:	693b      	ldr	r3, [r7, #16]
 800de2c:	689b      	ldr	r3, [r3, #8]
 800de2e:	429a      	cmp	r2, r3
 800de30:	d11c      	bne.n	800de6c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800de32:	693b      	ldr	r3, [r7, #16]
 800de34:	685a      	ldr	r2, [r3, #4]
 800de36:	693b      	ldr	r3, [r7, #16]
 800de38:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800de3a:	429a      	cmp	r2, r3
 800de3c:	d316      	bcc.n	800de6c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	685a      	ldr	r2, [r3, #4]
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800de48:	429a      	cmp	r2, r3
 800de4a:	d20f      	bcs.n	800de6c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800de4c:	2200      	movs	r2, #0
 800de4e:	2100      	movs	r1, #0
 800de50:	68f8      	ldr	r0, [r7, #12]
 800de52:	f000 ff65 	bl	800ed20 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2200      	movs	r2, #0
 800de5a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800de5e:	2300      	movs	r3, #0
 800de60:	2200      	movs	r2, #0
 800de62:	2100      	movs	r1, #0
 800de64:	68f8      	ldr	r0, [r7, #12]
 800de66:	f008 ff55 	bl	8016d14 <USBD_LL_PrepareReceive>
 800de6a:	e018      	b.n	800de9e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de72:	b2db      	uxtb	r3, r3
 800de74:	2b03      	cmp	r3, #3
 800de76:	d10b      	bne.n	800de90 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de7e:	68db      	ldr	r3, [r3, #12]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d005      	beq.n	800de90 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de8a:	68db      	ldr	r3, [r3, #12]
 800de8c:	68f8      	ldr	r0, [r7, #12]
 800de8e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800de90:	2180      	movs	r1, #128	; 0x80
 800de92:	68f8      	ldr	r0, [r7, #12]
 800de94:	f008 fe94 	bl	8016bc0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800de98:	68f8      	ldr	r0, [r7, #12]
 800de9a:	f000 ff93 	bl	800edc4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800dea4:	2b01      	cmp	r3, #1
 800dea6:	d122      	bne.n	800deee <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800dea8:	68f8      	ldr	r0, [r7, #12]
 800deaa:	f7ff fe98 	bl	800dbde <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2200      	movs	r2, #0
 800deb2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800deb6:	e01a      	b.n	800deee <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800debe:	b2db      	uxtb	r3, r3
 800dec0:	2b03      	cmp	r3, #3
 800dec2:	d114      	bne.n	800deee <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800deca:	695b      	ldr	r3, [r3, #20]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d00e      	beq.n	800deee <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ded6:	695b      	ldr	r3, [r3, #20]
 800ded8:	7afa      	ldrb	r2, [r7, #11]
 800deda:	4611      	mov	r1, r2
 800dedc:	68f8      	ldr	r0, [r7, #12]
 800dede:	4798      	blx	r3
 800dee0:	4603      	mov	r3, r0
 800dee2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800dee4:	7dfb      	ldrb	r3, [r7, #23]
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d001      	beq.n	800deee <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800deea:	7dfb      	ldrb	r3, [r7, #23]
 800deec:	e000      	b.n	800def0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800deee:	2300      	movs	r3, #0
}
 800def0:	4618      	mov	r0, r3
 800def2:	3718      	adds	r7, #24
 800def4:	46bd      	mov	sp, r7
 800def6:	bd80      	pop	{r7, pc}

0800def8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800def8:	b580      	push	{r7, lr}
 800defa:	b082      	sub	sp, #8
 800defc:	af00      	add	r7, sp, #0
 800defe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2201      	movs	r2, #1
 800df04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2200      	movs	r2, #0
 800df0c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2200      	movs	r2, #0
 800df14:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	2200      	movs	r2, #0
 800df1a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df24:	2b00      	cmp	r3, #0
 800df26:	d101      	bne.n	800df2c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800df28:	2303      	movs	r3, #3
 800df2a:	e02f      	b.n	800df8c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df32:	2b00      	cmp	r3, #0
 800df34:	d00f      	beq.n	800df56 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df3c:	685b      	ldr	r3, [r3, #4]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d009      	beq.n	800df56 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df48:	685b      	ldr	r3, [r3, #4]
 800df4a:	687a      	ldr	r2, [r7, #4]
 800df4c:	6852      	ldr	r2, [r2, #4]
 800df4e:	b2d2      	uxtb	r2, r2
 800df50:	4611      	mov	r1, r2
 800df52:	6878      	ldr	r0, [r7, #4]
 800df54:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800df56:	2340      	movs	r3, #64	; 0x40
 800df58:	2200      	movs	r2, #0
 800df5a:	2100      	movs	r1, #0
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f008 fdea 	bl	8016b36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	2201      	movs	r2, #1
 800df66:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2240      	movs	r2, #64	; 0x40
 800df6e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800df72:	2340      	movs	r3, #64	; 0x40
 800df74:	2200      	movs	r2, #0
 800df76:	2180      	movs	r1, #128	; 0x80
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f008 fddc 	bl	8016b36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	2201      	movs	r2, #1
 800df82:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2240      	movs	r2, #64	; 0x40
 800df88:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800df8a:	2300      	movs	r3, #0
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	3708      	adds	r7, #8
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}

0800df94 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800df94:	b480      	push	{r7}
 800df96:	b083      	sub	sp, #12
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	460b      	mov	r3, r1
 800df9e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	78fa      	ldrb	r2, [r7, #3]
 800dfa4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dfa6:	2300      	movs	r3, #0
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	370c      	adds	r7, #12
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr

0800dfb4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dfb4:	b480      	push	{r7}
 800dfb6:	b083      	sub	sp, #12
 800dfb8:	af00      	add	r7, sp, #0
 800dfba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfc2:	b2da      	uxtb	r2, r3
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2204      	movs	r2, #4
 800dfce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800dfd2:	2300      	movs	r3, #0
}
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	370c      	adds	r7, #12
 800dfd8:	46bd      	mov	sp, r7
 800dfda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfde:	4770      	bx	lr

0800dfe0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dfe0:	b480      	push	{r7}
 800dfe2:	b083      	sub	sp, #12
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfee:	b2db      	uxtb	r3, r3
 800dff0:	2b04      	cmp	r3, #4
 800dff2:	d106      	bne.n	800e002 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800dffa:	b2da      	uxtb	r2, r3
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e002:	2300      	movs	r3, #0
}
 800e004:	4618      	mov	r0, r3
 800e006:	370c      	adds	r7, #12
 800e008:	46bd      	mov	sp, r7
 800e00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e00e:	4770      	bx	lr

0800e010 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e010:	b580      	push	{r7, lr}
 800e012:	b082      	sub	sp, #8
 800e014:	af00      	add	r7, sp, #0
 800e016:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e01e:	2b00      	cmp	r3, #0
 800e020:	d101      	bne.n	800e026 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800e022:	2303      	movs	r3, #3
 800e024:	e012      	b.n	800e04c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e02c:	b2db      	uxtb	r3, r3
 800e02e:	2b03      	cmp	r3, #3
 800e030:	d10b      	bne.n	800e04a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e038:	69db      	ldr	r3, [r3, #28]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d005      	beq.n	800e04a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e044:	69db      	ldr	r3, [r3, #28]
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e04a:	2300      	movs	r3, #0
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3708      	adds	r7, #8
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}

0800e054 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b082      	sub	sp, #8
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	460b      	mov	r3, r1
 800e05e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e066:	2b00      	cmp	r3, #0
 800e068:	d101      	bne.n	800e06e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e06a:	2303      	movs	r3, #3
 800e06c:	e014      	b.n	800e098 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e074:	b2db      	uxtb	r3, r3
 800e076:	2b03      	cmp	r3, #3
 800e078:	d10d      	bne.n	800e096 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e080:	6a1b      	ldr	r3, [r3, #32]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d007      	beq.n	800e096 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e08c:	6a1b      	ldr	r3, [r3, #32]
 800e08e:	78fa      	ldrb	r2, [r7, #3]
 800e090:	4611      	mov	r1, r2
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e096:	2300      	movs	r3, #0
}
 800e098:	4618      	mov	r0, r3
 800e09a:	3708      	adds	r7, #8
 800e09c:	46bd      	mov	sp, r7
 800e09e:	bd80      	pop	{r7, pc}

0800e0a0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e0a0:	b580      	push	{r7, lr}
 800e0a2:	b082      	sub	sp, #8
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	460b      	mov	r3, r1
 800e0aa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d101      	bne.n	800e0ba <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e0b6:	2303      	movs	r3, #3
 800e0b8:	e014      	b.n	800e0e4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0c0:	b2db      	uxtb	r3, r3
 800e0c2:	2b03      	cmp	r3, #3
 800e0c4:	d10d      	bne.n	800e0e2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d007      	beq.n	800e0e2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0da:	78fa      	ldrb	r2, [r7, #3]
 800e0dc:	4611      	mov	r1, r2
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e0e2:	2300      	movs	r3, #0
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3708      	adds	r7, #8
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bd80      	pop	{r7, pc}

0800e0ec <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	b083      	sub	sp, #12
 800e0f0:	af00      	add	r7, sp, #0
 800e0f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e0f4:	2300      	movs	r3, #0
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	370c      	adds	r7, #12
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e100:	4770      	bx	lr

0800e102 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e102:	b580      	push	{r7, lr}
 800e104:	b082      	sub	sp, #8
 800e106:	af00      	add	r7, sp, #0
 800e108:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	2201      	movs	r2, #1
 800e10e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d009      	beq.n	800e130 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e122:	685b      	ldr	r3, [r3, #4]
 800e124:	687a      	ldr	r2, [r7, #4]
 800e126:	6852      	ldr	r2, [r2, #4]
 800e128:	b2d2      	uxtb	r2, r2
 800e12a:	4611      	mov	r1, r2
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	4798      	blx	r3
  }

  return USBD_OK;
 800e130:	2300      	movs	r3, #0
}
 800e132:	4618      	mov	r0, r3
 800e134:	3708      	adds	r7, #8
 800e136:	46bd      	mov	sp, r7
 800e138:	bd80      	pop	{r7, pc}

0800e13a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e13a:	b480      	push	{r7}
 800e13c:	b087      	sub	sp, #28
 800e13e:	af00      	add	r7, sp, #0
 800e140:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	3301      	adds	r3, #1
 800e150:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	781b      	ldrb	r3, [r3, #0]
 800e156:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e158:	8a3b      	ldrh	r3, [r7, #16]
 800e15a:	021b      	lsls	r3, r3, #8
 800e15c:	b21a      	sxth	r2, r3
 800e15e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e162:	4313      	orrs	r3, r2
 800e164:	b21b      	sxth	r3, r3
 800e166:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e168:	89fb      	ldrh	r3, [r7, #14]
}
 800e16a:	4618      	mov	r0, r3
 800e16c:	371c      	adds	r7, #28
 800e16e:	46bd      	mov	sp, r7
 800e170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e174:	4770      	bx	lr
	...

0800e178 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b084      	sub	sp, #16
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
 800e180:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e182:	2300      	movs	r3, #0
 800e184:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e186:	683b      	ldr	r3, [r7, #0]
 800e188:	781b      	ldrb	r3, [r3, #0]
 800e18a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e18e:	2b40      	cmp	r3, #64	; 0x40
 800e190:	d005      	beq.n	800e19e <USBD_StdDevReq+0x26>
 800e192:	2b40      	cmp	r3, #64	; 0x40
 800e194:	d853      	bhi.n	800e23e <USBD_StdDevReq+0xc6>
 800e196:	2b00      	cmp	r3, #0
 800e198:	d00b      	beq.n	800e1b2 <USBD_StdDevReq+0x3a>
 800e19a:	2b20      	cmp	r3, #32
 800e19c:	d14f      	bne.n	800e23e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e1a4:	689b      	ldr	r3, [r3, #8]
 800e1a6:	6839      	ldr	r1, [r7, #0]
 800e1a8:	6878      	ldr	r0, [r7, #4]
 800e1aa:	4798      	blx	r3
 800e1ac:	4603      	mov	r3, r0
 800e1ae:	73fb      	strb	r3, [r7, #15]
      break;
 800e1b0:	e04a      	b.n	800e248 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e1b2:	683b      	ldr	r3, [r7, #0]
 800e1b4:	785b      	ldrb	r3, [r3, #1]
 800e1b6:	2b09      	cmp	r3, #9
 800e1b8:	d83b      	bhi.n	800e232 <USBD_StdDevReq+0xba>
 800e1ba:	a201      	add	r2, pc, #4	; (adr r2, 800e1c0 <USBD_StdDevReq+0x48>)
 800e1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1c0:	0800e215 	.word	0x0800e215
 800e1c4:	0800e229 	.word	0x0800e229
 800e1c8:	0800e233 	.word	0x0800e233
 800e1cc:	0800e21f 	.word	0x0800e21f
 800e1d0:	0800e233 	.word	0x0800e233
 800e1d4:	0800e1f3 	.word	0x0800e1f3
 800e1d8:	0800e1e9 	.word	0x0800e1e9
 800e1dc:	0800e233 	.word	0x0800e233
 800e1e0:	0800e20b 	.word	0x0800e20b
 800e1e4:	0800e1fd 	.word	0x0800e1fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e1e8:	6839      	ldr	r1, [r7, #0]
 800e1ea:	6878      	ldr	r0, [r7, #4]
 800e1ec:	f000 f9de 	bl	800e5ac <USBD_GetDescriptor>
          break;
 800e1f0:	e024      	b.n	800e23c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e1f2:	6839      	ldr	r1, [r7, #0]
 800e1f4:	6878      	ldr	r0, [r7, #4]
 800e1f6:	f000 fb43 	bl	800e880 <USBD_SetAddress>
          break;
 800e1fa:	e01f      	b.n	800e23c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e1fc:	6839      	ldr	r1, [r7, #0]
 800e1fe:	6878      	ldr	r0, [r7, #4]
 800e200:	f000 fb82 	bl	800e908 <USBD_SetConfig>
 800e204:	4603      	mov	r3, r0
 800e206:	73fb      	strb	r3, [r7, #15]
          break;
 800e208:	e018      	b.n	800e23c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e20a:	6839      	ldr	r1, [r7, #0]
 800e20c:	6878      	ldr	r0, [r7, #4]
 800e20e:	f000 fc21 	bl	800ea54 <USBD_GetConfig>
          break;
 800e212:	e013      	b.n	800e23c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e214:	6839      	ldr	r1, [r7, #0]
 800e216:	6878      	ldr	r0, [r7, #4]
 800e218:	f000 fc52 	bl	800eac0 <USBD_GetStatus>
          break;
 800e21c:	e00e      	b.n	800e23c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e21e:	6839      	ldr	r1, [r7, #0]
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f000 fc81 	bl	800eb28 <USBD_SetFeature>
          break;
 800e226:	e009      	b.n	800e23c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e228:	6839      	ldr	r1, [r7, #0]
 800e22a:	6878      	ldr	r0, [r7, #4]
 800e22c:	f000 fc90 	bl	800eb50 <USBD_ClrFeature>
          break;
 800e230:	e004      	b.n	800e23c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800e232:	6839      	ldr	r1, [r7, #0]
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f000 fce7 	bl	800ec08 <USBD_CtlError>
          break;
 800e23a:	bf00      	nop
      }
      break;
 800e23c:	e004      	b.n	800e248 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800e23e:	6839      	ldr	r1, [r7, #0]
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f000 fce1 	bl	800ec08 <USBD_CtlError>
      break;
 800e246:	bf00      	nop
  }

  return ret;
 800e248:	7bfb      	ldrb	r3, [r7, #15]
}
 800e24a:	4618      	mov	r0, r3
 800e24c:	3710      	adds	r7, #16
 800e24e:	46bd      	mov	sp, r7
 800e250:	bd80      	pop	{r7, pc}
 800e252:	bf00      	nop

0800e254 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e254:	b580      	push	{r7, lr}
 800e256:	b084      	sub	sp, #16
 800e258:	af00      	add	r7, sp, #0
 800e25a:	6078      	str	r0, [r7, #4]
 800e25c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e25e:	2300      	movs	r3, #0
 800e260:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	781b      	ldrb	r3, [r3, #0]
 800e266:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e26a:	2b40      	cmp	r3, #64	; 0x40
 800e26c:	d005      	beq.n	800e27a <USBD_StdItfReq+0x26>
 800e26e:	2b40      	cmp	r3, #64	; 0x40
 800e270:	d82f      	bhi.n	800e2d2 <USBD_StdItfReq+0x7e>
 800e272:	2b00      	cmp	r3, #0
 800e274:	d001      	beq.n	800e27a <USBD_StdItfReq+0x26>
 800e276:	2b20      	cmp	r3, #32
 800e278:	d12b      	bne.n	800e2d2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e280:	b2db      	uxtb	r3, r3
 800e282:	3b01      	subs	r3, #1
 800e284:	2b02      	cmp	r3, #2
 800e286:	d81d      	bhi.n	800e2c4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	889b      	ldrh	r3, [r3, #4]
 800e28c:	b2db      	uxtb	r3, r3
 800e28e:	2b01      	cmp	r3, #1
 800e290:	d813      	bhi.n	800e2ba <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e298:	689b      	ldr	r3, [r3, #8]
 800e29a:	6839      	ldr	r1, [r7, #0]
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	4798      	blx	r3
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	88db      	ldrh	r3, [r3, #6]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d110      	bne.n	800e2ce <USBD_StdItfReq+0x7a>
 800e2ac:	7bfb      	ldrb	r3, [r7, #15]
 800e2ae:	2b00      	cmp	r3, #0
 800e2b0:	d10d      	bne.n	800e2ce <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f000 fd73 	bl	800ed9e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e2b8:	e009      	b.n	800e2ce <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800e2ba:	6839      	ldr	r1, [r7, #0]
 800e2bc:	6878      	ldr	r0, [r7, #4]
 800e2be:	f000 fca3 	bl	800ec08 <USBD_CtlError>
          break;
 800e2c2:	e004      	b.n	800e2ce <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800e2c4:	6839      	ldr	r1, [r7, #0]
 800e2c6:	6878      	ldr	r0, [r7, #4]
 800e2c8:	f000 fc9e 	bl	800ec08 <USBD_CtlError>
          break;
 800e2cc:	e000      	b.n	800e2d0 <USBD_StdItfReq+0x7c>
          break;
 800e2ce:	bf00      	nop
      }
      break;
 800e2d0:	e004      	b.n	800e2dc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800e2d2:	6839      	ldr	r1, [r7, #0]
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f000 fc97 	bl	800ec08 <USBD_CtlError>
      break;
 800e2da:	bf00      	nop
  }

  return ret;
 800e2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3710      	adds	r7, #16
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}

0800e2e6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2e6:	b580      	push	{r7, lr}
 800e2e8:	b084      	sub	sp, #16
 800e2ea:	af00      	add	r7, sp, #0
 800e2ec:	6078      	str	r0, [r7, #4]
 800e2ee:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e2f0:	2300      	movs	r3, #0
 800e2f2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	889b      	ldrh	r3, [r3, #4]
 800e2f8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e2fa:	683b      	ldr	r3, [r7, #0]
 800e2fc:	781b      	ldrb	r3, [r3, #0]
 800e2fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e302:	2b40      	cmp	r3, #64	; 0x40
 800e304:	d007      	beq.n	800e316 <USBD_StdEPReq+0x30>
 800e306:	2b40      	cmp	r3, #64	; 0x40
 800e308:	f200 8145 	bhi.w	800e596 <USBD_StdEPReq+0x2b0>
 800e30c:	2b00      	cmp	r3, #0
 800e30e:	d00c      	beq.n	800e32a <USBD_StdEPReq+0x44>
 800e310:	2b20      	cmp	r3, #32
 800e312:	f040 8140 	bne.w	800e596 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e31c:	689b      	ldr	r3, [r3, #8]
 800e31e:	6839      	ldr	r1, [r7, #0]
 800e320:	6878      	ldr	r0, [r7, #4]
 800e322:	4798      	blx	r3
 800e324:	4603      	mov	r3, r0
 800e326:	73fb      	strb	r3, [r7, #15]
      break;
 800e328:	e13a      	b.n	800e5a0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e32a:	683b      	ldr	r3, [r7, #0]
 800e32c:	785b      	ldrb	r3, [r3, #1]
 800e32e:	2b03      	cmp	r3, #3
 800e330:	d007      	beq.n	800e342 <USBD_StdEPReq+0x5c>
 800e332:	2b03      	cmp	r3, #3
 800e334:	f300 8129 	bgt.w	800e58a <USBD_StdEPReq+0x2a4>
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d07f      	beq.n	800e43c <USBD_StdEPReq+0x156>
 800e33c:	2b01      	cmp	r3, #1
 800e33e:	d03c      	beq.n	800e3ba <USBD_StdEPReq+0xd4>
 800e340:	e123      	b.n	800e58a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e348:	b2db      	uxtb	r3, r3
 800e34a:	2b02      	cmp	r3, #2
 800e34c:	d002      	beq.n	800e354 <USBD_StdEPReq+0x6e>
 800e34e:	2b03      	cmp	r3, #3
 800e350:	d016      	beq.n	800e380 <USBD_StdEPReq+0x9a>
 800e352:	e02c      	b.n	800e3ae <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e354:	7bbb      	ldrb	r3, [r7, #14]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d00d      	beq.n	800e376 <USBD_StdEPReq+0x90>
 800e35a:	7bbb      	ldrb	r3, [r7, #14]
 800e35c:	2b80      	cmp	r3, #128	; 0x80
 800e35e:	d00a      	beq.n	800e376 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e360:	7bbb      	ldrb	r3, [r7, #14]
 800e362:	4619      	mov	r1, r3
 800e364:	6878      	ldr	r0, [r7, #4]
 800e366:	f008 fc2b 	bl	8016bc0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e36a:	2180      	movs	r1, #128	; 0x80
 800e36c:	6878      	ldr	r0, [r7, #4]
 800e36e:	f008 fc27 	bl	8016bc0 <USBD_LL_StallEP>
 800e372:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e374:	e020      	b.n	800e3b8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800e376:	6839      	ldr	r1, [r7, #0]
 800e378:	6878      	ldr	r0, [r7, #4]
 800e37a:	f000 fc45 	bl	800ec08 <USBD_CtlError>
              break;
 800e37e:	e01b      	b.n	800e3b8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	885b      	ldrh	r3, [r3, #2]
 800e384:	2b00      	cmp	r3, #0
 800e386:	d10e      	bne.n	800e3a6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e388:	7bbb      	ldrb	r3, [r7, #14]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d00b      	beq.n	800e3a6 <USBD_StdEPReq+0xc0>
 800e38e:	7bbb      	ldrb	r3, [r7, #14]
 800e390:	2b80      	cmp	r3, #128	; 0x80
 800e392:	d008      	beq.n	800e3a6 <USBD_StdEPReq+0xc0>
 800e394:	683b      	ldr	r3, [r7, #0]
 800e396:	88db      	ldrh	r3, [r3, #6]
 800e398:	2b00      	cmp	r3, #0
 800e39a:	d104      	bne.n	800e3a6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e39c:	7bbb      	ldrb	r3, [r7, #14]
 800e39e:	4619      	mov	r1, r3
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f008 fc0d 	bl	8016bc0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f000 fcf9 	bl	800ed9e <USBD_CtlSendStatus>

              break;
 800e3ac:	e004      	b.n	800e3b8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800e3ae:	6839      	ldr	r1, [r7, #0]
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f000 fc29 	bl	800ec08 <USBD_CtlError>
              break;
 800e3b6:	bf00      	nop
          }
          break;
 800e3b8:	e0ec      	b.n	800e594 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3c0:	b2db      	uxtb	r3, r3
 800e3c2:	2b02      	cmp	r3, #2
 800e3c4:	d002      	beq.n	800e3cc <USBD_StdEPReq+0xe6>
 800e3c6:	2b03      	cmp	r3, #3
 800e3c8:	d016      	beq.n	800e3f8 <USBD_StdEPReq+0x112>
 800e3ca:	e030      	b.n	800e42e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e3cc:	7bbb      	ldrb	r3, [r7, #14]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d00d      	beq.n	800e3ee <USBD_StdEPReq+0x108>
 800e3d2:	7bbb      	ldrb	r3, [r7, #14]
 800e3d4:	2b80      	cmp	r3, #128	; 0x80
 800e3d6:	d00a      	beq.n	800e3ee <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e3d8:	7bbb      	ldrb	r3, [r7, #14]
 800e3da:	4619      	mov	r1, r3
 800e3dc:	6878      	ldr	r0, [r7, #4]
 800e3de:	f008 fbef 	bl	8016bc0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e3e2:	2180      	movs	r1, #128	; 0x80
 800e3e4:	6878      	ldr	r0, [r7, #4]
 800e3e6:	f008 fbeb 	bl	8016bc0 <USBD_LL_StallEP>
 800e3ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e3ec:	e025      	b.n	800e43a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800e3ee:	6839      	ldr	r1, [r7, #0]
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f000 fc09 	bl	800ec08 <USBD_CtlError>
              break;
 800e3f6:	e020      	b.n	800e43a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	885b      	ldrh	r3, [r3, #2]
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d11b      	bne.n	800e438 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e400:	7bbb      	ldrb	r3, [r7, #14]
 800e402:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e406:	2b00      	cmp	r3, #0
 800e408:	d004      	beq.n	800e414 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e40a:	7bbb      	ldrb	r3, [r7, #14]
 800e40c:	4619      	mov	r1, r3
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f008 fbf5 	bl	8016bfe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f000 fcc2 	bl	800ed9e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e420:	689b      	ldr	r3, [r3, #8]
 800e422:	6839      	ldr	r1, [r7, #0]
 800e424:	6878      	ldr	r0, [r7, #4]
 800e426:	4798      	blx	r3
 800e428:	4603      	mov	r3, r0
 800e42a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800e42c:	e004      	b.n	800e438 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800e42e:	6839      	ldr	r1, [r7, #0]
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f000 fbe9 	bl	800ec08 <USBD_CtlError>
              break;
 800e436:	e000      	b.n	800e43a <USBD_StdEPReq+0x154>
              break;
 800e438:	bf00      	nop
          }
          break;
 800e43a:	e0ab      	b.n	800e594 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e442:	b2db      	uxtb	r3, r3
 800e444:	2b02      	cmp	r3, #2
 800e446:	d002      	beq.n	800e44e <USBD_StdEPReq+0x168>
 800e448:	2b03      	cmp	r3, #3
 800e44a:	d032      	beq.n	800e4b2 <USBD_StdEPReq+0x1cc>
 800e44c:	e097      	b.n	800e57e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e44e:	7bbb      	ldrb	r3, [r7, #14]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d007      	beq.n	800e464 <USBD_StdEPReq+0x17e>
 800e454:	7bbb      	ldrb	r3, [r7, #14]
 800e456:	2b80      	cmp	r3, #128	; 0x80
 800e458:	d004      	beq.n	800e464 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800e45a:	6839      	ldr	r1, [r7, #0]
 800e45c:	6878      	ldr	r0, [r7, #4]
 800e45e:	f000 fbd3 	bl	800ec08 <USBD_CtlError>
                break;
 800e462:	e091      	b.n	800e588 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e464:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	da0b      	bge.n	800e484 <USBD_StdEPReq+0x19e>
 800e46c:	7bbb      	ldrb	r3, [r7, #14]
 800e46e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e472:	4613      	mov	r3, r2
 800e474:	009b      	lsls	r3, r3, #2
 800e476:	4413      	add	r3, r2
 800e478:	009b      	lsls	r3, r3, #2
 800e47a:	3310      	adds	r3, #16
 800e47c:	687a      	ldr	r2, [r7, #4]
 800e47e:	4413      	add	r3, r2
 800e480:	3304      	adds	r3, #4
 800e482:	e00b      	b.n	800e49c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e484:	7bbb      	ldrb	r3, [r7, #14]
 800e486:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e48a:	4613      	mov	r3, r2
 800e48c:	009b      	lsls	r3, r3, #2
 800e48e:	4413      	add	r3, r2
 800e490:	009b      	lsls	r3, r3, #2
 800e492:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e496:	687a      	ldr	r2, [r7, #4]
 800e498:	4413      	add	r3, r2
 800e49a:	3304      	adds	r3, #4
 800e49c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e4a4:	68bb      	ldr	r3, [r7, #8]
 800e4a6:	2202      	movs	r2, #2
 800e4a8:	4619      	mov	r1, r3
 800e4aa:	6878      	ldr	r0, [r7, #4]
 800e4ac:	f000 fc1d 	bl	800ecea <USBD_CtlSendData>
              break;
 800e4b0:	e06a      	b.n	800e588 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e4b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	da11      	bge.n	800e4de <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e4ba:	7bbb      	ldrb	r3, [r7, #14]
 800e4bc:	f003 020f 	and.w	r2, r3, #15
 800e4c0:	6879      	ldr	r1, [r7, #4]
 800e4c2:	4613      	mov	r3, r2
 800e4c4:	009b      	lsls	r3, r3, #2
 800e4c6:	4413      	add	r3, r2
 800e4c8:	009b      	lsls	r3, r3, #2
 800e4ca:	440b      	add	r3, r1
 800e4cc:	3324      	adds	r3, #36	; 0x24
 800e4ce:	881b      	ldrh	r3, [r3, #0]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d117      	bne.n	800e504 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e4d4:	6839      	ldr	r1, [r7, #0]
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f000 fb96 	bl	800ec08 <USBD_CtlError>
                  break;
 800e4dc:	e054      	b.n	800e588 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e4de:	7bbb      	ldrb	r3, [r7, #14]
 800e4e0:	f003 020f 	and.w	r2, r3, #15
 800e4e4:	6879      	ldr	r1, [r7, #4]
 800e4e6:	4613      	mov	r3, r2
 800e4e8:	009b      	lsls	r3, r3, #2
 800e4ea:	4413      	add	r3, r2
 800e4ec:	009b      	lsls	r3, r3, #2
 800e4ee:	440b      	add	r3, r1
 800e4f0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e4f4:	881b      	ldrh	r3, [r3, #0]
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d104      	bne.n	800e504 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800e4fa:	6839      	ldr	r1, [r7, #0]
 800e4fc:	6878      	ldr	r0, [r7, #4]
 800e4fe:	f000 fb83 	bl	800ec08 <USBD_CtlError>
                  break;
 800e502:	e041      	b.n	800e588 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e504:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	da0b      	bge.n	800e524 <USBD_StdEPReq+0x23e>
 800e50c:	7bbb      	ldrb	r3, [r7, #14]
 800e50e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e512:	4613      	mov	r3, r2
 800e514:	009b      	lsls	r3, r3, #2
 800e516:	4413      	add	r3, r2
 800e518:	009b      	lsls	r3, r3, #2
 800e51a:	3310      	adds	r3, #16
 800e51c:	687a      	ldr	r2, [r7, #4]
 800e51e:	4413      	add	r3, r2
 800e520:	3304      	adds	r3, #4
 800e522:	e00b      	b.n	800e53c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e524:	7bbb      	ldrb	r3, [r7, #14]
 800e526:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e52a:	4613      	mov	r3, r2
 800e52c:	009b      	lsls	r3, r3, #2
 800e52e:	4413      	add	r3, r2
 800e530:	009b      	lsls	r3, r3, #2
 800e532:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e536:	687a      	ldr	r2, [r7, #4]
 800e538:	4413      	add	r3, r2
 800e53a:	3304      	adds	r3, #4
 800e53c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e53e:	7bbb      	ldrb	r3, [r7, #14]
 800e540:	2b00      	cmp	r3, #0
 800e542:	d002      	beq.n	800e54a <USBD_StdEPReq+0x264>
 800e544:	7bbb      	ldrb	r3, [r7, #14]
 800e546:	2b80      	cmp	r3, #128	; 0x80
 800e548:	d103      	bne.n	800e552 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800e54a:	68bb      	ldr	r3, [r7, #8]
 800e54c:	2200      	movs	r2, #0
 800e54e:	601a      	str	r2, [r3, #0]
 800e550:	e00e      	b.n	800e570 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e552:	7bbb      	ldrb	r3, [r7, #14]
 800e554:	4619      	mov	r1, r3
 800e556:	6878      	ldr	r0, [r7, #4]
 800e558:	f008 fb70 	bl	8016c3c <USBD_LL_IsStallEP>
 800e55c:	4603      	mov	r3, r0
 800e55e:	2b00      	cmp	r3, #0
 800e560:	d003      	beq.n	800e56a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800e562:	68bb      	ldr	r3, [r7, #8]
 800e564:	2201      	movs	r2, #1
 800e566:	601a      	str	r2, [r3, #0]
 800e568:	e002      	b.n	800e570 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	2200      	movs	r2, #0
 800e56e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	2202      	movs	r2, #2
 800e574:	4619      	mov	r1, r3
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f000 fbb7 	bl	800ecea <USBD_CtlSendData>
              break;
 800e57c:	e004      	b.n	800e588 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800e57e:	6839      	ldr	r1, [r7, #0]
 800e580:	6878      	ldr	r0, [r7, #4]
 800e582:	f000 fb41 	bl	800ec08 <USBD_CtlError>
              break;
 800e586:	bf00      	nop
          }
          break;
 800e588:	e004      	b.n	800e594 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800e58a:	6839      	ldr	r1, [r7, #0]
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f000 fb3b 	bl	800ec08 <USBD_CtlError>
          break;
 800e592:	bf00      	nop
      }
      break;
 800e594:	e004      	b.n	800e5a0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800e596:	6839      	ldr	r1, [r7, #0]
 800e598:	6878      	ldr	r0, [r7, #4]
 800e59a:	f000 fb35 	bl	800ec08 <USBD_CtlError>
      break;
 800e59e:	bf00      	nop
  }

  return ret;
 800e5a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	3710      	adds	r7, #16
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}
	...

0800e5ac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b084      	sub	sp, #16
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	6078      	str	r0, [r7, #4]
 800e5b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	885b      	ldrh	r3, [r3, #2]
 800e5c6:	0a1b      	lsrs	r3, r3, #8
 800e5c8:	b29b      	uxth	r3, r3
 800e5ca:	3b01      	subs	r3, #1
 800e5cc:	2b06      	cmp	r3, #6
 800e5ce:	f200 8128 	bhi.w	800e822 <USBD_GetDescriptor+0x276>
 800e5d2:	a201      	add	r2, pc, #4	; (adr r2, 800e5d8 <USBD_GetDescriptor+0x2c>)
 800e5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5d8:	0800e5f5 	.word	0x0800e5f5
 800e5dc:	0800e60d 	.word	0x0800e60d
 800e5e0:	0800e64d 	.word	0x0800e64d
 800e5e4:	0800e823 	.word	0x0800e823
 800e5e8:	0800e823 	.word	0x0800e823
 800e5ec:	0800e7c3 	.word	0x0800e7c3
 800e5f0:	0800e7ef 	.word	0x0800e7ef
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	687a      	ldr	r2, [r7, #4]
 800e5fe:	7c12      	ldrb	r2, [r2, #16]
 800e600:	f107 0108 	add.w	r1, r7, #8
 800e604:	4610      	mov	r0, r2
 800e606:	4798      	blx	r3
 800e608:	60f8      	str	r0, [r7, #12]
      break;
 800e60a:	e112      	b.n	800e832 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	7c1b      	ldrb	r3, [r3, #16]
 800e610:	2b00      	cmp	r3, #0
 800e612:	d10d      	bne.n	800e630 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e61a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e61c:	f107 0208 	add.w	r2, r7, #8
 800e620:	4610      	mov	r0, r2
 800e622:	4798      	blx	r3
 800e624:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	3301      	adds	r3, #1
 800e62a:	2202      	movs	r2, #2
 800e62c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e62e:	e100      	b.n	800e832 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e638:	f107 0208 	add.w	r2, r7, #8
 800e63c:	4610      	mov	r0, r2
 800e63e:	4798      	blx	r3
 800e640:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	3301      	adds	r3, #1
 800e646:	2202      	movs	r2, #2
 800e648:	701a      	strb	r2, [r3, #0]
      break;
 800e64a:	e0f2      	b.n	800e832 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e64c:	683b      	ldr	r3, [r7, #0]
 800e64e:	885b      	ldrh	r3, [r3, #2]
 800e650:	b2db      	uxtb	r3, r3
 800e652:	2b05      	cmp	r3, #5
 800e654:	f200 80ac 	bhi.w	800e7b0 <USBD_GetDescriptor+0x204>
 800e658:	a201      	add	r2, pc, #4	; (adr r2, 800e660 <USBD_GetDescriptor+0xb4>)
 800e65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e65e:	bf00      	nop
 800e660:	0800e679 	.word	0x0800e679
 800e664:	0800e6ad 	.word	0x0800e6ad
 800e668:	0800e6e1 	.word	0x0800e6e1
 800e66c:	0800e715 	.word	0x0800e715
 800e670:	0800e749 	.word	0x0800e749
 800e674:	0800e77d 	.word	0x0800e77d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e67e:	685b      	ldr	r3, [r3, #4]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d00b      	beq.n	800e69c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e68a:	685b      	ldr	r3, [r3, #4]
 800e68c:	687a      	ldr	r2, [r7, #4]
 800e68e:	7c12      	ldrb	r2, [r2, #16]
 800e690:	f107 0108 	add.w	r1, r7, #8
 800e694:	4610      	mov	r0, r2
 800e696:	4798      	blx	r3
 800e698:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e69a:	e091      	b.n	800e7c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e69c:	6839      	ldr	r1, [r7, #0]
 800e69e:	6878      	ldr	r0, [r7, #4]
 800e6a0:	f000 fab2 	bl	800ec08 <USBD_CtlError>
            err++;
 800e6a4:	7afb      	ldrb	r3, [r7, #11]
 800e6a6:	3301      	adds	r3, #1
 800e6a8:	72fb      	strb	r3, [r7, #11]
          break;
 800e6aa:	e089      	b.n	800e7c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6b2:	689b      	ldr	r3, [r3, #8]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d00b      	beq.n	800e6d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6be:	689b      	ldr	r3, [r3, #8]
 800e6c0:	687a      	ldr	r2, [r7, #4]
 800e6c2:	7c12      	ldrb	r2, [r2, #16]
 800e6c4:	f107 0108 	add.w	r1, r7, #8
 800e6c8:	4610      	mov	r0, r2
 800e6ca:	4798      	blx	r3
 800e6cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e6ce:	e077      	b.n	800e7c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e6d0:	6839      	ldr	r1, [r7, #0]
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f000 fa98 	bl	800ec08 <USBD_CtlError>
            err++;
 800e6d8:	7afb      	ldrb	r3, [r7, #11]
 800e6da:	3301      	adds	r3, #1
 800e6dc:	72fb      	strb	r3, [r7, #11]
          break;
 800e6de:	e06f      	b.n	800e7c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6e6:	68db      	ldr	r3, [r3, #12]
 800e6e8:	2b00      	cmp	r3, #0
 800e6ea:	d00b      	beq.n	800e704 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e6f2:	68db      	ldr	r3, [r3, #12]
 800e6f4:	687a      	ldr	r2, [r7, #4]
 800e6f6:	7c12      	ldrb	r2, [r2, #16]
 800e6f8:	f107 0108 	add.w	r1, r7, #8
 800e6fc:	4610      	mov	r0, r2
 800e6fe:	4798      	blx	r3
 800e700:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e702:	e05d      	b.n	800e7c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e704:	6839      	ldr	r1, [r7, #0]
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f000 fa7e 	bl	800ec08 <USBD_CtlError>
            err++;
 800e70c:	7afb      	ldrb	r3, [r7, #11]
 800e70e:	3301      	adds	r3, #1
 800e710:	72fb      	strb	r3, [r7, #11]
          break;
 800e712:	e055      	b.n	800e7c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e71a:	691b      	ldr	r3, [r3, #16]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d00b      	beq.n	800e738 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e726:	691b      	ldr	r3, [r3, #16]
 800e728:	687a      	ldr	r2, [r7, #4]
 800e72a:	7c12      	ldrb	r2, [r2, #16]
 800e72c:	f107 0108 	add.w	r1, r7, #8
 800e730:	4610      	mov	r0, r2
 800e732:	4798      	blx	r3
 800e734:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e736:	e043      	b.n	800e7c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e738:	6839      	ldr	r1, [r7, #0]
 800e73a:	6878      	ldr	r0, [r7, #4]
 800e73c:	f000 fa64 	bl	800ec08 <USBD_CtlError>
            err++;
 800e740:	7afb      	ldrb	r3, [r7, #11]
 800e742:	3301      	adds	r3, #1
 800e744:	72fb      	strb	r3, [r7, #11]
          break;
 800e746:	e03b      	b.n	800e7c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e74e:	695b      	ldr	r3, [r3, #20]
 800e750:	2b00      	cmp	r3, #0
 800e752:	d00b      	beq.n	800e76c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e75a:	695b      	ldr	r3, [r3, #20]
 800e75c:	687a      	ldr	r2, [r7, #4]
 800e75e:	7c12      	ldrb	r2, [r2, #16]
 800e760:	f107 0108 	add.w	r1, r7, #8
 800e764:	4610      	mov	r0, r2
 800e766:	4798      	blx	r3
 800e768:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e76a:	e029      	b.n	800e7c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e76c:	6839      	ldr	r1, [r7, #0]
 800e76e:	6878      	ldr	r0, [r7, #4]
 800e770:	f000 fa4a 	bl	800ec08 <USBD_CtlError>
            err++;
 800e774:	7afb      	ldrb	r3, [r7, #11]
 800e776:	3301      	adds	r3, #1
 800e778:	72fb      	strb	r3, [r7, #11]
          break;
 800e77a:	e021      	b.n	800e7c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e782:	699b      	ldr	r3, [r3, #24]
 800e784:	2b00      	cmp	r3, #0
 800e786:	d00b      	beq.n	800e7a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e78e:	699b      	ldr	r3, [r3, #24]
 800e790:	687a      	ldr	r2, [r7, #4]
 800e792:	7c12      	ldrb	r2, [r2, #16]
 800e794:	f107 0108 	add.w	r1, r7, #8
 800e798:	4610      	mov	r0, r2
 800e79a:	4798      	blx	r3
 800e79c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e79e:	e00f      	b.n	800e7c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e7a0:	6839      	ldr	r1, [r7, #0]
 800e7a2:	6878      	ldr	r0, [r7, #4]
 800e7a4:	f000 fa30 	bl	800ec08 <USBD_CtlError>
            err++;
 800e7a8:	7afb      	ldrb	r3, [r7, #11]
 800e7aa:	3301      	adds	r3, #1
 800e7ac:	72fb      	strb	r3, [r7, #11]
          break;
 800e7ae:	e007      	b.n	800e7c0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e7b0:	6839      	ldr	r1, [r7, #0]
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f000 fa28 	bl	800ec08 <USBD_CtlError>
          err++;
 800e7b8:	7afb      	ldrb	r3, [r7, #11]
 800e7ba:	3301      	adds	r3, #1
 800e7bc:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800e7be:	bf00      	nop
      }
      break;
 800e7c0:	e037      	b.n	800e832 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	7c1b      	ldrb	r3, [r3, #16]
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d109      	bne.n	800e7de <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e7d2:	f107 0208 	add.w	r2, r7, #8
 800e7d6:	4610      	mov	r0, r2
 800e7d8:	4798      	blx	r3
 800e7da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e7dc:	e029      	b.n	800e832 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e7de:	6839      	ldr	r1, [r7, #0]
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	f000 fa11 	bl	800ec08 <USBD_CtlError>
        err++;
 800e7e6:	7afb      	ldrb	r3, [r7, #11]
 800e7e8:	3301      	adds	r3, #1
 800e7ea:	72fb      	strb	r3, [r7, #11]
      break;
 800e7ec:	e021      	b.n	800e832 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	7c1b      	ldrb	r3, [r3, #16]
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d10d      	bne.n	800e812 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7fe:	f107 0208 	add.w	r2, r7, #8
 800e802:	4610      	mov	r0, r2
 800e804:	4798      	blx	r3
 800e806:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e808:	68fb      	ldr	r3, [r7, #12]
 800e80a:	3301      	adds	r3, #1
 800e80c:	2207      	movs	r2, #7
 800e80e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e810:	e00f      	b.n	800e832 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e812:	6839      	ldr	r1, [r7, #0]
 800e814:	6878      	ldr	r0, [r7, #4]
 800e816:	f000 f9f7 	bl	800ec08 <USBD_CtlError>
        err++;
 800e81a:	7afb      	ldrb	r3, [r7, #11]
 800e81c:	3301      	adds	r3, #1
 800e81e:	72fb      	strb	r3, [r7, #11]
      break;
 800e820:	e007      	b.n	800e832 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e822:	6839      	ldr	r1, [r7, #0]
 800e824:	6878      	ldr	r0, [r7, #4]
 800e826:	f000 f9ef 	bl	800ec08 <USBD_CtlError>
      err++;
 800e82a:	7afb      	ldrb	r3, [r7, #11]
 800e82c:	3301      	adds	r3, #1
 800e82e:	72fb      	strb	r3, [r7, #11]
      break;
 800e830:	bf00      	nop
  }

  if (err != 0U)
 800e832:	7afb      	ldrb	r3, [r7, #11]
 800e834:	2b00      	cmp	r3, #0
 800e836:	d11e      	bne.n	800e876 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	88db      	ldrh	r3, [r3, #6]
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d016      	beq.n	800e86e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e840:	893b      	ldrh	r3, [r7, #8]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d00e      	beq.n	800e864 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e846:	683b      	ldr	r3, [r7, #0]
 800e848:	88da      	ldrh	r2, [r3, #6]
 800e84a:	893b      	ldrh	r3, [r7, #8]
 800e84c:	4293      	cmp	r3, r2
 800e84e:	bf28      	it	cs
 800e850:	4613      	movcs	r3, r2
 800e852:	b29b      	uxth	r3, r3
 800e854:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e856:	893b      	ldrh	r3, [r7, #8]
 800e858:	461a      	mov	r2, r3
 800e85a:	68f9      	ldr	r1, [r7, #12]
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f000 fa44 	bl	800ecea <USBD_CtlSendData>
 800e862:	e009      	b.n	800e878 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e864:	6839      	ldr	r1, [r7, #0]
 800e866:	6878      	ldr	r0, [r7, #4]
 800e868:	f000 f9ce 	bl	800ec08 <USBD_CtlError>
 800e86c:	e004      	b.n	800e878 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f000 fa95 	bl	800ed9e <USBD_CtlSendStatus>
 800e874:	e000      	b.n	800e878 <USBD_GetDescriptor+0x2cc>
    return;
 800e876:	bf00      	nop
  }
}
 800e878:	3710      	adds	r7, #16
 800e87a:	46bd      	mov	sp, r7
 800e87c:	bd80      	pop	{r7, pc}
 800e87e:	bf00      	nop

0800e880 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e880:	b580      	push	{r7, lr}
 800e882:	b084      	sub	sp, #16
 800e884:	af00      	add	r7, sp, #0
 800e886:	6078      	str	r0, [r7, #4]
 800e888:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	889b      	ldrh	r3, [r3, #4]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d131      	bne.n	800e8f6 <USBD_SetAddress+0x76>
 800e892:	683b      	ldr	r3, [r7, #0]
 800e894:	88db      	ldrh	r3, [r3, #6]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d12d      	bne.n	800e8f6 <USBD_SetAddress+0x76>
 800e89a:	683b      	ldr	r3, [r7, #0]
 800e89c:	885b      	ldrh	r3, [r3, #2]
 800e89e:	2b7f      	cmp	r3, #127	; 0x7f
 800e8a0:	d829      	bhi.n	800e8f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e8a2:	683b      	ldr	r3, [r7, #0]
 800e8a4:	885b      	ldrh	r3, [r3, #2]
 800e8a6:	b2db      	uxtb	r3, r3
 800e8a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e8ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8b4:	b2db      	uxtb	r3, r3
 800e8b6:	2b03      	cmp	r3, #3
 800e8b8:	d104      	bne.n	800e8c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e8ba:	6839      	ldr	r1, [r7, #0]
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f000 f9a3 	bl	800ec08 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8c2:	e01d      	b.n	800e900 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	7bfa      	ldrb	r2, [r7, #15]
 800e8c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e8cc:	7bfb      	ldrb	r3, [r7, #15]
 800e8ce:	4619      	mov	r1, r3
 800e8d0:	6878      	ldr	r0, [r7, #4]
 800e8d2:	f008 f9df 	bl	8016c94 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f000 fa61 	bl	800ed9e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e8dc:	7bfb      	ldrb	r3, [r7, #15]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d004      	beq.n	800e8ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	2202      	movs	r2, #2
 800e8e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8ea:	e009      	b.n	800e900 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2201      	movs	r2, #1
 800e8f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8f4:	e004      	b.n	800e900 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e8f6:	6839      	ldr	r1, [r7, #0]
 800e8f8:	6878      	ldr	r0, [r7, #4]
 800e8fa:	f000 f985 	bl	800ec08 <USBD_CtlError>
  }
}
 800e8fe:	bf00      	nop
 800e900:	bf00      	nop
 800e902:	3710      	adds	r7, #16
 800e904:	46bd      	mov	sp, r7
 800e906:	bd80      	pop	{r7, pc}

0800e908 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e908:	b580      	push	{r7, lr}
 800e90a:	b084      	sub	sp, #16
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
 800e910:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e912:	2300      	movs	r3, #0
 800e914:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e916:	683b      	ldr	r3, [r7, #0]
 800e918:	885b      	ldrh	r3, [r3, #2]
 800e91a:	b2da      	uxtb	r2, r3
 800e91c:	4b4c      	ldr	r3, [pc, #304]	; (800ea50 <USBD_SetConfig+0x148>)
 800e91e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e920:	4b4b      	ldr	r3, [pc, #300]	; (800ea50 <USBD_SetConfig+0x148>)
 800e922:	781b      	ldrb	r3, [r3, #0]
 800e924:	2b01      	cmp	r3, #1
 800e926:	d905      	bls.n	800e934 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e928:	6839      	ldr	r1, [r7, #0]
 800e92a:	6878      	ldr	r0, [r7, #4]
 800e92c:	f000 f96c 	bl	800ec08 <USBD_CtlError>
    return USBD_FAIL;
 800e930:	2303      	movs	r3, #3
 800e932:	e088      	b.n	800ea46 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e93a:	b2db      	uxtb	r3, r3
 800e93c:	2b02      	cmp	r3, #2
 800e93e:	d002      	beq.n	800e946 <USBD_SetConfig+0x3e>
 800e940:	2b03      	cmp	r3, #3
 800e942:	d025      	beq.n	800e990 <USBD_SetConfig+0x88>
 800e944:	e071      	b.n	800ea2a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e946:	4b42      	ldr	r3, [pc, #264]	; (800ea50 <USBD_SetConfig+0x148>)
 800e948:	781b      	ldrb	r3, [r3, #0]
 800e94a:	2b00      	cmp	r3, #0
 800e94c:	d01c      	beq.n	800e988 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800e94e:	4b40      	ldr	r3, [pc, #256]	; (800ea50 <USBD_SetConfig+0x148>)
 800e950:	781b      	ldrb	r3, [r3, #0]
 800e952:	461a      	mov	r2, r3
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e958:	4b3d      	ldr	r3, [pc, #244]	; (800ea50 <USBD_SetConfig+0x148>)
 800e95a:	781b      	ldrb	r3, [r3, #0]
 800e95c:	4619      	mov	r1, r3
 800e95e:	6878      	ldr	r0, [r7, #4]
 800e960:	f7ff f948 	bl	800dbf4 <USBD_SetClassConfig>
 800e964:	4603      	mov	r3, r0
 800e966:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e968:	7bfb      	ldrb	r3, [r7, #15]
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d004      	beq.n	800e978 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800e96e:	6839      	ldr	r1, [r7, #0]
 800e970:	6878      	ldr	r0, [r7, #4]
 800e972:	f000 f949 	bl	800ec08 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e976:	e065      	b.n	800ea44 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f000 fa10 	bl	800ed9e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	2203      	movs	r2, #3
 800e982:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e986:	e05d      	b.n	800ea44 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800e988:	6878      	ldr	r0, [r7, #4]
 800e98a:	f000 fa08 	bl	800ed9e <USBD_CtlSendStatus>
      break;
 800e98e:	e059      	b.n	800ea44 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e990:	4b2f      	ldr	r3, [pc, #188]	; (800ea50 <USBD_SetConfig+0x148>)
 800e992:	781b      	ldrb	r3, [r3, #0]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d112      	bne.n	800e9be <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2202      	movs	r2, #2
 800e99c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e9a0:	4b2b      	ldr	r3, [pc, #172]	; (800ea50 <USBD_SetConfig+0x148>)
 800e9a2:	781b      	ldrb	r3, [r3, #0]
 800e9a4:	461a      	mov	r2, r3
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e9aa:	4b29      	ldr	r3, [pc, #164]	; (800ea50 <USBD_SetConfig+0x148>)
 800e9ac:	781b      	ldrb	r3, [r3, #0]
 800e9ae:	4619      	mov	r1, r3
 800e9b0:	6878      	ldr	r0, [r7, #4]
 800e9b2:	f7ff f93b 	bl	800dc2c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e9b6:	6878      	ldr	r0, [r7, #4]
 800e9b8:	f000 f9f1 	bl	800ed9e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e9bc:	e042      	b.n	800ea44 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800e9be:	4b24      	ldr	r3, [pc, #144]	; (800ea50 <USBD_SetConfig+0x148>)
 800e9c0:	781b      	ldrb	r3, [r3, #0]
 800e9c2:	461a      	mov	r2, r3
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	685b      	ldr	r3, [r3, #4]
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d02a      	beq.n	800ea22 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	685b      	ldr	r3, [r3, #4]
 800e9d0:	b2db      	uxtb	r3, r3
 800e9d2:	4619      	mov	r1, r3
 800e9d4:	6878      	ldr	r0, [r7, #4]
 800e9d6:	f7ff f929 	bl	800dc2c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e9da:	4b1d      	ldr	r3, [pc, #116]	; (800ea50 <USBD_SetConfig+0x148>)
 800e9dc:	781b      	ldrb	r3, [r3, #0]
 800e9de:	461a      	mov	r2, r3
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e9e4:	4b1a      	ldr	r3, [pc, #104]	; (800ea50 <USBD_SetConfig+0x148>)
 800e9e6:	781b      	ldrb	r3, [r3, #0]
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f7ff f902 	bl	800dbf4 <USBD_SetClassConfig>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e9f4:	7bfb      	ldrb	r3, [r7, #15]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d00f      	beq.n	800ea1a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800e9fa:	6839      	ldr	r1, [r7, #0]
 800e9fc:	6878      	ldr	r0, [r7, #4]
 800e9fe:	f000 f903 	bl	800ec08 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	685b      	ldr	r3, [r3, #4]
 800ea06:	b2db      	uxtb	r3, r3
 800ea08:	4619      	mov	r1, r3
 800ea0a:	6878      	ldr	r0, [r7, #4]
 800ea0c:	f7ff f90e 	bl	800dc2c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	2202      	movs	r2, #2
 800ea14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ea18:	e014      	b.n	800ea44 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800ea1a:	6878      	ldr	r0, [r7, #4]
 800ea1c:	f000 f9bf 	bl	800ed9e <USBD_CtlSendStatus>
      break;
 800ea20:	e010      	b.n	800ea44 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f000 f9bb 	bl	800ed9e <USBD_CtlSendStatus>
      break;
 800ea28:	e00c      	b.n	800ea44 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800ea2a:	6839      	ldr	r1, [r7, #0]
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f000 f8eb 	bl	800ec08 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ea32:	4b07      	ldr	r3, [pc, #28]	; (800ea50 <USBD_SetConfig+0x148>)
 800ea34:	781b      	ldrb	r3, [r3, #0]
 800ea36:	4619      	mov	r1, r3
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	f7ff f8f7 	bl	800dc2c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ea3e:	2303      	movs	r3, #3
 800ea40:	73fb      	strb	r3, [r7, #15]
      break;
 800ea42:	bf00      	nop
  }

  return ret;
 800ea44:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3710      	adds	r7, #16
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}
 800ea4e:	bf00      	nop
 800ea50:	200027b4 	.word	0x200027b4

0800ea54 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b082      	sub	sp, #8
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
 800ea5c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	88db      	ldrh	r3, [r3, #6]
 800ea62:	2b01      	cmp	r3, #1
 800ea64:	d004      	beq.n	800ea70 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ea66:	6839      	ldr	r1, [r7, #0]
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	f000 f8cd 	bl	800ec08 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ea6e:	e023      	b.n	800eab8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea76:	b2db      	uxtb	r3, r3
 800ea78:	2b02      	cmp	r3, #2
 800ea7a:	dc02      	bgt.n	800ea82 <USBD_GetConfig+0x2e>
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	dc03      	bgt.n	800ea88 <USBD_GetConfig+0x34>
 800ea80:	e015      	b.n	800eaae <USBD_GetConfig+0x5a>
 800ea82:	2b03      	cmp	r3, #3
 800ea84:	d00b      	beq.n	800ea9e <USBD_GetConfig+0x4a>
 800ea86:	e012      	b.n	800eaae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	3308      	adds	r3, #8
 800ea92:	2201      	movs	r2, #1
 800ea94:	4619      	mov	r1, r3
 800ea96:	6878      	ldr	r0, [r7, #4]
 800ea98:	f000 f927 	bl	800ecea <USBD_CtlSendData>
        break;
 800ea9c:	e00c      	b.n	800eab8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	3304      	adds	r3, #4
 800eaa2:	2201      	movs	r2, #1
 800eaa4:	4619      	mov	r1, r3
 800eaa6:	6878      	ldr	r0, [r7, #4]
 800eaa8:	f000 f91f 	bl	800ecea <USBD_CtlSendData>
        break;
 800eaac:	e004      	b.n	800eab8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800eaae:	6839      	ldr	r1, [r7, #0]
 800eab0:	6878      	ldr	r0, [r7, #4]
 800eab2:	f000 f8a9 	bl	800ec08 <USBD_CtlError>
        break;
 800eab6:	bf00      	nop
}
 800eab8:	bf00      	nop
 800eaba:	3708      	adds	r7, #8
 800eabc:	46bd      	mov	sp, r7
 800eabe:	bd80      	pop	{r7, pc}

0800eac0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b082      	sub	sp, #8
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
 800eac8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ead0:	b2db      	uxtb	r3, r3
 800ead2:	3b01      	subs	r3, #1
 800ead4:	2b02      	cmp	r3, #2
 800ead6:	d81e      	bhi.n	800eb16 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	88db      	ldrh	r3, [r3, #6]
 800eadc:	2b02      	cmp	r3, #2
 800eade:	d004      	beq.n	800eaea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800eae0:	6839      	ldr	r1, [r7, #0]
 800eae2:	6878      	ldr	r0, [r7, #4]
 800eae4:	f000 f890 	bl	800ec08 <USBD_CtlError>
        break;
 800eae8:	e01a      	b.n	800eb20 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	2201      	movs	r2, #1
 800eaee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800eaf6:	2b00      	cmp	r3, #0
 800eaf8:	d005      	beq.n	800eb06 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	68db      	ldr	r3, [r3, #12]
 800eafe:	f043 0202 	orr.w	r2, r3, #2
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	330c      	adds	r3, #12
 800eb0a:	2202      	movs	r2, #2
 800eb0c:	4619      	mov	r1, r3
 800eb0e:	6878      	ldr	r0, [r7, #4]
 800eb10:	f000 f8eb 	bl	800ecea <USBD_CtlSendData>
      break;
 800eb14:	e004      	b.n	800eb20 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800eb16:	6839      	ldr	r1, [r7, #0]
 800eb18:	6878      	ldr	r0, [r7, #4]
 800eb1a:	f000 f875 	bl	800ec08 <USBD_CtlError>
      break;
 800eb1e:	bf00      	nop
  }
}
 800eb20:	bf00      	nop
 800eb22:	3708      	adds	r7, #8
 800eb24:	46bd      	mov	sp, r7
 800eb26:	bd80      	pop	{r7, pc}

0800eb28 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b082      	sub	sp, #8
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	6078      	str	r0, [r7, #4]
 800eb30:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	885b      	ldrh	r3, [r3, #2]
 800eb36:	2b01      	cmp	r3, #1
 800eb38:	d106      	bne.n	800eb48 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2201      	movs	r2, #1
 800eb3e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f000 f92b 	bl	800ed9e <USBD_CtlSendStatus>
  }
}
 800eb48:	bf00      	nop
 800eb4a:	3708      	adds	r7, #8
 800eb4c:	46bd      	mov	sp, r7
 800eb4e:	bd80      	pop	{r7, pc}

0800eb50 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b082      	sub	sp, #8
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	6078      	str	r0, [r7, #4]
 800eb58:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb60:	b2db      	uxtb	r3, r3
 800eb62:	3b01      	subs	r3, #1
 800eb64:	2b02      	cmp	r3, #2
 800eb66:	d80b      	bhi.n	800eb80 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	885b      	ldrh	r3, [r3, #2]
 800eb6c:	2b01      	cmp	r3, #1
 800eb6e:	d10c      	bne.n	800eb8a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	2200      	movs	r2, #0
 800eb74:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f000 f910 	bl	800ed9e <USBD_CtlSendStatus>
      }
      break;
 800eb7e:	e004      	b.n	800eb8a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800eb80:	6839      	ldr	r1, [r7, #0]
 800eb82:	6878      	ldr	r0, [r7, #4]
 800eb84:	f000 f840 	bl	800ec08 <USBD_CtlError>
      break;
 800eb88:	e000      	b.n	800eb8c <USBD_ClrFeature+0x3c>
      break;
 800eb8a:	bf00      	nop
  }
}
 800eb8c:	bf00      	nop
 800eb8e:	3708      	adds	r7, #8
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}

0800eb94 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b084      	sub	sp, #16
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	6078      	str	r0, [r7, #4]
 800eb9c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800eb9e:	683b      	ldr	r3, [r7, #0]
 800eba0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	781a      	ldrb	r2, [r3, #0]
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	3301      	adds	r3, #1
 800ebae:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	781a      	ldrb	r2, [r3, #0]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	3301      	adds	r3, #1
 800ebbc:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ebbe:	68f8      	ldr	r0, [r7, #12]
 800ebc0:	f7ff fabb 	bl	800e13a <SWAPBYTE>
 800ebc4:	4603      	mov	r3, r0
 800ebc6:	461a      	mov	r2, r3
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	3301      	adds	r3, #1
 800ebd0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	3301      	adds	r3, #1
 800ebd6:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800ebd8:	68f8      	ldr	r0, [r7, #12]
 800ebda:	f7ff faae 	bl	800e13a <SWAPBYTE>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	461a      	mov	r2, r3
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	3301      	adds	r3, #1
 800ebea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	3301      	adds	r3, #1
 800ebf0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ebf2:	68f8      	ldr	r0, [r7, #12]
 800ebf4:	f7ff faa1 	bl	800e13a <SWAPBYTE>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	461a      	mov	r2, r3
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	80da      	strh	r2, [r3, #6]
}
 800ec00:	bf00      	nop
 800ec02:	3710      	adds	r7, #16
 800ec04:	46bd      	mov	sp, r7
 800ec06:	bd80      	pop	{r7, pc}

0800ec08 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec08:	b580      	push	{r7, lr}
 800ec0a:	b082      	sub	sp, #8
 800ec0c:	af00      	add	r7, sp, #0
 800ec0e:	6078      	str	r0, [r7, #4]
 800ec10:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec12:	2180      	movs	r1, #128	; 0x80
 800ec14:	6878      	ldr	r0, [r7, #4]
 800ec16:	f007 ffd3 	bl	8016bc0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ec1a:	2100      	movs	r1, #0
 800ec1c:	6878      	ldr	r0, [r7, #4]
 800ec1e:	f007 ffcf 	bl	8016bc0 <USBD_LL_StallEP>
}
 800ec22:	bf00      	nop
 800ec24:	3708      	adds	r7, #8
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}

0800ec2a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ec2a:	b580      	push	{r7, lr}
 800ec2c:	b086      	sub	sp, #24
 800ec2e:	af00      	add	r7, sp, #0
 800ec30:	60f8      	str	r0, [r7, #12]
 800ec32:	60b9      	str	r1, [r7, #8]
 800ec34:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ec36:	2300      	movs	r3, #0
 800ec38:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d036      	beq.n	800ecae <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ec44:	6938      	ldr	r0, [r7, #16]
 800ec46:	f000 f836 	bl	800ecb6 <USBD_GetLen>
 800ec4a:	4603      	mov	r3, r0
 800ec4c:	3301      	adds	r3, #1
 800ec4e:	b29b      	uxth	r3, r3
 800ec50:	005b      	lsls	r3, r3, #1
 800ec52:	b29a      	uxth	r2, r3
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ec58:	7dfb      	ldrb	r3, [r7, #23]
 800ec5a:	68ba      	ldr	r2, [r7, #8]
 800ec5c:	4413      	add	r3, r2
 800ec5e:	687a      	ldr	r2, [r7, #4]
 800ec60:	7812      	ldrb	r2, [r2, #0]
 800ec62:	701a      	strb	r2, [r3, #0]
  idx++;
 800ec64:	7dfb      	ldrb	r3, [r7, #23]
 800ec66:	3301      	adds	r3, #1
 800ec68:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ec6a:	7dfb      	ldrb	r3, [r7, #23]
 800ec6c:	68ba      	ldr	r2, [r7, #8]
 800ec6e:	4413      	add	r3, r2
 800ec70:	2203      	movs	r2, #3
 800ec72:	701a      	strb	r2, [r3, #0]
  idx++;
 800ec74:	7dfb      	ldrb	r3, [r7, #23]
 800ec76:	3301      	adds	r3, #1
 800ec78:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ec7a:	e013      	b.n	800eca4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ec7c:	7dfb      	ldrb	r3, [r7, #23]
 800ec7e:	68ba      	ldr	r2, [r7, #8]
 800ec80:	4413      	add	r3, r2
 800ec82:	693a      	ldr	r2, [r7, #16]
 800ec84:	7812      	ldrb	r2, [r2, #0]
 800ec86:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ec88:	693b      	ldr	r3, [r7, #16]
 800ec8a:	3301      	adds	r3, #1
 800ec8c:	613b      	str	r3, [r7, #16]
    idx++;
 800ec8e:	7dfb      	ldrb	r3, [r7, #23]
 800ec90:	3301      	adds	r3, #1
 800ec92:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ec94:	7dfb      	ldrb	r3, [r7, #23]
 800ec96:	68ba      	ldr	r2, [r7, #8]
 800ec98:	4413      	add	r3, r2
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	701a      	strb	r2, [r3, #0]
    idx++;
 800ec9e:	7dfb      	ldrb	r3, [r7, #23]
 800eca0:	3301      	adds	r3, #1
 800eca2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800eca4:	693b      	ldr	r3, [r7, #16]
 800eca6:	781b      	ldrb	r3, [r3, #0]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	d1e7      	bne.n	800ec7c <USBD_GetString+0x52>
 800ecac:	e000      	b.n	800ecb0 <USBD_GetString+0x86>
    return;
 800ecae:	bf00      	nop
  }
}
 800ecb0:	3718      	adds	r7, #24
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bd80      	pop	{r7, pc}

0800ecb6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ecb6:	b480      	push	{r7}
 800ecb8:	b085      	sub	sp, #20
 800ecba:	af00      	add	r7, sp, #0
 800ecbc:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ecc6:	e005      	b.n	800ecd4 <USBD_GetLen+0x1e>
  {
    len++;
 800ecc8:	7bfb      	ldrb	r3, [r7, #15]
 800ecca:	3301      	adds	r3, #1
 800eccc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	3301      	adds	r3, #1
 800ecd2:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	781b      	ldrb	r3, [r3, #0]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d1f5      	bne.n	800ecc8 <USBD_GetLen+0x12>
  }

  return len;
 800ecdc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecde:	4618      	mov	r0, r3
 800ece0:	3714      	adds	r7, #20
 800ece2:	46bd      	mov	sp, r7
 800ece4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece8:	4770      	bx	lr

0800ecea <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ecea:	b580      	push	{r7, lr}
 800ecec:	b084      	sub	sp, #16
 800ecee:	af00      	add	r7, sp, #0
 800ecf0:	60f8      	str	r0, [r7, #12]
 800ecf2:	60b9      	str	r1, [r7, #8]
 800ecf4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	2202      	movs	r2, #2
 800ecfa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	687a      	ldr	r2, [r7, #4]
 800ed02:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	687a      	ldr	r2, [r7, #4]
 800ed08:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ed0a:	687b      	ldr	r3, [r7, #4]
 800ed0c:	68ba      	ldr	r2, [r7, #8]
 800ed0e:	2100      	movs	r1, #0
 800ed10:	68f8      	ldr	r0, [r7, #12]
 800ed12:	f007 ffde 	bl	8016cd2 <USBD_LL_Transmit>

  return USBD_OK;
 800ed16:	2300      	movs	r3, #0
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3710      	adds	r7, #16
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}

0800ed20 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ed20:	b580      	push	{r7, lr}
 800ed22:	b084      	sub	sp, #16
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	60f8      	str	r0, [r7, #12]
 800ed28:	60b9      	str	r1, [r7, #8]
 800ed2a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	68ba      	ldr	r2, [r7, #8]
 800ed30:	2100      	movs	r1, #0
 800ed32:	68f8      	ldr	r0, [r7, #12]
 800ed34:	f007 ffcd 	bl	8016cd2 <USBD_LL_Transmit>

  return USBD_OK;
 800ed38:	2300      	movs	r3, #0
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3710      	adds	r7, #16
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}

0800ed42 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ed42:	b580      	push	{r7, lr}
 800ed44:	b084      	sub	sp, #16
 800ed46:	af00      	add	r7, sp, #0
 800ed48:	60f8      	str	r0, [r7, #12]
 800ed4a:	60b9      	str	r1, [r7, #8]
 800ed4c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	2203      	movs	r2, #3
 800ed52:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	687a      	ldr	r2, [r7, #4]
 800ed5a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	687a      	ldr	r2, [r7, #4]
 800ed62:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	68ba      	ldr	r2, [r7, #8]
 800ed6a:	2100      	movs	r1, #0
 800ed6c:	68f8      	ldr	r0, [r7, #12]
 800ed6e:	f007 ffd1 	bl	8016d14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ed72:	2300      	movs	r3, #0
}
 800ed74:	4618      	mov	r0, r3
 800ed76:	3710      	adds	r7, #16
 800ed78:	46bd      	mov	sp, r7
 800ed7a:	bd80      	pop	{r7, pc}

0800ed7c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b084      	sub	sp, #16
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	60f8      	str	r0, [r7, #12]
 800ed84:	60b9      	str	r1, [r7, #8]
 800ed86:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	68ba      	ldr	r2, [r7, #8]
 800ed8c:	2100      	movs	r1, #0
 800ed8e:	68f8      	ldr	r0, [r7, #12]
 800ed90:	f007 ffc0 	bl	8016d14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ed94:	2300      	movs	r3, #0
}
 800ed96:	4618      	mov	r0, r3
 800ed98:	3710      	adds	r7, #16
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	bd80      	pop	{r7, pc}

0800ed9e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800ed9e:	b580      	push	{r7, lr}
 800eda0:	b082      	sub	sp, #8
 800eda2:	af00      	add	r7, sp, #0
 800eda4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	2204      	movs	r2, #4
 800edaa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800edae:	2300      	movs	r3, #0
 800edb0:	2200      	movs	r2, #0
 800edb2:	2100      	movs	r1, #0
 800edb4:	6878      	ldr	r0, [r7, #4]
 800edb6:	f007 ff8c 	bl	8016cd2 <USBD_LL_Transmit>

  return USBD_OK;
 800edba:	2300      	movs	r3, #0
}
 800edbc:	4618      	mov	r0, r3
 800edbe:	3708      	adds	r7, #8
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}

0800edc4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b082      	sub	sp, #8
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	2205      	movs	r2, #5
 800edd0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800edd4:	2300      	movs	r3, #0
 800edd6:	2200      	movs	r2, #0
 800edd8:	2100      	movs	r1, #0
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f007 ff9a 	bl	8016d14 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ede0:	2300      	movs	r3, #0
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	3708      	adds	r7, #8
 800ede6:	46bd      	mov	sp, r7
 800ede8:	bd80      	pop	{r7, pc}
	...

0800edec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800edec:	b580      	push	{r7, lr}
 800edee:	b084      	sub	sp, #16
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	4603      	mov	r3, r0
 800edf4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800edf6:	79fb      	ldrb	r3, [r7, #7]
 800edf8:	4a08      	ldr	r2, [pc, #32]	; (800ee1c <disk_status+0x30>)
 800edfa:	009b      	lsls	r3, r3, #2
 800edfc:	4413      	add	r3, r2
 800edfe:	685b      	ldr	r3, [r3, #4]
 800ee00:	685b      	ldr	r3, [r3, #4]
 800ee02:	79fa      	ldrb	r2, [r7, #7]
 800ee04:	4905      	ldr	r1, [pc, #20]	; (800ee1c <disk_status+0x30>)
 800ee06:	440a      	add	r2, r1
 800ee08:	7a12      	ldrb	r2, [r2, #8]
 800ee0a:	4610      	mov	r0, r2
 800ee0c:	4798      	blx	r3
 800ee0e:	4603      	mov	r3, r0
 800ee10:	73fb      	strb	r3, [r7, #15]
  return stat;
 800ee12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	3710      	adds	r7, #16
 800ee18:	46bd      	mov	sp, r7
 800ee1a:	bd80      	pop	{r7, pc}
 800ee1c:	200027e0 	.word	0x200027e0

0800ee20 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b084      	sub	sp, #16
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	4603      	mov	r3, r0
 800ee28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ee2e:	79fb      	ldrb	r3, [r7, #7]
 800ee30:	4a0d      	ldr	r2, [pc, #52]	; (800ee68 <disk_initialize+0x48>)
 800ee32:	5cd3      	ldrb	r3, [r2, r3]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d111      	bne.n	800ee5c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800ee38:	79fb      	ldrb	r3, [r7, #7]
 800ee3a:	4a0b      	ldr	r2, [pc, #44]	; (800ee68 <disk_initialize+0x48>)
 800ee3c:	2101      	movs	r1, #1
 800ee3e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ee40:	79fb      	ldrb	r3, [r7, #7]
 800ee42:	4a09      	ldr	r2, [pc, #36]	; (800ee68 <disk_initialize+0x48>)
 800ee44:	009b      	lsls	r3, r3, #2
 800ee46:	4413      	add	r3, r2
 800ee48:	685b      	ldr	r3, [r3, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	79fa      	ldrb	r2, [r7, #7]
 800ee4e:	4906      	ldr	r1, [pc, #24]	; (800ee68 <disk_initialize+0x48>)
 800ee50:	440a      	add	r2, r1
 800ee52:	7a12      	ldrb	r2, [r2, #8]
 800ee54:	4610      	mov	r0, r2
 800ee56:	4798      	blx	r3
 800ee58:	4603      	mov	r3, r0
 800ee5a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800ee5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3710      	adds	r7, #16
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}
 800ee66:	bf00      	nop
 800ee68:	200027e0 	.word	0x200027e0

0800ee6c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ee6c:	b590      	push	{r4, r7, lr}
 800ee6e:	b087      	sub	sp, #28
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	60b9      	str	r1, [r7, #8]
 800ee74:	607a      	str	r2, [r7, #4]
 800ee76:	603b      	str	r3, [r7, #0]
 800ee78:	4603      	mov	r3, r0
 800ee7a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ee7c:	7bfb      	ldrb	r3, [r7, #15]
 800ee7e:	4a0a      	ldr	r2, [pc, #40]	; (800eea8 <disk_read+0x3c>)
 800ee80:	009b      	lsls	r3, r3, #2
 800ee82:	4413      	add	r3, r2
 800ee84:	685b      	ldr	r3, [r3, #4]
 800ee86:	689c      	ldr	r4, [r3, #8]
 800ee88:	7bfb      	ldrb	r3, [r7, #15]
 800ee8a:	4a07      	ldr	r2, [pc, #28]	; (800eea8 <disk_read+0x3c>)
 800ee8c:	4413      	add	r3, r2
 800ee8e:	7a18      	ldrb	r0, [r3, #8]
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	687a      	ldr	r2, [r7, #4]
 800ee94:	68b9      	ldr	r1, [r7, #8]
 800ee96:	47a0      	blx	r4
 800ee98:	4603      	mov	r3, r0
 800ee9a:	75fb      	strb	r3, [r7, #23]
  return res;
 800ee9c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	371c      	adds	r7, #28
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd90      	pop	{r4, r7, pc}
 800eea6:	bf00      	nop
 800eea8:	200027e0 	.word	0x200027e0

0800eeac <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800eeac:	b590      	push	{r4, r7, lr}
 800eeae:	b087      	sub	sp, #28
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	60b9      	str	r1, [r7, #8]
 800eeb4:	607a      	str	r2, [r7, #4]
 800eeb6:	603b      	str	r3, [r7, #0]
 800eeb8:	4603      	mov	r3, r0
 800eeba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800eebc:	7bfb      	ldrb	r3, [r7, #15]
 800eebe:	4a0a      	ldr	r2, [pc, #40]	; (800eee8 <disk_write+0x3c>)
 800eec0:	009b      	lsls	r3, r3, #2
 800eec2:	4413      	add	r3, r2
 800eec4:	685b      	ldr	r3, [r3, #4]
 800eec6:	68dc      	ldr	r4, [r3, #12]
 800eec8:	7bfb      	ldrb	r3, [r7, #15]
 800eeca:	4a07      	ldr	r2, [pc, #28]	; (800eee8 <disk_write+0x3c>)
 800eecc:	4413      	add	r3, r2
 800eece:	7a18      	ldrb	r0, [r3, #8]
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	687a      	ldr	r2, [r7, #4]
 800eed4:	68b9      	ldr	r1, [r7, #8]
 800eed6:	47a0      	blx	r4
 800eed8:	4603      	mov	r3, r0
 800eeda:	75fb      	strb	r3, [r7, #23]
  return res;
 800eedc:	7dfb      	ldrb	r3, [r7, #23]
}
 800eede:	4618      	mov	r0, r3
 800eee0:	371c      	adds	r7, #28
 800eee2:	46bd      	mov	sp, r7
 800eee4:	bd90      	pop	{r4, r7, pc}
 800eee6:	bf00      	nop
 800eee8:	200027e0 	.word	0x200027e0

0800eeec <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b084      	sub	sp, #16
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	4603      	mov	r3, r0
 800eef4:	603a      	str	r2, [r7, #0]
 800eef6:	71fb      	strb	r3, [r7, #7]
 800eef8:	460b      	mov	r3, r1
 800eefa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800eefc:	79fb      	ldrb	r3, [r7, #7]
 800eefe:	4a09      	ldr	r2, [pc, #36]	; (800ef24 <disk_ioctl+0x38>)
 800ef00:	009b      	lsls	r3, r3, #2
 800ef02:	4413      	add	r3, r2
 800ef04:	685b      	ldr	r3, [r3, #4]
 800ef06:	691b      	ldr	r3, [r3, #16]
 800ef08:	79fa      	ldrb	r2, [r7, #7]
 800ef0a:	4906      	ldr	r1, [pc, #24]	; (800ef24 <disk_ioctl+0x38>)
 800ef0c:	440a      	add	r2, r1
 800ef0e:	7a10      	ldrb	r0, [r2, #8]
 800ef10:	79b9      	ldrb	r1, [r7, #6]
 800ef12:	683a      	ldr	r2, [r7, #0]
 800ef14:	4798      	blx	r3
 800ef16:	4603      	mov	r3, r0
 800ef18:	73fb      	strb	r3, [r7, #15]
  return res;
 800ef1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef1c:	4618      	mov	r0, r3
 800ef1e:	3710      	adds	r7, #16
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}
 800ef24:	200027e0 	.word	0x200027e0

0800ef28 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800ef28:	b480      	push	{r7}
 800ef2a:	b085      	sub	sp, #20
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	3301      	adds	r3, #1
 800ef34:	781b      	ldrb	r3, [r3, #0]
 800ef36:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800ef38:	89fb      	ldrh	r3, [r7, #14]
 800ef3a:	021b      	lsls	r3, r3, #8
 800ef3c:	b21a      	sxth	r2, r3
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	781b      	ldrb	r3, [r3, #0]
 800ef42:	b21b      	sxth	r3, r3
 800ef44:	4313      	orrs	r3, r2
 800ef46:	b21b      	sxth	r3, r3
 800ef48:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ef4a:	89fb      	ldrh	r3, [r7, #14]
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3714      	adds	r7, #20
 800ef50:	46bd      	mov	sp, r7
 800ef52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef56:	4770      	bx	lr

0800ef58 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800ef58:	b480      	push	{r7}
 800ef5a:	b085      	sub	sp, #20
 800ef5c:	af00      	add	r7, sp, #0
 800ef5e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	3303      	adds	r3, #3
 800ef64:	781b      	ldrb	r3, [r3, #0]
 800ef66:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	021b      	lsls	r3, r3, #8
 800ef6c:	687a      	ldr	r2, [r7, #4]
 800ef6e:	3202      	adds	r2, #2
 800ef70:	7812      	ldrb	r2, [r2, #0]
 800ef72:	4313      	orrs	r3, r2
 800ef74:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	021b      	lsls	r3, r3, #8
 800ef7a:	687a      	ldr	r2, [r7, #4]
 800ef7c:	3201      	adds	r2, #1
 800ef7e:	7812      	ldrb	r2, [r2, #0]
 800ef80:	4313      	orrs	r3, r2
 800ef82:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ef84:	68fb      	ldr	r3, [r7, #12]
 800ef86:	021b      	lsls	r3, r3, #8
 800ef88:	687a      	ldr	r2, [r7, #4]
 800ef8a:	7812      	ldrb	r2, [r2, #0]
 800ef8c:	4313      	orrs	r3, r2
 800ef8e:	60fb      	str	r3, [r7, #12]
	return rv;
 800ef90:	68fb      	ldr	r3, [r7, #12]
}
 800ef92:	4618      	mov	r0, r3
 800ef94:	3714      	adds	r7, #20
 800ef96:	46bd      	mov	sp, r7
 800ef98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9c:	4770      	bx	lr

0800ef9e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ef9e:	b480      	push	{r7}
 800efa0:	b083      	sub	sp, #12
 800efa2:	af00      	add	r7, sp, #0
 800efa4:	6078      	str	r0, [r7, #4]
 800efa6:	460b      	mov	r3, r1
 800efa8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	1c5a      	adds	r2, r3, #1
 800efae:	607a      	str	r2, [r7, #4]
 800efb0:	887a      	ldrh	r2, [r7, #2]
 800efb2:	b2d2      	uxtb	r2, r2
 800efb4:	701a      	strb	r2, [r3, #0]
 800efb6:	887b      	ldrh	r3, [r7, #2]
 800efb8:	0a1b      	lsrs	r3, r3, #8
 800efba:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	1c5a      	adds	r2, r3, #1
 800efc0:	607a      	str	r2, [r7, #4]
 800efc2:	887a      	ldrh	r2, [r7, #2]
 800efc4:	b2d2      	uxtb	r2, r2
 800efc6:	701a      	strb	r2, [r3, #0]
}
 800efc8:	bf00      	nop
 800efca:	370c      	adds	r7, #12
 800efcc:	46bd      	mov	sp, r7
 800efce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd2:	4770      	bx	lr

0800efd4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800efd4:	b480      	push	{r7}
 800efd6:	b083      	sub	sp, #12
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
 800efdc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	1c5a      	adds	r2, r3, #1
 800efe2:	607a      	str	r2, [r7, #4]
 800efe4:	683a      	ldr	r2, [r7, #0]
 800efe6:	b2d2      	uxtb	r2, r2
 800efe8:	701a      	strb	r2, [r3, #0]
 800efea:	683b      	ldr	r3, [r7, #0]
 800efec:	0a1b      	lsrs	r3, r3, #8
 800efee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	1c5a      	adds	r2, r3, #1
 800eff4:	607a      	str	r2, [r7, #4]
 800eff6:	683a      	ldr	r2, [r7, #0]
 800eff8:	b2d2      	uxtb	r2, r2
 800effa:	701a      	strb	r2, [r3, #0]
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	0a1b      	lsrs	r3, r3, #8
 800f000:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	1c5a      	adds	r2, r3, #1
 800f006:	607a      	str	r2, [r7, #4]
 800f008:	683a      	ldr	r2, [r7, #0]
 800f00a:	b2d2      	uxtb	r2, r2
 800f00c:	701a      	strb	r2, [r3, #0]
 800f00e:	683b      	ldr	r3, [r7, #0]
 800f010:	0a1b      	lsrs	r3, r3, #8
 800f012:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	1c5a      	adds	r2, r3, #1
 800f018:	607a      	str	r2, [r7, #4]
 800f01a:	683a      	ldr	r2, [r7, #0]
 800f01c:	b2d2      	uxtb	r2, r2
 800f01e:	701a      	strb	r2, [r3, #0]
}
 800f020:	bf00      	nop
 800f022:	370c      	adds	r7, #12
 800f024:	46bd      	mov	sp, r7
 800f026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f02a:	4770      	bx	lr

0800f02c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f02c:	b480      	push	{r7}
 800f02e:	b087      	sub	sp, #28
 800f030:	af00      	add	r7, sp, #0
 800f032:	60f8      	str	r0, [r7, #12]
 800f034:	60b9      	str	r1, [r7, #8]
 800f036:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d00d      	beq.n	800f062 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f046:	693a      	ldr	r2, [r7, #16]
 800f048:	1c53      	adds	r3, r2, #1
 800f04a:	613b      	str	r3, [r7, #16]
 800f04c:	697b      	ldr	r3, [r7, #20]
 800f04e:	1c59      	adds	r1, r3, #1
 800f050:	6179      	str	r1, [r7, #20]
 800f052:	7812      	ldrb	r2, [r2, #0]
 800f054:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	3b01      	subs	r3, #1
 800f05a:	607b      	str	r3, [r7, #4]
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	2b00      	cmp	r3, #0
 800f060:	d1f1      	bne.n	800f046 <mem_cpy+0x1a>
	}
}
 800f062:	bf00      	nop
 800f064:	371c      	adds	r7, #28
 800f066:	46bd      	mov	sp, r7
 800f068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06c:	4770      	bx	lr

0800f06e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f06e:	b480      	push	{r7}
 800f070:	b087      	sub	sp, #28
 800f072:	af00      	add	r7, sp, #0
 800f074:	60f8      	str	r0, [r7, #12]
 800f076:	60b9      	str	r1, [r7, #8]
 800f078:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f07a:	68fb      	ldr	r3, [r7, #12]
 800f07c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f07e:	697b      	ldr	r3, [r7, #20]
 800f080:	1c5a      	adds	r2, r3, #1
 800f082:	617a      	str	r2, [r7, #20]
 800f084:	68ba      	ldr	r2, [r7, #8]
 800f086:	b2d2      	uxtb	r2, r2
 800f088:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	3b01      	subs	r3, #1
 800f08e:	607b      	str	r3, [r7, #4]
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d1f3      	bne.n	800f07e <mem_set+0x10>
}
 800f096:	bf00      	nop
 800f098:	bf00      	nop
 800f09a:	371c      	adds	r7, #28
 800f09c:	46bd      	mov	sp, r7
 800f09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a2:	4770      	bx	lr

0800f0a4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f0a4:	b480      	push	{r7}
 800f0a6:	b089      	sub	sp, #36	; 0x24
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	60f8      	str	r0, [r7, #12]
 800f0ac:	60b9      	str	r1, [r7, #8]
 800f0ae:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	61fb      	str	r3, [r7, #28]
 800f0b4:	68bb      	ldr	r3, [r7, #8]
 800f0b6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f0bc:	69fb      	ldr	r3, [r7, #28]
 800f0be:	1c5a      	adds	r2, r3, #1
 800f0c0:	61fa      	str	r2, [r7, #28]
 800f0c2:	781b      	ldrb	r3, [r3, #0]
 800f0c4:	4619      	mov	r1, r3
 800f0c6:	69bb      	ldr	r3, [r7, #24]
 800f0c8:	1c5a      	adds	r2, r3, #1
 800f0ca:	61ba      	str	r2, [r7, #24]
 800f0cc:	781b      	ldrb	r3, [r3, #0]
 800f0ce:	1acb      	subs	r3, r1, r3
 800f0d0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	3b01      	subs	r3, #1
 800f0d6:	607b      	str	r3, [r7, #4]
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d002      	beq.n	800f0e4 <mem_cmp+0x40>
 800f0de:	697b      	ldr	r3, [r7, #20]
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d0eb      	beq.n	800f0bc <mem_cmp+0x18>

	return r;
 800f0e4:	697b      	ldr	r3, [r7, #20]
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3724      	adds	r7, #36	; 0x24
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f0:	4770      	bx	lr

0800f0f2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f0f2:	b480      	push	{r7}
 800f0f4:	b083      	sub	sp, #12
 800f0f6:	af00      	add	r7, sp, #0
 800f0f8:	6078      	str	r0, [r7, #4]
 800f0fa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f0fc:	e002      	b.n	800f104 <chk_chr+0x12>
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	3301      	adds	r3, #1
 800f102:	607b      	str	r3, [r7, #4]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	781b      	ldrb	r3, [r3, #0]
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d005      	beq.n	800f118 <chk_chr+0x26>
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	781b      	ldrb	r3, [r3, #0]
 800f110:	461a      	mov	r2, r3
 800f112:	683b      	ldr	r3, [r7, #0]
 800f114:	4293      	cmp	r3, r2
 800f116:	d1f2      	bne.n	800f0fe <chk_chr+0xc>
	return *str;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	781b      	ldrb	r3, [r3, #0]
}
 800f11c:	4618      	mov	r0, r3
 800f11e:	370c      	adds	r7, #12
 800f120:	46bd      	mov	sp, r7
 800f122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f126:	4770      	bx	lr

0800f128 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b082      	sub	sp, #8
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d009      	beq.n	800f14a <lock_fs+0x22>
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	695b      	ldr	r3, [r3, #20]
 800f13a:	4618      	mov	r0, r3
 800f13c:	f003 f98d 	bl	801245a <ff_req_grant>
 800f140:	4603      	mov	r3, r0
 800f142:	2b00      	cmp	r3, #0
 800f144:	d001      	beq.n	800f14a <lock_fs+0x22>
 800f146:	2301      	movs	r3, #1
 800f148:	e000      	b.n	800f14c <lock_fs+0x24>
 800f14a:	2300      	movs	r3, #0
}
 800f14c:	4618      	mov	r0, r3
 800f14e:	3708      	adds	r7, #8
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}

0800f154 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800f154:	b580      	push	{r7, lr}
 800f156:	b082      	sub	sp, #8
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
 800f15c:	460b      	mov	r3, r1
 800f15e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d00d      	beq.n	800f182 <unlock_fs+0x2e>
 800f166:	78fb      	ldrb	r3, [r7, #3]
 800f168:	2b0c      	cmp	r3, #12
 800f16a:	d00a      	beq.n	800f182 <unlock_fs+0x2e>
 800f16c:	78fb      	ldrb	r3, [r7, #3]
 800f16e:	2b0b      	cmp	r3, #11
 800f170:	d007      	beq.n	800f182 <unlock_fs+0x2e>
 800f172:	78fb      	ldrb	r3, [r7, #3]
 800f174:	2b0f      	cmp	r3, #15
 800f176:	d004      	beq.n	800f182 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	695b      	ldr	r3, [r3, #20]
 800f17c:	4618      	mov	r0, r3
 800f17e:	f003 f981 	bl	8012484 <ff_rel_grant>
	}
}
 800f182:	bf00      	nop
 800f184:	3708      	adds	r7, #8
 800f186:	46bd      	mov	sp, r7
 800f188:	bd80      	pop	{r7, pc}
	...

0800f18c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f18c:	b480      	push	{r7}
 800f18e:	b085      	sub	sp, #20
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
 800f194:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f196:	2300      	movs	r3, #0
 800f198:	60bb      	str	r3, [r7, #8]
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	60fb      	str	r3, [r7, #12]
 800f19e:	e029      	b.n	800f1f4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800f1a0:	4a27      	ldr	r2, [pc, #156]	; (800f240 <chk_lock+0xb4>)
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	011b      	lsls	r3, r3, #4
 800f1a6:	4413      	add	r3, r2
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d01d      	beq.n	800f1ea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f1ae:	4a24      	ldr	r2, [pc, #144]	; (800f240 <chk_lock+0xb4>)
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	011b      	lsls	r3, r3, #4
 800f1b4:	4413      	add	r3, r2
 800f1b6:	681a      	ldr	r2, [r3, #0]
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	429a      	cmp	r2, r3
 800f1be:	d116      	bne.n	800f1ee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800f1c0:	4a1f      	ldr	r2, [pc, #124]	; (800f240 <chk_lock+0xb4>)
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	011b      	lsls	r3, r3, #4
 800f1c6:	4413      	add	r3, r2
 800f1c8:	3304      	adds	r3, #4
 800f1ca:	681a      	ldr	r2, [r3, #0]
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800f1d0:	429a      	cmp	r2, r3
 800f1d2:	d10c      	bne.n	800f1ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f1d4:	4a1a      	ldr	r2, [pc, #104]	; (800f240 <chk_lock+0xb4>)
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	011b      	lsls	r3, r3, #4
 800f1da:	4413      	add	r3, r2
 800f1dc:	3308      	adds	r3, #8
 800f1de:	681a      	ldr	r2, [r3, #0]
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800f1e4:	429a      	cmp	r2, r3
 800f1e6:	d102      	bne.n	800f1ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800f1e8:	e007      	b.n	800f1fa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	3301      	adds	r3, #1
 800f1f2:	60fb      	str	r3, [r7, #12]
 800f1f4:	68fb      	ldr	r3, [r7, #12]
 800f1f6:	2b01      	cmp	r3, #1
 800f1f8:	d9d2      	bls.n	800f1a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	2b02      	cmp	r3, #2
 800f1fe:	d109      	bne.n	800f214 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	2b00      	cmp	r3, #0
 800f204:	d102      	bne.n	800f20c <chk_lock+0x80>
 800f206:	683b      	ldr	r3, [r7, #0]
 800f208:	2b02      	cmp	r3, #2
 800f20a:	d101      	bne.n	800f210 <chk_lock+0x84>
 800f20c:	2300      	movs	r3, #0
 800f20e:	e010      	b.n	800f232 <chk_lock+0xa6>
 800f210:	2312      	movs	r3, #18
 800f212:	e00e      	b.n	800f232 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	2b00      	cmp	r3, #0
 800f218:	d108      	bne.n	800f22c <chk_lock+0xa0>
 800f21a:	4a09      	ldr	r2, [pc, #36]	; (800f240 <chk_lock+0xb4>)
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	011b      	lsls	r3, r3, #4
 800f220:	4413      	add	r3, r2
 800f222:	330c      	adds	r3, #12
 800f224:	881b      	ldrh	r3, [r3, #0]
 800f226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f22a:	d101      	bne.n	800f230 <chk_lock+0xa4>
 800f22c:	2310      	movs	r3, #16
 800f22e:	e000      	b.n	800f232 <chk_lock+0xa6>
 800f230:	2300      	movs	r3, #0
}
 800f232:	4618      	mov	r0, r3
 800f234:	3714      	adds	r7, #20
 800f236:	46bd      	mov	sp, r7
 800f238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f23c:	4770      	bx	lr
 800f23e:	bf00      	nop
 800f240:	200027c0 	.word	0x200027c0

0800f244 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800f244:	b480      	push	{r7}
 800f246:	b083      	sub	sp, #12
 800f248:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f24a:	2300      	movs	r3, #0
 800f24c:	607b      	str	r3, [r7, #4]
 800f24e:	e002      	b.n	800f256 <enq_lock+0x12>
 800f250:	687b      	ldr	r3, [r7, #4]
 800f252:	3301      	adds	r3, #1
 800f254:	607b      	str	r3, [r7, #4]
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2b01      	cmp	r3, #1
 800f25a:	d806      	bhi.n	800f26a <enq_lock+0x26>
 800f25c:	4a09      	ldr	r2, [pc, #36]	; (800f284 <enq_lock+0x40>)
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	011b      	lsls	r3, r3, #4
 800f262:	4413      	add	r3, r2
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d1f2      	bne.n	800f250 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2b02      	cmp	r3, #2
 800f26e:	bf14      	ite	ne
 800f270:	2301      	movne	r3, #1
 800f272:	2300      	moveq	r3, #0
 800f274:	b2db      	uxtb	r3, r3
}
 800f276:	4618      	mov	r0, r3
 800f278:	370c      	adds	r7, #12
 800f27a:	46bd      	mov	sp, r7
 800f27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f280:	4770      	bx	lr
 800f282:	bf00      	nop
 800f284:	200027c0 	.word	0x200027c0

0800f288 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800f288:	b480      	push	{r7}
 800f28a:	b085      	sub	sp, #20
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
 800f290:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f292:	2300      	movs	r3, #0
 800f294:	60fb      	str	r3, [r7, #12]
 800f296:	e01f      	b.n	800f2d8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800f298:	4a41      	ldr	r2, [pc, #260]	; (800f3a0 <inc_lock+0x118>)
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	011b      	lsls	r3, r3, #4
 800f29e:	4413      	add	r3, r2
 800f2a0:	681a      	ldr	r2, [r3, #0]
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	681b      	ldr	r3, [r3, #0]
 800f2a6:	429a      	cmp	r2, r3
 800f2a8:	d113      	bne.n	800f2d2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800f2aa:	4a3d      	ldr	r2, [pc, #244]	; (800f3a0 <inc_lock+0x118>)
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	011b      	lsls	r3, r3, #4
 800f2b0:	4413      	add	r3, r2
 800f2b2:	3304      	adds	r3, #4
 800f2b4:	681a      	ldr	r2, [r3, #0]
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	d109      	bne.n	800f2d2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800f2be:	4a38      	ldr	r2, [pc, #224]	; (800f3a0 <inc_lock+0x118>)
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	011b      	lsls	r3, r3, #4
 800f2c4:	4413      	add	r3, r2
 800f2c6:	3308      	adds	r3, #8
 800f2c8:	681a      	ldr	r2, [r3, #0]
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800f2ce:	429a      	cmp	r2, r3
 800f2d0:	d006      	beq.n	800f2e0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800f2d2:	68fb      	ldr	r3, [r7, #12]
 800f2d4:	3301      	adds	r3, #1
 800f2d6:	60fb      	str	r3, [r7, #12]
 800f2d8:	68fb      	ldr	r3, [r7, #12]
 800f2da:	2b01      	cmp	r3, #1
 800f2dc:	d9dc      	bls.n	800f298 <inc_lock+0x10>
 800f2de:	e000      	b.n	800f2e2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800f2e0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800f2e2:	68fb      	ldr	r3, [r7, #12]
 800f2e4:	2b02      	cmp	r3, #2
 800f2e6:	d132      	bne.n	800f34e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800f2e8:	2300      	movs	r3, #0
 800f2ea:	60fb      	str	r3, [r7, #12]
 800f2ec:	e002      	b.n	800f2f4 <inc_lock+0x6c>
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	3301      	adds	r3, #1
 800f2f2:	60fb      	str	r3, [r7, #12]
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	2b01      	cmp	r3, #1
 800f2f8:	d806      	bhi.n	800f308 <inc_lock+0x80>
 800f2fa:	4a29      	ldr	r2, [pc, #164]	; (800f3a0 <inc_lock+0x118>)
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	011b      	lsls	r3, r3, #4
 800f300:	4413      	add	r3, r2
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d1f2      	bne.n	800f2ee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	2b02      	cmp	r3, #2
 800f30c:	d101      	bne.n	800f312 <inc_lock+0x8a>
 800f30e:	2300      	movs	r3, #0
 800f310:	e040      	b.n	800f394 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681a      	ldr	r2, [r3, #0]
 800f316:	4922      	ldr	r1, [pc, #136]	; (800f3a0 <inc_lock+0x118>)
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	011b      	lsls	r3, r3, #4
 800f31c:	440b      	add	r3, r1
 800f31e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	689a      	ldr	r2, [r3, #8]
 800f324:	491e      	ldr	r1, [pc, #120]	; (800f3a0 <inc_lock+0x118>)
 800f326:	68fb      	ldr	r3, [r7, #12]
 800f328:	011b      	lsls	r3, r3, #4
 800f32a:	440b      	add	r3, r1
 800f32c:	3304      	adds	r3, #4
 800f32e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	695a      	ldr	r2, [r3, #20]
 800f334:	491a      	ldr	r1, [pc, #104]	; (800f3a0 <inc_lock+0x118>)
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	011b      	lsls	r3, r3, #4
 800f33a:	440b      	add	r3, r1
 800f33c:	3308      	adds	r3, #8
 800f33e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800f340:	4a17      	ldr	r2, [pc, #92]	; (800f3a0 <inc_lock+0x118>)
 800f342:	68fb      	ldr	r3, [r7, #12]
 800f344:	011b      	lsls	r3, r3, #4
 800f346:	4413      	add	r3, r2
 800f348:	330c      	adds	r3, #12
 800f34a:	2200      	movs	r2, #0
 800f34c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800f34e:	683b      	ldr	r3, [r7, #0]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d009      	beq.n	800f368 <inc_lock+0xe0>
 800f354:	4a12      	ldr	r2, [pc, #72]	; (800f3a0 <inc_lock+0x118>)
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	011b      	lsls	r3, r3, #4
 800f35a:	4413      	add	r3, r2
 800f35c:	330c      	adds	r3, #12
 800f35e:	881b      	ldrh	r3, [r3, #0]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d001      	beq.n	800f368 <inc_lock+0xe0>
 800f364:	2300      	movs	r3, #0
 800f366:	e015      	b.n	800f394 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d108      	bne.n	800f380 <inc_lock+0xf8>
 800f36e:	4a0c      	ldr	r2, [pc, #48]	; (800f3a0 <inc_lock+0x118>)
 800f370:	68fb      	ldr	r3, [r7, #12]
 800f372:	011b      	lsls	r3, r3, #4
 800f374:	4413      	add	r3, r2
 800f376:	330c      	adds	r3, #12
 800f378:	881b      	ldrh	r3, [r3, #0]
 800f37a:	3301      	adds	r3, #1
 800f37c:	b29a      	uxth	r2, r3
 800f37e:	e001      	b.n	800f384 <inc_lock+0xfc>
 800f380:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f384:	4906      	ldr	r1, [pc, #24]	; (800f3a0 <inc_lock+0x118>)
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	011b      	lsls	r3, r3, #4
 800f38a:	440b      	add	r3, r1
 800f38c:	330c      	adds	r3, #12
 800f38e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	3301      	adds	r3, #1
}
 800f394:	4618      	mov	r0, r3
 800f396:	3714      	adds	r7, #20
 800f398:	46bd      	mov	sp, r7
 800f39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f39e:	4770      	bx	lr
 800f3a0:	200027c0 	.word	0x200027c0

0800f3a4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800f3a4:	b480      	push	{r7}
 800f3a6:	b085      	sub	sp, #20
 800f3a8:	af00      	add	r7, sp, #0
 800f3aa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	3b01      	subs	r3, #1
 800f3b0:	607b      	str	r3, [r7, #4]
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2b01      	cmp	r3, #1
 800f3b6:	d825      	bhi.n	800f404 <dec_lock+0x60>
		n = Files[i].ctr;
 800f3b8:	4a17      	ldr	r2, [pc, #92]	; (800f418 <dec_lock+0x74>)
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	011b      	lsls	r3, r3, #4
 800f3be:	4413      	add	r3, r2
 800f3c0:	330c      	adds	r3, #12
 800f3c2:	881b      	ldrh	r3, [r3, #0]
 800f3c4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800f3c6:	89fb      	ldrh	r3, [r7, #14]
 800f3c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f3cc:	d101      	bne.n	800f3d2 <dec_lock+0x2e>
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800f3d2:	89fb      	ldrh	r3, [r7, #14]
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d002      	beq.n	800f3de <dec_lock+0x3a>
 800f3d8:	89fb      	ldrh	r3, [r7, #14]
 800f3da:	3b01      	subs	r3, #1
 800f3dc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800f3de:	4a0e      	ldr	r2, [pc, #56]	; (800f418 <dec_lock+0x74>)
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	011b      	lsls	r3, r3, #4
 800f3e4:	4413      	add	r3, r2
 800f3e6:	330c      	adds	r3, #12
 800f3e8:	89fa      	ldrh	r2, [r7, #14]
 800f3ea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800f3ec:	89fb      	ldrh	r3, [r7, #14]
 800f3ee:	2b00      	cmp	r3, #0
 800f3f0:	d105      	bne.n	800f3fe <dec_lock+0x5a>
 800f3f2:	4a09      	ldr	r2, [pc, #36]	; (800f418 <dec_lock+0x74>)
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	011b      	lsls	r3, r3, #4
 800f3f8:	4413      	add	r3, r2
 800f3fa:	2200      	movs	r2, #0
 800f3fc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800f3fe:	2300      	movs	r3, #0
 800f400:	737b      	strb	r3, [r7, #13]
 800f402:	e001      	b.n	800f408 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800f404:	2302      	movs	r3, #2
 800f406:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800f408:	7b7b      	ldrb	r3, [r7, #13]
}
 800f40a:	4618      	mov	r0, r3
 800f40c:	3714      	adds	r7, #20
 800f40e:	46bd      	mov	sp, r7
 800f410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f414:	4770      	bx	lr
 800f416:	bf00      	nop
 800f418:	200027c0 	.word	0x200027c0

0800f41c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800f41c:	b480      	push	{r7}
 800f41e:	b085      	sub	sp, #20
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800f424:	2300      	movs	r3, #0
 800f426:	60fb      	str	r3, [r7, #12]
 800f428:	e010      	b.n	800f44c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800f42a:	4a0d      	ldr	r2, [pc, #52]	; (800f460 <clear_lock+0x44>)
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	011b      	lsls	r3, r3, #4
 800f430:	4413      	add	r3, r2
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	687a      	ldr	r2, [r7, #4]
 800f436:	429a      	cmp	r2, r3
 800f438:	d105      	bne.n	800f446 <clear_lock+0x2a>
 800f43a:	4a09      	ldr	r2, [pc, #36]	; (800f460 <clear_lock+0x44>)
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	011b      	lsls	r3, r3, #4
 800f440:	4413      	add	r3, r2
 800f442:	2200      	movs	r2, #0
 800f444:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800f446:	68fb      	ldr	r3, [r7, #12]
 800f448:	3301      	adds	r3, #1
 800f44a:	60fb      	str	r3, [r7, #12]
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	2b01      	cmp	r3, #1
 800f450:	d9eb      	bls.n	800f42a <clear_lock+0xe>
	}
}
 800f452:	bf00      	nop
 800f454:	bf00      	nop
 800f456:	3714      	adds	r7, #20
 800f458:	46bd      	mov	sp, r7
 800f45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45e:	4770      	bx	lr
 800f460:	200027c0 	.word	0x200027c0

0800f464 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800f464:	b580      	push	{r7, lr}
 800f466:	b086      	sub	sp, #24
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800f46c:	2300      	movs	r3, #0
 800f46e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	78db      	ldrb	r3, [r3, #3]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d034      	beq.n	800f4e2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f47c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	7858      	ldrb	r0, [r3, #1]
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f488:	2301      	movs	r3, #1
 800f48a:	697a      	ldr	r2, [r7, #20]
 800f48c:	f7ff fd0e 	bl	800eeac <disk_write>
 800f490:	4603      	mov	r3, r0
 800f492:	2b00      	cmp	r3, #0
 800f494:	d002      	beq.n	800f49c <sync_window+0x38>
			res = FR_DISK_ERR;
 800f496:	2301      	movs	r3, #1
 800f498:	73fb      	strb	r3, [r7, #15]
 800f49a:	e022      	b.n	800f4e2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	2200      	movs	r2, #0
 800f4a0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4a6:	697a      	ldr	r2, [r7, #20]
 800f4a8:	1ad2      	subs	r2, r2, r3
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4ae:	429a      	cmp	r2, r3
 800f4b0:	d217      	bcs.n	800f4e2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	789b      	ldrb	r3, [r3, #2]
 800f4b6:	613b      	str	r3, [r7, #16]
 800f4b8:	e010      	b.n	800f4dc <sync_window+0x78>
					wsect += fs->fsize;
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4be:	697a      	ldr	r2, [r7, #20]
 800f4c0:	4413      	add	r3, r2
 800f4c2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	7858      	ldrb	r0, [r3, #1]
 800f4c8:	687b      	ldr	r3, [r7, #4]
 800f4ca:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f4ce:	2301      	movs	r3, #1
 800f4d0:	697a      	ldr	r2, [r7, #20]
 800f4d2:	f7ff fceb 	bl	800eeac <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	3b01      	subs	r3, #1
 800f4da:	613b      	str	r3, [r7, #16]
 800f4dc:	693b      	ldr	r3, [r7, #16]
 800f4de:	2b01      	cmp	r3, #1
 800f4e0:	d8eb      	bhi.n	800f4ba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800f4e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	3718      	adds	r7, #24
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}

0800f4ec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b084      	sub	sp, #16
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4fe:	683a      	ldr	r2, [r7, #0]
 800f500:	429a      	cmp	r2, r3
 800f502:	d01b      	beq.n	800f53c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800f504:	6878      	ldr	r0, [r7, #4]
 800f506:	f7ff ffad 	bl	800f464 <sync_window>
 800f50a:	4603      	mov	r3, r0
 800f50c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800f50e:	7bfb      	ldrb	r3, [r7, #15]
 800f510:	2b00      	cmp	r3, #0
 800f512:	d113      	bne.n	800f53c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	7858      	ldrb	r0, [r3, #1]
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f51e:	2301      	movs	r3, #1
 800f520:	683a      	ldr	r2, [r7, #0]
 800f522:	f7ff fca3 	bl	800ee6c <disk_read>
 800f526:	4603      	mov	r3, r0
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d004      	beq.n	800f536 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800f52c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f530:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800f532:	2301      	movs	r3, #1
 800f534:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	683a      	ldr	r2, [r7, #0]
 800f53a:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800f53c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f53e:	4618      	mov	r0, r3
 800f540:	3710      	adds	r7, #16
 800f542:	46bd      	mov	sp, r7
 800f544:	bd80      	pop	{r7, pc}
	...

0800f548 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800f548:	b580      	push	{r7, lr}
 800f54a:	b084      	sub	sp, #16
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800f550:	6878      	ldr	r0, [r7, #4]
 800f552:	f7ff ff87 	bl	800f464 <sync_window>
 800f556:	4603      	mov	r3, r0
 800f558:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800f55a:	7bfb      	ldrb	r3, [r7, #15]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d159      	bne.n	800f614 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	781b      	ldrb	r3, [r3, #0]
 800f564:	2b03      	cmp	r3, #3
 800f566:	d149      	bne.n	800f5fc <sync_fs+0xb4>
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	791b      	ldrb	r3, [r3, #4]
 800f56c:	2b01      	cmp	r3, #1
 800f56e:	d145      	bne.n	800f5fc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	899b      	ldrh	r3, [r3, #12]
 800f57a:	461a      	mov	r2, r3
 800f57c:	2100      	movs	r1, #0
 800f57e:	f7ff fd76 	bl	800f06e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	333c      	adds	r3, #60	; 0x3c
 800f586:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f58a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800f58e:	4618      	mov	r0, r3
 800f590:	f7ff fd05 	bl	800ef9e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	333c      	adds	r3, #60	; 0x3c
 800f598:	4921      	ldr	r1, [pc, #132]	; (800f620 <sync_fs+0xd8>)
 800f59a:	4618      	mov	r0, r3
 800f59c:	f7ff fd1a 	bl	800efd4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	333c      	adds	r3, #60	; 0x3c
 800f5a4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f5a8:	491e      	ldr	r1, [pc, #120]	; (800f624 <sync_fs+0xdc>)
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f7ff fd12 	bl	800efd4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	333c      	adds	r3, #60	; 0x3c
 800f5b4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	69db      	ldr	r3, [r3, #28]
 800f5bc:	4619      	mov	r1, r3
 800f5be:	4610      	mov	r0, r2
 800f5c0:	f7ff fd08 	bl	800efd4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	333c      	adds	r3, #60	; 0x3c
 800f5c8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	699b      	ldr	r3, [r3, #24]
 800f5d0:	4619      	mov	r1, r3
 800f5d2:	4610      	mov	r0, r2
 800f5d4:	f7ff fcfe 	bl	800efd4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5dc:	1c5a      	adds	r2, r3, #1
 800f5de:	687b      	ldr	r3, [r7, #4]
 800f5e0:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	7858      	ldrb	r0, [r3, #1]
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	f7ff fc5b 	bl	800eeac <disk_write>
			fs->fsi_flag = 0;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2200      	movs	r2, #0
 800f5fa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	785b      	ldrb	r3, [r3, #1]
 800f600:	2200      	movs	r2, #0
 800f602:	2100      	movs	r1, #0
 800f604:	4618      	mov	r0, r3
 800f606:	f7ff fc71 	bl	800eeec <disk_ioctl>
 800f60a:	4603      	mov	r3, r0
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d001      	beq.n	800f614 <sync_fs+0xcc>
 800f610:	2301      	movs	r3, #1
 800f612:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800f614:	7bfb      	ldrb	r3, [r7, #15]
}
 800f616:	4618      	mov	r0, r3
 800f618:	3710      	adds	r7, #16
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd80      	pop	{r7, pc}
 800f61e:	bf00      	nop
 800f620:	41615252 	.word	0x41615252
 800f624:	61417272 	.word	0x61417272

0800f628 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800f628:	b480      	push	{r7}
 800f62a:	b083      	sub	sp, #12
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800f632:	683b      	ldr	r3, [r7, #0]
 800f634:	3b02      	subs	r3, #2
 800f636:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	6a1b      	ldr	r3, [r3, #32]
 800f63c:	3b02      	subs	r3, #2
 800f63e:	683a      	ldr	r2, [r7, #0]
 800f640:	429a      	cmp	r2, r3
 800f642:	d301      	bcc.n	800f648 <clust2sect+0x20>
 800f644:	2300      	movs	r3, #0
 800f646:	e008      	b.n	800f65a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	895b      	ldrh	r3, [r3, #10]
 800f64c:	461a      	mov	r2, r3
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	fb03 f202 	mul.w	r2, r3, r2
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f658:	4413      	add	r3, r2
}
 800f65a:	4618      	mov	r0, r3
 800f65c:	370c      	adds	r7, #12
 800f65e:	46bd      	mov	sp, r7
 800f660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f664:	4770      	bx	lr

0800f666 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800f666:	b580      	push	{r7, lr}
 800f668:	b086      	sub	sp, #24
 800f66a:	af00      	add	r7, sp, #0
 800f66c:	6078      	str	r0, [r7, #4]
 800f66e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	681b      	ldr	r3, [r3, #0]
 800f674:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800f676:	683b      	ldr	r3, [r7, #0]
 800f678:	2b01      	cmp	r3, #1
 800f67a:	d904      	bls.n	800f686 <get_fat+0x20>
 800f67c:	693b      	ldr	r3, [r7, #16]
 800f67e:	6a1b      	ldr	r3, [r3, #32]
 800f680:	683a      	ldr	r2, [r7, #0]
 800f682:	429a      	cmp	r2, r3
 800f684:	d302      	bcc.n	800f68c <get_fat+0x26>
		val = 1;	/* Internal error */
 800f686:	2301      	movs	r3, #1
 800f688:	617b      	str	r3, [r7, #20]
 800f68a:	e0bb      	b.n	800f804 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800f68c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f690:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800f692:	693b      	ldr	r3, [r7, #16]
 800f694:	781b      	ldrb	r3, [r3, #0]
 800f696:	2b03      	cmp	r3, #3
 800f698:	f000 8083 	beq.w	800f7a2 <get_fat+0x13c>
 800f69c:	2b03      	cmp	r3, #3
 800f69e:	f300 80a7 	bgt.w	800f7f0 <get_fat+0x18a>
 800f6a2:	2b01      	cmp	r3, #1
 800f6a4:	d002      	beq.n	800f6ac <get_fat+0x46>
 800f6a6:	2b02      	cmp	r3, #2
 800f6a8:	d056      	beq.n	800f758 <get_fat+0xf2>
 800f6aa:	e0a1      	b.n	800f7f0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	60fb      	str	r3, [r7, #12]
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	085b      	lsrs	r3, r3, #1
 800f6b4:	68fa      	ldr	r2, [r7, #12]
 800f6b6:	4413      	add	r3, r2
 800f6b8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f6ba:	693b      	ldr	r3, [r7, #16]
 800f6bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6be:	693b      	ldr	r3, [r7, #16]
 800f6c0:	899b      	ldrh	r3, [r3, #12]
 800f6c2:	4619      	mov	r1, r3
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	fbb3 f3f1 	udiv	r3, r3, r1
 800f6ca:	4413      	add	r3, r2
 800f6cc:	4619      	mov	r1, r3
 800f6ce:	6938      	ldr	r0, [r7, #16]
 800f6d0:	f7ff ff0c 	bl	800f4ec <move_window>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	2b00      	cmp	r3, #0
 800f6d8:	f040 808d 	bne.w	800f7f6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	1c5a      	adds	r2, r3, #1
 800f6e0:	60fa      	str	r2, [r7, #12]
 800f6e2:	693a      	ldr	r2, [r7, #16]
 800f6e4:	8992      	ldrh	r2, [r2, #12]
 800f6e6:	fbb3 f1f2 	udiv	r1, r3, r2
 800f6ea:	fb02 f201 	mul.w	r2, r2, r1
 800f6ee:	1a9b      	subs	r3, r3, r2
 800f6f0:	693a      	ldr	r2, [r7, #16]
 800f6f2:	4413      	add	r3, r2
 800f6f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f6f8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f6fa:	693b      	ldr	r3, [r7, #16]
 800f6fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6fe:	693b      	ldr	r3, [r7, #16]
 800f700:	899b      	ldrh	r3, [r3, #12]
 800f702:	4619      	mov	r1, r3
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	fbb3 f3f1 	udiv	r3, r3, r1
 800f70a:	4413      	add	r3, r2
 800f70c:	4619      	mov	r1, r3
 800f70e:	6938      	ldr	r0, [r7, #16]
 800f710:	f7ff feec 	bl	800f4ec <move_window>
 800f714:	4603      	mov	r3, r0
 800f716:	2b00      	cmp	r3, #0
 800f718:	d16f      	bne.n	800f7fa <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800f71a:	693b      	ldr	r3, [r7, #16]
 800f71c:	899b      	ldrh	r3, [r3, #12]
 800f71e:	461a      	mov	r2, r3
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	fbb3 f1f2 	udiv	r1, r3, r2
 800f726:	fb02 f201 	mul.w	r2, r2, r1
 800f72a:	1a9b      	subs	r3, r3, r2
 800f72c:	693a      	ldr	r2, [r7, #16]
 800f72e:	4413      	add	r3, r2
 800f730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f734:	021b      	lsls	r3, r3, #8
 800f736:	461a      	mov	r2, r3
 800f738:	68bb      	ldr	r3, [r7, #8]
 800f73a:	4313      	orrs	r3, r2
 800f73c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800f73e:	683b      	ldr	r3, [r7, #0]
 800f740:	f003 0301 	and.w	r3, r3, #1
 800f744:	2b00      	cmp	r3, #0
 800f746:	d002      	beq.n	800f74e <get_fat+0xe8>
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	091b      	lsrs	r3, r3, #4
 800f74c:	e002      	b.n	800f754 <get_fat+0xee>
 800f74e:	68bb      	ldr	r3, [r7, #8]
 800f750:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800f754:	617b      	str	r3, [r7, #20]
			break;
 800f756:	e055      	b.n	800f804 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f758:	693b      	ldr	r3, [r7, #16]
 800f75a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f75c:	693b      	ldr	r3, [r7, #16]
 800f75e:	899b      	ldrh	r3, [r3, #12]
 800f760:	085b      	lsrs	r3, r3, #1
 800f762:	b29b      	uxth	r3, r3
 800f764:	4619      	mov	r1, r3
 800f766:	683b      	ldr	r3, [r7, #0]
 800f768:	fbb3 f3f1 	udiv	r3, r3, r1
 800f76c:	4413      	add	r3, r2
 800f76e:	4619      	mov	r1, r3
 800f770:	6938      	ldr	r0, [r7, #16]
 800f772:	f7ff febb 	bl	800f4ec <move_window>
 800f776:	4603      	mov	r3, r0
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d140      	bne.n	800f7fe <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800f77c:	693b      	ldr	r3, [r7, #16]
 800f77e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f782:	683b      	ldr	r3, [r7, #0]
 800f784:	005b      	lsls	r3, r3, #1
 800f786:	693a      	ldr	r2, [r7, #16]
 800f788:	8992      	ldrh	r2, [r2, #12]
 800f78a:	fbb3 f0f2 	udiv	r0, r3, r2
 800f78e:	fb02 f200 	mul.w	r2, r2, r0
 800f792:	1a9b      	subs	r3, r3, r2
 800f794:	440b      	add	r3, r1
 800f796:	4618      	mov	r0, r3
 800f798:	f7ff fbc6 	bl	800ef28 <ld_word>
 800f79c:	4603      	mov	r3, r0
 800f79e:	617b      	str	r3, [r7, #20]
			break;
 800f7a0:	e030      	b.n	800f804 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f7a2:	693b      	ldr	r3, [r7, #16]
 800f7a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f7a6:	693b      	ldr	r3, [r7, #16]
 800f7a8:	899b      	ldrh	r3, [r3, #12]
 800f7aa:	089b      	lsrs	r3, r3, #2
 800f7ac:	b29b      	uxth	r3, r3
 800f7ae:	4619      	mov	r1, r3
 800f7b0:	683b      	ldr	r3, [r7, #0]
 800f7b2:	fbb3 f3f1 	udiv	r3, r3, r1
 800f7b6:	4413      	add	r3, r2
 800f7b8:	4619      	mov	r1, r3
 800f7ba:	6938      	ldr	r0, [r7, #16]
 800f7bc:	f7ff fe96 	bl	800f4ec <move_window>
 800f7c0:	4603      	mov	r3, r0
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d11d      	bne.n	800f802 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f7c6:	693b      	ldr	r3, [r7, #16]
 800f7c8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f7cc:	683b      	ldr	r3, [r7, #0]
 800f7ce:	009b      	lsls	r3, r3, #2
 800f7d0:	693a      	ldr	r2, [r7, #16]
 800f7d2:	8992      	ldrh	r2, [r2, #12]
 800f7d4:	fbb3 f0f2 	udiv	r0, r3, r2
 800f7d8:	fb02 f200 	mul.w	r2, r2, r0
 800f7dc:	1a9b      	subs	r3, r3, r2
 800f7de:	440b      	add	r3, r1
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	f7ff fbb9 	bl	800ef58 <ld_dword>
 800f7e6:	4603      	mov	r3, r0
 800f7e8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f7ec:	617b      	str	r3, [r7, #20]
			break;
 800f7ee:	e009      	b.n	800f804 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f7f0:	2301      	movs	r3, #1
 800f7f2:	617b      	str	r3, [r7, #20]
 800f7f4:	e006      	b.n	800f804 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f7f6:	bf00      	nop
 800f7f8:	e004      	b.n	800f804 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f7fa:	bf00      	nop
 800f7fc:	e002      	b.n	800f804 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f7fe:	bf00      	nop
 800f800:	e000      	b.n	800f804 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f802:	bf00      	nop
		}
	}

	return val;
 800f804:	697b      	ldr	r3, [r7, #20]
}
 800f806:	4618      	mov	r0, r3
 800f808:	3718      	adds	r7, #24
 800f80a:	46bd      	mov	sp, r7
 800f80c:	bd80      	pop	{r7, pc}

0800f80e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f80e:	b590      	push	{r4, r7, lr}
 800f810:	b089      	sub	sp, #36	; 0x24
 800f812:	af00      	add	r7, sp, #0
 800f814:	60f8      	str	r0, [r7, #12]
 800f816:	60b9      	str	r1, [r7, #8]
 800f818:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f81a:	2302      	movs	r3, #2
 800f81c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f81e:	68bb      	ldr	r3, [r7, #8]
 800f820:	2b01      	cmp	r3, #1
 800f822:	f240 8102 	bls.w	800fa2a <put_fat+0x21c>
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	6a1b      	ldr	r3, [r3, #32]
 800f82a:	68ba      	ldr	r2, [r7, #8]
 800f82c:	429a      	cmp	r2, r3
 800f82e:	f080 80fc 	bcs.w	800fa2a <put_fat+0x21c>
		switch (fs->fs_type) {
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	781b      	ldrb	r3, [r3, #0]
 800f836:	2b03      	cmp	r3, #3
 800f838:	f000 80b6 	beq.w	800f9a8 <put_fat+0x19a>
 800f83c:	2b03      	cmp	r3, #3
 800f83e:	f300 80fd 	bgt.w	800fa3c <put_fat+0x22e>
 800f842:	2b01      	cmp	r3, #1
 800f844:	d003      	beq.n	800f84e <put_fat+0x40>
 800f846:	2b02      	cmp	r3, #2
 800f848:	f000 8083 	beq.w	800f952 <put_fat+0x144>
 800f84c:	e0f6      	b.n	800fa3c <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f84e:	68bb      	ldr	r3, [r7, #8]
 800f850:	61bb      	str	r3, [r7, #24]
 800f852:	69bb      	ldr	r3, [r7, #24]
 800f854:	085b      	lsrs	r3, r3, #1
 800f856:	69ba      	ldr	r2, [r7, #24]
 800f858:	4413      	add	r3, r2
 800f85a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f860:	68fb      	ldr	r3, [r7, #12]
 800f862:	899b      	ldrh	r3, [r3, #12]
 800f864:	4619      	mov	r1, r3
 800f866:	69bb      	ldr	r3, [r7, #24]
 800f868:	fbb3 f3f1 	udiv	r3, r3, r1
 800f86c:	4413      	add	r3, r2
 800f86e:	4619      	mov	r1, r3
 800f870:	68f8      	ldr	r0, [r7, #12]
 800f872:	f7ff fe3b 	bl	800f4ec <move_window>
 800f876:	4603      	mov	r3, r0
 800f878:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f87a:	7ffb      	ldrb	r3, [r7, #31]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	f040 80d6 	bne.w	800fa2e <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f888:	69bb      	ldr	r3, [r7, #24]
 800f88a:	1c5a      	adds	r2, r3, #1
 800f88c:	61ba      	str	r2, [r7, #24]
 800f88e:	68fa      	ldr	r2, [r7, #12]
 800f890:	8992      	ldrh	r2, [r2, #12]
 800f892:	fbb3 f0f2 	udiv	r0, r3, r2
 800f896:	fb02 f200 	mul.w	r2, r2, r0
 800f89a:	1a9b      	subs	r3, r3, r2
 800f89c:	440b      	add	r3, r1
 800f89e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f8a0:	68bb      	ldr	r3, [r7, #8]
 800f8a2:	f003 0301 	and.w	r3, r3, #1
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d00d      	beq.n	800f8c6 <put_fat+0xb8>
 800f8aa:	697b      	ldr	r3, [r7, #20]
 800f8ac:	781b      	ldrb	r3, [r3, #0]
 800f8ae:	b25b      	sxtb	r3, r3
 800f8b0:	f003 030f 	and.w	r3, r3, #15
 800f8b4:	b25a      	sxtb	r2, r3
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	b2db      	uxtb	r3, r3
 800f8ba:	011b      	lsls	r3, r3, #4
 800f8bc:	b25b      	sxtb	r3, r3
 800f8be:	4313      	orrs	r3, r2
 800f8c0:	b25b      	sxtb	r3, r3
 800f8c2:	b2db      	uxtb	r3, r3
 800f8c4:	e001      	b.n	800f8ca <put_fat+0xbc>
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	b2db      	uxtb	r3, r3
 800f8ca:	697a      	ldr	r2, [r7, #20]
 800f8cc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	2201      	movs	r2, #1
 800f8d2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f8d4:	68fb      	ldr	r3, [r7, #12]
 800f8d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	899b      	ldrh	r3, [r3, #12]
 800f8dc:	4619      	mov	r1, r3
 800f8de:	69bb      	ldr	r3, [r7, #24]
 800f8e0:	fbb3 f3f1 	udiv	r3, r3, r1
 800f8e4:	4413      	add	r3, r2
 800f8e6:	4619      	mov	r1, r3
 800f8e8:	68f8      	ldr	r0, [r7, #12]
 800f8ea:	f7ff fdff 	bl	800f4ec <move_window>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f8f2:	7ffb      	ldrb	r3, [r7, #31]
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	f040 809c 	bne.w	800fa32 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	899b      	ldrh	r3, [r3, #12]
 800f904:	461a      	mov	r2, r3
 800f906:	69bb      	ldr	r3, [r7, #24]
 800f908:	fbb3 f0f2 	udiv	r0, r3, r2
 800f90c:	fb02 f200 	mul.w	r2, r2, r0
 800f910:	1a9b      	subs	r3, r3, r2
 800f912:	440b      	add	r3, r1
 800f914:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	f003 0301 	and.w	r3, r3, #1
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d003      	beq.n	800f928 <put_fat+0x11a>
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	091b      	lsrs	r3, r3, #4
 800f924:	b2db      	uxtb	r3, r3
 800f926:	e00e      	b.n	800f946 <put_fat+0x138>
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	781b      	ldrb	r3, [r3, #0]
 800f92c:	b25b      	sxtb	r3, r3
 800f92e:	f023 030f 	bic.w	r3, r3, #15
 800f932:	b25a      	sxtb	r2, r3
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	0a1b      	lsrs	r3, r3, #8
 800f938:	b25b      	sxtb	r3, r3
 800f93a:	f003 030f 	and.w	r3, r3, #15
 800f93e:	b25b      	sxtb	r3, r3
 800f940:	4313      	orrs	r3, r2
 800f942:	b25b      	sxtb	r3, r3
 800f944:	b2db      	uxtb	r3, r3
 800f946:	697a      	ldr	r2, [r7, #20]
 800f948:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	2201      	movs	r2, #1
 800f94e:	70da      	strb	r2, [r3, #3]
			break;
 800f950:	e074      	b.n	800fa3c <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	899b      	ldrh	r3, [r3, #12]
 800f95a:	085b      	lsrs	r3, r3, #1
 800f95c:	b29b      	uxth	r3, r3
 800f95e:	4619      	mov	r1, r3
 800f960:	68bb      	ldr	r3, [r7, #8]
 800f962:	fbb3 f3f1 	udiv	r3, r3, r1
 800f966:	4413      	add	r3, r2
 800f968:	4619      	mov	r1, r3
 800f96a:	68f8      	ldr	r0, [r7, #12]
 800f96c:	f7ff fdbe 	bl	800f4ec <move_window>
 800f970:	4603      	mov	r3, r0
 800f972:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f974:	7ffb      	ldrb	r3, [r7, #31]
 800f976:	2b00      	cmp	r3, #0
 800f978:	d15d      	bne.n	800fa36 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f980:	68bb      	ldr	r3, [r7, #8]
 800f982:	005b      	lsls	r3, r3, #1
 800f984:	68fa      	ldr	r2, [r7, #12]
 800f986:	8992      	ldrh	r2, [r2, #12]
 800f988:	fbb3 f0f2 	udiv	r0, r3, r2
 800f98c:	fb02 f200 	mul.w	r2, r2, r0
 800f990:	1a9b      	subs	r3, r3, r2
 800f992:	440b      	add	r3, r1
 800f994:	687a      	ldr	r2, [r7, #4]
 800f996:	b292      	uxth	r2, r2
 800f998:	4611      	mov	r1, r2
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7ff faff 	bl	800ef9e <st_word>
			fs->wflag = 1;
 800f9a0:	68fb      	ldr	r3, [r7, #12]
 800f9a2:	2201      	movs	r2, #1
 800f9a4:	70da      	strb	r2, [r3, #3]
			break;
 800f9a6:	e049      	b.n	800fa3c <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f9a8:	68fb      	ldr	r3, [r7, #12]
 800f9aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	899b      	ldrh	r3, [r3, #12]
 800f9b0:	089b      	lsrs	r3, r3, #2
 800f9b2:	b29b      	uxth	r3, r3
 800f9b4:	4619      	mov	r1, r3
 800f9b6:	68bb      	ldr	r3, [r7, #8]
 800f9b8:	fbb3 f3f1 	udiv	r3, r3, r1
 800f9bc:	4413      	add	r3, r2
 800f9be:	4619      	mov	r1, r3
 800f9c0:	68f8      	ldr	r0, [r7, #12]
 800f9c2:	f7ff fd93 	bl	800f4ec <move_window>
 800f9c6:	4603      	mov	r3, r0
 800f9c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f9ca:	7ffb      	ldrb	r3, [r7, #31]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d134      	bne.n	800fa3a <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f9dc:	68bb      	ldr	r3, [r7, #8]
 800f9de:	009b      	lsls	r3, r3, #2
 800f9e0:	68fa      	ldr	r2, [r7, #12]
 800f9e2:	8992      	ldrh	r2, [r2, #12]
 800f9e4:	fbb3 f0f2 	udiv	r0, r3, r2
 800f9e8:	fb02 f200 	mul.w	r2, r2, r0
 800f9ec:	1a9b      	subs	r3, r3, r2
 800f9ee:	440b      	add	r3, r1
 800f9f0:	4618      	mov	r0, r3
 800f9f2:	f7ff fab1 	bl	800ef58 <ld_dword>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f9fc:	4323      	orrs	r3, r4
 800f9fe:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800fa06:	68bb      	ldr	r3, [r7, #8]
 800fa08:	009b      	lsls	r3, r3, #2
 800fa0a:	68fa      	ldr	r2, [r7, #12]
 800fa0c:	8992      	ldrh	r2, [r2, #12]
 800fa0e:	fbb3 f0f2 	udiv	r0, r3, r2
 800fa12:	fb02 f200 	mul.w	r2, r2, r0
 800fa16:	1a9b      	subs	r3, r3, r2
 800fa18:	440b      	add	r3, r1
 800fa1a:	6879      	ldr	r1, [r7, #4]
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f7ff fad9 	bl	800efd4 <st_dword>
			fs->wflag = 1;
 800fa22:	68fb      	ldr	r3, [r7, #12]
 800fa24:	2201      	movs	r2, #1
 800fa26:	70da      	strb	r2, [r3, #3]
			break;
 800fa28:	e008      	b.n	800fa3c <put_fat+0x22e>
		}
	}
 800fa2a:	bf00      	nop
 800fa2c:	e006      	b.n	800fa3c <put_fat+0x22e>
			if (res != FR_OK) break;
 800fa2e:	bf00      	nop
 800fa30:	e004      	b.n	800fa3c <put_fat+0x22e>
			if (res != FR_OK) break;
 800fa32:	bf00      	nop
 800fa34:	e002      	b.n	800fa3c <put_fat+0x22e>
			if (res != FR_OK) break;
 800fa36:	bf00      	nop
 800fa38:	e000      	b.n	800fa3c <put_fat+0x22e>
			if (res != FR_OK) break;
 800fa3a:	bf00      	nop
	return res;
 800fa3c:	7ffb      	ldrb	r3, [r7, #31]
}
 800fa3e:	4618      	mov	r0, r3
 800fa40:	3724      	adds	r7, #36	; 0x24
 800fa42:	46bd      	mov	sp, r7
 800fa44:	bd90      	pop	{r4, r7, pc}

0800fa46 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800fa46:	b580      	push	{r7, lr}
 800fa48:	b088      	sub	sp, #32
 800fa4a:	af00      	add	r7, sp, #0
 800fa4c:	60f8      	str	r0, [r7, #12]
 800fa4e:	60b9      	str	r1, [r7, #8]
 800fa50:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800fa52:	2300      	movs	r3, #0
 800fa54:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800fa56:	68fb      	ldr	r3, [r7, #12]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800fa5c:	68bb      	ldr	r3, [r7, #8]
 800fa5e:	2b01      	cmp	r3, #1
 800fa60:	d904      	bls.n	800fa6c <remove_chain+0x26>
 800fa62:	69bb      	ldr	r3, [r7, #24]
 800fa64:	6a1b      	ldr	r3, [r3, #32]
 800fa66:	68ba      	ldr	r2, [r7, #8]
 800fa68:	429a      	cmp	r2, r3
 800fa6a:	d301      	bcc.n	800fa70 <remove_chain+0x2a>
 800fa6c:	2302      	movs	r3, #2
 800fa6e:	e04b      	b.n	800fb08 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d00c      	beq.n	800fa90 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800fa76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fa7a:	6879      	ldr	r1, [r7, #4]
 800fa7c:	69b8      	ldr	r0, [r7, #24]
 800fa7e:	f7ff fec6 	bl	800f80e <put_fat>
 800fa82:	4603      	mov	r3, r0
 800fa84:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800fa86:	7ffb      	ldrb	r3, [r7, #31]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d001      	beq.n	800fa90 <remove_chain+0x4a>
 800fa8c:	7ffb      	ldrb	r3, [r7, #31]
 800fa8e:	e03b      	b.n	800fb08 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800fa90:	68b9      	ldr	r1, [r7, #8]
 800fa92:	68f8      	ldr	r0, [r7, #12]
 800fa94:	f7ff fde7 	bl	800f666 <get_fat>
 800fa98:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d031      	beq.n	800fb04 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800faa0:	697b      	ldr	r3, [r7, #20]
 800faa2:	2b01      	cmp	r3, #1
 800faa4:	d101      	bne.n	800faaa <remove_chain+0x64>
 800faa6:	2302      	movs	r3, #2
 800faa8:	e02e      	b.n	800fb08 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800faaa:	697b      	ldr	r3, [r7, #20]
 800faac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fab0:	d101      	bne.n	800fab6 <remove_chain+0x70>
 800fab2:	2301      	movs	r3, #1
 800fab4:	e028      	b.n	800fb08 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800fab6:	2200      	movs	r2, #0
 800fab8:	68b9      	ldr	r1, [r7, #8]
 800faba:	69b8      	ldr	r0, [r7, #24]
 800fabc:	f7ff fea7 	bl	800f80e <put_fat>
 800fac0:	4603      	mov	r3, r0
 800fac2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800fac4:	7ffb      	ldrb	r3, [r7, #31]
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d001      	beq.n	800face <remove_chain+0x88>
 800faca:	7ffb      	ldrb	r3, [r7, #31]
 800facc:	e01c      	b.n	800fb08 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800face:	69bb      	ldr	r3, [r7, #24]
 800fad0:	69da      	ldr	r2, [r3, #28]
 800fad2:	69bb      	ldr	r3, [r7, #24]
 800fad4:	6a1b      	ldr	r3, [r3, #32]
 800fad6:	3b02      	subs	r3, #2
 800fad8:	429a      	cmp	r2, r3
 800fada:	d20b      	bcs.n	800faf4 <remove_chain+0xae>
			fs->free_clst++;
 800fadc:	69bb      	ldr	r3, [r7, #24]
 800fade:	69db      	ldr	r3, [r3, #28]
 800fae0:	1c5a      	adds	r2, r3, #1
 800fae2:	69bb      	ldr	r3, [r7, #24]
 800fae4:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800fae6:	69bb      	ldr	r3, [r7, #24]
 800fae8:	791b      	ldrb	r3, [r3, #4]
 800faea:	f043 0301 	orr.w	r3, r3, #1
 800faee:	b2da      	uxtb	r2, r3
 800faf0:	69bb      	ldr	r3, [r7, #24]
 800faf2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800faf4:	697b      	ldr	r3, [r7, #20]
 800faf6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800faf8:	69bb      	ldr	r3, [r7, #24]
 800fafa:	6a1b      	ldr	r3, [r3, #32]
 800fafc:	68ba      	ldr	r2, [r7, #8]
 800fafe:	429a      	cmp	r2, r3
 800fb00:	d3c6      	bcc.n	800fa90 <remove_chain+0x4a>
 800fb02:	e000      	b.n	800fb06 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800fb04:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800fb06:	2300      	movs	r3, #0
}
 800fb08:	4618      	mov	r0, r3
 800fb0a:	3720      	adds	r7, #32
 800fb0c:	46bd      	mov	sp, r7
 800fb0e:	bd80      	pop	{r7, pc}

0800fb10 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800fb10:	b580      	push	{r7, lr}
 800fb12:	b088      	sub	sp, #32
 800fb14:	af00      	add	r7, sp, #0
 800fb16:	6078      	str	r0, [r7, #4]
 800fb18:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	681b      	ldr	r3, [r3, #0]
 800fb1e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800fb20:	683b      	ldr	r3, [r7, #0]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d10d      	bne.n	800fb42 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800fb26:	693b      	ldr	r3, [r7, #16]
 800fb28:	699b      	ldr	r3, [r3, #24]
 800fb2a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800fb2c:	69bb      	ldr	r3, [r7, #24]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d004      	beq.n	800fb3c <create_chain+0x2c>
 800fb32:	693b      	ldr	r3, [r7, #16]
 800fb34:	6a1b      	ldr	r3, [r3, #32]
 800fb36:	69ba      	ldr	r2, [r7, #24]
 800fb38:	429a      	cmp	r2, r3
 800fb3a:	d31b      	bcc.n	800fb74 <create_chain+0x64>
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	61bb      	str	r3, [r7, #24]
 800fb40:	e018      	b.n	800fb74 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800fb42:	6839      	ldr	r1, [r7, #0]
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	f7ff fd8e 	bl	800f666 <get_fat>
 800fb4a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800fb4c:	68fb      	ldr	r3, [r7, #12]
 800fb4e:	2b01      	cmp	r3, #1
 800fb50:	d801      	bhi.n	800fb56 <create_chain+0x46>
 800fb52:	2301      	movs	r3, #1
 800fb54:	e070      	b.n	800fc38 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800fb56:	68fb      	ldr	r3, [r7, #12]
 800fb58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fb5c:	d101      	bne.n	800fb62 <create_chain+0x52>
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	e06a      	b.n	800fc38 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800fb62:	693b      	ldr	r3, [r7, #16]
 800fb64:	6a1b      	ldr	r3, [r3, #32]
 800fb66:	68fa      	ldr	r2, [r7, #12]
 800fb68:	429a      	cmp	r2, r3
 800fb6a:	d201      	bcs.n	800fb70 <create_chain+0x60>
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	e063      	b.n	800fc38 <create_chain+0x128>
		scl = clst;
 800fb70:	683b      	ldr	r3, [r7, #0]
 800fb72:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800fb74:	69bb      	ldr	r3, [r7, #24]
 800fb76:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800fb78:	69fb      	ldr	r3, [r7, #28]
 800fb7a:	3301      	adds	r3, #1
 800fb7c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800fb7e:	693b      	ldr	r3, [r7, #16]
 800fb80:	6a1b      	ldr	r3, [r3, #32]
 800fb82:	69fa      	ldr	r2, [r7, #28]
 800fb84:	429a      	cmp	r2, r3
 800fb86:	d307      	bcc.n	800fb98 <create_chain+0x88>
				ncl = 2;
 800fb88:	2302      	movs	r3, #2
 800fb8a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800fb8c:	69fa      	ldr	r2, [r7, #28]
 800fb8e:	69bb      	ldr	r3, [r7, #24]
 800fb90:	429a      	cmp	r2, r3
 800fb92:	d901      	bls.n	800fb98 <create_chain+0x88>
 800fb94:	2300      	movs	r3, #0
 800fb96:	e04f      	b.n	800fc38 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800fb98:	69f9      	ldr	r1, [r7, #28]
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f7ff fd63 	bl	800f666 <get_fat>
 800fba0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d00e      	beq.n	800fbc6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	2b01      	cmp	r3, #1
 800fbac:	d003      	beq.n	800fbb6 <create_chain+0xa6>
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fbb4:	d101      	bne.n	800fbba <create_chain+0xaa>
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	e03e      	b.n	800fc38 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800fbba:	69fa      	ldr	r2, [r7, #28]
 800fbbc:	69bb      	ldr	r3, [r7, #24]
 800fbbe:	429a      	cmp	r2, r3
 800fbc0:	d1da      	bne.n	800fb78 <create_chain+0x68>
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	e038      	b.n	800fc38 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800fbc6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800fbc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fbcc:	69f9      	ldr	r1, [r7, #28]
 800fbce:	6938      	ldr	r0, [r7, #16]
 800fbd0:	f7ff fe1d 	bl	800f80e <put_fat>
 800fbd4:	4603      	mov	r3, r0
 800fbd6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800fbd8:	7dfb      	ldrb	r3, [r7, #23]
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d109      	bne.n	800fbf2 <create_chain+0xe2>
 800fbde:	683b      	ldr	r3, [r7, #0]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d006      	beq.n	800fbf2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800fbe4:	69fa      	ldr	r2, [r7, #28]
 800fbe6:	6839      	ldr	r1, [r7, #0]
 800fbe8:	6938      	ldr	r0, [r7, #16]
 800fbea:	f7ff fe10 	bl	800f80e <put_fat>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800fbf2:	7dfb      	ldrb	r3, [r7, #23]
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d116      	bne.n	800fc26 <create_chain+0x116>
		fs->last_clst = ncl;
 800fbf8:	693b      	ldr	r3, [r7, #16]
 800fbfa:	69fa      	ldr	r2, [r7, #28]
 800fbfc:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800fbfe:	693b      	ldr	r3, [r7, #16]
 800fc00:	69da      	ldr	r2, [r3, #28]
 800fc02:	693b      	ldr	r3, [r7, #16]
 800fc04:	6a1b      	ldr	r3, [r3, #32]
 800fc06:	3b02      	subs	r3, #2
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	d804      	bhi.n	800fc16 <create_chain+0x106>
 800fc0c:	693b      	ldr	r3, [r7, #16]
 800fc0e:	69db      	ldr	r3, [r3, #28]
 800fc10:	1e5a      	subs	r2, r3, #1
 800fc12:	693b      	ldr	r3, [r7, #16]
 800fc14:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800fc16:	693b      	ldr	r3, [r7, #16]
 800fc18:	791b      	ldrb	r3, [r3, #4]
 800fc1a:	f043 0301 	orr.w	r3, r3, #1
 800fc1e:	b2da      	uxtb	r2, r3
 800fc20:	693b      	ldr	r3, [r7, #16]
 800fc22:	711a      	strb	r2, [r3, #4]
 800fc24:	e007      	b.n	800fc36 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800fc26:	7dfb      	ldrb	r3, [r7, #23]
 800fc28:	2b01      	cmp	r3, #1
 800fc2a:	d102      	bne.n	800fc32 <create_chain+0x122>
 800fc2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fc30:	e000      	b.n	800fc34 <create_chain+0x124>
 800fc32:	2301      	movs	r3, #1
 800fc34:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800fc36:	69fb      	ldr	r3, [r7, #28]
}
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3720      	adds	r7, #32
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}

0800fc40 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800fc40:	b480      	push	{r7}
 800fc42:	b087      	sub	sp, #28
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
 800fc48:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	681b      	ldr	r3, [r3, #0]
 800fc4e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc54:	3304      	adds	r3, #4
 800fc56:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	899b      	ldrh	r3, [r3, #12]
 800fc5c:	461a      	mov	r2, r3
 800fc5e:	683b      	ldr	r3, [r7, #0]
 800fc60:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc64:	68fa      	ldr	r2, [r7, #12]
 800fc66:	8952      	ldrh	r2, [r2, #10]
 800fc68:	fbb3 f3f2 	udiv	r3, r3, r2
 800fc6c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fc6e:	693b      	ldr	r3, [r7, #16]
 800fc70:	1d1a      	adds	r2, r3, #4
 800fc72:	613a      	str	r2, [r7, #16]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d101      	bne.n	800fc82 <clmt_clust+0x42>
 800fc7e:	2300      	movs	r3, #0
 800fc80:	e010      	b.n	800fca4 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800fc82:	697a      	ldr	r2, [r7, #20]
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d307      	bcc.n	800fc9a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800fc8a:	697a      	ldr	r2, [r7, #20]
 800fc8c:	68bb      	ldr	r3, [r7, #8]
 800fc8e:	1ad3      	subs	r3, r2, r3
 800fc90:	617b      	str	r3, [r7, #20]
 800fc92:	693b      	ldr	r3, [r7, #16]
 800fc94:	3304      	adds	r3, #4
 800fc96:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800fc98:	e7e9      	b.n	800fc6e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800fc9a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800fc9c:	693b      	ldr	r3, [r7, #16]
 800fc9e:	681a      	ldr	r2, [r3, #0]
 800fca0:	697b      	ldr	r3, [r7, #20]
 800fca2:	4413      	add	r3, r2
}
 800fca4:	4618      	mov	r0, r3
 800fca6:	371c      	adds	r7, #28
 800fca8:	46bd      	mov	sp, r7
 800fcaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcae:	4770      	bx	lr

0800fcb0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800fcb0:	b580      	push	{r7, lr}
 800fcb2:	b086      	sub	sp, #24
 800fcb4:	af00      	add	r7, sp, #0
 800fcb6:	6078      	str	r0, [r7, #4]
 800fcb8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	681b      	ldr	r3, [r3, #0]
 800fcbe:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800fcc0:	683b      	ldr	r3, [r7, #0]
 800fcc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fcc6:	d204      	bcs.n	800fcd2 <dir_sdi+0x22>
 800fcc8:	683b      	ldr	r3, [r7, #0]
 800fcca:	f003 031f 	and.w	r3, r3, #31
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d001      	beq.n	800fcd6 <dir_sdi+0x26>
		return FR_INT_ERR;
 800fcd2:	2302      	movs	r3, #2
 800fcd4:	e071      	b.n	800fdba <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	683a      	ldr	r2, [r7, #0]
 800fcda:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	689b      	ldr	r3, [r3, #8]
 800fce0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800fce2:	697b      	ldr	r3, [r7, #20]
 800fce4:	2b00      	cmp	r3, #0
 800fce6:	d106      	bne.n	800fcf6 <dir_sdi+0x46>
 800fce8:	693b      	ldr	r3, [r7, #16]
 800fcea:	781b      	ldrb	r3, [r3, #0]
 800fcec:	2b02      	cmp	r3, #2
 800fcee:	d902      	bls.n	800fcf6 <dir_sdi+0x46>
		clst = fs->dirbase;
 800fcf0:	693b      	ldr	r3, [r7, #16]
 800fcf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcf4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800fcf6:	697b      	ldr	r3, [r7, #20]
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d10c      	bne.n	800fd16 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800fcfc:	683b      	ldr	r3, [r7, #0]
 800fcfe:	095b      	lsrs	r3, r3, #5
 800fd00:	693a      	ldr	r2, [r7, #16]
 800fd02:	8912      	ldrh	r2, [r2, #8]
 800fd04:	4293      	cmp	r3, r2
 800fd06:	d301      	bcc.n	800fd0c <dir_sdi+0x5c>
 800fd08:	2302      	movs	r3, #2
 800fd0a:	e056      	b.n	800fdba <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800fd0c:	693b      	ldr	r3, [r7, #16]
 800fd0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	61da      	str	r2, [r3, #28]
 800fd14:	e02d      	b.n	800fd72 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800fd16:	693b      	ldr	r3, [r7, #16]
 800fd18:	895b      	ldrh	r3, [r3, #10]
 800fd1a:	461a      	mov	r2, r3
 800fd1c:	693b      	ldr	r3, [r7, #16]
 800fd1e:	899b      	ldrh	r3, [r3, #12]
 800fd20:	fb03 f302 	mul.w	r3, r3, r2
 800fd24:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fd26:	e019      	b.n	800fd5c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	6979      	ldr	r1, [r7, #20]
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f7ff fc9a 	bl	800f666 <get_fat>
 800fd32:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800fd34:	697b      	ldr	r3, [r7, #20]
 800fd36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd3a:	d101      	bne.n	800fd40 <dir_sdi+0x90>
 800fd3c:	2301      	movs	r3, #1
 800fd3e:	e03c      	b.n	800fdba <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800fd40:	697b      	ldr	r3, [r7, #20]
 800fd42:	2b01      	cmp	r3, #1
 800fd44:	d904      	bls.n	800fd50 <dir_sdi+0xa0>
 800fd46:	693b      	ldr	r3, [r7, #16]
 800fd48:	6a1b      	ldr	r3, [r3, #32]
 800fd4a:	697a      	ldr	r2, [r7, #20]
 800fd4c:	429a      	cmp	r2, r3
 800fd4e:	d301      	bcc.n	800fd54 <dir_sdi+0xa4>
 800fd50:	2302      	movs	r3, #2
 800fd52:	e032      	b.n	800fdba <dir_sdi+0x10a>
			ofs -= csz;
 800fd54:	683a      	ldr	r2, [r7, #0]
 800fd56:	68fb      	ldr	r3, [r7, #12]
 800fd58:	1ad3      	subs	r3, r2, r3
 800fd5a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800fd5c:	683a      	ldr	r2, [r7, #0]
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	429a      	cmp	r2, r3
 800fd62:	d2e1      	bcs.n	800fd28 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800fd64:	6979      	ldr	r1, [r7, #20]
 800fd66:	6938      	ldr	r0, [r7, #16]
 800fd68:	f7ff fc5e 	bl	800f628 <clust2sect>
 800fd6c:	4602      	mov	r2, r0
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	697a      	ldr	r2, [r7, #20]
 800fd76:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	69db      	ldr	r3, [r3, #28]
 800fd7c:	2b00      	cmp	r3, #0
 800fd7e:	d101      	bne.n	800fd84 <dir_sdi+0xd4>
 800fd80:	2302      	movs	r3, #2
 800fd82:	e01a      	b.n	800fdba <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	69da      	ldr	r2, [r3, #28]
 800fd88:	693b      	ldr	r3, [r7, #16]
 800fd8a:	899b      	ldrh	r3, [r3, #12]
 800fd8c:	4619      	mov	r1, r3
 800fd8e:	683b      	ldr	r3, [r7, #0]
 800fd90:	fbb3 f3f1 	udiv	r3, r3, r1
 800fd94:	441a      	add	r2, r3
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800fd9a:	693b      	ldr	r3, [r7, #16]
 800fd9c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800fda0:	693b      	ldr	r3, [r7, #16]
 800fda2:	899b      	ldrh	r3, [r3, #12]
 800fda4:	461a      	mov	r2, r3
 800fda6:	683b      	ldr	r3, [r7, #0]
 800fda8:	fbb3 f0f2 	udiv	r0, r3, r2
 800fdac:	fb02 f200 	mul.w	r2, r2, r0
 800fdb0:	1a9b      	subs	r3, r3, r2
 800fdb2:	18ca      	adds	r2, r1, r3
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800fdb8:	2300      	movs	r3, #0
}
 800fdba:	4618      	mov	r0, r3
 800fdbc:	3718      	adds	r7, #24
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bd80      	pop	{r7, pc}

0800fdc2 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800fdc2:	b580      	push	{r7, lr}
 800fdc4:	b086      	sub	sp, #24
 800fdc6:	af00      	add	r7, sp, #0
 800fdc8:	6078      	str	r0, [r7, #4]
 800fdca:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	681b      	ldr	r3, [r3, #0]
 800fdd0:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	695b      	ldr	r3, [r3, #20]
 800fdd6:	3320      	adds	r3, #32
 800fdd8:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	69db      	ldr	r3, [r3, #28]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d003      	beq.n	800fdea <dir_next+0x28>
 800fde2:	68bb      	ldr	r3, [r7, #8]
 800fde4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fde8:	d301      	bcc.n	800fdee <dir_next+0x2c>
 800fdea:	2304      	movs	r3, #4
 800fdec:	e0bb      	b.n	800ff66 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	899b      	ldrh	r3, [r3, #12]
 800fdf2:	461a      	mov	r2, r3
 800fdf4:	68bb      	ldr	r3, [r7, #8]
 800fdf6:	fbb3 f1f2 	udiv	r1, r3, r2
 800fdfa:	fb02 f201 	mul.w	r2, r2, r1
 800fdfe:	1a9b      	subs	r3, r3, r2
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	f040 809d 	bne.w	800ff40 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	69db      	ldr	r3, [r3, #28]
 800fe0a:	1c5a      	adds	r2, r3, #1
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	699b      	ldr	r3, [r3, #24]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d10b      	bne.n	800fe30 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	095b      	lsrs	r3, r3, #5
 800fe1c:	68fa      	ldr	r2, [r7, #12]
 800fe1e:	8912      	ldrh	r2, [r2, #8]
 800fe20:	4293      	cmp	r3, r2
 800fe22:	f0c0 808d 	bcc.w	800ff40 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	2200      	movs	r2, #0
 800fe2a:	61da      	str	r2, [r3, #28]
 800fe2c:	2304      	movs	r3, #4
 800fe2e:	e09a      	b.n	800ff66 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	899b      	ldrh	r3, [r3, #12]
 800fe34:	461a      	mov	r2, r3
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	fbb3 f3f2 	udiv	r3, r3, r2
 800fe3c:	68fa      	ldr	r2, [r7, #12]
 800fe3e:	8952      	ldrh	r2, [r2, #10]
 800fe40:	3a01      	subs	r2, #1
 800fe42:	4013      	ands	r3, r2
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d17b      	bne.n	800ff40 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800fe48:	687a      	ldr	r2, [r7, #4]
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	699b      	ldr	r3, [r3, #24]
 800fe4e:	4619      	mov	r1, r3
 800fe50:	4610      	mov	r0, r2
 800fe52:	f7ff fc08 	bl	800f666 <get_fat>
 800fe56:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800fe58:	697b      	ldr	r3, [r7, #20]
 800fe5a:	2b01      	cmp	r3, #1
 800fe5c:	d801      	bhi.n	800fe62 <dir_next+0xa0>
 800fe5e:	2302      	movs	r3, #2
 800fe60:	e081      	b.n	800ff66 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800fe62:	697b      	ldr	r3, [r7, #20]
 800fe64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fe68:	d101      	bne.n	800fe6e <dir_next+0xac>
 800fe6a:	2301      	movs	r3, #1
 800fe6c:	e07b      	b.n	800ff66 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800fe6e:	68fb      	ldr	r3, [r7, #12]
 800fe70:	6a1b      	ldr	r3, [r3, #32]
 800fe72:	697a      	ldr	r2, [r7, #20]
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d359      	bcc.n	800ff2c <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800fe78:	683b      	ldr	r3, [r7, #0]
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d104      	bne.n	800fe88 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	2200      	movs	r2, #0
 800fe82:	61da      	str	r2, [r3, #28]
 800fe84:	2304      	movs	r3, #4
 800fe86:	e06e      	b.n	800ff66 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800fe88:	687a      	ldr	r2, [r7, #4]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	699b      	ldr	r3, [r3, #24]
 800fe8e:	4619      	mov	r1, r3
 800fe90:	4610      	mov	r0, r2
 800fe92:	f7ff fe3d 	bl	800fb10 <create_chain>
 800fe96:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d101      	bne.n	800fea2 <dir_next+0xe0>
 800fe9e:	2307      	movs	r3, #7
 800fea0:	e061      	b.n	800ff66 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800fea2:	697b      	ldr	r3, [r7, #20]
 800fea4:	2b01      	cmp	r3, #1
 800fea6:	d101      	bne.n	800feac <dir_next+0xea>
 800fea8:	2302      	movs	r3, #2
 800feaa:	e05c      	b.n	800ff66 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800feac:	697b      	ldr	r3, [r7, #20]
 800feae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800feb2:	d101      	bne.n	800feb8 <dir_next+0xf6>
 800feb4:	2301      	movs	r3, #1
 800feb6:	e056      	b.n	800ff66 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800feb8:	68f8      	ldr	r0, [r7, #12]
 800feba:	f7ff fad3 	bl	800f464 <sync_window>
 800febe:	4603      	mov	r3, r0
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d001      	beq.n	800fec8 <dir_next+0x106>
 800fec4:	2301      	movs	r3, #1
 800fec6:	e04e      	b.n	800ff66 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800fece:	68fb      	ldr	r3, [r7, #12]
 800fed0:	899b      	ldrh	r3, [r3, #12]
 800fed2:	461a      	mov	r2, r3
 800fed4:	2100      	movs	r1, #0
 800fed6:	f7ff f8ca 	bl	800f06e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800feda:	2300      	movs	r3, #0
 800fedc:	613b      	str	r3, [r7, #16]
 800fede:	6979      	ldr	r1, [r7, #20]
 800fee0:	68f8      	ldr	r0, [r7, #12]
 800fee2:	f7ff fba1 	bl	800f628 <clust2sect>
 800fee6:	4602      	mov	r2, r0
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	639a      	str	r2, [r3, #56]	; 0x38
 800feec:	e012      	b.n	800ff14 <dir_next+0x152>
						fs->wflag = 1;
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	2201      	movs	r2, #1
 800fef2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800fef4:	68f8      	ldr	r0, [r7, #12]
 800fef6:	f7ff fab5 	bl	800f464 <sync_window>
 800fefa:	4603      	mov	r3, r0
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d001      	beq.n	800ff04 <dir_next+0x142>
 800ff00:	2301      	movs	r3, #1
 800ff02:	e030      	b.n	800ff66 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800ff04:	693b      	ldr	r3, [r7, #16]
 800ff06:	3301      	adds	r3, #1
 800ff08:	613b      	str	r3, [r7, #16]
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff0e:	1c5a      	adds	r2, r3, #1
 800ff10:	68fb      	ldr	r3, [r7, #12]
 800ff12:	639a      	str	r2, [r3, #56]	; 0x38
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	895b      	ldrh	r3, [r3, #10]
 800ff18:	461a      	mov	r2, r3
 800ff1a:	693b      	ldr	r3, [r7, #16]
 800ff1c:	4293      	cmp	r3, r2
 800ff1e:	d3e6      	bcc.n	800feee <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff24:	693b      	ldr	r3, [r7, #16]
 800ff26:	1ad2      	subs	r2, r2, r3
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	697a      	ldr	r2, [r7, #20]
 800ff30:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ff32:	6979      	ldr	r1, [r7, #20]
 800ff34:	68f8      	ldr	r0, [r7, #12]
 800ff36:	f7ff fb77 	bl	800f628 <clust2sect>
 800ff3a:	4602      	mov	r2, r0
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	68ba      	ldr	r2, [r7, #8]
 800ff44:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	899b      	ldrh	r3, [r3, #12]
 800ff50:	461a      	mov	r2, r3
 800ff52:	68bb      	ldr	r3, [r7, #8]
 800ff54:	fbb3 f0f2 	udiv	r0, r3, r2
 800ff58:	fb02 f200 	mul.w	r2, r2, r0
 800ff5c:	1a9b      	subs	r3, r3, r2
 800ff5e:	18ca      	adds	r2, r1, r3
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ff64:	2300      	movs	r3, #0
}
 800ff66:	4618      	mov	r0, r3
 800ff68:	3718      	adds	r7, #24
 800ff6a:	46bd      	mov	sp, r7
 800ff6c:	bd80      	pop	{r7, pc}

0800ff6e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ff6e:	b580      	push	{r7, lr}
 800ff70:	b086      	sub	sp, #24
 800ff72:	af00      	add	r7, sp, #0
 800ff74:	6078      	str	r0, [r7, #4]
 800ff76:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ff7e:	2100      	movs	r1, #0
 800ff80:	6878      	ldr	r0, [r7, #4]
 800ff82:	f7ff fe95 	bl	800fcb0 <dir_sdi>
 800ff86:	4603      	mov	r3, r0
 800ff88:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ff8a:	7dfb      	ldrb	r3, [r7, #23]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d12b      	bne.n	800ffe8 <dir_alloc+0x7a>
		n = 0;
 800ff90:	2300      	movs	r3, #0
 800ff92:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	69db      	ldr	r3, [r3, #28]
 800ff98:	4619      	mov	r1, r3
 800ff9a:	68f8      	ldr	r0, [r7, #12]
 800ff9c:	f7ff faa6 	bl	800f4ec <move_window>
 800ffa0:	4603      	mov	r3, r0
 800ffa2:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ffa4:	7dfb      	ldrb	r3, [r7, #23]
 800ffa6:	2b00      	cmp	r3, #0
 800ffa8:	d11d      	bne.n	800ffe6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	6a1b      	ldr	r3, [r3, #32]
 800ffae:	781b      	ldrb	r3, [r3, #0]
 800ffb0:	2be5      	cmp	r3, #229	; 0xe5
 800ffb2:	d004      	beq.n	800ffbe <dir_alloc+0x50>
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	6a1b      	ldr	r3, [r3, #32]
 800ffb8:	781b      	ldrb	r3, [r3, #0]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	d107      	bne.n	800ffce <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ffbe:	693b      	ldr	r3, [r7, #16]
 800ffc0:	3301      	adds	r3, #1
 800ffc2:	613b      	str	r3, [r7, #16]
 800ffc4:	693a      	ldr	r2, [r7, #16]
 800ffc6:	683b      	ldr	r3, [r7, #0]
 800ffc8:	429a      	cmp	r2, r3
 800ffca:	d102      	bne.n	800ffd2 <dir_alloc+0x64>
 800ffcc:	e00c      	b.n	800ffe8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ffce:	2300      	movs	r3, #0
 800ffd0:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ffd2:	2101      	movs	r1, #1
 800ffd4:	6878      	ldr	r0, [r7, #4]
 800ffd6:	f7ff fef4 	bl	800fdc2 <dir_next>
 800ffda:	4603      	mov	r3, r0
 800ffdc:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800ffde:	7dfb      	ldrb	r3, [r7, #23]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d0d7      	beq.n	800ff94 <dir_alloc+0x26>
 800ffe4:	e000      	b.n	800ffe8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800ffe6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800ffe8:	7dfb      	ldrb	r3, [r7, #23]
 800ffea:	2b04      	cmp	r3, #4
 800ffec:	d101      	bne.n	800fff2 <dir_alloc+0x84>
 800ffee:	2307      	movs	r3, #7
 800fff0:	75fb      	strb	r3, [r7, #23]
	return res;
 800fff2:	7dfb      	ldrb	r3, [r7, #23]
}
 800fff4:	4618      	mov	r0, r3
 800fff6:	3718      	adds	r7, #24
 800fff8:	46bd      	mov	sp, r7
 800fffa:	bd80      	pop	{r7, pc}

0800fffc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800fffc:	b580      	push	{r7, lr}
 800fffe:	b084      	sub	sp, #16
 8010000:	af00      	add	r7, sp, #0
 8010002:	6078      	str	r0, [r7, #4]
 8010004:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8010006:	683b      	ldr	r3, [r7, #0]
 8010008:	331a      	adds	r3, #26
 801000a:	4618      	mov	r0, r3
 801000c:	f7fe ff8c 	bl	800ef28 <ld_word>
 8010010:	4603      	mov	r3, r0
 8010012:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	781b      	ldrb	r3, [r3, #0]
 8010018:	2b03      	cmp	r3, #3
 801001a:	d109      	bne.n	8010030 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801001c:	683b      	ldr	r3, [r7, #0]
 801001e:	3314      	adds	r3, #20
 8010020:	4618      	mov	r0, r3
 8010022:	f7fe ff81 	bl	800ef28 <ld_word>
 8010026:	4603      	mov	r3, r0
 8010028:	041b      	lsls	r3, r3, #16
 801002a:	68fa      	ldr	r2, [r7, #12]
 801002c:	4313      	orrs	r3, r2
 801002e:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8010030:	68fb      	ldr	r3, [r7, #12]
}
 8010032:	4618      	mov	r0, r3
 8010034:	3710      	adds	r7, #16
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}

0801003a <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801003a:	b580      	push	{r7, lr}
 801003c:	b084      	sub	sp, #16
 801003e:	af00      	add	r7, sp, #0
 8010040:	60f8      	str	r0, [r7, #12]
 8010042:	60b9      	str	r1, [r7, #8]
 8010044:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010046:	68bb      	ldr	r3, [r7, #8]
 8010048:	331a      	adds	r3, #26
 801004a:	687a      	ldr	r2, [r7, #4]
 801004c:	b292      	uxth	r2, r2
 801004e:	4611      	mov	r1, r2
 8010050:	4618      	mov	r0, r3
 8010052:	f7fe ffa4 	bl	800ef9e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010056:	68fb      	ldr	r3, [r7, #12]
 8010058:	781b      	ldrb	r3, [r3, #0]
 801005a:	2b03      	cmp	r3, #3
 801005c:	d109      	bne.n	8010072 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	f103 0214 	add.w	r2, r3, #20
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	0c1b      	lsrs	r3, r3, #16
 8010068:	b29b      	uxth	r3, r3
 801006a:	4619      	mov	r1, r3
 801006c:	4610      	mov	r0, r2
 801006e:	f7fe ff96 	bl	800ef9e <st_word>
	}
}
 8010072:	bf00      	nop
 8010074:	3710      	adds	r7, #16
 8010076:	46bd      	mov	sp, r7
 8010078:	bd80      	pop	{r7, pc}
	...

0801007c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801007c:	b590      	push	{r4, r7, lr}
 801007e:	b087      	sub	sp, #28
 8010080:	af00      	add	r7, sp, #0
 8010082:	6078      	str	r0, [r7, #4]
 8010084:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8010086:	683b      	ldr	r3, [r7, #0]
 8010088:	331a      	adds	r3, #26
 801008a:	4618      	mov	r0, r3
 801008c:	f7fe ff4c 	bl	800ef28 <ld_word>
 8010090:	4603      	mov	r3, r0
 8010092:	2b00      	cmp	r3, #0
 8010094:	d001      	beq.n	801009a <cmp_lfn+0x1e>
 8010096:	2300      	movs	r3, #0
 8010098:	e059      	b.n	801014e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801009a:	683b      	ldr	r3, [r7, #0]
 801009c:	781b      	ldrb	r3, [r3, #0]
 801009e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80100a2:	1e5a      	subs	r2, r3, #1
 80100a4:	4613      	mov	r3, r2
 80100a6:	005b      	lsls	r3, r3, #1
 80100a8:	4413      	add	r3, r2
 80100aa:	009b      	lsls	r3, r3, #2
 80100ac:	4413      	add	r3, r2
 80100ae:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80100b0:	2301      	movs	r3, #1
 80100b2:	81fb      	strh	r3, [r7, #14]
 80100b4:	2300      	movs	r3, #0
 80100b6:	613b      	str	r3, [r7, #16]
 80100b8:	e033      	b.n	8010122 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80100ba:	4a27      	ldr	r2, [pc, #156]	; (8010158 <cmp_lfn+0xdc>)
 80100bc:	693b      	ldr	r3, [r7, #16]
 80100be:	4413      	add	r3, r2
 80100c0:	781b      	ldrb	r3, [r3, #0]
 80100c2:	461a      	mov	r2, r3
 80100c4:	683b      	ldr	r3, [r7, #0]
 80100c6:	4413      	add	r3, r2
 80100c8:	4618      	mov	r0, r3
 80100ca:	f7fe ff2d 	bl	800ef28 <ld_word>
 80100ce:	4603      	mov	r3, r0
 80100d0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80100d2:	89fb      	ldrh	r3, [r7, #14]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d01a      	beq.n	801010e <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	2bfe      	cmp	r3, #254	; 0xfe
 80100dc:	d812      	bhi.n	8010104 <cmp_lfn+0x88>
 80100de:	89bb      	ldrh	r3, [r7, #12]
 80100e0:	4618      	mov	r0, r3
 80100e2:	f002 f909 	bl	80122f8 <ff_wtoupper>
 80100e6:	4603      	mov	r3, r0
 80100e8:	461c      	mov	r4, r3
 80100ea:	697b      	ldr	r3, [r7, #20]
 80100ec:	1c5a      	adds	r2, r3, #1
 80100ee:	617a      	str	r2, [r7, #20]
 80100f0:	005b      	lsls	r3, r3, #1
 80100f2:	687a      	ldr	r2, [r7, #4]
 80100f4:	4413      	add	r3, r2
 80100f6:	881b      	ldrh	r3, [r3, #0]
 80100f8:	4618      	mov	r0, r3
 80100fa:	f002 f8fd 	bl	80122f8 <ff_wtoupper>
 80100fe:	4603      	mov	r3, r0
 8010100:	429c      	cmp	r4, r3
 8010102:	d001      	beq.n	8010108 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8010104:	2300      	movs	r3, #0
 8010106:	e022      	b.n	801014e <cmp_lfn+0xd2>
			}
			wc = uc;
 8010108:	89bb      	ldrh	r3, [r7, #12]
 801010a:	81fb      	strh	r3, [r7, #14]
 801010c:	e006      	b.n	801011c <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 801010e:	89bb      	ldrh	r3, [r7, #12]
 8010110:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010114:	4293      	cmp	r3, r2
 8010116:	d001      	beq.n	801011c <cmp_lfn+0xa0>
 8010118:	2300      	movs	r3, #0
 801011a:	e018      	b.n	801014e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 801011c:	693b      	ldr	r3, [r7, #16]
 801011e:	3301      	adds	r3, #1
 8010120:	613b      	str	r3, [r7, #16]
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	2b0c      	cmp	r3, #12
 8010126:	d9c8      	bls.n	80100ba <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8010128:	683b      	ldr	r3, [r7, #0]
 801012a:	781b      	ldrb	r3, [r3, #0]
 801012c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010130:	2b00      	cmp	r3, #0
 8010132:	d00b      	beq.n	801014c <cmp_lfn+0xd0>
 8010134:	89fb      	ldrh	r3, [r7, #14]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d008      	beq.n	801014c <cmp_lfn+0xd0>
 801013a:	697b      	ldr	r3, [r7, #20]
 801013c:	005b      	lsls	r3, r3, #1
 801013e:	687a      	ldr	r2, [r7, #4]
 8010140:	4413      	add	r3, r2
 8010142:	881b      	ldrh	r3, [r3, #0]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d001      	beq.n	801014c <cmp_lfn+0xd0>
 8010148:	2300      	movs	r3, #0
 801014a:	e000      	b.n	801014e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 801014c:	2301      	movs	r3, #1
}
 801014e:	4618      	mov	r0, r3
 8010150:	371c      	adds	r7, #28
 8010152:	46bd      	mov	sp, r7
 8010154:	bd90      	pop	{r4, r7, pc}
 8010156:	bf00      	nop
 8010158:	0801e348 	.word	0x0801e348

0801015c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b088      	sub	sp, #32
 8010160:	af00      	add	r7, sp, #0
 8010162:	60f8      	str	r0, [r7, #12]
 8010164:	60b9      	str	r1, [r7, #8]
 8010166:	4611      	mov	r1, r2
 8010168:	461a      	mov	r2, r3
 801016a:	460b      	mov	r3, r1
 801016c:	71fb      	strb	r3, [r7, #7]
 801016e:	4613      	mov	r3, r2
 8010170:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8010172:	68bb      	ldr	r3, [r7, #8]
 8010174:	330d      	adds	r3, #13
 8010176:	79ba      	ldrb	r2, [r7, #6]
 8010178:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 801017a:	68bb      	ldr	r3, [r7, #8]
 801017c:	330b      	adds	r3, #11
 801017e:	220f      	movs	r2, #15
 8010180:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8010182:	68bb      	ldr	r3, [r7, #8]
 8010184:	330c      	adds	r3, #12
 8010186:	2200      	movs	r2, #0
 8010188:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 801018a:	68bb      	ldr	r3, [r7, #8]
 801018c:	331a      	adds	r3, #26
 801018e:	2100      	movs	r1, #0
 8010190:	4618      	mov	r0, r3
 8010192:	f7fe ff04 	bl	800ef9e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8010196:	79fb      	ldrb	r3, [r7, #7]
 8010198:	1e5a      	subs	r2, r3, #1
 801019a:	4613      	mov	r3, r2
 801019c:	005b      	lsls	r3, r3, #1
 801019e:	4413      	add	r3, r2
 80101a0:	009b      	lsls	r3, r3, #2
 80101a2:	4413      	add	r3, r2
 80101a4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80101a6:	2300      	movs	r3, #0
 80101a8:	82fb      	strh	r3, [r7, #22]
 80101aa:	2300      	movs	r3, #0
 80101ac:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80101ae:	8afb      	ldrh	r3, [r7, #22]
 80101b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80101b4:	4293      	cmp	r3, r2
 80101b6:	d007      	beq.n	80101c8 <put_lfn+0x6c>
 80101b8:	69fb      	ldr	r3, [r7, #28]
 80101ba:	1c5a      	adds	r2, r3, #1
 80101bc:	61fa      	str	r2, [r7, #28]
 80101be:	005b      	lsls	r3, r3, #1
 80101c0:	68fa      	ldr	r2, [r7, #12]
 80101c2:	4413      	add	r3, r2
 80101c4:	881b      	ldrh	r3, [r3, #0]
 80101c6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80101c8:	4a17      	ldr	r2, [pc, #92]	; (8010228 <put_lfn+0xcc>)
 80101ca:	69bb      	ldr	r3, [r7, #24]
 80101cc:	4413      	add	r3, r2
 80101ce:	781b      	ldrb	r3, [r3, #0]
 80101d0:	461a      	mov	r2, r3
 80101d2:	68bb      	ldr	r3, [r7, #8]
 80101d4:	4413      	add	r3, r2
 80101d6:	8afa      	ldrh	r2, [r7, #22]
 80101d8:	4611      	mov	r1, r2
 80101da:	4618      	mov	r0, r3
 80101dc:	f7fe fedf 	bl	800ef9e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80101e0:	8afb      	ldrh	r3, [r7, #22]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d102      	bne.n	80101ec <put_lfn+0x90>
 80101e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80101ea:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80101ec:	69bb      	ldr	r3, [r7, #24]
 80101ee:	3301      	adds	r3, #1
 80101f0:	61bb      	str	r3, [r7, #24]
 80101f2:	69bb      	ldr	r3, [r7, #24]
 80101f4:	2b0c      	cmp	r3, #12
 80101f6:	d9da      	bls.n	80101ae <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80101f8:	8afb      	ldrh	r3, [r7, #22]
 80101fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80101fe:	4293      	cmp	r3, r2
 8010200:	d006      	beq.n	8010210 <put_lfn+0xb4>
 8010202:	69fb      	ldr	r3, [r7, #28]
 8010204:	005b      	lsls	r3, r3, #1
 8010206:	68fa      	ldr	r2, [r7, #12]
 8010208:	4413      	add	r3, r2
 801020a:	881b      	ldrh	r3, [r3, #0]
 801020c:	2b00      	cmp	r3, #0
 801020e:	d103      	bne.n	8010218 <put_lfn+0xbc>
 8010210:	79fb      	ldrb	r3, [r7, #7]
 8010212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010216:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	79fa      	ldrb	r2, [r7, #7]
 801021c:	701a      	strb	r2, [r3, #0]
}
 801021e:	bf00      	nop
 8010220:	3720      	adds	r7, #32
 8010222:	46bd      	mov	sp, r7
 8010224:	bd80      	pop	{r7, pc}
 8010226:	bf00      	nop
 8010228:	0801e348 	.word	0x0801e348

0801022c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 801022c:	b580      	push	{r7, lr}
 801022e:	b08c      	sub	sp, #48	; 0x30
 8010230:	af00      	add	r7, sp, #0
 8010232:	60f8      	str	r0, [r7, #12]
 8010234:	60b9      	str	r1, [r7, #8]
 8010236:	607a      	str	r2, [r7, #4]
 8010238:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 801023a:	220b      	movs	r2, #11
 801023c:	68b9      	ldr	r1, [r7, #8]
 801023e:	68f8      	ldr	r0, [r7, #12]
 8010240:	f7fe fef4 	bl	800f02c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8010244:	683b      	ldr	r3, [r7, #0]
 8010246:	2b05      	cmp	r3, #5
 8010248:	d92b      	bls.n	80102a2 <gen_numname+0x76>
		sr = seq;
 801024a:	683b      	ldr	r3, [r7, #0]
 801024c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 801024e:	e022      	b.n	8010296 <gen_numname+0x6a>
			wc = *lfn++;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	1c9a      	adds	r2, r3, #2
 8010254:	607a      	str	r2, [r7, #4]
 8010256:	881b      	ldrh	r3, [r3, #0]
 8010258:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 801025a:	2300      	movs	r3, #0
 801025c:	62bb      	str	r3, [r7, #40]	; 0x28
 801025e:	e017      	b.n	8010290 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8010260:	69fb      	ldr	r3, [r7, #28]
 8010262:	005a      	lsls	r2, r3, #1
 8010264:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010266:	f003 0301 	and.w	r3, r3, #1
 801026a:	4413      	add	r3, r2
 801026c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 801026e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010270:	085b      	lsrs	r3, r3, #1
 8010272:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8010274:	69fb      	ldr	r3, [r7, #28]
 8010276:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 801027a:	2b00      	cmp	r3, #0
 801027c:	d005      	beq.n	801028a <gen_numname+0x5e>
 801027e:	69fb      	ldr	r3, [r7, #28]
 8010280:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8010284:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8010288:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801028a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801028c:	3301      	adds	r3, #1
 801028e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010292:	2b0f      	cmp	r3, #15
 8010294:	d9e4      	bls.n	8010260 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	881b      	ldrh	r3, [r3, #0]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d1d8      	bne.n	8010250 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 801029e:	69fb      	ldr	r3, [r7, #28]
 80102a0:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 80102a2:	2307      	movs	r3, #7
 80102a4:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 80102a6:	683b      	ldr	r3, [r7, #0]
 80102a8:	b2db      	uxtb	r3, r3
 80102aa:	f003 030f 	and.w	r3, r3, #15
 80102ae:	b2db      	uxtb	r3, r3
 80102b0:	3330      	adds	r3, #48	; 0x30
 80102b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 80102b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80102ba:	2b39      	cmp	r3, #57	; 0x39
 80102bc:	d904      	bls.n	80102c8 <gen_numname+0x9c>
 80102be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80102c2:	3307      	adds	r3, #7
 80102c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 80102c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ca:	1e5a      	subs	r2, r3, #1
 80102cc:	62ba      	str	r2, [r7, #40]	; 0x28
 80102ce:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80102d2:	4413      	add	r3, r2
 80102d4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80102d8:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80102dc:	683b      	ldr	r3, [r7, #0]
 80102de:	091b      	lsrs	r3, r3, #4
 80102e0:	603b      	str	r3, [r7, #0]
	} while (seq);
 80102e2:	683b      	ldr	r3, [r7, #0]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d1de      	bne.n	80102a6 <gen_numname+0x7a>
	ns[i] = '~';
 80102e8:	f107 0214 	add.w	r2, r7, #20
 80102ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ee:	4413      	add	r3, r2
 80102f0:	227e      	movs	r2, #126	; 0x7e
 80102f2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80102f4:	2300      	movs	r3, #0
 80102f6:	627b      	str	r3, [r7, #36]	; 0x24
 80102f8:	e002      	b.n	8010300 <gen_numname+0xd4>
 80102fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102fc:	3301      	adds	r3, #1
 80102fe:	627b      	str	r3, [r7, #36]	; 0x24
 8010300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010304:	429a      	cmp	r2, r3
 8010306:	d205      	bcs.n	8010314 <gen_numname+0xe8>
 8010308:	68fa      	ldr	r2, [r7, #12]
 801030a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801030c:	4413      	add	r3, r2
 801030e:	781b      	ldrb	r3, [r3, #0]
 8010310:	2b20      	cmp	r3, #32
 8010312:	d1f2      	bne.n	80102fa <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010316:	2b07      	cmp	r3, #7
 8010318:	d808      	bhi.n	801032c <gen_numname+0x100>
 801031a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801031c:	1c5a      	adds	r2, r3, #1
 801031e:	62ba      	str	r2, [r7, #40]	; 0x28
 8010320:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010324:	4413      	add	r3, r2
 8010326:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 801032a:	e000      	b.n	801032e <gen_numname+0x102>
 801032c:	2120      	movs	r1, #32
 801032e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010330:	1c5a      	adds	r2, r3, #1
 8010332:	627a      	str	r2, [r7, #36]	; 0x24
 8010334:	68fa      	ldr	r2, [r7, #12]
 8010336:	4413      	add	r3, r2
 8010338:	460a      	mov	r2, r1
 801033a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 801033c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801033e:	2b07      	cmp	r3, #7
 8010340:	d9e8      	bls.n	8010314 <gen_numname+0xe8>
}
 8010342:	bf00      	nop
 8010344:	bf00      	nop
 8010346:	3730      	adds	r7, #48	; 0x30
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}

0801034c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 801034c:	b480      	push	{r7}
 801034e:	b085      	sub	sp, #20
 8010350:	af00      	add	r7, sp, #0
 8010352:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8010354:	2300      	movs	r3, #0
 8010356:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8010358:	230b      	movs	r3, #11
 801035a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 801035c:	7bfb      	ldrb	r3, [r7, #15]
 801035e:	b2da      	uxtb	r2, r3
 8010360:	0852      	lsrs	r2, r2, #1
 8010362:	01db      	lsls	r3, r3, #7
 8010364:	4313      	orrs	r3, r2
 8010366:	b2da      	uxtb	r2, r3
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	1c59      	adds	r1, r3, #1
 801036c:	6079      	str	r1, [r7, #4]
 801036e:	781b      	ldrb	r3, [r3, #0]
 8010370:	4413      	add	r3, r2
 8010372:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8010374:	68bb      	ldr	r3, [r7, #8]
 8010376:	3b01      	subs	r3, #1
 8010378:	60bb      	str	r3, [r7, #8]
 801037a:	68bb      	ldr	r3, [r7, #8]
 801037c:	2b00      	cmp	r3, #0
 801037e:	d1ed      	bne.n	801035c <sum_sfn+0x10>
	return sum;
 8010380:	7bfb      	ldrb	r3, [r7, #15]
}
 8010382:	4618      	mov	r0, r3
 8010384:	3714      	adds	r7, #20
 8010386:	46bd      	mov	sp, r7
 8010388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038c:	4770      	bx	lr

0801038e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 801038e:	b580      	push	{r7, lr}
 8010390:	b086      	sub	sp, #24
 8010392:	af00      	add	r7, sp, #0
 8010394:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 801039c:	2100      	movs	r1, #0
 801039e:	6878      	ldr	r0, [r7, #4]
 80103a0:	f7ff fc86 	bl	800fcb0 <dir_sdi>
 80103a4:	4603      	mov	r3, r0
 80103a6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80103a8:	7dfb      	ldrb	r3, [r7, #23]
 80103aa:	2b00      	cmp	r3, #0
 80103ac:	d001      	beq.n	80103b2 <dir_find+0x24>
 80103ae:	7dfb      	ldrb	r3, [r7, #23]
 80103b0:	e0a9      	b.n	8010506 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80103b2:	23ff      	movs	r3, #255	; 0xff
 80103b4:	753b      	strb	r3, [r7, #20]
 80103b6:	7d3b      	ldrb	r3, [r7, #20]
 80103b8:	757b      	strb	r3, [r7, #21]
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80103c0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	69db      	ldr	r3, [r3, #28]
 80103c6:	4619      	mov	r1, r3
 80103c8:	6938      	ldr	r0, [r7, #16]
 80103ca:	f7ff f88f 	bl	800f4ec <move_window>
 80103ce:	4603      	mov	r3, r0
 80103d0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80103d2:	7dfb      	ldrb	r3, [r7, #23]
 80103d4:	2b00      	cmp	r3, #0
 80103d6:	f040 8090 	bne.w	80104fa <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	6a1b      	ldr	r3, [r3, #32]
 80103de:	781b      	ldrb	r3, [r3, #0]
 80103e0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80103e2:	7dbb      	ldrb	r3, [r7, #22]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d102      	bne.n	80103ee <dir_find+0x60>
 80103e8:	2304      	movs	r3, #4
 80103ea:	75fb      	strb	r3, [r7, #23]
 80103ec:	e08a      	b.n	8010504 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	6a1b      	ldr	r3, [r3, #32]
 80103f2:	330b      	adds	r3, #11
 80103f4:	781b      	ldrb	r3, [r3, #0]
 80103f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80103fa:	73fb      	strb	r3, [r7, #15]
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	7bfa      	ldrb	r2, [r7, #15]
 8010400:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8010402:	7dbb      	ldrb	r3, [r7, #22]
 8010404:	2be5      	cmp	r3, #229	; 0xe5
 8010406:	d007      	beq.n	8010418 <dir_find+0x8a>
 8010408:	7bfb      	ldrb	r3, [r7, #15]
 801040a:	f003 0308 	and.w	r3, r3, #8
 801040e:	2b00      	cmp	r3, #0
 8010410:	d009      	beq.n	8010426 <dir_find+0x98>
 8010412:	7bfb      	ldrb	r3, [r7, #15]
 8010414:	2b0f      	cmp	r3, #15
 8010416:	d006      	beq.n	8010426 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010418:	23ff      	movs	r3, #255	; 0xff
 801041a:	757b      	strb	r3, [r7, #21]
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010422:	631a      	str	r2, [r3, #48]	; 0x30
 8010424:	e05e      	b.n	80104e4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8010426:	7bfb      	ldrb	r3, [r7, #15]
 8010428:	2b0f      	cmp	r3, #15
 801042a:	d136      	bne.n	801049a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010436:	2b00      	cmp	r3, #0
 8010438:	d154      	bne.n	80104e4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 801043a:	7dbb      	ldrb	r3, [r7, #22]
 801043c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010440:	2b00      	cmp	r3, #0
 8010442:	d00d      	beq.n	8010460 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	6a1b      	ldr	r3, [r3, #32]
 8010448:	7b5b      	ldrb	r3, [r3, #13]
 801044a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 801044c:	7dbb      	ldrb	r3, [r7, #22]
 801044e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010452:	75bb      	strb	r3, [r7, #22]
 8010454:	7dbb      	ldrb	r3, [r7, #22]
 8010456:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	695a      	ldr	r2, [r3, #20]
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010460:	7dba      	ldrb	r2, [r7, #22]
 8010462:	7d7b      	ldrb	r3, [r7, #21]
 8010464:	429a      	cmp	r2, r3
 8010466:	d115      	bne.n	8010494 <dir_find+0x106>
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	6a1b      	ldr	r3, [r3, #32]
 801046c:	330d      	adds	r3, #13
 801046e:	781b      	ldrb	r3, [r3, #0]
 8010470:	7d3a      	ldrb	r2, [r7, #20]
 8010472:	429a      	cmp	r2, r3
 8010474:	d10e      	bne.n	8010494 <dir_find+0x106>
 8010476:	693b      	ldr	r3, [r7, #16]
 8010478:	691a      	ldr	r2, [r3, #16]
 801047a:	687b      	ldr	r3, [r7, #4]
 801047c:	6a1b      	ldr	r3, [r3, #32]
 801047e:	4619      	mov	r1, r3
 8010480:	4610      	mov	r0, r2
 8010482:	f7ff fdfb 	bl	801007c <cmp_lfn>
 8010486:	4603      	mov	r3, r0
 8010488:	2b00      	cmp	r3, #0
 801048a:	d003      	beq.n	8010494 <dir_find+0x106>
 801048c:	7d7b      	ldrb	r3, [r7, #21]
 801048e:	3b01      	subs	r3, #1
 8010490:	b2db      	uxtb	r3, r3
 8010492:	e000      	b.n	8010496 <dir_find+0x108>
 8010494:	23ff      	movs	r3, #255	; 0xff
 8010496:	757b      	strb	r3, [r7, #21]
 8010498:	e024      	b.n	80104e4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801049a:	7d7b      	ldrb	r3, [r7, #21]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d109      	bne.n	80104b4 <dir_find+0x126>
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	6a1b      	ldr	r3, [r3, #32]
 80104a4:	4618      	mov	r0, r3
 80104a6:	f7ff ff51 	bl	801034c <sum_sfn>
 80104aa:	4603      	mov	r3, r0
 80104ac:	461a      	mov	r2, r3
 80104ae:	7d3b      	ldrb	r3, [r7, #20]
 80104b0:	4293      	cmp	r3, r2
 80104b2:	d024      	beq.n	80104fe <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80104ba:	f003 0301 	and.w	r3, r3, #1
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d10a      	bne.n	80104d8 <dir_find+0x14a>
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	6a18      	ldr	r0, [r3, #32]
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	3324      	adds	r3, #36	; 0x24
 80104ca:	220b      	movs	r2, #11
 80104cc:	4619      	mov	r1, r3
 80104ce:	f7fe fde9 	bl	800f0a4 <mem_cmp>
 80104d2:	4603      	mov	r3, r0
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d014      	beq.n	8010502 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80104d8:	23ff      	movs	r3, #255	; 0xff
 80104da:	757b      	strb	r3, [r7, #21]
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80104e2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80104e4:	2100      	movs	r1, #0
 80104e6:	6878      	ldr	r0, [r7, #4]
 80104e8:	f7ff fc6b 	bl	800fdc2 <dir_next>
 80104ec:	4603      	mov	r3, r0
 80104ee:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80104f0:	7dfb      	ldrb	r3, [r7, #23]
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	f43f af65 	beq.w	80103c2 <dir_find+0x34>
 80104f8:	e004      	b.n	8010504 <dir_find+0x176>
		if (res != FR_OK) break;
 80104fa:	bf00      	nop
 80104fc:	e002      	b.n	8010504 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80104fe:	bf00      	nop
 8010500:	e000      	b.n	8010504 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010502:	bf00      	nop

	return res;
 8010504:	7dfb      	ldrb	r3, [r7, #23]
}
 8010506:	4618      	mov	r0, r3
 8010508:	3718      	adds	r7, #24
 801050a:	46bd      	mov	sp, r7
 801050c:	bd80      	pop	{r7, pc}
	...

08010510 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010510:	b580      	push	{r7, lr}
 8010512:	b08c      	sub	sp, #48	; 0x30
 8010514:	af00      	add	r7, sp, #0
 8010516:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010524:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8010528:	2b00      	cmp	r3, #0
 801052a:	d001      	beq.n	8010530 <dir_register+0x20>
 801052c:	2306      	movs	r3, #6
 801052e:	e0e0      	b.n	80106f2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8010530:	2300      	movs	r3, #0
 8010532:	627b      	str	r3, [r7, #36]	; 0x24
 8010534:	e002      	b.n	801053c <dir_register+0x2c>
 8010536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010538:	3301      	adds	r3, #1
 801053a:	627b      	str	r3, [r7, #36]	; 0x24
 801053c:	69fb      	ldr	r3, [r7, #28]
 801053e:	691a      	ldr	r2, [r3, #16]
 8010540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010542:	005b      	lsls	r3, r3, #1
 8010544:	4413      	add	r3, r2
 8010546:	881b      	ldrh	r3, [r3, #0]
 8010548:	2b00      	cmp	r3, #0
 801054a:	d1f4      	bne.n	8010536 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8010552:	f107 030c 	add.w	r3, r7, #12
 8010556:	220c      	movs	r2, #12
 8010558:	4618      	mov	r0, r3
 801055a:	f7fe fd67 	bl	800f02c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 801055e:	7dfb      	ldrb	r3, [r7, #23]
 8010560:	f003 0301 	and.w	r3, r3, #1
 8010564:	2b00      	cmp	r3, #0
 8010566:	d032      	beq.n	80105ce <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2240      	movs	r2, #64	; 0x40
 801056c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8010570:	2301      	movs	r3, #1
 8010572:	62bb      	str	r3, [r7, #40]	; 0x28
 8010574:	e016      	b.n	80105a4 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	f103 0024 	add.w	r0, r3, #36	; 0x24
 801057c:	69fb      	ldr	r3, [r7, #28]
 801057e:	691a      	ldr	r2, [r3, #16]
 8010580:	f107 010c 	add.w	r1, r7, #12
 8010584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010586:	f7ff fe51 	bl	801022c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f7ff feff 	bl	801038e <dir_find>
 8010590:	4603      	mov	r3, r0
 8010592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8010596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801059a:	2b00      	cmp	r3, #0
 801059c:	d106      	bne.n	80105ac <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 801059e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105a0:	3301      	adds	r3, #1
 80105a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80105a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105a6:	2b63      	cmp	r3, #99	; 0x63
 80105a8:	d9e5      	bls.n	8010576 <dir_register+0x66>
 80105aa:	e000      	b.n	80105ae <dir_register+0x9e>
			if (res != FR_OK) break;
 80105ac:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80105ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105b0:	2b64      	cmp	r3, #100	; 0x64
 80105b2:	d101      	bne.n	80105b8 <dir_register+0xa8>
 80105b4:	2307      	movs	r3, #7
 80105b6:	e09c      	b.n	80106f2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80105b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80105bc:	2b04      	cmp	r3, #4
 80105be:	d002      	beq.n	80105c6 <dir_register+0xb6>
 80105c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80105c4:	e095      	b.n	80106f2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80105c6:	7dfa      	ldrb	r2, [r7, #23]
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80105ce:	7dfb      	ldrb	r3, [r7, #23]
 80105d0:	f003 0302 	and.w	r3, r3, #2
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d007      	beq.n	80105e8 <dir_register+0xd8>
 80105d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105da:	330c      	adds	r3, #12
 80105dc:	4a47      	ldr	r2, [pc, #284]	; (80106fc <dir_register+0x1ec>)
 80105de:	fba2 2303 	umull	r2, r3, r2, r3
 80105e2:	089b      	lsrs	r3, r3, #2
 80105e4:	3301      	adds	r3, #1
 80105e6:	e000      	b.n	80105ea <dir_register+0xda>
 80105e8:	2301      	movs	r3, #1
 80105ea:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80105ec:	6a39      	ldr	r1, [r7, #32]
 80105ee:	6878      	ldr	r0, [r7, #4]
 80105f0:	f7ff fcbd 	bl	800ff6e <dir_alloc>
 80105f4:	4603      	mov	r3, r0
 80105f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80105fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d148      	bne.n	8010694 <dir_register+0x184>
 8010602:	6a3b      	ldr	r3, [r7, #32]
 8010604:	3b01      	subs	r3, #1
 8010606:	623b      	str	r3, [r7, #32]
 8010608:	6a3b      	ldr	r3, [r7, #32]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d042      	beq.n	8010694 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	695a      	ldr	r2, [r3, #20]
 8010612:	6a3b      	ldr	r3, [r7, #32]
 8010614:	015b      	lsls	r3, r3, #5
 8010616:	1ad3      	subs	r3, r2, r3
 8010618:	4619      	mov	r1, r3
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	f7ff fb48 	bl	800fcb0 <dir_sdi>
 8010620:	4603      	mov	r3, r0
 8010622:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8010626:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801062a:	2b00      	cmp	r3, #0
 801062c:	d132      	bne.n	8010694 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	3324      	adds	r3, #36	; 0x24
 8010632:	4618      	mov	r0, r3
 8010634:	f7ff fe8a 	bl	801034c <sum_sfn>
 8010638:	4603      	mov	r3, r0
 801063a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	69db      	ldr	r3, [r3, #28]
 8010640:	4619      	mov	r1, r3
 8010642:	69f8      	ldr	r0, [r7, #28]
 8010644:	f7fe ff52 	bl	800f4ec <move_window>
 8010648:	4603      	mov	r3, r0
 801064a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 801064e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010652:	2b00      	cmp	r3, #0
 8010654:	d11d      	bne.n	8010692 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8010656:	69fb      	ldr	r3, [r7, #28]
 8010658:	6918      	ldr	r0, [r3, #16]
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6a19      	ldr	r1, [r3, #32]
 801065e:	6a3b      	ldr	r3, [r7, #32]
 8010660:	b2da      	uxtb	r2, r3
 8010662:	7efb      	ldrb	r3, [r7, #27]
 8010664:	f7ff fd7a 	bl	801015c <put_lfn>
				fs->wflag = 1;
 8010668:	69fb      	ldr	r3, [r7, #28]
 801066a:	2201      	movs	r2, #1
 801066c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 801066e:	2100      	movs	r1, #0
 8010670:	6878      	ldr	r0, [r7, #4]
 8010672:	f7ff fba6 	bl	800fdc2 <dir_next>
 8010676:	4603      	mov	r3, r0
 8010678:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 801067c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010680:	2b00      	cmp	r3, #0
 8010682:	d107      	bne.n	8010694 <dir_register+0x184>
 8010684:	6a3b      	ldr	r3, [r7, #32]
 8010686:	3b01      	subs	r3, #1
 8010688:	623b      	str	r3, [r7, #32]
 801068a:	6a3b      	ldr	r3, [r7, #32]
 801068c:	2b00      	cmp	r3, #0
 801068e:	d1d5      	bne.n	801063c <dir_register+0x12c>
 8010690:	e000      	b.n	8010694 <dir_register+0x184>
				if (res != FR_OK) break;
 8010692:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010694:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010698:	2b00      	cmp	r3, #0
 801069a:	d128      	bne.n	80106ee <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	69db      	ldr	r3, [r3, #28]
 80106a0:	4619      	mov	r1, r3
 80106a2:	69f8      	ldr	r0, [r7, #28]
 80106a4:	f7fe ff22 	bl	800f4ec <move_window>
 80106a8:	4603      	mov	r3, r0
 80106aa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80106ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d11b      	bne.n	80106ee <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	6a1b      	ldr	r3, [r3, #32]
 80106ba:	2220      	movs	r2, #32
 80106bc:	2100      	movs	r1, #0
 80106be:	4618      	mov	r0, r3
 80106c0:	f7fe fcd5 	bl	800f06e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	6a18      	ldr	r0, [r3, #32]
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	3324      	adds	r3, #36	; 0x24
 80106cc:	220b      	movs	r2, #11
 80106ce:	4619      	mov	r1, r3
 80106d0:	f7fe fcac 	bl	800f02c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	6a1b      	ldr	r3, [r3, #32]
 80106de:	330c      	adds	r3, #12
 80106e0:	f002 0218 	and.w	r2, r2, #24
 80106e4:	b2d2      	uxtb	r2, r2
 80106e6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80106e8:	69fb      	ldr	r3, [r7, #28]
 80106ea:	2201      	movs	r2, #1
 80106ec:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80106ee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80106f2:	4618      	mov	r0, r3
 80106f4:	3730      	adds	r7, #48	; 0x30
 80106f6:	46bd      	mov	sp, r7
 80106f8:	bd80      	pop	{r7, pc}
 80106fa:	bf00      	nop
 80106fc:	4ec4ec4f 	.word	0x4ec4ec4f

08010700 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8010700:	b580      	push	{r7, lr}
 8010702:	b088      	sub	sp, #32
 8010704:	af00      	add	r7, sp, #0
 8010706:	6078      	str	r0, [r7, #4]
 8010708:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8010710:	683b      	ldr	r3, [r7, #0]
 8010712:	2200      	movs	r2, #0
 8010714:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	69db      	ldr	r3, [r3, #28]
 801071a:	2b00      	cmp	r3, #0
 801071c:	f000 80c9 	beq.w	80108b2 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010728:	d032      	beq.n	8010790 <get_fileinfo+0x90>
			i = j = 0;
 801072a:	2300      	movs	r3, #0
 801072c:	61bb      	str	r3, [r7, #24]
 801072e:	69bb      	ldr	r3, [r7, #24]
 8010730:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8010732:	e01b      	b.n	801076c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8010734:	89fb      	ldrh	r3, [r7, #14]
 8010736:	2100      	movs	r1, #0
 8010738:	4618      	mov	r0, r3
 801073a:	f001 fda1 	bl	8012280 <ff_convert>
 801073e:	4603      	mov	r3, r0
 8010740:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8010742:	89fb      	ldrh	r3, [r7, #14]
 8010744:	2b00      	cmp	r3, #0
 8010746:	d102      	bne.n	801074e <get_fileinfo+0x4e>
 8010748:	2300      	movs	r3, #0
 801074a:	61fb      	str	r3, [r7, #28]
 801074c:	e01a      	b.n	8010784 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801074e:	69fb      	ldr	r3, [r7, #28]
 8010750:	2bfe      	cmp	r3, #254	; 0xfe
 8010752:	d902      	bls.n	801075a <get_fileinfo+0x5a>
 8010754:	2300      	movs	r3, #0
 8010756:	61fb      	str	r3, [r7, #28]
 8010758:	e014      	b.n	8010784 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 801075a:	69fb      	ldr	r3, [r7, #28]
 801075c:	1c5a      	adds	r2, r3, #1
 801075e:	61fa      	str	r2, [r7, #28]
 8010760:	89fa      	ldrh	r2, [r7, #14]
 8010762:	b2d1      	uxtb	r1, r2
 8010764:	683a      	ldr	r2, [r7, #0]
 8010766:	4413      	add	r3, r2
 8010768:	460a      	mov	r2, r1
 801076a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801076c:	693b      	ldr	r3, [r7, #16]
 801076e:	691a      	ldr	r2, [r3, #16]
 8010770:	69bb      	ldr	r3, [r7, #24]
 8010772:	1c59      	adds	r1, r3, #1
 8010774:	61b9      	str	r1, [r7, #24]
 8010776:	005b      	lsls	r3, r3, #1
 8010778:	4413      	add	r3, r2
 801077a:	881b      	ldrh	r3, [r3, #0]
 801077c:	81fb      	strh	r3, [r7, #14]
 801077e:	89fb      	ldrh	r3, [r7, #14]
 8010780:	2b00      	cmp	r3, #0
 8010782:	d1d7      	bne.n	8010734 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8010784:	683a      	ldr	r2, [r7, #0]
 8010786:	69fb      	ldr	r3, [r7, #28]
 8010788:	4413      	add	r3, r2
 801078a:	3316      	adds	r3, #22
 801078c:	2200      	movs	r2, #0
 801078e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8010790:	2300      	movs	r3, #0
 8010792:	61bb      	str	r3, [r7, #24]
 8010794:	69bb      	ldr	r3, [r7, #24]
 8010796:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8010798:	683a      	ldr	r2, [r7, #0]
 801079a:	69fb      	ldr	r3, [r7, #28]
 801079c:	4413      	add	r3, r2
 801079e:	3316      	adds	r3, #22
 80107a0:	781b      	ldrb	r3, [r3, #0]
 80107a2:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 80107a4:	e04c      	b.n	8010840 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	6a1a      	ldr	r2, [r3, #32]
 80107aa:	69fb      	ldr	r3, [r7, #28]
 80107ac:	1c59      	adds	r1, r3, #1
 80107ae:	61f9      	str	r1, [r7, #28]
 80107b0:	4413      	add	r3, r2
 80107b2:	781b      	ldrb	r3, [r3, #0]
 80107b4:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 80107b6:	7dfb      	ldrb	r3, [r7, #23]
 80107b8:	2b20      	cmp	r3, #32
 80107ba:	d100      	bne.n	80107be <get_fileinfo+0xbe>
 80107bc:	e040      	b.n	8010840 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 80107be:	7dfb      	ldrb	r3, [r7, #23]
 80107c0:	2b05      	cmp	r3, #5
 80107c2:	d101      	bne.n	80107c8 <get_fileinfo+0xc8>
 80107c4:	23e5      	movs	r3, #229	; 0xe5
 80107c6:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 80107c8:	69fb      	ldr	r3, [r7, #28]
 80107ca:	2b09      	cmp	r3, #9
 80107cc:	d10f      	bne.n	80107ee <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 80107ce:	89bb      	ldrh	r3, [r7, #12]
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d105      	bne.n	80107e0 <get_fileinfo+0xe0>
 80107d4:	683a      	ldr	r2, [r7, #0]
 80107d6:	69bb      	ldr	r3, [r7, #24]
 80107d8:	4413      	add	r3, r2
 80107da:	3316      	adds	r3, #22
 80107dc:	222e      	movs	r2, #46	; 0x2e
 80107de:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80107e0:	69bb      	ldr	r3, [r7, #24]
 80107e2:	1c5a      	adds	r2, r3, #1
 80107e4:	61ba      	str	r2, [r7, #24]
 80107e6:	683a      	ldr	r2, [r7, #0]
 80107e8:	4413      	add	r3, r2
 80107ea:	222e      	movs	r2, #46	; 0x2e
 80107ec:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80107ee:	683a      	ldr	r2, [r7, #0]
 80107f0:	69bb      	ldr	r3, [r7, #24]
 80107f2:	4413      	add	r3, r2
 80107f4:	3309      	adds	r3, #9
 80107f6:	7dfa      	ldrb	r2, [r7, #23]
 80107f8:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80107fa:	89bb      	ldrh	r3, [r7, #12]
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d11c      	bne.n	801083a <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 8010800:	7dfb      	ldrb	r3, [r7, #23]
 8010802:	2b40      	cmp	r3, #64	; 0x40
 8010804:	d913      	bls.n	801082e <get_fileinfo+0x12e>
 8010806:	7dfb      	ldrb	r3, [r7, #23]
 8010808:	2b5a      	cmp	r3, #90	; 0x5a
 801080a:	d810      	bhi.n	801082e <get_fileinfo+0x12e>
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	6a1b      	ldr	r3, [r3, #32]
 8010810:	330c      	adds	r3, #12
 8010812:	781b      	ldrb	r3, [r3, #0]
 8010814:	461a      	mov	r2, r3
 8010816:	69fb      	ldr	r3, [r7, #28]
 8010818:	2b08      	cmp	r3, #8
 801081a:	d901      	bls.n	8010820 <get_fileinfo+0x120>
 801081c:	2310      	movs	r3, #16
 801081e:	e000      	b.n	8010822 <get_fileinfo+0x122>
 8010820:	2308      	movs	r3, #8
 8010822:	4013      	ands	r3, r2
 8010824:	2b00      	cmp	r3, #0
 8010826:	d002      	beq.n	801082e <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 8010828:	7dfb      	ldrb	r3, [r7, #23]
 801082a:	3320      	adds	r3, #32
 801082c:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 801082e:	683a      	ldr	r2, [r7, #0]
 8010830:	69bb      	ldr	r3, [r7, #24]
 8010832:	4413      	add	r3, r2
 8010834:	3316      	adds	r3, #22
 8010836:	7dfa      	ldrb	r2, [r7, #23]
 8010838:	701a      	strb	r2, [r3, #0]
		}
		j++;
 801083a:	69bb      	ldr	r3, [r7, #24]
 801083c:	3301      	adds	r3, #1
 801083e:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8010840:	69fb      	ldr	r3, [r7, #28]
 8010842:	2b0a      	cmp	r3, #10
 8010844:	d9af      	bls.n	80107a6 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8010846:	89bb      	ldrh	r3, [r7, #12]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d10d      	bne.n	8010868 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 801084c:	683a      	ldr	r2, [r7, #0]
 801084e:	69bb      	ldr	r3, [r7, #24]
 8010850:	4413      	add	r3, r2
 8010852:	3316      	adds	r3, #22
 8010854:	2200      	movs	r2, #0
 8010856:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	6a1b      	ldr	r3, [r3, #32]
 801085c:	330c      	adds	r3, #12
 801085e:	781b      	ldrb	r3, [r3, #0]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d101      	bne.n	8010868 <get_fileinfo+0x168>
 8010864:	2300      	movs	r3, #0
 8010866:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8010868:	683a      	ldr	r2, [r7, #0]
 801086a:	69bb      	ldr	r3, [r7, #24]
 801086c:	4413      	add	r3, r2
 801086e:	3309      	adds	r3, #9
 8010870:	2200      	movs	r2, #0
 8010872:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	6a1b      	ldr	r3, [r3, #32]
 8010878:	7ada      	ldrb	r2, [r3, #11]
 801087a:	683b      	ldr	r3, [r7, #0]
 801087c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	6a1b      	ldr	r3, [r3, #32]
 8010882:	331c      	adds	r3, #28
 8010884:	4618      	mov	r0, r3
 8010886:	f7fe fb67 	bl	800ef58 <ld_dword>
 801088a:	4602      	mov	r2, r0
 801088c:	683b      	ldr	r3, [r7, #0]
 801088e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	6a1b      	ldr	r3, [r3, #32]
 8010894:	3316      	adds	r3, #22
 8010896:	4618      	mov	r0, r3
 8010898:	f7fe fb5e 	bl	800ef58 <ld_dword>
 801089c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801089e:	68bb      	ldr	r3, [r7, #8]
 80108a0:	b29a      	uxth	r2, r3
 80108a2:	683b      	ldr	r3, [r7, #0]
 80108a4:	80da      	strh	r2, [r3, #6]
 80108a6:	68bb      	ldr	r3, [r7, #8]
 80108a8:	0c1b      	lsrs	r3, r3, #16
 80108aa:	b29a      	uxth	r2, r3
 80108ac:	683b      	ldr	r3, [r7, #0]
 80108ae:	809a      	strh	r2, [r3, #4]
 80108b0:	e000      	b.n	80108b4 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80108b2:	bf00      	nop
}
 80108b4:	3720      	adds	r7, #32
 80108b6:	46bd      	mov	sp, r7
 80108b8:	bd80      	pop	{r7, pc}
	...

080108bc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b08a      	sub	sp, #40	; 0x28
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
 80108c4:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80108c6:	683b      	ldr	r3, [r7, #0]
 80108c8:	681b      	ldr	r3, [r3, #0]
 80108ca:	613b      	str	r3, [r7, #16]
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	691b      	ldr	r3, [r3, #16]
 80108d2:	60fb      	str	r3, [r7, #12]
 80108d4:	2300      	movs	r3, #0
 80108d6:	617b      	str	r3, [r7, #20]
 80108d8:	697b      	ldr	r3, [r7, #20]
 80108da:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80108dc:	69bb      	ldr	r3, [r7, #24]
 80108de:	1c5a      	adds	r2, r3, #1
 80108e0:	61ba      	str	r2, [r7, #24]
 80108e2:	693a      	ldr	r2, [r7, #16]
 80108e4:	4413      	add	r3, r2
 80108e6:	781b      	ldrb	r3, [r3, #0]
 80108e8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80108ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80108ec:	2b1f      	cmp	r3, #31
 80108ee:	d940      	bls.n	8010972 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80108f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80108f2:	2b2f      	cmp	r3, #47	; 0x2f
 80108f4:	d006      	beq.n	8010904 <create_name+0x48>
 80108f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80108f8:	2b5c      	cmp	r3, #92	; 0x5c
 80108fa:	d110      	bne.n	801091e <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80108fc:	e002      	b.n	8010904 <create_name+0x48>
 80108fe:	69bb      	ldr	r3, [r7, #24]
 8010900:	3301      	adds	r3, #1
 8010902:	61bb      	str	r3, [r7, #24]
 8010904:	693a      	ldr	r2, [r7, #16]
 8010906:	69bb      	ldr	r3, [r7, #24]
 8010908:	4413      	add	r3, r2
 801090a:	781b      	ldrb	r3, [r3, #0]
 801090c:	2b2f      	cmp	r3, #47	; 0x2f
 801090e:	d0f6      	beq.n	80108fe <create_name+0x42>
 8010910:	693a      	ldr	r2, [r7, #16]
 8010912:	69bb      	ldr	r3, [r7, #24]
 8010914:	4413      	add	r3, r2
 8010916:	781b      	ldrb	r3, [r3, #0]
 8010918:	2b5c      	cmp	r3, #92	; 0x5c
 801091a:	d0f0      	beq.n	80108fe <create_name+0x42>
			break;
 801091c:	e02a      	b.n	8010974 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 801091e:	697b      	ldr	r3, [r7, #20]
 8010920:	2bfe      	cmp	r3, #254	; 0xfe
 8010922:	d901      	bls.n	8010928 <create_name+0x6c>
 8010924:	2306      	movs	r3, #6
 8010926:	e177      	b.n	8010c18 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8010928:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801092a:	b2db      	uxtb	r3, r3
 801092c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 801092e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010930:	2101      	movs	r1, #1
 8010932:	4618      	mov	r0, r3
 8010934:	f001 fca4 	bl	8012280 <ff_convert>
 8010938:	4603      	mov	r3, r0
 801093a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 801093c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801093e:	2b00      	cmp	r3, #0
 8010940:	d101      	bne.n	8010946 <create_name+0x8a>
 8010942:	2306      	movs	r3, #6
 8010944:	e168      	b.n	8010c18 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8010946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010948:	2b7f      	cmp	r3, #127	; 0x7f
 801094a:	d809      	bhi.n	8010960 <create_name+0xa4>
 801094c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801094e:	4619      	mov	r1, r3
 8010950:	48b3      	ldr	r0, [pc, #716]	; (8010c20 <create_name+0x364>)
 8010952:	f7fe fbce 	bl	800f0f2 <chk_chr>
 8010956:	4603      	mov	r3, r0
 8010958:	2b00      	cmp	r3, #0
 801095a:	d001      	beq.n	8010960 <create_name+0xa4>
 801095c:	2306      	movs	r3, #6
 801095e:	e15b      	b.n	8010c18 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	1c5a      	adds	r2, r3, #1
 8010964:	617a      	str	r2, [r7, #20]
 8010966:	005b      	lsls	r3, r3, #1
 8010968:	68fa      	ldr	r2, [r7, #12]
 801096a:	4413      	add	r3, r2
 801096c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801096e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8010970:	e7b4      	b.n	80108dc <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8010972:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8010974:	693a      	ldr	r2, [r7, #16]
 8010976:	69bb      	ldr	r3, [r7, #24]
 8010978:	441a      	add	r2, r3
 801097a:	683b      	ldr	r3, [r7, #0]
 801097c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801097e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010980:	2b1f      	cmp	r3, #31
 8010982:	d801      	bhi.n	8010988 <create_name+0xcc>
 8010984:	2304      	movs	r3, #4
 8010986:	e000      	b.n	801098a <create_name+0xce>
 8010988:	2300      	movs	r3, #0
 801098a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801098e:	e011      	b.n	80109b4 <create_name+0xf8>
		w = lfn[di - 1];
 8010990:	697b      	ldr	r3, [r7, #20]
 8010992:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010996:	3b01      	subs	r3, #1
 8010998:	005b      	lsls	r3, r3, #1
 801099a:	68fa      	ldr	r2, [r7, #12]
 801099c:	4413      	add	r3, r2
 801099e:	881b      	ldrh	r3, [r3, #0]
 80109a0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 80109a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80109a4:	2b20      	cmp	r3, #32
 80109a6:	d002      	beq.n	80109ae <create_name+0xf2>
 80109a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80109aa:	2b2e      	cmp	r3, #46	; 0x2e
 80109ac:	d106      	bne.n	80109bc <create_name+0x100>
		di--;
 80109ae:	697b      	ldr	r3, [r7, #20]
 80109b0:	3b01      	subs	r3, #1
 80109b2:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80109b4:	697b      	ldr	r3, [r7, #20]
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d1ea      	bne.n	8010990 <create_name+0xd4>
 80109ba:	e000      	b.n	80109be <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80109bc:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80109be:	697b      	ldr	r3, [r7, #20]
 80109c0:	005b      	lsls	r3, r3, #1
 80109c2:	68fa      	ldr	r2, [r7, #12]
 80109c4:	4413      	add	r3, r2
 80109c6:	2200      	movs	r2, #0
 80109c8:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80109ca:	697b      	ldr	r3, [r7, #20]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d101      	bne.n	80109d4 <create_name+0x118>
 80109d0:	2306      	movs	r3, #6
 80109d2:	e121      	b.n	8010c18 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80109d4:	687b      	ldr	r3, [r7, #4]
 80109d6:	3324      	adds	r3, #36	; 0x24
 80109d8:	220b      	movs	r2, #11
 80109da:	2120      	movs	r1, #32
 80109dc:	4618      	mov	r0, r3
 80109de:	f7fe fb46 	bl	800f06e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80109e2:	2300      	movs	r3, #0
 80109e4:	61bb      	str	r3, [r7, #24]
 80109e6:	e002      	b.n	80109ee <create_name+0x132>
 80109e8:	69bb      	ldr	r3, [r7, #24]
 80109ea:	3301      	adds	r3, #1
 80109ec:	61bb      	str	r3, [r7, #24]
 80109ee:	69bb      	ldr	r3, [r7, #24]
 80109f0:	005b      	lsls	r3, r3, #1
 80109f2:	68fa      	ldr	r2, [r7, #12]
 80109f4:	4413      	add	r3, r2
 80109f6:	881b      	ldrh	r3, [r3, #0]
 80109f8:	2b20      	cmp	r3, #32
 80109fa:	d0f5      	beq.n	80109e8 <create_name+0x12c>
 80109fc:	69bb      	ldr	r3, [r7, #24]
 80109fe:	005b      	lsls	r3, r3, #1
 8010a00:	68fa      	ldr	r2, [r7, #12]
 8010a02:	4413      	add	r3, r2
 8010a04:	881b      	ldrh	r3, [r3, #0]
 8010a06:	2b2e      	cmp	r3, #46	; 0x2e
 8010a08:	d0ee      	beq.n	80109e8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8010a0a:	69bb      	ldr	r3, [r7, #24]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d009      	beq.n	8010a24 <create_name+0x168>
 8010a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a14:	f043 0303 	orr.w	r3, r3, #3
 8010a18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8010a1c:	e002      	b.n	8010a24 <create_name+0x168>
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	3b01      	subs	r3, #1
 8010a22:	617b      	str	r3, [r7, #20]
 8010a24:	697b      	ldr	r3, [r7, #20]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	d009      	beq.n	8010a3e <create_name+0x182>
 8010a2a:	697b      	ldr	r3, [r7, #20]
 8010a2c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010a30:	3b01      	subs	r3, #1
 8010a32:	005b      	lsls	r3, r3, #1
 8010a34:	68fa      	ldr	r2, [r7, #12]
 8010a36:	4413      	add	r3, r2
 8010a38:	881b      	ldrh	r3, [r3, #0]
 8010a3a:	2b2e      	cmp	r3, #46	; 0x2e
 8010a3c:	d1ef      	bne.n	8010a1e <create_name+0x162>

	i = b = 0; ni = 8;
 8010a3e:	2300      	movs	r3, #0
 8010a40:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010a44:	2300      	movs	r3, #0
 8010a46:	623b      	str	r3, [r7, #32]
 8010a48:	2308      	movs	r3, #8
 8010a4a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8010a4c:	69bb      	ldr	r3, [r7, #24]
 8010a4e:	1c5a      	adds	r2, r3, #1
 8010a50:	61ba      	str	r2, [r7, #24]
 8010a52:	005b      	lsls	r3, r3, #1
 8010a54:	68fa      	ldr	r2, [r7, #12]
 8010a56:	4413      	add	r3, r2
 8010a58:	881b      	ldrh	r3, [r3, #0]
 8010a5a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8010a5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	f000 8090 	beq.w	8010b84 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8010a64:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a66:	2b20      	cmp	r3, #32
 8010a68:	d006      	beq.n	8010a78 <create_name+0x1bc>
 8010a6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010a6c:	2b2e      	cmp	r3, #46	; 0x2e
 8010a6e:	d10a      	bne.n	8010a86 <create_name+0x1ca>
 8010a70:	69ba      	ldr	r2, [r7, #24]
 8010a72:	697b      	ldr	r3, [r7, #20]
 8010a74:	429a      	cmp	r2, r3
 8010a76:	d006      	beq.n	8010a86 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8010a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a7c:	f043 0303 	orr.w	r3, r3, #3
 8010a80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010a84:	e07d      	b.n	8010b82 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8010a86:	6a3a      	ldr	r2, [r7, #32]
 8010a88:	69fb      	ldr	r3, [r7, #28]
 8010a8a:	429a      	cmp	r2, r3
 8010a8c:	d203      	bcs.n	8010a96 <create_name+0x1da>
 8010a8e:	69ba      	ldr	r2, [r7, #24]
 8010a90:	697b      	ldr	r3, [r7, #20]
 8010a92:	429a      	cmp	r2, r3
 8010a94:	d123      	bne.n	8010ade <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8010a96:	69fb      	ldr	r3, [r7, #28]
 8010a98:	2b0b      	cmp	r3, #11
 8010a9a:	d106      	bne.n	8010aaa <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8010a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010aa0:	f043 0303 	orr.w	r3, r3, #3
 8010aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010aa8:	e06f      	b.n	8010b8a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8010aaa:	69ba      	ldr	r2, [r7, #24]
 8010aac:	697b      	ldr	r3, [r7, #20]
 8010aae:	429a      	cmp	r2, r3
 8010ab0:	d005      	beq.n	8010abe <create_name+0x202>
 8010ab2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010ab6:	f043 0303 	orr.w	r3, r3, #3
 8010aba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8010abe:	69ba      	ldr	r2, [r7, #24]
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	429a      	cmp	r2, r3
 8010ac4:	d860      	bhi.n	8010b88 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8010ac6:	697b      	ldr	r3, [r7, #20]
 8010ac8:	61bb      	str	r3, [r7, #24]
 8010aca:	2308      	movs	r3, #8
 8010acc:	623b      	str	r3, [r7, #32]
 8010ace:	230b      	movs	r3, #11
 8010ad0:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8010ad2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010ad6:	009b      	lsls	r3, r3, #2
 8010ad8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010adc:	e051      	b.n	8010b82 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8010ade:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ae0:	2b7f      	cmp	r3, #127	; 0x7f
 8010ae2:	d914      	bls.n	8010b0e <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8010ae4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010ae6:	2100      	movs	r1, #0
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f001 fbc9 	bl	8012280 <ff_convert>
 8010aee:	4603      	mov	r3, r0
 8010af0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8010af2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d004      	beq.n	8010b02 <create_name+0x246>
 8010af8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010afa:	3b80      	subs	r3, #128	; 0x80
 8010afc:	4a49      	ldr	r2, [pc, #292]	; (8010c24 <create_name+0x368>)
 8010afe:	5cd3      	ldrb	r3, [r2, r3]
 8010b00:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8010b02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b06:	f043 0302 	orr.w	r3, r3, #2
 8010b0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8010b0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b10:	2b00      	cmp	r3, #0
 8010b12:	d007      	beq.n	8010b24 <create_name+0x268>
 8010b14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b16:	4619      	mov	r1, r3
 8010b18:	4843      	ldr	r0, [pc, #268]	; (8010c28 <create_name+0x36c>)
 8010b1a:	f7fe faea 	bl	800f0f2 <chk_chr>
 8010b1e:	4603      	mov	r3, r0
 8010b20:	2b00      	cmp	r3, #0
 8010b22:	d008      	beq.n	8010b36 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8010b24:	235f      	movs	r3, #95	; 0x5f
 8010b26:	84bb      	strh	r3, [r7, #36]	; 0x24
 8010b28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010b2c:	f043 0303 	orr.w	r3, r3, #3
 8010b30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010b34:	e01b      	b.n	8010b6e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8010b36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b38:	2b40      	cmp	r3, #64	; 0x40
 8010b3a:	d909      	bls.n	8010b50 <create_name+0x294>
 8010b3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b3e:	2b5a      	cmp	r3, #90	; 0x5a
 8010b40:	d806      	bhi.n	8010b50 <create_name+0x294>
					b |= 2;
 8010b42:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010b46:	f043 0302 	orr.w	r3, r3, #2
 8010b4a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010b4e:	e00e      	b.n	8010b6e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8010b50:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b52:	2b60      	cmp	r3, #96	; 0x60
 8010b54:	d90b      	bls.n	8010b6e <create_name+0x2b2>
 8010b56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b58:	2b7a      	cmp	r3, #122	; 0x7a
 8010b5a:	d808      	bhi.n	8010b6e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8010b5c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010b60:	f043 0301 	orr.w	r3, r3, #1
 8010b64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010b68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010b6a:	3b20      	subs	r3, #32
 8010b6c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8010b6e:	6a3b      	ldr	r3, [r7, #32]
 8010b70:	1c5a      	adds	r2, r3, #1
 8010b72:	623a      	str	r2, [r7, #32]
 8010b74:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010b76:	b2d1      	uxtb	r1, r2
 8010b78:	687a      	ldr	r2, [r7, #4]
 8010b7a:	4413      	add	r3, r2
 8010b7c:	460a      	mov	r2, r1
 8010b7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8010b82:	e763      	b.n	8010a4c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8010b84:	bf00      	nop
 8010b86:	e000      	b.n	8010b8a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8010b88:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8010b8a:	687b      	ldr	r3, [r7, #4]
 8010b8c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8010b90:	2be5      	cmp	r3, #229	; 0xe5
 8010b92:	d103      	bne.n	8010b9c <create_name+0x2e0>
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	2205      	movs	r2, #5
 8010b98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8010b9c:	69fb      	ldr	r3, [r7, #28]
 8010b9e:	2b08      	cmp	r3, #8
 8010ba0:	d104      	bne.n	8010bac <create_name+0x2f0>
 8010ba2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010ba6:	009b      	lsls	r3, r3, #2
 8010ba8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8010bac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010bb0:	f003 030c 	and.w	r3, r3, #12
 8010bb4:	2b0c      	cmp	r3, #12
 8010bb6:	d005      	beq.n	8010bc4 <create_name+0x308>
 8010bb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010bbc:	f003 0303 	and.w	r3, r3, #3
 8010bc0:	2b03      	cmp	r3, #3
 8010bc2:	d105      	bne.n	8010bd0 <create_name+0x314>
 8010bc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010bc8:	f043 0302 	orr.w	r3, r3, #2
 8010bcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8010bd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010bd4:	f003 0302 	and.w	r3, r3, #2
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d117      	bne.n	8010c0c <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8010bdc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010be0:	f003 0303 	and.w	r3, r3, #3
 8010be4:	2b01      	cmp	r3, #1
 8010be6:	d105      	bne.n	8010bf4 <create_name+0x338>
 8010be8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010bec:	f043 0310 	orr.w	r3, r3, #16
 8010bf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8010bf4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010bf8:	f003 030c 	and.w	r3, r3, #12
 8010bfc:	2b04      	cmp	r3, #4
 8010bfe:	d105      	bne.n	8010c0c <create_name+0x350>
 8010c00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010c04:	f043 0308 	orr.w	r3, r3, #8
 8010c08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010c12:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8010c16:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8010c18:	4618      	mov	r0, r3
 8010c1a:	3728      	adds	r7, #40	; 0x28
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	bd80      	pop	{r7, pc}
 8010c20:	0801a3c4 	.word	0x0801a3c4
 8010c24:	0801e2c8 	.word	0x0801e2c8
 8010c28:	0801a3d0 	.word	0x0801a3d0

08010c2c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010c2c:	b580      	push	{r7, lr}
 8010c2e:	b086      	sub	sp, #24
 8010c30:	af00      	add	r7, sp, #0
 8010c32:	6078      	str	r0, [r7, #4]
 8010c34:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010c3a:	693b      	ldr	r3, [r7, #16]
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010c40:	e002      	b.n	8010c48 <follow_path+0x1c>
 8010c42:	683b      	ldr	r3, [r7, #0]
 8010c44:	3301      	adds	r3, #1
 8010c46:	603b      	str	r3, [r7, #0]
 8010c48:	683b      	ldr	r3, [r7, #0]
 8010c4a:	781b      	ldrb	r3, [r3, #0]
 8010c4c:	2b2f      	cmp	r3, #47	; 0x2f
 8010c4e:	d0f8      	beq.n	8010c42 <follow_path+0x16>
 8010c50:	683b      	ldr	r3, [r7, #0]
 8010c52:	781b      	ldrb	r3, [r3, #0]
 8010c54:	2b5c      	cmp	r3, #92	; 0x5c
 8010c56:	d0f4      	beq.n	8010c42 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010c58:	693b      	ldr	r3, [r7, #16]
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010c5e:	683b      	ldr	r3, [r7, #0]
 8010c60:	781b      	ldrb	r3, [r3, #0]
 8010c62:	2b1f      	cmp	r3, #31
 8010c64:	d80a      	bhi.n	8010c7c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	2280      	movs	r2, #128	; 0x80
 8010c6a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8010c6e:	2100      	movs	r1, #0
 8010c70:	6878      	ldr	r0, [r7, #4]
 8010c72:	f7ff f81d 	bl	800fcb0 <dir_sdi>
 8010c76:	4603      	mov	r3, r0
 8010c78:	75fb      	strb	r3, [r7, #23]
 8010c7a:	e048      	b.n	8010d0e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010c7c:	463b      	mov	r3, r7
 8010c7e:	4619      	mov	r1, r3
 8010c80:	6878      	ldr	r0, [r7, #4]
 8010c82:	f7ff fe1b 	bl	80108bc <create_name>
 8010c86:	4603      	mov	r3, r0
 8010c88:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010c8a:	7dfb      	ldrb	r3, [r7, #23]
 8010c8c:	2b00      	cmp	r3, #0
 8010c8e:	d139      	bne.n	8010d04 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	f7ff fb7c 	bl	801038e <dir_find>
 8010c96:	4603      	mov	r3, r0
 8010c98:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010ca0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8010ca2:	7dfb      	ldrb	r3, [r7, #23]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d00a      	beq.n	8010cbe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8010ca8:	7dfb      	ldrb	r3, [r7, #23]
 8010caa:	2b04      	cmp	r3, #4
 8010cac:	d12c      	bne.n	8010d08 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8010cae:	7afb      	ldrb	r3, [r7, #11]
 8010cb0:	f003 0304 	and.w	r3, r3, #4
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d127      	bne.n	8010d08 <follow_path+0xdc>
 8010cb8:	2305      	movs	r3, #5
 8010cba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8010cbc:	e024      	b.n	8010d08 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010cbe:	7afb      	ldrb	r3, [r7, #11]
 8010cc0:	f003 0304 	and.w	r3, r3, #4
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d121      	bne.n	8010d0c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010cc8:	693b      	ldr	r3, [r7, #16]
 8010cca:	799b      	ldrb	r3, [r3, #6]
 8010ccc:	f003 0310 	and.w	r3, r3, #16
 8010cd0:	2b00      	cmp	r3, #0
 8010cd2:	d102      	bne.n	8010cda <follow_path+0xae>
				res = FR_NO_PATH; break;
 8010cd4:	2305      	movs	r3, #5
 8010cd6:	75fb      	strb	r3, [r7, #23]
 8010cd8:	e019      	b.n	8010d0e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010cda:	68fb      	ldr	r3, [r7, #12]
 8010cdc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	695b      	ldr	r3, [r3, #20]
 8010ce4:	68fa      	ldr	r2, [r7, #12]
 8010ce6:	8992      	ldrh	r2, [r2, #12]
 8010ce8:	fbb3 f0f2 	udiv	r0, r3, r2
 8010cec:	fb02 f200 	mul.w	r2, r2, r0
 8010cf0:	1a9b      	subs	r3, r3, r2
 8010cf2:	440b      	add	r3, r1
 8010cf4:	4619      	mov	r1, r3
 8010cf6:	68f8      	ldr	r0, [r7, #12]
 8010cf8:	f7ff f980 	bl	800fffc <ld_clust>
 8010cfc:	4602      	mov	r2, r0
 8010cfe:	693b      	ldr	r3, [r7, #16]
 8010d00:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010d02:	e7bb      	b.n	8010c7c <follow_path+0x50>
			if (res != FR_OK) break;
 8010d04:	bf00      	nop
 8010d06:	e002      	b.n	8010d0e <follow_path+0xe2>
				break;
 8010d08:	bf00      	nop
 8010d0a:	e000      	b.n	8010d0e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8010d0c:	bf00      	nop
			}
		}
	}

	return res;
 8010d0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d10:	4618      	mov	r0, r3
 8010d12:	3718      	adds	r7, #24
 8010d14:	46bd      	mov	sp, r7
 8010d16:	bd80      	pop	{r7, pc}

08010d18 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010d18:	b480      	push	{r7}
 8010d1a:	b087      	sub	sp, #28
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010d20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d24:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d031      	beq.n	8010d92 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010d2e:	687b      	ldr	r3, [r7, #4]
 8010d30:	681b      	ldr	r3, [r3, #0]
 8010d32:	617b      	str	r3, [r7, #20]
 8010d34:	e002      	b.n	8010d3c <get_ldnumber+0x24>
 8010d36:	697b      	ldr	r3, [r7, #20]
 8010d38:	3301      	adds	r3, #1
 8010d3a:	617b      	str	r3, [r7, #20]
 8010d3c:	697b      	ldr	r3, [r7, #20]
 8010d3e:	781b      	ldrb	r3, [r3, #0]
 8010d40:	2b1f      	cmp	r3, #31
 8010d42:	d903      	bls.n	8010d4c <get_ldnumber+0x34>
 8010d44:	697b      	ldr	r3, [r7, #20]
 8010d46:	781b      	ldrb	r3, [r3, #0]
 8010d48:	2b3a      	cmp	r3, #58	; 0x3a
 8010d4a:	d1f4      	bne.n	8010d36 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010d4c:	697b      	ldr	r3, [r7, #20]
 8010d4e:	781b      	ldrb	r3, [r3, #0]
 8010d50:	2b3a      	cmp	r3, #58	; 0x3a
 8010d52:	d11c      	bne.n	8010d8e <get_ldnumber+0x76>
			tp = *path;
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	681b      	ldr	r3, [r3, #0]
 8010d58:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	1c5a      	adds	r2, r3, #1
 8010d5e:	60fa      	str	r2, [r7, #12]
 8010d60:	781b      	ldrb	r3, [r3, #0]
 8010d62:	3b30      	subs	r3, #48	; 0x30
 8010d64:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010d66:	68bb      	ldr	r3, [r7, #8]
 8010d68:	2b09      	cmp	r3, #9
 8010d6a:	d80e      	bhi.n	8010d8a <get_ldnumber+0x72>
 8010d6c:	68fa      	ldr	r2, [r7, #12]
 8010d6e:	697b      	ldr	r3, [r7, #20]
 8010d70:	429a      	cmp	r2, r3
 8010d72:	d10a      	bne.n	8010d8a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d107      	bne.n	8010d8a <get_ldnumber+0x72>
					vol = (int)i;
 8010d7a:	68bb      	ldr	r3, [r7, #8]
 8010d7c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8010d7e:	697b      	ldr	r3, [r7, #20]
 8010d80:	3301      	adds	r3, #1
 8010d82:	617b      	str	r3, [r7, #20]
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	697a      	ldr	r2, [r7, #20]
 8010d88:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8010d8a:	693b      	ldr	r3, [r7, #16]
 8010d8c:	e002      	b.n	8010d94 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8010d8e:	2300      	movs	r3, #0
 8010d90:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8010d92:	693b      	ldr	r3, [r7, #16]
}
 8010d94:	4618      	mov	r0, r3
 8010d96:	371c      	adds	r7, #28
 8010d98:	46bd      	mov	sp, r7
 8010d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9e:	4770      	bx	lr

08010da0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8010da0:	b580      	push	{r7, lr}
 8010da2:	b082      	sub	sp, #8
 8010da4:	af00      	add	r7, sp, #0
 8010da6:	6078      	str	r0, [r7, #4]
 8010da8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	2200      	movs	r2, #0
 8010dae:	70da      	strb	r2, [r3, #3]
 8010db0:	687b      	ldr	r3, [r7, #4]
 8010db2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010db6:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8010db8:	6839      	ldr	r1, [r7, #0]
 8010dba:	6878      	ldr	r0, [r7, #4]
 8010dbc:	f7fe fb96 	bl	800f4ec <move_window>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d001      	beq.n	8010dca <check_fs+0x2a>
 8010dc6:	2304      	movs	r3, #4
 8010dc8:	e038      	b.n	8010e3c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	333c      	adds	r3, #60	; 0x3c
 8010dce:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f7fe f8a8 	bl	800ef28 <ld_word>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	461a      	mov	r2, r3
 8010ddc:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010de0:	429a      	cmp	r2, r3
 8010de2:	d001      	beq.n	8010de8 <check_fs+0x48>
 8010de4:	2303      	movs	r3, #3
 8010de6:	e029      	b.n	8010e3c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010dee:	2be9      	cmp	r3, #233	; 0xe9
 8010df0:	d009      	beq.n	8010e06 <check_fs+0x66>
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8010df8:	2beb      	cmp	r3, #235	; 0xeb
 8010dfa:	d11e      	bne.n	8010e3a <check_fs+0x9a>
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8010e02:	2b90      	cmp	r3, #144	; 0x90
 8010e04:	d119      	bne.n	8010e3a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	333c      	adds	r3, #60	; 0x3c
 8010e0a:	3336      	adds	r3, #54	; 0x36
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f7fe f8a3 	bl	800ef58 <ld_dword>
 8010e12:	4603      	mov	r3, r0
 8010e14:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010e18:	4a0a      	ldr	r2, [pc, #40]	; (8010e44 <check_fs+0xa4>)
 8010e1a:	4293      	cmp	r3, r2
 8010e1c:	d101      	bne.n	8010e22 <check_fs+0x82>
 8010e1e:	2300      	movs	r3, #0
 8010e20:	e00c      	b.n	8010e3c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	333c      	adds	r3, #60	; 0x3c
 8010e26:	3352      	adds	r3, #82	; 0x52
 8010e28:	4618      	mov	r0, r3
 8010e2a:	f7fe f895 	bl	800ef58 <ld_dword>
 8010e2e:	4603      	mov	r3, r0
 8010e30:	4a05      	ldr	r2, [pc, #20]	; (8010e48 <check_fs+0xa8>)
 8010e32:	4293      	cmp	r3, r2
 8010e34:	d101      	bne.n	8010e3a <check_fs+0x9a>
 8010e36:	2300      	movs	r3, #0
 8010e38:	e000      	b.n	8010e3c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010e3a:	2302      	movs	r3, #2
}
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	3708      	adds	r7, #8
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}
 8010e44:	00544146 	.word	0x00544146
 8010e48:	33544146 	.word	0x33544146

08010e4c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b096      	sub	sp, #88	; 0x58
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	60f8      	str	r0, [r7, #12]
 8010e54:	60b9      	str	r1, [r7, #8]
 8010e56:	4613      	mov	r3, r2
 8010e58:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010e5a:	68bb      	ldr	r3, [r7, #8]
 8010e5c:	2200      	movs	r2, #0
 8010e5e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8010e60:	68f8      	ldr	r0, [r7, #12]
 8010e62:	f7ff ff59 	bl	8010d18 <get_ldnumber>
 8010e66:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010e68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	da01      	bge.n	8010e72 <find_volume+0x26>
 8010e6e:	230b      	movs	r3, #11
 8010e70:	e26c      	b.n	801134c <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8010e72:	4aa4      	ldr	r2, [pc, #656]	; (8011104 <find_volume+0x2b8>)
 8010e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e7a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d101      	bne.n	8010e86 <find_volume+0x3a>
 8010e82:	230c      	movs	r3, #12
 8010e84:	e262      	b.n	801134c <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 8010e86:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010e88:	f7fe f94e 	bl	800f128 <lock_fs>
 8010e8c:	4603      	mov	r3, r0
 8010e8e:	2b00      	cmp	r3, #0
 8010e90:	d101      	bne.n	8010e96 <find_volume+0x4a>
 8010e92:	230f      	movs	r3, #15
 8010e94:	e25a      	b.n	801134c <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 8010e96:	68bb      	ldr	r3, [r7, #8]
 8010e98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010e9a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010e9c:	79fb      	ldrb	r3, [r7, #7]
 8010e9e:	f023 0301 	bic.w	r3, r3, #1
 8010ea2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea6:	781b      	ldrb	r3, [r3, #0]
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d01a      	beq.n	8010ee2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 8010eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eae:	785b      	ldrb	r3, [r3, #1]
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f7fd ff9b 	bl	800edec <disk_status>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010ebc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ec0:	f003 0301 	and.w	r3, r3, #1
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d10c      	bne.n	8010ee2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010ec8:	79fb      	ldrb	r3, [r7, #7]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d007      	beq.n	8010ede <find_volume+0x92>
 8010ece:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ed2:	f003 0304 	and.w	r3, r3, #4
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d001      	beq.n	8010ede <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 8010eda:	230a      	movs	r3, #10
 8010edc:	e236      	b.n	801134c <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 8010ede:	2300      	movs	r3, #0
 8010ee0:	e234      	b.n	801134c <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8010ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010eea:	b2da      	uxtb	r2, r3
 8010eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8010ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ef2:	785b      	ldrb	r3, [r3, #1]
 8010ef4:	4618      	mov	r0, r3
 8010ef6:	f7fd ff93 	bl	800ee20 <disk_initialize>
 8010efa:	4603      	mov	r3, r0
 8010efc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8010f00:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f04:	f003 0301 	and.w	r3, r3, #1
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d001      	beq.n	8010f10 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010f0c:	2303      	movs	r3, #3
 8010f0e:	e21d      	b.n	801134c <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8010f10:	79fb      	ldrb	r3, [r7, #7]
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d007      	beq.n	8010f26 <find_volume+0xda>
 8010f16:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010f1a:	f003 0304 	and.w	r3, r3, #4
 8010f1e:	2b00      	cmp	r3, #0
 8010f20:	d001      	beq.n	8010f26 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 8010f22:	230a      	movs	r3, #10
 8010f24:	e212      	b.n	801134c <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8010f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f28:	7858      	ldrb	r0, [r3, #1]
 8010f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f2c:	330c      	adds	r3, #12
 8010f2e:	461a      	mov	r2, r3
 8010f30:	2102      	movs	r1, #2
 8010f32:	f7fd ffdb 	bl	800eeec <disk_ioctl>
 8010f36:	4603      	mov	r3, r0
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d001      	beq.n	8010f40 <find_volume+0xf4>
 8010f3c:	2301      	movs	r3, #1
 8010f3e:	e205      	b.n	801134c <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8010f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f42:	899b      	ldrh	r3, [r3, #12]
 8010f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010f48:	d80d      	bhi.n	8010f66 <find_volume+0x11a>
 8010f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f4c:	899b      	ldrh	r3, [r3, #12]
 8010f4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010f52:	d308      	bcc.n	8010f66 <find_volume+0x11a>
 8010f54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f56:	899b      	ldrh	r3, [r3, #12]
 8010f58:	461a      	mov	r2, r3
 8010f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f5c:	899b      	ldrh	r3, [r3, #12]
 8010f5e:	3b01      	subs	r3, #1
 8010f60:	4013      	ands	r3, r2
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d001      	beq.n	8010f6a <find_volume+0x11e>
 8010f66:	2301      	movs	r3, #1
 8010f68:	e1f0      	b.n	801134c <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010f6e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010f70:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010f72:	f7ff ff15 	bl	8010da0 <check_fs>
 8010f76:	4603      	mov	r3, r0
 8010f78:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010f7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010f80:	2b02      	cmp	r3, #2
 8010f82:	d14b      	bne.n	801101c <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010f84:	2300      	movs	r3, #0
 8010f86:	643b      	str	r3, [r7, #64]	; 0x40
 8010f88:	e01f      	b.n	8010fca <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010f8c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8010f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010f92:	011b      	lsls	r3, r3, #4
 8010f94:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010f98:	4413      	add	r3, r2
 8010f9a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f9e:	3304      	adds	r3, #4
 8010fa0:	781b      	ldrb	r3, [r3, #0]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d006      	beq.n	8010fb4 <find_volume+0x168>
 8010fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fa8:	3308      	adds	r3, #8
 8010faa:	4618      	mov	r0, r3
 8010fac:	f7fd ffd4 	bl	800ef58 <ld_dword>
 8010fb0:	4602      	mov	r2, r0
 8010fb2:	e000      	b.n	8010fb6 <find_volume+0x16a>
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fb8:	009b      	lsls	r3, r3, #2
 8010fba:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8010fbe:	440b      	add	r3, r1
 8010fc0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8010fc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fc6:	3301      	adds	r3, #1
 8010fc8:	643b      	str	r3, [r7, #64]	; 0x40
 8010fca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fcc:	2b03      	cmp	r3, #3
 8010fce:	d9dc      	bls.n	8010f8a <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010fd0:	2300      	movs	r3, #0
 8010fd2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8010fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d002      	beq.n	8010fe0 <find_volume+0x194>
 8010fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fdc:	3b01      	subs	r3, #1
 8010fde:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010fe2:	009b      	lsls	r3, r3, #2
 8010fe4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8010fe8:	4413      	add	r3, r2
 8010fea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010fee:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d005      	beq.n	8011002 <find_volume+0x1b6>
 8010ff6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010ff8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010ffa:	f7ff fed1 	bl	8010da0 <check_fs>
 8010ffe:	4603      	mov	r3, r0
 8011000:	e000      	b.n	8011004 <find_volume+0x1b8>
 8011002:	2303      	movs	r3, #3
 8011004:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011008:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801100c:	2b01      	cmp	r3, #1
 801100e:	d905      	bls.n	801101c <find_volume+0x1d0>
 8011010:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011012:	3301      	adds	r3, #1
 8011014:	643b      	str	r3, [r7, #64]	; 0x40
 8011016:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011018:	2b03      	cmp	r3, #3
 801101a:	d9e1      	bls.n	8010fe0 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 801101c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011020:	2b04      	cmp	r3, #4
 8011022:	d101      	bne.n	8011028 <find_volume+0x1dc>
 8011024:	2301      	movs	r3, #1
 8011026:	e191      	b.n	801134c <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011028:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801102c:	2b01      	cmp	r3, #1
 801102e:	d901      	bls.n	8011034 <find_volume+0x1e8>
 8011030:	230d      	movs	r3, #13
 8011032:	e18b      	b.n	801134c <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011036:	333c      	adds	r3, #60	; 0x3c
 8011038:	330b      	adds	r3, #11
 801103a:	4618      	mov	r0, r3
 801103c:	f7fd ff74 	bl	800ef28 <ld_word>
 8011040:	4603      	mov	r3, r0
 8011042:	461a      	mov	r2, r3
 8011044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011046:	899b      	ldrh	r3, [r3, #12]
 8011048:	429a      	cmp	r2, r3
 801104a:	d001      	beq.n	8011050 <find_volume+0x204>
 801104c:	230d      	movs	r3, #13
 801104e:	e17d      	b.n	801134c <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011052:	333c      	adds	r3, #60	; 0x3c
 8011054:	3316      	adds	r3, #22
 8011056:	4618      	mov	r0, r3
 8011058:	f7fd ff66 	bl	800ef28 <ld_word>
 801105c:	4603      	mov	r3, r0
 801105e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011060:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011062:	2b00      	cmp	r3, #0
 8011064:	d106      	bne.n	8011074 <find_volume+0x228>
 8011066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011068:	333c      	adds	r3, #60	; 0x3c
 801106a:	3324      	adds	r3, #36	; 0x24
 801106c:	4618      	mov	r0, r3
 801106e:	f7fd ff73 	bl	800ef58 <ld_dword>
 8011072:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011076:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011078:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801107a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801107c:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8011080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011082:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011086:	789b      	ldrb	r3, [r3, #2]
 8011088:	2b01      	cmp	r3, #1
 801108a:	d005      	beq.n	8011098 <find_volume+0x24c>
 801108c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801108e:	789b      	ldrb	r3, [r3, #2]
 8011090:	2b02      	cmp	r3, #2
 8011092:	d001      	beq.n	8011098 <find_volume+0x24c>
 8011094:	230d      	movs	r3, #13
 8011096:	e159      	b.n	801134c <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801109a:	789b      	ldrb	r3, [r3, #2]
 801109c:	461a      	mov	r2, r3
 801109e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80110a0:	fb02 f303 	mul.w	r3, r2, r3
 80110a4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80110a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110a8:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80110ac:	b29a      	uxth	r2, r3
 80110ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110b0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80110b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110b4:	895b      	ldrh	r3, [r3, #10]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d008      	beq.n	80110cc <find_volume+0x280>
 80110ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110bc:	895b      	ldrh	r3, [r3, #10]
 80110be:	461a      	mov	r2, r3
 80110c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110c2:	895b      	ldrh	r3, [r3, #10]
 80110c4:	3b01      	subs	r3, #1
 80110c6:	4013      	ands	r3, r2
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d001      	beq.n	80110d0 <find_volume+0x284>
 80110cc:	230d      	movs	r3, #13
 80110ce:	e13d      	b.n	801134c <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80110d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110d2:	333c      	adds	r3, #60	; 0x3c
 80110d4:	3311      	adds	r3, #17
 80110d6:	4618      	mov	r0, r3
 80110d8:	f7fd ff26 	bl	800ef28 <ld_word>
 80110dc:	4603      	mov	r3, r0
 80110de:	461a      	mov	r2, r3
 80110e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110e2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80110e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110e6:	891b      	ldrh	r3, [r3, #8]
 80110e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110ea:	8992      	ldrh	r2, [r2, #12]
 80110ec:	0952      	lsrs	r2, r2, #5
 80110ee:	b292      	uxth	r2, r2
 80110f0:	fbb3 f1f2 	udiv	r1, r3, r2
 80110f4:	fb02 f201 	mul.w	r2, r2, r1
 80110f8:	1a9b      	subs	r3, r3, r2
 80110fa:	b29b      	uxth	r3, r3
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d003      	beq.n	8011108 <find_volume+0x2bc>
 8011100:	230d      	movs	r3, #13
 8011102:	e123      	b.n	801134c <find_volume+0x500>
 8011104:	200027b8 	.word	0x200027b8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801110a:	333c      	adds	r3, #60	; 0x3c
 801110c:	3313      	adds	r3, #19
 801110e:	4618      	mov	r0, r3
 8011110:	f7fd ff0a 	bl	800ef28 <ld_word>
 8011114:	4603      	mov	r3, r0
 8011116:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801111a:	2b00      	cmp	r3, #0
 801111c:	d106      	bne.n	801112c <find_volume+0x2e0>
 801111e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011120:	333c      	adds	r3, #60	; 0x3c
 8011122:	3320      	adds	r3, #32
 8011124:	4618      	mov	r0, r3
 8011126:	f7fd ff17 	bl	800ef58 <ld_dword>
 801112a:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801112c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801112e:	333c      	adds	r3, #60	; 0x3c
 8011130:	330e      	adds	r3, #14
 8011132:	4618      	mov	r0, r3
 8011134:	f7fd fef8 	bl	800ef28 <ld_word>
 8011138:	4603      	mov	r3, r0
 801113a:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801113c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801113e:	2b00      	cmp	r3, #0
 8011140:	d101      	bne.n	8011146 <find_volume+0x2fa>
 8011142:	230d      	movs	r3, #13
 8011144:	e102      	b.n	801134c <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011146:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801114a:	4413      	add	r3, r2
 801114c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801114e:	8911      	ldrh	r1, [r2, #8]
 8011150:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011152:	8992      	ldrh	r2, [r2, #12]
 8011154:	0952      	lsrs	r2, r2, #5
 8011156:	b292      	uxth	r2, r2
 8011158:	fbb1 f2f2 	udiv	r2, r1, r2
 801115c:	b292      	uxth	r2, r2
 801115e:	4413      	add	r3, r2
 8011160:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011162:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011166:	429a      	cmp	r2, r3
 8011168:	d201      	bcs.n	801116e <find_volume+0x322>
 801116a:	230d      	movs	r3, #13
 801116c:	e0ee      	b.n	801134c <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801116e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011172:	1ad3      	subs	r3, r2, r3
 8011174:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011176:	8952      	ldrh	r2, [r2, #10]
 8011178:	fbb3 f3f2 	udiv	r3, r3, r2
 801117c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011180:	2b00      	cmp	r3, #0
 8011182:	d101      	bne.n	8011188 <find_volume+0x33c>
 8011184:	230d      	movs	r3, #13
 8011186:	e0e1      	b.n	801134c <find_volume+0x500>
		fmt = FS_FAT32;
 8011188:	2303      	movs	r3, #3
 801118a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801118e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011190:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011194:	4293      	cmp	r3, r2
 8011196:	d802      	bhi.n	801119e <find_volume+0x352>
 8011198:	2302      	movs	r3, #2
 801119a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801119e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111a0:	f640 72f5 	movw	r2, #4085	; 0xff5
 80111a4:	4293      	cmp	r3, r2
 80111a6:	d802      	bhi.n	80111ae <find_volume+0x362>
 80111a8:	2301      	movs	r3, #1
 80111aa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80111ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111b0:	1c9a      	adds	r2, r3, #2
 80111b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b4:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 80111b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80111ba:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80111bc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80111be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111c0:	441a      	add	r2, r3
 80111c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111c4:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 80111c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80111c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ca:	441a      	add	r2, r3
 80111cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111ce:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 80111d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80111d4:	2b03      	cmp	r3, #3
 80111d6:	d11e      	bne.n	8011216 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80111d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111da:	333c      	adds	r3, #60	; 0x3c
 80111dc:	332a      	adds	r3, #42	; 0x2a
 80111de:	4618      	mov	r0, r3
 80111e0:	f7fd fea2 	bl	800ef28 <ld_word>
 80111e4:	4603      	mov	r3, r0
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d001      	beq.n	80111ee <find_volume+0x3a2>
 80111ea:	230d      	movs	r3, #13
 80111ec:	e0ae      	b.n	801134c <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80111ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111f0:	891b      	ldrh	r3, [r3, #8]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d001      	beq.n	80111fa <find_volume+0x3ae>
 80111f6:	230d      	movs	r3, #13
 80111f8:	e0a8      	b.n	801134c <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80111fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111fc:	333c      	adds	r3, #60	; 0x3c
 80111fe:	332c      	adds	r3, #44	; 0x2c
 8011200:	4618      	mov	r0, r3
 8011202:	f7fd fea9 	bl	800ef58 <ld_dword>
 8011206:	4602      	mov	r2, r0
 8011208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801120a:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 801120c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801120e:	6a1b      	ldr	r3, [r3, #32]
 8011210:	009b      	lsls	r3, r3, #2
 8011212:	647b      	str	r3, [r7, #68]	; 0x44
 8011214:	e01f      	b.n	8011256 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011218:	891b      	ldrh	r3, [r3, #8]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d101      	bne.n	8011222 <find_volume+0x3d6>
 801121e:	230d      	movs	r3, #13
 8011220:	e094      	b.n	801134c <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011226:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011228:	441a      	add	r2, r3
 801122a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801122c:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801122e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011232:	2b02      	cmp	r3, #2
 8011234:	d103      	bne.n	801123e <find_volume+0x3f2>
 8011236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011238:	6a1b      	ldr	r3, [r3, #32]
 801123a:	005b      	lsls	r3, r3, #1
 801123c:	e00a      	b.n	8011254 <find_volume+0x408>
 801123e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011240:	6a1a      	ldr	r2, [r3, #32]
 8011242:	4613      	mov	r3, r2
 8011244:	005b      	lsls	r3, r3, #1
 8011246:	4413      	add	r3, r2
 8011248:	085a      	lsrs	r2, r3, #1
 801124a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801124c:	6a1b      	ldr	r3, [r3, #32]
 801124e:	f003 0301 	and.w	r3, r3, #1
 8011252:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011254:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011258:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801125a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801125c:	899b      	ldrh	r3, [r3, #12]
 801125e:	4619      	mov	r1, r3
 8011260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011262:	440b      	add	r3, r1
 8011264:	3b01      	subs	r3, #1
 8011266:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011268:	8989      	ldrh	r1, [r1, #12]
 801126a:	fbb3 f3f1 	udiv	r3, r3, r1
 801126e:	429a      	cmp	r2, r3
 8011270:	d201      	bcs.n	8011276 <find_volume+0x42a>
 8011272:	230d      	movs	r3, #13
 8011274:	e06a      	b.n	801134c <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011278:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801127c:	61da      	str	r2, [r3, #28]
 801127e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011280:	69da      	ldr	r2, [r3, #28]
 8011282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011284:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8011286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011288:	2280      	movs	r2, #128	; 0x80
 801128a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801128c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011290:	2b03      	cmp	r3, #3
 8011292:	d149      	bne.n	8011328 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011296:	333c      	adds	r3, #60	; 0x3c
 8011298:	3330      	adds	r3, #48	; 0x30
 801129a:	4618      	mov	r0, r3
 801129c:	f7fd fe44 	bl	800ef28 <ld_word>
 80112a0:	4603      	mov	r3, r0
 80112a2:	2b01      	cmp	r3, #1
 80112a4:	d140      	bne.n	8011328 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 80112a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112a8:	3301      	adds	r3, #1
 80112aa:	4619      	mov	r1, r3
 80112ac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80112ae:	f7fe f91d 	bl	800f4ec <move_window>
 80112b2:	4603      	mov	r3, r0
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d137      	bne.n	8011328 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 80112b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ba:	2200      	movs	r2, #0
 80112bc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80112be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112c0:	333c      	adds	r3, #60	; 0x3c
 80112c2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80112c6:	4618      	mov	r0, r3
 80112c8:	f7fd fe2e 	bl	800ef28 <ld_word>
 80112cc:	4603      	mov	r3, r0
 80112ce:	461a      	mov	r2, r3
 80112d0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80112d4:	429a      	cmp	r2, r3
 80112d6:	d127      	bne.n	8011328 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80112d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112da:	333c      	adds	r3, #60	; 0x3c
 80112dc:	4618      	mov	r0, r3
 80112de:	f7fd fe3b 	bl	800ef58 <ld_dword>
 80112e2:	4603      	mov	r3, r0
 80112e4:	4a1b      	ldr	r2, [pc, #108]	; (8011354 <find_volume+0x508>)
 80112e6:	4293      	cmp	r3, r2
 80112e8:	d11e      	bne.n	8011328 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80112ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ec:	333c      	adds	r3, #60	; 0x3c
 80112ee:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80112f2:	4618      	mov	r0, r3
 80112f4:	f7fd fe30 	bl	800ef58 <ld_dword>
 80112f8:	4603      	mov	r3, r0
 80112fa:	4a17      	ldr	r2, [pc, #92]	; (8011358 <find_volume+0x50c>)
 80112fc:	4293      	cmp	r3, r2
 80112fe:	d113      	bne.n	8011328 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011302:	333c      	adds	r3, #60	; 0x3c
 8011304:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011308:	4618      	mov	r0, r3
 801130a:	f7fd fe25 	bl	800ef58 <ld_dword>
 801130e:	4602      	mov	r2, r0
 8011310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011312:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011316:	333c      	adds	r3, #60	; 0x3c
 8011318:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801131c:	4618      	mov	r0, r3
 801131e:	f7fd fe1b 	bl	800ef58 <ld_dword>
 8011322:	4602      	mov	r2, r0
 8011324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011326:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801132a:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801132e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011330:	4b0a      	ldr	r3, [pc, #40]	; (801135c <find_volume+0x510>)
 8011332:	881b      	ldrh	r3, [r3, #0]
 8011334:	3301      	adds	r3, #1
 8011336:	b29a      	uxth	r2, r3
 8011338:	4b08      	ldr	r3, [pc, #32]	; (801135c <find_volume+0x510>)
 801133a:	801a      	strh	r2, [r3, #0]
 801133c:	4b07      	ldr	r3, [pc, #28]	; (801135c <find_volume+0x510>)
 801133e:	881a      	ldrh	r2, [r3, #0]
 8011340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011342:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011344:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011346:	f7fe f869 	bl	800f41c <clear_lock>
#endif
	return FR_OK;
 801134a:	2300      	movs	r3, #0
}
 801134c:	4618      	mov	r0, r3
 801134e:	3758      	adds	r7, #88	; 0x58
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}
 8011354:	41615252 	.word	0x41615252
 8011358:	61417272 	.word	0x61417272
 801135c:	200027bc 	.word	0x200027bc

08011360 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b084      	sub	sp, #16
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
 8011368:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 801136a:	2309      	movs	r3, #9
 801136c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d02e      	beq.n	80113d2 <validate+0x72>
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	681b      	ldr	r3, [r3, #0]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d02a      	beq.n	80113d2 <validate+0x72>
 801137c:	687b      	ldr	r3, [r7, #4]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	781b      	ldrb	r3, [r3, #0]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d025      	beq.n	80113d2 <validate+0x72>
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	889a      	ldrh	r2, [r3, #4]
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	681b      	ldr	r3, [r3, #0]
 801138e:	88db      	ldrh	r3, [r3, #6]
 8011390:	429a      	cmp	r2, r3
 8011392:	d11e      	bne.n	80113d2 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	681b      	ldr	r3, [r3, #0]
 8011398:	4618      	mov	r0, r3
 801139a:	f7fd fec5 	bl	800f128 <lock_fs>
 801139e:	4603      	mov	r3, r0
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d014      	beq.n	80113ce <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	785b      	ldrb	r3, [r3, #1]
 80113aa:	4618      	mov	r0, r3
 80113ac:	f7fd fd1e 	bl	800edec <disk_status>
 80113b0:	4603      	mov	r3, r0
 80113b2:	f003 0301 	and.w	r3, r3, #1
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d102      	bne.n	80113c0 <validate+0x60>
				res = FR_OK;
 80113ba:	2300      	movs	r3, #0
 80113bc:	73fb      	strb	r3, [r7, #15]
 80113be:	e008      	b.n	80113d2 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	681b      	ldr	r3, [r3, #0]
 80113c4:	2100      	movs	r1, #0
 80113c6:	4618      	mov	r0, r3
 80113c8:	f7fd fec4 	bl	800f154 <unlock_fs>
 80113cc:	e001      	b.n	80113d2 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 80113ce:	230f      	movs	r3, #15
 80113d0:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80113d2:	7bfb      	ldrb	r3, [r7, #15]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d102      	bne.n	80113de <validate+0x7e>
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	e000      	b.n	80113e0 <validate+0x80>
 80113de:	2300      	movs	r3, #0
 80113e0:	683a      	ldr	r2, [r7, #0]
 80113e2:	6013      	str	r3, [r2, #0]
	return res;
 80113e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80113e6:	4618      	mov	r0, r3
 80113e8:	3710      	adds	r7, #16
 80113ea:	46bd      	mov	sp, r7
 80113ec:	bd80      	pop	{r7, pc}
	...

080113f0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b088      	sub	sp, #32
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	60f8      	str	r0, [r7, #12]
 80113f8:	60b9      	str	r1, [r7, #8]
 80113fa:	4613      	mov	r3, r2
 80113fc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80113fe:	68bb      	ldr	r3, [r7, #8]
 8011400:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011402:	f107 0310 	add.w	r3, r7, #16
 8011406:	4618      	mov	r0, r3
 8011408:	f7ff fc86 	bl	8010d18 <get_ldnumber>
 801140c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801140e:	69fb      	ldr	r3, [r7, #28]
 8011410:	2b00      	cmp	r3, #0
 8011412:	da01      	bge.n	8011418 <f_mount+0x28>
 8011414:	230b      	movs	r3, #11
 8011416:	e048      	b.n	80114aa <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011418:	4a26      	ldr	r2, [pc, #152]	; (80114b4 <f_mount+0xc4>)
 801141a:	69fb      	ldr	r3, [r7, #28]
 801141c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011420:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011422:	69bb      	ldr	r3, [r7, #24]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d00f      	beq.n	8011448 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011428:	69b8      	ldr	r0, [r7, #24]
 801142a:	f7fd fff7 	bl	800f41c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 801142e:	69bb      	ldr	r3, [r7, #24]
 8011430:	695b      	ldr	r3, [r3, #20]
 8011432:	4618      	mov	r0, r3
 8011434:	f001 f805 	bl	8012442 <ff_del_syncobj>
 8011438:	4603      	mov	r3, r0
 801143a:	2b00      	cmp	r3, #0
 801143c:	d101      	bne.n	8011442 <f_mount+0x52>
 801143e:	2302      	movs	r3, #2
 8011440:	e033      	b.n	80114aa <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011442:	69bb      	ldr	r3, [r7, #24]
 8011444:	2200      	movs	r2, #0
 8011446:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d00f      	beq.n	801146e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	2200      	movs	r2, #0
 8011452:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8011454:	69fb      	ldr	r3, [r7, #28]
 8011456:	b2da      	uxtb	r2, r3
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	3314      	adds	r3, #20
 801145c:	4619      	mov	r1, r3
 801145e:	4610      	mov	r0, r2
 8011460:	f000 ffd4 	bl	801240c <ff_cre_syncobj>
 8011464:	4603      	mov	r3, r0
 8011466:	2b00      	cmp	r3, #0
 8011468:	d101      	bne.n	801146e <f_mount+0x7e>
 801146a:	2302      	movs	r3, #2
 801146c:	e01d      	b.n	80114aa <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 801146e:	68fa      	ldr	r2, [r7, #12]
 8011470:	4910      	ldr	r1, [pc, #64]	; (80114b4 <f_mount+0xc4>)
 8011472:	69fb      	ldr	r3, [r7, #28]
 8011474:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d002      	beq.n	8011484 <f_mount+0x94>
 801147e:	79fb      	ldrb	r3, [r7, #7]
 8011480:	2b01      	cmp	r3, #1
 8011482:	d001      	beq.n	8011488 <f_mount+0x98>
 8011484:	2300      	movs	r3, #0
 8011486:	e010      	b.n	80114aa <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011488:	f107 010c 	add.w	r1, r7, #12
 801148c:	f107 0308 	add.w	r3, r7, #8
 8011490:	2200      	movs	r2, #0
 8011492:	4618      	mov	r0, r3
 8011494:	f7ff fcda 	bl	8010e4c <find_volume>
 8011498:	4603      	mov	r3, r0
 801149a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	7dfa      	ldrb	r2, [r7, #23]
 80114a0:	4611      	mov	r1, r2
 80114a2:	4618      	mov	r0, r3
 80114a4:	f7fd fe56 	bl	800f154 <unlock_fs>
 80114a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80114aa:	4618      	mov	r0, r3
 80114ac:	3720      	adds	r7, #32
 80114ae:	46bd      	mov	sp, r7
 80114b0:	bd80      	pop	{r7, pc}
 80114b2:	bf00      	nop
 80114b4:	200027b8 	.word	0x200027b8

080114b8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80114b8:	b580      	push	{r7, lr}
 80114ba:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 80114be:	af00      	add	r7, sp, #0
 80114c0:	f107 030c 	add.w	r3, r7, #12
 80114c4:	6018      	str	r0, [r3, #0]
 80114c6:	f107 0308 	add.w	r3, r7, #8
 80114ca:	6019      	str	r1, [r3, #0]
 80114cc:	1dfb      	adds	r3, r7, #7
 80114ce:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80114d0:	f107 030c 	add.w	r3, r7, #12
 80114d4:	681b      	ldr	r3, [r3, #0]
 80114d6:	2b00      	cmp	r3, #0
 80114d8:	d101      	bne.n	80114de <f_open+0x26>
 80114da:	2309      	movs	r3, #9
 80114dc:	e24a      	b.n	8011974 <f_open+0x4bc>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80114de:	1dfb      	adds	r3, r7, #7
 80114e0:	1dfa      	adds	r2, r7, #7
 80114e2:	7812      	ldrb	r2, [r2, #0]
 80114e4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80114e8:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 80114ea:	1dfb      	adds	r3, r7, #7
 80114ec:	781a      	ldrb	r2, [r3, #0]
 80114ee:	f507 7105 	add.w	r1, r7, #532	; 0x214
 80114f2:	f107 0308 	add.w	r3, r7, #8
 80114f6:	4618      	mov	r0, r3
 80114f8:	f7ff fca8 	bl	8010e4c <find_volume>
 80114fc:	4603      	mov	r3, r0
 80114fe:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8011502:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8011506:	2b00      	cmp	r3, #0
 8011508:	f040 8221 	bne.w	801194e <f_open+0x496>
		dj.obj.fs = fs;
 801150c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8011510:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 8011514:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8011518:	f107 0214 	add.w	r2, r7, #20
 801151c:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 801151e:	f107 0308 	add.w	r3, r7, #8
 8011522:	681a      	ldr	r2, [r3, #0]
 8011524:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8011528:	4611      	mov	r1, r2
 801152a:	4618      	mov	r0, r3
 801152c:	f7ff fb7e 	bl	8010c2c <follow_path>
 8011530:	4603      	mov	r3, r0
 8011532:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011536:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801153a:	2b00      	cmp	r3, #0
 801153c:	d11b      	bne.n	8011576 <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 801153e:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8011542:	b25b      	sxtb	r3, r3
 8011544:	2b00      	cmp	r3, #0
 8011546:	da03      	bge.n	8011550 <f_open+0x98>
				res = FR_INVALID_NAME;
 8011548:	2306      	movs	r3, #6
 801154a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 801154e:	e012      	b.n	8011576 <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011550:	1dfb      	adds	r3, r7, #7
 8011552:	781b      	ldrb	r3, [r3, #0]
 8011554:	f023 0301 	bic.w	r3, r3, #1
 8011558:	2b00      	cmp	r3, #0
 801155a:	bf14      	ite	ne
 801155c:	2301      	movne	r3, #1
 801155e:	2300      	moveq	r3, #0
 8011560:	b2db      	uxtb	r3, r3
 8011562:	461a      	mov	r2, r3
 8011564:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8011568:	4611      	mov	r1, r2
 801156a:	4618      	mov	r0, r3
 801156c:	f7fd fe0e 	bl	800f18c <chk_lock>
 8011570:	4603      	mov	r3, r0
 8011572:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011576:	1dfb      	adds	r3, r7, #7
 8011578:	781b      	ldrb	r3, [r3, #0]
 801157a:	f003 031c 	and.w	r3, r3, #28
 801157e:	2b00      	cmp	r3, #0
 8011580:	f000 809b 	beq.w	80116ba <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 8011584:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8011588:	2b00      	cmp	r3, #0
 801158a:	d019      	beq.n	80115c0 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801158c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8011590:	2b04      	cmp	r3, #4
 8011592:	d10e      	bne.n	80115b2 <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011594:	f7fd fe56 	bl	800f244 <enq_lock>
 8011598:	4603      	mov	r3, r0
 801159a:	2b00      	cmp	r3, #0
 801159c:	d006      	beq.n	80115ac <f_open+0xf4>
 801159e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 80115a2:	4618      	mov	r0, r3
 80115a4:	f7fe ffb4 	bl	8010510 <dir_register>
 80115a8:	4603      	mov	r3, r0
 80115aa:	e000      	b.n	80115ae <f_open+0xf6>
 80115ac:	2312      	movs	r3, #18
 80115ae:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80115b2:	1dfb      	adds	r3, r7, #7
 80115b4:	1dfa      	adds	r2, r7, #7
 80115b6:	7812      	ldrb	r2, [r2, #0]
 80115b8:	f042 0208 	orr.w	r2, r2, #8
 80115bc:	701a      	strb	r2, [r3, #0]
 80115be:	e012      	b.n	80115e6 <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80115c0:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80115c4:	f003 0311 	and.w	r3, r3, #17
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d003      	beq.n	80115d4 <f_open+0x11c>
					res = FR_DENIED;
 80115cc:	2307      	movs	r3, #7
 80115ce:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80115d2:	e008      	b.n	80115e6 <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80115d4:	1dfb      	adds	r3, r7, #7
 80115d6:	781b      	ldrb	r3, [r3, #0]
 80115d8:	f003 0304 	and.w	r3, r3, #4
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d002      	beq.n	80115e6 <f_open+0x12e>
 80115e0:	2308      	movs	r3, #8
 80115e2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80115e6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	f040 8082 	bne.w	80116f4 <f_open+0x23c>
 80115f0:	1dfb      	adds	r3, r7, #7
 80115f2:	781b      	ldrb	r3, [r3, #0]
 80115f4:	f003 0308 	and.w	r3, r3, #8
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d07b      	beq.n	80116f4 <f_open+0x23c>
				dw = GET_FATTIME();
 80115fc:	f7fb ff04 	bl	800d408 <get_fattime>
 8011600:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011604:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8011608:	330e      	adds	r3, #14
 801160a:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 801160e:	4618      	mov	r0, r3
 8011610:	f7fd fce0 	bl	800efd4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011614:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8011618:	3316      	adds	r3, #22
 801161a:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 801161e:	4618      	mov	r0, r3
 8011620:	f7fd fcd8 	bl	800efd4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011624:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8011628:	330b      	adds	r3, #11
 801162a:	2220      	movs	r2, #32
 801162c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 801162e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8011632:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8011636:	4611      	mov	r1, r2
 8011638:	4618      	mov	r0, r3
 801163a:	f7fe fcdf 	bl	800fffc <ld_clust>
 801163e:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011642:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8011646:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 801164a:	2200      	movs	r2, #0
 801164c:	4618      	mov	r0, r3
 801164e:	f7fe fcf4 	bl	801003a <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011652:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8011656:	331c      	adds	r3, #28
 8011658:	2100      	movs	r1, #0
 801165a:	4618      	mov	r0, r3
 801165c:	f7fd fcba 	bl	800efd4 <st_dword>
					fs->wflag = 1;
 8011660:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8011664:	2201      	movs	r2, #1
 8011666:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011668:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801166c:	2b00      	cmp	r3, #0
 801166e:	d041      	beq.n	80116f4 <f_open+0x23c>
						dw = fs->winsect;
 8011670:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8011674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011676:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 801167a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 801167e:	2200      	movs	r2, #0
 8011680:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8011684:	4618      	mov	r0, r3
 8011686:	f7fe f9de 	bl	800fa46 <remove_chain>
 801168a:	4603      	mov	r3, r0
 801168c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8011690:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8011694:	2b00      	cmp	r3, #0
 8011696:	d12d      	bne.n	80116f4 <f_open+0x23c>
							res = move_window(fs, dw);
 8011698:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801169c:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 80116a0:	4618      	mov	r0, r3
 80116a2:	f7fd ff23 	bl	800f4ec <move_window>
 80116a6:	4603      	mov	r3, r0
 80116a8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80116ac:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80116b0:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80116b4:	3a01      	subs	r2, #1
 80116b6:	619a      	str	r2, [r3, #24]
 80116b8:	e01c      	b.n	80116f4 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80116ba:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d118      	bne.n	80116f4 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80116c2:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80116c6:	f003 0310 	and.w	r3, r3, #16
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d003      	beq.n	80116d6 <f_open+0x21e>
					res = FR_NO_FILE;
 80116ce:	2304      	movs	r3, #4
 80116d0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80116d4:	e00e      	b.n	80116f4 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80116d6:	1dfb      	adds	r3, r7, #7
 80116d8:	781b      	ldrb	r3, [r3, #0]
 80116da:	f003 0302 	and.w	r3, r3, #2
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d008      	beq.n	80116f4 <f_open+0x23c>
 80116e2:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 80116e6:	f003 0301 	and.w	r3, r3, #1
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d002      	beq.n	80116f4 <f_open+0x23c>
						res = FR_DENIED;
 80116ee:	2307      	movs	r3, #7
 80116f0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 80116f4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d136      	bne.n	801176a <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80116fc:	1dfb      	adds	r3, r7, #7
 80116fe:	781b      	ldrb	r3, [r3, #0]
 8011700:	f003 0308 	and.w	r3, r3, #8
 8011704:	2b00      	cmp	r3, #0
 8011706:	d005      	beq.n	8011714 <f_open+0x25c>
				mode |= FA_MODIFIED;
 8011708:	1dfb      	adds	r3, r7, #7
 801170a:	1dfa      	adds	r2, r7, #7
 801170c:	7812      	ldrb	r2, [r2, #0]
 801170e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011712:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011714:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8011718:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801171a:	f107 030c 	add.w	r3, r7, #12
 801171e:	681b      	ldr	r3, [r3, #0]
 8011720:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8011722:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8011726:	f107 030c 	add.w	r3, r7, #12
 801172a:	681b      	ldr	r3, [r3, #0]
 801172c:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801172e:	1dfb      	adds	r3, r7, #7
 8011730:	781b      	ldrb	r3, [r3, #0]
 8011732:	f023 0301 	bic.w	r3, r3, #1
 8011736:	2b00      	cmp	r3, #0
 8011738:	bf14      	ite	ne
 801173a:	2301      	movne	r3, #1
 801173c:	2300      	moveq	r3, #0
 801173e:	b2db      	uxtb	r3, r3
 8011740:	461a      	mov	r2, r3
 8011742:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8011746:	4611      	mov	r1, r2
 8011748:	4618      	mov	r0, r3
 801174a:	f7fd fd9d 	bl	800f288 <inc_lock>
 801174e:	4602      	mov	r2, r0
 8011750:	f107 030c 	add.w	r3, r7, #12
 8011754:	681b      	ldr	r3, [r3, #0]
 8011756:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8011758:	f107 030c 	add.w	r3, r7, #12
 801175c:	681b      	ldr	r3, [r3, #0]
 801175e:	691b      	ldr	r3, [r3, #16]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d102      	bne.n	801176a <f_open+0x2b2>
 8011764:	2302      	movs	r3, #2
 8011766:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 801176a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801176e:	2b00      	cmp	r3, #0
 8011770:	f040 80ed 	bne.w	801194e <f_open+0x496>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8011774:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8011778:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801177c:	4611      	mov	r1, r2
 801177e:	4618      	mov	r0, r3
 8011780:	f7fe fc3c 	bl	800fffc <ld_clust>
 8011784:	4602      	mov	r2, r0
 8011786:	f107 030c 	add.w	r3, r7, #12
 801178a:	681b      	ldr	r3, [r3, #0]
 801178c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801178e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8011792:	331c      	adds	r3, #28
 8011794:	4618      	mov	r0, r3
 8011796:	f7fd fbdf 	bl	800ef58 <ld_dword>
 801179a:	4602      	mov	r2, r0
 801179c:	f107 030c 	add.w	r3, r7, #12
 80117a0:	681b      	ldr	r3, [r3, #0]
 80117a2:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80117a4:	f107 030c 	add.w	r3, r7, #12
 80117a8:	681b      	ldr	r3, [r3, #0]
 80117aa:	2200      	movs	r2, #0
 80117ac:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80117ae:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80117b2:	f107 030c 	add.w	r3, r7, #12
 80117b6:	681b      	ldr	r3, [r3, #0]
 80117b8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80117ba:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80117be:	88da      	ldrh	r2, [r3, #6]
 80117c0:	f107 030c 	add.w	r3, r7, #12
 80117c4:	681b      	ldr	r3, [r3, #0]
 80117c6:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80117c8:	f107 030c 	add.w	r3, r7, #12
 80117cc:	681b      	ldr	r3, [r3, #0]
 80117ce:	1dfa      	adds	r2, r7, #7
 80117d0:	7812      	ldrb	r2, [r2, #0]
 80117d2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80117d4:	f107 030c 	add.w	r3, r7, #12
 80117d8:	681b      	ldr	r3, [r3, #0]
 80117da:	2200      	movs	r2, #0
 80117dc:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80117de:	f107 030c 	add.w	r3, r7, #12
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	2200      	movs	r2, #0
 80117e6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80117e8:	f107 030c 	add.w	r3, r7, #12
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	2200      	movs	r2, #0
 80117f0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80117f2:	f107 030c 	add.w	r3, r7, #12
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	3330      	adds	r3, #48	; 0x30
 80117fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80117fe:	2100      	movs	r1, #0
 8011800:	4618      	mov	r0, r3
 8011802:	f7fd fc34 	bl	800f06e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8011806:	1dfb      	adds	r3, r7, #7
 8011808:	781b      	ldrb	r3, [r3, #0]
 801180a:	f003 0320 	and.w	r3, r3, #32
 801180e:	2b00      	cmp	r3, #0
 8011810:	f000 809d 	beq.w	801194e <f_open+0x496>
 8011814:	f107 030c 	add.w	r3, r7, #12
 8011818:	681b      	ldr	r3, [r3, #0]
 801181a:	68db      	ldr	r3, [r3, #12]
 801181c:	2b00      	cmp	r3, #0
 801181e:	f000 8096 	beq.w	801194e <f_open+0x496>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8011822:	f107 030c 	add.w	r3, r7, #12
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	68da      	ldr	r2, [r3, #12]
 801182a:	f107 030c 	add.w	r3, r7, #12
 801182e:	681b      	ldr	r3, [r3, #0]
 8011830:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8011832:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8011836:	895b      	ldrh	r3, [r3, #10]
 8011838:	461a      	mov	r2, r3
 801183a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801183e:	899b      	ldrh	r3, [r3, #12]
 8011840:	fb03 f302 	mul.w	r3, r3, r2
 8011844:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8011848:	f107 030c 	add.w	r3, r7, #12
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	689b      	ldr	r3, [r3, #8]
 8011850:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011854:	f107 030c 	add.w	r3, r7, #12
 8011858:	681b      	ldr	r3, [r3, #0]
 801185a:	68db      	ldr	r3, [r3, #12]
 801185c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8011860:	e01f      	b.n	80118a2 <f_open+0x3ea>
					clst = get_fat(&fp->obj, clst);
 8011862:	f107 030c 	add.w	r3, r7, #12
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801186c:	4618      	mov	r0, r3
 801186e:	f7fd fefa 	bl	800f666 <get_fat>
 8011872:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8011876:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801187a:	2b01      	cmp	r3, #1
 801187c:	d802      	bhi.n	8011884 <f_open+0x3cc>
 801187e:	2302      	movs	r3, #2
 8011880:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011884:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8011888:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801188c:	d102      	bne.n	8011894 <f_open+0x3dc>
 801188e:	2301      	movs	r3, #1
 8011890:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8011894:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8011898:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801189c:	1ad3      	subs	r3, r2, r3
 801189e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 80118a2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d105      	bne.n	80118b6 <f_open+0x3fe>
 80118aa:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80118ae:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80118b2:	429a      	cmp	r2, r3
 80118b4:	d8d5      	bhi.n	8011862 <f_open+0x3aa>
				}
				fp->clust = clst;
 80118b6:	f107 030c 	add.w	r3, r7, #12
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 80118c0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80118c2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80118c6:	2b00      	cmp	r3, #0
 80118c8:	d141      	bne.n	801194e <f_open+0x496>
 80118ca:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80118ce:	899b      	ldrh	r3, [r3, #12]
 80118d0:	461a      	mov	r2, r3
 80118d2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80118d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80118da:	fb02 f201 	mul.w	r2, r2, r1
 80118de:	1a9b      	subs	r3, r3, r2
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d034      	beq.n	801194e <f_open+0x496>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80118e4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80118e8:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 80118ec:	4618      	mov	r0, r3
 80118ee:	f7fd fe9b 	bl	800f628 <clust2sect>
 80118f2:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 80118f6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d103      	bne.n	8011906 <f_open+0x44e>
						res = FR_INT_ERR;
 80118fe:	2302      	movs	r3, #2
 8011900:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8011904:	e023      	b.n	801194e <f_open+0x496>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8011906:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801190a:	899b      	ldrh	r3, [r3, #12]
 801190c:	461a      	mov	r2, r3
 801190e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8011912:	fbb3 f2f2 	udiv	r2, r3, r2
 8011916:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801191a:	441a      	add	r2, r3
 801191c:	f107 030c 	add.w	r3, r7, #12
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8011924:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8011928:	7858      	ldrb	r0, [r3, #1]
 801192a:	f107 030c 	add.w	r3, r7, #12
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011934:	f107 030c 	add.w	r3, r7, #12
 8011938:	681b      	ldr	r3, [r3, #0]
 801193a:	6a1a      	ldr	r2, [r3, #32]
 801193c:	2301      	movs	r3, #1
 801193e:	f7fd fa95 	bl	800ee6c <disk_read>
 8011942:	4603      	mov	r3, r0
 8011944:	2b00      	cmp	r3, #0
 8011946:	d002      	beq.n	801194e <f_open+0x496>
 8011948:	2301      	movs	r3, #1
 801194a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801194e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8011952:	2b00      	cmp	r3, #0
 8011954:	d004      	beq.n	8011960 <f_open+0x4a8>
 8011956:	f107 030c 	add.w	r3, r7, #12
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	2200      	movs	r2, #0
 801195e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011960:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8011964:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 8011968:	4611      	mov	r1, r2
 801196a:	4618      	mov	r0, r3
 801196c:	f7fd fbf2 	bl	800f154 <unlock_fs>
 8011970:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8011974:	4618      	mov	r0, r3
 8011976:	f507 771a 	add.w	r7, r7, #616	; 0x268
 801197a:	46bd      	mov	sp, r7
 801197c:	bd80      	pop	{r7, pc}

0801197e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801197e:	b580      	push	{r7, lr}
 8011980:	b08c      	sub	sp, #48	; 0x30
 8011982:	af00      	add	r7, sp, #0
 8011984:	60f8      	str	r0, [r7, #12]
 8011986:	60b9      	str	r1, [r7, #8]
 8011988:	607a      	str	r2, [r7, #4]
 801198a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801198c:	68bb      	ldr	r3, [r7, #8]
 801198e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8011990:	683b      	ldr	r3, [r7, #0]
 8011992:	2200      	movs	r2, #0
 8011994:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	f107 0210 	add.w	r2, r7, #16
 801199c:	4611      	mov	r1, r2
 801199e:	4618      	mov	r0, r3
 80119a0:	f7ff fcde 	bl	8011360 <validate>
 80119a4:	4603      	mov	r3, r0
 80119a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80119aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d107      	bne.n	80119c2 <f_write+0x44>
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	7d5b      	ldrb	r3, [r3, #21]
 80119b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80119ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d009      	beq.n	80119d6 <f_write+0x58>
 80119c2:	693b      	ldr	r3, [r7, #16]
 80119c4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80119c8:	4611      	mov	r1, r2
 80119ca:	4618      	mov	r0, r3
 80119cc:	f7fd fbc2 	bl	800f154 <unlock_fs>
 80119d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80119d4:	e192      	b.n	8011cfc <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	7d1b      	ldrb	r3, [r3, #20]
 80119da:	f003 0302 	and.w	r3, r3, #2
 80119de:	2b00      	cmp	r3, #0
 80119e0:	d106      	bne.n	80119f0 <f_write+0x72>
 80119e2:	693b      	ldr	r3, [r7, #16]
 80119e4:	2107      	movs	r1, #7
 80119e6:	4618      	mov	r0, r3
 80119e8:	f7fd fbb4 	bl	800f154 <unlock_fs>
 80119ec:	2307      	movs	r3, #7
 80119ee:	e185      	b.n	8011cfc <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80119f0:	68fb      	ldr	r3, [r7, #12]
 80119f2:	699a      	ldr	r2, [r3, #24]
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	441a      	add	r2, r3
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	699b      	ldr	r3, [r3, #24]
 80119fc:	429a      	cmp	r2, r3
 80119fe:	f080 816a 	bcs.w	8011cd6 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	699b      	ldr	r3, [r3, #24]
 8011a06:	43db      	mvns	r3, r3
 8011a08:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8011a0a:	e164      	b.n	8011cd6 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	699b      	ldr	r3, [r3, #24]
 8011a10:	693a      	ldr	r2, [r7, #16]
 8011a12:	8992      	ldrh	r2, [r2, #12]
 8011a14:	fbb3 f1f2 	udiv	r1, r3, r2
 8011a18:	fb02 f201 	mul.w	r2, r2, r1
 8011a1c:	1a9b      	subs	r3, r3, r2
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	f040 810f 	bne.w	8011c42 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8011a24:	68fb      	ldr	r3, [r7, #12]
 8011a26:	699b      	ldr	r3, [r3, #24]
 8011a28:	693a      	ldr	r2, [r7, #16]
 8011a2a:	8992      	ldrh	r2, [r2, #12]
 8011a2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a30:	693a      	ldr	r2, [r7, #16]
 8011a32:	8952      	ldrh	r2, [r2, #10]
 8011a34:	3a01      	subs	r2, #1
 8011a36:	4013      	ands	r3, r2
 8011a38:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8011a3a:	69bb      	ldr	r3, [r7, #24]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d14d      	bne.n	8011adc <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	699b      	ldr	r3, [r3, #24]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d10c      	bne.n	8011a62 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	689b      	ldr	r3, [r3, #8]
 8011a4c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8011a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d11a      	bne.n	8011a8a <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	2100      	movs	r1, #0
 8011a58:	4618      	mov	r0, r3
 8011a5a:	f7fe f859 	bl	800fb10 <create_chain>
 8011a5e:	62b8      	str	r0, [r7, #40]	; 0x28
 8011a60:	e013      	b.n	8011a8a <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8011a62:	68fb      	ldr	r3, [r7, #12]
 8011a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d007      	beq.n	8011a7a <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8011a6a:	68fb      	ldr	r3, [r7, #12]
 8011a6c:	699b      	ldr	r3, [r3, #24]
 8011a6e:	4619      	mov	r1, r3
 8011a70:	68f8      	ldr	r0, [r7, #12]
 8011a72:	f7fe f8e5 	bl	800fc40 <clmt_clust>
 8011a76:	62b8      	str	r0, [r7, #40]	; 0x28
 8011a78:	e007      	b.n	8011a8a <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8011a7a:	68fa      	ldr	r2, [r7, #12]
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	69db      	ldr	r3, [r3, #28]
 8011a80:	4619      	mov	r1, r3
 8011a82:	4610      	mov	r0, r2
 8011a84:	f7fe f844 	bl	800fb10 <create_chain>
 8011a88:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	f000 8127 	beq.w	8011ce0 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8011a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a94:	2b01      	cmp	r3, #1
 8011a96:	d109      	bne.n	8011aac <f_write+0x12e>
 8011a98:	68fb      	ldr	r3, [r7, #12]
 8011a9a:	2202      	movs	r2, #2
 8011a9c:	755a      	strb	r2, [r3, #21]
 8011a9e:	693b      	ldr	r3, [r7, #16]
 8011aa0:	2102      	movs	r1, #2
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	f7fd fb56 	bl	800f154 <unlock_fs>
 8011aa8:	2302      	movs	r3, #2
 8011aaa:	e127      	b.n	8011cfc <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8011aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011aae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011ab2:	d109      	bne.n	8011ac8 <f_write+0x14a>
 8011ab4:	68fb      	ldr	r3, [r7, #12]
 8011ab6:	2201      	movs	r2, #1
 8011ab8:	755a      	strb	r2, [r3, #21]
 8011aba:	693b      	ldr	r3, [r7, #16]
 8011abc:	2101      	movs	r1, #1
 8011abe:	4618      	mov	r0, r3
 8011ac0:	f7fd fb48 	bl	800f154 <unlock_fs>
 8011ac4:	2301      	movs	r3, #1
 8011ac6:	e119      	b.n	8011cfc <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8011ac8:	68fb      	ldr	r3, [r7, #12]
 8011aca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011acc:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8011ace:	68fb      	ldr	r3, [r7, #12]
 8011ad0:	689b      	ldr	r3, [r3, #8]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d102      	bne.n	8011adc <f_write+0x15e>
 8011ad6:	68fb      	ldr	r3, [r7, #12]
 8011ad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011ada:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8011adc:	68fb      	ldr	r3, [r7, #12]
 8011ade:	7d1b      	ldrb	r3, [r3, #20]
 8011ae0:	b25b      	sxtb	r3, r3
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	da1d      	bge.n	8011b22 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011ae6:	693b      	ldr	r3, [r7, #16]
 8011ae8:	7858      	ldrb	r0, [r3, #1]
 8011aea:	68fb      	ldr	r3, [r7, #12]
 8011aec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	6a1a      	ldr	r2, [r3, #32]
 8011af4:	2301      	movs	r3, #1
 8011af6:	f7fd f9d9 	bl	800eeac <disk_write>
 8011afa:	4603      	mov	r3, r0
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d009      	beq.n	8011b14 <f_write+0x196>
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	2201      	movs	r2, #1
 8011b04:	755a      	strb	r2, [r3, #21]
 8011b06:	693b      	ldr	r3, [r7, #16]
 8011b08:	2101      	movs	r1, #1
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f7fd fb22 	bl	800f154 <unlock_fs>
 8011b10:	2301      	movs	r3, #1
 8011b12:	e0f3      	b.n	8011cfc <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011b14:	68fb      	ldr	r3, [r7, #12]
 8011b16:	7d1b      	ldrb	r3, [r3, #20]
 8011b18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011b1c:	b2da      	uxtb	r2, r3
 8011b1e:	68fb      	ldr	r3, [r7, #12]
 8011b20:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8011b22:	693a      	ldr	r2, [r7, #16]
 8011b24:	68fb      	ldr	r3, [r7, #12]
 8011b26:	69db      	ldr	r3, [r3, #28]
 8011b28:	4619      	mov	r1, r3
 8011b2a:	4610      	mov	r0, r2
 8011b2c:	f7fd fd7c 	bl	800f628 <clust2sect>
 8011b30:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8011b32:	697b      	ldr	r3, [r7, #20]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d109      	bne.n	8011b4c <f_write+0x1ce>
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	2202      	movs	r2, #2
 8011b3c:	755a      	strb	r2, [r3, #21]
 8011b3e:	693b      	ldr	r3, [r7, #16]
 8011b40:	2102      	movs	r1, #2
 8011b42:	4618      	mov	r0, r3
 8011b44:	f7fd fb06 	bl	800f154 <unlock_fs>
 8011b48:	2302      	movs	r3, #2
 8011b4a:	e0d7      	b.n	8011cfc <f_write+0x37e>
			sect += csect;
 8011b4c:	697a      	ldr	r2, [r7, #20]
 8011b4e:	69bb      	ldr	r3, [r7, #24]
 8011b50:	4413      	add	r3, r2
 8011b52:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8011b54:	693b      	ldr	r3, [r7, #16]
 8011b56:	899b      	ldrh	r3, [r3, #12]
 8011b58:	461a      	mov	r2, r3
 8011b5a:	687b      	ldr	r3, [r7, #4]
 8011b5c:	fbb3 f3f2 	udiv	r3, r3, r2
 8011b60:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8011b62:	6a3b      	ldr	r3, [r7, #32]
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d048      	beq.n	8011bfa <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8011b68:	69ba      	ldr	r2, [r7, #24]
 8011b6a:	6a3b      	ldr	r3, [r7, #32]
 8011b6c:	4413      	add	r3, r2
 8011b6e:	693a      	ldr	r2, [r7, #16]
 8011b70:	8952      	ldrh	r2, [r2, #10]
 8011b72:	4293      	cmp	r3, r2
 8011b74:	d905      	bls.n	8011b82 <f_write+0x204>
					cc = fs->csize - csect;
 8011b76:	693b      	ldr	r3, [r7, #16]
 8011b78:	895b      	ldrh	r3, [r3, #10]
 8011b7a:	461a      	mov	r2, r3
 8011b7c:	69bb      	ldr	r3, [r7, #24]
 8011b7e:	1ad3      	subs	r3, r2, r3
 8011b80:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8011b82:	693b      	ldr	r3, [r7, #16]
 8011b84:	7858      	ldrb	r0, [r3, #1]
 8011b86:	6a3b      	ldr	r3, [r7, #32]
 8011b88:	697a      	ldr	r2, [r7, #20]
 8011b8a:	69f9      	ldr	r1, [r7, #28]
 8011b8c:	f7fd f98e 	bl	800eeac <disk_write>
 8011b90:	4603      	mov	r3, r0
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d009      	beq.n	8011baa <f_write+0x22c>
 8011b96:	68fb      	ldr	r3, [r7, #12]
 8011b98:	2201      	movs	r2, #1
 8011b9a:	755a      	strb	r2, [r3, #21]
 8011b9c:	693b      	ldr	r3, [r7, #16]
 8011b9e:	2101      	movs	r1, #1
 8011ba0:	4618      	mov	r0, r3
 8011ba2:	f7fd fad7 	bl	800f154 <unlock_fs>
 8011ba6:	2301      	movs	r3, #1
 8011ba8:	e0a8      	b.n	8011cfc <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8011baa:	68fb      	ldr	r3, [r7, #12]
 8011bac:	6a1a      	ldr	r2, [r3, #32]
 8011bae:	697b      	ldr	r3, [r7, #20]
 8011bb0:	1ad3      	subs	r3, r2, r3
 8011bb2:	6a3a      	ldr	r2, [r7, #32]
 8011bb4:	429a      	cmp	r2, r3
 8011bb6:	d918      	bls.n	8011bea <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8011bb8:	68fb      	ldr	r3, [r7, #12]
 8011bba:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8011bbe:	68fb      	ldr	r3, [r7, #12]
 8011bc0:	6a1a      	ldr	r2, [r3, #32]
 8011bc2:	697b      	ldr	r3, [r7, #20]
 8011bc4:	1ad3      	subs	r3, r2, r3
 8011bc6:	693a      	ldr	r2, [r7, #16]
 8011bc8:	8992      	ldrh	r2, [r2, #12]
 8011bca:	fb02 f303 	mul.w	r3, r2, r3
 8011bce:	69fa      	ldr	r2, [r7, #28]
 8011bd0:	18d1      	adds	r1, r2, r3
 8011bd2:	693b      	ldr	r3, [r7, #16]
 8011bd4:	899b      	ldrh	r3, [r3, #12]
 8011bd6:	461a      	mov	r2, r3
 8011bd8:	f7fd fa28 	bl	800f02c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	7d1b      	ldrb	r3, [r3, #20]
 8011be0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011be4:	b2da      	uxtb	r2, r3
 8011be6:	68fb      	ldr	r3, [r7, #12]
 8011be8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8011bea:	693b      	ldr	r3, [r7, #16]
 8011bec:	899b      	ldrh	r3, [r3, #12]
 8011bee:	461a      	mov	r2, r3
 8011bf0:	6a3b      	ldr	r3, [r7, #32]
 8011bf2:	fb02 f303 	mul.w	r3, r2, r3
 8011bf6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8011bf8:	e050      	b.n	8011c9c <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011bfa:	68fb      	ldr	r3, [r7, #12]
 8011bfc:	6a1b      	ldr	r3, [r3, #32]
 8011bfe:	697a      	ldr	r2, [r7, #20]
 8011c00:	429a      	cmp	r2, r3
 8011c02:	d01b      	beq.n	8011c3c <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	699a      	ldr	r2, [r3, #24]
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8011c0c:	429a      	cmp	r2, r3
 8011c0e:	d215      	bcs.n	8011c3c <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8011c10:	693b      	ldr	r3, [r7, #16]
 8011c12:	7858      	ldrb	r0, [r3, #1]
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011c1a:	2301      	movs	r3, #1
 8011c1c:	697a      	ldr	r2, [r7, #20]
 8011c1e:	f7fd f925 	bl	800ee6c <disk_read>
 8011c22:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d009      	beq.n	8011c3c <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	2201      	movs	r2, #1
 8011c2c:	755a      	strb	r2, [r3, #21]
 8011c2e:	693b      	ldr	r3, [r7, #16]
 8011c30:	2101      	movs	r1, #1
 8011c32:	4618      	mov	r0, r3
 8011c34:	f7fd fa8e 	bl	800f154 <unlock_fs>
 8011c38:	2301      	movs	r3, #1
 8011c3a:	e05f      	b.n	8011cfc <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8011c3c:	68fb      	ldr	r3, [r7, #12]
 8011c3e:	697a      	ldr	r2, [r7, #20]
 8011c40:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8011c42:	693b      	ldr	r3, [r7, #16]
 8011c44:	899b      	ldrh	r3, [r3, #12]
 8011c46:	4618      	mov	r0, r3
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	699b      	ldr	r3, [r3, #24]
 8011c4c:	693a      	ldr	r2, [r7, #16]
 8011c4e:	8992      	ldrh	r2, [r2, #12]
 8011c50:	fbb3 f1f2 	udiv	r1, r3, r2
 8011c54:	fb02 f201 	mul.w	r2, r2, r1
 8011c58:	1a9b      	subs	r3, r3, r2
 8011c5a:	1ac3      	subs	r3, r0, r3
 8011c5c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8011c5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c60:	687b      	ldr	r3, [r7, #4]
 8011c62:	429a      	cmp	r2, r3
 8011c64:	d901      	bls.n	8011c6a <f_write+0x2ec>
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8011c6a:	68fb      	ldr	r3, [r7, #12]
 8011c6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	699b      	ldr	r3, [r3, #24]
 8011c74:	693a      	ldr	r2, [r7, #16]
 8011c76:	8992      	ldrh	r2, [r2, #12]
 8011c78:	fbb3 f0f2 	udiv	r0, r3, r2
 8011c7c:	fb02 f200 	mul.w	r2, r2, r0
 8011c80:	1a9b      	subs	r3, r3, r2
 8011c82:	440b      	add	r3, r1
 8011c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c86:	69f9      	ldr	r1, [r7, #28]
 8011c88:	4618      	mov	r0, r3
 8011c8a:	f7fd f9cf 	bl	800f02c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8011c8e:	68fb      	ldr	r3, [r7, #12]
 8011c90:	7d1b      	ldrb	r3, [r3, #20]
 8011c92:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011c96:	b2da      	uxtb	r2, r3
 8011c98:	68fb      	ldr	r3, [r7, #12]
 8011c9a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8011c9c:	69fa      	ldr	r2, [r7, #28]
 8011c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ca0:	4413      	add	r3, r2
 8011ca2:	61fb      	str	r3, [r7, #28]
 8011ca4:	68fb      	ldr	r3, [r7, #12]
 8011ca6:	699a      	ldr	r2, [r3, #24]
 8011ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011caa:	441a      	add	r2, r3
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	619a      	str	r2, [r3, #24]
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	68da      	ldr	r2, [r3, #12]
 8011cb4:	68fb      	ldr	r3, [r7, #12]
 8011cb6:	699b      	ldr	r3, [r3, #24]
 8011cb8:	429a      	cmp	r2, r3
 8011cba:	bf38      	it	cc
 8011cbc:	461a      	movcc	r2, r3
 8011cbe:	68fb      	ldr	r3, [r7, #12]
 8011cc0:	60da      	str	r2, [r3, #12]
 8011cc2:	683b      	ldr	r3, [r7, #0]
 8011cc4:	681a      	ldr	r2, [r3, #0]
 8011cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cc8:	441a      	add	r2, r3
 8011cca:	683b      	ldr	r3, [r7, #0]
 8011ccc:	601a      	str	r2, [r3, #0]
 8011cce:	687a      	ldr	r2, [r7, #4]
 8011cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd2:	1ad3      	subs	r3, r2, r3
 8011cd4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8011cd6:	687b      	ldr	r3, [r7, #4]
 8011cd8:	2b00      	cmp	r3, #0
 8011cda:	f47f ae97 	bne.w	8011a0c <f_write+0x8e>
 8011cde:	e000      	b.n	8011ce2 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8011ce0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8011ce2:	68fb      	ldr	r3, [r7, #12]
 8011ce4:	7d1b      	ldrb	r3, [r3, #20]
 8011ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011cea:	b2da      	uxtb	r2, r3
 8011cec:	68fb      	ldr	r3, [r7, #12]
 8011cee:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8011cf0:	693b      	ldr	r3, [r7, #16]
 8011cf2:	2100      	movs	r1, #0
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	f7fd fa2d 	bl	800f154 <unlock_fs>
 8011cfa:	2300      	movs	r3, #0
}
 8011cfc:	4618      	mov	r0, r3
 8011cfe:	3730      	adds	r7, #48	; 0x30
 8011d00:	46bd      	mov	sp, r7
 8011d02:	bd80      	pop	{r7, pc}

08011d04 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8011d04:	b580      	push	{r7, lr}
 8011d06:	b086      	sub	sp, #24
 8011d08:	af00      	add	r7, sp, #0
 8011d0a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	f107 0208 	add.w	r2, r7, #8
 8011d12:	4611      	mov	r1, r2
 8011d14:	4618      	mov	r0, r3
 8011d16:	f7ff fb23 	bl	8011360 <validate>
 8011d1a:	4603      	mov	r3, r0
 8011d1c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8011d1e:	7dfb      	ldrb	r3, [r7, #23]
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d16d      	bne.n	8011e00 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	7d1b      	ldrb	r3, [r3, #20]
 8011d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d067      	beq.n	8011e00 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	7d1b      	ldrb	r3, [r3, #20]
 8011d34:	b25b      	sxtb	r3, r3
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	da1a      	bge.n	8011d70 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8011d3a:	68bb      	ldr	r3, [r7, #8]
 8011d3c:	7858      	ldrb	r0, [r3, #1]
 8011d3e:	687b      	ldr	r3, [r7, #4]
 8011d40:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	6a1a      	ldr	r2, [r3, #32]
 8011d48:	2301      	movs	r3, #1
 8011d4a:	f7fd f8af 	bl	800eeac <disk_write>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	2b00      	cmp	r3, #0
 8011d52:	d006      	beq.n	8011d62 <f_sync+0x5e>
 8011d54:	68bb      	ldr	r3, [r7, #8]
 8011d56:	2101      	movs	r1, #1
 8011d58:	4618      	mov	r0, r3
 8011d5a:	f7fd f9fb 	bl	800f154 <unlock_fs>
 8011d5e:	2301      	movs	r3, #1
 8011d60:	e055      	b.n	8011e0e <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	7d1b      	ldrb	r3, [r3, #20]
 8011d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d6a:	b2da      	uxtb	r2, r3
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8011d70:	f7fb fb4a 	bl	800d408 <get_fattime>
 8011d74:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8011d76:	68ba      	ldr	r2, [r7, #8]
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d7c:	4619      	mov	r1, r3
 8011d7e:	4610      	mov	r0, r2
 8011d80:	f7fd fbb4 	bl	800f4ec <move_window>
 8011d84:	4603      	mov	r3, r0
 8011d86:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8011d88:	7dfb      	ldrb	r3, [r7, #23]
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d138      	bne.n	8011e00 <f_sync+0xfc>
					dir = fp->dir_ptr;
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011d92:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8011d94:	68fb      	ldr	r3, [r7, #12]
 8011d96:	330b      	adds	r3, #11
 8011d98:	781a      	ldrb	r2, [r3, #0]
 8011d9a:	68fb      	ldr	r3, [r7, #12]
 8011d9c:	330b      	adds	r3, #11
 8011d9e:	f042 0220 	orr.w	r2, r2, #32
 8011da2:	b2d2      	uxtb	r2, r2
 8011da4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	6818      	ldr	r0, [r3, #0]
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	689b      	ldr	r3, [r3, #8]
 8011dae:	461a      	mov	r2, r3
 8011db0:	68f9      	ldr	r1, [r7, #12]
 8011db2:	f7fe f942 	bl	801003a <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8011db6:	68fb      	ldr	r3, [r7, #12]
 8011db8:	f103 021c 	add.w	r2, r3, #28
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	68db      	ldr	r3, [r3, #12]
 8011dc0:	4619      	mov	r1, r3
 8011dc2:	4610      	mov	r0, r2
 8011dc4:	f7fd f906 	bl	800efd4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	3316      	adds	r3, #22
 8011dcc:	6939      	ldr	r1, [r7, #16]
 8011dce:	4618      	mov	r0, r3
 8011dd0:	f7fd f900 	bl	800efd4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	3312      	adds	r3, #18
 8011dd8:	2100      	movs	r1, #0
 8011dda:	4618      	mov	r0, r3
 8011ddc:	f7fd f8df 	bl	800ef9e <st_word>
					fs->wflag = 1;
 8011de0:	68bb      	ldr	r3, [r7, #8]
 8011de2:	2201      	movs	r2, #1
 8011de4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8011de6:	68bb      	ldr	r3, [r7, #8]
 8011de8:	4618      	mov	r0, r3
 8011dea:	f7fd fbad 	bl	800f548 <sync_fs>
 8011dee:	4603      	mov	r3, r0
 8011df0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8011df2:	687b      	ldr	r3, [r7, #4]
 8011df4:	7d1b      	ldrb	r3, [r3, #20]
 8011df6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011dfa:	b2da      	uxtb	r2, r3
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8011e00:	68bb      	ldr	r3, [r7, #8]
 8011e02:	7dfa      	ldrb	r2, [r7, #23]
 8011e04:	4611      	mov	r1, r2
 8011e06:	4618      	mov	r0, r3
 8011e08:	f7fd f9a4 	bl	800f154 <unlock_fs>
 8011e0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e0e:	4618      	mov	r0, r3
 8011e10:	3718      	adds	r7, #24
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd80      	pop	{r7, pc}

08011e16 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8011e16:	b580      	push	{r7, lr}
 8011e18:	b084      	sub	sp, #16
 8011e1a:	af00      	add	r7, sp, #0
 8011e1c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8011e1e:	6878      	ldr	r0, [r7, #4]
 8011e20:	f7ff ff70 	bl	8011d04 <f_sync>
 8011e24:	4603      	mov	r3, r0
 8011e26:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8011e28:	7bfb      	ldrb	r3, [r7, #15]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d11d      	bne.n	8011e6a <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	f107 0208 	add.w	r2, r7, #8
 8011e34:	4611      	mov	r1, r2
 8011e36:	4618      	mov	r0, r3
 8011e38:	f7ff fa92 	bl	8011360 <validate>
 8011e3c:	4603      	mov	r3, r0
 8011e3e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011e40:	7bfb      	ldrb	r3, [r7, #15]
 8011e42:	2b00      	cmp	r3, #0
 8011e44:	d111      	bne.n	8011e6a <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8011e46:	687b      	ldr	r3, [r7, #4]
 8011e48:	691b      	ldr	r3, [r3, #16]
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	f7fd faaa 	bl	800f3a4 <dec_lock>
 8011e50:	4603      	mov	r3, r0
 8011e52:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8011e54:	7bfb      	ldrb	r3, [r7, #15]
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d102      	bne.n	8011e60 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8011e5a:	687b      	ldr	r3, [r7, #4]
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	2100      	movs	r1, #0
 8011e64:	4618      	mov	r0, r3
 8011e66:	f7fd f975 	bl	800f154 <unlock_fs>
#endif
		}
	}
	return res;
 8011e6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e6c:	4618      	mov	r0, r3
 8011e6e:	3710      	adds	r7, #16
 8011e70:	46bd      	mov	sp, r7
 8011e72:	bd80      	pop	{r7, pc}

08011e74 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8011e74:	b580      	push	{r7, lr}
 8011e76:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 8011e7a:	af00      	add	r7, sp, #0
 8011e7c:	1d3b      	adds	r3, r7, #4
 8011e7e:	6018      	str	r0, [r3, #0]
 8011e80:	463b      	mov	r3, r7
 8011e82:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8011e84:	f507 7102 	add.w	r1, r7, #520	; 0x208
 8011e88:	1d3b      	adds	r3, r7, #4
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	4618      	mov	r0, r3
 8011e8e:	f7fe ffdd 	bl	8010e4c <find_volume>
 8011e92:	4603      	mov	r3, r0
 8011e94:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
	if (res == FR_OK) {
 8011e98:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d127      	bne.n	8011ef0 <f_stat+0x7c>
		INIT_NAMBUF(dj.obj.fs);
 8011ea0:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8011ea4:	f107 0208 	add.w	r2, r7, #8
 8011ea8:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8011eaa:	1d3b      	adds	r3, r7, #4
 8011eac:	681a      	ldr	r2, [r3, #0]
 8011eae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8011eb2:	4611      	mov	r1, r2
 8011eb4:	4618      	mov	r0, r3
 8011eb6:	f7fe feb9 	bl	8010c2c <follow_path>
 8011eba:	4603      	mov	r3, r0
 8011ebc:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		if (res == FR_OK) {				/* Follow completed */
 8011ec0:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8011ec4:	2b00      	cmp	r3, #0
 8011ec6:	d113      	bne.n	8011ef0 <f_stat+0x7c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8011ec8:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8011ecc:	b25b      	sxtb	r3, r3
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	da03      	bge.n	8011eda <f_stat+0x66>
				res = FR_INVALID_NAME;
 8011ed2:	2306      	movs	r3, #6
 8011ed4:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 8011ed8:	e00a      	b.n	8011ef0 <f_stat+0x7c>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8011eda:	463b      	mov	r3, r7
 8011edc:	681b      	ldr	r3, [r3, #0]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d006      	beq.n	8011ef0 <f_stat+0x7c>
 8011ee2:	463b      	mov	r3, r7
 8011ee4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8011ee8:	6819      	ldr	r1, [r3, #0]
 8011eea:	4610      	mov	r0, r2
 8011eec:	f7fe fc08 	bl	8010700 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8011ef0:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8011ef4:	f897 223f 	ldrb.w	r2, [r7, #575]	; 0x23f
 8011ef8:	4611      	mov	r1, r2
 8011efa:	4618      	mov	r0, r3
 8011efc:	f7fd f92a 	bl	800f154 <unlock_fs>
 8011f00:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
}
 8011f04:	4618      	mov	r0, r3
 8011f06:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8011f0a:	46bd      	mov	sp, r7
 8011f0c:	bd80      	pop	{r7, pc}

08011f0e <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8011f0e:	b580      	push	{r7, lr}
 8011f10:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	1d3b      	adds	r3, r7, #4
 8011f18:	6018      	str	r0, [r3, #0]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8011f1a:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8011f1e:	1d3b      	adds	r3, r7, #4
 8011f20:	2202      	movs	r2, #2
 8011f22:	4618      	mov	r0, r3
 8011f24:	f7fe ff92 	bl	8010e4c <find_volume>
 8011f28:	4603      	mov	r3, r0
 8011f2a:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
	dj.obj.fs = fs;
 8011f2e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8011f32:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	if (res == FR_OK) {
 8011f36:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	f040 8134 	bne.w	80121a8 <f_mkdir+0x29a>
		INIT_NAMBUF(fs);
 8011f40:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8011f44:	f107 020c 	add.w	r2, r7, #12
 8011f48:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);			/* Follow the file path */
 8011f4a:	1d3b      	adds	r3, r7, #4
 8011f4c:	681a      	ldr	r2, [r3, #0]
 8011f4e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8011f52:	4611      	mov	r1, r2
 8011f54:	4618      	mov	r0, r3
 8011f56:	f7fe fe69 	bl	8010c2c <follow_path>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8011f60:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d102      	bne.n	8011f6e <f_mkdir+0x60>
 8011f68:	2308      	movs	r3, #8
 8011f6a:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 8011f6e:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8011f72:	2b04      	cmp	r3, #4
 8011f74:	f040 8118 	bne.w	80121a8 <f_mkdir+0x29a>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8011f78:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8011f7c:	2100      	movs	r1, #0
 8011f7e:	4618      	mov	r0, r3
 8011f80:	f7fd fdc6 	bl	800fb10 <create_chain>
 8011f84:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8011f88:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8011f8c:	895b      	ldrh	r3, [r3, #10]
 8011f8e:	461a      	mov	r2, r3
 8011f90:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8011f94:	899b      	ldrh	r3, [r3, #12]
 8011f96:	fb03 f302 	mul.w	r3, r3, r2
 8011f9a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
			res = FR_OK;
 8011f9e:	2300      	movs	r3, #0
 8011fa0:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8011fa4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d102      	bne.n	8011fb2 <f_mkdir+0xa4>
 8011fac:	2307      	movs	r3, #7
 8011fae:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 1) res = FR_INT_ERR;
 8011fb2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8011fb6:	2b01      	cmp	r3, #1
 8011fb8:	d102      	bne.n	8011fc0 <f_mkdir+0xb2>
 8011fba:	2302      	movs	r3, #2
 8011fbc:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8011fc0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8011fc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011fc8:	d102      	bne.n	8011fd0 <f_mkdir+0xc2>
 8011fca:	2301      	movs	r3, #1
 8011fcc:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8011fd0:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d107      	bne.n	8011fe8 <f_mkdir+0xda>
 8011fd8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f7fd fa41 	bl	800f464 <sync_window>
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			tm = GET_FATTIME();
 8011fe8:	f7fb fa0e 	bl	800d408 <get_fattime>
 8011fec:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
			if (res == FR_OK) {					/* Initialize the new directory table */
 8011ff0:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8011ff4:	2b00      	cmp	r3, #0
 8011ff6:	f040 8094 	bne.w	8012122 <f_mkdir+0x214>
				dsc = clust2sect(fs, dcl);
 8011ffa:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8011ffe:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 8012002:	4618      	mov	r0, r3
 8012004:	f7fd fb10 	bl	800f628 <clust2sect>
 8012008:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
				dir = fs->win;
 801200c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012010:	333c      	adds	r3, #60	; 0x3c
 8012012:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				mem_set(dir, 0, SS(fs));
 8012016:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801201a:	899b      	ldrh	r3, [r3, #12]
 801201c:	461a      	mov	r2, r3
 801201e:	2100      	movs	r1, #0
 8012020:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8012024:	f7fd f823 	bl	800f06e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8012028:	220b      	movs	r2, #11
 801202a:	2120      	movs	r1, #32
 801202c:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8012030:	f7fd f81d 	bl	800f06e <mem_set>
					dir[DIR_Name] = '.';
 8012034:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012038:	222e      	movs	r2, #46	; 0x2e
 801203a:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 801203c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012040:	330b      	adds	r3, #11
 8012042:	2210      	movs	r2, #16
 8012044:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8012046:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801204a:	3316      	adds	r3, #22
 801204c:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8012050:	4618      	mov	r0, r3
 8012052:	f7fc ffbf 	bl	800efd4 <st_dword>
					st_clust(fs, dir, dcl);
 8012056:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801205a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 801205e:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8012062:	4618      	mov	r0, r3
 8012064:	f7fd ffe9 	bl	801003a <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8012068:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801206c:	3320      	adds	r3, #32
 801206e:	2220      	movs	r2, #32
 8012070:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8012074:	4618      	mov	r0, r3
 8012076:	f7fc ffd9 	bl	800f02c <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801207a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801207e:	3321      	adds	r3, #33	; 0x21
 8012080:	222e      	movs	r2, #46	; 0x2e
 8012082:	701a      	strb	r2, [r3, #0]
 8012084:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8012088:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801208c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012090:	781b      	ldrb	r3, [r3, #0]
 8012092:	2b03      	cmp	r3, #3
 8012094:	d109      	bne.n	80120aa <f_mkdir+0x19c>
 8012096:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801209a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801209c:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 80120a0:	429a      	cmp	r2, r3
 80120a2:	d102      	bne.n	80120aa <f_mkdir+0x19c>
 80120a4:	2300      	movs	r3, #0
 80120a6:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
					st_clust(fs, dir + SZDIRE, pcl);
 80120aa:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 80120ae:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80120b2:	3320      	adds	r3, #32
 80120b4:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 80120b8:	4619      	mov	r1, r3
 80120ba:	f7fd ffbe 	bl	801003a <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80120be:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80120c2:	895b      	ldrh	r3, [r3, #10]
 80120c4:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 80120c8:	e025      	b.n	8012116 <f_mkdir+0x208>
					fs->winsect = dsc++;
 80120ca:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80120ce:	1c5a      	adds	r2, r3, #1
 80120d0:	f8c7 2254 	str.w	r2, [r7, #596]	; 0x254
 80120d4:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 80120d8:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 80120da:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80120de:	2201      	movs	r2, #1
 80120e0:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80120e2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80120e6:	4618      	mov	r0, r3
 80120e8:	f7fd f9bc 	bl	800f464 <sync_window>
 80120ec:	4603      	mov	r3, r0
 80120ee:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
					if (res != FR_OK) break;
 80120f2:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80120f6:	2b00      	cmp	r3, #0
 80120f8:	d112      	bne.n	8012120 <f_mkdir+0x212>
					mem_set(dir, 0, SS(fs));
 80120fa:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80120fe:	899b      	ldrh	r3, [r3, #12]
 8012100:	461a      	mov	r2, r3
 8012102:	2100      	movs	r1, #0
 8012104:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8012108:	f7fc ffb1 	bl	800f06e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801210c:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8012110:	3b01      	subs	r3, #1
 8012112:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 8012116:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801211a:	2b00      	cmp	r3, #0
 801211c:	d1d5      	bne.n	80120ca <f_mkdir+0x1bc>
 801211e:	e000      	b.n	8012122 <f_mkdir+0x214>
					if (res != FR_OK) break;
 8012120:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 8012122:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8012126:	2b00      	cmp	r3, #0
 8012128:	d107      	bne.n	801213a <f_mkdir+0x22c>
				res = dir_register(&dj);	/* Register the object to the directoy */
 801212a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801212e:	4618      	mov	r0, r3
 8012130:	f7fe f9ee 	bl	8010510 <dir_register>
 8012134:	4603      	mov	r3, r0
 8012136:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			}
			if (res == FR_OK) {
 801213a:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 801213e:	2b00      	cmp	r3, #0
 8012140:	d12a      	bne.n	8012198 <f_mkdir+0x28a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8012142:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8012146:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 801214a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801214e:	3316      	adds	r3, #22
 8012150:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8012154:	4618      	mov	r0, r3
 8012156:	f7fc ff3d 	bl	800efd4 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 801215a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801215e:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8012162:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8012166:	4618      	mov	r0, r3
 8012168:	f7fd ff67 	bl	801003a <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 801216c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012170:	330b      	adds	r3, #11
 8012172:	2210      	movs	r2, #16
 8012174:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8012176:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801217a:	2201      	movs	r2, #1
 801217c:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 801217e:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8012182:	2b00      	cmp	r3, #0
 8012184:	d110      	bne.n	80121a8 <f_mkdir+0x29a>
					res = sync_fs(fs);
 8012186:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801218a:	4618      	mov	r0, r3
 801218c:	f7fd f9dc 	bl	800f548 <sync_fs>
 8012190:	4603      	mov	r3, r0
 8012192:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 8012196:	e007      	b.n	80121a8 <f_mkdir+0x29a>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8012198:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801219c:	2200      	movs	r2, #0
 801219e:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 80121a2:	4618      	mov	r0, r3
 80121a4:	f7fd fc4f 	bl	800fa46 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 80121a8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80121ac:	f897 225f 	ldrb.w	r2, [r7, #607]	; 0x25f
 80121b0:	4611      	mov	r1, r2
 80121b2:	4618      	mov	r0, r3
 80121b4:	f7fc ffce 	bl	800f154 <unlock_fs>
 80121b8:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
}
 80121bc:	4618      	mov	r0, r3
 80121be:	f507 7718 	add.w	r7, r7, #608	; 0x260
 80121c2:	46bd      	mov	sp, r7
 80121c4:	bd80      	pop	{r7, pc}
	...

080121c8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80121c8:	b480      	push	{r7}
 80121ca:	b087      	sub	sp, #28
 80121cc:	af00      	add	r7, sp, #0
 80121ce:	60f8      	str	r0, [r7, #12]
 80121d0:	60b9      	str	r1, [r7, #8]
 80121d2:	4613      	mov	r3, r2
 80121d4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80121d6:	2301      	movs	r3, #1
 80121d8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80121da:	2300      	movs	r3, #0
 80121dc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80121de:	4b1f      	ldr	r3, [pc, #124]	; (801225c <FATFS_LinkDriverEx+0x94>)
 80121e0:	7a5b      	ldrb	r3, [r3, #9]
 80121e2:	b2db      	uxtb	r3, r3
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d131      	bne.n	801224c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80121e8:	4b1c      	ldr	r3, [pc, #112]	; (801225c <FATFS_LinkDriverEx+0x94>)
 80121ea:	7a5b      	ldrb	r3, [r3, #9]
 80121ec:	b2db      	uxtb	r3, r3
 80121ee:	461a      	mov	r2, r3
 80121f0:	4b1a      	ldr	r3, [pc, #104]	; (801225c <FATFS_LinkDriverEx+0x94>)
 80121f2:	2100      	movs	r1, #0
 80121f4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80121f6:	4b19      	ldr	r3, [pc, #100]	; (801225c <FATFS_LinkDriverEx+0x94>)
 80121f8:	7a5b      	ldrb	r3, [r3, #9]
 80121fa:	b2db      	uxtb	r3, r3
 80121fc:	4a17      	ldr	r2, [pc, #92]	; (801225c <FATFS_LinkDriverEx+0x94>)
 80121fe:	009b      	lsls	r3, r3, #2
 8012200:	4413      	add	r3, r2
 8012202:	68fa      	ldr	r2, [r7, #12]
 8012204:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012206:	4b15      	ldr	r3, [pc, #84]	; (801225c <FATFS_LinkDriverEx+0x94>)
 8012208:	7a5b      	ldrb	r3, [r3, #9]
 801220a:	b2db      	uxtb	r3, r3
 801220c:	461a      	mov	r2, r3
 801220e:	4b13      	ldr	r3, [pc, #76]	; (801225c <FATFS_LinkDriverEx+0x94>)
 8012210:	4413      	add	r3, r2
 8012212:	79fa      	ldrb	r2, [r7, #7]
 8012214:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012216:	4b11      	ldr	r3, [pc, #68]	; (801225c <FATFS_LinkDriverEx+0x94>)
 8012218:	7a5b      	ldrb	r3, [r3, #9]
 801221a:	b2db      	uxtb	r3, r3
 801221c:	1c5a      	adds	r2, r3, #1
 801221e:	b2d1      	uxtb	r1, r2
 8012220:	4a0e      	ldr	r2, [pc, #56]	; (801225c <FATFS_LinkDriverEx+0x94>)
 8012222:	7251      	strb	r1, [r2, #9]
 8012224:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012226:	7dbb      	ldrb	r3, [r7, #22]
 8012228:	3330      	adds	r3, #48	; 0x30
 801222a:	b2da      	uxtb	r2, r3
 801222c:	68bb      	ldr	r3, [r7, #8]
 801222e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012230:	68bb      	ldr	r3, [r7, #8]
 8012232:	3301      	adds	r3, #1
 8012234:	223a      	movs	r2, #58	; 0x3a
 8012236:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012238:	68bb      	ldr	r3, [r7, #8]
 801223a:	3302      	adds	r3, #2
 801223c:	222f      	movs	r2, #47	; 0x2f
 801223e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012240:	68bb      	ldr	r3, [r7, #8]
 8012242:	3303      	adds	r3, #3
 8012244:	2200      	movs	r2, #0
 8012246:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012248:	2300      	movs	r3, #0
 801224a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801224c:	7dfb      	ldrb	r3, [r7, #23]
}
 801224e:	4618      	mov	r0, r3
 8012250:	371c      	adds	r7, #28
 8012252:	46bd      	mov	sp, r7
 8012254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012258:	4770      	bx	lr
 801225a:	bf00      	nop
 801225c:	200027e0 	.word	0x200027e0

08012260 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012260:	b580      	push	{r7, lr}
 8012262:	b082      	sub	sp, #8
 8012264:	af00      	add	r7, sp, #0
 8012266:	6078      	str	r0, [r7, #4]
 8012268:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801226a:	2200      	movs	r2, #0
 801226c:	6839      	ldr	r1, [r7, #0]
 801226e:	6878      	ldr	r0, [r7, #4]
 8012270:	f7ff ffaa 	bl	80121c8 <FATFS_LinkDriverEx>
 8012274:	4603      	mov	r3, r0
}
 8012276:	4618      	mov	r0, r3
 8012278:	3708      	adds	r7, #8
 801227a:	46bd      	mov	sp, r7
 801227c:	bd80      	pop	{r7, pc}
	...

08012280 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8012280:	b480      	push	{r7}
 8012282:	b085      	sub	sp, #20
 8012284:	af00      	add	r7, sp, #0
 8012286:	4603      	mov	r3, r0
 8012288:	6039      	str	r1, [r7, #0]
 801228a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 801228c:	88fb      	ldrh	r3, [r7, #6]
 801228e:	2b7f      	cmp	r3, #127	; 0x7f
 8012290:	d802      	bhi.n	8012298 <ff_convert+0x18>
		c = chr;
 8012292:	88fb      	ldrh	r3, [r7, #6]
 8012294:	81fb      	strh	r3, [r7, #14]
 8012296:	e025      	b.n	80122e4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8012298:	683b      	ldr	r3, [r7, #0]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d00b      	beq.n	80122b6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 801229e:	88fb      	ldrh	r3, [r7, #6]
 80122a0:	2bff      	cmp	r3, #255	; 0xff
 80122a2:	d805      	bhi.n	80122b0 <ff_convert+0x30>
 80122a4:	88fb      	ldrh	r3, [r7, #6]
 80122a6:	3b80      	subs	r3, #128	; 0x80
 80122a8:	4a12      	ldr	r2, [pc, #72]	; (80122f4 <ff_convert+0x74>)
 80122aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80122ae:	e000      	b.n	80122b2 <ff_convert+0x32>
 80122b0:	2300      	movs	r3, #0
 80122b2:	81fb      	strh	r3, [r7, #14]
 80122b4:	e016      	b.n	80122e4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80122b6:	2300      	movs	r3, #0
 80122b8:	81fb      	strh	r3, [r7, #14]
 80122ba:	e009      	b.n	80122d0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80122bc:	89fb      	ldrh	r3, [r7, #14]
 80122be:	4a0d      	ldr	r2, [pc, #52]	; (80122f4 <ff_convert+0x74>)
 80122c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80122c4:	88fa      	ldrh	r2, [r7, #6]
 80122c6:	429a      	cmp	r2, r3
 80122c8:	d006      	beq.n	80122d8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80122ca:	89fb      	ldrh	r3, [r7, #14]
 80122cc:	3301      	adds	r3, #1
 80122ce:	81fb      	strh	r3, [r7, #14]
 80122d0:	89fb      	ldrh	r3, [r7, #14]
 80122d2:	2b7f      	cmp	r3, #127	; 0x7f
 80122d4:	d9f2      	bls.n	80122bc <ff_convert+0x3c>
 80122d6:	e000      	b.n	80122da <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80122d8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80122da:	89fb      	ldrh	r3, [r7, #14]
 80122dc:	3380      	adds	r3, #128	; 0x80
 80122de:	b29b      	uxth	r3, r3
 80122e0:	b2db      	uxtb	r3, r3
 80122e2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80122e4:	89fb      	ldrh	r3, [r7, #14]
}
 80122e6:	4618      	mov	r0, r3
 80122e8:	3714      	adds	r7, #20
 80122ea:	46bd      	mov	sp, r7
 80122ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f0:	4770      	bx	lr
 80122f2:	bf00      	nop
 80122f4:	0801e358 	.word	0x0801e358

080122f8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80122f8:	b480      	push	{r7}
 80122fa:	b087      	sub	sp, #28
 80122fc:	af00      	add	r7, sp, #0
 80122fe:	4603      	mov	r3, r0
 8012300:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8012302:	88fb      	ldrh	r3, [r7, #6]
 8012304:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012308:	d201      	bcs.n	801230e <ff_wtoupper+0x16>
 801230a:	4b3e      	ldr	r3, [pc, #248]	; (8012404 <ff_wtoupper+0x10c>)
 801230c:	e000      	b.n	8012310 <ff_wtoupper+0x18>
 801230e:	4b3e      	ldr	r3, [pc, #248]	; (8012408 <ff_wtoupper+0x110>)
 8012310:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8012312:	697b      	ldr	r3, [r7, #20]
 8012314:	1c9a      	adds	r2, r3, #2
 8012316:	617a      	str	r2, [r7, #20]
 8012318:	881b      	ldrh	r3, [r3, #0]
 801231a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 801231c:	8a7b      	ldrh	r3, [r7, #18]
 801231e:	2b00      	cmp	r3, #0
 8012320:	d068      	beq.n	80123f4 <ff_wtoupper+0xfc>
 8012322:	88fa      	ldrh	r2, [r7, #6]
 8012324:	8a7b      	ldrh	r3, [r7, #18]
 8012326:	429a      	cmp	r2, r3
 8012328:	d364      	bcc.n	80123f4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 801232a:	697b      	ldr	r3, [r7, #20]
 801232c:	1c9a      	adds	r2, r3, #2
 801232e:	617a      	str	r2, [r7, #20]
 8012330:	881b      	ldrh	r3, [r3, #0]
 8012332:	823b      	strh	r3, [r7, #16]
 8012334:	8a3b      	ldrh	r3, [r7, #16]
 8012336:	0a1b      	lsrs	r3, r3, #8
 8012338:	81fb      	strh	r3, [r7, #14]
 801233a:	8a3b      	ldrh	r3, [r7, #16]
 801233c:	b2db      	uxtb	r3, r3
 801233e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8012340:	88fa      	ldrh	r2, [r7, #6]
 8012342:	8a79      	ldrh	r1, [r7, #18]
 8012344:	8a3b      	ldrh	r3, [r7, #16]
 8012346:	440b      	add	r3, r1
 8012348:	429a      	cmp	r2, r3
 801234a:	da49      	bge.n	80123e0 <ff_wtoupper+0xe8>
			switch (cmd) {
 801234c:	89fb      	ldrh	r3, [r7, #14]
 801234e:	2b08      	cmp	r3, #8
 8012350:	d84f      	bhi.n	80123f2 <ff_wtoupper+0xfa>
 8012352:	a201      	add	r2, pc, #4	; (adr r2, 8012358 <ff_wtoupper+0x60>)
 8012354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012358:	0801237d 	.word	0x0801237d
 801235c:	0801238f 	.word	0x0801238f
 8012360:	080123a5 	.word	0x080123a5
 8012364:	080123ad 	.word	0x080123ad
 8012368:	080123b5 	.word	0x080123b5
 801236c:	080123bd 	.word	0x080123bd
 8012370:	080123c5 	.word	0x080123c5
 8012374:	080123cd 	.word	0x080123cd
 8012378:	080123d5 	.word	0x080123d5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 801237c:	88fa      	ldrh	r2, [r7, #6]
 801237e:	8a7b      	ldrh	r3, [r7, #18]
 8012380:	1ad3      	subs	r3, r2, r3
 8012382:	005b      	lsls	r3, r3, #1
 8012384:	697a      	ldr	r2, [r7, #20]
 8012386:	4413      	add	r3, r2
 8012388:	881b      	ldrh	r3, [r3, #0]
 801238a:	80fb      	strh	r3, [r7, #6]
 801238c:	e027      	b.n	80123de <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 801238e:	88fa      	ldrh	r2, [r7, #6]
 8012390:	8a7b      	ldrh	r3, [r7, #18]
 8012392:	1ad3      	subs	r3, r2, r3
 8012394:	b29b      	uxth	r3, r3
 8012396:	f003 0301 	and.w	r3, r3, #1
 801239a:	b29b      	uxth	r3, r3
 801239c:	88fa      	ldrh	r2, [r7, #6]
 801239e:	1ad3      	subs	r3, r2, r3
 80123a0:	80fb      	strh	r3, [r7, #6]
 80123a2:	e01c      	b.n	80123de <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80123a4:	88fb      	ldrh	r3, [r7, #6]
 80123a6:	3b10      	subs	r3, #16
 80123a8:	80fb      	strh	r3, [r7, #6]
 80123aa:	e018      	b.n	80123de <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80123ac:	88fb      	ldrh	r3, [r7, #6]
 80123ae:	3b20      	subs	r3, #32
 80123b0:	80fb      	strh	r3, [r7, #6]
 80123b2:	e014      	b.n	80123de <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80123b4:	88fb      	ldrh	r3, [r7, #6]
 80123b6:	3b30      	subs	r3, #48	; 0x30
 80123b8:	80fb      	strh	r3, [r7, #6]
 80123ba:	e010      	b.n	80123de <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80123bc:	88fb      	ldrh	r3, [r7, #6]
 80123be:	3b1a      	subs	r3, #26
 80123c0:	80fb      	strh	r3, [r7, #6]
 80123c2:	e00c      	b.n	80123de <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80123c4:	88fb      	ldrh	r3, [r7, #6]
 80123c6:	3308      	adds	r3, #8
 80123c8:	80fb      	strh	r3, [r7, #6]
 80123ca:	e008      	b.n	80123de <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80123cc:	88fb      	ldrh	r3, [r7, #6]
 80123ce:	3b50      	subs	r3, #80	; 0x50
 80123d0:	80fb      	strh	r3, [r7, #6]
 80123d2:	e004      	b.n	80123de <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80123d4:	88fb      	ldrh	r3, [r7, #6]
 80123d6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80123da:	80fb      	strh	r3, [r7, #6]
 80123dc:	bf00      	nop
			}
			break;
 80123de:	e008      	b.n	80123f2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80123e0:	89fb      	ldrh	r3, [r7, #14]
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d195      	bne.n	8012312 <ff_wtoupper+0x1a>
 80123e6:	8a3b      	ldrh	r3, [r7, #16]
 80123e8:	005b      	lsls	r3, r3, #1
 80123ea:	697a      	ldr	r2, [r7, #20]
 80123ec:	4413      	add	r3, r2
 80123ee:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80123f0:	e78f      	b.n	8012312 <ff_wtoupper+0x1a>
			break;
 80123f2:	bf00      	nop
	}

	return chr;
 80123f4:	88fb      	ldrh	r3, [r7, #6]
}
 80123f6:	4618      	mov	r0, r3
 80123f8:	371c      	adds	r7, #28
 80123fa:	46bd      	mov	sp, r7
 80123fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012400:	4770      	bx	lr
 8012402:	bf00      	nop
 8012404:	0801e458 	.word	0x0801e458
 8012408:	0801e64c 	.word	0x0801e64c

0801240c <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801240c:	b580      	push	{r7, lr}
 801240e:	b084      	sub	sp, #16
 8012410:	af00      	add	r7, sp, #0
 8012412:	4603      	mov	r3, r0
 8012414:	6039      	str	r1, [r7, #0]
 8012416:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8012418:	2200      	movs	r2, #0
 801241a:	2101      	movs	r1, #1
 801241c:	2001      	movs	r0, #1
 801241e:	f000 f978 	bl	8012712 <osSemaphoreNew>
 8012422:	4602      	mov	r2, r0
 8012424:	683b      	ldr	r3, [r7, #0]
 8012426:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8012428:	683b      	ldr	r3, [r7, #0]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	2b00      	cmp	r3, #0
 801242e:	bf14      	ite	ne
 8012430:	2301      	movne	r3, #1
 8012432:	2300      	moveq	r3, #0
 8012434:	b2db      	uxtb	r3, r3
 8012436:	60fb      	str	r3, [r7, #12]

    return ret;
 8012438:	68fb      	ldr	r3, [r7, #12]
}
 801243a:	4618      	mov	r0, r3
 801243c:	3710      	adds	r7, #16
 801243e:	46bd      	mov	sp, r7
 8012440:	bd80      	pop	{r7, pc}

08012442 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8012442:	b580      	push	{r7, lr}
 8012444:	b082      	sub	sp, #8
 8012446:	af00      	add	r7, sp, #0
 8012448:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 801244a:	6878      	ldr	r0, [r7, #4]
 801244c:	f000 fa80 	bl	8012950 <osSemaphoreDelete>
#endif
    return 1;
 8012450:	2301      	movs	r3, #1
}
 8012452:	4618      	mov	r0, r3
 8012454:	3708      	adds	r7, #8
 8012456:	46bd      	mov	sp, r7
 8012458:	bd80      	pop	{r7, pc}

0801245a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 801245a:	b580      	push	{r7, lr}
 801245c:	b084      	sub	sp, #16
 801245e:	af00      	add	r7, sp, #0
 8012460:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8012462:	2300      	movs	r3, #0
 8012464:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8012466:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 801246a:	6878      	ldr	r0, [r7, #4]
 801246c:	f000 f9da 	bl	8012824 <osSemaphoreAcquire>
 8012470:	4603      	mov	r3, r0
 8012472:	2b00      	cmp	r3, #0
 8012474:	d101      	bne.n	801247a <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8012476:	2301      	movs	r3, #1
 8012478:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801247a:	68fb      	ldr	r3, [r7, #12]
}
 801247c:	4618      	mov	r0, r3
 801247e:	3710      	adds	r7, #16
 8012480:	46bd      	mov	sp, r7
 8012482:	bd80      	pop	{r7, pc}

08012484 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b082      	sub	sp, #8
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 801248c:	6878      	ldr	r0, [r7, #4]
 801248e:	f000 fa1b 	bl	80128c8 <osSemaphoreRelease>
#endif
}
 8012492:	bf00      	nop
 8012494:	3708      	adds	r7, #8
 8012496:	46bd      	mov	sp, r7
 8012498:	bd80      	pop	{r7, pc}
	...

0801249c <__NVIC_SetPriority>:
{
 801249c:	b480      	push	{r7}
 801249e:	b083      	sub	sp, #12
 80124a0:	af00      	add	r7, sp, #0
 80124a2:	4603      	mov	r3, r0
 80124a4:	6039      	str	r1, [r7, #0]
 80124a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80124a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	db0a      	blt.n	80124c6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80124b0:	683b      	ldr	r3, [r7, #0]
 80124b2:	b2da      	uxtb	r2, r3
 80124b4:	490c      	ldr	r1, [pc, #48]	; (80124e8 <__NVIC_SetPriority+0x4c>)
 80124b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80124ba:	0112      	lsls	r2, r2, #4
 80124bc:	b2d2      	uxtb	r2, r2
 80124be:	440b      	add	r3, r1
 80124c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80124c4:	e00a      	b.n	80124dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80124c6:	683b      	ldr	r3, [r7, #0]
 80124c8:	b2da      	uxtb	r2, r3
 80124ca:	4908      	ldr	r1, [pc, #32]	; (80124ec <__NVIC_SetPriority+0x50>)
 80124cc:	79fb      	ldrb	r3, [r7, #7]
 80124ce:	f003 030f 	and.w	r3, r3, #15
 80124d2:	3b04      	subs	r3, #4
 80124d4:	0112      	lsls	r2, r2, #4
 80124d6:	b2d2      	uxtb	r2, r2
 80124d8:	440b      	add	r3, r1
 80124da:	761a      	strb	r2, [r3, #24]
}
 80124dc:	bf00      	nop
 80124de:	370c      	adds	r7, #12
 80124e0:	46bd      	mov	sp, r7
 80124e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124e6:	4770      	bx	lr
 80124e8:	e000e100 	.word	0xe000e100
 80124ec:	e000ed00 	.word	0xe000ed00

080124f0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80124f0:	b580      	push	{r7, lr}
 80124f2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80124f4:	4b05      	ldr	r3, [pc, #20]	; (801250c <SysTick_Handler+0x1c>)
 80124f6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80124f8:	f002 fcae 	bl	8014e58 <xTaskGetSchedulerState>
 80124fc:	4603      	mov	r3, r0
 80124fe:	2b01      	cmp	r3, #1
 8012500:	d001      	beq.n	8012506 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012502:	f003 fcd1 	bl	8015ea8 <xPortSysTickHandler>
  }
}
 8012506:	bf00      	nop
 8012508:	bd80      	pop	{r7, pc}
 801250a:	bf00      	nop
 801250c:	e000e010 	.word	0xe000e010

08012510 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012510:	b580      	push	{r7, lr}
 8012512:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012514:	2100      	movs	r1, #0
 8012516:	f06f 0004 	mvn.w	r0, #4
 801251a:	f7ff ffbf 	bl	801249c <__NVIC_SetPriority>
#endif
}
 801251e:	bf00      	nop
 8012520:	bd80      	pop	{r7, pc}
	...

08012524 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012524:	b480      	push	{r7}
 8012526:	b083      	sub	sp, #12
 8012528:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801252a:	f3ef 8305 	mrs	r3, IPSR
 801252e:	603b      	str	r3, [r7, #0]
  return(result);
 8012530:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012532:	2b00      	cmp	r3, #0
 8012534:	d003      	beq.n	801253e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8012536:	f06f 0305 	mvn.w	r3, #5
 801253a:	607b      	str	r3, [r7, #4]
 801253c:	e00c      	b.n	8012558 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801253e:	4b0a      	ldr	r3, [pc, #40]	; (8012568 <osKernelInitialize+0x44>)
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d105      	bne.n	8012552 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012546:	4b08      	ldr	r3, [pc, #32]	; (8012568 <osKernelInitialize+0x44>)
 8012548:	2201      	movs	r2, #1
 801254a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801254c:	2300      	movs	r3, #0
 801254e:	607b      	str	r3, [r7, #4]
 8012550:	e002      	b.n	8012558 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012556:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012558:	687b      	ldr	r3, [r7, #4]
}
 801255a:	4618      	mov	r0, r3
 801255c:	370c      	adds	r7, #12
 801255e:	46bd      	mov	sp, r7
 8012560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012564:	4770      	bx	lr
 8012566:	bf00      	nop
 8012568:	200027ec 	.word	0x200027ec

0801256c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801256c:	b580      	push	{r7, lr}
 801256e:	b082      	sub	sp, #8
 8012570:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012572:	f3ef 8305 	mrs	r3, IPSR
 8012576:	603b      	str	r3, [r7, #0]
  return(result);
 8012578:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801257a:	2b00      	cmp	r3, #0
 801257c:	d003      	beq.n	8012586 <osKernelStart+0x1a>
    stat = osErrorISR;
 801257e:	f06f 0305 	mvn.w	r3, #5
 8012582:	607b      	str	r3, [r7, #4]
 8012584:	e010      	b.n	80125a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012586:	4b0b      	ldr	r3, [pc, #44]	; (80125b4 <osKernelStart+0x48>)
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	2b01      	cmp	r3, #1
 801258c:	d109      	bne.n	80125a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801258e:	f7ff ffbf 	bl	8012510 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012592:	4b08      	ldr	r3, [pc, #32]	; (80125b4 <osKernelStart+0x48>)
 8012594:	2202      	movs	r2, #2
 8012596:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012598:	f001 fe7c 	bl	8014294 <vTaskStartScheduler>
      stat = osOK;
 801259c:	2300      	movs	r3, #0
 801259e:	607b      	str	r3, [r7, #4]
 80125a0:	e002      	b.n	80125a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80125a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80125a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80125a8:	687b      	ldr	r3, [r7, #4]
}
 80125aa:	4618      	mov	r0, r3
 80125ac:	3708      	adds	r7, #8
 80125ae:	46bd      	mov	sp, r7
 80125b0:	bd80      	pop	{r7, pc}
 80125b2:	bf00      	nop
 80125b4:	200027ec 	.word	0x200027ec

080125b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b08e      	sub	sp, #56	; 0x38
 80125bc:	af04      	add	r7, sp, #16
 80125be:	60f8      	str	r0, [r7, #12]
 80125c0:	60b9      	str	r1, [r7, #8]
 80125c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80125c4:	2300      	movs	r3, #0
 80125c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80125c8:	f3ef 8305 	mrs	r3, IPSR
 80125cc:	617b      	str	r3, [r7, #20]
  return(result);
 80125ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d17e      	bne.n	80126d2 <osThreadNew+0x11a>
 80125d4:	68fb      	ldr	r3, [r7, #12]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d07b      	beq.n	80126d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80125da:	2380      	movs	r3, #128	; 0x80
 80125dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80125de:	2318      	movs	r3, #24
 80125e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80125e2:	2300      	movs	r3, #0
 80125e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80125e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80125ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d045      	beq.n	801267e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d002      	beq.n	8012600 <osThreadNew+0x48>
        name = attr->name;
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	699b      	ldr	r3, [r3, #24]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d002      	beq.n	801260e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	699b      	ldr	r3, [r3, #24]
 801260c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801260e:	69fb      	ldr	r3, [r7, #28]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d008      	beq.n	8012626 <osThreadNew+0x6e>
 8012614:	69fb      	ldr	r3, [r7, #28]
 8012616:	2b38      	cmp	r3, #56	; 0x38
 8012618:	d805      	bhi.n	8012626 <osThreadNew+0x6e>
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	685b      	ldr	r3, [r3, #4]
 801261e:	f003 0301 	and.w	r3, r3, #1
 8012622:	2b00      	cmp	r3, #0
 8012624:	d001      	beq.n	801262a <osThreadNew+0x72>
        return (NULL);
 8012626:	2300      	movs	r3, #0
 8012628:	e054      	b.n	80126d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	695b      	ldr	r3, [r3, #20]
 801262e:	2b00      	cmp	r3, #0
 8012630:	d003      	beq.n	801263a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	695b      	ldr	r3, [r3, #20]
 8012636:	089b      	lsrs	r3, r3, #2
 8012638:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	689b      	ldr	r3, [r3, #8]
 801263e:	2b00      	cmp	r3, #0
 8012640:	d00e      	beq.n	8012660 <osThreadNew+0xa8>
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	68db      	ldr	r3, [r3, #12]
 8012646:	2bbf      	cmp	r3, #191	; 0xbf
 8012648:	d90a      	bls.n	8012660 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801264e:	2b00      	cmp	r3, #0
 8012650:	d006      	beq.n	8012660 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	695b      	ldr	r3, [r3, #20]
 8012656:	2b00      	cmp	r3, #0
 8012658:	d002      	beq.n	8012660 <osThreadNew+0xa8>
        mem = 1;
 801265a:	2301      	movs	r3, #1
 801265c:	61bb      	str	r3, [r7, #24]
 801265e:	e010      	b.n	8012682 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	689b      	ldr	r3, [r3, #8]
 8012664:	2b00      	cmp	r3, #0
 8012666:	d10c      	bne.n	8012682 <osThreadNew+0xca>
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	68db      	ldr	r3, [r3, #12]
 801266c:	2b00      	cmp	r3, #0
 801266e:	d108      	bne.n	8012682 <osThreadNew+0xca>
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	691b      	ldr	r3, [r3, #16]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d104      	bne.n	8012682 <osThreadNew+0xca>
          mem = 0;
 8012678:	2300      	movs	r3, #0
 801267a:	61bb      	str	r3, [r7, #24]
 801267c:	e001      	b.n	8012682 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801267e:	2300      	movs	r3, #0
 8012680:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012682:	69bb      	ldr	r3, [r7, #24]
 8012684:	2b01      	cmp	r3, #1
 8012686:	d110      	bne.n	80126aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801268c:	687a      	ldr	r2, [r7, #4]
 801268e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012690:	9202      	str	r2, [sp, #8]
 8012692:	9301      	str	r3, [sp, #4]
 8012694:	69fb      	ldr	r3, [r7, #28]
 8012696:	9300      	str	r3, [sp, #0]
 8012698:	68bb      	ldr	r3, [r7, #8]
 801269a:	6a3a      	ldr	r2, [r7, #32]
 801269c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801269e:	68f8      	ldr	r0, [r7, #12]
 80126a0:	f001 fba2 	bl	8013de8 <xTaskCreateStatic>
 80126a4:	4603      	mov	r3, r0
 80126a6:	613b      	str	r3, [r7, #16]
 80126a8:	e013      	b.n	80126d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80126aa:	69bb      	ldr	r3, [r7, #24]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d110      	bne.n	80126d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80126b0:	6a3b      	ldr	r3, [r7, #32]
 80126b2:	b29a      	uxth	r2, r3
 80126b4:	f107 0310 	add.w	r3, r7, #16
 80126b8:	9301      	str	r3, [sp, #4]
 80126ba:	69fb      	ldr	r3, [r7, #28]
 80126bc:	9300      	str	r3, [sp, #0]
 80126be:	68bb      	ldr	r3, [r7, #8]
 80126c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80126c2:	68f8      	ldr	r0, [r7, #12]
 80126c4:	f001 fbed 	bl	8013ea2 <xTaskCreate>
 80126c8:	4603      	mov	r3, r0
 80126ca:	2b01      	cmp	r3, #1
 80126cc:	d001      	beq.n	80126d2 <osThreadNew+0x11a>
            hTask = NULL;
 80126ce:	2300      	movs	r3, #0
 80126d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80126d2:	693b      	ldr	r3, [r7, #16]
}
 80126d4:	4618      	mov	r0, r3
 80126d6:	3728      	adds	r7, #40	; 0x28
 80126d8:	46bd      	mov	sp, r7
 80126da:	bd80      	pop	{r7, pc}

080126dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80126dc:	b580      	push	{r7, lr}
 80126de:	b084      	sub	sp, #16
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80126e4:	f3ef 8305 	mrs	r3, IPSR
 80126e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80126ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80126ec:	2b00      	cmp	r3, #0
 80126ee:	d003      	beq.n	80126f8 <osDelay+0x1c>
    stat = osErrorISR;
 80126f0:	f06f 0305 	mvn.w	r3, #5
 80126f4:	60fb      	str	r3, [r7, #12]
 80126f6:	e007      	b.n	8012708 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80126f8:	2300      	movs	r3, #0
 80126fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d002      	beq.n	8012708 <osDelay+0x2c>
      vTaskDelay(ticks);
 8012702:	6878      	ldr	r0, [r7, #4]
 8012704:	f001 fd2c 	bl	8014160 <vTaskDelay>
    }
  }

  return (stat);
 8012708:	68fb      	ldr	r3, [r7, #12]
}
 801270a:	4618      	mov	r0, r3
 801270c:	3710      	adds	r7, #16
 801270e:	46bd      	mov	sp, r7
 8012710:	bd80      	pop	{r7, pc}

08012712 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8012712:	b580      	push	{r7, lr}
 8012714:	b08a      	sub	sp, #40	; 0x28
 8012716:	af02      	add	r7, sp, #8
 8012718:	60f8      	str	r0, [r7, #12]
 801271a:	60b9      	str	r1, [r7, #8]
 801271c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 801271e:	2300      	movs	r3, #0
 8012720:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012722:	f3ef 8305 	mrs	r3, IPSR
 8012726:	613b      	str	r3, [r7, #16]
  return(result);
 8012728:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 801272a:	2b00      	cmp	r3, #0
 801272c:	d175      	bne.n	801281a <osSemaphoreNew+0x108>
 801272e:	68fb      	ldr	r3, [r7, #12]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d072      	beq.n	801281a <osSemaphoreNew+0x108>
 8012734:	68ba      	ldr	r2, [r7, #8]
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	429a      	cmp	r2, r3
 801273a:	d86e      	bhi.n	801281a <osSemaphoreNew+0x108>
    mem = -1;
 801273c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012740:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d015      	beq.n	8012774 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8012748:	687b      	ldr	r3, [r7, #4]
 801274a:	689b      	ldr	r3, [r3, #8]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d006      	beq.n	801275e <osSemaphoreNew+0x4c>
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	68db      	ldr	r3, [r3, #12]
 8012754:	2b4f      	cmp	r3, #79	; 0x4f
 8012756:	d902      	bls.n	801275e <osSemaphoreNew+0x4c>
        mem = 1;
 8012758:	2301      	movs	r3, #1
 801275a:	61bb      	str	r3, [r7, #24]
 801275c:	e00c      	b.n	8012778 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	689b      	ldr	r3, [r3, #8]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d108      	bne.n	8012778 <osSemaphoreNew+0x66>
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	68db      	ldr	r3, [r3, #12]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d104      	bne.n	8012778 <osSemaphoreNew+0x66>
          mem = 0;
 801276e:	2300      	movs	r3, #0
 8012770:	61bb      	str	r3, [r7, #24]
 8012772:	e001      	b.n	8012778 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8012774:	2300      	movs	r3, #0
 8012776:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8012778:	69bb      	ldr	r3, [r7, #24]
 801277a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801277e:	d04c      	beq.n	801281a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	2b01      	cmp	r3, #1
 8012784:	d128      	bne.n	80127d8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8012786:	69bb      	ldr	r3, [r7, #24]
 8012788:	2b01      	cmp	r3, #1
 801278a:	d10a      	bne.n	80127a2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	689b      	ldr	r3, [r3, #8]
 8012790:	2203      	movs	r2, #3
 8012792:	9200      	str	r2, [sp, #0]
 8012794:	2200      	movs	r2, #0
 8012796:	2100      	movs	r1, #0
 8012798:	2001      	movs	r0, #1
 801279a:	f000 fb7f 	bl	8012e9c <xQueueGenericCreateStatic>
 801279e:	61f8      	str	r0, [r7, #28]
 80127a0:	e005      	b.n	80127ae <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80127a2:	2203      	movs	r2, #3
 80127a4:	2100      	movs	r1, #0
 80127a6:	2001      	movs	r0, #1
 80127a8:	f000 fbf0 	bl	8012f8c <xQueueGenericCreate>
 80127ac:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80127ae:	69fb      	ldr	r3, [r7, #28]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	d022      	beq.n	80127fa <osSemaphoreNew+0xe8>
 80127b4:	68bb      	ldr	r3, [r7, #8]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d01f      	beq.n	80127fa <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80127ba:	2300      	movs	r3, #0
 80127bc:	2200      	movs	r2, #0
 80127be:	2100      	movs	r1, #0
 80127c0:	69f8      	ldr	r0, [r7, #28]
 80127c2:	f000 fcab 	bl	801311c <xQueueGenericSend>
 80127c6:	4603      	mov	r3, r0
 80127c8:	2b01      	cmp	r3, #1
 80127ca:	d016      	beq.n	80127fa <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80127cc:	69f8      	ldr	r0, [r7, #28]
 80127ce:	f001 f937 	bl	8013a40 <vQueueDelete>
            hSemaphore = NULL;
 80127d2:	2300      	movs	r3, #0
 80127d4:	61fb      	str	r3, [r7, #28]
 80127d6:	e010      	b.n	80127fa <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80127d8:	69bb      	ldr	r3, [r7, #24]
 80127da:	2b01      	cmp	r3, #1
 80127dc:	d108      	bne.n	80127f0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80127de:	687b      	ldr	r3, [r7, #4]
 80127e0:	689b      	ldr	r3, [r3, #8]
 80127e2:	461a      	mov	r2, r3
 80127e4:	68b9      	ldr	r1, [r7, #8]
 80127e6:	68f8      	ldr	r0, [r7, #12]
 80127e8:	f000 fc2d 	bl	8013046 <xQueueCreateCountingSemaphoreStatic>
 80127ec:	61f8      	str	r0, [r7, #28]
 80127ee:	e004      	b.n	80127fa <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80127f0:	68b9      	ldr	r1, [r7, #8]
 80127f2:	68f8      	ldr	r0, [r7, #12]
 80127f4:	f000 fc5e 	bl	80130b4 <xQueueCreateCountingSemaphore>
 80127f8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80127fa:	69fb      	ldr	r3, [r7, #28]
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d00c      	beq.n	801281a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d003      	beq.n	801280e <osSemaphoreNew+0xfc>
          name = attr->name;
 8012806:	687b      	ldr	r3, [r7, #4]
 8012808:	681b      	ldr	r3, [r3, #0]
 801280a:	617b      	str	r3, [r7, #20]
 801280c:	e001      	b.n	8012812 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 801280e:	2300      	movs	r3, #0
 8012810:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8012812:	6979      	ldr	r1, [r7, #20]
 8012814:	69f8      	ldr	r0, [r7, #28]
 8012816:	f001 fa5f 	bl	8013cd8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 801281a:	69fb      	ldr	r3, [r7, #28]
}
 801281c:	4618      	mov	r0, r3
 801281e:	3720      	adds	r7, #32
 8012820:	46bd      	mov	sp, r7
 8012822:	bd80      	pop	{r7, pc}

08012824 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8012824:	b580      	push	{r7, lr}
 8012826:	b086      	sub	sp, #24
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
 801282c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8012832:	2300      	movs	r3, #0
 8012834:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8012836:	693b      	ldr	r3, [r7, #16]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d103      	bne.n	8012844 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 801283c:	f06f 0303 	mvn.w	r3, #3
 8012840:	617b      	str	r3, [r7, #20]
 8012842:	e039      	b.n	80128b8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012844:	f3ef 8305 	mrs	r3, IPSR
 8012848:	60fb      	str	r3, [r7, #12]
  return(result);
 801284a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801284c:	2b00      	cmp	r3, #0
 801284e:	d022      	beq.n	8012896 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8012850:	683b      	ldr	r3, [r7, #0]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d003      	beq.n	801285e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8012856:	f06f 0303 	mvn.w	r3, #3
 801285a:	617b      	str	r3, [r7, #20]
 801285c:	e02c      	b.n	80128b8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 801285e:	2300      	movs	r3, #0
 8012860:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8012862:	f107 0308 	add.w	r3, r7, #8
 8012866:	461a      	mov	r2, r3
 8012868:	2100      	movs	r1, #0
 801286a:	6938      	ldr	r0, [r7, #16]
 801286c:	f001 f868 	bl	8013940 <xQueueReceiveFromISR>
 8012870:	4603      	mov	r3, r0
 8012872:	2b01      	cmp	r3, #1
 8012874:	d003      	beq.n	801287e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8012876:	f06f 0302 	mvn.w	r3, #2
 801287a:	617b      	str	r3, [r7, #20]
 801287c:	e01c      	b.n	80128b8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d019      	beq.n	80128b8 <osSemaphoreAcquire+0x94>
 8012884:	4b0f      	ldr	r3, [pc, #60]	; (80128c4 <osSemaphoreAcquire+0xa0>)
 8012886:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801288a:	601a      	str	r2, [r3, #0]
 801288c:	f3bf 8f4f 	dsb	sy
 8012890:	f3bf 8f6f 	isb	sy
 8012894:	e010      	b.n	80128b8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8012896:	6839      	ldr	r1, [r7, #0]
 8012898:	6938      	ldr	r0, [r7, #16]
 801289a:	f000 ff45 	bl	8013728 <xQueueSemaphoreTake>
 801289e:	4603      	mov	r3, r0
 80128a0:	2b01      	cmp	r3, #1
 80128a2:	d009      	beq.n	80128b8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80128a4:	683b      	ldr	r3, [r7, #0]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d003      	beq.n	80128b2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80128aa:	f06f 0301 	mvn.w	r3, #1
 80128ae:	617b      	str	r3, [r7, #20]
 80128b0:	e002      	b.n	80128b8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80128b2:	f06f 0302 	mvn.w	r3, #2
 80128b6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80128b8:	697b      	ldr	r3, [r7, #20]
}
 80128ba:	4618      	mov	r0, r3
 80128bc:	3718      	adds	r7, #24
 80128be:	46bd      	mov	sp, r7
 80128c0:	bd80      	pop	{r7, pc}
 80128c2:	bf00      	nop
 80128c4:	e000ed04 	.word	0xe000ed04

080128c8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b086      	sub	sp, #24
 80128cc:	af00      	add	r7, sp, #0
 80128ce:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80128d4:	2300      	movs	r3, #0
 80128d6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80128d8:	693b      	ldr	r3, [r7, #16]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d103      	bne.n	80128e6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80128de:	f06f 0303 	mvn.w	r3, #3
 80128e2:	617b      	str	r3, [r7, #20]
 80128e4:	e02c      	b.n	8012940 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80128e6:	f3ef 8305 	mrs	r3, IPSR
 80128ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80128ec:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d01a      	beq.n	8012928 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80128f2:	2300      	movs	r3, #0
 80128f4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80128f6:	f107 0308 	add.w	r3, r7, #8
 80128fa:	4619      	mov	r1, r3
 80128fc:	6938      	ldr	r0, [r7, #16]
 80128fe:	f000 fda6 	bl	801344e <xQueueGiveFromISR>
 8012902:	4603      	mov	r3, r0
 8012904:	2b01      	cmp	r3, #1
 8012906:	d003      	beq.n	8012910 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8012908:	f06f 0302 	mvn.w	r3, #2
 801290c:	617b      	str	r3, [r7, #20]
 801290e:	e017      	b.n	8012940 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8012910:	68bb      	ldr	r3, [r7, #8]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d014      	beq.n	8012940 <osSemaphoreRelease+0x78>
 8012916:	4b0d      	ldr	r3, [pc, #52]	; (801294c <osSemaphoreRelease+0x84>)
 8012918:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801291c:	601a      	str	r2, [r3, #0]
 801291e:	f3bf 8f4f 	dsb	sy
 8012922:	f3bf 8f6f 	isb	sy
 8012926:	e00b      	b.n	8012940 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8012928:	2300      	movs	r3, #0
 801292a:	2200      	movs	r2, #0
 801292c:	2100      	movs	r1, #0
 801292e:	6938      	ldr	r0, [r7, #16]
 8012930:	f000 fbf4 	bl	801311c <xQueueGenericSend>
 8012934:	4603      	mov	r3, r0
 8012936:	2b01      	cmp	r3, #1
 8012938:	d002      	beq.n	8012940 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 801293a:	f06f 0302 	mvn.w	r3, #2
 801293e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8012940:	697b      	ldr	r3, [r7, #20]
}
 8012942:	4618      	mov	r0, r3
 8012944:	3718      	adds	r7, #24
 8012946:	46bd      	mov	sp, r7
 8012948:	bd80      	pop	{r7, pc}
 801294a:	bf00      	nop
 801294c:	e000ed04 	.word	0xe000ed04

08012950 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8012950:	b580      	push	{r7, lr}
 8012952:	b086      	sub	sp, #24
 8012954:	af00      	add	r7, sp, #0
 8012956:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801295c:	f3ef 8305 	mrs	r3, IPSR
 8012960:	60fb      	str	r3, [r7, #12]
  return(result);
 8012962:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8012964:	2b00      	cmp	r3, #0
 8012966:	d003      	beq.n	8012970 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8012968:	f06f 0305 	mvn.w	r3, #5
 801296c:	617b      	str	r3, [r7, #20]
 801296e:	e00e      	b.n	801298e <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8012970:	693b      	ldr	r3, [r7, #16]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d103      	bne.n	801297e <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8012976:	f06f 0303 	mvn.w	r3, #3
 801297a:	617b      	str	r3, [r7, #20]
 801297c:	e007      	b.n	801298e <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 801297e:	6938      	ldr	r0, [r7, #16]
 8012980:	f001 f9d4 	bl	8013d2c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8012984:	2300      	movs	r3, #0
 8012986:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8012988:	6938      	ldr	r0, [r7, #16]
 801298a:	f001 f859 	bl	8013a40 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 801298e:	697b      	ldr	r3, [r7, #20]
}
 8012990:	4618      	mov	r0, r3
 8012992:	3718      	adds	r7, #24
 8012994:	46bd      	mov	sp, r7
 8012996:	bd80      	pop	{r7, pc}

08012998 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012998:	b580      	push	{r7, lr}
 801299a:	b08a      	sub	sp, #40	; 0x28
 801299c:	af02      	add	r7, sp, #8
 801299e:	60f8      	str	r0, [r7, #12]
 80129a0:	60b9      	str	r1, [r7, #8]
 80129a2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80129a4:	2300      	movs	r3, #0
 80129a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80129a8:	f3ef 8305 	mrs	r3, IPSR
 80129ac:	613b      	str	r3, [r7, #16]
  return(result);
 80129ae:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d15f      	bne.n	8012a74 <osMessageQueueNew+0xdc>
 80129b4:	68fb      	ldr	r3, [r7, #12]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d05c      	beq.n	8012a74 <osMessageQueueNew+0xdc>
 80129ba:	68bb      	ldr	r3, [r7, #8]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d059      	beq.n	8012a74 <osMessageQueueNew+0xdc>
    mem = -1;
 80129c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80129c4:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d029      	beq.n	8012a20 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	689b      	ldr	r3, [r3, #8]
 80129d0:	2b00      	cmp	r3, #0
 80129d2:	d012      	beq.n	80129fa <osMessageQueueNew+0x62>
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	68db      	ldr	r3, [r3, #12]
 80129d8:	2b4f      	cmp	r3, #79	; 0x4f
 80129da:	d90e      	bls.n	80129fa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d00a      	beq.n	80129fa <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	695a      	ldr	r2, [r3, #20]
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	68b9      	ldr	r1, [r7, #8]
 80129ec:	fb01 f303 	mul.w	r3, r1, r3
 80129f0:	429a      	cmp	r2, r3
 80129f2:	d302      	bcc.n	80129fa <osMessageQueueNew+0x62>
        mem = 1;
 80129f4:	2301      	movs	r3, #1
 80129f6:	61bb      	str	r3, [r7, #24]
 80129f8:	e014      	b.n	8012a24 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	689b      	ldr	r3, [r3, #8]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d110      	bne.n	8012a24 <osMessageQueueNew+0x8c>
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	68db      	ldr	r3, [r3, #12]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d10c      	bne.n	8012a24 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d108      	bne.n	8012a24 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	695b      	ldr	r3, [r3, #20]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d104      	bne.n	8012a24 <osMessageQueueNew+0x8c>
          mem = 0;
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	61bb      	str	r3, [r7, #24]
 8012a1e:	e001      	b.n	8012a24 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8012a20:	2300      	movs	r3, #0
 8012a22:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012a24:	69bb      	ldr	r3, [r7, #24]
 8012a26:	2b01      	cmp	r3, #1
 8012a28:	d10b      	bne.n	8012a42 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	691a      	ldr	r2, [r3, #16]
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	689b      	ldr	r3, [r3, #8]
 8012a32:	2100      	movs	r1, #0
 8012a34:	9100      	str	r1, [sp, #0]
 8012a36:	68b9      	ldr	r1, [r7, #8]
 8012a38:	68f8      	ldr	r0, [r7, #12]
 8012a3a:	f000 fa2f 	bl	8012e9c <xQueueGenericCreateStatic>
 8012a3e:	61f8      	str	r0, [r7, #28]
 8012a40:	e008      	b.n	8012a54 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8012a42:	69bb      	ldr	r3, [r7, #24]
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d105      	bne.n	8012a54 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8012a48:	2200      	movs	r2, #0
 8012a4a:	68b9      	ldr	r1, [r7, #8]
 8012a4c:	68f8      	ldr	r0, [r7, #12]
 8012a4e:	f000 fa9d 	bl	8012f8c <xQueueGenericCreate>
 8012a52:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8012a54:	69fb      	ldr	r3, [r7, #28]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	d00c      	beq.n	8012a74 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d003      	beq.n	8012a68 <osMessageQueueNew+0xd0>
        name = attr->name;
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	617b      	str	r3, [r7, #20]
 8012a66:	e001      	b.n	8012a6c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8012a68:	2300      	movs	r3, #0
 8012a6a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8012a6c:	6979      	ldr	r1, [r7, #20]
 8012a6e:	69f8      	ldr	r0, [r7, #28]
 8012a70:	f001 f932 	bl	8013cd8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8012a74:	69fb      	ldr	r3, [r7, #28]
}
 8012a76:	4618      	mov	r0, r3
 8012a78:	3720      	adds	r7, #32
 8012a7a:	46bd      	mov	sp, r7
 8012a7c:	bd80      	pop	{r7, pc}
	...

08012a80 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b088      	sub	sp, #32
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	60f8      	str	r0, [r7, #12]
 8012a88:	60b9      	str	r1, [r7, #8]
 8012a8a:	603b      	str	r3, [r7, #0]
 8012a8c:	4613      	mov	r3, r2
 8012a8e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012a94:	2300      	movs	r3, #0
 8012a96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a98:	f3ef 8305 	mrs	r3, IPSR
 8012a9c:	617b      	str	r3, [r7, #20]
  return(result);
 8012a9e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d028      	beq.n	8012af6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012aa4:	69bb      	ldr	r3, [r7, #24]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d005      	beq.n	8012ab6 <osMessageQueuePut+0x36>
 8012aaa:	68bb      	ldr	r3, [r7, #8]
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d002      	beq.n	8012ab6 <osMessageQueuePut+0x36>
 8012ab0:	683b      	ldr	r3, [r7, #0]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d003      	beq.n	8012abe <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8012ab6:	f06f 0303 	mvn.w	r3, #3
 8012aba:	61fb      	str	r3, [r7, #28]
 8012abc:	e038      	b.n	8012b30 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8012abe:	2300      	movs	r3, #0
 8012ac0:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012ac2:	f107 0210 	add.w	r2, r7, #16
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	68b9      	ldr	r1, [r7, #8]
 8012aca:	69b8      	ldr	r0, [r7, #24]
 8012acc:	f000 fc24 	bl	8013318 <xQueueGenericSendFromISR>
 8012ad0:	4603      	mov	r3, r0
 8012ad2:	2b01      	cmp	r3, #1
 8012ad4:	d003      	beq.n	8012ade <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8012ad6:	f06f 0302 	mvn.w	r3, #2
 8012ada:	61fb      	str	r3, [r7, #28]
 8012adc:	e028      	b.n	8012b30 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8012ade:	693b      	ldr	r3, [r7, #16]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d025      	beq.n	8012b30 <osMessageQueuePut+0xb0>
 8012ae4:	4b15      	ldr	r3, [pc, #84]	; (8012b3c <osMessageQueuePut+0xbc>)
 8012ae6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012aea:	601a      	str	r2, [r3, #0]
 8012aec:	f3bf 8f4f 	dsb	sy
 8012af0:	f3bf 8f6f 	isb	sy
 8012af4:	e01c      	b.n	8012b30 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012af6:	69bb      	ldr	r3, [r7, #24]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d002      	beq.n	8012b02 <osMessageQueuePut+0x82>
 8012afc:	68bb      	ldr	r3, [r7, #8]
 8012afe:	2b00      	cmp	r3, #0
 8012b00:	d103      	bne.n	8012b0a <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8012b02:	f06f 0303 	mvn.w	r3, #3
 8012b06:	61fb      	str	r3, [r7, #28]
 8012b08:	e012      	b.n	8012b30 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012b0a:	2300      	movs	r3, #0
 8012b0c:	683a      	ldr	r2, [r7, #0]
 8012b0e:	68b9      	ldr	r1, [r7, #8]
 8012b10:	69b8      	ldr	r0, [r7, #24]
 8012b12:	f000 fb03 	bl	801311c <xQueueGenericSend>
 8012b16:	4603      	mov	r3, r0
 8012b18:	2b01      	cmp	r3, #1
 8012b1a:	d009      	beq.n	8012b30 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8012b1c:	683b      	ldr	r3, [r7, #0]
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d003      	beq.n	8012b2a <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8012b22:	f06f 0301 	mvn.w	r3, #1
 8012b26:	61fb      	str	r3, [r7, #28]
 8012b28:	e002      	b.n	8012b30 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8012b2a:	f06f 0302 	mvn.w	r3, #2
 8012b2e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012b30:	69fb      	ldr	r3, [r7, #28]
}
 8012b32:	4618      	mov	r0, r3
 8012b34:	3720      	adds	r7, #32
 8012b36:	46bd      	mov	sp, r7
 8012b38:	bd80      	pop	{r7, pc}
 8012b3a:	bf00      	nop
 8012b3c:	e000ed04 	.word	0xe000ed04

08012b40 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b088      	sub	sp, #32
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	60f8      	str	r0, [r7, #12]
 8012b48:	60b9      	str	r1, [r7, #8]
 8012b4a:	607a      	str	r2, [r7, #4]
 8012b4c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012b52:	2300      	movs	r3, #0
 8012b54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b56:	f3ef 8305 	mrs	r3, IPSR
 8012b5a:	617b      	str	r3, [r7, #20]
  return(result);
 8012b5c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d028      	beq.n	8012bb4 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012b62:	69bb      	ldr	r3, [r7, #24]
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d005      	beq.n	8012b74 <osMessageQueueGet+0x34>
 8012b68:	68bb      	ldr	r3, [r7, #8]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d002      	beq.n	8012b74 <osMessageQueueGet+0x34>
 8012b6e:	683b      	ldr	r3, [r7, #0]
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d003      	beq.n	8012b7c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8012b74:	f06f 0303 	mvn.w	r3, #3
 8012b78:	61fb      	str	r3, [r7, #28]
 8012b7a:	e037      	b.n	8012bec <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8012b7c:	2300      	movs	r3, #0
 8012b7e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012b80:	f107 0310 	add.w	r3, r7, #16
 8012b84:	461a      	mov	r2, r3
 8012b86:	68b9      	ldr	r1, [r7, #8]
 8012b88:	69b8      	ldr	r0, [r7, #24]
 8012b8a:	f000 fed9 	bl	8013940 <xQueueReceiveFromISR>
 8012b8e:	4603      	mov	r3, r0
 8012b90:	2b01      	cmp	r3, #1
 8012b92:	d003      	beq.n	8012b9c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8012b94:	f06f 0302 	mvn.w	r3, #2
 8012b98:	61fb      	str	r3, [r7, #28]
 8012b9a:	e027      	b.n	8012bec <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8012b9c:	693b      	ldr	r3, [r7, #16]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d024      	beq.n	8012bec <osMessageQueueGet+0xac>
 8012ba2:	4b15      	ldr	r3, [pc, #84]	; (8012bf8 <osMessageQueueGet+0xb8>)
 8012ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ba8:	601a      	str	r2, [r3, #0]
 8012baa:	f3bf 8f4f 	dsb	sy
 8012bae:	f3bf 8f6f 	isb	sy
 8012bb2:	e01b      	b.n	8012bec <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012bb4:	69bb      	ldr	r3, [r7, #24]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d002      	beq.n	8012bc0 <osMessageQueueGet+0x80>
 8012bba:	68bb      	ldr	r3, [r7, #8]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d103      	bne.n	8012bc8 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8012bc0:	f06f 0303 	mvn.w	r3, #3
 8012bc4:	61fb      	str	r3, [r7, #28]
 8012bc6:	e011      	b.n	8012bec <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012bc8:	683a      	ldr	r2, [r7, #0]
 8012bca:	68b9      	ldr	r1, [r7, #8]
 8012bcc:	69b8      	ldr	r0, [r7, #24]
 8012bce:	f000 fccb 	bl	8013568 <xQueueReceive>
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	2b01      	cmp	r3, #1
 8012bd6:	d009      	beq.n	8012bec <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8012bd8:	683b      	ldr	r3, [r7, #0]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	d003      	beq.n	8012be6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8012bde:	f06f 0301 	mvn.w	r3, #1
 8012be2:	61fb      	str	r3, [r7, #28]
 8012be4:	e002      	b.n	8012bec <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8012be6:	f06f 0302 	mvn.w	r3, #2
 8012bea:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012bec:	69fb      	ldr	r3, [r7, #28]
}
 8012bee:	4618      	mov	r0, r3
 8012bf0:	3720      	adds	r7, #32
 8012bf2:	46bd      	mov	sp, r7
 8012bf4:	bd80      	pop	{r7, pc}
 8012bf6:	bf00      	nop
 8012bf8:	e000ed04 	.word	0xe000ed04

08012bfc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012bfc:	b480      	push	{r7}
 8012bfe:	b085      	sub	sp, #20
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	60f8      	str	r0, [r7, #12]
 8012c04:	60b9      	str	r1, [r7, #8]
 8012c06:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	4a07      	ldr	r2, [pc, #28]	; (8012c28 <vApplicationGetIdleTaskMemory+0x2c>)
 8012c0c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012c0e:	68bb      	ldr	r3, [r7, #8]
 8012c10:	4a06      	ldr	r2, [pc, #24]	; (8012c2c <vApplicationGetIdleTaskMemory+0x30>)
 8012c12:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	2280      	movs	r2, #128	; 0x80
 8012c18:	601a      	str	r2, [r3, #0]
}
 8012c1a:	bf00      	nop
 8012c1c:	3714      	adds	r7, #20
 8012c1e:	46bd      	mov	sp, r7
 8012c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c24:	4770      	bx	lr
 8012c26:	bf00      	nop
 8012c28:	200027f0 	.word	0x200027f0
 8012c2c:	200028b0 	.word	0x200028b0

08012c30 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012c30:	b480      	push	{r7}
 8012c32:	b085      	sub	sp, #20
 8012c34:	af00      	add	r7, sp, #0
 8012c36:	60f8      	str	r0, [r7, #12]
 8012c38:	60b9      	str	r1, [r7, #8]
 8012c3a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	4a07      	ldr	r2, [pc, #28]	; (8012c5c <vApplicationGetTimerTaskMemory+0x2c>)
 8012c40:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012c42:	68bb      	ldr	r3, [r7, #8]
 8012c44:	4a06      	ldr	r2, [pc, #24]	; (8012c60 <vApplicationGetTimerTaskMemory+0x30>)
 8012c46:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012c4e:	601a      	str	r2, [r3, #0]
}
 8012c50:	bf00      	nop
 8012c52:	3714      	adds	r7, #20
 8012c54:	46bd      	mov	sp, r7
 8012c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5a:	4770      	bx	lr
 8012c5c:	20002ab0 	.word	0x20002ab0
 8012c60:	20002b70 	.word	0x20002b70

08012c64 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8012c64:	b480      	push	{r7}
 8012c66:	b083      	sub	sp, #12
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	f103 0208 	add.w	r2, r3, #8
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012c76:	687b      	ldr	r3, [r7, #4]
 8012c78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012c7c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	f103 0208 	add.w	r2, r3, #8
 8012c84:	687b      	ldr	r3, [r7, #4]
 8012c86:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	f103 0208 	add.w	r2, r3, #8
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	2200      	movs	r2, #0
 8012c96:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012c98:	bf00      	nop
 8012c9a:	370c      	adds	r7, #12
 8012c9c:	46bd      	mov	sp, r7
 8012c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ca2:	4770      	bx	lr

08012ca4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8012ca4:	b480      	push	{r7}
 8012ca6:	b083      	sub	sp, #12
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	2200      	movs	r2, #0
 8012cb0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8012cb2:	bf00      	nop
 8012cb4:	370c      	adds	r7, #12
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbc:	4770      	bx	lr

08012cbe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012cbe:	b480      	push	{r7}
 8012cc0:	b085      	sub	sp, #20
 8012cc2:	af00      	add	r7, sp, #0
 8012cc4:	6078      	str	r0, [r7, #4]
 8012cc6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012cc8:	687b      	ldr	r3, [r7, #4]
 8012cca:	685b      	ldr	r3, [r3, #4]
 8012ccc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012cce:	683b      	ldr	r3, [r7, #0]
 8012cd0:	68fa      	ldr	r2, [r7, #12]
 8012cd2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	689a      	ldr	r2, [r3, #8]
 8012cd8:	683b      	ldr	r3, [r7, #0]
 8012cda:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012cdc:	68fb      	ldr	r3, [r7, #12]
 8012cde:	689b      	ldr	r3, [r3, #8]
 8012ce0:	683a      	ldr	r2, [r7, #0]
 8012ce2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	683a      	ldr	r2, [r7, #0]
 8012ce8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012cea:	683b      	ldr	r3, [r7, #0]
 8012cec:	687a      	ldr	r2, [r7, #4]
 8012cee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	1c5a      	adds	r2, r3, #1
 8012cf6:	687b      	ldr	r3, [r7, #4]
 8012cf8:	601a      	str	r2, [r3, #0]
}
 8012cfa:	bf00      	nop
 8012cfc:	3714      	adds	r7, #20
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d04:	4770      	bx	lr

08012d06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012d06:	b480      	push	{r7}
 8012d08:	b085      	sub	sp, #20
 8012d0a:	af00      	add	r7, sp, #0
 8012d0c:	6078      	str	r0, [r7, #4]
 8012d0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8012d10:	683b      	ldr	r3, [r7, #0]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8012d16:	68bb      	ldr	r3, [r7, #8]
 8012d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012d1c:	d103      	bne.n	8012d26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8012d1e:	687b      	ldr	r3, [r7, #4]
 8012d20:	691b      	ldr	r3, [r3, #16]
 8012d22:	60fb      	str	r3, [r7, #12]
 8012d24:	e00c      	b.n	8012d40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	3308      	adds	r3, #8
 8012d2a:	60fb      	str	r3, [r7, #12]
 8012d2c:	e002      	b.n	8012d34 <vListInsert+0x2e>
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	685b      	ldr	r3, [r3, #4]
 8012d32:	60fb      	str	r3, [r7, #12]
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	685b      	ldr	r3, [r3, #4]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	68ba      	ldr	r2, [r7, #8]
 8012d3c:	429a      	cmp	r2, r3
 8012d3e:	d2f6      	bcs.n	8012d2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	685a      	ldr	r2, [r3, #4]
 8012d44:	683b      	ldr	r3, [r7, #0]
 8012d46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8012d48:	683b      	ldr	r3, [r7, #0]
 8012d4a:	685b      	ldr	r3, [r3, #4]
 8012d4c:	683a      	ldr	r2, [r7, #0]
 8012d4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8012d50:	683b      	ldr	r3, [r7, #0]
 8012d52:	68fa      	ldr	r2, [r7, #12]
 8012d54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	683a      	ldr	r2, [r7, #0]
 8012d5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8012d5c:	683b      	ldr	r3, [r7, #0]
 8012d5e:	687a      	ldr	r2, [r7, #4]
 8012d60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	1c5a      	adds	r2, r3, #1
 8012d68:	687b      	ldr	r3, [r7, #4]
 8012d6a:	601a      	str	r2, [r3, #0]
}
 8012d6c:	bf00      	nop
 8012d6e:	3714      	adds	r7, #20
 8012d70:	46bd      	mov	sp, r7
 8012d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d76:	4770      	bx	lr

08012d78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012d78:	b480      	push	{r7}
 8012d7a:	b085      	sub	sp, #20
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	691b      	ldr	r3, [r3, #16]
 8012d84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012d86:	687b      	ldr	r3, [r7, #4]
 8012d88:	685b      	ldr	r3, [r3, #4]
 8012d8a:	687a      	ldr	r2, [r7, #4]
 8012d8c:	6892      	ldr	r2, [r2, #8]
 8012d8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8012d90:	687b      	ldr	r3, [r7, #4]
 8012d92:	689b      	ldr	r3, [r3, #8]
 8012d94:	687a      	ldr	r2, [r7, #4]
 8012d96:	6852      	ldr	r2, [r2, #4]
 8012d98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012d9a:	68fb      	ldr	r3, [r7, #12]
 8012d9c:	685b      	ldr	r3, [r3, #4]
 8012d9e:	687a      	ldr	r2, [r7, #4]
 8012da0:	429a      	cmp	r2, r3
 8012da2:	d103      	bne.n	8012dac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8012da4:	687b      	ldr	r3, [r7, #4]
 8012da6:	689a      	ldr	r2, [r3, #8]
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012dac:	687b      	ldr	r3, [r7, #4]
 8012dae:	2200      	movs	r2, #0
 8012db0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8012db2:	68fb      	ldr	r3, [r7, #12]
 8012db4:	681b      	ldr	r3, [r3, #0]
 8012db6:	1e5a      	subs	r2, r3, #1
 8012db8:	68fb      	ldr	r3, [r7, #12]
 8012dba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	681b      	ldr	r3, [r3, #0]
}
 8012dc0:	4618      	mov	r0, r3
 8012dc2:	3714      	adds	r7, #20
 8012dc4:	46bd      	mov	sp, r7
 8012dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dca:	4770      	bx	lr

08012dcc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b084      	sub	sp, #16
 8012dd0:	af00      	add	r7, sp, #0
 8012dd2:	6078      	str	r0, [r7, #4]
 8012dd4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d10a      	bne.n	8012df6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012de4:	f383 8811 	msr	BASEPRI, r3
 8012de8:	f3bf 8f6f 	isb	sy
 8012dec:	f3bf 8f4f 	dsb	sy
 8012df0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012df2:	bf00      	nop
 8012df4:	e7fe      	b.n	8012df4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8012df6:	f002 ffc5 	bl	8015d84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	681a      	ldr	r2, [r3, #0]
 8012dfe:	68fb      	ldr	r3, [r7, #12]
 8012e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e02:	68f9      	ldr	r1, [r7, #12]
 8012e04:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012e06:	fb01 f303 	mul.w	r3, r1, r3
 8012e0a:	441a      	add	r2, r3
 8012e0c:	68fb      	ldr	r3, [r7, #12]
 8012e0e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8012e10:	68fb      	ldr	r3, [r7, #12]
 8012e12:	2200      	movs	r2, #0
 8012e14:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	681a      	ldr	r2, [r3, #0]
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012e1e:	68fb      	ldr	r3, [r7, #12]
 8012e20:	681a      	ldr	r2, [r3, #0]
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012e26:	3b01      	subs	r3, #1
 8012e28:	68f9      	ldr	r1, [r7, #12]
 8012e2a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012e2c:	fb01 f303 	mul.w	r3, r1, r3
 8012e30:	441a      	add	r2, r3
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8012e36:	68fb      	ldr	r3, [r7, #12]
 8012e38:	22ff      	movs	r2, #255	; 0xff
 8012e3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	22ff      	movs	r2, #255	; 0xff
 8012e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8012e46:	683b      	ldr	r3, [r7, #0]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d114      	bne.n	8012e76 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e4c:	68fb      	ldr	r3, [r7, #12]
 8012e4e:	691b      	ldr	r3, [r3, #16]
 8012e50:	2b00      	cmp	r3, #0
 8012e52:	d01a      	beq.n	8012e8a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	3310      	adds	r3, #16
 8012e58:	4618      	mov	r0, r3
 8012e5a:	f001 fd67 	bl	801492c <xTaskRemoveFromEventList>
 8012e5e:	4603      	mov	r3, r0
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d012      	beq.n	8012e8a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8012e64:	4b0c      	ldr	r3, [pc, #48]	; (8012e98 <xQueueGenericReset+0xcc>)
 8012e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e6a:	601a      	str	r2, [r3, #0]
 8012e6c:	f3bf 8f4f 	dsb	sy
 8012e70:	f3bf 8f6f 	isb	sy
 8012e74:	e009      	b.n	8012e8a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	3310      	adds	r3, #16
 8012e7a:	4618      	mov	r0, r3
 8012e7c:	f7ff fef2 	bl	8012c64 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012e80:	68fb      	ldr	r3, [r7, #12]
 8012e82:	3324      	adds	r3, #36	; 0x24
 8012e84:	4618      	mov	r0, r3
 8012e86:	f7ff feed 	bl	8012c64 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8012e8a:	f002 ffab 	bl	8015de4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8012e8e:	2301      	movs	r3, #1
}
 8012e90:	4618      	mov	r0, r3
 8012e92:	3710      	adds	r7, #16
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bd80      	pop	{r7, pc}
 8012e98:	e000ed04 	.word	0xe000ed04

08012e9c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8012e9c:	b580      	push	{r7, lr}
 8012e9e:	b08e      	sub	sp, #56	; 0x38
 8012ea0:	af02      	add	r7, sp, #8
 8012ea2:	60f8      	str	r0, [r7, #12]
 8012ea4:	60b9      	str	r1, [r7, #8]
 8012ea6:	607a      	str	r2, [r7, #4]
 8012ea8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012eaa:	68fb      	ldr	r3, [r7, #12]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d10a      	bne.n	8012ec6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8012eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eb4:	f383 8811 	msr	BASEPRI, r3
 8012eb8:	f3bf 8f6f 	isb	sy
 8012ebc:	f3bf 8f4f 	dsb	sy
 8012ec0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012ec2:	bf00      	nop
 8012ec4:	e7fe      	b.n	8012ec4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8012ec6:	683b      	ldr	r3, [r7, #0]
 8012ec8:	2b00      	cmp	r3, #0
 8012eca:	d10a      	bne.n	8012ee2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8012ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ed0:	f383 8811 	msr	BASEPRI, r3
 8012ed4:	f3bf 8f6f 	isb	sy
 8012ed8:	f3bf 8f4f 	dsb	sy
 8012edc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012ede:	bf00      	nop
 8012ee0:	e7fe      	b.n	8012ee0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	d002      	beq.n	8012eee <xQueueGenericCreateStatic+0x52>
 8012ee8:	68bb      	ldr	r3, [r7, #8]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d001      	beq.n	8012ef2 <xQueueGenericCreateStatic+0x56>
 8012eee:	2301      	movs	r3, #1
 8012ef0:	e000      	b.n	8012ef4 <xQueueGenericCreateStatic+0x58>
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	d10a      	bne.n	8012f0e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8012ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012efc:	f383 8811 	msr	BASEPRI, r3
 8012f00:	f3bf 8f6f 	isb	sy
 8012f04:	f3bf 8f4f 	dsb	sy
 8012f08:	623b      	str	r3, [r7, #32]
}
 8012f0a:	bf00      	nop
 8012f0c:	e7fe      	b.n	8012f0c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d102      	bne.n	8012f1a <xQueueGenericCreateStatic+0x7e>
 8012f14:	68bb      	ldr	r3, [r7, #8]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d101      	bne.n	8012f1e <xQueueGenericCreateStatic+0x82>
 8012f1a:	2301      	movs	r3, #1
 8012f1c:	e000      	b.n	8012f20 <xQueueGenericCreateStatic+0x84>
 8012f1e:	2300      	movs	r3, #0
 8012f20:	2b00      	cmp	r3, #0
 8012f22:	d10a      	bne.n	8012f3a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8012f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f28:	f383 8811 	msr	BASEPRI, r3
 8012f2c:	f3bf 8f6f 	isb	sy
 8012f30:	f3bf 8f4f 	dsb	sy
 8012f34:	61fb      	str	r3, [r7, #28]
}
 8012f36:	bf00      	nop
 8012f38:	e7fe      	b.n	8012f38 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8012f3a:	2350      	movs	r3, #80	; 0x50
 8012f3c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8012f3e:	697b      	ldr	r3, [r7, #20]
 8012f40:	2b50      	cmp	r3, #80	; 0x50
 8012f42:	d00a      	beq.n	8012f5a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8012f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f48:	f383 8811 	msr	BASEPRI, r3
 8012f4c:	f3bf 8f6f 	isb	sy
 8012f50:	f3bf 8f4f 	dsb	sy
 8012f54:	61bb      	str	r3, [r7, #24]
}
 8012f56:	bf00      	nop
 8012f58:	e7fe      	b.n	8012f58 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8012f5a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012f5c:	683b      	ldr	r3, [r7, #0]
 8012f5e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f62:	2b00      	cmp	r3, #0
 8012f64:	d00d      	beq.n	8012f82 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8012f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f68:	2201      	movs	r2, #1
 8012f6a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012f6e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f74:	9300      	str	r3, [sp, #0]
 8012f76:	4613      	mov	r3, r2
 8012f78:	687a      	ldr	r2, [r7, #4]
 8012f7a:	68b9      	ldr	r1, [r7, #8]
 8012f7c:	68f8      	ldr	r0, [r7, #12]
 8012f7e:	f000 f83f 	bl	8013000 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012f84:	4618      	mov	r0, r3
 8012f86:	3730      	adds	r7, #48	; 0x30
 8012f88:	46bd      	mov	sp, r7
 8012f8a:	bd80      	pop	{r7, pc}

08012f8c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012f8c:	b580      	push	{r7, lr}
 8012f8e:	b08a      	sub	sp, #40	; 0x28
 8012f90:	af02      	add	r7, sp, #8
 8012f92:	60f8      	str	r0, [r7, #12]
 8012f94:	60b9      	str	r1, [r7, #8]
 8012f96:	4613      	mov	r3, r2
 8012f98:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d10a      	bne.n	8012fb6 <xQueueGenericCreate+0x2a>
	__asm volatile
 8012fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fa4:	f383 8811 	msr	BASEPRI, r3
 8012fa8:	f3bf 8f6f 	isb	sy
 8012fac:	f3bf 8f4f 	dsb	sy
 8012fb0:	613b      	str	r3, [r7, #16]
}
 8012fb2:	bf00      	nop
 8012fb4:	e7fe      	b.n	8012fb4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	68ba      	ldr	r2, [r7, #8]
 8012fba:	fb02 f303 	mul.w	r3, r2, r3
 8012fbe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012fc0:	69fb      	ldr	r3, [r7, #28]
 8012fc2:	3350      	adds	r3, #80	; 0x50
 8012fc4:	4618      	mov	r0, r3
 8012fc6:	f002 ffff 	bl	8015fc8 <pvPortMalloc>
 8012fca:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012fcc:	69bb      	ldr	r3, [r7, #24]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d011      	beq.n	8012ff6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012fd2:	69bb      	ldr	r3, [r7, #24]
 8012fd4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8012fd6:	697b      	ldr	r3, [r7, #20]
 8012fd8:	3350      	adds	r3, #80	; 0x50
 8012fda:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012fdc:	69bb      	ldr	r3, [r7, #24]
 8012fde:	2200      	movs	r2, #0
 8012fe0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012fe4:	79fa      	ldrb	r2, [r7, #7]
 8012fe6:	69bb      	ldr	r3, [r7, #24]
 8012fe8:	9300      	str	r3, [sp, #0]
 8012fea:	4613      	mov	r3, r2
 8012fec:	697a      	ldr	r2, [r7, #20]
 8012fee:	68b9      	ldr	r1, [r7, #8]
 8012ff0:	68f8      	ldr	r0, [r7, #12]
 8012ff2:	f000 f805 	bl	8013000 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012ff6:	69bb      	ldr	r3, [r7, #24]
	}
 8012ff8:	4618      	mov	r0, r3
 8012ffa:	3720      	adds	r7, #32
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	bd80      	pop	{r7, pc}

08013000 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b084      	sub	sp, #16
 8013004:	af00      	add	r7, sp, #0
 8013006:	60f8      	str	r0, [r7, #12]
 8013008:	60b9      	str	r1, [r7, #8]
 801300a:	607a      	str	r2, [r7, #4]
 801300c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801300e:	68bb      	ldr	r3, [r7, #8]
 8013010:	2b00      	cmp	r3, #0
 8013012:	d103      	bne.n	801301c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8013014:	69bb      	ldr	r3, [r7, #24]
 8013016:	69ba      	ldr	r2, [r7, #24]
 8013018:	601a      	str	r2, [r3, #0]
 801301a:	e002      	b.n	8013022 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801301c:	69bb      	ldr	r3, [r7, #24]
 801301e:	687a      	ldr	r2, [r7, #4]
 8013020:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8013022:	69bb      	ldr	r3, [r7, #24]
 8013024:	68fa      	ldr	r2, [r7, #12]
 8013026:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013028:	69bb      	ldr	r3, [r7, #24]
 801302a:	68ba      	ldr	r2, [r7, #8]
 801302c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 801302e:	2101      	movs	r1, #1
 8013030:	69b8      	ldr	r0, [r7, #24]
 8013032:	f7ff fecb 	bl	8012dcc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8013036:	69bb      	ldr	r3, [r7, #24]
 8013038:	78fa      	ldrb	r2, [r7, #3]
 801303a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 801303e:	bf00      	nop
 8013040:	3710      	adds	r7, #16
 8013042:	46bd      	mov	sp, r7
 8013044:	bd80      	pop	{r7, pc}

08013046 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8013046:	b580      	push	{r7, lr}
 8013048:	b08a      	sub	sp, #40	; 0x28
 801304a:	af02      	add	r7, sp, #8
 801304c:	60f8      	str	r0, [r7, #12]
 801304e:	60b9      	str	r1, [r7, #8]
 8013050:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d10a      	bne.n	801306e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8013058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801305c:	f383 8811 	msr	BASEPRI, r3
 8013060:	f3bf 8f6f 	isb	sy
 8013064:	f3bf 8f4f 	dsb	sy
 8013068:	61bb      	str	r3, [r7, #24]
}
 801306a:	bf00      	nop
 801306c:	e7fe      	b.n	801306c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801306e:	68ba      	ldr	r2, [r7, #8]
 8013070:	68fb      	ldr	r3, [r7, #12]
 8013072:	429a      	cmp	r2, r3
 8013074:	d90a      	bls.n	801308c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8013076:	f04f 0350 	mov.w	r3, #80	; 0x50
 801307a:	f383 8811 	msr	BASEPRI, r3
 801307e:	f3bf 8f6f 	isb	sy
 8013082:	f3bf 8f4f 	dsb	sy
 8013086:	617b      	str	r3, [r7, #20]
}
 8013088:	bf00      	nop
 801308a:	e7fe      	b.n	801308a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801308c:	2302      	movs	r3, #2
 801308e:	9300      	str	r3, [sp, #0]
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	2200      	movs	r2, #0
 8013094:	2100      	movs	r1, #0
 8013096:	68f8      	ldr	r0, [r7, #12]
 8013098:	f7ff ff00 	bl	8012e9c <xQueueGenericCreateStatic>
 801309c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801309e:	69fb      	ldr	r3, [r7, #28]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d002      	beq.n	80130aa <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80130a4:	69fb      	ldr	r3, [r7, #28]
 80130a6:	68ba      	ldr	r2, [r7, #8]
 80130a8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80130aa:	69fb      	ldr	r3, [r7, #28]
	}
 80130ac:	4618      	mov	r0, r3
 80130ae:	3720      	adds	r7, #32
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bd80      	pop	{r7, pc}

080130b4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b086      	sub	sp, #24
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
 80130bc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d10a      	bne.n	80130da <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80130c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130c8:	f383 8811 	msr	BASEPRI, r3
 80130cc:	f3bf 8f6f 	isb	sy
 80130d0:	f3bf 8f4f 	dsb	sy
 80130d4:	613b      	str	r3, [r7, #16]
}
 80130d6:	bf00      	nop
 80130d8:	e7fe      	b.n	80130d8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80130da:	683a      	ldr	r2, [r7, #0]
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	429a      	cmp	r2, r3
 80130e0:	d90a      	bls.n	80130f8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80130e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130e6:	f383 8811 	msr	BASEPRI, r3
 80130ea:	f3bf 8f6f 	isb	sy
 80130ee:	f3bf 8f4f 	dsb	sy
 80130f2:	60fb      	str	r3, [r7, #12]
}
 80130f4:	bf00      	nop
 80130f6:	e7fe      	b.n	80130f6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80130f8:	2202      	movs	r2, #2
 80130fa:	2100      	movs	r1, #0
 80130fc:	6878      	ldr	r0, [r7, #4]
 80130fe:	f7ff ff45 	bl	8012f8c <xQueueGenericCreate>
 8013102:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8013104:	697b      	ldr	r3, [r7, #20]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d002      	beq.n	8013110 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 801310a:	697b      	ldr	r3, [r7, #20]
 801310c:	683a      	ldr	r2, [r7, #0]
 801310e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8013110:	697b      	ldr	r3, [r7, #20]
	}
 8013112:	4618      	mov	r0, r3
 8013114:	3718      	adds	r7, #24
 8013116:	46bd      	mov	sp, r7
 8013118:	bd80      	pop	{r7, pc}
	...

0801311c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801311c:	b580      	push	{r7, lr}
 801311e:	b08e      	sub	sp, #56	; 0x38
 8013120:	af00      	add	r7, sp, #0
 8013122:	60f8      	str	r0, [r7, #12]
 8013124:	60b9      	str	r1, [r7, #8]
 8013126:	607a      	str	r2, [r7, #4]
 8013128:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801312a:	2300      	movs	r3, #0
 801312c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801312e:	68fb      	ldr	r3, [r7, #12]
 8013130:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013134:	2b00      	cmp	r3, #0
 8013136:	d10a      	bne.n	801314e <xQueueGenericSend+0x32>
	__asm volatile
 8013138:	f04f 0350 	mov.w	r3, #80	; 0x50
 801313c:	f383 8811 	msr	BASEPRI, r3
 8013140:	f3bf 8f6f 	isb	sy
 8013144:	f3bf 8f4f 	dsb	sy
 8013148:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801314a:	bf00      	nop
 801314c:	e7fe      	b.n	801314c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801314e:	68bb      	ldr	r3, [r7, #8]
 8013150:	2b00      	cmp	r3, #0
 8013152:	d103      	bne.n	801315c <xQueueGenericSend+0x40>
 8013154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013158:	2b00      	cmp	r3, #0
 801315a:	d101      	bne.n	8013160 <xQueueGenericSend+0x44>
 801315c:	2301      	movs	r3, #1
 801315e:	e000      	b.n	8013162 <xQueueGenericSend+0x46>
 8013160:	2300      	movs	r3, #0
 8013162:	2b00      	cmp	r3, #0
 8013164:	d10a      	bne.n	801317c <xQueueGenericSend+0x60>
	__asm volatile
 8013166:	f04f 0350 	mov.w	r3, #80	; 0x50
 801316a:	f383 8811 	msr	BASEPRI, r3
 801316e:	f3bf 8f6f 	isb	sy
 8013172:	f3bf 8f4f 	dsb	sy
 8013176:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013178:	bf00      	nop
 801317a:	e7fe      	b.n	801317a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801317c:	683b      	ldr	r3, [r7, #0]
 801317e:	2b02      	cmp	r3, #2
 8013180:	d103      	bne.n	801318a <xQueueGenericSend+0x6e>
 8013182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013186:	2b01      	cmp	r3, #1
 8013188:	d101      	bne.n	801318e <xQueueGenericSend+0x72>
 801318a:	2301      	movs	r3, #1
 801318c:	e000      	b.n	8013190 <xQueueGenericSend+0x74>
 801318e:	2300      	movs	r3, #0
 8013190:	2b00      	cmp	r3, #0
 8013192:	d10a      	bne.n	80131aa <xQueueGenericSend+0x8e>
	__asm volatile
 8013194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013198:	f383 8811 	msr	BASEPRI, r3
 801319c:	f3bf 8f6f 	isb	sy
 80131a0:	f3bf 8f4f 	dsb	sy
 80131a4:	623b      	str	r3, [r7, #32]
}
 80131a6:	bf00      	nop
 80131a8:	e7fe      	b.n	80131a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80131aa:	f001 fe55 	bl	8014e58 <xTaskGetSchedulerState>
 80131ae:	4603      	mov	r3, r0
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d102      	bne.n	80131ba <xQueueGenericSend+0x9e>
 80131b4:	687b      	ldr	r3, [r7, #4]
 80131b6:	2b00      	cmp	r3, #0
 80131b8:	d101      	bne.n	80131be <xQueueGenericSend+0xa2>
 80131ba:	2301      	movs	r3, #1
 80131bc:	e000      	b.n	80131c0 <xQueueGenericSend+0xa4>
 80131be:	2300      	movs	r3, #0
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d10a      	bne.n	80131da <xQueueGenericSend+0xbe>
	__asm volatile
 80131c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131c8:	f383 8811 	msr	BASEPRI, r3
 80131cc:	f3bf 8f6f 	isb	sy
 80131d0:	f3bf 8f4f 	dsb	sy
 80131d4:	61fb      	str	r3, [r7, #28]
}
 80131d6:	bf00      	nop
 80131d8:	e7fe      	b.n	80131d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80131da:	f002 fdd3 	bl	8015d84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80131de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80131e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80131e6:	429a      	cmp	r2, r3
 80131e8:	d302      	bcc.n	80131f0 <xQueueGenericSend+0xd4>
 80131ea:	683b      	ldr	r3, [r7, #0]
 80131ec:	2b02      	cmp	r3, #2
 80131ee:	d129      	bne.n	8013244 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80131f0:	683a      	ldr	r2, [r7, #0]
 80131f2:	68b9      	ldr	r1, [r7, #8]
 80131f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80131f6:	f000 fc5e 	bl	8013ab6 <prvCopyDataToQueue>
 80131fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80131fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013200:	2b00      	cmp	r3, #0
 8013202:	d010      	beq.n	8013226 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013206:	3324      	adds	r3, #36	; 0x24
 8013208:	4618      	mov	r0, r3
 801320a:	f001 fb8f 	bl	801492c <xTaskRemoveFromEventList>
 801320e:	4603      	mov	r3, r0
 8013210:	2b00      	cmp	r3, #0
 8013212:	d013      	beq.n	801323c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013214:	4b3f      	ldr	r3, [pc, #252]	; (8013314 <xQueueGenericSend+0x1f8>)
 8013216:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801321a:	601a      	str	r2, [r3, #0]
 801321c:	f3bf 8f4f 	dsb	sy
 8013220:	f3bf 8f6f 	isb	sy
 8013224:	e00a      	b.n	801323c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013228:	2b00      	cmp	r3, #0
 801322a:	d007      	beq.n	801323c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 801322c:	4b39      	ldr	r3, [pc, #228]	; (8013314 <xQueueGenericSend+0x1f8>)
 801322e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013232:	601a      	str	r2, [r3, #0]
 8013234:	f3bf 8f4f 	dsb	sy
 8013238:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 801323c:	f002 fdd2 	bl	8015de4 <vPortExitCritical>
				return pdPASS;
 8013240:	2301      	movs	r3, #1
 8013242:	e063      	b.n	801330c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d103      	bne.n	8013252 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801324a:	f002 fdcb 	bl	8015de4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801324e:	2300      	movs	r3, #0
 8013250:	e05c      	b.n	801330c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013254:	2b00      	cmp	r3, #0
 8013256:	d106      	bne.n	8013266 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013258:	f107 0314 	add.w	r3, r7, #20
 801325c:	4618      	mov	r0, r3
 801325e:	f001 fbc9 	bl	80149f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013262:	2301      	movs	r3, #1
 8013264:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013266:	f002 fdbd 	bl	8015de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801326a:	f001 f887 	bl	801437c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801326e:	f002 fd89 	bl	8015d84 <vPortEnterCritical>
 8013272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013274:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013278:	b25b      	sxtb	r3, r3
 801327a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801327e:	d103      	bne.n	8013288 <xQueueGenericSend+0x16c>
 8013280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013282:	2200      	movs	r2, #0
 8013284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801328a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801328e:	b25b      	sxtb	r3, r3
 8013290:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013294:	d103      	bne.n	801329e <xQueueGenericSend+0x182>
 8013296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013298:	2200      	movs	r2, #0
 801329a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801329e:	f002 fda1 	bl	8015de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80132a2:	1d3a      	adds	r2, r7, #4
 80132a4:	f107 0314 	add.w	r3, r7, #20
 80132a8:	4611      	mov	r1, r2
 80132aa:	4618      	mov	r0, r3
 80132ac:	f001 fbb8 	bl	8014a20 <xTaskCheckForTimeOut>
 80132b0:	4603      	mov	r3, r0
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d124      	bne.n	8013300 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80132b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80132b8:	f000 fcf5 	bl	8013ca6 <prvIsQueueFull>
 80132bc:	4603      	mov	r3, r0
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d018      	beq.n	80132f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80132c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80132c4:	3310      	adds	r3, #16
 80132c6:	687a      	ldr	r2, [r7, #4]
 80132c8:	4611      	mov	r1, r2
 80132ca:	4618      	mov	r0, r3
 80132cc:	f001 fade 	bl	801488c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80132d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80132d2:	f000 fc80 	bl	8013bd6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80132d6:	f001 f85f 	bl	8014398 <xTaskResumeAll>
 80132da:	4603      	mov	r3, r0
 80132dc:	2b00      	cmp	r3, #0
 80132de:	f47f af7c 	bne.w	80131da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80132e2:	4b0c      	ldr	r3, [pc, #48]	; (8013314 <xQueueGenericSend+0x1f8>)
 80132e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132e8:	601a      	str	r2, [r3, #0]
 80132ea:	f3bf 8f4f 	dsb	sy
 80132ee:	f3bf 8f6f 	isb	sy
 80132f2:	e772      	b.n	80131da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80132f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80132f6:	f000 fc6e 	bl	8013bd6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80132fa:	f001 f84d 	bl	8014398 <xTaskResumeAll>
 80132fe:	e76c      	b.n	80131da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013300:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013302:	f000 fc68 	bl	8013bd6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013306:	f001 f847 	bl	8014398 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801330a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801330c:	4618      	mov	r0, r3
 801330e:	3738      	adds	r7, #56	; 0x38
 8013310:	46bd      	mov	sp, r7
 8013312:	bd80      	pop	{r7, pc}
 8013314:	e000ed04 	.word	0xe000ed04

08013318 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013318:	b580      	push	{r7, lr}
 801331a:	b090      	sub	sp, #64	; 0x40
 801331c:	af00      	add	r7, sp, #0
 801331e:	60f8      	str	r0, [r7, #12]
 8013320:	60b9      	str	r1, [r7, #8]
 8013322:	607a      	str	r2, [r7, #4]
 8013324:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013326:	68fb      	ldr	r3, [r7, #12]
 8013328:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801332a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801332c:	2b00      	cmp	r3, #0
 801332e:	d10a      	bne.n	8013346 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8013330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013334:	f383 8811 	msr	BASEPRI, r3
 8013338:	f3bf 8f6f 	isb	sy
 801333c:	f3bf 8f4f 	dsb	sy
 8013340:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013342:	bf00      	nop
 8013344:	e7fe      	b.n	8013344 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013346:	68bb      	ldr	r3, [r7, #8]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d103      	bne.n	8013354 <xQueueGenericSendFromISR+0x3c>
 801334c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801334e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013350:	2b00      	cmp	r3, #0
 8013352:	d101      	bne.n	8013358 <xQueueGenericSendFromISR+0x40>
 8013354:	2301      	movs	r3, #1
 8013356:	e000      	b.n	801335a <xQueueGenericSendFromISR+0x42>
 8013358:	2300      	movs	r3, #0
 801335a:	2b00      	cmp	r3, #0
 801335c:	d10a      	bne.n	8013374 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801335e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013362:	f383 8811 	msr	BASEPRI, r3
 8013366:	f3bf 8f6f 	isb	sy
 801336a:	f3bf 8f4f 	dsb	sy
 801336e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013370:	bf00      	nop
 8013372:	e7fe      	b.n	8013372 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013374:	683b      	ldr	r3, [r7, #0]
 8013376:	2b02      	cmp	r3, #2
 8013378:	d103      	bne.n	8013382 <xQueueGenericSendFromISR+0x6a>
 801337a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801337c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801337e:	2b01      	cmp	r3, #1
 8013380:	d101      	bne.n	8013386 <xQueueGenericSendFromISR+0x6e>
 8013382:	2301      	movs	r3, #1
 8013384:	e000      	b.n	8013388 <xQueueGenericSendFromISR+0x70>
 8013386:	2300      	movs	r3, #0
 8013388:	2b00      	cmp	r3, #0
 801338a:	d10a      	bne.n	80133a2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 801338c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013390:	f383 8811 	msr	BASEPRI, r3
 8013394:	f3bf 8f6f 	isb	sy
 8013398:	f3bf 8f4f 	dsb	sy
 801339c:	623b      	str	r3, [r7, #32]
}
 801339e:	bf00      	nop
 80133a0:	e7fe      	b.n	80133a0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80133a2:	f002 fdd1 	bl	8015f48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80133a6:	f3ef 8211 	mrs	r2, BASEPRI
 80133aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133ae:	f383 8811 	msr	BASEPRI, r3
 80133b2:	f3bf 8f6f 	isb	sy
 80133b6:	f3bf 8f4f 	dsb	sy
 80133ba:	61fa      	str	r2, [r7, #28]
 80133bc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80133be:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80133c0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80133c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80133c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80133ca:	429a      	cmp	r2, r3
 80133cc:	d302      	bcc.n	80133d4 <xQueueGenericSendFromISR+0xbc>
 80133ce:	683b      	ldr	r3, [r7, #0]
 80133d0:	2b02      	cmp	r3, #2
 80133d2:	d12f      	bne.n	8013434 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80133d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80133da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80133de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133e2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80133e4:	683a      	ldr	r2, [r7, #0]
 80133e6:	68b9      	ldr	r1, [r7, #8]
 80133e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80133ea:	f000 fb64 	bl	8013ab6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80133ee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80133f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80133f6:	d112      	bne.n	801341e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80133f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80133fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d016      	beq.n	801342e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013402:	3324      	adds	r3, #36	; 0x24
 8013404:	4618      	mov	r0, r3
 8013406:	f001 fa91 	bl	801492c <xTaskRemoveFromEventList>
 801340a:	4603      	mov	r3, r0
 801340c:	2b00      	cmp	r3, #0
 801340e:	d00e      	beq.n	801342e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d00b      	beq.n	801342e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	2201      	movs	r2, #1
 801341a:	601a      	str	r2, [r3, #0]
 801341c:	e007      	b.n	801342e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801341e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013422:	3301      	adds	r3, #1
 8013424:	b2db      	uxtb	r3, r3
 8013426:	b25a      	sxtb	r2, r3
 8013428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801342a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801342e:	2301      	movs	r3, #1
 8013430:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8013432:	e001      	b.n	8013438 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013434:	2300      	movs	r3, #0
 8013436:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801343a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801343c:	697b      	ldr	r3, [r7, #20]
 801343e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013442:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013446:	4618      	mov	r0, r3
 8013448:	3740      	adds	r7, #64	; 0x40
 801344a:	46bd      	mov	sp, r7
 801344c:	bd80      	pop	{r7, pc}

0801344e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801344e:	b580      	push	{r7, lr}
 8013450:	b08e      	sub	sp, #56	; 0x38
 8013452:	af00      	add	r7, sp, #0
 8013454:	6078      	str	r0, [r7, #4]
 8013456:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801345c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801345e:	2b00      	cmp	r3, #0
 8013460:	d10a      	bne.n	8013478 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8013462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013466:	f383 8811 	msr	BASEPRI, r3
 801346a:	f3bf 8f6f 	isb	sy
 801346e:	f3bf 8f4f 	dsb	sy
 8013472:	623b      	str	r3, [r7, #32]
}
 8013474:	bf00      	nop
 8013476:	e7fe      	b.n	8013476 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801347a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801347c:	2b00      	cmp	r3, #0
 801347e:	d00a      	beq.n	8013496 <xQueueGiveFromISR+0x48>
	__asm volatile
 8013480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013484:	f383 8811 	msr	BASEPRI, r3
 8013488:	f3bf 8f6f 	isb	sy
 801348c:	f3bf 8f4f 	dsb	sy
 8013490:	61fb      	str	r3, [r7, #28]
}
 8013492:	bf00      	nop
 8013494:	e7fe      	b.n	8013494 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d103      	bne.n	80134a6 <xQueueGiveFromISR+0x58>
 801349e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134a0:	689b      	ldr	r3, [r3, #8]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d101      	bne.n	80134aa <xQueueGiveFromISR+0x5c>
 80134a6:	2301      	movs	r3, #1
 80134a8:	e000      	b.n	80134ac <xQueueGiveFromISR+0x5e>
 80134aa:	2300      	movs	r3, #0
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d10a      	bne.n	80134c6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80134b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134b4:	f383 8811 	msr	BASEPRI, r3
 80134b8:	f3bf 8f6f 	isb	sy
 80134bc:	f3bf 8f4f 	dsb	sy
 80134c0:	61bb      	str	r3, [r7, #24]
}
 80134c2:	bf00      	nop
 80134c4:	e7fe      	b.n	80134c4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80134c6:	f002 fd3f 	bl	8015f48 <vPortValidateInterruptPriority>
	__asm volatile
 80134ca:	f3ef 8211 	mrs	r2, BASEPRI
 80134ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134d2:	f383 8811 	msr	BASEPRI, r3
 80134d6:	f3bf 8f6f 	isb	sy
 80134da:	f3bf 8f4f 	dsb	sy
 80134de:	617a      	str	r2, [r7, #20]
 80134e0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80134e2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80134e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80134e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80134ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80134f2:	429a      	cmp	r2, r3
 80134f4:	d22b      	bcs.n	801354e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80134f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80134f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80134fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013502:	1c5a      	adds	r2, r3, #1
 8013504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013506:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013508:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801350c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013510:	d112      	bne.n	8013538 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013516:	2b00      	cmp	r3, #0
 8013518:	d016      	beq.n	8013548 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801351a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801351c:	3324      	adds	r3, #36	; 0x24
 801351e:	4618      	mov	r0, r3
 8013520:	f001 fa04 	bl	801492c <xTaskRemoveFromEventList>
 8013524:	4603      	mov	r3, r0
 8013526:	2b00      	cmp	r3, #0
 8013528:	d00e      	beq.n	8013548 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801352a:	683b      	ldr	r3, [r7, #0]
 801352c:	2b00      	cmp	r3, #0
 801352e:	d00b      	beq.n	8013548 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013530:	683b      	ldr	r3, [r7, #0]
 8013532:	2201      	movs	r2, #1
 8013534:	601a      	str	r2, [r3, #0]
 8013536:	e007      	b.n	8013548 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013538:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801353c:	3301      	adds	r3, #1
 801353e:	b2db      	uxtb	r3, r3
 8013540:	b25a      	sxtb	r2, r3
 8013542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013548:	2301      	movs	r3, #1
 801354a:	637b      	str	r3, [r7, #52]	; 0x34
 801354c:	e001      	b.n	8013552 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801354e:	2300      	movs	r3, #0
 8013550:	637b      	str	r3, [r7, #52]	; 0x34
 8013552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013554:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013556:	68fb      	ldr	r3, [r7, #12]
 8013558:	f383 8811 	msr	BASEPRI, r3
}
 801355c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801355e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013560:	4618      	mov	r0, r3
 8013562:	3738      	adds	r7, #56	; 0x38
 8013564:	46bd      	mov	sp, r7
 8013566:	bd80      	pop	{r7, pc}

08013568 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013568:	b580      	push	{r7, lr}
 801356a:	b08c      	sub	sp, #48	; 0x30
 801356c:	af00      	add	r7, sp, #0
 801356e:	60f8      	str	r0, [r7, #12]
 8013570:	60b9      	str	r1, [r7, #8]
 8013572:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013574:	2300      	movs	r3, #0
 8013576:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801357c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801357e:	2b00      	cmp	r3, #0
 8013580:	d10a      	bne.n	8013598 <xQueueReceive+0x30>
	__asm volatile
 8013582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013586:	f383 8811 	msr	BASEPRI, r3
 801358a:	f3bf 8f6f 	isb	sy
 801358e:	f3bf 8f4f 	dsb	sy
 8013592:	623b      	str	r3, [r7, #32]
}
 8013594:	bf00      	nop
 8013596:	e7fe      	b.n	8013596 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013598:	68bb      	ldr	r3, [r7, #8]
 801359a:	2b00      	cmp	r3, #0
 801359c:	d103      	bne.n	80135a6 <xQueueReceive+0x3e>
 801359e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d101      	bne.n	80135aa <xQueueReceive+0x42>
 80135a6:	2301      	movs	r3, #1
 80135a8:	e000      	b.n	80135ac <xQueueReceive+0x44>
 80135aa:	2300      	movs	r3, #0
 80135ac:	2b00      	cmp	r3, #0
 80135ae:	d10a      	bne.n	80135c6 <xQueueReceive+0x5e>
	__asm volatile
 80135b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135b4:	f383 8811 	msr	BASEPRI, r3
 80135b8:	f3bf 8f6f 	isb	sy
 80135bc:	f3bf 8f4f 	dsb	sy
 80135c0:	61fb      	str	r3, [r7, #28]
}
 80135c2:	bf00      	nop
 80135c4:	e7fe      	b.n	80135c4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80135c6:	f001 fc47 	bl	8014e58 <xTaskGetSchedulerState>
 80135ca:	4603      	mov	r3, r0
 80135cc:	2b00      	cmp	r3, #0
 80135ce:	d102      	bne.n	80135d6 <xQueueReceive+0x6e>
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d101      	bne.n	80135da <xQueueReceive+0x72>
 80135d6:	2301      	movs	r3, #1
 80135d8:	e000      	b.n	80135dc <xQueueReceive+0x74>
 80135da:	2300      	movs	r3, #0
 80135dc:	2b00      	cmp	r3, #0
 80135de:	d10a      	bne.n	80135f6 <xQueueReceive+0x8e>
	__asm volatile
 80135e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135e4:	f383 8811 	msr	BASEPRI, r3
 80135e8:	f3bf 8f6f 	isb	sy
 80135ec:	f3bf 8f4f 	dsb	sy
 80135f0:	61bb      	str	r3, [r7, #24]
}
 80135f2:	bf00      	nop
 80135f4:	e7fe      	b.n	80135f4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80135f6:	f002 fbc5 	bl	8015d84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80135fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80135fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013602:	2b00      	cmp	r3, #0
 8013604:	d01f      	beq.n	8013646 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013606:	68b9      	ldr	r1, [r7, #8]
 8013608:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801360a:	f000 fabe 	bl	8013b8a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801360e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013610:	1e5a      	subs	r2, r3, #1
 8013612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013614:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013618:	691b      	ldr	r3, [r3, #16]
 801361a:	2b00      	cmp	r3, #0
 801361c:	d00f      	beq.n	801363e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801361e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013620:	3310      	adds	r3, #16
 8013622:	4618      	mov	r0, r3
 8013624:	f001 f982 	bl	801492c <xTaskRemoveFromEventList>
 8013628:	4603      	mov	r3, r0
 801362a:	2b00      	cmp	r3, #0
 801362c:	d007      	beq.n	801363e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801362e:	4b3d      	ldr	r3, [pc, #244]	; (8013724 <xQueueReceive+0x1bc>)
 8013630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013634:	601a      	str	r2, [r3, #0]
 8013636:	f3bf 8f4f 	dsb	sy
 801363a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801363e:	f002 fbd1 	bl	8015de4 <vPortExitCritical>
				return pdPASS;
 8013642:	2301      	movs	r3, #1
 8013644:	e069      	b.n	801371a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d103      	bne.n	8013654 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801364c:	f002 fbca 	bl	8015de4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013650:	2300      	movs	r3, #0
 8013652:	e062      	b.n	801371a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013656:	2b00      	cmp	r3, #0
 8013658:	d106      	bne.n	8013668 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801365a:	f107 0310 	add.w	r3, r7, #16
 801365e:	4618      	mov	r0, r3
 8013660:	f001 f9c8 	bl	80149f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013664:	2301      	movs	r3, #1
 8013666:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013668:	f002 fbbc 	bl	8015de4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801366c:	f000 fe86 	bl	801437c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013670:	f002 fb88 	bl	8015d84 <vPortEnterCritical>
 8013674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013676:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801367a:	b25b      	sxtb	r3, r3
 801367c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013680:	d103      	bne.n	801368a <xQueueReceive+0x122>
 8013682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013684:	2200      	movs	r2, #0
 8013686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801368a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801368c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013690:	b25b      	sxtb	r3, r3
 8013692:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013696:	d103      	bne.n	80136a0 <xQueueReceive+0x138>
 8013698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801369a:	2200      	movs	r2, #0
 801369c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80136a0:	f002 fba0 	bl	8015de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80136a4:	1d3a      	adds	r2, r7, #4
 80136a6:	f107 0310 	add.w	r3, r7, #16
 80136aa:	4611      	mov	r1, r2
 80136ac:	4618      	mov	r0, r3
 80136ae:	f001 f9b7 	bl	8014a20 <xTaskCheckForTimeOut>
 80136b2:	4603      	mov	r3, r0
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d123      	bne.n	8013700 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80136b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80136ba:	f000 fade 	bl	8013c7a <prvIsQueueEmpty>
 80136be:	4603      	mov	r3, r0
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d017      	beq.n	80136f4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80136c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136c6:	3324      	adds	r3, #36	; 0x24
 80136c8:	687a      	ldr	r2, [r7, #4]
 80136ca:	4611      	mov	r1, r2
 80136cc:	4618      	mov	r0, r3
 80136ce:	f001 f8dd 	bl	801488c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80136d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80136d4:	f000 fa7f 	bl	8013bd6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80136d8:	f000 fe5e 	bl	8014398 <xTaskResumeAll>
 80136dc:	4603      	mov	r3, r0
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d189      	bne.n	80135f6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80136e2:	4b10      	ldr	r3, [pc, #64]	; (8013724 <xQueueReceive+0x1bc>)
 80136e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136e8:	601a      	str	r2, [r3, #0]
 80136ea:	f3bf 8f4f 	dsb	sy
 80136ee:	f3bf 8f6f 	isb	sy
 80136f2:	e780      	b.n	80135f6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80136f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80136f6:	f000 fa6e 	bl	8013bd6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80136fa:	f000 fe4d 	bl	8014398 <xTaskResumeAll>
 80136fe:	e77a      	b.n	80135f6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013700:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013702:	f000 fa68 	bl	8013bd6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013706:	f000 fe47 	bl	8014398 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801370a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801370c:	f000 fab5 	bl	8013c7a <prvIsQueueEmpty>
 8013710:	4603      	mov	r3, r0
 8013712:	2b00      	cmp	r3, #0
 8013714:	f43f af6f 	beq.w	80135f6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013718:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801371a:	4618      	mov	r0, r3
 801371c:	3730      	adds	r7, #48	; 0x30
 801371e:	46bd      	mov	sp, r7
 8013720:	bd80      	pop	{r7, pc}
 8013722:	bf00      	nop
 8013724:	e000ed04 	.word	0xe000ed04

08013728 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b08e      	sub	sp, #56	; 0x38
 801372c:	af00      	add	r7, sp, #0
 801372e:	6078      	str	r0, [r7, #4]
 8013730:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013732:	2300      	movs	r3, #0
 8013734:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 801373a:	2300      	movs	r3, #0
 801373c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801373e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013740:	2b00      	cmp	r3, #0
 8013742:	d10a      	bne.n	801375a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8013744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013748:	f383 8811 	msr	BASEPRI, r3
 801374c:	f3bf 8f6f 	isb	sy
 8013750:	f3bf 8f4f 	dsb	sy
 8013754:	623b      	str	r3, [r7, #32]
}
 8013756:	bf00      	nop
 8013758:	e7fe      	b.n	8013758 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801375a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801375e:	2b00      	cmp	r3, #0
 8013760:	d00a      	beq.n	8013778 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8013762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013766:	f383 8811 	msr	BASEPRI, r3
 801376a:	f3bf 8f6f 	isb	sy
 801376e:	f3bf 8f4f 	dsb	sy
 8013772:	61fb      	str	r3, [r7, #28]
}
 8013774:	bf00      	nop
 8013776:	e7fe      	b.n	8013776 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013778:	f001 fb6e 	bl	8014e58 <xTaskGetSchedulerState>
 801377c:	4603      	mov	r3, r0
 801377e:	2b00      	cmp	r3, #0
 8013780:	d102      	bne.n	8013788 <xQueueSemaphoreTake+0x60>
 8013782:	683b      	ldr	r3, [r7, #0]
 8013784:	2b00      	cmp	r3, #0
 8013786:	d101      	bne.n	801378c <xQueueSemaphoreTake+0x64>
 8013788:	2301      	movs	r3, #1
 801378a:	e000      	b.n	801378e <xQueueSemaphoreTake+0x66>
 801378c:	2300      	movs	r3, #0
 801378e:	2b00      	cmp	r3, #0
 8013790:	d10a      	bne.n	80137a8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8013792:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013796:	f383 8811 	msr	BASEPRI, r3
 801379a:	f3bf 8f6f 	isb	sy
 801379e:	f3bf 8f4f 	dsb	sy
 80137a2:	61bb      	str	r3, [r7, #24]
}
 80137a4:	bf00      	nop
 80137a6:	e7fe      	b.n	80137a6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80137a8:	f002 faec 	bl	8015d84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80137ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137b0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80137b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d024      	beq.n	8013802 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80137b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ba:	1e5a      	subs	r2, r3, #1
 80137bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137be:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80137c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137c2:	681b      	ldr	r3, [r3, #0]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d104      	bne.n	80137d2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80137c8:	f001 fdfc 	bl	80153c4 <pvTaskIncrementMutexHeldCount>
 80137cc:	4602      	mov	r2, r0
 80137ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137d0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80137d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137d4:	691b      	ldr	r3, [r3, #16]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d00f      	beq.n	80137fa <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80137da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137dc:	3310      	adds	r3, #16
 80137de:	4618      	mov	r0, r3
 80137e0:	f001 f8a4 	bl	801492c <xTaskRemoveFromEventList>
 80137e4:	4603      	mov	r3, r0
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d007      	beq.n	80137fa <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80137ea:	4b54      	ldr	r3, [pc, #336]	; (801393c <xQueueSemaphoreTake+0x214>)
 80137ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137f0:	601a      	str	r2, [r3, #0]
 80137f2:	f3bf 8f4f 	dsb	sy
 80137f6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80137fa:	f002 faf3 	bl	8015de4 <vPortExitCritical>
				return pdPASS;
 80137fe:	2301      	movs	r3, #1
 8013800:	e097      	b.n	8013932 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013802:	683b      	ldr	r3, [r7, #0]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d111      	bne.n	801382c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8013808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801380a:	2b00      	cmp	r3, #0
 801380c:	d00a      	beq.n	8013824 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 801380e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013812:	f383 8811 	msr	BASEPRI, r3
 8013816:	f3bf 8f6f 	isb	sy
 801381a:	f3bf 8f4f 	dsb	sy
 801381e:	617b      	str	r3, [r7, #20]
}
 8013820:	bf00      	nop
 8013822:	e7fe      	b.n	8013822 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8013824:	f002 fade 	bl	8015de4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013828:	2300      	movs	r3, #0
 801382a:	e082      	b.n	8013932 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 801382c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801382e:	2b00      	cmp	r3, #0
 8013830:	d106      	bne.n	8013840 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013832:	f107 030c 	add.w	r3, r7, #12
 8013836:	4618      	mov	r0, r3
 8013838:	f001 f8dc 	bl	80149f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801383c:	2301      	movs	r3, #1
 801383e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013840:	f002 fad0 	bl	8015de4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013844:	f000 fd9a 	bl	801437c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013848:	f002 fa9c 	bl	8015d84 <vPortEnterCritical>
 801384c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801384e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013852:	b25b      	sxtb	r3, r3
 8013854:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013858:	d103      	bne.n	8013862 <xQueueSemaphoreTake+0x13a>
 801385a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801385c:	2200      	movs	r2, #0
 801385e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013864:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013868:	b25b      	sxtb	r3, r3
 801386a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801386e:	d103      	bne.n	8013878 <xQueueSemaphoreTake+0x150>
 8013870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013872:	2200      	movs	r2, #0
 8013874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013878:	f002 fab4 	bl	8015de4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801387c:	463a      	mov	r2, r7
 801387e:	f107 030c 	add.w	r3, r7, #12
 8013882:	4611      	mov	r1, r2
 8013884:	4618      	mov	r0, r3
 8013886:	f001 f8cb 	bl	8014a20 <xTaskCheckForTimeOut>
 801388a:	4603      	mov	r3, r0
 801388c:	2b00      	cmp	r3, #0
 801388e:	d132      	bne.n	80138f6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013890:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013892:	f000 f9f2 	bl	8013c7a <prvIsQueueEmpty>
 8013896:	4603      	mov	r3, r0
 8013898:	2b00      	cmp	r3, #0
 801389a:	d026      	beq.n	80138ea <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801389c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801389e:	681b      	ldr	r3, [r3, #0]
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d109      	bne.n	80138b8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80138a4:	f002 fa6e 	bl	8015d84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80138a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138aa:	689b      	ldr	r3, [r3, #8]
 80138ac:	4618      	mov	r0, r3
 80138ae:	f001 faf1 	bl	8014e94 <xTaskPriorityInherit>
 80138b2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80138b4:	f002 fa96 	bl	8015de4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80138b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80138ba:	3324      	adds	r3, #36	; 0x24
 80138bc:	683a      	ldr	r2, [r7, #0]
 80138be:	4611      	mov	r1, r2
 80138c0:	4618      	mov	r0, r3
 80138c2:	f000 ffe3 	bl	801488c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80138c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80138c8:	f000 f985 	bl	8013bd6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80138cc:	f000 fd64 	bl	8014398 <xTaskResumeAll>
 80138d0:	4603      	mov	r3, r0
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	f47f af68 	bne.w	80137a8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80138d8:	4b18      	ldr	r3, [pc, #96]	; (801393c <xQueueSemaphoreTake+0x214>)
 80138da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138de:	601a      	str	r2, [r3, #0]
 80138e0:	f3bf 8f4f 	dsb	sy
 80138e4:	f3bf 8f6f 	isb	sy
 80138e8:	e75e      	b.n	80137a8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80138ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80138ec:	f000 f973 	bl	8013bd6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80138f0:	f000 fd52 	bl	8014398 <xTaskResumeAll>
 80138f4:	e758      	b.n	80137a8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80138f6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80138f8:	f000 f96d 	bl	8013bd6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80138fc:	f000 fd4c 	bl	8014398 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013900:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013902:	f000 f9ba 	bl	8013c7a <prvIsQueueEmpty>
 8013906:	4603      	mov	r3, r0
 8013908:	2b00      	cmp	r3, #0
 801390a:	f43f af4d 	beq.w	80137a8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801390e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013910:	2b00      	cmp	r3, #0
 8013912:	d00d      	beq.n	8013930 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8013914:	f002 fa36 	bl	8015d84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8013918:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801391a:	f000 f8b4 	bl	8013a86 <prvGetDisinheritPriorityAfterTimeout>
 801391e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8013920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013922:	689b      	ldr	r3, [r3, #8]
 8013924:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013926:	4618      	mov	r0, r3
 8013928:	f001 fb8a 	bl	8015040 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 801392c:	f002 fa5a 	bl	8015de4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013930:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013932:	4618      	mov	r0, r3
 8013934:	3738      	adds	r7, #56	; 0x38
 8013936:	46bd      	mov	sp, r7
 8013938:	bd80      	pop	{r7, pc}
 801393a:	bf00      	nop
 801393c:	e000ed04 	.word	0xe000ed04

08013940 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013940:	b580      	push	{r7, lr}
 8013942:	b08e      	sub	sp, #56	; 0x38
 8013944:	af00      	add	r7, sp, #0
 8013946:	60f8      	str	r0, [r7, #12]
 8013948:	60b9      	str	r1, [r7, #8]
 801394a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801394c:	68fb      	ldr	r3, [r7, #12]
 801394e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013952:	2b00      	cmp	r3, #0
 8013954:	d10a      	bne.n	801396c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8013956:	f04f 0350 	mov.w	r3, #80	; 0x50
 801395a:	f383 8811 	msr	BASEPRI, r3
 801395e:	f3bf 8f6f 	isb	sy
 8013962:	f3bf 8f4f 	dsb	sy
 8013966:	623b      	str	r3, [r7, #32]
}
 8013968:	bf00      	nop
 801396a:	e7fe      	b.n	801396a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801396c:	68bb      	ldr	r3, [r7, #8]
 801396e:	2b00      	cmp	r3, #0
 8013970:	d103      	bne.n	801397a <xQueueReceiveFromISR+0x3a>
 8013972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013976:	2b00      	cmp	r3, #0
 8013978:	d101      	bne.n	801397e <xQueueReceiveFromISR+0x3e>
 801397a:	2301      	movs	r3, #1
 801397c:	e000      	b.n	8013980 <xQueueReceiveFromISR+0x40>
 801397e:	2300      	movs	r3, #0
 8013980:	2b00      	cmp	r3, #0
 8013982:	d10a      	bne.n	801399a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013988:	f383 8811 	msr	BASEPRI, r3
 801398c:	f3bf 8f6f 	isb	sy
 8013990:	f3bf 8f4f 	dsb	sy
 8013994:	61fb      	str	r3, [r7, #28]
}
 8013996:	bf00      	nop
 8013998:	e7fe      	b.n	8013998 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801399a:	f002 fad5 	bl	8015f48 <vPortValidateInterruptPriority>
	__asm volatile
 801399e:	f3ef 8211 	mrs	r2, BASEPRI
 80139a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139a6:	f383 8811 	msr	BASEPRI, r3
 80139aa:	f3bf 8f6f 	isb	sy
 80139ae:	f3bf 8f4f 	dsb	sy
 80139b2:	61ba      	str	r2, [r7, #24]
 80139b4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80139b6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80139b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80139ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80139be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80139c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d02f      	beq.n	8013a26 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80139c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80139cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80139d0:	68b9      	ldr	r1, [r7, #8]
 80139d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80139d4:	f000 f8d9 	bl	8013b8a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80139d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139da:	1e5a      	subs	r2, r3, #1
 80139dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139de:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80139e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80139e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80139e8:	d112      	bne.n	8013a10 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80139ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139ec:	691b      	ldr	r3, [r3, #16]
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d016      	beq.n	8013a20 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80139f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139f4:	3310      	adds	r3, #16
 80139f6:	4618      	mov	r0, r3
 80139f8:	f000 ff98 	bl	801492c <xTaskRemoveFromEventList>
 80139fc:	4603      	mov	r3, r0
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d00e      	beq.n	8013a20 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d00b      	beq.n	8013a20 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	2201      	movs	r2, #1
 8013a0c:	601a      	str	r2, [r3, #0]
 8013a0e:	e007      	b.n	8013a20 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013a10:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a14:	3301      	adds	r3, #1
 8013a16:	b2db      	uxtb	r3, r3
 8013a18:	b25a      	sxtb	r2, r3
 8013a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013a20:	2301      	movs	r3, #1
 8013a22:	637b      	str	r3, [r7, #52]	; 0x34
 8013a24:	e001      	b.n	8013a2a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8013a26:	2300      	movs	r3, #0
 8013a28:	637b      	str	r3, [r7, #52]	; 0x34
 8013a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a2c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013a2e:	693b      	ldr	r3, [r7, #16]
 8013a30:	f383 8811 	msr	BASEPRI, r3
}
 8013a34:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013a38:	4618      	mov	r0, r3
 8013a3a:	3738      	adds	r7, #56	; 0x38
 8013a3c:	46bd      	mov	sp, r7
 8013a3e:	bd80      	pop	{r7, pc}

08013a40 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b084      	sub	sp, #16
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013a4c:	68fb      	ldr	r3, [r7, #12]
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d10a      	bne.n	8013a68 <vQueueDelete+0x28>
	__asm volatile
 8013a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a56:	f383 8811 	msr	BASEPRI, r3
 8013a5a:	f3bf 8f6f 	isb	sy
 8013a5e:	f3bf 8f4f 	dsb	sy
 8013a62:	60bb      	str	r3, [r7, #8]
}
 8013a64:	bf00      	nop
 8013a66:	e7fe      	b.n	8013a66 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8013a68:	68f8      	ldr	r0, [r7, #12]
 8013a6a:	f000 f95f 	bl	8013d2c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d102      	bne.n	8013a7e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8013a78:	68f8      	ldr	r0, [r7, #12]
 8013a7a:	f002 fb71 	bl	8016160 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8013a7e:	bf00      	nop
 8013a80:	3710      	adds	r7, #16
 8013a82:	46bd      	mov	sp, r7
 8013a84:	bd80      	pop	{r7, pc}

08013a86 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8013a86:	b480      	push	{r7}
 8013a88:	b085      	sub	sp, #20
 8013a8a:	af00      	add	r7, sp, #0
 8013a8c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d006      	beq.n	8013aa4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013a9a:	681b      	ldr	r3, [r3, #0]
 8013a9c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8013aa0:	60fb      	str	r3, [r7, #12]
 8013aa2:	e001      	b.n	8013aa8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8013aa8:	68fb      	ldr	r3, [r7, #12]
	}
 8013aaa:	4618      	mov	r0, r3
 8013aac:	3714      	adds	r7, #20
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ab4:	4770      	bx	lr

08013ab6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013ab6:	b580      	push	{r7, lr}
 8013ab8:	b086      	sub	sp, #24
 8013aba:	af00      	add	r7, sp, #0
 8013abc:	60f8      	str	r0, [r7, #12]
 8013abe:	60b9      	str	r1, [r7, #8]
 8013ac0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013aca:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013acc:	68fb      	ldr	r3, [r7, #12]
 8013ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d10d      	bne.n	8013af0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013ad4:	68fb      	ldr	r3, [r7, #12]
 8013ad6:	681b      	ldr	r3, [r3, #0]
 8013ad8:	2b00      	cmp	r3, #0
 8013ada:	d14d      	bne.n	8013b78 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	689b      	ldr	r3, [r3, #8]
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	f001 fa3f 	bl	8014f64 <xTaskPriorityDisinherit>
 8013ae6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	2200      	movs	r2, #0
 8013aec:	609a      	str	r2, [r3, #8]
 8013aee:	e043      	b.n	8013b78 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d119      	bne.n	8013b2a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013af6:	68fb      	ldr	r3, [r7, #12]
 8013af8:	6858      	ldr	r0, [r3, #4]
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013afe:	461a      	mov	r2, r3
 8013b00:	68b9      	ldr	r1, [r7, #8]
 8013b02:	f003 facd 	bl	80170a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	685a      	ldr	r2, [r3, #4]
 8013b0a:	68fb      	ldr	r3, [r7, #12]
 8013b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b0e:	441a      	add	r2, r3
 8013b10:	68fb      	ldr	r3, [r7, #12]
 8013b12:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	685a      	ldr	r2, [r3, #4]
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	689b      	ldr	r3, [r3, #8]
 8013b1c:	429a      	cmp	r2, r3
 8013b1e:	d32b      	bcc.n	8013b78 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	681a      	ldr	r2, [r3, #0]
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	605a      	str	r2, [r3, #4]
 8013b28:	e026      	b.n	8013b78 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013b2a:	68fb      	ldr	r3, [r7, #12]
 8013b2c:	68d8      	ldr	r0, [r3, #12]
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b32:	461a      	mov	r2, r3
 8013b34:	68b9      	ldr	r1, [r7, #8]
 8013b36:	f003 fab3 	bl	80170a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013b3a:	68fb      	ldr	r3, [r7, #12]
 8013b3c:	68da      	ldr	r2, [r3, #12]
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b42:	425b      	negs	r3, r3
 8013b44:	441a      	add	r2, r3
 8013b46:	68fb      	ldr	r3, [r7, #12]
 8013b48:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	68da      	ldr	r2, [r3, #12]
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	429a      	cmp	r2, r3
 8013b54:	d207      	bcs.n	8013b66 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013b56:	68fb      	ldr	r3, [r7, #12]
 8013b58:	689a      	ldr	r2, [r3, #8]
 8013b5a:	68fb      	ldr	r3, [r7, #12]
 8013b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b5e:	425b      	negs	r3, r3
 8013b60:	441a      	add	r2, r3
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013b66:	687b      	ldr	r3, [r7, #4]
 8013b68:	2b02      	cmp	r3, #2
 8013b6a:	d105      	bne.n	8013b78 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013b6c:	693b      	ldr	r3, [r7, #16]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d002      	beq.n	8013b78 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013b72:	693b      	ldr	r3, [r7, #16]
 8013b74:	3b01      	subs	r3, #1
 8013b76:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013b78:	693b      	ldr	r3, [r7, #16]
 8013b7a:	1c5a      	adds	r2, r3, #1
 8013b7c:	68fb      	ldr	r3, [r7, #12]
 8013b7e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013b80:	697b      	ldr	r3, [r7, #20]
}
 8013b82:	4618      	mov	r0, r3
 8013b84:	3718      	adds	r7, #24
 8013b86:	46bd      	mov	sp, r7
 8013b88:	bd80      	pop	{r7, pc}

08013b8a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013b8a:	b580      	push	{r7, lr}
 8013b8c:	b082      	sub	sp, #8
 8013b8e:	af00      	add	r7, sp, #0
 8013b90:	6078      	str	r0, [r7, #4]
 8013b92:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	d018      	beq.n	8013bce <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	68da      	ldr	r2, [r3, #12]
 8013ba0:	687b      	ldr	r3, [r7, #4]
 8013ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ba4:	441a      	add	r2, r3
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	68da      	ldr	r2, [r3, #12]
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	689b      	ldr	r3, [r3, #8]
 8013bb2:	429a      	cmp	r2, r3
 8013bb4:	d303      	bcc.n	8013bbe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	681a      	ldr	r2, [r3, #0]
 8013bba:	687b      	ldr	r3, [r7, #4]
 8013bbc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013bbe:	687b      	ldr	r3, [r7, #4]
 8013bc0:	68d9      	ldr	r1, [r3, #12]
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bc6:	461a      	mov	r2, r3
 8013bc8:	6838      	ldr	r0, [r7, #0]
 8013bca:	f003 fa69 	bl	80170a0 <memcpy>
	}
}
 8013bce:	bf00      	nop
 8013bd0:	3708      	adds	r7, #8
 8013bd2:	46bd      	mov	sp, r7
 8013bd4:	bd80      	pop	{r7, pc}

08013bd6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013bd6:	b580      	push	{r7, lr}
 8013bd8:	b084      	sub	sp, #16
 8013bda:	af00      	add	r7, sp, #0
 8013bdc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013bde:	f002 f8d1 	bl	8015d84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013be8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013bea:	e011      	b.n	8013c10 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d012      	beq.n	8013c1a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	3324      	adds	r3, #36	; 0x24
 8013bf8:	4618      	mov	r0, r3
 8013bfa:	f000 fe97 	bl	801492c <xTaskRemoveFromEventList>
 8013bfe:	4603      	mov	r3, r0
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d001      	beq.n	8013c08 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013c04:	f000 ff6e 	bl	8014ae4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013c08:	7bfb      	ldrb	r3, [r7, #15]
 8013c0a:	3b01      	subs	r3, #1
 8013c0c:	b2db      	uxtb	r3, r3
 8013c0e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013c10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	dce9      	bgt.n	8013bec <prvUnlockQueue+0x16>
 8013c18:	e000      	b.n	8013c1c <prvUnlockQueue+0x46>
					break;
 8013c1a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	22ff      	movs	r2, #255	; 0xff
 8013c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013c24:	f002 f8de 	bl	8015de4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013c28:	f002 f8ac 	bl	8015d84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013c32:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013c34:	e011      	b.n	8013c5a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	691b      	ldr	r3, [r3, #16]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d012      	beq.n	8013c64 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	3310      	adds	r3, #16
 8013c42:	4618      	mov	r0, r3
 8013c44:	f000 fe72 	bl	801492c <xTaskRemoveFromEventList>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	d001      	beq.n	8013c52 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013c4e:	f000 ff49 	bl	8014ae4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013c52:	7bbb      	ldrb	r3, [r7, #14]
 8013c54:	3b01      	subs	r3, #1
 8013c56:	b2db      	uxtb	r3, r3
 8013c58:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013c5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	dce9      	bgt.n	8013c36 <prvUnlockQueue+0x60>
 8013c62:	e000      	b.n	8013c66 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013c64:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	22ff      	movs	r2, #255	; 0xff
 8013c6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013c6e:	f002 f8b9 	bl	8015de4 <vPortExitCritical>
}
 8013c72:	bf00      	nop
 8013c74:	3710      	adds	r7, #16
 8013c76:	46bd      	mov	sp, r7
 8013c78:	bd80      	pop	{r7, pc}

08013c7a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013c7a:	b580      	push	{r7, lr}
 8013c7c:	b084      	sub	sp, #16
 8013c7e:	af00      	add	r7, sp, #0
 8013c80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013c82:	f002 f87f 	bl	8015d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d102      	bne.n	8013c94 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013c8e:	2301      	movs	r3, #1
 8013c90:	60fb      	str	r3, [r7, #12]
 8013c92:	e001      	b.n	8013c98 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013c94:	2300      	movs	r3, #0
 8013c96:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013c98:	f002 f8a4 	bl	8015de4 <vPortExitCritical>

	return xReturn;
 8013c9c:	68fb      	ldr	r3, [r7, #12]
}
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	3710      	adds	r7, #16
 8013ca2:	46bd      	mov	sp, r7
 8013ca4:	bd80      	pop	{r7, pc}

08013ca6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013ca6:	b580      	push	{r7, lr}
 8013ca8:	b084      	sub	sp, #16
 8013caa:	af00      	add	r7, sp, #0
 8013cac:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013cae:	f002 f869 	bl	8015d84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013cba:	429a      	cmp	r2, r3
 8013cbc:	d102      	bne.n	8013cc4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013cbe:	2301      	movs	r3, #1
 8013cc0:	60fb      	str	r3, [r7, #12]
 8013cc2:	e001      	b.n	8013cc8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013cc4:	2300      	movs	r3, #0
 8013cc6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013cc8:	f002 f88c 	bl	8015de4 <vPortExitCritical>

	return xReturn;
 8013ccc:	68fb      	ldr	r3, [r7, #12]
}
 8013cce:	4618      	mov	r0, r3
 8013cd0:	3710      	adds	r7, #16
 8013cd2:	46bd      	mov	sp, r7
 8013cd4:	bd80      	pop	{r7, pc}
	...

08013cd8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013cd8:	b480      	push	{r7}
 8013cda:	b085      	sub	sp, #20
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
 8013ce0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	60fb      	str	r3, [r7, #12]
 8013ce6:	e014      	b.n	8013d12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013ce8:	4a0f      	ldr	r2, [pc, #60]	; (8013d28 <vQueueAddToRegistry+0x50>)
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d10b      	bne.n	8013d0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013cf4:	490c      	ldr	r1, [pc, #48]	; (8013d28 <vQueueAddToRegistry+0x50>)
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	683a      	ldr	r2, [r7, #0]
 8013cfa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013cfe:	4a0a      	ldr	r2, [pc, #40]	; (8013d28 <vQueueAddToRegistry+0x50>)
 8013d00:	68fb      	ldr	r3, [r7, #12]
 8013d02:	00db      	lsls	r3, r3, #3
 8013d04:	4413      	add	r3, r2
 8013d06:	687a      	ldr	r2, [r7, #4]
 8013d08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013d0a:	e006      	b.n	8013d1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	3301      	adds	r3, #1
 8013d10:	60fb      	str	r3, [r7, #12]
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	2b07      	cmp	r3, #7
 8013d16:	d9e7      	bls.n	8013ce8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013d18:	bf00      	nop
 8013d1a:	bf00      	nop
 8013d1c:	3714      	adds	r7, #20
 8013d1e:	46bd      	mov	sp, r7
 8013d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d24:	4770      	bx	lr
 8013d26:	bf00      	nop
 8013d28:	2001d738 	.word	0x2001d738

08013d2c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013d2c:	b480      	push	{r7}
 8013d2e:	b085      	sub	sp, #20
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013d34:	2300      	movs	r3, #0
 8013d36:	60fb      	str	r3, [r7, #12]
 8013d38:	e016      	b.n	8013d68 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8013d3a:	4a10      	ldr	r2, [pc, #64]	; (8013d7c <vQueueUnregisterQueue+0x50>)
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	00db      	lsls	r3, r3, #3
 8013d40:	4413      	add	r3, r2
 8013d42:	685b      	ldr	r3, [r3, #4]
 8013d44:	687a      	ldr	r2, [r7, #4]
 8013d46:	429a      	cmp	r2, r3
 8013d48:	d10b      	bne.n	8013d62 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8013d4a:	4a0c      	ldr	r2, [pc, #48]	; (8013d7c <vQueueUnregisterQueue+0x50>)
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	2100      	movs	r1, #0
 8013d50:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013d54:	4a09      	ldr	r2, [pc, #36]	; (8013d7c <vQueueUnregisterQueue+0x50>)
 8013d56:	68fb      	ldr	r3, [r7, #12]
 8013d58:	00db      	lsls	r3, r3, #3
 8013d5a:	4413      	add	r3, r2
 8013d5c:	2200      	movs	r2, #0
 8013d5e:	605a      	str	r2, [r3, #4]
				break;
 8013d60:	e006      	b.n	8013d70 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	3301      	adds	r3, #1
 8013d66:	60fb      	str	r3, [r7, #12]
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	2b07      	cmp	r3, #7
 8013d6c:	d9e5      	bls.n	8013d3a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8013d6e:	bf00      	nop
 8013d70:	bf00      	nop
 8013d72:	3714      	adds	r7, #20
 8013d74:	46bd      	mov	sp, r7
 8013d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d7a:	4770      	bx	lr
 8013d7c:	2001d738 	.word	0x2001d738

08013d80 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013d80:	b580      	push	{r7, lr}
 8013d82:	b086      	sub	sp, #24
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	60f8      	str	r0, [r7, #12]
 8013d88:	60b9      	str	r1, [r7, #8]
 8013d8a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013d8c:	68fb      	ldr	r3, [r7, #12]
 8013d8e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013d90:	f001 fff8 	bl	8015d84 <vPortEnterCritical>
 8013d94:	697b      	ldr	r3, [r7, #20]
 8013d96:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013d9a:	b25b      	sxtb	r3, r3
 8013d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013da0:	d103      	bne.n	8013daa <vQueueWaitForMessageRestricted+0x2a>
 8013da2:	697b      	ldr	r3, [r7, #20]
 8013da4:	2200      	movs	r2, #0
 8013da6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013daa:	697b      	ldr	r3, [r7, #20]
 8013dac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013db0:	b25b      	sxtb	r3, r3
 8013db2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013db6:	d103      	bne.n	8013dc0 <vQueueWaitForMessageRestricted+0x40>
 8013db8:	697b      	ldr	r3, [r7, #20]
 8013dba:	2200      	movs	r2, #0
 8013dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013dc0:	f002 f810 	bl	8015de4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013dc4:	697b      	ldr	r3, [r7, #20]
 8013dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013dc8:	2b00      	cmp	r3, #0
 8013dca:	d106      	bne.n	8013dda <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013dcc:	697b      	ldr	r3, [r7, #20]
 8013dce:	3324      	adds	r3, #36	; 0x24
 8013dd0:	687a      	ldr	r2, [r7, #4]
 8013dd2:	68b9      	ldr	r1, [r7, #8]
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	f000 fd7d 	bl	80148d4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013dda:	6978      	ldr	r0, [r7, #20]
 8013ddc:	f7ff fefb 	bl	8013bd6 <prvUnlockQueue>
	}
 8013de0:	bf00      	nop
 8013de2:	3718      	adds	r7, #24
 8013de4:	46bd      	mov	sp, r7
 8013de6:	bd80      	pop	{r7, pc}

08013de8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013de8:	b580      	push	{r7, lr}
 8013dea:	b08e      	sub	sp, #56	; 0x38
 8013dec:	af04      	add	r7, sp, #16
 8013dee:	60f8      	str	r0, [r7, #12]
 8013df0:	60b9      	str	r1, [r7, #8]
 8013df2:	607a      	str	r2, [r7, #4]
 8013df4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d10a      	bne.n	8013e12 <xTaskCreateStatic+0x2a>
	__asm volatile
 8013dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e00:	f383 8811 	msr	BASEPRI, r3
 8013e04:	f3bf 8f6f 	isb	sy
 8013e08:	f3bf 8f4f 	dsb	sy
 8013e0c:	623b      	str	r3, [r7, #32]
}
 8013e0e:	bf00      	nop
 8013e10:	e7fe      	b.n	8013e10 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013e12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e14:	2b00      	cmp	r3, #0
 8013e16:	d10a      	bne.n	8013e2e <xTaskCreateStatic+0x46>
	__asm volatile
 8013e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e1c:	f383 8811 	msr	BASEPRI, r3
 8013e20:	f3bf 8f6f 	isb	sy
 8013e24:	f3bf 8f4f 	dsb	sy
 8013e28:	61fb      	str	r3, [r7, #28]
}
 8013e2a:	bf00      	nop
 8013e2c:	e7fe      	b.n	8013e2c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013e2e:	23c0      	movs	r3, #192	; 0xc0
 8013e30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013e32:	693b      	ldr	r3, [r7, #16]
 8013e34:	2bc0      	cmp	r3, #192	; 0xc0
 8013e36:	d00a      	beq.n	8013e4e <xTaskCreateStatic+0x66>
	__asm volatile
 8013e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e3c:	f383 8811 	msr	BASEPRI, r3
 8013e40:	f3bf 8f6f 	isb	sy
 8013e44:	f3bf 8f4f 	dsb	sy
 8013e48:	61bb      	str	r3, [r7, #24]
}
 8013e4a:	bf00      	nop
 8013e4c:	e7fe      	b.n	8013e4c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013e4e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d01e      	beq.n	8013e94 <xTaskCreateStatic+0xac>
 8013e56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d01b      	beq.n	8013e94 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e5e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e62:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013e64:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e68:	2202      	movs	r2, #2
 8013e6a:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013e6e:	2300      	movs	r3, #0
 8013e70:	9303      	str	r3, [sp, #12]
 8013e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e74:	9302      	str	r3, [sp, #8]
 8013e76:	f107 0314 	add.w	r3, r7, #20
 8013e7a:	9301      	str	r3, [sp, #4]
 8013e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e7e:	9300      	str	r3, [sp, #0]
 8013e80:	683b      	ldr	r3, [r7, #0]
 8013e82:	687a      	ldr	r2, [r7, #4]
 8013e84:	68b9      	ldr	r1, [r7, #8]
 8013e86:	68f8      	ldr	r0, [r7, #12]
 8013e88:	f000 f850 	bl	8013f2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013e8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e8e:	f000 f8f7 	bl	8014080 <prvAddNewTaskToReadyList>
 8013e92:	e001      	b.n	8013e98 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8013e94:	2300      	movs	r3, #0
 8013e96:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013e98:	697b      	ldr	r3, [r7, #20]
	}
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	3728      	adds	r7, #40	; 0x28
 8013e9e:	46bd      	mov	sp, r7
 8013ea0:	bd80      	pop	{r7, pc}

08013ea2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8013ea2:	b580      	push	{r7, lr}
 8013ea4:	b08c      	sub	sp, #48	; 0x30
 8013ea6:	af04      	add	r7, sp, #16
 8013ea8:	60f8      	str	r0, [r7, #12]
 8013eaa:	60b9      	str	r1, [r7, #8]
 8013eac:	603b      	str	r3, [r7, #0]
 8013eae:	4613      	mov	r3, r2
 8013eb0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8013eb2:	88fb      	ldrh	r3, [r7, #6]
 8013eb4:	009b      	lsls	r3, r3, #2
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	f002 f886 	bl	8015fc8 <pvPortMalloc>
 8013ebc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013ebe:	697b      	ldr	r3, [r7, #20]
 8013ec0:	2b00      	cmp	r3, #0
 8013ec2:	d00e      	beq.n	8013ee2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8013ec4:	20c0      	movs	r0, #192	; 0xc0
 8013ec6:	f002 f87f 	bl	8015fc8 <pvPortMalloc>
 8013eca:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013ecc:	69fb      	ldr	r3, [r7, #28]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d003      	beq.n	8013eda <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8013ed2:	69fb      	ldr	r3, [r7, #28]
 8013ed4:	697a      	ldr	r2, [r7, #20]
 8013ed6:	631a      	str	r2, [r3, #48]	; 0x30
 8013ed8:	e005      	b.n	8013ee6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013eda:	6978      	ldr	r0, [r7, #20]
 8013edc:	f002 f940 	bl	8016160 <vPortFree>
 8013ee0:	e001      	b.n	8013ee6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8013ee6:	69fb      	ldr	r3, [r7, #28]
 8013ee8:	2b00      	cmp	r3, #0
 8013eea:	d017      	beq.n	8013f1c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013eec:	69fb      	ldr	r3, [r7, #28]
 8013eee:	2200      	movs	r2, #0
 8013ef0:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8013ef4:	88fa      	ldrh	r2, [r7, #6]
 8013ef6:	2300      	movs	r3, #0
 8013ef8:	9303      	str	r3, [sp, #12]
 8013efa:	69fb      	ldr	r3, [r7, #28]
 8013efc:	9302      	str	r3, [sp, #8]
 8013efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f00:	9301      	str	r3, [sp, #4]
 8013f02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f04:	9300      	str	r3, [sp, #0]
 8013f06:	683b      	ldr	r3, [r7, #0]
 8013f08:	68b9      	ldr	r1, [r7, #8]
 8013f0a:	68f8      	ldr	r0, [r7, #12]
 8013f0c:	f000 f80e 	bl	8013f2c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013f10:	69f8      	ldr	r0, [r7, #28]
 8013f12:	f000 f8b5 	bl	8014080 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8013f16:	2301      	movs	r3, #1
 8013f18:	61bb      	str	r3, [r7, #24]
 8013f1a:	e002      	b.n	8013f22 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8013f1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013f20:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8013f22:	69bb      	ldr	r3, [r7, #24]
	}
 8013f24:	4618      	mov	r0, r3
 8013f26:	3720      	adds	r7, #32
 8013f28:	46bd      	mov	sp, r7
 8013f2a:	bd80      	pop	{r7, pc}

08013f2c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8013f2c:	b580      	push	{r7, lr}
 8013f2e:	b088      	sub	sp, #32
 8013f30:	af00      	add	r7, sp, #0
 8013f32:	60f8      	str	r0, [r7, #12]
 8013f34:	60b9      	str	r1, [r7, #8]
 8013f36:	607a      	str	r2, [r7, #4]
 8013f38:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8013f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f3c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	009b      	lsls	r3, r3, #2
 8013f42:	461a      	mov	r2, r3
 8013f44:	21a5      	movs	r1, #165	; 0xa5
 8013f46:	f003 f8b9 	bl	80170bc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8013f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013f4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8013f54:	3b01      	subs	r3, #1
 8013f56:	009b      	lsls	r3, r3, #2
 8013f58:	4413      	add	r3, r2
 8013f5a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8013f5c:	69bb      	ldr	r3, [r7, #24]
 8013f5e:	f023 0307 	bic.w	r3, r3, #7
 8013f62:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8013f64:	69bb      	ldr	r3, [r7, #24]
 8013f66:	f003 0307 	and.w	r3, r3, #7
 8013f6a:	2b00      	cmp	r3, #0
 8013f6c:	d00a      	beq.n	8013f84 <prvInitialiseNewTask+0x58>
	__asm volatile
 8013f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f72:	f383 8811 	msr	BASEPRI, r3
 8013f76:	f3bf 8f6f 	isb	sy
 8013f7a:	f3bf 8f4f 	dsb	sy
 8013f7e:	617b      	str	r3, [r7, #20]
}
 8013f80:	bf00      	nop
 8013f82:	e7fe      	b.n	8013f82 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013f84:	68bb      	ldr	r3, [r7, #8]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d01f      	beq.n	8013fca <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013f8a:	2300      	movs	r3, #0
 8013f8c:	61fb      	str	r3, [r7, #28]
 8013f8e:	e012      	b.n	8013fb6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8013f90:	68ba      	ldr	r2, [r7, #8]
 8013f92:	69fb      	ldr	r3, [r7, #28]
 8013f94:	4413      	add	r3, r2
 8013f96:	7819      	ldrb	r1, [r3, #0]
 8013f98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013f9a:	69fb      	ldr	r3, [r7, #28]
 8013f9c:	4413      	add	r3, r2
 8013f9e:	3334      	adds	r3, #52	; 0x34
 8013fa0:	460a      	mov	r2, r1
 8013fa2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013fa4:	68ba      	ldr	r2, [r7, #8]
 8013fa6:	69fb      	ldr	r3, [r7, #28]
 8013fa8:	4413      	add	r3, r2
 8013faa:	781b      	ldrb	r3, [r3, #0]
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d006      	beq.n	8013fbe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013fb0:	69fb      	ldr	r3, [r7, #28]
 8013fb2:	3301      	adds	r3, #1
 8013fb4:	61fb      	str	r3, [r7, #28]
 8013fb6:	69fb      	ldr	r3, [r7, #28]
 8013fb8:	2b0f      	cmp	r3, #15
 8013fba:	d9e9      	bls.n	8013f90 <prvInitialiseNewTask+0x64>
 8013fbc:	e000      	b.n	8013fc0 <prvInitialiseNewTask+0x94>
			{
				break;
 8013fbe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8013fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fc2:	2200      	movs	r2, #0
 8013fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013fc8:	e003      	b.n	8013fd2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fcc:	2200      	movs	r2, #0
 8013fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8013fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fd4:	2b37      	cmp	r3, #55	; 0x37
 8013fd6:	d901      	bls.n	8013fdc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013fd8:	2337      	movs	r3, #55	; 0x37
 8013fda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013fe0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8013fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fe4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013fe6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8013fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fea:	2200      	movs	r2, #0
 8013fec:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8013fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ff0:	3304      	adds	r3, #4
 8013ff2:	4618      	mov	r0, r3
 8013ff4:	f7fe fe56 	bl	8012ca4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ffa:	3318      	adds	r3, #24
 8013ffc:	4618      	mov	r0, r3
 8013ffe:	f7fe fe51 	bl	8012ca4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8014002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014006:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801400a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801400e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014010:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8014012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014016:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8014018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801401a:	2200      	movs	r2, #0
 801401c:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801401e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014020:	2200      	movs	r2, #0
 8014022:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014028:	2200      	movs	r2, #0
 801402a:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 801402e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014030:	3358      	adds	r3, #88	; 0x58
 8014032:	2260      	movs	r2, #96	; 0x60
 8014034:	2100      	movs	r1, #0
 8014036:	4618      	mov	r0, r3
 8014038:	f003 f840 	bl	80170bc <memset>
 801403c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801403e:	4a0d      	ldr	r2, [pc, #52]	; (8014074 <prvInitialiseNewTask+0x148>)
 8014040:	65da      	str	r2, [r3, #92]	; 0x5c
 8014042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014044:	4a0c      	ldr	r2, [pc, #48]	; (8014078 <prvInitialiseNewTask+0x14c>)
 8014046:	661a      	str	r2, [r3, #96]	; 0x60
 8014048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801404a:	4a0c      	ldr	r2, [pc, #48]	; (801407c <prvInitialiseNewTask+0x150>)
 801404c:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801404e:	683a      	ldr	r2, [r7, #0]
 8014050:	68f9      	ldr	r1, [r7, #12]
 8014052:	69b8      	ldr	r0, [r7, #24]
 8014054:	f001 fd6c 	bl	8015b30 <pxPortInitialiseStack>
 8014058:	4602      	mov	r2, r0
 801405a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801405c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801405e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014060:	2b00      	cmp	r3, #0
 8014062:	d002      	beq.n	801406a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014066:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014068:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801406a:	bf00      	nop
 801406c:	3720      	adds	r7, #32
 801406e:	46bd      	mov	sp, r7
 8014070:	bd80      	pop	{r7, pc}
 8014072:	bf00      	nop
 8014074:	0801e728 	.word	0x0801e728
 8014078:	0801e748 	.word	0x0801e748
 801407c:	0801e708 	.word	0x0801e708

08014080 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014080:	b580      	push	{r7, lr}
 8014082:	b082      	sub	sp, #8
 8014084:	af00      	add	r7, sp, #0
 8014086:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014088:	f001 fe7c 	bl	8015d84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801408c:	4b2d      	ldr	r3, [pc, #180]	; (8014144 <prvAddNewTaskToReadyList+0xc4>)
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	3301      	adds	r3, #1
 8014092:	4a2c      	ldr	r2, [pc, #176]	; (8014144 <prvAddNewTaskToReadyList+0xc4>)
 8014094:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014096:	4b2c      	ldr	r3, [pc, #176]	; (8014148 <prvAddNewTaskToReadyList+0xc8>)
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	2b00      	cmp	r3, #0
 801409c:	d109      	bne.n	80140b2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801409e:	4a2a      	ldr	r2, [pc, #168]	; (8014148 <prvAddNewTaskToReadyList+0xc8>)
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80140a4:	4b27      	ldr	r3, [pc, #156]	; (8014144 <prvAddNewTaskToReadyList+0xc4>)
 80140a6:	681b      	ldr	r3, [r3, #0]
 80140a8:	2b01      	cmp	r3, #1
 80140aa:	d110      	bne.n	80140ce <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80140ac:	f000 fd3e 	bl	8014b2c <prvInitialiseTaskLists>
 80140b0:	e00d      	b.n	80140ce <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80140b2:	4b26      	ldr	r3, [pc, #152]	; (801414c <prvAddNewTaskToReadyList+0xcc>)
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	d109      	bne.n	80140ce <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80140ba:	4b23      	ldr	r3, [pc, #140]	; (8014148 <prvAddNewTaskToReadyList+0xc8>)
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140c4:	429a      	cmp	r2, r3
 80140c6:	d802      	bhi.n	80140ce <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80140c8:	4a1f      	ldr	r2, [pc, #124]	; (8014148 <prvAddNewTaskToReadyList+0xc8>)
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80140ce:	4b20      	ldr	r3, [pc, #128]	; (8014150 <prvAddNewTaskToReadyList+0xd0>)
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	3301      	adds	r3, #1
 80140d4:	4a1e      	ldr	r2, [pc, #120]	; (8014150 <prvAddNewTaskToReadyList+0xd0>)
 80140d6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80140d8:	4b1d      	ldr	r3, [pc, #116]	; (8014150 <prvAddNewTaskToReadyList+0xd0>)
 80140da:	681a      	ldr	r2, [r3, #0]
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80140e0:	687b      	ldr	r3, [r7, #4]
 80140e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140e4:	4b1b      	ldr	r3, [pc, #108]	; (8014154 <prvAddNewTaskToReadyList+0xd4>)
 80140e6:	681b      	ldr	r3, [r3, #0]
 80140e8:	429a      	cmp	r2, r3
 80140ea:	d903      	bls.n	80140f4 <prvAddNewTaskToReadyList+0x74>
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80140f0:	4a18      	ldr	r2, [pc, #96]	; (8014154 <prvAddNewTaskToReadyList+0xd4>)
 80140f2:	6013      	str	r3, [r2, #0]
 80140f4:	687b      	ldr	r3, [r7, #4]
 80140f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80140f8:	4613      	mov	r3, r2
 80140fa:	009b      	lsls	r3, r3, #2
 80140fc:	4413      	add	r3, r2
 80140fe:	009b      	lsls	r3, r3, #2
 8014100:	4a15      	ldr	r2, [pc, #84]	; (8014158 <prvAddNewTaskToReadyList+0xd8>)
 8014102:	441a      	add	r2, r3
 8014104:	687b      	ldr	r3, [r7, #4]
 8014106:	3304      	adds	r3, #4
 8014108:	4619      	mov	r1, r3
 801410a:	4610      	mov	r0, r2
 801410c:	f7fe fdd7 	bl	8012cbe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014110:	f001 fe68 	bl	8015de4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014114:	4b0d      	ldr	r3, [pc, #52]	; (801414c <prvAddNewTaskToReadyList+0xcc>)
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d00e      	beq.n	801413a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801411c:	4b0a      	ldr	r3, [pc, #40]	; (8014148 <prvAddNewTaskToReadyList+0xc8>)
 801411e:	681b      	ldr	r3, [r3, #0]
 8014120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014126:	429a      	cmp	r2, r3
 8014128:	d207      	bcs.n	801413a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801412a:	4b0c      	ldr	r3, [pc, #48]	; (801415c <prvAddNewTaskToReadyList+0xdc>)
 801412c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014130:	601a      	str	r2, [r3, #0]
 8014132:	f3bf 8f4f 	dsb	sy
 8014136:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801413a:	bf00      	nop
 801413c:	3708      	adds	r7, #8
 801413e:	46bd      	mov	sp, r7
 8014140:	bd80      	pop	{r7, pc}
 8014142:	bf00      	nop
 8014144:	20003444 	.word	0x20003444
 8014148:	20002f70 	.word	0x20002f70
 801414c:	20003450 	.word	0x20003450
 8014150:	20003460 	.word	0x20003460
 8014154:	2000344c 	.word	0x2000344c
 8014158:	20002f74 	.word	0x20002f74
 801415c:	e000ed04 	.word	0xe000ed04

08014160 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014160:	b580      	push	{r7, lr}
 8014162:	b084      	sub	sp, #16
 8014164:	af00      	add	r7, sp, #0
 8014166:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014168:	2300      	movs	r3, #0
 801416a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801416c:	687b      	ldr	r3, [r7, #4]
 801416e:	2b00      	cmp	r3, #0
 8014170:	d017      	beq.n	80141a2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014172:	4b13      	ldr	r3, [pc, #76]	; (80141c0 <vTaskDelay+0x60>)
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d00a      	beq.n	8014190 <vTaskDelay+0x30>
	__asm volatile
 801417a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801417e:	f383 8811 	msr	BASEPRI, r3
 8014182:	f3bf 8f6f 	isb	sy
 8014186:	f3bf 8f4f 	dsb	sy
 801418a:	60bb      	str	r3, [r7, #8]
}
 801418c:	bf00      	nop
 801418e:	e7fe      	b.n	801418e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014190:	f000 f8f4 	bl	801437c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014194:	2100      	movs	r1, #0
 8014196:	6878      	ldr	r0, [r7, #4]
 8014198:	f001 f928 	bl	80153ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801419c:	f000 f8fc 	bl	8014398 <xTaskResumeAll>
 80141a0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80141a2:	68fb      	ldr	r3, [r7, #12]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d107      	bne.n	80141b8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80141a8:	4b06      	ldr	r3, [pc, #24]	; (80141c4 <vTaskDelay+0x64>)
 80141aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80141ae:	601a      	str	r2, [r3, #0]
 80141b0:	f3bf 8f4f 	dsb	sy
 80141b4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80141b8:	bf00      	nop
 80141ba:	3710      	adds	r7, #16
 80141bc:	46bd      	mov	sp, r7
 80141be:	bd80      	pop	{r7, pc}
 80141c0:	2000346c 	.word	0x2000346c
 80141c4:	e000ed04 	.word	0xe000ed04

080141c8 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80141c8:	b580      	push	{r7, lr}
 80141ca:	b088      	sub	sp, #32
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80141d0:	687b      	ldr	r3, [r7, #4]
 80141d2:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80141d4:	69bb      	ldr	r3, [r7, #24]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	d10a      	bne.n	80141f0 <eTaskGetState+0x28>
	__asm volatile
 80141da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141de:	f383 8811 	msr	BASEPRI, r3
 80141e2:	f3bf 8f6f 	isb	sy
 80141e6:	f3bf 8f4f 	dsb	sy
 80141ea:	60bb      	str	r3, [r7, #8]
}
 80141ec:	bf00      	nop
 80141ee:	e7fe      	b.n	80141ee <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80141f0:	4b23      	ldr	r3, [pc, #140]	; (8014280 <eTaskGetState+0xb8>)
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	69ba      	ldr	r2, [r7, #24]
 80141f6:	429a      	cmp	r2, r3
 80141f8:	d102      	bne.n	8014200 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80141fa:	2300      	movs	r3, #0
 80141fc:	77fb      	strb	r3, [r7, #31]
 80141fe:	e03a      	b.n	8014276 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8014200:	f001 fdc0 	bl	8015d84 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8014204:	69bb      	ldr	r3, [r7, #24]
 8014206:	695b      	ldr	r3, [r3, #20]
 8014208:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 801420a:	4b1e      	ldr	r3, [pc, #120]	; (8014284 <eTaskGetState+0xbc>)
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8014210:	4b1d      	ldr	r3, [pc, #116]	; (8014288 <eTaskGetState+0xc0>)
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8014216:	f001 fde5 	bl	8015de4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 801421a:	697a      	ldr	r2, [r7, #20]
 801421c:	693b      	ldr	r3, [r7, #16]
 801421e:	429a      	cmp	r2, r3
 8014220:	d003      	beq.n	801422a <eTaskGetState+0x62>
 8014222:	697a      	ldr	r2, [r7, #20]
 8014224:	68fb      	ldr	r3, [r7, #12]
 8014226:	429a      	cmp	r2, r3
 8014228:	d102      	bne.n	8014230 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 801422a:	2302      	movs	r3, #2
 801422c:	77fb      	strb	r3, [r7, #31]
 801422e:	e022      	b.n	8014276 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8014230:	697b      	ldr	r3, [r7, #20]
 8014232:	4a16      	ldr	r2, [pc, #88]	; (801428c <eTaskGetState+0xc4>)
 8014234:	4293      	cmp	r3, r2
 8014236:	d112      	bne.n	801425e <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8014238:	69bb      	ldr	r3, [r7, #24]
 801423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801423c:	2b00      	cmp	r3, #0
 801423e:	d10b      	bne.n	8014258 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014240:	69bb      	ldr	r3, [r7, #24]
 8014242:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8014246:	b2db      	uxtb	r3, r3
 8014248:	2b01      	cmp	r3, #1
 801424a:	d102      	bne.n	8014252 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 801424c:	2302      	movs	r3, #2
 801424e:	77fb      	strb	r3, [r7, #31]
 8014250:	e011      	b.n	8014276 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8014252:	2303      	movs	r3, #3
 8014254:	77fb      	strb	r3, [r7, #31]
 8014256:	e00e      	b.n	8014276 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8014258:	2302      	movs	r3, #2
 801425a:	77fb      	strb	r3, [r7, #31]
 801425c:	e00b      	b.n	8014276 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 801425e:	697b      	ldr	r3, [r7, #20]
 8014260:	4a0b      	ldr	r2, [pc, #44]	; (8014290 <eTaskGetState+0xc8>)
 8014262:	4293      	cmp	r3, r2
 8014264:	d002      	beq.n	801426c <eTaskGetState+0xa4>
 8014266:	697b      	ldr	r3, [r7, #20]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d102      	bne.n	8014272 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 801426c:	2304      	movs	r3, #4
 801426e:	77fb      	strb	r3, [r7, #31]
 8014270:	e001      	b.n	8014276 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8014272:	2301      	movs	r3, #1
 8014274:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8014276:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8014278:	4618      	mov	r0, r3
 801427a:	3720      	adds	r7, #32
 801427c:	46bd      	mov	sp, r7
 801427e:	bd80      	pop	{r7, pc}
 8014280:	20002f70 	.word	0x20002f70
 8014284:	200033fc 	.word	0x200033fc
 8014288:	20003400 	.word	0x20003400
 801428c:	20003430 	.word	0x20003430
 8014290:	20003418 	.word	0x20003418

08014294 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014294:	b580      	push	{r7, lr}
 8014296:	b08a      	sub	sp, #40	; 0x28
 8014298:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801429a:	2300      	movs	r3, #0
 801429c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801429e:	2300      	movs	r3, #0
 80142a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80142a2:	463a      	mov	r2, r7
 80142a4:	1d39      	adds	r1, r7, #4
 80142a6:	f107 0308 	add.w	r3, r7, #8
 80142aa:	4618      	mov	r0, r3
 80142ac:	f7fe fca6 	bl	8012bfc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80142b0:	6839      	ldr	r1, [r7, #0]
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	68ba      	ldr	r2, [r7, #8]
 80142b6:	9202      	str	r2, [sp, #8]
 80142b8:	9301      	str	r3, [sp, #4]
 80142ba:	2300      	movs	r3, #0
 80142bc:	9300      	str	r3, [sp, #0]
 80142be:	2300      	movs	r3, #0
 80142c0:	460a      	mov	r2, r1
 80142c2:	4925      	ldr	r1, [pc, #148]	; (8014358 <vTaskStartScheduler+0xc4>)
 80142c4:	4825      	ldr	r0, [pc, #148]	; (801435c <vTaskStartScheduler+0xc8>)
 80142c6:	f7ff fd8f 	bl	8013de8 <xTaskCreateStatic>
 80142ca:	4603      	mov	r3, r0
 80142cc:	4a24      	ldr	r2, [pc, #144]	; (8014360 <vTaskStartScheduler+0xcc>)
 80142ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80142d0:	4b23      	ldr	r3, [pc, #140]	; (8014360 <vTaskStartScheduler+0xcc>)
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d002      	beq.n	80142de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80142d8:	2301      	movs	r3, #1
 80142da:	617b      	str	r3, [r7, #20]
 80142dc:	e001      	b.n	80142e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80142de:	2300      	movs	r3, #0
 80142e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80142e2:	697b      	ldr	r3, [r7, #20]
 80142e4:	2b01      	cmp	r3, #1
 80142e6:	d102      	bne.n	80142ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80142e8:	f001 f8d4 	bl	8015494 <xTimerCreateTimerTask>
 80142ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80142ee:	697b      	ldr	r3, [r7, #20]
 80142f0:	2b01      	cmp	r3, #1
 80142f2:	d11e      	bne.n	8014332 <vTaskStartScheduler+0x9e>
	__asm volatile
 80142f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142f8:	f383 8811 	msr	BASEPRI, r3
 80142fc:	f3bf 8f6f 	isb	sy
 8014300:	f3bf 8f4f 	dsb	sy
 8014304:	613b      	str	r3, [r7, #16]
}
 8014306:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014308:	4b16      	ldr	r3, [pc, #88]	; (8014364 <vTaskStartScheduler+0xd0>)
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	3358      	adds	r3, #88	; 0x58
 801430e:	4a16      	ldr	r2, [pc, #88]	; (8014368 <vTaskStartScheduler+0xd4>)
 8014310:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014312:	4b16      	ldr	r3, [pc, #88]	; (801436c <vTaskStartScheduler+0xd8>)
 8014314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014318:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801431a:	4b15      	ldr	r3, [pc, #84]	; (8014370 <vTaskStartScheduler+0xdc>)
 801431c:	2201      	movs	r2, #1
 801431e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014320:	4b14      	ldr	r3, [pc, #80]	; (8014374 <vTaskStartScheduler+0xe0>)
 8014322:	2200      	movs	r2, #0
 8014324:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8014326:	4b14      	ldr	r3, [pc, #80]	; (8014378 <vTaskStartScheduler+0xe4>)
 8014328:	2200      	movs	r2, #0
 801432a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801432c:	f001 fc88 	bl	8015c40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014330:	e00e      	b.n	8014350 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014332:	697b      	ldr	r3, [r7, #20]
 8014334:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014338:	d10a      	bne.n	8014350 <vTaskStartScheduler+0xbc>
	__asm volatile
 801433a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801433e:	f383 8811 	msr	BASEPRI, r3
 8014342:	f3bf 8f6f 	isb	sy
 8014346:	f3bf 8f4f 	dsb	sy
 801434a:	60fb      	str	r3, [r7, #12]
}
 801434c:	bf00      	nop
 801434e:	e7fe      	b.n	801434e <vTaskStartScheduler+0xba>
}
 8014350:	bf00      	nop
 8014352:	3718      	adds	r7, #24
 8014354:	46bd      	mov	sp, r7
 8014356:	bd80      	pop	{r7, pc}
 8014358:	0801a40c 	.word	0x0801a40c
 801435c:	08014afd 	.word	0x08014afd
 8014360:	20003468 	.word	0x20003468
 8014364:	20002f70 	.word	0x20002f70
 8014368:	200001c8 	.word	0x200001c8
 801436c:	20003464 	.word	0x20003464
 8014370:	20003450 	.word	0x20003450
 8014374:	20003448 	.word	0x20003448
 8014378:	2001a360 	.word	0x2001a360

0801437c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801437c:	b480      	push	{r7}
 801437e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014380:	4b04      	ldr	r3, [pc, #16]	; (8014394 <vTaskSuspendAll+0x18>)
 8014382:	681b      	ldr	r3, [r3, #0]
 8014384:	3301      	adds	r3, #1
 8014386:	4a03      	ldr	r2, [pc, #12]	; (8014394 <vTaskSuspendAll+0x18>)
 8014388:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801438a:	bf00      	nop
 801438c:	46bd      	mov	sp, r7
 801438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014392:	4770      	bx	lr
 8014394:	2000346c 	.word	0x2000346c

08014398 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014398:	b580      	push	{r7, lr}
 801439a:	b084      	sub	sp, #16
 801439c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801439e:	2300      	movs	r3, #0
 80143a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80143a2:	2300      	movs	r3, #0
 80143a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80143a6:	4b42      	ldr	r3, [pc, #264]	; (80144b0 <xTaskResumeAll+0x118>)
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d10a      	bne.n	80143c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80143ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143b2:	f383 8811 	msr	BASEPRI, r3
 80143b6:	f3bf 8f6f 	isb	sy
 80143ba:	f3bf 8f4f 	dsb	sy
 80143be:	603b      	str	r3, [r7, #0]
}
 80143c0:	bf00      	nop
 80143c2:	e7fe      	b.n	80143c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80143c4:	f001 fcde 	bl	8015d84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80143c8:	4b39      	ldr	r3, [pc, #228]	; (80144b0 <xTaskResumeAll+0x118>)
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	3b01      	subs	r3, #1
 80143ce:	4a38      	ldr	r2, [pc, #224]	; (80144b0 <xTaskResumeAll+0x118>)
 80143d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80143d2:	4b37      	ldr	r3, [pc, #220]	; (80144b0 <xTaskResumeAll+0x118>)
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d162      	bne.n	80144a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80143da:	4b36      	ldr	r3, [pc, #216]	; (80144b4 <xTaskResumeAll+0x11c>)
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d05e      	beq.n	80144a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80143e2:	e02f      	b.n	8014444 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80143e4:	4b34      	ldr	r3, [pc, #208]	; (80144b8 <xTaskResumeAll+0x120>)
 80143e6:	68db      	ldr	r3, [r3, #12]
 80143e8:	68db      	ldr	r3, [r3, #12]
 80143ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	3318      	adds	r3, #24
 80143f0:	4618      	mov	r0, r3
 80143f2:	f7fe fcc1 	bl	8012d78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80143f6:	68fb      	ldr	r3, [r7, #12]
 80143f8:	3304      	adds	r3, #4
 80143fa:	4618      	mov	r0, r3
 80143fc:	f7fe fcbc 	bl	8012d78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014404:	4b2d      	ldr	r3, [pc, #180]	; (80144bc <xTaskResumeAll+0x124>)
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	429a      	cmp	r2, r3
 801440a:	d903      	bls.n	8014414 <xTaskResumeAll+0x7c>
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014410:	4a2a      	ldr	r2, [pc, #168]	; (80144bc <xTaskResumeAll+0x124>)
 8014412:	6013      	str	r3, [r2, #0]
 8014414:	68fb      	ldr	r3, [r7, #12]
 8014416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014418:	4613      	mov	r3, r2
 801441a:	009b      	lsls	r3, r3, #2
 801441c:	4413      	add	r3, r2
 801441e:	009b      	lsls	r3, r3, #2
 8014420:	4a27      	ldr	r2, [pc, #156]	; (80144c0 <xTaskResumeAll+0x128>)
 8014422:	441a      	add	r2, r3
 8014424:	68fb      	ldr	r3, [r7, #12]
 8014426:	3304      	adds	r3, #4
 8014428:	4619      	mov	r1, r3
 801442a:	4610      	mov	r0, r2
 801442c:	f7fe fc47 	bl	8012cbe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014430:	68fb      	ldr	r3, [r7, #12]
 8014432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014434:	4b23      	ldr	r3, [pc, #140]	; (80144c4 <xTaskResumeAll+0x12c>)
 8014436:	681b      	ldr	r3, [r3, #0]
 8014438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801443a:	429a      	cmp	r2, r3
 801443c:	d302      	bcc.n	8014444 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801443e:	4b22      	ldr	r3, [pc, #136]	; (80144c8 <xTaskResumeAll+0x130>)
 8014440:	2201      	movs	r2, #1
 8014442:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014444:	4b1c      	ldr	r3, [pc, #112]	; (80144b8 <xTaskResumeAll+0x120>)
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	2b00      	cmp	r3, #0
 801444a:	d1cb      	bne.n	80143e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d001      	beq.n	8014456 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014452:	f000 fce1 	bl	8014e18 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014456:	4b1d      	ldr	r3, [pc, #116]	; (80144cc <xTaskResumeAll+0x134>)
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d010      	beq.n	8014484 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014462:	f000 f8d7 	bl	8014614 <xTaskIncrementTick>
 8014466:	4603      	mov	r3, r0
 8014468:	2b00      	cmp	r3, #0
 801446a:	d002      	beq.n	8014472 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801446c:	4b16      	ldr	r3, [pc, #88]	; (80144c8 <xTaskResumeAll+0x130>)
 801446e:	2201      	movs	r2, #1
 8014470:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	3b01      	subs	r3, #1
 8014476:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d1f1      	bne.n	8014462 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801447e:	4b13      	ldr	r3, [pc, #76]	; (80144cc <xTaskResumeAll+0x134>)
 8014480:	2200      	movs	r2, #0
 8014482:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014484:	4b10      	ldr	r3, [pc, #64]	; (80144c8 <xTaskResumeAll+0x130>)
 8014486:	681b      	ldr	r3, [r3, #0]
 8014488:	2b00      	cmp	r3, #0
 801448a:	d009      	beq.n	80144a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801448c:	2301      	movs	r3, #1
 801448e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014490:	4b0f      	ldr	r3, [pc, #60]	; (80144d0 <xTaskResumeAll+0x138>)
 8014492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014496:	601a      	str	r2, [r3, #0]
 8014498:	f3bf 8f4f 	dsb	sy
 801449c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80144a0:	f001 fca0 	bl	8015de4 <vPortExitCritical>

	return xAlreadyYielded;
 80144a4:	68bb      	ldr	r3, [r7, #8]
}
 80144a6:	4618      	mov	r0, r3
 80144a8:	3710      	adds	r7, #16
 80144aa:	46bd      	mov	sp, r7
 80144ac:	bd80      	pop	{r7, pc}
 80144ae:	bf00      	nop
 80144b0:	2000346c 	.word	0x2000346c
 80144b4:	20003444 	.word	0x20003444
 80144b8:	20003404 	.word	0x20003404
 80144bc:	2000344c 	.word	0x2000344c
 80144c0:	20002f74 	.word	0x20002f74
 80144c4:	20002f70 	.word	0x20002f70
 80144c8:	20003458 	.word	0x20003458
 80144cc:	20003454 	.word	0x20003454
 80144d0:	e000ed04 	.word	0xe000ed04

080144d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80144d4:	b480      	push	{r7}
 80144d6:	b083      	sub	sp, #12
 80144d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80144da:	4b05      	ldr	r3, [pc, #20]	; (80144f0 <xTaskGetTickCount+0x1c>)
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80144e0:	687b      	ldr	r3, [r7, #4]
}
 80144e2:	4618      	mov	r0, r3
 80144e4:	370c      	adds	r7, #12
 80144e6:	46bd      	mov	sp, r7
 80144e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ec:	4770      	bx	lr
 80144ee:	bf00      	nop
 80144f0:	20003448 	.word	0x20003448

080144f4 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 80144f4:	b580      	push	{r7, lr}
 80144f6:	b086      	sub	sp, #24
 80144f8:	af00      	add	r7, sp, #0
 80144fa:	60f8      	str	r0, [r7, #12]
 80144fc:	60b9      	str	r1, [r7, #8]
 80144fe:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8014500:	2300      	movs	r3, #0
 8014502:	617b      	str	r3, [r7, #20]
 8014504:	2338      	movs	r3, #56	; 0x38
 8014506:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8014508:	f7ff ff38 	bl	801437c <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 801450c:	4b3a      	ldr	r3, [pc, #232]	; (80145f8 <uxTaskGetSystemState+0x104>)
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	68ba      	ldr	r2, [r7, #8]
 8014512:	429a      	cmp	r2, r3
 8014514:	d369      	bcc.n	80145ea <uxTaskGetSystemState+0xf6>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8014516:	693b      	ldr	r3, [r7, #16]
 8014518:	3b01      	subs	r3, #1
 801451a:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 801451c:	697a      	ldr	r2, [r7, #20]
 801451e:	4613      	mov	r3, r2
 8014520:	00db      	lsls	r3, r3, #3
 8014522:	4413      	add	r3, r2
 8014524:	009b      	lsls	r3, r3, #2
 8014526:	461a      	mov	r2, r3
 8014528:	68fb      	ldr	r3, [r7, #12]
 801452a:	1898      	adds	r0, r3, r2
 801452c:	693a      	ldr	r2, [r7, #16]
 801452e:	4613      	mov	r3, r2
 8014530:	009b      	lsls	r3, r3, #2
 8014532:	4413      	add	r3, r2
 8014534:	009b      	lsls	r3, r3, #2
 8014536:	4a31      	ldr	r2, [pc, #196]	; (80145fc <uxTaskGetSystemState+0x108>)
 8014538:	4413      	add	r3, r2
 801453a:	2201      	movs	r2, #1
 801453c:	4619      	mov	r1, r3
 801453e:	f000 fbc9 	bl	8014cd4 <prvListTasksWithinSingleList>
 8014542:	4602      	mov	r2, r0
 8014544:	697b      	ldr	r3, [r7, #20]
 8014546:	4413      	add	r3, r2
 8014548:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801454a:	693b      	ldr	r3, [r7, #16]
 801454c:	2b00      	cmp	r3, #0
 801454e:	d1e2      	bne.n	8014516 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8014550:	697a      	ldr	r2, [r7, #20]
 8014552:	4613      	mov	r3, r2
 8014554:	00db      	lsls	r3, r3, #3
 8014556:	4413      	add	r3, r2
 8014558:	009b      	lsls	r3, r3, #2
 801455a:	461a      	mov	r2, r3
 801455c:	68fb      	ldr	r3, [r7, #12]
 801455e:	4413      	add	r3, r2
 8014560:	4a27      	ldr	r2, [pc, #156]	; (8014600 <uxTaskGetSystemState+0x10c>)
 8014562:	6811      	ldr	r1, [r2, #0]
 8014564:	2202      	movs	r2, #2
 8014566:	4618      	mov	r0, r3
 8014568:	f000 fbb4 	bl	8014cd4 <prvListTasksWithinSingleList>
 801456c:	4602      	mov	r2, r0
 801456e:	697b      	ldr	r3, [r7, #20]
 8014570:	4413      	add	r3, r2
 8014572:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8014574:	697a      	ldr	r2, [r7, #20]
 8014576:	4613      	mov	r3, r2
 8014578:	00db      	lsls	r3, r3, #3
 801457a:	4413      	add	r3, r2
 801457c:	009b      	lsls	r3, r3, #2
 801457e:	461a      	mov	r2, r3
 8014580:	68fb      	ldr	r3, [r7, #12]
 8014582:	4413      	add	r3, r2
 8014584:	4a1f      	ldr	r2, [pc, #124]	; (8014604 <uxTaskGetSystemState+0x110>)
 8014586:	6811      	ldr	r1, [r2, #0]
 8014588:	2202      	movs	r2, #2
 801458a:	4618      	mov	r0, r3
 801458c:	f000 fba2 	bl	8014cd4 <prvListTasksWithinSingleList>
 8014590:	4602      	mov	r2, r0
 8014592:	697b      	ldr	r3, [r7, #20]
 8014594:	4413      	add	r3, r2
 8014596:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8014598:	697a      	ldr	r2, [r7, #20]
 801459a:	4613      	mov	r3, r2
 801459c:	00db      	lsls	r3, r3, #3
 801459e:	4413      	add	r3, r2
 80145a0:	009b      	lsls	r3, r3, #2
 80145a2:	461a      	mov	r2, r3
 80145a4:	68fb      	ldr	r3, [r7, #12]
 80145a6:	4413      	add	r3, r2
 80145a8:	2204      	movs	r2, #4
 80145aa:	4917      	ldr	r1, [pc, #92]	; (8014608 <uxTaskGetSystemState+0x114>)
 80145ac:	4618      	mov	r0, r3
 80145ae:	f000 fb91 	bl	8014cd4 <prvListTasksWithinSingleList>
 80145b2:	4602      	mov	r2, r0
 80145b4:	697b      	ldr	r3, [r7, #20]
 80145b6:	4413      	add	r3, r2
 80145b8:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 80145ba:	697a      	ldr	r2, [r7, #20]
 80145bc:	4613      	mov	r3, r2
 80145be:	00db      	lsls	r3, r3, #3
 80145c0:	4413      	add	r3, r2
 80145c2:	009b      	lsls	r3, r3, #2
 80145c4:	461a      	mov	r2, r3
 80145c6:	68fb      	ldr	r3, [r7, #12]
 80145c8:	4413      	add	r3, r2
 80145ca:	2203      	movs	r2, #3
 80145cc:	490f      	ldr	r1, [pc, #60]	; (801460c <uxTaskGetSystemState+0x118>)
 80145ce:	4618      	mov	r0, r3
 80145d0:	f000 fb80 	bl	8014cd4 <prvListTasksWithinSingleList>
 80145d4:	4602      	mov	r2, r0
 80145d6:	697b      	ldr	r3, [r7, #20]
 80145d8:	4413      	add	r3, r2
 80145da:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d003      	beq.n	80145ea <uxTaskGetSystemState+0xf6>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80145e2:	4b0b      	ldr	r3, [pc, #44]	; (8014610 <uxTaskGetSystemState+0x11c>)
 80145e4:	681a      	ldr	r2, [r3, #0]
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 80145ea:	f7ff fed5 	bl	8014398 <xTaskResumeAll>

		return uxTask;
 80145ee:	697b      	ldr	r3, [r7, #20]
	}
 80145f0:	4618      	mov	r0, r3
 80145f2:	3718      	adds	r7, #24
 80145f4:	46bd      	mov	sp, r7
 80145f6:	bd80      	pop	{r7, pc}
 80145f8:	20003444 	.word	0x20003444
 80145fc:	20002f74 	.word	0x20002f74
 8014600:	200033fc 	.word	0x200033fc
 8014604:	20003400 	.word	0x20003400
 8014608:	20003418 	.word	0x20003418
 801460c:	20003430 	.word	0x20003430
 8014610:	2001a360 	.word	0x2001a360

08014614 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014614:	b580      	push	{r7, lr}
 8014616:	b086      	sub	sp, #24
 8014618:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801461a:	2300      	movs	r3, #0
 801461c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801461e:	4b4f      	ldr	r3, [pc, #316]	; (801475c <xTaskIncrementTick+0x148>)
 8014620:	681b      	ldr	r3, [r3, #0]
 8014622:	2b00      	cmp	r3, #0
 8014624:	f040 808f 	bne.w	8014746 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014628:	4b4d      	ldr	r3, [pc, #308]	; (8014760 <xTaskIncrementTick+0x14c>)
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	3301      	adds	r3, #1
 801462e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014630:	4a4b      	ldr	r2, [pc, #300]	; (8014760 <xTaskIncrementTick+0x14c>)
 8014632:	693b      	ldr	r3, [r7, #16]
 8014634:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014636:	693b      	ldr	r3, [r7, #16]
 8014638:	2b00      	cmp	r3, #0
 801463a:	d120      	bne.n	801467e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801463c:	4b49      	ldr	r3, [pc, #292]	; (8014764 <xTaskIncrementTick+0x150>)
 801463e:	681b      	ldr	r3, [r3, #0]
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d00a      	beq.n	801465c <xTaskIncrementTick+0x48>
	__asm volatile
 8014646:	f04f 0350 	mov.w	r3, #80	; 0x50
 801464a:	f383 8811 	msr	BASEPRI, r3
 801464e:	f3bf 8f6f 	isb	sy
 8014652:	f3bf 8f4f 	dsb	sy
 8014656:	603b      	str	r3, [r7, #0]
}
 8014658:	bf00      	nop
 801465a:	e7fe      	b.n	801465a <xTaskIncrementTick+0x46>
 801465c:	4b41      	ldr	r3, [pc, #260]	; (8014764 <xTaskIncrementTick+0x150>)
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	60fb      	str	r3, [r7, #12]
 8014662:	4b41      	ldr	r3, [pc, #260]	; (8014768 <xTaskIncrementTick+0x154>)
 8014664:	681b      	ldr	r3, [r3, #0]
 8014666:	4a3f      	ldr	r2, [pc, #252]	; (8014764 <xTaskIncrementTick+0x150>)
 8014668:	6013      	str	r3, [r2, #0]
 801466a:	4a3f      	ldr	r2, [pc, #252]	; (8014768 <xTaskIncrementTick+0x154>)
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	6013      	str	r3, [r2, #0]
 8014670:	4b3e      	ldr	r3, [pc, #248]	; (801476c <xTaskIncrementTick+0x158>)
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	3301      	adds	r3, #1
 8014676:	4a3d      	ldr	r2, [pc, #244]	; (801476c <xTaskIncrementTick+0x158>)
 8014678:	6013      	str	r3, [r2, #0]
 801467a:	f000 fbcd 	bl	8014e18 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801467e:	4b3c      	ldr	r3, [pc, #240]	; (8014770 <xTaskIncrementTick+0x15c>)
 8014680:	681b      	ldr	r3, [r3, #0]
 8014682:	693a      	ldr	r2, [r7, #16]
 8014684:	429a      	cmp	r2, r3
 8014686:	d349      	bcc.n	801471c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014688:	4b36      	ldr	r3, [pc, #216]	; (8014764 <xTaskIncrementTick+0x150>)
 801468a:	681b      	ldr	r3, [r3, #0]
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d104      	bne.n	801469c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014692:	4b37      	ldr	r3, [pc, #220]	; (8014770 <xTaskIncrementTick+0x15c>)
 8014694:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014698:	601a      	str	r2, [r3, #0]
					break;
 801469a:	e03f      	b.n	801471c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801469c:	4b31      	ldr	r3, [pc, #196]	; (8014764 <xTaskIncrementTick+0x150>)
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	68db      	ldr	r3, [r3, #12]
 80146a2:	68db      	ldr	r3, [r3, #12]
 80146a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80146a6:	68bb      	ldr	r3, [r7, #8]
 80146a8:	685b      	ldr	r3, [r3, #4]
 80146aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80146ac:	693a      	ldr	r2, [r7, #16]
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	429a      	cmp	r2, r3
 80146b2:	d203      	bcs.n	80146bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80146b4:	4a2e      	ldr	r2, [pc, #184]	; (8014770 <xTaskIncrementTick+0x15c>)
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80146ba:	e02f      	b.n	801471c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80146bc:	68bb      	ldr	r3, [r7, #8]
 80146be:	3304      	adds	r3, #4
 80146c0:	4618      	mov	r0, r3
 80146c2:	f7fe fb59 	bl	8012d78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80146c6:	68bb      	ldr	r3, [r7, #8]
 80146c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d004      	beq.n	80146d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80146ce:	68bb      	ldr	r3, [r7, #8]
 80146d0:	3318      	adds	r3, #24
 80146d2:	4618      	mov	r0, r3
 80146d4:	f7fe fb50 	bl	8012d78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80146d8:	68bb      	ldr	r3, [r7, #8]
 80146da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146dc:	4b25      	ldr	r3, [pc, #148]	; (8014774 <xTaskIncrementTick+0x160>)
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	429a      	cmp	r2, r3
 80146e2:	d903      	bls.n	80146ec <xTaskIncrementTick+0xd8>
 80146e4:	68bb      	ldr	r3, [r7, #8]
 80146e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146e8:	4a22      	ldr	r2, [pc, #136]	; (8014774 <xTaskIncrementTick+0x160>)
 80146ea:	6013      	str	r3, [r2, #0]
 80146ec:	68bb      	ldr	r3, [r7, #8]
 80146ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146f0:	4613      	mov	r3, r2
 80146f2:	009b      	lsls	r3, r3, #2
 80146f4:	4413      	add	r3, r2
 80146f6:	009b      	lsls	r3, r3, #2
 80146f8:	4a1f      	ldr	r2, [pc, #124]	; (8014778 <xTaskIncrementTick+0x164>)
 80146fa:	441a      	add	r2, r3
 80146fc:	68bb      	ldr	r3, [r7, #8]
 80146fe:	3304      	adds	r3, #4
 8014700:	4619      	mov	r1, r3
 8014702:	4610      	mov	r0, r2
 8014704:	f7fe fadb 	bl	8012cbe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014708:	68bb      	ldr	r3, [r7, #8]
 801470a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801470c:	4b1b      	ldr	r3, [pc, #108]	; (801477c <xTaskIncrementTick+0x168>)
 801470e:	681b      	ldr	r3, [r3, #0]
 8014710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014712:	429a      	cmp	r2, r3
 8014714:	d3b8      	bcc.n	8014688 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014716:	2301      	movs	r3, #1
 8014718:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801471a:	e7b5      	b.n	8014688 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801471c:	4b17      	ldr	r3, [pc, #92]	; (801477c <xTaskIncrementTick+0x168>)
 801471e:	681b      	ldr	r3, [r3, #0]
 8014720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014722:	4915      	ldr	r1, [pc, #84]	; (8014778 <xTaskIncrementTick+0x164>)
 8014724:	4613      	mov	r3, r2
 8014726:	009b      	lsls	r3, r3, #2
 8014728:	4413      	add	r3, r2
 801472a:	009b      	lsls	r3, r3, #2
 801472c:	440b      	add	r3, r1
 801472e:	681b      	ldr	r3, [r3, #0]
 8014730:	2b01      	cmp	r3, #1
 8014732:	d901      	bls.n	8014738 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8014734:	2301      	movs	r3, #1
 8014736:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014738:	4b11      	ldr	r3, [pc, #68]	; (8014780 <xTaskIncrementTick+0x16c>)
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d007      	beq.n	8014750 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8014740:	2301      	movs	r3, #1
 8014742:	617b      	str	r3, [r7, #20]
 8014744:	e004      	b.n	8014750 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014746:	4b0f      	ldr	r3, [pc, #60]	; (8014784 <xTaskIncrementTick+0x170>)
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	3301      	adds	r3, #1
 801474c:	4a0d      	ldr	r2, [pc, #52]	; (8014784 <xTaskIncrementTick+0x170>)
 801474e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8014750:	697b      	ldr	r3, [r7, #20]
}
 8014752:	4618      	mov	r0, r3
 8014754:	3718      	adds	r7, #24
 8014756:	46bd      	mov	sp, r7
 8014758:	bd80      	pop	{r7, pc}
 801475a:	bf00      	nop
 801475c:	2000346c 	.word	0x2000346c
 8014760:	20003448 	.word	0x20003448
 8014764:	200033fc 	.word	0x200033fc
 8014768:	20003400 	.word	0x20003400
 801476c:	2000345c 	.word	0x2000345c
 8014770:	20003464 	.word	0x20003464
 8014774:	2000344c 	.word	0x2000344c
 8014778:	20002f74 	.word	0x20002f74
 801477c:	20002f70 	.word	0x20002f70
 8014780:	20003458 	.word	0x20003458
 8014784:	20003454 	.word	0x20003454

08014788 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014788:	b480      	push	{r7}
 801478a:	b085      	sub	sp, #20
 801478c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801478e:	4b36      	ldr	r3, [pc, #216]	; (8014868 <vTaskSwitchContext+0xe0>)
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d003      	beq.n	801479e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014796:	4b35      	ldr	r3, [pc, #212]	; (801486c <vTaskSwitchContext+0xe4>)
 8014798:	2201      	movs	r2, #1
 801479a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801479c:	e05e      	b.n	801485c <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 801479e:	4b33      	ldr	r3, [pc, #204]	; (801486c <vTaskSwitchContext+0xe4>)
 80147a0:	2200      	movs	r2, #0
 80147a2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 80147a4:	4b32      	ldr	r3, [pc, #200]	; (8014870 <vTaskSwitchContext+0xe8>)
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	4a32      	ldr	r2, [pc, #200]	; (8014874 <vTaskSwitchContext+0xec>)
 80147aa:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 80147ac:	4b31      	ldr	r3, [pc, #196]	; (8014874 <vTaskSwitchContext+0xec>)
 80147ae:	681a      	ldr	r2, [r3, #0]
 80147b0:	4b31      	ldr	r3, [pc, #196]	; (8014878 <vTaskSwitchContext+0xf0>)
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	429a      	cmp	r2, r3
 80147b6:	d909      	bls.n	80147cc <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 80147b8:	4b30      	ldr	r3, [pc, #192]	; (801487c <vTaskSwitchContext+0xf4>)
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80147be:	4a2d      	ldr	r2, [pc, #180]	; (8014874 <vTaskSwitchContext+0xec>)
 80147c0:	6810      	ldr	r0, [r2, #0]
 80147c2:	4a2d      	ldr	r2, [pc, #180]	; (8014878 <vTaskSwitchContext+0xf0>)
 80147c4:	6812      	ldr	r2, [r2, #0]
 80147c6:	1a82      	subs	r2, r0, r2
 80147c8:	440a      	add	r2, r1
 80147ca:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 80147cc:	4b29      	ldr	r3, [pc, #164]	; (8014874 <vTaskSwitchContext+0xec>)
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	4a29      	ldr	r2, [pc, #164]	; (8014878 <vTaskSwitchContext+0xf0>)
 80147d2:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80147d4:	4b2a      	ldr	r3, [pc, #168]	; (8014880 <vTaskSwitchContext+0xf8>)
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	60fb      	str	r3, [r7, #12]
 80147da:	e010      	b.n	80147fe <vTaskSwitchContext+0x76>
 80147dc:	68fb      	ldr	r3, [r7, #12]
 80147de:	2b00      	cmp	r3, #0
 80147e0:	d10a      	bne.n	80147f8 <vTaskSwitchContext+0x70>
	__asm volatile
 80147e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147e6:	f383 8811 	msr	BASEPRI, r3
 80147ea:	f3bf 8f6f 	isb	sy
 80147ee:	f3bf 8f4f 	dsb	sy
 80147f2:	607b      	str	r3, [r7, #4]
}
 80147f4:	bf00      	nop
 80147f6:	e7fe      	b.n	80147f6 <vTaskSwitchContext+0x6e>
 80147f8:	68fb      	ldr	r3, [r7, #12]
 80147fa:	3b01      	subs	r3, #1
 80147fc:	60fb      	str	r3, [r7, #12]
 80147fe:	4921      	ldr	r1, [pc, #132]	; (8014884 <vTaskSwitchContext+0xfc>)
 8014800:	68fa      	ldr	r2, [r7, #12]
 8014802:	4613      	mov	r3, r2
 8014804:	009b      	lsls	r3, r3, #2
 8014806:	4413      	add	r3, r2
 8014808:	009b      	lsls	r3, r3, #2
 801480a:	440b      	add	r3, r1
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	2b00      	cmp	r3, #0
 8014810:	d0e4      	beq.n	80147dc <vTaskSwitchContext+0x54>
 8014812:	68fa      	ldr	r2, [r7, #12]
 8014814:	4613      	mov	r3, r2
 8014816:	009b      	lsls	r3, r3, #2
 8014818:	4413      	add	r3, r2
 801481a:	009b      	lsls	r3, r3, #2
 801481c:	4a19      	ldr	r2, [pc, #100]	; (8014884 <vTaskSwitchContext+0xfc>)
 801481e:	4413      	add	r3, r2
 8014820:	60bb      	str	r3, [r7, #8]
 8014822:	68bb      	ldr	r3, [r7, #8]
 8014824:	685b      	ldr	r3, [r3, #4]
 8014826:	685a      	ldr	r2, [r3, #4]
 8014828:	68bb      	ldr	r3, [r7, #8]
 801482a:	605a      	str	r2, [r3, #4]
 801482c:	68bb      	ldr	r3, [r7, #8]
 801482e:	685a      	ldr	r2, [r3, #4]
 8014830:	68bb      	ldr	r3, [r7, #8]
 8014832:	3308      	adds	r3, #8
 8014834:	429a      	cmp	r2, r3
 8014836:	d104      	bne.n	8014842 <vTaskSwitchContext+0xba>
 8014838:	68bb      	ldr	r3, [r7, #8]
 801483a:	685b      	ldr	r3, [r3, #4]
 801483c:	685a      	ldr	r2, [r3, #4]
 801483e:	68bb      	ldr	r3, [r7, #8]
 8014840:	605a      	str	r2, [r3, #4]
 8014842:	68bb      	ldr	r3, [r7, #8]
 8014844:	685b      	ldr	r3, [r3, #4]
 8014846:	68db      	ldr	r3, [r3, #12]
 8014848:	4a0c      	ldr	r2, [pc, #48]	; (801487c <vTaskSwitchContext+0xf4>)
 801484a:	6013      	str	r3, [r2, #0]
 801484c:	4a0c      	ldr	r2, [pc, #48]	; (8014880 <vTaskSwitchContext+0xf8>)
 801484e:	68fb      	ldr	r3, [r7, #12]
 8014850:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014852:	4b0a      	ldr	r3, [pc, #40]	; (801487c <vTaskSwitchContext+0xf4>)
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	3358      	adds	r3, #88	; 0x58
 8014858:	4a0b      	ldr	r2, [pc, #44]	; (8014888 <vTaskSwitchContext+0x100>)
 801485a:	6013      	str	r3, [r2, #0]
}
 801485c:	bf00      	nop
 801485e:	3714      	adds	r7, #20
 8014860:	46bd      	mov	sp, r7
 8014862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014866:	4770      	bx	lr
 8014868:	2000346c 	.word	0x2000346c
 801486c:	20003458 	.word	0x20003458
 8014870:	2001a360 	.word	0x2001a360
 8014874:	20003474 	.word	0x20003474
 8014878:	20003470 	.word	0x20003470
 801487c:	20002f70 	.word	0x20002f70
 8014880:	2000344c 	.word	0x2000344c
 8014884:	20002f74 	.word	0x20002f74
 8014888:	200001c8 	.word	0x200001c8

0801488c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801488c:	b580      	push	{r7, lr}
 801488e:	b084      	sub	sp, #16
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]
 8014894:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	2b00      	cmp	r3, #0
 801489a:	d10a      	bne.n	80148b2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801489c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148a0:	f383 8811 	msr	BASEPRI, r3
 80148a4:	f3bf 8f6f 	isb	sy
 80148a8:	f3bf 8f4f 	dsb	sy
 80148ac:	60fb      	str	r3, [r7, #12]
}
 80148ae:	bf00      	nop
 80148b0:	e7fe      	b.n	80148b0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80148b2:	4b07      	ldr	r3, [pc, #28]	; (80148d0 <vTaskPlaceOnEventList+0x44>)
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	3318      	adds	r3, #24
 80148b8:	4619      	mov	r1, r3
 80148ba:	6878      	ldr	r0, [r7, #4]
 80148bc:	f7fe fa23 	bl	8012d06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80148c0:	2101      	movs	r1, #1
 80148c2:	6838      	ldr	r0, [r7, #0]
 80148c4:	f000 fd92 	bl	80153ec <prvAddCurrentTaskToDelayedList>
}
 80148c8:	bf00      	nop
 80148ca:	3710      	adds	r7, #16
 80148cc:	46bd      	mov	sp, r7
 80148ce:	bd80      	pop	{r7, pc}
 80148d0:	20002f70 	.word	0x20002f70

080148d4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80148d4:	b580      	push	{r7, lr}
 80148d6:	b086      	sub	sp, #24
 80148d8:	af00      	add	r7, sp, #0
 80148da:	60f8      	str	r0, [r7, #12]
 80148dc:	60b9      	str	r1, [r7, #8]
 80148de:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d10a      	bne.n	80148fc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80148e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148ea:	f383 8811 	msr	BASEPRI, r3
 80148ee:	f3bf 8f6f 	isb	sy
 80148f2:	f3bf 8f4f 	dsb	sy
 80148f6:	617b      	str	r3, [r7, #20]
}
 80148f8:	bf00      	nop
 80148fa:	e7fe      	b.n	80148fa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80148fc:	4b0a      	ldr	r3, [pc, #40]	; (8014928 <vTaskPlaceOnEventListRestricted+0x54>)
 80148fe:	681b      	ldr	r3, [r3, #0]
 8014900:	3318      	adds	r3, #24
 8014902:	4619      	mov	r1, r3
 8014904:	68f8      	ldr	r0, [r7, #12]
 8014906:	f7fe f9da 	bl	8012cbe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	2b00      	cmp	r3, #0
 801490e:	d002      	beq.n	8014916 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8014910:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014914:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014916:	6879      	ldr	r1, [r7, #4]
 8014918:	68b8      	ldr	r0, [r7, #8]
 801491a:	f000 fd67 	bl	80153ec <prvAddCurrentTaskToDelayedList>
	}
 801491e:	bf00      	nop
 8014920:	3718      	adds	r7, #24
 8014922:	46bd      	mov	sp, r7
 8014924:	bd80      	pop	{r7, pc}
 8014926:	bf00      	nop
 8014928:	20002f70 	.word	0x20002f70

0801492c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801492c:	b580      	push	{r7, lr}
 801492e:	b086      	sub	sp, #24
 8014930:	af00      	add	r7, sp, #0
 8014932:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	68db      	ldr	r3, [r3, #12]
 8014938:	68db      	ldr	r3, [r3, #12]
 801493a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801493c:	693b      	ldr	r3, [r7, #16]
 801493e:	2b00      	cmp	r3, #0
 8014940:	d10a      	bne.n	8014958 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014946:	f383 8811 	msr	BASEPRI, r3
 801494a:	f3bf 8f6f 	isb	sy
 801494e:	f3bf 8f4f 	dsb	sy
 8014952:	60fb      	str	r3, [r7, #12]
}
 8014954:	bf00      	nop
 8014956:	e7fe      	b.n	8014956 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014958:	693b      	ldr	r3, [r7, #16]
 801495a:	3318      	adds	r3, #24
 801495c:	4618      	mov	r0, r3
 801495e:	f7fe fa0b 	bl	8012d78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014962:	4b1e      	ldr	r3, [pc, #120]	; (80149dc <xTaskRemoveFromEventList+0xb0>)
 8014964:	681b      	ldr	r3, [r3, #0]
 8014966:	2b00      	cmp	r3, #0
 8014968:	d11d      	bne.n	80149a6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801496a:	693b      	ldr	r3, [r7, #16]
 801496c:	3304      	adds	r3, #4
 801496e:	4618      	mov	r0, r3
 8014970:	f7fe fa02 	bl	8012d78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014974:	693b      	ldr	r3, [r7, #16]
 8014976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014978:	4b19      	ldr	r3, [pc, #100]	; (80149e0 <xTaskRemoveFromEventList+0xb4>)
 801497a:	681b      	ldr	r3, [r3, #0]
 801497c:	429a      	cmp	r2, r3
 801497e:	d903      	bls.n	8014988 <xTaskRemoveFromEventList+0x5c>
 8014980:	693b      	ldr	r3, [r7, #16]
 8014982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014984:	4a16      	ldr	r2, [pc, #88]	; (80149e0 <xTaskRemoveFromEventList+0xb4>)
 8014986:	6013      	str	r3, [r2, #0]
 8014988:	693b      	ldr	r3, [r7, #16]
 801498a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801498c:	4613      	mov	r3, r2
 801498e:	009b      	lsls	r3, r3, #2
 8014990:	4413      	add	r3, r2
 8014992:	009b      	lsls	r3, r3, #2
 8014994:	4a13      	ldr	r2, [pc, #76]	; (80149e4 <xTaskRemoveFromEventList+0xb8>)
 8014996:	441a      	add	r2, r3
 8014998:	693b      	ldr	r3, [r7, #16]
 801499a:	3304      	adds	r3, #4
 801499c:	4619      	mov	r1, r3
 801499e:	4610      	mov	r0, r2
 80149a0:	f7fe f98d 	bl	8012cbe <vListInsertEnd>
 80149a4:	e005      	b.n	80149b2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80149a6:	693b      	ldr	r3, [r7, #16]
 80149a8:	3318      	adds	r3, #24
 80149aa:	4619      	mov	r1, r3
 80149ac:	480e      	ldr	r0, [pc, #56]	; (80149e8 <xTaskRemoveFromEventList+0xbc>)
 80149ae:	f7fe f986 	bl	8012cbe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80149b2:	693b      	ldr	r3, [r7, #16]
 80149b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149b6:	4b0d      	ldr	r3, [pc, #52]	; (80149ec <xTaskRemoveFromEventList+0xc0>)
 80149b8:	681b      	ldr	r3, [r3, #0]
 80149ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149bc:	429a      	cmp	r2, r3
 80149be:	d905      	bls.n	80149cc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80149c0:	2301      	movs	r3, #1
 80149c2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80149c4:	4b0a      	ldr	r3, [pc, #40]	; (80149f0 <xTaskRemoveFromEventList+0xc4>)
 80149c6:	2201      	movs	r2, #1
 80149c8:	601a      	str	r2, [r3, #0]
 80149ca:	e001      	b.n	80149d0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80149cc:	2300      	movs	r3, #0
 80149ce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80149d0:	697b      	ldr	r3, [r7, #20]
}
 80149d2:	4618      	mov	r0, r3
 80149d4:	3718      	adds	r7, #24
 80149d6:	46bd      	mov	sp, r7
 80149d8:	bd80      	pop	{r7, pc}
 80149da:	bf00      	nop
 80149dc:	2000346c 	.word	0x2000346c
 80149e0:	2000344c 	.word	0x2000344c
 80149e4:	20002f74 	.word	0x20002f74
 80149e8:	20003404 	.word	0x20003404
 80149ec:	20002f70 	.word	0x20002f70
 80149f0:	20003458 	.word	0x20003458

080149f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80149f4:	b480      	push	{r7}
 80149f6:	b083      	sub	sp, #12
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80149fc:	4b06      	ldr	r3, [pc, #24]	; (8014a18 <vTaskInternalSetTimeOutState+0x24>)
 80149fe:	681a      	ldr	r2, [r3, #0]
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014a04:	4b05      	ldr	r3, [pc, #20]	; (8014a1c <vTaskInternalSetTimeOutState+0x28>)
 8014a06:	681a      	ldr	r2, [r3, #0]
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	605a      	str	r2, [r3, #4]
}
 8014a0c:	bf00      	nop
 8014a0e:	370c      	adds	r7, #12
 8014a10:	46bd      	mov	sp, r7
 8014a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a16:	4770      	bx	lr
 8014a18:	2000345c 	.word	0x2000345c
 8014a1c:	20003448 	.word	0x20003448

08014a20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b088      	sub	sp, #32
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	6078      	str	r0, [r7, #4]
 8014a28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d10a      	bne.n	8014a46 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a34:	f383 8811 	msr	BASEPRI, r3
 8014a38:	f3bf 8f6f 	isb	sy
 8014a3c:	f3bf 8f4f 	dsb	sy
 8014a40:	613b      	str	r3, [r7, #16]
}
 8014a42:	bf00      	nop
 8014a44:	e7fe      	b.n	8014a44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014a46:	683b      	ldr	r3, [r7, #0]
 8014a48:	2b00      	cmp	r3, #0
 8014a4a:	d10a      	bne.n	8014a62 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a50:	f383 8811 	msr	BASEPRI, r3
 8014a54:	f3bf 8f6f 	isb	sy
 8014a58:	f3bf 8f4f 	dsb	sy
 8014a5c:	60fb      	str	r3, [r7, #12]
}
 8014a5e:	bf00      	nop
 8014a60:	e7fe      	b.n	8014a60 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014a62:	f001 f98f 	bl	8015d84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014a66:	4b1d      	ldr	r3, [pc, #116]	; (8014adc <xTaskCheckForTimeOut+0xbc>)
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	685b      	ldr	r3, [r3, #4]
 8014a70:	69ba      	ldr	r2, [r7, #24]
 8014a72:	1ad3      	subs	r3, r2, r3
 8014a74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014a76:	683b      	ldr	r3, [r7, #0]
 8014a78:	681b      	ldr	r3, [r3, #0]
 8014a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014a7e:	d102      	bne.n	8014a86 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014a80:	2300      	movs	r3, #0
 8014a82:	61fb      	str	r3, [r7, #28]
 8014a84:	e023      	b.n	8014ace <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	681a      	ldr	r2, [r3, #0]
 8014a8a:	4b15      	ldr	r3, [pc, #84]	; (8014ae0 <xTaskCheckForTimeOut+0xc0>)
 8014a8c:	681b      	ldr	r3, [r3, #0]
 8014a8e:	429a      	cmp	r2, r3
 8014a90:	d007      	beq.n	8014aa2 <xTaskCheckForTimeOut+0x82>
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	685b      	ldr	r3, [r3, #4]
 8014a96:	69ba      	ldr	r2, [r7, #24]
 8014a98:	429a      	cmp	r2, r3
 8014a9a:	d302      	bcc.n	8014aa2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014a9c:	2301      	movs	r3, #1
 8014a9e:	61fb      	str	r3, [r7, #28]
 8014aa0:	e015      	b.n	8014ace <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014aa2:	683b      	ldr	r3, [r7, #0]
 8014aa4:	681b      	ldr	r3, [r3, #0]
 8014aa6:	697a      	ldr	r2, [r7, #20]
 8014aa8:	429a      	cmp	r2, r3
 8014aaa:	d20b      	bcs.n	8014ac4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014aac:	683b      	ldr	r3, [r7, #0]
 8014aae:	681a      	ldr	r2, [r3, #0]
 8014ab0:	697b      	ldr	r3, [r7, #20]
 8014ab2:	1ad2      	subs	r2, r2, r3
 8014ab4:	683b      	ldr	r3, [r7, #0]
 8014ab6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014ab8:	6878      	ldr	r0, [r7, #4]
 8014aba:	f7ff ff9b 	bl	80149f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014abe:	2300      	movs	r3, #0
 8014ac0:	61fb      	str	r3, [r7, #28]
 8014ac2:	e004      	b.n	8014ace <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014ac4:	683b      	ldr	r3, [r7, #0]
 8014ac6:	2200      	movs	r2, #0
 8014ac8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014aca:	2301      	movs	r3, #1
 8014acc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014ace:	f001 f989 	bl	8015de4 <vPortExitCritical>

	return xReturn;
 8014ad2:	69fb      	ldr	r3, [r7, #28]
}
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	3720      	adds	r7, #32
 8014ad8:	46bd      	mov	sp, r7
 8014ada:	bd80      	pop	{r7, pc}
 8014adc:	20003448 	.word	0x20003448
 8014ae0:	2000345c 	.word	0x2000345c

08014ae4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014ae4:	b480      	push	{r7}
 8014ae6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014ae8:	4b03      	ldr	r3, [pc, #12]	; (8014af8 <vTaskMissedYield+0x14>)
 8014aea:	2201      	movs	r2, #1
 8014aec:	601a      	str	r2, [r3, #0]
}
 8014aee:	bf00      	nop
 8014af0:	46bd      	mov	sp, r7
 8014af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af6:	4770      	bx	lr
 8014af8:	20003458 	.word	0x20003458

08014afc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014afc:	b580      	push	{r7, lr}
 8014afe:	b082      	sub	sp, #8
 8014b00:	af00      	add	r7, sp, #0
 8014b02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014b04:	f000 f852 	bl	8014bac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014b08:	4b06      	ldr	r3, [pc, #24]	; (8014b24 <prvIdleTask+0x28>)
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	2b01      	cmp	r3, #1
 8014b0e:	d9f9      	bls.n	8014b04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014b10:	4b05      	ldr	r3, [pc, #20]	; (8014b28 <prvIdleTask+0x2c>)
 8014b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014b16:	601a      	str	r2, [r3, #0]
 8014b18:	f3bf 8f4f 	dsb	sy
 8014b1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014b20:	e7f0      	b.n	8014b04 <prvIdleTask+0x8>
 8014b22:	bf00      	nop
 8014b24:	20002f74 	.word	0x20002f74
 8014b28:	e000ed04 	.word	0xe000ed04

08014b2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b082      	sub	sp, #8
 8014b30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014b32:	2300      	movs	r3, #0
 8014b34:	607b      	str	r3, [r7, #4]
 8014b36:	e00c      	b.n	8014b52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014b38:	687a      	ldr	r2, [r7, #4]
 8014b3a:	4613      	mov	r3, r2
 8014b3c:	009b      	lsls	r3, r3, #2
 8014b3e:	4413      	add	r3, r2
 8014b40:	009b      	lsls	r3, r3, #2
 8014b42:	4a12      	ldr	r2, [pc, #72]	; (8014b8c <prvInitialiseTaskLists+0x60>)
 8014b44:	4413      	add	r3, r2
 8014b46:	4618      	mov	r0, r3
 8014b48:	f7fe f88c 	bl	8012c64 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014b4c:	687b      	ldr	r3, [r7, #4]
 8014b4e:	3301      	adds	r3, #1
 8014b50:	607b      	str	r3, [r7, #4]
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	2b37      	cmp	r3, #55	; 0x37
 8014b56:	d9ef      	bls.n	8014b38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014b58:	480d      	ldr	r0, [pc, #52]	; (8014b90 <prvInitialiseTaskLists+0x64>)
 8014b5a:	f7fe f883 	bl	8012c64 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014b5e:	480d      	ldr	r0, [pc, #52]	; (8014b94 <prvInitialiseTaskLists+0x68>)
 8014b60:	f7fe f880 	bl	8012c64 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014b64:	480c      	ldr	r0, [pc, #48]	; (8014b98 <prvInitialiseTaskLists+0x6c>)
 8014b66:	f7fe f87d 	bl	8012c64 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014b6a:	480c      	ldr	r0, [pc, #48]	; (8014b9c <prvInitialiseTaskLists+0x70>)
 8014b6c:	f7fe f87a 	bl	8012c64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014b70:	480b      	ldr	r0, [pc, #44]	; (8014ba0 <prvInitialiseTaskLists+0x74>)
 8014b72:	f7fe f877 	bl	8012c64 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014b76:	4b0b      	ldr	r3, [pc, #44]	; (8014ba4 <prvInitialiseTaskLists+0x78>)
 8014b78:	4a05      	ldr	r2, [pc, #20]	; (8014b90 <prvInitialiseTaskLists+0x64>)
 8014b7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014b7c:	4b0a      	ldr	r3, [pc, #40]	; (8014ba8 <prvInitialiseTaskLists+0x7c>)
 8014b7e:	4a05      	ldr	r2, [pc, #20]	; (8014b94 <prvInitialiseTaskLists+0x68>)
 8014b80:	601a      	str	r2, [r3, #0]
}
 8014b82:	bf00      	nop
 8014b84:	3708      	adds	r7, #8
 8014b86:	46bd      	mov	sp, r7
 8014b88:	bd80      	pop	{r7, pc}
 8014b8a:	bf00      	nop
 8014b8c:	20002f74 	.word	0x20002f74
 8014b90:	200033d4 	.word	0x200033d4
 8014b94:	200033e8 	.word	0x200033e8
 8014b98:	20003404 	.word	0x20003404
 8014b9c:	20003418 	.word	0x20003418
 8014ba0:	20003430 	.word	0x20003430
 8014ba4:	200033fc 	.word	0x200033fc
 8014ba8:	20003400 	.word	0x20003400

08014bac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014bac:	b580      	push	{r7, lr}
 8014bae:	b082      	sub	sp, #8
 8014bb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014bb2:	e019      	b.n	8014be8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014bb4:	f001 f8e6 	bl	8015d84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014bb8:	4b10      	ldr	r3, [pc, #64]	; (8014bfc <prvCheckTasksWaitingTermination+0x50>)
 8014bba:	68db      	ldr	r3, [r3, #12]
 8014bbc:	68db      	ldr	r3, [r3, #12]
 8014bbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	3304      	adds	r3, #4
 8014bc4:	4618      	mov	r0, r3
 8014bc6:	f7fe f8d7 	bl	8012d78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014bca:	4b0d      	ldr	r3, [pc, #52]	; (8014c00 <prvCheckTasksWaitingTermination+0x54>)
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	3b01      	subs	r3, #1
 8014bd0:	4a0b      	ldr	r2, [pc, #44]	; (8014c00 <prvCheckTasksWaitingTermination+0x54>)
 8014bd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014bd4:	4b0b      	ldr	r3, [pc, #44]	; (8014c04 <prvCheckTasksWaitingTermination+0x58>)
 8014bd6:	681b      	ldr	r3, [r3, #0]
 8014bd8:	3b01      	subs	r3, #1
 8014bda:	4a0a      	ldr	r2, [pc, #40]	; (8014c04 <prvCheckTasksWaitingTermination+0x58>)
 8014bdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014bde:	f001 f901 	bl	8015de4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014be2:	6878      	ldr	r0, [r7, #4]
 8014be4:	f000 f8e4 	bl	8014db0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014be8:	4b06      	ldr	r3, [pc, #24]	; (8014c04 <prvCheckTasksWaitingTermination+0x58>)
 8014bea:	681b      	ldr	r3, [r3, #0]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d1e1      	bne.n	8014bb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014bf0:	bf00      	nop
 8014bf2:	bf00      	nop
 8014bf4:	3708      	adds	r7, #8
 8014bf6:	46bd      	mov	sp, r7
 8014bf8:	bd80      	pop	{r7, pc}
 8014bfa:	bf00      	nop
 8014bfc:	20003418 	.word	0x20003418
 8014c00:	20003444 	.word	0x20003444
 8014c04:	2000342c 	.word	0x2000342c

08014c08 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8014c08:	b580      	push	{r7, lr}
 8014c0a:	b086      	sub	sp, #24
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	60f8      	str	r0, [r7, #12]
 8014c10:	60b9      	str	r1, [r7, #8]
 8014c12:	607a      	str	r2, [r7, #4]
 8014c14:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d102      	bne.n	8014c22 <vTaskGetInfo+0x1a>
 8014c1c:	4b2c      	ldr	r3, [pc, #176]	; (8014cd0 <vTaskGetInfo+0xc8>)
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	e000      	b.n	8014c24 <vTaskGetInfo+0x1c>
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8014c26:	68bb      	ldr	r3, [r7, #8]
 8014c28:	697a      	ldr	r2, [r7, #20]
 8014c2a:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8014c2c:	697b      	ldr	r3, [r7, #20]
 8014c2e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8014c32:	68bb      	ldr	r3, [r7, #8]
 8014c34:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8014c36:	697b      	ldr	r3, [r7, #20]
 8014c38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c3a:	68bb      	ldr	r3, [r7, #8]
 8014c3c:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8014c3e:	697b      	ldr	r3, [r7, #20]
 8014c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014c42:	68bb      	ldr	r3, [r7, #8]
 8014c44:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8014c46:	697b      	ldr	r3, [r7, #20]
 8014c48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014c4a:	68bb      	ldr	r3, [r7, #8]
 8014c4c:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8014c4e:	697b      	ldr	r3, [r7, #20]
 8014c50:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014c52:	68bb      	ldr	r3, [r7, #8]
 8014c54:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8014c56:	697b      	ldr	r3, [r7, #20]
 8014c58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014c5a:	68bb      	ldr	r3, [r7, #8]
 8014c5c:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8014c5e:	78fb      	ldrb	r3, [r7, #3]
 8014c60:	2b05      	cmp	r3, #5
 8014c62:	d01a      	beq.n	8014c9a <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8014c64:	4b1a      	ldr	r3, [pc, #104]	; (8014cd0 <vTaskGetInfo+0xc8>)
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	697a      	ldr	r2, [r7, #20]
 8014c6a:	429a      	cmp	r2, r3
 8014c6c:	d103      	bne.n	8014c76 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8014c6e:	68bb      	ldr	r3, [r7, #8]
 8014c70:	2200      	movs	r2, #0
 8014c72:	731a      	strb	r2, [r3, #12]
 8014c74:	e018      	b.n	8014ca8 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8014c76:	68bb      	ldr	r3, [r7, #8]
 8014c78:	78fa      	ldrb	r2, [r7, #3]
 8014c7a:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8014c7c:	78fb      	ldrb	r3, [r7, #3]
 8014c7e:	2b03      	cmp	r3, #3
 8014c80:	d112      	bne.n	8014ca8 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8014c82:	f7ff fb7b 	bl	801437c <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014c86:	697b      	ldr	r3, [r7, #20]
 8014c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d002      	beq.n	8014c94 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8014c8e:	68bb      	ldr	r3, [r7, #8]
 8014c90:	2202      	movs	r2, #2
 8014c92:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8014c94:	f7ff fb80 	bl	8014398 <xTaskResumeAll>
 8014c98:	e006      	b.n	8014ca8 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8014c9a:	6978      	ldr	r0, [r7, #20]
 8014c9c:	f7ff fa94 	bl	80141c8 <eTaskGetState>
 8014ca0:	4603      	mov	r3, r0
 8014ca2:	461a      	mov	r2, r3
 8014ca4:	68bb      	ldr	r3, [r7, #8]
 8014ca6:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	d009      	beq.n	8014cc2 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8014cae:	697b      	ldr	r3, [r7, #20]
 8014cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	f000 f860 	bl	8014d78 <prvTaskCheckFreeStackSpace>
 8014cb8:	4603      	mov	r3, r0
 8014cba:	461a      	mov	r2, r3
 8014cbc:	68bb      	ldr	r3, [r7, #8]
 8014cbe:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8014cc0:	e002      	b.n	8014cc8 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 8014cc2:	68bb      	ldr	r3, [r7, #8]
 8014cc4:	2200      	movs	r2, #0
 8014cc6:	841a      	strh	r2, [r3, #32]
	}
 8014cc8:	bf00      	nop
 8014cca:	3718      	adds	r7, #24
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	bd80      	pop	{r7, pc}
 8014cd0:	20002f70 	.word	0x20002f70

08014cd4 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8014cd4:	b580      	push	{r7, lr}
 8014cd6:	b08a      	sub	sp, #40	; 0x28
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	60f8      	str	r0, [r7, #12]
 8014cdc:	60b9      	str	r1, [r7, #8]
 8014cde:	4613      	mov	r3, r2
 8014ce0:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 8014ce2:	2300      	movs	r3, #0
 8014ce4:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 8014ce6:	68bb      	ldr	r3, [r7, #8]
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d03f      	beq.n	8014d6e <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014cee:	68bb      	ldr	r3, [r7, #8]
 8014cf0:	623b      	str	r3, [r7, #32]
 8014cf2:	6a3b      	ldr	r3, [r7, #32]
 8014cf4:	685b      	ldr	r3, [r3, #4]
 8014cf6:	685a      	ldr	r2, [r3, #4]
 8014cf8:	6a3b      	ldr	r3, [r7, #32]
 8014cfa:	605a      	str	r2, [r3, #4]
 8014cfc:	6a3b      	ldr	r3, [r7, #32]
 8014cfe:	685a      	ldr	r2, [r3, #4]
 8014d00:	6a3b      	ldr	r3, [r7, #32]
 8014d02:	3308      	adds	r3, #8
 8014d04:	429a      	cmp	r2, r3
 8014d06:	d104      	bne.n	8014d12 <prvListTasksWithinSingleList+0x3e>
 8014d08:	6a3b      	ldr	r3, [r7, #32]
 8014d0a:	685b      	ldr	r3, [r3, #4]
 8014d0c:	685a      	ldr	r2, [r3, #4]
 8014d0e:	6a3b      	ldr	r3, [r7, #32]
 8014d10:	605a      	str	r2, [r3, #4]
 8014d12:	6a3b      	ldr	r3, [r7, #32]
 8014d14:	685b      	ldr	r3, [r3, #4]
 8014d16:	68db      	ldr	r3, [r3, #12]
 8014d18:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014d1a:	68bb      	ldr	r3, [r7, #8]
 8014d1c:	61bb      	str	r3, [r7, #24]
 8014d1e:	69bb      	ldr	r3, [r7, #24]
 8014d20:	685b      	ldr	r3, [r3, #4]
 8014d22:	685a      	ldr	r2, [r3, #4]
 8014d24:	69bb      	ldr	r3, [r7, #24]
 8014d26:	605a      	str	r2, [r3, #4]
 8014d28:	69bb      	ldr	r3, [r7, #24]
 8014d2a:	685a      	ldr	r2, [r3, #4]
 8014d2c:	69bb      	ldr	r3, [r7, #24]
 8014d2e:	3308      	adds	r3, #8
 8014d30:	429a      	cmp	r2, r3
 8014d32:	d104      	bne.n	8014d3e <prvListTasksWithinSingleList+0x6a>
 8014d34:	69bb      	ldr	r3, [r7, #24]
 8014d36:	685b      	ldr	r3, [r3, #4]
 8014d38:	685a      	ldr	r2, [r3, #4]
 8014d3a:	69bb      	ldr	r3, [r7, #24]
 8014d3c:	605a      	str	r2, [r3, #4]
 8014d3e:	69bb      	ldr	r3, [r7, #24]
 8014d40:	685b      	ldr	r3, [r3, #4]
 8014d42:	68db      	ldr	r3, [r3, #12]
 8014d44:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8014d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014d48:	4613      	mov	r3, r2
 8014d4a:	00db      	lsls	r3, r3, #3
 8014d4c:	4413      	add	r3, r2
 8014d4e:	009b      	lsls	r3, r3, #2
 8014d50:	461a      	mov	r2, r3
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	1899      	adds	r1, r3, r2
 8014d56:	79fb      	ldrb	r3, [r7, #7]
 8014d58:	2201      	movs	r2, #1
 8014d5a:	6978      	ldr	r0, [r7, #20]
 8014d5c:	f7ff ff54 	bl	8014c08 <vTaskGetInfo>
				uxTask++;
 8014d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d62:	3301      	adds	r3, #1
 8014d64:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8014d66:	697a      	ldr	r2, [r7, #20]
 8014d68:	69fb      	ldr	r3, [r7, #28]
 8014d6a:	429a      	cmp	r2, r3
 8014d6c:	d1d5      	bne.n	8014d1a <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 8014d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014d70:	4618      	mov	r0, r3
 8014d72:	3728      	adds	r7, #40	; 0x28
 8014d74:	46bd      	mov	sp, r7
 8014d76:	bd80      	pop	{r7, pc}

08014d78 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8014d78:	b480      	push	{r7}
 8014d7a:	b085      	sub	sp, #20
 8014d7c:	af00      	add	r7, sp, #0
 8014d7e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8014d80:	2300      	movs	r3, #0
 8014d82:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8014d84:	e005      	b.n	8014d92 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	3301      	adds	r3, #1
 8014d8a:	607b      	str	r3, [r7, #4]
			ulCount++;
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	3301      	adds	r3, #1
 8014d90:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	781b      	ldrb	r3, [r3, #0]
 8014d96:	2ba5      	cmp	r3, #165	; 0xa5
 8014d98:	d0f5      	beq.n	8014d86 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8014d9a:	68fb      	ldr	r3, [r7, #12]
 8014d9c:	089b      	lsrs	r3, r3, #2
 8014d9e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8014da0:	68fb      	ldr	r3, [r7, #12]
 8014da2:	b29b      	uxth	r3, r3
	}
 8014da4:	4618      	mov	r0, r3
 8014da6:	3714      	adds	r7, #20
 8014da8:	46bd      	mov	sp, r7
 8014daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dae:	4770      	bx	lr

08014db0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014db0:	b580      	push	{r7, lr}
 8014db2:	b084      	sub	sp, #16
 8014db4:	af00      	add	r7, sp, #0
 8014db6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	3358      	adds	r3, #88	; 0x58
 8014dbc:	4618      	mov	r0, r3
 8014dbe:	f002 fea7 	bl	8017b10 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014dc2:	687b      	ldr	r3, [r7, #4]
 8014dc4:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8014dc8:	2b00      	cmp	r3, #0
 8014dca:	d108      	bne.n	8014dde <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014dcc:	687b      	ldr	r3, [r7, #4]
 8014dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	f001 f9c5 	bl	8016160 <vPortFree>
				vPortFree( pxTCB );
 8014dd6:	6878      	ldr	r0, [r7, #4]
 8014dd8:	f001 f9c2 	bl	8016160 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014ddc:	e018      	b.n	8014e10 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8014de4:	2b01      	cmp	r3, #1
 8014de6:	d103      	bne.n	8014df0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8014de8:	6878      	ldr	r0, [r7, #4]
 8014dea:	f001 f9b9 	bl	8016160 <vPortFree>
	}
 8014dee:	e00f      	b.n	8014e10 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8014df6:	2b02      	cmp	r3, #2
 8014df8:	d00a      	beq.n	8014e10 <prvDeleteTCB+0x60>
	__asm volatile
 8014dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dfe:	f383 8811 	msr	BASEPRI, r3
 8014e02:	f3bf 8f6f 	isb	sy
 8014e06:	f3bf 8f4f 	dsb	sy
 8014e0a:	60fb      	str	r3, [r7, #12]
}
 8014e0c:	bf00      	nop
 8014e0e:	e7fe      	b.n	8014e0e <prvDeleteTCB+0x5e>
	}
 8014e10:	bf00      	nop
 8014e12:	3710      	adds	r7, #16
 8014e14:	46bd      	mov	sp, r7
 8014e16:	bd80      	pop	{r7, pc}

08014e18 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014e18:	b480      	push	{r7}
 8014e1a:	b083      	sub	sp, #12
 8014e1c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014e1e:	4b0c      	ldr	r3, [pc, #48]	; (8014e50 <prvResetNextTaskUnblockTime+0x38>)
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	681b      	ldr	r3, [r3, #0]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d104      	bne.n	8014e32 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014e28:	4b0a      	ldr	r3, [pc, #40]	; (8014e54 <prvResetNextTaskUnblockTime+0x3c>)
 8014e2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014e2e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014e30:	e008      	b.n	8014e44 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014e32:	4b07      	ldr	r3, [pc, #28]	; (8014e50 <prvResetNextTaskUnblockTime+0x38>)
 8014e34:	681b      	ldr	r3, [r3, #0]
 8014e36:	68db      	ldr	r3, [r3, #12]
 8014e38:	68db      	ldr	r3, [r3, #12]
 8014e3a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	685b      	ldr	r3, [r3, #4]
 8014e40:	4a04      	ldr	r2, [pc, #16]	; (8014e54 <prvResetNextTaskUnblockTime+0x3c>)
 8014e42:	6013      	str	r3, [r2, #0]
}
 8014e44:	bf00      	nop
 8014e46:	370c      	adds	r7, #12
 8014e48:	46bd      	mov	sp, r7
 8014e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e4e:	4770      	bx	lr
 8014e50:	200033fc 	.word	0x200033fc
 8014e54:	20003464 	.word	0x20003464

08014e58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014e58:	b480      	push	{r7}
 8014e5a:	b083      	sub	sp, #12
 8014e5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014e5e:	4b0b      	ldr	r3, [pc, #44]	; (8014e8c <xTaskGetSchedulerState+0x34>)
 8014e60:	681b      	ldr	r3, [r3, #0]
 8014e62:	2b00      	cmp	r3, #0
 8014e64:	d102      	bne.n	8014e6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014e66:	2301      	movs	r3, #1
 8014e68:	607b      	str	r3, [r7, #4]
 8014e6a:	e008      	b.n	8014e7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014e6c:	4b08      	ldr	r3, [pc, #32]	; (8014e90 <xTaskGetSchedulerState+0x38>)
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d102      	bne.n	8014e7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014e74:	2302      	movs	r3, #2
 8014e76:	607b      	str	r3, [r7, #4]
 8014e78:	e001      	b.n	8014e7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014e7e:	687b      	ldr	r3, [r7, #4]
	}
 8014e80:	4618      	mov	r0, r3
 8014e82:	370c      	adds	r7, #12
 8014e84:	46bd      	mov	sp, r7
 8014e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e8a:	4770      	bx	lr
 8014e8c:	20003450 	.word	0x20003450
 8014e90:	2000346c 	.word	0x2000346c

08014e94 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8014e94:	b580      	push	{r7, lr}
 8014e96:	b084      	sub	sp, #16
 8014e98:	af00      	add	r7, sp, #0
 8014e9a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014ea0:	2300      	movs	r3, #0
 8014ea2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d051      	beq.n	8014f4e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014eaa:	68bb      	ldr	r3, [r7, #8]
 8014eac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014eae:	4b2a      	ldr	r3, [pc, #168]	; (8014f58 <xTaskPriorityInherit+0xc4>)
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014eb4:	429a      	cmp	r2, r3
 8014eb6:	d241      	bcs.n	8014f3c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014eb8:	68bb      	ldr	r3, [r7, #8]
 8014eba:	699b      	ldr	r3, [r3, #24]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	db06      	blt.n	8014ece <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014ec0:	4b25      	ldr	r3, [pc, #148]	; (8014f58 <xTaskPriorityInherit+0xc4>)
 8014ec2:	681b      	ldr	r3, [r3, #0]
 8014ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014ec6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014eca:	68bb      	ldr	r3, [r7, #8]
 8014ecc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014ece:	68bb      	ldr	r3, [r7, #8]
 8014ed0:	6959      	ldr	r1, [r3, #20]
 8014ed2:	68bb      	ldr	r3, [r7, #8]
 8014ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ed6:	4613      	mov	r3, r2
 8014ed8:	009b      	lsls	r3, r3, #2
 8014eda:	4413      	add	r3, r2
 8014edc:	009b      	lsls	r3, r3, #2
 8014ede:	4a1f      	ldr	r2, [pc, #124]	; (8014f5c <xTaskPriorityInherit+0xc8>)
 8014ee0:	4413      	add	r3, r2
 8014ee2:	4299      	cmp	r1, r3
 8014ee4:	d122      	bne.n	8014f2c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014ee6:	68bb      	ldr	r3, [r7, #8]
 8014ee8:	3304      	adds	r3, #4
 8014eea:	4618      	mov	r0, r3
 8014eec:	f7fd ff44 	bl	8012d78 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014ef0:	4b19      	ldr	r3, [pc, #100]	; (8014f58 <xTaskPriorityInherit+0xc4>)
 8014ef2:	681b      	ldr	r3, [r3, #0]
 8014ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ef6:	68bb      	ldr	r3, [r7, #8]
 8014ef8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8014efa:	68bb      	ldr	r3, [r7, #8]
 8014efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014efe:	4b18      	ldr	r3, [pc, #96]	; (8014f60 <xTaskPriorityInherit+0xcc>)
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	429a      	cmp	r2, r3
 8014f04:	d903      	bls.n	8014f0e <xTaskPriorityInherit+0x7a>
 8014f06:	68bb      	ldr	r3, [r7, #8]
 8014f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f0a:	4a15      	ldr	r2, [pc, #84]	; (8014f60 <xTaskPriorityInherit+0xcc>)
 8014f0c:	6013      	str	r3, [r2, #0]
 8014f0e:	68bb      	ldr	r3, [r7, #8]
 8014f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f12:	4613      	mov	r3, r2
 8014f14:	009b      	lsls	r3, r3, #2
 8014f16:	4413      	add	r3, r2
 8014f18:	009b      	lsls	r3, r3, #2
 8014f1a:	4a10      	ldr	r2, [pc, #64]	; (8014f5c <xTaskPriorityInherit+0xc8>)
 8014f1c:	441a      	add	r2, r3
 8014f1e:	68bb      	ldr	r3, [r7, #8]
 8014f20:	3304      	adds	r3, #4
 8014f22:	4619      	mov	r1, r3
 8014f24:	4610      	mov	r0, r2
 8014f26:	f7fd feca 	bl	8012cbe <vListInsertEnd>
 8014f2a:	e004      	b.n	8014f36 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014f2c:	4b0a      	ldr	r3, [pc, #40]	; (8014f58 <xTaskPriorityInherit+0xc4>)
 8014f2e:	681b      	ldr	r3, [r3, #0]
 8014f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f32:	68bb      	ldr	r3, [r7, #8]
 8014f34:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8014f36:	2301      	movs	r3, #1
 8014f38:	60fb      	str	r3, [r7, #12]
 8014f3a:	e008      	b.n	8014f4e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014f3c:	68bb      	ldr	r3, [r7, #8]
 8014f3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014f40:	4b05      	ldr	r3, [pc, #20]	; (8014f58 <xTaskPriorityInherit+0xc4>)
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014f46:	429a      	cmp	r2, r3
 8014f48:	d201      	bcs.n	8014f4e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014f4a:	2301      	movs	r3, #1
 8014f4c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014f4e:	68fb      	ldr	r3, [r7, #12]
	}
 8014f50:	4618      	mov	r0, r3
 8014f52:	3710      	adds	r7, #16
 8014f54:	46bd      	mov	sp, r7
 8014f56:	bd80      	pop	{r7, pc}
 8014f58:	20002f70 	.word	0x20002f70
 8014f5c:	20002f74 	.word	0x20002f74
 8014f60:	2000344c 	.word	0x2000344c

08014f64 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014f64:	b580      	push	{r7, lr}
 8014f66:	b086      	sub	sp, #24
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014f6c:	687b      	ldr	r3, [r7, #4]
 8014f6e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014f70:	2300      	movs	r3, #0
 8014f72:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	d056      	beq.n	8015028 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014f7a:	4b2e      	ldr	r3, [pc, #184]	; (8015034 <xTaskPriorityDisinherit+0xd0>)
 8014f7c:	681b      	ldr	r3, [r3, #0]
 8014f7e:	693a      	ldr	r2, [r7, #16]
 8014f80:	429a      	cmp	r2, r3
 8014f82:	d00a      	beq.n	8014f9a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8014f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f88:	f383 8811 	msr	BASEPRI, r3
 8014f8c:	f3bf 8f6f 	isb	sy
 8014f90:	f3bf 8f4f 	dsb	sy
 8014f94:	60fb      	str	r3, [r7, #12]
}
 8014f96:	bf00      	nop
 8014f98:	e7fe      	b.n	8014f98 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014f9a:	693b      	ldr	r3, [r7, #16]
 8014f9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d10a      	bne.n	8014fb8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8014fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fa6:	f383 8811 	msr	BASEPRI, r3
 8014faa:	f3bf 8f6f 	isb	sy
 8014fae:	f3bf 8f4f 	dsb	sy
 8014fb2:	60bb      	str	r3, [r7, #8]
}
 8014fb4:	bf00      	nop
 8014fb6:	e7fe      	b.n	8014fb6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8014fb8:	693b      	ldr	r3, [r7, #16]
 8014fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014fbc:	1e5a      	subs	r2, r3, #1
 8014fbe:	693b      	ldr	r3, [r7, #16]
 8014fc0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014fc2:	693b      	ldr	r3, [r7, #16]
 8014fc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fc6:	693b      	ldr	r3, [r7, #16]
 8014fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014fca:	429a      	cmp	r2, r3
 8014fcc:	d02c      	beq.n	8015028 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014fce:	693b      	ldr	r3, [r7, #16]
 8014fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d128      	bne.n	8015028 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014fd6:	693b      	ldr	r3, [r7, #16]
 8014fd8:	3304      	adds	r3, #4
 8014fda:	4618      	mov	r0, r3
 8014fdc:	f7fd fecc 	bl	8012d78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014fe0:	693b      	ldr	r3, [r7, #16]
 8014fe2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014fe4:	693b      	ldr	r3, [r7, #16]
 8014fe6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014fe8:	693b      	ldr	r3, [r7, #16]
 8014fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014ff0:	693b      	ldr	r3, [r7, #16]
 8014ff2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014ff4:	693b      	ldr	r3, [r7, #16]
 8014ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ff8:	4b0f      	ldr	r3, [pc, #60]	; (8015038 <xTaskPriorityDisinherit+0xd4>)
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	429a      	cmp	r2, r3
 8014ffe:	d903      	bls.n	8015008 <xTaskPriorityDisinherit+0xa4>
 8015000:	693b      	ldr	r3, [r7, #16]
 8015002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015004:	4a0c      	ldr	r2, [pc, #48]	; (8015038 <xTaskPriorityDisinherit+0xd4>)
 8015006:	6013      	str	r3, [r2, #0]
 8015008:	693b      	ldr	r3, [r7, #16]
 801500a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801500c:	4613      	mov	r3, r2
 801500e:	009b      	lsls	r3, r3, #2
 8015010:	4413      	add	r3, r2
 8015012:	009b      	lsls	r3, r3, #2
 8015014:	4a09      	ldr	r2, [pc, #36]	; (801503c <xTaskPriorityDisinherit+0xd8>)
 8015016:	441a      	add	r2, r3
 8015018:	693b      	ldr	r3, [r7, #16]
 801501a:	3304      	adds	r3, #4
 801501c:	4619      	mov	r1, r3
 801501e:	4610      	mov	r0, r2
 8015020:	f7fd fe4d 	bl	8012cbe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015024:	2301      	movs	r3, #1
 8015026:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015028:	697b      	ldr	r3, [r7, #20]
	}
 801502a:	4618      	mov	r0, r3
 801502c:	3718      	adds	r7, #24
 801502e:	46bd      	mov	sp, r7
 8015030:	bd80      	pop	{r7, pc}
 8015032:	bf00      	nop
 8015034:	20002f70 	.word	0x20002f70
 8015038:	2000344c 	.word	0x2000344c
 801503c:	20002f74 	.word	0x20002f74

08015040 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015040:	b580      	push	{r7, lr}
 8015042:	b088      	sub	sp, #32
 8015044:	af00      	add	r7, sp, #0
 8015046:	6078      	str	r0, [r7, #4]
 8015048:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801504e:	2301      	movs	r3, #1
 8015050:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	2b00      	cmp	r3, #0
 8015056:	d06a      	beq.n	801512e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8015058:	69bb      	ldr	r3, [r7, #24]
 801505a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801505c:	2b00      	cmp	r3, #0
 801505e:	d10a      	bne.n	8015076 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8015060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015064:	f383 8811 	msr	BASEPRI, r3
 8015068:	f3bf 8f6f 	isb	sy
 801506c:	f3bf 8f4f 	dsb	sy
 8015070:	60fb      	str	r3, [r7, #12]
}
 8015072:	bf00      	nop
 8015074:	e7fe      	b.n	8015074 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8015076:	69bb      	ldr	r3, [r7, #24]
 8015078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801507a:	683a      	ldr	r2, [r7, #0]
 801507c:	429a      	cmp	r2, r3
 801507e:	d902      	bls.n	8015086 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015080:	683b      	ldr	r3, [r7, #0]
 8015082:	61fb      	str	r3, [r7, #28]
 8015084:	e002      	b.n	801508c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8015086:	69bb      	ldr	r3, [r7, #24]
 8015088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801508a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801508c:	69bb      	ldr	r3, [r7, #24]
 801508e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015090:	69fa      	ldr	r2, [r7, #28]
 8015092:	429a      	cmp	r2, r3
 8015094:	d04b      	beq.n	801512e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8015096:	69bb      	ldr	r3, [r7, #24]
 8015098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801509a:	697a      	ldr	r2, [r7, #20]
 801509c:	429a      	cmp	r2, r3
 801509e:	d146      	bne.n	801512e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80150a0:	4b25      	ldr	r3, [pc, #148]	; (8015138 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80150a2:	681b      	ldr	r3, [r3, #0]
 80150a4:	69ba      	ldr	r2, [r7, #24]
 80150a6:	429a      	cmp	r2, r3
 80150a8:	d10a      	bne.n	80150c0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80150aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150ae:	f383 8811 	msr	BASEPRI, r3
 80150b2:	f3bf 8f6f 	isb	sy
 80150b6:	f3bf 8f4f 	dsb	sy
 80150ba:	60bb      	str	r3, [r7, #8]
}
 80150bc:	bf00      	nop
 80150be:	e7fe      	b.n	80150be <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80150c0:	69bb      	ldr	r3, [r7, #24]
 80150c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150c4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80150c6:	69bb      	ldr	r3, [r7, #24]
 80150c8:	69fa      	ldr	r2, [r7, #28]
 80150ca:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80150cc:	69bb      	ldr	r3, [r7, #24]
 80150ce:	699b      	ldr	r3, [r3, #24]
 80150d0:	2b00      	cmp	r3, #0
 80150d2:	db04      	blt.n	80150de <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80150d4:	69fb      	ldr	r3, [r7, #28]
 80150d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80150da:	69bb      	ldr	r3, [r7, #24]
 80150dc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80150de:	69bb      	ldr	r3, [r7, #24]
 80150e0:	6959      	ldr	r1, [r3, #20]
 80150e2:	693a      	ldr	r2, [r7, #16]
 80150e4:	4613      	mov	r3, r2
 80150e6:	009b      	lsls	r3, r3, #2
 80150e8:	4413      	add	r3, r2
 80150ea:	009b      	lsls	r3, r3, #2
 80150ec:	4a13      	ldr	r2, [pc, #76]	; (801513c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80150ee:	4413      	add	r3, r2
 80150f0:	4299      	cmp	r1, r3
 80150f2:	d11c      	bne.n	801512e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80150f4:	69bb      	ldr	r3, [r7, #24]
 80150f6:	3304      	adds	r3, #4
 80150f8:	4618      	mov	r0, r3
 80150fa:	f7fd fe3d 	bl	8012d78 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80150fe:	69bb      	ldr	r3, [r7, #24]
 8015100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015102:	4b0f      	ldr	r3, [pc, #60]	; (8015140 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	429a      	cmp	r2, r3
 8015108:	d903      	bls.n	8015112 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 801510a:	69bb      	ldr	r3, [r7, #24]
 801510c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801510e:	4a0c      	ldr	r2, [pc, #48]	; (8015140 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8015110:	6013      	str	r3, [r2, #0]
 8015112:	69bb      	ldr	r3, [r7, #24]
 8015114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015116:	4613      	mov	r3, r2
 8015118:	009b      	lsls	r3, r3, #2
 801511a:	4413      	add	r3, r2
 801511c:	009b      	lsls	r3, r3, #2
 801511e:	4a07      	ldr	r2, [pc, #28]	; (801513c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8015120:	441a      	add	r2, r3
 8015122:	69bb      	ldr	r3, [r7, #24]
 8015124:	3304      	adds	r3, #4
 8015126:	4619      	mov	r1, r3
 8015128:	4610      	mov	r0, r2
 801512a:	f7fd fdc8 	bl	8012cbe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801512e:	bf00      	nop
 8015130:	3720      	adds	r7, #32
 8015132:	46bd      	mov	sp, r7
 8015134:	bd80      	pop	{r7, pc}
 8015136:	bf00      	nop
 8015138:	20002f70 	.word	0x20002f70
 801513c:	20002f74 	.word	0x20002f74
 8015140:	2000344c 	.word	0x2000344c

08015144 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8015144:	b580      	push	{r7, lr}
 8015146:	b084      	sub	sp, #16
 8015148:	af00      	add	r7, sp, #0
 801514a:	6078      	str	r0, [r7, #4]
 801514c:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 801514e:	6839      	ldr	r1, [r7, #0]
 8015150:	6878      	ldr	r0, [r7, #4]
 8015152:	f002 fdbb 	bl	8017ccc <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8015156:	6878      	ldr	r0, [r7, #4]
 8015158:	f7eb f83a 	bl	80001d0 <strlen>
 801515c:	60f8      	str	r0, [r7, #12]
 801515e:	e007      	b.n	8015170 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8015160:	687a      	ldr	r2, [r7, #4]
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	4413      	add	r3, r2
 8015166:	2220      	movs	r2, #32
 8015168:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 801516a:	68fb      	ldr	r3, [r7, #12]
 801516c:	3301      	adds	r3, #1
 801516e:	60fb      	str	r3, [r7, #12]
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	2b0e      	cmp	r3, #14
 8015174:	d9f4      	bls.n	8015160 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8015176:	687a      	ldr	r2, [r7, #4]
 8015178:	68fb      	ldr	r3, [r7, #12]
 801517a:	4413      	add	r3, r2
 801517c:	2200      	movs	r2, #0
 801517e:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8015180:	687a      	ldr	r2, [r7, #4]
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	4413      	add	r3, r2
	}
 8015186:	4618      	mov	r0, r3
 8015188:	3710      	adds	r7, #16
 801518a:	46bd      	mov	sp, r7
 801518c:	bd80      	pop	{r7, pc}
	...

08015190 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8015190:	b590      	push	{r4, r7, lr}
 8015192:	b089      	sub	sp, #36	; 0x24
 8015194:	af02      	add	r7, sp, #8
 8015196:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	2200      	movs	r2, #0
 801519c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 801519e:	4b45      	ldr	r3, [pc, #276]	; (80152b4 <vTaskList+0x124>)
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 80151a4:	4b43      	ldr	r3, [pc, #268]	; (80152b4 <vTaskList+0x124>)
 80151a6:	681a      	ldr	r2, [r3, #0]
 80151a8:	4613      	mov	r3, r2
 80151aa:	00db      	lsls	r3, r3, #3
 80151ac:	4413      	add	r3, r2
 80151ae:	009b      	lsls	r3, r3, #2
 80151b0:	4618      	mov	r0, r3
 80151b2:	f000 ff09 	bl	8015fc8 <pvPortMalloc>
 80151b6:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 80151b8:	68bb      	ldr	r3, [r7, #8]
 80151ba:	2b00      	cmp	r3, #0
 80151bc:	d076      	beq.n	80152ac <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 80151be:	2200      	movs	r2, #0
 80151c0:	68f9      	ldr	r1, [r7, #12]
 80151c2:	68b8      	ldr	r0, [r7, #8]
 80151c4:	f7ff f996 	bl	80144f4 <uxTaskGetSystemState>
 80151c8:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 80151ca:	2300      	movs	r3, #0
 80151cc:	617b      	str	r3, [r7, #20]
 80151ce:	e066      	b.n	801529e <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 80151d0:	697a      	ldr	r2, [r7, #20]
 80151d2:	4613      	mov	r3, r2
 80151d4:	00db      	lsls	r3, r3, #3
 80151d6:	4413      	add	r3, r2
 80151d8:	009b      	lsls	r3, r3, #2
 80151da:	461a      	mov	r2, r3
 80151dc:	68bb      	ldr	r3, [r7, #8]
 80151de:	4413      	add	r3, r2
 80151e0:	7b1b      	ldrb	r3, [r3, #12]
 80151e2:	2b04      	cmp	r3, #4
 80151e4:	d81b      	bhi.n	801521e <vTaskList+0x8e>
 80151e6:	a201      	add	r2, pc, #4	; (adr r2, 80151ec <vTaskList+0x5c>)
 80151e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80151ec:	08015201 	.word	0x08015201
 80151f0:	08015207 	.word	0x08015207
 80151f4:	0801520d 	.word	0x0801520d
 80151f8:	08015213 	.word	0x08015213
 80151fc:	08015219 	.word	0x08015219
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8015200:	2358      	movs	r3, #88	; 0x58
 8015202:	74fb      	strb	r3, [r7, #19]
										break;
 8015204:	e00e      	b.n	8015224 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 8015206:	2352      	movs	r3, #82	; 0x52
 8015208:	74fb      	strb	r3, [r7, #19]
										break;
 801520a:	e00b      	b.n	8015224 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 801520c:	2342      	movs	r3, #66	; 0x42
 801520e:	74fb      	strb	r3, [r7, #19]
										break;
 8015210:	e008      	b.n	8015224 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8015212:	2353      	movs	r3, #83	; 0x53
 8015214:	74fb      	strb	r3, [r7, #19]
										break;
 8015216:	e005      	b.n	8015224 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8015218:	2344      	movs	r3, #68	; 0x44
 801521a:	74fb      	strb	r3, [r7, #19]
										break;
 801521c:	e002      	b.n	8015224 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 801521e:	2300      	movs	r3, #0
 8015220:	74fb      	strb	r3, [r7, #19]
										break;
 8015222:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8015224:	697a      	ldr	r2, [r7, #20]
 8015226:	4613      	mov	r3, r2
 8015228:	00db      	lsls	r3, r3, #3
 801522a:	4413      	add	r3, r2
 801522c:	009b      	lsls	r3, r3, #2
 801522e:	461a      	mov	r2, r3
 8015230:	68bb      	ldr	r3, [r7, #8]
 8015232:	4413      	add	r3, r2
 8015234:	685b      	ldr	r3, [r3, #4]
 8015236:	4619      	mov	r1, r3
 8015238:	6878      	ldr	r0, [r7, #4]
 801523a:	f7ff ff83 	bl	8015144 <prvWriteNameToBuffer>
 801523e:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8015240:	7cf9      	ldrb	r1, [r7, #19]
 8015242:	697a      	ldr	r2, [r7, #20]
 8015244:	4613      	mov	r3, r2
 8015246:	00db      	lsls	r3, r3, #3
 8015248:	4413      	add	r3, r2
 801524a:	009b      	lsls	r3, r3, #2
 801524c:	461a      	mov	r2, r3
 801524e:	68bb      	ldr	r3, [r7, #8]
 8015250:	4413      	add	r3, r2
 8015252:	6918      	ldr	r0, [r3, #16]
 8015254:	697a      	ldr	r2, [r7, #20]
 8015256:	4613      	mov	r3, r2
 8015258:	00db      	lsls	r3, r3, #3
 801525a:	4413      	add	r3, r2
 801525c:	009b      	lsls	r3, r3, #2
 801525e:	461a      	mov	r2, r3
 8015260:	68bb      	ldr	r3, [r7, #8]
 8015262:	4413      	add	r3, r2
 8015264:	8c1b      	ldrh	r3, [r3, #32]
 8015266:	461c      	mov	r4, r3
 8015268:	697a      	ldr	r2, [r7, #20]
 801526a:	4613      	mov	r3, r2
 801526c:	00db      	lsls	r3, r3, #3
 801526e:	4413      	add	r3, r2
 8015270:	009b      	lsls	r3, r3, #2
 8015272:	461a      	mov	r2, r3
 8015274:	68bb      	ldr	r3, [r7, #8]
 8015276:	4413      	add	r3, r2
 8015278:	689b      	ldr	r3, [r3, #8]
 801527a:	9301      	str	r3, [sp, #4]
 801527c:	9400      	str	r4, [sp, #0]
 801527e:	4603      	mov	r3, r0
 8015280:	460a      	mov	r2, r1
 8015282:	490d      	ldr	r1, [pc, #52]	; (80152b8 <vTaskList+0x128>)
 8015284:	6878      	ldr	r0, [r7, #4]
 8015286:	f002 fcaf 	bl	8017be8 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 801528a:	6878      	ldr	r0, [r7, #4]
 801528c:	f7ea ffa0 	bl	80001d0 <strlen>
 8015290:	4602      	mov	r2, r0
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	4413      	add	r3, r2
 8015296:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8015298:	697b      	ldr	r3, [r7, #20]
 801529a:	3301      	adds	r3, #1
 801529c:	617b      	str	r3, [r7, #20]
 801529e:	697a      	ldr	r2, [r7, #20]
 80152a0:	68fb      	ldr	r3, [r7, #12]
 80152a2:	429a      	cmp	r2, r3
 80152a4:	d394      	bcc.n	80151d0 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 80152a6:	68b8      	ldr	r0, [r7, #8]
 80152a8:	f000 ff5a 	bl	8016160 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80152ac:	bf00      	nop
 80152ae:	371c      	adds	r7, #28
 80152b0:	46bd      	mov	sp, r7
 80152b2:	bd90      	pop	{r4, r7, pc}
 80152b4:	20003444 	.word	0x20003444
 80152b8:	0801a414 	.word	0x0801a414

080152bc <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 80152bc:	b580      	push	{r7, lr}
 80152be:	b088      	sub	sp, #32
 80152c0:	af00      	add	r7, sp, #0
 80152c2:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	2200      	movs	r2, #0
 80152c8:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 80152ca:	4b3a      	ldr	r3, [pc, #232]	; (80153b4 <vTaskGetRunTimeStats+0xf8>)
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 80152d0:	4b38      	ldr	r3, [pc, #224]	; (80153b4 <vTaskGetRunTimeStats+0xf8>)
 80152d2:	681a      	ldr	r2, [r3, #0]
 80152d4:	4613      	mov	r3, r2
 80152d6:	00db      	lsls	r3, r3, #3
 80152d8:	4413      	add	r3, r2
 80152da:	009b      	lsls	r3, r3, #2
 80152dc:	4618      	mov	r0, r3
 80152de:	f000 fe73 	bl	8015fc8 <pvPortMalloc>
 80152e2:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 80152e4:	697b      	ldr	r3, [r7, #20]
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d05f      	beq.n	80153aa <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 80152ea:	f107 030c 	add.w	r3, r7, #12
 80152ee:	461a      	mov	r2, r3
 80152f0:	69b9      	ldr	r1, [r7, #24]
 80152f2:	6978      	ldr	r0, [r7, #20]
 80152f4:	f7ff f8fe 	bl	80144f4 <uxTaskGetSystemState>
 80152f8:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	4a2e      	ldr	r2, [pc, #184]	; (80153b8 <vTaskGetRunTimeStats+0xfc>)
 80152fe:	fba2 2303 	umull	r2, r3, r2, r3
 8015302:	095b      	lsrs	r3, r3, #5
 8015304:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 8015306:	68fb      	ldr	r3, [r7, #12]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d04b      	beq.n	80153a4 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 801530c:	2300      	movs	r3, #0
 801530e:	61fb      	str	r3, [r7, #28]
 8015310:	e044      	b.n	801539c <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8015312:	69fa      	ldr	r2, [r7, #28]
 8015314:	4613      	mov	r3, r2
 8015316:	00db      	lsls	r3, r3, #3
 8015318:	4413      	add	r3, r2
 801531a:	009b      	lsls	r3, r3, #2
 801531c:	461a      	mov	r2, r3
 801531e:	697b      	ldr	r3, [r7, #20]
 8015320:	4413      	add	r3, r2
 8015322:	699a      	ldr	r2, [r3, #24]
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	fbb2 f3f3 	udiv	r3, r2, r3
 801532a:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 801532c:	69fa      	ldr	r2, [r7, #28]
 801532e:	4613      	mov	r3, r2
 8015330:	00db      	lsls	r3, r3, #3
 8015332:	4413      	add	r3, r2
 8015334:	009b      	lsls	r3, r3, #2
 8015336:	461a      	mov	r2, r3
 8015338:	697b      	ldr	r3, [r7, #20]
 801533a:	4413      	add	r3, r2
 801533c:	685b      	ldr	r3, [r3, #4]
 801533e:	4619      	mov	r1, r3
 8015340:	6878      	ldr	r0, [r7, #4]
 8015342:	f7ff feff 	bl	8015144 <prvWriteNameToBuffer>
 8015346:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 8015348:	693b      	ldr	r3, [r7, #16]
 801534a:	2b00      	cmp	r3, #0
 801534c:	d00e      	beq.n	801536c <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 801534e:	69fa      	ldr	r2, [r7, #28]
 8015350:	4613      	mov	r3, r2
 8015352:	00db      	lsls	r3, r3, #3
 8015354:	4413      	add	r3, r2
 8015356:	009b      	lsls	r3, r3, #2
 8015358:	461a      	mov	r2, r3
 801535a:	697b      	ldr	r3, [r7, #20]
 801535c:	4413      	add	r3, r2
 801535e:	699a      	ldr	r2, [r3, #24]
 8015360:	693b      	ldr	r3, [r7, #16]
 8015362:	4916      	ldr	r1, [pc, #88]	; (80153bc <vTaskGetRunTimeStats+0x100>)
 8015364:	6878      	ldr	r0, [r7, #4]
 8015366:	f002 fc3f 	bl	8017be8 <siprintf>
 801536a:	e00d      	b.n	8015388 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 801536c:	69fa      	ldr	r2, [r7, #28]
 801536e:	4613      	mov	r3, r2
 8015370:	00db      	lsls	r3, r3, #3
 8015372:	4413      	add	r3, r2
 8015374:	009b      	lsls	r3, r3, #2
 8015376:	461a      	mov	r2, r3
 8015378:	697b      	ldr	r3, [r7, #20]
 801537a:	4413      	add	r3, r2
 801537c:	699b      	ldr	r3, [r3, #24]
 801537e:	461a      	mov	r2, r3
 8015380:	490f      	ldr	r1, [pc, #60]	; (80153c0 <vTaskGetRunTimeStats+0x104>)
 8015382:	6878      	ldr	r0, [r7, #4]
 8015384:	f002 fc30 	bl	8017be8 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8015388:	6878      	ldr	r0, [r7, #4]
 801538a:	f7ea ff21 	bl	80001d0 <strlen>
 801538e:	4602      	mov	r2, r0
 8015390:	687b      	ldr	r3, [r7, #4]
 8015392:	4413      	add	r3, r2
 8015394:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 8015396:	69fb      	ldr	r3, [r7, #28]
 8015398:	3301      	adds	r3, #1
 801539a:	61fb      	str	r3, [r7, #28]
 801539c:	69fa      	ldr	r2, [r7, #28]
 801539e:	69bb      	ldr	r3, [r7, #24]
 80153a0:	429a      	cmp	r2, r3
 80153a2:	d3b6      	bcc.n	8015312 <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 80153a4:	6978      	ldr	r0, [r7, #20]
 80153a6:	f000 fedb 	bl	8016160 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80153aa:	bf00      	nop
 80153ac:	3720      	adds	r7, #32
 80153ae:	46bd      	mov	sp, r7
 80153b0:	bd80      	pop	{r7, pc}
 80153b2:	bf00      	nop
 80153b4:	20003444 	.word	0x20003444
 80153b8:	51eb851f 	.word	0x51eb851f
 80153bc:	0801a424 	.word	0x0801a424
 80153c0:	0801a430 	.word	0x0801a430

080153c4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80153c4:	b480      	push	{r7}
 80153c6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80153c8:	4b07      	ldr	r3, [pc, #28]	; (80153e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d004      	beq.n	80153da <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80153d0:	4b05      	ldr	r3, [pc, #20]	; (80153e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80153d6:	3201      	adds	r2, #1
 80153d8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80153da:	4b03      	ldr	r3, [pc, #12]	; (80153e8 <pvTaskIncrementMutexHeldCount+0x24>)
 80153dc:	681b      	ldr	r3, [r3, #0]
	}
 80153de:	4618      	mov	r0, r3
 80153e0:	46bd      	mov	sp, r7
 80153e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e6:	4770      	bx	lr
 80153e8:	20002f70 	.word	0x20002f70

080153ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b084      	sub	sp, #16
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
 80153f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80153f6:	4b21      	ldr	r3, [pc, #132]	; (801547c <prvAddCurrentTaskToDelayedList+0x90>)
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80153fc:	4b20      	ldr	r3, [pc, #128]	; (8015480 <prvAddCurrentTaskToDelayedList+0x94>)
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	3304      	adds	r3, #4
 8015402:	4618      	mov	r0, r3
 8015404:	f7fd fcb8 	bl	8012d78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801540e:	d10a      	bne.n	8015426 <prvAddCurrentTaskToDelayedList+0x3a>
 8015410:	683b      	ldr	r3, [r7, #0]
 8015412:	2b00      	cmp	r3, #0
 8015414:	d007      	beq.n	8015426 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015416:	4b1a      	ldr	r3, [pc, #104]	; (8015480 <prvAddCurrentTaskToDelayedList+0x94>)
 8015418:	681b      	ldr	r3, [r3, #0]
 801541a:	3304      	adds	r3, #4
 801541c:	4619      	mov	r1, r3
 801541e:	4819      	ldr	r0, [pc, #100]	; (8015484 <prvAddCurrentTaskToDelayedList+0x98>)
 8015420:	f7fd fc4d 	bl	8012cbe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015424:	e026      	b.n	8015474 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015426:	68fa      	ldr	r2, [r7, #12]
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	4413      	add	r3, r2
 801542c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801542e:	4b14      	ldr	r3, [pc, #80]	; (8015480 <prvAddCurrentTaskToDelayedList+0x94>)
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	68ba      	ldr	r2, [r7, #8]
 8015434:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015436:	68ba      	ldr	r2, [r7, #8]
 8015438:	68fb      	ldr	r3, [r7, #12]
 801543a:	429a      	cmp	r2, r3
 801543c:	d209      	bcs.n	8015452 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801543e:	4b12      	ldr	r3, [pc, #72]	; (8015488 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015440:	681a      	ldr	r2, [r3, #0]
 8015442:	4b0f      	ldr	r3, [pc, #60]	; (8015480 <prvAddCurrentTaskToDelayedList+0x94>)
 8015444:	681b      	ldr	r3, [r3, #0]
 8015446:	3304      	adds	r3, #4
 8015448:	4619      	mov	r1, r3
 801544a:	4610      	mov	r0, r2
 801544c:	f7fd fc5b 	bl	8012d06 <vListInsert>
}
 8015450:	e010      	b.n	8015474 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015452:	4b0e      	ldr	r3, [pc, #56]	; (801548c <prvAddCurrentTaskToDelayedList+0xa0>)
 8015454:	681a      	ldr	r2, [r3, #0]
 8015456:	4b0a      	ldr	r3, [pc, #40]	; (8015480 <prvAddCurrentTaskToDelayedList+0x94>)
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	3304      	adds	r3, #4
 801545c:	4619      	mov	r1, r3
 801545e:	4610      	mov	r0, r2
 8015460:	f7fd fc51 	bl	8012d06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015464:	4b0a      	ldr	r3, [pc, #40]	; (8015490 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015466:	681b      	ldr	r3, [r3, #0]
 8015468:	68ba      	ldr	r2, [r7, #8]
 801546a:	429a      	cmp	r2, r3
 801546c:	d202      	bcs.n	8015474 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801546e:	4a08      	ldr	r2, [pc, #32]	; (8015490 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015470:	68bb      	ldr	r3, [r7, #8]
 8015472:	6013      	str	r3, [r2, #0]
}
 8015474:	bf00      	nop
 8015476:	3710      	adds	r7, #16
 8015478:	46bd      	mov	sp, r7
 801547a:	bd80      	pop	{r7, pc}
 801547c:	20003448 	.word	0x20003448
 8015480:	20002f70 	.word	0x20002f70
 8015484:	20003430 	.word	0x20003430
 8015488:	20003400 	.word	0x20003400
 801548c:	200033fc 	.word	0x200033fc
 8015490:	20003464 	.word	0x20003464

08015494 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015494:	b580      	push	{r7, lr}
 8015496:	b08a      	sub	sp, #40	; 0x28
 8015498:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801549a:	2300      	movs	r3, #0
 801549c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801549e:	f000 fb07 	bl	8015ab0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80154a2:	4b1c      	ldr	r3, [pc, #112]	; (8015514 <xTimerCreateTimerTask+0x80>)
 80154a4:	681b      	ldr	r3, [r3, #0]
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d021      	beq.n	80154ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80154aa:	2300      	movs	r3, #0
 80154ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80154ae:	2300      	movs	r3, #0
 80154b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80154b2:	1d3a      	adds	r2, r7, #4
 80154b4:	f107 0108 	add.w	r1, r7, #8
 80154b8:	f107 030c 	add.w	r3, r7, #12
 80154bc:	4618      	mov	r0, r3
 80154be:	f7fd fbb7 	bl	8012c30 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80154c2:	6879      	ldr	r1, [r7, #4]
 80154c4:	68bb      	ldr	r3, [r7, #8]
 80154c6:	68fa      	ldr	r2, [r7, #12]
 80154c8:	9202      	str	r2, [sp, #8]
 80154ca:	9301      	str	r3, [sp, #4]
 80154cc:	2302      	movs	r3, #2
 80154ce:	9300      	str	r3, [sp, #0]
 80154d0:	2300      	movs	r3, #0
 80154d2:	460a      	mov	r2, r1
 80154d4:	4910      	ldr	r1, [pc, #64]	; (8015518 <xTimerCreateTimerTask+0x84>)
 80154d6:	4811      	ldr	r0, [pc, #68]	; (801551c <xTimerCreateTimerTask+0x88>)
 80154d8:	f7fe fc86 	bl	8013de8 <xTaskCreateStatic>
 80154dc:	4603      	mov	r3, r0
 80154de:	4a10      	ldr	r2, [pc, #64]	; (8015520 <xTimerCreateTimerTask+0x8c>)
 80154e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80154e2:	4b0f      	ldr	r3, [pc, #60]	; (8015520 <xTimerCreateTimerTask+0x8c>)
 80154e4:	681b      	ldr	r3, [r3, #0]
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d001      	beq.n	80154ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80154ea:	2301      	movs	r3, #1
 80154ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80154ee:	697b      	ldr	r3, [r7, #20]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d10a      	bne.n	801550a <xTimerCreateTimerTask+0x76>
	__asm volatile
 80154f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154f8:	f383 8811 	msr	BASEPRI, r3
 80154fc:	f3bf 8f6f 	isb	sy
 8015500:	f3bf 8f4f 	dsb	sy
 8015504:	613b      	str	r3, [r7, #16]
}
 8015506:	bf00      	nop
 8015508:	e7fe      	b.n	8015508 <xTimerCreateTimerTask+0x74>
	return xReturn;
 801550a:	697b      	ldr	r3, [r7, #20]
}
 801550c:	4618      	mov	r0, r3
 801550e:	3718      	adds	r7, #24
 8015510:	46bd      	mov	sp, r7
 8015512:	bd80      	pop	{r7, pc}
 8015514:	200034a8 	.word	0x200034a8
 8015518:	0801a43c 	.word	0x0801a43c
 801551c:	08015659 	.word	0x08015659
 8015520:	200034ac 	.word	0x200034ac

08015524 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015524:	b580      	push	{r7, lr}
 8015526:	b08a      	sub	sp, #40	; 0x28
 8015528:	af00      	add	r7, sp, #0
 801552a:	60f8      	str	r0, [r7, #12]
 801552c:	60b9      	str	r1, [r7, #8]
 801552e:	607a      	str	r2, [r7, #4]
 8015530:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015532:	2300      	movs	r3, #0
 8015534:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015536:	68fb      	ldr	r3, [r7, #12]
 8015538:	2b00      	cmp	r3, #0
 801553a:	d10a      	bne.n	8015552 <xTimerGenericCommand+0x2e>
	__asm volatile
 801553c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015540:	f383 8811 	msr	BASEPRI, r3
 8015544:	f3bf 8f6f 	isb	sy
 8015548:	f3bf 8f4f 	dsb	sy
 801554c:	623b      	str	r3, [r7, #32]
}
 801554e:	bf00      	nop
 8015550:	e7fe      	b.n	8015550 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015552:	4b1a      	ldr	r3, [pc, #104]	; (80155bc <xTimerGenericCommand+0x98>)
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	2b00      	cmp	r3, #0
 8015558:	d02a      	beq.n	80155b0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801555a:	68bb      	ldr	r3, [r7, #8]
 801555c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015562:	68fb      	ldr	r3, [r7, #12]
 8015564:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015566:	68bb      	ldr	r3, [r7, #8]
 8015568:	2b05      	cmp	r3, #5
 801556a:	dc18      	bgt.n	801559e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801556c:	f7ff fc74 	bl	8014e58 <xTaskGetSchedulerState>
 8015570:	4603      	mov	r3, r0
 8015572:	2b02      	cmp	r3, #2
 8015574:	d109      	bne.n	801558a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015576:	4b11      	ldr	r3, [pc, #68]	; (80155bc <xTimerGenericCommand+0x98>)
 8015578:	6818      	ldr	r0, [r3, #0]
 801557a:	f107 0110 	add.w	r1, r7, #16
 801557e:	2300      	movs	r3, #0
 8015580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015582:	f7fd fdcb 	bl	801311c <xQueueGenericSend>
 8015586:	6278      	str	r0, [r7, #36]	; 0x24
 8015588:	e012      	b.n	80155b0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801558a:	4b0c      	ldr	r3, [pc, #48]	; (80155bc <xTimerGenericCommand+0x98>)
 801558c:	6818      	ldr	r0, [r3, #0]
 801558e:	f107 0110 	add.w	r1, r7, #16
 8015592:	2300      	movs	r3, #0
 8015594:	2200      	movs	r2, #0
 8015596:	f7fd fdc1 	bl	801311c <xQueueGenericSend>
 801559a:	6278      	str	r0, [r7, #36]	; 0x24
 801559c:	e008      	b.n	80155b0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801559e:	4b07      	ldr	r3, [pc, #28]	; (80155bc <xTimerGenericCommand+0x98>)
 80155a0:	6818      	ldr	r0, [r3, #0]
 80155a2:	f107 0110 	add.w	r1, r7, #16
 80155a6:	2300      	movs	r3, #0
 80155a8:	683a      	ldr	r2, [r7, #0]
 80155aa:	f7fd feb5 	bl	8013318 <xQueueGenericSendFromISR>
 80155ae:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80155b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80155b2:	4618      	mov	r0, r3
 80155b4:	3728      	adds	r7, #40	; 0x28
 80155b6:	46bd      	mov	sp, r7
 80155b8:	bd80      	pop	{r7, pc}
 80155ba:	bf00      	nop
 80155bc:	200034a8 	.word	0x200034a8

080155c0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80155c0:	b580      	push	{r7, lr}
 80155c2:	b088      	sub	sp, #32
 80155c4:	af02      	add	r7, sp, #8
 80155c6:	6078      	str	r0, [r7, #4]
 80155c8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80155ca:	4b22      	ldr	r3, [pc, #136]	; (8015654 <prvProcessExpiredTimer+0x94>)
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	68db      	ldr	r3, [r3, #12]
 80155d0:	68db      	ldr	r3, [r3, #12]
 80155d2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80155d4:	697b      	ldr	r3, [r7, #20]
 80155d6:	3304      	adds	r3, #4
 80155d8:	4618      	mov	r0, r3
 80155da:	f7fd fbcd 	bl	8012d78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80155de:	697b      	ldr	r3, [r7, #20]
 80155e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80155e4:	f003 0304 	and.w	r3, r3, #4
 80155e8:	2b00      	cmp	r3, #0
 80155ea:	d022      	beq.n	8015632 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80155ec:	697b      	ldr	r3, [r7, #20]
 80155ee:	699a      	ldr	r2, [r3, #24]
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	18d1      	adds	r1, r2, r3
 80155f4:	687b      	ldr	r3, [r7, #4]
 80155f6:	683a      	ldr	r2, [r7, #0]
 80155f8:	6978      	ldr	r0, [r7, #20]
 80155fa:	f000 f8d1 	bl	80157a0 <prvInsertTimerInActiveList>
 80155fe:	4603      	mov	r3, r0
 8015600:	2b00      	cmp	r3, #0
 8015602:	d01f      	beq.n	8015644 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015604:	2300      	movs	r3, #0
 8015606:	9300      	str	r3, [sp, #0]
 8015608:	2300      	movs	r3, #0
 801560a:	687a      	ldr	r2, [r7, #4]
 801560c:	2100      	movs	r1, #0
 801560e:	6978      	ldr	r0, [r7, #20]
 8015610:	f7ff ff88 	bl	8015524 <xTimerGenericCommand>
 8015614:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015616:	693b      	ldr	r3, [r7, #16]
 8015618:	2b00      	cmp	r3, #0
 801561a:	d113      	bne.n	8015644 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801561c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015620:	f383 8811 	msr	BASEPRI, r3
 8015624:	f3bf 8f6f 	isb	sy
 8015628:	f3bf 8f4f 	dsb	sy
 801562c:	60fb      	str	r3, [r7, #12]
}
 801562e:	bf00      	nop
 8015630:	e7fe      	b.n	8015630 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015632:	697b      	ldr	r3, [r7, #20]
 8015634:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015638:	f023 0301 	bic.w	r3, r3, #1
 801563c:	b2da      	uxtb	r2, r3
 801563e:	697b      	ldr	r3, [r7, #20]
 8015640:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015644:	697b      	ldr	r3, [r7, #20]
 8015646:	6a1b      	ldr	r3, [r3, #32]
 8015648:	6978      	ldr	r0, [r7, #20]
 801564a:	4798      	blx	r3
}
 801564c:	bf00      	nop
 801564e:	3718      	adds	r7, #24
 8015650:	46bd      	mov	sp, r7
 8015652:	bd80      	pop	{r7, pc}
 8015654:	200034a0 	.word	0x200034a0

08015658 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015658:	b580      	push	{r7, lr}
 801565a:	b084      	sub	sp, #16
 801565c:	af00      	add	r7, sp, #0
 801565e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015660:	f107 0308 	add.w	r3, r7, #8
 8015664:	4618      	mov	r0, r3
 8015666:	f000 f857 	bl	8015718 <prvGetNextExpireTime>
 801566a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801566c:	68bb      	ldr	r3, [r7, #8]
 801566e:	4619      	mov	r1, r3
 8015670:	68f8      	ldr	r0, [r7, #12]
 8015672:	f000 f803 	bl	801567c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015676:	f000 f8d5 	bl	8015824 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801567a:	e7f1      	b.n	8015660 <prvTimerTask+0x8>

0801567c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801567c:	b580      	push	{r7, lr}
 801567e:	b084      	sub	sp, #16
 8015680:	af00      	add	r7, sp, #0
 8015682:	6078      	str	r0, [r7, #4]
 8015684:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015686:	f7fe fe79 	bl	801437c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801568a:	f107 0308 	add.w	r3, r7, #8
 801568e:	4618      	mov	r0, r3
 8015690:	f000 f866 	bl	8015760 <prvSampleTimeNow>
 8015694:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015696:	68bb      	ldr	r3, [r7, #8]
 8015698:	2b00      	cmp	r3, #0
 801569a:	d130      	bne.n	80156fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801569c:	683b      	ldr	r3, [r7, #0]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d10a      	bne.n	80156b8 <prvProcessTimerOrBlockTask+0x3c>
 80156a2:	687a      	ldr	r2, [r7, #4]
 80156a4:	68fb      	ldr	r3, [r7, #12]
 80156a6:	429a      	cmp	r2, r3
 80156a8:	d806      	bhi.n	80156b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80156aa:	f7fe fe75 	bl	8014398 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80156ae:	68f9      	ldr	r1, [r7, #12]
 80156b0:	6878      	ldr	r0, [r7, #4]
 80156b2:	f7ff ff85 	bl	80155c0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80156b6:	e024      	b.n	8015702 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80156b8:	683b      	ldr	r3, [r7, #0]
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	d008      	beq.n	80156d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80156be:	4b13      	ldr	r3, [pc, #76]	; (801570c <prvProcessTimerOrBlockTask+0x90>)
 80156c0:	681b      	ldr	r3, [r3, #0]
 80156c2:	681b      	ldr	r3, [r3, #0]
 80156c4:	2b00      	cmp	r3, #0
 80156c6:	d101      	bne.n	80156cc <prvProcessTimerOrBlockTask+0x50>
 80156c8:	2301      	movs	r3, #1
 80156ca:	e000      	b.n	80156ce <prvProcessTimerOrBlockTask+0x52>
 80156cc:	2300      	movs	r3, #0
 80156ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80156d0:	4b0f      	ldr	r3, [pc, #60]	; (8015710 <prvProcessTimerOrBlockTask+0x94>)
 80156d2:	6818      	ldr	r0, [r3, #0]
 80156d4:	687a      	ldr	r2, [r7, #4]
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	1ad3      	subs	r3, r2, r3
 80156da:	683a      	ldr	r2, [r7, #0]
 80156dc:	4619      	mov	r1, r3
 80156de:	f7fe fb4f 	bl	8013d80 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80156e2:	f7fe fe59 	bl	8014398 <xTaskResumeAll>
 80156e6:	4603      	mov	r3, r0
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d10a      	bne.n	8015702 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80156ec:	4b09      	ldr	r3, [pc, #36]	; (8015714 <prvProcessTimerOrBlockTask+0x98>)
 80156ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80156f2:	601a      	str	r2, [r3, #0]
 80156f4:	f3bf 8f4f 	dsb	sy
 80156f8:	f3bf 8f6f 	isb	sy
}
 80156fc:	e001      	b.n	8015702 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80156fe:	f7fe fe4b 	bl	8014398 <xTaskResumeAll>
}
 8015702:	bf00      	nop
 8015704:	3710      	adds	r7, #16
 8015706:	46bd      	mov	sp, r7
 8015708:	bd80      	pop	{r7, pc}
 801570a:	bf00      	nop
 801570c:	200034a4 	.word	0x200034a4
 8015710:	200034a8 	.word	0x200034a8
 8015714:	e000ed04 	.word	0xe000ed04

08015718 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015718:	b480      	push	{r7}
 801571a:	b085      	sub	sp, #20
 801571c:	af00      	add	r7, sp, #0
 801571e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015720:	4b0e      	ldr	r3, [pc, #56]	; (801575c <prvGetNextExpireTime+0x44>)
 8015722:	681b      	ldr	r3, [r3, #0]
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	2b00      	cmp	r3, #0
 8015728:	d101      	bne.n	801572e <prvGetNextExpireTime+0x16>
 801572a:	2201      	movs	r2, #1
 801572c:	e000      	b.n	8015730 <prvGetNextExpireTime+0x18>
 801572e:	2200      	movs	r2, #0
 8015730:	687b      	ldr	r3, [r7, #4]
 8015732:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	681b      	ldr	r3, [r3, #0]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d105      	bne.n	8015748 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801573c:	4b07      	ldr	r3, [pc, #28]	; (801575c <prvGetNextExpireTime+0x44>)
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	68db      	ldr	r3, [r3, #12]
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	60fb      	str	r3, [r7, #12]
 8015746:	e001      	b.n	801574c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8015748:	2300      	movs	r3, #0
 801574a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801574c:	68fb      	ldr	r3, [r7, #12]
}
 801574e:	4618      	mov	r0, r3
 8015750:	3714      	adds	r7, #20
 8015752:	46bd      	mov	sp, r7
 8015754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015758:	4770      	bx	lr
 801575a:	bf00      	nop
 801575c:	200034a0 	.word	0x200034a0

08015760 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8015760:	b580      	push	{r7, lr}
 8015762:	b084      	sub	sp, #16
 8015764:	af00      	add	r7, sp, #0
 8015766:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015768:	f7fe feb4 	bl	80144d4 <xTaskGetTickCount>
 801576c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801576e:	4b0b      	ldr	r3, [pc, #44]	; (801579c <prvSampleTimeNow+0x3c>)
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	68fa      	ldr	r2, [r7, #12]
 8015774:	429a      	cmp	r2, r3
 8015776:	d205      	bcs.n	8015784 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015778:	f000 f936 	bl	80159e8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801577c:	687b      	ldr	r3, [r7, #4]
 801577e:	2201      	movs	r2, #1
 8015780:	601a      	str	r2, [r3, #0]
 8015782:	e002      	b.n	801578a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015784:	687b      	ldr	r3, [r7, #4]
 8015786:	2200      	movs	r2, #0
 8015788:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801578a:	4a04      	ldr	r2, [pc, #16]	; (801579c <prvSampleTimeNow+0x3c>)
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015790:	68fb      	ldr	r3, [r7, #12]
}
 8015792:	4618      	mov	r0, r3
 8015794:	3710      	adds	r7, #16
 8015796:	46bd      	mov	sp, r7
 8015798:	bd80      	pop	{r7, pc}
 801579a:	bf00      	nop
 801579c:	200034b0 	.word	0x200034b0

080157a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80157a0:	b580      	push	{r7, lr}
 80157a2:	b086      	sub	sp, #24
 80157a4:	af00      	add	r7, sp, #0
 80157a6:	60f8      	str	r0, [r7, #12]
 80157a8:	60b9      	str	r1, [r7, #8]
 80157aa:	607a      	str	r2, [r7, #4]
 80157ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80157ae:	2300      	movs	r3, #0
 80157b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	68ba      	ldr	r2, [r7, #8]
 80157b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	68fa      	ldr	r2, [r7, #12]
 80157bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80157be:	68ba      	ldr	r2, [r7, #8]
 80157c0:	687b      	ldr	r3, [r7, #4]
 80157c2:	429a      	cmp	r2, r3
 80157c4:	d812      	bhi.n	80157ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80157c6:	687a      	ldr	r2, [r7, #4]
 80157c8:	683b      	ldr	r3, [r7, #0]
 80157ca:	1ad2      	subs	r2, r2, r3
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	699b      	ldr	r3, [r3, #24]
 80157d0:	429a      	cmp	r2, r3
 80157d2:	d302      	bcc.n	80157da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80157d4:	2301      	movs	r3, #1
 80157d6:	617b      	str	r3, [r7, #20]
 80157d8:	e01b      	b.n	8015812 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80157da:	4b10      	ldr	r3, [pc, #64]	; (801581c <prvInsertTimerInActiveList+0x7c>)
 80157dc:	681a      	ldr	r2, [r3, #0]
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	3304      	adds	r3, #4
 80157e2:	4619      	mov	r1, r3
 80157e4:	4610      	mov	r0, r2
 80157e6:	f7fd fa8e 	bl	8012d06 <vListInsert>
 80157ea:	e012      	b.n	8015812 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80157ec:	687a      	ldr	r2, [r7, #4]
 80157ee:	683b      	ldr	r3, [r7, #0]
 80157f0:	429a      	cmp	r2, r3
 80157f2:	d206      	bcs.n	8015802 <prvInsertTimerInActiveList+0x62>
 80157f4:	68ba      	ldr	r2, [r7, #8]
 80157f6:	683b      	ldr	r3, [r7, #0]
 80157f8:	429a      	cmp	r2, r3
 80157fa:	d302      	bcc.n	8015802 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80157fc:	2301      	movs	r3, #1
 80157fe:	617b      	str	r3, [r7, #20]
 8015800:	e007      	b.n	8015812 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015802:	4b07      	ldr	r3, [pc, #28]	; (8015820 <prvInsertTimerInActiveList+0x80>)
 8015804:	681a      	ldr	r2, [r3, #0]
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	3304      	adds	r3, #4
 801580a:	4619      	mov	r1, r3
 801580c:	4610      	mov	r0, r2
 801580e:	f7fd fa7a 	bl	8012d06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8015812:	697b      	ldr	r3, [r7, #20]
}
 8015814:	4618      	mov	r0, r3
 8015816:	3718      	adds	r7, #24
 8015818:	46bd      	mov	sp, r7
 801581a:	bd80      	pop	{r7, pc}
 801581c:	200034a4 	.word	0x200034a4
 8015820:	200034a0 	.word	0x200034a0

08015824 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b08e      	sub	sp, #56	; 0x38
 8015828:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801582a:	e0ca      	b.n	80159c2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	2b00      	cmp	r3, #0
 8015830:	da18      	bge.n	8015864 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8015832:	1d3b      	adds	r3, r7, #4
 8015834:	3304      	adds	r3, #4
 8015836:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801583a:	2b00      	cmp	r3, #0
 801583c:	d10a      	bne.n	8015854 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015842:	f383 8811 	msr	BASEPRI, r3
 8015846:	f3bf 8f6f 	isb	sy
 801584a:	f3bf 8f4f 	dsb	sy
 801584e:	61fb      	str	r3, [r7, #28]
}
 8015850:	bf00      	nop
 8015852:	e7fe      	b.n	8015852 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8015854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801585a:	6850      	ldr	r0, [r2, #4]
 801585c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801585e:	6892      	ldr	r2, [r2, #8]
 8015860:	4611      	mov	r1, r2
 8015862:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	2b00      	cmp	r3, #0
 8015868:	f2c0 80aa 	blt.w	80159c0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801586c:	68fb      	ldr	r3, [r7, #12]
 801586e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015872:	695b      	ldr	r3, [r3, #20]
 8015874:	2b00      	cmp	r3, #0
 8015876:	d004      	beq.n	8015882 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801587a:	3304      	adds	r3, #4
 801587c:	4618      	mov	r0, r3
 801587e:	f7fd fa7b 	bl	8012d78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015882:	463b      	mov	r3, r7
 8015884:	4618      	mov	r0, r3
 8015886:	f7ff ff6b 	bl	8015760 <prvSampleTimeNow>
 801588a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	2b09      	cmp	r3, #9
 8015890:	f200 8097 	bhi.w	80159c2 <prvProcessReceivedCommands+0x19e>
 8015894:	a201      	add	r2, pc, #4	; (adr r2, 801589c <prvProcessReceivedCommands+0x78>)
 8015896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801589a:	bf00      	nop
 801589c:	080158c5 	.word	0x080158c5
 80158a0:	080158c5 	.word	0x080158c5
 80158a4:	080158c5 	.word	0x080158c5
 80158a8:	08015939 	.word	0x08015939
 80158ac:	0801594d 	.word	0x0801594d
 80158b0:	08015997 	.word	0x08015997
 80158b4:	080158c5 	.word	0x080158c5
 80158b8:	080158c5 	.word	0x080158c5
 80158bc:	08015939 	.word	0x08015939
 80158c0:	0801594d 	.word	0x0801594d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80158c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80158ca:	f043 0301 	orr.w	r3, r3, #1
 80158ce:	b2da      	uxtb	r2, r3
 80158d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80158d6:	68ba      	ldr	r2, [r7, #8]
 80158d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158da:	699b      	ldr	r3, [r3, #24]
 80158dc:	18d1      	adds	r1, r2, r3
 80158de:	68bb      	ldr	r3, [r7, #8]
 80158e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80158e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80158e4:	f7ff ff5c 	bl	80157a0 <prvInsertTimerInActiveList>
 80158e8:	4603      	mov	r3, r0
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d069      	beq.n	80159c2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80158ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158f0:	6a1b      	ldr	r3, [r3, #32]
 80158f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80158f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80158f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158f8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80158fc:	f003 0304 	and.w	r3, r3, #4
 8015900:	2b00      	cmp	r3, #0
 8015902:	d05e      	beq.n	80159c2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015904:	68ba      	ldr	r2, [r7, #8]
 8015906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015908:	699b      	ldr	r3, [r3, #24]
 801590a:	441a      	add	r2, r3
 801590c:	2300      	movs	r3, #0
 801590e:	9300      	str	r3, [sp, #0]
 8015910:	2300      	movs	r3, #0
 8015912:	2100      	movs	r1, #0
 8015914:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015916:	f7ff fe05 	bl	8015524 <xTimerGenericCommand>
 801591a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801591c:	6a3b      	ldr	r3, [r7, #32]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d14f      	bne.n	80159c2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8015922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015926:	f383 8811 	msr	BASEPRI, r3
 801592a:	f3bf 8f6f 	isb	sy
 801592e:	f3bf 8f4f 	dsb	sy
 8015932:	61bb      	str	r3, [r7, #24]
}
 8015934:	bf00      	nop
 8015936:	e7fe      	b.n	8015936 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801593a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801593e:	f023 0301 	bic.w	r3, r3, #1
 8015942:	b2da      	uxtb	r2, r3
 8015944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015946:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801594a:	e03a      	b.n	80159c2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801594c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801594e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015952:	f043 0301 	orr.w	r3, r3, #1
 8015956:	b2da      	uxtb	r2, r3
 8015958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801595a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801595e:	68ba      	ldr	r2, [r7, #8]
 8015960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015962:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8015964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015966:	699b      	ldr	r3, [r3, #24]
 8015968:	2b00      	cmp	r3, #0
 801596a:	d10a      	bne.n	8015982 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801596c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015970:	f383 8811 	msr	BASEPRI, r3
 8015974:	f3bf 8f6f 	isb	sy
 8015978:	f3bf 8f4f 	dsb	sy
 801597c:	617b      	str	r3, [r7, #20]
}
 801597e:	bf00      	nop
 8015980:	e7fe      	b.n	8015980 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8015982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015984:	699a      	ldr	r2, [r3, #24]
 8015986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015988:	18d1      	adds	r1, r2, r3
 801598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801598c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801598e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015990:	f7ff ff06 	bl	80157a0 <prvInsertTimerInActiveList>
					break;
 8015994:	e015      	b.n	80159c2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801599c:	f003 0302 	and.w	r3, r3, #2
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	d103      	bne.n	80159ac <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80159a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80159a6:	f000 fbdb 	bl	8016160 <vPortFree>
 80159aa:	e00a      	b.n	80159c2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80159ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159ae:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80159b2:	f023 0301 	bic.w	r3, r3, #1
 80159b6:	b2da      	uxtb	r2, r3
 80159b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159ba:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80159be:	e000      	b.n	80159c2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80159c0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80159c2:	4b08      	ldr	r3, [pc, #32]	; (80159e4 <prvProcessReceivedCommands+0x1c0>)
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	1d39      	adds	r1, r7, #4
 80159c8:	2200      	movs	r2, #0
 80159ca:	4618      	mov	r0, r3
 80159cc:	f7fd fdcc 	bl	8013568 <xQueueReceive>
 80159d0:	4603      	mov	r3, r0
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	f47f af2a 	bne.w	801582c <prvProcessReceivedCommands+0x8>
	}
}
 80159d8:	bf00      	nop
 80159da:	bf00      	nop
 80159dc:	3730      	adds	r7, #48	; 0x30
 80159de:	46bd      	mov	sp, r7
 80159e0:	bd80      	pop	{r7, pc}
 80159e2:	bf00      	nop
 80159e4:	200034a8 	.word	0x200034a8

080159e8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80159e8:	b580      	push	{r7, lr}
 80159ea:	b088      	sub	sp, #32
 80159ec:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80159ee:	e048      	b.n	8015a82 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80159f0:	4b2d      	ldr	r3, [pc, #180]	; (8015aa8 <prvSwitchTimerLists+0xc0>)
 80159f2:	681b      	ldr	r3, [r3, #0]
 80159f4:	68db      	ldr	r3, [r3, #12]
 80159f6:	681b      	ldr	r3, [r3, #0]
 80159f8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80159fa:	4b2b      	ldr	r3, [pc, #172]	; (8015aa8 <prvSwitchTimerLists+0xc0>)
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	68db      	ldr	r3, [r3, #12]
 8015a00:	68db      	ldr	r3, [r3, #12]
 8015a02:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	3304      	adds	r3, #4
 8015a08:	4618      	mov	r0, r3
 8015a0a:	f7fd f9b5 	bl	8012d78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	6a1b      	ldr	r3, [r3, #32]
 8015a12:	68f8      	ldr	r0, [r7, #12]
 8015a14:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015a1c:	f003 0304 	and.w	r3, r3, #4
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d02e      	beq.n	8015a82 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8015a24:	68fb      	ldr	r3, [r7, #12]
 8015a26:	699b      	ldr	r3, [r3, #24]
 8015a28:	693a      	ldr	r2, [r7, #16]
 8015a2a:	4413      	add	r3, r2
 8015a2c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015a2e:	68ba      	ldr	r2, [r7, #8]
 8015a30:	693b      	ldr	r3, [r7, #16]
 8015a32:	429a      	cmp	r2, r3
 8015a34:	d90e      	bls.n	8015a54 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	68ba      	ldr	r2, [r7, #8]
 8015a3a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	68fa      	ldr	r2, [r7, #12]
 8015a40:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8015a42:	4b19      	ldr	r3, [pc, #100]	; (8015aa8 <prvSwitchTimerLists+0xc0>)
 8015a44:	681a      	ldr	r2, [r3, #0]
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	3304      	adds	r3, #4
 8015a4a:	4619      	mov	r1, r3
 8015a4c:	4610      	mov	r0, r2
 8015a4e:	f7fd f95a 	bl	8012d06 <vListInsert>
 8015a52:	e016      	b.n	8015a82 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015a54:	2300      	movs	r3, #0
 8015a56:	9300      	str	r3, [sp, #0]
 8015a58:	2300      	movs	r3, #0
 8015a5a:	693a      	ldr	r2, [r7, #16]
 8015a5c:	2100      	movs	r1, #0
 8015a5e:	68f8      	ldr	r0, [r7, #12]
 8015a60:	f7ff fd60 	bl	8015524 <xTimerGenericCommand>
 8015a64:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d10a      	bne.n	8015a82 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8015a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a70:	f383 8811 	msr	BASEPRI, r3
 8015a74:	f3bf 8f6f 	isb	sy
 8015a78:	f3bf 8f4f 	dsb	sy
 8015a7c:	603b      	str	r3, [r7, #0]
}
 8015a7e:	bf00      	nop
 8015a80:	e7fe      	b.n	8015a80 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015a82:	4b09      	ldr	r3, [pc, #36]	; (8015aa8 <prvSwitchTimerLists+0xc0>)
 8015a84:	681b      	ldr	r3, [r3, #0]
 8015a86:	681b      	ldr	r3, [r3, #0]
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	d1b1      	bne.n	80159f0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015a8c:	4b06      	ldr	r3, [pc, #24]	; (8015aa8 <prvSwitchTimerLists+0xc0>)
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8015a92:	4b06      	ldr	r3, [pc, #24]	; (8015aac <prvSwitchTimerLists+0xc4>)
 8015a94:	681b      	ldr	r3, [r3, #0]
 8015a96:	4a04      	ldr	r2, [pc, #16]	; (8015aa8 <prvSwitchTimerLists+0xc0>)
 8015a98:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015a9a:	4a04      	ldr	r2, [pc, #16]	; (8015aac <prvSwitchTimerLists+0xc4>)
 8015a9c:	697b      	ldr	r3, [r7, #20]
 8015a9e:	6013      	str	r3, [r2, #0]
}
 8015aa0:	bf00      	nop
 8015aa2:	3718      	adds	r7, #24
 8015aa4:	46bd      	mov	sp, r7
 8015aa6:	bd80      	pop	{r7, pc}
 8015aa8:	200034a0 	.word	0x200034a0
 8015aac:	200034a4 	.word	0x200034a4

08015ab0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015ab0:	b580      	push	{r7, lr}
 8015ab2:	b082      	sub	sp, #8
 8015ab4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015ab6:	f000 f965 	bl	8015d84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015aba:	4b15      	ldr	r3, [pc, #84]	; (8015b10 <prvCheckForValidListAndQueue+0x60>)
 8015abc:	681b      	ldr	r3, [r3, #0]
 8015abe:	2b00      	cmp	r3, #0
 8015ac0:	d120      	bne.n	8015b04 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8015ac2:	4814      	ldr	r0, [pc, #80]	; (8015b14 <prvCheckForValidListAndQueue+0x64>)
 8015ac4:	f7fd f8ce 	bl	8012c64 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015ac8:	4813      	ldr	r0, [pc, #76]	; (8015b18 <prvCheckForValidListAndQueue+0x68>)
 8015aca:	f7fd f8cb 	bl	8012c64 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015ace:	4b13      	ldr	r3, [pc, #76]	; (8015b1c <prvCheckForValidListAndQueue+0x6c>)
 8015ad0:	4a10      	ldr	r2, [pc, #64]	; (8015b14 <prvCheckForValidListAndQueue+0x64>)
 8015ad2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015ad4:	4b12      	ldr	r3, [pc, #72]	; (8015b20 <prvCheckForValidListAndQueue+0x70>)
 8015ad6:	4a10      	ldr	r2, [pc, #64]	; (8015b18 <prvCheckForValidListAndQueue+0x68>)
 8015ad8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015ada:	2300      	movs	r3, #0
 8015adc:	9300      	str	r3, [sp, #0]
 8015ade:	4b11      	ldr	r3, [pc, #68]	; (8015b24 <prvCheckForValidListAndQueue+0x74>)
 8015ae0:	4a11      	ldr	r2, [pc, #68]	; (8015b28 <prvCheckForValidListAndQueue+0x78>)
 8015ae2:	2110      	movs	r1, #16
 8015ae4:	200a      	movs	r0, #10
 8015ae6:	f7fd f9d9 	bl	8012e9c <xQueueGenericCreateStatic>
 8015aea:	4603      	mov	r3, r0
 8015aec:	4a08      	ldr	r2, [pc, #32]	; (8015b10 <prvCheckForValidListAndQueue+0x60>)
 8015aee:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015af0:	4b07      	ldr	r3, [pc, #28]	; (8015b10 <prvCheckForValidListAndQueue+0x60>)
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d005      	beq.n	8015b04 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015af8:	4b05      	ldr	r3, [pc, #20]	; (8015b10 <prvCheckForValidListAndQueue+0x60>)
 8015afa:	681b      	ldr	r3, [r3, #0]
 8015afc:	490b      	ldr	r1, [pc, #44]	; (8015b2c <prvCheckForValidListAndQueue+0x7c>)
 8015afe:	4618      	mov	r0, r3
 8015b00:	f7fe f8ea 	bl	8013cd8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015b04:	f000 f96e 	bl	8015de4 <vPortExitCritical>
}
 8015b08:	bf00      	nop
 8015b0a:	46bd      	mov	sp, r7
 8015b0c:	bd80      	pop	{r7, pc}
 8015b0e:	bf00      	nop
 8015b10:	200034a8 	.word	0x200034a8
 8015b14:	20003478 	.word	0x20003478
 8015b18:	2000348c 	.word	0x2000348c
 8015b1c:	200034a0 	.word	0x200034a0
 8015b20:	200034a4 	.word	0x200034a4
 8015b24:	20003554 	.word	0x20003554
 8015b28:	200034b4 	.word	0x200034b4
 8015b2c:	0801a444 	.word	0x0801a444

08015b30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015b30:	b480      	push	{r7}
 8015b32:	b085      	sub	sp, #20
 8015b34:	af00      	add	r7, sp, #0
 8015b36:	60f8      	str	r0, [r7, #12]
 8015b38:	60b9      	str	r1, [r7, #8]
 8015b3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015b3c:	68fb      	ldr	r3, [r7, #12]
 8015b3e:	3b04      	subs	r3, #4
 8015b40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015b42:	68fb      	ldr	r3, [r7, #12]
 8015b44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015b48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015b4a:	68fb      	ldr	r3, [r7, #12]
 8015b4c:	3b04      	subs	r3, #4
 8015b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015b50:	68bb      	ldr	r3, [r7, #8]
 8015b52:	f023 0201 	bic.w	r2, r3, #1
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015b5a:	68fb      	ldr	r3, [r7, #12]
 8015b5c:	3b04      	subs	r3, #4
 8015b5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015b60:	4a0c      	ldr	r2, [pc, #48]	; (8015b94 <pxPortInitialiseStack+0x64>)
 8015b62:	68fb      	ldr	r3, [r7, #12]
 8015b64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015b66:	68fb      	ldr	r3, [r7, #12]
 8015b68:	3b14      	subs	r3, #20
 8015b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015b6c:	687a      	ldr	r2, [r7, #4]
 8015b6e:	68fb      	ldr	r3, [r7, #12]
 8015b70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	3b04      	subs	r3, #4
 8015b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015b78:	68fb      	ldr	r3, [r7, #12]
 8015b7a:	f06f 0202 	mvn.w	r2, #2
 8015b7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015b80:	68fb      	ldr	r3, [r7, #12]
 8015b82:	3b20      	subs	r3, #32
 8015b84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015b86:	68fb      	ldr	r3, [r7, #12]
}
 8015b88:	4618      	mov	r0, r3
 8015b8a:	3714      	adds	r7, #20
 8015b8c:	46bd      	mov	sp, r7
 8015b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b92:	4770      	bx	lr
 8015b94:	08015b99 	.word	0x08015b99

08015b98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015b98:	b480      	push	{r7}
 8015b9a:	b085      	sub	sp, #20
 8015b9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015b9e:	2300      	movs	r3, #0
 8015ba0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015ba2:	4b12      	ldr	r3, [pc, #72]	; (8015bec <prvTaskExitError+0x54>)
 8015ba4:	681b      	ldr	r3, [r3, #0]
 8015ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015baa:	d00a      	beq.n	8015bc2 <prvTaskExitError+0x2a>
	__asm volatile
 8015bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bb0:	f383 8811 	msr	BASEPRI, r3
 8015bb4:	f3bf 8f6f 	isb	sy
 8015bb8:	f3bf 8f4f 	dsb	sy
 8015bbc:	60fb      	str	r3, [r7, #12]
}
 8015bbe:	bf00      	nop
 8015bc0:	e7fe      	b.n	8015bc0 <prvTaskExitError+0x28>
	__asm volatile
 8015bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bc6:	f383 8811 	msr	BASEPRI, r3
 8015bca:	f3bf 8f6f 	isb	sy
 8015bce:	f3bf 8f4f 	dsb	sy
 8015bd2:	60bb      	str	r3, [r7, #8]
}
 8015bd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015bd6:	bf00      	nop
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d0fc      	beq.n	8015bd8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015bde:	bf00      	nop
 8015be0:	bf00      	nop
 8015be2:	3714      	adds	r7, #20
 8015be4:	46bd      	mov	sp, r7
 8015be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bea:	4770      	bx	lr
 8015bec:	20000160 	.word	0x20000160

08015bf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015bf0:	4b07      	ldr	r3, [pc, #28]	; (8015c10 <pxCurrentTCBConst2>)
 8015bf2:	6819      	ldr	r1, [r3, #0]
 8015bf4:	6808      	ldr	r0, [r1, #0]
 8015bf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015bfa:	f380 8809 	msr	PSP, r0
 8015bfe:	f3bf 8f6f 	isb	sy
 8015c02:	f04f 0000 	mov.w	r0, #0
 8015c06:	f380 8811 	msr	BASEPRI, r0
 8015c0a:	4770      	bx	lr
 8015c0c:	f3af 8000 	nop.w

08015c10 <pxCurrentTCBConst2>:
 8015c10:	20002f70 	.word	0x20002f70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015c14:	bf00      	nop
 8015c16:	bf00      	nop

08015c18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015c18:	4808      	ldr	r0, [pc, #32]	; (8015c3c <prvPortStartFirstTask+0x24>)
 8015c1a:	6800      	ldr	r0, [r0, #0]
 8015c1c:	6800      	ldr	r0, [r0, #0]
 8015c1e:	f380 8808 	msr	MSP, r0
 8015c22:	f04f 0000 	mov.w	r0, #0
 8015c26:	f380 8814 	msr	CONTROL, r0
 8015c2a:	b662      	cpsie	i
 8015c2c:	b661      	cpsie	f
 8015c2e:	f3bf 8f4f 	dsb	sy
 8015c32:	f3bf 8f6f 	isb	sy
 8015c36:	df00      	svc	0
 8015c38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015c3a:	bf00      	nop
 8015c3c:	e000ed08 	.word	0xe000ed08

08015c40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015c40:	b580      	push	{r7, lr}
 8015c42:	b086      	sub	sp, #24
 8015c44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015c46:	4b46      	ldr	r3, [pc, #280]	; (8015d60 <xPortStartScheduler+0x120>)
 8015c48:	681b      	ldr	r3, [r3, #0]
 8015c4a:	4a46      	ldr	r2, [pc, #280]	; (8015d64 <xPortStartScheduler+0x124>)
 8015c4c:	4293      	cmp	r3, r2
 8015c4e:	d10a      	bne.n	8015c66 <xPortStartScheduler+0x26>
	__asm volatile
 8015c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c54:	f383 8811 	msr	BASEPRI, r3
 8015c58:	f3bf 8f6f 	isb	sy
 8015c5c:	f3bf 8f4f 	dsb	sy
 8015c60:	613b      	str	r3, [r7, #16]
}
 8015c62:	bf00      	nop
 8015c64:	e7fe      	b.n	8015c64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015c66:	4b3e      	ldr	r3, [pc, #248]	; (8015d60 <xPortStartScheduler+0x120>)
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	4a3f      	ldr	r2, [pc, #252]	; (8015d68 <xPortStartScheduler+0x128>)
 8015c6c:	4293      	cmp	r3, r2
 8015c6e:	d10a      	bne.n	8015c86 <xPortStartScheduler+0x46>
	__asm volatile
 8015c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c74:	f383 8811 	msr	BASEPRI, r3
 8015c78:	f3bf 8f6f 	isb	sy
 8015c7c:	f3bf 8f4f 	dsb	sy
 8015c80:	60fb      	str	r3, [r7, #12]
}
 8015c82:	bf00      	nop
 8015c84:	e7fe      	b.n	8015c84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015c86:	4b39      	ldr	r3, [pc, #228]	; (8015d6c <xPortStartScheduler+0x12c>)
 8015c88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015c8a:	697b      	ldr	r3, [r7, #20]
 8015c8c:	781b      	ldrb	r3, [r3, #0]
 8015c8e:	b2db      	uxtb	r3, r3
 8015c90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015c92:	697b      	ldr	r3, [r7, #20]
 8015c94:	22ff      	movs	r2, #255	; 0xff
 8015c96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015c98:	697b      	ldr	r3, [r7, #20]
 8015c9a:	781b      	ldrb	r3, [r3, #0]
 8015c9c:	b2db      	uxtb	r3, r3
 8015c9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015ca0:	78fb      	ldrb	r3, [r7, #3]
 8015ca2:	b2db      	uxtb	r3, r3
 8015ca4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015ca8:	b2da      	uxtb	r2, r3
 8015caa:	4b31      	ldr	r3, [pc, #196]	; (8015d70 <xPortStartScheduler+0x130>)
 8015cac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015cae:	4b31      	ldr	r3, [pc, #196]	; (8015d74 <xPortStartScheduler+0x134>)
 8015cb0:	2207      	movs	r2, #7
 8015cb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015cb4:	e009      	b.n	8015cca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015cb6:	4b2f      	ldr	r3, [pc, #188]	; (8015d74 <xPortStartScheduler+0x134>)
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	3b01      	subs	r3, #1
 8015cbc:	4a2d      	ldr	r2, [pc, #180]	; (8015d74 <xPortStartScheduler+0x134>)
 8015cbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015cc0:	78fb      	ldrb	r3, [r7, #3]
 8015cc2:	b2db      	uxtb	r3, r3
 8015cc4:	005b      	lsls	r3, r3, #1
 8015cc6:	b2db      	uxtb	r3, r3
 8015cc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015cca:	78fb      	ldrb	r3, [r7, #3]
 8015ccc:	b2db      	uxtb	r3, r3
 8015cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015cd2:	2b80      	cmp	r3, #128	; 0x80
 8015cd4:	d0ef      	beq.n	8015cb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015cd6:	4b27      	ldr	r3, [pc, #156]	; (8015d74 <xPortStartScheduler+0x134>)
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	f1c3 0307 	rsb	r3, r3, #7
 8015cde:	2b04      	cmp	r3, #4
 8015ce0:	d00a      	beq.n	8015cf8 <xPortStartScheduler+0xb8>
	__asm volatile
 8015ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ce6:	f383 8811 	msr	BASEPRI, r3
 8015cea:	f3bf 8f6f 	isb	sy
 8015cee:	f3bf 8f4f 	dsb	sy
 8015cf2:	60bb      	str	r3, [r7, #8]
}
 8015cf4:	bf00      	nop
 8015cf6:	e7fe      	b.n	8015cf6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015cf8:	4b1e      	ldr	r3, [pc, #120]	; (8015d74 <xPortStartScheduler+0x134>)
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	021b      	lsls	r3, r3, #8
 8015cfe:	4a1d      	ldr	r2, [pc, #116]	; (8015d74 <xPortStartScheduler+0x134>)
 8015d00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015d02:	4b1c      	ldr	r3, [pc, #112]	; (8015d74 <xPortStartScheduler+0x134>)
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015d0a:	4a1a      	ldr	r2, [pc, #104]	; (8015d74 <xPortStartScheduler+0x134>)
 8015d0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	b2da      	uxtb	r2, r3
 8015d12:	697b      	ldr	r3, [r7, #20]
 8015d14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015d16:	4b18      	ldr	r3, [pc, #96]	; (8015d78 <xPortStartScheduler+0x138>)
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	4a17      	ldr	r2, [pc, #92]	; (8015d78 <xPortStartScheduler+0x138>)
 8015d1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015d20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015d22:	4b15      	ldr	r3, [pc, #84]	; (8015d78 <xPortStartScheduler+0x138>)
 8015d24:	681b      	ldr	r3, [r3, #0]
 8015d26:	4a14      	ldr	r2, [pc, #80]	; (8015d78 <xPortStartScheduler+0x138>)
 8015d28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015d2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015d2e:	f000 f8dd 	bl	8015eec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015d32:	4b12      	ldr	r3, [pc, #72]	; (8015d7c <xPortStartScheduler+0x13c>)
 8015d34:	2200      	movs	r2, #0
 8015d36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015d38:	f000 f8fc 	bl	8015f34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015d3c:	4b10      	ldr	r3, [pc, #64]	; (8015d80 <xPortStartScheduler+0x140>)
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	4a0f      	ldr	r2, [pc, #60]	; (8015d80 <xPortStartScheduler+0x140>)
 8015d42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015d46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015d48:	f7ff ff66 	bl	8015c18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015d4c:	f7fe fd1c 	bl	8014788 <vTaskSwitchContext>
	prvTaskExitError();
 8015d50:	f7ff ff22 	bl	8015b98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015d54:	2300      	movs	r3, #0
}
 8015d56:	4618      	mov	r0, r3
 8015d58:	3718      	adds	r7, #24
 8015d5a:	46bd      	mov	sp, r7
 8015d5c:	bd80      	pop	{r7, pc}
 8015d5e:	bf00      	nop
 8015d60:	e000ed00 	.word	0xe000ed00
 8015d64:	410fc271 	.word	0x410fc271
 8015d68:	410fc270 	.word	0x410fc270
 8015d6c:	e000e400 	.word	0xe000e400
 8015d70:	200035a4 	.word	0x200035a4
 8015d74:	200035a8 	.word	0x200035a8
 8015d78:	e000ed20 	.word	0xe000ed20
 8015d7c:	20000160 	.word	0x20000160
 8015d80:	e000ef34 	.word	0xe000ef34

08015d84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015d84:	b480      	push	{r7}
 8015d86:	b083      	sub	sp, #12
 8015d88:	af00      	add	r7, sp, #0
	__asm volatile
 8015d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d8e:	f383 8811 	msr	BASEPRI, r3
 8015d92:	f3bf 8f6f 	isb	sy
 8015d96:	f3bf 8f4f 	dsb	sy
 8015d9a:	607b      	str	r3, [r7, #4]
}
 8015d9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015d9e:	4b0f      	ldr	r3, [pc, #60]	; (8015ddc <vPortEnterCritical+0x58>)
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	3301      	adds	r3, #1
 8015da4:	4a0d      	ldr	r2, [pc, #52]	; (8015ddc <vPortEnterCritical+0x58>)
 8015da6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015da8:	4b0c      	ldr	r3, [pc, #48]	; (8015ddc <vPortEnterCritical+0x58>)
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	2b01      	cmp	r3, #1
 8015dae:	d10f      	bne.n	8015dd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015db0:	4b0b      	ldr	r3, [pc, #44]	; (8015de0 <vPortEnterCritical+0x5c>)
 8015db2:	681b      	ldr	r3, [r3, #0]
 8015db4:	b2db      	uxtb	r3, r3
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d00a      	beq.n	8015dd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8015dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dbe:	f383 8811 	msr	BASEPRI, r3
 8015dc2:	f3bf 8f6f 	isb	sy
 8015dc6:	f3bf 8f4f 	dsb	sy
 8015dca:	603b      	str	r3, [r7, #0]
}
 8015dcc:	bf00      	nop
 8015dce:	e7fe      	b.n	8015dce <vPortEnterCritical+0x4a>
	}
}
 8015dd0:	bf00      	nop
 8015dd2:	370c      	adds	r7, #12
 8015dd4:	46bd      	mov	sp, r7
 8015dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dda:	4770      	bx	lr
 8015ddc:	20000160 	.word	0x20000160
 8015de0:	e000ed04 	.word	0xe000ed04

08015de4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015de4:	b480      	push	{r7}
 8015de6:	b083      	sub	sp, #12
 8015de8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015dea:	4b12      	ldr	r3, [pc, #72]	; (8015e34 <vPortExitCritical+0x50>)
 8015dec:	681b      	ldr	r3, [r3, #0]
 8015dee:	2b00      	cmp	r3, #0
 8015df0:	d10a      	bne.n	8015e08 <vPortExitCritical+0x24>
	__asm volatile
 8015df2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015df6:	f383 8811 	msr	BASEPRI, r3
 8015dfa:	f3bf 8f6f 	isb	sy
 8015dfe:	f3bf 8f4f 	dsb	sy
 8015e02:	607b      	str	r3, [r7, #4]
}
 8015e04:	bf00      	nop
 8015e06:	e7fe      	b.n	8015e06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015e08:	4b0a      	ldr	r3, [pc, #40]	; (8015e34 <vPortExitCritical+0x50>)
 8015e0a:	681b      	ldr	r3, [r3, #0]
 8015e0c:	3b01      	subs	r3, #1
 8015e0e:	4a09      	ldr	r2, [pc, #36]	; (8015e34 <vPortExitCritical+0x50>)
 8015e10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015e12:	4b08      	ldr	r3, [pc, #32]	; (8015e34 <vPortExitCritical+0x50>)
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d105      	bne.n	8015e26 <vPortExitCritical+0x42>
 8015e1a:	2300      	movs	r3, #0
 8015e1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015e1e:	683b      	ldr	r3, [r7, #0]
 8015e20:	f383 8811 	msr	BASEPRI, r3
}
 8015e24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015e26:	bf00      	nop
 8015e28:	370c      	adds	r7, #12
 8015e2a:	46bd      	mov	sp, r7
 8015e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e30:	4770      	bx	lr
 8015e32:	bf00      	nop
 8015e34:	20000160 	.word	0x20000160
	...

08015e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015e40:	f3ef 8009 	mrs	r0, PSP
 8015e44:	f3bf 8f6f 	isb	sy
 8015e48:	4b15      	ldr	r3, [pc, #84]	; (8015ea0 <pxCurrentTCBConst>)
 8015e4a:	681a      	ldr	r2, [r3, #0]
 8015e4c:	f01e 0f10 	tst.w	lr, #16
 8015e50:	bf08      	it	eq
 8015e52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015e56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e5a:	6010      	str	r0, [r2, #0]
 8015e5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015e60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015e64:	f380 8811 	msr	BASEPRI, r0
 8015e68:	f3bf 8f4f 	dsb	sy
 8015e6c:	f3bf 8f6f 	isb	sy
 8015e70:	f7fe fc8a 	bl	8014788 <vTaskSwitchContext>
 8015e74:	f04f 0000 	mov.w	r0, #0
 8015e78:	f380 8811 	msr	BASEPRI, r0
 8015e7c:	bc09      	pop	{r0, r3}
 8015e7e:	6819      	ldr	r1, [r3, #0]
 8015e80:	6808      	ldr	r0, [r1, #0]
 8015e82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e86:	f01e 0f10 	tst.w	lr, #16
 8015e8a:	bf08      	it	eq
 8015e8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015e90:	f380 8809 	msr	PSP, r0
 8015e94:	f3bf 8f6f 	isb	sy
 8015e98:	4770      	bx	lr
 8015e9a:	bf00      	nop
 8015e9c:	f3af 8000 	nop.w

08015ea0 <pxCurrentTCBConst>:
 8015ea0:	20002f70 	.word	0x20002f70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015ea4:	bf00      	nop
 8015ea6:	bf00      	nop

08015ea8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015ea8:	b580      	push	{r7, lr}
 8015eaa:	b082      	sub	sp, #8
 8015eac:	af00      	add	r7, sp, #0
	__asm volatile
 8015eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015eb2:	f383 8811 	msr	BASEPRI, r3
 8015eb6:	f3bf 8f6f 	isb	sy
 8015eba:	f3bf 8f4f 	dsb	sy
 8015ebe:	607b      	str	r3, [r7, #4]
}
 8015ec0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015ec2:	f7fe fba7 	bl	8014614 <xTaskIncrementTick>
 8015ec6:	4603      	mov	r3, r0
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d003      	beq.n	8015ed4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015ecc:	4b06      	ldr	r3, [pc, #24]	; (8015ee8 <xPortSysTickHandler+0x40>)
 8015ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ed2:	601a      	str	r2, [r3, #0]
 8015ed4:	2300      	movs	r3, #0
 8015ed6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015ed8:	683b      	ldr	r3, [r7, #0]
 8015eda:	f383 8811 	msr	BASEPRI, r3
}
 8015ede:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015ee0:	bf00      	nop
 8015ee2:	3708      	adds	r7, #8
 8015ee4:	46bd      	mov	sp, r7
 8015ee6:	bd80      	pop	{r7, pc}
 8015ee8:	e000ed04 	.word	0xe000ed04

08015eec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015eec:	b480      	push	{r7}
 8015eee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015ef0:	4b0b      	ldr	r3, [pc, #44]	; (8015f20 <vPortSetupTimerInterrupt+0x34>)
 8015ef2:	2200      	movs	r2, #0
 8015ef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015ef6:	4b0b      	ldr	r3, [pc, #44]	; (8015f24 <vPortSetupTimerInterrupt+0x38>)
 8015ef8:	2200      	movs	r2, #0
 8015efa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015efc:	4b0a      	ldr	r3, [pc, #40]	; (8015f28 <vPortSetupTimerInterrupt+0x3c>)
 8015efe:	681b      	ldr	r3, [r3, #0]
 8015f00:	4a0a      	ldr	r2, [pc, #40]	; (8015f2c <vPortSetupTimerInterrupt+0x40>)
 8015f02:	fba2 2303 	umull	r2, r3, r2, r3
 8015f06:	099b      	lsrs	r3, r3, #6
 8015f08:	4a09      	ldr	r2, [pc, #36]	; (8015f30 <vPortSetupTimerInterrupt+0x44>)
 8015f0a:	3b01      	subs	r3, #1
 8015f0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015f0e:	4b04      	ldr	r3, [pc, #16]	; (8015f20 <vPortSetupTimerInterrupt+0x34>)
 8015f10:	2207      	movs	r2, #7
 8015f12:	601a      	str	r2, [r3, #0]
}
 8015f14:	bf00      	nop
 8015f16:	46bd      	mov	sp, r7
 8015f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f1c:	4770      	bx	lr
 8015f1e:	bf00      	nop
 8015f20:	e000e010 	.word	0xe000e010
 8015f24:	e000e018 	.word	0xe000e018
 8015f28:	20000008 	.word	0x20000008
 8015f2c:	10624dd3 	.word	0x10624dd3
 8015f30:	e000e014 	.word	0xe000e014

08015f34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015f34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015f44 <vPortEnableVFP+0x10>
 8015f38:	6801      	ldr	r1, [r0, #0]
 8015f3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015f3e:	6001      	str	r1, [r0, #0]
 8015f40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015f42:	bf00      	nop
 8015f44:	e000ed88 	.word	0xe000ed88

08015f48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015f48:	b480      	push	{r7}
 8015f4a:	b085      	sub	sp, #20
 8015f4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015f4e:	f3ef 8305 	mrs	r3, IPSR
 8015f52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015f54:	68fb      	ldr	r3, [r7, #12]
 8015f56:	2b0f      	cmp	r3, #15
 8015f58:	d914      	bls.n	8015f84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015f5a:	4a17      	ldr	r2, [pc, #92]	; (8015fb8 <vPortValidateInterruptPriority+0x70>)
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	4413      	add	r3, r2
 8015f60:	781b      	ldrb	r3, [r3, #0]
 8015f62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015f64:	4b15      	ldr	r3, [pc, #84]	; (8015fbc <vPortValidateInterruptPriority+0x74>)
 8015f66:	781b      	ldrb	r3, [r3, #0]
 8015f68:	7afa      	ldrb	r2, [r7, #11]
 8015f6a:	429a      	cmp	r2, r3
 8015f6c:	d20a      	bcs.n	8015f84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8015f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f72:	f383 8811 	msr	BASEPRI, r3
 8015f76:	f3bf 8f6f 	isb	sy
 8015f7a:	f3bf 8f4f 	dsb	sy
 8015f7e:	607b      	str	r3, [r7, #4]
}
 8015f80:	bf00      	nop
 8015f82:	e7fe      	b.n	8015f82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015f84:	4b0e      	ldr	r3, [pc, #56]	; (8015fc0 <vPortValidateInterruptPriority+0x78>)
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015f8c:	4b0d      	ldr	r3, [pc, #52]	; (8015fc4 <vPortValidateInterruptPriority+0x7c>)
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	429a      	cmp	r2, r3
 8015f92:	d90a      	bls.n	8015faa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f98:	f383 8811 	msr	BASEPRI, r3
 8015f9c:	f3bf 8f6f 	isb	sy
 8015fa0:	f3bf 8f4f 	dsb	sy
 8015fa4:	603b      	str	r3, [r7, #0]
}
 8015fa6:	bf00      	nop
 8015fa8:	e7fe      	b.n	8015fa8 <vPortValidateInterruptPriority+0x60>
	}
 8015faa:	bf00      	nop
 8015fac:	3714      	adds	r7, #20
 8015fae:	46bd      	mov	sp, r7
 8015fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fb4:	4770      	bx	lr
 8015fb6:	bf00      	nop
 8015fb8:	e000e3f0 	.word	0xe000e3f0
 8015fbc:	200035a4 	.word	0x200035a4
 8015fc0:	e000ed0c 	.word	0xe000ed0c
 8015fc4:	200035a8 	.word	0x200035a8

08015fc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015fc8:	b580      	push	{r7, lr}
 8015fca:	b08a      	sub	sp, #40	; 0x28
 8015fcc:	af00      	add	r7, sp, #0
 8015fce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015fd0:	2300      	movs	r3, #0
 8015fd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015fd4:	f7fe f9d2 	bl	801437c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015fd8:	4b5b      	ldr	r3, [pc, #364]	; (8016148 <pvPortMalloc+0x180>)
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d101      	bne.n	8015fe4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015fe0:	f000 f92c 	bl	801623c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015fe4:	4b59      	ldr	r3, [pc, #356]	; (801614c <pvPortMalloc+0x184>)
 8015fe6:	681a      	ldr	r2, [r3, #0]
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	4013      	ands	r3, r2
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	f040 8093 	bne.w	8016118 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	2b00      	cmp	r3, #0
 8015ff6:	d01d      	beq.n	8016034 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015ff8:	2208      	movs	r2, #8
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	4413      	add	r3, r2
 8015ffe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	f003 0307 	and.w	r3, r3, #7
 8016006:	2b00      	cmp	r3, #0
 8016008:	d014      	beq.n	8016034 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	f023 0307 	bic.w	r3, r3, #7
 8016010:	3308      	adds	r3, #8
 8016012:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	f003 0307 	and.w	r3, r3, #7
 801601a:	2b00      	cmp	r3, #0
 801601c:	d00a      	beq.n	8016034 <pvPortMalloc+0x6c>
	__asm volatile
 801601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016022:	f383 8811 	msr	BASEPRI, r3
 8016026:	f3bf 8f6f 	isb	sy
 801602a:	f3bf 8f4f 	dsb	sy
 801602e:	617b      	str	r3, [r7, #20]
}
 8016030:	bf00      	nop
 8016032:	e7fe      	b.n	8016032 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8016034:	687b      	ldr	r3, [r7, #4]
 8016036:	2b00      	cmp	r3, #0
 8016038:	d06e      	beq.n	8016118 <pvPortMalloc+0x150>
 801603a:	4b45      	ldr	r3, [pc, #276]	; (8016150 <pvPortMalloc+0x188>)
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	687a      	ldr	r2, [r7, #4]
 8016040:	429a      	cmp	r2, r3
 8016042:	d869      	bhi.n	8016118 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016044:	4b43      	ldr	r3, [pc, #268]	; (8016154 <pvPortMalloc+0x18c>)
 8016046:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016048:	4b42      	ldr	r3, [pc, #264]	; (8016154 <pvPortMalloc+0x18c>)
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801604e:	e004      	b.n	801605a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016052:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016056:	681b      	ldr	r3, [r3, #0]
 8016058:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801605a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801605c:	685b      	ldr	r3, [r3, #4]
 801605e:	687a      	ldr	r2, [r7, #4]
 8016060:	429a      	cmp	r2, r3
 8016062:	d903      	bls.n	801606c <pvPortMalloc+0xa4>
 8016064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	2b00      	cmp	r3, #0
 801606a:	d1f1      	bne.n	8016050 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801606c:	4b36      	ldr	r3, [pc, #216]	; (8016148 <pvPortMalloc+0x180>)
 801606e:	681b      	ldr	r3, [r3, #0]
 8016070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016072:	429a      	cmp	r2, r3
 8016074:	d050      	beq.n	8016118 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016076:	6a3b      	ldr	r3, [r7, #32]
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	2208      	movs	r2, #8
 801607c:	4413      	add	r3, r2
 801607e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016082:	681a      	ldr	r2, [r3, #0]
 8016084:	6a3b      	ldr	r3, [r7, #32]
 8016086:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801608a:	685a      	ldr	r2, [r3, #4]
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	1ad2      	subs	r2, r2, r3
 8016090:	2308      	movs	r3, #8
 8016092:	005b      	lsls	r3, r3, #1
 8016094:	429a      	cmp	r2, r3
 8016096:	d91f      	bls.n	80160d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016098:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	4413      	add	r3, r2
 801609e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80160a0:	69bb      	ldr	r3, [r7, #24]
 80160a2:	f003 0307 	and.w	r3, r3, #7
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d00a      	beq.n	80160c0 <pvPortMalloc+0xf8>
	__asm volatile
 80160aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80160ae:	f383 8811 	msr	BASEPRI, r3
 80160b2:	f3bf 8f6f 	isb	sy
 80160b6:	f3bf 8f4f 	dsb	sy
 80160ba:	613b      	str	r3, [r7, #16]
}
 80160bc:	bf00      	nop
 80160be:	e7fe      	b.n	80160be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80160c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160c2:	685a      	ldr	r2, [r3, #4]
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	1ad2      	subs	r2, r2, r3
 80160c8:	69bb      	ldr	r3, [r7, #24]
 80160ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80160cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160ce:	687a      	ldr	r2, [r7, #4]
 80160d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80160d2:	69b8      	ldr	r0, [r7, #24]
 80160d4:	f000 f914 	bl	8016300 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80160d8:	4b1d      	ldr	r3, [pc, #116]	; (8016150 <pvPortMalloc+0x188>)
 80160da:	681a      	ldr	r2, [r3, #0]
 80160dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160de:	685b      	ldr	r3, [r3, #4]
 80160e0:	1ad3      	subs	r3, r2, r3
 80160e2:	4a1b      	ldr	r2, [pc, #108]	; (8016150 <pvPortMalloc+0x188>)
 80160e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80160e6:	4b1a      	ldr	r3, [pc, #104]	; (8016150 <pvPortMalloc+0x188>)
 80160e8:	681a      	ldr	r2, [r3, #0]
 80160ea:	4b1b      	ldr	r3, [pc, #108]	; (8016158 <pvPortMalloc+0x190>)
 80160ec:	681b      	ldr	r3, [r3, #0]
 80160ee:	429a      	cmp	r2, r3
 80160f0:	d203      	bcs.n	80160fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80160f2:	4b17      	ldr	r3, [pc, #92]	; (8016150 <pvPortMalloc+0x188>)
 80160f4:	681b      	ldr	r3, [r3, #0]
 80160f6:	4a18      	ldr	r2, [pc, #96]	; (8016158 <pvPortMalloc+0x190>)
 80160f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80160fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160fc:	685a      	ldr	r2, [r3, #4]
 80160fe:	4b13      	ldr	r3, [pc, #76]	; (801614c <pvPortMalloc+0x184>)
 8016100:	681b      	ldr	r3, [r3, #0]
 8016102:	431a      	orrs	r2, r3
 8016104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016106:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8016108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801610a:	2200      	movs	r2, #0
 801610c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801610e:	4b13      	ldr	r3, [pc, #76]	; (801615c <pvPortMalloc+0x194>)
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	3301      	adds	r3, #1
 8016114:	4a11      	ldr	r2, [pc, #68]	; (801615c <pvPortMalloc+0x194>)
 8016116:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8016118:	f7fe f93e 	bl	8014398 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801611c:	69fb      	ldr	r3, [r7, #28]
 801611e:	f003 0307 	and.w	r3, r3, #7
 8016122:	2b00      	cmp	r3, #0
 8016124:	d00a      	beq.n	801613c <pvPortMalloc+0x174>
	__asm volatile
 8016126:	f04f 0350 	mov.w	r3, #80	; 0x50
 801612a:	f383 8811 	msr	BASEPRI, r3
 801612e:	f3bf 8f6f 	isb	sy
 8016132:	f3bf 8f4f 	dsb	sy
 8016136:	60fb      	str	r3, [r7, #12]
}
 8016138:	bf00      	nop
 801613a:	e7fe      	b.n	801613a <pvPortMalloc+0x172>
	return pvReturn;
 801613c:	69fb      	ldr	r3, [r7, #28]
}
 801613e:	4618      	mov	r0, r3
 8016140:	3728      	adds	r7, #40	; 0x28
 8016142:	46bd      	mov	sp, r7
 8016144:	bd80      	pop	{r7, pc}
 8016146:	bf00      	nop
 8016148:	20007c04 	.word	0x20007c04
 801614c:	20007c18 	.word	0x20007c18
 8016150:	20007c08 	.word	0x20007c08
 8016154:	20007bfc 	.word	0x20007bfc
 8016158:	20007c0c 	.word	0x20007c0c
 801615c:	20007c10 	.word	0x20007c10

08016160 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016160:	b580      	push	{r7, lr}
 8016162:	b086      	sub	sp, #24
 8016164:	af00      	add	r7, sp, #0
 8016166:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	2b00      	cmp	r3, #0
 8016170:	d04d      	beq.n	801620e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016172:	2308      	movs	r3, #8
 8016174:	425b      	negs	r3, r3
 8016176:	697a      	ldr	r2, [r7, #20]
 8016178:	4413      	add	r3, r2
 801617a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801617c:	697b      	ldr	r3, [r7, #20]
 801617e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016180:	693b      	ldr	r3, [r7, #16]
 8016182:	685a      	ldr	r2, [r3, #4]
 8016184:	4b24      	ldr	r3, [pc, #144]	; (8016218 <vPortFree+0xb8>)
 8016186:	681b      	ldr	r3, [r3, #0]
 8016188:	4013      	ands	r3, r2
 801618a:	2b00      	cmp	r3, #0
 801618c:	d10a      	bne.n	80161a4 <vPortFree+0x44>
	__asm volatile
 801618e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016192:	f383 8811 	msr	BASEPRI, r3
 8016196:	f3bf 8f6f 	isb	sy
 801619a:	f3bf 8f4f 	dsb	sy
 801619e:	60fb      	str	r3, [r7, #12]
}
 80161a0:	bf00      	nop
 80161a2:	e7fe      	b.n	80161a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80161a4:	693b      	ldr	r3, [r7, #16]
 80161a6:	681b      	ldr	r3, [r3, #0]
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d00a      	beq.n	80161c2 <vPortFree+0x62>
	__asm volatile
 80161ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161b0:	f383 8811 	msr	BASEPRI, r3
 80161b4:	f3bf 8f6f 	isb	sy
 80161b8:	f3bf 8f4f 	dsb	sy
 80161bc:	60bb      	str	r3, [r7, #8]
}
 80161be:	bf00      	nop
 80161c0:	e7fe      	b.n	80161c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80161c2:	693b      	ldr	r3, [r7, #16]
 80161c4:	685a      	ldr	r2, [r3, #4]
 80161c6:	4b14      	ldr	r3, [pc, #80]	; (8016218 <vPortFree+0xb8>)
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	4013      	ands	r3, r2
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d01e      	beq.n	801620e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80161d0:	693b      	ldr	r3, [r7, #16]
 80161d2:	681b      	ldr	r3, [r3, #0]
 80161d4:	2b00      	cmp	r3, #0
 80161d6:	d11a      	bne.n	801620e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80161d8:	693b      	ldr	r3, [r7, #16]
 80161da:	685a      	ldr	r2, [r3, #4]
 80161dc:	4b0e      	ldr	r3, [pc, #56]	; (8016218 <vPortFree+0xb8>)
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	43db      	mvns	r3, r3
 80161e2:	401a      	ands	r2, r3
 80161e4:	693b      	ldr	r3, [r7, #16]
 80161e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80161e8:	f7fe f8c8 	bl	801437c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80161ec:	693b      	ldr	r3, [r7, #16]
 80161ee:	685a      	ldr	r2, [r3, #4]
 80161f0:	4b0a      	ldr	r3, [pc, #40]	; (801621c <vPortFree+0xbc>)
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	4413      	add	r3, r2
 80161f6:	4a09      	ldr	r2, [pc, #36]	; (801621c <vPortFree+0xbc>)
 80161f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80161fa:	6938      	ldr	r0, [r7, #16]
 80161fc:	f000 f880 	bl	8016300 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016200:	4b07      	ldr	r3, [pc, #28]	; (8016220 <vPortFree+0xc0>)
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	3301      	adds	r3, #1
 8016206:	4a06      	ldr	r2, [pc, #24]	; (8016220 <vPortFree+0xc0>)
 8016208:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801620a:	f7fe f8c5 	bl	8014398 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801620e:	bf00      	nop
 8016210:	3718      	adds	r7, #24
 8016212:	46bd      	mov	sp, r7
 8016214:	bd80      	pop	{r7, pc}
 8016216:	bf00      	nop
 8016218:	20007c18 	.word	0x20007c18
 801621c:	20007c08 	.word	0x20007c08
 8016220:	20007c14 	.word	0x20007c14

08016224 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8016224:	b480      	push	{r7}
 8016226:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8016228:	4b03      	ldr	r3, [pc, #12]	; (8016238 <xPortGetFreeHeapSize+0x14>)
 801622a:	681b      	ldr	r3, [r3, #0]
}
 801622c:	4618      	mov	r0, r3
 801622e:	46bd      	mov	sp, r7
 8016230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016234:	4770      	bx	lr
 8016236:	bf00      	nop
 8016238:	20007c08 	.word	0x20007c08

0801623c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801623c:	b480      	push	{r7}
 801623e:	b085      	sub	sp, #20
 8016240:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016242:	f244 6350 	movw	r3, #18000	; 0x4650
 8016246:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016248:	4b27      	ldr	r3, [pc, #156]	; (80162e8 <prvHeapInit+0xac>)
 801624a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	f003 0307 	and.w	r3, r3, #7
 8016252:	2b00      	cmp	r3, #0
 8016254:	d00c      	beq.n	8016270 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016256:	68fb      	ldr	r3, [r7, #12]
 8016258:	3307      	adds	r3, #7
 801625a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	f023 0307 	bic.w	r3, r3, #7
 8016262:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016264:	68ba      	ldr	r2, [r7, #8]
 8016266:	68fb      	ldr	r3, [r7, #12]
 8016268:	1ad3      	subs	r3, r2, r3
 801626a:	4a1f      	ldr	r2, [pc, #124]	; (80162e8 <prvHeapInit+0xac>)
 801626c:	4413      	add	r3, r2
 801626e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016270:	68fb      	ldr	r3, [r7, #12]
 8016272:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016274:	4a1d      	ldr	r2, [pc, #116]	; (80162ec <prvHeapInit+0xb0>)
 8016276:	687b      	ldr	r3, [r7, #4]
 8016278:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801627a:	4b1c      	ldr	r3, [pc, #112]	; (80162ec <prvHeapInit+0xb0>)
 801627c:	2200      	movs	r2, #0
 801627e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	68ba      	ldr	r2, [r7, #8]
 8016284:	4413      	add	r3, r2
 8016286:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016288:	2208      	movs	r2, #8
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	1a9b      	subs	r3, r3, r2
 801628e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016290:	68fb      	ldr	r3, [r7, #12]
 8016292:	f023 0307 	bic.w	r3, r3, #7
 8016296:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016298:	68fb      	ldr	r3, [r7, #12]
 801629a:	4a15      	ldr	r2, [pc, #84]	; (80162f0 <prvHeapInit+0xb4>)
 801629c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801629e:	4b14      	ldr	r3, [pc, #80]	; (80162f0 <prvHeapInit+0xb4>)
 80162a0:	681b      	ldr	r3, [r3, #0]
 80162a2:	2200      	movs	r2, #0
 80162a4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80162a6:	4b12      	ldr	r3, [pc, #72]	; (80162f0 <prvHeapInit+0xb4>)
 80162a8:	681b      	ldr	r3, [r3, #0]
 80162aa:	2200      	movs	r2, #0
 80162ac:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80162b2:	683b      	ldr	r3, [r7, #0]
 80162b4:	68fa      	ldr	r2, [r7, #12]
 80162b6:	1ad2      	subs	r2, r2, r3
 80162b8:	683b      	ldr	r3, [r7, #0]
 80162ba:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80162bc:	4b0c      	ldr	r3, [pc, #48]	; (80162f0 <prvHeapInit+0xb4>)
 80162be:	681a      	ldr	r2, [r3, #0]
 80162c0:	683b      	ldr	r3, [r7, #0]
 80162c2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80162c4:	683b      	ldr	r3, [r7, #0]
 80162c6:	685b      	ldr	r3, [r3, #4]
 80162c8:	4a0a      	ldr	r2, [pc, #40]	; (80162f4 <prvHeapInit+0xb8>)
 80162ca:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80162cc:	683b      	ldr	r3, [r7, #0]
 80162ce:	685b      	ldr	r3, [r3, #4]
 80162d0:	4a09      	ldr	r2, [pc, #36]	; (80162f8 <prvHeapInit+0xbc>)
 80162d2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80162d4:	4b09      	ldr	r3, [pc, #36]	; (80162fc <prvHeapInit+0xc0>)
 80162d6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80162da:	601a      	str	r2, [r3, #0]
}
 80162dc:	bf00      	nop
 80162de:	3714      	adds	r7, #20
 80162e0:	46bd      	mov	sp, r7
 80162e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162e6:	4770      	bx	lr
 80162e8:	200035ac 	.word	0x200035ac
 80162ec:	20007bfc 	.word	0x20007bfc
 80162f0:	20007c04 	.word	0x20007c04
 80162f4:	20007c0c 	.word	0x20007c0c
 80162f8:	20007c08 	.word	0x20007c08
 80162fc:	20007c18 	.word	0x20007c18

08016300 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016300:	b480      	push	{r7}
 8016302:	b085      	sub	sp, #20
 8016304:	af00      	add	r7, sp, #0
 8016306:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016308:	4b28      	ldr	r3, [pc, #160]	; (80163ac <prvInsertBlockIntoFreeList+0xac>)
 801630a:	60fb      	str	r3, [r7, #12]
 801630c:	e002      	b.n	8016314 <prvInsertBlockIntoFreeList+0x14>
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	681b      	ldr	r3, [r3, #0]
 8016312:	60fb      	str	r3, [r7, #12]
 8016314:	68fb      	ldr	r3, [r7, #12]
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	687a      	ldr	r2, [r7, #4]
 801631a:	429a      	cmp	r2, r3
 801631c:	d8f7      	bhi.n	801630e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801631e:	68fb      	ldr	r3, [r7, #12]
 8016320:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016322:	68fb      	ldr	r3, [r7, #12]
 8016324:	685b      	ldr	r3, [r3, #4]
 8016326:	68ba      	ldr	r2, [r7, #8]
 8016328:	4413      	add	r3, r2
 801632a:	687a      	ldr	r2, [r7, #4]
 801632c:	429a      	cmp	r2, r3
 801632e:	d108      	bne.n	8016342 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	685a      	ldr	r2, [r3, #4]
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	685b      	ldr	r3, [r3, #4]
 8016338:	441a      	add	r2, r3
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016342:	687b      	ldr	r3, [r7, #4]
 8016344:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016346:	687b      	ldr	r3, [r7, #4]
 8016348:	685b      	ldr	r3, [r3, #4]
 801634a:	68ba      	ldr	r2, [r7, #8]
 801634c:	441a      	add	r2, r3
 801634e:	68fb      	ldr	r3, [r7, #12]
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	429a      	cmp	r2, r3
 8016354:	d118      	bne.n	8016388 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016356:	68fb      	ldr	r3, [r7, #12]
 8016358:	681a      	ldr	r2, [r3, #0]
 801635a:	4b15      	ldr	r3, [pc, #84]	; (80163b0 <prvInsertBlockIntoFreeList+0xb0>)
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	429a      	cmp	r2, r3
 8016360:	d00d      	beq.n	801637e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	685a      	ldr	r2, [r3, #4]
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	685b      	ldr	r3, [r3, #4]
 801636c:	441a      	add	r2, r3
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	681a      	ldr	r2, [r3, #0]
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	601a      	str	r2, [r3, #0]
 801637c:	e008      	b.n	8016390 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801637e:	4b0c      	ldr	r3, [pc, #48]	; (80163b0 <prvInsertBlockIntoFreeList+0xb0>)
 8016380:	681a      	ldr	r2, [r3, #0]
 8016382:	687b      	ldr	r3, [r7, #4]
 8016384:	601a      	str	r2, [r3, #0]
 8016386:	e003      	b.n	8016390 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016388:	68fb      	ldr	r3, [r7, #12]
 801638a:	681a      	ldr	r2, [r3, #0]
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016390:	68fa      	ldr	r2, [r7, #12]
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	429a      	cmp	r2, r3
 8016396:	d002      	beq.n	801639e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016398:	68fb      	ldr	r3, [r7, #12]
 801639a:	687a      	ldr	r2, [r7, #4]
 801639c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801639e:	bf00      	nop
 80163a0:	3714      	adds	r7, #20
 80163a2:	46bd      	mov	sp, r7
 80163a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163a8:	4770      	bx	lr
 80163aa:	bf00      	nop
 80163ac:	20007bfc 	.word	0x20007bfc
 80163b0:	20007c04 	.word	0x20007c04

080163b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80163b4:	b580      	push	{r7, lr}
 80163b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80163b8:	2200      	movs	r2, #0
 80163ba:	4912      	ldr	r1, [pc, #72]	; (8016404 <MX_USB_DEVICE_Init+0x50>)
 80163bc:	4812      	ldr	r0, [pc, #72]	; (8016408 <MX_USB_DEVICE_Init+0x54>)
 80163be:	f7f7 fbab 	bl	800db18 <USBD_Init>
 80163c2:	4603      	mov	r3, r0
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	d001      	beq.n	80163cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80163c8:	f7ee fb74 	bl	8004ab4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80163cc:	490f      	ldr	r1, [pc, #60]	; (801640c <MX_USB_DEVICE_Init+0x58>)
 80163ce:	480e      	ldr	r0, [pc, #56]	; (8016408 <MX_USB_DEVICE_Init+0x54>)
 80163d0:	f7f7 fbd2 	bl	800db78 <USBD_RegisterClass>
 80163d4:	4603      	mov	r3, r0
 80163d6:	2b00      	cmp	r3, #0
 80163d8:	d001      	beq.n	80163de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80163da:	f7ee fb6b 	bl	8004ab4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80163de:	490c      	ldr	r1, [pc, #48]	; (8016410 <MX_USB_DEVICE_Init+0x5c>)
 80163e0:	4809      	ldr	r0, [pc, #36]	; (8016408 <MX_USB_DEVICE_Init+0x54>)
 80163e2:	f7f7 faf3 	bl	800d9cc <USBD_CDC_RegisterInterface>
 80163e6:	4603      	mov	r3, r0
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d001      	beq.n	80163f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80163ec:	f7ee fb62 	bl	8004ab4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80163f0:	4805      	ldr	r0, [pc, #20]	; (8016408 <MX_USB_DEVICE_Init+0x54>)
 80163f2:	f7f7 fbe8 	bl	800dbc6 <USBD_Start>
 80163f6:	4603      	mov	r3, r0
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d001      	beq.n	8016400 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80163fc:	f7ee fb5a 	bl	8004ab4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016400:	bf00      	nop
 8016402:	bd80      	pop	{r7, pc}
 8016404:	20000178 	.word	0x20000178
 8016408:	2001d778 	.word	0x2001d778
 801640c:	2000005c 	.word	0x2000005c
 8016410:	20000164 	.word	0x20000164

08016414 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016414:	b580      	push	{r7, lr}
 8016416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016418:	2200      	movs	r2, #0
 801641a:	4905      	ldr	r1, [pc, #20]	; (8016430 <CDC_Init_FS+0x1c>)
 801641c:	4805      	ldr	r0, [pc, #20]	; (8016434 <CDC_Init_FS+0x20>)
 801641e:	f7f7 faea 	bl	800d9f6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8016422:	4905      	ldr	r1, [pc, #20]	; (8016438 <CDC_Init_FS+0x24>)
 8016424:	4803      	ldr	r0, [pc, #12]	; (8016434 <CDC_Init_FS+0x20>)
 8016426:	f7f7 fb04 	bl	800da32 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801642a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801642c:	4618      	mov	r0, r3
 801642e:	bd80      	pop	{r7, pc}
 8016430:	2001e248 	.word	0x2001e248
 8016434:	2001d778 	.word	0x2001d778
 8016438:	2001da48 	.word	0x2001da48

0801643c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801643c:	b480      	push	{r7}
 801643e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016440:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8016442:	4618      	mov	r0, r3
 8016444:	46bd      	mov	sp, r7
 8016446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801644a:	4770      	bx	lr

0801644c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801644c:	b480      	push	{r7}
 801644e:	b083      	sub	sp, #12
 8016450:	af00      	add	r7, sp, #0
 8016452:	4603      	mov	r3, r0
 8016454:	6039      	str	r1, [r7, #0]
 8016456:	71fb      	strb	r3, [r7, #7]
 8016458:	4613      	mov	r3, r2
 801645a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801645c:	79fb      	ldrb	r3, [r7, #7]
 801645e:	2b23      	cmp	r3, #35	; 0x23
 8016460:	d84a      	bhi.n	80164f8 <CDC_Control_FS+0xac>
 8016462:	a201      	add	r2, pc, #4	; (adr r2, 8016468 <CDC_Control_FS+0x1c>)
 8016464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016468:	080164f9 	.word	0x080164f9
 801646c:	080164f9 	.word	0x080164f9
 8016470:	080164f9 	.word	0x080164f9
 8016474:	080164f9 	.word	0x080164f9
 8016478:	080164f9 	.word	0x080164f9
 801647c:	080164f9 	.word	0x080164f9
 8016480:	080164f9 	.word	0x080164f9
 8016484:	080164f9 	.word	0x080164f9
 8016488:	080164f9 	.word	0x080164f9
 801648c:	080164f9 	.word	0x080164f9
 8016490:	080164f9 	.word	0x080164f9
 8016494:	080164f9 	.word	0x080164f9
 8016498:	080164f9 	.word	0x080164f9
 801649c:	080164f9 	.word	0x080164f9
 80164a0:	080164f9 	.word	0x080164f9
 80164a4:	080164f9 	.word	0x080164f9
 80164a8:	080164f9 	.word	0x080164f9
 80164ac:	080164f9 	.word	0x080164f9
 80164b0:	080164f9 	.word	0x080164f9
 80164b4:	080164f9 	.word	0x080164f9
 80164b8:	080164f9 	.word	0x080164f9
 80164bc:	080164f9 	.word	0x080164f9
 80164c0:	080164f9 	.word	0x080164f9
 80164c4:	080164f9 	.word	0x080164f9
 80164c8:	080164f9 	.word	0x080164f9
 80164cc:	080164f9 	.word	0x080164f9
 80164d0:	080164f9 	.word	0x080164f9
 80164d4:	080164f9 	.word	0x080164f9
 80164d8:	080164f9 	.word	0x080164f9
 80164dc:	080164f9 	.word	0x080164f9
 80164e0:	080164f9 	.word	0x080164f9
 80164e4:	080164f9 	.word	0x080164f9
 80164e8:	080164f9 	.word	0x080164f9
 80164ec:	080164f9 	.word	0x080164f9
 80164f0:	080164f9 	.word	0x080164f9
 80164f4:	080164f9 	.word	0x080164f9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80164f8:	bf00      	nop
  }

  return (USBD_OK);
 80164fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80164fc:	4618      	mov	r0, r3
 80164fe:	370c      	adds	r7, #12
 8016500:	46bd      	mov	sp, r7
 8016502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016506:	4770      	bx	lr

08016508 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016508:	b580      	push	{r7, lr}
 801650a:	b082      	sub	sp, #8
 801650c:	af00      	add	r7, sp, #0
 801650e:	6078      	str	r0, [r7, #4]
 8016510:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8016512:	6879      	ldr	r1, [r7, #4]
 8016514:	4805      	ldr	r0, [pc, #20]	; (801652c <CDC_Receive_FS+0x24>)
 8016516:	f7f7 fa8c 	bl	800da32 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801651a:	4804      	ldr	r0, [pc, #16]	; (801652c <CDC_Receive_FS+0x24>)
 801651c:	f7f7 fad2 	bl	800dac4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016520:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8016522:	4618      	mov	r0, r3
 8016524:	3708      	adds	r7, #8
 8016526:	46bd      	mov	sp, r7
 8016528:	bd80      	pop	{r7, pc}
 801652a:	bf00      	nop
 801652c:	2001d778 	.word	0x2001d778

08016530 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8016530:	b580      	push	{r7, lr}
 8016532:	b084      	sub	sp, #16
 8016534:	af00      	add	r7, sp, #0
 8016536:	6078      	str	r0, [r7, #4]
 8016538:	460b      	mov	r3, r1
 801653a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801653c:	2300      	movs	r3, #0
 801653e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8016540:	4b0d      	ldr	r3, [pc, #52]	; (8016578 <CDC_Transmit_FS+0x48>)
 8016542:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016546:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016548:	68bb      	ldr	r3, [r7, #8]
 801654a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801654e:	2b00      	cmp	r3, #0
 8016550:	d001      	beq.n	8016556 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8016552:	2301      	movs	r3, #1
 8016554:	e00b      	b.n	801656e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8016556:	887b      	ldrh	r3, [r7, #2]
 8016558:	461a      	mov	r2, r3
 801655a:	6879      	ldr	r1, [r7, #4]
 801655c:	4806      	ldr	r0, [pc, #24]	; (8016578 <CDC_Transmit_FS+0x48>)
 801655e:	f7f7 fa4a 	bl	800d9f6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8016562:	4805      	ldr	r0, [pc, #20]	; (8016578 <CDC_Transmit_FS+0x48>)
 8016564:	f7f7 fa7e 	bl	800da64 <USBD_CDC_TransmitPacket>
 8016568:	4603      	mov	r3, r0
 801656a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 801656c:	7bfb      	ldrb	r3, [r7, #15]
}
 801656e:	4618      	mov	r0, r3
 8016570:	3710      	adds	r7, #16
 8016572:	46bd      	mov	sp, r7
 8016574:	bd80      	pop	{r7, pc}
 8016576:	bf00      	nop
 8016578:	2001d778 	.word	0x2001d778

0801657c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801657c:	b480      	push	{r7}
 801657e:	b087      	sub	sp, #28
 8016580:	af00      	add	r7, sp, #0
 8016582:	60f8      	str	r0, [r7, #12]
 8016584:	60b9      	str	r1, [r7, #8]
 8016586:	4613      	mov	r3, r2
 8016588:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801658a:	2300      	movs	r3, #0
 801658c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 801658e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016592:	4618      	mov	r0, r3
 8016594:	371c      	adds	r7, #28
 8016596:	46bd      	mov	sp, r7
 8016598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801659c:	4770      	bx	lr
	...

080165a0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80165a0:	b480      	push	{r7}
 80165a2:	b083      	sub	sp, #12
 80165a4:	af00      	add	r7, sp, #0
 80165a6:	4603      	mov	r3, r0
 80165a8:	6039      	str	r1, [r7, #0]
 80165aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80165ac:	683b      	ldr	r3, [r7, #0]
 80165ae:	2212      	movs	r2, #18
 80165b0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80165b2:	4b03      	ldr	r3, [pc, #12]	; (80165c0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80165b4:	4618      	mov	r0, r3
 80165b6:	370c      	adds	r7, #12
 80165b8:	46bd      	mov	sp, r7
 80165ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165be:	4770      	bx	lr
 80165c0:	20000194 	.word	0x20000194

080165c4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80165c4:	b480      	push	{r7}
 80165c6:	b083      	sub	sp, #12
 80165c8:	af00      	add	r7, sp, #0
 80165ca:	4603      	mov	r3, r0
 80165cc:	6039      	str	r1, [r7, #0]
 80165ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80165d0:	683b      	ldr	r3, [r7, #0]
 80165d2:	2204      	movs	r2, #4
 80165d4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80165d6:	4b03      	ldr	r3, [pc, #12]	; (80165e4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80165d8:	4618      	mov	r0, r3
 80165da:	370c      	adds	r7, #12
 80165dc:	46bd      	mov	sp, r7
 80165de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165e2:	4770      	bx	lr
 80165e4:	200001a8 	.word	0x200001a8

080165e8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80165e8:	b580      	push	{r7, lr}
 80165ea:	b082      	sub	sp, #8
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	4603      	mov	r3, r0
 80165f0:	6039      	str	r1, [r7, #0]
 80165f2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80165f4:	79fb      	ldrb	r3, [r7, #7]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d105      	bne.n	8016606 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80165fa:	683a      	ldr	r2, [r7, #0]
 80165fc:	4907      	ldr	r1, [pc, #28]	; (801661c <USBD_FS_ProductStrDescriptor+0x34>)
 80165fe:	4808      	ldr	r0, [pc, #32]	; (8016620 <USBD_FS_ProductStrDescriptor+0x38>)
 8016600:	f7f8 fb13 	bl	800ec2a <USBD_GetString>
 8016604:	e004      	b.n	8016610 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016606:	683a      	ldr	r2, [r7, #0]
 8016608:	4904      	ldr	r1, [pc, #16]	; (801661c <USBD_FS_ProductStrDescriptor+0x34>)
 801660a:	4805      	ldr	r0, [pc, #20]	; (8016620 <USBD_FS_ProductStrDescriptor+0x38>)
 801660c:	f7f8 fb0d 	bl	800ec2a <USBD_GetString>
  }
  return USBD_StrDesc;
 8016610:	4b02      	ldr	r3, [pc, #8]	; (801661c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016612:	4618      	mov	r0, r3
 8016614:	3708      	adds	r7, #8
 8016616:	46bd      	mov	sp, r7
 8016618:	bd80      	pop	{r7, pc}
 801661a:	bf00      	nop
 801661c:	2001ea48 	.word	0x2001ea48
 8016620:	0801a44c 	.word	0x0801a44c

08016624 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b082      	sub	sp, #8
 8016628:	af00      	add	r7, sp, #0
 801662a:	4603      	mov	r3, r0
 801662c:	6039      	str	r1, [r7, #0]
 801662e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016630:	683a      	ldr	r2, [r7, #0]
 8016632:	4904      	ldr	r1, [pc, #16]	; (8016644 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016634:	4804      	ldr	r0, [pc, #16]	; (8016648 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016636:	f7f8 faf8 	bl	800ec2a <USBD_GetString>
  return USBD_StrDesc;
 801663a:	4b02      	ldr	r3, [pc, #8]	; (8016644 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801663c:	4618      	mov	r0, r3
 801663e:	3708      	adds	r7, #8
 8016640:	46bd      	mov	sp, r7
 8016642:	bd80      	pop	{r7, pc}
 8016644:	2001ea48 	.word	0x2001ea48
 8016648:	0801a464 	.word	0x0801a464

0801664c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801664c:	b580      	push	{r7, lr}
 801664e:	b082      	sub	sp, #8
 8016650:	af00      	add	r7, sp, #0
 8016652:	4603      	mov	r3, r0
 8016654:	6039      	str	r1, [r7, #0]
 8016656:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016658:	683b      	ldr	r3, [r7, #0]
 801665a:	221a      	movs	r2, #26
 801665c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801665e:	f000 f843 	bl	80166e8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016662:	4b02      	ldr	r3, [pc, #8]	; (801666c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016664:	4618      	mov	r0, r3
 8016666:	3708      	adds	r7, #8
 8016668:	46bd      	mov	sp, r7
 801666a:	bd80      	pop	{r7, pc}
 801666c:	200001ac 	.word	0x200001ac

08016670 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016670:	b580      	push	{r7, lr}
 8016672:	b082      	sub	sp, #8
 8016674:	af00      	add	r7, sp, #0
 8016676:	4603      	mov	r3, r0
 8016678:	6039      	str	r1, [r7, #0]
 801667a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801667c:	79fb      	ldrb	r3, [r7, #7]
 801667e:	2b00      	cmp	r3, #0
 8016680:	d105      	bne.n	801668e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016682:	683a      	ldr	r2, [r7, #0]
 8016684:	4907      	ldr	r1, [pc, #28]	; (80166a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016686:	4808      	ldr	r0, [pc, #32]	; (80166a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016688:	f7f8 facf 	bl	800ec2a <USBD_GetString>
 801668c:	e004      	b.n	8016698 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801668e:	683a      	ldr	r2, [r7, #0]
 8016690:	4904      	ldr	r1, [pc, #16]	; (80166a4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016692:	4805      	ldr	r0, [pc, #20]	; (80166a8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016694:	f7f8 fac9 	bl	800ec2a <USBD_GetString>
  }
  return USBD_StrDesc;
 8016698:	4b02      	ldr	r3, [pc, #8]	; (80166a4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801669a:	4618      	mov	r0, r3
 801669c:	3708      	adds	r7, #8
 801669e:	46bd      	mov	sp, r7
 80166a0:	bd80      	pop	{r7, pc}
 80166a2:	bf00      	nop
 80166a4:	2001ea48 	.word	0x2001ea48
 80166a8:	0801a478 	.word	0x0801a478

080166ac <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80166ac:	b580      	push	{r7, lr}
 80166ae:	b082      	sub	sp, #8
 80166b0:	af00      	add	r7, sp, #0
 80166b2:	4603      	mov	r3, r0
 80166b4:	6039      	str	r1, [r7, #0]
 80166b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80166b8:	79fb      	ldrb	r3, [r7, #7]
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d105      	bne.n	80166ca <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80166be:	683a      	ldr	r2, [r7, #0]
 80166c0:	4907      	ldr	r1, [pc, #28]	; (80166e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80166c2:	4808      	ldr	r0, [pc, #32]	; (80166e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80166c4:	f7f8 fab1 	bl	800ec2a <USBD_GetString>
 80166c8:	e004      	b.n	80166d4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80166ca:	683a      	ldr	r2, [r7, #0]
 80166cc:	4904      	ldr	r1, [pc, #16]	; (80166e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80166ce:	4805      	ldr	r0, [pc, #20]	; (80166e4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80166d0:	f7f8 faab 	bl	800ec2a <USBD_GetString>
  }
  return USBD_StrDesc;
 80166d4:	4b02      	ldr	r3, [pc, #8]	; (80166e0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80166d6:	4618      	mov	r0, r3
 80166d8:	3708      	adds	r7, #8
 80166da:	46bd      	mov	sp, r7
 80166dc:	bd80      	pop	{r7, pc}
 80166de:	bf00      	nop
 80166e0:	2001ea48 	.word	0x2001ea48
 80166e4:	0801a484 	.word	0x0801a484

080166e8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80166e8:	b580      	push	{r7, lr}
 80166ea:	b084      	sub	sp, #16
 80166ec:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80166ee:	4b0f      	ldr	r3, [pc, #60]	; (801672c <Get_SerialNum+0x44>)
 80166f0:	681b      	ldr	r3, [r3, #0]
 80166f2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80166f4:	4b0e      	ldr	r3, [pc, #56]	; (8016730 <Get_SerialNum+0x48>)
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80166fa:	4b0e      	ldr	r3, [pc, #56]	; (8016734 <Get_SerialNum+0x4c>)
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016700:	68fa      	ldr	r2, [r7, #12]
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	4413      	add	r3, r2
 8016706:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	2b00      	cmp	r3, #0
 801670c:	d009      	beq.n	8016722 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801670e:	2208      	movs	r2, #8
 8016710:	4909      	ldr	r1, [pc, #36]	; (8016738 <Get_SerialNum+0x50>)
 8016712:	68f8      	ldr	r0, [r7, #12]
 8016714:	f000 f814 	bl	8016740 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016718:	2204      	movs	r2, #4
 801671a:	4908      	ldr	r1, [pc, #32]	; (801673c <Get_SerialNum+0x54>)
 801671c:	68b8      	ldr	r0, [r7, #8]
 801671e:	f000 f80f 	bl	8016740 <IntToUnicode>
  }
}
 8016722:	bf00      	nop
 8016724:	3710      	adds	r7, #16
 8016726:	46bd      	mov	sp, r7
 8016728:	bd80      	pop	{r7, pc}
 801672a:	bf00      	nop
 801672c:	1fff7a10 	.word	0x1fff7a10
 8016730:	1fff7a14 	.word	0x1fff7a14
 8016734:	1fff7a18 	.word	0x1fff7a18
 8016738:	200001ae 	.word	0x200001ae
 801673c:	200001be 	.word	0x200001be

08016740 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016740:	b480      	push	{r7}
 8016742:	b087      	sub	sp, #28
 8016744:	af00      	add	r7, sp, #0
 8016746:	60f8      	str	r0, [r7, #12]
 8016748:	60b9      	str	r1, [r7, #8]
 801674a:	4613      	mov	r3, r2
 801674c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801674e:	2300      	movs	r3, #0
 8016750:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016752:	2300      	movs	r3, #0
 8016754:	75fb      	strb	r3, [r7, #23]
 8016756:	e027      	b.n	80167a8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016758:	68fb      	ldr	r3, [r7, #12]
 801675a:	0f1b      	lsrs	r3, r3, #28
 801675c:	2b09      	cmp	r3, #9
 801675e:	d80b      	bhi.n	8016778 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	0f1b      	lsrs	r3, r3, #28
 8016764:	b2da      	uxtb	r2, r3
 8016766:	7dfb      	ldrb	r3, [r7, #23]
 8016768:	005b      	lsls	r3, r3, #1
 801676a:	4619      	mov	r1, r3
 801676c:	68bb      	ldr	r3, [r7, #8]
 801676e:	440b      	add	r3, r1
 8016770:	3230      	adds	r2, #48	; 0x30
 8016772:	b2d2      	uxtb	r2, r2
 8016774:	701a      	strb	r2, [r3, #0]
 8016776:	e00a      	b.n	801678e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016778:	68fb      	ldr	r3, [r7, #12]
 801677a:	0f1b      	lsrs	r3, r3, #28
 801677c:	b2da      	uxtb	r2, r3
 801677e:	7dfb      	ldrb	r3, [r7, #23]
 8016780:	005b      	lsls	r3, r3, #1
 8016782:	4619      	mov	r1, r3
 8016784:	68bb      	ldr	r3, [r7, #8]
 8016786:	440b      	add	r3, r1
 8016788:	3237      	adds	r2, #55	; 0x37
 801678a:	b2d2      	uxtb	r2, r2
 801678c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801678e:	68fb      	ldr	r3, [r7, #12]
 8016790:	011b      	lsls	r3, r3, #4
 8016792:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016794:	7dfb      	ldrb	r3, [r7, #23]
 8016796:	005b      	lsls	r3, r3, #1
 8016798:	3301      	adds	r3, #1
 801679a:	68ba      	ldr	r2, [r7, #8]
 801679c:	4413      	add	r3, r2
 801679e:	2200      	movs	r2, #0
 80167a0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80167a2:	7dfb      	ldrb	r3, [r7, #23]
 80167a4:	3301      	adds	r3, #1
 80167a6:	75fb      	strb	r3, [r7, #23]
 80167a8:	7dfa      	ldrb	r2, [r7, #23]
 80167aa:	79fb      	ldrb	r3, [r7, #7]
 80167ac:	429a      	cmp	r2, r3
 80167ae:	d3d3      	bcc.n	8016758 <IntToUnicode+0x18>
  }
}
 80167b0:	bf00      	nop
 80167b2:	bf00      	nop
 80167b4:	371c      	adds	r7, #28
 80167b6:	46bd      	mov	sp, r7
 80167b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167bc:	4770      	bx	lr
	...

080167c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80167c0:	b580      	push	{r7, lr}
 80167c2:	b08a      	sub	sp, #40	; 0x28
 80167c4:	af00      	add	r7, sp, #0
 80167c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80167c8:	f107 0314 	add.w	r3, r7, #20
 80167cc:	2200      	movs	r2, #0
 80167ce:	601a      	str	r2, [r3, #0]
 80167d0:	605a      	str	r2, [r3, #4]
 80167d2:	609a      	str	r2, [r3, #8]
 80167d4:	60da      	str	r2, [r3, #12]
 80167d6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80167e0:	d147      	bne.n	8016872 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80167e2:	2300      	movs	r3, #0
 80167e4:	613b      	str	r3, [r7, #16]
 80167e6:	4b25      	ldr	r3, [pc, #148]	; (801687c <HAL_PCD_MspInit+0xbc>)
 80167e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167ea:	4a24      	ldr	r2, [pc, #144]	; (801687c <HAL_PCD_MspInit+0xbc>)
 80167ec:	f043 0301 	orr.w	r3, r3, #1
 80167f0:	6313      	str	r3, [r2, #48]	; 0x30
 80167f2:	4b22      	ldr	r3, [pc, #136]	; (801687c <HAL_PCD_MspInit+0xbc>)
 80167f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80167f6:	f003 0301 	and.w	r3, r3, #1
 80167fa:	613b      	str	r3, [r7, #16]
 80167fc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80167fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8016802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8016804:	2300      	movs	r3, #0
 8016806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016808:	2300      	movs	r3, #0
 801680a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 801680c:	f107 0314 	add.w	r3, r7, #20
 8016810:	4619      	mov	r1, r3
 8016812:	481b      	ldr	r0, [pc, #108]	; (8016880 <HAL_PCD_MspInit+0xc0>)
 8016814:	f7ef feae 	bl	8006574 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8016818:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 801681c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801681e:	2302      	movs	r3, #2
 8016820:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8016822:	2300      	movs	r3, #0
 8016824:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8016826:	2300      	movs	r3, #0
 8016828:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801682a:	230a      	movs	r3, #10
 801682c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801682e:	f107 0314 	add.w	r3, r7, #20
 8016832:	4619      	mov	r1, r3
 8016834:	4812      	ldr	r0, [pc, #72]	; (8016880 <HAL_PCD_MspInit+0xc0>)
 8016836:	f7ef fe9d 	bl	8006574 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801683a:	4b10      	ldr	r3, [pc, #64]	; (801687c <HAL_PCD_MspInit+0xbc>)
 801683c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801683e:	4a0f      	ldr	r2, [pc, #60]	; (801687c <HAL_PCD_MspInit+0xbc>)
 8016840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016844:	6353      	str	r3, [r2, #52]	; 0x34
 8016846:	2300      	movs	r3, #0
 8016848:	60fb      	str	r3, [r7, #12]
 801684a:	4b0c      	ldr	r3, [pc, #48]	; (801687c <HAL_PCD_MspInit+0xbc>)
 801684c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801684e:	4a0b      	ldr	r2, [pc, #44]	; (801687c <HAL_PCD_MspInit+0xbc>)
 8016850:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016854:	6453      	str	r3, [r2, #68]	; 0x44
 8016856:	4b09      	ldr	r3, [pc, #36]	; (801687c <HAL_PCD_MspInit+0xbc>)
 8016858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801685a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801685e:	60fb      	str	r3, [r7, #12]
 8016860:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8016862:	2200      	movs	r2, #0
 8016864:	2105      	movs	r1, #5
 8016866:	2043      	movs	r0, #67	; 0x43
 8016868:	f7ef fa58 	bl	8005d1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801686c:	2043      	movs	r0, #67	; 0x43
 801686e:	f7ef fa71 	bl	8005d54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8016872:	bf00      	nop
 8016874:	3728      	adds	r7, #40	; 0x28
 8016876:	46bd      	mov	sp, r7
 8016878:	bd80      	pop	{r7, pc}
 801687a:	bf00      	nop
 801687c:	40023800 	.word	0x40023800
 8016880:	40020000 	.word	0x40020000

08016884 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016884:	b580      	push	{r7, lr}
 8016886:	b082      	sub	sp, #8
 8016888:	af00      	add	r7, sp, #0
 801688a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8016898:	4619      	mov	r1, r3
 801689a:	4610      	mov	r0, r2
 801689c:	f7f7 f9de 	bl	800dc5c <USBD_LL_SetupStage>
}
 80168a0:	bf00      	nop
 80168a2:	3708      	adds	r7, #8
 80168a4:	46bd      	mov	sp, r7
 80168a6:	bd80      	pop	{r7, pc}

080168a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168a8:	b580      	push	{r7, lr}
 80168aa:	b082      	sub	sp, #8
 80168ac:	af00      	add	r7, sp, #0
 80168ae:	6078      	str	r0, [r7, #4]
 80168b0:	460b      	mov	r3, r1
 80168b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80168ba:	78fa      	ldrb	r2, [r7, #3]
 80168bc:	6879      	ldr	r1, [r7, #4]
 80168be:	4613      	mov	r3, r2
 80168c0:	00db      	lsls	r3, r3, #3
 80168c2:	1a9b      	subs	r3, r3, r2
 80168c4:	009b      	lsls	r3, r3, #2
 80168c6:	440b      	add	r3, r1
 80168c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80168cc:	681a      	ldr	r2, [r3, #0]
 80168ce:	78fb      	ldrb	r3, [r7, #3]
 80168d0:	4619      	mov	r1, r3
 80168d2:	f7f7 fa18 	bl	800dd06 <USBD_LL_DataOutStage>
}
 80168d6:	bf00      	nop
 80168d8:	3708      	adds	r7, #8
 80168da:	46bd      	mov	sp, r7
 80168dc:	bd80      	pop	{r7, pc}

080168de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80168de:	b580      	push	{r7, lr}
 80168e0:	b082      	sub	sp, #8
 80168e2:	af00      	add	r7, sp, #0
 80168e4:	6078      	str	r0, [r7, #4]
 80168e6:	460b      	mov	r3, r1
 80168e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80168f0:	78fa      	ldrb	r2, [r7, #3]
 80168f2:	6879      	ldr	r1, [r7, #4]
 80168f4:	4613      	mov	r3, r2
 80168f6:	00db      	lsls	r3, r3, #3
 80168f8:	1a9b      	subs	r3, r3, r2
 80168fa:	009b      	lsls	r3, r3, #2
 80168fc:	440b      	add	r3, r1
 80168fe:	3348      	adds	r3, #72	; 0x48
 8016900:	681a      	ldr	r2, [r3, #0]
 8016902:	78fb      	ldrb	r3, [r7, #3]
 8016904:	4619      	mov	r1, r3
 8016906:	f7f7 fa61 	bl	800ddcc <USBD_LL_DataInStage>
}
 801690a:	bf00      	nop
 801690c:	3708      	adds	r7, #8
 801690e:	46bd      	mov	sp, r7
 8016910:	bd80      	pop	{r7, pc}

08016912 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016912:	b580      	push	{r7, lr}
 8016914:	b082      	sub	sp, #8
 8016916:	af00      	add	r7, sp, #0
 8016918:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016920:	4618      	mov	r0, r3
 8016922:	f7f7 fb75 	bl	800e010 <USBD_LL_SOF>
}
 8016926:	bf00      	nop
 8016928:	3708      	adds	r7, #8
 801692a:	46bd      	mov	sp, r7
 801692c:	bd80      	pop	{r7, pc}

0801692e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801692e:	b580      	push	{r7, lr}
 8016930:	b084      	sub	sp, #16
 8016932:	af00      	add	r7, sp, #0
 8016934:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8016936:	2301      	movs	r3, #1
 8016938:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	68db      	ldr	r3, [r3, #12]
 801693e:	2b00      	cmp	r3, #0
 8016940:	d102      	bne.n	8016948 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8016942:	2300      	movs	r3, #0
 8016944:	73fb      	strb	r3, [r7, #15]
 8016946:	e008      	b.n	801695a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	68db      	ldr	r3, [r3, #12]
 801694c:	2b02      	cmp	r3, #2
 801694e:	d102      	bne.n	8016956 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8016950:	2301      	movs	r3, #1
 8016952:	73fb      	strb	r3, [r7, #15]
 8016954:	e001      	b.n	801695a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8016956:	f7ee f8ad 	bl	8004ab4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016960:	7bfa      	ldrb	r2, [r7, #15]
 8016962:	4611      	mov	r1, r2
 8016964:	4618      	mov	r0, r3
 8016966:	f7f7 fb15 	bl	800df94 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801696a:	687b      	ldr	r3, [r7, #4]
 801696c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016970:	4618      	mov	r0, r3
 8016972:	f7f7 fac1 	bl	800def8 <USBD_LL_Reset>
}
 8016976:	bf00      	nop
 8016978:	3710      	adds	r7, #16
 801697a:	46bd      	mov	sp, r7
 801697c:	bd80      	pop	{r7, pc}
	...

08016980 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016980:	b580      	push	{r7, lr}
 8016982:	b082      	sub	sp, #8
 8016984:	af00      	add	r7, sp, #0
 8016986:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801698e:	4618      	mov	r0, r3
 8016990:	f7f7 fb10 	bl	800dfb4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	687a      	ldr	r2, [r7, #4]
 80169a0:	6812      	ldr	r2, [r2, #0]
 80169a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80169a6:	f043 0301 	orr.w	r3, r3, #1
 80169aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	6a1b      	ldr	r3, [r3, #32]
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d005      	beq.n	80169c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80169b4:	4b04      	ldr	r3, [pc, #16]	; (80169c8 <HAL_PCD_SuspendCallback+0x48>)
 80169b6:	691b      	ldr	r3, [r3, #16]
 80169b8:	4a03      	ldr	r2, [pc, #12]	; (80169c8 <HAL_PCD_SuspendCallback+0x48>)
 80169ba:	f043 0306 	orr.w	r3, r3, #6
 80169be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80169c0:	bf00      	nop
 80169c2:	3708      	adds	r7, #8
 80169c4:	46bd      	mov	sp, r7
 80169c6:	bd80      	pop	{r7, pc}
 80169c8:	e000ed00 	.word	0xe000ed00

080169cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169cc:	b580      	push	{r7, lr}
 80169ce:	b082      	sub	sp, #8
 80169d0:	af00      	add	r7, sp, #0
 80169d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80169d4:	687b      	ldr	r3, [r7, #4]
 80169d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80169da:	4618      	mov	r0, r3
 80169dc:	f7f7 fb00 	bl	800dfe0 <USBD_LL_Resume>
}
 80169e0:	bf00      	nop
 80169e2:	3708      	adds	r7, #8
 80169e4:	46bd      	mov	sp, r7
 80169e6:	bd80      	pop	{r7, pc}

080169e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80169e8:	b580      	push	{r7, lr}
 80169ea:	b082      	sub	sp, #8
 80169ec:	af00      	add	r7, sp, #0
 80169ee:	6078      	str	r0, [r7, #4]
 80169f0:	460b      	mov	r3, r1
 80169f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80169fa:	78fa      	ldrb	r2, [r7, #3]
 80169fc:	4611      	mov	r1, r2
 80169fe:	4618      	mov	r0, r3
 8016a00:	f7f7 fb4e 	bl	800e0a0 <USBD_LL_IsoOUTIncomplete>
}
 8016a04:	bf00      	nop
 8016a06:	3708      	adds	r7, #8
 8016a08:	46bd      	mov	sp, r7
 8016a0a:	bd80      	pop	{r7, pc}

08016a0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a0c:	b580      	push	{r7, lr}
 8016a0e:	b082      	sub	sp, #8
 8016a10:	af00      	add	r7, sp, #0
 8016a12:	6078      	str	r0, [r7, #4]
 8016a14:	460b      	mov	r3, r1
 8016a16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016a1e:	78fa      	ldrb	r2, [r7, #3]
 8016a20:	4611      	mov	r1, r2
 8016a22:	4618      	mov	r0, r3
 8016a24:	f7f7 fb16 	bl	800e054 <USBD_LL_IsoINIncomplete>
}
 8016a28:	bf00      	nop
 8016a2a:	3708      	adds	r7, #8
 8016a2c:	46bd      	mov	sp, r7
 8016a2e:	bd80      	pop	{r7, pc}

08016a30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a30:	b580      	push	{r7, lr}
 8016a32:	b082      	sub	sp, #8
 8016a34:	af00      	add	r7, sp, #0
 8016a36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016a3e:	4618      	mov	r0, r3
 8016a40:	f7f7 fb54 	bl	800e0ec <USBD_LL_DevConnected>
}
 8016a44:	bf00      	nop
 8016a46:	3708      	adds	r7, #8
 8016a48:	46bd      	mov	sp, r7
 8016a4a:	bd80      	pop	{r7, pc}

08016a4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8016a4c:	b580      	push	{r7, lr}
 8016a4e:	b082      	sub	sp, #8
 8016a50:	af00      	add	r7, sp, #0
 8016a52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8016a5a:	4618      	mov	r0, r3
 8016a5c:	f7f7 fb51 	bl	800e102 <USBD_LL_DevDisconnected>
}
 8016a60:	bf00      	nop
 8016a62:	3708      	adds	r7, #8
 8016a64:	46bd      	mov	sp, r7
 8016a66:	bd80      	pop	{r7, pc}

08016a68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8016a68:	b580      	push	{r7, lr}
 8016a6a:	b082      	sub	sp, #8
 8016a6c:	af00      	add	r7, sp, #0
 8016a6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	781b      	ldrb	r3, [r3, #0]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d13c      	bne.n	8016af2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8016a78:	4a20      	ldr	r2, [pc, #128]	; (8016afc <USBD_LL_Init+0x94>)
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	4a1e      	ldr	r2, [pc, #120]	; (8016afc <USBD_LL_Init+0x94>)
 8016a84:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8016a88:	4b1c      	ldr	r3, [pc, #112]	; (8016afc <USBD_LL_Init+0x94>)
 8016a8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8016a8e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8016a90:	4b1a      	ldr	r3, [pc, #104]	; (8016afc <USBD_LL_Init+0x94>)
 8016a92:	2204      	movs	r2, #4
 8016a94:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8016a96:	4b19      	ldr	r3, [pc, #100]	; (8016afc <USBD_LL_Init+0x94>)
 8016a98:	2202      	movs	r2, #2
 8016a9a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8016a9c:	4b17      	ldr	r3, [pc, #92]	; (8016afc <USBD_LL_Init+0x94>)
 8016a9e:	2200      	movs	r2, #0
 8016aa0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8016aa2:	4b16      	ldr	r3, [pc, #88]	; (8016afc <USBD_LL_Init+0x94>)
 8016aa4:	2202      	movs	r2, #2
 8016aa6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8016aa8:	4b14      	ldr	r3, [pc, #80]	; (8016afc <USBD_LL_Init+0x94>)
 8016aaa:	2200      	movs	r2, #0
 8016aac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8016aae:	4b13      	ldr	r3, [pc, #76]	; (8016afc <USBD_LL_Init+0x94>)
 8016ab0:	2200      	movs	r2, #0
 8016ab2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8016ab4:	4b11      	ldr	r3, [pc, #68]	; (8016afc <USBD_LL_Init+0x94>)
 8016ab6:	2200      	movs	r2, #0
 8016ab8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8016aba:	4b10      	ldr	r3, [pc, #64]	; (8016afc <USBD_LL_Init+0x94>)
 8016abc:	2200      	movs	r2, #0
 8016abe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8016ac0:	4b0e      	ldr	r3, [pc, #56]	; (8016afc <USBD_LL_Init+0x94>)
 8016ac2:	2200      	movs	r2, #0
 8016ac4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8016ac6:	480d      	ldr	r0, [pc, #52]	; (8016afc <USBD_LL_Init+0x94>)
 8016ac8:	f7f1 f9ad 	bl	8007e26 <HAL_PCD_Init>
 8016acc:	4603      	mov	r3, r0
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d001      	beq.n	8016ad6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8016ad2:	f7ed ffef 	bl	8004ab4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8016ad6:	2180      	movs	r1, #128	; 0x80
 8016ad8:	4808      	ldr	r0, [pc, #32]	; (8016afc <USBD_LL_Init+0x94>)
 8016ada:	f7f2 fb0a 	bl	80090f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8016ade:	2240      	movs	r2, #64	; 0x40
 8016ae0:	2100      	movs	r1, #0
 8016ae2:	4806      	ldr	r0, [pc, #24]	; (8016afc <USBD_LL_Init+0x94>)
 8016ae4:	f7f2 fabe 	bl	8009064 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8016ae8:	2280      	movs	r2, #128	; 0x80
 8016aea:	2101      	movs	r1, #1
 8016aec:	4803      	ldr	r0, [pc, #12]	; (8016afc <USBD_LL_Init+0x94>)
 8016aee:	f7f2 fab9 	bl	8009064 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8016af2:	2300      	movs	r3, #0
}
 8016af4:	4618      	mov	r0, r3
 8016af6:	3708      	adds	r7, #8
 8016af8:	46bd      	mov	sp, r7
 8016afa:	bd80      	pop	{r7, pc}
 8016afc:	2001ec48 	.word	0x2001ec48

08016b00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8016b00:	b580      	push	{r7, lr}
 8016b02:	b084      	sub	sp, #16
 8016b04:	af00      	add	r7, sp, #0
 8016b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b08:	2300      	movs	r3, #0
 8016b0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b0c:	2300      	movs	r3, #0
 8016b0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016b16:	4618      	mov	r0, r3
 8016b18:	f7f1 faa2 	bl	8008060 <HAL_PCD_Start>
 8016b1c:	4603      	mov	r3, r0
 8016b1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b20:	7bfb      	ldrb	r3, [r7, #15]
 8016b22:	4618      	mov	r0, r3
 8016b24:	f000 f942 	bl	8016dac <USBD_Get_USB_Status>
 8016b28:	4603      	mov	r3, r0
 8016b2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b2e:	4618      	mov	r0, r3
 8016b30:	3710      	adds	r7, #16
 8016b32:	46bd      	mov	sp, r7
 8016b34:	bd80      	pop	{r7, pc}

08016b36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8016b36:	b580      	push	{r7, lr}
 8016b38:	b084      	sub	sp, #16
 8016b3a:	af00      	add	r7, sp, #0
 8016b3c:	6078      	str	r0, [r7, #4]
 8016b3e:	4608      	mov	r0, r1
 8016b40:	4611      	mov	r1, r2
 8016b42:	461a      	mov	r2, r3
 8016b44:	4603      	mov	r3, r0
 8016b46:	70fb      	strb	r3, [r7, #3]
 8016b48:	460b      	mov	r3, r1
 8016b4a:	70bb      	strb	r3, [r7, #2]
 8016b4c:	4613      	mov	r3, r2
 8016b4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b50:	2300      	movs	r3, #0
 8016b52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b54:	2300      	movs	r3, #0
 8016b56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016b5e:	78bb      	ldrb	r3, [r7, #2]
 8016b60:	883a      	ldrh	r2, [r7, #0]
 8016b62:	78f9      	ldrb	r1, [r7, #3]
 8016b64:	f7f1 fe86 	bl	8008874 <HAL_PCD_EP_Open>
 8016b68:	4603      	mov	r3, r0
 8016b6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016b6c:	7bfb      	ldrb	r3, [r7, #15]
 8016b6e:	4618      	mov	r0, r3
 8016b70:	f000 f91c 	bl	8016dac <USBD_Get_USB_Status>
 8016b74:	4603      	mov	r3, r0
 8016b76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016b78:	7bbb      	ldrb	r3, [r7, #14]
}
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	3710      	adds	r7, #16
 8016b7e:	46bd      	mov	sp, r7
 8016b80:	bd80      	pop	{r7, pc}

08016b82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016b82:	b580      	push	{r7, lr}
 8016b84:	b084      	sub	sp, #16
 8016b86:	af00      	add	r7, sp, #0
 8016b88:	6078      	str	r0, [r7, #4]
 8016b8a:	460b      	mov	r3, r1
 8016b8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016b8e:	2300      	movs	r3, #0
 8016b90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016b92:	2300      	movs	r3, #0
 8016b94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016b9c:	78fa      	ldrb	r2, [r7, #3]
 8016b9e:	4611      	mov	r1, r2
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	f7f1 fecf 	bl	8008944 <HAL_PCD_EP_Close>
 8016ba6:	4603      	mov	r3, r0
 8016ba8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016baa:	7bfb      	ldrb	r3, [r7, #15]
 8016bac:	4618      	mov	r0, r3
 8016bae:	f000 f8fd 	bl	8016dac <USBD_Get_USB_Status>
 8016bb2:	4603      	mov	r3, r0
 8016bb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016bb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8016bb8:	4618      	mov	r0, r3
 8016bba:	3710      	adds	r7, #16
 8016bbc:	46bd      	mov	sp, r7
 8016bbe:	bd80      	pop	{r7, pc}

08016bc0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016bc0:	b580      	push	{r7, lr}
 8016bc2:	b084      	sub	sp, #16
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	6078      	str	r0, [r7, #4]
 8016bc8:	460b      	mov	r3, r1
 8016bca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016bcc:	2300      	movs	r3, #0
 8016bce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016bd0:	2300      	movs	r3, #0
 8016bd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016bda:	78fa      	ldrb	r2, [r7, #3]
 8016bdc:	4611      	mov	r1, r2
 8016bde:	4618      	mov	r0, r3
 8016be0:	f7f1 ffa7 	bl	8008b32 <HAL_PCD_EP_SetStall>
 8016be4:	4603      	mov	r3, r0
 8016be6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016be8:	7bfb      	ldrb	r3, [r7, #15]
 8016bea:	4618      	mov	r0, r3
 8016bec:	f000 f8de 	bl	8016dac <USBD_Get_USB_Status>
 8016bf0:	4603      	mov	r3, r0
 8016bf2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016bf4:	7bbb      	ldrb	r3, [r7, #14]
}
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	3710      	adds	r7, #16
 8016bfa:	46bd      	mov	sp, r7
 8016bfc:	bd80      	pop	{r7, pc}

08016bfe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016bfe:	b580      	push	{r7, lr}
 8016c00:	b084      	sub	sp, #16
 8016c02:	af00      	add	r7, sp, #0
 8016c04:	6078      	str	r0, [r7, #4]
 8016c06:	460b      	mov	r3, r1
 8016c08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016c0a:	2300      	movs	r3, #0
 8016c0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016c0e:	2300      	movs	r3, #0
 8016c10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016c18:	78fa      	ldrb	r2, [r7, #3]
 8016c1a:	4611      	mov	r1, r2
 8016c1c:	4618      	mov	r0, r3
 8016c1e:	f7f1 ffec 	bl	8008bfa <HAL_PCD_EP_ClrStall>
 8016c22:	4603      	mov	r3, r0
 8016c24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016c26:	7bfb      	ldrb	r3, [r7, #15]
 8016c28:	4618      	mov	r0, r3
 8016c2a:	f000 f8bf 	bl	8016dac <USBD_Get_USB_Status>
 8016c2e:	4603      	mov	r3, r0
 8016c30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016c32:	7bbb      	ldrb	r3, [r7, #14]
}
 8016c34:	4618      	mov	r0, r3
 8016c36:	3710      	adds	r7, #16
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	bd80      	pop	{r7, pc}

08016c3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016c3c:	b480      	push	{r7}
 8016c3e:	b085      	sub	sp, #20
 8016c40:	af00      	add	r7, sp, #0
 8016c42:	6078      	str	r0, [r7, #4]
 8016c44:	460b      	mov	r3, r1
 8016c46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016c4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8016c50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	da0b      	bge.n	8016c70 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8016c58:	78fb      	ldrb	r3, [r7, #3]
 8016c5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016c5e:	68f9      	ldr	r1, [r7, #12]
 8016c60:	4613      	mov	r3, r2
 8016c62:	00db      	lsls	r3, r3, #3
 8016c64:	1a9b      	subs	r3, r3, r2
 8016c66:	009b      	lsls	r3, r3, #2
 8016c68:	440b      	add	r3, r1
 8016c6a:	333e      	adds	r3, #62	; 0x3e
 8016c6c:	781b      	ldrb	r3, [r3, #0]
 8016c6e:	e00b      	b.n	8016c88 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8016c70:	78fb      	ldrb	r3, [r7, #3]
 8016c72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016c76:	68f9      	ldr	r1, [r7, #12]
 8016c78:	4613      	mov	r3, r2
 8016c7a:	00db      	lsls	r3, r3, #3
 8016c7c:	1a9b      	subs	r3, r3, r2
 8016c7e:	009b      	lsls	r3, r3, #2
 8016c80:	440b      	add	r3, r1
 8016c82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016c86:	781b      	ldrb	r3, [r3, #0]
  }
}
 8016c88:	4618      	mov	r0, r3
 8016c8a:	3714      	adds	r7, #20
 8016c8c:	46bd      	mov	sp, r7
 8016c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c92:	4770      	bx	lr

08016c94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8016c94:	b580      	push	{r7, lr}
 8016c96:	b084      	sub	sp, #16
 8016c98:	af00      	add	r7, sp, #0
 8016c9a:	6078      	str	r0, [r7, #4]
 8016c9c:	460b      	mov	r3, r1
 8016c9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ca0:	2300      	movs	r3, #0
 8016ca2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ca4:	2300      	movs	r3, #0
 8016ca6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8016ca8:	687b      	ldr	r3, [r7, #4]
 8016caa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016cae:	78fa      	ldrb	r2, [r7, #3]
 8016cb0:	4611      	mov	r1, r2
 8016cb2:	4618      	mov	r0, r3
 8016cb4:	f7f1 fdb9 	bl	800882a <HAL_PCD_SetAddress>
 8016cb8:	4603      	mov	r3, r0
 8016cba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016cbc:	7bfb      	ldrb	r3, [r7, #15]
 8016cbe:	4618      	mov	r0, r3
 8016cc0:	f000 f874 	bl	8016dac <USBD_Get_USB_Status>
 8016cc4:	4603      	mov	r3, r0
 8016cc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8016cc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8016cca:	4618      	mov	r0, r3
 8016ccc:	3710      	adds	r7, #16
 8016cce:	46bd      	mov	sp, r7
 8016cd0:	bd80      	pop	{r7, pc}

08016cd2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016cd2:	b580      	push	{r7, lr}
 8016cd4:	b086      	sub	sp, #24
 8016cd6:	af00      	add	r7, sp, #0
 8016cd8:	60f8      	str	r0, [r7, #12]
 8016cda:	607a      	str	r2, [r7, #4]
 8016cdc:	603b      	str	r3, [r7, #0]
 8016cde:	460b      	mov	r3, r1
 8016ce0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016ce2:	2300      	movs	r3, #0
 8016ce4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016ce6:	2300      	movs	r3, #0
 8016ce8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016cf0:	7af9      	ldrb	r1, [r7, #11]
 8016cf2:	683b      	ldr	r3, [r7, #0]
 8016cf4:	687a      	ldr	r2, [r7, #4]
 8016cf6:	f7f1 fed2 	bl	8008a9e <HAL_PCD_EP_Transmit>
 8016cfa:	4603      	mov	r3, r0
 8016cfc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016cfe:	7dfb      	ldrb	r3, [r7, #23]
 8016d00:	4618      	mov	r0, r3
 8016d02:	f000 f853 	bl	8016dac <USBD_Get_USB_Status>
 8016d06:	4603      	mov	r3, r0
 8016d08:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016d0a:	7dbb      	ldrb	r3, [r7, #22]
}
 8016d0c:	4618      	mov	r0, r3
 8016d0e:	3718      	adds	r7, #24
 8016d10:	46bd      	mov	sp, r7
 8016d12:	bd80      	pop	{r7, pc}

08016d14 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8016d14:	b580      	push	{r7, lr}
 8016d16:	b086      	sub	sp, #24
 8016d18:	af00      	add	r7, sp, #0
 8016d1a:	60f8      	str	r0, [r7, #12]
 8016d1c:	607a      	str	r2, [r7, #4]
 8016d1e:	603b      	str	r3, [r7, #0]
 8016d20:	460b      	mov	r3, r1
 8016d22:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8016d24:	2300      	movs	r3, #0
 8016d26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016d28:	2300      	movs	r3, #0
 8016d2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8016d2c:	68fb      	ldr	r3, [r7, #12]
 8016d2e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8016d32:	7af9      	ldrb	r1, [r7, #11]
 8016d34:	683b      	ldr	r3, [r7, #0]
 8016d36:	687a      	ldr	r2, [r7, #4]
 8016d38:	f7f1 fe4e 	bl	80089d8 <HAL_PCD_EP_Receive>
 8016d3c:	4603      	mov	r3, r0
 8016d3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8016d40:	7dfb      	ldrb	r3, [r7, #23]
 8016d42:	4618      	mov	r0, r3
 8016d44:	f000 f832 	bl	8016dac <USBD_Get_USB_Status>
 8016d48:	4603      	mov	r3, r0
 8016d4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8016d4c:	7dbb      	ldrb	r3, [r7, #22]
}
 8016d4e:	4618      	mov	r0, r3
 8016d50:	3718      	adds	r7, #24
 8016d52:	46bd      	mov	sp, r7
 8016d54:	bd80      	pop	{r7, pc}

08016d56 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8016d56:	b580      	push	{r7, lr}
 8016d58:	b082      	sub	sp, #8
 8016d5a:	af00      	add	r7, sp, #0
 8016d5c:	6078      	str	r0, [r7, #4]
 8016d5e:	460b      	mov	r3, r1
 8016d60:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8016d68:	78fa      	ldrb	r2, [r7, #3]
 8016d6a:	4611      	mov	r1, r2
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	f7f1 fe7e 	bl	8008a6e <HAL_PCD_EP_GetRxCount>
 8016d72:	4603      	mov	r3, r0
}
 8016d74:	4618      	mov	r0, r3
 8016d76:	3708      	adds	r7, #8
 8016d78:	46bd      	mov	sp, r7
 8016d7a:	bd80      	pop	{r7, pc}

08016d7c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8016d7c:	b480      	push	{r7}
 8016d7e:	b083      	sub	sp, #12
 8016d80:	af00      	add	r7, sp, #0
 8016d82:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8016d84:	4b03      	ldr	r3, [pc, #12]	; (8016d94 <USBD_static_malloc+0x18>)
}
 8016d86:	4618      	mov	r0, r3
 8016d88:	370c      	adds	r7, #12
 8016d8a:	46bd      	mov	sp, r7
 8016d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d90:	4770      	bx	lr
 8016d92:	bf00      	nop
 8016d94:	20007c1c 	.word	0x20007c1c

08016d98 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8016d98:	b480      	push	{r7}
 8016d9a:	b083      	sub	sp, #12
 8016d9c:	af00      	add	r7, sp, #0
 8016d9e:	6078      	str	r0, [r7, #4]

}
 8016da0:	bf00      	nop
 8016da2:	370c      	adds	r7, #12
 8016da4:	46bd      	mov	sp, r7
 8016da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016daa:	4770      	bx	lr

08016dac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8016dac:	b480      	push	{r7}
 8016dae:	b085      	sub	sp, #20
 8016db0:	af00      	add	r7, sp, #0
 8016db2:	4603      	mov	r3, r0
 8016db4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8016db6:	2300      	movs	r3, #0
 8016db8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8016dba:	79fb      	ldrb	r3, [r7, #7]
 8016dbc:	2b03      	cmp	r3, #3
 8016dbe:	d817      	bhi.n	8016df0 <USBD_Get_USB_Status+0x44>
 8016dc0:	a201      	add	r2, pc, #4	; (adr r2, 8016dc8 <USBD_Get_USB_Status+0x1c>)
 8016dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016dc6:	bf00      	nop
 8016dc8:	08016dd9 	.word	0x08016dd9
 8016dcc:	08016ddf 	.word	0x08016ddf
 8016dd0:	08016de5 	.word	0x08016de5
 8016dd4:	08016deb 	.word	0x08016deb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8016dd8:	2300      	movs	r3, #0
 8016dda:	73fb      	strb	r3, [r7, #15]
    break;
 8016ddc:	e00b      	b.n	8016df6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8016dde:	2303      	movs	r3, #3
 8016de0:	73fb      	strb	r3, [r7, #15]
    break;
 8016de2:	e008      	b.n	8016df6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8016de4:	2301      	movs	r3, #1
 8016de6:	73fb      	strb	r3, [r7, #15]
    break;
 8016de8:	e005      	b.n	8016df6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8016dea:	2303      	movs	r3, #3
 8016dec:	73fb      	strb	r3, [r7, #15]
    break;
 8016dee:	e002      	b.n	8016df6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8016df0:	2303      	movs	r3, #3
 8016df2:	73fb      	strb	r3, [r7, #15]
    break;
 8016df4:	bf00      	nop
  }
  return usb_status;
 8016df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8016df8:	4618      	mov	r0, r3
 8016dfa:	3714      	adds	r7, #20
 8016dfc:	46bd      	mov	sp, r7
 8016dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e02:	4770      	bx	lr

08016e04 <__errno>:
 8016e04:	4b01      	ldr	r3, [pc, #4]	; (8016e0c <__errno+0x8>)
 8016e06:	6818      	ldr	r0, [r3, #0]
 8016e08:	4770      	bx	lr
 8016e0a:	bf00      	nop
 8016e0c:	200001c8 	.word	0x200001c8

08016e10 <std>:
 8016e10:	2300      	movs	r3, #0
 8016e12:	b510      	push	{r4, lr}
 8016e14:	4604      	mov	r4, r0
 8016e16:	e9c0 3300 	strd	r3, r3, [r0]
 8016e1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016e1e:	6083      	str	r3, [r0, #8]
 8016e20:	8181      	strh	r1, [r0, #12]
 8016e22:	6643      	str	r3, [r0, #100]	; 0x64
 8016e24:	81c2      	strh	r2, [r0, #14]
 8016e26:	6183      	str	r3, [r0, #24]
 8016e28:	4619      	mov	r1, r3
 8016e2a:	2208      	movs	r2, #8
 8016e2c:	305c      	adds	r0, #92	; 0x5c
 8016e2e:	f000 f945 	bl	80170bc <memset>
 8016e32:	4b05      	ldr	r3, [pc, #20]	; (8016e48 <std+0x38>)
 8016e34:	6263      	str	r3, [r4, #36]	; 0x24
 8016e36:	4b05      	ldr	r3, [pc, #20]	; (8016e4c <std+0x3c>)
 8016e38:	62a3      	str	r3, [r4, #40]	; 0x28
 8016e3a:	4b05      	ldr	r3, [pc, #20]	; (8016e50 <std+0x40>)
 8016e3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016e3e:	4b05      	ldr	r3, [pc, #20]	; (8016e54 <std+0x44>)
 8016e40:	6224      	str	r4, [r4, #32]
 8016e42:	6323      	str	r3, [r4, #48]	; 0x30
 8016e44:	bd10      	pop	{r4, pc}
 8016e46:	bf00      	nop
 8016e48:	08017c29 	.word	0x08017c29
 8016e4c:	08017c4b 	.word	0x08017c4b
 8016e50:	08017c83 	.word	0x08017c83
 8016e54:	08017ca7 	.word	0x08017ca7

08016e58 <_cleanup_r>:
 8016e58:	4901      	ldr	r1, [pc, #4]	; (8016e60 <_cleanup_r+0x8>)
 8016e5a:	f000 b8af 	b.w	8016fbc <_fwalk_reent>
 8016e5e:	bf00      	nop
 8016e60:	08018ba5 	.word	0x08018ba5

08016e64 <__sfmoreglue>:
 8016e64:	b570      	push	{r4, r5, r6, lr}
 8016e66:	1e4a      	subs	r2, r1, #1
 8016e68:	2568      	movs	r5, #104	; 0x68
 8016e6a:	4355      	muls	r5, r2
 8016e6c:	460e      	mov	r6, r1
 8016e6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016e72:	f000 f97b 	bl	801716c <_malloc_r>
 8016e76:	4604      	mov	r4, r0
 8016e78:	b140      	cbz	r0, 8016e8c <__sfmoreglue+0x28>
 8016e7a:	2100      	movs	r1, #0
 8016e7c:	e9c0 1600 	strd	r1, r6, [r0]
 8016e80:	300c      	adds	r0, #12
 8016e82:	60a0      	str	r0, [r4, #8]
 8016e84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016e88:	f000 f918 	bl	80170bc <memset>
 8016e8c:	4620      	mov	r0, r4
 8016e8e:	bd70      	pop	{r4, r5, r6, pc}

08016e90 <__sfp_lock_acquire>:
 8016e90:	4801      	ldr	r0, [pc, #4]	; (8016e98 <__sfp_lock_acquire+0x8>)
 8016e92:	f000 b8f2 	b.w	801707a <__retarget_lock_acquire_recursive>
 8016e96:	bf00      	nop
 8016e98:	2001f058 	.word	0x2001f058

08016e9c <__sfp_lock_release>:
 8016e9c:	4801      	ldr	r0, [pc, #4]	; (8016ea4 <__sfp_lock_release+0x8>)
 8016e9e:	f000 b8ed 	b.w	801707c <__retarget_lock_release_recursive>
 8016ea2:	bf00      	nop
 8016ea4:	2001f058 	.word	0x2001f058

08016ea8 <__sinit_lock_acquire>:
 8016ea8:	4801      	ldr	r0, [pc, #4]	; (8016eb0 <__sinit_lock_acquire+0x8>)
 8016eaa:	f000 b8e6 	b.w	801707a <__retarget_lock_acquire_recursive>
 8016eae:	bf00      	nop
 8016eb0:	2001f053 	.word	0x2001f053

08016eb4 <__sinit_lock_release>:
 8016eb4:	4801      	ldr	r0, [pc, #4]	; (8016ebc <__sinit_lock_release+0x8>)
 8016eb6:	f000 b8e1 	b.w	801707c <__retarget_lock_release_recursive>
 8016eba:	bf00      	nop
 8016ebc:	2001f053 	.word	0x2001f053

08016ec0 <__sinit>:
 8016ec0:	b510      	push	{r4, lr}
 8016ec2:	4604      	mov	r4, r0
 8016ec4:	f7ff fff0 	bl	8016ea8 <__sinit_lock_acquire>
 8016ec8:	69a3      	ldr	r3, [r4, #24]
 8016eca:	b11b      	cbz	r3, 8016ed4 <__sinit+0x14>
 8016ecc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016ed0:	f7ff bff0 	b.w	8016eb4 <__sinit_lock_release>
 8016ed4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016ed8:	6523      	str	r3, [r4, #80]	; 0x50
 8016eda:	4b13      	ldr	r3, [pc, #76]	; (8016f28 <__sinit+0x68>)
 8016edc:	4a13      	ldr	r2, [pc, #76]	; (8016f2c <__sinit+0x6c>)
 8016ede:	681b      	ldr	r3, [r3, #0]
 8016ee0:	62a2      	str	r2, [r4, #40]	; 0x28
 8016ee2:	42a3      	cmp	r3, r4
 8016ee4:	bf04      	itt	eq
 8016ee6:	2301      	moveq	r3, #1
 8016ee8:	61a3      	streq	r3, [r4, #24]
 8016eea:	4620      	mov	r0, r4
 8016eec:	f000 f820 	bl	8016f30 <__sfp>
 8016ef0:	6060      	str	r0, [r4, #4]
 8016ef2:	4620      	mov	r0, r4
 8016ef4:	f000 f81c 	bl	8016f30 <__sfp>
 8016ef8:	60a0      	str	r0, [r4, #8]
 8016efa:	4620      	mov	r0, r4
 8016efc:	f000 f818 	bl	8016f30 <__sfp>
 8016f00:	2200      	movs	r2, #0
 8016f02:	60e0      	str	r0, [r4, #12]
 8016f04:	2104      	movs	r1, #4
 8016f06:	6860      	ldr	r0, [r4, #4]
 8016f08:	f7ff ff82 	bl	8016e10 <std>
 8016f0c:	68a0      	ldr	r0, [r4, #8]
 8016f0e:	2201      	movs	r2, #1
 8016f10:	2109      	movs	r1, #9
 8016f12:	f7ff ff7d 	bl	8016e10 <std>
 8016f16:	68e0      	ldr	r0, [r4, #12]
 8016f18:	2202      	movs	r2, #2
 8016f1a:	2112      	movs	r1, #18
 8016f1c:	f7ff ff78 	bl	8016e10 <std>
 8016f20:	2301      	movs	r3, #1
 8016f22:	61a3      	str	r3, [r4, #24]
 8016f24:	e7d2      	b.n	8016ecc <__sinit+0xc>
 8016f26:	bf00      	nop
 8016f28:	0801e768 	.word	0x0801e768
 8016f2c:	08016e59 	.word	0x08016e59

08016f30 <__sfp>:
 8016f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016f32:	4607      	mov	r7, r0
 8016f34:	f7ff ffac 	bl	8016e90 <__sfp_lock_acquire>
 8016f38:	4b1e      	ldr	r3, [pc, #120]	; (8016fb4 <__sfp+0x84>)
 8016f3a:	681e      	ldr	r6, [r3, #0]
 8016f3c:	69b3      	ldr	r3, [r6, #24]
 8016f3e:	b913      	cbnz	r3, 8016f46 <__sfp+0x16>
 8016f40:	4630      	mov	r0, r6
 8016f42:	f7ff ffbd 	bl	8016ec0 <__sinit>
 8016f46:	3648      	adds	r6, #72	; 0x48
 8016f48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016f4c:	3b01      	subs	r3, #1
 8016f4e:	d503      	bpl.n	8016f58 <__sfp+0x28>
 8016f50:	6833      	ldr	r3, [r6, #0]
 8016f52:	b30b      	cbz	r3, 8016f98 <__sfp+0x68>
 8016f54:	6836      	ldr	r6, [r6, #0]
 8016f56:	e7f7      	b.n	8016f48 <__sfp+0x18>
 8016f58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016f5c:	b9d5      	cbnz	r5, 8016f94 <__sfp+0x64>
 8016f5e:	4b16      	ldr	r3, [pc, #88]	; (8016fb8 <__sfp+0x88>)
 8016f60:	60e3      	str	r3, [r4, #12]
 8016f62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016f66:	6665      	str	r5, [r4, #100]	; 0x64
 8016f68:	f000 f886 	bl	8017078 <__retarget_lock_init_recursive>
 8016f6c:	f7ff ff96 	bl	8016e9c <__sfp_lock_release>
 8016f70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016f74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016f78:	6025      	str	r5, [r4, #0]
 8016f7a:	61a5      	str	r5, [r4, #24]
 8016f7c:	2208      	movs	r2, #8
 8016f7e:	4629      	mov	r1, r5
 8016f80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016f84:	f000 f89a 	bl	80170bc <memset>
 8016f88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016f8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016f90:	4620      	mov	r0, r4
 8016f92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016f94:	3468      	adds	r4, #104	; 0x68
 8016f96:	e7d9      	b.n	8016f4c <__sfp+0x1c>
 8016f98:	2104      	movs	r1, #4
 8016f9a:	4638      	mov	r0, r7
 8016f9c:	f7ff ff62 	bl	8016e64 <__sfmoreglue>
 8016fa0:	4604      	mov	r4, r0
 8016fa2:	6030      	str	r0, [r6, #0]
 8016fa4:	2800      	cmp	r0, #0
 8016fa6:	d1d5      	bne.n	8016f54 <__sfp+0x24>
 8016fa8:	f7ff ff78 	bl	8016e9c <__sfp_lock_release>
 8016fac:	230c      	movs	r3, #12
 8016fae:	603b      	str	r3, [r7, #0]
 8016fb0:	e7ee      	b.n	8016f90 <__sfp+0x60>
 8016fb2:	bf00      	nop
 8016fb4:	0801e768 	.word	0x0801e768
 8016fb8:	ffff0001 	.word	0xffff0001

08016fbc <_fwalk_reent>:
 8016fbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016fc0:	4606      	mov	r6, r0
 8016fc2:	4688      	mov	r8, r1
 8016fc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016fc8:	2700      	movs	r7, #0
 8016fca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016fce:	f1b9 0901 	subs.w	r9, r9, #1
 8016fd2:	d505      	bpl.n	8016fe0 <_fwalk_reent+0x24>
 8016fd4:	6824      	ldr	r4, [r4, #0]
 8016fd6:	2c00      	cmp	r4, #0
 8016fd8:	d1f7      	bne.n	8016fca <_fwalk_reent+0xe>
 8016fda:	4638      	mov	r0, r7
 8016fdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016fe0:	89ab      	ldrh	r3, [r5, #12]
 8016fe2:	2b01      	cmp	r3, #1
 8016fe4:	d907      	bls.n	8016ff6 <_fwalk_reent+0x3a>
 8016fe6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016fea:	3301      	adds	r3, #1
 8016fec:	d003      	beq.n	8016ff6 <_fwalk_reent+0x3a>
 8016fee:	4629      	mov	r1, r5
 8016ff0:	4630      	mov	r0, r6
 8016ff2:	47c0      	blx	r8
 8016ff4:	4307      	orrs	r7, r0
 8016ff6:	3568      	adds	r5, #104	; 0x68
 8016ff8:	e7e9      	b.n	8016fce <_fwalk_reent+0x12>
	...

08016ffc <__libc_init_array>:
 8016ffc:	b570      	push	{r4, r5, r6, lr}
 8016ffe:	4d0d      	ldr	r5, [pc, #52]	; (8017034 <__libc_init_array+0x38>)
 8017000:	4c0d      	ldr	r4, [pc, #52]	; (8017038 <__libc_init_array+0x3c>)
 8017002:	1b64      	subs	r4, r4, r5
 8017004:	10a4      	asrs	r4, r4, #2
 8017006:	2600      	movs	r6, #0
 8017008:	42a6      	cmp	r6, r4
 801700a:	d109      	bne.n	8017020 <__libc_init_array+0x24>
 801700c:	4d0b      	ldr	r5, [pc, #44]	; (801703c <__libc_init_array+0x40>)
 801700e:	4c0c      	ldr	r4, [pc, #48]	; (8017040 <__libc_init_array+0x44>)
 8017010:	f002 fea4 	bl	8019d5c <_init>
 8017014:	1b64      	subs	r4, r4, r5
 8017016:	10a4      	asrs	r4, r4, #2
 8017018:	2600      	movs	r6, #0
 801701a:	42a6      	cmp	r6, r4
 801701c:	d105      	bne.n	801702a <__libc_init_array+0x2e>
 801701e:	bd70      	pop	{r4, r5, r6, pc}
 8017020:	f855 3b04 	ldr.w	r3, [r5], #4
 8017024:	4798      	blx	r3
 8017026:	3601      	adds	r6, #1
 8017028:	e7ee      	b.n	8017008 <__libc_init_array+0xc>
 801702a:	f855 3b04 	ldr.w	r3, [r5], #4
 801702e:	4798      	blx	r3
 8017030:	3601      	adds	r6, #1
 8017032:	e7f2      	b.n	801701a <__libc_init_array+0x1e>
 8017034:	0801eb1c 	.word	0x0801eb1c
 8017038:	0801eb1c 	.word	0x0801eb1c
 801703c:	0801eb1c 	.word	0x0801eb1c
 8017040:	0801eb20 	.word	0x0801eb20

08017044 <__itoa>:
 8017044:	1e93      	subs	r3, r2, #2
 8017046:	2b22      	cmp	r3, #34	; 0x22
 8017048:	b510      	push	{r4, lr}
 801704a:	460c      	mov	r4, r1
 801704c:	d904      	bls.n	8017058 <__itoa+0x14>
 801704e:	2300      	movs	r3, #0
 8017050:	700b      	strb	r3, [r1, #0]
 8017052:	461c      	mov	r4, r3
 8017054:	4620      	mov	r0, r4
 8017056:	bd10      	pop	{r4, pc}
 8017058:	2a0a      	cmp	r2, #10
 801705a:	d109      	bne.n	8017070 <__itoa+0x2c>
 801705c:	2800      	cmp	r0, #0
 801705e:	da07      	bge.n	8017070 <__itoa+0x2c>
 8017060:	232d      	movs	r3, #45	; 0x2d
 8017062:	700b      	strb	r3, [r1, #0]
 8017064:	4240      	negs	r0, r0
 8017066:	2101      	movs	r1, #1
 8017068:	4421      	add	r1, r4
 801706a:	f000 fe37 	bl	8017cdc <__utoa>
 801706e:	e7f1      	b.n	8017054 <__itoa+0x10>
 8017070:	2100      	movs	r1, #0
 8017072:	e7f9      	b.n	8017068 <__itoa+0x24>

08017074 <itoa>:
 8017074:	f7ff bfe6 	b.w	8017044 <__itoa>

08017078 <__retarget_lock_init_recursive>:
 8017078:	4770      	bx	lr

0801707a <__retarget_lock_acquire_recursive>:
 801707a:	4770      	bx	lr

0801707c <__retarget_lock_release_recursive>:
 801707c:	4770      	bx	lr
	...

08017080 <malloc>:
 8017080:	4b02      	ldr	r3, [pc, #8]	; (801708c <malloc+0xc>)
 8017082:	4601      	mov	r1, r0
 8017084:	6818      	ldr	r0, [r3, #0]
 8017086:	f000 b871 	b.w	801716c <_malloc_r>
 801708a:	bf00      	nop
 801708c:	200001c8 	.word	0x200001c8

08017090 <free>:
 8017090:	4b02      	ldr	r3, [pc, #8]	; (801709c <free+0xc>)
 8017092:	4601      	mov	r1, r0
 8017094:	6818      	ldr	r0, [r3, #0]
 8017096:	f000 b819 	b.w	80170cc <_free_r>
 801709a:	bf00      	nop
 801709c:	200001c8 	.word	0x200001c8

080170a0 <memcpy>:
 80170a0:	440a      	add	r2, r1
 80170a2:	4291      	cmp	r1, r2
 80170a4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80170a8:	d100      	bne.n	80170ac <memcpy+0xc>
 80170aa:	4770      	bx	lr
 80170ac:	b510      	push	{r4, lr}
 80170ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80170b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80170b6:	4291      	cmp	r1, r2
 80170b8:	d1f9      	bne.n	80170ae <memcpy+0xe>
 80170ba:	bd10      	pop	{r4, pc}

080170bc <memset>:
 80170bc:	4402      	add	r2, r0
 80170be:	4603      	mov	r3, r0
 80170c0:	4293      	cmp	r3, r2
 80170c2:	d100      	bne.n	80170c6 <memset+0xa>
 80170c4:	4770      	bx	lr
 80170c6:	f803 1b01 	strb.w	r1, [r3], #1
 80170ca:	e7f9      	b.n	80170c0 <memset+0x4>

080170cc <_free_r>:
 80170cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80170ce:	2900      	cmp	r1, #0
 80170d0:	d048      	beq.n	8017164 <_free_r+0x98>
 80170d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80170d6:	9001      	str	r0, [sp, #4]
 80170d8:	2b00      	cmp	r3, #0
 80170da:	f1a1 0404 	sub.w	r4, r1, #4
 80170de:	bfb8      	it	lt
 80170e0:	18e4      	addlt	r4, r4, r3
 80170e2:	f001 fdb1 	bl	8018c48 <__malloc_lock>
 80170e6:	4a20      	ldr	r2, [pc, #128]	; (8017168 <_free_r+0x9c>)
 80170e8:	9801      	ldr	r0, [sp, #4]
 80170ea:	6813      	ldr	r3, [r2, #0]
 80170ec:	4615      	mov	r5, r2
 80170ee:	b933      	cbnz	r3, 80170fe <_free_r+0x32>
 80170f0:	6063      	str	r3, [r4, #4]
 80170f2:	6014      	str	r4, [r2, #0]
 80170f4:	b003      	add	sp, #12
 80170f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80170fa:	f001 bdab 	b.w	8018c54 <__malloc_unlock>
 80170fe:	42a3      	cmp	r3, r4
 8017100:	d90b      	bls.n	801711a <_free_r+0x4e>
 8017102:	6821      	ldr	r1, [r4, #0]
 8017104:	1862      	adds	r2, r4, r1
 8017106:	4293      	cmp	r3, r2
 8017108:	bf04      	itt	eq
 801710a:	681a      	ldreq	r2, [r3, #0]
 801710c:	685b      	ldreq	r3, [r3, #4]
 801710e:	6063      	str	r3, [r4, #4]
 8017110:	bf04      	itt	eq
 8017112:	1852      	addeq	r2, r2, r1
 8017114:	6022      	streq	r2, [r4, #0]
 8017116:	602c      	str	r4, [r5, #0]
 8017118:	e7ec      	b.n	80170f4 <_free_r+0x28>
 801711a:	461a      	mov	r2, r3
 801711c:	685b      	ldr	r3, [r3, #4]
 801711e:	b10b      	cbz	r3, 8017124 <_free_r+0x58>
 8017120:	42a3      	cmp	r3, r4
 8017122:	d9fa      	bls.n	801711a <_free_r+0x4e>
 8017124:	6811      	ldr	r1, [r2, #0]
 8017126:	1855      	adds	r5, r2, r1
 8017128:	42a5      	cmp	r5, r4
 801712a:	d10b      	bne.n	8017144 <_free_r+0x78>
 801712c:	6824      	ldr	r4, [r4, #0]
 801712e:	4421      	add	r1, r4
 8017130:	1854      	adds	r4, r2, r1
 8017132:	42a3      	cmp	r3, r4
 8017134:	6011      	str	r1, [r2, #0]
 8017136:	d1dd      	bne.n	80170f4 <_free_r+0x28>
 8017138:	681c      	ldr	r4, [r3, #0]
 801713a:	685b      	ldr	r3, [r3, #4]
 801713c:	6053      	str	r3, [r2, #4]
 801713e:	4421      	add	r1, r4
 8017140:	6011      	str	r1, [r2, #0]
 8017142:	e7d7      	b.n	80170f4 <_free_r+0x28>
 8017144:	d902      	bls.n	801714c <_free_r+0x80>
 8017146:	230c      	movs	r3, #12
 8017148:	6003      	str	r3, [r0, #0]
 801714a:	e7d3      	b.n	80170f4 <_free_r+0x28>
 801714c:	6825      	ldr	r5, [r4, #0]
 801714e:	1961      	adds	r1, r4, r5
 8017150:	428b      	cmp	r3, r1
 8017152:	bf04      	itt	eq
 8017154:	6819      	ldreq	r1, [r3, #0]
 8017156:	685b      	ldreq	r3, [r3, #4]
 8017158:	6063      	str	r3, [r4, #4]
 801715a:	bf04      	itt	eq
 801715c:	1949      	addeq	r1, r1, r5
 801715e:	6021      	streq	r1, [r4, #0]
 8017160:	6054      	str	r4, [r2, #4]
 8017162:	e7c7      	b.n	80170f4 <_free_r+0x28>
 8017164:	b003      	add	sp, #12
 8017166:	bd30      	pop	{r4, r5, pc}
 8017168:	20007e3c 	.word	0x20007e3c

0801716c <_malloc_r>:
 801716c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801716e:	1ccd      	adds	r5, r1, #3
 8017170:	f025 0503 	bic.w	r5, r5, #3
 8017174:	3508      	adds	r5, #8
 8017176:	2d0c      	cmp	r5, #12
 8017178:	bf38      	it	cc
 801717a:	250c      	movcc	r5, #12
 801717c:	2d00      	cmp	r5, #0
 801717e:	4606      	mov	r6, r0
 8017180:	db01      	blt.n	8017186 <_malloc_r+0x1a>
 8017182:	42a9      	cmp	r1, r5
 8017184:	d903      	bls.n	801718e <_malloc_r+0x22>
 8017186:	230c      	movs	r3, #12
 8017188:	6033      	str	r3, [r6, #0]
 801718a:	2000      	movs	r0, #0
 801718c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801718e:	f001 fd5b 	bl	8018c48 <__malloc_lock>
 8017192:	4921      	ldr	r1, [pc, #132]	; (8017218 <_malloc_r+0xac>)
 8017194:	680a      	ldr	r2, [r1, #0]
 8017196:	4614      	mov	r4, r2
 8017198:	b99c      	cbnz	r4, 80171c2 <_malloc_r+0x56>
 801719a:	4f20      	ldr	r7, [pc, #128]	; (801721c <_malloc_r+0xb0>)
 801719c:	683b      	ldr	r3, [r7, #0]
 801719e:	b923      	cbnz	r3, 80171aa <_malloc_r+0x3e>
 80171a0:	4621      	mov	r1, r4
 80171a2:	4630      	mov	r0, r6
 80171a4:	f000 fd10 	bl	8017bc8 <_sbrk_r>
 80171a8:	6038      	str	r0, [r7, #0]
 80171aa:	4629      	mov	r1, r5
 80171ac:	4630      	mov	r0, r6
 80171ae:	f000 fd0b 	bl	8017bc8 <_sbrk_r>
 80171b2:	1c43      	adds	r3, r0, #1
 80171b4:	d123      	bne.n	80171fe <_malloc_r+0x92>
 80171b6:	230c      	movs	r3, #12
 80171b8:	6033      	str	r3, [r6, #0]
 80171ba:	4630      	mov	r0, r6
 80171bc:	f001 fd4a 	bl	8018c54 <__malloc_unlock>
 80171c0:	e7e3      	b.n	801718a <_malloc_r+0x1e>
 80171c2:	6823      	ldr	r3, [r4, #0]
 80171c4:	1b5b      	subs	r3, r3, r5
 80171c6:	d417      	bmi.n	80171f8 <_malloc_r+0x8c>
 80171c8:	2b0b      	cmp	r3, #11
 80171ca:	d903      	bls.n	80171d4 <_malloc_r+0x68>
 80171cc:	6023      	str	r3, [r4, #0]
 80171ce:	441c      	add	r4, r3
 80171d0:	6025      	str	r5, [r4, #0]
 80171d2:	e004      	b.n	80171de <_malloc_r+0x72>
 80171d4:	6863      	ldr	r3, [r4, #4]
 80171d6:	42a2      	cmp	r2, r4
 80171d8:	bf0c      	ite	eq
 80171da:	600b      	streq	r3, [r1, #0]
 80171dc:	6053      	strne	r3, [r2, #4]
 80171de:	4630      	mov	r0, r6
 80171e0:	f001 fd38 	bl	8018c54 <__malloc_unlock>
 80171e4:	f104 000b 	add.w	r0, r4, #11
 80171e8:	1d23      	adds	r3, r4, #4
 80171ea:	f020 0007 	bic.w	r0, r0, #7
 80171ee:	1ac2      	subs	r2, r0, r3
 80171f0:	d0cc      	beq.n	801718c <_malloc_r+0x20>
 80171f2:	1a1b      	subs	r3, r3, r0
 80171f4:	50a3      	str	r3, [r4, r2]
 80171f6:	e7c9      	b.n	801718c <_malloc_r+0x20>
 80171f8:	4622      	mov	r2, r4
 80171fa:	6864      	ldr	r4, [r4, #4]
 80171fc:	e7cc      	b.n	8017198 <_malloc_r+0x2c>
 80171fe:	1cc4      	adds	r4, r0, #3
 8017200:	f024 0403 	bic.w	r4, r4, #3
 8017204:	42a0      	cmp	r0, r4
 8017206:	d0e3      	beq.n	80171d0 <_malloc_r+0x64>
 8017208:	1a21      	subs	r1, r4, r0
 801720a:	4630      	mov	r0, r6
 801720c:	f000 fcdc 	bl	8017bc8 <_sbrk_r>
 8017210:	3001      	adds	r0, #1
 8017212:	d1dd      	bne.n	80171d0 <_malloc_r+0x64>
 8017214:	e7cf      	b.n	80171b6 <_malloc_r+0x4a>
 8017216:	bf00      	nop
 8017218:	20007e3c 	.word	0x20007e3c
 801721c:	20007e40 	.word	0x20007e40

08017220 <__cvt>:
 8017220:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017224:	ec55 4b10 	vmov	r4, r5, d0
 8017228:	2d00      	cmp	r5, #0
 801722a:	460e      	mov	r6, r1
 801722c:	4619      	mov	r1, r3
 801722e:	462b      	mov	r3, r5
 8017230:	bfbb      	ittet	lt
 8017232:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8017236:	461d      	movlt	r5, r3
 8017238:	2300      	movge	r3, #0
 801723a:	232d      	movlt	r3, #45	; 0x2d
 801723c:	700b      	strb	r3, [r1, #0]
 801723e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017240:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8017244:	4691      	mov	r9, r2
 8017246:	f023 0820 	bic.w	r8, r3, #32
 801724a:	bfbc      	itt	lt
 801724c:	4622      	movlt	r2, r4
 801724e:	4614      	movlt	r4, r2
 8017250:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017254:	d005      	beq.n	8017262 <__cvt+0x42>
 8017256:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801725a:	d100      	bne.n	801725e <__cvt+0x3e>
 801725c:	3601      	adds	r6, #1
 801725e:	2102      	movs	r1, #2
 8017260:	e000      	b.n	8017264 <__cvt+0x44>
 8017262:	2103      	movs	r1, #3
 8017264:	ab03      	add	r3, sp, #12
 8017266:	9301      	str	r3, [sp, #4]
 8017268:	ab02      	add	r3, sp, #8
 801726a:	9300      	str	r3, [sp, #0]
 801726c:	ec45 4b10 	vmov	d0, r4, r5
 8017270:	4653      	mov	r3, sl
 8017272:	4632      	mov	r2, r6
 8017274:	f000 fe24 	bl	8017ec0 <_dtoa_r>
 8017278:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801727c:	4607      	mov	r7, r0
 801727e:	d102      	bne.n	8017286 <__cvt+0x66>
 8017280:	f019 0f01 	tst.w	r9, #1
 8017284:	d022      	beq.n	80172cc <__cvt+0xac>
 8017286:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801728a:	eb07 0906 	add.w	r9, r7, r6
 801728e:	d110      	bne.n	80172b2 <__cvt+0x92>
 8017290:	783b      	ldrb	r3, [r7, #0]
 8017292:	2b30      	cmp	r3, #48	; 0x30
 8017294:	d10a      	bne.n	80172ac <__cvt+0x8c>
 8017296:	2200      	movs	r2, #0
 8017298:	2300      	movs	r3, #0
 801729a:	4620      	mov	r0, r4
 801729c:	4629      	mov	r1, r5
 801729e:	f7e9 fc13 	bl	8000ac8 <__aeabi_dcmpeq>
 80172a2:	b918      	cbnz	r0, 80172ac <__cvt+0x8c>
 80172a4:	f1c6 0601 	rsb	r6, r6, #1
 80172a8:	f8ca 6000 	str.w	r6, [sl]
 80172ac:	f8da 3000 	ldr.w	r3, [sl]
 80172b0:	4499      	add	r9, r3
 80172b2:	2200      	movs	r2, #0
 80172b4:	2300      	movs	r3, #0
 80172b6:	4620      	mov	r0, r4
 80172b8:	4629      	mov	r1, r5
 80172ba:	f7e9 fc05 	bl	8000ac8 <__aeabi_dcmpeq>
 80172be:	b108      	cbz	r0, 80172c4 <__cvt+0xa4>
 80172c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80172c4:	2230      	movs	r2, #48	; 0x30
 80172c6:	9b03      	ldr	r3, [sp, #12]
 80172c8:	454b      	cmp	r3, r9
 80172ca:	d307      	bcc.n	80172dc <__cvt+0xbc>
 80172cc:	9b03      	ldr	r3, [sp, #12]
 80172ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80172d0:	1bdb      	subs	r3, r3, r7
 80172d2:	4638      	mov	r0, r7
 80172d4:	6013      	str	r3, [r2, #0]
 80172d6:	b004      	add	sp, #16
 80172d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172dc:	1c59      	adds	r1, r3, #1
 80172de:	9103      	str	r1, [sp, #12]
 80172e0:	701a      	strb	r2, [r3, #0]
 80172e2:	e7f0      	b.n	80172c6 <__cvt+0xa6>

080172e4 <__exponent>:
 80172e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80172e6:	4603      	mov	r3, r0
 80172e8:	2900      	cmp	r1, #0
 80172ea:	bfb8      	it	lt
 80172ec:	4249      	neglt	r1, r1
 80172ee:	f803 2b02 	strb.w	r2, [r3], #2
 80172f2:	bfb4      	ite	lt
 80172f4:	222d      	movlt	r2, #45	; 0x2d
 80172f6:	222b      	movge	r2, #43	; 0x2b
 80172f8:	2909      	cmp	r1, #9
 80172fa:	7042      	strb	r2, [r0, #1]
 80172fc:	dd2a      	ble.n	8017354 <__exponent+0x70>
 80172fe:	f10d 0407 	add.w	r4, sp, #7
 8017302:	46a4      	mov	ip, r4
 8017304:	270a      	movs	r7, #10
 8017306:	46a6      	mov	lr, r4
 8017308:	460a      	mov	r2, r1
 801730a:	fb91 f6f7 	sdiv	r6, r1, r7
 801730e:	fb07 1516 	mls	r5, r7, r6, r1
 8017312:	3530      	adds	r5, #48	; 0x30
 8017314:	2a63      	cmp	r2, #99	; 0x63
 8017316:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 801731a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801731e:	4631      	mov	r1, r6
 8017320:	dcf1      	bgt.n	8017306 <__exponent+0x22>
 8017322:	3130      	adds	r1, #48	; 0x30
 8017324:	f1ae 0502 	sub.w	r5, lr, #2
 8017328:	f804 1c01 	strb.w	r1, [r4, #-1]
 801732c:	1c44      	adds	r4, r0, #1
 801732e:	4629      	mov	r1, r5
 8017330:	4561      	cmp	r1, ip
 8017332:	d30a      	bcc.n	801734a <__exponent+0x66>
 8017334:	f10d 0209 	add.w	r2, sp, #9
 8017338:	eba2 020e 	sub.w	r2, r2, lr
 801733c:	4565      	cmp	r5, ip
 801733e:	bf88      	it	hi
 8017340:	2200      	movhi	r2, #0
 8017342:	4413      	add	r3, r2
 8017344:	1a18      	subs	r0, r3, r0
 8017346:	b003      	add	sp, #12
 8017348:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801734a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801734e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8017352:	e7ed      	b.n	8017330 <__exponent+0x4c>
 8017354:	2330      	movs	r3, #48	; 0x30
 8017356:	3130      	adds	r1, #48	; 0x30
 8017358:	7083      	strb	r3, [r0, #2]
 801735a:	70c1      	strb	r1, [r0, #3]
 801735c:	1d03      	adds	r3, r0, #4
 801735e:	e7f1      	b.n	8017344 <__exponent+0x60>

08017360 <_printf_float>:
 8017360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017364:	ed2d 8b02 	vpush	{d8}
 8017368:	b08d      	sub	sp, #52	; 0x34
 801736a:	460c      	mov	r4, r1
 801736c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8017370:	4616      	mov	r6, r2
 8017372:	461f      	mov	r7, r3
 8017374:	4605      	mov	r5, r0
 8017376:	f001 fc51 	bl	8018c1c <_localeconv_r>
 801737a:	f8d0 a000 	ldr.w	sl, [r0]
 801737e:	4650      	mov	r0, sl
 8017380:	f7e8 ff26 	bl	80001d0 <strlen>
 8017384:	2300      	movs	r3, #0
 8017386:	930a      	str	r3, [sp, #40]	; 0x28
 8017388:	6823      	ldr	r3, [r4, #0]
 801738a:	9305      	str	r3, [sp, #20]
 801738c:	f8d8 3000 	ldr.w	r3, [r8]
 8017390:	f894 b018 	ldrb.w	fp, [r4, #24]
 8017394:	3307      	adds	r3, #7
 8017396:	f023 0307 	bic.w	r3, r3, #7
 801739a:	f103 0208 	add.w	r2, r3, #8
 801739e:	f8c8 2000 	str.w	r2, [r8]
 80173a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173a6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80173aa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80173ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80173b2:	9307      	str	r3, [sp, #28]
 80173b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80173b8:	ee08 0a10 	vmov	s16, r0
 80173bc:	4b9f      	ldr	r3, [pc, #636]	; (801763c <_printf_float+0x2dc>)
 80173be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80173c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80173c6:	f7e9 fbb1 	bl	8000b2c <__aeabi_dcmpun>
 80173ca:	bb88      	cbnz	r0, 8017430 <_printf_float+0xd0>
 80173cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80173d0:	4b9a      	ldr	r3, [pc, #616]	; (801763c <_printf_float+0x2dc>)
 80173d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80173d6:	f7e9 fb8b 	bl	8000af0 <__aeabi_dcmple>
 80173da:	bb48      	cbnz	r0, 8017430 <_printf_float+0xd0>
 80173dc:	2200      	movs	r2, #0
 80173de:	2300      	movs	r3, #0
 80173e0:	4640      	mov	r0, r8
 80173e2:	4649      	mov	r1, r9
 80173e4:	f7e9 fb7a 	bl	8000adc <__aeabi_dcmplt>
 80173e8:	b110      	cbz	r0, 80173f0 <_printf_float+0x90>
 80173ea:	232d      	movs	r3, #45	; 0x2d
 80173ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80173f0:	4b93      	ldr	r3, [pc, #588]	; (8017640 <_printf_float+0x2e0>)
 80173f2:	4894      	ldr	r0, [pc, #592]	; (8017644 <_printf_float+0x2e4>)
 80173f4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80173f8:	bf94      	ite	ls
 80173fa:	4698      	movls	r8, r3
 80173fc:	4680      	movhi	r8, r0
 80173fe:	2303      	movs	r3, #3
 8017400:	6123      	str	r3, [r4, #16]
 8017402:	9b05      	ldr	r3, [sp, #20]
 8017404:	f023 0204 	bic.w	r2, r3, #4
 8017408:	6022      	str	r2, [r4, #0]
 801740a:	f04f 0900 	mov.w	r9, #0
 801740e:	9700      	str	r7, [sp, #0]
 8017410:	4633      	mov	r3, r6
 8017412:	aa0b      	add	r2, sp, #44	; 0x2c
 8017414:	4621      	mov	r1, r4
 8017416:	4628      	mov	r0, r5
 8017418:	f000 f9d8 	bl	80177cc <_printf_common>
 801741c:	3001      	adds	r0, #1
 801741e:	f040 8090 	bne.w	8017542 <_printf_float+0x1e2>
 8017422:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017426:	b00d      	add	sp, #52	; 0x34
 8017428:	ecbd 8b02 	vpop	{d8}
 801742c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017430:	4642      	mov	r2, r8
 8017432:	464b      	mov	r3, r9
 8017434:	4640      	mov	r0, r8
 8017436:	4649      	mov	r1, r9
 8017438:	f7e9 fb78 	bl	8000b2c <__aeabi_dcmpun>
 801743c:	b140      	cbz	r0, 8017450 <_printf_float+0xf0>
 801743e:	464b      	mov	r3, r9
 8017440:	2b00      	cmp	r3, #0
 8017442:	bfbc      	itt	lt
 8017444:	232d      	movlt	r3, #45	; 0x2d
 8017446:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801744a:	487f      	ldr	r0, [pc, #508]	; (8017648 <_printf_float+0x2e8>)
 801744c:	4b7f      	ldr	r3, [pc, #508]	; (801764c <_printf_float+0x2ec>)
 801744e:	e7d1      	b.n	80173f4 <_printf_float+0x94>
 8017450:	6863      	ldr	r3, [r4, #4]
 8017452:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8017456:	9206      	str	r2, [sp, #24]
 8017458:	1c5a      	adds	r2, r3, #1
 801745a:	d13f      	bne.n	80174dc <_printf_float+0x17c>
 801745c:	2306      	movs	r3, #6
 801745e:	6063      	str	r3, [r4, #4]
 8017460:	9b05      	ldr	r3, [sp, #20]
 8017462:	6861      	ldr	r1, [r4, #4]
 8017464:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8017468:	2300      	movs	r3, #0
 801746a:	9303      	str	r3, [sp, #12]
 801746c:	ab0a      	add	r3, sp, #40	; 0x28
 801746e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8017472:	ab09      	add	r3, sp, #36	; 0x24
 8017474:	ec49 8b10 	vmov	d0, r8, r9
 8017478:	9300      	str	r3, [sp, #0]
 801747a:	6022      	str	r2, [r4, #0]
 801747c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8017480:	4628      	mov	r0, r5
 8017482:	f7ff fecd 	bl	8017220 <__cvt>
 8017486:	9b06      	ldr	r3, [sp, #24]
 8017488:	9909      	ldr	r1, [sp, #36]	; 0x24
 801748a:	2b47      	cmp	r3, #71	; 0x47
 801748c:	4680      	mov	r8, r0
 801748e:	d108      	bne.n	80174a2 <_printf_float+0x142>
 8017490:	1cc8      	adds	r0, r1, #3
 8017492:	db02      	blt.n	801749a <_printf_float+0x13a>
 8017494:	6863      	ldr	r3, [r4, #4]
 8017496:	4299      	cmp	r1, r3
 8017498:	dd41      	ble.n	801751e <_printf_float+0x1be>
 801749a:	f1ab 0b02 	sub.w	fp, fp, #2
 801749e:	fa5f fb8b 	uxtb.w	fp, fp
 80174a2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80174a6:	d820      	bhi.n	80174ea <_printf_float+0x18a>
 80174a8:	3901      	subs	r1, #1
 80174aa:	465a      	mov	r2, fp
 80174ac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80174b0:	9109      	str	r1, [sp, #36]	; 0x24
 80174b2:	f7ff ff17 	bl	80172e4 <__exponent>
 80174b6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80174b8:	1813      	adds	r3, r2, r0
 80174ba:	2a01      	cmp	r2, #1
 80174bc:	4681      	mov	r9, r0
 80174be:	6123      	str	r3, [r4, #16]
 80174c0:	dc02      	bgt.n	80174c8 <_printf_float+0x168>
 80174c2:	6822      	ldr	r2, [r4, #0]
 80174c4:	07d2      	lsls	r2, r2, #31
 80174c6:	d501      	bpl.n	80174cc <_printf_float+0x16c>
 80174c8:	3301      	adds	r3, #1
 80174ca:	6123      	str	r3, [r4, #16]
 80174cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80174d0:	2b00      	cmp	r3, #0
 80174d2:	d09c      	beq.n	801740e <_printf_float+0xae>
 80174d4:	232d      	movs	r3, #45	; 0x2d
 80174d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80174da:	e798      	b.n	801740e <_printf_float+0xae>
 80174dc:	9a06      	ldr	r2, [sp, #24]
 80174de:	2a47      	cmp	r2, #71	; 0x47
 80174e0:	d1be      	bne.n	8017460 <_printf_float+0x100>
 80174e2:	2b00      	cmp	r3, #0
 80174e4:	d1bc      	bne.n	8017460 <_printf_float+0x100>
 80174e6:	2301      	movs	r3, #1
 80174e8:	e7b9      	b.n	801745e <_printf_float+0xfe>
 80174ea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80174ee:	d118      	bne.n	8017522 <_printf_float+0x1c2>
 80174f0:	2900      	cmp	r1, #0
 80174f2:	6863      	ldr	r3, [r4, #4]
 80174f4:	dd0b      	ble.n	801750e <_printf_float+0x1ae>
 80174f6:	6121      	str	r1, [r4, #16]
 80174f8:	b913      	cbnz	r3, 8017500 <_printf_float+0x1a0>
 80174fa:	6822      	ldr	r2, [r4, #0]
 80174fc:	07d0      	lsls	r0, r2, #31
 80174fe:	d502      	bpl.n	8017506 <_printf_float+0x1a6>
 8017500:	3301      	adds	r3, #1
 8017502:	440b      	add	r3, r1
 8017504:	6123      	str	r3, [r4, #16]
 8017506:	65a1      	str	r1, [r4, #88]	; 0x58
 8017508:	f04f 0900 	mov.w	r9, #0
 801750c:	e7de      	b.n	80174cc <_printf_float+0x16c>
 801750e:	b913      	cbnz	r3, 8017516 <_printf_float+0x1b6>
 8017510:	6822      	ldr	r2, [r4, #0]
 8017512:	07d2      	lsls	r2, r2, #31
 8017514:	d501      	bpl.n	801751a <_printf_float+0x1ba>
 8017516:	3302      	adds	r3, #2
 8017518:	e7f4      	b.n	8017504 <_printf_float+0x1a4>
 801751a:	2301      	movs	r3, #1
 801751c:	e7f2      	b.n	8017504 <_printf_float+0x1a4>
 801751e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8017522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017524:	4299      	cmp	r1, r3
 8017526:	db05      	blt.n	8017534 <_printf_float+0x1d4>
 8017528:	6823      	ldr	r3, [r4, #0]
 801752a:	6121      	str	r1, [r4, #16]
 801752c:	07d8      	lsls	r0, r3, #31
 801752e:	d5ea      	bpl.n	8017506 <_printf_float+0x1a6>
 8017530:	1c4b      	adds	r3, r1, #1
 8017532:	e7e7      	b.n	8017504 <_printf_float+0x1a4>
 8017534:	2900      	cmp	r1, #0
 8017536:	bfd4      	ite	le
 8017538:	f1c1 0202 	rsble	r2, r1, #2
 801753c:	2201      	movgt	r2, #1
 801753e:	4413      	add	r3, r2
 8017540:	e7e0      	b.n	8017504 <_printf_float+0x1a4>
 8017542:	6823      	ldr	r3, [r4, #0]
 8017544:	055a      	lsls	r2, r3, #21
 8017546:	d407      	bmi.n	8017558 <_printf_float+0x1f8>
 8017548:	6923      	ldr	r3, [r4, #16]
 801754a:	4642      	mov	r2, r8
 801754c:	4631      	mov	r1, r6
 801754e:	4628      	mov	r0, r5
 8017550:	47b8      	blx	r7
 8017552:	3001      	adds	r0, #1
 8017554:	d12c      	bne.n	80175b0 <_printf_float+0x250>
 8017556:	e764      	b.n	8017422 <_printf_float+0xc2>
 8017558:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801755c:	f240 80e0 	bls.w	8017720 <_printf_float+0x3c0>
 8017560:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017564:	2200      	movs	r2, #0
 8017566:	2300      	movs	r3, #0
 8017568:	f7e9 faae 	bl	8000ac8 <__aeabi_dcmpeq>
 801756c:	2800      	cmp	r0, #0
 801756e:	d034      	beq.n	80175da <_printf_float+0x27a>
 8017570:	4a37      	ldr	r2, [pc, #220]	; (8017650 <_printf_float+0x2f0>)
 8017572:	2301      	movs	r3, #1
 8017574:	4631      	mov	r1, r6
 8017576:	4628      	mov	r0, r5
 8017578:	47b8      	blx	r7
 801757a:	3001      	adds	r0, #1
 801757c:	f43f af51 	beq.w	8017422 <_printf_float+0xc2>
 8017580:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017584:	429a      	cmp	r2, r3
 8017586:	db02      	blt.n	801758e <_printf_float+0x22e>
 8017588:	6823      	ldr	r3, [r4, #0]
 801758a:	07d8      	lsls	r0, r3, #31
 801758c:	d510      	bpl.n	80175b0 <_printf_float+0x250>
 801758e:	ee18 3a10 	vmov	r3, s16
 8017592:	4652      	mov	r2, sl
 8017594:	4631      	mov	r1, r6
 8017596:	4628      	mov	r0, r5
 8017598:	47b8      	blx	r7
 801759a:	3001      	adds	r0, #1
 801759c:	f43f af41 	beq.w	8017422 <_printf_float+0xc2>
 80175a0:	f04f 0800 	mov.w	r8, #0
 80175a4:	f104 091a 	add.w	r9, r4, #26
 80175a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80175aa:	3b01      	subs	r3, #1
 80175ac:	4543      	cmp	r3, r8
 80175ae:	dc09      	bgt.n	80175c4 <_printf_float+0x264>
 80175b0:	6823      	ldr	r3, [r4, #0]
 80175b2:	079b      	lsls	r3, r3, #30
 80175b4:	f100 8105 	bmi.w	80177c2 <_printf_float+0x462>
 80175b8:	68e0      	ldr	r0, [r4, #12]
 80175ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80175bc:	4298      	cmp	r0, r3
 80175be:	bfb8      	it	lt
 80175c0:	4618      	movlt	r0, r3
 80175c2:	e730      	b.n	8017426 <_printf_float+0xc6>
 80175c4:	2301      	movs	r3, #1
 80175c6:	464a      	mov	r2, r9
 80175c8:	4631      	mov	r1, r6
 80175ca:	4628      	mov	r0, r5
 80175cc:	47b8      	blx	r7
 80175ce:	3001      	adds	r0, #1
 80175d0:	f43f af27 	beq.w	8017422 <_printf_float+0xc2>
 80175d4:	f108 0801 	add.w	r8, r8, #1
 80175d8:	e7e6      	b.n	80175a8 <_printf_float+0x248>
 80175da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80175dc:	2b00      	cmp	r3, #0
 80175de:	dc39      	bgt.n	8017654 <_printf_float+0x2f4>
 80175e0:	4a1b      	ldr	r2, [pc, #108]	; (8017650 <_printf_float+0x2f0>)
 80175e2:	2301      	movs	r3, #1
 80175e4:	4631      	mov	r1, r6
 80175e6:	4628      	mov	r0, r5
 80175e8:	47b8      	blx	r7
 80175ea:	3001      	adds	r0, #1
 80175ec:	f43f af19 	beq.w	8017422 <_printf_float+0xc2>
 80175f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80175f4:	4313      	orrs	r3, r2
 80175f6:	d102      	bne.n	80175fe <_printf_float+0x29e>
 80175f8:	6823      	ldr	r3, [r4, #0]
 80175fa:	07d9      	lsls	r1, r3, #31
 80175fc:	d5d8      	bpl.n	80175b0 <_printf_float+0x250>
 80175fe:	ee18 3a10 	vmov	r3, s16
 8017602:	4652      	mov	r2, sl
 8017604:	4631      	mov	r1, r6
 8017606:	4628      	mov	r0, r5
 8017608:	47b8      	blx	r7
 801760a:	3001      	adds	r0, #1
 801760c:	f43f af09 	beq.w	8017422 <_printf_float+0xc2>
 8017610:	f04f 0900 	mov.w	r9, #0
 8017614:	f104 0a1a 	add.w	sl, r4, #26
 8017618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801761a:	425b      	negs	r3, r3
 801761c:	454b      	cmp	r3, r9
 801761e:	dc01      	bgt.n	8017624 <_printf_float+0x2c4>
 8017620:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017622:	e792      	b.n	801754a <_printf_float+0x1ea>
 8017624:	2301      	movs	r3, #1
 8017626:	4652      	mov	r2, sl
 8017628:	4631      	mov	r1, r6
 801762a:	4628      	mov	r0, r5
 801762c:	47b8      	blx	r7
 801762e:	3001      	adds	r0, #1
 8017630:	f43f aef7 	beq.w	8017422 <_printf_float+0xc2>
 8017634:	f109 0901 	add.w	r9, r9, #1
 8017638:	e7ee      	b.n	8017618 <_printf_float+0x2b8>
 801763a:	bf00      	nop
 801763c:	7fefffff 	.word	0x7fefffff
 8017640:	0801e76c 	.word	0x0801e76c
 8017644:	0801e770 	.word	0x0801e770
 8017648:	0801e778 	.word	0x0801e778
 801764c:	0801e774 	.word	0x0801e774
 8017650:	0801e77c 	.word	0x0801e77c
 8017654:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017656:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017658:	429a      	cmp	r2, r3
 801765a:	bfa8      	it	ge
 801765c:	461a      	movge	r2, r3
 801765e:	2a00      	cmp	r2, #0
 8017660:	4691      	mov	r9, r2
 8017662:	dc37      	bgt.n	80176d4 <_printf_float+0x374>
 8017664:	f04f 0b00 	mov.w	fp, #0
 8017668:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801766c:	f104 021a 	add.w	r2, r4, #26
 8017670:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017672:	9305      	str	r3, [sp, #20]
 8017674:	eba3 0309 	sub.w	r3, r3, r9
 8017678:	455b      	cmp	r3, fp
 801767a:	dc33      	bgt.n	80176e4 <_printf_float+0x384>
 801767c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017680:	429a      	cmp	r2, r3
 8017682:	db3b      	blt.n	80176fc <_printf_float+0x39c>
 8017684:	6823      	ldr	r3, [r4, #0]
 8017686:	07da      	lsls	r2, r3, #31
 8017688:	d438      	bmi.n	80176fc <_printf_float+0x39c>
 801768a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801768c:	9b05      	ldr	r3, [sp, #20]
 801768e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017690:	1ad3      	subs	r3, r2, r3
 8017692:	eba2 0901 	sub.w	r9, r2, r1
 8017696:	4599      	cmp	r9, r3
 8017698:	bfa8      	it	ge
 801769a:	4699      	movge	r9, r3
 801769c:	f1b9 0f00 	cmp.w	r9, #0
 80176a0:	dc35      	bgt.n	801770e <_printf_float+0x3ae>
 80176a2:	f04f 0800 	mov.w	r8, #0
 80176a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80176aa:	f104 0a1a 	add.w	sl, r4, #26
 80176ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80176b2:	1a9b      	subs	r3, r3, r2
 80176b4:	eba3 0309 	sub.w	r3, r3, r9
 80176b8:	4543      	cmp	r3, r8
 80176ba:	f77f af79 	ble.w	80175b0 <_printf_float+0x250>
 80176be:	2301      	movs	r3, #1
 80176c0:	4652      	mov	r2, sl
 80176c2:	4631      	mov	r1, r6
 80176c4:	4628      	mov	r0, r5
 80176c6:	47b8      	blx	r7
 80176c8:	3001      	adds	r0, #1
 80176ca:	f43f aeaa 	beq.w	8017422 <_printf_float+0xc2>
 80176ce:	f108 0801 	add.w	r8, r8, #1
 80176d2:	e7ec      	b.n	80176ae <_printf_float+0x34e>
 80176d4:	4613      	mov	r3, r2
 80176d6:	4631      	mov	r1, r6
 80176d8:	4642      	mov	r2, r8
 80176da:	4628      	mov	r0, r5
 80176dc:	47b8      	blx	r7
 80176de:	3001      	adds	r0, #1
 80176e0:	d1c0      	bne.n	8017664 <_printf_float+0x304>
 80176e2:	e69e      	b.n	8017422 <_printf_float+0xc2>
 80176e4:	2301      	movs	r3, #1
 80176e6:	4631      	mov	r1, r6
 80176e8:	4628      	mov	r0, r5
 80176ea:	9205      	str	r2, [sp, #20]
 80176ec:	47b8      	blx	r7
 80176ee:	3001      	adds	r0, #1
 80176f0:	f43f ae97 	beq.w	8017422 <_printf_float+0xc2>
 80176f4:	9a05      	ldr	r2, [sp, #20]
 80176f6:	f10b 0b01 	add.w	fp, fp, #1
 80176fa:	e7b9      	b.n	8017670 <_printf_float+0x310>
 80176fc:	ee18 3a10 	vmov	r3, s16
 8017700:	4652      	mov	r2, sl
 8017702:	4631      	mov	r1, r6
 8017704:	4628      	mov	r0, r5
 8017706:	47b8      	blx	r7
 8017708:	3001      	adds	r0, #1
 801770a:	d1be      	bne.n	801768a <_printf_float+0x32a>
 801770c:	e689      	b.n	8017422 <_printf_float+0xc2>
 801770e:	9a05      	ldr	r2, [sp, #20]
 8017710:	464b      	mov	r3, r9
 8017712:	4442      	add	r2, r8
 8017714:	4631      	mov	r1, r6
 8017716:	4628      	mov	r0, r5
 8017718:	47b8      	blx	r7
 801771a:	3001      	adds	r0, #1
 801771c:	d1c1      	bne.n	80176a2 <_printf_float+0x342>
 801771e:	e680      	b.n	8017422 <_printf_float+0xc2>
 8017720:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017722:	2a01      	cmp	r2, #1
 8017724:	dc01      	bgt.n	801772a <_printf_float+0x3ca>
 8017726:	07db      	lsls	r3, r3, #31
 8017728:	d538      	bpl.n	801779c <_printf_float+0x43c>
 801772a:	2301      	movs	r3, #1
 801772c:	4642      	mov	r2, r8
 801772e:	4631      	mov	r1, r6
 8017730:	4628      	mov	r0, r5
 8017732:	47b8      	blx	r7
 8017734:	3001      	adds	r0, #1
 8017736:	f43f ae74 	beq.w	8017422 <_printf_float+0xc2>
 801773a:	ee18 3a10 	vmov	r3, s16
 801773e:	4652      	mov	r2, sl
 8017740:	4631      	mov	r1, r6
 8017742:	4628      	mov	r0, r5
 8017744:	47b8      	blx	r7
 8017746:	3001      	adds	r0, #1
 8017748:	f43f ae6b 	beq.w	8017422 <_printf_float+0xc2>
 801774c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017750:	2200      	movs	r2, #0
 8017752:	2300      	movs	r3, #0
 8017754:	f7e9 f9b8 	bl	8000ac8 <__aeabi_dcmpeq>
 8017758:	b9d8      	cbnz	r0, 8017792 <_printf_float+0x432>
 801775a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801775c:	f108 0201 	add.w	r2, r8, #1
 8017760:	3b01      	subs	r3, #1
 8017762:	4631      	mov	r1, r6
 8017764:	4628      	mov	r0, r5
 8017766:	47b8      	blx	r7
 8017768:	3001      	adds	r0, #1
 801776a:	d10e      	bne.n	801778a <_printf_float+0x42a>
 801776c:	e659      	b.n	8017422 <_printf_float+0xc2>
 801776e:	2301      	movs	r3, #1
 8017770:	4652      	mov	r2, sl
 8017772:	4631      	mov	r1, r6
 8017774:	4628      	mov	r0, r5
 8017776:	47b8      	blx	r7
 8017778:	3001      	adds	r0, #1
 801777a:	f43f ae52 	beq.w	8017422 <_printf_float+0xc2>
 801777e:	f108 0801 	add.w	r8, r8, #1
 8017782:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017784:	3b01      	subs	r3, #1
 8017786:	4543      	cmp	r3, r8
 8017788:	dcf1      	bgt.n	801776e <_printf_float+0x40e>
 801778a:	464b      	mov	r3, r9
 801778c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8017790:	e6dc      	b.n	801754c <_printf_float+0x1ec>
 8017792:	f04f 0800 	mov.w	r8, #0
 8017796:	f104 0a1a 	add.w	sl, r4, #26
 801779a:	e7f2      	b.n	8017782 <_printf_float+0x422>
 801779c:	2301      	movs	r3, #1
 801779e:	4642      	mov	r2, r8
 80177a0:	e7df      	b.n	8017762 <_printf_float+0x402>
 80177a2:	2301      	movs	r3, #1
 80177a4:	464a      	mov	r2, r9
 80177a6:	4631      	mov	r1, r6
 80177a8:	4628      	mov	r0, r5
 80177aa:	47b8      	blx	r7
 80177ac:	3001      	adds	r0, #1
 80177ae:	f43f ae38 	beq.w	8017422 <_printf_float+0xc2>
 80177b2:	f108 0801 	add.w	r8, r8, #1
 80177b6:	68e3      	ldr	r3, [r4, #12]
 80177b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80177ba:	1a5b      	subs	r3, r3, r1
 80177bc:	4543      	cmp	r3, r8
 80177be:	dcf0      	bgt.n	80177a2 <_printf_float+0x442>
 80177c0:	e6fa      	b.n	80175b8 <_printf_float+0x258>
 80177c2:	f04f 0800 	mov.w	r8, #0
 80177c6:	f104 0919 	add.w	r9, r4, #25
 80177ca:	e7f4      	b.n	80177b6 <_printf_float+0x456>

080177cc <_printf_common>:
 80177cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177d0:	4616      	mov	r6, r2
 80177d2:	4699      	mov	r9, r3
 80177d4:	688a      	ldr	r2, [r1, #8]
 80177d6:	690b      	ldr	r3, [r1, #16]
 80177d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80177dc:	4293      	cmp	r3, r2
 80177de:	bfb8      	it	lt
 80177e0:	4613      	movlt	r3, r2
 80177e2:	6033      	str	r3, [r6, #0]
 80177e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80177e8:	4607      	mov	r7, r0
 80177ea:	460c      	mov	r4, r1
 80177ec:	b10a      	cbz	r2, 80177f2 <_printf_common+0x26>
 80177ee:	3301      	adds	r3, #1
 80177f0:	6033      	str	r3, [r6, #0]
 80177f2:	6823      	ldr	r3, [r4, #0]
 80177f4:	0699      	lsls	r1, r3, #26
 80177f6:	bf42      	ittt	mi
 80177f8:	6833      	ldrmi	r3, [r6, #0]
 80177fa:	3302      	addmi	r3, #2
 80177fc:	6033      	strmi	r3, [r6, #0]
 80177fe:	6825      	ldr	r5, [r4, #0]
 8017800:	f015 0506 	ands.w	r5, r5, #6
 8017804:	d106      	bne.n	8017814 <_printf_common+0x48>
 8017806:	f104 0a19 	add.w	sl, r4, #25
 801780a:	68e3      	ldr	r3, [r4, #12]
 801780c:	6832      	ldr	r2, [r6, #0]
 801780e:	1a9b      	subs	r3, r3, r2
 8017810:	42ab      	cmp	r3, r5
 8017812:	dc26      	bgt.n	8017862 <_printf_common+0x96>
 8017814:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017818:	1e13      	subs	r3, r2, #0
 801781a:	6822      	ldr	r2, [r4, #0]
 801781c:	bf18      	it	ne
 801781e:	2301      	movne	r3, #1
 8017820:	0692      	lsls	r2, r2, #26
 8017822:	d42b      	bmi.n	801787c <_printf_common+0xb0>
 8017824:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017828:	4649      	mov	r1, r9
 801782a:	4638      	mov	r0, r7
 801782c:	47c0      	blx	r8
 801782e:	3001      	adds	r0, #1
 8017830:	d01e      	beq.n	8017870 <_printf_common+0xa4>
 8017832:	6823      	ldr	r3, [r4, #0]
 8017834:	68e5      	ldr	r5, [r4, #12]
 8017836:	6832      	ldr	r2, [r6, #0]
 8017838:	f003 0306 	and.w	r3, r3, #6
 801783c:	2b04      	cmp	r3, #4
 801783e:	bf08      	it	eq
 8017840:	1aad      	subeq	r5, r5, r2
 8017842:	68a3      	ldr	r3, [r4, #8]
 8017844:	6922      	ldr	r2, [r4, #16]
 8017846:	bf0c      	ite	eq
 8017848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801784c:	2500      	movne	r5, #0
 801784e:	4293      	cmp	r3, r2
 8017850:	bfc4      	itt	gt
 8017852:	1a9b      	subgt	r3, r3, r2
 8017854:	18ed      	addgt	r5, r5, r3
 8017856:	2600      	movs	r6, #0
 8017858:	341a      	adds	r4, #26
 801785a:	42b5      	cmp	r5, r6
 801785c:	d11a      	bne.n	8017894 <_printf_common+0xc8>
 801785e:	2000      	movs	r0, #0
 8017860:	e008      	b.n	8017874 <_printf_common+0xa8>
 8017862:	2301      	movs	r3, #1
 8017864:	4652      	mov	r2, sl
 8017866:	4649      	mov	r1, r9
 8017868:	4638      	mov	r0, r7
 801786a:	47c0      	blx	r8
 801786c:	3001      	adds	r0, #1
 801786e:	d103      	bne.n	8017878 <_printf_common+0xac>
 8017870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017878:	3501      	adds	r5, #1
 801787a:	e7c6      	b.n	801780a <_printf_common+0x3e>
 801787c:	18e1      	adds	r1, r4, r3
 801787e:	1c5a      	adds	r2, r3, #1
 8017880:	2030      	movs	r0, #48	; 0x30
 8017882:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017886:	4422      	add	r2, r4
 8017888:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801788c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017890:	3302      	adds	r3, #2
 8017892:	e7c7      	b.n	8017824 <_printf_common+0x58>
 8017894:	2301      	movs	r3, #1
 8017896:	4622      	mov	r2, r4
 8017898:	4649      	mov	r1, r9
 801789a:	4638      	mov	r0, r7
 801789c:	47c0      	blx	r8
 801789e:	3001      	adds	r0, #1
 80178a0:	d0e6      	beq.n	8017870 <_printf_common+0xa4>
 80178a2:	3601      	adds	r6, #1
 80178a4:	e7d9      	b.n	801785a <_printf_common+0x8e>
	...

080178a8 <_printf_i>:
 80178a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80178ac:	460c      	mov	r4, r1
 80178ae:	4691      	mov	r9, r2
 80178b0:	7e27      	ldrb	r7, [r4, #24]
 80178b2:	990c      	ldr	r1, [sp, #48]	; 0x30
 80178b4:	2f78      	cmp	r7, #120	; 0x78
 80178b6:	4680      	mov	r8, r0
 80178b8:	469a      	mov	sl, r3
 80178ba:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80178be:	d807      	bhi.n	80178d0 <_printf_i+0x28>
 80178c0:	2f62      	cmp	r7, #98	; 0x62
 80178c2:	d80a      	bhi.n	80178da <_printf_i+0x32>
 80178c4:	2f00      	cmp	r7, #0
 80178c6:	f000 80d8 	beq.w	8017a7a <_printf_i+0x1d2>
 80178ca:	2f58      	cmp	r7, #88	; 0x58
 80178cc:	f000 80a3 	beq.w	8017a16 <_printf_i+0x16e>
 80178d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80178d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80178d8:	e03a      	b.n	8017950 <_printf_i+0xa8>
 80178da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80178de:	2b15      	cmp	r3, #21
 80178e0:	d8f6      	bhi.n	80178d0 <_printf_i+0x28>
 80178e2:	a001      	add	r0, pc, #4	; (adr r0, 80178e8 <_printf_i+0x40>)
 80178e4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80178e8:	08017941 	.word	0x08017941
 80178ec:	08017955 	.word	0x08017955
 80178f0:	080178d1 	.word	0x080178d1
 80178f4:	080178d1 	.word	0x080178d1
 80178f8:	080178d1 	.word	0x080178d1
 80178fc:	080178d1 	.word	0x080178d1
 8017900:	08017955 	.word	0x08017955
 8017904:	080178d1 	.word	0x080178d1
 8017908:	080178d1 	.word	0x080178d1
 801790c:	080178d1 	.word	0x080178d1
 8017910:	080178d1 	.word	0x080178d1
 8017914:	08017a61 	.word	0x08017a61
 8017918:	08017985 	.word	0x08017985
 801791c:	08017a43 	.word	0x08017a43
 8017920:	080178d1 	.word	0x080178d1
 8017924:	080178d1 	.word	0x080178d1
 8017928:	08017a83 	.word	0x08017a83
 801792c:	080178d1 	.word	0x080178d1
 8017930:	08017985 	.word	0x08017985
 8017934:	080178d1 	.word	0x080178d1
 8017938:	080178d1 	.word	0x080178d1
 801793c:	08017a4b 	.word	0x08017a4b
 8017940:	680b      	ldr	r3, [r1, #0]
 8017942:	1d1a      	adds	r2, r3, #4
 8017944:	681b      	ldr	r3, [r3, #0]
 8017946:	600a      	str	r2, [r1, #0]
 8017948:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801794c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017950:	2301      	movs	r3, #1
 8017952:	e0a3      	b.n	8017a9c <_printf_i+0x1f4>
 8017954:	6825      	ldr	r5, [r4, #0]
 8017956:	6808      	ldr	r0, [r1, #0]
 8017958:	062e      	lsls	r6, r5, #24
 801795a:	f100 0304 	add.w	r3, r0, #4
 801795e:	d50a      	bpl.n	8017976 <_printf_i+0xce>
 8017960:	6805      	ldr	r5, [r0, #0]
 8017962:	600b      	str	r3, [r1, #0]
 8017964:	2d00      	cmp	r5, #0
 8017966:	da03      	bge.n	8017970 <_printf_i+0xc8>
 8017968:	232d      	movs	r3, #45	; 0x2d
 801796a:	426d      	negs	r5, r5
 801796c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017970:	485e      	ldr	r0, [pc, #376]	; (8017aec <_printf_i+0x244>)
 8017972:	230a      	movs	r3, #10
 8017974:	e019      	b.n	80179aa <_printf_i+0x102>
 8017976:	f015 0f40 	tst.w	r5, #64	; 0x40
 801797a:	6805      	ldr	r5, [r0, #0]
 801797c:	600b      	str	r3, [r1, #0]
 801797e:	bf18      	it	ne
 8017980:	b22d      	sxthne	r5, r5
 8017982:	e7ef      	b.n	8017964 <_printf_i+0xbc>
 8017984:	680b      	ldr	r3, [r1, #0]
 8017986:	6825      	ldr	r5, [r4, #0]
 8017988:	1d18      	adds	r0, r3, #4
 801798a:	6008      	str	r0, [r1, #0]
 801798c:	0628      	lsls	r0, r5, #24
 801798e:	d501      	bpl.n	8017994 <_printf_i+0xec>
 8017990:	681d      	ldr	r5, [r3, #0]
 8017992:	e002      	b.n	801799a <_printf_i+0xf2>
 8017994:	0669      	lsls	r1, r5, #25
 8017996:	d5fb      	bpl.n	8017990 <_printf_i+0xe8>
 8017998:	881d      	ldrh	r5, [r3, #0]
 801799a:	4854      	ldr	r0, [pc, #336]	; (8017aec <_printf_i+0x244>)
 801799c:	2f6f      	cmp	r7, #111	; 0x6f
 801799e:	bf0c      	ite	eq
 80179a0:	2308      	moveq	r3, #8
 80179a2:	230a      	movne	r3, #10
 80179a4:	2100      	movs	r1, #0
 80179a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80179aa:	6866      	ldr	r6, [r4, #4]
 80179ac:	60a6      	str	r6, [r4, #8]
 80179ae:	2e00      	cmp	r6, #0
 80179b0:	bfa2      	ittt	ge
 80179b2:	6821      	ldrge	r1, [r4, #0]
 80179b4:	f021 0104 	bicge.w	r1, r1, #4
 80179b8:	6021      	strge	r1, [r4, #0]
 80179ba:	b90d      	cbnz	r5, 80179c0 <_printf_i+0x118>
 80179bc:	2e00      	cmp	r6, #0
 80179be:	d04d      	beq.n	8017a5c <_printf_i+0x1b4>
 80179c0:	4616      	mov	r6, r2
 80179c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80179c6:	fb03 5711 	mls	r7, r3, r1, r5
 80179ca:	5dc7      	ldrb	r7, [r0, r7]
 80179cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80179d0:	462f      	mov	r7, r5
 80179d2:	42bb      	cmp	r3, r7
 80179d4:	460d      	mov	r5, r1
 80179d6:	d9f4      	bls.n	80179c2 <_printf_i+0x11a>
 80179d8:	2b08      	cmp	r3, #8
 80179da:	d10b      	bne.n	80179f4 <_printf_i+0x14c>
 80179dc:	6823      	ldr	r3, [r4, #0]
 80179de:	07df      	lsls	r7, r3, #31
 80179e0:	d508      	bpl.n	80179f4 <_printf_i+0x14c>
 80179e2:	6923      	ldr	r3, [r4, #16]
 80179e4:	6861      	ldr	r1, [r4, #4]
 80179e6:	4299      	cmp	r1, r3
 80179e8:	bfde      	ittt	le
 80179ea:	2330      	movle	r3, #48	; 0x30
 80179ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80179f0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80179f4:	1b92      	subs	r2, r2, r6
 80179f6:	6122      	str	r2, [r4, #16]
 80179f8:	f8cd a000 	str.w	sl, [sp]
 80179fc:	464b      	mov	r3, r9
 80179fe:	aa03      	add	r2, sp, #12
 8017a00:	4621      	mov	r1, r4
 8017a02:	4640      	mov	r0, r8
 8017a04:	f7ff fee2 	bl	80177cc <_printf_common>
 8017a08:	3001      	adds	r0, #1
 8017a0a:	d14c      	bne.n	8017aa6 <_printf_i+0x1fe>
 8017a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017a10:	b004      	add	sp, #16
 8017a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017a16:	4835      	ldr	r0, [pc, #212]	; (8017aec <_printf_i+0x244>)
 8017a18:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017a1c:	6823      	ldr	r3, [r4, #0]
 8017a1e:	680e      	ldr	r6, [r1, #0]
 8017a20:	061f      	lsls	r7, r3, #24
 8017a22:	f856 5b04 	ldr.w	r5, [r6], #4
 8017a26:	600e      	str	r6, [r1, #0]
 8017a28:	d514      	bpl.n	8017a54 <_printf_i+0x1ac>
 8017a2a:	07d9      	lsls	r1, r3, #31
 8017a2c:	bf44      	itt	mi
 8017a2e:	f043 0320 	orrmi.w	r3, r3, #32
 8017a32:	6023      	strmi	r3, [r4, #0]
 8017a34:	b91d      	cbnz	r5, 8017a3e <_printf_i+0x196>
 8017a36:	6823      	ldr	r3, [r4, #0]
 8017a38:	f023 0320 	bic.w	r3, r3, #32
 8017a3c:	6023      	str	r3, [r4, #0]
 8017a3e:	2310      	movs	r3, #16
 8017a40:	e7b0      	b.n	80179a4 <_printf_i+0xfc>
 8017a42:	6823      	ldr	r3, [r4, #0]
 8017a44:	f043 0320 	orr.w	r3, r3, #32
 8017a48:	6023      	str	r3, [r4, #0]
 8017a4a:	2378      	movs	r3, #120	; 0x78
 8017a4c:	4828      	ldr	r0, [pc, #160]	; (8017af0 <_printf_i+0x248>)
 8017a4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017a52:	e7e3      	b.n	8017a1c <_printf_i+0x174>
 8017a54:	065e      	lsls	r6, r3, #25
 8017a56:	bf48      	it	mi
 8017a58:	b2ad      	uxthmi	r5, r5
 8017a5a:	e7e6      	b.n	8017a2a <_printf_i+0x182>
 8017a5c:	4616      	mov	r6, r2
 8017a5e:	e7bb      	b.n	80179d8 <_printf_i+0x130>
 8017a60:	680b      	ldr	r3, [r1, #0]
 8017a62:	6826      	ldr	r6, [r4, #0]
 8017a64:	6960      	ldr	r0, [r4, #20]
 8017a66:	1d1d      	adds	r5, r3, #4
 8017a68:	600d      	str	r5, [r1, #0]
 8017a6a:	0635      	lsls	r5, r6, #24
 8017a6c:	681b      	ldr	r3, [r3, #0]
 8017a6e:	d501      	bpl.n	8017a74 <_printf_i+0x1cc>
 8017a70:	6018      	str	r0, [r3, #0]
 8017a72:	e002      	b.n	8017a7a <_printf_i+0x1d2>
 8017a74:	0671      	lsls	r1, r6, #25
 8017a76:	d5fb      	bpl.n	8017a70 <_printf_i+0x1c8>
 8017a78:	8018      	strh	r0, [r3, #0]
 8017a7a:	2300      	movs	r3, #0
 8017a7c:	6123      	str	r3, [r4, #16]
 8017a7e:	4616      	mov	r6, r2
 8017a80:	e7ba      	b.n	80179f8 <_printf_i+0x150>
 8017a82:	680b      	ldr	r3, [r1, #0]
 8017a84:	1d1a      	adds	r2, r3, #4
 8017a86:	600a      	str	r2, [r1, #0]
 8017a88:	681e      	ldr	r6, [r3, #0]
 8017a8a:	6862      	ldr	r2, [r4, #4]
 8017a8c:	2100      	movs	r1, #0
 8017a8e:	4630      	mov	r0, r6
 8017a90:	f7e8 fba6 	bl	80001e0 <memchr>
 8017a94:	b108      	cbz	r0, 8017a9a <_printf_i+0x1f2>
 8017a96:	1b80      	subs	r0, r0, r6
 8017a98:	6060      	str	r0, [r4, #4]
 8017a9a:	6863      	ldr	r3, [r4, #4]
 8017a9c:	6123      	str	r3, [r4, #16]
 8017a9e:	2300      	movs	r3, #0
 8017aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017aa4:	e7a8      	b.n	80179f8 <_printf_i+0x150>
 8017aa6:	6923      	ldr	r3, [r4, #16]
 8017aa8:	4632      	mov	r2, r6
 8017aaa:	4649      	mov	r1, r9
 8017aac:	4640      	mov	r0, r8
 8017aae:	47d0      	blx	sl
 8017ab0:	3001      	adds	r0, #1
 8017ab2:	d0ab      	beq.n	8017a0c <_printf_i+0x164>
 8017ab4:	6823      	ldr	r3, [r4, #0]
 8017ab6:	079b      	lsls	r3, r3, #30
 8017ab8:	d413      	bmi.n	8017ae2 <_printf_i+0x23a>
 8017aba:	68e0      	ldr	r0, [r4, #12]
 8017abc:	9b03      	ldr	r3, [sp, #12]
 8017abe:	4298      	cmp	r0, r3
 8017ac0:	bfb8      	it	lt
 8017ac2:	4618      	movlt	r0, r3
 8017ac4:	e7a4      	b.n	8017a10 <_printf_i+0x168>
 8017ac6:	2301      	movs	r3, #1
 8017ac8:	4632      	mov	r2, r6
 8017aca:	4649      	mov	r1, r9
 8017acc:	4640      	mov	r0, r8
 8017ace:	47d0      	blx	sl
 8017ad0:	3001      	adds	r0, #1
 8017ad2:	d09b      	beq.n	8017a0c <_printf_i+0x164>
 8017ad4:	3501      	adds	r5, #1
 8017ad6:	68e3      	ldr	r3, [r4, #12]
 8017ad8:	9903      	ldr	r1, [sp, #12]
 8017ada:	1a5b      	subs	r3, r3, r1
 8017adc:	42ab      	cmp	r3, r5
 8017ade:	dcf2      	bgt.n	8017ac6 <_printf_i+0x21e>
 8017ae0:	e7eb      	b.n	8017aba <_printf_i+0x212>
 8017ae2:	2500      	movs	r5, #0
 8017ae4:	f104 0619 	add.w	r6, r4, #25
 8017ae8:	e7f5      	b.n	8017ad6 <_printf_i+0x22e>
 8017aea:	bf00      	nop
 8017aec:	0801e77e 	.word	0x0801e77e
 8017af0:	0801e78f 	.word	0x0801e78f

08017af4 <cleanup_glue>:
 8017af4:	b538      	push	{r3, r4, r5, lr}
 8017af6:	460c      	mov	r4, r1
 8017af8:	6809      	ldr	r1, [r1, #0]
 8017afa:	4605      	mov	r5, r0
 8017afc:	b109      	cbz	r1, 8017b02 <cleanup_glue+0xe>
 8017afe:	f7ff fff9 	bl	8017af4 <cleanup_glue>
 8017b02:	4621      	mov	r1, r4
 8017b04:	4628      	mov	r0, r5
 8017b06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017b0a:	f7ff badf 	b.w	80170cc <_free_r>
	...

08017b10 <_reclaim_reent>:
 8017b10:	4b2c      	ldr	r3, [pc, #176]	; (8017bc4 <_reclaim_reent+0xb4>)
 8017b12:	681b      	ldr	r3, [r3, #0]
 8017b14:	4283      	cmp	r3, r0
 8017b16:	b570      	push	{r4, r5, r6, lr}
 8017b18:	4604      	mov	r4, r0
 8017b1a:	d051      	beq.n	8017bc0 <_reclaim_reent+0xb0>
 8017b1c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8017b1e:	b143      	cbz	r3, 8017b32 <_reclaim_reent+0x22>
 8017b20:	68db      	ldr	r3, [r3, #12]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d14a      	bne.n	8017bbc <_reclaim_reent+0xac>
 8017b26:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017b28:	6819      	ldr	r1, [r3, #0]
 8017b2a:	b111      	cbz	r1, 8017b32 <_reclaim_reent+0x22>
 8017b2c:	4620      	mov	r0, r4
 8017b2e:	f7ff facd 	bl	80170cc <_free_r>
 8017b32:	6961      	ldr	r1, [r4, #20]
 8017b34:	b111      	cbz	r1, 8017b3c <_reclaim_reent+0x2c>
 8017b36:	4620      	mov	r0, r4
 8017b38:	f7ff fac8 	bl	80170cc <_free_r>
 8017b3c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8017b3e:	b111      	cbz	r1, 8017b46 <_reclaim_reent+0x36>
 8017b40:	4620      	mov	r0, r4
 8017b42:	f7ff fac3 	bl	80170cc <_free_r>
 8017b46:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017b48:	b111      	cbz	r1, 8017b50 <_reclaim_reent+0x40>
 8017b4a:	4620      	mov	r0, r4
 8017b4c:	f7ff fabe 	bl	80170cc <_free_r>
 8017b50:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8017b52:	b111      	cbz	r1, 8017b5a <_reclaim_reent+0x4a>
 8017b54:	4620      	mov	r0, r4
 8017b56:	f7ff fab9 	bl	80170cc <_free_r>
 8017b5a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8017b5c:	b111      	cbz	r1, 8017b64 <_reclaim_reent+0x54>
 8017b5e:	4620      	mov	r0, r4
 8017b60:	f7ff fab4 	bl	80170cc <_free_r>
 8017b64:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8017b66:	b111      	cbz	r1, 8017b6e <_reclaim_reent+0x5e>
 8017b68:	4620      	mov	r0, r4
 8017b6a:	f7ff faaf 	bl	80170cc <_free_r>
 8017b6e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017b70:	b111      	cbz	r1, 8017b78 <_reclaim_reent+0x68>
 8017b72:	4620      	mov	r0, r4
 8017b74:	f7ff faaa 	bl	80170cc <_free_r>
 8017b78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017b7a:	b111      	cbz	r1, 8017b82 <_reclaim_reent+0x72>
 8017b7c:	4620      	mov	r0, r4
 8017b7e:	f7ff faa5 	bl	80170cc <_free_r>
 8017b82:	69a3      	ldr	r3, [r4, #24]
 8017b84:	b1e3      	cbz	r3, 8017bc0 <_reclaim_reent+0xb0>
 8017b86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017b88:	4620      	mov	r0, r4
 8017b8a:	4798      	blx	r3
 8017b8c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017b8e:	b1b9      	cbz	r1, 8017bc0 <_reclaim_reent+0xb0>
 8017b90:	4620      	mov	r0, r4
 8017b92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017b96:	f7ff bfad 	b.w	8017af4 <cleanup_glue>
 8017b9a:	5949      	ldr	r1, [r1, r5]
 8017b9c:	b941      	cbnz	r1, 8017bb0 <_reclaim_reent+0xa0>
 8017b9e:	3504      	adds	r5, #4
 8017ba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017ba2:	2d80      	cmp	r5, #128	; 0x80
 8017ba4:	68d9      	ldr	r1, [r3, #12]
 8017ba6:	d1f8      	bne.n	8017b9a <_reclaim_reent+0x8a>
 8017ba8:	4620      	mov	r0, r4
 8017baa:	f7ff fa8f 	bl	80170cc <_free_r>
 8017bae:	e7ba      	b.n	8017b26 <_reclaim_reent+0x16>
 8017bb0:	680e      	ldr	r6, [r1, #0]
 8017bb2:	4620      	mov	r0, r4
 8017bb4:	f7ff fa8a 	bl	80170cc <_free_r>
 8017bb8:	4631      	mov	r1, r6
 8017bba:	e7ef      	b.n	8017b9c <_reclaim_reent+0x8c>
 8017bbc:	2500      	movs	r5, #0
 8017bbe:	e7ef      	b.n	8017ba0 <_reclaim_reent+0x90>
 8017bc0:	bd70      	pop	{r4, r5, r6, pc}
 8017bc2:	bf00      	nop
 8017bc4:	200001c8 	.word	0x200001c8

08017bc8 <_sbrk_r>:
 8017bc8:	b538      	push	{r3, r4, r5, lr}
 8017bca:	4d06      	ldr	r5, [pc, #24]	; (8017be4 <_sbrk_r+0x1c>)
 8017bcc:	2300      	movs	r3, #0
 8017bce:	4604      	mov	r4, r0
 8017bd0:	4608      	mov	r0, r1
 8017bd2:	602b      	str	r3, [r5, #0]
 8017bd4:	f7ed fafa 	bl	80051cc <_sbrk>
 8017bd8:	1c43      	adds	r3, r0, #1
 8017bda:	d102      	bne.n	8017be2 <_sbrk_r+0x1a>
 8017bdc:	682b      	ldr	r3, [r5, #0]
 8017bde:	b103      	cbz	r3, 8017be2 <_sbrk_r+0x1a>
 8017be0:	6023      	str	r3, [r4, #0]
 8017be2:	bd38      	pop	{r3, r4, r5, pc}
 8017be4:	2001f05c 	.word	0x2001f05c

08017be8 <siprintf>:
 8017be8:	b40e      	push	{r1, r2, r3}
 8017bea:	b500      	push	{lr}
 8017bec:	b09c      	sub	sp, #112	; 0x70
 8017bee:	ab1d      	add	r3, sp, #116	; 0x74
 8017bf0:	9002      	str	r0, [sp, #8]
 8017bf2:	9006      	str	r0, [sp, #24]
 8017bf4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8017bf8:	4809      	ldr	r0, [pc, #36]	; (8017c20 <siprintf+0x38>)
 8017bfa:	9107      	str	r1, [sp, #28]
 8017bfc:	9104      	str	r1, [sp, #16]
 8017bfe:	4909      	ldr	r1, [pc, #36]	; (8017c24 <siprintf+0x3c>)
 8017c00:	f853 2b04 	ldr.w	r2, [r3], #4
 8017c04:	9105      	str	r1, [sp, #20]
 8017c06:	6800      	ldr	r0, [r0, #0]
 8017c08:	9301      	str	r3, [sp, #4]
 8017c0a:	a902      	add	r1, sp, #8
 8017c0c:	f001 fc10 	bl	8019430 <_svfiprintf_r>
 8017c10:	9b02      	ldr	r3, [sp, #8]
 8017c12:	2200      	movs	r2, #0
 8017c14:	701a      	strb	r2, [r3, #0]
 8017c16:	b01c      	add	sp, #112	; 0x70
 8017c18:	f85d eb04 	ldr.w	lr, [sp], #4
 8017c1c:	b003      	add	sp, #12
 8017c1e:	4770      	bx	lr
 8017c20:	200001c8 	.word	0x200001c8
 8017c24:	ffff0208 	.word	0xffff0208

08017c28 <__sread>:
 8017c28:	b510      	push	{r4, lr}
 8017c2a:	460c      	mov	r4, r1
 8017c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c30:	f001 fcfe 	bl	8019630 <_read_r>
 8017c34:	2800      	cmp	r0, #0
 8017c36:	bfab      	itete	ge
 8017c38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017c3a:	89a3      	ldrhlt	r3, [r4, #12]
 8017c3c:	181b      	addge	r3, r3, r0
 8017c3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8017c42:	bfac      	ite	ge
 8017c44:	6563      	strge	r3, [r4, #84]	; 0x54
 8017c46:	81a3      	strhlt	r3, [r4, #12]
 8017c48:	bd10      	pop	{r4, pc}

08017c4a <__swrite>:
 8017c4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017c4e:	461f      	mov	r7, r3
 8017c50:	898b      	ldrh	r3, [r1, #12]
 8017c52:	05db      	lsls	r3, r3, #23
 8017c54:	4605      	mov	r5, r0
 8017c56:	460c      	mov	r4, r1
 8017c58:	4616      	mov	r6, r2
 8017c5a:	d505      	bpl.n	8017c68 <__swrite+0x1e>
 8017c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c60:	2302      	movs	r3, #2
 8017c62:	2200      	movs	r2, #0
 8017c64:	f000 ffde 	bl	8018c24 <_lseek_r>
 8017c68:	89a3      	ldrh	r3, [r4, #12]
 8017c6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017c6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8017c72:	81a3      	strh	r3, [r4, #12]
 8017c74:	4632      	mov	r2, r6
 8017c76:	463b      	mov	r3, r7
 8017c78:	4628      	mov	r0, r5
 8017c7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017c7e:	f000 b86f 	b.w	8017d60 <_write_r>

08017c82 <__sseek>:
 8017c82:	b510      	push	{r4, lr}
 8017c84:	460c      	mov	r4, r1
 8017c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017c8a:	f000 ffcb 	bl	8018c24 <_lseek_r>
 8017c8e:	1c43      	adds	r3, r0, #1
 8017c90:	89a3      	ldrh	r3, [r4, #12]
 8017c92:	bf15      	itete	ne
 8017c94:	6560      	strne	r0, [r4, #84]	; 0x54
 8017c96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8017c9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8017c9e:	81a3      	strheq	r3, [r4, #12]
 8017ca0:	bf18      	it	ne
 8017ca2:	81a3      	strhne	r3, [r4, #12]
 8017ca4:	bd10      	pop	{r4, pc}

08017ca6 <__sclose>:
 8017ca6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017caa:	f000 b86b 	b.w	8017d84 <_close_r>

08017cae <strcat>:
 8017cae:	b510      	push	{r4, lr}
 8017cb0:	4602      	mov	r2, r0
 8017cb2:	7814      	ldrb	r4, [r2, #0]
 8017cb4:	4613      	mov	r3, r2
 8017cb6:	3201      	adds	r2, #1
 8017cb8:	2c00      	cmp	r4, #0
 8017cba:	d1fa      	bne.n	8017cb2 <strcat+0x4>
 8017cbc:	3b01      	subs	r3, #1
 8017cbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017cc2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017cc6:	2a00      	cmp	r2, #0
 8017cc8:	d1f9      	bne.n	8017cbe <strcat+0x10>
 8017cca:	bd10      	pop	{r4, pc}

08017ccc <strcpy>:
 8017ccc:	4603      	mov	r3, r0
 8017cce:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017cd2:	f803 2b01 	strb.w	r2, [r3], #1
 8017cd6:	2a00      	cmp	r2, #0
 8017cd8:	d1f9      	bne.n	8017cce <strcpy+0x2>
 8017cda:	4770      	bx	lr

08017cdc <__utoa>:
 8017cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017cde:	4c1f      	ldr	r4, [pc, #124]	; (8017d5c <__utoa+0x80>)
 8017ce0:	b08b      	sub	sp, #44	; 0x2c
 8017ce2:	4605      	mov	r5, r0
 8017ce4:	460b      	mov	r3, r1
 8017ce6:	466e      	mov	r6, sp
 8017ce8:	f104 0c20 	add.w	ip, r4, #32
 8017cec:	6820      	ldr	r0, [r4, #0]
 8017cee:	6861      	ldr	r1, [r4, #4]
 8017cf0:	4637      	mov	r7, r6
 8017cf2:	c703      	stmia	r7!, {r0, r1}
 8017cf4:	3408      	adds	r4, #8
 8017cf6:	4564      	cmp	r4, ip
 8017cf8:	463e      	mov	r6, r7
 8017cfa:	d1f7      	bne.n	8017cec <__utoa+0x10>
 8017cfc:	7921      	ldrb	r1, [r4, #4]
 8017cfe:	7139      	strb	r1, [r7, #4]
 8017d00:	1e91      	subs	r1, r2, #2
 8017d02:	6820      	ldr	r0, [r4, #0]
 8017d04:	6038      	str	r0, [r7, #0]
 8017d06:	2922      	cmp	r1, #34	; 0x22
 8017d08:	f04f 0100 	mov.w	r1, #0
 8017d0c:	d904      	bls.n	8017d18 <__utoa+0x3c>
 8017d0e:	7019      	strb	r1, [r3, #0]
 8017d10:	460b      	mov	r3, r1
 8017d12:	4618      	mov	r0, r3
 8017d14:	b00b      	add	sp, #44	; 0x2c
 8017d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017d18:	1e58      	subs	r0, r3, #1
 8017d1a:	4684      	mov	ip, r0
 8017d1c:	fbb5 f7f2 	udiv	r7, r5, r2
 8017d20:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8017d24:	fb02 5617 	mls	r6, r2, r7, r5
 8017d28:	4476      	add	r6, lr
 8017d2a:	460c      	mov	r4, r1
 8017d2c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8017d30:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8017d34:	462e      	mov	r6, r5
 8017d36:	42b2      	cmp	r2, r6
 8017d38:	f101 0101 	add.w	r1, r1, #1
 8017d3c:	463d      	mov	r5, r7
 8017d3e:	d9ed      	bls.n	8017d1c <__utoa+0x40>
 8017d40:	2200      	movs	r2, #0
 8017d42:	545a      	strb	r2, [r3, r1]
 8017d44:	1919      	adds	r1, r3, r4
 8017d46:	1aa5      	subs	r5, r4, r2
 8017d48:	42aa      	cmp	r2, r5
 8017d4a:	dae2      	bge.n	8017d12 <__utoa+0x36>
 8017d4c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8017d50:	780e      	ldrb	r6, [r1, #0]
 8017d52:	7006      	strb	r6, [r0, #0]
 8017d54:	3201      	adds	r2, #1
 8017d56:	f801 5901 	strb.w	r5, [r1], #-1
 8017d5a:	e7f4      	b.n	8017d46 <__utoa+0x6a>
 8017d5c:	0801e7a0 	.word	0x0801e7a0

08017d60 <_write_r>:
 8017d60:	b538      	push	{r3, r4, r5, lr}
 8017d62:	4d07      	ldr	r5, [pc, #28]	; (8017d80 <_write_r+0x20>)
 8017d64:	4604      	mov	r4, r0
 8017d66:	4608      	mov	r0, r1
 8017d68:	4611      	mov	r1, r2
 8017d6a:	2200      	movs	r2, #0
 8017d6c:	602a      	str	r2, [r5, #0]
 8017d6e:	461a      	mov	r2, r3
 8017d70:	f7ed f9db 	bl	800512a <_write>
 8017d74:	1c43      	adds	r3, r0, #1
 8017d76:	d102      	bne.n	8017d7e <_write_r+0x1e>
 8017d78:	682b      	ldr	r3, [r5, #0]
 8017d7a:	b103      	cbz	r3, 8017d7e <_write_r+0x1e>
 8017d7c:	6023      	str	r3, [r4, #0]
 8017d7e:	bd38      	pop	{r3, r4, r5, pc}
 8017d80:	2001f05c 	.word	0x2001f05c

08017d84 <_close_r>:
 8017d84:	b538      	push	{r3, r4, r5, lr}
 8017d86:	4d06      	ldr	r5, [pc, #24]	; (8017da0 <_close_r+0x1c>)
 8017d88:	2300      	movs	r3, #0
 8017d8a:	4604      	mov	r4, r0
 8017d8c:	4608      	mov	r0, r1
 8017d8e:	602b      	str	r3, [r5, #0]
 8017d90:	f7ed f9e7 	bl	8005162 <_close>
 8017d94:	1c43      	adds	r3, r0, #1
 8017d96:	d102      	bne.n	8017d9e <_close_r+0x1a>
 8017d98:	682b      	ldr	r3, [r5, #0]
 8017d9a:	b103      	cbz	r3, 8017d9e <_close_r+0x1a>
 8017d9c:	6023      	str	r3, [r4, #0]
 8017d9e:	bd38      	pop	{r3, r4, r5, pc}
 8017da0:	2001f05c 	.word	0x2001f05c

08017da4 <quorem>:
 8017da4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017da8:	6903      	ldr	r3, [r0, #16]
 8017daa:	690c      	ldr	r4, [r1, #16]
 8017dac:	42a3      	cmp	r3, r4
 8017dae:	4607      	mov	r7, r0
 8017db0:	f2c0 8081 	blt.w	8017eb6 <quorem+0x112>
 8017db4:	3c01      	subs	r4, #1
 8017db6:	f101 0814 	add.w	r8, r1, #20
 8017dba:	f100 0514 	add.w	r5, r0, #20
 8017dbe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017dc2:	9301      	str	r3, [sp, #4]
 8017dc4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8017dc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017dcc:	3301      	adds	r3, #1
 8017dce:	429a      	cmp	r2, r3
 8017dd0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8017dd4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8017dd8:	fbb2 f6f3 	udiv	r6, r2, r3
 8017ddc:	d331      	bcc.n	8017e42 <quorem+0x9e>
 8017dde:	f04f 0e00 	mov.w	lr, #0
 8017de2:	4640      	mov	r0, r8
 8017de4:	46ac      	mov	ip, r5
 8017de6:	46f2      	mov	sl, lr
 8017de8:	f850 2b04 	ldr.w	r2, [r0], #4
 8017dec:	b293      	uxth	r3, r2
 8017dee:	fb06 e303 	mla	r3, r6, r3, lr
 8017df2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8017df6:	b29b      	uxth	r3, r3
 8017df8:	ebaa 0303 	sub.w	r3, sl, r3
 8017dfc:	0c12      	lsrs	r2, r2, #16
 8017dfe:	f8dc a000 	ldr.w	sl, [ip]
 8017e02:	fb06 e202 	mla	r2, r6, r2, lr
 8017e06:	fa13 f38a 	uxtah	r3, r3, sl
 8017e0a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8017e0e:	fa1f fa82 	uxth.w	sl, r2
 8017e12:	f8dc 2000 	ldr.w	r2, [ip]
 8017e16:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8017e1a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017e1e:	b29b      	uxth	r3, r3
 8017e20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017e24:	4581      	cmp	r9, r0
 8017e26:	f84c 3b04 	str.w	r3, [ip], #4
 8017e2a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8017e2e:	d2db      	bcs.n	8017de8 <quorem+0x44>
 8017e30:	f855 300b 	ldr.w	r3, [r5, fp]
 8017e34:	b92b      	cbnz	r3, 8017e42 <quorem+0x9e>
 8017e36:	9b01      	ldr	r3, [sp, #4]
 8017e38:	3b04      	subs	r3, #4
 8017e3a:	429d      	cmp	r5, r3
 8017e3c:	461a      	mov	r2, r3
 8017e3e:	d32e      	bcc.n	8017e9e <quorem+0xfa>
 8017e40:	613c      	str	r4, [r7, #16]
 8017e42:	4638      	mov	r0, r7
 8017e44:	f001 f98a 	bl	801915c <__mcmp>
 8017e48:	2800      	cmp	r0, #0
 8017e4a:	db24      	blt.n	8017e96 <quorem+0xf2>
 8017e4c:	3601      	adds	r6, #1
 8017e4e:	4628      	mov	r0, r5
 8017e50:	f04f 0c00 	mov.w	ip, #0
 8017e54:	f858 2b04 	ldr.w	r2, [r8], #4
 8017e58:	f8d0 e000 	ldr.w	lr, [r0]
 8017e5c:	b293      	uxth	r3, r2
 8017e5e:	ebac 0303 	sub.w	r3, ip, r3
 8017e62:	0c12      	lsrs	r2, r2, #16
 8017e64:	fa13 f38e 	uxtah	r3, r3, lr
 8017e68:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8017e6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8017e70:	b29b      	uxth	r3, r3
 8017e72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8017e76:	45c1      	cmp	r9, r8
 8017e78:	f840 3b04 	str.w	r3, [r0], #4
 8017e7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8017e80:	d2e8      	bcs.n	8017e54 <quorem+0xb0>
 8017e82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8017e86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8017e8a:	b922      	cbnz	r2, 8017e96 <quorem+0xf2>
 8017e8c:	3b04      	subs	r3, #4
 8017e8e:	429d      	cmp	r5, r3
 8017e90:	461a      	mov	r2, r3
 8017e92:	d30a      	bcc.n	8017eaa <quorem+0x106>
 8017e94:	613c      	str	r4, [r7, #16]
 8017e96:	4630      	mov	r0, r6
 8017e98:	b003      	add	sp, #12
 8017e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e9e:	6812      	ldr	r2, [r2, #0]
 8017ea0:	3b04      	subs	r3, #4
 8017ea2:	2a00      	cmp	r2, #0
 8017ea4:	d1cc      	bne.n	8017e40 <quorem+0x9c>
 8017ea6:	3c01      	subs	r4, #1
 8017ea8:	e7c7      	b.n	8017e3a <quorem+0x96>
 8017eaa:	6812      	ldr	r2, [r2, #0]
 8017eac:	3b04      	subs	r3, #4
 8017eae:	2a00      	cmp	r2, #0
 8017eb0:	d1f0      	bne.n	8017e94 <quorem+0xf0>
 8017eb2:	3c01      	subs	r4, #1
 8017eb4:	e7eb      	b.n	8017e8e <quorem+0xea>
 8017eb6:	2000      	movs	r0, #0
 8017eb8:	e7ee      	b.n	8017e98 <quorem+0xf4>
 8017eba:	0000      	movs	r0, r0
 8017ebc:	0000      	movs	r0, r0
	...

08017ec0 <_dtoa_r>:
 8017ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017ec4:	ed2d 8b02 	vpush	{d8}
 8017ec8:	ec57 6b10 	vmov	r6, r7, d0
 8017ecc:	b095      	sub	sp, #84	; 0x54
 8017ece:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8017ed0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8017ed4:	9105      	str	r1, [sp, #20]
 8017ed6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8017eda:	4604      	mov	r4, r0
 8017edc:	9209      	str	r2, [sp, #36]	; 0x24
 8017ede:	930f      	str	r3, [sp, #60]	; 0x3c
 8017ee0:	b975      	cbnz	r5, 8017f00 <_dtoa_r+0x40>
 8017ee2:	2010      	movs	r0, #16
 8017ee4:	f7ff f8cc 	bl	8017080 <malloc>
 8017ee8:	4602      	mov	r2, r0
 8017eea:	6260      	str	r0, [r4, #36]	; 0x24
 8017eec:	b920      	cbnz	r0, 8017ef8 <_dtoa_r+0x38>
 8017eee:	4bb2      	ldr	r3, [pc, #712]	; (80181b8 <_dtoa_r+0x2f8>)
 8017ef0:	21ea      	movs	r1, #234	; 0xea
 8017ef2:	48b2      	ldr	r0, [pc, #712]	; (80181bc <_dtoa_r+0x2fc>)
 8017ef4:	f001 fbae 	bl	8019654 <__assert_func>
 8017ef8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8017efc:	6005      	str	r5, [r0, #0]
 8017efe:	60c5      	str	r5, [r0, #12]
 8017f00:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017f02:	6819      	ldr	r1, [r3, #0]
 8017f04:	b151      	cbz	r1, 8017f1c <_dtoa_r+0x5c>
 8017f06:	685a      	ldr	r2, [r3, #4]
 8017f08:	604a      	str	r2, [r1, #4]
 8017f0a:	2301      	movs	r3, #1
 8017f0c:	4093      	lsls	r3, r2
 8017f0e:	608b      	str	r3, [r1, #8]
 8017f10:	4620      	mov	r0, r4
 8017f12:	f000 fee5 	bl	8018ce0 <_Bfree>
 8017f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017f18:	2200      	movs	r2, #0
 8017f1a:	601a      	str	r2, [r3, #0]
 8017f1c:	1e3b      	subs	r3, r7, #0
 8017f1e:	bfb9      	ittee	lt
 8017f20:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8017f24:	9303      	strlt	r3, [sp, #12]
 8017f26:	2300      	movge	r3, #0
 8017f28:	f8c8 3000 	strge.w	r3, [r8]
 8017f2c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8017f30:	4ba3      	ldr	r3, [pc, #652]	; (80181c0 <_dtoa_r+0x300>)
 8017f32:	bfbc      	itt	lt
 8017f34:	2201      	movlt	r2, #1
 8017f36:	f8c8 2000 	strlt.w	r2, [r8]
 8017f3a:	ea33 0309 	bics.w	r3, r3, r9
 8017f3e:	d11b      	bne.n	8017f78 <_dtoa_r+0xb8>
 8017f40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017f42:	f242 730f 	movw	r3, #9999	; 0x270f
 8017f46:	6013      	str	r3, [r2, #0]
 8017f48:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8017f4c:	4333      	orrs	r3, r6
 8017f4e:	f000 857a 	beq.w	8018a46 <_dtoa_r+0xb86>
 8017f52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017f54:	b963      	cbnz	r3, 8017f70 <_dtoa_r+0xb0>
 8017f56:	4b9b      	ldr	r3, [pc, #620]	; (80181c4 <_dtoa_r+0x304>)
 8017f58:	e024      	b.n	8017fa4 <_dtoa_r+0xe4>
 8017f5a:	4b9b      	ldr	r3, [pc, #620]	; (80181c8 <_dtoa_r+0x308>)
 8017f5c:	9300      	str	r3, [sp, #0]
 8017f5e:	3308      	adds	r3, #8
 8017f60:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8017f62:	6013      	str	r3, [r2, #0]
 8017f64:	9800      	ldr	r0, [sp, #0]
 8017f66:	b015      	add	sp, #84	; 0x54
 8017f68:	ecbd 8b02 	vpop	{d8}
 8017f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f70:	4b94      	ldr	r3, [pc, #592]	; (80181c4 <_dtoa_r+0x304>)
 8017f72:	9300      	str	r3, [sp, #0]
 8017f74:	3303      	adds	r3, #3
 8017f76:	e7f3      	b.n	8017f60 <_dtoa_r+0xa0>
 8017f78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8017f7c:	2200      	movs	r2, #0
 8017f7e:	ec51 0b17 	vmov	r0, r1, d7
 8017f82:	2300      	movs	r3, #0
 8017f84:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8017f88:	f7e8 fd9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8017f8c:	4680      	mov	r8, r0
 8017f8e:	b158      	cbz	r0, 8017fa8 <_dtoa_r+0xe8>
 8017f90:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017f92:	2301      	movs	r3, #1
 8017f94:	6013      	str	r3, [r2, #0]
 8017f96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8017f98:	2b00      	cmp	r3, #0
 8017f9a:	f000 8551 	beq.w	8018a40 <_dtoa_r+0xb80>
 8017f9e:	488b      	ldr	r0, [pc, #556]	; (80181cc <_dtoa_r+0x30c>)
 8017fa0:	6018      	str	r0, [r3, #0]
 8017fa2:	1e43      	subs	r3, r0, #1
 8017fa4:	9300      	str	r3, [sp, #0]
 8017fa6:	e7dd      	b.n	8017f64 <_dtoa_r+0xa4>
 8017fa8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8017fac:	aa12      	add	r2, sp, #72	; 0x48
 8017fae:	a913      	add	r1, sp, #76	; 0x4c
 8017fb0:	4620      	mov	r0, r4
 8017fb2:	f001 f977 	bl	80192a4 <__d2b>
 8017fb6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8017fba:	4683      	mov	fp, r0
 8017fbc:	2d00      	cmp	r5, #0
 8017fbe:	d07c      	beq.n	80180ba <_dtoa_r+0x1fa>
 8017fc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017fc2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8017fc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8017fca:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 8017fce:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8017fd2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8017fd6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8017fda:	4b7d      	ldr	r3, [pc, #500]	; (80181d0 <_dtoa_r+0x310>)
 8017fdc:	2200      	movs	r2, #0
 8017fde:	4630      	mov	r0, r6
 8017fe0:	4639      	mov	r1, r7
 8017fe2:	f7e8 f951 	bl	8000288 <__aeabi_dsub>
 8017fe6:	a36e      	add	r3, pc, #440	; (adr r3, 80181a0 <_dtoa_r+0x2e0>)
 8017fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017fec:	f7e8 fb04 	bl	80005f8 <__aeabi_dmul>
 8017ff0:	a36d      	add	r3, pc, #436	; (adr r3, 80181a8 <_dtoa_r+0x2e8>)
 8017ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017ff6:	f7e8 f949 	bl	800028c <__adddf3>
 8017ffa:	4606      	mov	r6, r0
 8017ffc:	4628      	mov	r0, r5
 8017ffe:	460f      	mov	r7, r1
 8018000:	f7e8 fa90 	bl	8000524 <__aeabi_i2d>
 8018004:	a36a      	add	r3, pc, #424	; (adr r3, 80181b0 <_dtoa_r+0x2f0>)
 8018006:	e9d3 2300 	ldrd	r2, r3, [r3]
 801800a:	f7e8 faf5 	bl	80005f8 <__aeabi_dmul>
 801800e:	4602      	mov	r2, r0
 8018010:	460b      	mov	r3, r1
 8018012:	4630      	mov	r0, r6
 8018014:	4639      	mov	r1, r7
 8018016:	f7e8 f939 	bl	800028c <__adddf3>
 801801a:	4606      	mov	r6, r0
 801801c:	460f      	mov	r7, r1
 801801e:	f7e8 fd9b 	bl	8000b58 <__aeabi_d2iz>
 8018022:	2200      	movs	r2, #0
 8018024:	4682      	mov	sl, r0
 8018026:	2300      	movs	r3, #0
 8018028:	4630      	mov	r0, r6
 801802a:	4639      	mov	r1, r7
 801802c:	f7e8 fd56 	bl	8000adc <__aeabi_dcmplt>
 8018030:	b148      	cbz	r0, 8018046 <_dtoa_r+0x186>
 8018032:	4650      	mov	r0, sl
 8018034:	f7e8 fa76 	bl	8000524 <__aeabi_i2d>
 8018038:	4632      	mov	r2, r6
 801803a:	463b      	mov	r3, r7
 801803c:	f7e8 fd44 	bl	8000ac8 <__aeabi_dcmpeq>
 8018040:	b908      	cbnz	r0, 8018046 <_dtoa_r+0x186>
 8018042:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8018046:	f1ba 0f16 	cmp.w	sl, #22
 801804a:	d854      	bhi.n	80180f6 <_dtoa_r+0x236>
 801804c:	4b61      	ldr	r3, [pc, #388]	; (80181d4 <_dtoa_r+0x314>)
 801804e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018052:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018056:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801805a:	f7e8 fd3f 	bl	8000adc <__aeabi_dcmplt>
 801805e:	2800      	cmp	r0, #0
 8018060:	d04b      	beq.n	80180fa <_dtoa_r+0x23a>
 8018062:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8018066:	2300      	movs	r3, #0
 8018068:	930e      	str	r3, [sp, #56]	; 0x38
 801806a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801806c:	1b5d      	subs	r5, r3, r5
 801806e:	1e6b      	subs	r3, r5, #1
 8018070:	9304      	str	r3, [sp, #16]
 8018072:	bf43      	ittte	mi
 8018074:	2300      	movmi	r3, #0
 8018076:	f1c5 0801 	rsbmi	r8, r5, #1
 801807a:	9304      	strmi	r3, [sp, #16]
 801807c:	f04f 0800 	movpl.w	r8, #0
 8018080:	f1ba 0f00 	cmp.w	sl, #0
 8018084:	db3b      	blt.n	80180fe <_dtoa_r+0x23e>
 8018086:	9b04      	ldr	r3, [sp, #16]
 8018088:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801808c:	4453      	add	r3, sl
 801808e:	9304      	str	r3, [sp, #16]
 8018090:	2300      	movs	r3, #0
 8018092:	9306      	str	r3, [sp, #24]
 8018094:	9b05      	ldr	r3, [sp, #20]
 8018096:	2b09      	cmp	r3, #9
 8018098:	d869      	bhi.n	801816e <_dtoa_r+0x2ae>
 801809a:	2b05      	cmp	r3, #5
 801809c:	bfc4      	itt	gt
 801809e:	3b04      	subgt	r3, #4
 80180a0:	9305      	strgt	r3, [sp, #20]
 80180a2:	9b05      	ldr	r3, [sp, #20]
 80180a4:	f1a3 0302 	sub.w	r3, r3, #2
 80180a8:	bfcc      	ite	gt
 80180aa:	2500      	movgt	r5, #0
 80180ac:	2501      	movle	r5, #1
 80180ae:	2b03      	cmp	r3, #3
 80180b0:	d869      	bhi.n	8018186 <_dtoa_r+0x2c6>
 80180b2:	e8df f003 	tbb	[pc, r3]
 80180b6:	4e2c      	.short	0x4e2c
 80180b8:	5a4c      	.short	0x5a4c
 80180ba:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80180be:	441d      	add	r5, r3
 80180c0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80180c4:	2b20      	cmp	r3, #32
 80180c6:	bfc1      	itttt	gt
 80180c8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80180cc:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80180d0:	fa09 f303 	lslgt.w	r3, r9, r3
 80180d4:	fa26 f000 	lsrgt.w	r0, r6, r0
 80180d8:	bfda      	itte	le
 80180da:	f1c3 0320 	rsble	r3, r3, #32
 80180de:	fa06 f003 	lslle.w	r0, r6, r3
 80180e2:	4318      	orrgt	r0, r3
 80180e4:	f7e8 fa0e 	bl	8000504 <__aeabi_ui2d>
 80180e8:	2301      	movs	r3, #1
 80180ea:	4606      	mov	r6, r0
 80180ec:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80180f0:	3d01      	subs	r5, #1
 80180f2:	9310      	str	r3, [sp, #64]	; 0x40
 80180f4:	e771      	b.n	8017fda <_dtoa_r+0x11a>
 80180f6:	2301      	movs	r3, #1
 80180f8:	e7b6      	b.n	8018068 <_dtoa_r+0x1a8>
 80180fa:	900e      	str	r0, [sp, #56]	; 0x38
 80180fc:	e7b5      	b.n	801806a <_dtoa_r+0x1aa>
 80180fe:	f1ca 0300 	rsb	r3, sl, #0
 8018102:	9306      	str	r3, [sp, #24]
 8018104:	2300      	movs	r3, #0
 8018106:	eba8 080a 	sub.w	r8, r8, sl
 801810a:	930d      	str	r3, [sp, #52]	; 0x34
 801810c:	e7c2      	b.n	8018094 <_dtoa_r+0x1d4>
 801810e:	2300      	movs	r3, #0
 8018110:	9308      	str	r3, [sp, #32]
 8018112:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018114:	2b00      	cmp	r3, #0
 8018116:	dc39      	bgt.n	801818c <_dtoa_r+0x2cc>
 8018118:	f04f 0901 	mov.w	r9, #1
 801811c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018120:	464b      	mov	r3, r9
 8018122:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8018126:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8018128:	2200      	movs	r2, #0
 801812a:	6042      	str	r2, [r0, #4]
 801812c:	2204      	movs	r2, #4
 801812e:	f102 0614 	add.w	r6, r2, #20
 8018132:	429e      	cmp	r6, r3
 8018134:	6841      	ldr	r1, [r0, #4]
 8018136:	d92f      	bls.n	8018198 <_dtoa_r+0x2d8>
 8018138:	4620      	mov	r0, r4
 801813a:	f000 fd91 	bl	8018c60 <_Balloc>
 801813e:	9000      	str	r0, [sp, #0]
 8018140:	2800      	cmp	r0, #0
 8018142:	d14b      	bne.n	80181dc <_dtoa_r+0x31c>
 8018144:	4b24      	ldr	r3, [pc, #144]	; (80181d8 <_dtoa_r+0x318>)
 8018146:	4602      	mov	r2, r0
 8018148:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 801814c:	e6d1      	b.n	8017ef2 <_dtoa_r+0x32>
 801814e:	2301      	movs	r3, #1
 8018150:	e7de      	b.n	8018110 <_dtoa_r+0x250>
 8018152:	2300      	movs	r3, #0
 8018154:	9308      	str	r3, [sp, #32]
 8018156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018158:	eb0a 0903 	add.w	r9, sl, r3
 801815c:	f109 0301 	add.w	r3, r9, #1
 8018160:	2b01      	cmp	r3, #1
 8018162:	9301      	str	r3, [sp, #4]
 8018164:	bfb8      	it	lt
 8018166:	2301      	movlt	r3, #1
 8018168:	e7dd      	b.n	8018126 <_dtoa_r+0x266>
 801816a:	2301      	movs	r3, #1
 801816c:	e7f2      	b.n	8018154 <_dtoa_r+0x294>
 801816e:	2501      	movs	r5, #1
 8018170:	2300      	movs	r3, #0
 8018172:	9305      	str	r3, [sp, #20]
 8018174:	9508      	str	r5, [sp, #32]
 8018176:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 801817a:	2200      	movs	r2, #0
 801817c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018180:	2312      	movs	r3, #18
 8018182:	9209      	str	r2, [sp, #36]	; 0x24
 8018184:	e7cf      	b.n	8018126 <_dtoa_r+0x266>
 8018186:	2301      	movs	r3, #1
 8018188:	9308      	str	r3, [sp, #32]
 801818a:	e7f4      	b.n	8018176 <_dtoa_r+0x2b6>
 801818c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018190:	f8cd 9004 	str.w	r9, [sp, #4]
 8018194:	464b      	mov	r3, r9
 8018196:	e7c6      	b.n	8018126 <_dtoa_r+0x266>
 8018198:	3101      	adds	r1, #1
 801819a:	6041      	str	r1, [r0, #4]
 801819c:	0052      	lsls	r2, r2, #1
 801819e:	e7c6      	b.n	801812e <_dtoa_r+0x26e>
 80181a0:	636f4361 	.word	0x636f4361
 80181a4:	3fd287a7 	.word	0x3fd287a7
 80181a8:	8b60c8b3 	.word	0x8b60c8b3
 80181ac:	3fc68a28 	.word	0x3fc68a28
 80181b0:	509f79fb 	.word	0x509f79fb
 80181b4:	3fd34413 	.word	0x3fd34413
 80181b8:	0801e7d2 	.word	0x0801e7d2
 80181bc:	0801e7e9 	.word	0x0801e7e9
 80181c0:	7ff00000 	.word	0x7ff00000
 80181c4:	0801e7ce 	.word	0x0801e7ce
 80181c8:	0801e7c5 	.word	0x0801e7c5
 80181cc:	0801e77d 	.word	0x0801e77d
 80181d0:	3ff80000 	.word	0x3ff80000
 80181d4:	0801e8e8 	.word	0x0801e8e8
 80181d8:	0801e848 	.word	0x0801e848
 80181dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80181de:	9a00      	ldr	r2, [sp, #0]
 80181e0:	601a      	str	r2, [r3, #0]
 80181e2:	9b01      	ldr	r3, [sp, #4]
 80181e4:	2b0e      	cmp	r3, #14
 80181e6:	f200 80ad 	bhi.w	8018344 <_dtoa_r+0x484>
 80181ea:	2d00      	cmp	r5, #0
 80181ec:	f000 80aa 	beq.w	8018344 <_dtoa_r+0x484>
 80181f0:	f1ba 0f00 	cmp.w	sl, #0
 80181f4:	dd36      	ble.n	8018264 <_dtoa_r+0x3a4>
 80181f6:	4ac3      	ldr	r2, [pc, #780]	; (8018504 <_dtoa_r+0x644>)
 80181f8:	f00a 030f 	and.w	r3, sl, #15
 80181fc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018200:	ed93 7b00 	vldr	d7, [r3]
 8018204:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8018208:	ea4f 172a 	mov.w	r7, sl, asr #4
 801820c:	eeb0 8a47 	vmov.f32	s16, s14
 8018210:	eef0 8a67 	vmov.f32	s17, s15
 8018214:	d016      	beq.n	8018244 <_dtoa_r+0x384>
 8018216:	4bbc      	ldr	r3, [pc, #752]	; (8018508 <_dtoa_r+0x648>)
 8018218:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801821c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018220:	f7e8 fb14 	bl	800084c <__aeabi_ddiv>
 8018224:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018228:	f007 070f 	and.w	r7, r7, #15
 801822c:	2503      	movs	r5, #3
 801822e:	4eb6      	ldr	r6, [pc, #728]	; (8018508 <_dtoa_r+0x648>)
 8018230:	b957      	cbnz	r7, 8018248 <_dtoa_r+0x388>
 8018232:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018236:	ec53 2b18 	vmov	r2, r3, d8
 801823a:	f7e8 fb07 	bl	800084c <__aeabi_ddiv>
 801823e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018242:	e029      	b.n	8018298 <_dtoa_r+0x3d8>
 8018244:	2502      	movs	r5, #2
 8018246:	e7f2      	b.n	801822e <_dtoa_r+0x36e>
 8018248:	07f9      	lsls	r1, r7, #31
 801824a:	d508      	bpl.n	801825e <_dtoa_r+0x39e>
 801824c:	ec51 0b18 	vmov	r0, r1, d8
 8018250:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018254:	f7e8 f9d0 	bl	80005f8 <__aeabi_dmul>
 8018258:	ec41 0b18 	vmov	d8, r0, r1
 801825c:	3501      	adds	r5, #1
 801825e:	107f      	asrs	r7, r7, #1
 8018260:	3608      	adds	r6, #8
 8018262:	e7e5      	b.n	8018230 <_dtoa_r+0x370>
 8018264:	f000 80a6 	beq.w	80183b4 <_dtoa_r+0x4f4>
 8018268:	f1ca 0600 	rsb	r6, sl, #0
 801826c:	4ba5      	ldr	r3, [pc, #660]	; (8018504 <_dtoa_r+0x644>)
 801826e:	4fa6      	ldr	r7, [pc, #664]	; (8018508 <_dtoa_r+0x648>)
 8018270:	f006 020f 	and.w	r2, r6, #15
 8018274:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801827c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018280:	f7e8 f9ba 	bl	80005f8 <__aeabi_dmul>
 8018284:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018288:	1136      	asrs	r6, r6, #4
 801828a:	2300      	movs	r3, #0
 801828c:	2502      	movs	r5, #2
 801828e:	2e00      	cmp	r6, #0
 8018290:	f040 8085 	bne.w	801839e <_dtoa_r+0x4de>
 8018294:	2b00      	cmp	r3, #0
 8018296:	d1d2      	bne.n	801823e <_dtoa_r+0x37e>
 8018298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801829a:	2b00      	cmp	r3, #0
 801829c:	f000 808c 	beq.w	80183b8 <_dtoa_r+0x4f8>
 80182a0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80182a4:	4b99      	ldr	r3, [pc, #612]	; (801850c <_dtoa_r+0x64c>)
 80182a6:	2200      	movs	r2, #0
 80182a8:	4630      	mov	r0, r6
 80182aa:	4639      	mov	r1, r7
 80182ac:	f7e8 fc16 	bl	8000adc <__aeabi_dcmplt>
 80182b0:	2800      	cmp	r0, #0
 80182b2:	f000 8081 	beq.w	80183b8 <_dtoa_r+0x4f8>
 80182b6:	9b01      	ldr	r3, [sp, #4]
 80182b8:	2b00      	cmp	r3, #0
 80182ba:	d07d      	beq.n	80183b8 <_dtoa_r+0x4f8>
 80182bc:	f1b9 0f00 	cmp.w	r9, #0
 80182c0:	dd3c      	ble.n	801833c <_dtoa_r+0x47c>
 80182c2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80182c6:	9307      	str	r3, [sp, #28]
 80182c8:	2200      	movs	r2, #0
 80182ca:	4b91      	ldr	r3, [pc, #580]	; (8018510 <_dtoa_r+0x650>)
 80182cc:	4630      	mov	r0, r6
 80182ce:	4639      	mov	r1, r7
 80182d0:	f7e8 f992 	bl	80005f8 <__aeabi_dmul>
 80182d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80182d8:	3501      	adds	r5, #1
 80182da:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80182de:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80182e2:	4628      	mov	r0, r5
 80182e4:	f7e8 f91e 	bl	8000524 <__aeabi_i2d>
 80182e8:	4632      	mov	r2, r6
 80182ea:	463b      	mov	r3, r7
 80182ec:	f7e8 f984 	bl	80005f8 <__aeabi_dmul>
 80182f0:	4b88      	ldr	r3, [pc, #544]	; (8018514 <_dtoa_r+0x654>)
 80182f2:	2200      	movs	r2, #0
 80182f4:	f7e7 ffca 	bl	800028c <__adddf3>
 80182f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80182fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018300:	9303      	str	r3, [sp, #12]
 8018302:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018304:	2b00      	cmp	r3, #0
 8018306:	d15c      	bne.n	80183c2 <_dtoa_r+0x502>
 8018308:	4b83      	ldr	r3, [pc, #524]	; (8018518 <_dtoa_r+0x658>)
 801830a:	2200      	movs	r2, #0
 801830c:	4630      	mov	r0, r6
 801830e:	4639      	mov	r1, r7
 8018310:	f7e7 ffba 	bl	8000288 <__aeabi_dsub>
 8018314:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018318:	4606      	mov	r6, r0
 801831a:	460f      	mov	r7, r1
 801831c:	f7e8 fbfc 	bl	8000b18 <__aeabi_dcmpgt>
 8018320:	2800      	cmp	r0, #0
 8018322:	f040 8296 	bne.w	8018852 <_dtoa_r+0x992>
 8018326:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 801832a:	4630      	mov	r0, r6
 801832c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018330:	4639      	mov	r1, r7
 8018332:	f7e8 fbd3 	bl	8000adc <__aeabi_dcmplt>
 8018336:	2800      	cmp	r0, #0
 8018338:	f040 8288 	bne.w	801884c <_dtoa_r+0x98c>
 801833c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018340:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018344:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018346:	2b00      	cmp	r3, #0
 8018348:	f2c0 8158 	blt.w	80185fc <_dtoa_r+0x73c>
 801834c:	f1ba 0f0e 	cmp.w	sl, #14
 8018350:	f300 8154 	bgt.w	80185fc <_dtoa_r+0x73c>
 8018354:	4b6b      	ldr	r3, [pc, #428]	; (8018504 <_dtoa_r+0x644>)
 8018356:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 801835a:	e9d3 8900 	ldrd	r8, r9, [r3]
 801835e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018360:	2b00      	cmp	r3, #0
 8018362:	f280 80e3 	bge.w	801852c <_dtoa_r+0x66c>
 8018366:	9b01      	ldr	r3, [sp, #4]
 8018368:	2b00      	cmp	r3, #0
 801836a:	f300 80df 	bgt.w	801852c <_dtoa_r+0x66c>
 801836e:	f040 826d 	bne.w	801884c <_dtoa_r+0x98c>
 8018372:	4b69      	ldr	r3, [pc, #420]	; (8018518 <_dtoa_r+0x658>)
 8018374:	2200      	movs	r2, #0
 8018376:	4640      	mov	r0, r8
 8018378:	4649      	mov	r1, r9
 801837a:	f7e8 f93d 	bl	80005f8 <__aeabi_dmul>
 801837e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018382:	f7e8 fbbf 	bl	8000b04 <__aeabi_dcmpge>
 8018386:	9e01      	ldr	r6, [sp, #4]
 8018388:	4637      	mov	r7, r6
 801838a:	2800      	cmp	r0, #0
 801838c:	f040 8243 	bne.w	8018816 <_dtoa_r+0x956>
 8018390:	9d00      	ldr	r5, [sp, #0]
 8018392:	2331      	movs	r3, #49	; 0x31
 8018394:	f805 3b01 	strb.w	r3, [r5], #1
 8018398:	f10a 0a01 	add.w	sl, sl, #1
 801839c:	e23f      	b.n	801881e <_dtoa_r+0x95e>
 801839e:	07f2      	lsls	r2, r6, #31
 80183a0:	d505      	bpl.n	80183ae <_dtoa_r+0x4ee>
 80183a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80183a6:	f7e8 f927 	bl	80005f8 <__aeabi_dmul>
 80183aa:	3501      	adds	r5, #1
 80183ac:	2301      	movs	r3, #1
 80183ae:	1076      	asrs	r6, r6, #1
 80183b0:	3708      	adds	r7, #8
 80183b2:	e76c      	b.n	801828e <_dtoa_r+0x3ce>
 80183b4:	2502      	movs	r5, #2
 80183b6:	e76f      	b.n	8018298 <_dtoa_r+0x3d8>
 80183b8:	9b01      	ldr	r3, [sp, #4]
 80183ba:	f8cd a01c 	str.w	sl, [sp, #28]
 80183be:	930c      	str	r3, [sp, #48]	; 0x30
 80183c0:	e78d      	b.n	80182de <_dtoa_r+0x41e>
 80183c2:	9900      	ldr	r1, [sp, #0]
 80183c4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80183c6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80183c8:	4b4e      	ldr	r3, [pc, #312]	; (8018504 <_dtoa_r+0x644>)
 80183ca:	ed9d 7b02 	vldr	d7, [sp, #8]
 80183ce:	4401      	add	r1, r0
 80183d0:	9102      	str	r1, [sp, #8]
 80183d2:	9908      	ldr	r1, [sp, #32]
 80183d4:	eeb0 8a47 	vmov.f32	s16, s14
 80183d8:	eef0 8a67 	vmov.f32	s17, s15
 80183dc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80183e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80183e4:	2900      	cmp	r1, #0
 80183e6:	d045      	beq.n	8018474 <_dtoa_r+0x5b4>
 80183e8:	494c      	ldr	r1, [pc, #304]	; (801851c <_dtoa_r+0x65c>)
 80183ea:	2000      	movs	r0, #0
 80183ec:	f7e8 fa2e 	bl	800084c <__aeabi_ddiv>
 80183f0:	ec53 2b18 	vmov	r2, r3, d8
 80183f4:	f7e7 ff48 	bl	8000288 <__aeabi_dsub>
 80183f8:	9d00      	ldr	r5, [sp, #0]
 80183fa:	ec41 0b18 	vmov	d8, r0, r1
 80183fe:	4639      	mov	r1, r7
 8018400:	4630      	mov	r0, r6
 8018402:	f7e8 fba9 	bl	8000b58 <__aeabi_d2iz>
 8018406:	900c      	str	r0, [sp, #48]	; 0x30
 8018408:	f7e8 f88c 	bl	8000524 <__aeabi_i2d>
 801840c:	4602      	mov	r2, r0
 801840e:	460b      	mov	r3, r1
 8018410:	4630      	mov	r0, r6
 8018412:	4639      	mov	r1, r7
 8018414:	f7e7 ff38 	bl	8000288 <__aeabi_dsub>
 8018418:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801841a:	3330      	adds	r3, #48	; 0x30
 801841c:	f805 3b01 	strb.w	r3, [r5], #1
 8018420:	ec53 2b18 	vmov	r2, r3, d8
 8018424:	4606      	mov	r6, r0
 8018426:	460f      	mov	r7, r1
 8018428:	f7e8 fb58 	bl	8000adc <__aeabi_dcmplt>
 801842c:	2800      	cmp	r0, #0
 801842e:	d165      	bne.n	80184fc <_dtoa_r+0x63c>
 8018430:	4632      	mov	r2, r6
 8018432:	463b      	mov	r3, r7
 8018434:	4935      	ldr	r1, [pc, #212]	; (801850c <_dtoa_r+0x64c>)
 8018436:	2000      	movs	r0, #0
 8018438:	f7e7 ff26 	bl	8000288 <__aeabi_dsub>
 801843c:	ec53 2b18 	vmov	r2, r3, d8
 8018440:	f7e8 fb4c 	bl	8000adc <__aeabi_dcmplt>
 8018444:	2800      	cmp	r0, #0
 8018446:	f040 80b9 	bne.w	80185bc <_dtoa_r+0x6fc>
 801844a:	9b02      	ldr	r3, [sp, #8]
 801844c:	429d      	cmp	r5, r3
 801844e:	f43f af75 	beq.w	801833c <_dtoa_r+0x47c>
 8018452:	4b2f      	ldr	r3, [pc, #188]	; (8018510 <_dtoa_r+0x650>)
 8018454:	ec51 0b18 	vmov	r0, r1, d8
 8018458:	2200      	movs	r2, #0
 801845a:	f7e8 f8cd 	bl	80005f8 <__aeabi_dmul>
 801845e:	4b2c      	ldr	r3, [pc, #176]	; (8018510 <_dtoa_r+0x650>)
 8018460:	ec41 0b18 	vmov	d8, r0, r1
 8018464:	2200      	movs	r2, #0
 8018466:	4630      	mov	r0, r6
 8018468:	4639      	mov	r1, r7
 801846a:	f7e8 f8c5 	bl	80005f8 <__aeabi_dmul>
 801846e:	4606      	mov	r6, r0
 8018470:	460f      	mov	r7, r1
 8018472:	e7c4      	b.n	80183fe <_dtoa_r+0x53e>
 8018474:	ec51 0b17 	vmov	r0, r1, d7
 8018478:	f7e8 f8be 	bl	80005f8 <__aeabi_dmul>
 801847c:	9b02      	ldr	r3, [sp, #8]
 801847e:	9d00      	ldr	r5, [sp, #0]
 8018480:	930c      	str	r3, [sp, #48]	; 0x30
 8018482:	ec41 0b18 	vmov	d8, r0, r1
 8018486:	4639      	mov	r1, r7
 8018488:	4630      	mov	r0, r6
 801848a:	f7e8 fb65 	bl	8000b58 <__aeabi_d2iz>
 801848e:	9011      	str	r0, [sp, #68]	; 0x44
 8018490:	f7e8 f848 	bl	8000524 <__aeabi_i2d>
 8018494:	4602      	mov	r2, r0
 8018496:	460b      	mov	r3, r1
 8018498:	4630      	mov	r0, r6
 801849a:	4639      	mov	r1, r7
 801849c:	f7e7 fef4 	bl	8000288 <__aeabi_dsub>
 80184a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80184a2:	3330      	adds	r3, #48	; 0x30
 80184a4:	f805 3b01 	strb.w	r3, [r5], #1
 80184a8:	9b02      	ldr	r3, [sp, #8]
 80184aa:	429d      	cmp	r5, r3
 80184ac:	4606      	mov	r6, r0
 80184ae:	460f      	mov	r7, r1
 80184b0:	f04f 0200 	mov.w	r2, #0
 80184b4:	d134      	bne.n	8018520 <_dtoa_r+0x660>
 80184b6:	4b19      	ldr	r3, [pc, #100]	; (801851c <_dtoa_r+0x65c>)
 80184b8:	ec51 0b18 	vmov	r0, r1, d8
 80184bc:	f7e7 fee6 	bl	800028c <__adddf3>
 80184c0:	4602      	mov	r2, r0
 80184c2:	460b      	mov	r3, r1
 80184c4:	4630      	mov	r0, r6
 80184c6:	4639      	mov	r1, r7
 80184c8:	f7e8 fb26 	bl	8000b18 <__aeabi_dcmpgt>
 80184cc:	2800      	cmp	r0, #0
 80184ce:	d175      	bne.n	80185bc <_dtoa_r+0x6fc>
 80184d0:	ec53 2b18 	vmov	r2, r3, d8
 80184d4:	4911      	ldr	r1, [pc, #68]	; (801851c <_dtoa_r+0x65c>)
 80184d6:	2000      	movs	r0, #0
 80184d8:	f7e7 fed6 	bl	8000288 <__aeabi_dsub>
 80184dc:	4602      	mov	r2, r0
 80184de:	460b      	mov	r3, r1
 80184e0:	4630      	mov	r0, r6
 80184e2:	4639      	mov	r1, r7
 80184e4:	f7e8 fafa 	bl	8000adc <__aeabi_dcmplt>
 80184e8:	2800      	cmp	r0, #0
 80184ea:	f43f af27 	beq.w	801833c <_dtoa_r+0x47c>
 80184ee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80184f0:	1e6b      	subs	r3, r5, #1
 80184f2:	930c      	str	r3, [sp, #48]	; 0x30
 80184f4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80184f8:	2b30      	cmp	r3, #48	; 0x30
 80184fa:	d0f8      	beq.n	80184ee <_dtoa_r+0x62e>
 80184fc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018500:	e04a      	b.n	8018598 <_dtoa_r+0x6d8>
 8018502:	bf00      	nop
 8018504:	0801e8e8 	.word	0x0801e8e8
 8018508:	0801e8c0 	.word	0x0801e8c0
 801850c:	3ff00000 	.word	0x3ff00000
 8018510:	40240000 	.word	0x40240000
 8018514:	401c0000 	.word	0x401c0000
 8018518:	40140000 	.word	0x40140000
 801851c:	3fe00000 	.word	0x3fe00000
 8018520:	4baf      	ldr	r3, [pc, #700]	; (80187e0 <_dtoa_r+0x920>)
 8018522:	f7e8 f869 	bl	80005f8 <__aeabi_dmul>
 8018526:	4606      	mov	r6, r0
 8018528:	460f      	mov	r7, r1
 801852a:	e7ac      	b.n	8018486 <_dtoa_r+0x5c6>
 801852c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018530:	9d00      	ldr	r5, [sp, #0]
 8018532:	4642      	mov	r2, r8
 8018534:	464b      	mov	r3, r9
 8018536:	4630      	mov	r0, r6
 8018538:	4639      	mov	r1, r7
 801853a:	f7e8 f987 	bl	800084c <__aeabi_ddiv>
 801853e:	f7e8 fb0b 	bl	8000b58 <__aeabi_d2iz>
 8018542:	9002      	str	r0, [sp, #8]
 8018544:	f7e7 ffee 	bl	8000524 <__aeabi_i2d>
 8018548:	4642      	mov	r2, r8
 801854a:	464b      	mov	r3, r9
 801854c:	f7e8 f854 	bl	80005f8 <__aeabi_dmul>
 8018550:	4602      	mov	r2, r0
 8018552:	460b      	mov	r3, r1
 8018554:	4630      	mov	r0, r6
 8018556:	4639      	mov	r1, r7
 8018558:	f7e7 fe96 	bl	8000288 <__aeabi_dsub>
 801855c:	9e02      	ldr	r6, [sp, #8]
 801855e:	9f01      	ldr	r7, [sp, #4]
 8018560:	3630      	adds	r6, #48	; 0x30
 8018562:	f805 6b01 	strb.w	r6, [r5], #1
 8018566:	9e00      	ldr	r6, [sp, #0]
 8018568:	1bae      	subs	r6, r5, r6
 801856a:	42b7      	cmp	r7, r6
 801856c:	4602      	mov	r2, r0
 801856e:	460b      	mov	r3, r1
 8018570:	d137      	bne.n	80185e2 <_dtoa_r+0x722>
 8018572:	f7e7 fe8b 	bl	800028c <__adddf3>
 8018576:	4642      	mov	r2, r8
 8018578:	464b      	mov	r3, r9
 801857a:	4606      	mov	r6, r0
 801857c:	460f      	mov	r7, r1
 801857e:	f7e8 facb 	bl	8000b18 <__aeabi_dcmpgt>
 8018582:	b9c8      	cbnz	r0, 80185b8 <_dtoa_r+0x6f8>
 8018584:	4642      	mov	r2, r8
 8018586:	464b      	mov	r3, r9
 8018588:	4630      	mov	r0, r6
 801858a:	4639      	mov	r1, r7
 801858c:	f7e8 fa9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8018590:	b110      	cbz	r0, 8018598 <_dtoa_r+0x6d8>
 8018592:	9b02      	ldr	r3, [sp, #8]
 8018594:	07d9      	lsls	r1, r3, #31
 8018596:	d40f      	bmi.n	80185b8 <_dtoa_r+0x6f8>
 8018598:	4620      	mov	r0, r4
 801859a:	4659      	mov	r1, fp
 801859c:	f000 fba0 	bl	8018ce0 <_Bfree>
 80185a0:	2300      	movs	r3, #0
 80185a2:	702b      	strb	r3, [r5, #0]
 80185a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80185a6:	f10a 0001 	add.w	r0, sl, #1
 80185aa:	6018      	str	r0, [r3, #0]
 80185ac:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80185ae:	2b00      	cmp	r3, #0
 80185b0:	f43f acd8 	beq.w	8017f64 <_dtoa_r+0xa4>
 80185b4:	601d      	str	r5, [r3, #0]
 80185b6:	e4d5      	b.n	8017f64 <_dtoa_r+0xa4>
 80185b8:	f8cd a01c 	str.w	sl, [sp, #28]
 80185bc:	462b      	mov	r3, r5
 80185be:	461d      	mov	r5, r3
 80185c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80185c4:	2a39      	cmp	r2, #57	; 0x39
 80185c6:	d108      	bne.n	80185da <_dtoa_r+0x71a>
 80185c8:	9a00      	ldr	r2, [sp, #0]
 80185ca:	429a      	cmp	r2, r3
 80185cc:	d1f7      	bne.n	80185be <_dtoa_r+0x6fe>
 80185ce:	9a07      	ldr	r2, [sp, #28]
 80185d0:	9900      	ldr	r1, [sp, #0]
 80185d2:	3201      	adds	r2, #1
 80185d4:	9207      	str	r2, [sp, #28]
 80185d6:	2230      	movs	r2, #48	; 0x30
 80185d8:	700a      	strb	r2, [r1, #0]
 80185da:	781a      	ldrb	r2, [r3, #0]
 80185dc:	3201      	adds	r2, #1
 80185de:	701a      	strb	r2, [r3, #0]
 80185e0:	e78c      	b.n	80184fc <_dtoa_r+0x63c>
 80185e2:	4b7f      	ldr	r3, [pc, #508]	; (80187e0 <_dtoa_r+0x920>)
 80185e4:	2200      	movs	r2, #0
 80185e6:	f7e8 f807 	bl	80005f8 <__aeabi_dmul>
 80185ea:	2200      	movs	r2, #0
 80185ec:	2300      	movs	r3, #0
 80185ee:	4606      	mov	r6, r0
 80185f0:	460f      	mov	r7, r1
 80185f2:	f7e8 fa69 	bl	8000ac8 <__aeabi_dcmpeq>
 80185f6:	2800      	cmp	r0, #0
 80185f8:	d09b      	beq.n	8018532 <_dtoa_r+0x672>
 80185fa:	e7cd      	b.n	8018598 <_dtoa_r+0x6d8>
 80185fc:	9a08      	ldr	r2, [sp, #32]
 80185fe:	2a00      	cmp	r2, #0
 8018600:	f000 80c4 	beq.w	801878c <_dtoa_r+0x8cc>
 8018604:	9a05      	ldr	r2, [sp, #20]
 8018606:	2a01      	cmp	r2, #1
 8018608:	f300 80a8 	bgt.w	801875c <_dtoa_r+0x89c>
 801860c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801860e:	2a00      	cmp	r2, #0
 8018610:	f000 80a0 	beq.w	8018754 <_dtoa_r+0x894>
 8018614:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018618:	9e06      	ldr	r6, [sp, #24]
 801861a:	4645      	mov	r5, r8
 801861c:	9a04      	ldr	r2, [sp, #16]
 801861e:	2101      	movs	r1, #1
 8018620:	441a      	add	r2, r3
 8018622:	4620      	mov	r0, r4
 8018624:	4498      	add	r8, r3
 8018626:	9204      	str	r2, [sp, #16]
 8018628:	f000 fc16 	bl	8018e58 <__i2b>
 801862c:	4607      	mov	r7, r0
 801862e:	2d00      	cmp	r5, #0
 8018630:	dd0b      	ble.n	801864a <_dtoa_r+0x78a>
 8018632:	9b04      	ldr	r3, [sp, #16]
 8018634:	2b00      	cmp	r3, #0
 8018636:	dd08      	ble.n	801864a <_dtoa_r+0x78a>
 8018638:	42ab      	cmp	r3, r5
 801863a:	9a04      	ldr	r2, [sp, #16]
 801863c:	bfa8      	it	ge
 801863e:	462b      	movge	r3, r5
 8018640:	eba8 0803 	sub.w	r8, r8, r3
 8018644:	1aed      	subs	r5, r5, r3
 8018646:	1ad3      	subs	r3, r2, r3
 8018648:	9304      	str	r3, [sp, #16]
 801864a:	9b06      	ldr	r3, [sp, #24]
 801864c:	b1fb      	cbz	r3, 801868e <_dtoa_r+0x7ce>
 801864e:	9b08      	ldr	r3, [sp, #32]
 8018650:	2b00      	cmp	r3, #0
 8018652:	f000 809f 	beq.w	8018794 <_dtoa_r+0x8d4>
 8018656:	2e00      	cmp	r6, #0
 8018658:	dd11      	ble.n	801867e <_dtoa_r+0x7be>
 801865a:	4639      	mov	r1, r7
 801865c:	4632      	mov	r2, r6
 801865e:	4620      	mov	r0, r4
 8018660:	f000 fcb6 	bl	8018fd0 <__pow5mult>
 8018664:	465a      	mov	r2, fp
 8018666:	4601      	mov	r1, r0
 8018668:	4607      	mov	r7, r0
 801866a:	4620      	mov	r0, r4
 801866c:	f000 fc0a 	bl	8018e84 <__multiply>
 8018670:	4659      	mov	r1, fp
 8018672:	9007      	str	r0, [sp, #28]
 8018674:	4620      	mov	r0, r4
 8018676:	f000 fb33 	bl	8018ce0 <_Bfree>
 801867a:	9b07      	ldr	r3, [sp, #28]
 801867c:	469b      	mov	fp, r3
 801867e:	9b06      	ldr	r3, [sp, #24]
 8018680:	1b9a      	subs	r2, r3, r6
 8018682:	d004      	beq.n	801868e <_dtoa_r+0x7ce>
 8018684:	4659      	mov	r1, fp
 8018686:	4620      	mov	r0, r4
 8018688:	f000 fca2 	bl	8018fd0 <__pow5mult>
 801868c:	4683      	mov	fp, r0
 801868e:	2101      	movs	r1, #1
 8018690:	4620      	mov	r0, r4
 8018692:	f000 fbe1 	bl	8018e58 <__i2b>
 8018696:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018698:	2b00      	cmp	r3, #0
 801869a:	4606      	mov	r6, r0
 801869c:	dd7c      	ble.n	8018798 <_dtoa_r+0x8d8>
 801869e:	461a      	mov	r2, r3
 80186a0:	4601      	mov	r1, r0
 80186a2:	4620      	mov	r0, r4
 80186a4:	f000 fc94 	bl	8018fd0 <__pow5mult>
 80186a8:	9b05      	ldr	r3, [sp, #20]
 80186aa:	2b01      	cmp	r3, #1
 80186ac:	4606      	mov	r6, r0
 80186ae:	dd76      	ble.n	801879e <_dtoa_r+0x8de>
 80186b0:	2300      	movs	r3, #0
 80186b2:	9306      	str	r3, [sp, #24]
 80186b4:	6933      	ldr	r3, [r6, #16]
 80186b6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80186ba:	6918      	ldr	r0, [r3, #16]
 80186bc:	f000 fb7c 	bl	8018db8 <__hi0bits>
 80186c0:	f1c0 0020 	rsb	r0, r0, #32
 80186c4:	9b04      	ldr	r3, [sp, #16]
 80186c6:	4418      	add	r0, r3
 80186c8:	f010 001f 	ands.w	r0, r0, #31
 80186cc:	f000 8086 	beq.w	80187dc <_dtoa_r+0x91c>
 80186d0:	f1c0 0320 	rsb	r3, r0, #32
 80186d4:	2b04      	cmp	r3, #4
 80186d6:	dd7f      	ble.n	80187d8 <_dtoa_r+0x918>
 80186d8:	f1c0 001c 	rsb	r0, r0, #28
 80186dc:	9b04      	ldr	r3, [sp, #16]
 80186de:	4403      	add	r3, r0
 80186e0:	4480      	add	r8, r0
 80186e2:	4405      	add	r5, r0
 80186e4:	9304      	str	r3, [sp, #16]
 80186e6:	f1b8 0f00 	cmp.w	r8, #0
 80186ea:	dd05      	ble.n	80186f8 <_dtoa_r+0x838>
 80186ec:	4659      	mov	r1, fp
 80186ee:	4642      	mov	r2, r8
 80186f0:	4620      	mov	r0, r4
 80186f2:	f000 fcc7 	bl	8019084 <__lshift>
 80186f6:	4683      	mov	fp, r0
 80186f8:	9b04      	ldr	r3, [sp, #16]
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	dd05      	ble.n	801870a <_dtoa_r+0x84a>
 80186fe:	4631      	mov	r1, r6
 8018700:	461a      	mov	r2, r3
 8018702:	4620      	mov	r0, r4
 8018704:	f000 fcbe 	bl	8019084 <__lshift>
 8018708:	4606      	mov	r6, r0
 801870a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801870c:	2b00      	cmp	r3, #0
 801870e:	d069      	beq.n	80187e4 <_dtoa_r+0x924>
 8018710:	4631      	mov	r1, r6
 8018712:	4658      	mov	r0, fp
 8018714:	f000 fd22 	bl	801915c <__mcmp>
 8018718:	2800      	cmp	r0, #0
 801871a:	da63      	bge.n	80187e4 <_dtoa_r+0x924>
 801871c:	2300      	movs	r3, #0
 801871e:	4659      	mov	r1, fp
 8018720:	220a      	movs	r2, #10
 8018722:	4620      	mov	r0, r4
 8018724:	f000 fafe 	bl	8018d24 <__multadd>
 8018728:	9b08      	ldr	r3, [sp, #32]
 801872a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 801872e:	4683      	mov	fp, r0
 8018730:	2b00      	cmp	r3, #0
 8018732:	f000 818f 	beq.w	8018a54 <_dtoa_r+0xb94>
 8018736:	4639      	mov	r1, r7
 8018738:	2300      	movs	r3, #0
 801873a:	220a      	movs	r2, #10
 801873c:	4620      	mov	r0, r4
 801873e:	f000 faf1 	bl	8018d24 <__multadd>
 8018742:	f1b9 0f00 	cmp.w	r9, #0
 8018746:	4607      	mov	r7, r0
 8018748:	f300 808e 	bgt.w	8018868 <_dtoa_r+0x9a8>
 801874c:	9b05      	ldr	r3, [sp, #20]
 801874e:	2b02      	cmp	r3, #2
 8018750:	dc50      	bgt.n	80187f4 <_dtoa_r+0x934>
 8018752:	e089      	b.n	8018868 <_dtoa_r+0x9a8>
 8018754:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8018756:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801875a:	e75d      	b.n	8018618 <_dtoa_r+0x758>
 801875c:	9b01      	ldr	r3, [sp, #4]
 801875e:	1e5e      	subs	r6, r3, #1
 8018760:	9b06      	ldr	r3, [sp, #24]
 8018762:	42b3      	cmp	r3, r6
 8018764:	bfbf      	itttt	lt
 8018766:	9b06      	ldrlt	r3, [sp, #24]
 8018768:	9606      	strlt	r6, [sp, #24]
 801876a:	1af2      	sublt	r2, r6, r3
 801876c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801876e:	bfb6      	itet	lt
 8018770:	189b      	addlt	r3, r3, r2
 8018772:	1b9e      	subge	r6, r3, r6
 8018774:	930d      	strlt	r3, [sp, #52]	; 0x34
 8018776:	9b01      	ldr	r3, [sp, #4]
 8018778:	bfb8      	it	lt
 801877a:	2600      	movlt	r6, #0
 801877c:	2b00      	cmp	r3, #0
 801877e:	bfb5      	itete	lt
 8018780:	eba8 0503 	sublt.w	r5, r8, r3
 8018784:	9b01      	ldrge	r3, [sp, #4]
 8018786:	2300      	movlt	r3, #0
 8018788:	4645      	movge	r5, r8
 801878a:	e747      	b.n	801861c <_dtoa_r+0x75c>
 801878c:	9e06      	ldr	r6, [sp, #24]
 801878e:	9f08      	ldr	r7, [sp, #32]
 8018790:	4645      	mov	r5, r8
 8018792:	e74c      	b.n	801862e <_dtoa_r+0x76e>
 8018794:	9a06      	ldr	r2, [sp, #24]
 8018796:	e775      	b.n	8018684 <_dtoa_r+0x7c4>
 8018798:	9b05      	ldr	r3, [sp, #20]
 801879a:	2b01      	cmp	r3, #1
 801879c:	dc18      	bgt.n	80187d0 <_dtoa_r+0x910>
 801879e:	9b02      	ldr	r3, [sp, #8]
 80187a0:	b9b3      	cbnz	r3, 80187d0 <_dtoa_r+0x910>
 80187a2:	9b03      	ldr	r3, [sp, #12]
 80187a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80187a8:	b9a3      	cbnz	r3, 80187d4 <_dtoa_r+0x914>
 80187aa:	9b03      	ldr	r3, [sp, #12]
 80187ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80187b0:	0d1b      	lsrs	r3, r3, #20
 80187b2:	051b      	lsls	r3, r3, #20
 80187b4:	b12b      	cbz	r3, 80187c2 <_dtoa_r+0x902>
 80187b6:	9b04      	ldr	r3, [sp, #16]
 80187b8:	3301      	adds	r3, #1
 80187ba:	9304      	str	r3, [sp, #16]
 80187bc:	f108 0801 	add.w	r8, r8, #1
 80187c0:	2301      	movs	r3, #1
 80187c2:	9306      	str	r3, [sp, #24]
 80187c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80187c6:	2b00      	cmp	r3, #0
 80187c8:	f47f af74 	bne.w	80186b4 <_dtoa_r+0x7f4>
 80187cc:	2001      	movs	r0, #1
 80187ce:	e779      	b.n	80186c4 <_dtoa_r+0x804>
 80187d0:	2300      	movs	r3, #0
 80187d2:	e7f6      	b.n	80187c2 <_dtoa_r+0x902>
 80187d4:	9b02      	ldr	r3, [sp, #8]
 80187d6:	e7f4      	b.n	80187c2 <_dtoa_r+0x902>
 80187d8:	d085      	beq.n	80186e6 <_dtoa_r+0x826>
 80187da:	4618      	mov	r0, r3
 80187dc:	301c      	adds	r0, #28
 80187de:	e77d      	b.n	80186dc <_dtoa_r+0x81c>
 80187e0:	40240000 	.word	0x40240000
 80187e4:	9b01      	ldr	r3, [sp, #4]
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	dc38      	bgt.n	801885c <_dtoa_r+0x99c>
 80187ea:	9b05      	ldr	r3, [sp, #20]
 80187ec:	2b02      	cmp	r3, #2
 80187ee:	dd35      	ble.n	801885c <_dtoa_r+0x99c>
 80187f0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80187f4:	f1b9 0f00 	cmp.w	r9, #0
 80187f8:	d10d      	bne.n	8018816 <_dtoa_r+0x956>
 80187fa:	4631      	mov	r1, r6
 80187fc:	464b      	mov	r3, r9
 80187fe:	2205      	movs	r2, #5
 8018800:	4620      	mov	r0, r4
 8018802:	f000 fa8f 	bl	8018d24 <__multadd>
 8018806:	4601      	mov	r1, r0
 8018808:	4606      	mov	r6, r0
 801880a:	4658      	mov	r0, fp
 801880c:	f000 fca6 	bl	801915c <__mcmp>
 8018810:	2800      	cmp	r0, #0
 8018812:	f73f adbd 	bgt.w	8018390 <_dtoa_r+0x4d0>
 8018816:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018818:	9d00      	ldr	r5, [sp, #0]
 801881a:	ea6f 0a03 	mvn.w	sl, r3
 801881e:	f04f 0800 	mov.w	r8, #0
 8018822:	4631      	mov	r1, r6
 8018824:	4620      	mov	r0, r4
 8018826:	f000 fa5b 	bl	8018ce0 <_Bfree>
 801882a:	2f00      	cmp	r7, #0
 801882c:	f43f aeb4 	beq.w	8018598 <_dtoa_r+0x6d8>
 8018830:	f1b8 0f00 	cmp.w	r8, #0
 8018834:	d005      	beq.n	8018842 <_dtoa_r+0x982>
 8018836:	45b8      	cmp	r8, r7
 8018838:	d003      	beq.n	8018842 <_dtoa_r+0x982>
 801883a:	4641      	mov	r1, r8
 801883c:	4620      	mov	r0, r4
 801883e:	f000 fa4f 	bl	8018ce0 <_Bfree>
 8018842:	4639      	mov	r1, r7
 8018844:	4620      	mov	r0, r4
 8018846:	f000 fa4b 	bl	8018ce0 <_Bfree>
 801884a:	e6a5      	b.n	8018598 <_dtoa_r+0x6d8>
 801884c:	2600      	movs	r6, #0
 801884e:	4637      	mov	r7, r6
 8018850:	e7e1      	b.n	8018816 <_dtoa_r+0x956>
 8018852:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018854:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018858:	4637      	mov	r7, r6
 801885a:	e599      	b.n	8018390 <_dtoa_r+0x4d0>
 801885c:	9b08      	ldr	r3, [sp, #32]
 801885e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8018862:	2b00      	cmp	r3, #0
 8018864:	f000 80fd 	beq.w	8018a62 <_dtoa_r+0xba2>
 8018868:	2d00      	cmp	r5, #0
 801886a:	dd05      	ble.n	8018878 <_dtoa_r+0x9b8>
 801886c:	4639      	mov	r1, r7
 801886e:	462a      	mov	r2, r5
 8018870:	4620      	mov	r0, r4
 8018872:	f000 fc07 	bl	8019084 <__lshift>
 8018876:	4607      	mov	r7, r0
 8018878:	9b06      	ldr	r3, [sp, #24]
 801887a:	2b00      	cmp	r3, #0
 801887c:	d05c      	beq.n	8018938 <_dtoa_r+0xa78>
 801887e:	6879      	ldr	r1, [r7, #4]
 8018880:	4620      	mov	r0, r4
 8018882:	f000 f9ed 	bl	8018c60 <_Balloc>
 8018886:	4605      	mov	r5, r0
 8018888:	b928      	cbnz	r0, 8018896 <_dtoa_r+0x9d6>
 801888a:	4b80      	ldr	r3, [pc, #512]	; (8018a8c <_dtoa_r+0xbcc>)
 801888c:	4602      	mov	r2, r0
 801888e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8018892:	f7ff bb2e 	b.w	8017ef2 <_dtoa_r+0x32>
 8018896:	693a      	ldr	r2, [r7, #16]
 8018898:	3202      	adds	r2, #2
 801889a:	0092      	lsls	r2, r2, #2
 801889c:	f107 010c 	add.w	r1, r7, #12
 80188a0:	300c      	adds	r0, #12
 80188a2:	f7fe fbfd 	bl	80170a0 <memcpy>
 80188a6:	2201      	movs	r2, #1
 80188a8:	4629      	mov	r1, r5
 80188aa:	4620      	mov	r0, r4
 80188ac:	f000 fbea 	bl	8019084 <__lshift>
 80188b0:	9b00      	ldr	r3, [sp, #0]
 80188b2:	3301      	adds	r3, #1
 80188b4:	9301      	str	r3, [sp, #4]
 80188b6:	9b00      	ldr	r3, [sp, #0]
 80188b8:	444b      	add	r3, r9
 80188ba:	9307      	str	r3, [sp, #28]
 80188bc:	9b02      	ldr	r3, [sp, #8]
 80188be:	f003 0301 	and.w	r3, r3, #1
 80188c2:	46b8      	mov	r8, r7
 80188c4:	9306      	str	r3, [sp, #24]
 80188c6:	4607      	mov	r7, r0
 80188c8:	9b01      	ldr	r3, [sp, #4]
 80188ca:	4631      	mov	r1, r6
 80188cc:	3b01      	subs	r3, #1
 80188ce:	4658      	mov	r0, fp
 80188d0:	9302      	str	r3, [sp, #8]
 80188d2:	f7ff fa67 	bl	8017da4 <quorem>
 80188d6:	4603      	mov	r3, r0
 80188d8:	3330      	adds	r3, #48	; 0x30
 80188da:	9004      	str	r0, [sp, #16]
 80188dc:	4641      	mov	r1, r8
 80188de:	4658      	mov	r0, fp
 80188e0:	9308      	str	r3, [sp, #32]
 80188e2:	f000 fc3b 	bl	801915c <__mcmp>
 80188e6:	463a      	mov	r2, r7
 80188e8:	4681      	mov	r9, r0
 80188ea:	4631      	mov	r1, r6
 80188ec:	4620      	mov	r0, r4
 80188ee:	f000 fc51 	bl	8019194 <__mdiff>
 80188f2:	68c2      	ldr	r2, [r0, #12]
 80188f4:	9b08      	ldr	r3, [sp, #32]
 80188f6:	4605      	mov	r5, r0
 80188f8:	bb02      	cbnz	r2, 801893c <_dtoa_r+0xa7c>
 80188fa:	4601      	mov	r1, r0
 80188fc:	4658      	mov	r0, fp
 80188fe:	f000 fc2d 	bl	801915c <__mcmp>
 8018902:	9b08      	ldr	r3, [sp, #32]
 8018904:	4602      	mov	r2, r0
 8018906:	4629      	mov	r1, r5
 8018908:	4620      	mov	r0, r4
 801890a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801890e:	f000 f9e7 	bl	8018ce0 <_Bfree>
 8018912:	9b05      	ldr	r3, [sp, #20]
 8018914:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018916:	9d01      	ldr	r5, [sp, #4]
 8018918:	ea43 0102 	orr.w	r1, r3, r2
 801891c:	9b06      	ldr	r3, [sp, #24]
 801891e:	430b      	orrs	r3, r1
 8018920:	9b08      	ldr	r3, [sp, #32]
 8018922:	d10d      	bne.n	8018940 <_dtoa_r+0xa80>
 8018924:	2b39      	cmp	r3, #57	; 0x39
 8018926:	d029      	beq.n	801897c <_dtoa_r+0xabc>
 8018928:	f1b9 0f00 	cmp.w	r9, #0
 801892c:	dd01      	ble.n	8018932 <_dtoa_r+0xa72>
 801892e:	9b04      	ldr	r3, [sp, #16]
 8018930:	3331      	adds	r3, #49	; 0x31
 8018932:	9a02      	ldr	r2, [sp, #8]
 8018934:	7013      	strb	r3, [r2, #0]
 8018936:	e774      	b.n	8018822 <_dtoa_r+0x962>
 8018938:	4638      	mov	r0, r7
 801893a:	e7b9      	b.n	80188b0 <_dtoa_r+0x9f0>
 801893c:	2201      	movs	r2, #1
 801893e:	e7e2      	b.n	8018906 <_dtoa_r+0xa46>
 8018940:	f1b9 0f00 	cmp.w	r9, #0
 8018944:	db06      	blt.n	8018954 <_dtoa_r+0xa94>
 8018946:	9905      	ldr	r1, [sp, #20]
 8018948:	ea41 0909 	orr.w	r9, r1, r9
 801894c:	9906      	ldr	r1, [sp, #24]
 801894e:	ea59 0101 	orrs.w	r1, r9, r1
 8018952:	d120      	bne.n	8018996 <_dtoa_r+0xad6>
 8018954:	2a00      	cmp	r2, #0
 8018956:	ddec      	ble.n	8018932 <_dtoa_r+0xa72>
 8018958:	4659      	mov	r1, fp
 801895a:	2201      	movs	r2, #1
 801895c:	4620      	mov	r0, r4
 801895e:	9301      	str	r3, [sp, #4]
 8018960:	f000 fb90 	bl	8019084 <__lshift>
 8018964:	4631      	mov	r1, r6
 8018966:	4683      	mov	fp, r0
 8018968:	f000 fbf8 	bl	801915c <__mcmp>
 801896c:	2800      	cmp	r0, #0
 801896e:	9b01      	ldr	r3, [sp, #4]
 8018970:	dc02      	bgt.n	8018978 <_dtoa_r+0xab8>
 8018972:	d1de      	bne.n	8018932 <_dtoa_r+0xa72>
 8018974:	07da      	lsls	r2, r3, #31
 8018976:	d5dc      	bpl.n	8018932 <_dtoa_r+0xa72>
 8018978:	2b39      	cmp	r3, #57	; 0x39
 801897a:	d1d8      	bne.n	801892e <_dtoa_r+0xa6e>
 801897c:	9a02      	ldr	r2, [sp, #8]
 801897e:	2339      	movs	r3, #57	; 0x39
 8018980:	7013      	strb	r3, [r2, #0]
 8018982:	462b      	mov	r3, r5
 8018984:	461d      	mov	r5, r3
 8018986:	3b01      	subs	r3, #1
 8018988:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801898c:	2a39      	cmp	r2, #57	; 0x39
 801898e:	d050      	beq.n	8018a32 <_dtoa_r+0xb72>
 8018990:	3201      	adds	r2, #1
 8018992:	701a      	strb	r2, [r3, #0]
 8018994:	e745      	b.n	8018822 <_dtoa_r+0x962>
 8018996:	2a00      	cmp	r2, #0
 8018998:	dd03      	ble.n	80189a2 <_dtoa_r+0xae2>
 801899a:	2b39      	cmp	r3, #57	; 0x39
 801899c:	d0ee      	beq.n	801897c <_dtoa_r+0xabc>
 801899e:	3301      	adds	r3, #1
 80189a0:	e7c7      	b.n	8018932 <_dtoa_r+0xa72>
 80189a2:	9a01      	ldr	r2, [sp, #4]
 80189a4:	9907      	ldr	r1, [sp, #28]
 80189a6:	f802 3c01 	strb.w	r3, [r2, #-1]
 80189aa:	428a      	cmp	r2, r1
 80189ac:	d02a      	beq.n	8018a04 <_dtoa_r+0xb44>
 80189ae:	4659      	mov	r1, fp
 80189b0:	2300      	movs	r3, #0
 80189b2:	220a      	movs	r2, #10
 80189b4:	4620      	mov	r0, r4
 80189b6:	f000 f9b5 	bl	8018d24 <__multadd>
 80189ba:	45b8      	cmp	r8, r7
 80189bc:	4683      	mov	fp, r0
 80189be:	f04f 0300 	mov.w	r3, #0
 80189c2:	f04f 020a 	mov.w	r2, #10
 80189c6:	4641      	mov	r1, r8
 80189c8:	4620      	mov	r0, r4
 80189ca:	d107      	bne.n	80189dc <_dtoa_r+0xb1c>
 80189cc:	f000 f9aa 	bl	8018d24 <__multadd>
 80189d0:	4680      	mov	r8, r0
 80189d2:	4607      	mov	r7, r0
 80189d4:	9b01      	ldr	r3, [sp, #4]
 80189d6:	3301      	adds	r3, #1
 80189d8:	9301      	str	r3, [sp, #4]
 80189da:	e775      	b.n	80188c8 <_dtoa_r+0xa08>
 80189dc:	f000 f9a2 	bl	8018d24 <__multadd>
 80189e0:	4639      	mov	r1, r7
 80189e2:	4680      	mov	r8, r0
 80189e4:	2300      	movs	r3, #0
 80189e6:	220a      	movs	r2, #10
 80189e8:	4620      	mov	r0, r4
 80189ea:	f000 f99b 	bl	8018d24 <__multadd>
 80189ee:	4607      	mov	r7, r0
 80189f0:	e7f0      	b.n	80189d4 <_dtoa_r+0xb14>
 80189f2:	f1b9 0f00 	cmp.w	r9, #0
 80189f6:	9a00      	ldr	r2, [sp, #0]
 80189f8:	bfcc      	ite	gt
 80189fa:	464d      	movgt	r5, r9
 80189fc:	2501      	movle	r5, #1
 80189fe:	4415      	add	r5, r2
 8018a00:	f04f 0800 	mov.w	r8, #0
 8018a04:	4659      	mov	r1, fp
 8018a06:	2201      	movs	r2, #1
 8018a08:	4620      	mov	r0, r4
 8018a0a:	9301      	str	r3, [sp, #4]
 8018a0c:	f000 fb3a 	bl	8019084 <__lshift>
 8018a10:	4631      	mov	r1, r6
 8018a12:	4683      	mov	fp, r0
 8018a14:	f000 fba2 	bl	801915c <__mcmp>
 8018a18:	2800      	cmp	r0, #0
 8018a1a:	dcb2      	bgt.n	8018982 <_dtoa_r+0xac2>
 8018a1c:	d102      	bne.n	8018a24 <_dtoa_r+0xb64>
 8018a1e:	9b01      	ldr	r3, [sp, #4]
 8018a20:	07db      	lsls	r3, r3, #31
 8018a22:	d4ae      	bmi.n	8018982 <_dtoa_r+0xac2>
 8018a24:	462b      	mov	r3, r5
 8018a26:	461d      	mov	r5, r3
 8018a28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018a2c:	2a30      	cmp	r2, #48	; 0x30
 8018a2e:	d0fa      	beq.n	8018a26 <_dtoa_r+0xb66>
 8018a30:	e6f7      	b.n	8018822 <_dtoa_r+0x962>
 8018a32:	9a00      	ldr	r2, [sp, #0]
 8018a34:	429a      	cmp	r2, r3
 8018a36:	d1a5      	bne.n	8018984 <_dtoa_r+0xac4>
 8018a38:	f10a 0a01 	add.w	sl, sl, #1
 8018a3c:	2331      	movs	r3, #49	; 0x31
 8018a3e:	e779      	b.n	8018934 <_dtoa_r+0xa74>
 8018a40:	4b13      	ldr	r3, [pc, #76]	; (8018a90 <_dtoa_r+0xbd0>)
 8018a42:	f7ff baaf 	b.w	8017fa4 <_dtoa_r+0xe4>
 8018a46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018a48:	2b00      	cmp	r3, #0
 8018a4a:	f47f aa86 	bne.w	8017f5a <_dtoa_r+0x9a>
 8018a4e:	4b11      	ldr	r3, [pc, #68]	; (8018a94 <_dtoa_r+0xbd4>)
 8018a50:	f7ff baa8 	b.w	8017fa4 <_dtoa_r+0xe4>
 8018a54:	f1b9 0f00 	cmp.w	r9, #0
 8018a58:	dc03      	bgt.n	8018a62 <_dtoa_r+0xba2>
 8018a5a:	9b05      	ldr	r3, [sp, #20]
 8018a5c:	2b02      	cmp	r3, #2
 8018a5e:	f73f aec9 	bgt.w	80187f4 <_dtoa_r+0x934>
 8018a62:	9d00      	ldr	r5, [sp, #0]
 8018a64:	4631      	mov	r1, r6
 8018a66:	4658      	mov	r0, fp
 8018a68:	f7ff f99c 	bl	8017da4 <quorem>
 8018a6c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8018a70:	f805 3b01 	strb.w	r3, [r5], #1
 8018a74:	9a00      	ldr	r2, [sp, #0]
 8018a76:	1aaa      	subs	r2, r5, r2
 8018a78:	4591      	cmp	r9, r2
 8018a7a:	ddba      	ble.n	80189f2 <_dtoa_r+0xb32>
 8018a7c:	4659      	mov	r1, fp
 8018a7e:	2300      	movs	r3, #0
 8018a80:	220a      	movs	r2, #10
 8018a82:	4620      	mov	r0, r4
 8018a84:	f000 f94e 	bl	8018d24 <__multadd>
 8018a88:	4683      	mov	fp, r0
 8018a8a:	e7eb      	b.n	8018a64 <_dtoa_r+0xba4>
 8018a8c:	0801e848 	.word	0x0801e848
 8018a90:	0801e77c 	.word	0x0801e77c
 8018a94:	0801e7c5 	.word	0x0801e7c5

08018a98 <__sflush_r>:
 8018a98:	898a      	ldrh	r2, [r1, #12]
 8018a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018a9e:	4605      	mov	r5, r0
 8018aa0:	0710      	lsls	r0, r2, #28
 8018aa2:	460c      	mov	r4, r1
 8018aa4:	d458      	bmi.n	8018b58 <__sflush_r+0xc0>
 8018aa6:	684b      	ldr	r3, [r1, #4]
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	dc05      	bgt.n	8018ab8 <__sflush_r+0x20>
 8018aac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	dc02      	bgt.n	8018ab8 <__sflush_r+0x20>
 8018ab2:	2000      	movs	r0, #0
 8018ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018ab8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018aba:	2e00      	cmp	r6, #0
 8018abc:	d0f9      	beq.n	8018ab2 <__sflush_r+0x1a>
 8018abe:	2300      	movs	r3, #0
 8018ac0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018ac4:	682f      	ldr	r7, [r5, #0]
 8018ac6:	602b      	str	r3, [r5, #0]
 8018ac8:	d032      	beq.n	8018b30 <__sflush_r+0x98>
 8018aca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8018acc:	89a3      	ldrh	r3, [r4, #12]
 8018ace:	075a      	lsls	r2, r3, #29
 8018ad0:	d505      	bpl.n	8018ade <__sflush_r+0x46>
 8018ad2:	6863      	ldr	r3, [r4, #4]
 8018ad4:	1ac0      	subs	r0, r0, r3
 8018ad6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8018ad8:	b10b      	cbz	r3, 8018ade <__sflush_r+0x46>
 8018ada:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8018adc:	1ac0      	subs	r0, r0, r3
 8018ade:	2300      	movs	r3, #0
 8018ae0:	4602      	mov	r2, r0
 8018ae2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018ae4:	6a21      	ldr	r1, [r4, #32]
 8018ae6:	4628      	mov	r0, r5
 8018ae8:	47b0      	blx	r6
 8018aea:	1c43      	adds	r3, r0, #1
 8018aec:	89a3      	ldrh	r3, [r4, #12]
 8018aee:	d106      	bne.n	8018afe <__sflush_r+0x66>
 8018af0:	6829      	ldr	r1, [r5, #0]
 8018af2:	291d      	cmp	r1, #29
 8018af4:	d82c      	bhi.n	8018b50 <__sflush_r+0xb8>
 8018af6:	4a2a      	ldr	r2, [pc, #168]	; (8018ba0 <__sflush_r+0x108>)
 8018af8:	40ca      	lsrs	r2, r1
 8018afa:	07d6      	lsls	r6, r2, #31
 8018afc:	d528      	bpl.n	8018b50 <__sflush_r+0xb8>
 8018afe:	2200      	movs	r2, #0
 8018b00:	6062      	str	r2, [r4, #4]
 8018b02:	04d9      	lsls	r1, r3, #19
 8018b04:	6922      	ldr	r2, [r4, #16]
 8018b06:	6022      	str	r2, [r4, #0]
 8018b08:	d504      	bpl.n	8018b14 <__sflush_r+0x7c>
 8018b0a:	1c42      	adds	r2, r0, #1
 8018b0c:	d101      	bne.n	8018b12 <__sflush_r+0x7a>
 8018b0e:	682b      	ldr	r3, [r5, #0]
 8018b10:	b903      	cbnz	r3, 8018b14 <__sflush_r+0x7c>
 8018b12:	6560      	str	r0, [r4, #84]	; 0x54
 8018b14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018b16:	602f      	str	r7, [r5, #0]
 8018b18:	2900      	cmp	r1, #0
 8018b1a:	d0ca      	beq.n	8018ab2 <__sflush_r+0x1a>
 8018b1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018b20:	4299      	cmp	r1, r3
 8018b22:	d002      	beq.n	8018b2a <__sflush_r+0x92>
 8018b24:	4628      	mov	r0, r5
 8018b26:	f7fe fad1 	bl	80170cc <_free_r>
 8018b2a:	2000      	movs	r0, #0
 8018b2c:	6360      	str	r0, [r4, #52]	; 0x34
 8018b2e:	e7c1      	b.n	8018ab4 <__sflush_r+0x1c>
 8018b30:	6a21      	ldr	r1, [r4, #32]
 8018b32:	2301      	movs	r3, #1
 8018b34:	4628      	mov	r0, r5
 8018b36:	47b0      	blx	r6
 8018b38:	1c41      	adds	r1, r0, #1
 8018b3a:	d1c7      	bne.n	8018acc <__sflush_r+0x34>
 8018b3c:	682b      	ldr	r3, [r5, #0]
 8018b3e:	2b00      	cmp	r3, #0
 8018b40:	d0c4      	beq.n	8018acc <__sflush_r+0x34>
 8018b42:	2b1d      	cmp	r3, #29
 8018b44:	d001      	beq.n	8018b4a <__sflush_r+0xb2>
 8018b46:	2b16      	cmp	r3, #22
 8018b48:	d101      	bne.n	8018b4e <__sflush_r+0xb6>
 8018b4a:	602f      	str	r7, [r5, #0]
 8018b4c:	e7b1      	b.n	8018ab2 <__sflush_r+0x1a>
 8018b4e:	89a3      	ldrh	r3, [r4, #12]
 8018b50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b54:	81a3      	strh	r3, [r4, #12]
 8018b56:	e7ad      	b.n	8018ab4 <__sflush_r+0x1c>
 8018b58:	690f      	ldr	r7, [r1, #16]
 8018b5a:	2f00      	cmp	r7, #0
 8018b5c:	d0a9      	beq.n	8018ab2 <__sflush_r+0x1a>
 8018b5e:	0793      	lsls	r3, r2, #30
 8018b60:	680e      	ldr	r6, [r1, #0]
 8018b62:	bf08      	it	eq
 8018b64:	694b      	ldreq	r3, [r1, #20]
 8018b66:	600f      	str	r7, [r1, #0]
 8018b68:	bf18      	it	ne
 8018b6a:	2300      	movne	r3, #0
 8018b6c:	eba6 0807 	sub.w	r8, r6, r7
 8018b70:	608b      	str	r3, [r1, #8]
 8018b72:	f1b8 0f00 	cmp.w	r8, #0
 8018b76:	dd9c      	ble.n	8018ab2 <__sflush_r+0x1a>
 8018b78:	6a21      	ldr	r1, [r4, #32]
 8018b7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018b7c:	4643      	mov	r3, r8
 8018b7e:	463a      	mov	r2, r7
 8018b80:	4628      	mov	r0, r5
 8018b82:	47b0      	blx	r6
 8018b84:	2800      	cmp	r0, #0
 8018b86:	dc06      	bgt.n	8018b96 <__sflush_r+0xfe>
 8018b88:	89a3      	ldrh	r3, [r4, #12]
 8018b8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b8e:	81a3      	strh	r3, [r4, #12]
 8018b90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018b94:	e78e      	b.n	8018ab4 <__sflush_r+0x1c>
 8018b96:	4407      	add	r7, r0
 8018b98:	eba8 0800 	sub.w	r8, r8, r0
 8018b9c:	e7e9      	b.n	8018b72 <__sflush_r+0xda>
 8018b9e:	bf00      	nop
 8018ba0:	20400001 	.word	0x20400001

08018ba4 <_fflush_r>:
 8018ba4:	b538      	push	{r3, r4, r5, lr}
 8018ba6:	690b      	ldr	r3, [r1, #16]
 8018ba8:	4605      	mov	r5, r0
 8018baa:	460c      	mov	r4, r1
 8018bac:	b913      	cbnz	r3, 8018bb4 <_fflush_r+0x10>
 8018bae:	2500      	movs	r5, #0
 8018bb0:	4628      	mov	r0, r5
 8018bb2:	bd38      	pop	{r3, r4, r5, pc}
 8018bb4:	b118      	cbz	r0, 8018bbe <_fflush_r+0x1a>
 8018bb6:	6983      	ldr	r3, [r0, #24]
 8018bb8:	b90b      	cbnz	r3, 8018bbe <_fflush_r+0x1a>
 8018bba:	f7fe f981 	bl	8016ec0 <__sinit>
 8018bbe:	4b14      	ldr	r3, [pc, #80]	; (8018c10 <_fflush_r+0x6c>)
 8018bc0:	429c      	cmp	r4, r3
 8018bc2:	d11b      	bne.n	8018bfc <_fflush_r+0x58>
 8018bc4:	686c      	ldr	r4, [r5, #4]
 8018bc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018bca:	2b00      	cmp	r3, #0
 8018bcc:	d0ef      	beq.n	8018bae <_fflush_r+0xa>
 8018bce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8018bd0:	07d0      	lsls	r0, r2, #31
 8018bd2:	d404      	bmi.n	8018bde <_fflush_r+0x3a>
 8018bd4:	0599      	lsls	r1, r3, #22
 8018bd6:	d402      	bmi.n	8018bde <_fflush_r+0x3a>
 8018bd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018bda:	f7fe fa4e 	bl	801707a <__retarget_lock_acquire_recursive>
 8018bde:	4628      	mov	r0, r5
 8018be0:	4621      	mov	r1, r4
 8018be2:	f7ff ff59 	bl	8018a98 <__sflush_r>
 8018be6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018be8:	07da      	lsls	r2, r3, #31
 8018bea:	4605      	mov	r5, r0
 8018bec:	d4e0      	bmi.n	8018bb0 <_fflush_r+0xc>
 8018bee:	89a3      	ldrh	r3, [r4, #12]
 8018bf0:	059b      	lsls	r3, r3, #22
 8018bf2:	d4dd      	bmi.n	8018bb0 <_fflush_r+0xc>
 8018bf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018bf6:	f7fe fa41 	bl	801707c <__retarget_lock_release_recursive>
 8018bfa:	e7d9      	b.n	8018bb0 <_fflush_r+0xc>
 8018bfc:	4b05      	ldr	r3, [pc, #20]	; (8018c14 <_fflush_r+0x70>)
 8018bfe:	429c      	cmp	r4, r3
 8018c00:	d101      	bne.n	8018c06 <_fflush_r+0x62>
 8018c02:	68ac      	ldr	r4, [r5, #8]
 8018c04:	e7df      	b.n	8018bc6 <_fflush_r+0x22>
 8018c06:	4b04      	ldr	r3, [pc, #16]	; (8018c18 <_fflush_r+0x74>)
 8018c08:	429c      	cmp	r4, r3
 8018c0a:	bf08      	it	eq
 8018c0c:	68ec      	ldreq	r4, [r5, #12]
 8018c0e:	e7da      	b.n	8018bc6 <_fflush_r+0x22>
 8018c10:	0801e728 	.word	0x0801e728
 8018c14:	0801e748 	.word	0x0801e748
 8018c18:	0801e708 	.word	0x0801e708

08018c1c <_localeconv_r>:
 8018c1c:	4800      	ldr	r0, [pc, #0]	; (8018c20 <_localeconv_r+0x4>)
 8018c1e:	4770      	bx	lr
 8018c20:	2000031c 	.word	0x2000031c

08018c24 <_lseek_r>:
 8018c24:	b538      	push	{r3, r4, r5, lr}
 8018c26:	4d07      	ldr	r5, [pc, #28]	; (8018c44 <_lseek_r+0x20>)
 8018c28:	4604      	mov	r4, r0
 8018c2a:	4608      	mov	r0, r1
 8018c2c:	4611      	mov	r1, r2
 8018c2e:	2200      	movs	r2, #0
 8018c30:	602a      	str	r2, [r5, #0]
 8018c32:	461a      	mov	r2, r3
 8018c34:	f7ec fabc 	bl	80051b0 <_lseek>
 8018c38:	1c43      	adds	r3, r0, #1
 8018c3a:	d102      	bne.n	8018c42 <_lseek_r+0x1e>
 8018c3c:	682b      	ldr	r3, [r5, #0]
 8018c3e:	b103      	cbz	r3, 8018c42 <_lseek_r+0x1e>
 8018c40:	6023      	str	r3, [r4, #0]
 8018c42:	bd38      	pop	{r3, r4, r5, pc}
 8018c44:	2001f05c 	.word	0x2001f05c

08018c48 <__malloc_lock>:
 8018c48:	4801      	ldr	r0, [pc, #4]	; (8018c50 <__malloc_lock+0x8>)
 8018c4a:	f7fe ba16 	b.w	801707a <__retarget_lock_acquire_recursive>
 8018c4e:	bf00      	nop
 8018c50:	2001f054 	.word	0x2001f054

08018c54 <__malloc_unlock>:
 8018c54:	4801      	ldr	r0, [pc, #4]	; (8018c5c <__malloc_unlock+0x8>)
 8018c56:	f7fe ba11 	b.w	801707c <__retarget_lock_release_recursive>
 8018c5a:	bf00      	nop
 8018c5c:	2001f054 	.word	0x2001f054

08018c60 <_Balloc>:
 8018c60:	b570      	push	{r4, r5, r6, lr}
 8018c62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018c64:	4604      	mov	r4, r0
 8018c66:	460d      	mov	r5, r1
 8018c68:	b976      	cbnz	r6, 8018c88 <_Balloc+0x28>
 8018c6a:	2010      	movs	r0, #16
 8018c6c:	f7fe fa08 	bl	8017080 <malloc>
 8018c70:	4602      	mov	r2, r0
 8018c72:	6260      	str	r0, [r4, #36]	; 0x24
 8018c74:	b920      	cbnz	r0, 8018c80 <_Balloc+0x20>
 8018c76:	4b18      	ldr	r3, [pc, #96]	; (8018cd8 <_Balloc+0x78>)
 8018c78:	4818      	ldr	r0, [pc, #96]	; (8018cdc <_Balloc+0x7c>)
 8018c7a:	2166      	movs	r1, #102	; 0x66
 8018c7c:	f000 fcea 	bl	8019654 <__assert_func>
 8018c80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018c84:	6006      	str	r6, [r0, #0]
 8018c86:	60c6      	str	r6, [r0, #12]
 8018c88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8018c8a:	68f3      	ldr	r3, [r6, #12]
 8018c8c:	b183      	cbz	r3, 8018cb0 <_Balloc+0x50>
 8018c8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018c90:	68db      	ldr	r3, [r3, #12]
 8018c92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8018c96:	b9b8      	cbnz	r0, 8018cc8 <_Balloc+0x68>
 8018c98:	2101      	movs	r1, #1
 8018c9a:	fa01 f605 	lsl.w	r6, r1, r5
 8018c9e:	1d72      	adds	r2, r6, #5
 8018ca0:	0092      	lsls	r2, r2, #2
 8018ca2:	4620      	mov	r0, r4
 8018ca4:	f000 fb5a 	bl	801935c <_calloc_r>
 8018ca8:	b160      	cbz	r0, 8018cc4 <_Balloc+0x64>
 8018caa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8018cae:	e00e      	b.n	8018cce <_Balloc+0x6e>
 8018cb0:	2221      	movs	r2, #33	; 0x21
 8018cb2:	2104      	movs	r1, #4
 8018cb4:	4620      	mov	r0, r4
 8018cb6:	f000 fb51 	bl	801935c <_calloc_r>
 8018cba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018cbc:	60f0      	str	r0, [r6, #12]
 8018cbe:	68db      	ldr	r3, [r3, #12]
 8018cc0:	2b00      	cmp	r3, #0
 8018cc2:	d1e4      	bne.n	8018c8e <_Balloc+0x2e>
 8018cc4:	2000      	movs	r0, #0
 8018cc6:	bd70      	pop	{r4, r5, r6, pc}
 8018cc8:	6802      	ldr	r2, [r0, #0]
 8018cca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8018cce:	2300      	movs	r3, #0
 8018cd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8018cd4:	e7f7      	b.n	8018cc6 <_Balloc+0x66>
 8018cd6:	bf00      	nop
 8018cd8:	0801e7d2 	.word	0x0801e7d2
 8018cdc:	0801e859 	.word	0x0801e859

08018ce0 <_Bfree>:
 8018ce0:	b570      	push	{r4, r5, r6, lr}
 8018ce2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8018ce4:	4605      	mov	r5, r0
 8018ce6:	460c      	mov	r4, r1
 8018ce8:	b976      	cbnz	r6, 8018d08 <_Bfree+0x28>
 8018cea:	2010      	movs	r0, #16
 8018cec:	f7fe f9c8 	bl	8017080 <malloc>
 8018cf0:	4602      	mov	r2, r0
 8018cf2:	6268      	str	r0, [r5, #36]	; 0x24
 8018cf4:	b920      	cbnz	r0, 8018d00 <_Bfree+0x20>
 8018cf6:	4b09      	ldr	r3, [pc, #36]	; (8018d1c <_Bfree+0x3c>)
 8018cf8:	4809      	ldr	r0, [pc, #36]	; (8018d20 <_Bfree+0x40>)
 8018cfa:	218a      	movs	r1, #138	; 0x8a
 8018cfc:	f000 fcaa 	bl	8019654 <__assert_func>
 8018d00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8018d04:	6006      	str	r6, [r0, #0]
 8018d06:	60c6      	str	r6, [r0, #12]
 8018d08:	b13c      	cbz	r4, 8018d1a <_Bfree+0x3a>
 8018d0a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8018d0c:	6862      	ldr	r2, [r4, #4]
 8018d0e:	68db      	ldr	r3, [r3, #12]
 8018d10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8018d14:	6021      	str	r1, [r4, #0]
 8018d16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8018d1a:	bd70      	pop	{r4, r5, r6, pc}
 8018d1c:	0801e7d2 	.word	0x0801e7d2
 8018d20:	0801e859 	.word	0x0801e859

08018d24 <__multadd>:
 8018d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d28:	690e      	ldr	r6, [r1, #16]
 8018d2a:	4607      	mov	r7, r0
 8018d2c:	4698      	mov	r8, r3
 8018d2e:	460c      	mov	r4, r1
 8018d30:	f101 0014 	add.w	r0, r1, #20
 8018d34:	2300      	movs	r3, #0
 8018d36:	6805      	ldr	r5, [r0, #0]
 8018d38:	b2a9      	uxth	r1, r5
 8018d3a:	fb02 8101 	mla	r1, r2, r1, r8
 8018d3e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8018d42:	0c2d      	lsrs	r5, r5, #16
 8018d44:	fb02 c505 	mla	r5, r2, r5, ip
 8018d48:	b289      	uxth	r1, r1
 8018d4a:	3301      	adds	r3, #1
 8018d4c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8018d50:	429e      	cmp	r6, r3
 8018d52:	f840 1b04 	str.w	r1, [r0], #4
 8018d56:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8018d5a:	dcec      	bgt.n	8018d36 <__multadd+0x12>
 8018d5c:	f1b8 0f00 	cmp.w	r8, #0
 8018d60:	d022      	beq.n	8018da8 <__multadd+0x84>
 8018d62:	68a3      	ldr	r3, [r4, #8]
 8018d64:	42b3      	cmp	r3, r6
 8018d66:	dc19      	bgt.n	8018d9c <__multadd+0x78>
 8018d68:	6861      	ldr	r1, [r4, #4]
 8018d6a:	4638      	mov	r0, r7
 8018d6c:	3101      	adds	r1, #1
 8018d6e:	f7ff ff77 	bl	8018c60 <_Balloc>
 8018d72:	4605      	mov	r5, r0
 8018d74:	b928      	cbnz	r0, 8018d82 <__multadd+0x5e>
 8018d76:	4602      	mov	r2, r0
 8018d78:	4b0d      	ldr	r3, [pc, #52]	; (8018db0 <__multadd+0x8c>)
 8018d7a:	480e      	ldr	r0, [pc, #56]	; (8018db4 <__multadd+0x90>)
 8018d7c:	21b5      	movs	r1, #181	; 0xb5
 8018d7e:	f000 fc69 	bl	8019654 <__assert_func>
 8018d82:	6922      	ldr	r2, [r4, #16]
 8018d84:	3202      	adds	r2, #2
 8018d86:	f104 010c 	add.w	r1, r4, #12
 8018d8a:	0092      	lsls	r2, r2, #2
 8018d8c:	300c      	adds	r0, #12
 8018d8e:	f7fe f987 	bl	80170a0 <memcpy>
 8018d92:	4621      	mov	r1, r4
 8018d94:	4638      	mov	r0, r7
 8018d96:	f7ff ffa3 	bl	8018ce0 <_Bfree>
 8018d9a:	462c      	mov	r4, r5
 8018d9c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8018da0:	3601      	adds	r6, #1
 8018da2:	f8c3 8014 	str.w	r8, [r3, #20]
 8018da6:	6126      	str	r6, [r4, #16]
 8018da8:	4620      	mov	r0, r4
 8018daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018dae:	bf00      	nop
 8018db0:	0801e848 	.word	0x0801e848
 8018db4:	0801e859 	.word	0x0801e859

08018db8 <__hi0bits>:
 8018db8:	0c03      	lsrs	r3, r0, #16
 8018dba:	041b      	lsls	r3, r3, #16
 8018dbc:	b9d3      	cbnz	r3, 8018df4 <__hi0bits+0x3c>
 8018dbe:	0400      	lsls	r0, r0, #16
 8018dc0:	2310      	movs	r3, #16
 8018dc2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8018dc6:	bf04      	itt	eq
 8018dc8:	0200      	lsleq	r0, r0, #8
 8018dca:	3308      	addeq	r3, #8
 8018dcc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8018dd0:	bf04      	itt	eq
 8018dd2:	0100      	lsleq	r0, r0, #4
 8018dd4:	3304      	addeq	r3, #4
 8018dd6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8018dda:	bf04      	itt	eq
 8018ddc:	0080      	lsleq	r0, r0, #2
 8018dde:	3302      	addeq	r3, #2
 8018de0:	2800      	cmp	r0, #0
 8018de2:	db05      	blt.n	8018df0 <__hi0bits+0x38>
 8018de4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8018de8:	f103 0301 	add.w	r3, r3, #1
 8018dec:	bf08      	it	eq
 8018dee:	2320      	moveq	r3, #32
 8018df0:	4618      	mov	r0, r3
 8018df2:	4770      	bx	lr
 8018df4:	2300      	movs	r3, #0
 8018df6:	e7e4      	b.n	8018dc2 <__hi0bits+0xa>

08018df8 <__lo0bits>:
 8018df8:	6803      	ldr	r3, [r0, #0]
 8018dfa:	f013 0207 	ands.w	r2, r3, #7
 8018dfe:	4601      	mov	r1, r0
 8018e00:	d00b      	beq.n	8018e1a <__lo0bits+0x22>
 8018e02:	07da      	lsls	r2, r3, #31
 8018e04:	d424      	bmi.n	8018e50 <__lo0bits+0x58>
 8018e06:	0798      	lsls	r0, r3, #30
 8018e08:	bf49      	itett	mi
 8018e0a:	085b      	lsrmi	r3, r3, #1
 8018e0c:	089b      	lsrpl	r3, r3, #2
 8018e0e:	2001      	movmi	r0, #1
 8018e10:	600b      	strmi	r3, [r1, #0]
 8018e12:	bf5c      	itt	pl
 8018e14:	600b      	strpl	r3, [r1, #0]
 8018e16:	2002      	movpl	r0, #2
 8018e18:	4770      	bx	lr
 8018e1a:	b298      	uxth	r0, r3
 8018e1c:	b9b0      	cbnz	r0, 8018e4c <__lo0bits+0x54>
 8018e1e:	0c1b      	lsrs	r3, r3, #16
 8018e20:	2010      	movs	r0, #16
 8018e22:	f013 0fff 	tst.w	r3, #255	; 0xff
 8018e26:	bf04      	itt	eq
 8018e28:	0a1b      	lsreq	r3, r3, #8
 8018e2a:	3008      	addeq	r0, #8
 8018e2c:	071a      	lsls	r2, r3, #28
 8018e2e:	bf04      	itt	eq
 8018e30:	091b      	lsreq	r3, r3, #4
 8018e32:	3004      	addeq	r0, #4
 8018e34:	079a      	lsls	r2, r3, #30
 8018e36:	bf04      	itt	eq
 8018e38:	089b      	lsreq	r3, r3, #2
 8018e3a:	3002      	addeq	r0, #2
 8018e3c:	07da      	lsls	r2, r3, #31
 8018e3e:	d403      	bmi.n	8018e48 <__lo0bits+0x50>
 8018e40:	085b      	lsrs	r3, r3, #1
 8018e42:	f100 0001 	add.w	r0, r0, #1
 8018e46:	d005      	beq.n	8018e54 <__lo0bits+0x5c>
 8018e48:	600b      	str	r3, [r1, #0]
 8018e4a:	4770      	bx	lr
 8018e4c:	4610      	mov	r0, r2
 8018e4e:	e7e8      	b.n	8018e22 <__lo0bits+0x2a>
 8018e50:	2000      	movs	r0, #0
 8018e52:	4770      	bx	lr
 8018e54:	2020      	movs	r0, #32
 8018e56:	4770      	bx	lr

08018e58 <__i2b>:
 8018e58:	b510      	push	{r4, lr}
 8018e5a:	460c      	mov	r4, r1
 8018e5c:	2101      	movs	r1, #1
 8018e5e:	f7ff feff 	bl	8018c60 <_Balloc>
 8018e62:	4602      	mov	r2, r0
 8018e64:	b928      	cbnz	r0, 8018e72 <__i2b+0x1a>
 8018e66:	4b05      	ldr	r3, [pc, #20]	; (8018e7c <__i2b+0x24>)
 8018e68:	4805      	ldr	r0, [pc, #20]	; (8018e80 <__i2b+0x28>)
 8018e6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8018e6e:	f000 fbf1 	bl	8019654 <__assert_func>
 8018e72:	2301      	movs	r3, #1
 8018e74:	6144      	str	r4, [r0, #20]
 8018e76:	6103      	str	r3, [r0, #16]
 8018e78:	bd10      	pop	{r4, pc}
 8018e7a:	bf00      	nop
 8018e7c:	0801e848 	.word	0x0801e848
 8018e80:	0801e859 	.word	0x0801e859

08018e84 <__multiply>:
 8018e84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e88:	4614      	mov	r4, r2
 8018e8a:	690a      	ldr	r2, [r1, #16]
 8018e8c:	6923      	ldr	r3, [r4, #16]
 8018e8e:	429a      	cmp	r2, r3
 8018e90:	bfb8      	it	lt
 8018e92:	460b      	movlt	r3, r1
 8018e94:	460d      	mov	r5, r1
 8018e96:	bfbc      	itt	lt
 8018e98:	4625      	movlt	r5, r4
 8018e9a:	461c      	movlt	r4, r3
 8018e9c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8018ea0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8018ea4:	68ab      	ldr	r3, [r5, #8]
 8018ea6:	6869      	ldr	r1, [r5, #4]
 8018ea8:	eb0a 0709 	add.w	r7, sl, r9
 8018eac:	42bb      	cmp	r3, r7
 8018eae:	b085      	sub	sp, #20
 8018eb0:	bfb8      	it	lt
 8018eb2:	3101      	addlt	r1, #1
 8018eb4:	f7ff fed4 	bl	8018c60 <_Balloc>
 8018eb8:	b930      	cbnz	r0, 8018ec8 <__multiply+0x44>
 8018eba:	4602      	mov	r2, r0
 8018ebc:	4b42      	ldr	r3, [pc, #264]	; (8018fc8 <__multiply+0x144>)
 8018ebe:	4843      	ldr	r0, [pc, #268]	; (8018fcc <__multiply+0x148>)
 8018ec0:	f240 115d 	movw	r1, #349	; 0x15d
 8018ec4:	f000 fbc6 	bl	8019654 <__assert_func>
 8018ec8:	f100 0614 	add.w	r6, r0, #20
 8018ecc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8018ed0:	4633      	mov	r3, r6
 8018ed2:	2200      	movs	r2, #0
 8018ed4:	4543      	cmp	r3, r8
 8018ed6:	d31e      	bcc.n	8018f16 <__multiply+0x92>
 8018ed8:	f105 0c14 	add.w	ip, r5, #20
 8018edc:	f104 0314 	add.w	r3, r4, #20
 8018ee0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8018ee4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8018ee8:	9202      	str	r2, [sp, #8]
 8018eea:	ebac 0205 	sub.w	r2, ip, r5
 8018eee:	3a15      	subs	r2, #21
 8018ef0:	f022 0203 	bic.w	r2, r2, #3
 8018ef4:	3204      	adds	r2, #4
 8018ef6:	f105 0115 	add.w	r1, r5, #21
 8018efa:	458c      	cmp	ip, r1
 8018efc:	bf38      	it	cc
 8018efe:	2204      	movcc	r2, #4
 8018f00:	9201      	str	r2, [sp, #4]
 8018f02:	9a02      	ldr	r2, [sp, #8]
 8018f04:	9303      	str	r3, [sp, #12]
 8018f06:	429a      	cmp	r2, r3
 8018f08:	d808      	bhi.n	8018f1c <__multiply+0x98>
 8018f0a:	2f00      	cmp	r7, #0
 8018f0c:	dc55      	bgt.n	8018fba <__multiply+0x136>
 8018f0e:	6107      	str	r7, [r0, #16]
 8018f10:	b005      	add	sp, #20
 8018f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f16:	f843 2b04 	str.w	r2, [r3], #4
 8018f1a:	e7db      	b.n	8018ed4 <__multiply+0x50>
 8018f1c:	f8b3 a000 	ldrh.w	sl, [r3]
 8018f20:	f1ba 0f00 	cmp.w	sl, #0
 8018f24:	d020      	beq.n	8018f68 <__multiply+0xe4>
 8018f26:	f105 0e14 	add.w	lr, r5, #20
 8018f2a:	46b1      	mov	r9, r6
 8018f2c:	2200      	movs	r2, #0
 8018f2e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8018f32:	f8d9 b000 	ldr.w	fp, [r9]
 8018f36:	b2a1      	uxth	r1, r4
 8018f38:	fa1f fb8b 	uxth.w	fp, fp
 8018f3c:	fb0a b101 	mla	r1, sl, r1, fp
 8018f40:	4411      	add	r1, r2
 8018f42:	f8d9 2000 	ldr.w	r2, [r9]
 8018f46:	0c24      	lsrs	r4, r4, #16
 8018f48:	0c12      	lsrs	r2, r2, #16
 8018f4a:	fb0a 2404 	mla	r4, sl, r4, r2
 8018f4e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8018f52:	b289      	uxth	r1, r1
 8018f54:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8018f58:	45f4      	cmp	ip, lr
 8018f5a:	f849 1b04 	str.w	r1, [r9], #4
 8018f5e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8018f62:	d8e4      	bhi.n	8018f2e <__multiply+0xaa>
 8018f64:	9901      	ldr	r1, [sp, #4]
 8018f66:	5072      	str	r2, [r6, r1]
 8018f68:	9a03      	ldr	r2, [sp, #12]
 8018f6a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8018f6e:	3304      	adds	r3, #4
 8018f70:	f1b9 0f00 	cmp.w	r9, #0
 8018f74:	d01f      	beq.n	8018fb6 <__multiply+0x132>
 8018f76:	6834      	ldr	r4, [r6, #0]
 8018f78:	f105 0114 	add.w	r1, r5, #20
 8018f7c:	46b6      	mov	lr, r6
 8018f7e:	f04f 0a00 	mov.w	sl, #0
 8018f82:	880a      	ldrh	r2, [r1, #0]
 8018f84:	f8be b002 	ldrh.w	fp, [lr, #2]
 8018f88:	fb09 b202 	mla	r2, r9, r2, fp
 8018f8c:	4492      	add	sl, r2
 8018f8e:	b2a4      	uxth	r4, r4
 8018f90:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8018f94:	f84e 4b04 	str.w	r4, [lr], #4
 8018f98:	f851 4b04 	ldr.w	r4, [r1], #4
 8018f9c:	f8be 2000 	ldrh.w	r2, [lr]
 8018fa0:	0c24      	lsrs	r4, r4, #16
 8018fa2:	fb09 2404 	mla	r4, r9, r4, r2
 8018fa6:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8018faa:	458c      	cmp	ip, r1
 8018fac:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8018fb0:	d8e7      	bhi.n	8018f82 <__multiply+0xfe>
 8018fb2:	9a01      	ldr	r2, [sp, #4]
 8018fb4:	50b4      	str	r4, [r6, r2]
 8018fb6:	3604      	adds	r6, #4
 8018fb8:	e7a3      	b.n	8018f02 <__multiply+0x7e>
 8018fba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d1a5      	bne.n	8018f0e <__multiply+0x8a>
 8018fc2:	3f01      	subs	r7, #1
 8018fc4:	e7a1      	b.n	8018f0a <__multiply+0x86>
 8018fc6:	bf00      	nop
 8018fc8:	0801e848 	.word	0x0801e848
 8018fcc:	0801e859 	.word	0x0801e859

08018fd0 <__pow5mult>:
 8018fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018fd4:	4615      	mov	r5, r2
 8018fd6:	f012 0203 	ands.w	r2, r2, #3
 8018fda:	4606      	mov	r6, r0
 8018fdc:	460f      	mov	r7, r1
 8018fde:	d007      	beq.n	8018ff0 <__pow5mult+0x20>
 8018fe0:	4c25      	ldr	r4, [pc, #148]	; (8019078 <__pow5mult+0xa8>)
 8018fe2:	3a01      	subs	r2, #1
 8018fe4:	2300      	movs	r3, #0
 8018fe6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8018fea:	f7ff fe9b 	bl	8018d24 <__multadd>
 8018fee:	4607      	mov	r7, r0
 8018ff0:	10ad      	asrs	r5, r5, #2
 8018ff2:	d03d      	beq.n	8019070 <__pow5mult+0xa0>
 8018ff4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8018ff6:	b97c      	cbnz	r4, 8019018 <__pow5mult+0x48>
 8018ff8:	2010      	movs	r0, #16
 8018ffa:	f7fe f841 	bl	8017080 <malloc>
 8018ffe:	4602      	mov	r2, r0
 8019000:	6270      	str	r0, [r6, #36]	; 0x24
 8019002:	b928      	cbnz	r0, 8019010 <__pow5mult+0x40>
 8019004:	4b1d      	ldr	r3, [pc, #116]	; (801907c <__pow5mult+0xac>)
 8019006:	481e      	ldr	r0, [pc, #120]	; (8019080 <__pow5mult+0xb0>)
 8019008:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801900c:	f000 fb22 	bl	8019654 <__assert_func>
 8019010:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019014:	6004      	str	r4, [r0, #0]
 8019016:	60c4      	str	r4, [r0, #12]
 8019018:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801901c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019020:	b94c      	cbnz	r4, 8019036 <__pow5mult+0x66>
 8019022:	f240 2171 	movw	r1, #625	; 0x271
 8019026:	4630      	mov	r0, r6
 8019028:	f7ff ff16 	bl	8018e58 <__i2b>
 801902c:	2300      	movs	r3, #0
 801902e:	f8c8 0008 	str.w	r0, [r8, #8]
 8019032:	4604      	mov	r4, r0
 8019034:	6003      	str	r3, [r0, #0]
 8019036:	f04f 0900 	mov.w	r9, #0
 801903a:	07eb      	lsls	r3, r5, #31
 801903c:	d50a      	bpl.n	8019054 <__pow5mult+0x84>
 801903e:	4639      	mov	r1, r7
 8019040:	4622      	mov	r2, r4
 8019042:	4630      	mov	r0, r6
 8019044:	f7ff ff1e 	bl	8018e84 <__multiply>
 8019048:	4639      	mov	r1, r7
 801904a:	4680      	mov	r8, r0
 801904c:	4630      	mov	r0, r6
 801904e:	f7ff fe47 	bl	8018ce0 <_Bfree>
 8019052:	4647      	mov	r7, r8
 8019054:	106d      	asrs	r5, r5, #1
 8019056:	d00b      	beq.n	8019070 <__pow5mult+0xa0>
 8019058:	6820      	ldr	r0, [r4, #0]
 801905a:	b938      	cbnz	r0, 801906c <__pow5mult+0x9c>
 801905c:	4622      	mov	r2, r4
 801905e:	4621      	mov	r1, r4
 8019060:	4630      	mov	r0, r6
 8019062:	f7ff ff0f 	bl	8018e84 <__multiply>
 8019066:	6020      	str	r0, [r4, #0]
 8019068:	f8c0 9000 	str.w	r9, [r0]
 801906c:	4604      	mov	r4, r0
 801906e:	e7e4      	b.n	801903a <__pow5mult+0x6a>
 8019070:	4638      	mov	r0, r7
 8019072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019076:	bf00      	nop
 8019078:	0801e9b0 	.word	0x0801e9b0
 801907c:	0801e7d2 	.word	0x0801e7d2
 8019080:	0801e859 	.word	0x0801e859

08019084 <__lshift>:
 8019084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019088:	460c      	mov	r4, r1
 801908a:	6849      	ldr	r1, [r1, #4]
 801908c:	6923      	ldr	r3, [r4, #16]
 801908e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019092:	68a3      	ldr	r3, [r4, #8]
 8019094:	4607      	mov	r7, r0
 8019096:	4691      	mov	r9, r2
 8019098:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801909c:	f108 0601 	add.w	r6, r8, #1
 80190a0:	42b3      	cmp	r3, r6
 80190a2:	db0b      	blt.n	80190bc <__lshift+0x38>
 80190a4:	4638      	mov	r0, r7
 80190a6:	f7ff fddb 	bl	8018c60 <_Balloc>
 80190aa:	4605      	mov	r5, r0
 80190ac:	b948      	cbnz	r0, 80190c2 <__lshift+0x3e>
 80190ae:	4602      	mov	r2, r0
 80190b0:	4b28      	ldr	r3, [pc, #160]	; (8019154 <__lshift+0xd0>)
 80190b2:	4829      	ldr	r0, [pc, #164]	; (8019158 <__lshift+0xd4>)
 80190b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80190b8:	f000 facc 	bl	8019654 <__assert_func>
 80190bc:	3101      	adds	r1, #1
 80190be:	005b      	lsls	r3, r3, #1
 80190c0:	e7ee      	b.n	80190a0 <__lshift+0x1c>
 80190c2:	2300      	movs	r3, #0
 80190c4:	f100 0114 	add.w	r1, r0, #20
 80190c8:	f100 0210 	add.w	r2, r0, #16
 80190cc:	4618      	mov	r0, r3
 80190ce:	4553      	cmp	r3, sl
 80190d0:	db33      	blt.n	801913a <__lshift+0xb6>
 80190d2:	6920      	ldr	r0, [r4, #16]
 80190d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80190d8:	f104 0314 	add.w	r3, r4, #20
 80190dc:	f019 091f 	ands.w	r9, r9, #31
 80190e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80190e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80190e8:	d02b      	beq.n	8019142 <__lshift+0xbe>
 80190ea:	f1c9 0e20 	rsb	lr, r9, #32
 80190ee:	468a      	mov	sl, r1
 80190f0:	2200      	movs	r2, #0
 80190f2:	6818      	ldr	r0, [r3, #0]
 80190f4:	fa00 f009 	lsl.w	r0, r0, r9
 80190f8:	4302      	orrs	r2, r0
 80190fa:	f84a 2b04 	str.w	r2, [sl], #4
 80190fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8019102:	459c      	cmp	ip, r3
 8019104:	fa22 f20e 	lsr.w	r2, r2, lr
 8019108:	d8f3      	bhi.n	80190f2 <__lshift+0x6e>
 801910a:	ebac 0304 	sub.w	r3, ip, r4
 801910e:	3b15      	subs	r3, #21
 8019110:	f023 0303 	bic.w	r3, r3, #3
 8019114:	3304      	adds	r3, #4
 8019116:	f104 0015 	add.w	r0, r4, #21
 801911a:	4584      	cmp	ip, r0
 801911c:	bf38      	it	cc
 801911e:	2304      	movcc	r3, #4
 8019120:	50ca      	str	r2, [r1, r3]
 8019122:	b10a      	cbz	r2, 8019128 <__lshift+0xa4>
 8019124:	f108 0602 	add.w	r6, r8, #2
 8019128:	3e01      	subs	r6, #1
 801912a:	4638      	mov	r0, r7
 801912c:	612e      	str	r6, [r5, #16]
 801912e:	4621      	mov	r1, r4
 8019130:	f7ff fdd6 	bl	8018ce0 <_Bfree>
 8019134:	4628      	mov	r0, r5
 8019136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801913a:	f842 0f04 	str.w	r0, [r2, #4]!
 801913e:	3301      	adds	r3, #1
 8019140:	e7c5      	b.n	80190ce <__lshift+0x4a>
 8019142:	3904      	subs	r1, #4
 8019144:	f853 2b04 	ldr.w	r2, [r3], #4
 8019148:	f841 2f04 	str.w	r2, [r1, #4]!
 801914c:	459c      	cmp	ip, r3
 801914e:	d8f9      	bhi.n	8019144 <__lshift+0xc0>
 8019150:	e7ea      	b.n	8019128 <__lshift+0xa4>
 8019152:	bf00      	nop
 8019154:	0801e848 	.word	0x0801e848
 8019158:	0801e859 	.word	0x0801e859

0801915c <__mcmp>:
 801915c:	b530      	push	{r4, r5, lr}
 801915e:	6902      	ldr	r2, [r0, #16]
 8019160:	690c      	ldr	r4, [r1, #16]
 8019162:	1b12      	subs	r2, r2, r4
 8019164:	d10e      	bne.n	8019184 <__mcmp+0x28>
 8019166:	f100 0314 	add.w	r3, r0, #20
 801916a:	3114      	adds	r1, #20
 801916c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019170:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019174:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019178:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801917c:	42a5      	cmp	r5, r4
 801917e:	d003      	beq.n	8019188 <__mcmp+0x2c>
 8019180:	d305      	bcc.n	801918e <__mcmp+0x32>
 8019182:	2201      	movs	r2, #1
 8019184:	4610      	mov	r0, r2
 8019186:	bd30      	pop	{r4, r5, pc}
 8019188:	4283      	cmp	r3, r0
 801918a:	d3f3      	bcc.n	8019174 <__mcmp+0x18>
 801918c:	e7fa      	b.n	8019184 <__mcmp+0x28>
 801918e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019192:	e7f7      	b.n	8019184 <__mcmp+0x28>

08019194 <__mdiff>:
 8019194:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019198:	460c      	mov	r4, r1
 801919a:	4606      	mov	r6, r0
 801919c:	4611      	mov	r1, r2
 801919e:	4620      	mov	r0, r4
 80191a0:	4617      	mov	r7, r2
 80191a2:	f7ff ffdb 	bl	801915c <__mcmp>
 80191a6:	1e05      	subs	r5, r0, #0
 80191a8:	d110      	bne.n	80191cc <__mdiff+0x38>
 80191aa:	4629      	mov	r1, r5
 80191ac:	4630      	mov	r0, r6
 80191ae:	f7ff fd57 	bl	8018c60 <_Balloc>
 80191b2:	b930      	cbnz	r0, 80191c2 <__mdiff+0x2e>
 80191b4:	4b39      	ldr	r3, [pc, #228]	; (801929c <__mdiff+0x108>)
 80191b6:	4602      	mov	r2, r0
 80191b8:	f240 2132 	movw	r1, #562	; 0x232
 80191bc:	4838      	ldr	r0, [pc, #224]	; (80192a0 <__mdiff+0x10c>)
 80191be:	f000 fa49 	bl	8019654 <__assert_func>
 80191c2:	2301      	movs	r3, #1
 80191c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80191c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191cc:	bfa4      	itt	ge
 80191ce:	463b      	movge	r3, r7
 80191d0:	4627      	movge	r7, r4
 80191d2:	4630      	mov	r0, r6
 80191d4:	6879      	ldr	r1, [r7, #4]
 80191d6:	bfa6      	itte	ge
 80191d8:	461c      	movge	r4, r3
 80191da:	2500      	movge	r5, #0
 80191dc:	2501      	movlt	r5, #1
 80191de:	f7ff fd3f 	bl	8018c60 <_Balloc>
 80191e2:	b920      	cbnz	r0, 80191ee <__mdiff+0x5a>
 80191e4:	4b2d      	ldr	r3, [pc, #180]	; (801929c <__mdiff+0x108>)
 80191e6:	4602      	mov	r2, r0
 80191e8:	f44f 7110 	mov.w	r1, #576	; 0x240
 80191ec:	e7e6      	b.n	80191bc <__mdiff+0x28>
 80191ee:	693e      	ldr	r6, [r7, #16]
 80191f0:	60c5      	str	r5, [r0, #12]
 80191f2:	6925      	ldr	r5, [r4, #16]
 80191f4:	f107 0114 	add.w	r1, r7, #20
 80191f8:	f104 0914 	add.w	r9, r4, #20
 80191fc:	f100 0e14 	add.w	lr, r0, #20
 8019200:	f107 0210 	add.w	r2, r7, #16
 8019204:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8019208:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801920c:	46f2      	mov	sl, lr
 801920e:	2700      	movs	r7, #0
 8019210:	f859 3b04 	ldr.w	r3, [r9], #4
 8019214:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019218:	fa1f f883 	uxth.w	r8, r3
 801921c:	fa17 f78b 	uxtah	r7, r7, fp
 8019220:	0c1b      	lsrs	r3, r3, #16
 8019222:	eba7 0808 	sub.w	r8, r7, r8
 8019226:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801922a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801922e:	fa1f f888 	uxth.w	r8, r8
 8019232:	141f      	asrs	r7, r3, #16
 8019234:	454d      	cmp	r5, r9
 8019236:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801923a:	f84a 3b04 	str.w	r3, [sl], #4
 801923e:	d8e7      	bhi.n	8019210 <__mdiff+0x7c>
 8019240:	1b2b      	subs	r3, r5, r4
 8019242:	3b15      	subs	r3, #21
 8019244:	f023 0303 	bic.w	r3, r3, #3
 8019248:	3304      	adds	r3, #4
 801924a:	3415      	adds	r4, #21
 801924c:	42a5      	cmp	r5, r4
 801924e:	bf38      	it	cc
 8019250:	2304      	movcc	r3, #4
 8019252:	4419      	add	r1, r3
 8019254:	4473      	add	r3, lr
 8019256:	469e      	mov	lr, r3
 8019258:	460d      	mov	r5, r1
 801925a:	4565      	cmp	r5, ip
 801925c:	d30e      	bcc.n	801927c <__mdiff+0xe8>
 801925e:	f10c 0203 	add.w	r2, ip, #3
 8019262:	1a52      	subs	r2, r2, r1
 8019264:	f022 0203 	bic.w	r2, r2, #3
 8019268:	3903      	subs	r1, #3
 801926a:	458c      	cmp	ip, r1
 801926c:	bf38      	it	cc
 801926e:	2200      	movcc	r2, #0
 8019270:	441a      	add	r2, r3
 8019272:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019276:	b17b      	cbz	r3, 8019298 <__mdiff+0x104>
 8019278:	6106      	str	r6, [r0, #16]
 801927a:	e7a5      	b.n	80191c8 <__mdiff+0x34>
 801927c:	f855 8b04 	ldr.w	r8, [r5], #4
 8019280:	fa17 f488 	uxtah	r4, r7, r8
 8019284:	1422      	asrs	r2, r4, #16
 8019286:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 801928a:	b2a4      	uxth	r4, r4
 801928c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8019290:	f84e 4b04 	str.w	r4, [lr], #4
 8019294:	1417      	asrs	r7, r2, #16
 8019296:	e7e0      	b.n	801925a <__mdiff+0xc6>
 8019298:	3e01      	subs	r6, #1
 801929a:	e7ea      	b.n	8019272 <__mdiff+0xde>
 801929c:	0801e848 	.word	0x0801e848
 80192a0:	0801e859 	.word	0x0801e859

080192a4 <__d2b>:
 80192a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80192a8:	4689      	mov	r9, r1
 80192aa:	2101      	movs	r1, #1
 80192ac:	ec57 6b10 	vmov	r6, r7, d0
 80192b0:	4690      	mov	r8, r2
 80192b2:	f7ff fcd5 	bl	8018c60 <_Balloc>
 80192b6:	4604      	mov	r4, r0
 80192b8:	b930      	cbnz	r0, 80192c8 <__d2b+0x24>
 80192ba:	4602      	mov	r2, r0
 80192bc:	4b25      	ldr	r3, [pc, #148]	; (8019354 <__d2b+0xb0>)
 80192be:	4826      	ldr	r0, [pc, #152]	; (8019358 <__d2b+0xb4>)
 80192c0:	f240 310a 	movw	r1, #778	; 0x30a
 80192c4:	f000 f9c6 	bl	8019654 <__assert_func>
 80192c8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80192cc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80192d0:	bb35      	cbnz	r5, 8019320 <__d2b+0x7c>
 80192d2:	2e00      	cmp	r6, #0
 80192d4:	9301      	str	r3, [sp, #4]
 80192d6:	d028      	beq.n	801932a <__d2b+0x86>
 80192d8:	4668      	mov	r0, sp
 80192da:	9600      	str	r6, [sp, #0]
 80192dc:	f7ff fd8c 	bl	8018df8 <__lo0bits>
 80192e0:	9900      	ldr	r1, [sp, #0]
 80192e2:	b300      	cbz	r0, 8019326 <__d2b+0x82>
 80192e4:	9a01      	ldr	r2, [sp, #4]
 80192e6:	f1c0 0320 	rsb	r3, r0, #32
 80192ea:	fa02 f303 	lsl.w	r3, r2, r3
 80192ee:	430b      	orrs	r3, r1
 80192f0:	40c2      	lsrs	r2, r0
 80192f2:	6163      	str	r3, [r4, #20]
 80192f4:	9201      	str	r2, [sp, #4]
 80192f6:	9b01      	ldr	r3, [sp, #4]
 80192f8:	61a3      	str	r3, [r4, #24]
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	bf14      	ite	ne
 80192fe:	2202      	movne	r2, #2
 8019300:	2201      	moveq	r2, #1
 8019302:	6122      	str	r2, [r4, #16]
 8019304:	b1d5      	cbz	r5, 801933c <__d2b+0x98>
 8019306:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801930a:	4405      	add	r5, r0
 801930c:	f8c9 5000 	str.w	r5, [r9]
 8019310:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019314:	f8c8 0000 	str.w	r0, [r8]
 8019318:	4620      	mov	r0, r4
 801931a:	b003      	add	sp, #12
 801931c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019320:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019324:	e7d5      	b.n	80192d2 <__d2b+0x2e>
 8019326:	6161      	str	r1, [r4, #20]
 8019328:	e7e5      	b.n	80192f6 <__d2b+0x52>
 801932a:	a801      	add	r0, sp, #4
 801932c:	f7ff fd64 	bl	8018df8 <__lo0bits>
 8019330:	9b01      	ldr	r3, [sp, #4]
 8019332:	6163      	str	r3, [r4, #20]
 8019334:	2201      	movs	r2, #1
 8019336:	6122      	str	r2, [r4, #16]
 8019338:	3020      	adds	r0, #32
 801933a:	e7e3      	b.n	8019304 <__d2b+0x60>
 801933c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019340:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019344:	f8c9 0000 	str.w	r0, [r9]
 8019348:	6918      	ldr	r0, [r3, #16]
 801934a:	f7ff fd35 	bl	8018db8 <__hi0bits>
 801934e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019352:	e7df      	b.n	8019314 <__d2b+0x70>
 8019354:	0801e848 	.word	0x0801e848
 8019358:	0801e859 	.word	0x0801e859

0801935c <_calloc_r>:
 801935c:	b513      	push	{r0, r1, r4, lr}
 801935e:	434a      	muls	r2, r1
 8019360:	4611      	mov	r1, r2
 8019362:	9201      	str	r2, [sp, #4]
 8019364:	f7fd ff02 	bl	801716c <_malloc_r>
 8019368:	4604      	mov	r4, r0
 801936a:	b118      	cbz	r0, 8019374 <_calloc_r+0x18>
 801936c:	9a01      	ldr	r2, [sp, #4]
 801936e:	2100      	movs	r1, #0
 8019370:	f7fd fea4 	bl	80170bc <memset>
 8019374:	4620      	mov	r0, r4
 8019376:	b002      	add	sp, #8
 8019378:	bd10      	pop	{r4, pc}

0801937a <__ssputs_r>:
 801937a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801937e:	688e      	ldr	r6, [r1, #8]
 8019380:	429e      	cmp	r6, r3
 8019382:	4682      	mov	sl, r0
 8019384:	460c      	mov	r4, r1
 8019386:	4690      	mov	r8, r2
 8019388:	461f      	mov	r7, r3
 801938a:	d838      	bhi.n	80193fe <__ssputs_r+0x84>
 801938c:	898a      	ldrh	r2, [r1, #12]
 801938e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019392:	d032      	beq.n	80193fa <__ssputs_r+0x80>
 8019394:	6825      	ldr	r5, [r4, #0]
 8019396:	6909      	ldr	r1, [r1, #16]
 8019398:	eba5 0901 	sub.w	r9, r5, r1
 801939c:	6965      	ldr	r5, [r4, #20]
 801939e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80193a2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80193a6:	3301      	adds	r3, #1
 80193a8:	444b      	add	r3, r9
 80193aa:	106d      	asrs	r5, r5, #1
 80193ac:	429d      	cmp	r5, r3
 80193ae:	bf38      	it	cc
 80193b0:	461d      	movcc	r5, r3
 80193b2:	0553      	lsls	r3, r2, #21
 80193b4:	d531      	bpl.n	801941a <__ssputs_r+0xa0>
 80193b6:	4629      	mov	r1, r5
 80193b8:	f7fd fed8 	bl	801716c <_malloc_r>
 80193bc:	4606      	mov	r6, r0
 80193be:	b950      	cbnz	r0, 80193d6 <__ssputs_r+0x5c>
 80193c0:	230c      	movs	r3, #12
 80193c2:	f8ca 3000 	str.w	r3, [sl]
 80193c6:	89a3      	ldrh	r3, [r4, #12]
 80193c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80193cc:	81a3      	strh	r3, [r4, #12]
 80193ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80193d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80193d6:	6921      	ldr	r1, [r4, #16]
 80193d8:	464a      	mov	r2, r9
 80193da:	f7fd fe61 	bl	80170a0 <memcpy>
 80193de:	89a3      	ldrh	r3, [r4, #12]
 80193e0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80193e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80193e8:	81a3      	strh	r3, [r4, #12]
 80193ea:	6126      	str	r6, [r4, #16]
 80193ec:	6165      	str	r5, [r4, #20]
 80193ee:	444e      	add	r6, r9
 80193f0:	eba5 0509 	sub.w	r5, r5, r9
 80193f4:	6026      	str	r6, [r4, #0]
 80193f6:	60a5      	str	r5, [r4, #8]
 80193f8:	463e      	mov	r6, r7
 80193fa:	42be      	cmp	r6, r7
 80193fc:	d900      	bls.n	8019400 <__ssputs_r+0x86>
 80193fe:	463e      	mov	r6, r7
 8019400:	4632      	mov	r2, r6
 8019402:	6820      	ldr	r0, [r4, #0]
 8019404:	4641      	mov	r1, r8
 8019406:	f000 f967 	bl	80196d8 <memmove>
 801940a:	68a3      	ldr	r3, [r4, #8]
 801940c:	6822      	ldr	r2, [r4, #0]
 801940e:	1b9b      	subs	r3, r3, r6
 8019410:	4432      	add	r2, r6
 8019412:	60a3      	str	r3, [r4, #8]
 8019414:	6022      	str	r2, [r4, #0]
 8019416:	2000      	movs	r0, #0
 8019418:	e7db      	b.n	80193d2 <__ssputs_r+0x58>
 801941a:	462a      	mov	r2, r5
 801941c:	f000 f976 	bl	801970c <_realloc_r>
 8019420:	4606      	mov	r6, r0
 8019422:	2800      	cmp	r0, #0
 8019424:	d1e1      	bne.n	80193ea <__ssputs_r+0x70>
 8019426:	6921      	ldr	r1, [r4, #16]
 8019428:	4650      	mov	r0, sl
 801942a:	f7fd fe4f 	bl	80170cc <_free_r>
 801942e:	e7c7      	b.n	80193c0 <__ssputs_r+0x46>

08019430 <_svfiprintf_r>:
 8019430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019434:	4698      	mov	r8, r3
 8019436:	898b      	ldrh	r3, [r1, #12]
 8019438:	061b      	lsls	r3, r3, #24
 801943a:	b09d      	sub	sp, #116	; 0x74
 801943c:	4607      	mov	r7, r0
 801943e:	460d      	mov	r5, r1
 8019440:	4614      	mov	r4, r2
 8019442:	d50e      	bpl.n	8019462 <_svfiprintf_r+0x32>
 8019444:	690b      	ldr	r3, [r1, #16]
 8019446:	b963      	cbnz	r3, 8019462 <_svfiprintf_r+0x32>
 8019448:	2140      	movs	r1, #64	; 0x40
 801944a:	f7fd fe8f 	bl	801716c <_malloc_r>
 801944e:	6028      	str	r0, [r5, #0]
 8019450:	6128      	str	r0, [r5, #16]
 8019452:	b920      	cbnz	r0, 801945e <_svfiprintf_r+0x2e>
 8019454:	230c      	movs	r3, #12
 8019456:	603b      	str	r3, [r7, #0]
 8019458:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801945c:	e0d1      	b.n	8019602 <_svfiprintf_r+0x1d2>
 801945e:	2340      	movs	r3, #64	; 0x40
 8019460:	616b      	str	r3, [r5, #20]
 8019462:	2300      	movs	r3, #0
 8019464:	9309      	str	r3, [sp, #36]	; 0x24
 8019466:	2320      	movs	r3, #32
 8019468:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801946c:	f8cd 800c 	str.w	r8, [sp, #12]
 8019470:	2330      	movs	r3, #48	; 0x30
 8019472:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801961c <_svfiprintf_r+0x1ec>
 8019476:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801947a:	f04f 0901 	mov.w	r9, #1
 801947e:	4623      	mov	r3, r4
 8019480:	469a      	mov	sl, r3
 8019482:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019486:	b10a      	cbz	r2, 801948c <_svfiprintf_r+0x5c>
 8019488:	2a25      	cmp	r2, #37	; 0x25
 801948a:	d1f9      	bne.n	8019480 <_svfiprintf_r+0x50>
 801948c:	ebba 0b04 	subs.w	fp, sl, r4
 8019490:	d00b      	beq.n	80194aa <_svfiprintf_r+0x7a>
 8019492:	465b      	mov	r3, fp
 8019494:	4622      	mov	r2, r4
 8019496:	4629      	mov	r1, r5
 8019498:	4638      	mov	r0, r7
 801949a:	f7ff ff6e 	bl	801937a <__ssputs_r>
 801949e:	3001      	adds	r0, #1
 80194a0:	f000 80aa 	beq.w	80195f8 <_svfiprintf_r+0x1c8>
 80194a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80194a6:	445a      	add	r2, fp
 80194a8:	9209      	str	r2, [sp, #36]	; 0x24
 80194aa:	f89a 3000 	ldrb.w	r3, [sl]
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	f000 80a2 	beq.w	80195f8 <_svfiprintf_r+0x1c8>
 80194b4:	2300      	movs	r3, #0
 80194b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80194ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80194be:	f10a 0a01 	add.w	sl, sl, #1
 80194c2:	9304      	str	r3, [sp, #16]
 80194c4:	9307      	str	r3, [sp, #28]
 80194c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80194ca:	931a      	str	r3, [sp, #104]	; 0x68
 80194cc:	4654      	mov	r4, sl
 80194ce:	2205      	movs	r2, #5
 80194d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80194d4:	4851      	ldr	r0, [pc, #324]	; (801961c <_svfiprintf_r+0x1ec>)
 80194d6:	f7e6 fe83 	bl	80001e0 <memchr>
 80194da:	9a04      	ldr	r2, [sp, #16]
 80194dc:	b9d8      	cbnz	r0, 8019516 <_svfiprintf_r+0xe6>
 80194de:	06d0      	lsls	r0, r2, #27
 80194e0:	bf44      	itt	mi
 80194e2:	2320      	movmi	r3, #32
 80194e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80194e8:	0711      	lsls	r1, r2, #28
 80194ea:	bf44      	itt	mi
 80194ec:	232b      	movmi	r3, #43	; 0x2b
 80194ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80194f2:	f89a 3000 	ldrb.w	r3, [sl]
 80194f6:	2b2a      	cmp	r3, #42	; 0x2a
 80194f8:	d015      	beq.n	8019526 <_svfiprintf_r+0xf6>
 80194fa:	9a07      	ldr	r2, [sp, #28]
 80194fc:	4654      	mov	r4, sl
 80194fe:	2000      	movs	r0, #0
 8019500:	f04f 0c0a 	mov.w	ip, #10
 8019504:	4621      	mov	r1, r4
 8019506:	f811 3b01 	ldrb.w	r3, [r1], #1
 801950a:	3b30      	subs	r3, #48	; 0x30
 801950c:	2b09      	cmp	r3, #9
 801950e:	d94e      	bls.n	80195ae <_svfiprintf_r+0x17e>
 8019510:	b1b0      	cbz	r0, 8019540 <_svfiprintf_r+0x110>
 8019512:	9207      	str	r2, [sp, #28]
 8019514:	e014      	b.n	8019540 <_svfiprintf_r+0x110>
 8019516:	eba0 0308 	sub.w	r3, r0, r8
 801951a:	fa09 f303 	lsl.w	r3, r9, r3
 801951e:	4313      	orrs	r3, r2
 8019520:	9304      	str	r3, [sp, #16]
 8019522:	46a2      	mov	sl, r4
 8019524:	e7d2      	b.n	80194cc <_svfiprintf_r+0x9c>
 8019526:	9b03      	ldr	r3, [sp, #12]
 8019528:	1d19      	adds	r1, r3, #4
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	9103      	str	r1, [sp, #12]
 801952e:	2b00      	cmp	r3, #0
 8019530:	bfbb      	ittet	lt
 8019532:	425b      	neglt	r3, r3
 8019534:	f042 0202 	orrlt.w	r2, r2, #2
 8019538:	9307      	strge	r3, [sp, #28]
 801953a:	9307      	strlt	r3, [sp, #28]
 801953c:	bfb8      	it	lt
 801953e:	9204      	strlt	r2, [sp, #16]
 8019540:	7823      	ldrb	r3, [r4, #0]
 8019542:	2b2e      	cmp	r3, #46	; 0x2e
 8019544:	d10c      	bne.n	8019560 <_svfiprintf_r+0x130>
 8019546:	7863      	ldrb	r3, [r4, #1]
 8019548:	2b2a      	cmp	r3, #42	; 0x2a
 801954a:	d135      	bne.n	80195b8 <_svfiprintf_r+0x188>
 801954c:	9b03      	ldr	r3, [sp, #12]
 801954e:	1d1a      	adds	r2, r3, #4
 8019550:	681b      	ldr	r3, [r3, #0]
 8019552:	9203      	str	r2, [sp, #12]
 8019554:	2b00      	cmp	r3, #0
 8019556:	bfb8      	it	lt
 8019558:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801955c:	3402      	adds	r4, #2
 801955e:	9305      	str	r3, [sp, #20]
 8019560:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801962c <_svfiprintf_r+0x1fc>
 8019564:	7821      	ldrb	r1, [r4, #0]
 8019566:	2203      	movs	r2, #3
 8019568:	4650      	mov	r0, sl
 801956a:	f7e6 fe39 	bl	80001e0 <memchr>
 801956e:	b140      	cbz	r0, 8019582 <_svfiprintf_r+0x152>
 8019570:	2340      	movs	r3, #64	; 0x40
 8019572:	eba0 000a 	sub.w	r0, r0, sl
 8019576:	fa03 f000 	lsl.w	r0, r3, r0
 801957a:	9b04      	ldr	r3, [sp, #16]
 801957c:	4303      	orrs	r3, r0
 801957e:	3401      	adds	r4, #1
 8019580:	9304      	str	r3, [sp, #16]
 8019582:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019586:	4826      	ldr	r0, [pc, #152]	; (8019620 <_svfiprintf_r+0x1f0>)
 8019588:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801958c:	2206      	movs	r2, #6
 801958e:	f7e6 fe27 	bl	80001e0 <memchr>
 8019592:	2800      	cmp	r0, #0
 8019594:	d038      	beq.n	8019608 <_svfiprintf_r+0x1d8>
 8019596:	4b23      	ldr	r3, [pc, #140]	; (8019624 <_svfiprintf_r+0x1f4>)
 8019598:	bb1b      	cbnz	r3, 80195e2 <_svfiprintf_r+0x1b2>
 801959a:	9b03      	ldr	r3, [sp, #12]
 801959c:	3307      	adds	r3, #7
 801959e:	f023 0307 	bic.w	r3, r3, #7
 80195a2:	3308      	adds	r3, #8
 80195a4:	9303      	str	r3, [sp, #12]
 80195a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80195a8:	4433      	add	r3, r6
 80195aa:	9309      	str	r3, [sp, #36]	; 0x24
 80195ac:	e767      	b.n	801947e <_svfiprintf_r+0x4e>
 80195ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80195b2:	460c      	mov	r4, r1
 80195b4:	2001      	movs	r0, #1
 80195b6:	e7a5      	b.n	8019504 <_svfiprintf_r+0xd4>
 80195b8:	2300      	movs	r3, #0
 80195ba:	3401      	adds	r4, #1
 80195bc:	9305      	str	r3, [sp, #20]
 80195be:	4619      	mov	r1, r3
 80195c0:	f04f 0c0a 	mov.w	ip, #10
 80195c4:	4620      	mov	r0, r4
 80195c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80195ca:	3a30      	subs	r2, #48	; 0x30
 80195cc:	2a09      	cmp	r2, #9
 80195ce:	d903      	bls.n	80195d8 <_svfiprintf_r+0x1a8>
 80195d0:	2b00      	cmp	r3, #0
 80195d2:	d0c5      	beq.n	8019560 <_svfiprintf_r+0x130>
 80195d4:	9105      	str	r1, [sp, #20]
 80195d6:	e7c3      	b.n	8019560 <_svfiprintf_r+0x130>
 80195d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80195dc:	4604      	mov	r4, r0
 80195de:	2301      	movs	r3, #1
 80195e0:	e7f0      	b.n	80195c4 <_svfiprintf_r+0x194>
 80195e2:	ab03      	add	r3, sp, #12
 80195e4:	9300      	str	r3, [sp, #0]
 80195e6:	462a      	mov	r2, r5
 80195e8:	4b0f      	ldr	r3, [pc, #60]	; (8019628 <_svfiprintf_r+0x1f8>)
 80195ea:	a904      	add	r1, sp, #16
 80195ec:	4638      	mov	r0, r7
 80195ee:	f7fd feb7 	bl	8017360 <_printf_float>
 80195f2:	1c42      	adds	r2, r0, #1
 80195f4:	4606      	mov	r6, r0
 80195f6:	d1d6      	bne.n	80195a6 <_svfiprintf_r+0x176>
 80195f8:	89ab      	ldrh	r3, [r5, #12]
 80195fa:	065b      	lsls	r3, r3, #25
 80195fc:	f53f af2c 	bmi.w	8019458 <_svfiprintf_r+0x28>
 8019600:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019602:	b01d      	add	sp, #116	; 0x74
 8019604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019608:	ab03      	add	r3, sp, #12
 801960a:	9300      	str	r3, [sp, #0]
 801960c:	462a      	mov	r2, r5
 801960e:	4b06      	ldr	r3, [pc, #24]	; (8019628 <_svfiprintf_r+0x1f8>)
 8019610:	a904      	add	r1, sp, #16
 8019612:	4638      	mov	r0, r7
 8019614:	f7fe f948 	bl	80178a8 <_printf_i>
 8019618:	e7eb      	b.n	80195f2 <_svfiprintf_r+0x1c2>
 801961a:	bf00      	nop
 801961c:	0801e9bc 	.word	0x0801e9bc
 8019620:	0801e9c6 	.word	0x0801e9c6
 8019624:	08017361 	.word	0x08017361
 8019628:	0801937b 	.word	0x0801937b
 801962c:	0801e9c2 	.word	0x0801e9c2

08019630 <_read_r>:
 8019630:	b538      	push	{r3, r4, r5, lr}
 8019632:	4d07      	ldr	r5, [pc, #28]	; (8019650 <_read_r+0x20>)
 8019634:	4604      	mov	r4, r0
 8019636:	4608      	mov	r0, r1
 8019638:	4611      	mov	r1, r2
 801963a:	2200      	movs	r2, #0
 801963c:	602a      	str	r2, [r5, #0]
 801963e:	461a      	mov	r2, r3
 8019640:	f7eb fd56 	bl	80050f0 <_read>
 8019644:	1c43      	adds	r3, r0, #1
 8019646:	d102      	bne.n	801964e <_read_r+0x1e>
 8019648:	682b      	ldr	r3, [r5, #0]
 801964a:	b103      	cbz	r3, 801964e <_read_r+0x1e>
 801964c:	6023      	str	r3, [r4, #0]
 801964e:	bd38      	pop	{r3, r4, r5, pc}
 8019650:	2001f05c 	.word	0x2001f05c

08019654 <__assert_func>:
 8019654:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019656:	4614      	mov	r4, r2
 8019658:	461a      	mov	r2, r3
 801965a:	4b09      	ldr	r3, [pc, #36]	; (8019680 <__assert_func+0x2c>)
 801965c:	681b      	ldr	r3, [r3, #0]
 801965e:	4605      	mov	r5, r0
 8019660:	68d8      	ldr	r0, [r3, #12]
 8019662:	b14c      	cbz	r4, 8019678 <__assert_func+0x24>
 8019664:	4b07      	ldr	r3, [pc, #28]	; (8019684 <__assert_func+0x30>)
 8019666:	9100      	str	r1, [sp, #0]
 8019668:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801966c:	4906      	ldr	r1, [pc, #24]	; (8019688 <__assert_func+0x34>)
 801966e:	462b      	mov	r3, r5
 8019670:	f000 f80e 	bl	8019690 <fiprintf>
 8019674:	f000 fa98 	bl	8019ba8 <abort>
 8019678:	4b04      	ldr	r3, [pc, #16]	; (801968c <__assert_func+0x38>)
 801967a:	461c      	mov	r4, r3
 801967c:	e7f3      	b.n	8019666 <__assert_func+0x12>
 801967e:	bf00      	nop
 8019680:	200001c8 	.word	0x200001c8
 8019684:	0801e9cd 	.word	0x0801e9cd
 8019688:	0801e9da 	.word	0x0801e9da
 801968c:	0801ea08 	.word	0x0801ea08

08019690 <fiprintf>:
 8019690:	b40e      	push	{r1, r2, r3}
 8019692:	b503      	push	{r0, r1, lr}
 8019694:	4601      	mov	r1, r0
 8019696:	ab03      	add	r3, sp, #12
 8019698:	4805      	ldr	r0, [pc, #20]	; (80196b0 <fiprintf+0x20>)
 801969a:	f853 2b04 	ldr.w	r2, [r3], #4
 801969e:	6800      	ldr	r0, [r0, #0]
 80196a0:	9301      	str	r3, [sp, #4]
 80196a2:	f000 f883 	bl	80197ac <_vfiprintf_r>
 80196a6:	b002      	add	sp, #8
 80196a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80196ac:	b003      	add	sp, #12
 80196ae:	4770      	bx	lr
 80196b0:	200001c8 	.word	0x200001c8

080196b4 <__ascii_mbtowc>:
 80196b4:	b082      	sub	sp, #8
 80196b6:	b901      	cbnz	r1, 80196ba <__ascii_mbtowc+0x6>
 80196b8:	a901      	add	r1, sp, #4
 80196ba:	b142      	cbz	r2, 80196ce <__ascii_mbtowc+0x1a>
 80196bc:	b14b      	cbz	r3, 80196d2 <__ascii_mbtowc+0x1e>
 80196be:	7813      	ldrb	r3, [r2, #0]
 80196c0:	600b      	str	r3, [r1, #0]
 80196c2:	7812      	ldrb	r2, [r2, #0]
 80196c4:	1e10      	subs	r0, r2, #0
 80196c6:	bf18      	it	ne
 80196c8:	2001      	movne	r0, #1
 80196ca:	b002      	add	sp, #8
 80196cc:	4770      	bx	lr
 80196ce:	4610      	mov	r0, r2
 80196d0:	e7fb      	b.n	80196ca <__ascii_mbtowc+0x16>
 80196d2:	f06f 0001 	mvn.w	r0, #1
 80196d6:	e7f8      	b.n	80196ca <__ascii_mbtowc+0x16>

080196d8 <memmove>:
 80196d8:	4288      	cmp	r0, r1
 80196da:	b510      	push	{r4, lr}
 80196dc:	eb01 0402 	add.w	r4, r1, r2
 80196e0:	d902      	bls.n	80196e8 <memmove+0x10>
 80196e2:	4284      	cmp	r4, r0
 80196e4:	4623      	mov	r3, r4
 80196e6:	d807      	bhi.n	80196f8 <memmove+0x20>
 80196e8:	1e43      	subs	r3, r0, #1
 80196ea:	42a1      	cmp	r1, r4
 80196ec:	d008      	beq.n	8019700 <memmove+0x28>
 80196ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80196f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80196f6:	e7f8      	b.n	80196ea <memmove+0x12>
 80196f8:	4402      	add	r2, r0
 80196fa:	4601      	mov	r1, r0
 80196fc:	428a      	cmp	r2, r1
 80196fe:	d100      	bne.n	8019702 <memmove+0x2a>
 8019700:	bd10      	pop	{r4, pc}
 8019702:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019706:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801970a:	e7f7      	b.n	80196fc <memmove+0x24>

0801970c <_realloc_r>:
 801970c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801970e:	4607      	mov	r7, r0
 8019710:	4614      	mov	r4, r2
 8019712:	460e      	mov	r6, r1
 8019714:	b921      	cbnz	r1, 8019720 <_realloc_r+0x14>
 8019716:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801971a:	4611      	mov	r1, r2
 801971c:	f7fd bd26 	b.w	801716c <_malloc_r>
 8019720:	b922      	cbnz	r2, 801972c <_realloc_r+0x20>
 8019722:	f7fd fcd3 	bl	80170cc <_free_r>
 8019726:	4625      	mov	r5, r4
 8019728:	4628      	mov	r0, r5
 801972a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801972c:	f000 faa8 	bl	8019c80 <_malloc_usable_size_r>
 8019730:	42a0      	cmp	r0, r4
 8019732:	d20f      	bcs.n	8019754 <_realloc_r+0x48>
 8019734:	4621      	mov	r1, r4
 8019736:	4638      	mov	r0, r7
 8019738:	f7fd fd18 	bl	801716c <_malloc_r>
 801973c:	4605      	mov	r5, r0
 801973e:	2800      	cmp	r0, #0
 8019740:	d0f2      	beq.n	8019728 <_realloc_r+0x1c>
 8019742:	4631      	mov	r1, r6
 8019744:	4622      	mov	r2, r4
 8019746:	f7fd fcab 	bl	80170a0 <memcpy>
 801974a:	4631      	mov	r1, r6
 801974c:	4638      	mov	r0, r7
 801974e:	f7fd fcbd 	bl	80170cc <_free_r>
 8019752:	e7e9      	b.n	8019728 <_realloc_r+0x1c>
 8019754:	4635      	mov	r5, r6
 8019756:	e7e7      	b.n	8019728 <_realloc_r+0x1c>

08019758 <__sfputc_r>:
 8019758:	6893      	ldr	r3, [r2, #8]
 801975a:	3b01      	subs	r3, #1
 801975c:	2b00      	cmp	r3, #0
 801975e:	b410      	push	{r4}
 8019760:	6093      	str	r3, [r2, #8]
 8019762:	da08      	bge.n	8019776 <__sfputc_r+0x1e>
 8019764:	6994      	ldr	r4, [r2, #24]
 8019766:	42a3      	cmp	r3, r4
 8019768:	db01      	blt.n	801976e <__sfputc_r+0x16>
 801976a:	290a      	cmp	r1, #10
 801976c:	d103      	bne.n	8019776 <__sfputc_r+0x1e>
 801976e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019772:	f000 b94b 	b.w	8019a0c <__swbuf_r>
 8019776:	6813      	ldr	r3, [r2, #0]
 8019778:	1c58      	adds	r0, r3, #1
 801977a:	6010      	str	r0, [r2, #0]
 801977c:	7019      	strb	r1, [r3, #0]
 801977e:	4608      	mov	r0, r1
 8019780:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019784:	4770      	bx	lr

08019786 <__sfputs_r>:
 8019786:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019788:	4606      	mov	r6, r0
 801978a:	460f      	mov	r7, r1
 801978c:	4614      	mov	r4, r2
 801978e:	18d5      	adds	r5, r2, r3
 8019790:	42ac      	cmp	r4, r5
 8019792:	d101      	bne.n	8019798 <__sfputs_r+0x12>
 8019794:	2000      	movs	r0, #0
 8019796:	e007      	b.n	80197a8 <__sfputs_r+0x22>
 8019798:	f814 1b01 	ldrb.w	r1, [r4], #1
 801979c:	463a      	mov	r2, r7
 801979e:	4630      	mov	r0, r6
 80197a0:	f7ff ffda 	bl	8019758 <__sfputc_r>
 80197a4:	1c43      	adds	r3, r0, #1
 80197a6:	d1f3      	bne.n	8019790 <__sfputs_r+0xa>
 80197a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080197ac <_vfiprintf_r>:
 80197ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80197b0:	460d      	mov	r5, r1
 80197b2:	b09d      	sub	sp, #116	; 0x74
 80197b4:	4614      	mov	r4, r2
 80197b6:	4698      	mov	r8, r3
 80197b8:	4606      	mov	r6, r0
 80197ba:	b118      	cbz	r0, 80197c4 <_vfiprintf_r+0x18>
 80197bc:	6983      	ldr	r3, [r0, #24]
 80197be:	b90b      	cbnz	r3, 80197c4 <_vfiprintf_r+0x18>
 80197c0:	f7fd fb7e 	bl	8016ec0 <__sinit>
 80197c4:	4b89      	ldr	r3, [pc, #548]	; (80199ec <_vfiprintf_r+0x240>)
 80197c6:	429d      	cmp	r5, r3
 80197c8:	d11b      	bne.n	8019802 <_vfiprintf_r+0x56>
 80197ca:	6875      	ldr	r5, [r6, #4]
 80197cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80197ce:	07d9      	lsls	r1, r3, #31
 80197d0:	d405      	bmi.n	80197de <_vfiprintf_r+0x32>
 80197d2:	89ab      	ldrh	r3, [r5, #12]
 80197d4:	059a      	lsls	r2, r3, #22
 80197d6:	d402      	bmi.n	80197de <_vfiprintf_r+0x32>
 80197d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80197da:	f7fd fc4e 	bl	801707a <__retarget_lock_acquire_recursive>
 80197de:	89ab      	ldrh	r3, [r5, #12]
 80197e0:	071b      	lsls	r3, r3, #28
 80197e2:	d501      	bpl.n	80197e8 <_vfiprintf_r+0x3c>
 80197e4:	692b      	ldr	r3, [r5, #16]
 80197e6:	b9eb      	cbnz	r3, 8019824 <_vfiprintf_r+0x78>
 80197e8:	4629      	mov	r1, r5
 80197ea:	4630      	mov	r0, r6
 80197ec:	f000 f96e 	bl	8019acc <__swsetup_r>
 80197f0:	b1c0      	cbz	r0, 8019824 <_vfiprintf_r+0x78>
 80197f2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80197f4:	07dc      	lsls	r4, r3, #31
 80197f6:	d50e      	bpl.n	8019816 <_vfiprintf_r+0x6a>
 80197f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80197fc:	b01d      	add	sp, #116	; 0x74
 80197fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019802:	4b7b      	ldr	r3, [pc, #492]	; (80199f0 <_vfiprintf_r+0x244>)
 8019804:	429d      	cmp	r5, r3
 8019806:	d101      	bne.n	801980c <_vfiprintf_r+0x60>
 8019808:	68b5      	ldr	r5, [r6, #8]
 801980a:	e7df      	b.n	80197cc <_vfiprintf_r+0x20>
 801980c:	4b79      	ldr	r3, [pc, #484]	; (80199f4 <_vfiprintf_r+0x248>)
 801980e:	429d      	cmp	r5, r3
 8019810:	bf08      	it	eq
 8019812:	68f5      	ldreq	r5, [r6, #12]
 8019814:	e7da      	b.n	80197cc <_vfiprintf_r+0x20>
 8019816:	89ab      	ldrh	r3, [r5, #12]
 8019818:	0598      	lsls	r0, r3, #22
 801981a:	d4ed      	bmi.n	80197f8 <_vfiprintf_r+0x4c>
 801981c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801981e:	f7fd fc2d 	bl	801707c <__retarget_lock_release_recursive>
 8019822:	e7e9      	b.n	80197f8 <_vfiprintf_r+0x4c>
 8019824:	2300      	movs	r3, #0
 8019826:	9309      	str	r3, [sp, #36]	; 0x24
 8019828:	2320      	movs	r3, #32
 801982a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801982e:	f8cd 800c 	str.w	r8, [sp, #12]
 8019832:	2330      	movs	r3, #48	; 0x30
 8019834:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80199f8 <_vfiprintf_r+0x24c>
 8019838:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801983c:	f04f 0901 	mov.w	r9, #1
 8019840:	4623      	mov	r3, r4
 8019842:	469a      	mov	sl, r3
 8019844:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019848:	b10a      	cbz	r2, 801984e <_vfiprintf_r+0xa2>
 801984a:	2a25      	cmp	r2, #37	; 0x25
 801984c:	d1f9      	bne.n	8019842 <_vfiprintf_r+0x96>
 801984e:	ebba 0b04 	subs.w	fp, sl, r4
 8019852:	d00b      	beq.n	801986c <_vfiprintf_r+0xc0>
 8019854:	465b      	mov	r3, fp
 8019856:	4622      	mov	r2, r4
 8019858:	4629      	mov	r1, r5
 801985a:	4630      	mov	r0, r6
 801985c:	f7ff ff93 	bl	8019786 <__sfputs_r>
 8019860:	3001      	adds	r0, #1
 8019862:	f000 80aa 	beq.w	80199ba <_vfiprintf_r+0x20e>
 8019866:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019868:	445a      	add	r2, fp
 801986a:	9209      	str	r2, [sp, #36]	; 0x24
 801986c:	f89a 3000 	ldrb.w	r3, [sl]
 8019870:	2b00      	cmp	r3, #0
 8019872:	f000 80a2 	beq.w	80199ba <_vfiprintf_r+0x20e>
 8019876:	2300      	movs	r3, #0
 8019878:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801987c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019880:	f10a 0a01 	add.w	sl, sl, #1
 8019884:	9304      	str	r3, [sp, #16]
 8019886:	9307      	str	r3, [sp, #28]
 8019888:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801988c:	931a      	str	r3, [sp, #104]	; 0x68
 801988e:	4654      	mov	r4, sl
 8019890:	2205      	movs	r2, #5
 8019892:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019896:	4858      	ldr	r0, [pc, #352]	; (80199f8 <_vfiprintf_r+0x24c>)
 8019898:	f7e6 fca2 	bl	80001e0 <memchr>
 801989c:	9a04      	ldr	r2, [sp, #16]
 801989e:	b9d8      	cbnz	r0, 80198d8 <_vfiprintf_r+0x12c>
 80198a0:	06d1      	lsls	r1, r2, #27
 80198a2:	bf44      	itt	mi
 80198a4:	2320      	movmi	r3, #32
 80198a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80198aa:	0713      	lsls	r3, r2, #28
 80198ac:	bf44      	itt	mi
 80198ae:	232b      	movmi	r3, #43	; 0x2b
 80198b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80198b4:	f89a 3000 	ldrb.w	r3, [sl]
 80198b8:	2b2a      	cmp	r3, #42	; 0x2a
 80198ba:	d015      	beq.n	80198e8 <_vfiprintf_r+0x13c>
 80198bc:	9a07      	ldr	r2, [sp, #28]
 80198be:	4654      	mov	r4, sl
 80198c0:	2000      	movs	r0, #0
 80198c2:	f04f 0c0a 	mov.w	ip, #10
 80198c6:	4621      	mov	r1, r4
 80198c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80198cc:	3b30      	subs	r3, #48	; 0x30
 80198ce:	2b09      	cmp	r3, #9
 80198d0:	d94e      	bls.n	8019970 <_vfiprintf_r+0x1c4>
 80198d2:	b1b0      	cbz	r0, 8019902 <_vfiprintf_r+0x156>
 80198d4:	9207      	str	r2, [sp, #28]
 80198d6:	e014      	b.n	8019902 <_vfiprintf_r+0x156>
 80198d8:	eba0 0308 	sub.w	r3, r0, r8
 80198dc:	fa09 f303 	lsl.w	r3, r9, r3
 80198e0:	4313      	orrs	r3, r2
 80198e2:	9304      	str	r3, [sp, #16]
 80198e4:	46a2      	mov	sl, r4
 80198e6:	e7d2      	b.n	801988e <_vfiprintf_r+0xe2>
 80198e8:	9b03      	ldr	r3, [sp, #12]
 80198ea:	1d19      	adds	r1, r3, #4
 80198ec:	681b      	ldr	r3, [r3, #0]
 80198ee:	9103      	str	r1, [sp, #12]
 80198f0:	2b00      	cmp	r3, #0
 80198f2:	bfbb      	ittet	lt
 80198f4:	425b      	neglt	r3, r3
 80198f6:	f042 0202 	orrlt.w	r2, r2, #2
 80198fa:	9307      	strge	r3, [sp, #28]
 80198fc:	9307      	strlt	r3, [sp, #28]
 80198fe:	bfb8      	it	lt
 8019900:	9204      	strlt	r2, [sp, #16]
 8019902:	7823      	ldrb	r3, [r4, #0]
 8019904:	2b2e      	cmp	r3, #46	; 0x2e
 8019906:	d10c      	bne.n	8019922 <_vfiprintf_r+0x176>
 8019908:	7863      	ldrb	r3, [r4, #1]
 801990a:	2b2a      	cmp	r3, #42	; 0x2a
 801990c:	d135      	bne.n	801997a <_vfiprintf_r+0x1ce>
 801990e:	9b03      	ldr	r3, [sp, #12]
 8019910:	1d1a      	adds	r2, r3, #4
 8019912:	681b      	ldr	r3, [r3, #0]
 8019914:	9203      	str	r2, [sp, #12]
 8019916:	2b00      	cmp	r3, #0
 8019918:	bfb8      	it	lt
 801991a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801991e:	3402      	adds	r4, #2
 8019920:	9305      	str	r3, [sp, #20]
 8019922:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8019a08 <_vfiprintf_r+0x25c>
 8019926:	7821      	ldrb	r1, [r4, #0]
 8019928:	2203      	movs	r2, #3
 801992a:	4650      	mov	r0, sl
 801992c:	f7e6 fc58 	bl	80001e0 <memchr>
 8019930:	b140      	cbz	r0, 8019944 <_vfiprintf_r+0x198>
 8019932:	2340      	movs	r3, #64	; 0x40
 8019934:	eba0 000a 	sub.w	r0, r0, sl
 8019938:	fa03 f000 	lsl.w	r0, r3, r0
 801993c:	9b04      	ldr	r3, [sp, #16]
 801993e:	4303      	orrs	r3, r0
 8019940:	3401      	adds	r4, #1
 8019942:	9304      	str	r3, [sp, #16]
 8019944:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019948:	482c      	ldr	r0, [pc, #176]	; (80199fc <_vfiprintf_r+0x250>)
 801994a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801994e:	2206      	movs	r2, #6
 8019950:	f7e6 fc46 	bl	80001e0 <memchr>
 8019954:	2800      	cmp	r0, #0
 8019956:	d03f      	beq.n	80199d8 <_vfiprintf_r+0x22c>
 8019958:	4b29      	ldr	r3, [pc, #164]	; (8019a00 <_vfiprintf_r+0x254>)
 801995a:	bb1b      	cbnz	r3, 80199a4 <_vfiprintf_r+0x1f8>
 801995c:	9b03      	ldr	r3, [sp, #12]
 801995e:	3307      	adds	r3, #7
 8019960:	f023 0307 	bic.w	r3, r3, #7
 8019964:	3308      	adds	r3, #8
 8019966:	9303      	str	r3, [sp, #12]
 8019968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801996a:	443b      	add	r3, r7
 801996c:	9309      	str	r3, [sp, #36]	; 0x24
 801996e:	e767      	b.n	8019840 <_vfiprintf_r+0x94>
 8019970:	fb0c 3202 	mla	r2, ip, r2, r3
 8019974:	460c      	mov	r4, r1
 8019976:	2001      	movs	r0, #1
 8019978:	e7a5      	b.n	80198c6 <_vfiprintf_r+0x11a>
 801997a:	2300      	movs	r3, #0
 801997c:	3401      	adds	r4, #1
 801997e:	9305      	str	r3, [sp, #20]
 8019980:	4619      	mov	r1, r3
 8019982:	f04f 0c0a 	mov.w	ip, #10
 8019986:	4620      	mov	r0, r4
 8019988:	f810 2b01 	ldrb.w	r2, [r0], #1
 801998c:	3a30      	subs	r2, #48	; 0x30
 801998e:	2a09      	cmp	r2, #9
 8019990:	d903      	bls.n	801999a <_vfiprintf_r+0x1ee>
 8019992:	2b00      	cmp	r3, #0
 8019994:	d0c5      	beq.n	8019922 <_vfiprintf_r+0x176>
 8019996:	9105      	str	r1, [sp, #20]
 8019998:	e7c3      	b.n	8019922 <_vfiprintf_r+0x176>
 801999a:	fb0c 2101 	mla	r1, ip, r1, r2
 801999e:	4604      	mov	r4, r0
 80199a0:	2301      	movs	r3, #1
 80199a2:	e7f0      	b.n	8019986 <_vfiprintf_r+0x1da>
 80199a4:	ab03      	add	r3, sp, #12
 80199a6:	9300      	str	r3, [sp, #0]
 80199a8:	462a      	mov	r2, r5
 80199aa:	4b16      	ldr	r3, [pc, #88]	; (8019a04 <_vfiprintf_r+0x258>)
 80199ac:	a904      	add	r1, sp, #16
 80199ae:	4630      	mov	r0, r6
 80199b0:	f7fd fcd6 	bl	8017360 <_printf_float>
 80199b4:	4607      	mov	r7, r0
 80199b6:	1c78      	adds	r0, r7, #1
 80199b8:	d1d6      	bne.n	8019968 <_vfiprintf_r+0x1bc>
 80199ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80199bc:	07d9      	lsls	r1, r3, #31
 80199be:	d405      	bmi.n	80199cc <_vfiprintf_r+0x220>
 80199c0:	89ab      	ldrh	r3, [r5, #12]
 80199c2:	059a      	lsls	r2, r3, #22
 80199c4:	d402      	bmi.n	80199cc <_vfiprintf_r+0x220>
 80199c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80199c8:	f7fd fb58 	bl	801707c <__retarget_lock_release_recursive>
 80199cc:	89ab      	ldrh	r3, [r5, #12]
 80199ce:	065b      	lsls	r3, r3, #25
 80199d0:	f53f af12 	bmi.w	80197f8 <_vfiprintf_r+0x4c>
 80199d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80199d6:	e711      	b.n	80197fc <_vfiprintf_r+0x50>
 80199d8:	ab03      	add	r3, sp, #12
 80199da:	9300      	str	r3, [sp, #0]
 80199dc:	462a      	mov	r2, r5
 80199de:	4b09      	ldr	r3, [pc, #36]	; (8019a04 <_vfiprintf_r+0x258>)
 80199e0:	a904      	add	r1, sp, #16
 80199e2:	4630      	mov	r0, r6
 80199e4:	f7fd ff60 	bl	80178a8 <_printf_i>
 80199e8:	e7e4      	b.n	80199b4 <_vfiprintf_r+0x208>
 80199ea:	bf00      	nop
 80199ec:	0801e728 	.word	0x0801e728
 80199f0:	0801e748 	.word	0x0801e748
 80199f4:	0801e708 	.word	0x0801e708
 80199f8:	0801e9bc 	.word	0x0801e9bc
 80199fc:	0801e9c6 	.word	0x0801e9c6
 8019a00:	08017361 	.word	0x08017361
 8019a04:	08019787 	.word	0x08019787
 8019a08:	0801e9c2 	.word	0x0801e9c2

08019a0c <__swbuf_r>:
 8019a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019a0e:	460e      	mov	r6, r1
 8019a10:	4614      	mov	r4, r2
 8019a12:	4605      	mov	r5, r0
 8019a14:	b118      	cbz	r0, 8019a1e <__swbuf_r+0x12>
 8019a16:	6983      	ldr	r3, [r0, #24]
 8019a18:	b90b      	cbnz	r3, 8019a1e <__swbuf_r+0x12>
 8019a1a:	f7fd fa51 	bl	8016ec0 <__sinit>
 8019a1e:	4b21      	ldr	r3, [pc, #132]	; (8019aa4 <__swbuf_r+0x98>)
 8019a20:	429c      	cmp	r4, r3
 8019a22:	d12b      	bne.n	8019a7c <__swbuf_r+0x70>
 8019a24:	686c      	ldr	r4, [r5, #4]
 8019a26:	69a3      	ldr	r3, [r4, #24]
 8019a28:	60a3      	str	r3, [r4, #8]
 8019a2a:	89a3      	ldrh	r3, [r4, #12]
 8019a2c:	071a      	lsls	r2, r3, #28
 8019a2e:	d52f      	bpl.n	8019a90 <__swbuf_r+0x84>
 8019a30:	6923      	ldr	r3, [r4, #16]
 8019a32:	b36b      	cbz	r3, 8019a90 <__swbuf_r+0x84>
 8019a34:	6923      	ldr	r3, [r4, #16]
 8019a36:	6820      	ldr	r0, [r4, #0]
 8019a38:	1ac0      	subs	r0, r0, r3
 8019a3a:	6963      	ldr	r3, [r4, #20]
 8019a3c:	b2f6      	uxtb	r6, r6
 8019a3e:	4283      	cmp	r3, r0
 8019a40:	4637      	mov	r7, r6
 8019a42:	dc04      	bgt.n	8019a4e <__swbuf_r+0x42>
 8019a44:	4621      	mov	r1, r4
 8019a46:	4628      	mov	r0, r5
 8019a48:	f7ff f8ac 	bl	8018ba4 <_fflush_r>
 8019a4c:	bb30      	cbnz	r0, 8019a9c <__swbuf_r+0x90>
 8019a4e:	68a3      	ldr	r3, [r4, #8]
 8019a50:	3b01      	subs	r3, #1
 8019a52:	60a3      	str	r3, [r4, #8]
 8019a54:	6823      	ldr	r3, [r4, #0]
 8019a56:	1c5a      	adds	r2, r3, #1
 8019a58:	6022      	str	r2, [r4, #0]
 8019a5a:	701e      	strb	r6, [r3, #0]
 8019a5c:	6963      	ldr	r3, [r4, #20]
 8019a5e:	3001      	adds	r0, #1
 8019a60:	4283      	cmp	r3, r0
 8019a62:	d004      	beq.n	8019a6e <__swbuf_r+0x62>
 8019a64:	89a3      	ldrh	r3, [r4, #12]
 8019a66:	07db      	lsls	r3, r3, #31
 8019a68:	d506      	bpl.n	8019a78 <__swbuf_r+0x6c>
 8019a6a:	2e0a      	cmp	r6, #10
 8019a6c:	d104      	bne.n	8019a78 <__swbuf_r+0x6c>
 8019a6e:	4621      	mov	r1, r4
 8019a70:	4628      	mov	r0, r5
 8019a72:	f7ff f897 	bl	8018ba4 <_fflush_r>
 8019a76:	b988      	cbnz	r0, 8019a9c <__swbuf_r+0x90>
 8019a78:	4638      	mov	r0, r7
 8019a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019a7c:	4b0a      	ldr	r3, [pc, #40]	; (8019aa8 <__swbuf_r+0x9c>)
 8019a7e:	429c      	cmp	r4, r3
 8019a80:	d101      	bne.n	8019a86 <__swbuf_r+0x7a>
 8019a82:	68ac      	ldr	r4, [r5, #8]
 8019a84:	e7cf      	b.n	8019a26 <__swbuf_r+0x1a>
 8019a86:	4b09      	ldr	r3, [pc, #36]	; (8019aac <__swbuf_r+0xa0>)
 8019a88:	429c      	cmp	r4, r3
 8019a8a:	bf08      	it	eq
 8019a8c:	68ec      	ldreq	r4, [r5, #12]
 8019a8e:	e7ca      	b.n	8019a26 <__swbuf_r+0x1a>
 8019a90:	4621      	mov	r1, r4
 8019a92:	4628      	mov	r0, r5
 8019a94:	f000 f81a 	bl	8019acc <__swsetup_r>
 8019a98:	2800      	cmp	r0, #0
 8019a9a:	d0cb      	beq.n	8019a34 <__swbuf_r+0x28>
 8019a9c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8019aa0:	e7ea      	b.n	8019a78 <__swbuf_r+0x6c>
 8019aa2:	bf00      	nop
 8019aa4:	0801e728 	.word	0x0801e728
 8019aa8:	0801e748 	.word	0x0801e748
 8019aac:	0801e708 	.word	0x0801e708

08019ab0 <__ascii_wctomb>:
 8019ab0:	b149      	cbz	r1, 8019ac6 <__ascii_wctomb+0x16>
 8019ab2:	2aff      	cmp	r2, #255	; 0xff
 8019ab4:	bf85      	ittet	hi
 8019ab6:	238a      	movhi	r3, #138	; 0x8a
 8019ab8:	6003      	strhi	r3, [r0, #0]
 8019aba:	700a      	strbls	r2, [r1, #0]
 8019abc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8019ac0:	bf98      	it	ls
 8019ac2:	2001      	movls	r0, #1
 8019ac4:	4770      	bx	lr
 8019ac6:	4608      	mov	r0, r1
 8019ac8:	4770      	bx	lr
	...

08019acc <__swsetup_r>:
 8019acc:	4b32      	ldr	r3, [pc, #200]	; (8019b98 <__swsetup_r+0xcc>)
 8019ace:	b570      	push	{r4, r5, r6, lr}
 8019ad0:	681d      	ldr	r5, [r3, #0]
 8019ad2:	4606      	mov	r6, r0
 8019ad4:	460c      	mov	r4, r1
 8019ad6:	b125      	cbz	r5, 8019ae2 <__swsetup_r+0x16>
 8019ad8:	69ab      	ldr	r3, [r5, #24]
 8019ada:	b913      	cbnz	r3, 8019ae2 <__swsetup_r+0x16>
 8019adc:	4628      	mov	r0, r5
 8019ade:	f7fd f9ef 	bl	8016ec0 <__sinit>
 8019ae2:	4b2e      	ldr	r3, [pc, #184]	; (8019b9c <__swsetup_r+0xd0>)
 8019ae4:	429c      	cmp	r4, r3
 8019ae6:	d10f      	bne.n	8019b08 <__swsetup_r+0x3c>
 8019ae8:	686c      	ldr	r4, [r5, #4]
 8019aea:	89a3      	ldrh	r3, [r4, #12]
 8019aec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019af0:	0719      	lsls	r1, r3, #28
 8019af2:	d42c      	bmi.n	8019b4e <__swsetup_r+0x82>
 8019af4:	06dd      	lsls	r5, r3, #27
 8019af6:	d411      	bmi.n	8019b1c <__swsetup_r+0x50>
 8019af8:	2309      	movs	r3, #9
 8019afa:	6033      	str	r3, [r6, #0]
 8019afc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8019b00:	81a3      	strh	r3, [r4, #12]
 8019b02:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019b06:	e03e      	b.n	8019b86 <__swsetup_r+0xba>
 8019b08:	4b25      	ldr	r3, [pc, #148]	; (8019ba0 <__swsetup_r+0xd4>)
 8019b0a:	429c      	cmp	r4, r3
 8019b0c:	d101      	bne.n	8019b12 <__swsetup_r+0x46>
 8019b0e:	68ac      	ldr	r4, [r5, #8]
 8019b10:	e7eb      	b.n	8019aea <__swsetup_r+0x1e>
 8019b12:	4b24      	ldr	r3, [pc, #144]	; (8019ba4 <__swsetup_r+0xd8>)
 8019b14:	429c      	cmp	r4, r3
 8019b16:	bf08      	it	eq
 8019b18:	68ec      	ldreq	r4, [r5, #12]
 8019b1a:	e7e6      	b.n	8019aea <__swsetup_r+0x1e>
 8019b1c:	0758      	lsls	r0, r3, #29
 8019b1e:	d512      	bpl.n	8019b46 <__swsetup_r+0x7a>
 8019b20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019b22:	b141      	cbz	r1, 8019b36 <__swsetup_r+0x6a>
 8019b24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019b28:	4299      	cmp	r1, r3
 8019b2a:	d002      	beq.n	8019b32 <__swsetup_r+0x66>
 8019b2c:	4630      	mov	r0, r6
 8019b2e:	f7fd facd 	bl	80170cc <_free_r>
 8019b32:	2300      	movs	r3, #0
 8019b34:	6363      	str	r3, [r4, #52]	; 0x34
 8019b36:	89a3      	ldrh	r3, [r4, #12]
 8019b38:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8019b3c:	81a3      	strh	r3, [r4, #12]
 8019b3e:	2300      	movs	r3, #0
 8019b40:	6063      	str	r3, [r4, #4]
 8019b42:	6923      	ldr	r3, [r4, #16]
 8019b44:	6023      	str	r3, [r4, #0]
 8019b46:	89a3      	ldrh	r3, [r4, #12]
 8019b48:	f043 0308 	orr.w	r3, r3, #8
 8019b4c:	81a3      	strh	r3, [r4, #12]
 8019b4e:	6923      	ldr	r3, [r4, #16]
 8019b50:	b94b      	cbnz	r3, 8019b66 <__swsetup_r+0x9a>
 8019b52:	89a3      	ldrh	r3, [r4, #12]
 8019b54:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019b58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019b5c:	d003      	beq.n	8019b66 <__swsetup_r+0x9a>
 8019b5e:	4621      	mov	r1, r4
 8019b60:	4630      	mov	r0, r6
 8019b62:	f000 f84d 	bl	8019c00 <__smakebuf_r>
 8019b66:	89a0      	ldrh	r0, [r4, #12]
 8019b68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8019b6c:	f010 0301 	ands.w	r3, r0, #1
 8019b70:	d00a      	beq.n	8019b88 <__swsetup_r+0xbc>
 8019b72:	2300      	movs	r3, #0
 8019b74:	60a3      	str	r3, [r4, #8]
 8019b76:	6963      	ldr	r3, [r4, #20]
 8019b78:	425b      	negs	r3, r3
 8019b7a:	61a3      	str	r3, [r4, #24]
 8019b7c:	6923      	ldr	r3, [r4, #16]
 8019b7e:	b943      	cbnz	r3, 8019b92 <__swsetup_r+0xc6>
 8019b80:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8019b84:	d1ba      	bne.n	8019afc <__swsetup_r+0x30>
 8019b86:	bd70      	pop	{r4, r5, r6, pc}
 8019b88:	0781      	lsls	r1, r0, #30
 8019b8a:	bf58      	it	pl
 8019b8c:	6963      	ldrpl	r3, [r4, #20]
 8019b8e:	60a3      	str	r3, [r4, #8]
 8019b90:	e7f4      	b.n	8019b7c <__swsetup_r+0xb0>
 8019b92:	2000      	movs	r0, #0
 8019b94:	e7f7      	b.n	8019b86 <__swsetup_r+0xba>
 8019b96:	bf00      	nop
 8019b98:	200001c8 	.word	0x200001c8
 8019b9c:	0801e728 	.word	0x0801e728
 8019ba0:	0801e748 	.word	0x0801e748
 8019ba4:	0801e708 	.word	0x0801e708

08019ba8 <abort>:
 8019ba8:	b508      	push	{r3, lr}
 8019baa:	2006      	movs	r0, #6
 8019bac:	f000 f898 	bl	8019ce0 <raise>
 8019bb0:	2001      	movs	r0, #1
 8019bb2:	f7eb fa93 	bl	80050dc <_exit>

08019bb6 <__swhatbuf_r>:
 8019bb6:	b570      	push	{r4, r5, r6, lr}
 8019bb8:	460e      	mov	r6, r1
 8019bba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019bbe:	2900      	cmp	r1, #0
 8019bc0:	b096      	sub	sp, #88	; 0x58
 8019bc2:	4614      	mov	r4, r2
 8019bc4:	461d      	mov	r5, r3
 8019bc6:	da07      	bge.n	8019bd8 <__swhatbuf_r+0x22>
 8019bc8:	2300      	movs	r3, #0
 8019bca:	602b      	str	r3, [r5, #0]
 8019bcc:	89b3      	ldrh	r3, [r6, #12]
 8019bce:	061a      	lsls	r2, r3, #24
 8019bd0:	d410      	bmi.n	8019bf4 <__swhatbuf_r+0x3e>
 8019bd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019bd6:	e00e      	b.n	8019bf6 <__swhatbuf_r+0x40>
 8019bd8:	466a      	mov	r2, sp
 8019bda:	f000 f89d 	bl	8019d18 <_fstat_r>
 8019bde:	2800      	cmp	r0, #0
 8019be0:	dbf2      	blt.n	8019bc8 <__swhatbuf_r+0x12>
 8019be2:	9a01      	ldr	r2, [sp, #4]
 8019be4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019be8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019bec:	425a      	negs	r2, r3
 8019bee:	415a      	adcs	r2, r3
 8019bf0:	602a      	str	r2, [r5, #0]
 8019bf2:	e7ee      	b.n	8019bd2 <__swhatbuf_r+0x1c>
 8019bf4:	2340      	movs	r3, #64	; 0x40
 8019bf6:	2000      	movs	r0, #0
 8019bf8:	6023      	str	r3, [r4, #0]
 8019bfa:	b016      	add	sp, #88	; 0x58
 8019bfc:	bd70      	pop	{r4, r5, r6, pc}
	...

08019c00 <__smakebuf_r>:
 8019c00:	898b      	ldrh	r3, [r1, #12]
 8019c02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019c04:	079d      	lsls	r5, r3, #30
 8019c06:	4606      	mov	r6, r0
 8019c08:	460c      	mov	r4, r1
 8019c0a:	d507      	bpl.n	8019c1c <__smakebuf_r+0x1c>
 8019c0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019c10:	6023      	str	r3, [r4, #0]
 8019c12:	6123      	str	r3, [r4, #16]
 8019c14:	2301      	movs	r3, #1
 8019c16:	6163      	str	r3, [r4, #20]
 8019c18:	b002      	add	sp, #8
 8019c1a:	bd70      	pop	{r4, r5, r6, pc}
 8019c1c:	ab01      	add	r3, sp, #4
 8019c1e:	466a      	mov	r2, sp
 8019c20:	f7ff ffc9 	bl	8019bb6 <__swhatbuf_r>
 8019c24:	9900      	ldr	r1, [sp, #0]
 8019c26:	4605      	mov	r5, r0
 8019c28:	4630      	mov	r0, r6
 8019c2a:	f7fd fa9f 	bl	801716c <_malloc_r>
 8019c2e:	b948      	cbnz	r0, 8019c44 <__smakebuf_r+0x44>
 8019c30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019c34:	059a      	lsls	r2, r3, #22
 8019c36:	d4ef      	bmi.n	8019c18 <__smakebuf_r+0x18>
 8019c38:	f023 0303 	bic.w	r3, r3, #3
 8019c3c:	f043 0302 	orr.w	r3, r3, #2
 8019c40:	81a3      	strh	r3, [r4, #12]
 8019c42:	e7e3      	b.n	8019c0c <__smakebuf_r+0xc>
 8019c44:	4b0d      	ldr	r3, [pc, #52]	; (8019c7c <__smakebuf_r+0x7c>)
 8019c46:	62b3      	str	r3, [r6, #40]	; 0x28
 8019c48:	89a3      	ldrh	r3, [r4, #12]
 8019c4a:	6020      	str	r0, [r4, #0]
 8019c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019c50:	81a3      	strh	r3, [r4, #12]
 8019c52:	9b00      	ldr	r3, [sp, #0]
 8019c54:	6163      	str	r3, [r4, #20]
 8019c56:	9b01      	ldr	r3, [sp, #4]
 8019c58:	6120      	str	r0, [r4, #16]
 8019c5a:	b15b      	cbz	r3, 8019c74 <__smakebuf_r+0x74>
 8019c5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019c60:	4630      	mov	r0, r6
 8019c62:	f000 f86b 	bl	8019d3c <_isatty_r>
 8019c66:	b128      	cbz	r0, 8019c74 <__smakebuf_r+0x74>
 8019c68:	89a3      	ldrh	r3, [r4, #12]
 8019c6a:	f023 0303 	bic.w	r3, r3, #3
 8019c6e:	f043 0301 	orr.w	r3, r3, #1
 8019c72:	81a3      	strh	r3, [r4, #12]
 8019c74:	89a0      	ldrh	r0, [r4, #12]
 8019c76:	4305      	orrs	r5, r0
 8019c78:	81a5      	strh	r5, [r4, #12]
 8019c7a:	e7cd      	b.n	8019c18 <__smakebuf_r+0x18>
 8019c7c:	08016e59 	.word	0x08016e59

08019c80 <_malloc_usable_size_r>:
 8019c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019c84:	1f18      	subs	r0, r3, #4
 8019c86:	2b00      	cmp	r3, #0
 8019c88:	bfbc      	itt	lt
 8019c8a:	580b      	ldrlt	r3, [r1, r0]
 8019c8c:	18c0      	addlt	r0, r0, r3
 8019c8e:	4770      	bx	lr

08019c90 <_raise_r>:
 8019c90:	291f      	cmp	r1, #31
 8019c92:	b538      	push	{r3, r4, r5, lr}
 8019c94:	4604      	mov	r4, r0
 8019c96:	460d      	mov	r5, r1
 8019c98:	d904      	bls.n	8019ca4 <_raise_r+0x14>
 8019c9a:	2316      	movs	r3, #22
 8019c9c:	6003      	str	r3, [r0, #0]
 8019c9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019ca2:	bd38      	pop	{r3, r4, r5, pc}
 8019ca4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8019ca6:	b112      	cbz	r2, 8019cae <_raise_r+0x1e>
 8019ca8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8019cac:	b94b      	cbnz	r3, 8019cc2 <_raise_r+0x32>
 8019cae:	4620      	mov	r0, r4
 8019cb0:	f000 f830 	bl	8019d14 <_getpid_r>
 8019cb4:	462a      	mov	r2, r5
 8019cb6:	4601      	mov	r1, r0
 8019cb8:	4620      	mov	r0, r4
 8019cba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019cbe:	f000 b817 	b.w	8019cf0 <_kill_r>
 8019cc2:	2b01      	cmp	r3, #1
 8019cc4:	d00a      	beq.n	8019cdc <_raise_r+0x4c>
 8019cc6:	1c59      	adds	r1, r3, #1
 8019cc8:	d103      	bne.n	8019cd2 <_raise_r+0x42>
 8019cca:	2316      	movs	r3, #22
 8019ccc:	6003      	str	r3, [r0, #0]
 8019cce:	2001      	movs	r0, #1
 8019cd0:	e7e7      	b.n	8019ca2 <_raise_r+0x12>
 8019cd2:	2400      	movs	r4, #0
 8019cd4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8019cd8:	4628      	mov	r0, r5
 8019cda:	4798      	blx	r3
 8019cdc:	2000      	movs	r0, #0
 8019cde:	e7e0      	b.n	8019ca2 <_raise_r+0x12>

08019ce0 <raise>:
 8019ce0:	4b02      	ldr	r3, [pc, #8]	; (8019cec <raise+0xc>)
 8019ce2:	4601      	mov	r1, r0
 8019ce4:	6818      	ldr	r0, [r3, #0]
 8019ce6:	f7ff bfd3 	b.w	8019c90 <_raise_r>
 8019cea:	bf00      	nop
 8019cec:	200001c8 	.word	0x200001c8

08019cf0 <_kill_r>:
 8019cf0:	b538      	push	{r3, r4, r5, lr}
 8019cf2:	4d07      	ldr	r5, [pc, #28]	; (8019d10 <_kill_r+0x20>)
 8019cf4:	2300      	movs	r3, #0
 8019cf6:	4604      	mov	r4, r0
 8019cf8:	4608      	mov	r0, r1
 8019cfa:	4611      	mov	r1, r2
 8019cfc:	602b      	str	r3, [r5, #0]
 8019cfe:	f7eb f9dd 	bl	80050bc <_kill>
 8019d02:	1c43      	adds	r3, r0, #1
 8019d04:	d102      	bne.n	8019d0c <_kill_r+0x1c>
 8019d06:	682b      	ldr	r3, [r5, #0]
 8019d08:	b103      	cbz	r3, 8019d0c <_kill_r+0x1c>
 8019d0a:	6023      	str	r3, [r4, #0]
 8019d0c:	bd38      	pop	{r3, r4, r5, pc}
 8019d0e:	bf00      	nop
 8019d10:	2001f05c 	.word	0x2001f05c

08019d14 <_getpid_r>:
 8019d14:	f7eb b9ca 	b.w	80050ac <_getpid>

08019d18 <_fstat_r>:
 8019d18:	b538      	push	{r3, r4, r5, lr}
 8019d1a:	4d07      	ldr	r5, [pc, #28]	; (8019d38 <_fstat_r+0x20>)
 8019d1c:	2300      	movs	r3, #0
 8019d1e:	4604      	mov	r4, r0
 8019d20:	4608      	mov	r0, r1
 8019d22:	4611      	mov	r1, r2
 8019d24:	602b      	str	r3, [r5, #0]
 8019d26:	f7eb fa28 	bl	800517a <_fstat>
 8019d2a:	1c43      	adds	r3, r0, #1
 8019d2c:	d102      	bne.n	8019d34 <_fstat_r+0x1c>
 8019d2e:	682b      	ldr	r3, [r5, #0]
 8019d30:	b103      	cbz	r3, 8019d34 <_fstat_r+0x1c>
 8019d32:	6023      	str	r3, [r4, #0]
 8019d34:	bd38      	pop	{r3, r4, r5, pc}
 8019d36:	bf00      	nop
 8019d38:	2001f05c 	.word	0x2001f05c

08019d3c <_isatty_r>:
 8019d3c:	b538      	push	{r3, r4, r5, lr}
 8019d3e:	4d06      	ldr	r5, [pc, #24]	; (8019d58 <_isatty_r+0x1c>)
 8019d40:	2300      	movs	r3, #0
 8019d42:	4604      	mov	r4, r0
 8019d44:	4608      	mov	r0, r1
 8019d46:	602b      	str	r3, [r5, #0]
 8019d48:	f7eb fa27 	bl	800519a <_isatty>
 8019d4c:	1c43      	adds	r3, r0, #1
 8019d4e:	d102      	bne.n	8019d56 <_isatty_r+0x1a>
 8019d50:	682b      	ldr	r3, [r5, #0]
 8019d52:	b103      	cbz	r3, 8019d56 <_isatty_r+0x1a>
 8019d54:	6023      	str	r3, [r4, #0]
 8019d56:	bd38      	pop	{r3, r4, r5, pc}
 8019d58:	2001f05c 	.word	0x2001f05c

08019d5c <_init>:
 8019d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d5e:	bf00      	nop
 8019d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d62:	bc08      	pop	{r3}
 8019d64:	469e      	mov	lr, r3
 8019d66:	4770      	bx	lr

08019d68 <_fini>:
 8019d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d6a:	bf00      	nop
 8019d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8019d6e:	bc08      	pop	{r3}
 8019d70:	469e      	mov	lr, r3
 8019d72:	4770      	bx	lr
