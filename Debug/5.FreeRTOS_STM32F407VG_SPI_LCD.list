
5.FreeRTOS_STM32F407VG_SPI_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018344  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000108c  080184d8  080184d8  000284d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019564  08019564  0003036c  2**0
                  CONTENTS
  4 .ARM          00000008  08019564  08019564  00029564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801956c  0801956c  0003036c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801956c  0801956c  0002956c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019570  08019570  00029570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000036c  20000000  08019574  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003036c  2**0
                  CONTENTS
 10 .bss          0001488c  20000370  20000370  00030370  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20014bfc  20014bfc  00030370  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003036c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003a911  00000000  00000000  0003039c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000715f  00000000  00000000  0006acad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000025a0  00000000  00000000  00071e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002310  00000000  00000000  000743b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bb28  00000000  00000000  000766c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00034c0f  00000000  00000000  000a21e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e63d6  00000000  00000000  000d6df7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001bd1cd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b060  00000000  00000000  001bd220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000370 	.word	0x20000370
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080184bc 	.word	0x080184bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000374 	.word	0x20000374
 80001cc:	080184bc 	.word	0x080184bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b96e 	b.w	8000f3c <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468c      	mov	ip, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	f040 8083 	bne.w	8000d8e <__udivmoddi4+0x116>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d947      	bls.n	8000d1e <__udivmoddi4+0xa6>
 8000c8e:	fab2 f282 	clz	r2, r2
 8000c92:	b142      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	f1c2 0020 	rsb	r0, r2, #32
 8000c98:	fa24 f000 	lsr.w	r0, r4, r0
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	4097      	lsls	r7, r2
 8000ca0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca4:	4094      	lsls	r4, r2
 8000ca6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000caa:	0c23      	lsrs	r3, r4, #16
 8000cac:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb0:	fa1f fe87 	uxth.w	lr, r7
 8000cb4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cb8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbc:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc0:	4299      	cmp	r1, r3
 8000cc2:	d909      	bls.n	8000cd8 <__udivmoddi4+0x60>
 8000cc4:	18fb      	adds	r3, r7, r3
 8000cc6:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000cca:	f080 8119 	bcs.w	8000f00 <__udivmoddi4+0x288>
 8000cce:	4299      	cmp	r1, r3
 8000cd0:	f240 8116 	bls.w	8000f00 <__udivmoddi4+0x288>
 8000cd4:	3e02      	subs	r6, #2
 8000cd6:	443b      	add	r3, r7
 8000cd8:	1a5b      	subs	r3, r3, r1
 8000cda:	b2a4      	uxth	r4, r4
 8000cdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ce8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cec:	45a6      	cmp	lr, r4
 8000cee:	d909      	bls.n	8000d04 <__udivmoddi4+0x8c>
 8000cf0:	193c      	adds	r4, r7, r4
 8000cf2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000cf6:	f080 8105 	bcs.w	8000f04 <__udivmoddi4+0x28c>
 8000cfa:	45a6      	cmp	lr, r4
 8000cfc:	f240 8102 	bls.w	8000f04 <__udivmoddi4+0x28c>
 8000d00:	3802      	subs	r0, #2
 8000d02:	443c      	add	r4, r7
 8000d04:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d08:	eba4 040e 	sub.w	r4, r4, lr
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	b11d      	cbz	r5, 8000d18 <__udivmoddi4+0xa0>
 8000d10:	40d4      	lsrs	r4, r2
 8000d12:	2300      	movs	r3, #0
 8000d14:	e9c5 4300 	strd	r4, r3, [r5]
 8000d18:	4631      	mov	r1, r6
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	b902      	cbnz	r2, 8000d22 <__udivmoddi4+0xaa>
 8000d20:	deff      	udf	#255	; 0xff
 8000d22:	fab2 f282 	clz	r2, r2
 8000d26:	2a00      	cmp	r2, #0
 8000d28:	d150      	bne.n	8000dcc <__udivmoddi4+0x154>
 8000d2a:	1bcb      	subs	r3, r1, r7
 8000d2c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d30:	fa1f f887 	uxth.w	r8, r7
 8000d34:	2601      	movs	r6, #1
 8000d36:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3a:	0c21      	lsrs	r1, r4, #16
 8000d3c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d40:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d44:	fb08 f30c 	mul.w	r3, r8, ip
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0xe4>
 8000d4c:	1879      	adds	r1, r7, r1
 8000d4e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0xe2>
 8000d54:	428b      	cmp	r3, r1
 8000d56:	f200 80e9 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d5a:	4684      	mov	ip, r0
 8000d5c:	1ac9      	subs	r1, r1, r3
 8000d5e:	b2a3      	uxth	r3, r4
 8000d60:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d64:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d68:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d6c:	fb08 f800 	mul.w	r8, r8, r0
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	d907      	bls.n	8000d84 <__udivmoddi4+0x10c>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x10a>
 8000d7c:	45a0      	cmp	r8, r4
 8000d7e:	f200 80d9 	bhi.w	8000f34 <__udivmoddi4+0x2bc>
 8000d82:	4618      	mov	r0, r3
 8000d84:	eba4 0408 	sub.w	r4, r4, r8
 8000d88:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d8c:	e7bf      	b.n	8000d0e <__udivmoddi4+0x96>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d909      	bls.n	8000da6 <__udivmoddi4+0x12e>
 8000d92:	2d00      	cmp	r5, #0
 8000d94:	f000 80b1 	beq.w	8000efa <__udivmoddi4+0x282>
 8000d98:	2600      	movs	r6, #0
 8000d9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000d9e:	4630      	mov	r0, r6
 8000da0:	4631      	mov	r1, r6
 8000da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da6:	fab3 f683 	clz	r6, r3
 8000daa:	2e00      	cmp	r6, #0
 8000dac:	d14a      	bne.n	8000e44 <__udivmoddi4+0x1cc>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d302      	bcc.n	8000db8 <__udivmoddi4+0x140>
 8000db2:	4282      	cmp	r2, r0
 8000db4:	f200 80b8 	bhi.w	8000f28 <__udivmoddi4+0x2b0>
 8000db8:	1a84      	subs	r4, r0, r2
 8000dba:	eb61 0103 	sbc.w	r1, r1, r3
 8000dbe:	2001      	movs	r0, #1
 8000dc0:	468c      	mov	ip, r1
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	d0a8      	beq.n	8000d18 <__udivmoddi4+0xa0>
 8000dc6:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dca:	e7a5      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000dcc:	f1c2 0320 	rsb	r3, r2, #32
 8000dd0:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd4:	4097      	lsls	r7, r2
 8000dd6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dda:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dde:	40d9      	lsrs	r1, r3
 8000de0:	4330      	orrs	r0, r6
 8000de2:	0c03      	lsrs	r3, r0, #16
 8000de4:	fbb1 f6fe 	udiv	r6, r1, lr
 8000de8:	fa1f f887 	uxth.w	r8, r7
 8000dec:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df4:	fb06 f108 	mul.w	r1, r6, r8
 8000df8:	4299      	cmp	r1, r3
 8000dfa:	fa04 f402 	lsl.w	r4, r4, r2
 8000dfe:	d909      	bls.n	8000e14 <__udivmoddi4+0x19c>
 8000e00:	18fb      	adds	r3, r7, r3
 8000e02:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e06:	f080 808d 	bcs.w	8000f24 <__udivmoddi4+0x2ac>
 8000e0a:	4299      	cmp	r1, r3
 8000e0c:	f240 808a 	bls.w	8000f24 <__udivmoddi4+0x2ac>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	443b      	add	r3, r7
 8000e14:	1a5b      	subs	r3, r3, r1
 8000e16:	b281      	uxth	r1, r0
 8000e18:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e1c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e20:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e24:	fb00 f308 	mul.w	r3, r0, r8
 8000e28:	428b      	cmp	r3, r1
 8000e2a:	d907      	bls.n	8000e3c <__udivmoddi4+0x1c4>
 8000e2c:	1879      	adds	r1, r7, r1
 8000e2e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e32:	d273      	bcs.n	8000f1c <__udivmoddi4+0x2a4>
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d971      	bls.n	8000f1c <__udivmoddi4+0x2a4>
 8000e38:	3802      	subs	r0, #2
 8000e3a:	4439      	add	r1, r7
 8000e3c:	1acb      	subs	r3, r1, r3
 8000e3e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e42:	e778      	b.n	8000d36 <__udivmoddi4+0xbe>
 8000e44:	f1c6 0c20 	rsb	ip, r6, #32
 8000e48:	fa03 f406 	lsl.w	r4, r3, r6
 8000e4c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e50:	431c      	orrs	r4, r3
 8000e52:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e56:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e5e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e62:	431f      	orrs	r7, r3
 8000e64:	0c3b      	lsrs	r3, r7, #16
 8000e66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6a:	fa1f f884 	uxth.w	r8, r4
 8000e6e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e72:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e76:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7a:	458a      	cmp	sl, r1
 8000e7c:	fa02 f206 	lsl.w	r2, r2, r6
 8000e80:	fa00 f306 	lsl.w	r3, r0, r6
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x220>
 8000e86:	1861      	adds	r1, r4, r1
 8000e88:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000e8c:	d248      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000e8e:	458a      	cmp	sl, r1
 8000e90:	d946      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000e92:	f1a9 0902 	sub.w	r9, r9, #2
 8000e96:	4421      	add	r1, r4
 8000e98:	eba1 010a 	sub.w	r1, r1, sl
 8000e9c:	b2bf      	uxth	r7, r7
 8000e9e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ea6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eaa:	fb00 f808 	mul.w	r8, r0, r8
 8000eae:	45b8      	cmp	r8, r7
 8000eb0:	d907      	bls.n	8000ec2 <__udivmoddi4+0x24a>
 8000eb2:	19e7      	adds	r7, r4, r7
 8000eb4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000eb8:	d22e      	bcs.n	8000f18 <__udivmoddi4+0x2a0>
 8000eba:	45b8      	cmp	r8, r7
 8000ebc:	d92c      	bls.n	8000f18 <__udivmoddi4+0x2a0>
 8000ebe:	3802      	subs	r0, #2
 8000ec0:	4427      	add	r7, r4
 8000ec2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ec6:	eba7 0708 	sub.w	r7, r7, r8
 8000eca:	fba0 8902 	umull	r8, r9, r0, r2
 8000ece:	454f      	cmp	r7, r9
 8000ed0:	46c6      	mov	lr, r8
 8000ed2:	4649      	mov	r1, r9
 8000ed4:	d31a      	bcc.n	8000f0c <__udivmoddi4+0x294>
 8000ed6:	d017      	beq.n	8000f08 <__udivmoddi4+0x290>
 8000ed8:	b15d      	cbz	r5, 8000ef2 <__udivmoddi4+0x27a>
 8000eda:	ebb3 020e 	subs.w	r2, r3, lr
 8000ede:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee2:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ee6:	40f2      	lsrs	r2, r6
 8000ee8:	ea4c 0202 	orr.w	r2, ip, r2
 8000eec:	40f7      	lsrs	r7, r6
 8000eee:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef2:	2600      	movs	r6, #0
 8000ef4:	4631      	mov	r1, r6
 8000ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efa:	462e      	mov	r6, r5
 8000efc:	4628      	mov	r0, r5
 8000efe:	e70b      	b.n	8000d18 <__udivmoddi4+0xa0>
 8000f00:	4606      	mov	r6, r0
 8000f02:	e6e9      	b.n	8000cd8 <__udivmoddi4+0x60>
 8000f04:	4618      	mov	r0, r3
 8000f06:	e6fd      	b.n	8000d04 <__udivmoddi4+0x8c>
 8000f08:	4543      	cmp	r3, r8
 8000f0a:	d2e5      	bcs.n	8000ed8 <__udivmoddi4+0x260>
 8000f0c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f10:	eb69 0104 	sbc.w	r1, r9, r4
 8000f14:	3801      	subs	r0, #1
 8000f16:	e7df      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f18:	4608      	mov	r0, r1
 8000f1a:	e7d2      	b.n	8000ec2 <__udivmoddi4+0x24a>
 8000f1c:	4660      	mov	r0, ip
 8000f1e:	e78d      	b.n	8000e3c <__udivmoddi4+0x1c4>
 8000f20:	4681      	mov	r9, r0
 8000f22:	e7b9      	b.n	8000e98 <__udivmoddi4+0x220>
 8000f24:	4666      	mov	r6, ip
 8000f26:	e775      	b.n	8000e14 <__udivmoddi4+0x19c>
 8000f28:	4630      	mov	r0, r6
 8000f2a:	e74a      	b.n	8000dc2 <__udivmoddi4+0x14a>
 8000f2c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f30:	4439      	add	r1, r7
 8000f32:	e713      	b.n	8000d5c <__udivmoddi4+0xe4>
 8000f34:	3802      	subs	r0, #2
 8000f36:	443c      	add	r4, r7
 8000f38:	e724      	b.n	8000d84 <__udivmoddi4+0x10c>
 8000f3a:	bf00      	nop

08000f3c <__aeabi_idiv0>:
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop

08000f40 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8000f48:	2305      	movs	r3, #5
 8000f4a:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f001 f9ef 	bl	8002334 <null_ptr_check>
 8000f56:	4603      	mov	r3, r0
 8000f58:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8000f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d133      	bne.n	8000fca <bme280_init+0x8a>
		while (try_count) {
 8000f62:	e028      	b.n	8000fb6 <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000f64:	f107 010d 	add.w	r1, r7, #13
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	20d0      	movs	r0, #208	; 0xd0
 8000f6e:	f000 f832 	bl	8000fd6 <bme280_get_regs>
 8000f72:	4603      	mov	r3, r0
 8000f74:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8000f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d114      	bne.n	8000fa8 <bme280_init+0x68>
 8000f7e:	7b7b      	ldrb	r3, [r7, #13]
 8000f80:	2b60      	cmp	r3, #96	; 0x60
 8000f82:	d111      	bne.n	8000fa8 <bme280_init+0x68>
				dev->chip_id = chip_id;
 8000f84:	7b7a      	ldrb	r2, [r7, #13]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f000 f976 	bl	800127c <bme280_soft_reset>
 8000f90:	4603      	mov	r3, r0
 8000f92:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8000f94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d110      	bne.n	8000fbe <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f001 f83f 	bl	8002020 <get_calib_data>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8000fa6:	e00a      	b.n	8000fbe <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	2001      	movs	r0, #1
 8000fae:	4798      	blx	r3
			--try_count;
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8000fb6:	7bbb      	ldrb	r3, [r7, #14]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1d3      	bne.n	8000f64 <bme280_init+0x24>
 8000fbc:	e000      	b.n	8000fc0 <bme280_init+0x80>
				break;
 8000fbe:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8000fc0:	7bbb      	ldrb	r3, [r7, #14]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d101      	bne.n	8000fca <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8000fc6:	23fe      	movs	r3, #254	; 0xfe
 8000fc8:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8000fd6:	b590      	push	{r4, r7, lr}
 8000fd8:	b087      	sub	sp, #28
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	60b9      	str	r1, [r7, #8]
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000fe8:	6878      	ldr	r0, [r7, #4]
 8000fea:	f001 f9a3 	bl	8002334 <null_ptr_check>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8000ff2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d117      	bne.n	800102a <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	789b      	ldrb	r3, [r3, #2]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d003      	beq.n	800100a <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8001002:	7bfb      	ldrb	r3, [r7, #15]
 8001004:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001008:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685c      	ldr	r4, [r3, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	7858      	ldrb	r0, [r3, #1]
 8001012:	89bb      	ldrh	r3, [r7, #12]
 8001014:	7bf9      	ldrb	r1, [r7, #15]
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	47a0      	blx	r4
 800101a:	4603      	mov	r3, r0
 800101c:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 800101e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 8001026:	23fc      	movs	r3, #252	; 0xfc
 8001028:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800102a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800102e:	4618      	mov	r0, r3
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	bd90      	pop	{r4, r7, pc}

08001036 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8001036:	b590      	push	{r4, r7, lr}
 8001038:	b08d      	sub	sp, #52	; 0x34
 800103a:	af00      	add	r7, sp, #0
 800103c:	60f8      	str	r0, [r7, #12]
 800103e:	60b9      	str	r1, [r7, #8]
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	4613      	mov	r3, r2
 8001044:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	2b0a      	cmp	r3, #10
 800104a:	d901      	bls.n	8001050 <bme280_set_regs+0x1a>
		len = 10;
 800104c:	230a      	movs	r3, #10
 800104e:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001050:	6838      	ldr	r0, [r7, #0]
 8001052:	f001 f96f 	bl	8002334 <null_ptr_check>
 8001056:	4603      	mov	r3, r0
 8001058:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 800105c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001060:	2b00      	cmp	r3, #0
 8001062:	d154      	bne.n	800110e <bme280_set_regs+0xd8>
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d051      	beq.n	800110e <bme280_set_regs+0xd8>
 800106a:	68bb      	ldr	r3, [r7, #8]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d04e      	beq.n	800110e <bme280_set_regs+0xd8>
		if (len != 0) {
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d047      	beq.n	8001106 <bme280_set_regs+0xd0>
			temp_buff[0] = reg_data[0];
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	781b      	ldrb	r3, [r3, #0]
 800107a:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	789b      	ldrb	r3, [r3, #2]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d01a      	beq.n	80010ba <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 8001084:	2300      	movs	r3, #0
 8001086:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800108a:	e011      	b.n	80010b0 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 800108c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	4413      	add	r3, r2
 8001094:	781a      	ldrb	r2, [r3, #0]
 8001096:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800109a:	68f9      	ldr	r1, [r7, #12]
 800109c:	440b      	add	r3, r1
 800109e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010aa:	3301      	adds	r3, #1
 80010ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80010b0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	429a      	cmp	r2, r3
 80010b8:	d3e8      	bcc.n	800108c <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d90b      	bls.n	80010d8 <bme280_set_regs+0xa2>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f107 0114 	add.w	r1, r7, #20
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	68f8      	ldr	r0, [r7, #12]
 80010ca:	f000 ffee 	bl	80020aa <interleave_reg_addr>
				temp_len = len * 2;
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	005b      	lsls	r3, r3, #1
 80010d4:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80010d6:	e001      	b.n	80010dc <bme280_set_regs+0xa6>
			} else {
				temp_len = len;
 80010d8:	79fb      	ldrb	r3, [r7, #7]
 80010da:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	689c      	ldr	r4, [r3, #8]
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	7858      	ldrb	r0, [r3, #1]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	7819      	ldrb	r1, [r3, #0]
 80010e8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80010ea:	f107 0214 	add.w	r2, r7, #20
 80010ee:	47a0      	blx	r4
 80010f0:	4603      	mov	r3, r0
 80010f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 80010f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d00b      	beq.n	8001116 <bme280_set_regs+0xe0>
				rslt = BME280_E_COMM_FAIL;
 80010fe:	23fc      	movs	r3, #252	; 0xfc
 8001100:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8001104:	e007      	b.n	8001116 <bme280_set_regs+0xe0>
		} else {
			rslt = BME280_E_INVALID_LEN;
 8001106:	23fd      	movs	r3, #253	; 0xfd
 8001108:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 800110c:	e003      	b.n	8001116 <bme280_set_regs+0xe0>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800110e:	23ff      	movs	r3, #255	; 0xff
 8001110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001114:	e000      	b.n	8001118 <bme280_set_regs+0xe2>
		if (len != 0) {
 8001116:	bf00      	nop
	}


	return rslt;
 8001118:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800111c:	4618      	mov	r0, r3
 800111e:	3734      	adds	r7, #52	; 0x34
 8001120:	46bd      	mov	sp, r7
 8001122:	bd90      	pop	{r4, r7, pc}

08001124 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001130:	6838      	ldr	r0, [r7, #0]
 8001132:	f001 f8ff 	bl	8002334 <null_ptr_check>
 8001136:	4603      	mov	r3, r0
 8001138:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800113a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d13f      	bne.n	80011c2 <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8001142:	f107 030e 	add.w	r3, r7, #14
 8001146:	6839      	ldr	r1, [r7, #0]
 8001148:	4618      	mov	r0, r3
 800114a:	f000 f874 	bl	8001236 <bme280_get_sensor_mode>
 800114e:	4603      	mov	r3, r0
 8001150:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8001152:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d107      	bne.n	800116a <bme280_set_sensor_settings+0x46>
 800115a:	7bbb      	ldrb	r3, [r7, #14]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d004      	beq.n	800116a <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 8001160:	6838      	ldr	r0, [r7, #0]
 8001162:	f000 fb4e 	bl	8001802 <put_device_to_sleep>
 8001166:	4603      	mov	r3, r0
 8001168:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 800116a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d127      	bne.n	80011c2 <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	4619      	mov	r1, r3
 8001176:	2007      	movs	r0, #7
 8001178:	f001 f8c0 	bl	80022fc <are_settings_changed>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d009      	beq.n	8001196 <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8001188:	79fb      	ldrb	r3, [r7, #7]
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	4618      	mov	r0, r3
 800118e:	f000 f98a 	bl	80014a6 <set_osr_settings>
 8001192:	4603      	mov	r3, r0
 8001194:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 8001196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d111      	bne.n	80011c2 <bme280_set_sensor_settings+0x9e>
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	4619      	mov	r1, r3
 80011a2:	2018      	movs	r0, #24
 80011a4:	f001 f8aa 	bl	80022fc <are_settings_changed>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d009      	beq.n	80011c2 <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	683a      	ldr	r2, [r7, #0]
 80011b8:	4618      	mov	r0, r3
 80011ba:	f000 fa11 	bl	80015e0 <set_filter_standby_settings>
 80011be:	4603      	mov	r3, r0
 80011c0:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 80011c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3710      	adds	r7, #16
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	4603      	mov	r3, r0
 80011d6:	6039      	str	r1, [r7, #0]
 80011d8:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80011da:	6838      	ldr	r0, [r7, #0]
 80011dc:	f001 f8aa 	bl	8002334 <null_ptr_check>
 80011e0:	4603      	mov	r3, r0
 80011e2:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 80011e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d11e      	bne.n	800122a <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 80011ec:	f107 030e 	add.w	r3, r7, #14
 80011f0:	6839      	ldr	r1, [r7, #0]
 80011f2:	4618      	mov	r0, r3
 80011f4:	f000 f81f 	bl	8001236 <bme280_get_sensor_mode>
 80011f8:	4603      	mov	r3, r0
 80011fa:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 80011fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d107      	bne.n	8001214 <bme280_set_sensor_mode+0x46>
 8001204:	7bbb      	ldrb	r3, [r7, #14]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d004      	beq.n	8001214 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 800120a:	6838      	ldr	r0, [r7, #0]
 800120c:	f000 faf9 	bl	8001802 <put_device_to_sleep>
 8001210:	4603      	mov	r3, r0
 8001212:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8001214:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d106      	bne.n	800122a <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	6839      	ldr	r1, [r7, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f000 fabb 	bl	800179c <write_power_mode>
 8001226:	4603      	mov	r3, r0
 8001228:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800122a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800122e:	4618      	mov	r0, r3
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b084      	sub	sp, #16
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001240:	6838      	ldr	r0, [r7, #0]
 8001242:	f001 f877 	bl	8002334 <null_ptr_check>
 8001246:	4603      	mov	r3, r0
 8001248:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 800124a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d10e      	bne.n	8001270 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	2201      	movs	r2, #1
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	20f4      	movs	r0, #244	; 0xf4
 800125a:	f7ff febc 	bl	8000fd6 <bme280_get_regs>
 800125e:	4603      	mov	r3, r0
 8001260:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	b2da      	uxtb	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 8001270:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 8001284:	23e0      	movs	r3, #224	; 0xe0
 8001286:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 8001288:	23b6      	movs	r3, #182	; 0xb6
 800128a:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f001 f851 	bl	8002334 <null_ptr_check>
 8001292:	4603      	mov	r3, r0
 8001294:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001296:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10d      	bne.n	80012ba <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 800129e:	f107 010d 	add.w	r1, r7, #13
 80012a2:	f107 000e 	add.w	r0, r7, #14
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f7ff fec4 	bl	8001036 <bme280_set_regs>
 80012ae:	4603      	mov	r3, r0
 80012b0:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	2002      	movs	r0, #2
 80012b8:	4798      	blx	r3
	}

	return rslt;
 80012ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b08a      	sub	sp, #40	; 0x28
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	4603      	mov	r3, r0
 80012ce:	60b9      	str	r1, [r7, #8]
 80012d0:	607a      	str	r2, [r7, #4]
 80012d2:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 80012d4:	2300      	movs	r3, #0
 80012d6:	61fb      	str	r3, [r7, #28]
 80012d8:	2300      	movs	r3, #0
 80012da:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 80012dc:	f107 0310 	add.w	r3, r7, #16
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f001 f823 	bl	8002334 <null_ptr_check>
 80012ee:	4603      	mov	r3, r0
 80012f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 80012f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d124      	bne.n	8001346 <bme280_get_sensor_data+0x80>
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d021      	beq.n	8001346 <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8001302:	f107 011c 	add.w	r1, r7, #28
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2208      	movs	r2, #8
 800130a:	20f7      	movs	r0, #247	; 0xf7
 800130c:	f7ff fe63 	bl	8000fd6 <bme280_get_regs>
 8001310:	4603      	mov	r3, r0
 8001312:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 8001316:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800131a:	2b00      	cmp	r3, #0
 800131c:	d116      	bne.n	800134c <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 800131e:	f107 0210 	add.w	r2, r7, #16
 8001322:	f107 031c 	add.w	r3, r7, #28
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f000 f815 	bl	8001358 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	3310      	adds	r3, #16
 8001332:	f107 0110 	add.w	r1, r7, #16
 8001336:	7bf8      	ldrb	r0, [r7, #15]
 8001338:	68ba      	ldr	r2, [r7, #8]
 800133a:	f000 f853 	bl	80013e4 <bme280_compensate_data>
 800133e:	4603      	mov	r3, r0
 8001340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8001344:	e002      	b.n	800134c <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001346:	23ff      	movs	r3, #255	; 0xff
 8001348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 800134c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001350:	4618      	mov	r0, r3
 8001352:	3728      	adds	r7, #40	; 0x28
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8001358:	b480      	push	{r7}
 800135a:	b087      	sub	sp, #28
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	031b      	lsls	r3, r3, #12
 8001368:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3301      	adds	r3, #1
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	011b      	lsls	r3, r3, #4
 8001372:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3302      	adds	r3, #2
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	b2db      	uxtb	r3, r3
 800137e:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 8001380:	697a      	ldr	r2, [r7, #20]
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	431a      	orrs	r2, r3
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	431a      	orrs	r2, r3
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	3303      	adds	r3, #3
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	031b      	lsls	r3, r3, #12
 8001396:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	3304      	adds	r3, #4
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	011b      	lsls	r3, r3, #4
 80013a0:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3305      	adds	r3, #5
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	091b      	lsrs	r3, r3, #4
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80013ae:	697a      	ldr	r2, [r7, #20]
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	431a      	orrs	r2, r3
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	431a      	orrs	r2, r3
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3306      	adds	r3, #6
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3307      	adds	r3, #7
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	431a      	orrs	r2, r3
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	609a      	str	r2, [r3, #8]
}
 80013d8:	bf00      	nop
 80013da:	371c      	adds	r7, #28
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b086      	sub	sp, #24
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60b9      	str	r1, [r7, #8]
 80013ec:	607a      	str	r2, [r7, #4]
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	4603      	mov	r3, r0
 80013f2:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 80013f4:	2300      	movs	r3, #0
 80013f6:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d04b      	beq.n	8001496 <bme280_compensate_data+0xb2>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d048      	beq.n	8001496 <bme280_compensate_data+0xb2>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d045      	beq.n	8001496 <bme280_compensate_data+0xb2>
		/* Initialize to zero */
		comp_data->temperature = 0;
 800140a:	6879      	ldr	r1, [r7, #4]
 800140c:	f04f 0200 	mov.w	r2, #0
 8001410:	f04f 0300 	mov.w	r3, #0
 8001414:	e9c1 2302 	strd	r2, r3, [r1, #8]
		comp_data->pressure = 0;
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	e9c1 2300 	strd	r2, r3, [r1]
		comp_data->humidity = 0;
 8001426:	6879      	ldr	r1, [r7, #4]
 8001428:	f04f 0200 	mov.w	r2, #0
 800142c:	f04f 0300 	mov.w	r3, #0
 8001430:	e9c1 2304 	strd	r2, r3, [r1, #16]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8001434:	7bfb      	ldrb	r3, [r7, #15]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	2b00      	cmp	r3, #0
 800143c:	d00a      	beq.n	8001454 <bme280_compensate_data+0x70>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 800143e:	6839      	ldr	r1, [r7, #0]
 8001440:	68b8      	ldr	r0, [r7, #8]
 8001442:	f000 fa2b 	bl	800189c <compensate_temperature>
 8001446:	eeb0 7a40 	vmov.f32	s14, s0
 800144a:	eef0 7a60 	vmov.f32	s15, s1
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	ed83 7b02 	vstr	d7, [r3, #8]
		}
		if (sensor_comp & BME280_PRESS) {
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	2b00      	cmp	r3, #0
 800145c:	d00a      	beq.n	8001474 <bme280_compensate_data+0x90>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 800145e:	6839      	ldr	r1, [r7, #0]
 8001460:	68b8      	ldr	r0, [r7, #8]
 8001462:	f000 faed 	bl	8001a40 <compensate_pressure>
 8001466:	eeb0 7a40 	vmov.f32	s14, s0
 800146a:	eef0 7a60 	vmov.f32	s15, s1
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	ed83 7b00 	vstr	d7, [r3]
		}
		if (sensor_comp & BME280_HUM) {
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	f003 0304 	and.w	r3, r3, #4
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00d      	beq.n	800149a <bme280_compensate_data+0xb6>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 800147e:	6839      	ldr	r1, [r7, #0]
 8001480:	68b8      	ldr	r0, [r7, #8]
 8001482:	f000 fcad 	bl	8001de0 <compensate_humidity>
 8001486:	eeb0 7a40 	vmov.f32	s14, s0
 800148a:	eef0 7a60 	vmov.f32	s15, s1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	ed83 7b04 	vstr	d7, [r3, #16]
		if (sensor_comp & BME280_HUM) {
 8001494:	e001      	b.n	800149a <bme280_compensate_data+0xb6>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001496:	23ff      	movs	r3, #255	; 0xff
 8001498:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800149a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	4603      	mov	r3, r0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80014b4:	2301      	movs	r3, #1
 80014b6:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 80014b8:	7bfb      	ldrb	r3, [r7, #15]
 80014ba:	f003 0304 	and.w	r3, r3, #4
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d005      	beq.n	80014ce <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	68b8      	ldr	r0, [r7, #8]
 80014c6:	f000 f815 	bl	80014f4 <set_osr_humidity_settings>
 80014ca:	4603      	mov	r3, r0
 80014cc:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 80014ce:	7bfb      	ldrb	r3, [r7, #15]
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d007      	beq.n	80014e8 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 80014d8:	7bfb      	ldrb	r3, [r7, #15]
 80014da:	687a      	ldr	r2, [r7, #4]
 80014dc:	68b9      	ldr	r1, [r7, #8]
 80014de:	4618      	mov	r0, r3
 80014e0:	f000 f842 	bl	8001568 <set_osr_press_temp_settings>
 80014e4:	4603      	mov	r3, r0
 80014e6:	75fb      	strb	r3, [r7, #23]

	return rslt;
 80014e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 80014fe:	23f2      	movs	r3, #242	; 0xf2
 8001500:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	789b      	ldrb	r3, [r3, #2]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	b2db      	uxtb	r3, r3
 800150c:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800150e:	f107 010e 	add.w	r1, r7, #14
 8001512:	f107 000c 	add.w	r0, r7, #12
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	2201      	movs	r2, #1
 800151a:	f7ff fd8c 	bl	8001036 <bme280_set_regs>
 800151e:	4603      	mov	r3, r0
 8001520:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 8001522:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d118      	bne.n	800155c <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 800152a:	23f4      	movs	r3, #244	; 0xf4
 800152c:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 800152e:	7b38      	ldrb	r0, [r7, #12]
 8001530:	f107 010d 	add.w	r1, r7, #13
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	2201      	movs	r2, #1
 8001538:	f7ff fd4d 	bl	8000fd6 <bme280_get_regs>
 800153c:	4603      	mov	r3, r0
 800153e:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8001540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d109      	bne.n	800155c <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001548:	f107 010d 	add.w	r1, r7, #13
 800154c:	f107 000c 	add.w	r0, r7, #12
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	2201      	movs	r2, #1
 8001554:	f7ff fd6f 	bl	8001036 <bme280_set_regs>
 8001558:	4603      	mov	r3, r0
 800155a:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800155c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001560:	4618      	mov	r0, r3
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 8001576:	23f4      	movs	r3, #244	; 0xf4
 8001578:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 800157a:	7db8      	ldrb	r0, [r7, #22]
 800157c:	f107 0115 	add.w	r1, r7, #21
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f7ff fd27 	bl	8000fd6 <bme280_get_regs>
 8001588:	4603      	mov	r3, r0
 800158a:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 800158c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d11f      	bne.n	80015d4 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 8001594:	7bfb      	ldrb	r3, [r7, #15]
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	2b00      	cmp	r3, #0
 800159c:	d005      	beq.n	80015aa <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 800159e:	f107 0315 	add.w	r3, r7, #21
 80015a2:	68b9      	ldr	r1, [r7, #8]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f000 f88e 	bl	80016c6 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
 80015ac:	f003 0302 	and.w	r3, r3, #2
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 80015b4:	f107 0315 	add.w	r3, r7, #21
 80015b8:	68b9      	ldr	r1, [r7, #8]
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f8a0 	bl	8001700 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 80015c0:	f107 0115 	add.w	r1, r7, #21
 80015c4:	f107 0016 	add.w	r0, r7, #22
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f7ff fd33 	bl	8001036 <bme280_set_regs>
 80015d0:	4603      	mov	r3, r0
 80015d2:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80015d4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80015d8:	4618      	mov	r0, r3
 80015da:	3718      	adds	r7, #24
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}

080015e0 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	60b9      	str	r1, [r7, #8]
 80015ea:	607a      	str	r2, [r7, #4]
 80015ec:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 80015ee:	23f5      	movs	r3, #245	; 0xf5
 80015f0:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80015f2:	7db8      	ldrb	r0, [r7, #22]
 80015f4:	f107 0115 	add.w	r1, r7, #21
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f7ff fceb 	bl	8000fd6 <bme280_get_regs>
 8001600:	4603      	mov	r3, r0
 8001602:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8001604:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d11f      	bne.n	800164c <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	f003 0308 	and.w	r3, r3, #8
 8001612:	2b00      	cmp	r3, #0
 8001614:	d005      	beq.n	8001622 <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 8001616:	f107 0315 	add.w	r3, r7, #21
 800161a:	68b9      	ldr	r1, [r7, #8]
 800161c:	4618      	mov	r0, r3
 800161e:	f000 f81b 	bl	8001658 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 8001622:	7bfb      	ldrb	r3, [r7, #15]
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	2b00      	cmp	r3, #0
 800162a:	d005      	beq.n	8001638 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 800162c:	f107 0315 	add.w	r3, r7, #21
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 f82d 	bl	8001692 <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001638:	f107 0115 	add.w	r1, r7, #21
 800163c:	f107 0016 	add.w	r0, r7, #22
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2201      	movs	r2, #1
 8001644:	f7ff fcf7 	bl	8001036 <bme280_set_regs>
 8001648:	4603      	mov	r3, r0
 800164a:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800164c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001650:	4618      	mov	r0, r3
 8001652:	3718      	adds	r7, #24
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	b25b      	sxtb	r3, r3
 8001668:	f023 031c 	bic.w	r3, r3, #28
 800166c:	b25a      	sxtb	r2, r3
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	78db      	ldrb	r3, [r3, #3]
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	b25b      	sxtb	r3, r3
 8001676:	f003 031c 	and.w	r3, r3, #28
 800167a:	b25b      	sxtb	r3, r3
 800167c:	4313      	orrs	r3, r2
 800167e:	b25b      	sxtb	r3, r3
 8001680:	b2da      	uxtb	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	701a      	strb	r2, [r3, #0]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
 800169a:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	b25b      	sxtb	r3, r3
 80016a2:	f003 031f 	and.w	r3, r3, #31
 80016a6:	b25a      	sxtb	r2, r3
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	791b      	ldrb	r3, [r3, #4]
 80016ac:	015b      	lsls	r3, r3, #5
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	4313      	orrs	r3, r2
 80016b2:	b25b      	sxtb	r3, r3
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	701a      	strb	r2, [r3, #0]
}
 80016ba:	bf00      	nop
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	b25b      	sxtb	r3, r3
 80016d6:	f023 031c 	bic.w	r3, r3, #28
 80016da:	b25a      	sxtb	r2, r3
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	b25b      	sxtb	r3, r3
 80016e4:	f003 031c 	and.w	r3, r3, #28
 80016e8:	b25b      	sxtb	r3, r3
 80016ea:	4313      	orrs	r3, r2
 80016ec:	b25b      	sxtb	r3, r3
 80016ee:	b2da      	uxtb	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	701a      	strb	r2, [r3, #0]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001700:	b480      	push	{r7}
 8001702:	b083      	sub	sp, #12
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
 8001708:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	b25b      	sxtb	r3, r3
 8001710:	f003 031f 	and.w	r3, r3, #31
 8001714:	b25a      	sxtb	r2, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	785b      	ldrb	r3, [r3, #1]
 800171a:	015b      	lsls	r3, r3, #5
 800171c:	b25b      	sxtb	r3, r3
 800171e:	4313      	orrs	r3, r2
 8001720:	b25b      	sxtb	r3, r3
 8001722:	b2da      	uxtb	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	701a      	strb	r2, [r3, #0]
}
 8001728:	bf00      	nop
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr

08001734 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	b2da      	uxtb	r2, r3
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3302      	adds	r3, #2
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	109b      	asrs	r3, r3, #2
 8001754:	b2db      	uxtb	r3, r3
 8001756:	f003 0307 	and.w	r3, r3, #7
 800175a:	b2da      	uxtb	r2, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	3302      	adds	r3, #2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	b2da      	uxtb	r2, r3
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	3303      	adds	r3, #3
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	109b      	asrs	r3, r3, #2
 8001776:	b2db      	uxtb	r3, r3
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	b2da      	uxtb	r2, r3
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3303      	adds	r3, #3
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	095b      	lsrs	r3, r3, #5
 800178a:	b2da      	uxtb	r2, r3
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	711a      	strb	r2, [r3, #4]
}
 8001790:	bf00      	nop
 8001792:	370c      	adds	r7, #12
 8001794:	46bd      	mov	sp, r7
 8001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179a:	4770      	bx	lr

0800179c <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	4603      	mov	r3, r0
 80017a4:	6039      	str	r1, [r7, #0]
 80017a6:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80017a8:	23f4      	movs	r3, #244	; 0xf4
 80017aa:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80017ac:	7bb8      	ldrb	r0, [r7, #14]
 80017ae:	f107 010d 	add.w	r1, r7, #13
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f7ff fc0e 	bl	8000fd6 <bme280_get_regs>
 80017ba:	4603      	mov	r3, r0
 80017bc:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 80017be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d117      	bne.n	80017f6 <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 80017c6:	7b7b      	ldrb	r3, [r7, #13]
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	f023 0303 	bic.w	r3, r3, #3
 80017ce:	b25a      	sxtb	r2, r3
 80017d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	b25b      	sxtb	r3, r3
 80017da:	4313      	orrs	r3, r2
 80017dc:	b25b      	sxtb	r3, r3
 80017de:	b2db      	uxtb	r3, r3
 80017e0:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 80017e2:	f107 010d 	add.w	r1, r7, #13
 80017e6:	f107 000e 	add.w	r0, r7, #14
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	2201      	movs	r2, #1
 80017ee:	f7ff fc22 	bl	8001036 <bme280_set_regs>
 80017f2:	4603      	mov	r3, r0
 80017f4:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80017f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}

08001802 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b086      	sub	sp, #24
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 800180a:	f107 0110 	add.w	r1, r7, #16
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2204      	movs	r2, #4
 8001812:	20f2      	movs	r0, #242	; 0xf2
 8001814:	f7ff fbdf 	bl	8000fd6 <bme280_get_regs>
 8001818:	4603      	mov	r3, r0
 800181a:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 800181c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d118      	bne.n	8001856 <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 8001824:	f107 0208 	add.w	r2, r7, #8
 8001828:	f107 0310 	add.w	r3, r7, #16
 800182c:	4611      	mov	r1, r2
 800182e:	4618      	mov	r0, r3
 8001830:	f7ff ff80 	bl	8001734 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 8001834:	6878      	ldr	r0, [r7, #4]
 8001836:	f7ff fd21 	bl	800127c <bme280_soft_reset>
 800183a:	4603      	mov	r3, r0
 800183c:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 800183e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d107      	bne.n	8001856 <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 8001846:	f107 0308 	add.w	r3, r7, #8
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	f000 f808 	bl	8001862 <reload_device_settings>
 8001852:	4603      	mov	r3, r0
 8001854:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001856:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b084      	sub	sp, #16
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	201f      	movs	r0, #31
 8001872:	f7ff fe18 	bl	80014a6 <set_osr_settings>
 8001876:	4603      	mov	r3, r0
 8001878:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 800187a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d106      	bne.n	8001890 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 8001882:	683a      	ldr	r2, [r7, #0]
 8001884:	6879      	ldr	r1, [r7, #4]
 8001886:	201f      	movs	r0, #31
 8001888:	f7ff feaa 	bl	80015e0 <set_filter_standby_settings>
 800188c:	4603      	mov	r3, r0
 800188e:	73fb      	strb	r3, [r7, #15]

	return rslt;
 8001890:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001894:	4618      	mov	r0, r3
 8001896:	3710      	adds	r7, #16
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 800189c:	b5b0      	push	{r4, r5, r7, lr}
 800189e:	b08c      	sub	sp, #48	; 0x30
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double temperature;
	double temperature_min = -40;
 80018a6:	f04f 0200 	mov.w	r2, #0
 80018aa:	4b5f      	ldr	r3, [pc, #380]	; (8001a28 <compensate_temperature+0x18c>)
 80018ac:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temperature_max = 85;
 80018b0:	f04f 0200 	mov.w	r2, #0
 80018b4:	4b5d      	ldr	r3, [pc, #372]	; (8001a2c <compensate_temperature+0x190>)
 80018b6:	e9c7 2306 	strd	r2, r3, [r7, #24]

	var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	4618      	mov	r0, r3
 80018c0:	f7fe fe20 	bl	8000504 <__aeabi_ui2d>
 80018c4:	f04f 0200 	mov.w	r2, #0
 80018c8:	4b59      	ldr	r3, [pc, #356]	; (8001a30 <compensate_temperature+0x194>)
 80018ca:	f7fe ffbf 	bl	800084c <__aeabi_ddiv>
 80018ce:	4602      	mov	r2, r0
 80018d0:	460b      	mov	r3, r1
 80018d2:	4614      	mov	r4, r2
 80018d4:	461d      	mov	r5, r3
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	881b      	ldrh	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fe12 	bl	8000504 <__aeabi_ui2d>
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	4b53      	ldr	r3, [pc, #332]	; (8001a34 <compensate_temperature+0x198>)
 80018e6:	f7fe ffb1 	bl	800084c <__aeabi_ddiv>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4620      	mov	r0, r4
 80018f0:	4629      	mov	r1, r5
 80018f2:	f7fe fcc9 	bl	8000288 <__aeabi_dsub>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var1 = var1 * ((double)calib_data->dig_T2);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fe0d 	bl	8000524 <__aeabi_i2d>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001912:	f7fe fe71 	bl	80005f8 <__aeabi_dmul>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	4618      	mov	r0, r3
 8001924:	f7fe fdee 	bl	8000504 <__aeabi_ui2d>
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001930:	f7fe ff8c 	bl	800084c <__aeabi_ddiv>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4614      	mov	r4, r2
 800193a:	461d      	mov	r5, r3
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	881b      	ldrh	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fddf 	bl	8000504 <__aeabi_ui2d>
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <compensate_temperature+0x19c>)
 800194c:	f7fe ff7e 	bl	800084c <__aeabi_ddiv>
 8001950:	4602      	mov	r2, r0
 8001952:	460b      	mov	r3, r1
 8001954:	4620      	mov	r0, r4
 8001956:	4629      	mov	r1, r5
 8001958:	f7fe fc96 	bl	8000288 <__aeabi_dsub>
 800195c:	4602      	mov	r2, r0
 800195e:	460b      	mov	r3, r1
 8001960:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 8001964:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001968:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800196c:	f7fe fe44 	bl	80005f8 <__aeabi_dmul>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4614      	mov	r4, r2
 8001976:	461d      	mov	r5, r3
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe fdd0 	bl	8000524 <__aeabi_i2d>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4620      	mov	r0, r4
 800198a:	4629      	mov	r1, r5
 800198c:	f7fe fe34 	bl	80005f8 <__aeabi_dmul>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	e9c7 2302 	strd	r2, r3, [r7, #8]
	calib_data->t_fine = (int32_t)(var1 + var2);
 8001998:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800199c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019a0:	f7fe fc74 	bl	800028c <__adddf3>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f7ff f8d4 	bl	8000b58 <__aeabi_d2iz>
 80019b0:	4602      	mov	r2, r0
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (var1 + var2) / 5120.0;
 80019b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019be:	f7fe fc65 	bl	800028c <__adddf3>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	4610      	mov	r0, r2
 80019c8:	4619      	mov	r1, r3
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <compensate_temperature+0x1a0>)
 80019d0:	f7fe ff3c 	bl	800084c <__aeabi_ddiv>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (temperature < temperature_min)
 80019dc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019e0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80019e4:	f7ff f87a 	bl	8000adc <__aeabi_dcmplt>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d004      	beq.n	80019f8 <compensate_temperature+0x15c>
		temperature = temperature_min;
 80019ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019f2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80019f6:	e00c      	b.n	8001a12 <compensate_temperature+0x176>
	else if (temperature > temperature_max)
 80019f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80019fc:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a00:	f7ff f88a 	bl	8000b18 <__aeabi_dcmpgt>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <compensate_temperature+0x176>
		temperature = temperature_max;
 8001a0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a0e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	return temperature;
 8001a12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a16:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a1a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a1e:	eef0 0a67 	vmov.f32	s1, s15
 8001a22:	3730      	adds	r7, #48	; 0x30
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bdb0      	pop	{r4, r5, r7, pc}
 8001a28:	c0440000 	.word	0xc0440000
 8001a2c:	40554000 	.word	0x40554000
 8001a30:	40d00000 	.word	0x40d00000
 8001a34:	40900000 	.word	0x40900000
 8001a38:	40c00000 	.word	0x40c00000
 8001a3c:	40b40000 	.word	0x40b40000

08001a40 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b08e      	sub	sp, #56	; 0x38
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double var3;
	double pressure;
	double pressure_min = 30000.0;
 8001a4a:	a3d9      	add	r3, pc, #868	; (adr r3, 8001db0 <compensate_pressure+0x370>)
 8001a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a50:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double pressure_max = 110000.0;
 8001a54:	a3d8      	add	r3, pc, #864	; (adr r3, 8001db8 <compensate_pressure+0x378>)
 8001a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5a:	e9c7 2308 	strd	r2, r3, [r7, #32]

	var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	4618      	mov	r0, r3
 8001a64:	f7fe fd5e 	bl	8000524 <__aeabi_i2d>
 8001a68:	f04f 0200 	mov.w	r2, #0
 8001a6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001a70:	f7fe feec 	bl	800084c <__aeabi_ddiv>
 8001a74:	4602      	mov	r2, r0
 8001a76:	460b      	mov	r3, r1
 8001a78:	4610      	mov	r0, r2
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	4bc1      	ldr	r3, [pc, #772]	; (8001d88 <compensate_pressure+0x348>)
 8001a82:	f7fe fc01 	bl	8000288 <__aeabi_dsub>
 8001a86:	4602      	mov	r2, r0
 8001a88:	460b      	mov	r3, r1
 8001a8a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 8001a8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a92:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001a96:	f7fe fdaf 	bl	80005f8 <__aeabi_dmul>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4614      	mov	r4, r2
 8001aa0:	461d      	mov	r5, r3
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fd3b 	bl	8000524 <__aeabi_i2d>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4620      	mov	r0, r4
 8001ab4:	4629      	mov	r1, r5
 8001ab6:	f7fe fd9f 	bl	80005f8 <__aeabi_dmul>
 8001aba:	4602      	mov	r2, r0
 8001abc:	460b      	mov	r3, r1
 8001abe:	4610      	mov	r0, r2
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	f04f 0200 	mov.w	r2, #0
 8001ac6:	4bb1      	ldr	r3, [pc, #708]	; (8001d8c <compensate_pressure+0x34c>)
 8001ac8:	f7fe fec0 	bl	800084c <__aeabi_ddiv>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fd22 	bl	8000524 <__aeabi_i2d>
 8001ae0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ae4:	f7fe fd88 	bl	80005f8 <__aeabi_dmul>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4610      	mov	r0, r2
 8001aee:	4619      	mov	r1, r3
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	f7fe fbca 	bl	800028c <__adddf3>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b00:	f7fe fbc4 	bl	800028c <__adddf3>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 8001b0c:	f04f 0200 	mov.w	r2, #0
 8001b10:	4b9f      	ldr	r3, [pc, #636]	; (8001d90 <compensate_pressure+0x350>)
 8001b12:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b16:	f7fe fe99 	bl	800084c <__aeabi_ddiv>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4614      	mov	r4, r2
 8001b20:	461d      	mov	r5, r3
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fcfb 	bl	8000524 <__aeabi_i2d>
 8001b2e:	f04f 0200 	mov.w	r2, #0
 8001b32:	4b98      	ldr	r3, [pc, #608]	; (8001d94 <compensate_pressure+0x354>)
 8001b34:	f7fe fd60 	bl	80005f8 <__aeabi_dmul>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	4629      	mov	r1, r5
 8001b40:	f7fe fba4 	bl	800028c <__adddf3>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fce6 	bl	8000524 <__aeabi_i2d>
 8001b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b5c:	f7fe fd4c 	bl	80005f8 <__aeabi_dmul>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b6c:	f7fe fd44 	bl	80005f8 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	4610      	mov	r0, r2
 8001b76:	4619      	mov	r1, r3
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	4b86      	ldr	r3, [pc, #536]	; (8001d98 <compensate_pressure+0x358>)
 8001b7e:	f7fe fe65 	bl	800084c <__aeabi_ddiv>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fcc7 	bl	8000524 <__aeabi_i2d>
 8001b96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b9a:	f7fe fd2d 	bl	80005f8 <__aeabi_dmul>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	4610      	mov	r0, r2
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001baa:	f7fe fb6f 	bl	800028c <__adddf3>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f04f 0200 	mov.w	r2, #0
 8001bba:	4b77      	ldr	r3, [pc, #476]	; (8001d98 <compensate_pressure+0x358>)
 8001bbc:	f7fe fe46 	bl	800084c <__aeabi_ddiv>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 8001bc8:	f04f 0200 	mov.w	r2, #0
 8001bcc:	4b6f      	ldr	r3, [pc, #444]	; (8001d8c <compensate_pressure+0x34c>)
 8001bce:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001bd2:	f7fe fe3b 	bl	800084c <__aeabi_ddiv>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4610      	mov	r0, r2
 8001bdc:	4619      	mov	r1, r3
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	4b6e      	ldr	r3, [pc, #440]	; (8001d9c <compensate_pressure+0x35c>)
 8001be4:	f7fe fb52 	bl	800028c <__adddf3>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4614      	mov	r4, r2
 8001bee:	461d      	mov	r5, r3
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	88db      	ldrh	r3, [r3, #6]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f7fe fc85 	bl	8000504 <__aeabi_ui2d>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4620      	mov	r0, r4
 8001c00:	4629      	mov	r1, r5
 8001c02:	f7fe fcf9 	bl	80005f8 <__aeabi_dmul>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	/* avoid exception caused by division by zero */
	if (var1) {
 8001c0e:	f04f 0200 	mov.w	r2, #0
 8001c12:	f04f 0300 	mov.w	r3, #0
 8001c16:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c1a:	f7fe ff55 	bl	8000ac8 <__aeabi_dcmpeq>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	f040 80cd 	bne.w	8001dc0 <compensate_pressure+0x380>
		pressure = 1048576.0 - (double) uncomp_data->pressure;
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fc6a 	bl	8000504 <__aeabi_ui2d>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	f04f 0000 	mov.w	r0, #0
 8001c38:	4959      	ldr	r1, [pc, #356]	; (8001da0 <compensate_pressure+0x360>)
 8001c3a:	f7fe fb25 	bl	8000288 <__aeabi_dsub>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	4b56      	ldr	r3, [pc, #344]	; (8001da4 <compensate_pressure+0x364>)
 8001c4c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c50:	f7fe fdfc 	bl	800084c <__aeabi_ddiv>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c5c:	f7fe fb14 	bl	8000288 <__aeabi_dsub>
 8001c60:	4602      	mov	r2, r0
 8001c62:	460b      	mov	r3, r1
 8001c64:	4610      	mov	r0, r2
 8001c66:	4619      	mov	r1, r3
 8001c68:	a345      	add	r3, pc, #276	; (adr r3, 8001d80 <compensate_pressure+0x340>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	f7fe fcc3 	bl	80005f8 <__aeabi_dmul>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c7e:	f7fe fde5 	bl	800084c <__aeabi_ddiv>
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7fe fc47 	bl	8000524 <__aeabi_i2d>
 8001c96:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c9a:	f7fe fcad 	bl	80005f8 <__aeabi_dmul>
 8001c9e:	4602      	mov	r2, r0
 8001ca0:	460b      	mov	r3, r1
 8001ca2:	4610      	mov	r0, r2
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001caa:	f7fe fca5 	bl	80005f8 <__aeabi_dmul>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	460b      	mov	r3, r1
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	4b3b      	ldr	r3, [pc, #236]	; (8001da8 <compensate_pressure+0x368>)
 8001cbc:	f7fe fdc6 	bl	800084c <__aeabi_ddiv>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	e9c7 2306 	strd	r2, r3, [r7, #24]
		var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fc28 	bl	8000524 <__aeabi_i2d>
 8001cd4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cd8:	f7fe fc8e 	bl	80005f8 <__aeabi_dmul>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	4b28      	ldr	r3, [pc, #160]	; (8001d8c <compensate_pressure+0x34c>)
 8001cea:	f7fe fdaf 	bl	800084c <__aeabi_ddiv>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	e9c7 2304 	strd	r2, r3, [r7, #16]
		pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0;
 8001cf6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001cfa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001cfe:	f7fe fac5 	bl	800028c <__adddf3>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4614      	mov	r4, r2
 8001d08:	461d      	mov	r5, r3
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fc07 	bl	8000524 <__aeabi_i2d>
 8001d16:	4602      	mov	r2, r0
 8001d18:	460b      	mov	r3, r1
 8001d1a:	4620      	mov	r0, r4
 8001d1c:	4629      	mov	r1, r5
 8001d1e:	f7fe fab5 	bl	800028c <__adddf3>
 8001d22:	4602      	mov	r2, r0
 8001d24:	460b      	mov	r3, r1
 8001d26:	4610      	mov	r0, r2
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f04f 0200 	mov.w	r2, #0
 8001d2e:	4b1f      	ldr	r3, [pc, #124]	; (8001dac <compensate_pressure+0x36c>)
 8001d30:	f7fe fd8c 	bl	800084c <__aeabi_ddiv>
 8001d34:	4602      	mov	r2, r0
 8001d36:	460b      	mov	r3, r1
 8001d38:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d3c:	f7fe faa6 	bl	800028c <__adddf3>
 8001d40:	4602      	mov	r2, r0
 8001d42:	460b      	mov	r3, r1
 8001d44:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		if (pressure < pressure_min)
 8001d48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d4c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d50:	f7fe fec4 	bl	8000adc <__aeabi_dcmplt>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d004      	beq.n	8001d64 <compensate_pressure+0x324>
			pressure = pressure_min;
 8001d5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d5e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001d62:	e031      	b.n	8001dc8 <compensate_pressure+0x388>
		else if (pressure > pressure_max)
 8001d64:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d68:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d6c:	f7fe fed4 	bl	8000b18 <__aeabi_dcmpgt>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d028      	beq.n	8001dc8 <compensate_pressure+0x388>
			pressure = pressure_max;
 8001d76:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001d7a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001d7e:	e023      	b.n	8001dc8 <compensate_pressure+0x388>
 8001d80:	00000000 	.word	0x00000000
 8001d84:	40b86a00 	.word	0x40b86a00
 8001d88:	40ef4000 	.word	0x40ef4000
 8001d8c:	40e00000 	.word	0x40e00000
 8001d90:	40100000 	.word	0x40100000
 8001d94:	40f00000 	.word	0x40f00000
 8001d98:	41200000 	.word	0x41200000
 8001d9c:	3ff00000 	.word	0x3ff00000
 8001da0:	41300000 	.word	0x41300000
 8001da4:	40b00000 	.word	0x40b00000
 8001da8:	41e00000 	.word	0x41e00000
 8001dac:	40300000 	.word	0x40300000
 8001db0:	00000000 	.word	0x00000000
 8001db4:	40dd4c00 	.word	0x40dd4c00
 8001db8:	00000000 	.word	0x00000000
 8001dbc:	40fadb00 	.word	0x40fadb00
	} else { /* Invalid case */
		pressure = pressure_min;
 8001dc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dc4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	return pressure;
 8001dc8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001dcc:	ec43 2b17 	vmov	d7, r2, r3
}
 8001dd0:	eeb0 0a47 	vmov.f32	s0, s14
 8001dd4:	eef0 0a67 	vmov.f32	s1, s15
 8001dd8:	3738      	adds	r7, #56	; 0x38
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bdb0      	pop	{r4, r5, r7, pc}
 8001dde:	bf00      	nop

08001de0 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001de0:	b5b0      	push	{r4, r5, r7, lr}
 8001de2:	b094      	sub	sp, #80	; 0x50
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
	double humidity;
	double humidity_min = 0.0;
 8001dea:	f04f 0200 	mov.w	r2, #0
 8001dee:	f04f 0300 	mov.w	r3, #0
 8001df2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double humidity_max = 100.0;
 8001df6:	f04f 0200 	mov.w	r2, #0
 8001dfa:	4b81      	ldr	r3, [pc, #516]	; (8002000 <compensate_humidity+0x220>)
 8001dfc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double var3;
	double var4;
	double var5;
	double var6;

	var1 = ((double)calib_data->t_fine) - 76800.0;
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fb8d 	bl	8000524 <__aeabi_i2d>
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	4b7d      	ldr	r3, [pc, #500]	; (8002004 <compensate_humidity+0x224>)
 8001e10:	f7fe fa3a 	bl	8000288 <__aeabi_dsub>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7fe fb7e 	bl	8000524 <__aeabi_i2d>
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	4b76      	ldr	r3, [pc, #472]	; (8002008 <compensate_humidity+0x228>)
 8001e2e:	f7fe fbe3 	bl	80005f8 <__aeabi_dmul>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4614      	mov	r4, r2
 8001e38:	461d      	mov	r5, r3
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7fe fb6f 	bl	8000524 <__aeabi_i2d>
 8001e46:	f04f 0200 	mov.w	r2, #0
 8001e4a:	4b70      	ldr	r3, [pc, #448]	; (800200c <compensate_humidity+0x22c>)
 8001e4c:	f7fe fcfe 	bl	800084c <__aeabi_ddiv>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	4610      	mov	r0, r2
 8001e56:	4619      	mov	r1, r3
 8001e58:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e5c:	f7fe fbcc 	bl	80005f8 <__aeabi_dmul>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4620      	mov	r0, r4
 8001e66:	4629      	mov	r1, r5
 8001e68:	f7fe fa10 	bl	800028c <__adddf3>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = uncomp_data->humidity - var2;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f7fe fb43 	bl	8000504 <__aeabi_ui2d>
 8001e7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e82:	f7fe fa01 	bl	8000288 <__aeabi_dsub>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var4 = ((double)calib_data->dig_H2) / 65536.0;
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fb45 	bl	8000524 <__aeabi_i2d>
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	4b5c      	ldr	r3, [pc, #368]	; (8002010 <compensate_humidity+0x230>)
 8001ea0:	f7fe fcd4 	bl	800084c <__aeabi_ddiv>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	7f1b      	ldrb	r3, [r3, #28]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fb27 	bl	8000504 <__aeabi_ui2d>
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	4b56      	ldr	r3, [pc, #344]	; (8002014 <compensate_humidity+0x234>)
 8001ebc:	f7fe fcc6 	bl	800084c <__aeabi_ddiv>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4610      	mov	r0, r2
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001ecc:	f7fe fb94 	bl	80005f8 <__aeabi_dmul>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	460b      	mov	r3, r1
 8001ed4:	4610      	mov	r0, r2
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	4b4e      	ldr	r3, [pc, #312]	; (8002018 <compensate_humidity+0x238>)
 8001ede:	f7fe f9d5 	bl	800028c <__adddf3>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fb17 	bl	8000524 <__aeabi_i2d>
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	4b46      	ldr	r3, [pc, #280]	; (8002014 <compensate_humidity+0x234>)
 8001efc:	f7fe fca6 	bl	800084c <__aeabi_ddiv>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4610      	mov	r0, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f0c:	f7fe fb74 	bl	80005f8 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f1c:	f7fe fb6c 	bl	80005f8 <__aeabi_dmul>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	f04f 0200 	mov.w	r2, #0
 8001f2c:	4b3a      	ldr	r3, [pc, #232]	; (8002018 <compensate_humidity+0x238>)
 8001f2e:	f7fe f9ad 	bl	800028c <__adddf3>
 8001f32:	4602      	mov	r2, r0
 8001f34:	460b      	mov	r3, r1
 8001f36:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var6 = var3 * var4 * (var5 * var6);
 8001f3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f3e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f42:	f7fe fb59 	bl	80005f8 <__aeabi_dmul>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	4614      	mov	r4, r2
 8001f4c:	461d      	mov	r5, r3
 8001f4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f56:	f7fe fb4f 	bl	80005f8 <__aeabi_dmul>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4620      	mov	r0, r4
 8001f60:	4629      	mov	r1, r5
 8001f62:	f7fe fb49 	bl	80005f8 <__aeabi_dmul>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	7e1b      	ldrb	r3, [r3, #24]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f7fe fac6 	bl	8000504 <__aeabi_ui2d>
 8001f78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f7c:	f7fe fb3c 	bl	80005f8 <__aeabi_dmul>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	4610      	mov	r0, r2
 8001f86:	4619      	mov	r1, r3
 8001f88:	f04f 0200 	mov.w	r2, #0
 8001f8c:	4b23      	ldr	r3, [pc, #140]	; (800201c <compensate_humidity+0x23c>)
 8001f8e:	f7fe fc5d 	bl	800084c <__aeabi_ddiv>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	f04f 0000 	mov.w	r0, #0
 8001f9a:	491f      	ldr	r1, [pc, #124]	; (8002018 <compensate_humidity+0x238>)
 8001f9c:	f7fe f974 	bl	8000288 <__aeabi_dsub>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fa8:	f7fe fb26 	bl	80005f8 <__aeabi_dmul>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if (humidity > humidity_max)
 8001fb4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fb8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001fbc:	f7fe fdac 	bl	8000b18 <__aeabi_dcmpgt>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d004      	beq.n	8001fd0 <compensate_humidity+0x1f0>
		humidity = humidity_max;
 8001fc6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fca:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 8001fce:	e00c      	b.n	8001fea <compensate_humidity+0x20a>
	else if (humidity < humidity_min)
 8001fd0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fd4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001fd8:	f7fe fd80 	bl	8000adc <__aeabi_dcmplt>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d003      	beq.n	8001fea <compensate_humidity+0x20a>
		humidity = humidity_min;
 8001fe2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001fe6:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	return humidity;
 8001fea:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001fee:	ec43 2b17 	vmov	d7, r2, r3
}
 8001ff2:	eeb0 0a47 	vmov.f32	s0, s14
 8001ff6:	eef0 0a67 	vmov.f32	s1, s15
 8001ffa:	3750      	adds	r7, #80	; 0x50
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8002000:	40590000 	.word	0x40590000
 8002004:	40f2c000 	.word	0x40f2c000
 8002008:	40500000 	.word	0x40500000
 800200c:	40d00000 	.word	0x40d00000
 8002010:	40f00000 	.word	0x40f00000
 8002014:	41900000 	.word	0x41900000
 8002018:	3ff00000 	.word	0x3ff00000
 800201c:	41200000 	.word	0x41200000

08002020 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b08a      	sub	sp, #40	; 0x28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002028:	2388      	movs	r3, #136	; 0x88
 800202a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	f107 0310 	add.w	r3, r7, #16
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
 800203a:	605a      	str	r2, [r3, #4]
 800203c:	609a      	str	r2, [r3, #8]
 800203e:	60da      	str	r2, [r3, #12]
 8002040:	611a      	str	r2, [r3, #16]
 8002042:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8002044:	f107 010c 	add.w	r1, r7, #12
 8002048:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	221a      	movs	r2, #26
 8002050:	f7fe ffc1 	bl	8000fd6 <bme280_get_regs>
 8002054:	4603      	mov	r3, r0
 8002056:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 800205a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800205e:	2b00      	cmp	r3, #0
 8002060:	d11d      	bne.n	800209e <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 8002062:	f107 030c 	add.w	r3, r7, #12
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4618      	mov	r0, r3
 800206a:	f000 f84a 	bl	8002102 <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 800206e:	23e1      	movs	r3, #225	; 0xe1
 8002070:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 8002074:	f107 010c 	add.w	r1, r7, #12
 8002078:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2207      	movs	r2, #7
 8002080:	f7fe ffa9 	bl	8000fd6 <bme280_get_regs>
 8002084:	4603      	mov	r3, r0
 8002086:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 800208a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800208e:	2b00      	cmp	r3, #0
 8002090:	d105      	bne.n	800209e <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 8002092:	f107 030c 	add.w	r3, r7, #12
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4618      	mov	r0, r3
 800209a:	f000 f8e1 	bl	8002260 <parse_humidity_calib_data>
		}
	}

	return rslt;
 800209e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3728      	adds	r7, #40	; 0x28
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80020aa:	b480      	push	{r7}
 80020ac:	b087      	sub	sp, #28
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 80020b8:	2301      	movs	r3, #1
 80020ba:	75fb      	strb	r3, [r7, #23]
 80020bc:	e016      	b.n	80020ec <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 80020be:	7dfb      	ldrb	r3, [r7, #23]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	441a      	add	r2, r3
 80020c4:	7dfb      	ldrb	r3, [r7, #23]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	3b01      	subs	r3, #1
 80020ca:	68b9      	ldr	r1, [r7, #8]
 80020cc:	440b      	add	r3, r1
 80020ce:	7812      	ldrb	r2, [r2, #0]
 80020d0:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 80020d2:	7dfb      	ldrb	r3, [r7, #23]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	441a      	add	r2, r3
 80020d8:	7dfb      	ldrb	r3, [r7, #23]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	4619      	mov	r1, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	440b      	add	r3, r1
 80020e2:	7812      	ldrb	r2, [r2, #0]
 80020e4:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 80020e6:	7dfb      	ldrb	r3, [r7, #23]
 80020e8:	3301      	adds	r3, #1
 80020ea:	75fb      	strb	r3, [r7, #23]
 80020ec:	7dfa      	ldrb	r2, [r7, #23]
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d3e4      	bcc.n	80020be <interleave_reg_addr+0x14>
	}
}
 80020f4:	bf00      	nop
 80020f6:	bf00      	nop
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002102:	b480      	push	{r7}
 8002104:	b085      	sub	sp, #20
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
 800210a:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	3310      	adds	r3, #16
 8002110:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3301      	adds	r3, #1
 8002116:	781b      	ldrb	r3, [r3, #0]
 8002118:	021b      	lsls	r3, r3, #8
 800211a:	b21a      	sxth	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	b21b      	sxth	r3, r3
 8002122:	4313      	orrs	r3, r2
 8002124:	b21b      	sxth	r3, r3
 8002126:	b29a      	uxth	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3303      	adds	r3, #3
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	021b      	lsls	r3, r3, #8
 8002134:	b21a      	sxth	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	3302      	adds	r3, #2
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	b21b      	sxth	r3, r3
 800213e:	4313      	orrs	r3, r2
 8002140:	b21a      	sxth	r2, r3
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3305      	adds	r3, #5
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	021b      	lsls	r3, r3, #8
 800214e:	b21a      	sxth	r2, r3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3304      	adds	r3, #4
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	b21b      	sxth	r3, r3
 8002158:	4313      	orrs	r3, r2
 800215a:	b21a      	sxth	r2, r3
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3307      	adds	r3, #7
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	021b      	lsls	r3, r3, #8
 8002168:	b21a      	sxth	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3306      	adds	r3, #6
 800216e:	781b      	ldrb	r3, [r3, #0]
 8002170:	b21b      	sxth	r3, r3
 8002172:	4313      	orrs	r3, r2
 8002174:	b21b      	sxth	r3, r3
 8002176:	b29a      	uxth	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3309      	adds	r3, #9
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	021b      	lsls	r3, r3, #8
 8002184:	b21a      	sxth	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3308      	adds	r3, #8
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	b21b      	sxth	r3, r3
 800218e:	4313      	orrs	r3, r2
 8002190:	b21a      	sxth	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	330b      	adds	r3, #11
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	b21a      	sxth	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	330a      	adds	r3, #10
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	4313      	orrs	r3, r2
 80021aa:	b21a      	sxth	r2, r3
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	330d      	adds	r3, #13
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	021b      	lsls	r3, r3, #8
 80021b8:	b21a      	sxth	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	330c      	adds	r3, #12
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	4313      	orrs	r3, r2
 80021c4:	b21a      	sxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	330f      	adds	r3, #15
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	021b      	lsls	r3, r3, #8
 80021d2:	b21a      	sxth	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	330e      	adds	r3, #14
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	b21b      	sxth	r3, r3
 80021dc:	4313      	orrs	r3, r2
 80021de:	b21a      	sxth	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3311      	adds	r3, #17
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	021b      	lsls	r3, r3, #8
 80021ec:	b21a      	sxth	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3310      	adds	r3, #16
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	b21b      	sxth	r3, r3
 80021f6:	4313      	orrs	r3, r2
 80021f8:	b21a      	sxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	3313      	adds	r3, #19
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	b21a      	sxth	r2, r3
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	3312      	adds	r3, #18
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	b21b      	sxth	r3, r3
 8002210:	4313      	orrs	r3, r2
 8002212:	b21a      	sxth	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3315      	adds	r3, #21
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	021b      	lsls	r3, r3, #8
 8002220:	b21a      	sxth	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	3314      	adds	r3, #20
 8002226:	781b      	ldrb	r3, [r3, #0]
 8002228:	b21b      	sxth	r3, r3
 800222a:	4313      	orrs	r3, r2
 800222c:	b21a      	sxth	r2, r3
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	3317      	adds	r3, #23
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	021b      	lsls	r3, r3, #8
 800223a:	b21a      	sxth	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3316      	adds	r3, #22
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	b21b      	sxth	r3, r3
 8002244:	4313      	orrs	r3, r2
 8002246:	b21a      	sxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	7e5a      	ldrb	r2, [r3, #25]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	761a      	strb	r2, [r3, #24]

}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	3310      	adds	r3, #16
 800226e:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3301      	adds	r3, #1
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	021b      	lsls	r3, r3, #8
 8002278:	b21a      	sxth	r2, r3
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	b21b      	sxth	r3, r3
 8002280:	4313      	orrs	r3, r2
 8002282:	b21a      	sxth	r2, r3
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	789a      	ldrb	r2, [r3, #2]
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	3303      	adds	r3, #3
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	b25b      	sxtb	r3, r3
 8002298:	b29b      	uxth	r3, r3
 800229a:	011b      	lsls	r3, r3, #4
 800229c:	b29b      	uxth	r3, r3
 800229e:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	3304      	adds	r3, #4
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	b21b      	sxth	r3, r3
 80022a8:	f003 030f 	and.w	r3, r3, #15
 80022ac:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80022ae:	8a7a      	ldrh	r2, [r7, #18]
 80022b0:	8a3b      	ldrh	r3, [r7, #16]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	b21a      	sxth	r2, r3
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3305      	adds	r3, #5
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	b25b      	sxtb	r3, r3
 80022c2:	b29b      	uxth	r3, r3
 80022c4:	011b      	lsls	r3, r3, #4
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3304      	adds	r3, #4
 80022ce:	781b      	ldrb	r3, [r3, #0]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 80022d6:	89fa      	ldrh	r2, [r7, #14]
 80022d8:	89bb      	ldrh	r3, [r7, #12]
 80022da:	4313      	orrs	r3, r2
 80022dc:	b21a      	sxth	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3306      	adds	r3, #6
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	b25a      	sxtb	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80022f0:	bf00      	nop
 80022f2:	371c      	adds	r7, #28
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	460a      	mov	r2, r1
 8002306:	71fb      	strb	r3, [r7, #7]
 8002308:	4613      	mov	r3, r2
 800230a:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 800230c:	2300      	movs	r3, #0
 800230e:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8002310:	79fa      	ldrb	r2, [r7, #7]
 8002312:	79bb      	ldrb	r3, [r7, #6]
 8002314:	4013      	ands	r3, r2
 8002316:	b2db      	uxtb	r3, r3
 8002318:	2b00      	cmp	r3, #0
 800231a:	d002      	beq.n	8002322 <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 800231c:	2301      	movs	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
 8002320:	e001      	b.n	8002326 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 8002322:	2300      	movs	r3, #0
 8002324:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8002326:	7bfb      	ldrb	r3, [r7, #15]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3714      	adds	r7, #20
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8002334:	b480      	push	{r7}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d00b      	beq.n	800235a <null_ptr_check+0x26>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d007      	beq.n	800235a <null_ptr_check+0x26>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d003      	beq.n	800235a <null_ptr_check+0x26>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	68db      	ldr	r3, [r3, #12]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d102      	bne.n	8002360 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 800235a:	23ff      	movs	r3, #255	; 0xff
 800235c:	73fb      	strb	r3, [r7, #15]
 800235e:	e001      	b.n	8002364 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 8002360:	2300      	movs	r3, #0
 8002362:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8002364:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]

	// Передати в чергу !!!!!!!!!!  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	//HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
}
 800237c:	bf00      	nop
 800237e:	370c      	adds	r7, #12
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 0);   // was 1
 8002390:	2200      	movs	r2, #0
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	480a      	ldr	r0, [pc, #40]	; (80023c0 <Mount_SD+0x38>)
 8002396:	f00d fbd7 	bl	800fb48 <f_mount>
 800239a:	4603      	mov	r3, r0
 800239c:	461a      	mov	r2, r3
 800239e:	4b09      	ldr	r3, [pc, #36]	; (80023c4 <Mount_SD+0x3c>)
 80023a0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80023a2:	4b08      	ldr	r3, [pc, #32]	; (80023c4 <Mount_SD+0x3c>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <Mount_SD+0x2a>
	{
		Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 80023aa:	4807      	ldr	r0, [pc, #28]	; (80023c8 <Mount_SD+0x40>)
 80023ac:	f7ff ffe2 	bl	8002374 <Send_Uart>
	}
	else
	{
		Send_Uart("SD CARD mounted successfully...\n");
	}
}
 80023b0:	e002      	b.n	80023b8 <Mount_SD+0x30>
		Send_Uart("SD CARD mounted successfully...\n");
 80023b2:	4806      	ldr	r0, [pc, #24]	; (80023cc <Mount_SD+0x44>)
 80023b4:	f7ff ffde 	bl	8002374 <Send_Uart>
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	20005f34 	.word	0x20005f34
 80023c4:	20006f80 	.word	0x20006f80
 80023c8:	080184d8 	.word	0x080184d8
 80023cc:	080184fc 	.word	0x080184fc

080023d0 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 80023d8:	2201      	movs	r2, #1
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	2000      	movs	r0, #0
 80023de:	f00d fbb3 	bl	800fb48 <f_mount>
 80023e2:	4603      	mov	r3, r0
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b08      	ldr	r3, [pc, #32]	; (8002408 <Unmount_SD+0x38>)
 80023e8:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 80023ea:	4b07      	ldr	r3, [pc, #28]	; (8002408 <Unmount_SD+0x38>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d103      	bne.n	80023fa <Unmount_SD+0x2a>
 80023f2:	4806      	ldr	r0, [pc, #24]	; (800240c <Unmount_SD+0x3c>)
 80023f4:	f7ff ffbe 	bl	8002374 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 80023f8:	e002      	b.n	8002400 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 80023fa:	4805      	ldr	r0, [pc, #20]	; (8002410 <Unmount_SD+0x40>)
 80023fc:	f7ff ffba 	bl	8002374 <Send_Uart>
}
 8002400:	bf00      	nop
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	20006f80 	.word	0x20006f80
 800240c:	08018520 	.word	0x08018520
 8002410:	08018548 	.word	0x08018548

08002414 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 800241c:	4940      	ldr	r1, [pc, #256]	; (8002520 <Create_File+0x10c>)
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f00e f8d4 	bl	80105cc <f_stat>
 8002424:	4603      	mov	r3, r0
 8002426:	461a      	mov	r2, r3
 8002428:	4b3e      	ldr	r3, [pc, #248]	; (8002524 <Create_File+0x110>)
 800242a:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 800242c:	4b3d      	ldr	r3, [pc, #244]	; (8002524 <Create_File+0x110>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d111      	bne.n	8002458 <Create_File+0x44>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8002434:	2064      	movs	r0, #100	; 0x64
 8002436:	f012 f977 	bl	8014728 <pvPortMalloc>
 800243a:	60f8      	str	r0, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	493a      	ldr	r1, [pc, #232]	; (8002528 <Create_File+0x114>)
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f013 ff81 	bl	8016348 <siprintf>
		Send_Uart(buf);
 8002446:	68f8      	ldr	r0, [r7, #12]
 8002448:	f7ff ff94 	bl	8002374 <Send_Uart>
		vPortFree(buf);
 800244c:	68f8      	ldr	r0, [r7, #12]
 800244e:	f012 fa37 	bl	80148c0 <vPortFree>
	    return fresult;
 8002452:	4b34      	ldr	r3, [pc, #208]	; (8002524 <Create_File+0x110>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	e05f      	b.n	8002518 <Create_File+0x104>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8002458:	220b      	movs	r2, #11
 800245a:	6879      	ldr	r1, [r7, #4]
 800245c:	4833      	ldr	r0, [pc, #204]	; (800252c <Create_File+0x118>)
 800245e:	f00d fbd7 	bl	800fc10 <f_open>
 8002462:	4603      	mov	r3, r0
 8002464:	461a      	mov	r2, r3
 8002466:	4b2f      	ldr	r3, [pc, #188]	; (8002524 <Create_File+0x110>)
 8002468:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 800246a:	4b2e      	ldr	r3, [pc, #184]	; (8002524 <Create_File+0x110>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d014      	beq.n	800249c <Create_File+0x88>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8002472:	2064      	movs	r0, #100	; 0x64
 8002474:	f012 f958 	bl	8014728 <pvPortMalloc>
 8002478:	6138      	str	r0, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 800247a:	4b2a      	ldr	r3, [pc, #168]	; (8002524 <Create_File+0x110>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	461a      	mov	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	492b      	ldr	r1, [pc, #172]	; (8002530 <Create_File+0x11c>)
 8002484:	6938      	ldr	r0, [r7, #16]
 8002486:	f013 ff5f 	bl	8016348 <siprintf>
			Send_Uart(buf);
 800248a:	6938      	ldr	r0, [r7, #16]
 800248c:	f7ff ff72 	bl	8002374 <Send_Uart>
			vPortFree(buf);
 8002490:	6938      	ldr	r0, [r7, #16]
 8002492:	f012 fa15 	bl	80148c0 <vPortFree>
		    return fresult;
 8002496:	4b23      	ldr	r3, [pc, #140]	; (8002524 <Create_File+0x110>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	e03d      	b.n	8002518 <Create_File+0x104>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 800249c:	2064      	movs	r0, #100	; 0x64
 800249e:	f012 f943 	bl	8014728 <pvPortMalloc>
 80024a2:	61f8      	str	r0, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	4923      	ldr	r1, [pc, #140]	; (8002534 <Create_File+0x120>)
 80024a8:	69f8      	ldr	r0, [r7, #28]
 80024aa:	f013 ff4d 	bl	8016348 <siprintf>
			Send_Uart(buf);
 80024ae:	69f8      	ldr	r0, [r7, #28]
 80024b0:	f7ff ff60 	bl	8002374 <Send_Uart>
			vPortFree(buf);
 80024b4:	69f8      	ldr	r0, [r7, #28]
 80024b6:	f012 fa03 	bl	80148c0 <vPortFree>
		}

		fresult = f_close(&fil);
 80024ba:	481c      	ldr	r0, [pc, #112]	; (800252c <Create_File+0x118>)
 80024bc:	f00e f857 	bl	801056e <f_close>
 80024c0:	4603      	mov	r3, r0
 80024c2:	461a      	mov	r2, r3
 80024c4:	4b17      	ldr	r3, [pc, #92]	; (8002524 <Create_File+0x110>)
 80024c6:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80024c8:	4b16      	ldr	r3, [pc, #88]	; (8002524 <Create_File+0x110>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d012      	beq.n	80024f6 <Create_File+0xe2>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80024d0:	2064      	movs	r0, #100	; 0x64
 80024d2:	f012 f929 	bl	8014728 <pvPortMalloc>
 80024d6:	6178      	str	r0, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 80024d8:	4b12      	ldr	r3, [pc, #72]	; (8002524 <Create_File+0x110>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	461a      	mov	r2, r3
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4915      	ldr	r1, [pc, #84]	; (8002538 <Create_File+0x124>)
 80024e2:	6978      	ldr	r0, [r7, #20]
 80024e4:	f013 ff30 	bl	8016348 <siprintf>
			Send_Uart(buf);
 80024e8:	6978      	ldr	r0, [r7, #20]
 80024ea:	f7ff ff43 	bl	8002374 <Send_Uart>
			vPortFree(buf);
 80024ee:	6978      	ldr	r0, [r7, #20]
 80024f0:	f012 f9e6 	bl	80148c0 <vPortFree>
 80024f4:	e00e      	b.n	8002514 <Create_File+0x100>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80024f6:	2064      	movs	r0, #100	; 0x64
 80024f8:	f012 f916 	bl	8014728 <pvPortMalloc>
 80024fc:	61b8      	str	r0, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80024fe:	687a      	ldr	r2, [r7, #4]
 8002500:	490e      	ldr	r1, [pc, #56]	; (800253c <Create_File+0x128>)
 8002502:	69b8      	ldr	r0, [r7, #24]
 8002504:	f013 ff20 	bl	8016348 <siprintf>
			Send_Uart(buf);
 8002508:	69b8      	ldr	r0, [r7, #24]
 800250a:	f7ff ff33 	bl	8002374 <Send_Uart>
			vPortFree(buf);
 800250e:	69b8      	ldr	r0, [r7, #24]
 8002510:	f012 f9d6 	bl	80148c0 <vPortFree>
		}
	}
    return fresult;
 8002514:	4b03      	ldr	r3, [pc, #12]	; (8002524 <Create_File+0x110>)
 8002516:	781b      	ldrb	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3720      	adds	r7, #32
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20005e1c 	.word	0x20005e1c
 8002524:	20006f80 	.word	0x20006f80
 8002528:	08018718 	.word	0x08018718
 800252c:	20006f88 	.word	0x20006f88
 8002530:	08018750 	.word	0x08018750
 8002534:	08018778 	.word	0x08018778
 8002538:	080187b8 	.word	0x080187b8
 800253c:	080186f8 	.word	0x080186f8

08002540 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b088      	sub	sp, #32
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800254a:	4953      	ldr	r1, [pc, #332]	; (8002698 <Update_File+0x158>)
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f00e f83d 	bl	80105cc <f_stat>
 8002552:	4603      	mov	r3, r0
 8002554:	461a      	mov	r2, r3
 8002556:	4b51      	ldr	r3, [pc, #324]	; (800269c <Update_File+0x15c>)
 8002558:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800255a:	4b50      	ldr	r3, [pc, #320]	; (800269c <Update_File+0x15c>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d011      	beq.n	8002586 <Update_File+0x46>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8002562:	2064      	movs	r0, #100	; 0x64
 8002564:	f012 f8e0 	bl	8014728 <pvPortMalloc>
 8002568:	60b8      	str	r0, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	494c      	ldr	r1, [pc, #304]	; (80026a0 <Update_File+0x160>)
 800256e:	68b8      	ldr	r0, [r7, #8]
 8002570:	f013 feea 	bl	8016348 <siprintf>
		Send_Uart (buf);
 8002574:	68b8      	ldr	r0, [r7, #8]
 8002576:	f7ff fefd 	bl	8002374 <Send_Uart>
		vPortFree(buf);
 800257a:	68b8      	ldr	r0, [r7, #8]
 800257c:	f012 f9a0 	bl	80148c0 <vPortFree>
	    return fresult;
 8002580:	4b46      	ldr	r3, [pc, #280]	; (800269c <Update_File+0x15c>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	e083      	b.n	800268e <Update_File+0x14e>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 8002586:	2232      	movs	r2, #50	; 0x32
 8002588:	6879      	ldr	r1, [r7, #4]
 800258a:	4846      	ldr	r0, [pc, #280]	; (80026a4 <Update_File+0x164>)
 800258c:	f00d fb40 	bl	800fc10 <f_open>
 8002590:	4603      	mov	r3, r0
 8002592:	461a      	mov	r2, r3
 8002594:	4b41      	ldr	r3, [pc, #260]	; (800269c <Update_File+0x15c>)
 8002596:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8002598:	4b40      	ldr	r3, [pc, #256]	; (800269c <Update_File+0x15c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d014      	beq.n	80025ca <Update_File+0x8a>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80025a0:	2064      	movs	r0, #100	; 0x64
 80025a2:	f012 f8c1 	bl	8014728 <pvPortMalloc>
 80025a6:	60f8      	str	r0, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80025a8:	4b3c      	ldr	r3, [pc, #240]	; (800269c <Update_File+0x15c>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	461a      	mov	r2, r3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	493d      	ldr	r1, [pc, #244]	; (80026a8 <Update_File+0x168>)
 80025b2:	68f8      	ldr	r0, [r7, #12]
 80025b4:	f013 fec8 	bl	8016348 <siprintf>
	    	Send_Uart(buf);
 80025b8:	68f8      	ldr	r0, [r7, #12]
 80025ba:	f7ff fedb 	bl	8002374 <Send_Uart>
	        vPortFree(buf);
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f012 f97e 	bl	80148c0 <vPortFree>
	        return fresult;
 80025c4:	4b35      	ldr	r3, [pc, #212]	; (800269c <Update_File+0x15c>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	e061      	b.n	800268e <Update_File+0x14e>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 80025ca:	6838      	ldr	r0, [r7, #0]
 80025cc:	f7fd fe00 	bl	80001d0 <strlen>
 80025d0:	4602      	mov	r2, r0
 80025d2:	4b36      	ldr	r3, [pc, #216]	; (80026ac <Update_File+0x16c>)
 80025d4:	6839      	ldr	r1, [r7, #0]
 80025d6:	4833      	ldr	r0, [pc, #204]	; (80026a4 <Update_File+0x164>)
 80025d8:	f00d fd7d 	bl	80100d6 <f_write>
 80025dc:	4603      	mov	r3, r0
 80025de:	461a      	mov	r2, r3
 80025e0:	4b2e      	ldr	r3, [pc, #184]	; (800269c <Update_File+0x15c>)
 80025e2:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80025e4:	4b2d      	ldr	r3, [pc, #180]	; (800269c <Update_File+0x15c>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d012      	beq.n	8002612 <Update_File+0xd2>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80025ec:	2064      	movs	r0, #100	; 0x64
 80025ee:	f012 f89b 	bl	8014728 <pvPortMalloc>
 80025f2:	61b8      	str	r0, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 80025f4:	4b29      	ldr	r3, [pc, #164]	; (800269c <Update_File+0x15c>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	492c      	ldr	r1, [pc, #176]	; (80026b0 <Update_File+0x170>)
 80025fe:	69b8      	ldr	r0, [r7, #24]
 8002600:	f013 fea2 	bl	8016348 <siprintf>
	    	Send_Uart(buf);
 8002604:	69b8      	ldr	r0, [r7, #24]
 8002606:	f7ff feb5 	bl	8002374 <Send_Uart>
	    	vPortFree(buf);
 800260a:	69b8      	ldr	r0, [r7, #24]
 800260c:	f012 f958 	bl	80148c0 <vPortFree>
 8002610:	e00e      	b.n	8002630 <Update_File+0xf0>
	    }

	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8002612:	2064      	movs	r0, #100	; 0x64
 8002614:	f012 f888 	bl	8014728 <pvPortMalloc>
 8002618:	61f8      	str	r0, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 800261a:	687a      	ldr	r2, [r7, #4]
 800261c:	4925      	ldr	r1, [pc, #148]	; (80026b4 <Update_File+0x174>)
 800261e:	69f8      	ldr	r0, [r7, #28]
 8002620:	f013 fe92 	bl	8016348 <siprintf>
	    	Send_Uart(buf);
 8002624:	69f8      	ldr	r0, [r7, #28]
 8002626:	f7ff fea5 	bl	8002374 <Send_Uart>
	    	vPortFree(buf);
 800262a:	69f8      	ldr	r0, [r7, #28]
 800262c:	f012 f948 	bl	80148c0 <vPortFree>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8002630:	481c      	ldr	r0, [pc, #112]	; (80026a4 <Update_File+0x164>)
 8002632:	f00d ff9c 	bl	801056e <f_close>
 8002636:	4603      	mov	r3, r0
 8002638:	461a      	mov	r2, r3
 800263a:	4b18      	ldr	r3, [pc, #96]	; (800269c <Update_File+0x15c>)
 800263c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800263e:	4b17      	ldr	r3, [pc, #92]	; (800269c <Update_File+0x15c>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d012      	beq.n	800266c <Update_File+0x12c>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8002646:	2064      	movs	r0, #100	; 0x64
 8002648:	f012 f86e 	bl	8014728 <pvPortMalloc>
 800264c:	6138      	str	r0, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800264e:	4b13      	ldr	r3, [pc, #76]	; (800269c <Update_File+0x15c>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	461a      	mov	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	4918      	ldr	r1, [pc, #96]	; (80026b8 <Update_File+0x178>)
 8002658:	6938      	ldr	r0, [r7, #16]
 800265a:	f013 fe75 	bl	8016348 <siprintf>
	    	Send_Uart(buf);
 800265e:	6938      	ldr	r0, [r7, #16]
 8002660:	f7ff fe88 	bl	8002374 <Send_Uart>
	    	vPortFree(buf);
 8002664:	6938      	ldr	r0, [r7, #16]
 8002666:	f012 f92b 	bl	80148c0 <vPortFree>
 800266a:	e00e      	b.n	800268a <Update_File+0x14a>
	    }
	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 800266c:	2064      	movs	r0, #100	; 0x64
 800266e:	f012 f85b 	bl	8014728 <pvPortMalloc>
 8002672:	6178      	str	r0, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	4911      	ldr	r1, [pc, #68]	; (80026bc <Update_File+0x17c>)
 8002678:	6978      	ldr	r0, [r7, #20]
 800267a:	f013 fe65 	bl	8016348 <siprintf>
	    	Send_Uart(buf);
 800267e:	6978      	ldr	r0, [r7, #20]
 8002680:	f7ff fe78 	bl	8002374 <Send_Uart>
	    	vPortFree(buf);
 8002684:	6978      	ldr	r0, [r7, #20]
 8002686:	f012 f91b 	bl	80148c0 <vPortFree>
	     }
	}
    return fresult;
 800268a:	4b04      	ldr	r3, [pc, #16]	; (800269c <Update_File+0x15c>)
 800268c:	781b      	ldrb	r3, [r3, #0]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3720      	adds	r7, #32
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	20005e1c 	.word	0x20005e1c
 800269c:	20006f80 	.word	0x20006f80
 80026a0:	080185a0 	.word	0x080185a0
 80026a4:	20006f88 	.word	0x20006f88
 80026a8:	080185c0 	.word	0x080185c0
 80026ac:	20006f78 	.word	0x20006f78
 80026b0:	080187dc 	.word	0x080187dc
 80026b4:	08018804 	.word	0x08018804
 80026b8:	080186d0 	.word	0x080186d0
 80026bc:	080186f8 	.word	0x080186f8

080026c0 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f00d ffcc 	bl	8010666 <f_mkdir>
 80026ce:	4603      	mov	r3, r0
 80026d0:	461a      	mov	r2, r3
 80026d2:	4b17      	ldr	r3, [pc, #92]	; (8002730 <Create_Dir+0x70>)
 80026d4:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 80026d6:	4b16      	ldr	r3, [pc, #88]	; (8002730 <Create_Dir+0x70>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d10f      	bne.n	80026fe <Create_Dir+0x3e>
    {
    	char *buf = pvPortMalloc(100*sizeof(char));
 80026de:	2064      	movs	r0, #100	; 0x64
 80026e0:	f012 f822 	bl	8014728 <pvPortMalloc>
 80026e4:	60b8      	str	r0, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n", name);
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	4912      	ldr	r1, [pc, #72]	; (8002734 <Create_Dir+0x74>)
 80026ea:	68b8      	ldr	r0, [r7, #8]
 80026ec:	f013 fe2c 	bl	8016348 <siprintf>
    	Send_Uart (buf);
 80026f0:	68b8      	ldr	r0, [r7, #8]
 80026f2:	f7ff fe3f 	bl	8002374 <Send_Uart>
    	vPortFree(buf);
 80026f6:	68b8      	ldr	r0, [r7, #8]
 80026f8:	f012 f8e2 	bl	80148c0 <vPortFree>
 80026fc:	e011      	b.n	8002722 <Create_Dir+0x62>
    }
    else
    {
    	char *buf = pvPortMalloc(100*sizeof(char));
 80026fe:	2064      	movs	r0, #100	; 0x64
 8002700:	f012 f812 	bl	8014728 <pvPortMalloc>
 8002704:	60f8      	str	r0, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 8002706:	4b0a      	ldr	r3, [pc, #40]	; (8002730 <Create_Dir+0x70>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	461a      	mov	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	490a      	ldr	r1, [pc, #40]	; (8002738 <Create_Dir+0x78>)
 8002710:	68f8      	ldr	r0, [r7, #12]
 8002712:	f013 fe19 	bl	8016348 <siprintf>
    	Send_Uart(buf);
 8002716:	68f8      	ldr	r0, [r7, #12]
 8002718:	f7ff fe2c 	bl	8002374 <Send_Uart>
    	vPortFree(buf);
 800271c:	68f8      	ldr	r0, [r7, #12]
 800271e:	f012 f8cf 	bl	80148c0 <vPortFree>
    }
    return fresult;
 8002722:	4b03      	ldr	r3, [pc, #12]	; (8002730 <Create_Dir+0x70>)
 8002724:	781b      	ldrb	r3, [r3, #0]
}
 8002726:	4618      	mov	r0, r3
 8002728:	3710      	adds	r7, #16
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20006f80 	.word	0x20006f80
 8002734:	08018864 	.word	0x08018864
 8002738:	08018888 	.word	0x08018888

0800273c <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002740:	2200      	movs	r2, #0
 8002742:	2140      	movs	r1, #64	; 0x40
 8002744:	4802      	ldr	r0, [pc, #8]	; (8002750 <SELECT+0x14>)
 8002746:	f002 ff77 	bl	8005638 <HAL_GPIO_WritePin>
}
 800274a:	bf00      	nop
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40020800 	.word	0x40020800

08002754 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002758:	2201      	movs	r2, #1
 800275a:	2140      	movs	r1, #64	; 0x40
 800275c:	4802      	ldr	r0, [pc, #8]	; (8002768 <DESELECT+0x14>)
 800275e:	f002 ff6b 	bl	8005638 <HAL_GPIO_WritePin>
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40020800 	.word	0x40020800

0800276c <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b082      	sub	sp, #8
 8002770:	af00      	add	r7, sp, #0
 8002772:	4603      	mov	r3, r0
 8002774:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8002776:	bf00      	nop
 8002778:	4808      	ldr	r0, [pc, #32]	; (800279c <SPI_TxByte+0x30>)
 800277a:	f007 f8dc 	bl	8009936 <HAL_SPI_GetState>
 800277e:	4603      	mov	r3, r0
 8002780:	2b01      	cmp	r3, #1
 8002782:	d1f9      	bne.n	8002778 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8002784:	1df9      	adds	r1, r7, #7
 8002786:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800278a:	2201      	movs	r2, #1
 800278c:	4803      	ldr	r0, [pc, #12]	; (800279c <SPI_TxByte+0x30>)
 800278e:	f006 fdf4 	bl	800937a <HAL_SPI_Transmit>
}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	2000efec 	.word	0x2000efec

080027a0 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80027a6:	23ff      	movs	r3, #255	; 0xff
 80027a8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80027ae:	bf00      	nop
 80027b0:	4809      	ldr	r0, [pc, #36]	; (80027d8 <SPI_RxByte+0x38>)
 80027b2:	f007 f8c0 	bl	8009936 <HAL_SPI_GetState>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d1f9      	bne.n	80027b0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80027bc:	1dba      	adds	r2, r7, #6
 80027be:	1df9      	adds	r1, r7, #7
 80027c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	2301      	movs	r3, #1
 80027c8:	4803      	ldr	r0, [pc, #12]	; (80027d8 <SPI_RxByte+0x38>)
 80027ca:	f006 ff12 	bl	80095f2 <HAL_SPI_TransmitReceive>
  
  return data;
 80027ce:	79bb      	ldrb	r3, [r7, #6]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	2000efec 	.word	0x2000efec

080027dc <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80027e4:	f7ff ffdc 	bl	80027a0 <SPI_RxByte>
 80027e8:	4603      	mov	r3, r0
 80027ea:	461a      	mov	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	701a      	strb	r2, [r3, #0]
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 80027fe:	4b0b      	ldr	r3, [pc, #44]	; (800282c <SD_ReadyWait+0x34>)
 8002800:	2232      	movs	r2, #50	; 0x32
 8002802:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8002804:	f7ff ffcc 	bl	80027a0 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8002808:	f7ff ffca 	bl	80027a0 <SPI_RxByte>
 800280c:	4603      	mov	r3, r0
 800280e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8002810:	79fb      	ldrb	r3, [r7, #7]
 8002812:	2bff      	cmp	r3, #255	; 0xff
 8002814:	d004      	beq.n	8002820 <SD_ReadyWait+0x28>
 8002816:	4b05      	ldr	r3, [pc, #20]	; (800282c <SD_ReadyWait+0x34>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	b2db      	uxtb	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f3      	bne.n	8002808 <SD_ReadyWait+0x10>
  
  return res;
 8002820:	79fb      	ldrb	r3, [r7, #7]
}
 8002822:	4618      	mov	r0, r3
 8002824:	3708      	adds	r7, #8
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	2000efe4 	.word	0x2000efe4

08002830 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8002836:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800283a:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 800283c:	f7ff ff8a 	bl	8002754 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8002840:	2300      	movs	r3, #0
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	e005      	b.n	8002852 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8002846:	20ff      	movs	r0, #255	; 0xff
 8002848:	f7ff ff90 	bl	800276c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	3301      	adds	r3, #1
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	2b09      	cmp	r3, #9
 8002856:	ddf6      	ble.n	8002846 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8002858:	f7ff ff70 	bl	800273c <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 800285c:	2340      	movs	r3, #64	; 0x40
 800285e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8002868:	2300      	movs	r3, #0
 800286a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800286c:	2300      	movs	r3, #0
 800286e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8002870:	2395      	movs	r3, #149	; 0x95
 8002872:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8002874:	2300      	movs	r3, #0
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	e009      	b.n	800288e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800287a:	1d3a      	adds	r2, r7, #4
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	4413      	add	r3, r2
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7ff ff72 	bl	800276c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3301      	adds	r3, #1
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b05      	cmp	r3, #5
 8002892:	ddf2      	ble.n	800287a <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8002894:	e002      	b.n	800289c <SD_PowerOn+0x6c>
  {
    Count--;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	3b01      	subs	r3, #1
 800289a:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 800289c:	f7ff ff80 	bl	80027a0 <SPI_RxByte>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d002      	beq.n	80028ac <SD_PowerOn+0x7c>
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f4      	bne.n	8002896 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 80028ac:	f7ff ff52 	bl	8002754 <DESELECT>
  SPI_TxByte(0XFF);
 80028b0:	20ff      	movs	r0, #255	; 0xff
 80028b2:	f7ff ff5b 	bl	800276c <SPI_TxByte>
  
  PowerFlag = 1;
 80028b6:	4b03      	ldr	r3, [pc, #12]	; (80028c4 <SD_PowerOn+0x94>)
 80028b8:	2201      	movs	r2, #1
 80028ba:	701a      	strb	r2, [r3, #0]
}
 80028bc:	bf00      	nop
 80028be:	3718      	adds	r7, #24
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd80      	pop	{r7, pc}
 80028c4:	2000038d 	.word	0x2000038d

080028c8 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80028cc:	4b03      	ldr	r3, [pc, #12]	; (80028dc <SD_PowerOff+0x14>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
}
 80028d2:	bf00      	nop
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	2000038d 	.word	0x2000038d

080028e0 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80028e4:	4b03      	ldr	r3, [pc, #12]	; (80028f4 <SD_CheckPower+0x14>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	2000038d 	.word	0x2000038d

080028f8 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8002902:	4b17      	ldr	r3, [pc, #92]	; (8002960 <SD_RxDataBlock+0x68>)
 8002904:	220a      	movs	r2, #10
 8002906:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8002908:	f7ff ff4a 	bl	80027a0 <SPI_RxByte>
 800290c:	4603      	mov	r3, r0
 800290e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	2bff      	cmp	r3, #255	; 0xff
 8002914:	d104      	bne.n	8002920 <SD_RxDataBlock+0x28>
 8002916:	4b12      	ldr	r3, [pc, #72]	; (8002960 <SD_RxDataBlock+0x68>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1f3      	bne.n	8002908 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	2bfe      	cmp	r3, #254	; 0xfe
 8002924:	d001      	beq.n	800292a <SD_RxDataBlock+0x32>
    return FALSE;
 8002926:	2300      	movs	r3, #0
 8002928:	e016      	b.n	8002958 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	607a      	str	r2, [r7, #4]
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff ff53 	bl	80027dc <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	607a      	str	r2, [r7, #4]
 800293c:	4618      	mov	r0, r3
 800293e:	f7ff ff4d 	bl	80027dc <SPI_RxBytePtr>
  } while(btr -= 2);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	3b02      	subs	r3, #2
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1ed      	bne.n	800292a <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 800294e:	f7ff ff27 	bl	80027a0 <SPI_RxByte>
  SPI_RxByte();
 8002952:	f7ff ff25 	bl	80027a0 <SPI_RxByte>
  
  return TRUE;
 8002956:	2301      	movs	r3, #1
}
 8002958:	4618      	mov	r0, r3
 800295a:	3710      	adds	r7, #16
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	2001014c 	.word	0x2001014c

08002964 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8002974:	f7ff ff40 	bl	80027f8 <SD_ReadyWait>
 8002978:	4603      	mov	r3, r0
 800297a:	2bff      	cmp	r3, #255	; 0xff
 800297c:	d001      	beq.n	8002982 <SD_TxDataBlock+0x1e>
    return FALSE;
 800297e:	2300      	movs	r3, #0
 8002980:	e040      	b.n	8002a04 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8002982:	78fb      	ldrb	r3, [r7, #3]
 8002984:	4618      	mov	r0, r3
 8002986:	f7ff fef1 	bl	800276c <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	2bfd      	cmp	r3, #253	; 0xfd
 800298e:	d031      	beq.n	80029f4 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8002990:	2300      	movs	r3, #0
 8002992:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	607a      	str	r2, [r7, #4]
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff fee5 	bl	800276c <SPI_TxByte>
      SPI_TxByte(*buff++);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	781b      	ldrb	r3, [r3, #0]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff fede 	bl	800276c <SPI_TxByte>
    } while (--wc);
 80029b0:	7bbb      	ldrb	r3, [r7, #14]
 80029b2:	3b01      	subs	r3, #1
 80029b4:	73bb      	strb	r3, [r7, #14]
 80029b6:	7bbb      	ldrb	r3, [r7, #14]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d1eb      	bne.n	8002994 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 80029bc:	f7ff fef0 	bl	80027a0 <SPI_RxByte>
    SPI_RxByte();
 80029c0:	f7ff feee 	bl	80027a0 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 80029c4:	e00b      	b.n	80029de <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 80029c6:	f7ff feeb 	bl	80027a0 <SPI_RxByte>
 80029ca:	4603      	mov	r3, r0
 80029cc:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	f003 031f 	and.w	r3, r3, #31
 80029d4:	2b05      	cmp	r3, #5
 80029d6:	d006      	beq.n	80029e6 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 80029d8:	7b7b      	ldrb	r3, [r7, #13]
 80029da:	3301      	adds	r3, #1
 80029dc:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 80029de:	7b7b      	ldrb	r3, [r7, #13]
 80029e0:	2b40      	cmp	r3, #64	; 0x40
 80029e2:	d9f0      	bls.n	80029c6 <SD_TxDataBlock+0x62>
 80029e4:	e000      	b.n	80029e8 <SD_TxDataBlock+0x84>
        break;
 80029e6:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80029e8:	bf00      	nop
 80029ea:	f7ff fed9 	bl	80027a0 <SPI_RxByte>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0fa      	beq.n	80029ea <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 80029f4:	7bfb      	ldrb	r3, [r7, #15]
 80029f6:	f003 031f 	and.w	r3, r3, #31
 80029fa:	2b05      	cmp	r3, #5
 80029fc:	d101      	bne.n	8002a02 <SD_TxDataBlock+0x9e>
    return TRUE;
 80029fe:	2301      	movs	r3, #1
 8002a00:	e000      	b.n	8002a04 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	6039      	str	r1, [r7, #0]
 8002a16:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8002a18:	f7ff feee 	bl	80027f8 <SD_ReadyWait>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2bff      	cmp	r3, #255	; 0xff
 8002a20:	d001      	beq.n	8002a26 <SD_SendCmd+0x1a>
    return 0xFF;
 8002a22:	23ff      	movs	r3, #255	; 0xff
 8002a24:	e040      	b.n	8002aa8 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8002a26:	79fb      	ldrb	r3, [r7, #7]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff fe9f 	bl	800276c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	0e1b      	lsrs	r3, r3, #24
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff fe99 	bl	800276c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	0c1b      	lsrs	r3, r3, #16
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff fe93 	bl	800276c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	0a1b      	lsrs	r3, r3, #8
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f7ff fe8d 	bl	800276c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fe88 	bl	800276c <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8002a60:	79fb      	ldrb	r3, [r7, #7]
 8002a62:	2b40      	cmp	r3, #64	; 0x40
 8002a64:	d101      	bne.n	8002a6a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8002a66:	2395      	movs	r3, #149	; 0x95
 8002a68:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	2b48      	cmp	r3, #72	; 0x48
 8002a6e:	d101      	bne.n	8002a74 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8002a70:	2387      	movs	r3, #135	; 0x87
 8002a72:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fe78 	bl	800276c <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	2b4c      	cmp	r3, #76	; 0x4c
 8002a80:	d101      	bne.n	8002a86 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8002a82:	f7ff fe8d 	bl	80027a0 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8002a86:	230a      	movs	r3, #10
 8002a88:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8002a8a:	f7ff fe89 	bl	80027a0 <SPI_RxByte>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8002a92:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	da05      	bge.n	8002aa6 <SD_SendCmd+0x9a>
 8002a9a:	7bbb      	ldrb	r3, [r7, #14]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	73bb      	strb	r3, [r7, #14]
 8002aa0:	7bbb      	ldrb	r3, [r7, #14]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d1f1      	bne.n	8002a8a <SD_SendCmd+0x7e>
  
  return res;
 8002aa6:	7b7b      	ldrb	r3, [r7, #13]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3710      	adds	r7, #16
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b085      	sub	sp, #20
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8002aba:	79fb      	ldrb	r3, [r7, #7]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0d5      	b.n	8002c70 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8002ac4:	4b6c      	ldr	r3, [pc, #432]	; (8002c78 <SD_disk_initialize+0x1c8>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d003      	beq.n	8002ada <SD_disk_initialize+0x2a>
    return Stat;        
 8002ad2:	4b69      	ldr	r3, [pc, #420]	; (8002c78 <SD_disk_initialize+0x1c8>)
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	e0ca      	b.n	8002c70 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8002ada:	f7ff fea9 	bl	8002830 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8002ade:	f7ff fe2d 	bl	800273c <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	2040      	movs	r0, #64	; 0x40
 8002aea:	f7ff ff8f 	bl	8002a0c <SD_SendCmd>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	f040 80a5 	bne.w	8002c40 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8002af6:	4b61      	ldr	r3, [pc, #388]	; (8002c7c <SD_disk_initialize+0x1cc>)
 8002af8:	2264      	movs	r2, #100	; 0x64
 8002afa:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8002afc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002b00:	2048      	movs	r0, #72	; 0x48
 8002b02:	f7ff ff83 	bl	8002a0c <SD_SendCmd>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d158      	bne.n	8002bbe <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	73fb      	strb	r3, [r7, #15]
 8002b10:	e00c      	b.n	8002b2c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8002b12:	7bfc      	ldrb	r4, [r7, #15]
 8002b14:	f7ff fe44 	bl	80027a0 <SPI_RxByte>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f107 0310 	add.w	r3, r7, #16
 8002b20:	4423      	add	r3, r4
 8002b22:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8002b26:	7bfb      	ldrb	r3, [r7, #15]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	73fb      	strb	r3, [r7, #15]
 8002b2c:	7bfb      	ldrb	r3, [r7, #15]
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d9ef      	bls.n	8002b12 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8002b32:	7abb      	ldrb	r3, [r7, #10]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	f040 8083 	bne.w	8002c40 <SD_disk_initialize+0x190>
 8002b3a:	7afb      	ldrb	r3, [r7, #11]
 8002b3c:	2baa      	cmp	r3, #170	; 0xaa
 8002b3e:	d17f      	bne.n	8002c40 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8002b40:	2100      	movs	r1, #0
 8002b42:	2077      	movs	r0, #119	; 0x77
 8002b44:	f7ff ff62 	bl	8002a0c <SD_SendCmd>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b01      	cmp	r3, #1
 8002b4c:	d807      	bhi.n	8002b5e <SD_disk_initialize+0xae>
 8002b4e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002b52:	2069      	movs	r0, #105	; 0x69
 8002b54:	f7ff ff5a 	bl	8002a0c <SD_SendCmd>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d005      	beq.n	8002b6a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8002b5e:	4b47      	ldr	r3, [pc, #284]	; (8002c7c <SD_disk_initialize+0x1cc>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1eb      	bne.n	8002b40 <SD_disk_initialize+0x90>
 8002b68:	e000      	b.n	8002b6c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8002b6a:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8002b6c:	4b43      	ldr	r3, [pc, #268]	; (8002c7c <SD_disk_initialize+0x1cc>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d064      	beq.n	8002c40 <SD_disk_initialize+0x190>
 8002b76:	2100      	movs	r1, #0
 8002b78:	207a      	movs	r0, #122	; 0x7a
 8002b7a:	f7ff ff47 	bl	8002a0c <SD_SendCmd>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d15d      	bne.n	8002c40 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8002b84:	2300      	movs	r3, #0
 8002b86:	73fb      	strb	r3, [r7, #15]
 8002b88:	e00c      	b.n	8002ba4 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8002b8a:	7bfc      	ldrb	r4, [r7, #15]
 8002b8c:	f7ff fe08 	bl	80027a0 <SPI_RxByte>
 8002b90:	4603      	mov	r3, r0
 8002b92:	461a      	mov	r2, r3
 8002b94:	f107 0310 	add.w	r3, r7, #16
 8002b98:	4423      	add	r3, r4
 8002b9a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8002b9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	73fb      	strb	r3, [r7, #15]
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	2b03      	cmp	r3, #3
 8002ba8:	d9ef      	bls.n	8002b8a <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8002baa:	7a3b      	ldrb	r3, [r7, #8]
 8002bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <SD_disk_initialize+0x108>
 8002bb4:	2306      	movs	r3, #6
 8002bb6:	e000      	b.n	8002bba <SD_disk_initialize+0x10a>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	73bb      	strb	r3, [r7, #14]
 8002bbc:	e040      	b.n	8002c40 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8002bbe:	2100      	movs	r1, #0
 8002bc0:	2077      	movs	r0, #119	; 0x77
 8002bc2:	f7ff ff23 	bl	8002a0c <SD_SendCmd>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d808      	bhi.n	8002bde <SD_disk_initialize+0x12e>
 8002bcc:	2100      	movs	r1, #0
 8002bce:	2069      	movs	r0, #105	; 0x69
 8002bd0:	f7ff ff1c 	bl	8002a0c <SD_SendCmd>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d801      	bhi.n	8002bde <SD_disk_initialize+0x12e>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e000      	b.n	8002be0 <SD_disk_initialize+0x130>
 8002bde:	2301      	movs	r3, #1
 8002be0:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8002be2:	7bbb      	ldrb	r3, [r7, #14]
 8002be4:	2b02      	cmp	r3, #2
 8002be6:	d10e      	bne.n	8002c06 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8002be8:	2100      	movs	r1, #0
 8002bea:	2077      	movs	r0, #119	; 0x77
 8002bec:	f7ff ff0e 	bl	8002a0c <SD_SendCmd>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d80e      	bhi.n	8002c14 <SD_disk_initialize+0x164>
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	2069      	movs	r0, #105	; 0x69
 8002bfa:	f7ff ff07 	bl	8002a0c <SD_SendCmd>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d107      	bne.n	8002c14 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8002c04:	e00d      	b.n	8002c22 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8002c06:	2100      	movs	r1, #0
 8002c08:	2041      	movs	r0, #65	; 0x41
 8002c0a:	f7ff feff 	bl	8002a0c <SD_SendCmd>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d005      	beq.n	8002c20 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8002c14:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <SD_disk_initialize+0x1cc>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1e1      	bne.n	8002be2 <SD_disk_initialize+0x132>
 8002c1e:	e000      	b.n	8002c22 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8002c20:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8002c22:	4b16      	ldr	r3, [pc, #88]	; (8002c7c <SD_disk_initialize+0x1cc>)
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d007      	beq.n	8002c3c <SD_disk_initialize+0x18c>
 8002c2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c30:	2050      	movs	r0, #80	; 0x50
 8002c32:	f7ff feeb 	bl	8002a0c <SD_SendCmd>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8002c40:	4a0f      	ldr	r2, [pc, #60]	; (8002c80 <SD_disk_initialize+0x1d0>)
 8002c42:	7bbb      	ldrb	r3, [r7, #14]
 8002c44:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8002c46:	f7ff fd85 	bl	8002754 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8002c4a:	f7ff fda9 	bl	80027a0 <SPI_RxByte>
  
  if (type) 
 8002c4e:	7bbb      	ldrb	r3, [r7, #14]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d008      	beq.n	8002c66 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8002c54:	4b08      	ldr	r3, [pc, #32]	; (8002c78 <SD_disk_initialize+0x1c8>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	f023 0301 	bic.w	r3, r3, #1
 8002c5e:	b2da      	uxtb	r2, r3
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <SD_disk_initialize+0x1c8>)
 8002c62:	701a      	strb	r2, [r3, #0]
 8002c64:	e001      	b.n	8002c6a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8002c66:	f7ff fe2f 	bl	80028c8 <SD_PowerOff>
  }
  
  return Stat;
 8002c6a:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <SD_disk_initialize+0x1c8>)
 8002c6c:	781b      	ldrb	r3, [r3, #0]
 8002c6e:	b2db      	uxtb	r3, r3
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	3714      	adds	r7, #20
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd90      	pop	{r4, r7, pc}
 8002c78:	20000000 	.word	0x20000000
 8002c7c:	2001014c 	.word	0x2001014c
 8002c80:	2000038c 	.word	0x2000038c

08002c84 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8002c8e:	79fb      	ldrb	r3, [r7, #7]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8002c94:	2301      	movs	r3, #1
 8002c96:	e002      	b.n	8002c9e <SD_disk_status+0x1a>
  
  return Stat;
 8002c98:	4b04      	ldr	r3, [pc, #16]	; (8002cac <SD_disk_status+0x28>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	b2db      	uxtb	r3, r3
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	370c      	adds	r7, #12
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	20000000 	.word	0x20000000

08002cb0 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60b9      	str	r1, [r7, #8]
 8002cb8:	607a      	str	r2, [r7, #4]
 8002cba:	603b      	str	r3, [r7, #0]
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d102      	bne.n	8002ccc <SD_disk_read+0x1c>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d101      	bne.n	8002cd0 <SD_disk_read+0x20>
    return RES_PARERR;
 8002ccc:	2304      	movs	r3, #4
 8002cce:	e051      	b.n	8002d74 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8002cd0:	4b2a      	ldr	r3, [pc, #168]	; (8002d7c <SD_disk_read+0xcc>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	f003 0301 	and.w	r3, r3, #1
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e048      	b.n	8002d74 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8002ce2:	4b27      	ldr	r3, [pc, #156]	; (8002d80 <SD_disk_read+0xd0>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	f003 0304 	and.w	r3, r3, #4
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d102      	bne.n	8002cf4 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	025b      	lsls	r3, r3, #9
 8002cf2:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8002cf4:	f7ff fd22 	bl	800273c <SELECT>
  
  if (count == 1) 
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d111      	bne.n	8002d22 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	2051      	movs	r0, #81	; 0x51
 8002d02:	f7ff fe83 	bl	8002a0c <SD_SendCmd>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d129      	bne.n	8002d60 <SD_disk_read+0xb0>
 8002d0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d10:	68b8      	ldr	r0, [r7, #8]
 8002d12:	f7ff fdf1 	bl	80028f8 <SD_RxDataBlock>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d021      	beq.n	8002d60 <SD_disk_read+0xb0>
      count = 0;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	e01e      	b.n	8002d60 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	2052      	movs	r0, #82	; 0x52
 8002d26:	f7ff fe71 	bl	8002a0c <SD_SendCmd>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d117      	bne.n	8002d60 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8002d30:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d34:	68b8      	ldr	r0, [r7, #8]
 8002d36:	f7ff fddf 	bl	80028f8 <SD_RxDataBlock>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d00a      	beq.n	8002d56 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002d46:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	603b      	str	r3, [r7, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d1ed      	bne.n	8002d30 <SD_disk_read+0x80>
 8002d54:	e000      	b.n	8002d58 <SD_disk_read+0xa8>
          break;
 8002d56:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8002d58:	2100      	movs	r1, #0
 8002d5a:	204c      	movs	r0, #76	; 0x4c
 8002d5c:	f7ff fe56 	bl	8002a0c <SD_SendCmd>
    }
  }
  
  DESELECT();
 8002d60:	f7ff fcf8 	bl	8002754 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8002d64:	f7ff fd1c 	bl	80027a0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	bf14      	ite	ne
 8002d6e:	2301      	movne	r3, #1
 8002d70:	2300      	moveq	r3, #0
 8002d72:	b2db      	uxtb	r3, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	20000000 	.word	0x20000000
 8002d80:	2000038c 	.word	0x2000038c

08002d84 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	607a      	str	r2, [r7, #4]
 8002d8e:	603b      	str	r3, [r7, #0]
 8002d90:	4603      	mov	r3, r0
 8002d92:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002d94:	7bfb      	ldrb	r3, [r7, #15]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d102      	bne.n	8002da0 <SD_disk_write+0x1c>
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <SD_disk_write+0x20>
    return RES_PARERR;
 8002da0:	2304      	movs	r3, #4
 8002da2:	e06b      	b.n	8002e7c <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8002da4:	4b37      	ldr	r3, [pc, #220]	; (8002e84 <SD_disk_write+0x100>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	b2db      	uxtb	r3, r3
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8002db2:	2303      	movs	r3, #3
 8002db4:	e062      	b.n	8002e7c <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8002db6:	4b33      	ldr	r3, [pc, #204]	; (8002e84 <SD_disk_write+0x100>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d001      	beq.n	8002dc8 <SD_disk_write+0x44>
    return RES_WRPRT;
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e059      	b.n	8002e7c <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8002dc8:	4b2f      	ldr	r3, [pc, #188]	; (8002e88 <SD_disk_write+0x104>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d102      	bne.n	8002dda <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	025b      	lsls	r3, r3, #9
 8002dd8:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8002dda:	f7ff fcaf 	bl	800273c <SELECT>
  
  if (count == 1) 
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d110      	bne.n	8002e06 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	2058      	movs	r0, #88	; 0x58
 8002de8:	f7ff fe10 	bl	8002a0c <SD_SendCmd>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d13a      	bne.n	8002e68 <SD_disk_write+0xe4>
 8002df2:	21fe      	movs	r1, #254	; 0xfe
 8002df4:	68b8      	ldr	r0, [r7, #8]
 8002df6:	f7ff fdb5 	bl	8002964 <SD_TxDataBlock>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d033      	beq.n	8002e68 <SD_disk_write+0xe4>
      count = 0;
 8002e00:	2300      	movs	r3, #0
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	e030      	b.n	8002e68 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8002e06:	4b20      	ldr	r3, [pc, #128]	; (8002e88 <SD_disk_write+0x104>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d007      	beq.n	8002e22 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8002e12:	2100      	movs	r1, #0
 8002e14:	2077      	movs	r0, #119	; 0x77
 8002e16:	f7ff fdf9 	bl	8002a0c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8002e1a:	6839      	ldr	r1, [r7, #0]
 8002e1c:	2057      	movs	r0, #87	; 0x57
 8002e1e:	f7ff fdf5 	bl	8002a0c <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	2059      	movs	r0, #89	; 0x59
 8002e26:	f7ff fdf1 	bl	8002a0c <SD_SendCmd>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d11b      	bne.n	8002e68 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8002e30:	21fc      	movs	r1, #252	; 0xfc
 8002e32:	68b8      	ldr	r0, [r7, #8]
 8002e34:	f7ff fd96 	bl	8002964 <SD_TxDataBlock>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d00a      	beq.n	8002e54 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002e44:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1ee      	bne.n	8002e30 <SD_disk_write+0xac>
 8002e52:	e000      	b.n	8002e56 <SD_disk_write+0xd2>
          break;
 8002e54:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8002e56:	21fd      	movs	r1, #253	; 0xfd
 8002e58:	2000      	movs	r0, #0
 8002e5a:	f7ff fd83 	bl	8002964 <SD_TxDataBlock>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <SD_disk_write+0xe4>
      {        
        count = 1;
 8002e64:	2301      	movs	r3, #1
 8002e66:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8002e68:	f7ff fc74 	bl	8002754 <DESELECT>
  SPI_RxByte();
 8002e6c:	f7ff fc98 	bl	80027a0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	bf14      	ite	ne
 8002e76:	2301      	movne	r3, #1
 8002e78:	2300      	moveq	r3, #0
 8002e7a:	b2db      	uxtb	r3, r3
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	20000000 	.word	0x20000000
 8002e88:	2000038c 	.word	0x2000038c

08002e8c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002e8c:	b590      	push	{r4, r7, lr}
 8002e8e:	b08b      	sub	sp, #44	; 0x2c
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	603a      	str	r2, [r7, #0]
 8002e96:	71fb      	strb	r3, [r7, #7]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8002ea6:	2304      	movs	r3, #4
 8002ea8:	e11b      	b.n	80030e2 <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8002eb0:	79bb      	ldrb	r3, [r7, #6]
 8002eb2:	2b05      	cmp	r3, #5
 8002eb4:	d129      	bne.n	8002f0a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d017      	beq.n	8002eee <SD_disk_ioctl+0x62>
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	dc1f      	bgt.n	8002f02 <SD_disk_ioctl+0x76>
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <SD_disk_ioctl+0x40>
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d00b      	beq.n	8002ee2 <SD_disk_ioctl+0x56>
 8002eca:	e01a      	b.n	8002f02 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8002ecc:	f7ff fd08 	bl	80028e0 <SD_CheckPower>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8002ed6:	f7ff fcf7 	bl	80028c8 <SD_PowerOff>
      res = RES_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002ee0:	e0fd      	b.n	80030de <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8002ee2:	f7ff fca5 	bl	8002830 <SD_PowerOn>
      res = RES_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002eec:	e0f7      	b.n	80030de <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8002eee:	6a3b      	ldr	r3, [r7, #32]
 8002ef0:	1c5c      	adds	r4, r3, #1
 8002ef2:	f7ff fcf5 	bl	80028e0 <SD_CheckPower>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8002efa:	2300      	movs	r3, #0
 8002efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002f00:	e0ed      	b.n	80030de <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8002f02:	2304      	movs	r3, #4
 8002f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002f08:	e0e9      	b.n	80030de <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8002f0a:	4b78      	ldr	r3, [pc, #480]	; (80030ec <SD_disk_ioctl+0x260>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e0e2      	b.n	80030e2 <SD_disk_ioctl+0x256>
    
    SELECT();
 8002f1c:	f7ff fc0e 	bl	800273c <SELECT>
    
    switch (ctrl) 
 8002f20:	79bb      	ldrb	r3, [r7, #6]
 8002f22:	2b0d      	cmp	r3, #13
 8002f24:	f200 80cc 	bhi.w	80030c0 <SD_disk_ioctl+0x234>
 8002f28:	a201      	add	r2, pc, #4	; (adr r2, 8002f30 <SD_disk_ioctl+0xa4>)
 8002f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2e:	bf00      	nop
 8002f30:	0800302b 	.word	0x0800302b
 8002f34:	08002f69 	.word	0x08002f69
 8002f38:	0800301b 	.word	0x0800301b
 8002f3c:	080030c1 	.word	0x080030c1
 8002f40:	080030c1 	.word	0x080030c1
 8002f44:	080030c1 	.word	0x080030c1
 8002f48:	080030c1 	.word	0x080030c1
 8002f4c:	080030c1 	.word	0x080030c1
 8002f50:	080030c1 	.word	0x080030c1
 8002f54:	080030c1 	.word	0x080030c1
 8002f58:	080030c1 	.word	0x080030c1
 8002f5c:	0800303d 	.word	0x0800303d
 8002f60:	08003061 	.word	0x08003061
 8002f64:	08003085 	.word	0x08003085
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8002f68:	2100      	movs	r1, #0
 8002f6a:	2049      	movs	r0, #73	; 0x49
 8002f6c:	f7ff fd4e 	bl	8002a0c <SD_SendCmd>
 8002f70:	4603      	mov	r3, r0
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	f040 80a8 	bne.w	80030c8 <SD_disk_ioctl+0x23c>
 8002f78:	f107 030c 	add.w	r3, r7, #12
 8002f7c:	2110      	movs	r1, #16
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fcba 	bl	80028f8 <SD_RxDataBlock>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 809e 	beq.w	80030c8 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 8002f8c:	7b3b      	ldrb	r3, [r7, #12]
 8002f8e:	099b      	lsrs	r3, r3, #6
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d10e      	bne.n	8002fb4 <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002f96:	7d7b      	ldrb	r3, [r7, #21]
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	7d3b      	ldrb	r3, [r7, #20]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	021b      	lsls	r3, r3, #8
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3301      	adds	r3, #1
 8002fa8:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8002faa:	8bfb      	ldrh	r3, [r7, #30]
 8002fac:	029a      	lsls	r2, r3, #10
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	601a      	str	r2, [r3, #0]
 8002fb2:	e02e      	b.n	8003012 <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002fb4:	7c7b      	ldrb	r3, [r7, #17]
 8002fb6:	f003 030f 	and.w	r3, r3, #15
 8002fba:	b2da      	uxtb	r2, r3
 8002fbc:	7dbb      	ldrb	r3, [r7, #22]
 8002fbe:	09db      	lsrs	r3, r3, #7
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	4413      	add	r3, r2
 8002fc4:	b2da      	uxtb	r2, r3
 8002fc6:	7d7b      	ldrb	r3, [r7, #21]
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	f003 0306 	and.w	r3, r3, #6
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	3302      	adds	r3, #2
 8002fd8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8002fdc:	7d3b      	ldrb	r3, [r7, #20]
 8002fde:	099b      	lsrs	r3, r3, #6
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	7cfb      	ldrb	r3, [r7, #19]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	4413      	add	r3, r2
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	7cbb      	ldrb	r3, [r7, #18]
 8002ff2:	029b      	lsls	r3, r3, #10
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	4413      	add	r3, r2
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	3301      	adds	r3, #1
 8003002:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8003004:	8bfa      	ldrh	r2, [r7, #30]
 8003006:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800300a:	3b09      	subs	r3, #9
 800300c:	409a      	lsls	r2, r3
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8003012:	2300      	movs	r3, #0
 8003014:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8003018:	e056      	b.n	80030c8 <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003020:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8003022:	2300      	movs	r3, #0
 8003024:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003028:	e055      	b.n	80030d6 <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800302a:	f7ff fbe5 	bl	80027f8 <SD_ReadyWait>
 800302e:	4603      	mov	r3, r0
 8003030:	2bff      	cmp	r3, #255	; 0xff
 8003032:	d14b      	bne.n	80030cc <SD_disk_ioctl+0x240>
        res = RES_OK;
 8003034:	2300      	movs	r3, #0
 8003036:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800303a:	e047      	b.n	80030cc <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800303c:	2100      	movs	r1, #0
 800303e:	2049      	movs	r0, #73	; 0x49
 8003040:	f7ff fce4 	bl	8002a0c <SD_SendCmd>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d142      	bne.n	80030d0 <SD_disk_ioctl+0x244>
 800304a:	2110      	movs	r1, #16
 800304c:	6a38      	ldr	r0, [r7, #32]
 800304e:	f7ff fc53 	bl	80028f8 <SD_RxDataBlock>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d03b      	beq.n	80030d0 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8003058:	2300      	movs	r3, #0
 800305a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800305e:	e037      	b.n	80030d0 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8003060:	2100      	movs	r1, #0
 8003062:	204a      	movs	r0, #74	; 0x4a
 8003064:	f7ff fcd2 	bl	8002a0c <SD_SendCmd>
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	d132      	bne.n	80030d4 <SD_disk_ioctl+0x248>
 800306e:	2110      	movs	r1, #16
 8003070:	6a38      	ldr	r0, [r7, #32]
 8003072:	f7ff fc41 	bl	80028f8 <SD_RxDataBlock>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d02b      	beq.n	80030d4 <SD_disk_ioctl+0x248>
        res = RES_OK;
 800307c:	2300      	movs	r3, #0
 800307e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003082:	e027      	b.n	80030d4 <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8003084:	2100      	movs	r1, #0
 8003086:	207a      	movs	r0, #122	; 0x7a
 8003088:	f7ff fcc0 	bl	8002a0c <SD_SendCmd>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d116      	bne.n	80030c0 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 8003092:	2300      	movs	r3, #0
 8003094:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003098:	e00b      	b.n	80030b2 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 800309a:	6a3c      	ldr	r4, [r7, #32]
 800309c:	1c63      	adds	r3, r4, #1
 800309e:	623b      	str	r3, [r7, #32]
 80030a0:	f7ff fb7e 	bl	80027a0 <SPI_RxByte>
 80030a4:	4603      	mov	r3, r0
 80030a6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80030a8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030ac:	3301      	adds	r3, #1
 80030ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80030b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030b6:	2b03      	cmp	r3, #3
 80030b8:	d9ef      	bls.n	800309a <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 80030c0:	2304      	movs	r3, #4
 80030c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80030c6:	e006      	b.n	80030d6 <SD_disk_ioctl+0x24a>
      break;
 80030c8:	bf00      	nop
 80030ca:	e004      	b.n	80030d6 <SD_disk_ioctl+0x24a>
      break;
 80030cc:	bf00      	nop
 80030ce:	e002      	b.n	80030d6 <SD_disk_ioctl+0x24a>
      break;
 80030d0:	bf00      	nop
 80030d2:	e000      	b.n	80030d6 <SD_disk_ioctl+0x24a>
      break;
 80030d4:	bf00      	nop
    }
    
    DESELECT();
 80030d6:	f7ff fb3d 	bl	8002754 <DESELECT>
    SPI_RxByte();
 80030da:	f7ff fb61 	bl	80027a0 <SPI_RxByte>
  }
  
  return res;
 80030de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	372c      	adds	r7, #44	; 0x2c
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd90      	pop	{r4, r7, pc}
 80030ea:	bf00      	nop
 80030ec:	20000000 	.word	0x20000000

080030f0 <user_i2c_read>:
int8_t init_bme280(void);
void bme280_measure(void);

//----------------------------------------------------------------------------------------
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af02      	add	r7, sp, #8
 80030f6:	603a      	str	r2, [r7, #0]
 80030f8:	461a      	mov	r2, r3
 80030fa:	4603      	mov	r3, r0
 80030fc:	71fb      	strb	r3, [r7, #7]
 80030fe:	460b      	mov	r3, r1
 8003100:	71bb      	strb	r3, [r7, #6]
 8003102:	4613      	mov	r3, r2
 8003104:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8003106:	79fb      	ldrb	r3, [r7, #7]
 8003108:	b29b      	uxth	r3, r3
 800310a:	005b      	lsls	r3, r3, #1
 800310c:	b299      	uxth	r1, r3
 800310e:	1dba      	adds	r2, r7, #6
 8003110:	230a      	movs	r3, #10
 8003112:	9300      	str	r3, [sp, #0]
 8003114:	2301      	movs	r3, #1
 8003116:	4811      	ldr	r0, [pc, #68]	; (800315c <user_i2c_read+0x6c>)
 8003118:	f002 fc06 	bl	8005928 <HAL_I2C_Master_Transmit>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <user_i2c_read+0x38>
 8003122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003126:	e014      	b.n	8003152 <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c3, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8003128:	79fb      	ldrb	r3, [r7, #7]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	b21b      	sxth	r3, r3
 800312e:	f043 0301 	orr.w	r3, r3, #1
 8003132:	b21b      	sxth	r3, r3
 8003134:	b299      	uxth	r1, r3
 8003136:	88bb      	ldrh	r3, [r7, #4]
 8003138:	220a      	movs	r2, #10
 800313a:	9200      	str	r2, [sp, #0]
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	4807      	ldr	r0, [pc, #28]	; (800315c <user_i2c_read+0x6c>)
 8003140:	f002 fcf0 	bl	8005b24 <HAL_I2C_Master_Receive>
 8003144:	4603      	mov	r3, r0
 8003146:	2b00      	cmp	r3, #0
 8003148:	d002      	beq.n	8003150 <user_i2c_read+0x60>
 800314a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800314e:	e000      	b.n	8003152 <user_i2c_read+0x62>

  return 0;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	200080bc 	.word	0x200080bc

08003160 <user_delay_ms>:
//----------------------------------------------------------------------------------------
void user_delay_ms(uint32_t period)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f001 ffc3 	bl	80050f4 <HAL_Delay>
}
 800316e:	bf00      	nop
 8003170:	3708      	adds	r7, #8
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <user_i2c_write>:
//----------------------------------------------------------------------------------------
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af02      	add	r7, sp, #8
 800317e:	603a      	str	r2, [r7, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	4603      	mov	r3, r0
 8003184:	71fb      	strb	r3, [r7, #7]
 8003186:	460b      	mov	r3, r1
 8003188:	71bb      	strb	r3, [r7, #6]
 800318a:	4613      	mov	r3, r2
 800318c:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 800318e:	88bb      	ldrh	r3, [r7, #4]
 8003190:	3301      	adds	r3, #1
 8003192:	4618      	mov	r0, r3
 8003194:	f012 fb24 	bl	80157e0 <malloc>
 8003198:	4603      	mov	r3, r0
 800319a:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 800319c:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	3301      	adds	r3, #1
 80031a8:	88ba      	ldrh	r2, [r7, #4]
 80031aa:	6839      	ldr	r1, [r7, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f012 fb27 	bl	8015800 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 80031b2:	79fb      	ldrb	r3, [r7, #7]
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	b299      	uxth	r1, r3
 80031ba:	88bb      	ldrh	r3, [r7, #4]
 80031bc:	3301      	adds	r3, #1
 80031be:	b29b      	uxth	r3, r3
 80031c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80031c4:	9200      	str	r2, [sp, #0]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4808      	ldr	r0, [pc, #32]	; (80031ec <user_i2c_write+0x74>)
 80031ca:	f002 fbad 	bl	8005928 <HAL_I2C_Master_Transmit>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <user_i2c_write+0x62>
 80031d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80031d8:	e003      	b.n	80031e2 <user_i2c_write+0x6a>

  free(buf);
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f012 fb08 	bl	80157f0 <free>
  return 0;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	200080bc 	.word	0x200080bc

080031f0 <delay_us>:
//
//}


bool delay_us(uint16_t us)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	4603      	mov	r3, r0
 80031f8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 80031fa:	4b11      	ldr	r3, [pc, #68]	; (8003240 <delay_us+0x50>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	2200      	movs	r2, #0
 8003200:	625a      	str	r2, [r3, #36]	; 0x24
	tim_val = us/10;
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	4a0f      	ldr	r2, [pc, #60]	; (8003244 <delay_us+0x54>)
 8003206:	fba2 2303 	umull	r2, r3, r2, r3
 800320a:	08db      	lsrs	r3, r3, #3
 800320c:	b29b      	uxth	r3, r3
 800320e:	461a      	mov	r2, r3
 8003210:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <delay_us+0x58>)
 8003212:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim10);
 8003214:	480a      	ldr	r0, [pc, #40]	; (8003240 <delay_us+0x50>)
 8003216:	f006 fcb7 	bl	8009b88 <HAL_TIM_Base_Start_IT>
	while(tim_val != 0)
 800321a:	bf00      	nop
 800321c:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <delay_us+0x58>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d1fb      	bne.n	800321c <delay_us+0x2c>
	{

	}
	HAL_TIM_Base_Stop_IT(&htim10);
 8003224:	4806      	ldr	r0, [pc, #24]	; (8003240 <delay_us+0x50>)
 8003226:	f006 fd1f 	bl	8009c68 <HAL_TIM_Base_Stop_IT>
	tim_val = 0;
 800322a:	4b07      	ldr	r3, [pc, #28]	; (8003248 <delay_us+0x58>)
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
	int s = 99;
 8003230:	2363      	movs	r3, #99	; 0x63
 8003232:	60fb      	str	r3, [r7, #12]
	return true;
 8003234:	2301      	movs	r3, #1
//	{
//
//	}
//	//HAL_TIM_Base_Stop_IT(&htim10);
//	return true;
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	200091d8 	.word	0x200091d8
 8003244:	cccccccd 	.word	0xcccccccd
 8003248:	2000077c 	.word	0x2000077c

0800324c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003250:	f001 ff0e 	bl	8005070 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003254:	f000 f892 	bl	800337c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003258:	f000 fb32 	bl	80038c0 <MX_GPIO_Init>
  MX_TIM3_Init();
 800325c:	f000 fac0 	bl	80037e0 <MX_TIM3_Init>
  MX_I2C3_Init();
 8003260:	f000 f8f8 	bl	8003454 <MX_I2C3_Init>
  MX_TIM2_Init();
 8003264:	f000 fa70 	bl	8003748 <MX_TIM2_Init>
  MX_TIM10_Init();
 8003268:	f000 fb08 	bl	800387c <MX_TIM10_Init>
  MX_SPI1_Init();
 800326c:	f000 f9ae 	bl	80035cc <MX_SPI1_Init>
  MX_FATFS_Init();
 8003270:	f008 fc64 	bl	800bb3c <MX_FATFS_Init>
  MX_TIM1_Init();
 8003274:	f000 fa16 	bl	80036a4 <MX_TIM1_Init>
  MX_RTC_Init();
 8003278:	f000 f91a 	bl	80034b0 <MX_RTC_Init>
  MX_SPI2_Init();
 800327c:	f000 f9dc 	bl	8003638 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);		//  This TIM3 using for calculate how many time all tasks was running.
 8003280:	4825      	ldr	r0, [pc, #148]	; (8003318 <main+0xcc>)
 8003282:	f006 fc81 	bl	8009b88 <HAL_TIM_Base_Start_IT>

  //HAL_TIM_Base_Start_IT(&htim2);
  //HAL_TIM_Base_Start_IT(&htim10);			// Using for generate us delays
  HAL_TIM_Base_Start_IT(&htim1);			// Blink Green LED
 8003286:	4825      	ldr	r0, [pc, #148]	; (800331c <main+0xd0>)
 8003288:	f006 fc7e 	bl	8009b88 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800328c:	f00d fcf6 	bl	8010c7c <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (10, sizeof(QUEUE_t), &UARTQueue_attributes);
 8003290:	4a23      	ldr	r2, [pc, #140]	; (8003320 <main+0xd4>)
 8003292:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003296:	200a      	movs	r0, #10
 8003298:	f00d ff2a 	bl	80110f0 <osMessageQueueNew>
 800329c:	4603      	mov	r3, r0
 800329e:	4a21      	ldr	r2, [pc, #132]	; (8003324 <main+0xd8>)
 80032a0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80032a2:	4a21      	ldr	r2, [pc, #132]	; (8003328 <main+0xdc>)
 80032a4:	2100      	movs	r1, #0
 80032a6:	4821      	ldr	r0, [pc, #132]	; (800332c <main+0xe0>)
 80032a8:	f00d fd32 	bl	8010d10 <osThreadNew>
 80032ac:	4603      	mov	r3, r0
 80032ae:	4a20      	ldr	r2, [pc, #128]	; (8003330 <main+0xe4>)
 80032b0:	6013      	str	r3, [r2, #0]

  /* creation of Blue_LED_Blink */
  Blue_LED_BlinkHandle = osThreadNew(Start_Blue_LED_Blink, NULL, &Blue_LED_Blink_attributes);
 80032b2:	4a20      	ldr	r2, [pc, #128]	; (8003334 <main+0xe8>)
 80032b4:	2100      	movs	r1, #0
 80032b6:	4820      	ldr	r0, [pc, #128]	; (8003338 <main+0xec>)
 80032b8:	f00d fd2a 	bl	8010d10 <osThreadNew>
 80032bc:	4603      	mov	r3, r0
 80032be:	4a1f      	ldr	r2, [pc, #124]	; (800333c <main+0xf0>)
 80032c0:	6013      	str	r3, [r2, #0]

  /* creation of Show_Resources */
  Show_ResourcesHandle = osThreadNew(Start_Show_Resources, NULL, &Show_Resources_attributes);
 80032c2:	4a1f      	ldr	r2, [pc, #124]	; (8003340 <main+0xf4>)
 80032c4:	2100      	movs	r1, #0
 80032c6:	481f      	ldr	r0, [pc, #124]	; (8003344 <main+0xf8>)
 80032c8:	f00d fd22 	bl	8010d10 <osThreadNew>
 80032cc:	4603      	mov	r3, r0
 80032ce:	4a1e      	ldr	r2, [pc, #120]	; (8003348 <main+0xfc>)
 80032d0:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(Start_UART_Task, NULL, &UART_Task_attributes);
 80032d2:	4a1e      	ldr	r2, [pc, #120]	; (800334c <main+0x100>)
 80032d4:	2100      	movs	r1, #0
 80032d6:	481e      	ldr	r0, [pc, #120]	; (8003350 <main+0x104>)
 80032d8:	f00d fd1a 	bl	8010d10 <osThreadNew>
 80032dc:	4603      	mov	r3, r0
 80032de:	4a1d      	ldr	r2, [pc, #116]	; (8003354 <main+0x108>)
 80032e0:	6013      	str	r3, [r2, #0]

  /* creation of bme280 */
  bme280Handle = osThreadNew(Start_bme280, NULL, &bme280_attributes);
 80032e2:	4a1d      	ldr	r2, [pc, #116]	; (8003358 <main+0x10c>)
 80032e4:	2100      	movs	r1, #0
 80032e6:	481d      	ldr	r0, [pc, #116]	; (800335c <main+0x110>)
 80032e8:	f00d fd12 	bl	8010d10 <osThreadNew>
 80032ec:	4603      	mov	r3, r0
 80032ee:	4a1c      	ldr	r2, [pc, #112]	; (8003360 <main+0x114>)
 80032f0:	6013      	str	r3, [r2, #0]

  /* creation of AM2302 */
  AM2302Handle = osThreadNew(Start_AM2302, NULL, &AM2302_attributes);
 80032f2:	4a1c      	ldr	r2, [pc, #112]	; (8003364 <main+0x118>)
 80032f4:	2100      	movs	r1, #0
 80032f6:	481c      	ldr	r0, [pc, #112]	; (8003368 <main+0x11c>)
 80032f8:	f00d fd0a 	bl	8010d10 <osThreadNew>
 80032fc:	4603      	mov	r3, r0
 80032fe:	4a1b      	ldr	r2, [pc, #108]	; (800336c <main+0x120>)
 8003300:	6013      	str	r3, [r2, #0]

  /* creation of SD_CARD */
  SD_CARDHandle = osThreadNew(Start_SD_CARD, NULL, &SD_CARD_attributes);
 8003302:	4a1b      	ldr	r2, [pc, #108]	; (8003370 <main+0x124>)
 8003304:	2100      	movs	r1, #0
 8003306:	481b      	ldr	r0, [pc, #108]	; (8003374 <main+0x128>)
 8003308:	f00d fd02 	bl	8010d10 <osThreadNew>
 800330c:	4603      	mov	r3, r0
 800330e:	4a1a      	ldr	r2, [pc, #104]	; (8003378 <main+0x12c>)
 8003310:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003312:	f00d fcd7 	bl	8010cc4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003316:	e7fe      	b.n	8003316 <main+0xca>
 8003318:	2000dba8 	.word	0x2000dba8
 800331c:	2000ed94 	.word	0x2000ed94
 8003320:	08018cec 	.word	0x08018cec
 8003324:	2000a3a4 	.word	0x2000a3a4
 8003328:	08018bf0 	.word	0x08018bf0
 800332c:	08003b45 	.word	0x08003b45
 8003330:	20008078 	.word	0x20008078
 8003334:	08018c14 	.word	0x08018c14
 8003338:	08003b59 	.word	0x08003b59
 800333c:	200091b8 	.word	0x200091b8
 8003340:	08018c38 	.word	0x08018c38
 8003344:	08003dd5 	.word	0x08003dd5
 8003348:	2000efe8 	.word	0x2000efe8
 800334c:	08018c5c 	.word	0x08018c5c
 8003350:	08004045 	.word	0x08004045
 8003354:	2000dbf0 	.word	0x2000dbf0
 8003358:	08018c80 	.word	0x08018c80
 800335c:	080040a1 	.word	0x080040a1
 8003360:	20011210 	.word	0x20011210
 8003364:	08018ca4 	.word	0x08018ca4
 8003368:	08004419 	.word	0x08004419
 800336c:	2000efe0 	.word	0x2000efe0
 8003370:	08018cc8 	.word	0x08018cc8
 8003374:	080047d5 	.word	0x080047d5
 8003378:	2000a220 	.word	0x2000a220

0800337c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b094      	sub	sp, #80	; 0x50
 8003380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003382:	f107 0320 	add.w	r3, r7, #32
 8003386:	2230      	movs	r2, #48	; 0x30
 8003388:	2100      	movs	r1, #0
 800338a:	4618      	mov	r0, r3
 800338c:	f012 fa46 	bl	801581c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003390:	f107 030c 	add.w	r3, r7, #12
 8003394:	2200      	movs	r2, #0
 8003396:	601a      	str	r2, [r3, #0]
 8003398:	605a      	str	r2, [r3, #4]
 800339a:	609a      	str	r2, [r3, #8]
 800339c:	60da      	str	r2, [r3, #12]
 800339e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80033a0:	2300      	movs	r3, #0
 80033a2:	60bb      	str	r3, [r7, #8]
 80033a4:	4b29      	ldr	r3, [pc, #164]	; (800344c <SystemClock_Config+0xd0>)
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	4a28      	ldr	r2, [pc, #160]	; (800344c <SystemClock_Config+0xd0>)
 80033aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ae:	6413      	str	r3, [r2, #64]	; 0x40
 80033b0:	4b26      	ldr	r3, [pc, #152]	; (800344c <SystemClock_Config+0xd0>)
 80033b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80033bc:	2300      	movs	r3, #0
 80033be:	607b      	str	r3, [r7, #4]
 80033c0:	4b23      	ldr	r3, [pc, #140]	; (8003450 <SystemClock_Config+0xd4>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a22      	ldr	r2, [pc, #136]	; (8003450 <SystemClock_Config+0xd4>)
 80033c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033ca:	6013      	str	r3, [r2, #0]
 80033cc:	4b20      	ldr	r3, [pc, #128]	; (8003450 <SystemClock_Config+0xd4>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80033d4:	607b      	str	r3, [r7, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80033d8:	2305      	movs	r3, #5
 80033da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80033dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80033e0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80033e2:	2301      	movs	r3, #1
 80033e4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033e6:	2302      	movs	r3, #2
 80033e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80033ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80033ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80033f0:	2308      	movs	r3, #8
 80033f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80033f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80033f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80033fa:	2302      	movs	r3, #2
 80033fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80033fe:	2307      	movs	r3, #7
 8003400:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003402:	f107 0320 	add.w	r3, r7, #32
 8003406:	4618      	mov	r0, r3
 8003408:	f004 fd70 	bl	8007eec <HAL_RCC_OscConfig>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003412:	f001 faa1 	bl	8004958 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003416:	230f      	movs	r3, #15
 8003418:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800341a:	2302      	movs	r3, #2
 800341c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800341e:	2300      	movs	r3, #0
 8003420:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003422:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003426:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800342c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800342e:	f107 030c 	add.w	r3, r7, #12
 8003432:	2105      	movs	r1, #5
 8003434:	4618      	mov	r0, r3
 8003436:	f004 ffd1 	bl	80083dc <HAL_RCC_ClockConfig>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003440:	f001 fa8a 	bl	8004958 <Error_Handler>
  }
}
 8003444:	bf00      	nop
 8003446:	3750      	adds	r7, #80	; 0x50
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	40023800 	.word	0x40023800
 8003450:	40007000 	.word	0x40007000

08003454 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003458:	4b12      	ldr	r3, [pc, #72]	; (80034a4 <MX_I2C3_Init+0x50>)
 800345a:	4a13      	ldr	r2, [pc, #76]	; (80034a8 <MX_I2C3_Init+0x54>)
 800345c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800345e:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <MX_I2C3_Init+0x50>)
 8003460:	4a12      	ldr	r2, [pc, #72]	; (80034ac <MX_I2C3_Init+0x58>)
 8003462:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003464:	4b0f      	ldr	r3, [pc, #60]	; (80034a4 <MX_I2C3_Init+0x50>)
 8003466:	2200      	movs	r2, #0
 8003468:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800346a:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <MX_I2C3_Init+0x50>)
 800346c:	2200      	movs	r2, #0
 800346e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003470:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <MX_I2C3_Init+0x50>)
 8003472:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003476:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003478:	4b0a      	ldr	r3, [pc, #40]	; (80034a4 <MX_I2C3_Init+0x50>)
 800347a:	2200      	movs	r2, #0
 800347c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800347e:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <MX_I2C3_Init+0x50>)
 8003480:	2200      	movs	r2, #0
 8003482:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003484:	4b07      	ldr	r3, [pc, #28]	; (80034a4 <MX_I2C3_Init+0x50>)
 8003486:	2200      	movs	r2, #0
 8003488:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800348a:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <MX_I2C3_Init+0x50>)
 800348c:	2200      	movs	r2, #0
 800348e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003490:	4804      	ldr	r0, [pc, #16]	; (80034a4 <MX_I2C3_Init+0x50>)
 8003492:	f002 f905 	bl	80056a0 <HAL_I2C_Init>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 800349c:	f001 fa5c 	bl	8004958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80034a0:	bf00      	nop
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	200080bc 	.word	0x200080bc
 80034a8:	40005c00 	.word	0x40005c00
 80034ac:	000186a0 	.word	0x000186a0

080034b0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b090      	sub	sp, #64	; 0x40
 80034b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80034b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034ba:	2200      	movs	r2, #0
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	605a      	str	r2, [r3, #4]
 80034c0:	609a      	str	r2, [r3, #8]
 80034c2:	60da      	str	r2, [r3, #12]
 80034c4:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80034c6:	2300      	movs	r3, #0
 80034c8:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80034ca:	463b      	mov	r3, r7
 80034cc:	2228      	movs	r2, #40	; 0x28
 80034ce:	2100      	movs	r1, #0
 80034d0:	4618      	mov	r0, r3
 80034d2:	f012 f9a3 	bl	801581c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80034d6:	4b3b      	ldr	r3, [pc, #236]	; (80035c4 <MX_RTC_Init+0x114>)
 80034d8:	4a3b      	ldr	r2, [pc, #236]	; (80035c8 <MX_RTC_Init+0x118>)
 80034da:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80034dc:	4b39      	ldr	r3, [pc, #228]	; (80035c4 <MX_RTC_Init+0x114>)
 80034de:	2200      	movs	r2, #0
 80034e0:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80034e2:	4b38      	ldr	r3, [pc, #224]	; (80035c4 <MX_RTC_Init+0x114>)
 80034e4:	227f      	movs	r2, #127	; 0x7f
 80034e6:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80034e8:	4b36      	ldr	r3, [pc, #216]	; (80035c4 <MX_RTC_Init+0x114>)
 80034ea:	22ff      	movs	r2, #255	; 0xff
 80034ec:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80034ee:	4b35      	ldr	r3, [pc, #212]	; (80035c4 <MX_RTC_Init+0x114>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80034f4:	4b33      	ldr	r3, [pc, #204]	; (80035c4 <MX_RTC_Init+0x114>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80034fa:	4b32      	ldr	r3, [pc, #200]	; (80035c4 <MX_RTC_Init+0x114>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003500:	4830      	ldr	r0, [pc, #192]	; (80035c4 <MX_RTC_Init+0x114>)
 8003502:	f005 fa67 	bl	80089d4 <HAL_RTC_Init>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d001      	beq.n	8003510 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 800350c:	f001 fa24 	bl	8004958 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x23;
 8003510:	2323      	movs	r3, #35	; 0x23
 8003512:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x59;
 8003516:	2359      	movs	r3, #89	; 0x59
 8003518:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x45;
 800351c:	2345      	movs	r3, #69	; 0x45
 800351e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003522:	2300      	movs	r3, #0
 8003524:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003526:	2300      	movs	r3, #0
 8003528:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800352a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800352e:	2201      	movs	r2, #1
 8003530:	4619      	mov	r1, r3
 8003532:	4824      	ldr	r0, [pc, #144]	; (80035c4 <MX_RTC_Init+0x114>)
 8003534:	f005 fadf 	bl	8008af6 <HAL_RTC_SetTime>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 800353e:	f001 fa0b 	bl	8004958 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8003542:	2302      	movs	r3, #2
 8003544:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_DECEMBER;
 8003548:	2312      	movs	r3, #18
 800354a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x28;
 800354e:	2328      	movs	r3, #40	; 0x28
 8003550:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8003554:	2300      	movs	r3, #0
 8003556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800355a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800355e:	2201      	movs	r2, #1
 8003560:	4619      	mov	r1, r3
 8003562:	4818      	ldr	r0, [pc, #96]	; (80035c4 <MX_RTC_Init+0x114>)
 8003564:	f005 fbe2 	bl	8008d2c <HAL_RTC_SetDate>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d001      	beq.n	8003572 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800356e:	f001 f9f3 	bl	8004958 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8003572:	2300      	movs	r3, #0
 8003574:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8003576:	2300      	movs	r3, #0
 8003578:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 800357a:	2310      	movs	r3, #16
 800357c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800357e:	2300      	movs	r3, #0
 8003580:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003586:	2300      	movs	r3, #0
 8003588:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800358e:	2300      	movs	r3, #0
 8003590:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 8003592:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003596:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = RTC_WEEKDAY_MONDAY;
 8003598:	2301      	movs	r3, #1
 800359a:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800359e:	f44f 7380 	mov.w	r3, #256	; 0x100
 80035a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80035a4:	463b      	mov	r3, r7
 80035a6:	2201      	movs	r2, #1
 80035a8:	4619      	mov	r1, r3
 80035aa:	4806      	ldr	r0, [pc, #24]	; (80035c4 <MX_RTC_Init+0x114>)
 80035ac:	f005 fcb4 	bl	8008f18 <HAL_RTC_SetAlarm>
 80035b0:	4603      	mov	r3, r0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80035b6:	f001 f9cf 	bl	8004958 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80035ba:	bf00      	nop
 80035bc:	3740      	adds	r7, #64	; 0x40
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	2000dbf4 	.word	0x2000dbf4
 80035c8:	40002800 	.word	0x40002800

080035cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80035d0:	4b17      	ldr	r3, [pc, #92]	; (8003630 <MX_SPI1_Init+0x64>)
 80035d2:	4a18      	ldr	r2, [pc, #96]	; (8003634 <MX_SPI1_Init+0x68>)
 80035d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80035d6:	4b16      	ldr	r3, [pc, #88]	; (8003630 <MX_SPI1_Init+0x64>)
 80035d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80035dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80035de:	4b14      	ldr	r3, [pc, #80]	; (8003630 <MX_SPI1_Init+0x64>)
 80035e0:	2200      	movs	r2, #0
 80035e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80035e4:	4b12      	ldr	r3, [pc, #72]	; (8003630 <MX_SPI1_Init+0x64>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035ea:	4b11      	ldr	r3, [pc, #68]	; (8003630 <MX_SPI1_Init+0x64>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035f0:	4b0f      	ldr	r3, [pc, #60]	; (8003630 <MX_SPI1_Init+0x64>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80035f6:	4b0e      	ldr	r3, [pc, #56]	; (8003630 <MX_SPI1_Init+0x64>)
 80035f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80035fe:	4b0c      	ldr	r3, [pc, #48]	; (8003630 <MX_SPI1_Init+0x64>)
 8003600:	2220      	movs	r2, #32
 8003602:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003604:	4b0a      	ldr	r3, [pc, #40]	; (8003630 <MX_SPI1_Init+0x64>)
 8003606:	2200      	movs	r2, #0
 8003608:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800360a:	4b09      	ldr	r3, [pc, #36]	; (8003630 <MX_SPI1_Init+0x64>)
 800360c:	2200      	movs	r2, #0
 800360e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003610:	4b07      	ldr	r3, [pc, #28]	; (8003630 <MX_SPI1_Init+0x64>)
 8003612:	2200      	movs	r2, #0
 8003614:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003616:	4b06      	ldr	r3, [pc, #24]	; (8003630 <MX_SPI1_Init+0x64>)
 8003618:	220a      	movs	r2, #10
 800361a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800361c:	4804      	ldr	r0, [pc, #16]	; (8003630 <MX_SPI1_Init+0x64>)
 800361e:	f005 fe23 	bl	8009268 <HAL_SPI_Init>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003628:	f001 f996 	bl	8004958 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800362c:	bf00      	nop
 800362e:	bd80      	pop	{r7, pc}
 8003630:	2000efec 	.word	0x2000efec
 8003634:	40013000 	.word	0x40013000

08003638 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800363c:	4b17      	ldr	r3, [pc, #92]	; (800369c <MX_SPI2_Init+0x64>)
 800363e:	4a18      	ldr	r2, [pc, #96]	; (80036a0 <MX_SPI2_Init+0x68>)
 8003640:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003642:	4b16      	ldr	r3, [pc, #88]	; (800369c <MX_SPI2_Init+0x64>)
 8003644:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003648:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800364a:	4b14      	ldr	r3, [pc, #80]	; (800369c <MX_SPI2_Init+0x64>)
 800364c:	2200      	movs	r2, #0
 800364e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003650:	4b12      	ldr	r3, [pc, #72]	; (800369c <MX_SPI2_Init+0x64>)
 8003652:	2200      	movs	r2, #0
 8003654:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003656:	4b11      	ldr	r3, [pc, #68]	; (800369c <MX_SPI2_Init+0x64>)
 8003658:	2200      	movs	r2, #0
 800365a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800365c:	4b0f      	ldr	r3, [pc, #60]	; (800369c <MX_SPI2_Init+0x64>)
 800365e:	2200      	movs	r2, #0
 8003660:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003662:	4b0e      	ldr	r3, [pc, #56]	; (800369c <MX_SPI2_Init+0x64>)
 8003664:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003668:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800366a:	4b0c      	ldr	r3, [pc, #48]	; (800369c <MX_SPI2_Init+0x64>)
 800366c:	2200      	movs	r2, #0
 800366e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003670:	4b0a      	ldr	r3, [pc, #40]	; (800369c <MX_SPI2_Init+0x64>)
 8003672:	2200      	movs	r2, #0
 8003674:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003676:	4b09      	ldr	r3, [pc, #36]	; (800369c <MX_SPI2_Init+0x64>)
 8003678:	2200      	movs	r2, #0
 800367a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800367c:	4b07      	ldr	r3, [pc, #28]	; (800369c <MX_SPI2_Init+0x64>)
 800367e:	2200      	movs	r2, #0
 8003680:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003682:	4b06      	ldr	r3, [pc, #24]	; (800369c <MX_SPI2_Init+0x64>)
 8003684:	220a      	movs	r2, #10
 8003686:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003688:	4804      	ldr	r0, [pc, #16]	; (800369c <MX_SPI2_Init+0x64>)
 800368a:	f005 fded 	bl	8009268 <HAL_SPI_Init>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d001      	beq.n	8003698 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003694:	f001 f960 	bl	8004958 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003698:	bf00      	nop
 800369a:	bd80      	pop	{r7, pc}
 800369c:	20009160 	.word	0x20009160
 80036a0:	40003800 	.word	0x40003800

080036a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036aa:	f107 0308 	add.w	r3, r7, #8
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	605a      	str	r2, [r3, #4]
 80036b4:	609a      	str	r2, [r3, #8]
 80036b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036b8:	463b      	mov	r3, r7
 80036ba:	2200      	movs	r2, #0
 80036bc:	601a      	str	r2, [r3, #0]
 80036be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80036c0:	4b1f      	ldr	r3, [pc, #124]	; (8003740 <MX_TIM1_Init+0x9c>)
 80036c2:	4a20      	ldr	r2, [pc, #128]	; (8003744 <MX_TIM1_Init+0xa0>)
 80036c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16800-1;
 80036c6:	4b1e      	ldr	r3, [pc, #120]	; (8003740 <MX_TIM1_Init+0x9c>)
 80036c8:	f244 129f 	movw	r2, #16799	; 0x419f
 80036cc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ce:	4b1c      	ldr	r3, [pc, #112]	; (8003740 <MX_TIM1_Init+0x9c>)
 80036d0:	2200      	movs	r2, #0
 80036d2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80036d4:	4b1a      	ldr	r3, [pc, #104]	; (8003740 <MX_TIM1_Init+0x9c>)
 80036d6:	f242 7210 	movw	r2, #10000	; 0x2710
 80036da:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036dc:	4b18      	ldr	r3, [pc, #96]	; (8003740 <MX_TIM1_Init+0x9c>)
 80036de:	2200      	movs	r2, #0
 80036e0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80036e2:	4b17      	ldr	r3, [pc, #92]	; (8003740 <MX_TIM1_Init+0x9c>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036e8:	4b15      	ldr	r3, [pc, #84]	; (8003740 <MX_TIM1_Init+0x9c>)
 80036ea:	2200      	movs	r2, #0
 80036ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80036ee:	4814      	ldr	r0, [pc, #80]	; (8003740 <MX_TIM1_Init+0x9c>)
 80036f0:	f006 f9fa 	bl	8009ae8 <HAL_TIM_Base_Init>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80036fa:	f001 f92d 	bl	8004958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003702:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003704:	f107 0308 	add.w	r3, r7, #8
 8003708:	4619      	mov	r1, r3
 800370a:	480d      	ldr	r0, [pc, #52]	; (8003740 <MX_TIM1_Init+0x9c>)
 800370c:	f006 fbe3 	bl	8009ed6 <HAL_TIM_ConfigClockSource>
 8003710:	4603      	mov	r3, r0
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8003716:	f001 f91f 	bl	8004958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800371a:	2320      	movs	r3, #32
 800371c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800371e:	2300      	movs	r3, #0
 8003720:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003722:	463b      	mov	r3, r7
 8003724:	4619      	mov	r1, r3
 8003726:	4806      	ldr	r0, [pc, #24]	; (8003740 <MX_TIM1_Init+0x9c>)
 8003728:	f006 fdfe 	bl	800a328 <HAL_TIMEx_MasterConfigSynchronization>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8003732:	f001 f911 	bl	8004958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8003736:	bf00      	nop
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	2000ed94 	.word	0x2000ed94
 8003744:	40010000 	.word	0x40010000

08003748 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800374e:	f107 0308 	add.w	r3, r7, #8
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	605a      	str	r2, [r3, #4]
 8003758:	609a      	str	r2, [r3, #8]
 800375a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800375c:	463b      	mov	r3, r7
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003764:	4b1d      	ldr	r3, [pc, #116]	; (80037dc <MX_TIM2_Init+0x94>)
 8003766:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800376a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 800376c:	4b1b      	ldr	r3, [pc, #108]	; (80037dc <MX_TIM2_Init+0x94>)
 800376e:	220a      	movs	r2, #10
 8003770:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003772:	4b1a      	ldr	r3, [pc, #104]	; (80037dc <MX_TIM2_Init+0x94>)
 8003774:	2200      	movs	r2, #0
 8003776:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8003778:	4b18      	ldr	r3, [pc, #96]	; (80037dc <MX_TIM2_Init+0x94>)
 800377a:	220a      	movs	r2, #10
 800377c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800377e:	4b17      	ldr	r3, [pc, #92]	; (80037dc <MX_TIM2_Init+0x94>)
 8003780:	2200      	movs	r2, #0
 8003782:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003784:	4b15      	ldr	r3, [pc, #84]	; (80037dc <MX_TIM2_Init+0x94>)
 8003786:	2200      	movs	r2, #0
 8003788:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800378a:	4814      	ldr	r0, [pc, #80]	; (80037dc <MX_TIM2_Init+0x94>)
 800378c:	f006 f9ac 	bl	8009ae8 <HAL_TIM_Base_Init>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 8003796:	f001 f8df 	bl	8004958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800379a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800379e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80037a0:	f107 0308 	add.w	r3, r7, #8
 80037a4:	4619      	mov	r1, r3
 80037a6:	480d      	ldr	r0, [pc, #52]	; (80037dc <MX_TIM2_Init+0x94>)
 80037a8:	f006 fb95 	bl	8009ed6 <HAL_TIM_ConfigClockSource>
 80037ac:	4603      	mov	r3, r0
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d001      	beq.n	80037b6 <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80037b2:	f001 f8d1 	bl	8004958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037b6:	2300      	movs	r3, #0
 80037b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037ba:	2300      	movs	r3, #0
 80037bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80037be:	463b      	mov	r3, r7
 80037c0:	4619      	mov	r1, r3
 80037c2:	4806      	ldr	r0, [pc, #24]	; (80037dc <MX_TIM2_Init+0x94>)
 80037c4:	f006 fdb0 	bl	800a328 <HAL_TIMEx_MasterConfigSynchronization>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80037ce:	f001 f8c3 	bl	8004958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80037d2:	bf00      	nop
 80037d4:	3718      	adds	r7, #24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	2000f104 	.word	0x2000f104

080037e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b086      	sub	sp, #24
 80037e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037e6:	f107 0308 	add.w	r3, r7, #8
 80037ea:	2200      	movs	r2, #0
 80037ec:	601a      	str	r2, [r3, #0]
 80037ee:	605a      	str	r2, [r3, #4]
 80037f0:	609a      	str	r2, [r3, #8]
 80037f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037f4:	463b      	mov	r3, r7
 80037f6:	2200      	movs	r2, #0
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80037fc:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <MX_TIM3_Init+0x94>)
 80037fe:	4a1e      	ldr	r2, [pc, #120]	; (8003878 <MX_TIM3_Init+0x98>)
 8003800:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 8003802:	4b1c      	ldr	r3, [pc, #112]	; (8003874 <MX_TIM3_Init+0x94>)
 8003804:	f240 3247 	movw	r2, #839	; 0x347
 8003808:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800380a:	4b1a      	ldr	r3, [pc, #104]	; (8003874 <MX_TIM3_Init+0x94>)
 800380c:	2200      	movs	r2, #0
 800380e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 8003810:	4b18      	ldr	r3, [pc, #96]	; (8003874 <MX_TIM3_Init+0x94>)
 8003812:	220a      	movs	r2, #10
 8003814:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003816:	4b17      	ldr	r3, [pc, #92]	; (8003874 <MX_TIM3_Init+0x94>)
 8003818:	2200      	movs	r2, #0
 800381a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800381c:	4b15      	ldr	r3, [pc, #84]	; (8003874 <MX_TIM3_Init+0x94>)
 800381e:	2280      	movs	r2, #128	; 0x80
 8003820:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003822:	4814      	ldr	r0, [pc, #80]	; (8003874 <MX_TIM3_Init+0x94>)
 8003824:	f006 f960 	bl	8009ae8 <HAL_TIM_Base_Init>
 8003828:	4603      	mov	r3, r0
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800382e:	f001 f893 	bl	8004958 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003836:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003838:	f107 0308 	add.w	r3, r7, #8
 800383c:	4619      	mov	r1, r3
 800383e:	480d      	ldr	r0, [pc, #52]	; (8003874 <MX_TIM3_Init+0x94>)
 8003840:	f006 fb49 	bl	8009ed6 <HAL_TIM_ConfigClockSource>
 8003844:	4603      	mov	r3, r0
 8003846:	2b00      	cmp	r3, #0
 8003848:	d001      	beq.n	800384e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800384a:	f001 f885 	bl	8004958 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800384e:	2300      	movs	r3, #0
 8003850:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003852:	2300      	movs	r3, #0
 8003854:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003856:	463b      	mov	r3, r7
 8003858:	4619      	mov	r1, r3
 800385a:	4806      	ldr	r0, [pc, #24]	; (8003874 <MX_TIM3_Init+0x94>)
 800385c:	f006 fd64 	bl	800a328 <HAL_TIMEx_MasterConfigSynchronization>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003866:	f001 f877 	bl	8004958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800386a:	bf00      	nop
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	2000dba8 	.word	0x2000dba8
 8003878:	40000400 	.word	0x40000400

0800387c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8003880:	4b0d      	ldr	r3, [pc, #52]	; (80038b8 <MX_TIM10_Init+0x3c>)
 8003882:	4a0e      	ldr	r2, [pc, #56]	; (80038bc <MX_TIM10_Init+0x40>)
 8003884:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 8003886:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <MX_TIM10_Init+0x3c>)
 8003888:	22a7      	movs	r2, #167	; 0xa7
 800388a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800388c:	4b0a      	ldr	r3, [pc, #40]	; (80038b8 <MX_TIM10_Init+0x3c>)
 800388e:	2200      	movs	r2, #0
 8003890:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10-1;
 8003892:	4b09      	ldr	r3, [pc, #36]	; (80038b8 <MX_TIM10_Init+0x3c>)
 8003894:	2209      	movs	r2, #9
 8003896:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003898:	4b07      	ldr	r3, [pc, #28]	; (80038b8 <MX_TIM10_Init+0x3c>)
 800389a:	2200      	movs	r2, #0
 800389c:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800389e:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <MX_TIM10_Init+0x3c>)
 80038a0:	2280      	movs	r2, #128	; 0x80
 80038a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80038a4:	4804      	ldr	r0, [pc, #16]	; (80038b8 <MX_TIM10_Init+0x3c>)
 80038a6:	f006 f91f 	bl	8009ae8 <HAL_TIM_Base_Init>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 80038b0:	f001 f852 	bl	8004958 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80038b4:	bf00      	nop
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	200091d8 	.word	0x200091d8
 80038bc:	40014400 	.word	0x40014400

080038c0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b08c      	sub	sp, #48	; 0x30
 80038c4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c6:	f107 031c 	add.w	r3, r7, #28
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
 80038ce:	605a      	str	r2, [r3, #4]
 80038d0:	609a      	str	r2, [r3, #8]
 80038d2:	60da      	str	r2, [r3, #12]
 80038d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	61bb      	str	r3, [r7, #24]
 80038da:	4b94      	ldr	r3, [pc, #592]	; (8003b2c <MX_GPIO_Init+0x26c>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	4a93      	ldr	r2, [pc, #588]	; (8003b2c <MX_GPIO_Init+0x26c>)
 80038e0:	f043 0310 	orr.w	r3, r3, #16
 80038e4:	6313      	str	r3, [r2, #48]	; 0x30
 80038e6:	4b91      	ldr	r3, [pc, #580]	; (8003b2c <MX_GPIO_Init+0x26c>)
 80038e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ea:	f003 0310 	and.w	r3, r3, #16
 80038ee:	61bb      	str	r3, [r7, #24]
 80038f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	4b8d      	ldr	r3, [pc, #564]	; (8003b2c <MX_GPIO_Init+0x26c>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fa:	4a8c      	ldr	r2, [pc, #560]	; (8003b2c <MX_GPIO_Init+0x26c>)
 80038fc:	f043 0304 	orr.w	r3, r3, #4
 8003900:	6313      	str	r3, [r2, #48]	; 0x30
 8003902:	4b8a      	ldr	r3, [pc, #552]	; (8003b2c <MX_GPIO_Init+0x26c>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	f003 0304 	and.w	r3, r3, #4
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800390e:	2300      	movs	r3, #0
 8003910:	613b      	str	r3, [r7, #16]
 8003912:	4b86      	ldr	r3, [pc, #536]	; (8003b2c <MX_GPIO_Init+0x26c>)
 8003914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003916:	4a85      	ldr	r2, [pc, #532]	; (8003b2c <MX_GPIO_Init+0x26c>)
 8003918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800391c:	6313      	str	r3, [r2, #48]	; 0x30
 800391e:	4b83      	ldr	r3, [pc, #524]	; (8003b2c <MX_GPIO_Init+0x26c>)
 8003920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003926:	613b      	str	r3, [r7, #16]
 8003928:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800392a:	2300      	movs	r3, #0
 800392c:	60fb      	str	r3, [r7, #12]
 800392e:	4b7f      	ldr	r3, [pc, #508]	; (8003b2c <MX_GPIO_Init+0x26c>)
 8003930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003932:	4a7e      	ldr	r2, [pc, #504]	; (8003b2c <MX_GPIO_Init+0x26c>)
 8003934:	f043 0301 	orr.w	r3, r3, #1
 8003938:	6313      	str	r3, [r2, #48]	; 0x30
 800393a:	4b7c      	ldr	r3, [pc, #496]	; (8003b2c <MX_GPIO_Init+0x26c>)
 800393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003946:	2300      	movs	r3, #0
 8003948:	60bb      	str	r3, [r7, #8]
 800394a:	4b78      	ldr	r3, [pc, #480]	; (8003b2c <MX_GPIO_Init+0x26c>)
 800394c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800394e:	4a77      	ldr	r2, [pc, #476]	; (8003b2c <MX_GPIO_Init+0x26c>)
 8003950:	f043 0302 	orr.w	r3, r3, #2
 8003954:	6313      	str	r3, [r2, #48]	; 0x30
 8003956:	4b75      	ldr	r3, [pc, #468]	; (8003b2c <MX_GPIO_Init+0x26c>)
 8003958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	60bb      	str	r3, [r7, #8]
 8003960:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003962:	2300      	movs	r3, #0
 8003964:	607b      	str	r3, [r7, #4]
 8003966:	4b71      	ldr	r3, [pc, #452]	; (8003b2c <MX_GPIO_Init+0x26c>)
 8003968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396a:	4a70      	ldr	r2, [pc, #448]	; (8003b2c <MX_GPIO_Init+0x26c>)
 800396c:	f043 0308 	orr.w	r3, r3, #8
 8003970:	6313      	str	r3, [r2, #48]	; 0x30
 8003972:	4b6e      	ldr	r3, [pc, #440]	; (8003b2c <MX_GPIO_Init+0x26c>)
 8003974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	607b      	str	r3, [r7, #4]
 800397c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800397e:	2200      	movs	r2, #0
 8003980:	2108      	movs	r1, #8
 8003982:	486b      	ldr	r0, [pc, #428]	; (8003b30 <MX_GPIO_Init+0x270>)
 8003984:	f001 fe58 	bl	8005638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003988:	2201      	movs	r2, #1
 800398a:	2101      	movs	r1, #1
 800398c:	4869      	ldr	r0, [pc, #420]	; (8003b34 <MX_GPIO_Init+0x274>)
 800398e:	f001 fe53 	bl	8005638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AM2302_Pin|CS_microSD_Pin, GPIO_PIN_RESET);
 8003992:	2200      	movs	r2, #0
 8003994:	2142      	movs	r1, #66	; 0x42
 8003996:	4867      	ldr	r0, [pc, #412]	; (8003b34 <MX_GPIO_Init+0x274>)
 8003998:	f001 fe4e 	bl	8005638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800399c:	2200      	movs	r2, #0
 800399e:	f24f 0110 	movw	r1, #61456	; 0xf010
 80039a2:	4865      	ldr	r0, [pc, #404]	; (8003b38 <MX_GPIO_Init+0x278>)
 80039a4:	f001 fe48 	bl	8005638 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80039a8:	2308      	movs	r3, #8
 80039aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039ac:	2301      	movs	r3, #1
 80039ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039b0:	2300      	movs	r3, #0
 80039b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039b4:	2300      	movs	r3, #0
 80039b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80039b8:	f107 031c 	add.w	r3, r7, #28
 80039bc:	4619      	mov	r1, r3
 80039be:	485c      	ldr	r0, [pc, #368]	; (8003b30 <MX_GPIO_Init+0x270>)
 80039c0:	f001 fc9e 	bl	8005300 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin AM2302_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|AM2302_Pin;
 80039c4:	2303      	movs	r3, #3
 80039c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039c8:	2301      	movs	r3, #1
 80039ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039cc:	2300      	movs	r3, #0
 80039ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d0:	2300      	movs	r3, #0
 80039d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039d4:	f107 031c 	add.w	r3, r7, #28
 80039d8:	4619      	mov	r1, r3
 80039da:	4856      	ldr	r0, [pc, #344]	; (8003b34 <MX_GPIO_Init+0x274>)
 80039dc:	f001 fc90 	bl	8005300 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80039e0:	2308      	movs	r3, #8
 80039e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e4:	2302      	movs	r3, #2
 80039e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ec:	2300      	movs	r3, #0
 80039ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80039f0:	2305      	movs	r3, #5
 80039f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80039f4:	f107 031c 	add.w	r3, r7, #28
 80039f8:	4619      	mov	r1, r3
 80039fa:	484e      	ldr	r0, [pc, #312]	; (8003b34 <MX_GPIO_Init+0x274>)
 80039fc:	f001 fc80 	bl	8005300 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003a00:	2301      	movs	r3, #1
 8003a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003a04:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003a08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003a0e:	f107 031c 	add.w	r3, r7, #28
 8003a12:	4619      	mov	r1, r3
 8003a14:	4849      	ldr	r0, [pc, #292]	; (8003b3c <MX_GPIO_Init+0x27c>)
 8003a16:	f001 fc73 	bl	8005300 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003a1a:	2310      	movs	r3, #16
 8003a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a1e:	2302      	movs	r3, #2
 8003a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a22:	2300      	movs	r3, #0
 8003a24:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a26:	2300      	movs	r3, #0
 8003a28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003a2a:	2306      	movs	r3, #6
 8003a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003a2e:	f107 031c 	add.w	r3, r7, #28
 8003a32:	4619      	mov	r1, r3
 8003a34:	4841      	ldr	r0, [pc, #260]	; (8003b3c <MX_GPIO_Init+0x27c>)
 8003a36:	f001 fc63 	bl	8005300 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003a3a:	2304      	movs	r3, #4
 8003a3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003a46:	f107 031c 	add.w	r3, r7, #28
 8003a4a:	4619      	mov	r1, r3
 8003a4c:	483c      	ldr	r0, [pc, #240]	; (8003b40 <MX_GPIO_Init+0x280>)
 8003a4e:	f001 fc57 	bl	8005300 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8003a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a58:	2302      	movs	r3, #2
 8003a5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a60:	2300      	movs	r3, #0
 8003a62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003a64:	2305      	movs	r3, #5
 8003a66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8003a68:	f107 031c 	add.w	r3, r7, #28
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4834      	ldr	r0, [pc, #208]	; (8003b40 <MX_GPIO_Init+0x280>)
 8003a70:	f001 fc46 	bl	8005300 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003a74:	f24f 0310 	movw	r3, #61456	; 0xf010
 8003a78:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a82:	2300      	movs	r3, #0
 8003a84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a86:	f107 031c 	add.w	r3, r7, #28
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	482a      	ldr	r0, [pc, #168]	; (8003b38 <MX_GPIO_Init+0x278>)
 8003a8e:	f001 fc37 	bl	8005300 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_microSD_Pin */
  GPIO_InitStruct.Pin = CS_microSD_Pin;
 8003a92:	2340      	movs	r3, #64	; 0x40
 8003a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a96:	2301      	movs	r3, #1
 8003a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_microSD_GPIO_Port, &GPIO_InitStruct);
 8003aa2:	f107 031c 	add.w	r3, r7, #28
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	4822      	ldr	r0, [pc, #136]	; (8003b34 <MX_GPIO_Init+0x274>)
 8003aaa:	f001 fc29 	bl	8005300 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003aae:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003ab2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003abc:	2300      	movs	r3, #0
 8003abe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003ac0:	2306      	movs	r3, #6
 8003ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003ac4:	f107 031c 	add.w	r3, r7, #28
 8003ac8:	4619      	mov	r1, r3
 8003aca:	481a      	ldr	r0, [pc, #104]	; (8003b34 <MX_GPIO_Init+0x274>)
 8003acc:	f001 fc18 	bl	8005300 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003ad0:	2320      	movs	r3, #32
 8003ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003adc:	f107 031c 	add.w	r3, r7, #28
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4815      	ldr	r0, [pc, #84]	; (8003b38 <MX_GPIO_Init+0x278>)
 8003ae4:	f001 fc0c 	bl	8005300 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003ae8:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003aee:	2312      	movs	r3, #18
 8003af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003af2:	2301      	movs	r3, #1
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003af6:	2300      	movs	r3, #0
 8003af8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003afa:	2304      	movs	r3, #4
 8003afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003afe:	f107 031c 	add.w	r3, r7, #28
 8003b02:	4619      	mov	r1, r3
 8003b04:	480e      	ldr	r0, [pc, #56]	; (8003b40 <MX_GPIO_Init+0x280>)
 8003b06:	f001 fbfb 	bl	8005300 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003b0e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003b18:	f107 031c 	add.w	r3, r7, #28
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4804      	ldr	r0, [pc, #16]	; (8003b30 <MX_GPIO_Init+0x270>)
 8003b20:	f001 fbee 	bl	8005300 <HAL_GPIO_Init>

}
 8003b24:	bf00      	nop
 8003b26:	3730      	adds	r7, #48	; 0x30
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bd80      	pop	{r7, pc}
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	40021000 	.word	0x40021000
 8003b34:	40020800 	.word	0x40020800
 8003b38:	40020c00 	.word	0x40020c00
 8003b3c:	40020000 	.word	0x40020000
 8003b40:	40020400 	.word	0x40020400

08003b44 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003b4c:	f010 ffe2 	bl	8014b14 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8003b50:	2001      	movs	r0, #1
 8003b52:	f00d f96f 	bl	8010e34 <osDelay>
 8003b56:	e7fb      	b.n	8003b50 <StartDefaultTask+0xc>

08003b58 <Start_Blue_LED_Blink>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Blue_LED_Blink */
void Start_Blue_LED_Blink(void *argument)
{
 8003b58:	b5b0      	push	{r4, r5, r7, lr}
 8003b5a:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	1d3b      	adds	r3, r7, #4
 8003b62:	6018      	str	r0, [r3, #0]
	 * For STM32F407 discovery dev board needs remove R26, and connect battery to VBAT (near R26).
	 * Also, need solder the LF Crystal and two capacitors.
	 */

	// 1. Set time
	  RTC_TimeTypeDef sTime = {0};
 8003b64:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	609a      	str	r2, [r3, #8]
 8003b70:	60da      	str	r2, [r3, #12]
 8003b72:	611a      	str	r2, [r3, #16]
//	  sTime.Minutes = 33;
//	  sTime.Seconds = 00;
//	  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
	  // Set date

	  RTC_DateTypeDef sDate = {0};
 8003b74:	2300      	movs	r3, #0
 8003b76:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
//	  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
	  /////////////////////////////////////////////////////////////////////

	QUEUE_t msg;												// Make a queue

	char buff[50] = {0};
 8003b7a:	f107 0314 	add.w	r3, r7, #20
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	3304      	adds	r3, #4
 8003b84:	222e      	movs	r2, #46	; 0x2e
 8003b86:	2100      	movs	r1, #0
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f011 fe47 	bl	801581c <memset>
	char buf[5] = {0};
 8003b8e:	f107 030c 	add.w	r3, r7, #12
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
 8003b96:	2200      	movs	r2, #0
 8003b98:	711a      	strb	r2, [r3, #4]
	char str_end_of_line[4] = {'\r','\n','\0'};
 8003b9a:	f107 0308 	add.w	r3, r7, #8
 8003b9e:	f640 220d 	movw	r2, #2573	; 0xa0d
 8003ba2:	601a      	str	r2, [r3, #0]

	static uint8_t i = 1;
	for(;;)
	{
		// Blue LED blink
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003baa:	4883      	ldr	r0, [pc, #524]	; (8003db8 <Start_Blue_LED_Blink+0x260>)
 8003bac:	f001 fd44 	bl	8005638 <HAL_GPIO_WritePin>
		osDelay(100);
 8003bb0:	2064      	movs	r0, #100	; 0x64
 8003bb2:	f00d f93f 	bl	8010e34 <osDelay>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET);
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bbc:	487e      	ldr	r0, [pc, #504]	; (8003db8 <Start_Blue_LED_Blink+0x260>)
 8003bbe:	f001 fd3b 	bl	8005638 <HAL_GPIO_WritePin>
		osDelay(900);
 8003bc2:	f44f 7061 	mov.w	r0, #900	; 0x384
 8003bc6:	f00d f935 	bl	8010e34 <osDelay>

		// RTC part
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);						// Get time (write in sDime struct)
 8003bca:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8003bce:	2200      	movs	r2, #0
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	487a      	ldr	r0, [pc, #488]	; (8003dbc <Start_Blue_LED_Blink+0x264>)
 8003bd4:	f005 f84c 	bl	8008c70 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);						// Get data (write in sDime struct)
 8003bd8:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8003bdc:	2200      	movs	r2, #0
 8003bde:	4619      	mov	r1, r3
 8003be0:	4876      	ldr	r0, [pc, #472]	; (8003dbc <Start_Blue_LED_Blink+0x264>)
 8003be2:	f005 f94a 	bl	8008e7a <HAL_RTC_GetDate>

		memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
 8003be6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003bea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bee:	2100      	movs	r1, #0
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f011 fe13 	bl	801581c <memset>
		memset(buff, 0, sizeof(buff));
 8003bf6:	f107 0314 	add.w	r3, r7, #20
 8003bfa:	2232      	movs	r2, #50	; 0x32
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f011 fe0c 	bl	801581c <memset>

		strcat(msg.Buf, "RTC DATA AND TIME >>>>>>>    " );
 8003c04:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7fc fae1 	bl	80001d0 <strlen>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	461a      	mov	r2, r3
 8003c12:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c16:	4413      	add	r3, r2
 8003c18:	4a69      	ldr	r2, [pc, #420]	; (8003dc0 <Start_Blue_LED_Blink+0x268>)
 8003c1a:	461d      	mov	r5, r3
 8003c1c:	4614      	mov	r4, r2
 8003c1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c20:	6028      	str	r0, [r5, #0]
 8003c22:	6069      	str	r1, [r5, #4]
 8003c24:	60aa      	str	r2, [r5, #8]
 8003c26:	60eb      	str	r3, [r5, #12]
 8003c28:	cc07      	ldmia	r4!, {r0, r1, r2}
 8003c2a:	6128      	str	r0, [r5, #16]
 8003c2c:	6169      	str	r1, [r5, #20]
 8003c2e:	61aa      	str	r2, [r5, #24]
 8003c30:	8823      	ldrh	r3, [r4, #0]
 8003c32:	83ab      	strh	r3, [r5, #28]

		// Date
		itoa(sDate.Year, buf, 10);
 8003c34:	f897 344b 	ldrb.w	r3, [r7, #1099]	; 0x44b
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f107 030c 	add.w	r3, r7, #12
 8003c3e:	220a      	movs	r2, #10
 8003c40:	4619      	mov	r1, r3
 8003c42:	f011 fdc7 	bl	80157d4 <itoa>
		strcat(msg.Buf, buf);
 8003c46:	f107 020c 	add.w	r2, r7, #12
 8003c4a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c4e:	4611      	mov	r1, r2
 8003c50:	4618      	mov	r0, r3
 8003c52:	f012 fbdc 	bl	801640e <strcat>

		itoa(sDate.Month, buf, 10);
 8003c56:	f897 3449 	ldrb.w	r3, [r7, #1097]	; 0x449
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f107 030c 	add.w	r3, r7, #12
 8003c60:	220a      	movs	r2, #10
 8003c62:	4619      	mov	r1, r3
 8003c64:	f011 fdb6 	bl	80157d4 <itoa>
		strcat(msg.Buf, "-");
 8003c68:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7fc faaf 	bl	80001d0 <strlen>
 8003c72:	4603      	mov	r3, r0
 8003c74:	461a      	mov	r2, r3
 8003c76:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c7a:	4413      	add	r3, r2
 8003c7c:	4951      	ldr	r1, [pc, #324]	; (8003dc4 <Start_Blue_LED_Blink+0x26c>)
 8003c7e:	461a      	mov	r2, r3
 8003c80:	460b      	mov	r3, r1
 8003c82:	881b      	ldrh	r3, [r3, #0]
 8003c84:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003c86:	f107 020c 	add.w	r2, r7, #12
 8003c8a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003c8e:	4611      	mov	r1, r2
 8003c90:	4618      	mov	r0, r3
 8003c92:	f012 fbbc 	bl	801640e <strcat>

		itoa(sDate.Date, buf, 10);
 8003c96:	f897 344a 	ldrb.w	r3, [r7, #1098]	; 0x44a
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f107 030c 	add.w	r3, r7, #12
 8003ca0:	220a      	movs	r2, #10
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	f011 fd96 	bl	80157d4 <itoa>
		strcat(msg.Buf, "-");
 8003ca8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003cac:	4618      	mov	r0, r3
 8003cae:	f7fc fa8f 	bl	80001d0 <strlen>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003cba:	4413      	add	r3, r2
 8003cbc:	4941      	ldr	r1, [pc, #260]	; (8003dc4 <Start_Blue_LED_Blink+0x26c>)
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	881b      	ldrh	r3, [r3, #0]
 8003cc4:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003cc6:	f107 020c 	add.w	r2, r7, #12
 8003cca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003cce:	4611      	mov	r1, r2
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f012 fb9c 	bl	801640e <strcat>

		strcat(msg.Buf, " | ");
 8003cd6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fc fa78 	bl	80001d0 <strlen>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ce8:	4413      	add	r3, r2
 8003cea:	4a37      	ldr	r2, [pc, #220]	; (8003dc8 <Start_Blue_LED_Blink+0x270>)
 8003cec:	6810      	ldr	r0, [r2, #0]
 8003cee:	6018      	str	r0, [r3, #0]

		// Time
		itoa(sTime.Hours, buf, 10);
 8003cf0:	f897 344c 	ldrb.w	r3, [r7, #1100]	; 0x44c
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f107 030c 	add.w	r3, r7, #12
 8003cfa:	220a      	movs	r2, #10
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	f011 fd69 	bl	80157d4 <itoa>
		strcat(msg.Buf, buf);
 8003d02:	f107 020c 	add.w	r2, r7, #12
 8003d06:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f012 fb7e 	bl	801640e <strcat>

		itoa(sTime.Minutes, buf, 10);
 8003d12:	f897 344d 	ldrb.w	r3, [r7, #1101]	; 0x44d
 8003d16:	4618      	mov	r0, r3
 8003d18:	f107 030c 	add.w	r3, r7, #12
 8003d1c:	220a      	movs	r2, #10
 8003d1e:	4619      	mov	r1, r3
 8003d20:	f011 fd58 	bl	80157d4 <itoa>
		strcat(msg.Buf, ":");
 8003d24:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f7fc fa51 	bl	80001d0 <strlen>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	461a      	mov	r2, r3
 8003d32:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d36:	4413      	add	r3, r2
 8003d38:	4924      	ldr	r1, [pc, #144]	; (8003dcc <Start_Blue_LED_Blink+0x274>)
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	881b      	ldrh	r3, [r3, #0]
 8003d40:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003d42:	f107 020c 	add.w	r2, r7, #12
 8003d46:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d4a:	4611      	mov	r1, r2
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	f012 fb5e 	bl	801640e <strcat>

		itoa(sTime.Seconds, buf, 10);
 8003d52:	f897 344e 	ldrb.w	r3, [r7, #1102]	; 0x44e
 8003d56:	4618      	mov	r0, r3
 8003d58:	f107 030c 	add.w	r3, r7, #12
 8003d5c:	220a      	movs	r2, #10
 8003d5e:	4619      	mov	r1, r3
 8003d60:	f011 fd38 	bl	80157d4 <itoa>
		strcat(msg.Buf, ":");
 8003d64:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fc fa31 	bl	80001d0 <strlen>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	461a      	mov	r2, r3
 8003d72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d76:	4413      	add	r3, r2
 8003d78:	4914      	ldr	r1, [pc, #80]	; (8003dcc <Start_Blue_LED_Blink+0x274>)
 8003d7a:	461a      	mov	r2, r3
 8003d7c:	460b      	mov	r3, r1
 8003d7e:	881b      	ldrh	r3, [r3, #0]
 8003d80:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003d82:	f107 020c 	add.w	r2, r7, #12
 8003d86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f012 fb3e 	bl	801640e <strcat>

		strcat(msg.Buf, str_end_of_line);
 8003d92:	f107 0208 	add.w	r2, r7, #8
 8003d96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d9a:	4611      	mov	r1, r2
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f012 fb36 	bl	801640e <strcat>
		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 8003da2:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <Start_Blue_LED_Blink+0x278>)
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003dae:	2200      	movs	r2, #0
 8003db0:	f00d fa12 	bl	80111d8 <osMessageQueuePut>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 8003db4:	e6f6      	b.n	8003ba4 <Start_Blue_LED_Blink+0x4c>
 8003db6:	bf00      	nop
 8003db8:	40020c00 	.word	0x40020c00
 8003dbc:	2000dbf4 	.word	0x2000dbf4
 8003dc0:	0801894c 	.word	0x0801894c
 8003dc4:	0801896c 	.word	0x0801896c
 8003dc8:	08018970 	.word	0x08018970
 8003dcc:	08018974 	.word	0x08018974
 8003dd0:	2000a3a4 	.word	0x2000a3a4

08003dd4 <Start_Show_Resources>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Show_Resources */
void Start_Show_Resources(void *argument)
{
 8003dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003dd6:	f2ad 4d84 	subw	sp, sp, #1156	; 0x484
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	1d3b      	adds	r3, r7, #4
 8003dde:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_Show_Resources */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(5000);												// Every 5 second task management will print data
 8003de0:	f241 3088 	movw	r0, #5000	; 0x1388
 8003de4:	f00d f826 	bl	8010e34 <osDelay>

	  char str_end_of_line[3] = {'\r','\n'};
 8003de8:	4a8d      	ldr	r2, [pc, #564]	; (8004020 <Start_Show_Resources+0x24c>)
 8003dea:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8003dee:	6812      	ldr	r2, [r2, #0]
 8003df0:	4611      	mov	r1, r2
 8003df2:	8019      	strh	r1, [r3, #0]
 8003df4:	3302      	adds	r3, #2
 8003df6:	0c12      	lsrs	r2, r2, #16
 8003df8:	701a      	strb	r2, [r3, #0]
	  char str_sig = '-';
 8003dfa:	232d      	movs	r3, #45	; 0x2d
 8003dfc:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
	  char buff[10] = {0};
 8003e00:	2300      	movs	r3, #0
 8003e02:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8003e06:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	809a      	strh	r2, [r3, #4]

	  QUEUE_t msg;												// Make a queue
	  memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 8003e10:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e18:	2100      	movs	r1, #0
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f011 fcfe 	bl	801581c <memset>
	  strcat(msg.Buf, ">>>>> Free heap memory: ");				// Add string to another (Total heap)
 8003e20:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e24:	4618      	mov	r0, r3
 8003e26:	f7fc f9d3 	bl	80001d0 <strlen>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e32:	4413      	add	r3, r2
 8003e34:	4a7b      	ldr	r2, [pc, #492]	; (8004024 <Start_Show_Resources+0x250>)
 8003e36:	461d      	mov	r5, r3
 8003e38:	4614      	mov	r4, r2
 8003e3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003e3c:	6028      	str	r0, [r5, #0]
 8003e3e:	6069      	str	r1, [r5, #4]
 8003e40:	60aa      	str	r2, [r5, #8]
 8003e42:	60eb      	str	r3, [r5, #12]
 8003e44:	cc03      	ldmia	r4!, {r0, r1}
 8003e46:	6128      	str	r0, [r5, #16]
 8003e48:	6169      	str	r1, [r5, #20]
 8003e4a:	7823      	ldrb	r3, [r4, #0]
 8003e4c:	762b      	strb	r3, [r5, #24]

	  freemem = xPortGetFreeHeapSize();							// Function return how many free memory.
 8003e4e:	f010 fd99 	bl	8014984 <xPortGetFreeHeapSize>
 8003e52:	4603      	mov	r3, r0
 8003e54:	461a      	mov	r2, r3
 8003e56:	4b74      	ldr	r3, [pc, #464]	; (8004028 <Start_Show_Resources+0x254>)
 8003e58:	601a      	str	r2, [r3, #0]
	  itoa(freemem, buff, 10);
 8003e5a:	4b73      	ldr	r3, [pc, #460]	; (8004028 <Start_Show_Resources+0x254>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 8003e62:	220a      	movs	r2, #10
 8003e64:	4618      	mov	r0, r3
 8003e66:	f011 fcb5 	bl	80157d4 <itoa>
	  strcat(msg.Buf, buff);
 8003e6a:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 8003e6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e72:	4611      	mov	r1, r2
 8003e74:	4618      	mov	r0, r3
 8003e76:	f012 faca 	bl	801640e <strcat>
	  strcat(msg.Buf, str_end_of_line);
 8003e7a:	f207 4274 	addw	r2, r7, #1140	; 0x474
 8003e7e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e82:	4611      	mov	r1, r2
 8003e84:	4618      	mov	r0, r3
 8003e86:	f012 fac2 	bl	801640e <strcat>

	  // add a hat
	  strcat(msg.Buf, "| TASK NAME           | STATUS |   PRIOR	|  STACK  |    NUM  |\n\r\0");
 8003e8a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fc f99e 	bl	80001d0 <strlen>
 8003e94:	4603      	mov	r3, r0
 8003e96:	461a      	mov	r2, r3
 8003e98:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003e9c:	4413      	add	r3, r2
 8003e9e:	4a63      	ldr	r2, [pc, #396]	; (800402c <Start_Show_Resources+0x258>)
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	4611      	mov	r1, r2
 8003ea4:	2341      	movs	r3, #65	; 0x41
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	f011 fcaa 	bl	8015800 <memcpy>

	  vTaskList(str_management_memory_str);						// Fill in str_management_memory_str array management task information
 8003eac:	4860      	ldr	r0, [pc, #384]	; (8004030 <Start_Show_Resources+0x25c>)
 8003eae:	f00f fd1b 	bl	80138e8 <vTaskList>

	  // Finding the  end of string
	  uint16_t buffer_size = 0;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  while(msg.Buf[buffer_size] != '\0')
 8003eb8:	e004      	b.n	8003ec4 <Start_Show_Resources+0xf0>
	  {
	  	buffer_size ++;
 8003eba:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  while(msg.Buf[buffer_size] != '\0')
 8003ec4:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 8003ec8:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003ecc:	5cd3      	ldrb	r3, [r2, r3]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f3      	bne.n	8003eba <Start_Show_Resources+0xe6>
	  }

	  // Add str_management_memory_str to queue string
	  int i = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003ed8:	2300      	movs	r3, #0
 8003eda:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8003ede:	e011      	b.n	8003f04 <Start_Show_Resources+0x130>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8003ee0:	f8b7 247e 	ldrh.w	r2, [r7, #1150]	; 0x47e
 8003ee4:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8003ee8:	4413      	add	r3, r2
 8003eea:	4951      	ldr	r1, [pc, #324]	; (8004030 <Start_Show_Resources+0x25c>)
 8003eec:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8003ef0:	440a      	add	r2, r1
 8003ef2:	7811      	ldrb	r1, [r2, #0]
 8003ef4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003ef8:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003efa:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8003efe:	3301      	adds	r3, #1
 8003f00:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8003f04:	4a4a      	ldr	r2, [pc, #296]	; (8004030 <Start_Show_Resources+0x25c>)
 8003f06:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8003f0a:	4413      	add	r3, r2
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1e6      	bne.n	8003ee0 <Start_Show_Resources+0x10c>
	  }

	  // add a hat
	  char str_line[] = {"-----------------------\n\r"};
 8003f12:	4b48      	ldr	r3, [pc, #288]	; (8004034 <Start_Show_Resources+0x260>)
 8003f14:	f207 444c 	addw	r4, r7, #1100	; 0x44c
 8003f18:	461d      	mov	r5, r3
 8003f1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003f22:	c403      	stmia	r4!, {r0, r1}
 8003f24:	8022      	strh	r2, [r4, #0]
	  char str_head_2[] = {"| TASK NAME           | ABS TIME |              TASK TIME% |\n\r"};
 8003f26:	f107 030c 	add.w	r3, r7, #12
 8003f2a:	4a43      	ldr	r2, [pc, #268]	; (8004038 <Start_Show_Resources+0x264>)
 8003f2c:	461c      	mov	r4, r3
 8003f2e:	4615      	mov	r5, r2
 8003f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003f3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003f3c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8003f40:	c407      	stmia	r4!, {r0, r1, r2}
 8003f42:	8023      	strh	r3, [r4, #0]
 8003f44:	3402      	adds	r4, #2
 8003f46:	0c1b      	lsrs	r3, r3, #16
 8003f48:	7023      	strb	r3, [r4, #0]
	  strcat(msg.Buf, str_line);
 8003f4a:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8003f4e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f52:	4611      	mov	r1, r2
 8003f54:	4618      	mov	r0, r3
 8003f56:	f012 fa5a 	bl	801640e <strcat>
	  strcat(msg.Buf, str_head_2);
 8003f5a:	f107 020c 	add.w	r2, r7, #12
 8003f5e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003f62:	4611      	mov	r1, r2
 8003f64:	4618      	mov	r0, r3
 8003f66:	f012 fa52 	bl	801640e <strcat>

	  memset(str_management_memory_str, 0, sizeof(str_management_memory_str));	// Clean buffer
 8003f6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003f6e:	2100      	movs	r1, #0
 8003f70:	482f      	ldr	r0, [pc, #188]	; (8004030 <Start_Show_Resources+0x25c>)
 8003f72:	f011 fc53 	bl	801581c <memset>

	  vTaskGetRunTimeStats(str_management_memory_str);							// Function return how much time all functions running.
 8003f76:	482e      	ldr	r0, [pc, #184]	; (8004030 <Start_Show_Resources+0x25c>)
 8003f78:	f00f fd4c 	bl	8013a14 <vTaskGetRunTimeStats>

	  buffer_size = buffer_size + i + (sizeof(str_line)-1) + (sizeof(str_head_2)-1);           // НЕ ВИВОДИТЬ СТРОКУ !!!!!!!!!!!!!!!!!! <<<<<<<<<<<<<<<<<<<
 8003f7c:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8003f80:	b29a      	uxth	r2, r3
 8003f82:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 8003f86:	4413      	add	r3, r2
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3357      	adds	r3, #87	; 0x57
 8003f8c:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003f90:	2300      	movs	r3, #0
 8003f92:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8003f96:	e011      	b.n	8003fbc <Start_Show_Resources+0x1e8>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8003f98:	f8b7 247e 	ldrh.w	r2, [r7, #1150]	; 0x47e
 8003f9c:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8003fa0:	4413      	add	r3, r2
 8003fa2:	4923      	ldr	r1, [pc, #140]	; (8004030 <Start_Show_Resources+0x25c>)
 8003fa4:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8003fa8:	440a      	add	r2, r1
 8003faa:	7811      	ldrb	r1, [r2, #0]
 8003fac:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8003fb0:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 8003fb2:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8003fbc:	4a1c      	ldr	r2, [pc, #112]	; (8004030 <Start_Show_Resources+0x25c>)
 8003fbe:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8003fc2:	4413      	add	r3, r2
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1e6      	bne.n	8003f98 <Start_Show_Resources+0x1c4>
	  }
	  strcat(msg.Buf, "#########################################\n\r");
 8003fca:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f7fc f8fe 	bl	80001d0 <strlen>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003fdc:	4413      	add	r3, r2
 8003fde:	4a17      	ldr	r2, [pc, #92]	; (800403c <Start_Show_Resources+0x268>)
 8003fe0:	4614      	mov	r4, r2
 8003fe2:	469c      	mov	ip, r3
 8003fe4:	f104 0e20 	add.w	lr, r4, #32
 8003fe8:	4665      	mov	r5, ip
 8003fea:	4626      	mov	r6, r4
 8003fec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8003fee:	6028      	str	r0, [r5, #0]
 8003ff0:	6069      	str	r1, [r5, #4]
 8003ff2:	60aa      	str	r2, [r5, #8]
 8003ff4:	60eb      	str	r3, [r5, #12]
 8003ff6:	3410      	adds	r4, #16
 8003ff8:	f10c 0c10 	add.w	ip, ip, #16
 8003ffc:	4574      	cmp	r4, lr
 8003ffe:	d1f3      	bne.n	8003fe8 <Start_Show_Resources+0x214>
 8004000:	4665      	mov	r5, ip
 8004002:	4623      	mov	r3, r4
 8004004:	cb07      	ldmia	r3!, {r0, r1, r2}
 8004006:	6028      	str	r0, [r5, #0]
 8004008:	6069      	str	r1, [r5, #4]
 800400a:	60aa      	str	r2, [r5, #8]

	  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 800400c:	4b0c      	ldr	r3, [pc, #48]	; (8004040 <Start_Show_Resources+0x26c>)
 800400e:	6818      	ldr	r0, [r3, #0]
 8004010:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8004014:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004018:	2200      	movs	r2, #0
 800401a:	f00d f8dd 	bl	80111d8 <osMessageQueuePut>
  {
 800401e:	e6df      	b.n	8003de0 <Start_Show_Resources+0xc>
 8004020:	08018a04 	.word	0x08018a04
 8004024:	08018978 	.word	0x08018978
 8004028:	20000778 	.word	0x20000778
 800402c:	08018994 	.word	0x08018994
 8004030:	20000390 	.word	0x20000390
 8004034:	08018a08 	.word	0x08018a08
 8004038:	08018a24 	.word	0x08018a24
 800403c:	080189d8 	.word	0x080189d8
 8004040:	2000a3a4 	.word	0x2000a3a4

08004044 <Start_UART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_UART_Task */
void Start_UART_Task(void *argument)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 800404a:	af00      	add	r7, sp, #0
 800404c:	1d3b      	adds	r3, r7, #4
 800404e:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  QUEUE_t msg;
  for(;;)
  {
	// osMessageQueueGet waiting data on a queue (If data are in queue so print it)
	osMessageQueueGet(UARTQueueHandle, &msg, 0, osWaitForever);			// Write for data on queue
 8004050:	4b12      	ldr	r3, [pc, #72]	; (800409c <Start_UART_Task+0x58>)
 8004052:	6818      	ldr	r0, [r3, #0]
 8004054:	f107 010c 	add.w	r1, r7, #12
 8004058:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800405c:	2200      	movs	r2, #0
 800405e:	f00d f91b 	bl	8011298 <osMessageQueueGet>
	// Counting how many characters will be transmitted
	uint16_t buffer_size = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8004068:	e004      	b.n	8004074 <Start_UART_Task+0x30>
	{
		buffer_size ++;
 800406a:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 800406e:	3301      	adds	r3, #1
 8004070:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8004074:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8004078:	f107 020c 	add.w	r2, r7, #12
 800407c:	5cd3      	ldrb	r3, [r2, r3]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d1f3      	bne.n	800406a <Start_UART_Task+0x26>
	}
	// Transmit over virtual comport
	CDC_Transmit_FS(msg.Buf, buffer_size);						// Transmit data over virtual comport
 8004082:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8004086:	f107 030c 	add.w	r3, r7, #12
 800408a:	4611      	mov	r1, r2
 800408c:	4618      	mov	r0, r3
 800408e:	f010 fdff 	bl	8014c90 <CDC_Transmit_FS>
    osDelay(1);
 8004092:	2001      	movs	r0, #1
 8004094:	f00c fece 	bl	8010e34 <osDelay>
  {
 8004098:	e7da      	b.n	8004050 <Start_UART_Task+0xc>
 800409a:	bf00      	nop
 800409c:	2000a3a4 	.word	0x2000a3a4

080040a0 <Start_bme280>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_bme280 */
void Start_bme280(void *argument)
{
 80040a0:	b5b0      	push	{r4, r5, r7, lr}
 80040a2:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 80040a6:	af04      	add	r7, sp, #16
 80040a8:	1d3b      	adds	r3, r7, #4
 80040aa:	6018      	str	r0, [r3, #0]
  /* Infinite loop */

	QUEUE_t msg;												// Make a queue
	//memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'

	uint16_t STATUS=0;
 80040ac:	2300      	movs	r3, #0
 80040ae:	f8a7 345e 	strh.w	r3, [r7, #1118]	; 0x45e
	uint16_t addres_device = 0x76;  		 	// BME280
 80040b2:	2376      	movs	r3, #118	; 0x76
 80040b4:	f8a7 345c 	strh.w	r3, [r7, #1116]	; 0x45c
	uint16_t id_addr = 0xD0;
 80040b8:	23d0      	movs	r3, #208	; 0xd0
 80040ba:	f8a7 345a 	strh.w	r3, [r7, #1114]	; 0x45a
	uint8_t id = 96;							// in hex form
 80040be:	2360      	movs	r3, #96	; 0x60
 80040c0:	f887 3459 	strb.w	r3, [r7, #1113]	; 0x459
	uint8_t buff=0;        						// Return 0x96 -> Dec 60
 80040c4:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 80040c8:	2200      	movs	r2, #0
 80040ca:	701a      	strb	r2, [r3, #0]

	// For debug
	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 80040cc:	f8b7 345c 	ldrh.w	r3, [r7, #1116]	; 0x45c
 80040d0:	005b      	lsls	r3, r3, #1
 80040d2:	b299      	uxth	r1, r3
 80040d4:	f8b7 245a 	ldrh.w	r2, [r7, #1114]	; 0x45a
 80040d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040dc:	9302      	str	r3, [sp, #8]
 80040de:	2301      	movs	r3, #1
 80040e0:	9301      	str	r3, [sp, #4]
 80040e2:	f107 034b 	add.w	r3, r7, #75	; 0x4b
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	2301      	movs	r3, #1
 80040ea:	48bb      	ldr	r0, [pc, #748]	; (80043d8 <Start_bme280+0x338>)
 80040ec:	f001 ff40 	bl	8005f70 <HAL_I2C_Mem_Read>
 80040f0:	4603      	mov	r3, r0
 80040f2:	f8a7 345e 	strh.w	r3, [r7, #1118]	; 0x45e
		// Error !!! BME280 didn't found
	}


	// Init BME280
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 80040f6:	4bb9      	ldr	r3, [pc, #740]	; (80043dc <Start_bme280+0x33c>)
 80040f8:	2276      	movs	r2, #118	; 0x76
 80040fa:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 80040fc:	4bb7      	ldr	r3, [pc, #732]	; (80043dc <Start_bme280+0x33c>)
 80040fe:	2201      	movs	r2, #1
 8004100:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 8004102:	4bb6      	ldr	r3, [pc, #728]	; (80043dc <Start_bme280+0x33c>)
 8004104:	4ab6      	ldr	r2, [pc, #728]	; (80043e0 <Start_bme280+0x340>)
 8004106:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 8004108:	4bb4      	ldr	r3, [pc, #720]	; (80043dc <Start_bme280+0x33c>)
 800410a:	4ab6      	ldr	r2, [pc, #728]	; (80043e4 <Start_bme280+0x344>)
 800410c:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 800410e:	4bb3      	ldr	r3, [pc, #716]	; (80043dc <Start_bme280+0x33c>)
 8004110:	4ab5      	ldr	r2, [pc, #724]	; (80043e8 <Start_bme280+0x348>)
 8004112:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&dev);
 8004114:	48b1      	ldr	r0, [pc, #708]	; (80043dc <Start_bme280+0x33c>)
 8004116:	f7fc ff13 	bl	8000f40 <bme280_init>
 800411a:	4603      	mov	r3, r0
 800411c:	461a      	mov	r2, r3
 800411e:	4bb3      	ldr	r3, [pc, #716]	; (80043ec <Start_bme280+0x34c>)
 8004120:	701a      	strb	r2, [r3, #0]

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 8004122:	4bae      	ldr	r3, [pc, #696]	; (80043dc <Start_bme280+0x33c>)
 8004124:	2201      	movs	r2, #1
 8004126:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 800412a:	4bac      	ldr	r3, [pc, #688]	; (80043dc <Start_bme280+0x33c>)
 800412c:	2205      	movs	r2, #5
 800412e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 8004132:	4baa      	ldr	r3, [pc, #680]	; (80043dc <Start_bme280+0x33c>)
 8004134:	2202      	movs	r2, #2
 8004136:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 800413a:	4ba8      	ldr	r3, [pc, #672]	; (80043dc <Start_bme280+0x33c>)
 800413c:	2204      	movs	r2, #4
 800413e:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 8004142:	49a6      	ldr	r1, [pc, #664]	; (80043dc <Start_bme280+0x33c>)
 8004144:	200f      	movs	r0, #15
 8004146:	f7fc ffed 	bl	8001124 <bme280_set_sensor_settings>
 800414a:	4603      	mov	r3, r0
 800414c:	461a      	mov	r2, r3
 800414e:	4ba7      	ldr	r3, [pc, #668]	; (80043ec <Start_bme280+0x34c>)
 8004150:	701a      	strb	r2, [r3, #0]

	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 8004152:	49a2      	ldr	r1, [pc, #648]	; (80043dc <Start_bme280+0x33c>)
 8004154:	2003      	movs	r0, #3
 8004156:	f7fd f83a 	bl	80011ce <bme280_set_sensor_mode>
 800415a:	4603      	mov	r3, r0
 800415c:	461a      	mov	r2, r3
 800415e:	4ba3      	ldr	r3, [pc, #652]	; (80043ec <Start_bme280+0x34c>)
 8004160:	701a      	strb	r2, [r3, #0]

	dev.delay_ms(40);
 8004162:	4b9e      	ldr	r3, [pc, #632]	; (80043dc <Start_bme280+0x33c>)
 8004164:	68db      	ldr	r3, [r3, #12]
 8004166:	2028      	movs	r0, #40	; 0x28
 8004168:	4798      	blx	r3

  for(;;)
  {
	  osDelay(1000);
 800416a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800416e:	f00c fe61 	bl	8010e34 <osDelay>

	  char str_t_h_and_p[50] = {0};
 8004172:	f107 0308 	add.w	r3, r7, #8
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]
 800417a:	3304      	adds	r3, #4
 800417c:	222e      	movs	r2, #46	; 0x2e
 800417e:	2100      	movs	r1, #0
 8004180:	4618      	mov	r0, r3
 8004182:	f011 fb4b 	bl	801581c <memset>
	  char str_thp_buffer[12] = {0};
 8004186:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800418a:	2200      	movs	r2, #0
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	3304      	adds	r3, #4
 8004190:	2200      	movs	r2, #0
 8004192:	601a      	str	r2, [r3, #0]
 8004194:	605a      	str	r2, [r3, #4]

	  memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
 8004196:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800419a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800419e:	2100      	movs	r1, #0
 80041a0:	4618      	mov	r0, r3
 80041a2:	f011 fb3b 	bl	801581c <memset>
	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);		// Get data from sensor
 80041a6:	4a8d      	ldr	r2, [pc, #564]	; (80043dc <Start_bme280+0x33c>)
 80041a8:	4991      	ldr	r1, [pc, #580]	; (80043f0 <Start_bme280+0x350>)
 80041aa:	2007      	movs	r0, #7
 80041ac:	f7fd f88b 	bl	80012c6 <bme280_get_sensor_data>
 80041b0:	4603      	mov	r3, r0
 80041b2:	461a      	mov	r2, r3
 80041b4:	4b8d      	ldr	r3, [pc, #564]	; (80043ec <Start_bme280+0x34c>)
 80041b6:	701a      	strb	r2, [r3, #0]

	  if(rslt == BME280_OK)
 80041b8:	4b8c      	ldr	r3, [pc, #560]	; (80043ec <Start_bme280+0x34c>)
 80041ba:	f993 3000 	ldrsb.w	r3, [r3]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	f040 80e5 	bne.w	800438e <Start_bme280+0x2ee>
	  {
	  		// Save data variables
	  		float BME280_temperature = comp_data.temperature;
 80041c4:	4b8a      	ldr	r3, [pc, #552]	; (80043f0 <Start_bme280+0x350>)
 80041c6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80041ca:	4610      	mov	r0, r2
 80041cc:	4619      	mov	r1, r3
 80041ce:	f7fc fceb 	bl	8000ba8 <__aeabi_d2f>
 80041d2:	4603      	mov	r3, r0
 80041d4:	f207 4254 	addw	r2, r7, #1108	; 0x454
 80041d8:	6013      	str	r3, [r2, #0]
	  		float BME280_humidity = comp_data.humidity;
 80041da:	4b85      	ldr	r3, [pc, #532]	; (80043f0 <Start_bme280+0x350>)
 80041dc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80041e0:	4610      	mov	r0, r2
 80041e2:	4619      	mov	r1, r3
 80041e4:	f7fc fce0 	bl	8000ba8 <__aeabi_d2f>
 80041e8:	4603      	mov	r3, r0
 80041ea:	f507 628a 	add.w	r2, r7, #1104	; 0x450
 80041ee:	6013      	str	r3, [r2, #0]
	  		float BME280_preasure = comp_data.pressure;
 80041f0:	4b7f      	ldr	r3, [pc, #508]	; (80043f0 <Start_bme280+0x350>)
 80041f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f6:	4610      	mov	r0, r2
 80041f8:	4619      	mov	r1, r3
 80041fa:	f7fc fcd5 	bl	8000ba8 <__aeabi_d2f>
 80041fe:	4603      	mov	r3, r0
 8004200:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 8004204:	6013      	str	r3, [r2, #0]

	  		// Write T, H and P in str_t_h_and_p buffer
	  		// Write TEMPERATURE
	  		strcat(str_t_h_and_p, "BEE280: \n\r");
 8004206:	f107 0308 	add.w	r3, r7, #8
 800420a:	4618      	mov	r0, r3
 800420c:	f7fb ffe0 	bl	80001d0 <strlen>
 8004210:	4603      	mov	r3, r0
 8004212:	461a      	mov	r2, r3
 8004214:	f107 0308 	add.w	r3, r7, #8
 8004218:	4413      	add	r3, r2
 800421a:	4976      	ldr	r1, [pc, #472]	; (80043f4 <Start_bme280+0x354>)
 800421c:	461a      	mov	r2, r3
 800421e:	460b      	mov	r3, r1
 8004220:	cb03      	ldmia	r3!, {r0, r1}
 8004222:	6010      	str	r0, [r2, #0]
 8004224:	6051      	str	r1, [r2, #4]
 8004226:	8819      	ldrh	r1, [r3, #0]
 8004228:	789b      	ldrb	r3, [r3, #2]
 800422a:	8111      	strh	r1, [r2, #8]
 800422c:	7293      	strb	r3, [r2, #10]
	  		strcat(str_t_h_and_p, "T: ");
 800422e:	f107 0308 	add.w	r3, r7, #8
 8004232:	4618      	mov	r0, r3
 8004234:	f7fb ffcc 	bl	80001d0 <strlen>
 8004238:	4603      	mov	r3, r0
 800423a:	461a      	mov	r2, r3
 800423c:	f107 0308 	add.w	r3, r7, #8
 8004240:	4413      	add	r3, r2
 8004242:	4a6d      	ldr	r2, [pc, #436]	; (80043f8 <Start_bme280+0x358>)
 8004244:	6810      	ldr	r0, [r2, #0]
 8004246:	6018      	str	r0, [r3, #0]
	  		sprintf(str_thp_buffer, "%f", BME280_temperature);
 8004248:	f207 4354 	addw	r3, r7, #1108	; 0x454
 800424c:	6818      	ldr	r0, [r3, #0]
 800424e:	f7fc f97b 	bl	8000548 <__aeabi_f2d>
 8004252:	4602      	mov	r2, r0
 8004254:	460b      	mov	r3, r1
 8004256:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800425a:	4968      	ldr	r1, [pc, #416]	; (80043fc <Start_bme280+0x35c>)
 800425c:	f012 f874 	bl	8016348 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 8004260:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004264:	f107 0308 	add.w	r3, r7, #8
 8004268:	4611      	mov	r1, r2
 800426a:	4618      	mov	r0, r3
 800426c:	f012 f8cf 	bl	801640e <strcat>
	  		strcat(str_t_h_and_p, " C\n\r");
 8004270:	f107 0308 	add.w	r3, r7, #8
 8004274:	4618      	mov	r0, r3
 8004276:	f7fb ffab 	bl	80001d0 <strlen>
 800427a:	4603      	mov	r3, r0
 800427c:	461a      	mov	r2, r3
 800427e:	f107 0308 	add.w	r3, r7, #8
 8004282:	4413      	add	r3, r2
 8004284:	4a5e      	ldr	r2, [pc, #376]	; (8004400 <Start_bme280+0x360>)
 8004286:	6810      	ldr	r0, [r2, #0]
 8004288:	6018      	str	r0, [r3, #0]
 800428a:	7912      	ldrb	r2, [r2, #4]
 800428c:	711a      	strb	r2, [r3, #4]

	  		// Write HUMIDYTY
	  		memset(str_thp_buffer, 0, sizeof(str_thp_buffer));
 800428e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004292:	220c      	movs	r2, #12
 8004294:	2100      	movs	r1, #0
 8004296:	4618      	mov	r0, r3
 8004298:	f011 fac0 	bl	801581c <memset>
	  		strcat(str_t_h_and_p, "H: ");
 800429c:	f107 0308 	add.w	r3, r7, #8
 80042a0:	4618      	mov	r0, r3
 80042a2:	f7fb ff95 	bl	80001d0 <strlen>
 80042a6:	4603      	mov	r3, r0
 80042a8:	461a      	mov	r2, r3
 80042aa:	f107 0308 	add.w	r3, r7, #8
 80042ae:	4413      	add	r3, r2
 80042b0:	4a54      	ldr	r2, [pc, #336]	; (8004404 <Start_bme280+0x364>)
 80042b2:	6810      	ldr	r0, [r2, #0]
 80042b4:	6018      	str	r0, [r3, #0]
	  		sprintf(str_thp_buffer, "%f", BME280_humidity);
 80042b6:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80042ba:	6818      	ldr	r0, [r3, #0]
 80042bc:	f7fc f944 	bl	8000548 <__aeabi_f2d>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80042c8:	494c      	ldr	r1, [pc, #304]	; (80043fc <Start_bme280+0x35c>)
 80042ca:	f012 f83d 	bl	8016348 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 80042ce:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80042d2:	f107 0308 	add.w	r3, r7, #8
 80042d6:	4611      	mov	r1, r2
 80042d8:	4618      	mov	r0, r3
 80042da:	f012 f898 	bl	801640e <strcat>
	  		strcat(str_t_h_and_p, " C\n\r");
 80042de:	f107 0308 	add.w	r3, r7, #8
 80042e2:	4618      	mov	r0, r3
 80042e4:	f7fb ff74 	bl	80001d0 <strlen>
 80042e8:	4603      	mov	r3, r0
 80042ea:	461a      	mov	r2, r3
 80042ec:	f107 0308 	add.w	r3, r7, #8
 80042f0:	4413      	add	r3, r2
 80042f2:	4a43      	ldr	r2, [pc, #268]	; (8004400 <Start_bme280+0x360>)
 80042f4:	6810      	ldr	r0, [r2, #0]
 80042f6:	6018      	str	r0, [r3, #0]
 80042f8:	7912      	ldrb	r2, [r2, #4]
 80042fa:	711a      	strb	r2, [r3, #4]

	  		// Write PRERASURE
	  		memset(str_thp_buffer, 0, sizeof(str_thp_buffer));
 80042fc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004300:	220c      	movs	r2, #12
 8004302:	2100      	movs	r1, #0
 8004304:	4618      	mov	r0, r3
 8004306:	f011 fa89 	bl	801581c <memset>
	  		strcat(str_t_h_and_p, "P: ");
 800430a:	f107 0308 	add.w	r3, r7, #8
 800430e:	4618      	mov	r0, r3
 8004310:	f7fb ff5e 	bl	80001d0 <strlen>
 8004314:	4603      	mov	r3, r0
 8004316:	461a      	mov	r2, r3
 8004318:	f107 0308 	add.w	r3, r7, #8
 800431c:	4413      	add	r3, r2
 800431e:	4a3a      	ldr	r2, [pc, #232]	; (8004408 <Start_bme280+0x368>)
 8004320:	6810      	ldr	r0, [r2, #0]
 8004322:	6018      	str	r0, [r3, #0]
	  		sprintf(str_thp_buffer, "%f", BME280_preasure);
 8004324:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8004328:	6818      	ldr	r0, [r3, #0]
 800432a:	f7fc f90d 	bl	8000548 <__aeabi_f2d>
 800432e:	4602      	mov	r2, r0
 8004330:	460b      	mov	r3, r1
 8004332:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8004336:	4931      	ldr	r1, [pc, #196]	; (80043fc <Start_bme280+0x35c>)
 8004338:	f012 f806 	bl	8016348 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 800433c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004340:	f107 0308 	add.w	r3, r7, #8
 8004344:	4611      	mov	r1, r2
 8004346:	4618      	mov	r0, r3
 8004348:	f012 f861 	bl	801640e <strcat>
	  		strcat(str_t_h_and_p, " mm\n\r\0");
 800434c:	f107 0308 	add.w	r3, r7, #8
 8004350:	4618      	mov	r0, r3
 8004352:	f7fb ff3d 	bl	80001d0 <strlen>
 8004356:	4603      	mov	r3, r0
 8004358:	461a      	mov	r2, r3
 800435a:	f107 0308 	add.w	r3, r7, #8
 800435e:	4413      	add	r3, r2
 8004360:	4a2a      	ldr	r2, [pc, #168]	; (800440c <Start_bme280+0x36c>)
 8004362:	6810      	ldr	r0, [r2, #0]
 8004364:	6018      	str	r0, [r3, #0]
 8004366:	8892      	ldrh	r2, [r2, #4]
 8004368:	809a      	strh	r2, [r3, #4]

	  		strcat(msg.Buf, str_t_h_and_p);										//	Write main buffer with data in queue
 800436a:	f107 0208 	add.w	r2, r7, #8
 800436e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004372:	4611      	mov	r1, r2
 8004374:	4618      	mov	r0, r3
 8004376:	f012 f84a 	bl	801640e <strcat>

	  		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)
 800437a:	4b25      	ldr	r3, [pc, #148]	; (8004410 <Start_bme280+0x370>)
 800437c:	6818      	ldr	r0, [r3, #0]
 800437e:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8004382:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004386:	2200      	movs	r2, #0
 8004388:	f00c ff26 	bl	80111d8 <osMessageQueuePut>
 800438c:	e6ed      	b.n	800416a <Start_bme280+0xca>

	  }
	  else
	  {
		  strcat(str_t_h_and_p, "ERROR!!! BME280 didn't found\n\r");
 800438e:	f107 0308 	add.w	r3, r7, #8
 8004392:	4618      	mov	r0, r3
 8004394:	f7fb ff1c 	bl	80001d0 <strlen>
 8004398:	4603      	mov	r3, r0
 800439a:	461a      	mov	r2, r3
 800439c:	f107 0308 	add.w	r3, r7, #8
 80043a0:	4413      	add	r3, r2
 80043a2:	4a1c      	ldr	r2, [pc, #112]	; (8004414 <Start_bme280+0x374>)
 80043a4:	461d      	mov	r5, r3
 80043a6:	4614      	mov	r4, r2
 80043a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043aa:	6028      	str	r0, [r5, #0]
 80043ac:	6069      	str	r1, [r5, #4]
 80043ae:	60aa      	str	r2, [r5, #8]
 80043b0:	60eb      	str	r3, [r5, #12]
 80043b2:	cc07      	ldmia	r4!, {r0, r1, r2}
 80043b4:	6128      	str	r0, [r5, #16]
 80043b6:	6169      	str	r1, [r5, #20]
 80043b8:	61aa      	str	r2, [r5, #24]
 80043ba:	8823      	ldrh	r3, [r4, #0]
 80043bc:	78a2      	ldrb	r2, [r4, #2]
 80043be:	83ab      	strh	r3, [r5, #28]
 80043c0:	4613      	mov	r3, r2
 80043c2:	77ab      	strb	r3, [r5, #30]
		  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)
 80043c4:	4b12      	ldr	r3, [pc, #72]	; (8004410 <Start_bme280+0x370>)
 80043c6:	6818      	ldr	r0, [r3, #0]
 80043c8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80043cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043d0:	2200      	movs	r2, #0
 80043d2:	f00c ff01 	bl	80111d8 <osMessageQueuePut>
  {
 80043d6:	e6c8      	b.n	800416a <Start_bme280+0xca>
 80043d8:	200080bc 	.word	0x200080bc
 80043dc:	2000807c 	.word	0x2000807c
 80043e0:	080030f1 	.word	0x080030f1
 80043e4:	08003179 	.word	0x08003179
 80043e8:	08003161 	.word	0x08003161
 80043ec:	200091bc 	.word	0x200091bc
 80043f0:	200091c0 	.word	0x200091c0
 80043f4:	08018a64 	.word	0x08018a64
 80043f8:	08018a70 	.word	0x08018a70
 80043fc:	08018a74 	.word	0x08018a74
 8004400:	08018a78 	.word	0x08018a78
 8004404:	08018a80 	.word	0x08018a80
 8004408:	08018a84 	.word	0x08018a84
 800440c:	08018a88 	.word	0x08018a88
 8004410:	2000a3a4 	.word	0x2000a3a4
 8004414:	08018a90 	.word	0x08018a90

08004418 <Start_AM2302>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_AM2302 */
void Start_AM2302(void *argument)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 800441e:	af00      	add	r7, sp, #0
 8004420:	1d3b      	adds	r3, r7, #4
 8004422:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_AM2302 */
  /* Infinite loop */
	QUEUE_t msg;												// Make a queue
	memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 8004424:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004428:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800442c:	2100      	movs	r1, #0
 800442e:	4618      	mov	r0, r3
 8004430:	f011 f9f4 	bl	801581c <memset>

	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 8004434:	4b48      	ldr	r3, [pc, #288]	; (8004558 <Start_AM2302+0x140>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a47      	ldr	r2, [pc, #284]	; (8004558 <Start_AM2302+0x140>)
 800443a:	f043 0304 	orr.w	r3, r3, #4
 800443e:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 8004440:	4b45      	ldr	r3, [pc, #276]	; (8004558 <Start_AM2302+0x140>)
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	4a44      	ldr	r2, [pc, #272]	; (8004558 <Start_AM2302+0x140>)
 8004446:	f023 0302 	bic.w	r3, r3, #2
 800444a:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 800444c:	4b42      	ldr	r3, [pc, #264]	; (8004558 <Start_AM2302+0x140>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	4a41      	ldr	r2, [pc, #260]	; (8004558 <Start_AM2302+0x140>)
 8004452:	f043 0302 	orr.w	r3, r3, #2
 8004456:	6093      	str	r3, [r2, #8]
	GPIOC->ODR ^= 0x02; 							// set GPIOC pin 1 on high
 8004458:	4b3f      	ldr	r3, [pc, #252]	; (8004558 <Start_AM2302+0x140>)
 800445a:	695b      	ldr	r3, [r3, #20]
 800445c:	4a3e      	ldr	r2, [pc, #248]	; (8004558 <Start_AM2302+0x140>)
 800445e:	f083 0302 	eor.w	r3, r3, #2
 8004462:	6153      	str	r3, [r2, #20]
	osDelay(2000);									// First init must be 2 seconds delay
 8004464:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004468:	f00c fce4 	bl	8010e34 <osDelay>

  for(;;)
  {
	  osDelay(3000);			// Measure every 3 seconds
 800446c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004470:	f00c fce0 	bl	8010e34 <osDelay>
	   * __                ________________________
	   * 	 \			    /				         \
	   * 	  \____________/			              \_
	   */

	  	bool get_data_status = false;
 8004474:	2300      	movs	r3, #0
 8004476:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  	int j = 0;   							// Counter bytes
 800447a:	2300      	movs	r3, #0
 800447c:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
	  	int i = 0;								// Counter bits
 8004480:	2300      	movs	r3, #0
 8004482:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
	  	uint8_t data[4] = {0};					// Buffer for incoming data from sensor
 8004486:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800448a:	2200      	movs	r2, #0
 800448c:	601a      	str	r2, [r3, #0]
	  	float temper, hum;						// Buffer variables

	  	// Init GPIO like output
	  	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 800448e:	4b32      	ldr	r3, [pc, #200]	; (8004558 <Start_AM2302+0x140>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a31      	ldr	r2, [pc, #196]	; (8004558 <Start_AM2302+0x140>)
 8004494:	f043 0304 	orr.w	r3, r3, #4
 8004498:	6013      	str	r3, [r2, #0]
	  	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 800449a:	4b2f      	ldr	r3, [pc, #188]	; (8004558 <Start_AM2302+0x140>)
 800449c:	685b      	ldr	r3, [r3, #4]
 800449e:	4a2e      	ldr	r2, [pc, #184]	; (8004558 <Start_AM2302+0x140>)
 80044a0:	f023 0302 	bic.w	r3, r3, #2
 80044a4:	6053      	str	r3, [r2, #4]
	  	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 80044a6:	4b2c      	ldr	r3, [pc, #176]	; (8004558 <Start_AM2302+0x140>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	4a2b      	ldr	r2, [pc, #172]	; (8004558 <Start_AM2302+0x140>)
 80044ac:	f043 0302 	orr.w	r3, r3, #2
 80044b0:	6093      	str	r3, [r2, #8]

	  	GPIOC->ODR &= ~0x02;		// Low level
 80044b2:	4b29      	ldr	r3, [pc, #164]	; (8004558 <Start_AM2302+0x140>)
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	4a28      	ldr	r2, [pc, #160]	; (8004558 <Start_AM2302+0x140>)
 80044b8:	f023 0302 	bic.w	r3, r3, #2
 80044bc:	6153      	str	r3, [r2, #20]
	  	osDelay(18);
 80044be:	2012      	movs	r0, #18
 80044c0:	f00c fcb8 	bl	8010e34 <osDelay>
	  	GPIOC->ODR ^= 0x02;			// High level
 80044c4:	4b24      	ldr	r3, [pc, #144]	; (8004558 <Start_AM2302+0x140>)
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	4a23      	ldr	r2, [pc, #140]	; (8004558 <Start_AM2302+0x140>)
 80044ca:	f083 0302 	eor.w	r3, r3, #2
 80044ce:	6153      	str	r3, [r2, #20]
	  	delay_us(40);
 80044d0:	2028      	movs	r0, #40	; 0x28
 80044d2:	f7fe fe8d 	bl	80031f0 <delay_us>

	  	// Make input pin C1
	  	GPIOC->MODER &= ~0x04;  	// Set Pin C1 Input   (MODER GPIOC_1 Must be 00)
 80044d6:	4b20      	ldr	r3, [pc, #128]	; (8004558 <Start_AM2302+0x140>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a1f      	ldr	r2, [pc, #124]	; (8004558 <Start_AM2302+0x140>)
 80044dc:	f023 0304 	bic.w	r3, r3, #4
 80044e0:	6013      	str	r3, [r2, #0]
	  	GPIOC->PUPDR &= ~0x04;		// Set Pin C1 Pull up
 80044e2:	4b1d      	ldr	r3, [pc, #116]	; (8004558 <Start_AM2302+0x140>)
 80044e4:	68db      	ldr	r3, [r3, #12]
 80044e6:	4a1c      	ldr	r2, [pc, #112]	; (8004558 <Start_AM2302+0x140>)
 80044e8:	f023 0304 	bic.w	r3, r3, #4
 80044ec:	60d3      	str	r3, [r2, #12]

	  	if(GPIOC->IDR & GPIO_IDR_ID1)		// Sensor must pull down
 80044ee:	4b1a      	ldr	r3, [pc, #104]	; (8004558 <Start_AM2302+0x140>)
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f003 0302 	and.w	r3, r3, #2
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <Start_AM2302+0xea>
	  	{
	  		get_data_status = false; 					// Error. Sensor not response
 80044fa:	2300      	movs	r3, #0
 80044fc:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 8004500:	e002      	b.n	8004508 <Start_AM2302+0xf0>
	  	}
	  	else
	  	{
	  		get_data_status = true;
 8004502:	2301      	movs	r3, #1
 8004504:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  	}

	  	delay_us(80);
 8004508:	2050      	movs	r0, #80	; 0x50
 800450a:	f7fe fe71 	bl	80031f0 <delay_us>

	  	if(!(GPIOC->IDR & GPIO_IDR_ID1))  	// Sensor must pull up
 800450e:	4b12      	ldr	r3, [pc, #72]	; (8004558 <Start_AM2302+0x140>)
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d103      	bne.n	8004522 <Start_AM2302+0x10a>
	  	{
	  		get_data_status = false; 					// Error. Sensor not response
 800451a:	2300      	movs	r3, #0
 800451c:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
 8004520:	e002      	b.n	8004528 <Start_AM2302+0x110>
	  	}
	  	else
	  	{
	  		get_data_status = true;
 8004522:	2301      	movs	r3, #1
 8004524:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  	}
	  	delay_us(80);
 8004528:	2050      	movs	r0, #80	; 0x50
 800452a:	f7fe fe61 	bl	80031f0 <delay_us>

	  	if(get_data_status == true)
 800452e:	f897 345f 	ldrb.w	r3, [r7, #1119]	; 0x45f
 8004532:	2b00      	cmp	r3, #0
 8004534:	d09a      	beq.n	800446c <Start_AM2302+0x54>
	  	{
	  		for(j = 0; j <5; j++)							// Reading 5 bytes
 8004536:	2300      	movs	r3, #0
 8004538:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 800453c:	e050      	b.n	80045e0 <Start_AM2302+0x1c8>
	  		{
	  			data[4-j] = 0;
 800453e:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8004542:	f1c3 0304 	rsb	r3, r3, #4
 8004546:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800454a:	2100      	movs	r1, #0
 800454c:	54d1      	strb	r1, [r2, r3]
	  			for(i = 0; i < 8; i++)						// Reading 8 bits
 800454e:	2300      	movs	r3, #0
 8004550:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 8004554:	e038      	b.n	80045c8 <Start_AM2302+0x1b0>
 8004556:	bf00      	nop
 8004558:	40020800 	.word	0x40020800
	  			{
	  				while(!(GPIOC->IDR & GPIO_IDR_ID1));	// While signal is "0"
 800455c:	bf00      	nop
 800455e:	4b95      	ldr	r3, [pc, #596]	; (80047b4 <Start_AM2302+0x39c>)
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f9      	beq.n	800455e <Start_AM2302+0x146>
	  				delay_us(30);
 800456a:	201e      	movs	r0, #30
 800456c:	f7fe fe40 	bl	80031f0 <delay_us>
	  				if(GPIOC->IDR & GPIO_IDR_ID1)			// If signal is high when wrute "1" in buffer (data[])
 8004570:	4b90      	ldr	r3, [pc, #576]	; (80047b4 <Start_AM2302+0x39c>)
 8004572:	691b      	ldr	r3, [r3, #16]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d019      	beq.n	80045b0 <Start_AM2302+0x198>
	  				{
	  					data[4-j] |= (1 << (7 - i));        // Shift received bite
 800457c:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 8004580:	f1c3 0304 	rsb	r3, r3, #4
 8004584:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004588:	5cd3      	ldrb	r3, [r2, r3]
 800458a:	b25a      	sxtb	r2, r3
 800458c:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 8004590:	f1c3 0307 	rsb	r3, r3, #7
 8004594:	2101      	movs	r1, #1
 8004596:	fa01 f303 	lsl.w	r3, r1, r3
 800459a:	b25b      	sxtb	r3, r3
 800459c:	4313      	orrs	r3, r2
 800459e:	b25a      	sxtb	r2, r3
 80045a0:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80045a4:	f1c3 0304 	rsb	r3, r3, #4
 80045a8:	b2d1      	uxtb	r1, r2
 80045aa:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80045ae:	54d1      	strb	r1, [r2, r3]
	  				}
	  				while(GPIOC->IDR & GPIO_IDR_ID1);		// Wait end of "1" signal
 80045b0:	bf00      	nop
 80045b2:	4b80      	ldr	r3, [pc, #512]	; (80047b4 <Start_AM2302+0x39c>)
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1f9      	bne.n	80045b2 <Start_AM2302+0x19a>
	  			for(i = 0; i < 8; i++)						// Reading 8 bits
 80045be:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80045c2:	3301      	adds	r3, #1
 80045c4:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 80045c8:	f8d7 3454 	ldr.w	r3, [r7, #1108]	; 0x454
 80045cc:	2b07      	cmp	r3, #7
 80045ce:	ddc5      	ble.n	800455c <Start_AM2302+0x144>
	  			}
	  			get_data_status = true;										// Data was been written okay
 80045d0:	2301      	movs	r3, #1
 80045d2:	f887 345f 	strb.w	r3, [r7, #1119]	; 0x45f
	  		for(j = 0; j <5; j++)							// Reading 5 bytes
 80045d6:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80045da:	3301      	adds	r3, #1
 80045dc:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 80045e0:	f8d7 3458 	ldr.w	r3, [r7, #1112]	; 0x458
 80045e4:	2b04      	cmp	r3, #4
 80045e6:	ddaa      	ble.n	800453e <Start_AM2302+0x126>
	  		}

	  		temper = (float)((*(uint16_t*)(data+1)) & 0x3FFF) /10;
 80045e8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80045ec:	3301      	adds	r3, #1
 80045ee:	881b      	ldrh	r3, [r3, #0]
 80045f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80045f4:	ee07 3a90 	vmov	s15, r3
 80045f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80045fc:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004600:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004604:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 8004608:	edc3 7a00 	vstr	s15, [r3]
	  		if((*(uint16_t*)(data+1)) & 0x8000) temper  *= -1.0;
 800460c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004610:	3301      	adds	r3, #1
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	b21b      	sxth	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	da13      	bge.n	8004642 <Start_AM2302+0x22a>
 800461a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800461e:	6818      	ldr	r0, [r3, #0]
 8004620:	f7fb ff92 	bl	8000548 <__aeabi_f2d>
 8004624:	4602      	mov	r2, r0
 8004626:	460b      	mov	r3, r1
 8004628:	4610      	mov	r0, r2
 800462a:	4619      	mov	r1, r3
 800462c:	f7fc fabc 	bl	8000ba8 <__aeabi_d2f>
 8004630:	4603      	mov	r3, r0
 8004632:	ee07 3a90 	vmov	s15, r3
 8004636:	eef1 7a67 	vneg.f32	s15, s15
 800463a:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 800463e:	edc3 7a00 	vstr	s15, [r3]
	  		hum = (float)(*(int16_t*)(data+3)) / 10;
 8004642:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004646:	3303      	adds	r3, #3
 8004648:	f9b3 3000 	ldrsh.w	r3, [r3]
 800464c:	ee07 3a90 	vmov	s15, r3
 8004650:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004654:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004658:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800465c:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8004660:	edc3 7a00 	vstr	s15, [r3]

	  		// Write data in queue
	  		char str_t_and_h[50] = {0};
 8004664:	f107 0308 	add.w	r3, r7, #8
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	3304      	adds	r3, #4
 800466e:	222e      	movs	r2, #46	; 0x2e
 8004670:	2100      	movs	r1, #0
 8004672:	4618      	mov	r0, r3
 8004674:	f011 f8d2 	bl	801581c <memset>
	  		char str_t_and_h_buffer[12] = {0};
 8004678:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	3304      	adds	r3, #4
 8004682:	2200      	movs	r2, #0
 8004684:	601a      	str	r2, [r3, #0]
 8004686:	605a      	str	r2, [r3, #4]

	  		memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
 8004688:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800468c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004690:	2100      	movs	r1, #0
 8004692:	4618      	mov	r0, r3
 8004694:	f011 f8c2 	bl	801581c <memset>

	  		// Write T and  H P in str_t_h buffer
	  		// Write TEMPERATURE
	  		strcat(str_t_and_h, "AM2302: \n\r");
 8004698:	f107 0308 	add.w	r3, r7, #8
 800469c:	4618      	mov	r0, r3
 800469e:	f7fb fd97 	bl	80001d0 <strlen>
 80046a2:	4603      	mov	r3, r0
 80046a4:	461a      	mov	r2, r3
 80046a6:	f107 0308 	add.w	r3, r7, #8
 80046aa:	4413      	add	r3, r2
 80046ac:	4942      	ldr	r1, [pc, #264]	; (80047b8 <Start_AM2302+0x3a0>)
 80046ae:	461a      	mov	r2, r3
 80046b0:	460b      	mov	r3, r1
 80046b2:	cb03      	ldmia	r3!, {r0, r1}
 80046b4:	6010      	str	r0, [r2, #0]
 80046b6:	6051      	str	r1, [r2, #4]
 80046b8:	8819      	ldrh	r1, [r3, #0]
 80046ba:	789b      	ldrb	r3, [r3, #2]
 80046bc:	8111      	strh	r1, [r2, #8]
 80046be:	7293      	strb	r3, [r2, #10]
	  		strcat(str_t_and_h, "T: ");
 80046c0:	f107 0308 	add.w	r3, r7, #8
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fb fd83 	bl	80001d0 <strlen>
 80046ca:	4603      	mov	r3, r0
 80046cc:	461a      	mov	r2, r3
 80046ce:	f107 0308 	add.w	r3, r7, #8
 80046d2:	4413      	add	r3, r2
 80046d4:	4a39      	ldr	r2, [pc, #228]	; (80047bc <Start_AM2302+0x3a4>)
 80046d6:	6810      	ldr	r0, [r2, #0]
 80046d8:	6018      	str	r0, [r3, #0]
	  		sprintf(str_t_and_h_buffer, "%f", temper);
 80046da:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80046de:	6818      	ldr	r0, [r3, #0]
 80046e0:	f7fb ff32 	bl	8000548 <__aeabi_f2d>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 80046ec:	4934      	ldr	r1, [pc, #208]	; (80047c0 <Start_AM2302+0x3a8>)
 80046ee:	f011 fe2b 	bl	8016348 <siprintf>
	  		strcat(str_t_and_h, str_t_and_h_buffer);
 80046f2:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80046f6:	f107 0308 	add.w	r3, r7, #8
 80046fa:	4611      	mov	r1, r2
 80046fc:	4618      	mov	r0, r3
 80046fe:	f011 fe86 	bl	801640e <strcat>
	  		strcat(str_t_and_h, " C\n\r");
 8004702:	f107 0308 	add.w	r3, r7, #8
 8004706:	4618      	mov	r0, r3
 8004708:	f7fb fd62 	bl	80001d0 <strlen>
 800470c:	4603      	mov	r3, r0
 800470e:	461a      	mov	r2, r3
 8004710:	f107 0308 	add.w	r3, r7, #8
 8004714:	4413      	add	r3, r2
 8004716:	4a2b      	ldr	r2, [pc, #172]	; (80047c4 <Start_AM2302+0x3ac>)
 8004718:	6810      	ldr	r0, [r2, #0]
 800471a:	6018      	str	r0, [r3, #0]
 800471c:	7912      	ldrb	r2, [r2, #4]
 800471e:	711a      	strb	r2, [r3, #4]

	  		// Write HUMIDYTY
	  		memset(str_t_and_h_buffer, 0, sizeof(str_t_and_h_buffer));
 8004720:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004724:	220c      	movs	r2, #12
 8004726:	2100      	movs	r1, #0
 8004728:	4618      	mov	r0, r3
 800472a:	f011 f877 	bl	801581c <memset>

	  		strcat(str_t_and_h, "H: ");
 800472e:	f107 0308 	add.w	r3, r7, #8
 8004732:	4618      	mov	r0, r3
 8004734:	f7fb fd4c 	bl	80001d0 <strlen>
 8004738:	4603      	mov	r3, r0
 800473a:	461a      	mov	r2, r3
 800473c:	f107 0308 	add.w	r3, r7, #8
 8004740:	4413      	add	r3, r2
 8004742:	4a21      	ldr	r2, [pc, #132]	; (80047c8 <Start_AM2302+0x3b0>)
 8004744:	6810      	ldr	r0, [r2, #0]
 8004746:	6018      	str	r0, [r3, #0]
	  		sprintf(str_t_and_h_buffer, "%f", hum);
 8004748:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 800474c:	6818      	ldr	r0, [r3, #0]
 800474e:	f7fb fefb 	bl	8000548 <__aeabi_f2d>
 8004752:	4602      	mov	r2, r0
 8004754:	460b      	mov	r3, r1
 8004756:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800475a:	4919      	ldr	r1, [pc, #100]	; (80047c0 <Start_AM2302+0x3a8>)
 800475c:	f011 fdf4 	bl	8016348 <siprintf>
	  		strcat(str_t_and_h, str_t_and_h_buffer);
 8004760:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8004764:	f107 0308 	add.w	r3, r7, #8
 8004768:	4611      	mov	r1, r2
 800476a:	4618      	mov	r0, r3
 800476c:	f011 fe4f 	bl	801640e <strcat>
	  		strcat(str_t_and_h, " C\n\r\0");
 8004770:	f107 0308 	add.w	r3, r7, #8
 8004774:	4618      	mov	r0, r3
 8004776:	f7fb fd2b 	bl	80001d0 <strlen>
 800477a:	4603      	mov	r3, r0
 800477c:	461a      	mov	r2, r3
 800477e:	f107 0308 	add.w	r3, r7, #8
 8004782:	4413      	add	r3, r2
 8004784:	4a11      	ldr	r2, [pc, #68]	; (80047cc <Start_AM2302+0x3b4>)
 8004786:	6810      	ldr	r0, [r2, #0]
 8004788:	6018      	str	r0, [r3, #0]
 800478a:	7912      	ldrb	r2, [r2, #4]
 800478c:	711a      	strb	r2, [r3, #4]

	  		strcat(msg.Buf, str_t_and_h);										//	Write main buffer with data in queue
 800478e:	f107 0208 	add.w	r2, r7, #8
 8004792:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004796:	4611      	mov	r1, r2
 8004798:	4618      	mov	r0, r3
 800479a:	f011 fe38 	bl	801640e <strcat>

	  		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)
 800479e:	4b0c      	ldr	r3, [pc, #48]	; (80047d0 <Start_AM2302+0x3b8>)
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80047a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80047aa:	2200      	movs	r2, #0
 80047ac:	f00c fd14 	bl	80111d8 <osMessageQueuePut>
  {
 80047b0:	e65c      	b.n	800446c <Start_AM2302+0x54>
 80047b2:	bf00      	nop
 80047b4:	40020800 	.word	0x40020800
 80047b8:	08018ab0 	.word	0x08018ab0
 80047bc:	08018a70 	.word	0x08018a70
 80047c0:	08018a74 	.word	0x08018a74
 80047c4:	08018a78 	.word	0x08018a78
 80047c8:	08018a80 	.word	0x08018a80
 80047cc:	08018abc 	.word	0x08018abc
 80047d0:	2000a3a4 	.word	0x2000a3a4

080047d4 <Start_SD_CARD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_SD_CARD */
void Start_SD_CARD(void *argument)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_SD_CARD */
  /* Infinite loop */

	Mount_SD("/");
 80047dc:	4823      	ldr	r0, [pc, #140]	; (800486c <Start_SD_CARD+0x98>)
 80047de:	f7fd fdd3 	bl	8002388 <Mount_SD>

	Create_File("test_data_1.txt");
 80047e2:	4823      	ldr	r0, [pc, #140]	; (8004870 <Start_SD_CARD+0x9c>)
 80047e4:	f7fd fe16 	bl	8002414 <Create_File>
	Update_File("test_data_1.txt","\n\rStart recording\r\n");	// Add data to the end of file
 80047e8:	4922      	ldr	r1, [pc, #136]	; (8004874 <Start_SD_CARD+0xa0>)
 80047ea:	4821      	ldr	r0, [pc, #132]	; (8004870 <Start_SD_CARD+0x9c>)
 80047ec:	f7fd fea8 	bl	8002540 <Update_File>

	// Create folders
	Create_Dir("test_folder_1");
 80047f0:	4821      	ldr	r0, [pc, #132]	; (8004878 <Start_SD_CARD+0xa4>)
 80047f2:	f7fd ff65 	bl	80026c0 <Create_Dir>
	Create_Dir("test_folder_2");
 80047f6:	4821      	ldr	r0, [pc, #132]	; (800487c <Start_SD_CARD+0xa8>)
 80047f8:	f7fd ff62 	bl	80026c0 <Create_Dir>
	Create_Dir("test_folder_3");
 80047fc:	4820      	ldr	r0, [pc, #128]	; (8004880 <Start_SD_CARD+0xac>)
 80047fe:	f7fd ff5f 	bl	80026c0 <Create_Dir>

	Unmount_SD("/");
 8004802:	481a      	ldr	r0, [pc, #104]	; (800486c <Start_SD_CARD+0x98>)
 8004804:	f7fd fde4 	bl	80023d0 <Unmount_SD>
	static int i = 0;											// Test data for write

  for(;;)
  {
	  // Log data ewery one second
	  osDelay(1000);
 8004808:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800480c:	f00c fb12 	bl	8010e34 <osDelay>
	  HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);			// LED ON
 8004810:	2201      	movs	r2, #1
 8004812:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004816:	481b      	ldr	r0, [pc, #108]	; (8004884 <Start_SD_CARD+0xb0>)
 8004818:	f000 ff0e 	bl	8005638 <HAL_GPIO_WritePin>

	  Mount_SD("/");
 800481c:	4813      	ldr	r0, [pc, #76]	; (800486c <Start_SD_CARD+0x98>)
 800481e:	f7fd fdb3 	bl	8002388 <Mount_SD>

	  char data[10] = {0};
 8004822:	2300      	movs	r3, #0
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	f107 0310 	add.w	r3, r7, #16
 800482a:	2200      	movs	r2, #0
 800482c:	601a      	str	r2, [r3, #0]
 800482e:	809a      	strh	r2, [r3, #4]
	  sprintf(data, "%d\n", i);
 8004830:	4b15      	ldr	r3, [pc, #84]	; (8004888 <Start_SD_CARD+0xb4>)
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	f107 030c 	add.w	r3, r7, #12
 8004838:	4914      	ldr	r1, [pc, #80]	; (800488c <Start_SD_CARD+0xb8>)
 800483a:	4618      	mov	r0, r3
 800483c:	f011 fd84 	bl	8016348 <siprintf>
	  Update_File("test_data_1.txt", data);						// Add data to the end of file
 8004840:	f107 030c 	add.w	r3, r7, #12
 8004844:	4619      	mov	r1, r3
 8004846:	480a      	ldr	r0, [pc, #40]	; (8004870 <Start_SD_CARD+0x9c>)
 8004848:	f7fd fe7a 	bl	8002540 <Update_File>
	  i++;
 800484c:	4b0e      	ldr	r3, [pc, #56]	; (8004888 <Start_SD_CARD+0xb4>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3301      	adds	r3, #1
 8004852:	4a0d      	ldr	r2, [pc, #52]	; (8004888 <Start_SD_CARD+0xb4>)
 8004854:	6013      	str	r3, [r2, #0]

	  Unmount_SD("/");
 8004856:	4805      	ldr	r0, [pc, #20]	; (800486c <Start_SD_CARD+0x98>)
 8004858:	f7fd fdba 	bl	80023d0 <Unmount_SD>

	  HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_RESET);		// LED OFF
 800485c:	2200      	movs	r2, #0
 800485e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004862:	4808      	ldr	r0, [pc, #32]	; (8004884 <Start_SD_CARD+0xb0>)
 8004864:	f000 fee8 	bl	8005638 <HAL_GPIO_WritePin>
  {
 8004868:	e7ce      	b.n	8004808 <Start_SD_CARD+0x34>
 800486a:	bf00      	nop
 800486c:	08018ac4 	.word	0x08018ac4
 8004870:	08018ac8 	.word	0x08018ac8
 8004874:	08018ad8 	.word	0x08018ad8
 8004878:	08018aec 	.word	0x08018aec
 800487c:	08018afc 	.word	0x08018afc
 8004880:	08018b0c 	.word	0x08018b0c
 8004884:	40020c00 	.word	0x40020c00
 8004888:	20000780 	.word	0x20000780
 800488c:	08018b1c 	.word	0x08018b1c

08004890 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	// Handler for generate us dalay 			( FOR AM2302 )
	if(htim->Instance == TIM10) 				//check if the interrupt comes from TIM10
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a25      	ldr	r2, [pc, #148]	; (8004934 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d10c      	bne.n	80048bc <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		if(tim_val > 0)
 80048a2:	4b25      	ldr	r3, [pc, #148]	; (8004938 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d005      	beq.n	80048b6 <HAL_TIM_PeriodElapsedCallback+0x26>
		{
			tim_val = tim_val - 1;
 80048aa:	4b23      	ldr	r3, [pc, #140]	; (8004938 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	3b01      	subs	r3, #1
 80048b0:	4a21      	ldr	r2, [pc, #132]	; (8004938 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80048b2:	6013      	str	r3, [r2, #0]
 80048b4:	e002      	b.n	80048bc <HAL_TIM_PeriodElapsedCallback+0x2c>
		}
		else									// For avoid overflow variable
		{
			tim_val = 0;
 80048b6:	4b20      	ldr	r3, [pc, #128]	; (8004938 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	601a      	str	r2, [r3, #0]
		}
	}

	// Handler for SD
	if(htim->Instance == TIM1) 					//check if the interrupt comes from TIM1 (Blink LED)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a1e      	ldr	r2, [pc, #120]	; (800493c <HAL_TIM_PeriodElapsedCallback+0xac>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d104      	bne.n	80048d0 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		HAL_GPIO_TogglePin(GPIOD, LD4_Pin);		// Green LED
 80048c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80048ca:	481d      	ldr	r0, [pc, #116]	; (8004940 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80048cc:	f000 fecd 	bl	800566a <HAL_GPIO_TogglePin>
	}

	// Handler for count how many time works any tasks
	if(htim->Instance == TIM3)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a1b      	ldr	r2, [pc, #108]	; (8004944 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d104      	bne.n	80048e4 <HAL_TIM_PeriodElapsedCallback+0x54>
	{
		ulHighFreqebcyTimerTicks++;					// Update time tasks counter
 80048da:	4b1b      	ldr	r3, [pc, #108]	; (8004948 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3301      	adds	r3, #1
 80048e0:	4a19      	ldr	r2, [pc, #100]	; (8004948 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80048e2:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a18      	ldr	r2, [pc, #96]	; (800494c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d101      	bne.n	80048f2 <HAL_TIM_PeriodElapsedCallback+0x62>
    HAL_IncTick();
 80048ee:	f000 fbe1 	bl	80050b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

	if (htim->Instance == TIM14)		// For SD works (use in fatfs_sd.c file)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a15      	ldr	r2, [pc, #84]	; (800494c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d117      	bne.n	800492c <HAL_TIM_PeriodElapsedCallback+0x9c>
	{
		if(Timer1 > 0)
 80048fc:	4b14      	ldr	r3, [pc, #80]	; (8004950 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d006      	beq.n	8004914 <HAL_TIM_PeriodElapsedCallback+0x84>
		    Timer1--;
 8004906:	4b12      	ldr	r3, [pc, #72]	; (8004950 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	b2db      	uxtb	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b2da      	uxtb	r2, r3
 8004910:	4b0f      	ldr	r3, [pc, #60]	; (8004950 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8004912:	701a      	strb	r2, [r3, #0]

		  if(Timer2 > 0)
 8004914:	4b0f      	ldr	r3, [pc, #60]	; (8004954 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d006      	beq.n	800492c <HAL_TIM_PeriodElapsedCallback+0x9c>
		    Timer2--;
 800491e:	4b0d      	ldr	r3, [pc, #52]	; (8004954 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	b2db      	uxtb	r3, r3
 8004924:	3b01      	subs	r3, #1
 8004926:	b2da      	uxtb	r2, r3
 8004928:	4b0a      	ldr	r3, [pc, #40]	; (8004954 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800492a:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END Callback 1 */
}
 800492c:	bf00      	nop
 800492e:	3708      	adds	r7, #8
 8004930:	46bd      	mov	sp, r7
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40014400 	.word	0x40014400
 8004938:	2000077c 	.word	0x2000077c
 800493c:	40010000 	.word	0x40010000
 8004940:	40020c00 	.word	0x40020c00
 8004944:	40000400 	.word	0x40000400
 8004948:	2000efdc 	.word	0x2000efdc
 800494c:	40002000 	.word	0x40002000
 8004950:	2001014c 	.word	0x2001014c
 8004954:	2000efe4 	.word	0x2000efe4

08004958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004958:	b480      	push	{r7}
 800495a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800495c:	b672      	cpsid	i
}
 800495e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004960:	e7fe      	b.n	8004960 <Error_Handler+0x8>
	...

08004964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800496a:	2300      	movs	r3, #0
 800496c:	607b      	str	r3, [r7, #4]
 800496e:	4b12      	ldr	r3, [pc, #72]	; (80049b8 <HAL_MspInit+0x54>)
 8004970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004972:	4a11      	ldr	r2, [pc, #68]	; (80049b8 <HAL_MspInit+0x54>)
 8004974:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004978:	6453      	str	r3, [r2, #68]	; 0x44
 800497a:	4b0f      	ldr	r3, [pc, #60]	; (80049b8 <HAL_MspInit+0x54>)
 800497c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004982:	607b      	str	r3, [r7, #4]
 8004984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004986:	2300      	movs	r3, #0
 8004988:	603b      	str	r3, [r7, #0]
 800498a:	4b0b      	ldr	r3, [pc, #44]	; (80049b8 <HAL_MspInit+0x54>)
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	4a0a      	ldr	r2, [pc, #40]	; (80049b8 <HAL_MspInit+0x54>)
 8004990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004994:	6413      	str	r3, [r2, #64]	; 0x40
 8004996:	4b08      	ldr	r3, [pc, #32]	; (80049b8 <HAL_MspInit+0x54>)
 8004998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800499e:	603b      	str	r3, [r7, #0]
 80049a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80049a2:	2200      	movs	r2, #0
 80049a4:	210f      	movs	r1, #15
 80049a6:	f06f 0001 	mvn.w	r0, #1
 80049aa:	f000 fc7f 	bl	80052ac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049ae:	bf00      	nop
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	40023800 	.word	0x40023800

080049bc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b08a      	sub	sp, #40	; 0x28
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c4:	f107 0314 	add.w	r3, r7, #20
 80049c8:	2200      	movs	r2, #0
 80049ca:	601a      	str	r2, [r3, #0]
 80049cc:	605a      	str	r2, [r3, #4]
 80049ce:	609a      	str	r2, [r3, #8]
 80049d0:	60da      	str	r2, [r3, #12]
 80049d2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a29      	ldr	r2, [pc, #164]	; (8004a80 <HAL_I2C_MspInit+0xc4>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d14b      	bne.n	8004a76 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80049de:	2300      	movs	r3, #0
 80049e0:	613b      	str	r3, [r7, #16]
 80049e2:	4b28      	ldr	r3, [pc, #160]	; (8004a84 <HAL_I2C_MspInit+0xc8>)
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	4a27      	ldr	r2, [pc, #156]	; (8004a84 <HAL_I2C_MspInit+0xc8>)
 80049e8:	f043 0304 	orr.w	r3, r3, #4
 80049ec:	6313      	str	r3, [r2, #48]	; 0x30
 80049ee:	4b25      	ldr	r3, [pc, #148]	; (8004a84 <HAL_I2C_MspInit+0xc8>)
 80049f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f2:	f003 0304 	and.w	r3, r3, #4
 80049f6:	613b      	str	r3, [r7, #16]
 80049f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	4b21      	ldr	r3, [pc, #132]	; (8004a84 <HAL_I2C_MspInit+0xc8>)
 8004a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a02:	4a20      	ldr	r2, [pc, #128]	; (8004a84 <HAL_I2C_MspInit+0xc8>)
 8004a04:	f043 0301 	orr.w	r3, r3, #1
 8004a08:	6313      	str	r3, [r2, #48]	; 0x30
 8004a0a:	4b1e      	ldr	r3, [pc, #120]	; (8004a84 <HAL_I2C_MspInit+0xc8>)
 8004a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	60fb      	str	r3, [r7, #12]
 8004a14:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a1c:	2312      	movs	r3, #18
 8004a1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a20:	2300      	movs	r3, #0
 8004a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a24:	2303      	movs	r3, #3
 8004a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004a28:	2304      	movs	r3, #4
 8004a2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a2c:	f107 0314 	add.w	r3, r7, #20
 8004a30:	4619      	mov	r1, r3
 8004a32:	4815      	ldr	r0, [pc, #84]	; (8004a88 <HAL_I2C_MspInit+0xcc>)
 8004a34:	f000 fc64 	bl	8005300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004a38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a3e:	2312      	movs	r3, #18
 8004a40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a42:	2300      	movs	r3, #0
 8004a44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a46:	2303      	movs	r3, #3
 8004a48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004a4a:	2304      	movs	r3, #4
 8004a4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a4e:	f107 0314 	add.w	r3, r7, #20
 8004a52:	4619      	mov	r1, r3
 8004a54:	480d      	ldr	r0, [pc, #52]	; (8004a8c <HAL_I2C_MspInit+0xd0>)
 8004a56:	f000 fc53 	bl	8005300 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60bb      	str	r3, [r7, #8]
 8004a5e:	4b09      	ldr	r3, [pc, #36]	; (8004a84 <HAL_I2C_MspInit+0xc8>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	4a08      	ldr	r2, [pc, #32]	; (8004a84 <HAL_I2C_MspInit+0xc8>)
 8004a64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a68:	6413      	str	r3, [r2, #64]	; 0x40
 8004a6a:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <HAL_I2C_MspInit+0xc8>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a72:	60bb      	str	r3, [r7, #8]
 8004a74:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004a76:	bf00      	nop
 8004a78:	3728      	adds	r7, #40	; 0x28
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	40005c00 	.word	0x40005c00
 8004a84:	40023800 	.word	0x40023800
 8004a88:	40020800 	.word	0x40020800
 8004a8c:	40020000 	.word	0x40020000

08004a90 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b086      	sub	sp, #24
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a98:	f107 0308 	add.w	r3, r7, #8
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	605a      	str	r2, [r3, #4]
 8004aa2:	609a      	str	r2, [r3, #8]
 8004aa4:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a0c      	ldr	r2, [pc, #48]	; (8004adc <HAL_RTC_MspInit+0x4c>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d111      	bne.n	8004ad4 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004ab4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ab8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004aba:	f107 0308 	add.w	r3, r7, #8
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f003 fea6 	bl	8008810 <HAL_RCCEx_PeriphCLKConfig>
 8004ac4:	4603      	mov	r3, r0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d001      	beq.n	8004ace <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004aca:	f7ff ff45 	bl	8004958 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004ace:	4b04      	ldr	r3, [pc, #16]	; (8004ae0 <HAL_RTC_MspInit+0x50>)
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004ad4:	bf00      	nop
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40002800 	.word	0x40002800
 8004ae0:	42470e3c 	.word	0x42470e3c

08004ae4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b08c      	sub	sp, #48	; 0x30
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aec:	f107 031c 	add.w	r3, r7, #28
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]
 8004af4:	605a      	str	r2, [r3, #4]
 8004af6:	609a      	str	r2, [r3, #8]
 8004af8:	60da      	str	r2, [r3, #12]
 8004afa:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a41      	ldr	r2, [pc, #260]	; (8004c08 <HAL_SPI_MspInit+0x124>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d12c      	bne.n	8004b60 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004b06:	2300      	movs	r3, #0
 8004b08:	61bb      	str	r3, [r7, #24]
 8004b0a:	4b40      	ldr	r3, [pc, #256]	; (8004c0c <HAL_SPI_MspInit+0x128>)
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0e:	4a3f      	ldr	r2, [pc, #252]	; (8004c0c <HAL_SPI_MspInit+0x128>)
 8004b10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004b14:	6453      	str	r3, [r2, #68]	; 0x44
 8004b16:	4b3d      	ldr	r3, [pc, #244]	; (8004c0c <HAL_SPI_MspInit+0x128>)
 8004b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b1e:	61bb      	str	r3, [r7, #24]
 8004b20:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b22:	2300      	movs	r3, #0
 8004b24:	617b      	str	r3, [r7, #20]
 8004b26:	4b39      	ldr	r3, [pc, #228]	; (8004c0c <HAL_SPI_MspInit+0x128>)
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	4a38      	ldr	r2, [pc, #224]	; (8004c0c <HAL_SPI_MspInit+0x128>)
 8004b2c:	f043 0301 	orr.w	r3, r3, #1
 8004b30:	6313      	str	r3, [r2, #48]	; 0x30
 8004b32:	4b36      	ldr	r3, [pc, #216]	; (8004c0c <HAL_SPI_MspInit+0x128>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	f003 0301 	and.w	r3, r3, #1
 8004b3a:	617b      	str	r3, [r7, #20]
 8004b3c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8004b3e:	23e0      	movs	r3, #224	; 0xe0
 8004b40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b42:	2302      	movs	r3, #2
 8004b44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b46:	2300      	movs	r3, #0
 8004b48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004b4e:	2305      	movs	r3, #5
 8004b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b52:	f107 031c 	add.w	r3, r7, #28
 8004b56:	4619      	mov	r1, r3
 8004b58:	482d      	ldr	r0, [pc, #180]	; (8004c10 <HAL_SPI_MspInit+0x12c>)
 8004b5a:	f000 fbd1 	bl	8005300 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004b5e:	e04f      	b.n	8004c00 <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a2b      	ldr	r2, [pc, #172]	; (8004c14 <HAL_SPI_MspInit+0x130>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d14a      	bne.n	8004c00 <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	613b      	str	r3, [r7, #16]
 8004b6e:	4b27      	ldr	r3, [pc, #156]	; (8004c0c <HAL_SPI_MspInit+0x128>)
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	4a26      	ldr	r2, [pc, #152]	; (8004c0c <HAL_SPI_MspInit+0x128>)
 8004b74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b78:	6413      	str	r3, [r2, #64]	; 0x40
 8004b7a:	4b24      	ldr	r3, [pc, #144]	; (8004c0c <HAL_SPI_MspInit+0x128>)
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b82:	613b      	str	r3, [r7, #16]
 8004b84:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b86:	2300      	movs	r3, #0
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	4b20      	ldr	r3, [pc, #128]	; (8004c0c <HAL_SPI_MspInit+0x128>)
 8004b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8e:	4a1f      	ldr	r2, [pc, #124]	; (8004c0c <HAL_SPI_MspInit+0x128>)
 8004b90:	f043 0304 	orr.w	r3, r3, #4
 8004b94:	6313      	str	r3, [r2, #48]	; 0x30
 8004b96:	4b1d      	ldr	r3, [pc, #116]	; (8004c0c <HAL_SPI_MspInit+0x128>)
 8004b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9a:	f003 0304 	and.w	r3, r3, #4
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60bb      	str	r3, [r7, #8]
 8004ba6:	4b19      	ldr	r3, [pc, #100]	; (8004c0c <HAL_SPI_MspInit+0x128>)
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	4a18      	ldr	r2, [pc, #96]	; (8004c0c <HAL_SPI_MspInit+0x128>)
 8004bac:	f043 0302 	orr.w	r3, r3, #2
 8004bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8004bb2:	4b16      	ldr	r3, [pc, #88]	; (8004c0c <HAL_SPI_MspInit+0x128>)
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	f003 0302 	and.w	r3, r3, #2
 8004bba:	60bb      	str	r3, [r7, #8]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004bbe:	2304      	movs	r3, #4
 8004bc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc2:	2302      	movs	r3, #2
 8004bc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bca:	2303      	movs	r3, #3
 8004bcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004bce:	2305      	movs	r3, #5
 8004bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bd2:	f107 031c 	add.w	r3, r7, #28
 8004bd6:	4619      	mov	r1, r3
 8004bd8:	480f      	ldr	r0, [pc, #60]	; (8004c18 <HAL_SPI_MspInit+0x134>)
 8004bda:	f000 fb91 	bl	8005300 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8004bde:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8004be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004be4:	2302      	movs	r3, #2
 8004be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be8:	2300      	movs	r3, #0
 8004bea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004bec:	2303      	movs	r3, #3
 8004bee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004bf0:	2305      	movs	r3, #5
 8004bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004bf4:	f107 031c 	add.w	r3, r7, #28
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	4808      	ldr	r0, [pc, #32]	; (8004c1c <HAL_SPI_MspInit+0x138>)
 8004bfc:	f000 fb80 	bl	8005300 <HAL_GPIO_Init>
}
 8004c00:	bf00      	nop
 8004c02:	3730      	adds	r7, #48	; 0x30
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}
 8004c08:	40013000 	.word	0x40013000
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	40020000 	.word	0x40020000
 8004c14:	40003800 	.word	0x40003800
 8004c18:	40020800 	.word	0x40020800
 8004c1c:	40020400 	.word	0x40020400

08004c20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a38      	ldr	r2, [pc, #224]	; (8004d10 <HAL_TIM_Base_MspInit+0xf0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d116      	bne.n	8004c60 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004c32:	2300      	movs	r3, #0
 8004c34:	617b      	str	r3, [r7, #20]
 8004c36:	4b37      	ldr	r3, [pc, #220]	; (8004d14 <HAL_TIM_Base_MspInit+0xf4>)
 8004c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3a:	4a36      	ldr	r2, [pc, #216]	; (8004d14 <HAL_TIM_Base_MspInit+0xf4>)
 8004c3c:	f043 0301 	orr.w	r3, r3, #1
 8004c40:	6453      	str	r3, [r2, #68]	; 0x44
 8004c42:	4b34      	ldr	r3, [pc, #208]	; (8004d14 <HAL_TIM_Base_MspInit+0xf4>)
 8004c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c46:	f003 0301 	and.w	r3, r3, #1
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8004c4e:	2200      	movs	r2, #0
 8004c50:	2105      	movs	r1, #5
 8004c52:	2019      	movs	r0, #25
 8004c54:	f000 fb2a 	bl	80052ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004c58:	2019      	movs	r0, #25
 8004c5a:	f000 fb43 	bl	80052e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8004c5e:	e052      	b.n	8004d06 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM2)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c68:	d116      	bne.n	8004c98 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	613b      	str	r3, [r7, #16]
 8004c6e:	4b29      	ldr	r3, [pc, #164]	; (8004d14 <HAL_TIM_Base_MspInit+0xf4>)
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	4a28      	ldr	r2, [pc, #160]	; (8004d14 <HAL_TIM_Base_MspInit+0xf4>)
 8004c74:	f043 0301 	orr.w	r3, r3, #1
 8004c78:	6413      	str	r3, [r2, #64]	; 0x40
 8004c7a:	4b26      	ldr	r3, [pc, #152]	; (8004d14 <HAL_TIM_Base_MspInit+0xf4>)
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c7e:	f003 0301 	and.w	r3, r3, #1
 8004c82:	613b      	str	r3, [r7, #16]
 8004c84:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004c86:	2200      	movs	r2, #0
 8004c88:	2105      	movs	r1, #5
 8004c8a:	201c      	movs	r0, #28
 8004c8c:	f000 fb0e 	bl	80052ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004c90:	201c      	movs	r0, #28
 8004c92:	f000 fb27 	bl	80052e4 <HAL_NVIC_EnableIRQ>
}
 8004c96:	e036      	b.n	8004d06 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a1e      	ldr	r2, [pc, #120]	; (8004d18 <HAL_TIM_Base_MspInit+0xf8>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d116      	bne.n	8004cd0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	4b1b      	ldr	r3, [pc, #108]	; (8004d14 <HAL_TIM_Base_MspInit+0xf4>)
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	4a1a      	ldr	r2, [pc, #104]	; (8004d14 <HAL_TIM_Base_MspInit+0xf4>)
 8004cac:	f043 0302 	orr.w	r3, r3, #2
 8004cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8004cb2:	4b18      	ldr	r3, [pc, #96]	; (8004d14 <HAL_TIM_Base_MspInit+0xf4>)
 8004cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb6:	f003 0302 	and.w	r3, r3, #2
 8004cba:	60fb      	str	r3, [r7, #12]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	2105      	movs	r1, #5
 8004cc2:	201d      	movs	r0, #29
 8004cc4:	f000 faf2 	bl	80052ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8004cc8:	201d      	movs	r0, #29
 8004cca:	f000 fb0b 	bl	80052e4 <HAL_NVIC_EnableIRQ>
}
 8004cce:	e01a      	b.n	8004d06 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a11      	ldr	r2, [pc, #68]	; (8004d1c <HAL_TIM_Base_MspInit+0xfc>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d115      	bne.n	8004d06 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004cda:	2300      	movs	r3, #0
 8004cdc:	60bb      	str	r3, [r7, #8]
 8004cde:	4b0d      	ldr	r3, [pc, #52]	; (8004d14 <HAL_TIM_Base_MspInit+0xf4>)
 8004ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ce2:	4a0c      	ldr	r2, [pc, #48]	; (8004d14 <HAL_TIM_Base_MspInit+0xf4>)
 8004ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8004cea:	4b0a      	ldr	r3, [pc, #40]	; (8004d14 <HAL_TIM_Base_MspInit+0xf4>)
 8004cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cf2:	60bb      	str	r3, [r7, #8]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	2105      	movs	r1, #5
 8004cfa:	2019      	movs	r0, #25
 8004cfc:	f000 fad6 	bl	80052ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8004d00:	2019      	movs	r0, #25
 8004d02:	f000 faef 	bl	80052e4 <HAL_NVIC_EnableIRQ>
}
 8004d06:	bf00      	nop
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	40010000 	.word	0x40010000
 8004d14:	40023800 	.word	0x40023800
 8004d18:	40000400 	.word	0x40000400
 8004d1c:	40014400 	.word	0x40014400

08004d20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08c      	sub	sp, #48	; 0x30
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8004d30:	2200      	movs	r2, #0
 8004d32:	6879      	ldr	r1, [r7, #4]
 8004d34:	202d      	movs	r0, #45	; 0x2d
 8004d36:	f000 fab9 	bl	80052ac <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004d3a:	202d      	movs	r0, #45	; 0x2d
 8004d3c:	f000 fad2 	bl	80052e4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8004d40:	2300      	movs	r3, #0
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	4b1f      	ldr	r3, [pc, #124]	; (8004dc4 <HAL_InitTick+0xa4>)
 8004d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d48:	4a1e      	ldr	r2, [pc, #120]	; (8004dc4 <HAL_InitTick+0xa4>)
 8004d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8004d50:	4b1c      	ldr	r3, [pc, #112]	; (8004dc4 <HAL_InitTick+0xa4>)
 8004d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004d5c:	f107 0210 	add.w	r2, r7, #16
 8004d60:	f107 0314 	add.w	r3, r7, #20
 8004d64:	4611      	mov	r1, r2
 8004d66:	4618      	mov	r0, r3
 8004d68:	f003 fd20 	bl	80087ac <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004d6c:	f003 fd0a 	bl	8008784 <HAL_RCC_GetPCLK1Freq>
 8004d70:	4603      	mov	r3, r0
 8004d72:	005b      	lsls	r3, r3, #1
 8004d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d78:	4a13      	ldr	r2, [pc, #76]	; (8004dc8 <HAL_InitTick+0xa8>)
 8004d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7e:	0c9b      	lsrs	r3, r3, #18
 8004d80:	3b01      	subs	r3, #1
 8004d82:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8004d84:	4b11      	ldr	r3, [pc, #68]	; (8004dcc <HAL_InitTick+0xac>)
 8004d86:	4a12      	ldr	r2, [pc, #72]	; (8004dd0 <HAL_InitTick+0xb0>)
 8004d88:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8004d8a:	4b10      	ldr	r3, [pc, #64]	; (8004dcc <HAL_InitTick+0xac>)
 8004d8c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004d90:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8004d92:	4a0e      	ldr	r2, [pc, #56]	; (8004dcc <HAL_InitTick+0xac>)
 8004d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d96:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8004d98:	4b0c      	ldr	r3, [pc, #48]	; (8004dcc <HAL_InitTick+0xac>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004d9e:	4b0b      	ldr	r3, [pc, #44]	; (8004dcc <HAL_InitTick+0xac>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 8004da4:	4809      	ldr	r0, [pc, #36]	; (8004dcc <HAL_InitTick+0xac>)
 8004da6:	f004 fe9f 	bl	8009ae8 <HAL_TIM_Base_Init>
 8004daa:	4603      	mov	r3, r0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d104      	bne.n	8004dba <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8004db0:	4806      	ldr	r0, [pc, #24]	; (8004dcc <HAL_InitTick+0xac>)
 8004db2:	f004 fee9 	bl	8009b88 <HAL_TIM_Base_Start_IT>
 8004db6:	4603      	mov	r3, r0
 8004db8:	e000      	b.n	8004dbc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3730      	adds	r7, #48	; 0x30
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	431bde83 	.word	0x431bde83
 8004dcc:	20011214 	.word	0x20011214
 8004dd0:	40002000 	.word	0x40002000

08004dd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004dd8:	e7fe      	b.n	8004dd8 <NMI_Handler+0x4>

08004dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004dde:	e7fe      	b.n	8004dde <HardFault_Handler+0x4>

08004de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004de4:	e7fe      	b.n	8004de4 <MemManage_Handler+0x4>

08004de6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004de6:	b480      	push	{r7}
 8004de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004dea:	e7fe      	b.n	8004dea <BusFault_Handler+0x4>

08004dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004dec:	b480      	push	{r7}
 8004dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004df0:	e7fe      	b.n	8004df0 <UsageFault_Handler+0x4>

08004df2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004df2:	b480      	push	{r7}
 8004df4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004df6:	bf00      	nop
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr

08004e00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8004e00:	b580      	push	{r7, lr}
 8004e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */


  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e04:	4803      	ldr	r0, [pc, #12]	; (8004e14 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004e06:	f004 ff5e 	bl	8009cc6 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8004e0a:	4803      	ldr	r0, [pc, #12]	; (8004e18 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004e0c:	f004 ff5b 	bl	8009cc6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8004e10:	bf00      	nop
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	2000ed94 	.word	0x2000ed94
 8004e18:	200091d8 	.word	0x200091d8

08004e1c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//	HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004e20:	4802      	ldr	r0, [pc, #8]	; (8004e2c <TIM2_IRQHandler+0x10>)
 8004e22:	f004 ff50 	bl	8009cc6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004e26:	bf00      	nop
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	2000f104 	.word	0x2000f104

08004e30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004e34:	4802      	ldr	r0, [pc, #8]	; (8004e40 <TIM3_IRQHandler+0x10>)
 8004e36:	f004 ff46 	bl	8009cc6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004e3a:	bf00      	nop
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	2000dba8 	.word	0x2000dba8

08004e44 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004e48:	4802      	ldr	r0, [pc, #8]	; (8004e54 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004e4a:	f004 ff3c 	bl	8009cc6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004e4e:	bf00      	nop
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20011214 	.word	0x20011214

08004e58 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004e5c:	4802      	ldr	r0, [pc, #8]	; (8004e68 <OTG_FS_IRQHandler+0x10>)
 8004e5e:	f002 f812 	bl	8006e86 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004e62:	bf00      	nop
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	200147e4 	.word	0x200147e4

08004e6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	af00      	add	r7, sp, #0
	return 1;
 8004e70:	2301      	movs	r3, #1
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <_kill>:

int _kill(int pid, int sig)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004e86:	f010 fb6d 	bl	8015564 <__errno>
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	2216      	movs	r2, #22
 8004e8e:	601a      	str	r2, [r3, #0]
	return -1;
 8004e90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <_exit>:

void _exit (int status)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004ea4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f7ff ffe7 	bl	8004e7c <_kill>
	while (1) {}		/* Make sure we hang here */
 8004eae:	e7fe      	b.n	8004eae <_exit+0x12>

08004eb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	e00a      	b.n	8004ed8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004ec2:	f3af 8000 	nop.w
 8004ec6:	4601      	mov	r1, r0
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	60ba      	str	r2, [r7, #8]
 8004ece:	b2ca      	uxtb	r2, r1
 8004ed0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	617b      	str	r3, [r7, #20]
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	dbf0      	blt.n	8004ec2 <_read+0x12>
	}

return len;
 8004ee0:	687b      	ldr	r3, [r7, #4]
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3718      	adds	r7, #24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b086      	sub	sp, #24
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	60f8      	str	r0, [r7, #12]
 8004ef2:	60b9      	str	r1, [r7, #8]
 8004ef4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	617b      	str	r3, [r7, #20]
 8004efa:	e009      	b.n	8004f10 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	1c5a      	adds	r2, r3, #1
 8004f00:	60ba      	str	r2, [r7, #8]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	617b      	str	r3, [r7, #20]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	dbf1      	blt.n	8004efc <_write+0x12>
	}
	return len;
 8004f18:	687b      	ldr	r3, [r7, #4]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3718      	adds	r7, #24
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}

08004f22 <_close>:

int _close(int file)
{
 8004f22:	b480      	push	{r7}
 8004f24:	b083      	sub	sp, #12
 8004f26:	af00      	add	r7, sp, #0
 8004f28:	6078      	str	r0, [r7, #4]
	return -1;
 8004f2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	370c      	adds	r7, #12
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr

08004f3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
 8004f42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f4a:	605a      	str	r2, [r3, #4]
	return 0;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	370c      	adds	r7, #12
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr

08004f5a <_isatty>:

int _isatty(int file)
{
 8004f5a:	b480      	push	{r7}
 8004f5c:	b083      	sub	sp, #12
 8004f5e:	af00      	add	r7, sp, #0
 8004f60:	6078      	str	r0, [r7, #4]
	return 1;
 8004f62:	2301      	movs	r3, #1
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b085      	sub	sp, #20
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
	return 0;
 8004f7c:	2300      	movs	r3, #0
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3714      	adds	r7, #20
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
	...

08004f8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004f94:	4a14      	ldr	r2, [pc, #80]	; (8004fe8 <_sbrk+0x5c>)
 8004f96:	4b15      	ldr	r3, [pc, #84]	; (8004fec <_sbrk+0x60>)
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004fa0:	4b13      	ldr	r3, [pc, #76]	; (8004ff0 <_sbrk+0x64>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d102      	bne.n	8004fae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004fa8:	4b11      	ldr	r3, [pc, #68]	; (8004ff0 <_sbrk+0x64>)
 8004faa:	4a12      	ldr	r2, [pc, #72]	; (8004ff4 <_sbrk+0x68>)
 8004fac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004fae:	4b10      	ldr	r3, [pc, #64]	; (8004ff0 <_sbrk+0x64>)
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d207      	bcs.n	8004fcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004fbc:	f010 fad2 	bl	8015564 <__errno>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	220c      	movs	r2, #12
 8004fc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004fc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fca:	e009      	b.n	8004fe0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004fcc:	4b08      	ldr	r3, [pc, #32]	; (8004ff0 <_sbrk+0x64>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004fd2:	4b07      	ldr	r3, [pc, #28]	; (8004ff0 <_sbrk+0x64>)
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4413      	add	r3, r2
 8004fda:	4a05      	ldr	r2, [pc, #20]	; (8004ff0 <_sbrk+0x64>)
 8004fdc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004fde:	68fb      	ldr	r3, [r7, #12]
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3718      	adds	r7, #24
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	20020000 	.word	0x20020000
 8004fec:	00000400 	.word	0x00000400
 8004ff0:	20000784 	.word	0x20000784
 8004ff4:	20014c00 	.word	0x20014c00

08004ff8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ffc:	4b06      	ldr	r3, [pc, #24]	; (8005018 <SystemInit+0x20>)
 8004ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005002:	4a05      	ldr	r2, [pc, #20]	; (8005018 <SystemInit+0x20>)
 8005004:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005008:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800500c:	bf00      	nop
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	e000ed00 	.word	0xe000ed00

0800501c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800501c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005054 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005020:	480d      	ldr	r0, [pc, #52]	; (8005058 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005022:	490e      	ldr	r1, [pc, #56]	; (800505c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005024:	4a0e      	ldr	r2, [pc, #56]	; (8005060 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005028:	e002      	b.n	8005030 <LoopCopyDataInit>

0800502a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800502a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800502c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800502e:	3304      	adds	r3, #4

08005030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005034:	d3f9      	bcc.n	800502a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005036:	4a0b      	ldr	r2, [pc, #44]	; (8005064 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005038:	4c0b      	ldr	r4, [pc, #44]	; (8005068 <LoopFillZerobss+0x26>)
  movs r3, #0
 800503a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800503c:	e001      	b.n	8005042 <LoopFillZerobss>

0800503e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800503e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005040:	3204      	adds	r2, #4

08005042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005044:	d3fb      	bcc.n	800503e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005046:	f7ff ffd7 	bl	8004ff8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800504a:	f010 fb87 	bl	801575c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800504e:	f7fe f8fd 	bl	800324c <main>
  bx  lr    
 8005052:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005054:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005058:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800505c:	2000036c 	.word	0x2000036c
  ldr r2, =_sidata
 8005060:	08019574 	.word	0x08019574
  ldr r2, =_sbss
 8005064:	20000370 	.word	0x20000370
  ldr r4, =_ebss
 8005068:	20014bfc 	.word	0x20014bfc

0800506c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800506c:	e7fe      	b.n	800506c <ADC_IRQHandler>
	...

08005070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005074:	4b0e      	ldr	r3, [pc, #56]	; (80050b0 <HAL_Init+0x40>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a0d      	ldr	r2, [pc, #52]	; (80050b0 <HAL_Init+0x40>)
 800507a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800507e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005080:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <HAL_Init+0x40>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a0a      	ldr	r2, [pc, #40]	; (80050b0 <HAL_Init+0x40>)
 8005086:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800508a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800508c:	4b08      	ldr	r3, [pc, #32]	; (80050b0 <HAL_Init+0x40>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a07      	ldr	r2, [pc, #28]	; (80050b0 <HAL_Init+0x40>)
 8005092:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005096:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005098:	2003      	movs	r0, #3
 800509a:	f000 f8fc 	bl	8005296 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800509e:	200f      	movs	r0, #15
 80050a0:	f7ff fe3e 	bl	8004d20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80050a4:	f7ff fc5e 	bl	8004964 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	40023c00 	.word	0x40023c00

080050b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80050b8:	4b06      	ldr	r3, [pc, #24]	; (80050d4 <HAL_IncTick+0x20>)
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	461a      	mov	r2, r3
 80050be:	4b06      	ldr	r3, [pc, #24]	; (80050d8 <HAL_IncTick+0x24>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4413      	add	r3, r2
 80050c4:	4a04      	ldr	r2, [pc, #16]	; (80050d8 <HAL_IncTick+0x24>)
 80050c6:	6013      	str	r3, [r2, #0]
}
 80050c8:	bf00      	nop
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	2000000c 	.word	0x2000000c
 80050d8:	2001125c 	.word	0x2001125c

080050dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80050dc:	b480      	push	{r7}
 80050de:	af00      	add	r7, sp, #0
  return uwTick;
 80050e0:	4b03      	ldr	r3, [pc, #12]	; (80050f0 <HAL_GetTick+0x14>)
 80050e2:	681b      	ldr	r3, [r3, #0]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	2001125c 	.word	0x2001125c

080050f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80050fc:	f7ff ffee 	bl	80050dc <HAL_GetTick>
 8005100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800510c:	d005      	beq.n	800511a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800510e:	4b0a      	ldr	r3, [pc, #40]	; (8005138 <HAL_Delay+0x44>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	4413      	add	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800511a:	bf00      	nop
 800511c:	f7ff ffde 	bl	80050dc <HAL_GetTick>
 8005120:	4602      	mov	r2, r0
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	1ad3      	subs	r3, r2, r3
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	429a      	cmp	r2, r3
 800512a:	d8f7      	bhi.n	800511c <HAL_Delay+0x28>
  {
  }
}
 800512c:	bf00      	nop
 800512e:	bf00      	nop
 8005130:	3710      	adds	r7, #16
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}
 8005136:	bf00      	nop
 8005138:	2000000c 	.word	0x2000000c

0800513c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800513c:	b480      	push	{r7}
 800513e:	b085      	sub	sp, #20
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800514c:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <__NVIC_SetPriorityGrouping+0x44>)
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005158:	4013      	ands	r3, r2
 800515a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800516c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800516e:	4a04      	ldr	r2, [pc, #16]	; (8005180 <__NVIC_SetPriorityGrouping+0x44>)
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	60d3      	str	r3, [r2, #12]
}
 8005174:	bf00      	nop
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	e000ed00 	.word	0xe000ed00

08005184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005188:	4b04      	ldr	r3, [pc, #16]	; (800519c <__NVIC_GetPriorityGrouping+0x18>)
 800518a:	68db      	ldr	r3, [r3, #12]
 800518c:	0a1b      	lsrs	r3, r3, #8
 800518e:	f003 0307 	and.w	r3, r3, #7
}
 8005192:	4618      	mov	r0, r3
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	e000ed00 	.word	0xe000ed00

080051a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	4603      	mov	r3, r0
 80051a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	db0b      	blt.n	80051ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	f003 021f 	and.w	r2, r3, #31
 80051b8:	4907      	ldr	r1, [pc, #28]	; (80051d8 <__NVIC_EnableIRQ+0x38>)
 80051ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051be:	095b      	lsrs	r3, r3, #5
 80051c0:	2001      	movs	r0, #1
 80051c2:	fa00 f202 	lsl.w	r2, r0, r2
 80051c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80051ca:	bf00      	nop
 80051cc:	370c      	adds	r7, #12
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	e000e100 	.word	0xe000e100

080051dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	4603      	mov	r3, r0
 80051e4:	6039      	str	r1, [r7, #0]
 80051e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	db0a      	blt.n	8005206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	b2da      	uxtb	r2, r3
 80051f4:	490c      	ldr	r1, [pc, #48]	; (8005228 <__NVIC_SetPriority+0x4c>)
 80051f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051fa:	0112      	lsls	r2, r2, #4
 80051fc:	b2d2      	uxtb	r2, r2
 80051fe:	440b      	add	r3, r1
 8005200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005204:	e00a      	b.n	800521c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	b2da      	uxtb	r2, r3
 800520a:	4908      	ldr	r1, [pc, #32]	; (800522c <__NVIC_SetPriority+0x50>)
 800520c:	79fb      	ldrb	r3, [r7, #7]
 800520e:	f003 030f 	and.w	r3, r3, #15
 8005212:	3b04      	subs	r3, #4
 8005214:	0112      	lsls	r2, r2, #4
 8005216:	b2d2      	uxtb	r2, r2
 8005218:	440b      	add	r3, r1
 800521a:	761a      	strb	r2, [r3, #24]
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	e000e100 	.word	0xe000e100
 800522c:	e000ed00 	.word	0xe000ed00

08005230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005230:	b480      	push	{r7}
 8005232:	b089      	sub	sp, #36	; 0x24
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f003 0307 	and.w	r3, r3, #7
 8005242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005244:	69fb      	ldr	r3, [r7, #28]
 8005246:	f1c3 0307 	rsb	r3, r3, #7
 800524a:	2b04      	cmp	r3, #4
 800524c:	bf28      	it	cs
 800524e:	2304      	movcs	r3, #4
 8005250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	3304      	adds	r3, #4
 8005256:	2b06      	cmp	r3, #6
 8005258:	d902      	bls.n	8005260 <NVIC_EncodePriority+0x30>
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	3b03      	subs	r3, #3
 800525e:	e000      	b.n	8005262 <NVIC_EncodePriority+0x32>
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005264:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	fa02 f303 	lsl.w	r3, r2, r3
 800526e:	43da      	mvns	r2, r3
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	401a      	ands	r2, r3
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005278:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	fa01 f303 	lsl.w	r3, r1, r3
 8005282:	43d9      	mvns	r1, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005288:	4313      	orrs	r3, r2
         );
}
 800528a:	4618      	mov	r0, r3
 800528c:	3724      	adds	r7, #36	; 0x24
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr

08005296 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005296:	b580      	push	{r7, lr}
 8005298:	b082      	sub	sp, #8
 800529a:	af00      	add	r7, sp, #0
 800529c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7ff ff4c 	bl	800513c <__NVIC_SetPriorityGrouping>
}
 80052a4:	bf00      	nop
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b086      	sub	sp, #24
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	4603      	mov	r3, r0
 80052b4:	60b9      	str	r1, [r7, #8]
 80052b6:	607a      	str	r2, [r7, #4]
 80052b8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052ba:	2300      	movs	r3, #0
 80052bc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052be:	f7ff ff61 	bl	8005184 <__NVIC_GetPriorityGrouping>
 80052c2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	68b9      	ldr	r1, [r7, #8]
 80052c8:	6978      	ldr	r0, [r7, #20]
 80052ca:	f7ff ffb1 	bl	8005230 <NVIC_EncodePriority>
 80052ce:	4602      	mov	r2, r0
 80052d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052d4:	4611      	mov	r1, r2
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff ff80 	bl	80051dc <__NVIC_SetPriority>
}
 80052dc:	bf00      	nop
 80052de:	3718      	adds	r7, #24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}

080052e4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	4603      	mov	r3, r0
 80052ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7ff ff54 	bl	80051a0 <__NVIC_EnableIRQ>
}
 80052f8:	bf00      	nop
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005300:	b480      	push	{r7}
 8005302:	b089      	sub	sp, #36	; 0x24
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800530a:	2300      	movs	r3, #0
 800530c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800530e:	2300      	movs	r3, #0
 8005310:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005312:	2300      	movs	r3, #0
 8005314:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005316:	2300      	movs	r3, #0
 8005318:	61fb      	str	r3, [r7, #28]
 800531a:	e16b      	b.n	80055f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800531c:	2201      	movs	r2, #1
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	fa02 f303 	lsl.w	r3, r2, r3
 8005324:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	697a      	ldr	r2, [r7, #20]
 800532c:	4013      	ands	r3, r2
 800532e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	429a      	cmp	r2, r3
 8005336:	f040 815a 	bne.w	80055ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f003 0303 	and.w	r3, r3, #3
 8005342:	2b01      	cmp	r3, #1
 8005344:	d005      	beq.n	8005352 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800534e:	2b02      	cmp	r3, #2
 8005350:	d130      	bne.n	80053b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005358:	69fb      	ldr	r3, [r7, #28]
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	2203      	movs	r2, #3
 800535e:	fa02 f303 	lsl.w	r3, r2, r3
 8005362:	43db      	mvns	r3, r3
 8005364:	69ba      	ldr	r2, [r7, #24]
 8005366:	4013      	ands	r3, r2
 8005368:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	68da      	ldr	r2, [r3, #12]
 800536e:	69fb      	ldr	r3, [r7, #28]
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	fa02 f303 	lsl.w	r3, r2, r3
 8005376:	69ba      	ldr	r2, [r7, #24]
 8005378:	4313      	orrs	r3, r2
 800537a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	69ba      	ldr	r2, [r7, #24]
 8005380:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005388:	2201      	movs	r2, #1
 800538a:	69fb      	ldr	r3, [r7, #28]
 800538c:	fa02 f303 	lsl.w	r3, r2, r3
 8005390:	43db      	mvns	r3, r3
 8005392:	69ba      	ldr	r2, [r7, #24]
 8005394:	4013      	ands	r3, r2
 8005396:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	091b      	lsrs	r3, r3, #4
 800539e:	f003 0201 	and.w	r2, r3, #1
 80053a2:	69fb      	ldr	r3, [r7, #28]
 80053a4:	fa02 f303 	lsl.w	r3, r2, r3
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	69ba      	ldr	r2, [r7, #24]
 80053b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	f003 0303 	and.w	r3, r3, #3
 80053bc:	2b03      	cmp	r3, #3
 80053be:	d017      	beq.n	80053f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	2203      	movs	r2, #3
 80053cc:	fa02 f303 	lsl.w	r3, r2, r3
 80053d0:	43db      	mvns	r3, r3
 80053d2:	69ba      	ldr	r2, [r7, #24]
 80053d4:	4013      	ands	r3, r2
 80053d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	689a      	ldr	r2, [r3, #8]
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	fa02 f303 	lsl.w	r3, r2, r3
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f003 0303 	and.w	r3, r3, #3
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d123      	bne.n	8005444 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	08da      	lsrs	r2, r3, #3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	3208      	adds	r2, #8
 8005404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005408:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	f003 0307 	and.w	r3, r3, #7
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	220f      	movs	r2, #15
 8005414:	fa02 f303 	lsl.w	r3, r2, r3
 8005418:	43db      	mvns	r3, r3
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	4013      	ands	r3, r2
 800541e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	691a      	ldr	r2, [r3, #16]
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	f003 0307 	and.w	r3, r3, #7
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	fa02 f303 	lsl.w	r3, r2, r3
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	4313      	orrs	r3, r2
 8005434:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	08da      	lsrs	r2, r3, #3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	3208      	adds	r2, #8
 800543e:	69b9      	ldr	r1, [r7, #24]
 8005440:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	005b      	lsls	r3, r3, #1
 800544e:	2203      	movs	r2, #3
 8005450:	fa02 f303 	lsl.w	r3, r2, r3
 8005454:	43db      	mvns	r3, r3
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	4013      	ands	r3, r2
 800545a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	685b      	ldr	r3, [r3, #4]
 8005460:	f003 0203 	and.w	r2, r3, #3
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	fa02 f303 	lsl.w	r3, r2, r3
 800546c:	69ba      	ldr	r2, [r7, #24]
 800546e:	4313      	orrs	r3, r2
 8005470:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	685b      	ldr	r3, [r3, #4]
 800547c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 80b4 	beq.w	80055ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005486:	2300      	movs	r3, #0
 8005488:	60fb      	str	r3, [r7, #12]
 800548a:	4b60      	ldr	r3, [pc, #384]	; (800560c <HAL_GPIO_Init+0x30c>)
 800548c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800548e:	4a5f      	ldr	r2, [pc, #380]	; (800560c <HAL_GPIO_Init+0x30c>)
 8005490:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005494:	6453      	str	r3, [r2, #68]	; 0x44
 8005496:	4b5d      	ldr	r3, [pc, #372]	; (800560c <HAL_GPIO_Init+0x30c>)
 8005498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800549a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800549e:	60fb      	str	r3, [r7, #12]
 80054a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80054a2:	4a5b      	ldr	r2, [pc, #364]	; (8005610 <HAL_GPIO_Init+0x310>)
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	089b      	lsrs	r3, r3, #2
 80054a8:	3302      	adds	r3, #2
 80054aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	f003 0303 	and.w	r3, r3, #3
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	220f      	movs	r2, #15
 80054ba:	fa02 f303 	lsl.w	r3, r2, r3
 80054be:	43db      	mvns	r3, r3
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	4013      	ands	r3, r2
 80054c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a52      	ldr	r2, [pc, #328]	; (8005614 <HAL_GPIO_Init+0x314>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d02b      	beq.n	8005526 <HAL_GPIO_Init+0x226>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a51      	ldr	r2, [pc, #324]	; (8005618 <HAL_GPIO_Init+0x318>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d025      	beq.n	8005522 <HAL_GPIO_Init+0x222>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a50      	ldr	r2, [pc, #320]	; (800561c <HAL_GPIO_Init+0x31c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d01f      	beq.n	800551e <HAL_GPIO_Init+0x21e>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a4f      	ldr	r2, [pc, #316]	; (8005620 <HAL_GPIO_Init+0x320>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d019      	beq.n	800551a <HAL_GPIO_Init+0x21a>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a4e      	ldr	r2, [pc, #312]	; (8005624 <HAL_GPIO_Init+0x324>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d013      	beq.n	8005516 <HAL_GPIO_Init+0x216>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a4d      	ldr	r2, [pc, #308]	; (8005628 <HAL_GPIO_Init+0x328>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d00d      	beq.n	8005512 <HAL_GPIO_Init+0x212>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a4c      	ldr	r2, [pc, #304]	; (800562c <HAL_GPIO_Init+0x32c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d007      	beq.n	800550e <HAL_GPIO_Init+0x20e>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a4b      	ldr	r2, [pc, #300]	; (8005630 <HAL_GPIO_Init+0x330>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d101      	bne.n	800550a <HAL_GPIO_Init+0x20a>
 8005506:	2307      	movs	r3, #7
 8005508:	e00e      	b.n	8005528 <HAL_GPIO_Init+0x228>
 800550a:	2308      	movs	r3, #8
 800550c:	e00c      	b.n	8005528 <HAL_GPIO_Init+0x228>
 800550e:	2306      	movs	r3, #6
 8005510:	e00a      	b.n	8005528 <HAL_GPIO_Init+0x228>
 8005512:	2305      	movs	r3, #5
 8005514:	e008      	b.n	8005528 <HAL_GPIO_Init+0x228>
 8005516:	2304      	movs	r3, #4
 8005518:	e006      	b.n	8005528 <HAL_GPIO_Init+0x228>
 800551a:	2303      	movs	r3, #3
 800551c:	e004      	b.n	8005528 <HAL_GPIO_Init+0x228>
 800551e:	2302      	movs	r3, #2
 8005520:	e002      	b.n	8005528 <HAL_GPIO_Init+0x228>
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <HAL_GPIO_Init+0x228>
 8005526:	2300      	movs	r3, #0
 8005528:	69fa      	ldr	r2, [r7, #28]
 800552a:	f002 0203 	and.w	r2, r2, #3
 800552e:	0092      	lsls	r2, r2, #2
 8005530:	4093      	lsls	r3, r2
 8005532:	69ba      	ldr	r2, [r7, #24]
 8005534:	4313      	orrs	r3, r2
 8005536:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005538:	4935      	ldr	r1, [pc, #212]	; (8005610 <HAL_GPIO_Init+0x310>)
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	089b      	lsrs	r3, r3, #2
 800553e:	3302      	adds	r3, #2
 8005540:	69ba      	ldr	r2, [r7, #24]
 8005542:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005546:	4b3b      	ldr	r3, [pc, #236]	; (8005634 <HAL_GPIO_Init+0x334>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	43db      	mvns	r3, r3
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	4013      	ands	r3, r2
 8005554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	685b      	ldr	r3, [r3, #4]
 800555a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	4313      	orrs	r3, r2
 8005568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800556a:	4a32      	ldr	r2, [pc, #200]	; (8005634 <HAL_GPIO_Init+0x334>)
 800556c:	69bb      	ldr	r3, [r7, #24]
 800556e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005570:	4b30      	ldr	r3, [pc, #192]	; (8005634 <HAL_GPIO_Init+0x334>)
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	43db      	mvns	r3, r3
 800557a:	69ba      	ldr	r2, [r7, #24]
 800557c:	4013      	ands	r3, r2
 800557e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d003      	beq.n	8005594 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	4313      	orrs	r3, r2
 8005592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005594:	4a27      	ldr	r2, [pc, #156]	; (8005634 <HAL_GPIO_Init+0x334>)
 8005596:	69bb      	ldr	r3, [r7, #24]
 8005598:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800559a:	4b26      	ldr	r3, [pc, #152]	; (8005634 <HAL_GPIO_Init+0x334>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	43db      	mvns	r3, r3
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	4013      	ands	r3, r2
 80055a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d003      	beq.n	80055be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80055b6:	69ba      	ldr	r2, [r7, #24]
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80055be:	4a1d      	ldr	r2, [pc, #116]	; (8005634 <HAL_GPIO_Init+0x334>)
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80055c4:	4b1b      	ldr	r3, [pc, #108]	; (8005634 <HAL_GPIO_Init+0x334>)
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	43db      	mvns	r3, r3
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	4013      	ands	r3, r2
 80055d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80055e8:	4a12      	ldr	r2, [pc, #72]	; (8005634 <HAL_GPIO_Init+0x334>)
 80055ea:	69bb      	ldr	r3, [r7, #24]
 80055ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	3301      	adds	r3, #1
 80055f2:	61fb      	str	r3, [r7, #28]
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	2b0f      	cmp	r3, #15
 80055f8:	f67f ae90 	bls.w	800531c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80055fc:	bf00      	nop
 80055fe:	bf00      	nop
 8005600:	3724      	adds	r7, #36	; 0x24
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	40023800 	.word	0x40023800
 8005610:	40013800 	.word	0x40013800
 8005614:	40020000 	.word	0x40020000
 8005618:	40020400 	.word	0x40020400
 800561c:	40020800 	.word	0x40020800
 8005620:	40020c00 	.word	0x40020c00
 8005624:	40021000 	.word	0x40021000
 8005628:	40021400 	.word	0x40021400
 800562c:	40021800 	.word	0x40021800
 8005630:	40021c00 	.word	0x40021c00
 8005634:	40013c00 	.word	0x40013c00

08005638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	460b      	mov	r3, r1
 8005642:	807b      	strh	r3, [r7, #2]
 8005644:	4613      	mov	r3, r2
 8005646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005648:	787b      	ldrb	r3, [r7, #1]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800564e:	887a      	ldrh	r2, [r7, #2]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005654:	e003      	b.n	800565e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005656:	887b      	ldrh	r3, [r7, #2]
 8005658:	041a      	lsls	r2, r3, #16
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	619a      	str	r2, [r3, #24]
}
 800565e:	bf00      	nop
 8005660:	370c      	adds	r7, #12
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr

0800566a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800566a:	b480      	push	{r7}
 800566c:	b085      	sub	sp, #20
 800566e:	af00      	add	r7, sp, #0
 8005670:	6078      	str	r0, [r7, #4]
 8005672:	460b      	mov	r3, r1
 8005674:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800567c:	887a      	ldrh	r2, [r7, #2]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4013      	ands	r3, r2
 8005682:	041a      	lsls	r2, r3, #16
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	43d9      	mvns	r1, r3
 8005688:	887b      	ldrh	r3, [r7, #2]
 800568a:	400b      	ands	r3, r1
 800568c:	431a      	orrs	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	619a      	str	r2, [r3, #24]
}
 8005692:	bf00      	nop
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
	...

080056a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e12b      	b.n	800590a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d106      	bne.n	80056cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7ff f978 	bl	80049bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2224      	movs	r2, #36	; 0x24
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f022 0201 	bic.w	r2, r2, #1
 80056e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80056f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005702:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005704:	f003 f83e 	bl	8008784 <HAL_RCC_GetPCLK1Freq>
 8005708:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	4a81      	ldr	r2, [pc, #516]	; (8005914 <HAL_I2C_Init+0x274>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d807      	bhi.n	8005724 <HAL_I2C_Init+0x84>
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4a80      	ldr	r2, [pc, #512]	; (8005918 <HAL_I2C_Init+0x278>)
 8005718:	4293      	cmp	r3, r2
 800571a:	bf94      	ite	ls
 800571c:	2301      	movls	r3, #1
 800571e:	2300      	movhi	r3, #0
 8005720:	b2db      	uxtb	r3, r3
 8005722:	e006      	b.n	8005732 <HAL_I2C_Init+0x92>
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4a7d      	ldr	r2, [pc, #500]	; (800591c <HAL_I2C_Init+0x27c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	bf94      	ite	ls
 800572c:	2301      	movls	r3, #1
 800572e:	2300      	movhi	r3, #0
 8005730:	b2db      	uxtb	r3, r3
 8005732:	2b00      	cmp	r3, #0
 8005734:	d001      	beq.n	800573a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005736:	2301      	movs	r3, #1
 8005738:	e0e7      	b.n	800590a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	4a78      	ldr	r2, [pc, #480]	; (8005920 <HAL_I2C_Init+0x280>)
 800573e:	fba2 2303 	umull	r2, r3, r2, r3
 8005742:	0c9b      	lsrs	r3, r3, #18
 8005744:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68ba      	ldr	r2, [r7, #8]
 8005756:	430a      	orrs	r2, r1
 8005758:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	4a6a      	ldr	r2, [pc, #424]	; (8005914 <HAL_I2C_Init+0x274>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d802      	bhi.n	8005774 <HAL_I2C_Init+0xd4>
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	3301      	adds	r3, #1
 8005772:	e009      	b.n	8005788 <HAL_I2C_Init+0xe8>
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800577a:	fb02 f303 	mul.w	r3, r2, r3
 800577e:	4a69      	ldr	r2, [pc, #420]	; (8005924 <HAL_I2C_Init+0x284>)
 8005780:	fba2 2303 	umull	r2, r3, r2, r3
 8005784:	099b      	lsrs	r3, r3, #6
 8005786:	3301      	adds	r3, #1
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6812      	ldr	r2, [r2, #0]
 800578c:	430b      	orrs	r3, r1
 800578e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	69db      	ldr	r3, [r3, #28]
 8005796:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800579a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	495c      	ldr	r1, [pc, #368]	; (8005914 <HAL_I2C_Init+0x274>)
 80057a4:	428b      	cmp	r3, r1
 80057a6:	d819      	bhi.n	80057dc <HAL_I2C_Init+0x13c>
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	1e59      	subs	r1, r3, #1
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80057b6:	1c59      	adds	r1, r3, #1
 80057b8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80057bc:	400b      	ands	r3, r1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00a      	beq.n	80057d8 <HAL_I2C_Init+0x138>
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	1e59      	subs	r1, r3, #1
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80057d0:	3301      	adds	r3, #1
 80057d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057d6:	e051      	b.n	800587c <HAL_I2C_Init+0x1dc>
 80057d8:	2304      	movs	r3, #4
 80057da:	e04f      	b.n	800587c <HAL_I2C_Init+0x1dc>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d111      	bne.n	8005808 <HAL_I2C_Init+0x168>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	1e58      	subs	r0, r3, #1
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6859      	ldr	r1, [r3, #4]
 80057ec:	460b      	mov	r3, r1
 80057ee:	005b      	lsls	r3, r3, #1
 80057f0:	440b      	add	r3, r1
 80057f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80057f6:	3301      	adds	r3, #1
 80057f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	bf0c      	ite	eq
 8005800:	2301      	moveq	r3, #1
 8005802:	2300      	movne	r3, #0
 8005804:	b2db      	uxtb	r3, r3
 8005806:	e012      	b.n	800582e <HAL_I2C_Init+0x18e>
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	1e58      	subs	r0, r3, #1
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6859      	ldr	r1, [r3, #4]
 8005810:	460b      	mov	r3, r1
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	440b      	add	r3, r1
 8005816:	0099      	lsls	r1, r3, #2
 8005818:	440b      	add	r3, r1
 800581a:	fbb0 f3f3 	udiv	r3, r0, r3
 800581e:	3301      	adds	r3, #1
 8005820:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005824:	2b00      	cmp	r3, #0
 8005826:	bf0c      	ite	eq
 8005828:	2301      	moveq	r3, #1
 800582a:	2300      	movne	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d001      	beq.n	8005836 <HAL_I2C_Init+0x196>
 8005832:	2301      	movs	r3, #1
 8005834:	e022      	b.n	800587c <HAL_I2C_Init+0x1dc>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10e      	bne.n	800585c <HAL_I2C_Init+0x1bc>
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	1e58      	subs	r0, r3, #1
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6859      	ldr	r1, [r3, #4]
 8005846:	460b      	mov	r3, r1
 8005848:	005b      	lsls	r3, r3, #1
 800584a:	440b      	add	r3, r1
 800584c:	fbb0 f3f3 	udiv	r3, r0, r3
 8005850:	3301      	adds	r3, #1
 8005852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005856:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800585a:	e00f      	b.n	800587c <HAL_I2C_Init+0x1dc>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	1e58      	subs	r0, r3, #1
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6859      	ldr	r1, [r3, #4]
 8005864:	460b      	mov	r3, r1
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	440b      	add	r3, r1
 800586a:	0099      	lsls	r1, r3, #2
 800586c:	440b      	add	r3, r1
 800586e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005872:	3301      	adds	r3, #1
 8005874:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005878:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800587c:	6879      	ldr	r1, [r7, #4]
 800587e:	6809      	ldr	r1, [r1, #0]
 8005880:	4313      	orrs	r3, r2
 8005882:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	69da      	ldr	r2, [r3, #28]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	431a      	orrs	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	430a      	orrs	r2, r1
 800589e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80058aa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	6911      	ldr	r1, [r2, #16]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	68d2      	ldr	r2, [r2, #12]
 80058b6:	4311      	orrs	r1, r2
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6812      	ldr	r2, [r2, #0]
 80058bc:	430b      	orrs	r3, r1
 80058be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	695a      	ldr	r2, [r3, #20]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	431a      	orrs	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f042 0201 	orr.w	r2, r2, #1
 80058ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2220      	movs	r2, #32
 80058f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2200      	movs	r2, #0
 80058fe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3710      	adds	r7, #16
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	000186a0 	.word	0x000186a0
 8005918:	001e847f 	.word	0x001e847f
 800591c:	003d08ff 	.word	0x003d08ff
 8005920:	431bde83 	.word	0x431bde83
 8005924:	10624dd3 	.word	0x10624dd3

08005928 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b088      	sub	sp, #32
 800592c:	af02      	add	r7, sp, #8
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	607a      	str	r2, [r7, #4]
 8005932:	461a      	mov	r2, r3
 8005934:	460b      	mov	r3, r1
 8005936:	817b      	strh	r3, [r7, #10]
 8005938:	4613      	mov	r3, r2
 800593a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800593c:	f7ff fbce 	bl	80050dc <HAL_GetTick>
 8005940:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005948:	b2db      	uxtb	r3, r3
 800594a:	2b20      	cmp	r3, #32
 800594c:	f040 80e0 	bne.w	8005b10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	2319      	movs	r3, #25
 8005956:	2201      	movs	r2, #1
 8005958:	4970      	ldr	r1, [pc, #448]	; (8005b1c <HAL_I2C_Master_Transmit+0x1f4>)
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 ff66 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005966:	2302      	movs	r3, #2
 8005968:	e0d3      	b.n	8005b12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005970:	2b01      	cmp	r3, #1
 8005972:	d101      	bne.n	8005978 <HAL_I2C_Master_Transmit+0x50>
 8005974:	2302      	movs	r3, #2
 8005976:	e0cc      	b.n	8005b12 <HAL_I2C_Master_Transmit+0x1ea>
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0301 	and.w	r3, r3, #1
 800598a:	2b01      	cmp	r3, #1
 800598c:	d007      	beq.n	800599e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f042 0201 	orr.w	r2, r2, #1
 800599c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681a      	ldr	r2, [r3, #0]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059ac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2221      	movs	r2, #33	; 0x21
 80059b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2210      	movs	r2, #16
 80059ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2200      	movs	r2, #0
 80059c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	893a      	ldrh	r2, [r7, #8]
 80059ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4a50      	ldr	r2, [pc, #320]	; (8005b20 <HAL_I2C_Master_Transmit+0x1f8>)
 80059de:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80059e0:	8979      	ldrh	r1, [r7, #10]
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	6a3a      	ldr	r2, [r7, #32]
 80059e6:	68f8      	ldr	r0, [r7, #12]
 80059e8:	f000 fce8 	bl	80063bc <I2C_MasterRequestWrite>
 80059ec:	4603      	mov	r3, r0
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d001      	beq.n	80059f6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e08d      	b.n	8005b12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059f6:	2300      	movs	r3, #0
 80059f8:	613b      	str	r3, [r7, #16]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	695b      	ldr	r3, [r3, #20]
 8005a00:	613b      	str	r3, [r7, #16]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	613b      	str	r3, [r7, #16]
 8005a0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005a0c:	e066      	b.n	8005adc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	6a39      	ldr	r1, [r7, #32]
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f000 ffe0 	bl	80069d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d00d      	beq.n	8005a3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a22:	2b04      	cmp	r3, #4
 8005a24:	d107      	bne.n	8005a36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e06b      	b.n	8005b12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a3e:	781a      	ldrb	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	1c5a      	adds	r2, r3, #1
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	3b01      	subs	r3, #1
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a62:	3b01      	subs	r3, #1
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	695b      	ldr	r3, [r3, #20]
 8005a70:	f003 0304 	and.w	r3, r3, #4
 8005a74:	2b04      	cmp	r3, #4
 8005a76:	d11b      	bne.n	8005ab0 <HAL_I2C_Master_Transmit+0x188>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d017      	beq.n	8005ab0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	781a      	ldrb	r2, [r3, #0]
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a90:	1c5a      	adds	r2, r3, #1
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005ab0:	697a      	ldr	r2, [r7, #20]
 8005ab2:	6a39      	ldr	r1, [r7, #32]
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f000 ffd0 	bl	8006a5a <I2C_WaitOnBTFFlagUntilTimeout>
 8005aba:	4603      	mov	r3, r0
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00d      	beq.n	8005adc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac4:	2b04      	cmp	r3, #4
 8005ac6:	d107      	bne.n	8005ad8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681a      	ldr	r2, [r3, #0]
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ad6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e01a      	b.n	8005b12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d194      	bne.n	8005a0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005af2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2220      	movs	r2, #32
 8005af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	e000      	b.n	8005b12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005b10:	2302      	movs	r3, #2
  }
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3718      	adds	r7, #24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
 8005b1a:	bf00      	nop
 8005b1c:	00100002 	.word	0x00100002
 8005b20:	ffff0000 	.word	0xffff0000

08005b24 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b08c      	sub	sp, #48	; 0x30
 8005b28:	af02      	add	r7, sp, #8
 8005b2a:	60f8      	str	r0, [r7, #12]
 8005b2c:	607a      	str	r2, [r7, #4]
 8005b2e:	461a      	mov	r2, r3
 8005b30:	460b      	mov	r3, r1
 8005b32:	817b      	strh	r3, [r7, #10]
 8005b34:	4613      	mov	r3, r2
 8005b36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005b38:	f7ff fad0 	bl	80050dc <HAL_GetTick>
 8005b3c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b20      	cmp	r3, #32
 8005b48:	f040 820b 	bne.w	8005f62 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	2319      	movs	r3, #25
 8005b52:	2201      	movs	r2, #1
 8005b54:	497c      	ldr	r1, [pc, #496]	; (8005d48 <HAL_I2C_Master_Receive+0x224>)
 8005b56:	68f8      	ldr	r0, [r7, #12]
 8005b58:	f000 fe68 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d001      	beq.n	8005b66 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005b62:	2302      	movs	r3, #2
 8005b64:	e1fe      	b.n	8005f64 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	d101      	bne.n	8005b74 <HAL_I2C_Master_Receive+0x50>
 8005b70:	2302      	movs	r3, #2
 8005b72:	e1f7      	b.n	8005f64 <HAL_I2C_Master_Receive+0x440>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d007      	beq.n	8005b9a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f042 0201 	orr.w	r2, r2, #1
 8005b98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681a      	ldr	r2, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ba8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2222      	movs	r2, #34	; 0x22
 8005bae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2210      	movs	r2, #16
 8005bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	687a      	ldr	r2, [r7, #4]
 8005bc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	893a      	ldrh	r2, [r7, #8]
 8005bca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bd0:	b29a      	uxth	r2, r3
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4a5c      	ldr	r2, [pc, #368]	; (8005d4c <HAL_I2C_Master_Receive+0x228>)
 8005bda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005bdc:	8979      	ldrh	r1, [r7, #10]
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	f000 fc6c 	bl	80064c0 <I2C_MasterRequestRead>
 8005be8:	4603      	mov	r3, r0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d001      	beq.n	8005bf2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e1b8      	b.n	8005f64 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d113      	bne.n	8005c22 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	623b      	str	r3, [r7, #32]
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	623b      	str	r3, [r7, #32]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	623b      	str	r3, [r7, #32]
 8005c0e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	e18c      	b.n	8005f3c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d11b      	bne.n	8005c62 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c38:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	61fb      	str	r3, [r7, #28]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	695b      	ldr	r3, [r3, #20]
 8005c44:	61fb      	str	r3, [r7, #28]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	61fb      	str	r3, [r7, #28]
 8005c4e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	e16c      	b.n	8005f3c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d11b      	bne.n	8005ca2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c78:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	61bb      	str	r3, [r7, #24]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	695b      	ldr	r3, [r3, #20]
 8005c94:	61bb      	str	r3, [r7, #24]
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	61bb      	str	r3, [r7, #24]
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	e14c      	b.n	8005f3c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005cb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	617b      	str	r3, [r7, #20]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	617b      	str	r3, [r7, #20]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	617b      	str	r3, [r7, #20]
 8005cc6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005cc8:	e138      	b.n	8005f3c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	f200 80f1 	bhi.w	8005eb6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d123      	bne.n	8005d24 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 fefb 	bl	8006adc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d001      	beq.n	8005cf0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e139      	b.n	8005f64 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	691a      	ldr	r2, [r3, #16]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	b2d2      	uxtb	r2, r2
 8005cfc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d18:	b29b      	uxth	r3, r3
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d22:	e10b      	b.n	8005f3c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d14e      	bne.n	8005dca <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d32:	2200      	movs	r2, #0
 8005d34:	4906      	ldr	r1, [pc, #24]	; (8005d50 <HAL_I2C_Master_Receive+0x22c>)
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f000 fd78 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d008      	beq.n	8005d54 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e10e      	b.n	8005f64 <HAL_I2C_Master_Receive+0x440>
 8005d46:	bf00      	nop
 8005d48:	00100002 	.word	0x00100002
 8005d4c:	ffff0000 	.word	0xffff0000
 8005d50:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	681a      	ldr	r2, [r3, #0]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	691a      	ldr	r2, [r3, #16]
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d6e:	b2d2      	uxtb	r2, r2
 8005d70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d76:	1c5a      	adds	r2, r3, #1
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d80:	3b01      	subs	r3, #1
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d8c:	b29b      	uxth	r3, r3
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	b29a      	uxth	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	691a      	ldr	r2, [r3, #16]
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da0:	b2d2      	uxtb	r2, r2
 8005da2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da8:	1c5a      	adds	r2, r3, #1
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005db2:	3b01      	subs	r3, #1
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005dc8:	e0b8      	b.n	8005f3c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	4966      	ldr	r1, [pc, #408]	; (8005f6c <HAL_I2C_Master_Receive+0x448>)
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 fd29 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d001      	beq.n	8005de4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005de0:	2301      	movs	r3, #1
 8005de2:	e0bf      	b.n	8005f64 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005df2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	691a      	ldr	r2, [r3, #16]
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dfe:	b2d2      	uxtb	r2, r2
 8005e00:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e06:	1c5a      	adds	r2, r3, #1
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e10:	3b01      	subs	r3, #1
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	3b01      	subs	r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e28:	9300      	str	r3, [sp, #0]
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	494f      	ldr	r1, [pc, #316]	; (8005f6c <HAL_I2C_Master_Receive+0x448>)
 8005e30:	68f8      	ldr	r0, [r7, #12]
 8005e32:	f000 fcfb 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d001      	beq.n	8005e40 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005e3c:	2301      	movs	r3, #1
 8005e3e:	e091      	b.n	8005f64 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	691a      	ldr	r2, [r3, #16]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5a:	b2d2      	uxtb	r2, r2
 8005e5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e62:	1c5a      	adds	r2, r3, #1
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	b29a      	uxth	r2, r3
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	691a      	ldr	r2, [r3, #16]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8c:	b2d2      	uxtb	r2, r2
 8005e8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eaa:	b29b      	uxth	r3, r3
 8005eac:	3b01      	subs	r3, #1
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005eb4:	e042      	b.n	8005f3c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005eb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 fe0e 	bl	8006adc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005ec0:	4603      	mov	r3, r0
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	e04c      	b.n	8005f64 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	691a      	ldr	r2, [r3, #16]
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed4:	b2d2      	uxtb	r2, r2
 8005ed6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005edc:	1c5a      	adds	r2, r3, #1
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	b29a      	uxth	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	b29a      	uxth	r2, r3
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	695b      	ldr	r3, [r3, #20]
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	2b04      	cmp	r3, #4
 8005f08:	d118      	bne.n	8005f3c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	691a      	ldr	r2, [r3, #16]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f14:	b2d2      	uxtb	r2, r2
 8005f16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f26:	3b01      	subs	r3, #1
 8005f28:	b29a      	uxth	r2, r3
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	3b01      	subs	r3, #1
 8005f36:	b29a      	uxth	r2, r3
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f47f aec2 	bne.w	8005cca <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2220      	movs	r2, #32
 8005f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	e000      	b.n	8005f64 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8005f62:	2302      	movs	r3, #2
  }
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3728      	adds	r7, #40	; 0x28
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	00010004 	.word	0x00010004

08005f70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b08c      	sub	sp, #48	; 0x30
 8005f74:	af02      	add	r7, sp, #8
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	4608      	mov	r0, r1
 8005f7a:	4611      	mov	r1, r2
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	4603      	mov	r3, r0
 8005f80:	817b      	strh	r3, [r7, #10]
 8005f82:	460b      	mov	r3, r1
 8005f84:	813b      	strh	r3, [r7, #8]
 8005f86:	4613      	mov	r3, r2
 8005f88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005f8a:	f7ff f8a7 	bl	80050dc <HAL_GetTick>
 8005f8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b20      	cmp	r3, #32
 8005f9a:	f040 8208 	bne.w	80063ae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	2319      	movs	r3, #25
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	497b      	ldr	r1, [pc, #492]	; (8006194 <HAL_I2C_Mem_Read+0x224>)
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f000 fc3f 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005fb4:	2302      	movs	r3, #2
 8005fb6:	e1fb      	b.n	80063b0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d101      	bne.n	8005fc6 <HAL_I2C_Mem_Read+0x56>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	e1f4      	b.n	80063b0 <HAL_I2C_Mem_Read+0x440>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d007      	beq.n	8005fec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f042 0201 	orr.w	r2, r2, #1
 8005fea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ffa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2222      	movs	r2, #34	; 0x22
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2240      	movs	r2, #64	; 0x40
 8006008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006016:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800601c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006022:	b29a      	uxth	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	4a5b      	ldr	r2, [pc, #364]	; (8006198 <HAL_I2C_Mem_Read+0x228>)
 800602c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800602e:	88f8      	ldrh	r0, [r7, #6]
 8006030:	893a      	ldrh	r2, [r7, #8]
 8006032:	8979      	ldrh	r1, [r7, #10]
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006036:	9301      	str	r3, [sp, #4]
 8006038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800603a:	9300      	str	r3, [sp, #0]
 800603c:	4603      	mov	r3, r0
 800603e:	68f8      	ldr	r0, [r7, #12]
 8006040:	f000 fb0c 	bl	800665c <I2C_RequestMemoryRead>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e1b0      	b.n	80063b0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006052:	2b00      	cmp	r3, #0
 8006054:	d113      	bne.n	800607e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006056:	2300      	movs	r3, #0
 8006058:	623b      	str	r3, [r7, #32]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	695b      	ldr	r3, [r3, #20]
 8006060:	623b      	str	r3, [r7, #32]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	699b      	ldr	r3, [r3, #24]
 8006068:	623b      	str	r3, [r7, #32]
 800606a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800607a:	601a      	str	r2, [r3, #0]
 800607c:	e184      	b.n	8006388 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006082:	2b01      	cmp	r3, #1
 8006084:	d11b      	bne.n	80060be <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006094:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006096:	2300      	movs	r3, #0
 8006098:	61fb      	str	r3, [r7, #28]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695b      	ldr	r3, [r3, #20]
 80060a0:	61fb      	str	r3, [r7, #28]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	61fb      	str	r3, [r7, #28]
 80060aa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	e164      	b.n	8006388 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d11b      	bne.n	80060fe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060d4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060e4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060e6:	2300      	movs	r3, #0
 80060e8:	61bb      	str	r3, [r7, #24]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	61bb      	str	r3, [r7, #24]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	61bb      	str	r3, [r7, #24]
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	e144      	b.n	8006388 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060fe:	2300      	movs	r3, #0
 8006100:	617b      	str	r3, [r7, #20]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	695b      	ldr	r3, [r3, #20]
 8006108:	617b      	str	r3, [r7, #20]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	617b      	str	r3, [r7, #20]
 8006112:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006114:	e138      	b.n	8006388 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800611a:	2b03      	cmp	r3, #3
 800611c:	f200 80f1 	bhi.w	8006302 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006124:	2b01      	cmp	r3, #1
 8006126:	d123      	bne.n	8006170 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800612a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800612c:	68f8      	ldr	r0, [r7, #12]
 800612e:	f000 fcd5 	bl	8006adc <I2C_WaitOnRXNEFlagUntilTimeout>
 8006132:	4603      	mov	r3, r0
 8006134:	2b00      	cmp	r3, #0
 8006136:	d001      	beq.n	800613c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	e139      	b.n	80063b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	691a      	ldr	r2, [r3, #16]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006146:	b2d2      	uxtb	r2, r2
 8006148:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006158:	3b01      	subs	r3, #1
 800615a:	b29a      	uxth	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006164:	b29b      	uxth	r3, r3
 8006166:	3b01      	subs	r3, #1
 8006168:	b29a      	uxth	r2, r3
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800616e:	e10b      	b.n	8006388 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006174:	2b02      	cmp	r3, #2
 8006176:	d14e      	bne.n	8006216 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800617e:	2200      	movs	r2, #0
 8006180:	4906      	ldr	r1, [pc, #24]	; (800619c <HAL_I2C_Mem_Read+0x22c>)
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f000 fb52 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d008      	beq.n	80061a0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e10e      	b.n	80063b0 <HAL_I2C_Mem_Read+0x440>
 8006192:	bf00      	nop
 8006194:	00100002 	.word	0x00100002
 8006198:	ffff0000 	.word	0xffff0000
 800619c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	691a      	ldr	r2, [r3, #16]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ba:	b2d2      	uxtb	r2, r2
 80061bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c2:	1c5a      	adds	r2, r3, #1
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061cc:	3b01      	subs	r3, #1
 80061ce:	b29a      	uxth	r2, r3
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d8:	b29b      	uxth	r3, r3
 80061da:	3b01      	subs	r3, #1
 80061dc:	b29a      	uxth	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	691a      	ldr	r2, [r3, #16]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ec:	b2d2      	uxtb	r2, r2
 80061ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061f4:	1c5a      	adds	r2, r3, #1
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061fe:	3b01      	subs	r3, #1
 8006200:	b29a      	uxth	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800620a:	b29b      	uxth	r3, r3
 800620c:	3b01      	subs	r3, #1
 800620e:	b29a      	uxth	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006214:	e0b8      	b.n	8006388 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006218:	9300      	str	r3, [sp, #0]
 800621a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800621c:	2200      	movs	r2, #0
 800621e:	4966      	ldr	r1, [pc, #408]	; (80063b8 <HAL_I2C_Mem_Read+0x448>)
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 fb03 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d001      	beq.n	8006230 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e0bf      	b.n	80063b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800623e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	691a      	ldr	r2, [r3, #16]
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800624a:	b2d2      	uxtb	r2, r2
 800624c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	1c5a      	adds	r2, r3, #1
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800625c:	3b01      	subs	r3, #1
 800625e:	b29a      	uxth	r2, r3
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006268:	b29b      	uxth	r3, r3
 800626a:	3b01      	subs	r3, #1
 800626c:	b29a      	uxth	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	9300      	str	r3, [sp, #0]
 8006276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006278:	2200      	movs	r2, #0
 800627a:	494f      	ldr	r1, [pc, #316]	; (80063b8 <HAL_I2C_Mem_Read+0x448>)
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f000 fad5 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d001      	beq.n	800628c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006288:	2301      	movs	r3, #1
 800628a:	e091      	b.n	80063b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681a      	ldr	r2, [r3, #0]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800629a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	691a      	ldr	r2, [r3, #16]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a6:	b2d2      	uxtb	r2, r2
 80062a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ae:	1c5a      	adds	r2, r3, #1
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062b8:	3b01      	subs	r3, #1
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	3b01      	subs	r3, #1
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	691a      	ldr	r2, [r3, #16]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d8:	b2d2      	uxtb	r2, r2
 80062da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e0:	1c5a      	adds	r2, r3, #1
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80062ea:	3b01      	subs	r3, #1
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062f6:	b29b      	uxth	r3, r3
 80062f8:	3b01      	subs	r3, #1
 80062fa:	b29a      	uxth	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006300:	e042      	b.n	8006388 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006304:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006306:	68f8      	ldr	r0, [r7, #12]
 8006308:	f000 fbe8 	bl	8006adc <I2C_WaitOnRXNEFlagUntilTimeout>
 800630c:	4603      	mov	r3, r0
 800630e:	2b00      	cmp	r3, #0
 8006310:	d001      	beq.n	8006316 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e04c      	b.n	80063b0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	691a      	ldr	r2, [r3, #16]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006320:	b2d2      	uxtb	r2, r2
 8006322:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006328:	1c5a      	adds	r2, r3, #1
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006332:	3b01      	subs	r3, #1
 8006334:	b29a      	uxth	r2, r3
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800633e:	b29b      	uxth	r3, r3
 8006340:	3b01      	subs	r3, #1
 8006342:	b29a      	uxth	r2, r3
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	f003 0304 	and.w	r3, r3, #4
 8006352:	2b04      	cmp	r3, #4
 8006354:	d118      	bne.n	8006388 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	691a      	ldr	r2, [r3, #16]
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006372:	3b01      	subs	r3, #1
 8006374:	b29a      	uxth	r2, r3
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800637e:	b29b      	uxth	r3, r3
 8006380:	3b01      	subs	r3, #1
 8006382:	b29a      	uxth	r2, r3
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800638c:	2b00      	cmp	r3, #0
 800638e:	f47f aec2 	bne.w	8006116 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2220      	movs	r2, #32
 8006396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2200      	movs	r2, #0
 80063a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80063aa:	2300      	movs	r3, #0
 80063ac:	e000      	b.n	80063b0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80063ae:	2302      	movs	r3, #2
  }
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3728      	adds	r7, #40	; 0x28
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}
 80063b8:	00010004 	.word	0x00010004

080063bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b088      	sub	sp, #32
 80063c0:	af02      	add	r7, sp, #8
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	607a      	str	r2, [r7, #4]
 80063c6:	603b      	str	r3, [r7, #0]
 80063c8:	460b      	mov	r3, r1
 80063ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	2b08      	cmp	r3, #8
 80063d6:	d006      	beq.n	80063e6 <I2C_MasterRequestWrite+0x2a>
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d003      	beq.n	80063e6 <I2C_MasterRequestWrite+0x2a>
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80063e4:	d108      	bne.n	80063f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80063f4:	601a      	str	r2, [r3, #0]
 80063f6:	e00b      	b.n	8006410 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fc:	2b12      	cmp	r3, #18
 80063fe:	d107      	bne.n	8006410 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800640e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	9300      	str	r3, [sp, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800641c:	68f8      	ldr	r0, [r7, #12]
 800641e:	f000 fa05 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 8006422:	4603      	mov	r3, r0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00d      	beq.n	8006444 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006432:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006436:	d103      	bne.n	8006440 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800643e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006440:	2303      	movs	r3, #3
 8006442:	e035      	b.n	80064b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800644c:	d108      	bne.n	8006460 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800644e:	897b      	ldrh	r3, [r7, #10]
 8006450:	b2db      	uxtb	r3, r3
 8006452:	461a      	mov	r2, r3
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800645c:	611a      	str	r2, [r3, #16]
 800645e:	e01b      	b.n	8006498 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006460:	897b      	ldrh	r3, [r7, #10]
 8006462:	11db      	asrs	r3, r3, #7
 8006464:	b2db      	uxtb	r3, r3
 8006466:	f003 0306 	and.w	r3, r3, #6
 800646a:	b2db      	uxtb	r3, r3
 800646c:	f063 030f 	orn	r3, r3, #15
 8006470:	b2da      	uxtb	r2, r3
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	490e      	ldr	r1, [pc, #56]	; (80064b8 <I2C_MasterRequestWrite+0xfc>)
 800647e:	68f8      	ldr	r0, [r7, #12]
 8006480:	f000 fa2b 	bl	80068da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006484:	4603      	mov	r3, r0
 8006486:	2b00      	cmp	r3, #0
 8006488:	d001      	beq.n	800648e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e010      	b.n	80064b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800648e:	897b      	ldrh	r3, [r7, #10]
 8006490:	b2da      	uxtb	r2, r3
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	4907      	ldr	r1, [pc, #28]	; (80064bc <I2C_MasterRequestWrite+0x100>)
 800649e:	68f8      	ldr	r0, [r7, #12]
 80064a0:	f000 fa1b 	bl	80068da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80064a4:	4603      	mov	r3, r0
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d001      	beq.n	80064ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	e000      	b.n	80064b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3718      	adds	r7, #24
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	00010008 	.word	0x00010008
 80064bc:	00010002 	.word	0x00010002

080064c0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80064c0:	b580      	push	{r7, lr}
 80064c2:	b088      	sub	sp, #32
 80064c4:	af02      	add	r7, sp, #8
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	607a      	str	r2, [r7, #4]
 80064ca:	603b      	str	r3, [r7, #0]
 80064cc:	460b      	mov	r3, r1
 80064ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80064e4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	d006      	beq.n	80064fa <I2C_MasterRequestRead+0x3a>
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d003      	beq.n	80064fa <I2C_MasterRequestRead+0x3a>
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80064f8:	d108      	bne.n	800650c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681a      	ldr	r2, [r3, #0]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006508:	601a      	str	r2, [r3, #0]
 800650a:	e00b      	b.n	8006524 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006510:	2b11      	cmp	r3, #17
 8006512:	d107      	bne.n	8006524 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006522:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	2200      	movs	r2, #0
 800652c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006530:	68f8      	ldr	r0, [r7, #12]
 8006532:	f000 f97b 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 8006536:	4603      	mov	r3, r0
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00d      	beq.n	8006558 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006546:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800654a:	d103      	bne.n	8006554 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006552:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006554:	2303      	movs	r3, #3
 8006556:	e079      	b.n	800664c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	691b      	ldr	r3, [r3, #16]
 800655c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006560:	d108      	bne.n	8006574 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006562:	897b      	ldrh	r3, [r7, #10]
 8006564:	b2db      	uxtb	r3, r3
 8006566:	f043 0301 	orr.w	r3, r3, #1
 800656a:	b2da      	uxtb	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	611a      	str	r2, [r3, #16]
 8006572:	e05f      	b.n	8006634 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006574:	897b      	ldrh	r3, [r7, #10]
 8006576:	11db      	asrs	r3, r3, #7
 8006578:	b2db      	uxtb	r3, r3
 800657a:	f003 0306 	and.w	r3, r3, #6
 800657e:	b2db      	uxtb	r3, r3
 8006580:	f063 030f 	orn	r3, r3, #15
 8006584:	b2da      	uxtb	r2, r3
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	4930      	ldr	r1, [pc, #192]	; (8006654 <I2C_MasterRequestRead+0x194>)
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f000 f9a1 	bl	80068da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006598:	4603      	mov	r3, r0
 800659a:	2b00      	cmp	r3, #0
 800659c:	d001      	beq.n	80065a2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800659e:	2301      	movs	r3, #1
 80065a0:	e054      	b.n	800664c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80065a2:	897b      	ldrh	r3, [r7, #10]
 80065a4:	b2da      	uxtb	r2, r3
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	4929      	ldr	r1, [pc, #164]	; (8006658 <I2C_MasterRequestRead+0x198>)
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 f991 	bl	80068da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80065b8:	4603      	mov	r3, r0
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e044      	b.n	800664c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065c2:	2300      	movs	r3, #0
 80065c4:	613b      	str	r3, [r7, #16]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	613b      	str	r3, [r7, #16]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	613b      	str	r3, [r7, #16]
 80065d6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80065e6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	9300      	str	r3, [sp, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80065f4:	68f8      	ldr	r0, [r7, #12]
 80065f6:	f000 f919 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 80065fa:	4603      	mov	r3, r0
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00d      	beq.n	800661c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800660a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800660e:	d103      	bne.n	8006618 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006616:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e017      	b.n	800664c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800661c:	897b      	ldrh	r3, [r7, #10]
 800661e:	11db      	asrs	r3, r3, #7
 8006620:	b2db      	uxtb	r3, r3
 8006622:	f003 0306 	and.w	r3, r3, #6
 8006626:	b2db      	uxtb	r3, r3
 8006628:	f063 030e 	orn	r3, r3, #14
 800662c:	b2da      	uxtb	r2, r3
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	687a      	ldr	r2, [r7, #4]
 8006638:	4907      	ldr	r1, [pc, #28]	; (8006658 <I2C_MasterRequestRead+0x198>)
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f000 f94d 	bl	80068da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e000      	b.n	800664c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800664a:	2300      	movs	r3, #0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3718      	adds	r7, #24
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	00010008 	.word	0x00010008
 8006658:	00010002 	.word	0x00010002

0800665c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b088      	sub	sp, #32
 8006660:	af02      	add	r7, sp, #8
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	4608      	mov	r0, r1
 8006666:	4611      	mov	r1, r2
 8006668:	461a      	mov	r2, r3
 800666a:	4603      	mov	r3, r0
 800666c:	817b      	strh	r3, [r7, #10]
 800666e:	460b      	mov	r3, r1
 8006670:	813b      	strh	r3, [r7, #8]
 8006672:	4613      	mov	r3, r2
 8006674:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006684:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006694:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006698:	9300      	str	r3, [sp, #0]
 800669a:	6a3b      	ldr	r3, [r7, #32]
 800669c:	2200      	movs	r2, #0
 800669e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80066a2:	68f8      	ldr	r0, [r7, #12]
 80066a4:	f000 f8c2 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 80066a8:	4603      	mov	r3, r0
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00d      	beq.n	80066ca <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066bc:	d103      	bne.n	80066c6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e0aa      	b.n	8006820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80066ca:	897b      	ldrh	r3, [r7, #10]
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	461a      	mov	r2, r3
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80066d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	6a3a      	ldr	r2, [r7, #32]
 80066de:	4952      	ldr	r1, [pc, #328]	; (8006828 <I2C_RequestMemoryRead+0x1cc>)
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f000 f8fa 	bl	80068da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d001      	beq.n	80066f0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e097      	b.n	8006820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066f0:	2300      	movs	r3, #0
 80066f2:	617b      	str	r3, [r7, #20]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	695b      	ldr	r3, [r3, #20]
 80066fa:	617b      	str	r3, [r7, #20]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	617b      	str	r3, [r7, #20]
 8006704:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006708:	6a39      	ldr	r1, [r7, #32]
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	f000 f964 	bl	80069d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	d00d      	beq.n	8006732 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800671a:	2b04      	cmp	r3, #4
 800671c:	d107      	bne.n	800672e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800672c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e076      	b.n	8006820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006732:	88fb      	ldrh	r3, [r7, #6]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d105      	bne.n	8006744 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006738:	893b      	ldrh	r3, [r7, #8]
 800673a:	b2da      	uxtb	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	611a      	str	r2, [r3, #16]
 8006742:	e021      	b.n	8006788 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006744:	893b      	ldrh	r3, [r7, #8]
 8006746:	0a1b      	lsrs	r3, r3, #8
 8006748:	b29b      	uxth	r3, r3
 800674a:	b2da      	uxtb	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006754:	6a39      	ldr	r1, [r7, #32]
 8006756:	68f8      	ldr	r0, [r7, #12]
 8006758:	f000 f93e 	bl	80069d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800675c:	4603      	mov	r3, r0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00d      	beq.n	800677e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006766:	2b04      	cmp	r3, #4
 8006768:	d107      	bne.n	800677a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006778:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e050      	b.n	8006820 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800677e:	893b      	ldrh	r3, [r7, #8]
 8006780:	b2da      	uxtb	r2, r3
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006788:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800678a:	6a39      	ldr	r1, [r7, #32]
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f000 f923 	bl	80069d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00d      	beq.n	80067b4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800679c:	2b04      	cmp	r3, #4
 800679e:	d107      	bne.n	80067b0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	681a      	ldr	r2, [r3, #0]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067ae:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80067b0:	2301      	movs	r3, #1
 80067b2:	e035      	b.n	8006820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067c2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80067c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 f82b 	bl	800682c <I2C_WaitOnFlagUntilTimeout>
 80067d6:	4603      	mov	r3, r0
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00d      	beq.n	80067f8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ea:	d103      	bne.n	80067f4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80067f4:	2303      	movs	r3, #3
 80067f6:	e013      	b.n	8006820 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80067f8:	897b      	ldrh	r3, [r7, #10]
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	f043 0301 	orr.w	r3, r3, #1
 8006800:	b2da      	uxtb	r2, r3
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680a:	6a3a      	ldr	r2, [r7, #32]
 800680c:	4906      	ldr	r1, [pc, #24]	; (8006828 <I2C_RequestMemoryRead+0x1cc>)
 800680e:	68f8      	ldr	r0, [r7, #12]
 8006810:	f000 f863 	bl	80068da <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e000      	b.n	8006820 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800681e:	2300      	movs	r3, #0
}
 8006820:	4618      	mov	r0, r3
 8006822:	3718      	adds	r7, #24
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}
 8006828:	00010002 	.word	0x00010002

0800682c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	4613      	mov	r3, r2
 800683a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800683c:	e025      	b.n	800688a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006844:	d021      	beq.n	800688a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006846:	f7fe fc49 	bl	80050dc <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	683a      	ldr	r2, [r7, #0]
 8006852:	429a      	cmp	r2, r3
 8006854:	d302      	bcc.n	800685c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d116      	bne.n	800688a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	2200      	movs	r2, #0
 8006860:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	2220      	movs	r2, #32
 8006866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006876:	f043 0220 	orr.w	r2, r3, #32
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006886:	2301      	movs	r3, #1
 8006888:	e023      	b.n	80068d2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	0c1b      	lsrs	r3, r3, #16
 800688e:	b2db      	uxtb	r3, r3
 8006890:	2b01      	cmp	r3, #1
 8006892:	d10d      	bne.n	80068b0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	43da      	mvns	r2, r3
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	4013      	ands	r3, r2
 80068a0:	b29b      	uxth	r3, r3
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	bf0c      	ite	eq
 80068a6:	2301      	moveq	r3, #1
 80068a8:	2300      	movne	r3, #0
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	461a      	mov	r2, r3
 80068ae:	e00c      	b.n	80068ca <I2C_WaitOnFlagUntilTimeout+0x9e>
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	43da      	mvns	r2, r3
 80068b8:	68bb      	ldr	r3, [r7, #8]
 80068ba:	4013      	ands	r3, r2
 80068bc:	b29b      	uxth	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	bf0c      	ite	eq
 80068c2:	2301      	moveq	r3, #1
 80068c4:	2300      	movne	r3, #0
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	461a      	mov	r2, r3
 80068ca:	79fb      	ldrb	r3, [r7, #7]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d0b6      	beq.n	800683e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b084      	sub	sp, #16
 80068de:	af00      	add	r7, sp, #0
 80068e0:	60f8      	str	r0, [r7, #12]
 80068e2:	60b9      	str	r1, [r7, #8]
 80068e4:	607a      	str	r2, [r7, #4]
 80068e6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068e8:	e051      	b.n	800698e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	695b      	ldr	r3, [r3, #20]
 80068f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80068f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068f8:	d123      	bne.n	8006942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	681a      	ldr	r2, [r3, #0]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006908:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006912:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2200      	movs	r2, #0
 8006918:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2220      	movs	r2, #32
 800691e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692e:	f043 0204 	orr.w	r2, r3, #4
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e046      	b.n	80069d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006948:	d021      	beq.n	800698e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800694a:	f7fe fbc7 	bl	80050dc <HAL_GetTick>
 800694e:	4602      	mov	r2, r0
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	1ad3      	subs	r3, r2, r3
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	429a      	cmp	r2, r3
 8006958:	d302      	bcc.n	8006960 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d116      	bne.n	800698e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	2220      	movs	r2, #32
 800696a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	2200      	movs	r2, #0
 8006972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800697a:	f043 0220 	orr.w	r2, r3, #32
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800698a:	2301      	movs	r3, #1
 800698c:	e020      	b.n	80069d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800698e:	68bb      	ldr	r3, [r7, #8]
 8006990:	0c1b      	lsrs	r3, r3, #16
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b01      	cmp	r3, #1
 8006996:	d10c      	bne.n	80069b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	43da      	mvns	r2, r3
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	4013      	ands	r3, r2
 80069a4:	b29b      	uxth	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	bf14      	ite	ne
 80069aa:	2301      	movne	r3, #1
 80069ac:	2300      	moveq	r3, #0
 80069ae:	b2db      	uxtb	r3, r3
 80069b0:	e00b      	b.n	80069ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	699b      	ldr	r3, [r3, #24]
 80069b8:	43da      	mvns	r2, r3
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	4013      	ands	r3, r2
 80069be:	b29b      	uxth	r3, r3
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	bf14      	ite	ne
 80069c4:	2301      	movne	r3, #1
 80069c6:	2300      	moveq	r3, #0
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d18d      	bne.n	80068ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80069ce:	2300      	movs	r3, #0
}
 80069d0:	4618      	mov	r0, r3
 80069d2:	3710      	adds	r7, #16
 80069d4:	46bd      	mov	sp, r7
 80069d6:	bd80      	pop	{r7, pc}

080069d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069e4:	e02d      	b.n	8006a42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80069e6:	68f8      	ldr	r0, [r7, #12]
 80069e8:	f000 f8ce 	bl	8006b88 <I2C_IsAcknowledgeFailed>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d001      	beq.n	80069f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e02d      	b.n	8006a52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80069fc:	d021      	beq.n	8006a42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069fe:	f7fe fb6d 	bl	80050dc <HAL_GetTick>
 8006a02:	4602      	mov	r2, r0
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	1ad3      	subs	r3, r2, r3
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d302      	bcc.n	8006a14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d116      	bne.n	8006a42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	2200      	movs	r2, #0
 8006a18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	2220      	movs	r2, #32
 8006a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2e:	f043 0220 	orr.w	r2, r3, #32
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e007      	b.n	8006a52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a4c:	2b80      	cmp	r3, #128	; 0x80
 8006a4e:	d1ca      	bne.n	80069e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006a5a:	b580      	push	{r7, lr}
 8006a5c:	b084      	sub	sp, #16
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	60f8      	str	r0, [r7, #12]
 8006a62:	60b9      	str	r1, [r7, #8]
 8006a64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a66:	e02d      	b.n	8006ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 f88d 	bl	8006b88 <I2C_IsAcknowledgeFailed>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d001      	beq.n	8006a78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e02d      	b.n	8006ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006a7e:	d021      	beq.n	8006ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a80:	f7fe fb2c 	bl	80050dc <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	68ba      	ldr	r2, [r7, #8]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	d302      	bcc.n	8006a96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d116      	bne.n	8006ac4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2220      	movs	r2, #32
 8006aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab0:	f043 0220 	orr.w	r2, r3, #32
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e007      	b.n	8006ad4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	695b      	ldr	r3, [r3, #20]
 8006aca:	f003 0304 	and.w	r3, r3, #4
 8006ace:	2b04      	cmp	r3, #4
 8006ad0:	d1ca      	bne.n	8006a68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}

08006adc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b084      	sub	sp, #16
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	60f8      	str	r0, [r7, #12]
 8006ae4:	60b9      	str	r1, [r7, #8]
 8006ae6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006ae8:	e042      	b.n	8006b70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	695b      	ldr	r3, [r3, #20]
 8006af0:	f003 0310 	and.w	r3, r3, #16
 8006af4:	2b10      	cmp	r3, #16
 8006af6:	d119      	bne.n	8006b2c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f06f 0210 	mvn.w	r2, #16
 8006b00:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e029      	b.n	8006b80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b2c:	f7fe fad6 	bl	80050dc <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d302      	bcc.n	8006b42 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006b3c:	68bb      	ldr	r3, [r7, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d116      	bne.n	8006b70 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5c:	f043 0220 	orr.w	r2, r3, #32
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e007      	b.n	8006b80 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	695b      	ldr	r3, [r3, #20]
 8006b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b7a:	2b40      	cmp	r3, #64	; 0x40
 8006b7c:	d1b5      	bne.n	8006aea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006b7e:	2300      	movs	r3, #0
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3710      	adds	r7, #16
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}

08006b88 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	695b      	ldr	r3, [r3, #20]
 8006b96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b9e:	d11b      	bne.n	8006bd8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ba8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2200      	movs	r2, #0
 8006bae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2220      	movs	r2, #32
 8006bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bc4:	f043 0204 	orr.w	r2, r3, #4
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2200      	movs	r2, #0
 8006bd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e000      	b.n	8006bda <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006bd8:	2300      	movs	r3, #0
}
 8006bda:	4618      	mov	r0, r3
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr

08006be6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006be6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006be8:	b08f      	sub	sp, #60	; 0x3c
 8006bea:	af0a      	add	r7, sp, #40	; 0x28
 8006bec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d101      	bne.n	8006bf8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e10f      	b.n	8006e18 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8006c04:	b2db      	uxtb	r3, r3
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d106      	bne.n	8006c18 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f00e f984 	bl	8014f20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2203      	movs	r2, #3
 8006c1c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d102      	bne.n	8006c32 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4618      	mov	r0, r3
 8006c38:	f003 fd1b 	bl	800a672 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	603b      	str	r3, [r7, #0]
 8006c42:	687e      	ldr	r6, [r7, #4]
 8006c44:	466d      	mov	r5, sp
 8006c46:	f106 0410 	add.w	r4, r6, #16
 8006c4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c4c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006c50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006c52:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006c56:	e885 0003 	stmia.w	r5, {r0, r1}
 8006c5a:	1d33      	adds	r3, r6, #4
 8006c5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c5e:	6838      	ldr	r0, [r7, #0]
 8006c60:	f003 fbf2 	bl	800a448 <USB_CoreInit>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d005      	beq.n	8006c76 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2202      	movs	r2, #2
 8006c6e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e0d0      	b.n	8006e18 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	f003 fd09 	bl	800a694 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c82:	2300      	movs	r3, #0
 8006c84:	73fb      	strb	r3, [r7, #15]
 8006c86:	e04a      	b.n	8006d1e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006c88:	7bfa      	ldrb	r2, [r7, #15]
 8006c8a:	6879      	ldr	r1, [r7, #4]
 8006c8c:	4613      	mov	r3, r2
 8006c8e:	00db      	lsls	r3, r3, #3
 8006c90:	1a9b      	subs	r3, r3, r2
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	440b      	add	r3, r1
 8006c96:	333d      	adds	r3, #61	; 0x3d
 8006c98:	2201      	movs	r2, #1
 8006c9a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006c9c:	7bfa      	ldrb	r2, [r7, #15]
 8006c9e:	6879      	ldr	r1, [r7, #4]
 8006ca0:	4613      	mov	r3, r2
 8006ca2:	00db      	lsls	r3, r3, #3
 8006ca4:	1a9b      	subs	r3, r3, r2
 8006ca6:	009b      	lsls	r3, r3, #2
 8006ca8:	440b      	add	r3, r1
 8006caa:	333c      	adds	r3, #60	; 0x3c
 8006cac:	7bfa      	ldrb	r2, [r7, #15]
 8006cae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006cb0:	7bfa      	ldrb	r2, [r7, #15]
 8006cb2:	7bfb      	ldrb	r3, [r7, #15]
 8006cb4:	b298      	uxth	r0, r3
 8006cb6:	6879      	ldr	r1, [r7, #4]
 8006cb8:	4613      	mov	r3, r2
 8006cba:	00db      	lsls	r3, r3, #3
 8006cbc:	1a9b      	subs	r3, r3, r2
 8006cbe:	009b      	lsls	r3, r3, #2
 8006cc0:	440b      	add	r3, r1
 8006cc2:	3342      	adds	r3, #66	; 0x42
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006cc8:	7bfa      	ldrb	r2, [r7, #15]
 8006cca:	6879      	ldr	r1, [r7, #4]
 8006ccc:	4613      	mov	r3, r2
 8006cce:	00db      	lsls	r3, r3, #3
 8006cd0:	1a9b      	subs	r3, r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	440b      	add	r3, r1
 8006cd6:	333f      	adds	r3, #63	; 0x3f
 8006cd8:	2200      	movs	r2, #0
 8006cda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006cdc:	7bfa      	ldrb	r2, [r7, #15]
 8006cde:	6879      	ldr	r1, [r7, #4]
 8006ce0:	4613      	mov	r3, r2
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	1a9b      	subs	r3, r3, r2
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	440b      	add	r3, r1
 8006cea:	3344      	adds	r3, #68	; 0x44
 8006cec:	2200      	movs	r2, #0
 8006cee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006cf0:	7bfa      	ldrb	r2, [r7, #15]
 8006cf2:	6879      	ldr	r1, [r7, #4]
 8006cf4:	4613      	mov	r3, r2
 8006cf6:	00db      	lsls	r3, r3, #3
 8006cf8:	1a9b      	subs	r3, r3, r2
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	440b      	add	r3, r1
 8006cfe:	3348      	adds	r3, #72	; 0x48
 8006d00:	2200      	movs	r2, #0
 8006d02:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006d04:	7bfa      	ldrb	r2, [r7, #15]
 8006d06:	6879      	ldr	r1, [r7, #4]
 8006d08:	4613      	mov	r3, r2
 8006d0a:	00db      	lsls	r3, r3, #3
 8006d0c:	1a9b      	subs	r3, r3, r2
 8006d0e:	009b      	lsls	r3, r3, #2
 8006d10:	440b      	add	r3, r1
 8006d12:	3350      	adds	r3, #80	; 0x50
 8006d14:	2200      	movs	r2, #0
 8006d16:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
 8006d1a:	3301      	adds	r3, #1
 8006d1c:	73fb      	strb	r3, [r7, #15]
 8006d1e:	7bfa      	ldrb	r2, [r7, #15]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d3af      	bcc.n	8006c88 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d28:	2300      	movs	r3, #0
 8006d2a:	73fb      	strb	r3, [r7, #15]
 8006d2c:	e044      	b.n	8006db8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006d2e:	7bfa      	ldrb	r2, [r7, #15]
 8006d30:	6879      	ldr	r1, [r7, #4]
 8006d32:	4613      	mov	r3, r2
 8006d34:	00db      	lsls	r3, r3, #3
 8006d36:	1a9b      	subs	r3, r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	440b      	add	r3, r1
 8006d3c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8006d40:	2200      	movs	r2, #0
 8006d42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006d44:	7bfa      	ldrb	r2, [r7, #15]
 8006d46:	6879      	ldr	r1, [r7, #4]
 8006d48:	4613      	mov	r3, r2
 8006d4a:	00db      	lsls	r3, r3, #3
 8006d4c:	1a9b      	subs	r3, r3, r2
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	440b      	add	r3, r1
 8006d52:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8006d56:	7bfa      	ldrb	r2, [r7, #15]
 8006d58:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006d5a:	7bfa      	ldrb	r2, [r7, #15]
 8006d5c:	6879      	ldr	r1, [r7, #4]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	00db      	lsls	r3, r3, #3
 8006d62:	1a9b      	subs	r3, r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	440b      	add	r3, r1
 8006d68:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8006d70:	7bfa      	ldrb	r2, [r7, #15]
 8006d72:	6879      	ldr	r1, [r7, #4]
 8006d74:	4613      	mov	r3, r2
 8006d76:	00db      	lsls	r3, r3, #3
 8006d78:	1a9b      	subs	r3, r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	440b      	add	r3, r1
 8006d7e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006d82:	2200      	movs	r2, #0
 8006d84:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006d86:	7bfa      	ldrb	r2, [r7, #15]
 8006d88:	6879      	ldr	r1, [r7, #4]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	00db      	lsls	r3, r3, #3
 8006d8e:	1a9b      	subs	r3, r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	440b      	add	r3, r1
 8006d94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006d98:	2200      	movs	r2, #0
 8006d9a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006d9c:	7bfa      	ldrb	r2, [r7, #15]
 8006d9e:	6879      	ldr	r1, [r7, #4]
 8006da0:	4613      	mov	r3, r2
 8006da2:	00db      	lsls	r3, r3, #3
 8006da4:	1a9b      	subs	r3, r3, r2
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	440b      	add	r3, r1
 8006daa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006dae:	2200      	movs	r2, #0
 8006db0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006db2:	7bfb      	ldrb	r3, [r7, #15]
 8006db4:	3301      	adds	r3, #1
 8006db6:	73fb      	strb	r3, [r7, #15]
 8006db8:	7bfa      	ldrb	r2, [r7, #15]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	685b      	ldr	r3, [r3, #4]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d3b5      	bcc.n	8006d2e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	603b      	str	r3, [r7, #0]
 8006dc8:	687e      	ldr	r6, [r7, #4]
 8006dca:	466d      	mov	r5, sp
 8006dcc:	f106 0410 	add.w	r4, r6, #16
 8006dd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006dd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006dd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006dd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006dd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006ddc:	e885 0003 	stmia.w	r5, {r0, r1}
 8006de0:	1d33      	adds	r3, r6, #4
 8006de2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006de4:	6838      	ldr	r0, [r7, #0]
 8006de6:	f003 fca1 	bl	800a72c <USB_DevInit>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d005      	beq.n	8006dfc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2202      	movs	r2, #2
 8006df4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e00d      	b.n	8006e18 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4618      	mov	r0, r3
 8006e12:	f004 fd1d 	bl	800b850 <USB_DevDisconnect>

  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3714      	adds	r7, #20
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006e20 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d101      	bne.n	8006e3c <HAL_PCD_Start+0x1c>
 8006e38:	2302      	movs	r3, #2
 8006e3a:	e020      	b.n	8006e7e <HAL_PCD_Start+0x5e>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2201      	movs	r2, #1
 8006e40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e48:	2b01      	cmp	r3, #1
 8006e4a:	d109      	bne.n	8006e60 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8006e50:	2b01      	cmp	r3, #1
 8006e52:	d005      	beq.n	8006e60 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e58:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	4618      	mov	r0, r3
 8006e66:	f003 fbf3 	bl	800a650 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f004 fccd 	bl	800b80e <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3710      	adds	r7, #16
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}

08006e86 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006e86:	b590      	push	{r4, r7, lr}
 8006e88:	b08d      	sub	sp, #52	; 0x34
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e94:	6a3b      	ldr	r3, [r7, #32]
 8006e96:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f004 fd8b 	bl	800b9b8 <USB_GetMode>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	f040 839d 	bne.w	80075e4 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f004 fcef 	bl	800b892 <USB_ReadInterrupts>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f000 8393 	beq.w	80075e2 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f004 fce6 	bl	800b892 <USB_ReadInterrupts>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	f003 0302 	and.w	r3, r3, #2
 8006ecc:	2b02      	cmp	r3, #2
 8006ece:	d107      	bne.n	8006ee0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	695a      	ldr	r2, [r3, #20]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f002 0202 	and.w	r2, r2, #2
 8006ede:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f004 fcd4 	bl	800b892 <USB_ReadInterrupts>
 8006eea:	4603      	mov	r3, r0
 8006eec:	f003 0310 	and.w	r3, r3, #16
 8006ef0:	2b10      	cmp	r3, #16
 8006ef2:	d161      	bne.n	8006fb8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	699a      	ldr	r2, [r3, #24]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f022 0210 	bic.w	r2, r2, #16
 8006f02:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8006f04:	6a3b      	ldr	r3, [r7, #32]
 8006f06:	6a1b      	ldr	r3, [r3, #32]
 8006f08:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	f003 020f 	and.w	r2, r3, #15
 8006f10:	4613      	mov	r3, r2
 8006f12:	00db      	lsls	r3, r3, #3
 8006f14:	1a9b      	subs	r3, r3, r2
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	4413      	add	r3, r2
 8006f20:	3304      	adds	r3, #4
 8006f22:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8006f24:	69bb      	ldr	r3, [r7, #24]
 8006f26:	0c5b      	lsrs	r3, r3, #17
 8006f28:	f003 030f 	and.w	r3, r3, #15
 8006f2c:	2b02      	cmp	r3, #2
 8006f2e:	d124      	bne.n	8006f7a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8006f30:	69ba      	ldr	r2, [r7, #24]
 8006f32:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006f36:	4013      	ands	r3, r2
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d035      	beq.n	8006fa8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8006f40:	69bb      	ldr	r3, [r7, #24]
 8006f42:	091b      	lsrs	r3, r3, #4
 8006f44:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006f46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	6a38      	ldr	r0, [r7, #32]
 8006f50:	f004 fb0b 	bl	800b56a <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	68da      	ldr	r2, [r3, #12]
 8006f58:	69bb      	ldr	r3, [r7, #24]
 8006f5a:	091b      	lsrs	r3, r3, #4
 8006f5c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f60:	441a      	add	r2, r3
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	699a      	ldr	r2, [r3, #24]
 8006f6a:	69bb      	ldr	r3, [r7, #24]
 8006f6c:	091b      	lsrs	r3, r3, #4
 8006f6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006f72:	441a      	add	r2, r3
 8006f74:	697b      	ldr	r3, [r7, #20]
 8006f76:	619a      	str	r2, [r3, #24]
 8006f78:	e016      	b.n	8006fa8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	0c5b      	lsrs	r3, r3, #17
 8006f7e:	f003 030f 	and.w	r3, r3, #15
 8006f82:	2b06      	cmp	r3, #6
 8006f84:	d110      	bne.n	8006fa8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006f8c:	2208      	movs	r2, #8
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6a38      	ldr	r0, [r7, #32]
 8006f92:	f004 faea 	bl	800b56a <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	699a      	ldr	r2, [r3, #24]
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	091b      	lsrs	r3, r3, #4
 8006f9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006fa2:	441a      	add	r2, r3
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	699a      	ldr	r2, [r3, #24]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f042 0210 	orr.w	r2, r2, #16
 8006fb6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	f004 fc68 	bl	800b892 <USB_ReadInterrupts>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006fc8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006fcc:	d16e      	bne.n	80070ac <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f004 fc6e 	bl	800b8b8 <USB_ReadDevAllOutEpInterrupt>
 8006fdc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8006fde:	e062      	b.n	80070a6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d057      	beq.n	800709a <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ff0:	b2d2      	uxtb	r2, r2
 8006ff2:	4611      	mov	r1, r2
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f004 fc93 	bl	800b920 <USB_ReadDevOutEPInterrupt>
 8006ffa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00c      	beq.n	8007020 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8007006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007008:	015a      	lsls	r2, r3, #5
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	4413      	add	r3, r2
 800700e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007012:	461a      	mov	r2, r3
 8007014:	2301      	movs	r3, #1
 8007016:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8007018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fdb0 	bl	8007b80 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	f003 0308 	and.w	r3, r3, #8
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00c      	beq.n	8007044 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800702a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702c:	015a      	lsls	r2, r3, #5
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	4413      	add	r3, r2
 8007032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007036:	461a      	mov	r2, r3
 8007038:	2308      	movs	r3, #8
 800703a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800703c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 feaa 	bl	8007d98 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8007044:	693b      	ldr	r3, [r7, #16]
 8007046:	f003 0310 	and.w	r3, r3, #16
 800704a:	2b00      	cmp	r3, #0
 800704c:	d008      	beq.n	8007060 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007050:	015a      	lsls	r2, r3, #5
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	4413      	add	r3, r2
 8007056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800705a:	461a      	mov	r2, r3
 800705c:	2310      	movs	r3, #16
 800705e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f003 0320 	and.w	r3, r3, #32
 8007066:	2b00      	cmp	r3, #0
 8007068:	d008      	beq.n	800707c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800706a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706c:	015a      	lsls	r2, r3, #5
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	4413      	add	r3, r2
 8007072:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007076:	461a      	mov	r2, r3
 8007078:	2320      	movs	r3, #32
 800707a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007082:	2b00      	cmp	r3, #0
 8007084:	d009      	beq.n	800709a <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8007086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007088:	015a      	lsls	r2, r3, #5
 800708a:	69fb      	ldr	r3, [r7, #28]
 800708c:	4413      	add	r3, r2
 800708e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007092:	461a      	mov	r2, r3
 8007094:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007098:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800709a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800709c:	3301      	adds	r3, #1
 800709e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80070a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a2:	085b      	lsrs	r3, r3, #1
 80070a4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80070a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d199      	bne.n	8006fe0 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4618      	mov	r0, r3
 80070b2:	f004 fbee 	bl	800b892 <USB_ReadInterrupts>
 80070b6:	4603      	mov	r3, r0
 80070b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80070bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80070c0:	f040 80c0 	bne.w	8007244 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f004 fc0f 	bl	800b8ec <USB_ReadDevAllInEpInterrupt>
 80070ce:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80070d0:	2300      	movs	r3, #0
 80070d2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80070d4:	e0b2      	b.n	800723c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80070d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b00      	cmp	r3, #0
 80070de:	f000 80a7 	beq.w	8007230 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070e8:	b2d2      	uxtb	r2, r2
 80070ea:	4611      	mov	r1, r2
 80070ec:	4618      	mov	r0, r3
 80070ee:	f004 fc35 	bl	800b95c <USB_ReadDevInEPInterrupt>
 80070f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80070f4:	693b      	ldr	r3, [r7, #16]
 80070f6:	f003 0301 	and.w	r3, r3, #1
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d057      	beq.n	80071ae <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80070fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007100:	f003 030f 	and.w	r3, r3, #15
 8007104:	2201      	movs	r2, #1
 8007106:	fa02 f303 	lsl.w	r3, r2, r3
 800710a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800710c:	69fb      	ldr	r3, [r7, #28]
 800710e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	43db      	mvns	r3, r3
 8007118:	69f9      	ldr	r1, [r7, #28]
 800711a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800711e:	4013      	ands	r3, r2
 8007120:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8007122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007124:	015a      	lsls	r2, r3, #5
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	4413      	add	r3, r2
 800712a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800712e:	461a      	mov	r2, r3
 8007130:	2301      	movs	r3, #1
 8007132:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	691b      	ldr	r3, [r3, #16]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d132      	bne.n	80071a2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800713c:	6879      	ldr	r1, [r7, #4]
 800713e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007140:	4613      	mov	r3, r2
 8007142:	00db      	lsls	r3, r3, #3
 8007144:	1a9b      	subs	r3, r3, r2
 8007146:	009b      	lsls	r3, r3, #2
 8007148:	440b      	add	r3, r1
 800714a:	3348      	adds	r3, #72	; 0x48
 800714c:	6819      	ldr	r1, [r3, #0]
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007152:	4613      	mov	r3, r2
 8007154:	00db      	lsls	r3, r3, #3
 8007156:	1a9b      	subs	r3, r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	4403      	add	r3, r0
 800715c:	3344      	adds	r3, #68	; 0x44
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4419      	add	r1, r3
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007166:	4613      	mov	r3, r2
 8007168:	00db      	lsls	r3, r3, #3
 800716a:	1a9b      	subs	r3, r3, r2
 800716c:	009b      	lsls	r3, r3, #2
 800716e:	4403      	add	r3, r0
 8007170:	3348      	adds	r3, #72	; 0x48
 8007172:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8007174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007176:	2b00      	cmp	r3, #0
 8007178:	d113      	bne.n	80071a2 <HAL_PCD_IRQHandler+0x31c>
 800717a:	6879      	ldr	r1, [r7, #4]
 800717c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800717e:	4613      	mov	r3, r2
 8007180:	00db      	lsls	r3, r3, #3
 8007182:	1a9b      	subs	r3, r3, r2
 8007184:	009b      	lsls	r3, r3, #2
 8007186:	440b      	add	r3, r1
 8007188:	3350      	adds	r3, #80	; 0x50
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d108      	bne.n	80071a2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	6818      	ldr	r0, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800719a:	461a      	mov	r2, r3
 800719c:	2101      	movs	r1, #1
 800719e:	f004 fc3d 	bl	800ba1c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80071a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a4:	b2db      	uxtb	r3, r3
 80071a6:	4619      	mov	r1, r3
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f00d ff48 	bl	801503e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	f003 0308 	and.w	r3, r3, #8
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d008      	beq.n	80071ca <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	015a      	lsls	r2, r3, #5
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	4413      	add	r3, r2
 80071c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c4:	461a      	mov	r2, r3
 80071c6:	2308      	movs	r3, #8
 80071c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	f003 0310 	and.w	r3, r3, #16
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d008      	beq.n	80071e6 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	015a      	lsls	r2, r3, #5
 80071d8:	69fb      	ldr	r3, [r7, #28]
 80071da:	4413      	add	r3, r2
 80071dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e0:	461a      	mov	r2, r3
 80071e2:	2310      	movs	r3, #16
 80071e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d008      	beq.n	8007202 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80071f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f2:	015a      	lsls	r2, r3, #5
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	4413      	add	r3, r2
 80071f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071fc:	461a      	mov	r2, r3
 80071fe:	2340      	movs	r3, #64	; 0x40
 8007200:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	f003 0302 	and.w	r3, r3, #2
 8007208:	2b00      	cmp	r3, #0
 800720a:	d008      	beq.n	800721e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800720c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720e:	015a      	lsls	r2, r3, #5
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	4413      	add	r3, r2
 8007214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007218:	461a      	mov	r2, r3
 800721a:	2302      	movs	r3, #2
 800721c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007224:	2b00      	cmp	r3, #0
 8007226:	d003      	beq.n	8007230 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8007228:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fc1b 	bl	8007a66 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	3301      	adds	r3, #1
 8007234:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8007236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007238:	085b      	lsrs	r3, r3, #1
 800723a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800723c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723e:	2b00      	cmp	r3, #0
 8007240:	f47f af49 	bne.w	80070d6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4618      	mov	r0, r3
 800724a:	f004 fb22 	bl	800b892 <USB_ReadInterrupts>
 800724e:	4603      	mov	r3, r0
 8007250:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007254:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007258:	d122      	bne.n	80072a0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800725a:	69fb      	ldr	r3, [r7, #28]
 800725c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	69fa      	ldr	r2, [r7, #28]
 8007264:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007268:	f023 0301 	bic.w	r3, r3, #1
 800726c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8007274:	2b01      	cmp	r3, #1
 8007276:	d108      	bne.n	800728a <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2200      	movs	r2, #0
 800727c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8007280:	2100      	movs	r1, #0
 8007282:	6878      	ldr	r0, [r7, #4]
 8007284:	f000 fe26 	bl	8007ed4 <HAL_PCDEx_LPM_Callback>
 8007288:	e002      	b.n	8007290 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f00d ff4e 	bl	801512c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	695a      	ldr	r2, [r3, #20]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800729e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4618      	mov	r0, r3
 80072a6:	f004 faf4 	bl	800b892 <USB_ReadInterrupts>
 80072aa:	4603      	mov	r3, r0
 80072ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072b4:	d112      	bne.n	80072dc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	2b01      	cmp	r3, #1
 80072c4:	d102      	bne.n	80072cc <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f00d ff0a 	bl	80150e0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	695a      	ldr	r2, [r3, #20]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80072da:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4618      	mov	r0, r3
 80072e2:	f004 fad6 	bl	800b892 <USB_ReadInterrupts>
 80072e6:	4603      	mov	r3, r0
 80072e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80072ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072f0:	f040 80c7 	bne.w	8007482 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	69fa      	ldr	r2, [r7, #28]
 80072fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007302:	f023 0301 	bic.w	r3, r3, #1
 8007306:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2110      	movs	r1, #16
 800730e:	4618      	mov	r0, r3
 8007310:	f003 fb70 	bl	800a9f4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007314:	2300      	movs	r3, #0
 8007316:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007318:	e056      	b.n	80073c8 <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800731a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731c:	015a      	lsls	r2, r3, #5
 800731e:	69fb      	ldr	r3, [r7, #28]
 8007320:	4413      	add	r3, r2
 8007322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007326:	461a      	mov	r2, r3
 8007328:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800732c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800732e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007330:	015a      	lsls	r2, r3, #5
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	4413      	add	r3, r2
 8007336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800733e:	0151      	lsls	r1, r2, #5
 8007340:	69fa      	ldr	r2, [r7, #28]
 8007342:	440a      	add	r2, r1
 8007344:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007348:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800734c:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800734e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007350:	015a      	lsls	r2, r3, #5
 8007352:	69fb      	ldr	r3, [r7, #28]
 8007354:	4413      	add	r3, r2
 8007356:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800735e:	0151      	lsls	r1, r2, #5
 8007360:	69fa      	ldr	r2, [r7, #28]
 8007362:	440a      	add	r2, r1
 8007364:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007368:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800736c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800736e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007370:	015a      	lsls	r2, r3, #5
 8007372:	69fb      	ldr	r3, [r7, #28]
 8007374:	4413      	add	r3, r2
 8007376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800737a:	461a      	mov	r2, r3
 800737c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007380:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007384:	015a      	lsls	r2, r3, #5
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	4413      	add	r3, r2
 800738a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007392:	0151      	lsls	r1, r2, #5
 8007394:	69fa      	ldr	r2, [r7, #28]
 8007396:	440a      	add	r2, r1
 8007398:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800739c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80073a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80073a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a4:	015a      	lsls	r2, r3, #5
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	4413      	add	r3, r2
 80073aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073b2:	0151      	lsls	r1, r2, #5
 80073b4:	69fa      	ldr	r2, [r7, #28]
 80073b6:	440a      	add	r2, r1
 80073b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073bc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80073c0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80073c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073c4:	3301      	adds	r3, #1
 80073c6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073ce:	429a      	cmp	r2, r3
 80073d0:	d3a3      	bcc.n	800731a <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073d8:	69db      	ldr	r3, [r3, #28]
 80073da:	69fa      	ldr	r2, [r7, #28]
 80073dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073e0:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80073e4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d016      	beq.n	800741c <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80073ee:	69fb      	ldr	r3, [r7, #28]
 80073f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073f8:	69fa      	ldr	r2, [r7, #28]
 80073fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073fe:	f043 030b 	orr.w	r3, r3, #11
 8007402:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8007406:	69fb      	ldr	r3, [r7, #28]
 8007408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800740c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800740e:	69fa      	ldr	r2, [r7, #28]
 8007410:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007414:	f043 030b 	orr.w	r3, r3, #11
 8007418:	6453      	str	r3, [r2, #68]	; 0x44
 800741a:	e015      	b.n	8007448 <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800741c:	69fb      	ldr	r3, [r7, #28]
 800741e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007422:	695b      	ldr	r3, [r3, #20]
 8007424:	69fa      	ldr	r2, [r7, #28]
 8007426:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800742a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800742e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8007432:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8007434:	69fb      	ldr	r3, [r7, #28]
 8007436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800743a:	691b      	ldr	r3, [r3, #16]
 800743c:	69fa      	ldr	r2, [r7, #28]
 800743e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007442:	f043 030b 	orr.w	r3, r3, #11
 8007446:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	69fa      	ldr	r2, [r7, #28]
 8007452:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007456:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800745a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	6818      	ldr	r0, [r3, #0]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	691b      	ldr	r3, [r3, #16]
 8007464:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800746c:	461a      	mov	r2, r3
 800746e:	f004 fad5 	bl	800ba1c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	695a      	ldr	r2, [r3, #20]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8007480:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4618      	mov	r0, r3
 8007488:	f004 fa03 	bl	800b892 <USB_ReadInterrupts>
 800748c:	4603      	mov	r3, r0
 800748e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007496:	d124      	bne.n	80074e2 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4618      	mov	r0, r3
 800749e:	f004 fa99 	bl	800b9d4 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4618      	mov	r0, r3
 80074a8:	f003 fb01 	bl	800aaae <USB_GetDevSpeed>
 80074ac:	4603      	mov	r3, r0
 80074ae:	461a      	mov	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681c      	ldr	r4, [r3, #0]
 80074b8:	f001 f958 	bl	800876c <HAL_RCC_GetHCLKFreq>
 80074bc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	461a      	mov	r2, r3
 80074c6:	4620      	mov	r0, r4
 80074c8:	f003 f820 	bl	800a50c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80074cc:	6878      	ldr	r0, [r7, #4]
 80074ce:	f00d fdde 	bl	801508e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	695a      	ldr	r2, [r3, #20]
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80074e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	4618      	mov	r0, r3
 80074e8:	f004 f9d3 	bl	800b892 <USB_ReadInterrupts>
 80074ec:	4603      	mov	r3, r0
 80074ee:	f003 0308 	and.w	r3, r3, #8
 80074f2:	2b08      	cmp	r3, #8
 80074f4:	d10a      	bne.n	800750c <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f00d fdbb 	bl	8015072 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	695a      	ldr	r2, [r3, #20]
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f002 0208 	and.w	r2, r2, #8
 800750a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4618      	mov	r0, r3
 8007512:	f004 f9be 	bl	800b892 <USB_ReadInterrupts>
 8007516:	4603      	mov	r3, r0
 8007518:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800751c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007520:	d10f      	bne.n	8007542 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007522:	2300      	movs	r3, #0
 8007524:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8007526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007528:	b2db      	uxtb	r3, r3
 800752a:	4619      	mov	r1, r3
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f00d fe1d 	bl	801516c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	695a      	ldr	r2, [r3, #20]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8007540:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4618      	mov	r0, r3
 8007548:	f004 f9a3 	bl	800b892 <USB_ReadInterrupts>
 800754c:	4603      	mov	r3, r0
 800754e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007552:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007556:	d10f      	bne.n	8007578 <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8007558:	2300      	movs	r3, #0
 800755a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800755c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755e:	b2db      	uxtb	r3, r3
 8007560:	4619      	mov	r1, r3
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f00d fdf0 	bl	8015148 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	695a      	ldr	r2, [r3, #20]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8007576:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4618      	mov	r0, r3
 800757e:	f004 f988 	bl	800b892 <USB_ReadInterrupts>
 8007582:	4603      	mov	r3, r0
 8007584:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800758c:	d10a      	bne.n	80075a4 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f00d fdfe 	bl	8015190 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	695a      	ldr	r2, [r3, #20]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80075a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4618      	mov	r0, r3
 80075aa:	f004 f972 	bl	800b892 <USB_ReadInterrupts>
 80075ae:	4603      	mov	r3, r0
 80075b0:	f003 0304 	and.w	r3, r3, #4
 80075b4:	2b04      	cmp	r3, #4
 80075b6:	d115      	bne.n	80075e4 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80075c0:	69bb      	ldr	r3, [r7, #24]
 80075c2:	f003 0304 	and.w	r3, r3, #4
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d002      	beq.n	80075d0 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f00d fdee 	bl	80151ac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	6859      	ldr	r1, [r3, #4]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	69ba      	ldr	r2, [r7, #24]
 80075dc:	430a      	orrs	r2, r1
 80075de:	605a      	str	r2, [r3, #4]
 80075e0:	e000      	b.n	80075e4 <HAL_PCD_IRQHandler+0x75e>
      return;
 80075e2:	bf00      	nop
    }
  }
}
 80075e4:	3734      	adds	r7, #52	; 0x34
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd90      	pop	{r4, r7, pc}

080075ea <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80075ea:	b580      	push	{r7, lr}
 80075ec:	b082      	sub	sp, #8
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	460b      	mov	r3, r1
 80075f4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d101      	bne.n	8007604 <HAL_PCD_SetAddress+0x1a>
 8007600:	2302      	movs	r3, #2
 8007602:	e013      	b.n	800762c <HAL_PCD_SetAddress+0x42>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2201      	movs	r2, #1
 8007608:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	78fa      	ldrb	r2, [r7, #3]
 8007610:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	78fa      	ldrb	r2, [r7, #3]
 800761a:	4611      	mov	r1, r2
 800761c:	4618      	mov	r0, r3
 800761e:	f004 f8d0 	bl	800b7c2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800762a:	2300      	movs	r3, #0
}
 800762c:	4618      	mov	r0, r3
 800762e:	3708      	adds	r7, #8
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
 800763c:	4608      	mov	r0, r1
 800763e:	4611      	mov	r1, r2
 8007640:	461a      	mov	r2, r3
 8007642:	4603      	mov	r3, r0
 8007644:	70fb      	strb	r3, [r7, #3]
 8007646:	460b      	mov	r3, r1
 8007648:	803b      	strh	r3, [r7, #0]
 800764a:	4613      	mov	r3, r2
 800764c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800764e:	2300      	movs	r3, #0
 8007650:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007652:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007656:	2b00      	cmp	r3, #0
 8007658:	da0f      	bge.n	800767a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800765a:	78fb      	ldrb	r3, [r7, #3]
 800765c:	f003 020f 	and.w	r2, r3, #15
 8007660:	4613      	mov	r3, r2
 8007662:	00db      	lsls	r3, r3, #3
 8007664:	1a9b      	subs	r3, r3, r2
 8007666:	009b      	lsls	r3, r3, #2
 8007668:	3338      	adds	r3, #56	; 0x38
 800766a:	687a      	ldr	r2, [r7, #4]
 800766c:	4413      	add	r3, r2
 800766e:	3304      	adds	r3, #4
 8007670:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2201      	movs	r2, #1
 8007676:	705a      	strb	r2, [r3, #1]
 8007678:	e00f      	b.n	800769a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800767a:	78fb      	ldrb	r3, [r7, #3]
 800767c:	f003 020f 	and.w	r2, r3, #15
 8007680:	4613      	mov	r3, r2
 8007682:	00db      	lsls	r3, r3, #3
 8007684:	1a9b      	subs	r3, r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	4413      	add	r3, r2
 8007690:	3304      	adds	r3, #4
 8007692:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800769a:	78fb      	ldrb	r3, [r7, #3]
 800769c:	f003 030f 	and.w	r3, r3, #15
 80076a0:	b2da      	uxtb	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80076a6:	883a      	ldrh	r2, [r7, #0]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	78ba      	ldrb	r2, [r7, #2]
 80076b0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	785b      	ldrb	r3, [r3, #1]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d004      	beq.n	80076c4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	b29a      	uxth	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80076c4:	78bb      	ldrb	r3, [r7, #2]
 80076c6:	2b02      	cmp	r3, #2
 80076c8:	d102      	bne.n	80076d0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2200      	movs	r2, #0
 80076ce:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d101      	bne.n	80076de <HAL_PCD_EP_Open+0xaa>
 80076da:	2302      	movs	r3, #2
 80076dc:	e00e      	b.n	80076fc <HAL_PCD_EP_Open+0xc8>
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	68f9      	ldr	r1, [r7, #12]
 80076ec:	4618      	mov	r0, r3
 80076ee:	f003 fa03 	bl	800aaf8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80076fa:	7afb      	ldrb	r3, [r7, #11]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b084      	sub	sp, #16
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	460b      	mov	r3, r1
 800770e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007710:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007714:	2b00      	cmp	r3, #0
 8007716:	da0f      	bge.n	8007738 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007718:	78fb      	ldrb	r3, [r7, #3]
 800771a:	f003 020f 	and.w	r2, r3, #15
 800771e:	4613      	mov	r3, r2
 8007720:	00db      	lsls	r3, r3, #3
 8007722:	1a9b      	subs	r3, r3, r2
 8007724:	009b      	lsls	r3, r3, #2
 8007726:	3338      	adds	r3, #56	; 0x38
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	4413      	add	r3, r2
 800772c:	3304      	adds	r3, #4
 800772e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2201      	movs	r2, #1
 8007734:	705a      	strb	r2, [r3, #1]
 8007736:	e00f      	b.n	8007758 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007738:	78fb      	ldrb	r3, [r7, #3]
 800773a:	f003 020f 	and.w	r2, r3, #15
 800773e:	4613      	mov	r3, r2
 8007740:	00db      	lsls	r3, r3, #3
 8007742:	1a9b      	subs	r3, r3, r2
 8007744:	009b      	lsls	r3, r3, #2
 8007746:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800774a:	687a      	ldr	r2, [r7, #4]
 800774c:	4413      	add	r3, r2
 800774e:	3304      	adds	r3, #4
 8007750:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8007758:	78fb      	ldrb	r3, [r7, #3]
 800775a:	f003 030f 	and.w	r3, r3, #15
 800775e:	b2da      	uxtb	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800776a:	2b01      	cmp	r3, #1
 800776c:	d101      	bne.n	8007772 <HAL_PCD_EP_Close+0x6e>
 800776e:	2302      	movs	r3, #2
 8007770:	e00e      	b.n	8007790 <HAL_PCD_EP_Close+0x8c>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2201      	movs	r2, #1
 8007776:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	68f9      	ldr	r1, [r7, #12]
 8007780:	4618      	mov	r0, r3
 8007782:	f003 fa41 	bl	800ac08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b086      	sub	sp, #24
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	607a      	str	r2, [r7, #4]
 80077a2:	603b      	str	r3, [r7, #0]
 80077a4:	460b      	mov	r3, r1
 80077a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80077a8:	7afb      	ldrb	r3, [r7, #11]
 80077aa:	f003 020f 	and.w	r2, r3, #15
 80077ae:	4613      	mov	r3, r2
 80077b0:	00db      	lsls	r3, r3, #3
 80077b2:	1a9b      	subs	r3, r3, r2
 80077b4:	009b      	lsls	r3, r3, #2
 80077b6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	4413      	add	r3, r2
 80077be:	3304      	adds	r3, #4
 80077c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	687a      	ldr	r2, [r7, #4]
 80077c6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	2200      	movs	r2, #0
 80077d2:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	2200      	movs	r2, #0
 80077d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80077da:	7afb      	ldrb	r3, [r7, #11]
 80077dc:	f003 030f 	and.w	r3, r3, #15
 80077e0:	b2da      	uxtb	r2, r3
 80077e2:	697b      	ldr	r3, [r7, #20]
 80077e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	2b01      	cmp	r3, #1
 80077ec:	d102      	bne.n	80077f4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	697b      	ldr	r3, [r7, #20]
 80077f2:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80077f4:	7afb      	ldrb	r3, [r7, #11]
 80077f6:	f003 030f 	and.w	r3, r3, #15
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d109      	bne.n	8007812 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6818      	ldr	r0, [r3, #0]
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	691b      	ldr	r3, [r3, #16]
 8007806:	b2db      	uxtb	r3, r3
 8007808:	461a      	mov	r2, r3
 800780a:	6979      	ldr	r1, [r7, #20]
 800780c:	f003 fd1c 	bl	800b248 <USB_EP0StartXfer>
 8007810:	e008      	b.n	8007824 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6818      	ldr	r0, [r3, #0]
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	b2db      	uxtb	r3, r3
 800781c:	461a      	mov	r2, r3
 800781e:	6979      	ldr	r1, [r7, #20]
 8007820:	f003 face 	bl	800adc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8007824:	2300      	movs	r3, #0
}
 8007826:	4618      	mov	r0, r3
 8007828:	3718      	adds	r7, #24
 800782a:	46bd      	mov	sp, r7
 800782c:	bd80      	pop	{r7, pc}

0800782e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800782e:	b480      	push	{r7}
 8007830:	b083      	sub	sp, #12
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	460b      	mov	r3, r1
 8007838:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800783a:	78fb      	ldrb	r3, [r7, #3]
 800783c:	f003 020f 	and.w	r2, r3, #15
 8007840:	6879      	ldr	r1, [r7, #4]
 8007842:	4613      	mov	r3, r2
 8007844:	00db      	lsls	r3, r3, #3
 8007846:	1a9b      	subs	r3, r3, r2
 8007848:	009b      	lsls	r3, r3, #2
 800784a:	440b      	add	r3, r1
 800784c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007850:	681b      	ldr	r3, [r3, #0]
}
 8007852:	4618      	mov	r0, r3
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b086      	sub	sp, #24
 8007862:	af00      	add	r7, sp, #0
 8007864:	60f8      	str	r0, [r7, #12]
 8007866:	607a      	str	r2, [r7, #4]
 8007868:	603b      	str	r3, [r7, #0]
 800786a:	460b      	mov	r3, r1
 800786c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800786e:	7afb      	ldrb	r3, [r7, #11]
 8007870:	f003 020f 	and.w	r2, r3, #15
 8007874:	4613      	mov	r3, r2
 8007876:	00db      	lsls	r3, r3, #3
 8007878:	1a9b      	subs	r3, r3, r2
 800787a:	009b      	lsls	r3, r3, #2
 800787c:	3338      	adds	r3, #56	; 0x38
 800787e:	68fa      	ldr	r2, [r7, #12]
 8007880:	4413      	add	r3, r2
 8007882:	3304      	adds	r3, #4
 8007884:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	683a      	ldr	r2, [r7, #0]
 8007890:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	2200      	movs	r2, #0
 8007896:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	2201      	movs	r2, #1
 800789c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800789e:	7afb      	ldrb	r3, [r7, #11]
 80078a0:	f003 030f 	and.w	r3, r3, #15
 80078a4:	b2da      	uxtb	r2, r3
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	691b      	ldr	r3, [r3, #16]
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d102      	bne.n	80078b8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80078b2:	687a      	ldr	r2, [r7, #4]
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80078b8:	7afb      	ldrb	r3, [r7, #11]
 80078ba:	f003 030f 	and.w	r3, r3, #15
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d109      	bne.n	80078d6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6818      	ldr	r0, [r3, #0]
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	691b      	ldr	r3, [r3, #16]
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	461a      	mov	r2, r3
 80078ce:	6979      	ldr	r1, [r7, #20]
 80078d0:	f003 fcba 	bl	800b248 <USB_EP0StartXfer>
 80078d4:	e008      	b.n	80078e8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6818      	ldr	r0, [r3, #0]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	461a      	mov	r2, r3
 80078e2:	6979      	ldr	r1, [r7, #20]
 80078e4:	f003 fa6c 	bl	800adc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3718      	adds	r7, #24
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}

080078f2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80078f2:	b580      	push	{r7, lr}
 80078f4:	b084      	sub	sp, #16
 80078f6:	af00      	add	r7, sp, #0
 80078f8:	6078      	str	r0, [r7, #4]
 80078fa:	460b      	mov	r3, r1
 80078fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80078fe:	78fb      	ldrb	r3, [r7, #3]
 8007900:	f003 020f 	and.w	r2, r3, #15
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	685b      	ldr	r3, [r3, #4]
 8007908:	429a      	cmp	r2, r3
 800790a:	d901      	bls.n	8007910 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e050      	b.n	80079b2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007910:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007914:	2b00      	cmp	r3, #0
 8007916:	da0f      	bge.n	8007938 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007918:	78fb      	ldrb	r3, [r7, #3]
 800791a:	f003 020f 	and.w	r2, r3, #15
 800791e:	4613      	mov	r3, r2
 8007920:	00db      	lsls	r3, r3, #3
 8007922:	1a9b      	subs	r3, r3, r2
 8007924:	009b      	lsls	r3, r3, #2
 8007926:	3338      	adds	r3, #56	; 0x38
 8007928:	687a      	ldr	r2, [r7, #4]
 800792a:	4413      	add	r3, r2
 800792c:	3304      	adds	r3, #4
 800792e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2201      	movs	r2, #1
 8007934:	705a      	strb	r2, [r3, #1]
 8007936:	e00d      	b.n	8007954 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007938:	78fa      	ldrb	r2, [r7, #3]
 800793a:	4613      	mov	r3, r2
 800793c:	00db      	lsls	r3, r3, #3
 800793e:	1a9b      	subs	r3, r3, r2
 8007940:	009b      	lsls	r3, r3, #2
 8007942:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007946:	687a      	ldr	r2, [r7, #4]
 8007948:	4413      	add	r3, r2
 800794a:	3304      	adds	r3, #4
 800794c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2201      	movs	r2, #1
 8007958:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800795a:	78fb      	ldrb	r3, [r7, #3]
 800795c:	f003 030f 	and.w	r3, r3, #15
 8007960:	b2da      	uxtb	r2, r3
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800796c:	2b01      	cmp	r3, #1
 800796e:	d101      	bne.n	8007974 <HAL_PCD_EP_SetStall+0x82>
 8007970:	2302      	movs	r3, #2
 8007972:	e01e      	b.n	80079b2 <HAL_PCD_EP_SetStall+0xc0>
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68f9      	ldr	r1, [r7, #12]
 8007982:	4618      	mov	r0, r3
 8007984:	f003 fe49 	bl	800b61a <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8007988:	78fb      	ldrb	r3, [r7, #3]
 800798a:	f003 030f 	and.w	r3, r3, #15
 800798e:	2b00      	cmp	r3, #0
 8007990:	d10a      	bne.n	80079a8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6818      	ldr	r0, [r3, #0]
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	b2d9      	uxtb	r1, r3
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80079a2:	461a      	mov	r2, r3
 80079a4:	f004 f83a 	bl	800ba1c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2200      	movs	r2, #0
 80079ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3710      	adds	r7, #16
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b084      	sub	sp, #16
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	460b      	mov	r3, r1
 80079c4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80079c6:	78fb      	ldrb	r3, [r7, #3]
 80079c8:	f003 020f 	and.w	r2, r3, #15
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d901      	bls.n	80079d8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80079d4:	2301      	movs	r3, #1
 80079d6:	e042      	b.n	8007a5e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80079d8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	da0f      	bge.n	8007a00 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80079e0:	78fb      	ldrb	r3, [r7, #3]
 80079e2:	f003 020f 	and.w	r2, r3, #15
 80079e6:	4613      	mov	r3, r2
 80079e8:	00db      	lsls	r3, r3, #3
 80079ea:	1a9b      	subs	r3, r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	3338      	adds	r3, #56	; 0x38
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	4413      	add	r3, r2
 80079f4:	3304      	adds	r3, #4
 80079f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2201      	movs	r2, #1
 80079fc:	705a      	strb	r2, [r3, #1]
 80079fe:	e00f      	b.n	8007a20 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007a00:	78fb      	ldrb	r3, [r7, #3]
 8007a02:	f003 020f 	and.w	r2, r3, #15
 8007a06:	4613      	mov	r3, r2
 8007a08:	00db      	lsls	r3, r3, #3
 8007a0a:	1a9b      	subs	r3, r3, r2
 8007a0c:	009b      	lsls	r3, r3, #2
 8007a0e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	4413      	add	r3, r2
 8007a16:	3304      	adds	r3, #4
 8007a18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2200      	movs	r2, #0
 8007a24:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007a26:	78fb      	ldrb	r3, [r7, #3]
 8007a28:	f003 030f 	and.w	r3, r3, #15
 8007a2c:	b2da      	uxtb	r2, r3
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8007a38:	2b01      	cmp	r3, #1
 8007a3a:	d101      	bne.n	8007a40 <HAL_PCD_EP_ClrStall+0x86>
 8007a3c:	2302      	movs	r3, #2
 8007a3e:	e00e      	b.n	8007a5e <HAL_PCD_EP_ClrStall+0xa4>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2201      	movs	r2, #1
 8007a44:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	68f9      	ldr	r1, [r7, #12]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f003 fe51 	bl	800b6f6 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8007a5c:	2300      	movs	r3, #0
}
 8007a5e:	4618      	mov	r0, r3
 8007a60:	3710      	adds	r7, #16
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b08a      	sub	sp, #40	; 0x28
 8007a6a:	af02      	add	r7, sp, #8
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007a7a:	683a      	ldr	r2, [r7, #0]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	00db      	lsls	r3, r3, #3
 8007a80:	1a9b      	subs	r3, r3, r2
 8007a82:	009b      	lsls	r3, r3, #2
 8007a84:	3338      	adds	r3, #56	; 0x38
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	4413      	add	r3, r2
 8007a8a:	3304      	adds	r3, #4
 8007a8c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	699a      	ldr	r2, [r3, #24]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	695b      	ldr	r3, [r3, #20]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d901      	bls.n	8007a9e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007a9a:	2301      	movs	r3, #1
 8007a9c:	e06c      	b.n	8007b78 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	695a      	ldr	r2, [r3, #20]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	699b      	ldr	r3, [r3, #24]
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	69fa      	ldr	r2, [r7, #28]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d902      	bls.n	8007aba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	3303      	adds	r3, #3
 8007abe:	089b      	lsrs	r3, r3, #2
 8007ac0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007ac2:	e02b      	b.n	8007b1c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	695a      	ldr	r2, [r3, #20]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	699b      	ldr	r3, [r3, #24]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	69fa      	ldr	r2, [r7, #28]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d902      	bls.n	8007ae0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007ae0:	69fb      	ldr	r3, [r7, #28]
 8007ae2:	3303      	adds	r3, #3
 8007ae4:	089b      	lsrs	r3, r3, #2
 8007ae6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	68d9      	ldr	r1, [r3, #12]
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	4603      	mov	r3, r0
 8007afe:	6978      	ldr	r0, [r7, #20]
 8007b00:	f003 fcf5 	bl	800b4ee <USB_WritePacket>

    ep->xfer_buff  += len;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	68da      	ldr	r2, [r3, #12]
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	441a      	add	r2, r3
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	699a      	ldr	r2, [r3, #24]
 8007b14:	69fb      	ldr	r3, [r7, #28]
 8007b16:	441a      	add	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	015a      	lsls	r2, r3, #5
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	4413      	add	r3, r2
 8007b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b28:	699b      	ldr	r3, [r3, #24]
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	69ba      	ldr	r2, [r7, #24]
 8007b2e:	429a      	cmp	r2, r3
 8007b30:	d809      	bhi.n	8007b46 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	699a      	ldr	r2, [r3, #24]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007b3a:	429a      	cmp	r2, r3
 8007b3c:	d203      	bcs.n	8007b46 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d1be      	bne.n	8007ac4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	695a      	ldr	r2, [r3, #20]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d811      	bhi.n	8007b76 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	f003 030f 	and.w	r3, r3, #15
 8007b58:	2201      	movs	r2, #1
 8007b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b5e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	43db      	mvns	r3, r3
 8007b6c:	6939      	ldr	r1, [r7, #16]
 8007b6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b72:	4013      	ands	r3, r2
 8007b74:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8007b76:	2300      	movs	r3, #0
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3720      	adds	r7, #32
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	333c      	adds	r3, #60	; 0x3c
 8007b98:	3304      	adds	r3, #4
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	691b      	ldr	r3, [r3, #16]
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	f040 80a0 	bne.w	8007cf8 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	f003 0308 	and.w	r3, r3, #8
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d015      	beq.n	8007bee <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	4a72      	ldr	r2, [pc, #456]	; (8007d90 <PCD_EP_OutXfrComplete_int+0x210>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	f240 80dd 	bls.w	8007d86 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	f000 80d7 	beq.w	8007d86 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	015a      	lsls	r2, r3, #5
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	4413      	add	r3, r2
 8007be0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007be4:	461a      	mov	r2, r3
 8007be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007bea:	6093      	str	r3, [r2, #8]
 8007bec:	e0cb      	b.n	8007d86 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	f003 0320 	and.w	r3, r3, #32
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d009      	beq.n	8007c0c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	015a      	lsls	r2, r3, #5
 8007bfc:	693b      	ldr	r3, [r7, #16]
 8007bfe:	4413      	add	r3, r2
 8007c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c04:	461a      	mov	r2, r3
 8007c06:	2320      	movs	r3, #32
 8007c08:	6093      	str	r3, [r2, #8]
 8007c0a:	e0bc      	b.n	8007d86 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f040 80b7 	bne.w	8007d86 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	4a5d      	ldr	r2, [pc, #372]	; (8007d90 <PCD_EP_OutXfrComplete_int+0x210>)
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d90f      	bls.n	8007c40 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00a      	beq.n	8007c40 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	015a      	lsls	r2, r3, #5
 8007c2e:	693b      	ldr	r3, [r7, #16]
 8007c30:	4413      	add	r3, r2
 8007c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c36:	461a      	mov	r2, r3
 8007c38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c3c:	6093      	str	r3, [r2, #8]
 8007c3e:	e0a2      	b.n	8007d86 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8007c40:	6879      	ldr	r1, [r7, #4]
 8007c42:	683a      	ldr	r2, [r7, #0]
 8007c44:	4613      	mov	r3, r2
 8007c46:	00db      	lsls	r3, r3, #3
 8007c48:	1a9b      	subs	r3, r3, r2
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	440b      	add	r3, r1
 8007c4e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007c52:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	0159      	lsls	r1, r3, #5
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	440b      	add	r3, r1
 8007c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8007c66:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	683a      	ldr	r2, [r7, #0]
 8007c6c:	4613      	mov	r3, r2
 8007c6e:	00db      	lsls	r3, r3, #3
 8007c70:	1a9b      	subs	r3, r3, r2
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	4403      	add	r3, r0
 8007c76:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8007c7a:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8007c7c:	6879      	ldr	r1, [r7, #4]
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	4613      	mov	r3, r2
 8007c82:	00db      	lsls	r3, r3, #3
 8007c84:	1a9b      	subs	r3, r3, r2
 8007c86:	009b      	lsls	r3, r3, #2
 8007c88:	440b      	add	r3, r1
 8007c8a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007c8e:	6819      	ldr	r1, [r3, #0]
 8007c90:	6878      	ldr	r0, [r7, #4]
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	4613      	mov	r3, r2
 8007c96:	00db      	lsls	r3, r3, #3
 8007c98:	1a9b      	subs	r3, r3, r2
 8007c9a:	009b      	lsls	r3, r3, #2
 8007c9c:	4403      	add	r3, r0
 8007c9e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	4419      	add	r1, r3
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	683a      	ldr	r2, [r7, #0]
 8007caa:	4613      	mov	r3, r2
 8007cac:	00db      	lsls	r3, r3, #3
 8007cae:	1a9b      	subs	r3, r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	4403      	add	r3, r0
 8007cb4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8007cb8:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d114      	bne.n	8007cea <PCD_EP_OutXfrComplete_int+0x16a>
 8007cc0:	6879      	ldr	r1, [r7, #4]
 8007cc2:	683a      	ldr	r2, [r7, #0]
 8007cc4:	4613      	mov	r3, r2
 8007cc6:	00db      	lsls	r3, r3, #3
 8007cc8:	1a9b      	subs	r3, r3, r2
 8007cca:	009b      	lsls	r3, r3, #2
 8007ccc:	440b      	add	r3, r1
 8007cce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d108      	bne.n	8007cea <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6818      	ldr	r0, [r3, #0]
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	2101      	movs	r1, #1
 8007ce6:	f003 fe99 	bl	800ba1c <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	b2db      	uxtb	r3, r3
 8007cee:	4619      	mov	r1, r3
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f00d f989 	bl	8015008 <HAL_PCD_DataOutStageCallback>
 8007cf6:	e046      	b.n	8007d86 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	4a26      	ldr	r2, [pc, #152]	; (8007d94 <PCD_EP_OutXfrComplete_int+0x214>)
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d124      	bne.n	8007d4a <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00a      	beq.n	8007d20 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	015a      	lsls	r2, r3, #5
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	4413      	add	r3, r2
 8007d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d16:	461a      	mov	r2, r3
 8007d18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d1c:	6093      	str	r3, [r2, #8]
 8007d1e:	e032      	b.n	8007d86 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	f003 0320 	and.w	r3, r3, #32
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d008      	beq.n	8007d3c <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	015a      	lsls	r2, r3, #5
 8007d2e:	693b      	ldr	r3, [r7, #16]
 8007d30:	4413      	add	r3, r2
 8007d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d36:	461a      	mov	r2, r3
 8007d38:	2320      	movs	r3, #32
 8007d3a:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	4619      	mov	r1, r3
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f00d f960 	bl	8015008 <HAL_PCD_DataOutStageCallback>
 8007d48:	e01d      	b.n	8007d86 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d114      	bne.n	8007d7a <PCD_EP_OutXfrComplete_int+0x1fa>
 8007d50:	6879      	ldr	r1, [r7, #4]
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	4613      	mov	r3, r2
 8007d56:	00db      	lsls	r3, r3, #3
 8007d58:	1a9b      	subs	r3, r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	440b      	add	r3, r1
 8007d5e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d108      	bne.n	8007d7a <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6818      	ldr	r0, [r3, #0]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007d72:	461a      	mov	r2, r3
 8007d74:	2100      	movs	r1, #0
 8007d76:	f003 fe51 	bl	800ba1c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	4619      	mov	r1, r3
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f00d f941 	bl	8015008 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007d86:	2300      	movs	r3, #0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3718      	adds	r7, #24
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}
 8007d90:	4f54300a 	.word	0x4f54300a
 8007d94:	4f54310a 	.word	0x4f54310a

08007d98 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b086      	sub	sp, #24
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da8:	697b      	ldr	r3, [r7, #20]
 8007daa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	333c      	adds	r3, #60	; 0x3c
 8007db0:	3304      	adds	r3, #4
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	015a      	lsls	r2, r3, #5
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	4413      	add	r3, r2
 8007dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	4a15      	ldr	r2, [pc, #84]	; (8007e20 <PCD_EP_OutSetupPacket_int+0x88>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d90e      	bls.n	8007dec <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d009      	beq.n	8007dec <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	015a      	lsls	r2, r3, #5
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	4413      	add	r3, r2
 8007de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de4:	461a      	mov	r2, r3
 8007de6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dea:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f00d f8f9 	bl	8014fe4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	4a0a      	ldr	r2, [pc, #40]	; (8007e20 <PCD_EP_OutSetupPacket_int+0x88>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d90c      	bls.n	8007e14 <PCD_EP_OutSetupPacket_int+0x7c>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d108      	bne.n	8007e14 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6818      	ldr	r0, [r3, #0]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	2101      	movs	r1, #1
 8007e10:	f003 fe04 	bl	800ba1c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3718      	adds	r7, #24
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
 8007e1e:	bf00      	nop
 8007e20:	4f54300a 	.word	0x4f54300a

08007e24 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b085      	sub	sp, #20
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	70fb      	strb	r3, [r7, #3]
 8007e30:	4613      	mov	r3, r2
 8007e32:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007e3c:	78fb      	ldrb	r3, [r7, #3]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d107      	bne.n	8007e52 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8007e42:	883b      	ldrh	r3, [r7, #0]
 8007e44:	0419      	lsls	r1, r3, #16
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68ba      	ldr	r2, [r7, #8]
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	629a      	str	r2, [r3, #40]	; 0x28
 8007e50:	e028      	b.n	8007ea4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e58:	0c1b      	lsrs	r3, r3, #16
 8007e5a:	68ba      	ldr	r2, [r7, #8]
 8007e5c:	4413      	add	r3, r2
 8007e5e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007e60:	2300      	movs	r3, #0
 8007e62:	73fb      	strb	r3, [r7, #15]
 8007e64:	e00d      	b.n	8007e82 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	7bfb      	ldrb	r3, [r7, #15]
 8007e6c:	3340      	adds	r3, #64	; 0x40
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	4413      	add	r3, r2
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	0c1b      	lsrs	r3, r3, #16
 8007e76:	68ba      	ldr	r2, [r7, #8]
 8007e78:	4413      	add	r3, r2
 8007e7a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007e7c:	7bfb      	ldrb	r3, [r7, #15]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	73fb      	strb	r3, [r7, #15]
 8007e82:	7bfa      	ldrb	r2, [r7, #15]
 8007e84:	78fb      	ldrb	r3, [r7, #3]
 8007e86:	3b01      	subs	r3, #1
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d3ec      	bcc.n	8007e66 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007e8c:	883b      	ldrh	r3, [r7, #0]
 8007e8e:	0418      	lsls	r0, r3, #16
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6819      	ldr	r1, [r3, #0]
 8007e94:	78fb      	ldrb	r3, [r7, #3]
 8007e96:	3b01      	subs	r3, #1
 8007e98:	68ba      	ldr	r2, [r7, #8]
 8007e9a:	4302      	orrs	r2, r0
 8007e9c:	3340      	adds	r3, #64	; 0x40
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	440b      	add	r3, r1
 8007ea2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr

08007eb2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8007eb2:	b480      	push	{r7}
 8007eb4:	b083      	sub	sp, #12
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
 8007eba:	460b      	mov	r3, r1
 8007ebc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	887a      	ldrh	r2, [r7, #2]
 8007ec4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007ec6:	2300      	movs	r3, #0
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	370c      	adds	r7, #12
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed2:	4770      	bx	lr

08007ed4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b083      	sub	sp, #12
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	460b      	mov	r3, r1
 8007ede:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007ee0:	bf00      	nop
 8007ee2:	370c      	adds	r7, #12
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b086      	sub	sp, #24
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d101      	bne.n	8007efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007efa:	2301      	movs	r3, #1
 8007efc:	e264      	b.n	80083c8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d075      	beq.n	8007ff6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f0a:	4ba3      	ldr	r3, [pc, #652]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f003 030c 	and.w	r3, r3, #12
 8007f12:	2b04      	cmp	r3, #4
 8007f14:	d00c      	beq.n	8007f30 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f16:	4ba0      	ldr	r3, [pc, #640]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007f1e:	2b08      	cmp	r3, #8
 8007f20:	d112      	bne.n	8007f48 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007f22:	4b9d      	ldr	r3, [pc, #628]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 8007f24:	685b      	ldr	r3, [r3, #4]
 8007f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f2e:	d10b      	bne.n	8007f48 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007f30:	4b99      	ldr	r3, [pc, #612]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d05b      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x108>
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d157      	bne.n	8007ff4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	e23f      	b.n	80083c8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f50:	d106      	bne.n	8007f60 <HAL_RCC_OscConfig+0x74>
 8007f52:	4b91      	ldr	r3, [pc, #580]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a90      	ldr	r2, [pc, #576]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 8007f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f5c:	6013      	str	r3, [r2, #0]
 8007f5e:	e01d      	b.n	8007f9c <HAL_RCC_OscConfig+0xb0>
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007f68:	d10c      	bne.n	8007f84 <HAL_RCC_OscConfig+0x98>
 8007f6a:	4b8b      	ldr	r3, [pc, #556]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a8a      	ldr	r2, [pc, #552]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 8007f70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007f74:	6013      	str	r3, [r2, #0]
 8007f76:	4b88      	ldr	r3, [pc, #544]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a87      	ldr	r2, [pc, #540]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 8007f7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f80:	6013      	str	r3, [r2, #0]
 8007f82:	e00b      	b.n	8007f9c <HAL_RCC_OscConfig+0xb0>
 8007f84:	4b84      	ldr	r3, [pc, #528]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a83      	ldr	r2, [pc, #524]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 8007f8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007f8e:	6013      	str	r3, [r2, #0]
 8007f90:	4b81      	ldr	r3, [pc, #516]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a80      	ldr	r2, [pc, #512]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 8007f96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d013      	beq.n	8007fcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fa4:	f7fd f89a 	bl	80050dc <HAL_GetTick>
 8007fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007faa:	e008      	b.n	8007fbe <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007fac:	f7fd f896 	bl	80050dc <HAL_GetTick>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	693b      	ldr	r3, [r7, #16]
 8007fb4:	1ad3      	subs	r3, r2, r3
 8007fb6:	2b64      	cmp	r3, #100	; 0x64
 8007fb8:	d901      	bls.n	8007fbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e204      	b.n	80083c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fbe:	4b76      	ldr	r3, [pc, #472]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d0f0      	beq.n	8007fac <HAL_RCC_OscConfig+0xc0>
 8007fca:	e014      	b.n	8007ff6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007fcc:	f7fd f886 	bl	80050dc <HAL_GetTick>
 8007fd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fd2:	e008      	b.n	8007fe6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007fd4:	f7fd f882 	bl	80050dc <HAL_GetTick>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	1ad3      	subs	r3, r2, r3
 8007fde:	2b64      	cmp	r3, #100	; 0x64
 8007fe0:	d901      	bls.n	8007fe6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007fe2:	2303      	movs	r3, #3
 8007fe4:	e1f0      	b.n	80083c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007fe6:	4b6c      	ldr	r3, [pc, #432]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d1f0      	bne.n	8007fd4 <HAL_RCC_OscConfig+0xe8>
 8007ff2:	e000      	b.n	8007ff6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ff4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f003 0302 	and.w	r3, r3, #2
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d063      	beq.n	80080ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008002:	4b65      	ldr	r3, [pc, #404]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 8008004:	689b      	ldr	r3, [r3, #8]
 8008006:	f003 030c 	and.w	r3, r3, #12
 800800a:	2b00      	cmp	r3, #0
 800800c:	d00b      	beq.n	8008026 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800800e:	4b62      	ldr	r3, [pc, #392]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008016:	2b08      	cmp	r3, #8
 8008018:	d11c      	bne.n	8008054 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800801a:	4b5f      	ldr	r3, [pc, #380]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008022:	2b00      	cmp	r3, #0
 8008024:	d116      	bne.n	8008054 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008026:	4b5c      	ldr	r3, [pc, #368]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f003 0302 	and.w	r3, r3, #2
 800802e:	2b00      	cmp	r3, #0
 8008030:	d005      	beq.n	800803e <HAL_RCC_OscConfig+0x152>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	2b01      	cmp	r3, #1
 8008038:	d001      	beq.n	800803e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e1c4      	b.n	80083c8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800803e:	4b56      	ldr	r3, [pc, #344]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	00db      	lsls	r3, r3, #3
 800804c:	4952      	ldr	r1, [pc, #328]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 800804e:	4313      	orrs	r3, r2
 8008050:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008052:	e03a      	b.n	80080ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	68db      	ldr	r3, [r3, #12]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d020      	beq.n	800809e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800805c:	4b4f      	ldr	r3, [pc, #316]	; (800819c <HAL_RCC_OscConfig+0x2b0>)
 800805e:	2201      	movs	r2, #1
 8008060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008062:	f7fd f83b 	bl	80050dc <HAL_GetTick>
 8008066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008068:	e008      	b.n	800807c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800806a:	f7fd f837 	bl	80050dc <HAL_GetTick>
 800806e:	4602      	mov	r2, r0
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	1ad3      	subs	r3, r2, r3
 8008074:	2b02      	cmp	r3, #2
 8008076:	d901      	bls.n	800807c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008078:	2303      	movs	r3, #3
 800807a:	e1a5      	b.n	80083c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800807c:	4b46      	ldr	r3, [pc, #280]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f003 0302 	and.w	r3, r3, #2
 8008084:	2b00      	cmp	r3, #0
 8008086:	d0f0      	beq.n	800806a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008088:	4b43      	ldr	r3, [pc, #268]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	691b      	ldr	r3, [r3, #16]
 8008094:	00db      	lsls	r3, r3, #3
 8008096:	4940      	ldr	r1, [pc, #256]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 8008098:	4313      	orrs	r3, r2
 800809a:	600b      	str	r3, [r1, #0]
 800809c:	e015      	b.n	80080ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800809e:	4b3f      	ldr	r3, [pc, #252]	; (800819c <HAL_RCC_OscConfig+0x2b0>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080a4:	f7fd f81a 	bl	80050dc <HAL_GetTick>
 80080a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080aa:	e008      	b.n	80080be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80080ac:	f7fd f816 	bl	80050dc <HAL_GetTick>
 80080b0:	4602      	mov	r2, r0
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d901      	bls.n	80080be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e184      	b.n	80083c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80080be:	4b36      	ldr	r3, [pc, #216]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f003 0302 	and.w	r3, r3, #2
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1f0      	bne.n	80080ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f003 0308 	and.w	r3, r3, #8
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d030      	beq.n	8008138 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d016      	beq.n	800810c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080de:	4b30      	ldr	r3, [pc, #192]	; (80081a0 <HAL_RCC_OscConfig+0x2b4>)
 80080e0:	2201      	movs	r2, #1
 80080e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80080e4:	f7fc fffa 	bl	80050dc <HAL_GetTick>
 80080e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080ea:	e008      	b.n	80080fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80080ec:	f7fc fff6 	bl	80050dc <HAL_GetTick>
 80080f0:	4602      	mov	r2, r0
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	1ad3      	subs	r3, r2, r3
 80080f6:	2b02      	cmp	r3, #2
 80080f8:	d901      	bls.n	80080fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80080fa:	2303      	movs	r3, #3
 80080fc:	e164      	b.n	80083c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80080fe:	4b26      	ldr	r3, [pc, #152]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 8008100:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008102:	f003 0302 	and.w	r3, r3, #2
 8008106:	2b00      	cmp	r3, #0
 8008108:	d0f0      	beq.n	80080ec <HAL_RCC_OscConfig+0x200>
 800810a:	e015      	b.n	8008138 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800810c:	4b24      	ldr	r3, [pc, #144]	; (80081a0 <HAL_RCC_OscConfig+0x2b4>)
 800810e:	2200      	movs	r2, #0
 8008110:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008112:	f7fc ffe3 	bl	80050dc <HAL_GetTick>
 8008116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008118:	e008      	b.n	800812c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800811a:	f7fc ffdf 	bl	80050dc <HAL_GetTick>
 800811e:	4602      	mov	r2, r0
 8008120:	693b      	ldr	r3, [r7, #16]
 8008122:	1ad3      	subs	r3, r2, r3
 8008124:	2b02      	cmp	r3, #2
 8008126:	d901      	bls.n	800812c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008128:	2303      	movs	r3, #3
 800812a:	e14d      	b.n	80083c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800812c:	4b1a      	ldr	r3, [pc, #104]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 800812e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008130:	f003 0302 	and.w	r3, r3, #2
 8008134:	2b00      	cmp	r3, #0
 8008136:	d1f0      	bne.n	800811a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f003 0304 	and.w	r3, r3, #4
 8008140:	2b00      	cmp	r3, #0
 8008142:	f000 80a0 	beq.w	8008286 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008146:	2300      	movs	r3, #0
 8008148:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800814a:	4b13      	ldr	r3, [pc, #76]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 800814c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800814e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10f      	bne.n	8008176 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008156:	2300      	movs	r3, #0
 8008158:	60bb      	str	r3, [r7, #8]
 800815a:	4b0f      	ldr	r3, [pc, #60]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 800815c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800815e:	4a0e      	ldr	r2, [pc, #56]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 8008160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008164:	6413      	str	r3, [r2, #64]	; 0x40
 8008166:	4b0c      	ldr	r3, [pc, #48]	; (8008198 <HAL_RCC_OscConfig+0x2ac>)
 8008168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800816a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800816e:	60bb      	str	r3, [r7, #8]
 8008170:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008172:	2301      	movs	r3, #1
 8008174:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008176:	4b0b      	ldr	r3, [pc, #44]	; (80081a4 <HAL_RCC_OscConfig+0x2b8>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800817e:	2b00      	cmp	r3, #0
 8008180:	d121      	bne.n	80081c6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008182:	4b08      	ldr	r3, [pc, #32]	; (80081a4 <HAL_RCC_OscConfig+0x2b8>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a07      	ldr	r2, [pc, #28]	; (80081a4 <HAL_RCC_OscConfig+0x2b8>)
 8008188:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800818c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800818e:	f7fc ffa5 	bl	80050dc <HAL_GetTick>
 8008192:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008194:	e011      	b.n	80081ba <HAL_RCC_OscConfig+0x2ce>
 8008196:	bf00      	nop
 8008198:	40023800 	.word	0x40023800
 800819c:	42470000 	.word	0x42470000
 80081a0:	42470e80 	.word	0x42470e80
 80081a4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081a8:	f7fc ff98 	bl	80050dc <HAL_GetTick>
 80081ac:	4602      	mov	r2, r0
 80081ae:	693b      	ldr	r3, [r7, #16]
 80081b0:	1ad3      	subs	r3, r2, r3
 80081b2:	2b02      	cmp	r3, #2
 80081b4:	d901      	bls.n	80081ba <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e106      	b.n	80083c8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80081ba:	4b85      	ldr	r3, [pc, #532]	; (80083d0 <HAL_RCC_OscConfig+0x4e4>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d0f0      	beq.n	80081a8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d106      	bne.n	80081dc <HAL_RCC_OscConfig+0x2f0>
 80081ce:	4b81      	ldr	r3, [pc, #516]	; (80083d4 <HAL_RCC_OscConfig+0x4e8>)
 80081d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d2:	4a80      	ldr	r2, [pc, #512]	; (80083d4 <HAL_RCC_OscConfig+0x4e8>)
 80081d4:	f043 0301 	orr.w	r3, r3, #1
 80081d8:	6713      	str	r3, [r2, #112]	; 0x70
 80081da:	e01c      	b.n	8008216 <HAL_RCC_OscConfig+0x32a>
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	689b      	ldr	r3, [r3, #8]
 80081e0:	2b05      	cmp	r3, #5
 80081e2:	d10c      	bne.n	80081fe <HAL_RCC_OscConfig+0x312>
 80081e4:	4b7b      	ldr	r3, [pc, #492]	; (80083d4 <HAL_RCC_OscConfig+0x4e8>)
 80081e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081e8:	4a7a      	ldr	r2, [pc, #488]	; (80083d4 <HAL_RCC_OscConfig+0x4e8>)
 80081ea:	f043 0304 	orr.w	r3, r3, #4
 80081ee:	6713      	str	r3, [r2, #112]	; 0x70
 80081f0:	4b78      	ldr	r3, [pc, #480]	; (80083d4 <HAL_RCC_OscConfig+0x4e8>)
 80081f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f4:	4a77      	ldr	r2, [pc, #476]	; (80083d4 <HAL_RCC_OscConfig+0x4e8>)
 80081f6:	f043 0301 	orr.w	r3, r3, #1
 80081fa:	6713      	str	r3, [r2, #112]	; 0x70
 80081fc:	e00b      	b.n	8008216 <HAL_RCC_OscConfig+0x32a>
 80081fe:	4b75      	ldr	r3, [pc, #468]	; (80083d4 <HAL_RCC_OscConfig+0x4e8>)
 8008200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008202:	4a74      	ldr	r2, [pc, #464]	; (80083d4 <HAL_RCC_OscConfig+0x4e8>)
 8008204:	f023 0301 	bic.w	r3, r3, #1
 8008208:	6713      	str	r3, [r2, #112]	; 0x70
 800820a:	4b72      	ldr	r3, [pc, #456]	; (80083d4 <HAL_RCC_OscConfig+0x4e8>)
 800820c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800820e:	4a71      	ldr	r2, [pc, #452]	; (80083d4 <HAL_RCC_OscConfig+0x4e8>)
 8008210:	f023 0304 	bic.w	r3, r3, #4
 8008214:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d015      	beq.n	800824a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800821e:	f7fc ff5d 	bl	80050dc <HAL_GetTick>
 8008222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008224:	e00a      	b.n	800823c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008226:	f7fc ff59 	bl	80050dc <HAL_GetTick>
 800822a:	4602      	mov	r2, r0
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	1ad3      	subs	r3, r2, r3
 8008230:	f241 3288 	movw	r2, #5000	; 0x1388
 8008234:	4293      	cmp	r3, r2
 8008236:	d901      	bls.n	800823c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8008238:	2303      	movs	r3, #3
 800823a:	e0c5      	b.n	80083c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800823c:	4b65      	ldr	r3, [pc, #404]	; (80083d4 <HAL_RCC_OscConfig+0x4e8>)
 800823e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008240:	f003 0302 	and.w	r3, r3, #2
 8008244:	2b00      	cmp	r3, #0
 8008246:	d0ee      	beq.n	8008226 <HAL_RCC_OscConfig+0x33a>
 8008248:	e014      	b.n	8008274 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800824a:	f7fc ff47 	bl	80050dc <HAL_GetTick>
 800824e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008250:	e00a      	b.n	8008268 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008252:	f7fc ff43 	bl	80050dc <HAL_GetTick>
 8008256:	4602      	mov	r2, r0
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	1ad3      	subs	r3, r2, r3
 800825c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008260:	4293      	cmp	r3, r2
 8008262:	d901      	bls.n	8008268 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8008264:	2303      	movs	r3, #3
 8008266:	e0af      	b.n	80083c8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008268:	4b5a      	ldr	r3, [pc, #360]	; (80083d4 <HAL_RCC_OscConfig+0x4e8>)
 800826a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800826c:	f003 0302 	and.w	r3, r3, #2
 8008270:	2b00      	cmp	r3, #0
 8008272:	d1ee      	bne.n	8008252 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008274:	7dfb      	ldrb	r3, [r7, #23]
 8008276:	2b01      	cmp	r3, #1
 8008278:	d105      	bne.n	8008286 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800827a:	4b56      	ldr	r3, [pc, #344]	; (80083d4 <HAL_RCC_OscConfig+0x4e8>)
 800827c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827e:	4a55      	ldr	r2, [pc, #340]	; (80083d4 <HAL_RCC_OscConfig+0x4e8>)
 8008280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008284:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	699b      	ldr	r3, [r3, #24]
 800828a:	2b00      	cmp	r3, #0
 800828c:	f000 809b 	beq.w	80083c6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008290:	4b50      	ldr	r3, [pc, #320]	; (80083d4 <HAL_RCC_OscConfig+0x4e8>)
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f003 030c 	and.w	r3, r3, #12
 8008298:	2b08      	cmp	r3, #8
 800829a:	d05c      	beq.n	8008356 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	699b      	ldr	r3, [r3, #24]
 80082a0:	2b02      	cmp	r3, #2
 80082a2:	d141      	bne.n	8008328 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80082a4:	4b4c      	ldr	r3, [pc, #304]	; (80083d8 <HAL_RCC_OscConfig+0x4ec>)
 80082a6:	2200      	movs	r2, #0
 80082a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80082aa:	f7fc ff17 	bl	80050dc <HAL_GetTick>
 80082ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082b0:	e008      	b.n	80082c4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80082b2:	f7fc ff13 	bl	80050dc <HAL_GetTick>
 80082b6:	4602      	mov	r2, r0
 80082b8:	693b      	ldr	r3, [r7, #16]
 80082ba:	1ad3      	subs	r3, r2, r3
 80082bc:	2b02      	cmp	r3, #2
 80082be:	d901      	bls.n	80082c4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80082c0:	2303      	movs	r3, #3
 80082c2:	e081      	b.n	80083c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80082c4:	4b43      	ldr	r3, [pc, #268]	; (80083d4 <HAL_RCC_OscConfig+0x4e8>)
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1f0      	bne.n	80082b2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	69da      	ldr	r2, [r3, #28]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6a1b      	ldr	r3, [r3, #32]
 80082d8:	431a      	orrs	r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082de:	019b      	lsls	r3, r3, #6
 80082e0:	431a      	orrs	r2, r3
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e6:	085b      	lsrs	r3, r3, #1
 80082e8:	3b01      	subs	r3, #1
 80082ea:	041b      	lsls	r3, r3, #16
 80082ec:	431a      	orrs	r2, r3
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f2:	061b      	lsls	r3, r3, #24
 80082f4:	4937      	ldr	r1, [pc, #220]	; (80083d4 <HAL_RCC_OscConfig+0x4e8>)
 80082f6:	4313      	orrs	r3, r2
 80082f8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80082fa:	4b37      	ldr	r3, [pc, #220]	; (80083d8 <HAL_RCC_OscConfig+0x4ec>)
 80082fc:	2201      	movs	r2, #1
 80082fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008300:	f7fc feec 	bl	80050dc <HAL_GetTick>
 8008304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008306:	e008      	b.n	800831a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008308:	f7fc fee8 	bl	80050dc <HAL_GetTick>
 800830c:	4602      	mov	r2, r0
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	1ad3      	subs	r3, r2, r3
 8008312:	2b02      	cmp	r3, #2
 8008314:	d901      	bls.n	800831a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8008316:	2303      	movs	r3, #3
 8008318:	e056      	b.n	80083c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800831a:	4b2e      	ldr	r3, [pc, #184]	; (80083d4 <HAL_RCC_OscConfig+0x4e8>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008322:	2b00      	cmp	r3, #0
 8008324:	d0f0      	beq.n	8008308 <HAL_RCC_OscConfig+0x41c>
 8008326:	e04e      	b.n	80083c6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008328:	4b2b      	ldr	r3, [pc, #172]	; (80083d8 <HAL_RCC_OscConfig+0x4ec>)
 800832a:	2200      	movs	r2, #0
 800832c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800832e:	f7fc fed5 	bl	80050dc <HAL_GetTick>
 8008332:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008334:	e008      	b.n	8008348 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008336:	f7fc fed1 	bl	80050dc <HAL_GetTick>
 800833a:	4602      	mov	r2, r0
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	1ad3      	subs	r3, r2, r3
 8008340:	2b02      	cmp	r3, #2
 8008342:	d901      	bls.n	8008348 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8008344:	2303      	movs	r3, #3
 8008346:	e03f      	b.n	80083c8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008348:	4b22      	ldr	r3, [pc, #136]	; (80083d4 <HAL_RCC_OscConfig+0x4e8>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d1f0      	bne.n	8008336 <HAL_RCC_OscConfig+0x44a>
 8008354:	e037      	b.n	80083c6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	2b01      	cmp	r3, #1
 800835c:	d101      	bne.n	8008362 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800835e:	2301      	movs	r3, #1
 8008360:	e032      	b.n	80083c8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008362:	4b1c      	ldr	r3, [pc, #112]	; (80083d4 <HAL_RCC_OscConfig+0x4e8>)
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	699b      	ldr	r3, [r3, #24]
 800836c:	2b01      	cmp	r3, #1
 800836e:	d028      	beq.n	80083c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800837a:	429a      	cmp	r2, r3
 800837c:	d121      	bne.n	80083c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008388:	429a      	cmp	r2, r3
 800838a:	d11a      	bne.n	80083c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800838c:	68fa      	ldr	r2, [r7, #12]
 800838e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008392:	4013      	ands	r3, r2
 8008394:	687a      	ldr	r2, [r7, #4]
 8008396:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008398:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800839a:	4293      	cmp	r3, r2
 800839c:	d111      	bne.n	80083c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a8:	085b      	lsrs	r3, r3, #1
 80083aa:	3b01      	subs	r3, #1
 80083ac:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80083ae:	429a      	cmp	r2, r3
 80083b0:	d107      	bne.n	80083c2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083bc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80083be:	429a      	cmp	r2, r3
 80083c0:	d001      	beq.n	80083c6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80083c2:	2301      	movs	r3, #1
 80083c4:	e000      	b.n	80083c8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80083c6:	2300      	movs	r3, #0
}
 80083c8:	4618      	mov	r0, r3
 80083ca:	3718      	adds	r7, #24
 80083cc:	46bd      	mov	sp, r7
 80083ce:	bd80      	pop	{r7, pc}
 80083d0:	40007000 	.word	0x40007000
 80083d4:	40023800 	.word	0x40023800
 80083d8:	42470060 	.word	0x42470060

080083dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d101      	bne.n	80083f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	e0cc      	b.n	800858a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80083f0:	4b68      	ldr	r3, [pc, #416]	; (8008594 <HAL_RCC_ClockConfig+0x1b8>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 0307 	and.w	r3, r3, #7
 80083f8:	683a      	ldr	r2, [r7, #0]
 80083fa:	429a      	cmp	r2, r3
 80083fc:	d90c      	bls.n	8008418 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083fe:	4b65      	ldr	r3, [pc, #404]	; (8008594 <HAL_RCC_ClockConfig+0x1b8>)
 8008400:	683a      	ldr	r2, [r7, #0]
 8008402:	b2d2      	uxtb	r2, r2
 8008404:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008406:	4b63      	ldr	r3, [pc, #396]	; (8008594 <HAL_RCC_ClockConfig+0x1b8>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f003 0307 	and.w	r3, r3, #7
 800840e:	683a      	ldr	r2, [r7, #0]
 8008410:	429a      	cmp	r2, r3
 8008412:	d001      	beq.n	8008418 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008414:	2301      	movs	r3, #1
 8008416:	e0b8      	b.n	800858a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f003 0302 	and.w	r3, r3, #2
 8008420:	2b00      	cmp	r3, #0
 8008422:	d020      	beq.n	8008466 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f003 0304 	and.w	r3, r3, #4
 800842c:	2b00      	cmp	r3, #0
 800842e:	d005      	beq.n	800843c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008430:	4b59      	ldr	r3, [pc, #356]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	4a58      	ldr	r2, [pc, #352]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 8008436:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800843a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f003 0308 	and.w	r3, r3, #8
 8008444:	2b00      	cmp	r3, #0
 8008446:	d005      	beq.n	8008454 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008448:	4b53      	ldr	r3, [pc, #332]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 800844a:	689b      	ldr	r3, [r3, #8]
 800844c:	4a52      	ldr	r2, [pc, #328]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 800844e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008452:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008454:	4b50      	ldr	r3, [pc, #320]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 8008456:	689b      	ldr	r3, [r3, #8]
 8008458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	494d      	ldr	r1, [pc, #308]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 8008462:	4313      	orrs	r3, r2
 8008464:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 0301 	and.w	r3, r3, #1
 800846e:	2b00      	cmp	r3, #0
 8008470:	d044      	beq.n	80084fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d107      	bne.n	800848a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800847a:	4b47      	ldr	r3, [pc, #284]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008482:	2b00      	cmp	r3, #0
 8008484:	d119      	bne.n	80084ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e07f      	b.n	800858a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	2b02      	cmp	r3, #2
 8008490:	d003      	beq.n	800849a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008496:	2b03      	cmp	r3, #3
 8008498:	d107      	bne.n	80084aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800849a:	4b3f      	ldr	r3, [pc, #252]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d109      	bne.n	80084ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084a6:	2301      	movs	r3, #1
 80084a8:	e06f      	b.n	800858a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084aa:	4b3b      	ldr	r3, [pc, #236]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 0302 	and.w	r3, r3, #2
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d101      	bne.n	80084ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80084b6:	2301      	movs	r3, #1
 80084b8:	e067      	b.n	800858a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80084ba:	4b37      	ldr	r3, [pc, #220]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	f023 0203 	bic.w	r2, r3, #3
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	685b      	ldr	r3, [r3, #4]
 80084c6:	4934      	ldr	r1, [pc, #208]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 80084c8:	4313      	orrs	r3, r2
 80084ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80084cc:	f7fc fe06 	bl	80050dc <HAL_GetTick>
 80084d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084d2:	e00a      	b.n	80084ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084d4:	f7fc fe02 	bl	80050dc <HAL_GetTick>
 80084d8:	4602      	mov	r2, r0
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	1ad3      	subs	r3, r2, r3
 80084de:	f241 3288 	movw	r2, #5000	; 0x1388
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d901      	bls.n	80084ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80084e6:	2303      	movs	r3, #3
 80084e8:	e04f      	b.n	800858a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80084ea:	4b2b      	ldr	r3, [pc, #172]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	f003 020c 	and.w	r2, r3, #12
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	429a      	cmp	r2, r3
 80084fa:	d1eb      	bne.n	80084d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80084fc:	4b25      	ldr	r3, [pc, #148]	; (8008594 <HAL_RCC_ClockConfig+0x1b8>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 0307 	and.w	r3, r3, #7
 8008504:	683a      	ldr	r2, [r7, #0]
 8008506:	429a      	cmp	r2, r3
 8008508:	d20c      	bcs.n	8008524 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800850a:	4b22      	ldr	r3, [pc, #136]	; (8008594 <HAL_RCC_ClockConfig+0x1b8>)
 800850c:	683a      	ldr	r2, [r7, #0]
 800850e:	b2d2      	uxtb	r2, r2
 8008510:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008512:	4b20      	ldr	r3, [pc, #128]	; (8008594 <HAL_RCC_ClockConfig+0x1b8>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	f003 0307 	and.w	r3, r3, #7
 800851a:	683a      	ldr	r2, [r7, #0]
 800851c:	429a      	cmp	r2, r3
 800851e:	d001      	beq.n	8008524 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	e032      	b.n	800858a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	f003 0304 	and.w	r3, r3, #4
 800852c:	2b00      	cmp	r3, #0
 800852e:	d008      	beq.n	8008542 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008530:	4b19      	ldr	r3, [pc, #100]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	4916      	ldr	r1, [pc, #88]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 800853e:	4313      	orrs	r3, r2
 8008540:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f003 0308 	and.w	r3, r3, #8
 800854a:	2b00      	cmp	r3, #0
 800854c:	d009      	beq.n	8008562 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800854e:	4b12      	ldr	r3, [pc, #72]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	691b      	ldr	r3, [r3, #16]
 800855a:	00db      	lsls	r3, r3, #3
 800855c:	490e      	ldr	r1, [pc, #56]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 800855e:	4313      	orrs	r3, r2
 8008560:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008562:	f000 f821 	bl	80085a8 <HAL_RCC_GetSysClockFreq>
 8008566:	4602      	mov	r2, r0
 8008568:	4b0b      	ldr	r3, [pc, #44]	; (8008598 <HAL_RCC_ClockConfig+0x1bc>)
 800856a:	689b      	ldr	r3, [r3, #8]
 800856c:	091b      	lsrs	r3, r3, #4
 800856e:	f003 030f 	and.w	r3, r3, #15
 8008572:	490a      	ldr	r1, [pc, #40]	; (800859c <HAL_RCC_ClockConfig+0x1c0>)
 8008574:	5ccb      	ldrb	r3, [r1, r3]
 8008576:	fa22 f303 	lsr.w	r3, r2, r3
 800857a:	4a09      	ldr	r2, [pc, #36]	; (80085a0 <HAL_RCC_ClockConfig+0x1c4>)
 800857c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800857e:	4b09      	ldr	r3, [pc, #36]	; (80085a4 <HAL_RCC_ClockConfig+0x1c8>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4618      	mov	r0, r3
 8008584:	f7fc fbcc 	bl	8004d20 <HAL_InitTick>

  return HAL_OK;
 8008588:	2300      	movs	r3, #0
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}
 8008592:	bf00      	nop
 8008594:	40023c00 	.word	0x40023c00
 8008598:	40023800 	.word	0x40023800
 800859c:	08018d04 	.word	0x08018d04
 80085a0:	20000004 	.word	0x20000004
 80085a4:	20000008 	.word	0x20000008

080085a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085a8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80085ac:	b084      	sub	sp, #16
 80085ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80085b0:	2300      	movs	r3, #0
 80085b2:	607b      	str	r3, [r7, #4]
 80085b4:	2300      	movs	r3, #0
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	2300      	movs	r3, #0
 80085ba:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80085bc:	2300      	movs	r3, #0
 80085be:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085c0:	4b67      	ldr	r3, [pc, #412]	; (8008760 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80085c2:	689b      	ldr	r3, [r3, #8]
 80085c4:	f003 030c 	and.w	r3, r3, #12
 80085c8:	2b08      	cmp	r3, #8
 80085ca:	d00d      	beq.n	80085e8 <HAL_RCC_GetSysClockFreq+0x40>
 80085cc:	2b08      	cmp	r3, #8
 80085ce:	f200 80bd 	bhi.w	800874c <HAL_RCC_GetSysClockFreq+0x1a4>
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d002      	beq.n	80085dc <HAL_RCC_GetSysClockFreq+0x34>
 80085d6:	2b04      	cmp	r3, #4
 80085d8:	d003      	beq.n	80085e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80085da:	e0b7      	b.n	800874c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80085dc:	4b61      	ldr	r3, [pc, #388]	; (8008764 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80085de:	60bb      	str	r3, [r7, #8]
       break;
 80085e0:	e0b7      	b.n	8008752 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80085e2:	4b61      	ldr	r3, [pc, #388]	; (8008768 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80085e4:	60bb      	str	r3, [r7, #8]
      break;
 80085e6:	e0b4      	b.n	8008752 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80085e8:	4b5d      	ldr	r3, [pc, #372]	; (8008760 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80085ea:	685b      	ldr	r3, [r3, #4]
 80085ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80085f0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80085f2:	4b5b      	ldr	r3, [pc, #364]	; (8008760 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d04d      	beq.n	800869a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80085fe:	4b58      	ldr	r3, [pc, #352]	; (8008760 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008600:	685b      	ldr	r3, [r3, #4]
 8008602:	099b      	lsrs	r3, r3, #6
 8008604:	461a      	mov	r2, r3
 8008606:	f04f 0300 	mov.w	r3, #0
 800860a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800860e:	f04f 0100 	mov.w	r1, #0
 8008612:	ea02 0800 	and.w	r8, r2, r0
 8008616:	ea03 0901 	and.w	r9, r3, r1
 800861a:	4640      	mov	r0, r8
 800861c:	4649      	mov	r1, r9
 800861e:	f04f 0200 	mov.w	r2, #0
 8008622:	f04f 0300 	mov.w	r3, #0
 8008626:	014b      	lsls	r3, r1, #5
 8008628:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800862c:	0142      	lsls	r2, r0, #5
 800862e:	4610      	mov	r0, r2
 8008630:	4619      	mov	r1, r3
 8008632:	ebb0 0008 	subs.w	r0, r0, r8
 8008636:	eb61 0109 	sbc.w	r1, r1, r9
 800863a:	f04f 0200 	mov.w	r2, #0
 800863e:	f04f 0300 	mov.w	r3, #0
 8008642:	018b      	lsls	r3, r1, #6
 8008644:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008648:	0182      	lsls	r2, r0, #6
 800864a:	1a12      	subs	r2, r2, r0
 800864c:	eb63 0301 	sbc.w	r3, r3, r1
 8008650:	f04f 0000 	mov.w	r0, #0
 8008654:	f04f 0100 	mov.w	r1, #0
 8008658:	00d9      	lsls	r1, r3, #3
 800865a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800865e:	00d0      	lsls	r0, r2, #3
 8008660:	4602      	mov	r2, r0
 8008662:	460b      	mov	r3, r1
 8008664:	eb12 0208 	adds.w	r2, r2, r8
 8008668:	eb43 0309 	adc.w	r3, r3, r9
 800866c:	f04f 0000 	mov.w	r0, #0
 8008670:	f04f 0100 	mov.w	r1, #0
 8008674:	0259      	lsls	r1, r3, #9
 8008676:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800867a:	0250      	lsls	r0, r2, #9
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	4610      	mov	r0, r2
 8008682:	4619      	mov	r1, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	461a      	mov	r2, r3
 8008688:	f04f 0300 	mov.w	r3, #0
 800868c:	f7f8 fadc 	bl	8000c48 <__aeabi_uldivmod>
 8008690:	4602      	mov	r2, r0
 8008692:	460b      	mov	r3, r1
 8008694:	4613      	mov	r3, r2
 8008696:	60fb      	str	r3, [r7, #12]
 8008698:	e04a      	b.n	8008730 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800869a:	4b31      	ldr	r3, [pc, #196]	; (8008760 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	099b      	lsrs	r3, r3, #6
 80086a0:	461a      	mov	r2, r3
 80086a2:	f04f 0300 	mov.w	r3, #0
 80086a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80086aa:	f04f 0100 	mov.w	r1, #0
 80086ae:	ea02 0400 	and.w	r4, r2, r0
 80086b2:	ea03 0501 	and.w	r5, r3, r1
 80086b6:	4620      	mov	r0, r4
 80086b8:	4629      	mov	r1, r5
 80086ba:	f04f 0200 	mov.w	r2, #0
 80086be:	f04f 0300 	mov.w	r3, #0
 80086c2:	014b      	lsls	r3, r1, #5
 80086c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80086c8:	0142      	lsls	r2, r0, #5
 80086ca:	4610      	mov	r0, r2
 80086cc:	4619      	mov	r1, r3
 80086ce:	1b00      	subs	r0, r0, r4
 80086d0:	eb61 0105 	sbc.w	r1, r1, r5
 80086d4:	f04f 0200 	mov.w	r2, #0
 80086d8:	f04f 0300 	mov.w	r3, #0
 80086dc:	018b      	lsls	r3, r1, #6
 80086de:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80086e2:	0182      	lsls	r2, r0, #6
 80086e4:	1a12      	subs	r2, r2, r0
 80086e6:	eb63 0301 	sbc.w	r3, r3, r1
 80086ea:	f04f 0000 	mov.w	r0, #0
 80086ee:	f04f 0100 	mov.w	r1, #0
 80086f2:	00d9      	lsls	r1, r3, #3
 80086f4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80086f8:	00d0      	lsls	r0, r2, #3
 80086fa:	4602      	mov	r2, r0
 80086fc:	460b      	mov	r3, r1
 80086fe:	1912      	adds	r2, r2, r4
 8008700:	eb45 0303 	adc.w	r3, r5, r3
 8008704:	f04f 0000 	mov.w	r0, #0
 8008708:	f04f 0100 	mov.w	r1, #0
 800870c:	0299      	lsls	r1, r3, #10
 800870e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008712:	0290      	lsls	r0, r2, #10
 8008714:	4602      	mov	r2, r0
 8008716:	460b      	mov	r3, r1
 8008718:	4610      	mov	r0, r2
 800871a:	4619      	mov	r1, r3
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	461a      	mov	r2, r3
 8008720:	f04f 0300 	mov.w	r3, #0
 8008724:	f7f8 fa90 	bl	8000c48 <__aeabi_uldivmod>
 8008728:	4602      	mov	r2, r0
 800872a:	460b      	mov	r3, r1
 800872c:	4613      	mov	r3, r2
 800872e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008730:	4b0b      	ldr	r3, [pc, #44]	; (8008760 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	0c1b      	lsrs	r3, r3, #16
 8008736:	f003 0303 	and.w	r3, r3, #3
 800873a:	3301      	adds	r3, #1
 800873c:	005b      	lsls	r3, r3, #1
 800873e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8008740:	68fa      	ldr	r2, [r7, #12]
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	fbb2 f3f3 	udiv	r3, r2, r3
 8008748:	60bb      	str	r3, [r7, #8]
      break;
 800874a:	e002      	b.n	8008752 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800874c:	4b05      	ldr	r3, [pc, #20]	; (8008764 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800874e:	60bb      	str	r3, [r7, #8]
      break;
 8008750:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008752:	68bb      	ldr	r3, [r7, #8]
}
 8008754:	4618      	mov	r0, r3
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800875e:	bf00      	nop
 8008760:	40023800 	.word	0x40023800
 8008764:	00f42400 	.word	0x00f42400
 8008768:	007a1200 	.word	0x007a1200

0800876c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800876c:	b480      	push	{r7}
 800876e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008770:	4b03      	ldr	r3, [pc, #12]	; (8008780 <HAL_RCC_GetHCLKFreq+0x14>)
 8008772:	681b      	ldr	r3, [r3, #0]
}
 8008774:	4618      	mov	r0, r3
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr
 800877e:	bf00      	nop
 8008780:	20000004 	.word	0x20000004

08008784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008788:	f7ff fff0 	bl	800876c <HAL_RCC_GetHCLKFreq>
 800878c:	4602      	mov	r2, r0
 800878e:	4b05      	ldr	r3, [pc, #20]	; (80087a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008790:	689b      	ldr	r3, [r3, #8]
 8008792:	0a9b      	lsrs	r3, r3, #10
 8008794:	f003 0307 	and.w	r3, r3, #7
 8008798:	4903      	ldr	r1, [pc, #12]	; (80087a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800879a:	5ccb      	ldrb	r3, [r1, r3]
 800879c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80087a0:	4618      	mov	r0, r3
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	40023800 	.word	0x40023800
 80087a8:	08018d14 	.word	0x08018d14

080087ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	220f      	movs	r2, #15
 80087ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80087bc:	4b12      	ldr	r3, [pc, #72]	; (8008808 <HAL_RCC_GetClockConfig+0x5c>)
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	f003 0203 	and.w	r2, r3, #3
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80087c8:	4b0f      	ldr	r3, [pc, #60]	; (8008808 <HAL_RCC_GetClockConfig+0x5c>)
 80087ca:	689b      	ldr	r3, [r3, #8]
 80087cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80087d4:	4b0c      	ldr	r3, [pc, #48]	; (8008808 <HAL_RCC_GetClockConfig+0x5c>)
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80087e0:	4b09      	ldr	r3, [pc, #36]	; (8008808 <HAL_RCC_GetClockConfig+0x5c>)
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	08db      	lsrs	r3, r3, #3
 80087e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80087ee:	4b07      	ldr	r3, [pc, #28]	; (800880c <HAL_RCC_GetClockConfig+0x60>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f003 0207 	and.w	r2, r3, #7
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	601a      	str	r2, [r3, #0]
}
 80087fa:	bf00      	nop
 80087fc:	370c      	adds	r7, #12
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop
 8008808:	40023800 	.word	0x40023800
 800880c:	40023c00 	.word	0x40023c00

08008810 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008810:	b580      	push	{r7, lr}
 8008812:	b086      	sub	sp, #24
 8008814:	af00      	add	r7, sp, #0
 8008816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008818:	2300      	movs	r3, #0
 800881a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800881c:	2300      	movs	r3, #0
 800881e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f003 0301 	and.w	r3, r3, #1
 8008828:	2b00      	cmp	r3, #0
 800882a:	d105      	bne.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008834:	2b00      	cmp	r3, #0
 8008836:	d035      	beq.n	80088a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008838:	4b62      	ldr	r3, [pc, #392]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800883a:	2200      	movs	r2, #0
 800883c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800883e:	f7fc fc4d 	bl	80050dc <HAL_GetTick>
 8008842:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008844:	e008      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008846:	f7fc fc49 	bl	80050dc <HAL_GetTick>
 800884a:	4602      	mov	r2, r0
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	2b02      	cmp	r3, #2
 8008852:	d901      	bls.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008854:	2303      	movs	r3, #3
 8008856:	e0b0      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008858:	4b5b      	ldr	r3, [pc, #364]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008860:	2b00      	cmp	r3, #0
 8008862:	d1f0      	bne.n	8008846 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	685b      	ldr	r3, [r3, #4]
 8008868:	019a      	lsls	r2, r3, #6
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	689b      	ldr	r3, [r3, #8]
 800886e:	071b      	lsls	r3, r3, #28
 8008870:	4955      	ldr	r1, [pc, #340]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008872:	4313      	orrs	r3, r2
 8008874:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008878:	4b52      	ldr	r3, [pc, #328]	; (80089c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800887a:	2201      	movs	r2, #1
 800887c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800887e:	f7fc fc2d 	bl	80050dc <HAL_GetTick>
 8008882:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008884:	e008      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008886:	f7fc fc29 	bl	80050dc <HAL_GetTick>
 800888a:	4602      	mov	r2, r0
 800888c:	697b      	ldr	r3, [r7, #20]
 800888e:	1ad3      	subs	r3, r2, r3
 8008890:	2b02      	cmp	r3, #2
 8008892:	d901      	bls.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008894:	2303      	movs	r3, #3
 8008896:	e090      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008898:	4b4b      	ldr	r3, [pc, #300]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d0f0      	beq.n	8008886 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f003 0302 	and.w	r3, r3, #2
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	f000 8083 	beq.w	80089b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80088b2:	2300      	movs	r3, #0
 80088b4:	60fb      	str	r3, [r7, #12]
 80088b6:	4b44      	ldr	r3, [pc, #272]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80088b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ba:	4a43      	ldr	r2, [pc, #268]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80088bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088c0:	6413      	str	r3, [r2, #64]	; 0x40
 80088c2:	4b41      	ldr	r3, [pc, #260]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80088c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80088ca:	60fb      	str	r3, [r7, #12]
 80088cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80088ce:	4b3f      	ldr	r3, [pc, #252]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a3e      	ldr	r2, [pc, #248]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80088d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80088da:	f7fc fbff 	bl	80050dc <HAL_GetTick>
 80088de:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80088e0:	e008      	b.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80088e2:	f7fc fbfb 	bl	80050dc <HAL_GetTick>
 80088e6:	4602      	mov	r2, r0
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	1ad3      	subs	r3, r2, r3
 80088ec:	2b02      	cmp	r3, #2
 80088ee:	d901      	bls.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80088f0:	2303      	movs	r3, #3
 80088f2:	e062      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80088f4:	4b35      	ldr	r3, [pc, #212]	; (80089cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d0f0      	beq.n	80088e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008900:	4b31      	ldr	r3, [pc, #196]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008902:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008904:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008908:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800890a:	693b      	ldr	r3, [r7, #16]
 800890c:	2b00      	cmp	r3, #0
 800890e:	d02f      	beq.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	68db      	ldr	r3, [r3, #12]
 8008914:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	429a      	cmp	r2, r3
 800891c:	d028      	beq.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800891e:	4b2a      	ldr	r3, [pc, #168]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008920:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008926:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008928:	4b29      	ldr	r3, [pc, #164]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800892a:	2201      	movs	r2, #1
 800892c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800892e:	4b28      	ldr	r3, [pc, #160]	; (80089d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008930:	2200      	movs	r2, #0
 8008932:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008934:	4a24      	ldr	r2, [pc, #144]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800893a:	4b23      	ldr	r3, [pc, #140]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800893c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800893e:	f003 0301 	and.w	r3, r3, #1
 8008942:	2b01      	cmp	r3, #1
 8008944:	d114      	bne.n	8008970 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8008946:	f7fc fbc9 	bl	80050dc <HAL_GetTick>
 800894a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800894c:	e00a      	b.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800894e:	f7fc fbc5 	bl	80050dc <HAL_GetTick>
 8008952:	4602      	mov	r2, r0
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	f241 3288 	movw	r2, #5000	; 0x1388
 800895c:	4293      	cmp	r3, r2
 800895e:	d901      	bls.n	8008964 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008960:	2303      	movs	r3, #3
 8008962:	e02a      	b.n	80089ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008964:	4b18      	ldr	r3, [pc, #96]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008968:	f003 0302 	and.w	r3, r3, #2
 800896c:	2b00      	cmp	r3, #0
 800896e:	d0ee      	beq.n	800894e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	68db      	ldr	r3, [r3, #12]
 8008974:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008978:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800897c:	d10d      	bne.n	800899a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800897e:	4b12      	ldr	r3, [pc, #72]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008980:	689b      	ldr	r3, [r3, #8]
 8008982:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800898e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008992:	490d      	ldr	r1, [pc, #52]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008994:	4313      	orrs	r3, r2
 8008996:	608b      	str	r3, [r1, #8]
 8008998:	e005      	b.n	80089a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800899a:	4b0b      	ldr	r3, [pc, #44]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	4a0a      	ldr	r2, [pc, #40]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089a0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80089a4:	6093      	str	r3, [r2, #8]
 80089a6:	4b08      	ldr	r3, [pc, #32]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	68db      	ldr	r3, [r3, #12]
 80089ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80089b2:	4905      	ldr	r1, [pc, #20]	; (80089c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80089b4:	4313      	orrs	r3, r2
 80089b6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80089b8:	2300      	movs	r3, #0
}
 80089ba:	4618      	mov	r0, r3
 80089bc:	3718      	adds	r7, #24
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}
 80089c2:	bf00      	nop
 80089c4:	42470068 	.word	0x42470068
 80089c8:	40023800 	.word	0x40023800
 80089cc:	40007000 	.word	0x40007000
 80089d0:	42470e40 	.word	0x42470e40

080089d4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80089d4:	b580      	push	{r7, lr}
 80089d6:	b082      	sub	sp, #8
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d101      	bne.n	80089e6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80089e2:	2301      	movs	r3, #1
 80089e4:	e083      	b.n	8008aee <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	7f5b      	ldrb	r3, [r3, #29]
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d105      	bne.n	80089fc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2200      	movs	r2, #0
 80089f4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80089f6:	6878      	ldr	r0, [r7, #4]
 80089f8:	f7fc f84a 	bl	8004a90 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2202      	movs	r2, #2
 8008a00:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	22ca      	movs	r2, #202	; 0xca
 8008a08:	625a      	str	r2, [r3, #36]	; 0x24
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	2253      	movs	r2, #83	; 0x53
 8008a10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008a12:	6878      	ldr	r0, [r7, #4]
 8008a14:	f000 fbc0 	bl	8009198 <RTC_EnterInitMode>
 8008a18:	4603      	mov	r3, r0
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d008      	beq.n	8008a30 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	22ff      	movs	r2, #255	; 0xff
 8008a24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	2204      	movs	r2, #4
 8008a2a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008a2c:	2301      	movs	r3, #1
 8008a2e:	e05e      	b.n	8008aee <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	6812      	ldr	r2, [r2, #0]
 8008a3a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008a3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a42:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	6899      	ldr	r1, [r3, #8]
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	685a      	ldr	r2, [r3, #4]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	431a      	orrs	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	695b      	ldr	r3, [r3, #20]
 8008a58:	431a      	orrs	r2, r3
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	430a      	orrs	r2, r1
 8008a60:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	687a      	ldr	r2, [r7, #4]
 8008a68:	68d2      	ldr	r2, [r2, #12]
 8008a6a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	6919      	ldr	r1, [r3, #16]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	041a      	lsls	r2, r3, #16
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	430a      	orrs	r2, r1
 8008a7e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68da      	ldr	r2, [r3, #12]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a8e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f003 0320 	and.w	r3, r3, #32
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d10e      	bne.n	8008abc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fb52 	bl	8009148 <HAL_RTC_WaitForSynchro>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d008      	beq.n	8008abc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	22ff      	movs	r2, #255	; 0xff
 8008ab0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	2204      	movs	r2, #4
 8008ab6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8008ab8:	2301      	movs	r3, #1
 8008aba:	e018      	b.n	8008aee <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008aca:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	699a      	ldr	r2, [r3, #24]
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	430a      	orrs	r2, r1
 8008adc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	22ff      	movs	r2, #255	; 0xff
 8008ae4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2201      	movs	r2, #1
 8008aea:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008aec:	2300      	movs	r3, #0
  }
}
 8008aee:	4618      	mov	r0, r3
 8008af0:	3708      	adds	r7, #8
 8008af2:	46bd      	mov	sp, r7
 8008af4:	bd80      	pop	{r7, pc}

08008af6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008af6:	b590      	push	{r4, r7, lr}
 8008af8:	b087      	sub	sp, #28
 8008afa:	af00      	add	r7, sp, #0
 8008afc:	60f8      	str	r0, [r7, #12]
 8008afe:	60b9      	str	r1, [r7, #8]
 8008b00:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008b02:	2300      	movs	r3, #0
 8008b04:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	7f1b      	ldrb	r3, [r3, #28]
 8008b0a:	2b01      	cmp	r3, #1
 8008b0c:	d101      	bne.n	8008b12 <HAL_RTC_SetTime+0x1c>
 8008b0e:	2302      	movs	r3, #2
 8008b10:	e0aa      	b.n	8008c68 <HAL_RTC_SetTime+0x172>
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2201      	movs	r2, #1
 8008b16:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2202      	movs	r2, #2
 8008b1c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d126      	bne.n	8008b72 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d102      	bne.n	8008b38 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008b32:	68bb      	ldr	r3, [r7, #8]
 8008b34:	2200      	movs	r2, #0
 8008b36:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	781b      	ldrb	r3, [r3, #0]
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f000 fb57 	bl	80091f0 <RTC_ByteToBcd2>
 8008b42:	4603      	mov	r3, r0
 8008b44:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	785b      	ldrb	r3, [r3, #1]
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f000 fb50 	bl	80091f0 <RTC_ByteToBcd2>
 8008b50:	4603      	mov	r3, r0
 8008b52:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008b54:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	789b      	ldrb	r3, [r3, #2]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f000 fb48 	bl	80091f0 <RTC_ByteToBcd2>
 8008b60:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8008b62:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8008b66:	68bb      	ldr	r3, [r7, #8]
 8008b68:	78db      	ldrb	r3, [r3, #3]
 8008b6a:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	617b      	str	r3, [r7, #20]
 8008b70:	e018      	b.n	8008ba4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d102      	bne.n	8008b86 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	2200      	movs	r2, #0
 8008b84:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	785b      	ldrb	r3, [r3, #1]
 8008b90:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008b92:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008b94:	68ba      	ldr	r2, [r7, #8]
 8008b96:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8008b98:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	78db      	ldrb	r3, [r3, #3]
 8008b9e:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8008ba0:	4313      	orrs	r3, r2
 8008ba2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	22ca      	movs	r2, #202	; 0xca
 8008baa:	625a      	str	r2, [r3, #36]	; 0x24
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	2253      	movs	r2, #83	; 0x53
 8008bb2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f000 faef 	bl	8009198 <RTC_EnterInitMode>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d00b      	beq.n	8008bd8 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	22ff      	movs	r2, #255	; 0xff
 8008bc6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2204      	movs	r2, #4
 8008bcc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008bd4:	2301      	movs	r3, #1
 8008bd6:	e047      	b.n	8008c68 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	697b      	ldr	r3, [r7, #20]
 8008bde:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008be2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008be6:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	689a      	ldr	r2, [r3, #8]
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008bf6:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	6899      	ldr	r1, [r3, #8]
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	68da      	ldr	r2, [r3, #12]
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	691b      	ldr	r3, [r3, #16]
 8008c06:	431a      	orrs	r2, r3
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	430a      	orrs	r2, r1
 8008c0e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	68da      	ldr	r2, [r3, #12]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c1e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f003 0320 	and.w	r3, r3, #32
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d111      	bne.n	8008c52 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f000 fa8a 	bl	8009148 <HAL_RTC_WaitForSynchro>
 8008c34:	4603      	mov	r3, r0
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d00b      	beq.n	8008c52 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	22ff      	movs	r2, #255	; 0xff
 8008c40:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2204      	movs	r2, #4
 8008c46:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	e00a      	b.n	8008c68 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	22ff      	movs	r2, #255	; 0xff
 8008c58:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2201      	movs	r2, #1
 8008c5e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2200      	movs	r2, #0
 8008c64:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008c66:	2300      	movs	r3, #0
  }
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	371c      	adds	r7, #28
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd90      	pop	{r4, r7, pc}

08008c70 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b086      	sub	sp, #24
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	60f8      	str	r0, [r7, #12]
 8008c78:	60b9      	str	r1, [r7, #8]
 8008c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008c86:	68bb      	ldr	r3, [r7, #8]
 8008c88:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	691b      	ldr	r3, [r3, #16]
 8008c90:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8008ca2:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8008ca6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	0c1b      	lsrs	r3, r3, #16
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008cb2:	b2da      	uxtb	r2, r3
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8008cb8:	697b      	ldr	r3, [r7, #20]
 8008cba:	0a1b      	lsrs	r3, r3, #8
 8008cbc:	b2db      	uxtb	r3, r3
 8008cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cc2:	b2da      	uxtb	r2, r3
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	b2db      	uxtb	r3, r3
 8008ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cd0:	b2da      	uxtb	r2, r3
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	0c1b      	lsrs	r3, r3, #16
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ce0:	b2da      	uxtb	r2, r3
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d11a      	bne.n	8008d22 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	781b      	ldrb	r3, [r3, #0]
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	f000 fa9b 	bl	800922c <RTC_Bcd2ToByte>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	461a      	mov	r2, r3
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	785b      	ldrb	r3, [r3, #1]
 8008d02:	4618      	mov	r0, r3
 8008d04:	f000 fa92 	bl	800922c <RTC_Bcd2ToByte>
 8008d08:	4603      	mov	r3, r0
 8008d0a:	461a      	mov	r2, r3
 8008d0c:	68bb      	ldr	r3, [r7, #8]
 8008d0e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	789b      	ldrb	r3, [r3, #2]
 8008d14:	4618      	mov	r0, r3
 8008d16:	f000 fa89 	bl	800922c <RTC_Bcd2ToByte>
 8008d1a:	4603      	mov	r3, r0
 8008d1c:	461a      	mov	r2, r3
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3718      	adds	r7, #24
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	bd80      	pop	{r7, pc}

08008d2c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008d2c:	b590      	push	{r4, r7, lr}
 8008d2e:	b087      	sub	sp, #28
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008d38:	2300      	movs	r3, #0
 8008d3a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	7f1b      	ldrb	r3, [r3, #28]
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d101      	bne.n	8008d48 <HAL_RTC_SetDate+0x1c>
 8008d44:	2302      	movs	r3, #2
 8008d46:	e094      	b.n	8008e72 <HAL_RTC_SetDate+0x146>
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	2202      	movs	r2, #2
 8008d52:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d10e      	bne.n	8008d78 <HAL_RTC_SetDate+0x4c>
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	785b      	ldrb	r3, [r3, #1]
 8008d5e:	f003 0310 	and.w	r3, r3, #16
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d008      	beq.n	8008d78 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	785b      	ldrb	r3, [r3, #1]
 8008d6a:	f023 0310 	bic.w	r3, r3, #16
 8008d6e:	b2db      	uxtb	r3, r3
 8008d70:	330a      	adds	r3, #10
 8008d72:	b2da      	uxtb	r2, r3
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d11c      	bne.n	8008db8 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	78db      	ldrb	r3, [r3, #3]
 8008d82:	4618      	mov	r0, r3
 8008d84:	f000 fa34 	bl	80091f0 <RTC_ByteToBcd2>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	785b      	ldrb	r3, [r3, #1]
 8008d90:	4618      	mov	r0, r3
 8008d92:	f000 fa2d 	bl	80091f0 <RTC_ByteToBcd2>
 8008d96:	4603      	mov	r3, r0
 8008d98:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008d9a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	789b      	ldrb	r3, [r3, #2]
 8008da0:	4618      	mov	r0, r3
 8008da2:	f000 fa25 	bl	80091f0 <RTC_ByteToBcd2>
 8008da6:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8008da8:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8008db2:	4313      	orrs	r3, r2
 8008db4:	617b      	str	r3, [r7, #20]
 8008db6:	e00e      	b.n	8008dd6 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	78db      	ldrb	r3, [r3, #3]
 8008dbc:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	785b      	ldrb	r3, [r3, #1]
 8008dc2:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008dc4:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008dc6:	68ba      	ldr	r2, [r7, #8]
 8008dc8:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8008dca:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	781b      	ldrb	r3, [r3, #0]
 8008dd0:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	22ca      	movs	r2, #202	; 0xca
 8008ddc:	625a      	str	r2, [r3, #36]	; 0x24
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2253      	movs	r2, #83	; 0x53
 8008de4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f000 f9d6 	bl	8009198 <RTC_EnterInitMode>
 8008dec:	4603      	mov	r3, r0
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d00b      	beq.n	8008e0a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	22ff      	movs	r2, #255	; 0xff
 8008df8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2204      	movs	r2, #4
 8008dfe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2200      	movs	r2, #0
 8008e04:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008e06:	2301      	movs	r3, #1
 8008e08:	e033      	b.n	8008e72 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008e14:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008e18:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	68da      	ldr	r2, [r3, #12]
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e28:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	689b      	ldr	r3, [r3, #8]
 8008e30:	f003 0320 	and.w	r3, r3, #32
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d111      	bne.n	8008e5c <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008e38:	68f8      	ldr	r0, [r7, #12]
 8008e3a:	f000 f985 	bl	8009148 <HAL_RTC_WaitForSynchro>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d00b      	beq.n	8008e5c <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	22ff      	movs	r2, #255	; 0xff
 8008e4a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2204      	movs	r2, #4
 8008e50:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2200      	movs	r2, #0
 8008e56:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e00a      	b.n	8008e72 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	22ff      	movs	r2, #255	; 0xff
 8008e62:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2201      	movs	r2, #1
 8008e68:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008e70:	2300      	movs	r3, #0
  }
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	371c      	adds	r7, #28
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bd90      	pop	{r4, r7, pc}

08008e7a <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008e7a:	b580      	push	{r7, lr}
 8008e7c:	b086      	sub	sp, #24
 8008e7e:	af00      	add	r7, sp, #0
 8008e80:	60f8      	str	r0, [r7, #12]
 8008e82:	60b9      	str	r1, [r7, #8]
 8008e84:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008e86:	2300      	movs	r3, #0
 8008e88:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	685b      	ldr	r3, [r3, #4]
 8008e90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8008e94:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008e98:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	0c1b      	lsrs	r3, r3, #16
 8008e9e:	b2da      	uxtb	r2, r3
 8008ea0:	68bb      	ldr	r3, [r7, #8]
 8008ea2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	0a1b      	lsrs	r3, r3, #8
 8008ea8:	b2db      	uxtb	r3, r3
 8008eaa:	f003 031f 	and.w	r3, r3, #31
 8008eae:	b2da      	uxtb	r2, r3
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	b2db      	uxtb	r3, r3
 8008eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008ebc:	b2da      	uxtb	r2, r3
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	0b5b      	lsrs	r3, r3, #13
 8008ec6:	b2db      	uxtb	r3, r3
 8008ec8:	f003 0307 	and.w	r3, r3, #7
 8008ecc:	b2da      	uxtb	r2, r3
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d11a      	bne.n	8008f0e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	78db      	ldrb	r3, [r3, #3]
 8008edc:	4618      	mov	r0, r3
 8008ede:	f000 f9a5 	bl	800922c <RTC_Bcd2ToByte>
 8008ee2:	4603      	mov	r3, r0
 8008ee4:	461a      	mov	r2, r3
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	785b      	ldrb	r3, [r3, #1]
 8008eee:	4618      	mov	r0, r3
 8008ef0:	f000 f99c 	bl	800922c <RTC_Bcd2ToByte>
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	461a      	mov	r2, r3
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	789b      	ldrb	r3, [r3, #2]
 8008f00:	4618      	mov	r0, r3
 8008f02:	f000 f993 	bl	800922c <RTC_Bcd2ToByte>
 8008f06:	4603      	mov	r3, r0
 8008f08:	461a      	mov	r2, r3
 8008f0a:	68bb      	ldr	r3, [r7, #8]
 8008f0c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	4618      	mov	r0, r3
 8008f12:	3718      	adds	r7, #24
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}

08008f18 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008f18:	b590      	push	{r4, r7, lr}
 8008f1a:	b089      	sub	sp, #36	; 0x24
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	60f8      	str	r0, [r7, #12]
 8008f20:	60b9      	str	r1, [r7, #8]
 8008f22:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8008f24:	2300      	movs	r3, #0
 8008f26:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	61fb      	str	r3, [r7, #28]
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	7f1b      	ldrb	r3, [r3, #28]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d101      	bne.n	8008f3c <HAL_RTC_SetAlarm+0x24>
 8008f38:	2302      	movs	r3, #2
 8008f3a:	e101      	b.n	8009140 <HAL_RTC_SetAlarm+0x228>
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	2202      	movs	r2, #2
 8008f46:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d137      	bne.n	8008fbe <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d102      	bne.n	8008f62 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008f5c:	68bb      	ldr	r3, [r7, #8]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	781b      	ldrb	r3, [r3, #0]
 8008f66:	4618      	mov	r0, r3
 8008f68:	f000 f942 	bl	80091f0 <RTC_ByteToBcd2>
 8008f6c:	4603      	mov	r3, r0
 8008f6e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	785b      	ldrb	r3, [r3, #1]
 8008f74:	4618      	mov	r0, r3
 8008f76:	f000 f93b 	bl	80091f0 <RTC_ByteToBcd2>
 8008f7a:	4603      	mov	r3, r0
 8008f7c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008f7e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	789b      	ldrb	r3, [r3, #2]
 8008f84:	4618      	mov	r0, r3
 8008f86:	f000 f933 	bl	80091f0 <RTC_ByteToBcd2>
 8008f8a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008f8c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	78db      	ldrb	r3, [r3, #3]
 8008f94:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008f96:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	f000 f925 	bl	80091f0 <RTC_ByteToBcd2>
 8008fa6:	4603      	mov	r3, r0
 8008fa8:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008faa:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008fb2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8008fb8:	4313      	orrs	r3, r2
 8008fba:	61fb      	str	r3, [r7, #28]
 8008fbc:	e023      	b.n	8009006 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	689b      	ldr	r3, [r3, #8]
 8008fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d102      	bne.n	8008fd2 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8008fcc:	68bb      	ldr	r3, [r7, #8]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	785b      	ldrb	r3, [r3, #1]
 8008fdc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8008fde:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008fe0:	68ba      	ldr	r2, [r7, #8]
 8008fe2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8008fe4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	78db      	ldrb	r3, [r3, #3]
 8008fea:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008fec:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ff4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8008ff6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8008ffc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8009002:	4313      	orrs	r3, r2
 8009004:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	685a      	ldr	r2, [r3, #4]
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	4313      	orrs	r3, r2
 8009010:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	22ca      	movs	r2, #202	; 0xca
 8009018:	625a      	str	r2, [r3, #36]	; 0x24
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	2253      	movs	r2, #83	; 0x53
 8009020:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800902a:	d13f      	bne.n	80090ac <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	689a      	ldr	r2, [r3, #8]
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800903a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	689a      	ldr	r2, [r3, #8]
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800904a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800904c:	f7fc f846 	bl	80050dc <HAL_GetTick>
 8009050:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8009052:	e013      	b.n	800907c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009054:	f7fc f842 	bl	80050dc <HAL_GetTick>
 8009058:	4602      	mov	r2, r0
 800905a:	69bb      	ldr	r3, [r7, #24]
 800905c:	1ad3      	subs	r3, r2, r3
 800905e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009062:	d90b      	bls.n	800907c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	22ff      	movs	r2, #255	; 0xff
 800906a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	2203      	movs	r2, #3
 8009070:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	2200      	movs	r2, #0
 8009076:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009078:	2303      	movs	r3, #3
 800907a:	e061      	b.n	8009140 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	68db      	ldr	r3, [r3, #12]
 8009082:	f003 0301 	and.w	r3, r3, #1
 8009086:	2b00      	cmp	r3, #0
 8009088:	d0e4      	beq.n	8009054 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	69fa      	ldr	r2, [r7, #28]
 8009090:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	697a      	ldr	r2, [r7, #20]
 8009098:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	689a      	ldr	r2, [r3, #8]
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80090a8:	609a      	str	r2, [r3, #8]
 80090aa:	e03e      	b.n	800912a <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	689a      	ldr	r2, [r3, #8]
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80090ba:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	689a      	ldr	r2, [r3, #8]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80090ca:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80090cc:	f7fc f806 	bl	80050dc <HAL_GetTick>
 80090d0:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80090d2:	e013      	b.n	80090fc <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80090d4:	f7fc f802 	bl	80050dc <HAL_GetTick>
 80090d8:	4602      	mov	r2, r0
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	1ad3      	subs	r3, r2, r3
 80090de:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090e2:	d90b      	bls.n	80090fc <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	22ff      	movs	r2, #255	; 0xff
 80090ea:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	2203      	movs	r2, #3
 80090f0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	2200      	movs	r2, #0
 80090f6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80090f8:	2303      	movs	r3, #3
 80090fa:	e021      	b.n	8009140 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68db      	ldr	r3, [r3, #12]
 8009102:	f003 0302 	and.w	r3, r3, #2
 8009106:	2b00      	cmp	r3, #0
 8009108:	d0e4      	beq.n	80090d4 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	69fa      	ldr	r2, [r7, #28]
 8009110:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	697a      	ldr	r2, [r7, #20]
 8009118:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	689a      	ldr	r2, [r3, #8]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009128:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	22ff      	movs	r2, #255	; 0xff
 8009130:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	2201      	movs	r2, #1
 8009136:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3724      	adds	r7, #36	; 0x24
 8009144:	46bd      	mov	sp, r7
 8009146:	bd90      	pop	{r4, r7, pc}

08009148 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009150:	2300      	movs	r3, #0
 8009152:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	68da      	ldr	r2, [r3, #12]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009162:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009164:	f7fb ffba 	bl	80050dc <HAL_GetTick>
 8009168:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800916a:	e009      	b.n	8009180 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800916c:	f7fb ffb6 	bl	80050dc <HAL_GetTick>
 8009170:	4602      	mov	r2, r0
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	1ad3      	subs	r3, r2, r3
 8009176:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800917a:	d901      	bls.n	8009180 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800917c:	2303      	movs	r3, #3
 800917e:	e007      	b.n	8009190 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	68db      	ldr	r3, [r3, #12]
 8009186:	f003 0320 	and.w	r3, r3, #32
 800918a:	2b00      	cmp	r3, #0
 800918c:	d0ee      	beq.n	800916c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3710      	adds	r7, #16
 8009194:	46bd      	mov	sp, r7
 8009196:	bd80      	pop	{r7, pc}

08009198 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b084      	sub	sp, #16
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80091a0:	2300      	movs	r3, #0
 80091a2:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	68db      	ldr	r3, [r3, #12]
 80091aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d119      	bne.n	80091e6 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80091ba:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80091bc:	f7fb ff8e 	bl	80050dc <HAL_GetTick>
 80091c0:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80091c2:	e009      	b.n	80091d8 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80091c4:	f7fb ff8a 	bl	80050dc <HAL_GetTick>
 80091c8:	4602      	mov	r2, r0
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	1ad3      	subs	r3, r2, r3
 80091ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091d2:	d901      	bls.n	80091d8 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80091d4:	2303      	movs	r3, #3
 80091d6:	e007      	b.n	80091e8 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d0ee      	beq.n	80091c4 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80091e6:	2300      	movs	r3, #0
}
 80091e8:	4618      	mov	r0, r3
 80091ea:	3710      	adds	r7, #16
 80091ec:	46bd      	mov	sp, r7
 80091ee:	bd80      	pop	{r7, pc}

080091f0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	4603      	mov	r3, r0
 80091f8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80091fa:	2300      	movs	r3, #0
 80091fc:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80091fe:	e005      	b.n	800920c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	3301      	adds	r3, #1
 8009204:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8009206:	79fb      	ldrb	r3, [r7, #7]
 8009208:	3b0a      	subs	r3, #10
 800920a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800920c:	79fb      	ldrb	r3, [r7, #7]
 800920e:	2b09      	cmp	r3, #9
 8009210:	d8f6      	bhi.n	8009200 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	b2db      	uxtb	r3, r3
 8009216:	011b      	lsls	r3, r3, #4
 8009218:	b2da      	uxtb	r2, r3
 800921a:	79fb      	ldrb	r3, [r7, #7]
 800921c:	4313      	orrs	r3, r2
 800921e:	b2db      	uxtb	r3, r3
}
 8009220:	4618      	mov	r0, r3
 8009222:	3714      	adds	r7, #20
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800922c:	b480      	push	{r7}
 800922e:	b085      	sub	sp, #20
 8009230:	af00      	add	r7, sp, #0
 8009232:	4603      	mov	r3, r0
 8009234:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8009236:	2300      	movs	r3, #0
 8009238:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800923a:	79fb      	ldrb	r3, [r7, #7]
 800923c:	091b      	lsrs	r3, r3, #4
 800923e:	b2db      	uxtb	r3, r3
 8009240:	461a      	mov	r2, r3
 8009242:	4613      	mov	r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	4413      	add	r3, r2
 8009248:	005b      	lsls	r3, r3, #1
 800924a:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800924c:	79fb      	ldrb	r3, [r7, #7]
 800924e:	f003 030f 	and.w	r3, r3, #15
 8009252:	b2da      	uxtb	r2, r3
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	b2db      	uxtb	r3, r3
 8009258:	4413      	add	r3, r2
 800925a:	b2db      	uxtb	r3, r3
}
 800925c:	4618      	mov	r0, r3
 800925e:	3714      	adds	r7, #20
 8009260:	46bd      	mov	sp, r7
 8009262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009266:	4770      	bx	lr

08009268 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b082      	sub	sp, #8
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d101      	bne.n	800927a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e07b      	b.n	8009372 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927e:	2b00      	cmp	r3, #0
 8009280:	d108      	bne.n	8009294 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	685b      	ldr	r3, [r3, #4]
 8009286:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800928a:	d009      	beq.n	80092a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	61da      	str	r2, [r3, #28]
 8009292:	e005      	b.n	80092a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2200      	movs	r2, #0
 800929e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d106      	bne.n	80092c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7fb fc12 	bl	8004ae4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	2202      	movs	r2, #2
 80092c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80092d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	689b      	ldr	r3, [r3, #8]
 80092e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80092e8:	431a      	orrs	r2, r3
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80092f2:	431a      	orrs	r2, r3
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	691b      	ldr	r3, [r3, #16]
 80092f8:	f003 0302 	and.w	r3, r3, #2
 80092fc:	431a      	orrs	r2, r3
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	695b      	ldr	r3, [r3, #20]
 8009302:	f003 0301 	and.w	r3, r3, #1
 8009306:	431a      	orrs	r2, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	699b      	ldr	r3, [r3, #24]
 800930c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009310:	431a      	orrs	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	69db      	ldr	r3, [r3, #28]
 8009316:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800931a:	431a      	orrs	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6a1b      	ldr	r3, [r3, #32]
 8009320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009324:	ea42 0103 	orr.w	r1, r2, r3
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800932c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	430a      	orrs	r2, r1
 8009336:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	699b      	ldr	r3, [r3, #24]
 800933c:	0c1b      	lsrs	r3, r3, #16
 800933e:	f003 0104 	and.w	r1, r3, #4
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009346:	f003 0210 	and.w	r2, r3, #16
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	430a      	orrs	r2, r1
 8009350:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	69da      	ldr	r2, [r3, #28]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009360:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	2201      	movs	r2, #1
 800936c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8009370:	2300      	movs	r3, #0
}
 8009372:	4618      	mov	r0, r3
 8009374:	3708      	adds	r7, #8
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}

0800937a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800937a:	b580      	push	{r7, lr}
 800937c:	b088      	sub	sp, #32
 800937e:	af00      	add	r7, sp, #0
 8009380:	60f8      	str	r0, [r7, #12]
 8009382:	60b9      	str	r1, [r7, #8]
 8009384:	603b      	str	r3, [r7, #0]
 8009386:	4613      	mov	r3, r2
 8009388:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009394:	2b01      	cmp	r3, #1
 8009396:	d101      	bne.n	800939c <HAL_SPI_Transmit+0x22>
 8009398:	2302      	movs	r3, #2
 800939a:	e126      	b.n	80095ea <HAL_SPI_Transmit+0x270>
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093a4:	f7fb fe9a 	bl	80050dc <HAL_GetTick>
 80093a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80093aa:	88fb      	ldrh	r3, [r7, #6]
 80093ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d002      	beq.n	80093c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80093ba:	2302      	movs	r3, #2
 80093bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80093be:	e10b      	b.n	80095d8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d002      	beq.n	80093cc <HAL_SPI_Transmit+0x52>
 80093c6:	88fb      	ldrh	r3, [r7, #6]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d102      	bne.n	80093d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80093cc:	2301      	movs	r3, #1
 80093ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80093d0:	e102      	b.n	80095d8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2203      	movs	r2, #3
 80093d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2200      	movs	r2, #0
 80093de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	68ba      	ldr	r2, [r7, #8]
 80093e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	88fa      	ldrh	r2, [r7, #6]
 80093ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	88fa      	ldrh	r2, [r7, #6]
 80093f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2200      	movs	r2, #0
 80093f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2200      	movs	r2, #0
 80093fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	2200      	movs	r2, #0
 8009402:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2200      	movs	r2, #0
 8009408:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2200      	movs	r2, #0
 800940e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009418:	d10f      	bne.n	800943a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	681a      	ldr	r2, [r3, #0]
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009428:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	681a      	ldr	r2, [r3, #0]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009438:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009444:	2b40      	cmp	r3, #64	; 0x40
 8009446:	d007      	beq.n	8009458 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009456:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	68db      	ldr	r3, [r3, #12]
 800945c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009460:	d14b      	bne.n	80094fa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	685b      	ldr	r3, [r3, #4]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d002      	beq.n	8009470 <HAL_SPI_Transmit+0xf6>
 800946a:	8afb      	ldrh	r3, [r7, #22]
 800946c:	2b01      	cmp	r3, #1
 800946e:	d13e      	bne.n	80094ee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009474:	881a      	ldrh	r2, [r3, #0]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009480:	1c9a      	adds	r2, r3, #2
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800948a:	b29b      	uxth	r3, r3
 800948c:	3b01      	subs	r3, #1
 800948e:	b29a      	uxth	r2, r3
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009494:	e02b      	b.n	80094ee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	689b      	ldr	r3, [r3, #8]
 800949c:	f003 0302 	and.w	r3, r3, #2
 80094a0:	2b02      	cmp	r3, #2
 80094a2:	d112      	bne.n	80094ca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a8:	881a      	ldrh	r2, [r3, #0]
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b4:	1c9a      	adds	r2, r3, #2
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80094ba:	68fb      	ldr	r3, [r7, #12]
 80094bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094be:	b29b      	uxth	r3, r3
 80094c0:	3b01      	subs	r3, #1
 80094c2:	b29a      	uxth	r2, r3
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	86da      	strh	r2, [r3, #54]	; 0x36
 80094c8:	e011      	b.n	80094ee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094ca:	f7fb fe07 	bl	80050dc <HAL_GetTick>
 80094ce:	4602      	mov	r2, r0
 80094d0:	69bb      	ldr	r3, [r7, #24]
 80094d2:	1ad3      	subs	r3, r2, r3
 80094d4:	683a      	ldr	r2, [r7, #0]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d803      	bhi.n	80094e2 <HAL_SPI_Transmit+0x168>
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80094e0:	d102      	bne.n	80094e8 <HAL_SPI_Transmit+0x16e>
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d102      	bne.n	80094ee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80094e8:	2303      	movs	r3, #3
 80094ea:	77fb      	strb	r3, [r7, #31]
          goto error;
 80094ec:	e074      	b.n	80095d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80094f2:	b29b      	uxth	r3, r3
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d1ce      	bne.n	8009496 <HAL_SPI_Transmit+0x11c>
 80094f8:	e04c      	b.n	8009594 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d002      	beq.n	8009508 <HAL_SPI_Transmit+0x18e>
 8009502:	8afb      	ldrh	r3, [r7, #22]
 8009504:	2b01      	cmp	r3, #1
 8009506:	d140      	bne.n	800958a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	330c      	adds	r3, #12
 8009512:	7812      	ldrb	r2, [r2, #0]
 8009514:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800951a:	1c5a      	adds	r2, r3, #1
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009524:	b29b      	uxth	r3, r3
 8009526:	3b01      	subs	r3, #1
 8009528:	b29a      	uxth	r2, r3
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800952e:	e02c      	b.n	800958a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	f003 0302 	and.w	r3, r3, #2
 800953a:	2b02      	cmp	r3, #2
 800953c:	d113      	bne.n	8009566 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	330c      	adds	r3, #12
 8009548:	7812      	ldrb	r2, [r2, #0]
 800954a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009550:	1c5a      	adds	r2, r3, #1
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800955a:	b29b      	uxth	r3, r3
 800955c:	3b01      	subs	r3, #1
 800955e:	b29a      	uxth	r2, r3
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	86da      	strh	r2, [r3, #54]	; 0x36
 8009564:	e011      	b.n	800958a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009566:	f7fb fdb9 	bl	80050dc <HAL_GetTick>
 800956a:	4602      	mov	r2, r0
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	1ad3      	subs	r3, r2, r3
 8009570:	683a      	ldr	r2, [r7, #0]
 8009572:	429a      	cmp	r2, r3
 8009574:	d803      	bhi.n	800957e <HAL_SPI_Transmit+0x204>
 8009576:	683b      	ldr	r3, [r7, #0]
 8009578:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800957c:	d102      	bne.n	8009584 <HAL_SPI_Transmit+0x20a>
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d102      	bne.n	800958a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8009584:	2303      	movs	r3, #3
 8009586:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009588:	e026      	b.n	80095d8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800958e:	b29b      	uxth	r3, r3
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1cd      	bne.n	8009530 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009594:	69ba      	ldr	r2, [r7, #24]
 8009596:	6839      	ldr	r1, [r7, #0]
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	f000 fa63 	bl	8009a64 <SPI_EndRxTxTransaction>
 800959e:	4603      	mov	r3, r0
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d002      	beq.n	80095aa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2220      	movs	r2, #32
 80095a8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	689b      	ldr	r3, [r3, #8]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d10a      	bne.n	80095c8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095b2:	2300      	movs	r3, #0
 80095b4:	613b      	str	r3, [r7, #16]
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	613b      	str	r3, [r7, #16]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	689b      	ldr	r3, [r3, #8]
 80095c4:	613b      	str	r3, [r7, #16]
 80095c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d002      	beq.n	80095d6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80095d0:	2301      	movs	r3, #1
 80095d2:	77fb      	strb	r3, [r7, #31]
 80095d4:	e000      	b.n	80095d8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80095d6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	2200      	movs	r2, #0
 80095e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80095e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80095ea:	4618      	mov	r0, r3
 80095ec:	3720      	adds	r7, #32
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b08c      	sub	sp, #48	; 0x30
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	60f8      	str	r0, [r7, #12]
 80095fa:	60b9      	str	r1, [r7, #8]
 80095fc:	607a      	str	r2, [r7, #4]
 80095fe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8009600:	2301      	movs	r3, #1
 8009602:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009604:	2300      	movs	r3, #0
 8009606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009610:	2b01      	cmp	r3, #1
 8009612:	d101      	bne.n	8009618 <HAL_SPI_TransmitReceive+0x26>
 8009614:	2302      	movs	r3, #2
 8009616:	e18a      	b.n	800992e <HAL_SPI_TransmitReceive+0x33c>
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2201      	movs	r2, #1
 800961c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009620:	f7fb fd5c 	bl	80050dc <HAL_GetTick>
 8009624:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800962c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	685b      	ldr	r3, [r3, #4]
 8009634:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009636:	887b      	ldrh	r3, [r7, #2]
 8009638:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800963a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800963e:	2b01      	cmp	r3, #1
 8009640:	d00f      	beq.n	8009662 <HAL_SPI_TransmitReceive+0x70>
 8009642:	69fb      	ldr	r3, [r7, #28]
 8009644:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009648:	d107      	bne.n	800965a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	2b00      	cmp	r3, #0
 8009650:	d103      	bne.n	800965a <HAL_SPI_TransmitReceive+0x68>
 8009652:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009656:	2b04      	cmp	r3, #4
 8009658:	d003      	beq.n	8009662 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800965a:	2302      	movs	r3, #2
 800965c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009660:	e15b      	b.n	800991a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d005      	beq.n	8009674 <HAL_SPI_TransmitReceive+0x82>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2b00      	cmp	r3, #0
 800966c:	d002      	beq.n	8009674 <HAL_SPI_TransmitReceive+0x82>
 800966e:	887b      	ldrh	r3, [r7, #2]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d103      	bne.n	800967c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009674:	2301      	movs	r3, #1
 8009676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800967a:	e14e      	b.n	800991a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009682:	b2db      	uxtb	r3, r3
 8009684:	2b04      	cmp	r3, #4
 8009686:	d003      	beq.n	8009690 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2205      	movs	r2, #5
 800968c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	2200      	movs	r2, #0
 8009694:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	887a      	ldrh	r2, [r7, #2]
 80096a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	887a      	ldrh	r2, [r7, #2]
 80096a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	68ba      	ldr	r2, [r7, #8]
 80096ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	887a      	ldrh	r2, [r7, #2]
 80096b2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	887a      	ldrh	r2, [r7, #2]
 80096b8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	2200      	movs	r2, #0
 80096be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2200      	movs	r2, #0
 80096c4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80096d0:	2b40      	cmp	r3, #64	; 0x40
 80096d2:	d007      	beq.n	80096e4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80096e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	68db      	ldr	r3, [r3, #12]
 80096e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096ec:	d178      	bne.n	80097e0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	685b      	ldr	r3, [r3, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d002      	beq.n	80096fc <HAL_SPI_TransmitReceive+0x10a>
 80096f6:	8b7b      	ldrh	r3, [r7, #26]
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d166      	bne.n	80097ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009700:	881a      	ldrh	r2, [r3, #0]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800970c:	1c9a      	adds	r2, r3, #2
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009716:	b29b      	uxth	r3, r3
 8009718:	3b01      	subs	r3, #1
 800971a:	b29a      	uxth	r2, r3
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009720:	e053      	b.n	80097ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	f003 0302 	and.w	r3, r3, #2
 800972c:	2b02      	cmp	r3, #2
 800972e:	d11b      	bne.n	8009768 <HAL_SPI_TransmitReceive+0x176>
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009734:	b29b      	uxth	r3, r3
 8009736:	2b00      	cmp	r3, #0
 8009738:	d016      	beq.n	8009768 <HAL_SPI_TransmitReceive+0x176>
 800973a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973c:	2b01      	cmp	r3, #1
 800973e:	d113      	bne.n	8009768 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009744:	881a      	ldrh	r2, [r3, #0]
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009750:	1c9a      	adds	r2, r3, #2
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800975a:	b29b      	uxth	r3, r3
 800975c:	3b01      	subs	r3, #1
 800975e:	b29a      	uxth	r2, r3
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009764:	2300      	movs	r3, #0
 8009766:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	689b      	ldr	r3, [r3, #8]
 800976e:	f003 0301 	and.w	r3, r3, #1
 8009772:	2b01      	cmp	r3, #1
 8009774:	d119      	bne.n	80097aa <HAL_SPI_TransmitReceive+0x1b8>
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800977a:	b29b      	uxth	r3, r3
 800977c:	2b00      	cmp	r3, #0
 800977e:	d014      	beq.n	80097aa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	68da      	ldr	r2, [r3, #12]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978a:	b292      	uxth	r2, r2
 800978c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009792:	1c9a      	adds	r2, r3, #2
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800979c:	b29b      	uxth	r3, r3
 800979e:	3b01      	subs	r3, #1
 80097a0:	b29a      	uxth	r2, r3
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80097a6:	2301      	movs	r3, #1
 80097a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80097aa:	f7fb fc97 	bl	80050dc <HAL_GetTick>
 80097ae:	4602      	mov	r2, r0
 80097b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b2:	1ad3      	subs	r3, r2, r3
 80097b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80097b6:	429a      	cmp	r2, r3
 80097b8:	d807      	bhi.n	80097ca <HAL_SPI_TransmitReceive+0x1d8>
 80097ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097c0:	d003      	beq.n	80097ca <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80097c2:	2303      	movs	r3, #3
 80097c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80097c8:	e0a7      	b.n	800991a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097ce:	b29b      	uxth	r3, r3
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1a6      	bne.n	8009722 <HAL_SPI_TransmitReceive+0x130>
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80097d8:	b29b      	uxth	r3, r3
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d1a1      	bne.n	8009722 <HAL_SPI_TransmitReceive+0x130>
 80097de:	e07c      	b.n	80098da <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d002      	beq.n	80097ee <HAL_SPI_TransmitReceive+0x1fc>
 80097e8:	8b7b      	ldrh	r3, [r7, #26]
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d16b      	bne.n	80098c6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	330c      	adds	r3, #12
 80097f8:	7812      	ldrb	r2, [r2, #0]
 80097fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009800:	1c5a      	adds	r2, r3, #1
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800980a:	b29b      	uxth	r3, r3
 800980c:	3b01      	subs	r3, #1
 800980e:	b29a      	uxth	r2, r3
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009814:	e057      	b.n	80098c6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	689b      	ldr	r3, [r3, #8]
 800981c:	f003 0302 	and.w	r3, r3, #2
 8009820:	2b02      	cmp	r3, #2
 8009822:	d11c      	bne.n	800985e <HAL_SPI_TransmitReceive+0x26c>
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009828:	b29b      	uxth	r3, r3
 800982a:	2b00      	cmp	r3, #0
 800982c:	d017      	beq.n	800985e <HAL_SPI_TransmitReceive+0x26c>
 800982e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009830:	2b01      	cmp	r3, #1
 8009832:	d114      	bne.n	800985e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	330c      	adds	r3, #12
 800983e:	7812      	ldrb	r2, [r2, #0]
 8009840:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009846:	1c5a      	adds	r2, r3, #1
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009850:	b29b      	uxth	r3, r3
 8009852:	3b01      	subs	r3, #1
 8009854:	b29a      	uxth	r2, r3
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800985a:	2300      	movs	r3, #0
 800985c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	689b      	ldr	r3, [r3, #8]
 8009864:	f003 0301 	and.w	r3, r3, #1
 8009868:	2b01      	cmp	r3, #1
 800986a:	d119      	bne.n	80098a0 <HAL_SPI_TransmitReceive+0x2ae>
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009870:	b29b      	uxth	r3, r3
 8009872:	2b00      	cmp	r3, #0
 8009874:	d014      	beq.n	80098a0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68da      	ldr	r2, [r3, #12]
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009880:	b2d2      	uxtb	r2, r2
 8009882:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009888:	1c5a      	adds	r2, r3, #1
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009892:	b29b      	uxth	r3, r3
 8009894:	3b01      	subs	r3, #1
 8009896:	b29a      	uxth	r2, r3
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800989c:	2301      	movs	r3, #1
 800989e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80098a0:	f7fb fc1c 	bl	80050dc <HAL_GetTick>
 80098a4:	4602      	mov	r2, r0
 80098a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a8:	1ad3      	subs	r3, r2, r3
 80098aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d803      	bhi.n	80098b8 <HAL_SPI_TransmitReceive+0x2c6>
 80098b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80098b6:	d102      	bne.n	80098be <HAL_SPI_TransmitReceive+0x2cc>
 80098b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d103      	bne.n	80098c6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80098be:	2303      	movs	r3, #3
 80098c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80098c4:	e029      	b.n	800991a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80098ca:	b29b      	uxth	r3, r3
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d1a2      	bne.n	8009816 <HAL_SPI_TransmitReceive+0x224>
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d19d      	bne.n	8009816 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80098da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80098dc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80098de:	68f8      	ldr	r0, [r7, #12]
 80098e0:	f000 f8c0 	bl	8009a64 <SPI_EndRxTxTransaction>
 80098e4:	4603      	mov	r3, r0
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d006      	beq.n	80098f8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80098ea:	2301      	movs	r3, #1
 80098ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	2220      	movs	r2, #32
 80098f4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80098f6:	e010      	b.n	800991a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d10b      	bne.n	8009918 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009900:	2300      	movs	r3, #0
 8009902:	617b      	str	r3, [r7, #20]
 8009904:	68fb      	ldr	r3, [r7, #12]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	617b      	str	r3, [r7, #20]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	617b      	str	r3, [r7, #20]
 8009914:	697b      	ldr	r3, [r7, #20]
 8009916:	e000      	b.n	800991a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009918:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2201      	movs	r2, #1
 800991e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	2200      	movs	r2, #0
 8009926:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800992a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800992e:	4618      	mov	r0, r3
 8009930:	3730      	adds	r7, #48	; 0x30
 8009932:	46bd      	mov	sp, r7
 8009934:	bd80      	pop	{r7, pc}

08009936 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8009936:	b480      	push	{r7}
 8009938:	b083      	sub	sp, #12
 800993a:	af00      	add	r7, sp, #0
 800993c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009944:	b2db      	uxtb	r3, r3
}
 8009946:	4618      	mov	r0, r3
 8009948:	370c      	adds	r7, #12
 800994a:	46bd      	mov	sp, r7
 800994c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009950:	4770      	bx	lr
	...

08009954 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b088      	sub	sp, #32
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	603b      	str	r3, [r7, #0]
 8009960:	4613      	mov	r3, r2
 8009962:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8009964:	f7fb fbba 	bl	80050dc <HAL_GetTick>
 8009968:	4602      	mov	r2, r0
 800996a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996c:	1a9b      	subs	r3, r3, r2
 800996e:	683a      	ldr	r2, [r7, #0]
 8009970:	4413      	add	r3, r2
 8009972:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8009974:	f7fb fbb2 	bl	80050dc <HAL_GetTick>
 8009978:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800997a:	4b39      	ldr	r3, [pc, #228]	; (8009a60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	015b      	lsls	r3, r3, #5
 8009980:	0d1b      	lsrs	r3, r3, #20
 8009982:	69fa      	ldr	r2, [r7, #28]
 8009984:	fb02 f303 	mul.w	r3, r2, r3
 8009988:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800998a:	e054      	b.n	8009a36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009992:	d050      	beq.n	8009a36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009994:	f7fb fba2 	bl	80050dc <HAL_GetTick>
 8009998:	4602      	mov	r2, r0
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	1ad3      	subs	r3, r2, r3
 800999e:	69fa      	ldr	r2, [r7, #28]
 80099a0:	429a      	cmp	r2, r3
 80099a2:	d902      	bls.n	80099aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80099a4:	69fb      	ldr	r3, [r7, #28]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d13d      	bne.n	8009a26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	685a      	ldr	r2, [r3, #4]
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80099b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099c2:	d111      	bne.n	80099e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	689b      	ldr	r3, [r3, #8]
 80099c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099cc:	d004      	beq.n	80099d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80099d6:	d107      	bne.n	80099e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	681a      	ldr	r2, [r3, #0]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80099e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80099f0:	d10f      	bne.n	8009a12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009a00:	601a      	str	r2, [r3, #0]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	681a      	ldr	r2, [r3, #0]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009a10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	2201      	movs	r2, #1
 8009a16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009a22:	2303      	movs	r3, #3
 8009a24:	e017      	b.n	8009a56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d101      	bne.n	8009a30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8009a30:	697b      	ldr	r3, [r7, #20]
 8009a32:	3b01      	subs	r3, #1
 8009a34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	689a      	ldr	r2, [r3, #8]
 8009a3c:	68bb      	ldr	r3, [r7, #8]
 8009a3e:	4013      	ands	r3, r2
 8009a40:	68ba      	ldr	r2, [r7, #8]
 8009a42:	429a      	cmp	r2, r3
 8009a44:	bf0c      	ite	eq
 8009a46:	2301      	moveq	r3, #1
 8009a48:	2300      	movne	r3, #0
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	461a      	mov	r2, r3
 8009a4e:	79fb      	ldrb	r3, [r7, #7]
 8009a50:	429a      	cmp	r2, r3
 8009a52:	d19b      	bne.n	800998c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3720      	adds	r7, #32
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	20000004 	.word	0x20000004

08009a64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b088      	sub	sp, #32
 8009a68:	af02      	add	r7, sp, #8
 8009a6a:	60f8      	str	r0, [r7, #12]
 8009a6c:	60b9      	str	r1, [r7, #8]
 8009a6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009a70:	4b1b      	ldr	r3, [pc, #108]	; (8009ae0 <SPI_EndRxTxTransaction+0x7c>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a1b      	ldr	r2, [pc, #108]	; (8009ae4 <SPI_EndRxTxTransaction+0x80>)
 8009a76:	fba2 2303 	umull	r2, r3, r2, r3
 8009a7a:	0d5b      	lsrs	r3, r3, #21
 8009a7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009a80:	fb02 f303 	mul.w	r3, r2, r3
 8009a84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a8e:	d112      	bne.n	8009ab6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	2200      	movs	r2, #0
 8009a98:	2180      	movs	r1, #128	; 0x80
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f7ff ff5a 	bl	8009954 <SPI_WaitFlagStateUntilTimeout>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d016      	beq.n	8009ad4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aaa:	f043 0220 	orr.w	r2, r3, #32
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	e00f      	b.n	8009ad6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d00a      	beq.n	8009ad2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009abc:	697b      	ldr	r3, [r7, #20]
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009acc:	2b80      	cmp	r3, #128	; 0x80
 8009ace:	d0f2      	beq.n	8009ab6 <SPI_EndRxTxTransaction+0x52>
 8009ad0:	e000      	b.n	8009ad4 <SPI_EndRxTxTransaction+0x70>
        break;
 8009ad2:	bf00      	nop
  }

  return HAL_OK;
 8009ad4:	2300      	movs	r3, #0
}
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	3718      	adds	r7, #24
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop
 8009ae0:	20000004 	.word	0x20000004
 8009ae4:	165e9f81 	.word	0x165e9f81

08009ae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b082      	sub	sp, #8
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d101      	bne.n	8009afa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009af6:	2301      	movs	r3, #1
 8009af8:	e041      	b.n	8009b7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d106      	bne.n	8009b14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2200      	movs	r2, #0
 8009b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7fb f886 	bl	8004c20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2202      	movs	r2, #2
 8009b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	3304      	adds	r3, #4
 8009b24:	4619      	mov	r1, r3
 8009b26:	4610      	mov	r0, r2
 8009b28:	f000 fac4 	bl	800a0b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2201      	movs	r2, #1
 8009b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b7c:	2300      	movs	r3, #0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3708      	adds	r7, #8
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}
	...

08009b88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	b085      	sub	sp, #20
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d001      	beq.n	8009ba0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	e04e      	b.n	8009c3e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2202      	movs	r2, #2
 8009ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68da      	ldr	r2, [r3, #12]
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f042 0201 	orr.w	r2, r2, #1
 8009bb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a23      	ldr	r2, [pc, #140]	; (8009c4c <HAL_TIM_Base_Start_IT+0xc4>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d022      	beq.n	8009c08 <HAL_TIM_Base_Start_IT+0x80>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bca:	d01d      	beq.n	8009c08 <HAL_TIM_Base_Start_IT+0x80>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a1f      	ldr	r2, [pc, #124]	; (8009c50 <HAL_TIM_Base_Start_IT+0xc8>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d018      	beq.n	8009c08 <HAL_TIM_Base_Start_IT+0x80>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a1e      	ldr	r2, [pc, #120]	; (8009c54 <HAL_TIM_Base_Start_IT+0xcc>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d013      	beq.n	8009c08 <HAL_TIM_Base_Start_IT+0x80>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a1c      	ldr	r2, [pc, #112]	; (8009c58 <HAL_TIM_Base_Start_IT+0xd0>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d00e      	beq.n	8009c08 <HAL_TIM_Base_Start_IT+0x80>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a1b      	ldr	r2, [pc, #108]	; (8009c5c <HAL_TIM_Base_Start_IT+0xd4>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d009      	beq.n	8009c08 <HAL_TIM_Base_Start_IT+0x80>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a19      	ldr	r2, [pc, #100]	; (8009c60 <HAL_TIM_Base_Start_IT+0xd8>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d004      	beq.n	8009c08 <HAL_TIM_Base_Start_IT+0x80>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a18      	ldr	r2, [pc, #96]	; (8009c64 <HAL_TIM_Base_Start_IT+0xdc>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d111      	bne.n	8009c2c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	f003 0307 	and.w	r3, r3, #7
 8009c12:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2b06      	cmp	r3, #6
 8009c18:	d010      	beq.n	8009c3c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f042 0201 	orr.w	r2, r2, #1
 8009c28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c2a:	e007      	b.n	8009c3c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	f042 0201 	orr.w	r2, r2, #1
 8009c3a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009c3c:	2300      	movs	r3, #0
}
 8009c3e:	4618      	mov	r0, r3
 8009c40:	3714      	adds	r7, #20
 8009c42:	46bd      	mov	sp, r7
 8009c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	40010000 	.word	0x40010000
 8009c50:	40000400 	.word	0x40000400
 8009c54:	40000800 	.word	0x40000800
 8009c58:	40000c00 	.word	0x40000c00
 8009c5c:	40010400 	.word	0x40010400
 8009c60:	40014000 	.word	0x40014000
 8009c64:	40001800 	.word	0x40001800

08009c68 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b083      	sub	sp, #12
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	68da      	ldr	r2, [r3, #12]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f022 0201 	bic.w	r2, r2, #1
 8009c7e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	6a1a      	ldr	r2, [r3, #32]
 8009c86:	f241 1311 	movw	r3, #4369	; 0x1111
 8009c8a:	4013      	ands	r3, r2
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d10f      	bne.n	8009cb0 <HAL_TIM_Base_Stop_IT+0x48>
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	6a1a      	ldr	r2, [r3, #32]
 8009c96:	f240 4344 	movw	r3, #1092	; 0x444
 8009c9a:	4013      	ands	r3, r2
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d107      	bne.n	8009cb0 <HAL_TIM_Base_Stop_IT+0x48>
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f022 0201 	bic.w	r2, r2, #1
 8009cae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009cb8:	2300      	movs	r3, #0
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	370c      	adds	r7, #12
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc4:	4770      	bx	lr

08009cc6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009cc6:	b580      	push	{r7, lr}
 8009cc8:	b082      	sub	sp, #8
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	691b      	ldr	r3, [r3, #16]
 8009cd4:	f003 0302 	and.w	r3, r3, #2
 8009cd8:	2b02      	cmp	r3, #2
 8009cda:	d122      	bne.n	8009d22 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	68db      	ldr	r3, [r3, #12]
 8009ce2:	f003 0302 	and.w	r3, r3, #2
 8009ce6:	2b02      	cmp	r3, #2
 8009ce8:	d11b      	bne.n	8009d22 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f06f 0202 	mvn.w	r2, #2
 8009cf2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	699b      	ldr	r3, [r3, #24]
 8009d00:	f003 0303 	and.w	r3, r3, #3
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d003      	beq.n	8009d10 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d08:	6878      	ldr	r0, [r7, #4]
 8009d0a:	f000 f9b5 	bl	800a078 <HAL_TIM_IC_CaptureCallback>
 8009d0e:	e005      	b.n	8009d1c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f9a7 	bl	800a064 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f000 f9b8 	bl	800a08c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	691b      	ldr	r3, [r3, #16]
 8009d28:	f003 0304 	and.w	r3, r3, #4
 8009d2c:	2b04      	cmp	r3, #4
 8009d2e:	d122      	bne.n	8009d76 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	68db      	ldr	r3, [r3, #12]
 8009d36:	f003 0304 	and.w	r3, r3, #4
 8009d3a:	2b04      	cmp	r3, #4
 8009d3c:	d11b      	bne.n	8009d76 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f06f 0204 	mvn.w	r2, #4
 8009d46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2202      	movs	r2, #2
 8009d4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	699b      	ldr	r3, [r3, #24]
 8009d54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d003      	beq.n	8009d64 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 f98b 	bl	800a078 <HAL_TIM_IC_CaptureCallback>
 8009d62:	e005      	b.n	8009d70 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 f97d 	bl	800a064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f000 f98e 	bl	800a08c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2200      	movs	r2, #0
 8009d74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	691b      	ldr	r3, [r3, #16]
 8009d7c:	f003 0308 	and.w	r3, r3, #8
 8009d80:	2b08      	cmp	r3, #8
 8009d82:	d122      	bne.n	8009dca <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	68db      	ldr	r3, [r3, #12]
 8009d8a:	f003 0308 	and.w	r3, r3, #8
 8009d8e:	2b08      	cmp	r3, #8
 8009d90:	d11b      	bne.n	8009dca <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f06f 0208 	mvn.w	r2, #8
 8009d9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2204      	movs	r2, #4
 8009da0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	69db      	ldr	r3, [r3, #28]
 8009da8:	f003 0303 	and.w	r3, r3, #3
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d003      	beq.n	8009db8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f000 f961 	bl	800a078 <HAL_TIM_IC_CaptureCallback>
 8009db6:	e005      	b.n	8009dc4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f953 	bl	800a064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f000 f964 	bl	800a08c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	691b      	ldr	r3, [r3, #16]
 8009dd0:	f003 0310 	and.w	r3, r3, #16
 8009dd4:	2b10      	cmp	r3, #16
 8009dd6:	d122      	bne.n	8009e1e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	68db      	ldr	r3, [r3, #12]
 8009dde:	f003 0310 	and.w	r3, r3, #16
 8009de2:	2b10      	cmp	r3, #16
 8009de4:	d11b      	bne.n	8009e1e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	f06f 0210 	mvn.w	r2, #16
 8009dee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2208      	movs	r2, #8
 8009df4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	69db      	ldr	r3, [r3, #28]
 8009dfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d003      	beq.n	8009e0c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 f937 	bl	800a078 <HAL_TIM_IC_CaptureCallback>
 8009e0a:	e005      	b.n	8009e18 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 f929 	bl	800a064 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e12:	6878      	ldr	r0, [r7, #4]
 8009e14:	f000 f93a 	bl	800a08c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	691b      	ldr	r3, [r3, #16]
 8009e24:	f003 0301 	and.w	r3, r3, #1
 8009e28:	2b01      	cmp	r3, #1
 8009e2a:	d10e      	bne.n	8009e4a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	f003 0301 	and.w	r3, r3, #1
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d107      	bne.n	8009e4a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f06f 0201 	mvn.w	r2, #1
 8009e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e44:	6878      	ldr	r0, [r7, #4]
 8009e46:	f7fa fd23 	bl	8004890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	691b      	ldr	r3, [r3, #16]
 8009e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e54:	2b80      	cmp	r3, #128	; 0x80
 8009e56:	d10e      	bne.n	8009e76 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	68db      	ldr	r3, [r3, #12]
 8009e5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e62:	2b80      	cmp	r3, #128	; 0x80
 8009e64:	d107      	bne.n	8009e76 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e70:	6878      	ldr	r0, [r7, #4]
 8009e72:	f000 fadf 	bl	800a434 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	691b      	ldr	r3, [r3, #16]
 8009e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e80:	2b40      	cmp	r3, #64	; 0x40
 8009e82:	d10e      	bne.n	8009ea2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	68db      	ldr	r3, [r3, #12]
 8009e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e8e:	2b40      	cmp	r3, #64	; 0x40
 8009e90:	d107      	bne.n	8009ea2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009e9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009e9c:	6878      	ldr	r0, [r7, #4]
 8009e9e:	f000 f8ff 	bl	800a0a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	691b      	ldr	r3, [r3, #16]
 8009ea8:	f003 0320 	and.w	r3, r3, #32
 8009eac:	2b20      	cmp	r3, #32
 8009eae:	d10e      	bne.n	8009ece <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	68db      	ldr	r3, [r3, #12]
 8009eb6:	f003 0320 	and.w	r3, r3, #32
 8009eba:	2b20      	cmp	r3, #32
 8009ebc:	d107      	bne.n	8009ece <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f06f 0220 	mvn.w	r2, #32
 8009ec6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f000 faa9 	bl	800a420 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ece:	bf00      	nop
 8009ed0:	3708      	adds	r7, #8
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}

08009ed6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009ed6:	b580      	push	{r7, lr}
 8009ed8:	b084      	sub	sp, #16
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
 8009ede:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009eea:	2b01      	cmp	r3, #1
 8009eec:	d101      	bne.n	8009ef2 <HAL_TIM_ConfigClockSource+0x1c>
 8009eee:	2302      	movs	r3, #2
 8009ef0:	e0b4      	b.n	800a05c <HAL_TIM_ConfigClockSource+0x186>
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2201      	movs	r2, #1
 8009ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	2202      	movs	r2, #2
 8009efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009f10:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f18:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	68ba      	ldr	r2, [r7, #8]
 8009f20:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f2a:	d03e      	beq.n	8009faa <HAL_TIM_ConfigClockSource+0xd4>
 8009f2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f30:	f200 8087 	bhi.w	800a042 <HAL_TIM_ConfigClockSource+0x16c>
 8009f34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f38:	f000 8086 	beq.w	800a048 <HAL_TIM_ConfigClockSource+0x172>
 8009f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f40:	d87f      	bhi.n	800a042 <HAL_TIM_ConfigClockSource+0x16c>
 8009f42:	2b70      	cmp	r3, #112	; 0x70
 8009f44:	d01a      	beq.n	8009f7c <HAL_TIM_ConfigClockSource+0xa6>
 8009f46:	2b70      	cmp	r3, #112	; 0x70
 8009f48:	d87b      	bhi.n	800a042 <HAL_TIM_ConfigClockSource+0x16c>
 8009f4a:	2b60      	cmp	r3, #96	; 0x60
 8009f4c:	d050      	beq.n	8009ff0 <HAL_TIM_ConfigClockSource+0x11a>
 8009f4e:	2b60      	cmp	r3, #96	; 0x60
 8009f50:	d877      	bhi.n	800a042 <HAL_TIM_ConfigClockSource+0x16c>
 8009f52:	2b50      	cmp	r3, #80	; 0x50
 8009f54:	d03c      	beq.n	8009fd0 <HAL_TIM_ConfigClockSource+0xfa>
 8009f56:	2b50      	cmp	r3, #80	; 0x50
 8009f58:	d873      	bhi.n	800a042 <HAL_TIM_ConfigClockSource+0x16c>
 8009f5a:	2b40      	cmp	r3, #64	; 0x40
 8009f5c:	d058      	beq.n	800a010 <HAL_TIM_ConfigClockSource+0x13a>
 8009f5e:	2b40      	cmp	r3, #64	; 0x40
 8009f60:	d86f      	bhi.n	800a042 <HAL_TIM_ConfigClockSource+0x16c>
 8009f62:	2b30      	cmp	r3, #48	; 0x30
 8009f64:	d064      	beq.n	800a030 <HAL_TIM_ConfigClockSource+0x15a>
 8009f66:	2b30      	cmp	r3, #48	; 0x30
 8009f68:	d86b      	bhi.n	800a042 <HAL_TIM_ConfigClockSource+0x16c>
 8009f6a:	2b20      	cmp	r3, #32
 8009f6c:	d060      	beq.n	800a030 <HAL_TIM_ConfigClockSource+0x15a>
 8009f6e:	2b20      	cmp	r3, #32
 8009f70:	d867      	bhi.n	800a042 <HAL_TIM_ConfigClockSource+0x16c>
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d05c      	beq.n	800a030 <HAL_TIM_ConfigClockSource+0x15a>
 8009f76:	2b10      	cmp	r3, #16
 8009f78:	d05a      	beq.n	800a030 <HAL_TIM_ConfigClockSource+0x15a>
 8009f7a:	e062      	b.n	800a042 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	6818      	ldr	r0, [r3, #0]
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	6899      	ldr	r1, [r3, #8]
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	685a      	ldr	r2, [r3, #4]
 8009f88:	683b      	ldr	r3, [r7, #0]
 8009f8a:	68db      	ldr	r3, [r3, #12]
 8009f8c:	f000 f9ac 	bl	800a2e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	689b      	ldr	r3, [r3, #8]
 8009f96:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009f9e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	68ba      	ldr	r2, [r7, #8]
 8009fa6:	609a      	str	r2, [r3, #8]
      break;
 8009fa8:	e04f      	b.n	800a04a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6818      	ldr	r0, [r3, #0]
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	6899      	ldr	r1, [r3, #8]
 8009fb2:	683b      	ldr	r3, [r7, #0]
 8009fb4:	685a      	ldr	r2, [r3, #4]
 8009fb6:	683b      	ldr	r3, [r7, #0]
 8009fb8:	68db      	ldr	r3, [r3, #12]
 8009fba:	f000 f995 	bl	800a2e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	689a      	ldr	r2, [r3, #8]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009fcc:	609a      	str	r2, [r3, #8]
      break;
 8009fce:	e03c      	b.n	800a04a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	6818      	ldr	r0, [r3, #0]
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	6859      	ldr	r1, [r3, #4]
 8009fd8:	683b      	ldr	r3, [r7, #0]
 8009fda:	68db      	ldr	r3, [r3, #12]
 8009fdc:	461a      	mov	r2, r3
 8009fde:	f000 f909 	bl	800a1f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	2150      	movs	r1, #80	; 0x50
 8009fe8:	4618      	mov	r0, r3
 8009fea:	f000 f962 	bl	800a2b2 <TIM_ITRx_SetConfig>
      break;
 8009fee:	e02c      	b.n	800a04a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6818      	ldr	r0, [r3, #0]
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	6859      	ldr	r1, [r3, #4]
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	68db      	ldr	r3, [r3, #12]
 8009ffc:	461a      	mov	r2, r3
 8009ffe:	f000 f928 	bl	800a252 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2160      	movs	r1, #96	; 0x60
 800a008:	4618      	mov	r0, r3
 800a00a:	f000 f952 	bl	800a2b2 <TIM_ITRx_SetConfig>
      break;
 800a00e:	e01c      	b.n	800a04a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6818      	ldr	r0, [r3, #0]
 800a014:	683b      	ldr	r3, [r7, #0]
 800a016:	6859      	ldr	r1, [r3, #4]
 800a018:	683b      	ldr	r3, [r7, #0]
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	461a      	mov	r2, r3
 800a01e:	f000 f8e9 	bl	800a1f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2140      	movs	r1, #64	; 0x40
 800a028:	4618      	mov	r0, r3
 800a02a:	f000 f942 	bl	800a2b2 <TIM_ITRx_SetConfig>
      break;
 800a02e:	e00c      	b.n	800a04a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	683b      	ldr	r3, [r7, #0]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	4619      	mov	r1, r3
 800a03a:	4610      	mov	r0, r2
 800a03c:	f000 f939 	bl	800a2b2 <TIM_ITRx_SetConfig>
      break;
 800a040:	e003      	b.n	800a04a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	73fb      	strb	r3, [r7, #15]
      break;
 800a046:	e000      	b.n	800a04a <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a048:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	2201      	movs	r2, #1
 800a04e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	2200      	movs	r2, #0
 800a056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a05a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}

0800a064 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a064:	b480      	push	{r7}
 800a066:	b083      	sub	sp, #12
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a06c:	bf00      	nop
 800a06e:	370c      	adds	r7, #12
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr

0800a078 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a080:	bf00      	nop
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr

0800a08c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a08c:	b480      	push	{r7}
 800a08e:	b083      	sub	sp, #12
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a094:	bf00      	nop
 800a096:	370c      	adds	r7, #12
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr

0800a0a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a0a0:	b480      	push	{r7}
 800a0a2:	b083      	sub	sp, #12
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a0a8:	bf00      	nop
 800a0aa:	370c      	adds	r7, #12
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr

0800a0b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b085      	sub	sp, #20
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	4a40      	ldr	r2, [pc, #256]	; (800a1c8 <TIM_Base_SetConfig+0x114>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d013      	beq.n	800a0f4 <TIM_Base_SetConfig+0x40>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0d2:	d00f      	beq.n	800a0f4 <TIM_Base_SetConfig+0x40>
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	4a3d      	ldr	r2, [pc, #244]	; (800a1cc <TIM_Base_SetConfig+0x118>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d00b      	beq.n	800a0f4 <TIM_Base_SetConfig+0x40>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	4a3c      	ldr	r2, [pc, #240]	; (800a1d0 <TIM_Base_SetConfig+0x11c>)
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d007      	beq.n	800a0f4 <TIM_Base_SetConfig+0x40>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a3b      	ldr	r2, [pc, #236]	; (800a1d4 <TIM_Base_SetConfig+0x120>)
 800a0e8:	4293      	cmp	r3, r2
 800a0ea:	d003      	beq.n	800a0f4 <TIM_Base_SetConfig+0x40>
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	4a3a      	ldr	r2, [pc, #232]	; (800a1d8 <TIM_Base_SetConfig+0x124>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d108      	bne.n	800a106 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	685b      	ldr	r3, [r3, #4]
 800a100:	68fa      	ldr	r2, [r7, #12]
 800a102:	4313      	orrs	r3, r2
 800a104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	4a2f      	ldr	r2, [pc, #188]	; (800a1c8 <TIM_Base_SetConfig+0x114>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d02b      	beq.n	800a166 <TIM_Base_SetConfig+0xb2>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a114:	d027      	beq.n	800a166 <TIM_Base_SetConfig+0xb2>
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	4a2c      	ldr	r2, [pc, #176]	; (800a1cc <TIM_Base_SetConfig+0x118>)
 800a11a:	4293      	cmp	r3, r2
 800a11c:	d023      	beq.n	800a166 <TIM_Base_SetConfig+0xb2>
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4a2b      	ldr	r2, [pc, #172]	; (800a1d0 <TIM_Base_SetConfig+0x11c>)
 800a122:	4293      	cmp	r3, r2
 800a124:	d01f      	beq.n	800a166 <TIM_Base_SetConfig+0xb2>
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	4a2a      	ldr	r2, [pc, #168]	; (800a1d4 <TIM_Base_SetConfig+0x120>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d01b      	beq.n	800a166 <TIM_Base_SetConfig+0xb2>
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	4a29      	ldr	r2, [pc, #164]	; (800a1d8 <TIM_Base_SetConfig+0x124>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d017      	beq.n	800a166 <TIM_Base_SetConfig+0xb2>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	4a28      	ldr	r2, [pc, #160]	; (800a1dc <TIM_Base_SetConfig+0x128>)
 800a13a:	4293      	cmp	r3, r2
 800a13c:	d013      	beq.n	800a166 <TIM_Base_SetConfig+0xb2>
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	4a27      	ldr	r2, [pc, #156]	; (800a1e0 <TIM_Base_SetConfig+0x12c>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d00f      	beq.n	800a166 <TIM_Base_SetConfig+0xb2>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4a26      	ldr	r2, [pc, #152]	; (800a1e4 <TIM_Base_SetConfig+0x130>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d00b      	beq.n	800a166 <TIM_Base_SetConfig+0xb2>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4a25      	ldr	r2, [pc, #148]	; (800a1e8 <TIM_Base_SetConfig+0x134>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d007      	beq.n	800a166 <TIM_Base_SetConfig+0xb2>
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	4a24      	ldr	r2, [pc, #144]	; (800a1ec <TIM_Base_SetConfig+0x138>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d003      	beq.n	800a166 <TIM_Base_SetConfig+0xb2>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	4a23      	ldr	r2, [pc, #140]	; (800a1f0 <TIM_Base_SetConfig+0x13c>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d108      	bne.n	800a178 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a16c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a16e:	683b      	ldr	r3, [r7, #0]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	68fa      	ldr	r2, [r7, #12]
 800a174:	4313      	orrs	r3, r2
 800a176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	695b      	ldr	r3, [r3, #20]
 800a182:	4313      	orrs	r3, r2
 800a184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	68fa      	ldr	r2, [r7, #12]
 800a18a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	689a      	ldr	r2, [r3, #8]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a194:	683b      	ldr	r3, [r7, #0]
 800a196:	681a      	ldr	r2, [r3, #0]
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	4a0a      	ldr	r2, [pc, #40]	; (800a1c8 <TIM_Base_SetConfig+0x114>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d003      	beq.n	800a1ac <TIM_Base_SetConfig+0xf8>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	4a0c      	ldr	r2, [pc, #48]	; (800a1d8 <TIM_Base_SetConfig+0x124>)
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d103      	bne.n	800a1b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a1ac:	683b      	ldr	r3, [r7, #0]
 800a1ae:	691a      	ldr	r2, [r3, #16]
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2201      	movs	r2, #1
 800a1b8:	615a      	str	r2, [r3, #20]
}
 800a1ba:	bf00      	nop
 800a1bc:	3714      	adds	r7, #20
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr
 800a1c6:	bf00      	nop
 800a1c8:	40010000 	.word	0x40010000
 800a1cc:	40000400 	.word	0x40000400
 800a1d0:	40000800 	.word	0x40000800
 800a1d4:	40000c00 	.word	0x40000c00
 800a1d8:	40010400 	.word	0x40010400
 800a1dc:	40014000 	.word	0x40014000
 800a1e0:	40014400 	.word	0x40014400
 800a1e4:	40014800 	.word	0x40014800
 800a1e8:	40001800 	.word	0x40001800
 800a1ec:	40001c00 	.word	0x40001c00
 800a1f0:	40002000 	.word	0x40002000

0800a1f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b087      	sub	sp, #28
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	60f8      	str	r0, [r7, #12]
 800a1fc:	60b9      	str	r1, [r7, #8]
 800a1fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6a1b      	ldr	r3, [r3, #32]
 800a204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	6a1b      	ldr	r3, [r3, #32]
 800a20a:	f023 0201 	bic.w	r2, r3, #1
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	699b      	ldr	r3, [r3, #24]
 800a216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a21e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	011b      	lsls	r3, r3, #4
 800a224:	693a      	ldr	r2, [r7, #16]
 800a226:	4313      	orrs	r3, r2
 800a228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	f023 030a 	bic.w	r3, r3, #10
 800a230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a232:	697a      	ldr	r2, [r7, #20]
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	4313      	orrs	r3, r2
 800a238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	693a      	ldr	r2, [r7, #16]
 800a23e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	697a      	ldr	r2, [r7, #20]
 800a244:	621a      	str	r2, [r3, #32]
}
 800a246:	bf00      	nop
 800a248:	371c      	adds	r7, #28
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr

0800a252 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a252:	b480      	push	{r7}
 800a254:	b087      	sub	sp, #28
 800a256:	af00      	add	r7, sp, #0
 800a258:	60f8      	str	r0, [r7, #12]
 800a25a:	60b9      	str	r1, [r7, #8]
 800a25c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	6a1b      	ldr	r3, [r3, #32]
 800a262:	f023 0210 	bic.w	r2, r3, #16
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	699b      	ldr	r3, [r3, #24]
 800a26e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	6a1b      	ldr	r3, [r3, #32]
 800a274:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a27c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	031b      	lsls	r3, r3, #12
 800a282:	697a      	ldr	r2, [r7, #20]
 800a284:	4313      	orrs	r3, r2
 800a286:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a28e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	011b      	lsls	r3, r3, #4
 800a294:	693a      	ldr	r2, [r7, #16]
 800a296:	4313      	orrs	r3, r2
 800a298:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	697a      	ldr	r2, [r7, #20]
 800a29e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	693a      	ldr	r2, [r7, #16]
 800a2a4:	621a      	str	r2, [r3, #32]
}
 800a2a6:	bf00      	nop
 800a2a8:	371c      	adds	r7, #28
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr

0800a2b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a2b2:	b480      	push	{r7}
 800a2b4:	b085      	sub	sp, #20
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
 800a2ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	689b      	ldr	r3, [r3, #8]
 800a2c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a2c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a2ca:	683a      	ldr	r2, [r7, #0]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	f043 0307 	orr.w	r3, r3, #7
 800a2d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	68fa      	ldr	r2, [r7, #12]
 800a2da:	609a      	str	r2, [r3, #8]
}
 800a2dc:	bf00      	nop
 800a2de:	3714      	adds	r7, #20
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e6:	4770      	bx	lr

0800a2e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b087      	sub	sp, #28
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	60f8      	str	r0, [r7, #12]
 800a2f0:	60b9      	str	r1, [r7, #8]
 800a2f2:	607a      	str	r2, [r7, #4]
 800a2f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	689b      	ldr	r3, [r3, #8]
 800a2fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a302:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	021a      	lsls	r2, r3, #8
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	431a      	orrs	r2, r3
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	4313      	orrs	r3, r2
 800a310:	697a      	ldr	r2, [r7, #20]
 800a312:	4313      	orrs	r3, r2
 800a314:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	697a      	ldr	r2, [r7, #20]
 800a31a:	609a      	str	r2, [r3, #8]
}
 800a31c:	bf00      	nop
 800a31e:	371c      	adds	r7, #28
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr

0800a328 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a328:	b480      	push	{r7}
 800a32a:	b085      	sub	sp, #20
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a338:	2b01      	cmp	r3, #1
 800a33a:	d101      	bne.n	800a340 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a33c:	2302      	movs	r3, #2
 800a33e:	e05a      	b.n	800a3f6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2201      	movs	r2, #1
 800a344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2202      	movs	r2, #2
 800a34c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	689b      	ldr	r3, [r3, #8]
 800a35e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a366:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	68fa      	ldr	r2, [r7, #12]
 800a36e:	4313      	orrs	r3, r2
 800a370:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	68fa      	ldr	r2, [r7, #12]
 800a378:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a21      	ldr	r2, [pc, #132]	; (800a404 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d022      	beq.n	800a3ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a38c:	d01d      	beq.n	800a3ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a1d      	ldr	r2, [pc, #116]	; (800a408 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d018      	beq.n	800a3ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a1b      	ldr	r2, [pc, #108]	; (800a40c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d013      	beq.n	800a3ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a1a      	ldr	r2, [pc, #104]	; (800a410 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d00e      	beq.n	800a3ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a18      	ldr	r2, [pc, #96]	; (800a414 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d009      	beq.n	800a3ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a17      	ldr	r2, [pc, #92]	; (800a418 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d004      	beq.n	800a3ca <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a15      	ldr	r2, [pc, #84]	; (800a41c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d10c      	bne.n	800a3e4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a3d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	685b      	ldr	r3, [r3, #4]
 800a3d6:	68ba      	ldr	r2, [r7, #8]
 800a3d8:	4313      	orrs	r3, r2
 800a3da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	68ba      	ldr	r2, [r7, #8]
 800a3e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2200      	movs	r2, #0
 800a3f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a3f4:	2300      	movs	r3, #0
}
 800a3f6:	4618      	mov	r0, r3
 800a3f8:	3714      	adds	r7, #20
 800a3fa:	46bd      	mov	sp, r7
 800a3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a400:	4770      	bx	lr
 800a402:	bf00      	nop
 800a404:	40010000 	.word	0x40010000
 800a408:	40000400 	.word	0x40000400
 800a40c:	40000800 	.word	0x40000800
 800a410:	40000c00 	.word	0x40000c00
 800a414:	40010400 	.word	0x40010400
 800a418:	40014000 	.word	0x40014000
 800a41c:	40001800 	.word	0x40001800

0800a420 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a420:	b480      	push	{r7}
 800a422:	b083      	sub	sp, #12
 800a424:	af00      	add	r7, sp, #0
 800a426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a428:	bf00      	nop
 800a42a:	370c      	adds	r7, #12
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr

0800a434 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a434:	b480      	push	{r7}
 800a436:	b083      	sub	sp, #12
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a43c:	bf00      	nop
 800a43e:	370c      	adds	r7, #12
 800a440:	46bd      	mov	sp, r7
 800a442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a446:	4770      	bx	lr

0800a448 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a448:	b084      	sub	sp, #16
 800a44a:	b580      	push	{r7, lr}
 800a44c:	b084      	sub	sp, #16
 800a44e:	af00      	add	r7, sp, #0
 800a450:	6078      	str	r0, [r7, #4]
 800a452:	f107 001c 	add.w	r0, r7, #28
 800a456:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a45a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d122      	bne.n	800a4a6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a464:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	68db      	ldr	r3, [r3, #12]
 800a470:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a478:	687a      	ldr	r2, [r7, #4]
 800a47a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d105      	bne.n	800a49a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	68db      	ldr	r3, [r3, #12]
 800a492:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a49a:	6878      	ldr	r0, [r7, #4]
 800a49c:	f001 fb1c 	bl	800bad8 <USB_CoreReset>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	73fb      	strb	r3, [r7, #15]
 800a4a4:	e01a      	b.n	800a4dc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	68db      	ldr	r3, [r3, #12]
 800a4aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a4b2:	6878      	ldr	r0, [r7, #4]
 800a4b4:	f001 fb10 	bl	800bad8 <USB_CoreReset>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a4bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d106      	bne.n	800a4d0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4c6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	639a      	str	r2, [r3, #56]	; 0x38
 800a4ce:	e005      	b.n	800a4dc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a4dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4de:	2b01      	cmp	r3, #1
 800a4e0:	d10b      	bne.n	800a4fa <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	f043 0206 	orr.w	r2, r3, #6
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	f043 0220 	orr.w	r2, r3, #32
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a4fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a506:	b004      	add	sp, #16
 800a508:	4770      	bx	lr
	...

0800a50c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a50c:	b480      	push	{r7}
 800a50e:	b087      	sub	sp, #28
 800a510:	af00      	add	r7, sp, #0
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	4613      	mov	r3, r2
 800a518:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a51a:	79fb      	ldrb	r3, [r7, #7]
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	d165      	bne.n	800a5ec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	4a41      	ldr	r2, [pc, #260]	; (800a628 <USB_SetTurnaroundTime+0x11c>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d906      	bls.n	800a536 <USB_SetTurnaroundTime+0x2a>
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	4a40      	ldr	r2, [pc, #256]	; (800a62c <USB_SetTurnaroundTime+0x120>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d202      	bcs.n	800a536 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a530:	230f      	movs	r3, #15
 800a532:	617b      	str	r3, [r7, #20]
 800a534:	e062      	b.n	800a5fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a536:	68bb      	ldr	r3, [r7, #8]
 800a538:	4a3c      	ldr	r2, [pc, #240]	; (800a62c <USB_SetTurnaroundTime+0x120>)
 800a53a:	4293      	cmp	r3, r2
 800a53c:	d306      	bcc.n	800a54c <USB_SetTurnaroundTime+0x40>
 800a53e:	68bb      	ldr	r3, [r7, #8]
 800a540:	4a3b      	ldr	r2, [pc, #236]	; (800a630 <USB_SetTurnaroundTime+0x124>)
 800a542:	4293      	cmp	r3, r2
 800a544:	d202      	bcs.n	800a54c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a546:	230e      	movs	r3, #14
 800a548:	617b      	str	r3, [r7, #20]
 800a54a:	e057      	b.n	800a5fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	4a38      	ldr	r2, [pc, #224]	; (800a630 <USB_SetTurnaroundTime+0x124>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d306      	bcc.n	800a562 <USB_SetTurnaroundTime+0x56>
 800a554:	68bb      	ldr	r3, [r7, #8]
 800a556:	4a37      	ldr	r2, [pc, #220]	; (800a634 <USB_SetTurnaroundTime+0x128>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d202      	bcs.n	800a562 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a55c:	230d      	movs	r3, #13
 800a55e:	617b      	str	r3, [r7, #20]
 800a560:	e04c      	b.n	800a5fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	4a33      	ldr	r2, [pc, #204]	; (800a634 <USB_SetTurnaroundTime+0x128>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d306      	bcc.n	800a578 <USB_SetTurnaroundTime+0x6c>
 800a56a:	68bb      	ldr	r3, [r7, #8]
 800a56c:	4a32      	ldr	r2, [pc, #200]	; (800a638 <USB_SetTurnaroundTime+0x12c>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d802      	bhi.n	800a578 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a572:	230c      	movs	r3, #12
 800a574:	617b      	str	r3, [r7, #20]
 800a576:	e041      	b.n	800a5fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a578:	68bb      	ldr	r3, [r7, #8]
 800a57a:	4a2f      	ldr	r2, [pc, #188]	; (800a638 <USB_SetTurnaroundTime+0x12c>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d906      	bls.n	800a58e <USB_SetTurnaroundTime+0x82>
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	4a2e      	ldr	r2, [pc, #184]	; (800a63c <USB_SetTurnaroundTime+0x130>)
 800a584:	4293      	cmp	r3, r2
 800a586:	d802      	bhi.n	800a58e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a588:	230b      	movs	r3, #11
 800a58a:	617b      	str	r3, [r7, #20]
 800a58c:	e036      	b.n	800a5fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	4a2a      	ldr	r2, [pc, #168]	; (800a63c <USB_SetTurnaroundTime+0x130>)
 800a592:	4293      	cmp	r3, r2
 800a594:	d906      	bls.n	800a5a4 <USB_SetTurnaroundTime+0x98>
 800a596:	68bb      	ldr	r3, [r7, #8]
 800a598:	4a29      	ldr	r2, [pc, #164]	; (800a640 <USB_SetTurnaroundTime+0x134>)
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d802      	bhi.n	800a5a4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a59e:	230a      	movs	r3, #10
 800a5a0:	617b      	str	r3, [r7, #20]
 800a5a2:	e02b      	b.n	800a5fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a5a4:	68bb      	ldr	r3, [r7, #8]
 800a5a6:	4a26      	ldr	r2, [pc, #152]	; (800a640 <USB_SetTurnaroundTime+0x134>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d906      	bls.n	800a5ba <USB_SetTurnaroundTime+0xae>
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	4a25      	ldr	r2, [pc, #148]	; (800a644 <USB_SetTurnaroundTime+0x138>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d202      	bcs.n	800a5ba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a5b4:	2309      	movs	r3, #9
 800a5b6:	617b      	str	r3, [r7, #20]
 800a5b8:	e020      	b.n	800a5fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a5ba:	68bb      	ldr	r3, [r7, #8]
 800a5bc:	4a21      	ldr	r2, [pc, #132]	; (800a644 <USB_SetTurnaroundTime+0x138>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d306      	bcc.n	800a5d0 <USB_SetTurnaroundTime+0xc4>
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	4a20      	ldr	r2, [pc, #128]	; (800a648 <USB_SetTurnaroundTime+0x13c>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d802      	bhi.n	800a5d0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a5ca:	2308      	movs	r3, #8
 800a5cc:	617b      	str	r3, [r7, #20]
 800a5ce:	e015      	b.n	800a5fc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	4a1d      	ldr	r2, [pc, #116]	; (800a648 <USB_SetTurnaroundTime+0x13c>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d906      	bls.n	800a5e6 <USB_SetTurnaroundTime+0xda>
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	4a1c      	ldr	r2, [pc, #112]	; (800a64c <USB_SetTurnaroundTime+0x140>)
 800a5dc:	4293      	cmp	r3, r2
 800a5de:	d202      	bcs.n	800a5e6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a5e0:	2307      	movs	r3, #7
 800a5e2:	617b      	str	r3, [r7, #20]
 800a5e4:	e00a      	b.n	800a5fc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a5e6:	2306      	movs	r3, #6
 800a5e8:	617b      	str	r3, [r7, #20]
 800a5ea:	e007      	b.n	800a5fc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a5ec:	79fb      	ldrb	r3, [r7, #7]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d102      	bne.n	800a5f8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a5f2:	2309      	movs	r3, #9
 800a5f4:	617b      	str	r3, [r7, #20]
 800a5f6:	e001      	b.n	800a5fc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a5f8:	2309      	movs	r3, #9
 800a5fa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	68da      	ldr	r2, [r3, #12]
 800a60c:	697b      	ldr	r3, [r7, #20]
 800a60e:	029b      	lsls	r3, r3, #10
 800a610:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a614:	431a      	orrs	r2, r3
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a61a:	2300      	movs	r3, #0
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	371c      	adds	r7, #28
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr
 800a628:	00d8acbf 	.word	0x00d8acbf
 800a62c:	00e4e1c0 	.word	0x00e4e1c0
 800a630:	00f42400 	.word	0x00f42400
 800a634:	01067380 	.word	0x01067380
 800a638:	011a499f 	.word	0x011a499f
 800a63c:	01312cff 	.word	0x01312cff
 800a640:	014ca43f 	.word	0x014ca43f
 800a644:	016e3600 	.word	0x016e3600
 800a648:	01a6ab1f 	.word	0x01a6ab1f
 800a64c:	01e84800 	.word	0x01e84800

0800a650 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	689b      	ldr	r3, [r3, #8]
 800a65c:	f043 0201 	orr.w	r2, r3, #1
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a664:	2300      	movs	r3, #0
}
 800a666:	4618      	mov	r0, r3
 800a668:	370c      	adds	r7, #12
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr

0800a672 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a672:	b480      	push	{r7}
 800a674:	b083      	sub	sp, #12
 800a676:	af00      	add	r7, sp, #0
 800a678:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	689b      	ldr	r3, [r3, #8]
 800a67e:	f023 0201 	bic.w	r2, r3, #1
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a686:	2300      	movs	r3, #0
}
 800a688:	4618      	mov	r0, r3
 800a68a:	370c      	adds	r7, #12
 800a68c:	46bd      	mov	sp, r7
 800a68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a692:	4770      	bx	lr

0800a694 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b084      	sub	sp, #16
 800a698:	af00      	add	r7, sp, #0
 800a69a:	6078      	str	r0, [r7, #4]
 800a69c:	460b      	mov	r3, r1
 800a69e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a6b0:	78fb      	ldrb	r3, [r7, #3]
 800a6b2:	2b01      	cmp	r3, #1
 800a6b4:	d115      	bne.n	800a6e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	68db      	ldr	r3, [r3, #12]
 800a6ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a6c2:	2001      	movs	r0, #1
 800a6c4:	f7fa fd16 	bl	80050f4 <HAL_Delay>
      ms++;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	3301      	adds	r3, #1
 800a6cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a6ce:	6878      	ldr	r0, [r7, #4]
 800a6d0:	f001 f972 	bl	800b9b8 <USB_GetMode>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d01e      	beq.n	800a718 <USB_SetCurrentMode+0x84>
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	2b31      	cmp	r3, #49	; 0x31
 800a6de:	d9f0      	bls.n	800a6c2 <USB_SetCurrentMode+0x2e>
 800a6e0:	e01a      	b.n	800a718 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a6e2:	78fb      	ldrb	r3, [r7, #3]
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	d115      	bne.n	800a714 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	68db      	ldr	r3, [r3, #12]
 800a6ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a6f4:	2001      	movs	r0, #1
 800a6f6:	f7fa fcfd 	bl	80050f4 <HAL_Delay>
      ms++;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	3301      	adds	r3, #1
 800a6fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f001 f959 	bl	800b9b8 <USB_GetMode>
 800a706:	4603      	mov	r3, r0
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d005      	beq.n	800a718 <USB_SetCurrentMode+0x84>
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2b31      	cmp	r3, #49	; 0x31
 800a710:	d9f0      	bls.n	800a6f4 <USB_SetCurrentMode+0x60>
 800a712:	e001      	b.n	800a718 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a714:	2301      	movs	r3, #1
 800a716:	e005      	b.n	800a724 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2b32      	cmp	r3, #50	; 0x32
 800a71c:	d101      	bne.n	800a722 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a71e:	2301      	movs	r3, #1
 800a720:	e000      	b.n	800a724 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a722:	2300      	movs	r3, #0
}
 800a724:	4618      	mov	r0, r3
 800a726:	3710      	adds	r7, #16
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a72c:	b084      	sub	sp, #16
 800a72e:	b580      	push	{r7, lr}
 800a730:	b086      	sub	sp, #24
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
 800a736:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a73a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a73e:	2300      	movs	r3, #0
 800a740:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a746:	2300      	movs	r3, #0
 800a748:	613b      	str	r3, [r7, #16]
 800a74a:	e009      	b.n	800a760 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a74c:	687a      	ldr	r2, [r7, #4]
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	3340      	adds	r3, #64	; 0x40
 800a752:	009b      	lsls	r3, r3, #2
 800a754:	4413      	add	r3, r2
 800a756:	2200      	movs	r2, #0
 800a758:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	3301      	adds	r3, #1
 800a75e:	613b      	str	r3, [r7, #16]
 800a760:	693b      	ldr	r3, [r7, #16]
 800a762:	2b0e      	cmp	r3, #14
 800a764:	d9f2      	bls.n	800a74c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d11c      	bne.n	800a7a6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	68fa      	ldr	r2, [r7, #12]
 800a776:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a77a:	f043 0302 	orr.w	r3, r3, #2
 800a77e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a784:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a790:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a79c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	639a      	str	r2, [r3, #56]	; 0x38
 800a7a4:	e00b      	b.n	800a7be <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7aa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7b6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a7c4:	461a      	mov	r2, r3
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7d0:	4619      	mov	r1, r3
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a7d8:	461a      	mov	r2, r3
 800a7da:	680b      	ldr	r3, [r1, #0]
 800a7dc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e0:	2b01      	cmp	r3, #1
 800a7e2:	d10c      	bne.n	800a7fe <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a7e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d104      	bne.n	800a7f4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a7ea:	2100      	movs	r1, #0
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 f945 	bl	800aa7c <USB_SetDevSpeed>
 800a7f2:	e008      	b.n	800a806 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a7f4:	2101      	movs	r1, #1
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f000 f940 	bl	800aa7c <USB_SetDevSpeed>
 800a7fc:	e003      	b.n	800a806 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a7fe:	2103      	movs	r1, #3
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 f93b 	bl	800aa7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a806:	2110      	movs	r1, #16
 800a808:	6878      	ldr	r0, [r7, #4]
 800a80a:	f000 f8f3 	bl	800a9f4 <USB_FlushTxFifo>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d001      	beq.n	800a818 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a814:	2301      	movs	r3, #1
 800a816:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f000 f90f 	bl	800aa3c <USB_FlushRxFifo>
 800a81e:	4603      	mov	r3, r0
 800a820:	2b00      	cmp	r3, #0
 800a822:	d001      	beq.n	800a828 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a824:	2301      	movs	r3, #1
 800a826:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a82e:	461a      	mov	r2, r3
 800a830:	2300      	movs	r3, #0
 800a832:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a83a:	461a      	mov	r2, r3
 800a83c:	2300      	movs	r3, #0
 800a83e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a846:	461a      	mov	r2, r3
 800a848:	2300      	movs	r3, #0
 800a84a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a84c:	2300      	movs	r3, #0
 800a84e:	613b      	str	r3, [r7, #16]
 800a850:	e043      	b.n	800a8da <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	015a      	lsls	r2, r3, #5
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	4413      	add	r3, r2
 800a85a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a864:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a868:	d118      	bne.n	800a89c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a86a:	693b      	ldr	r3, [r7, #16]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d10a      	bne.n	800a886 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a870:	693b      	ldr	r3, [r7, #16]
 800a872:	015a      	lsls	r2, r3, #5
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	4413      	add	r3, r2
 800a878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a87c:	461a      	mov	r2, r3
 800a87e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a882:	6013      	str	r3, [r2, #0]
 800a884:	e013      	b.n	800a8ae <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a886:	693b      	ldr	r3, [r7, #16]
 800a888:	015a      	lsls	r2, r3, #5
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	4413      	add	r3, r2
 800a88e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a892:	461a      	mov	r2, r3
 800a894:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a898:	6013      	str	r3, [r2, #0]
 800a89a:	e008      	b.n	800a8ae <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	015a      	lsls	r2, r3, #5
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	4413      	add	r3, r2
 800a8a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8a8:	461a      	mov	r2, r3
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a8ae:	693b      	ldr	r3, [r7, #16]
 800a8b0:	015a      	lsls	r2, r3, #5
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	4413      	add	r3, r2
 800a8b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8ba:	461a      	mov	r2, r3
 800a8bc:	2300      	movs	r3, #0
 800a8be:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	015a      	lsls	r2, r3, #5
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	4413      	add	r3, r2
 800a8c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8cc:	461a      	mov	r2, r3
 800a8ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a8d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	613b      	str	r3, [r7, #16]
 800a8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8dc:	693a      	ldr	r2, [r7, #16]
 800a8de:	429a      	cmp	r2, r3
 800a8e0:	d3b7      	bcc.n	800a852 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	613b      	str	r3, [r7, #16]
 800a8e6:	e043      	b.n	800a970 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a8e8:	693b      	ldr	r3, [r7, #16]
 800a8ea:	015a      	lsls	r2, r3, #5
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	4413      	add	r3, r2
 800a8f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8fe:	d118      	bne.n	800a932 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a900:	693b      	ldr	r3, [r7, #16]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d10a      	bne.n	800a91c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	015a      	lsls	r2, r3, #5
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	4413      	add	r3, r2
 800a90e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a912:	461a      	mov	r2, r3
 800a914:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a918:	6013      	str	r3, [r2, #0]
 800a91a:	e013      	b.n	800a944 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	015a      	lsls	r2, r3, #5
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	4413      	add	r3, r2
 800a924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a928:	461a      	mov	r2, r3
 800a92a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a92e:	6013      	str	r3, [r2, #0]
 800a930:	e008      	b.n	800a944 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a932:	693b      	ldr	r3, [r7, #16]
 800a934:	015a      	lsls	r2, r3, #5
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	4413      	add	r3, r2
 800a93a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a93e:	461a      	mov	r2, r3
 800a940:	2300      	movs	r3, #0
 800a942:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a944:	693b      	ldr	r3, [r7, #16]
 800a946:	015a      	lsls	r2, r3, #5
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	4413      	add	r3, r2
 800a94c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a950:	461a      	mov	r2, r3
 800a952:	2300      	movs	r3, #0
 800a954:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	015a      	lsls	r2, r3, #5
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	4413      	add	r3, r2
 800a95e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a962:	461a      	mov	r2, r3
 800a964:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a968:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	3301      	adds	r3, #1
 800a96e:	613b      	str	r3, [r7, #16]
 800a970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a972:	693a      	ldr	r2, [r7, #16]
 800a974:	429a      	cmp	r2, r3
 800a976:	d3b7      	bcc.n	800a8e8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a97e:	691b      	ldr	r3, [r3, #16]
 800a980:	68fa      	ldr	r2, [r7, #12]
 800a982:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a986:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a98a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2200      	movs	r2, #0
 800a990:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a998:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a99a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d105      	bne.n	800a9ac <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	699b      	ldr	r3, [r3, #24]
 800a9a4:	f043 0210 	orr.w	r2, r3, #16
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	699a      	ldr	r2, [r3, #24]
 800a9b0:	4b0f      	ldr	r3, [pc, #60]	; (800a9f0 <USB_DevInit+0x2c4>)
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a9b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d005      	beq.n	800a9ca <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	699b      	ldr	r3, [r3, #24]
 800a9c2:	f043 0208 	orr.w	r2, r3, #8
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a9ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d107      	bne.n	800a9e0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	699b      	ldr	r3, [r3, #24]
 800a9d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a9d8:	f043 0304 	orr.w	r3, r3, #4
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a9e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3718      	adds	r7, #24
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a9ec:	b004      	add	sp, #16
 800a9ee:	4770      	bx	lr
 800a9f0:	803c3800 	.word	0x803c3800

0800a9f4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	6078      	str	r0, [r7, #4]
 800a9fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a9fe:	2300      	movs	r3, #0
 800aa00:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	019b      	lsls	r3, r3, #6
 800aa06:	f043 0220 	orr.w	r2, r3, #32
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	3301      	adds	r3, #1
 800aa12:	60fb      	str	r3, [r7, #12]
 800aa14:	4a08      	ldr	r2, [pc, #32]	; (800aa38 <USB_FlushTxFifo+0x44>)
 800aa16:	4293      	cmp	r3, r2
 800aa18:	d901      	bls.n	800aa1e <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800aa1a:	2303      	movs	r3, #3
 800aa1c:	e006      	b.n	800aa2c <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	f003 0320 	and.w	r3, r3, #32
 800aa26:	2b20      	cmp	r3, #32
 800aa28:	d0f1      	beq.n	800aa0e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800aa2a:	2300      	movs	r3, #0
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3714      	adds	r7, #20
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr
 800aa38:	00030d40 	.word	0x00030d40

0800aa3c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aa3c:	b480      	push	{r7}
 800aa3e:	b085      	sub	sp, #20
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa44:	2300      	movs	r3, #0
 800aa46:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	2210      	movs	r2, #16
 800aa4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	3301      	adds	r3, #1
 800aa52:	60fb      	str	r3, [r7, #12]
 800aa54:	4a08      	ldr	r2, [pc, #32]	; (800aa78 <USB_FlushRxFifo+0x3c>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d901      	bls.n	800aa5e <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800aa5a:	2303      	movs	r3, #3
 800aa5c:	e006      	b.n	800aa6c <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	691b      	ldr	r3, [r3, #16]
 800aa62:	f003 0310 	and.w	r3, r3, #16
 800aa66:	2b10      	cmp	r3, #16
 800aa68:	d0f1      	beq.n	800aa4e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800aa6a:	2300      	movs	r3, #0
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	3714      	adds	r7, #20
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr
 800aa78:	00030d40 	.word	0x00030d40

0800aa7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800aa7c:	b480      	push	{r7}
 800aa7e:	b085      	sub	sp, #20
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	460b      	mov	r3, r1
 800aa86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	78fb      	ldrb	r3, [r7, #3]
 800aa96:	68f9      	ldr	r1, [r7, #12]
 800aa98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa9c:	4313      	orrs	r3, r2
 800aa9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800aaa0:	2300      	movs	r3, #0
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3714      	adds	r7, #20
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaac:	4770      	bx	lr

0800aaae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800aaae:	b480      	push	{r7}
 800aab0:	b087      	sub	sp, #28
 800aab2:	af00      	add	r7, sp, #0
 800aab4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aac0:	689b      	ldr	r3, [r3, #8]
 800aac2:	f003 0306 	and.w	r3, r3, #6
 800aac6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d102      	bne.n	800aad4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800aace:	2300      	movs	r3, #0
 800aad0:	75fb      	strb	r3, [r7, #23]
 800aad2:	e00a      	b.n	800aaea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2b02      	cmp	r3, #2
 800aad8:	d002      	beq.n	800aae0 <USB_GetDevSpeed+0x32>
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2b06      	cmp	r3, #6
 800aade:	d102      	bne.n	800aae6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800aae0:	2302      	movs	r3, #2
 800aae2:	75fb      	strb	r3, [r7, #23]
 800aae4:	e001      	b.n	800aaea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800aae6:	230f      	movs	r3, #15
 800aae8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800aaea:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaec:	4618      	mov	r0, r3
 800aaee:	371c      	adds	r7, #28
 800aaf0:	46bd      	mov	sp, r7
 800aaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf6:	4770      	bx	lr

0800aaf8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
 800ab00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab06:	683b      	ldr	r3, [r7, #0]
 800ab08:	781b      	ldrb	r3, [r3, #0]
 800ab0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	785b      	ldrb	r3, [r3, #1]
 800ab10:	2b01      	cmp	r3, #1
 800ab12:	d13a      	bne.n	800ab8a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab1a:	69da      	ldr	r2, [r3, #28]
 800ab1c:	683b      	ldr	r3, [r7, #0]
 800ab1e:	781b      	ldrb	r3, [r3, #0]
 800ab20:	f003 030f 	and.w	r3, r3, #15
 800ab24:	2101      	movs	r1, #1
 800ab26:	fa01 f303 	lsl.w	r3, r1, r3
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	68f9      	ldr	r1, [r7, #12]
 800ab2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab32:	4313      	orrs	r3, r2
 800ab34:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	015a      	lsls	r2, r3, #5
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d155      	bne.n	800abf8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	015a      	lsls	r2, r3, #5
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	4413      	add	r3, r2
 800ab54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab58:	681a      	ldr	r2, [r3, #0]
 800ab5a:	683b      	ldr	r3, [r7, #0]
 800ab5c:	689b      	ldr	r3, [r3, #8]
 800ab5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	78db      	ldrb	r3, [r3, #3]
 800ab66:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ab68:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	059b      	lsls	r3, r3, #22
 800ab6e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ab70:	4313      	orrs	r3, r2
 800ab72:	68ba      	ldr	r2, [r7, #8]
 800ab74:	0151      	lsls	r1, r2, #5
 800ab76:	68fa      	ldr	r2, [r7, #12]
 800ab78:	440a      	add	r2, r1
 800ab7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab86:	6013      	str	r3, [r2, #0]
 800ab88:	e036      	b.n	800abf8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab90:	69da      	ldr	r2, [r3, #28]
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	781b      	ldrb	r3, [r3, #0]
 800ab96:	f003 030f 	and.w	r3, r3, #15
 800ab9a:	2101      	movs	r1, #1
 800ab9c:	fa01 f303 	lsl.w	r3, r1, r3
 800aba0:	041b      	lsls	r3, r3, #16
 800aba2:	68f9      	ldr	r1, [r7, #12]
 800aba4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aba8:	4313      	orrs	r3, r2
 800abaa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	015a      	lsls	r2, r3, #5
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	4413      	add	r3, r2
 800abb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	d11a      	bne.n	800abf8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800abc2:	68bb      	ldr	r3, [r7, #8]
 800abc4:	015a      	lsls	r2, r3, #5
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	4413      	add	r3, r2
 800abca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abce:	681a      	ldr	r2, [r3, #0]
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	78db      	ldrb	r3, [r3, #3]
 800abdc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800abde:	430b      	orrs	r3, r1
 800abe0:	4313      	orrs	r3, r2
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	0151      	lsls	r1, r2, #5
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	440a      	add	r2, r1
 800abea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800abf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800abf6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800abf8:	2300      	movs	r3, #0
}
 800abfa:	4618      	mov	r0, r3
 800abfc:	3714      	adds	r7, #20
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr
	...

0800ac08 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	781b      	ldrb	r3, [r3, #0]
 800ac1a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ac1c:	683b      	ldr	r3, [r7, #0]
 800ac1e:	785b      	ldrb	r3, [r3, #1]
 800ac20:	2b01      	cmp	r3, #1
 800ac22:	d161      	bne.n	800ace8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	015a      	lsls	r2, r3, #5
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	4413      	add	r3, r2
 800ac2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ac36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ac3a:	d11f      	bne.n	800ac7c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	015a      	lsls	r2, r3, #5
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	4413      	add	r3, r2
 800ac44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	68ba      	ldr	r2, [r7, #8]
 800ac4c:	0151      	lsls	r1, r2, #5
 800ac4e:	68fa      	ldr	r2, [r7, #12]
 800ac50:	440a      	add	r2, r1
 800ac52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ac5a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ac5c:	68bb      	ldr	r3, [r7, #8]
 800ac5e:	015a      	lsls	r2, r3, #5
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	4413      	add	r3, r2
 800ac64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	68ba      	ldr	r2, [r7, #8]
 800ac6c:	0151      	lsls	r1, r2, #5
 800ac6e:	68fa      	ldr	r2, [r7, #12]
 800ac70:	440a      	add	r2, r1
 800ac72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	781b      	ldrb	r3, [r3, #0]
 800ac88:	f003 030f 	and.w	r3, r3, #15
 800ac8c:	2101      	movs	r1, #1
 800ac8e:	fa01 f303 	lsl.w	r3, r1, r3
 800ac92:	b29b      	uxth	r3, r3
 800ac94:	43db      	mvns	r3, r3
 800ac96:	68f9      	ldr	r1, [r7, #12]
 800ac98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac9c:	4013      	ands	r3, r2
 800ac9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aca6:	69da      	ldr	r2, [r3, #28]
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	781b      	ldrb	r3, [r3, #0]
 800acac:	f003 030f 	and.w	r3, r3, #15
 800acb0:	2101      	movs	r1, #1
 800acb2:	fa01 f303 	lsl.w	r3, r1, r3
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	43db      	mvns	r3, r3
 800acba:	68f9      	ldr	r1, [r7, #12]
 800acbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acc0:	4013      	ands	r3, r2
 800acc2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800acc4:	68bb      	ldr	r3, [r7, #8]
 800acc6:	015a      	lsls	r2, r3, #5
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	4413      	add	r3, r2
 800accc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	0159      	lsls	r1, r3, #5
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	440b      	add	r3, r1
 800acda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acde:	4619      	mov	r1, r3
 800ace0:	4b35      	ldr	r3, [pc, #212]	; (800adb8 <USB_DeactivateEndpoint+0x1b0>)
 800ace2:	4013      	ands	r3, r2
 800ace4:	600b      	str	r3, [r1, #0]
 800ace6:	e060      	b.n	800adaa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	015a      	lsls	r2, r3, #5
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	4413      	add	r3, r2
 800acf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800acfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800acfe:	d11f      	bne.n	800ad40 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	015a      	lsls	r2, r3, #5
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	4413      	add	r3, r2
 800ad08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	68ba      	ldr	r2, [r7, #8]
 800ad10:	0151      	lsls	r1, r2, #5
 800ad12:	68fa      	ldr	r2, [r7, #12]
 800ad14:	440a      	add	r2, r1
 800ad16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ad1e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	015a      	lsls	r2, r3, #5
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	4413      	add	r3, r2
 800ad28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	68ba      	ldr	r2, [r7, #8]
 800ad30:	0151      	lsls	r1, r2, #5
 800ad32:	68fa      	ldr	r2, [r7, #12]
 800ad34:	440a      	add	r2, r1
 800ad36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad48:	683b      	ldr	r3, [r7, #0]
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	f003 030f 	and.w	r3, r3, #15
 800ad50:	2101      	movs	r1, #1
 800ad52:	fa01 f303 	lsl.w	r3, r1, r3
 800ad56:	041b      	lsls	r3, r3, #16
 800ad58:	43db      	mvns	r3, r3
 800ad5a:	68f9      	ldr	r1, [r7, #12]
 800ad5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad60:	4013      	ands	r3, r2
 800ad62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad6a:	69da      	ldr	r2, [r3, #28]
 800ad6c:	683b      	ldr	r3, [r7, #0]
 800ad6e:	781b      	ldrb	r3, [r3, #0]
 800ad70:	f003 030f 	and.w	r3, r3, #15
 800ad74:	2101      	movs	r1, #1
 800ad76:	fa01 f303 	lsl.w	r3, r1, r3
 800ad7a:	041b      	lsls	r3, r3, #16
 800ad7c:	43db      	mvns	r3, r3
 800ad7e:	68f9      	ldr	r1, [r7, #12]
 800ad80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad84:	4013      	ands	r3, r2
 800ad86:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ad88:	68bb      	ldr	r3, [r7, #8]
 800ad8a:	015a      	lsls	r2, r3, #5
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	4413      	add	r3, r2
 800ad90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	0159      	lsls	r1, r3, #5
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	440b      	add	r3, r1
 800ad9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ada2:	4619      	mov	r1, r3
 800ada4:	4b05      	ldr	r3, [pc, #20]	; (800adbc <USB_DeactivateEndpoint+0x1b4>)
 800ada6:	4013      	ands	r3, r2
 800ada8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800adaa:	2300      	movs	r3, #0
}
 800adac:	4618      	mov	r0, r3
 800adae:	3714      	adds	r7, #20
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr
 800adb8:	ec337800 	.word	0xec337800
 800adbc:	eff37800 	.word	0xeff37800

0800adc0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b08a      	sub	sp, #40	; 0x28
 800adc4:	af02      	add	r7, sp, #8
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	4613      	mov	r3, r2
 800adcc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	781b      	ldrb	r3, [r3, #0]
 800add6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	785b      	ldrb	r3, [r3, #1]
 800addc:	2b01      	cmp	r3, #1
 800adde:	f040 815c 	bne.w	800b09a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	695b      	ldr	r3, [r3, #20]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d132      	bne.n	800ae50 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800adea:	69bb      	ldr	r3, [r7, #24]
 800adec:	015a      	lsls	r2, r3, #5
 800adee:	69fb      	ldr	r3, [r7, #28]
 800adf0:	4413      	add	r3, r2
 800adf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adf6:	691b      	ldr	r3, [r3, #16]
 800adf8:	69ba      	ldr	r2, [r7, #24]
 800adfa:	0151      	lsls	r1, r2, #5
 800adfc:	69fa      	ldr	r2, [r7, #28]
 800adfe:	440a      	add	r2, r1
 800ae00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ae08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ae0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	015a      	lsls	r2, r3, #5
 800ae12:	69fb      	ldr	r3, [r7, #28]
 800ae14:	4413      	add	r3, r2
 800ae16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae1a:	691b      	ldr	r3, [r3, #16]
 800ae1c:	69ba      	ldr	r2, [r7, #24]
 800ae1e:	0151      	lsls	r1, r2, #5
 800ae20:	69fa      	ldr	r2, [r7, #28]
 800ae22:	440a      	add	r2, r1
 800ae24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ae2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ae2e:	69bb      	ldr	r3, [r7, #24]
 800ae30:	015a      	lsls	r2, r3, #5
 800ae32:	69fb      	ldr	r3, [r7, #28]
 800ae34:	4413      	add	r3, r2
 800ae36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae3a:	691b      	ldr	r3, [r3, #16]
 800ae3c:	69ba      	ldr	r2, [r7, #24]
 800ae3e:	0151      	lsls	r1, r2, #5
 800ae40:	69fa      	ldr	r2, [r7, #28]
 800ae42:	440a      	add	r2, r1
 800ae44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae48:	0cdb      	lsrs	r3, r3, #19
 800ae4a:	04db      	lsls	r3, r3, #19
 800ae4c:	6113      	str	r3, [r2, #16]
 800ae4e:	e074      	b.n	800af3a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	015a      	lsls	r2, r3, #5
 800ae54:	69fb      	ldr	r3, [r7, #28]
 800ae56:	4413      	add	r3, r2
 800ae58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae5c:	691b      	ldr	r3, [r3, #16]
 800ae5e:	69ba      	ldr	r2, [r7, #24]
 800ae60:	0151      	lsls	r1, r2, #5
 800ae62:	69fa      	ldr	r2, [r7, #28]
 800ae64:	440a      	add	r2, r1
 800ae66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae6a:	0cdb      	lsrs	r3, r3, #19
 800ae6c:	04db      	lsls	r3, r3, #19
 800ae6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ae70:	69bb      	ldr	r3, [r7, #24]
 800ae72:	015a      	lsls	r2, r3, #5
 800ae74:	69fb      	ldr	r3, [r7, #28]
 800ae76:	4413      	add	r3, r2
 800ae78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	69ba      	ldr	r2, [r7, #24]
 800ae80:	0151      	lsls	r1, r2, #5
 800ae82:	69fa      	ldr	r2, [r7, #28]
 800ae84:	440a      	add	r2, r1
 800ae86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ae8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ae92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	015a      	lsls	r2, r3, #5
 800ae98:	69fb      	ldr	r3, [r7, #28]
 800ae9a:	4413      	add	r3, r2
 800ae9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aea0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	6959      	ldr	r1, [r3, #20]
 800aea6:	68bb      	ldr	r3, [r7, #8]
 800aea8:	689b      	ldr	r3, [r3, #8]
 800aeaa:	440b      	add	r3, r1
 800aeac:	1e59      	subs	r1, r3, #1
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	689b      	ldr	r3, [r3, #8]
 800aeb2:	fbb1 f3f3 	udiv	r3, r1, r3
 800aeb6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800aeb8:	4b9d      	ldr	r3, [pc, #628]	; (800b130 <USB_EPStartXfer+0x370>)
 800aeba:	400b      	ands	r3, r1
 800aebc:	69b9      	ldr	r1, [r7, #24]
 800aebe:	0148      	lsls	r0, r1, #5
 800aec0:	69f9      	ldr	r1, [r7, #28]
 800aec2:	4401      	add	r1, r0
 800aec4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aec8:	4313      	orrs	r3, r2
 800aeca:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	015a      	lsls	r2, r3, #5
 800aed0:	69fb      	ldr	r3, [r7, #28]
 800aed2:	4413      	add	r3, r2
 800aed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aed8:	691a      	ldr	r2, [r3, #16]
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	695b      	ldr	r3, [r3, #20]
 800aede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aee2:	69b9      	ldr	r1, [r7, #24]
 800aee4:	0148      	lsls	r0, r1, #5
 800aee6:	69f9      	ldr	r1, [r7, #28]
 800aee8:	4401      	add	r1, r0
 800aeea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aeee:	4313      	orrs	r3, r2
 800aef0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	78db      	ldrb	r3, [r3, #3]
 800aef6:	2b01      	cmp	r3, #1
 800aef8:	d11f      	bne.n	800af3a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800aefa:	69bb      	ldr	r3, [r7, #24]
 800aefc:	015a      	lsls	r2, r3, #5
 800aefe:	69fb      	ldr	r3, [r7, #28]
 800af00:	4413      	add	r3, r2
 800af02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af06:	691b      	ldr	r3, [r3, #16]
 800af08:	69ba      	ldr	r2, [r7, #24]
 800af0a:	0151      	lsls	r1, r2, #5
 800af0c:	69fa      	ldr	r2, [r7, #28]
 800af0e:	440a      	add	r2, r1
 800af10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af14:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800af18:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800af1a:	69bb      	ldr	r3, [r7, #24]
 800af1c:	015a      	lsls	r2, r3, #5
 800af1e:	69fb      	ldr	r3, [r7, #28]
 800af20:	4413      	add	r3, r2
 800af22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af26:	691b      	ldr	r3, [r3, #16]
 800af28:	69ba      	ldr	r2, [r7, #24]
 800af2a:	0151      	lsls	r1, r2, #5
 800af2c:	69fa      	ldr	r2, [r7, #28]
 800af2e:	440a      	add	r2, r1
 800af30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800af38:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800af3a:	79fb      	ldrb	r3, [r7, #7]
 800af3c:	2b01      	cmp	r3, #1
 800af3e:	d14b      	bne.n	800afd8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800af40:	68bb      	ldr	r3, [r7, #8]
 800af42:	691b      	ldr	r3, [r3, #16]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d009      	beq.n	800af5c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800af48:	69bb      	ldr	r3, [r7, #24]
 800af4a:	015a      	lsls	r2, r3, #5
 800af4c:	69fb      	ldr	r3, [r7, #28]
 800af4e:	4413      	add	r3, r2
 800af50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af54:	461a      	mov	r2, r3
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	691b      	ldr	r3, [r3, #16]
 800af5a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	78db      	ldrb	r3, [r3, #3]
 800af60:	2b01      	cmp	r3, #1
 800af62:	d128      	bne.n	800afb6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800af64:	69fb      	ldr	r3, [r7, #28]
 800af66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af6a:	689b      	ldr	r3, [r3, #8]
 800af6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af70:	2b00      	cmp	r3, #0
 800af72:	d110      	bne.n	800af96 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800af74:	69bb      	ldr	r3, [r7, #24]
 800af76:	015a      	lsls	r2, r3, #5
 800af78:	69fb      	ldr	r3, [r7, #28]
 800af7a:	4413      	add	r3, r2
 800af7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	69ba      	ldr	r2, [r7, #24]
 800af84:	0151      	lsls	r1, r2, #5
 800af86:	69fa      	ldr	r2, [r7, #28]
 800af88:	440a      	add	r2, r1
 800af8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800af92:	6013      	str	r3, [r2, #0]
 800af94:	e00f      	b.n	800afb6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800af96:	69bb      	ldr	r3, [r7, #24]
 800af98:	015a      	lsls	r2, r3, #5
 800af9a:	69fb      	ldr	r3, [r7, #28]
 800af9c:	4413      	add	r3, r2
 800af9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	69ba      	ldr	r2, [r7, #24]
 800afa6:	0151      	lsls	r1, r2, #5
 800afa8:	69fa      	ldr	r2, [r7, #28]
 800afaa:	440a      	add	r2, r1
 800afac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800afb4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800afb6:	69bb      	ldr	r3, [r7, #24]
 800afb8:	015a      	lsls	r2, r3, #5
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	4413      	add	r3, r2
 800afbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	69ba      	ldr	r2, [r7, #24]
 800afc6:	0151      	lsls	r1, r2, #5
 800afc8:	69fa      	ldr	r2, [r7, #28]
 800afca:	440a      	add	r2, r1
 800afcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afd0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800afd4:	6013      	str	r3, [r2, #0]
 800afd6:	e12f      	b.n	800b238 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800afd8:	69bb      	ldr	r3, [r7, #24]
 800afda:	015a      	lsls	r2, r3, #5
 800afdc:	69fb      	ldr	r3, [r7, #28]
 800afde:	4413      	add	r3, r2
 800afe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	69ba      	ldr	r2, [r7, #24]
 800afe8:	0151      	lsls	r1, r2, #5
 800afea:	69fa      	ldr	r2, [r7, #28]
 800afec:	440a      	add	r2, r1
 800afee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aff2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aff6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	78db      	ldrb	r3, [r3, #3]
 800affc:	2b01      	cmp	r3, #1
 800affe:	d015      	beq.n	800b02c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	695b      	ldr	r3, [r3, #20]
 800b004:	2b00      	cmp	r3, #0
 800b006:	f000 8117 	beq.w	800b238 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b00a:	69fb      	ldr	r3, [r7, #28]
 800b00c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	781b      	ldrb	r3, [r3, #0]
 800b016:	f003 030f 	and.w	r3, r3, #15
 800b01a:	2101      	movs	r1, #1
 800b01c:	fa01 f303 	lsl.w	r3, r1, r3
 800b020:	69f9      	ldr	r1, [r7, #28]
 800b022:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b026:	4313      	orrs	r3, r2
 800b028:	634b      	str	r3, [r1, #52]	; 0x34
 800b02a:	e105      	b.n	800b238 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b02c:	69fb      	ldr	r3, [r7, #28]
 800b02e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b032:	689b      	ldr	r3, [r3, #8]
 800b034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d110      	bne.n	800b05e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b03c:	69bb      	ldr	r3, [r7, #24]
 800b03e:	015a      	lsls	r2, r3, #5
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	4413      	add	r3, r2
 800b044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	69ba      	ldr	r2, [r7, #24]
 800b04c:	0151      	lsls	r1, r2, #5
 800b04e:	69fa      	ldr	r2, [r7, #28]
 800b050:	440a      	add	r2, r1
 800b052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b056:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b05a:	6013      	str	r3, [r2, #0]
 800b05c:	e00f      	b.n	800b07e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b05e:	69bb      	ldr	r3, [r7, #24]
 800b060:	015a      	lsls	r2, r3, #5
 800b062:	69fb      	ldr	r3, [r7, #28]
 800b064:	4413      	add	r3, r2
 800b066:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	69ba      	ldr	r2, [r7, #24]
 800b06e:	0151      	lsls	r1, r2, #5
 800b070:	69fa      	ldr	r2, [r7, #28]
 800b072:	440a      	add	r2, r1
 800b074:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b078:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b07c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	68d9      	ldr	r1, [r3, #12]
 800b082:	68bb      	ldr	r3, [r7, #8]
 800b084:	781a      	ldrb	r2, [r3, #0]
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	695b      	ldr	r3, [r3, #20]
 800b08a:	b298      	uxth	r0, r3
 800b08c:	79fb      	ldrb	r3, [r7, #7]
 800b08e:	9300      	str	r3, [sp, #0]
 800b090:	4603      	mov	r3, r0
 800b092:	68f8      	ldr	r0, [r7, #12]
 800b094:	f000 fa2b 	bl	800b4ee <USB_WritePacket>
 800b098:	e0ce      	b.n	800b238 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b09a:	69bb      	ldr	r3, [r7, #24]
 800b09c:	015a      	lsls	r2, r3, #5
 800b09e:	69fb      	ldr	r3, [r7, #28]
 800b0a0:	4413      	add	r3, r2
 800b0a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0a6:	691b      	ldr	r3, [r3, #16]
 800b0a8:	69ba      	ldr	r2, [r7, #24]
 800b0aa:	0151      	lsls	r1, r2, #5
 800b0ac:	69fa      	ldr	r2, [r7, #28]
 800b0ae:	440a      	add	r2, r1
 800b0b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0b4:	0cdb      	lsrs	r3, r3, #19
 800b0b6:	04db      	lsls	r3, r3, #19
 800b0b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b0ba:	69bb      	ldr	r3, [r7, #24]
 800b0bc:	015a      	lsls	r2, r3, #5
 800b0be:	69fb      	ldr	r3, [r7, #28]
 800b0c0:	4413      	add	r3, r2
 800b0c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0c6:	691b      	ldr	r3, [r3, #16]
 800b0c8:	69ba      	ldr	r2, [r7, #24]
 800b0ca:	0151      	lsls	r1, r2, #5
 800b0cc:	69fa      	ldr	r2, [r7, #28]
 800b0ce:	440a      	add	r2, r1
 800b0d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b0d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b0dc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b0de:	68bb      	ldr	r3, [r7, #8]
 800b0e0:	695b      	ldr	r3, [r3, #20]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d126      	bne.n	800b134 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b0e6:	69bb      	ldr	r3, [r7, #24]
 800b0e8:	015a      	lsls	r2, r3, #5
 800b0ea:	69fb      	ldr	r3, [r7, #28]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0f2:	691a      	ldr	r2, [r3, #16]
 800b0f4:	68bb      	ldr	r3, [r7, #8]
 800b0f6:	689b      	ldr	r3, [r3, #8]
 800b0f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b0fc:	69b9      	ldr	r1, [r7, #24]
 800b0fe:	0148      	lsls	r0, r1, #5
 800b100:	69f9      	ldr	r1, [r7, #28]
 800b102:	4401      	add	r1, r0
 800b104:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b108:	4313      	orrs	r3, r2
 800b10a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	015a      	lsls	r2, r3, #5
 800b110:	69fb      	ldr	r3, [r7, #28]
 800b112:	4413      	add	r3, r2
 800b114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b118:	691b      	ldr	r3, [r3, #16]
 800b11a:	69ba      	ldr	r2, [r7, #24]
 800b11c:	0151      	lsls	r1, r2, #5
 800b11e:	69fa      	ldr	r2, [r7, #28]
 800b120:	440a      	add	r2, r1
 800b122:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b126:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b12a:	6113      	str	r3, [r2, #16]
 800b12c:	e036      	b.n	800b19c <USB_EPStartXfer+0x3dc>
 800b12e:	bf00      	nop
 800b130:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	695a      	ldr	r2, [r3, #20]
 800b138:	68bb      	ldr	r3, [r7, #8]
 800b13a:	689b      	ldr	r3, [r3, #8]
 800b13c:	4413      	add	r3, r2
 800b13e:	1e5a      	subs	r2, r3, #1
 800b140:	68bb      	ldr	r3, [r7, #8]
 800b142:	689b      	ldr	r3, [r3, #8]
 800b144:	fbb2 f3f3 	udiv	r3, r2, r3
 800b148:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b14a:	69bb      	ldr	r3, [r7, #24]
 800b14c:	015a      	lsls	r2, r3, #5
 800b14e:	69fb      	ldr	r3, [r7, #28]
 800b150:	4413      	add	r3, r2
 800b152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b156:	691a      	ldr	r2, [r3, #16]
 800b158:	8afb      	ldrh	r3, [r7, #22]
 800b15a:	04d9      	lsls	r1, r3, #19
 800b15c:	4b39      	ldr	r3, [pc, #228]	; (800b244 <USB_EPStartXfer+0x484>)
 800b15e:	400b      	ands	r3, r1
 800b160:	69b9      	ldr	r1, [r7, #24]
 800b162:	0148      	lsls	r0, r1, #5
 800b164:	69f9      	ldr	r1, [r7, #28]
 800b166:	4401      	add	r1, r0
 800b168:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b16c:	4313      	orrs	r3, r2
 800b16e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	015a      	lsls	r2, r3, #5
 800b174:	69fb      	ldr	r3, [r7, #28]
 800b176:	4413      	add	r3, r2
 800b178:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b17c:	691a      	ldr	r2, [r3, #16]
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	689b      	ldr	r3, [r3, #8]
 800b182:	8af9      	ldrh	r1, [r7, #22]
 800b184:	fb01 f303 	mul.w	r3, r1, r3
 800b188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b18c:	69b9      	ldr	r1, [r7, #24]
 800b18e:	0148      	lsls	r0, r1, #5
 800b190:	69f9      	ldr	r1, [r7, #28]
 800b192:	4401      	add	r1, r0
 800b194:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b198:	4313      	orrs	r3, r2
 800b19a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b19c:	79fb      	ldrb	r3, [r7, #7]
 800b19e:	2b01      	cmp	r3, #1
 800b1a0:	d10d      	bne.n	800b1be <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d009      	beq.n	800b1be <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	68d9      	ldr	r1, [r3, #12]
 800b1ae:	69bb      	ldr	r3, [r7, #24]
 800b1b0:	015a      	lsls	r2, r3, #5
 800b1b2:	69fb      	ldr	r3, [r7, #28]
 800b1b4:	4413      	add	r3, r2
 800b1b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1ba:	460a      	mov	r2, r1
 800b1bc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	78db      	ldrb	r3, [r3, #3]
 800b1c2:	2b01      	cmp	r3, #1
 800b1c4:	d128      	bne.n	800b218 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b1c6:	69fb      	ldr	r3, [r7, #28]
 800b1c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d110      	bne.n	800b1f8 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b1d6:	69bb      	ldr	r3, [r7, #24]
 800b1d8:	015a      	lsls	r2, r3, #5
 800b1da:	69fb      	ldr	r3, [r7, #28]
 800b1dc:	4413      	add	r3, r2
 800b1de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	69ba      	ldr	r2, [r7, #24]
 800b1e6:	0151      	lsls	r1, r2, #5
 800b1e8:	69fa      	ldr	r2, [r7, #28]
 800b1ea:	440a      	add	r2, r1
 800b1ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b1f4:	6013      	str	r3, [r2, #0]
 800b1f6:	e00f      	b.n	800b218 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b1f8:	69bb      	ldr	r3, [r7, #24]
 800b1fa:	015a      	lsls	r2, r3, #5
 800b1fc:	69fb      	ldr	r3, [r7, #28]
 800b1fe:	4413      	add	r3, r2
 800b200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	69ba      	ldr	r2, [r7, #24]
 800b208:	0151      	lsls	r1, r2, #5
 800b20a:	69fa      	ldr	r2, [r7, #28]
 800b20c:	440a      	add	r2, r1
 800b20e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b216:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b218:	69bb      	ldr	r3, [r7, #24]
 800b21a:	015a      	lsls	r2, r3, #5
 800b21c:	69fb      	ldr	r3, [r7, #28]
 800b21e:	4413      	add	r3, r2
 800b220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	69ba      	ldr	r2, [r7, #24]
 800b228:	0151      	lsls	r1, r2, #5
 800b22a:	69fa      	ldr	r2, [r7, #28]
 800b22c:	440a      	add	r2, r1
 800b22e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b232:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b236:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b238:	2300      	movs	r3, #0
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3720      	adds	r7, #32
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	1ff80000 	.word	0x1ff80000

0800b248 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b248:	b480      	push	{r7}
 800b24a:	b087      	sub	sp, #28
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	60b9      	str	r1, [r7, #8]
 800b252:	4613      	mov	r3, r2
 800b254:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b25a:	68bb      	ldr	r3, [r7, #8]
 800b25c:	781b      	ldrb	r3, [r3, #0]
 800b25e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	785b      	ldrb	r3, [r3, #1]
 800b264:	2b01      	cmp	r3, #1
 800b266:	f040 80cd 	bne.w	800b404 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b26a:	68bb      	ldr	r3, [r7, #8]
 800b26c:	695b      	ldr	r3, [r3, #20]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d132      	bne.n	800b2d8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	015a      	lsls	r2, r3, #5
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	4413      	add	r3, r2
 800b27a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b27e:	691b      	ldr	r3, [r3, #16]
 800b280:	693a      	ldr	r2, [r7, #16]
 800b282:	0151      	lsls	r1, r2, #5
 800b284:	697a      	ldr	r2, [r7, #20]
 800b286:	440a      	add	r2, r1
 800b288:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b28c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b290:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b294:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	015a      	lsls	r2, r3, #5
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	4413      	add	r3, r2
 800b29e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2a2:	691b      	ldr	r3, [r3, #16]
 800b2a4:	693a      	ldr	r2, [r7, #16]
 800b2a6:	0151      	lsls	r1, r2, #5
 800b2a8:	697a      	ldr	r2, [r7, #20]
 800b2aa:	440a      	add	r2, r1
 800b2ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b2b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	015a      	lsls	r2, r3, #5
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	4413      	add	r3, r2
 800b2be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2c2:	691b      	ldr	r3, [r3, #16]
 800b2c4:	693a      	ldr	r2, [r7, #16]
 800b2c6:	0151      	lsls	r1, r2, #5
 800b2c8:	697a      	ldr	r2, [r7, #20]
 800b2ca:	440a      	add	r2, r1
 800b2cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2d0:	0cdb      	lsrs	r3, r3, #19
 800b2d2:	04db      	lsls	r3, r3, #19
 800b2d4:	6113      	str	r3, [r2, #16]
 800b2d6:	e04e      	b.n	800b376 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	015a      	lsls	r2, r3, #5
 800b2dc:	697b      	ldr	r3, [r7, #20]
 800b2de:	4413      	add	r3, r2
 800b2e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2e4:	691b      	ldr	r3, [r3, #16]
 800b2e6:	693a      	ldr	r2, [r7, #16]
 800b2e8:	0151      	lsls	r1, r2, #5
 800b2ea:	697a      	ldr	r2, [r7, #20]
 800b2ec:	440a      	add	r2, r1
 800b2ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2f2:	0cdb      	lsrs	r3, r3, #19
 800b2f4:	04db      	lsls	r3, r3, #19
 800b2f6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	015a      	lsls	r2, r3, #5
 800b2fc:	697b      	ldr	r3, [r7, #20]
 800b2fe:	4413      	add	r3, r2
 800b300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b304:	691b      	ldr	r3, [r3, #16]
 800b306:	693a      	ldr	r2, [r7, #16]
 800b308:	0151      	lsls	r1, r2, #5
 800b30a:	697a      	ldr	r2, [r7, #20]
 800b30c:	440a      	add	r2, r1
 800b30e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b312:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b316:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b31a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	695a      	ldr	r2, [r3, #20]
 800b320:	68bb      	ldr	r3, [r7, #8]
 800b322:	689b      	ldr	r3, [r3, #8]
 800b324:	429a      	cmp	r2, r3
 800b326:	d903      	bls.n	800b330 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	689a      	ldr	r2, [r3, #8]
 800b32c:	68bb      	ldr	r3, [r7, #8]
 800b32e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b330:	693b      	ldr	r3, [r7, #16]
 800b332:	015a      	lsls	r2, r3, #5
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	4413      	add	r3, r2
 800b338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b33c:	691b      	ldr	r3, [r3, #16]
 800b33e:	693a      	ldr	r2, [r7, #16]
 800b340:	0151      	lsls	r1, r2, #5
 800b342:	697a      	ldr	r2, [r7, #20]
 800b344:	440a      	add	r2, r1
 800b346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b34a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b34e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	015a      	lsls	r2, r3, #5
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	4413      	add	r3, r2
 800b358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b35c:	691a      	ldr	r2, [r3, #16]
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	695b      	ldr	r3, [r3, #20]
 800b362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b366:	6939      	ldr	r1, [r7, #16]
 800b368:	0148      	lsls	r0, r1, #5
 800b36a:	6979      	ldr	r1, [r7, #20]
 800b36c:	4401      	add	r1, r0
 800b36e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b372:	4313      	orrs	r3, r2
 800b374:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b376:	79fb      	ldrb	r3, [r7, #7]
 800b378:	2b01      	cmp	r3, #1
 800b37a:	d11e      	bne.n	800b3ba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	691b      	ldr	r3, [r3, #16]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d009      	beq.n	800b398 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	015a      	lsls	r2, r3, #5
 800b388:	697b      	ldr	r3, [r7, #20]
 800b38a:	4413      	add	r3, r2
 800b38c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b390:	461a      	mov	r2, r3
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	691b      	ldr	r3, [r3, #16]
 800b396:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	015a      	lsls	r2, r3, #5
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	4413      	add	r3, r2
 800b3a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	693a      	ldr	r2, [r7, #16]
 800b3a8:	0151      	lsls	r1, r2, #5
 800b3aa:	697a      	ldr	r2, [r7, #20]
 800b3ac:	440a      	add	r2, r1
 800b3ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b3b6:	6013      	str	r3, [r2, #0]
 800b3b8:	e092      	b.n	800b4e0 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	015a      	lsls	r2, r3, #5
 800b3be:	697b      	ldr	r3, [r7, #20]
 800b3c0:	4413      	add	r3, r2
 800b3c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	693a      	ldr	r2, [r7, #16]
 800b3ca:	0151      	lsls	r1, r2, #5
 800b3cc:	697a      	ldr	r2, [r7, #20]
 800b3ce:	440a      	add	r2, r1
 800b3d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b3d8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	695b      	ldr	r3, [r3, #20]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d07e      	beq.n	800b4e0 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b3e2:	697b      	ldr	r3, [r7, #20]
 800b3e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	f003 030f 	and.w	r3, r3, #15
 800b3f2:	2101      	movs	r1, #1
 800b3f4:	fa01 f303 	lsl.w	r3, r1, r3
 800b3f8:	6979      	ldr	r1, [r7, #20]
 800b3fa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b3fe:	4313      	orrs	r3, r2
 800b400:	634b      	str	r3, [r1, #52]	; 0x34
 800b402:	e06d      	b.n	800b4e0 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	015a      	lsls	r2, r3, #5
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	4413      	add	r3, r2
 800b40c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b410:	691b      	ldr	r3, [r3, #16]
 800b412:	693a      	ldr	r2, [r7, #16]
 800b414:	0151      	lsls	r1, r2, #5
 800b416:	697a      	ldr	r2, [r7, #20]
 800b418:	440a      	add	r2, r1
 800b41a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b41e:	0cdb      	lsrs	r3, r3, #19
 800b420:	04db      	lsls	r3, r3, #19
 800b422:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	015a      	lsls	r2, r3, #5
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	4413      	add	r3, r2
 800b42c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b430:	691b      	ldr	r3, [r3, #16]
 800b432:	693a      	ldr	r2, [r7, #16]
 800b434:	0151      	lsls	r1, r2, #5
 800b436:	697a      	ldr	r2, [r7, #20]
 800b438:	440a      	add	r2, r1
 800b43a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b43e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b442:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b446:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	695b      	ldr	r3, [r3, #20]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d003      	beq.n	800b458 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	689a      	ldr	r2, [r3, #8]
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	015a      	lsls	r2, r3, #5
 800b45c:	697b      	ldr	r3, [r7, #20]
 800b45e:	4413      	add	r3, r2
 800b460:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b464:	691b      	ldr	r3, [r3, #16]
 800b466:	693a      	ldr	r2, [r7, #16]
 800b468:	0151      	lsls	r1, r2, #5
 800b46a:	697a      	ldr	r2, [r7, #20]
 800b46c:	440a      	add	r2, r1
 800b46e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b472:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b476:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	015a      	lsls	r2, r3, #5
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	4413      	add	r3, r2
 800b480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b484:	691a      	ldr	r2, [r3, #16]
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	689b      	ldr	r3, [r3, #8]
 800b48a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b48e:	6939      	ldr	r1, [r7, #16]
 800b490:	0148      	lsls	r0, r1, #5
 800b492:	6979      	ldr	r1, [r7, #20]
 800b494:	4401      	add	r1, r0
 800b496:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b49a:	4313      	orrs	r3, r2
 800b49c:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b49e:	79fb      	ldrb	r3, [r7, #7]
 800b4a0:	2b01      	cmp	r3, #1
 800b4a2:	d10d      	bne.n	800b4c0 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b4a4:	68bb      	ldr	r3, [r7, #8]
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d009      	beq.n	800b4c0 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	68d9      	ldr	r1, [r3, #12]
 800b4b0:	693b      	ldr	r3, [r7, #16]
 800b4b2:	015a      	lsls	r2, r3, #5
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	4413      	add	r3, r2
 800b4b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4bc:	460a      	mov	r2, r1
 800b4be:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	015a      	lsls	r2, r3, #5
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	4413      	add	r3, r2
 800b4c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	693a      	ldr	r2, [r7, #16]
 800b4d0:	0151      	lsls	r1, r2, #5
 800b4d2:	697a      	ldr	r2, [r7, #20]
 800b4d4:	440a      	add	r2, r1
 800b4d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4da:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b4de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	371c      	adds	r7, #28
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ec:	4770      	bx	lr

0800b4ee <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b4ee:	b480      	push	{r7}
 800b4f0:	b089      	sub	sp, #36	; 0x24
 800b4f2:	af00      	add	r7, sp, #0
 800b4f4:	60f8      	str	r0, [r7, #12]
 800b4f6:	60b9      	str	r1, [r7, #8]
 800b4f8:	4611      	mov	r1, r2
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	460b      	mov	r3, r1
 800b4fe:	71fb      	strb	r3, [r7, #7]
 800b500:	4613      	mov	r3, r2
 800b502:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b50c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b510:	2b00      	cmp	r3, #0
 800b512:	d123      	bne.n	800b55c <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b514:	88bb      	ldrh	r3, [r7, #4]
 800b516:	3303      	adds	r3, #3
 800b518:	089b      	lsrs	r3, r3, #2
 800b51a:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b51c:	2300      	movs	r3, #0
 800b51e:	61bb      	str	r3, [r7, #24]
 800b520:	e018      	b.n	800b554 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b522:	79fb      	ldrb	r3, [r7, #7]
 800b524:	031a      	lsls	r2, r3, #12
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	4413      	add	r3, r2
 800b52a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b52e:	461a      	mov	r2, r3
 800b530:	69fb      	ldr	r3, [r7, #28]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	3301      	adds	r3, #1
 800b53a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b53c:	69fb      	ldr	r3, [r7, #28]
 800b53e:	3301      	adds	r3, #1
 800b540:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b542:	69fb      	ldr	r3, [r7, #28]
 800b544:	3301      	adds	r3, #1
 800b546:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b548:	69fb      	ldr	r3, [r7, #28]
 800b54a:	3301      	adds	r3, #1
 800b54c:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	3301      	adds	r3, #1
 800b552:	61bb      	str	r3, [r7, #24]
 800b554:	69ba      	ldr	r2, [r7, #24]
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	429a      	cmp	r2, r3
 800b55a:	d3e2      	bcc.n	800b522 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	3724      	adds	r7, #36	; 0x24
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr

0800b56a <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b56a:	b480      	push	{r7}
 800b56c:	b08b      	sub	sp, #44	; 0x2c
 800b56e:	af00      	add	r7, sp, #0
 800b570:	60f8      	str	r0, [r7, #12]
 800b572:	60b9      	str	r1, [r7, #8]
 800b574:	4613      	mov	r3, r2
 800b576:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b580:	88fb      	ldrh	r3, [r7, #6]
 800b582:	089b      	lsrs	r3, r3, #2
 800b584:	b29b      	uxth	r3, r3
 800b586:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b588:	88fb      	ldrh	r3, [r7, #6]
 800b58a:	f003 0303 	and.w	r3, r3, #3
 800b58e:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b590:	2300      	movs	r3, #0
 800b592:	623b      	str	r3, [r7, #32]
 800b594:	e014      	b.n	800b5c0 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b596:	69bb      	ldr	r3, [r7, #24]
 800b598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b59c:	681a      	ldr	r2, [r3, #0]
 800b59e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a0:	601a      	str	r2, [r3, #0]
    pDest++;
 800b5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b5ba:	6a3b      	ldr	r3, [r7, #32]
 800b5bc:	3301      	adds	r3, #1
 800b5be:	623b      	str	r3, [r7, #32]
 800b5c0:	6a3a      	ldr	r2, [r7, #32]
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	429a      	cmp	r2, r3
 800b5c6:	d3e6      	bcc.n	800b596 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b5c8:	8bfb      	ldrh	r3, [r7, #30]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d01e      	beq.n	800b60c <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b5d2:	69bb      	ldr	r3, [r7, #24]
 800b5d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b5d8:	461a      	mov	r2, r3
 800b5da:	f107 0310 	add.w	r3, r7, #16
 800b5de:	6812      	ldr	r2, [r2, #0]
 800b5e0:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b5e2:	693a      	ldr	r2, [r7, #16]
 800b5e4:	6a3b      	ldr	r3, [r7, #32]
 800b5e6:	b2db      	uxtb	r3, r3
 800b5e8:	00db      	lsls	r3, r3, #3
 800b5ea:	fa22 f303 	lsr.w	r3, r2, r3
 800b5ee:	b2da      	uxtb	r2, r3
 800b5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f2:	701a      	strb	r2, [r3, #0]
      i++;
 800b5f4:	6a3b      	ldr	r3, [r7, #32]
 800b5f6:	3301      	adds	r3, #1
 800b5f8:	623b      	str	r3, [r7, #32]
      pDest++;
 800b5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5fc:	3301      	adds	r3, #1
 800b5fe:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b600:	8bfb      	ldrh	r3, [r7, #30]
 800b602:	3b01      	subs	r3, #1
 800b604:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b606:	8bfb      	ldrh	r3, [r7, #30]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d1ea      	bne.n	800b5e2 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b60e:	4618      	mov	r0, r3
 800b610:	372c      	adds	r7, #44	; 0x2c
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr

0800b61a <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b61a:	b480      	push	{r7}
 800b61c:	b085      	sub	sp, #20
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
 800b622:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b628:	683b      	ldr	r3, [r7, #0]
 800b62a:	781b      	ldrb	r3, [r3, #0]
 800b62c:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	785b      	ldrb	r3, [r3, #1]
 800b632:	2b01      	cmp	r3, #1
 800b634:	d12c      	bne.n	800b690 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	015a      	lsls	r2, r3, #5
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	4413      	add	r3, r2
 800b63e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b642:	681b      	ldr	r3, [r3, #0]
 800b644:	2b00      	cmp	r3, #0
 800b646:	db12      	blt.n	800b66e <USB_EPSetStall+0x54>
 800b648:	68bb      	ldr	r3, [r7, #8]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00f      	beq.n	800b66e <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	015a      	lsls	r2, r3, #5
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	4413      	add	r3, r2
 800b656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	68ba      	ldr	r2, [r7, #8]
 800b65e:	0151      	lsls	r1, r2, #5
 800b660:	68fa      	ldr	r2, [r7, #12]
 800b662:	440a      	add	r2, r1
 800b664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b668:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b66c:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b66e:	68bb      	ldr	r3, [r7, #8]
 800b670:	015a      	lsls	r2, r3, #5
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	4413      	add	r3, r2
 800b676:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	68ba      	ldr	r2, [r7, #8]
 800b67e:	0151      	lsls	r1, r2, #5
 800b680:	68fa      	ldr	r2, [r7, #12]
 800b682:	440a      	add	r2, r1
 800b684:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b688:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b68c:	6013      	str	r3, [r2, #0]
 800b68e:	e02b      	b.n	800b6e8 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	015a      	lsls	r2, r3, #5
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	4413      	add	r3, r2
 800b698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	db12      	blt.n	800b6c8 <USB_EPSetStall+0xae>
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d00f      	beq.n	800b6c8 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	015a      	lsls	r2, r3, #5
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	4413      	add	r3, r2
 800b6b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	68ba      	ldr	r2, [r7, #8]
 800b6b8:	0151      	lsls	r1, r2, #5
 800b6ba:	68fa      	ldr	r2, [r7, #12]
 800b6bc:	440a      	add	r2, r1
 800b6be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b6c6:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b6c8:	68bb      	ldr	r3, [r7, #8]
 800b6ca:	015a      	lsls	r2, r3, #5
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	4413      	add	r3, r2
 800b6d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	68ba      	ldr	r2, [r7, #8]
 800b6d8:	0151      	lsls	r1, r2, #5
 800b6da:	68fa      	ldr	r2, [r7, #12]
 800b6dc:	440a      	add	r2, r1
 800b6de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b6e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b6e8:	2300      	movs	r3, #0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3714      	adds	r7, #20
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr

0800b6f6 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b6f6:	b480      	push	{r7}
 800b6f8:	b085      	sub	sp, #20
 800b6fa:	af00      	add	r7, sp, #0
 800b6fc:	6078      	str	r0, [r7, #4]
 800b6fe:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	781b      	ldrb	r3, [r3, #0]
 800b708:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b70a:	683b      	ldr	r3, [r7, #0]
 800b70c:	785b      	ldrb	r3, [r3, #1]
 800b70e:	2b01      	cmp	r3, #1
 800b710:	d128      	bne.n	800b764 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	015a      	lsls	r2, r3, #5
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	4413      	add	r3, r2
 800b71a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	68ba      	ldr	r2, [r7, #8]
 800b722:	0151      	lsls	r1, r2, #5
 800b724:	68fa      	ldr	r2, [r7, #12]
 800b726:	440a      	add	r2, r1
 800b728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b72c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b730:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b732:	683b      	ldr	r3, [r7, #0]
 800b734:	78db      	ldrb	r3, [r3, #3]
 800b736:	2b03      	cmp	r3, #3
 800b738:	d003      	beq.n	800b742 <USB_EPClearStall+0x4c>
 800b73a:	683b      	ldr	r3, [r7, #0]
 800b73c:	78db      	ldrb	r3, [r3, #3]
 800b73e:	2b02      	cmp	r3, #2
 800b740:	d138      	bne.n	800b7b4 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	015a      	lsls	r2, r3, #5
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	4413      	add	r3, r2
 800b74a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	68ba      	ldr	r2, [r7, #8]
 800b752:	0151      	lsls	r1, r2, #5
 800b754:	68fa      	ldr	r2, [r7, #12]
 800b756:	440a      	add	r2, r1
 800b758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b75c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b760:	6013      	str	r3, [r2, #0]
 800b762:	e027      	b.n	800b7b4 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b764:	68bb      	ldr	r3, [r7, #8]
 800b766:	015a      	lsls	r2, r3, #5
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	4413      	add	r3, r2
 800b76c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	68ba      	ldr	r2, [r7, #8]
 800b774:	0151      	lsls	r1, r2, #5
 800b776:	68fa      	ldr	r2, [r7, #12]
 800b778:	440a      	add	r2, r1
 800b77a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b77e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b782:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b784:	683b      	ldr	r3, [r7, #0]
 800b786:	78db      	ldrb	r3, [r3, #3]
 800b788:	2b03      	cmp	r3, #3
 800b78a:	d003      	beq.n	800b794 <USB_EPClearStall+0x9e>
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	78db      	ldrb	r3, [r3, #3]
 800b790:	2b02      	cmp	r3, #2
 800b792:	d10f      	bne.n	800b7b4 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b794:	68bb      	ldr	r3, [r7, #8]
 800b796:	015a      	lsls	r2, r3, #5
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	4413      	add	r3, r2
 800b79c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	68ba      	ldr	r2, [r7, #8]
 800b7a4:	0151      	lsls	r1, r2, #5
 800b7a6:	68fa      	ldr	r2, [r7, #12]
 800b7a8:	440a      	add	r2, r1
 800b7aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7b2:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b7b4:	2300      	movs	r3, #0
}
 800b7b6:	4618      	mov	r0, r3
 800b7b8:	3714      	adds	r7, #20
 800b7ba:	46bd      	mov	sp, r7
 800b7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c0:	4770      	bx	lr

0800b7c2 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b7c2:	b480      	push	{r7}
 800b7c4:	b085      	sub	sp, #20
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
 800b7ca:	460b      	mov	r3, r1
 800b7cc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	68fa      	ldr	r2, [r7, #12]
 800b7dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b7e0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b7e4:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b7e6:	68fb      	ldr	r3, [r7, #12]
 800b7e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	78fb      	ldrb	r3, [r7, #3]
 800b7f0:	011b      	lsls	r3, r3, #4
 800b7f2:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b7f6:	68f9      	ldr	r1, [r7, #12]
 800b7f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b800:	2300      	movs	r3, #0
}
 800b802:	4618      	mov	r0, r3
 800b804:	3714      	adds	r7, #20
 800b806:	46bd      	mov	sp, r7
 800b808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80c:	4770      	bx	lr

0800b80e <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b80e:	b480      	push	{r7}
 800b810:	b085      	sub	sp, #20
 800b812:	af00      	add	r7, sp, #0
 800b814:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	68fa      	ldr	r2, [r7, #12]
 800b824:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b828:	f023 0303 	bic.w	r3, r3, #3
 800b82c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b83c:	f023 0302 	bic.w	r3, r3, #2
 800b840:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b842:	2300      	movs	r3, #0
}
 800b844:	4618      	mov	r0, r3
 800b846:	3714      	adds	r7, #20
 800b848:	46bd      	mov	sp, r7
 800b84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84e:	4770      	bx	lr

0800b850 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b850:	b480      	push	{r7}
 800b852:	b085      	sub	sp, #20
 800b854:	af00      	add	r7, sp, #0
 800b856:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	68fa      	ldr	r2, [r7, #12]
 800b866:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b86a:	f023 0303 	bic.w	r3, r3, #3
 800b86e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b876:	685b      	ldr	r3, [r3, #4]
 800b878:	68fa      	ldr	r2, [r7, #12]
 800b87a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b87e:	f043 0302 	orr.w	r3, r3, #2
 800b882:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b884:	2300      	movs	r3, #0
}
 800b886:	4618      	mov	r0, r3
 800b888:	3714      	adds	r7, #20
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr

0800b892 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b892:	b480      	push	{r7}
 800b894:	b085      	sub	sp, #20
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	695b      	ldr	r3, [r3, #20]
 800b89e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	699b      	ldr	r3, [r3, #24]
 800b8a4:	68fa      	ldr	r2, [r7, #12]
 800b8a6:	4013      	ands	r3, r2
 800b8a8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
}
 800b8ac:	4618      	mov	r0, r3
 800b8ae:	3714      	adds	r7, #20
 800b8b0:	46bd      	mov	sp, r7
 800b8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8b6:	4770      	bx	lr

0800b8b8 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	b085      	sub	sp, #20
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8ca:	699b      	ldr	r3, [r3, #24]
 800b8cc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8d4:	69db      	ldr	r3, [r3, #28]
 800b8d6:	68ba      	ldr	r2, [r7, #8]
 800b8d8:	4013      	ands	r3, r2
 800b8da:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	0c1b      	lsrs	r3, r3, #16
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3714      	adds	r7, #20
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ea:	4770      	bx	lr

0800b8ec <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b8ec:	b480      	push	{r7}
 800b8ee:	b085      	sub	sp, #20
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8fe:	699b      	ldr	r3, [r3, #24]
 800b900:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b908:	69db      	ldr	r3, [r3, #28]
 800b90a:	68ba      	ldr	r2, [r7, #8]
 800b90c:	4013      	ands	r3, r2
 800b90e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	b29b      	uxth	r3, r3
}
 800b914:	4618      	mov	r0, r3
 800b916:	3714      	adds	r7, #20
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr

0800b920 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b920:	b480      	push	{r7}
 800b922:	b085      	sub	sp, #20
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
 800b928:	460b      	mov	r3, r1
 800b92a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b930:	78fb      	ldrb	r3, [r7, #3]
 800b932:	015a      	lsls	r2, r3, #5
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	4413      	add	r3, r2
 800b938:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b93c:	689b      	ldr	r3, [r3, #8]
 800b93e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b946:	695b      	ldr	r3, [r3, #20]
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	4013      	ands	r3, r2
 800b94c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b94e:	68bb      	ldr	r3, [r7, #8]
}
 800b950:	4618      	mov	r0, r3
 800b952:	3714      	adds	r7, #20
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b087      	sub	sp, #28
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	460b      	mov	r3, r1
 800b966:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b96c:	697b      	ldr	r3, [r7, #20]
 800b96e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b972:	691b      	ldr	r3, [r3, #16]
 800b974:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b97c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b97e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b980:	78fb      	ldrb	r3, [r7, #3]
 800b982:	f003 030f 	and.w	r3, r3, #15
 800b986:	68fa      	ldr	r2, [r7, #12]
 800b988:	fa22 f303 	lsr.w	r3, r2, r3
 800b98c:	01db      	lsls	r3, r3, #7
 800b98e:	b2db      	uxtb	r3, r3
 800b990:	693a      	ldr	r2, [r7, #16]
 800b992:	4313      	orrs	r3, r2
 800b994:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b996:	78fb      	ldrb	r3, [r7, #3]
 800b998:	015a      	lsls	r2, r3, #5
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	4413      	add	r3, r2
 800b99e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	693a      	ldr	r2, [r7, #16]
 800b9a6:	4013      	ands	r3, r2
 800b9a8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b9aa:	68bb      	ldr	r3, [r7, #8]
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	371c      	adds	r7, #28
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b6:	4770      	bx	lr

0800b9b8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b9b8:	b480      	push	{r7}
 800b9ba:	b083      	sub	sp, #12
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	695b      	ldr	r3, [r3, #20]
 800b9c4:	f003 0301 	and.w	r3, r3, #1
}
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	370c      	adds	r7, #12
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b9d4:	b480      	push	{r7}
 800b9d6:	b085      	sub	sp, #20
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	68fa      	ldr	r2, [r7, #12]
 800b9ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b9f2:	f023 0307 	bic.w	r3, r3, #7
 800b9f6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	68fa      	ldr	r2, [r7, #12]
 800ba02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba0a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ba0c:	2300      	movs	r3, #0
}
 800ba0e:	4618      	mov	r0, r3
 800ba10:	3714      	adds	r7, #20
 800ba12:	46bd      	mov	sp, r7
 800ba14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba18:	4770      	bx	lr
	...

0800ba1c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b087      	sub	sp, #28
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	60f8      	str	r0, [r7, #12]
 800ba24:	460b      	mov	r3, r1
 800ba26:	607a      	str	r2, [r7, #4]
 800ba28:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba2a:	68fb      	ldr	r3, [r7, #12]
 800ba2c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	333c      	adds	r3, #60	; 0x3c
 800ba32:	3304      	adds	r3, #4
 800ba34:	681b      	ldr	r3, [r3, #0]
 800ba36:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800ba38:	693b      	ldr	r3, [r7, #16]
 800ba3a:	4a26      	ldr	r2, [pc, #152]	; (800bad4 <USB_EP0_OutStart+0xb8>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d90a      	bls.n	800ba56 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba50:	d101      	bne.n	800ba56 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800ba52:	2300      	movs	r3, #0
 800ba54:	e037      	b.n	800bac6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	2300      	movs	r3, #0
 800ba60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba68:	691b      	ldr	r3, [r3, #16]
 800ba6a:	697a      	ldr	r2, [r7, #20]
 800ba6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba7c:	691b      	ldr	r3, [r3, #16]
 800ba7e:	697a      	ldr	r2, [r7, #20]
 800ba80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba84:	f043 0318 	orr.w	r3, r3, #24
 800ba88:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba90:	691b      	ldr	r3, [r3, #16]
 800ba92:	697a      	ldr	r2, [r7, #20]
 800ba94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba98:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ba9c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ba9e:	7afb      	ldrb	r3, [r7, #11]
 800baa0:	2b01      	cmp	r3, #1
 800baa2:	d10f      	bne.n	800bac4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baaa:	461a      	mov	r2, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	697a      	ldr	r2, [r7, #20]
 800baba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800babe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bac2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bac4:	2300      	movs	r3, #0
}
 800bac6:	4618      	mov	r0, r3
 800bac8:	371c      	adds	r7, #28
 800baca:	46bd      	mov	sp, r7
 800bacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad0:	4770      	bx	lr
 800bad2:	bf00      	nop
 800bad4:	4f54300a 	.word	0x4f54300a

0800bad8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bad8:	b480      	push	{r7}
 800bada:	b085      	sub	sp, #20
 800badc:	af00      	add	r7, sp, #0
 800bade:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bae0:	2300      	movs	r3, #0
 800bae2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	3301      	adds	r3, #1
 800bae8:	60fb      	str	r3, [r7, #12]
 800baea:	4a13      	ldr	r2, [pc, #76]	; (800bb38 <USB_CoreReset+0x60>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d901      	bls.n	800baf4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800baf0:	2303      	movs	r3, #3
 800baf2:	e01a      	b.n	800bb2a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	691b      	ldr	r3, [r3, #16]
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	daf3      	bge.n	800bae4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bafc:	2300      	movs	r3, #0
 800bafe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	691b      	ldr	r3, [r3, #16]
 800bb04:	f043 0201 	orr.w	r2, r3, #1
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	3301      	adds	r3, #1
 800bb10:	60fb      	str	r3, [r7, #12]
 800bb12:	4a09      	ldr	r2, [pc, #36]	; (800bb38 <USB_CoreReset+0x60>)
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d901      	bls.n	800bb1c <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800bb18:	2303      	movs	r3, #3
 800bb1a:	e006      	b.n	800bb2a <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	691b      	ldr	r3, [r3, #16]
 800bb20:	f003 0301 	and.w	r3, r3, #1
 800bb24:	2b01      	cmp	r3, #1
 800bb26:	d0f1      	beq.n	800bb0c <USB_CoreReset+0x34>

  return HAL_OK;
 800bb28:	2300      	movs	r3, #0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3714      	adds	r7, #20
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr
 800bb36:	bf00      	nop
 800bb38:	00030d40 	.word	0x00030d40

0800bb3c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800bb40:	4904      	ldr	r1, [pc, #16]	; (800bb54 <MX_FATFS_Init+0x18>)
 800bb42:	4805      	ldr	r0, [pc, #20]	; (800bb58 <MX_FATFS_Init+0x1c>)
 800bb44:	f004 ff38 	bl	80109b8 <FATFS_LinkDriver>
 800bb48:	4603      	mov	r3, r0
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	4b03      	ldr	r3, [pc, #12]	; (800bb5c <MX_FATFS_Init+0x20>)
 800bb4e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bb50:	bf00      	nop
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	20011260 	.word	0x20011260
 800bb58:	20000010 	.word	0x20000010
 800bb5c:	20011264 	.word	0x20011264

0800bb60 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bb60:	b480      	push	{r7}
 800bb62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bb64:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6e:	4770      	bx	lr

0800bb70 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b082      	sub	sp, #8
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	4603      	mov	r3, r0
 800bb78:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize (pdrv);
 800bb7a:	79fb      	ldrb	r3, [r7, #7]
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	f7f6 ff97 	bl	8002ab0 <SD_disk_initialize>
 800bb82:	4603      	mov	r3, r0
 800bb84:	b2db      	uxtb	r3, r3

  /* USER CODE END INIT */
}
 800bb86:	4618      	mov	r0, r3
 800bb88:	3708      	adds	r7, #8
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}

0800bb8e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800bb8e:	b580      	push	{r7, lr}
 800bb90:	b082      	sub	sp, #8
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	4603      	mov	r3, r0
 800bb96:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status (pdrv);
 800bb98:	79fb      	ldrb	r3, [r7, #7]
 800bb9a:	4618      	mov	r0, r3
 800bb9c:	f7f7 f872 	bl	8002c84 <SD_disk_status>
 800bba0:	4603      	mov	r3, r0
 800bba2:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3708      	adds	r7, #8
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}

0800bbac <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	b084      	sub	sp, #16
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60b9      	str	r1, [r7, #8]
 800bbb4:	607a      	str	r2, [r7, #4]
 800bbb6:	603b      	str	r3, [r7, #0]
 800bbb8:	4603      	mov	r3, r0
 800bbba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800bbbc:	7bf8      	ldrb	r0, [r7, #15]
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	687a      	ldr	r2, [r7, #4]
 800bbc2:	68b9      	ldr	r1, [r7, #8]
 800bbc4:	f7f7 f874 	bl	8002cb0 <SD_disk_read>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	b2db      	uxtb	r3, r3
   // return RES_OK;
  /* USER CODE END READ */
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3710      	adds	r7, #16
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b084      	sub	sp, #16
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60b9      	str	r1, [r7, #8]
 800bbdc:	607a      	str	r2, [r7, #4]
 800bbde:	603b      	str	r3, [r7, #0]
 800bbe0:	4603      	mov	r3, r0
 800bbe2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
   // return RES_OK;
	return SD_disk_write (pdrv, buff, sector, count);
 800bbe4:	7bf8      	ldrb	r0, [r7, #15]
 800bbe6:	683b      	ldr	r3, [r7, #0]
 800bbe8:	687a      	ldr	r2, [r7, #4]
 800bbea:	68b9      	ldr	r1, [r7, #8]
 800bbec:	f7f7 f8ca 	bl	8002d84 <SD_disk_write>
 800bbf0:	4603      	mov	r3, r0
 800bbf2:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800bbf4:	4618      	mov	r0, r3
 800bbf6:	3710      	adds	r7, #16
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}

0800bbfc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	b082      	sub	sp, #8
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	4603      	mov	r3, r0
 800bc04:	603a      	str	r2, [r7, #0]
 800bc06:	71fb      	strb	r3, [r7, #7]
 800bc08:	460b      	mov	r3, r1
 800bc0a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl (pdrv,cmd, buff);
 800bc0c:	79fb      	ldrb	r3, [r7, #7]
 800bc0e:	79b9      	ldrb	r1, [r7, #6]
 800bc10:	683a      	ldr	r2, [r7, #0]
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7f7 f93a 	bl	8002e8c <SD_disk_ioctl>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3708      	adds	r7, #8
 800bc20:	46bd      	mov	sp, r7
 800bc22:	bd80      	pop	{r7, pc}

0800bc24 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bc24:	b580      	push	{r7, lr}
 800bc26:	b084      	sub	sp, #16
 800bc28:	af00      	add	r7, sp, #0
 800bc2a:	6078      	str	r0, [r7, #4]
 800bc2c:	460b      	mov	r3, r1
 800bc2e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bc30:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bc34:	f009 fc52 	bl	80154dc <USBD_static_malloc>
 800bc38:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bc3a:	68fb      	ldr	r3, [r7, #12]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d105      	bne.n	800bc4c <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2200      	movs	r2, #0
 800bc44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800bc48:	2302      	movs	r3, #2
 800bc4a:	e066      	b.n	800bd1a <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	68fa      	ldr	r2, [r7, #12]
 800bc50:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	7c1b      	ldrb	r3, [r3, #16]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d119      	bne.n	800bc90 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bc5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc60:	2202      	movs	r2, #2
 800bc62:	2181      	movs	r1, #129	; 0x81
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f009 fb16 	bl	8015296 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2201      	movs	r2, #1
 800bc6e:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bc70:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bc74:	2202      	movs	r2, #2
 800bc76:	2101      	movs	r1, #1
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f009 fb0c 	bl	8015296 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	2201      	movs	r2, #1
 800bc82:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	2210      	movs	r2, #16
 800bc8a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800bc8e:	e016      	b.n	800bcbe <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800bc90:	2340      	movs	r3, #64	; 0x40
 800bc92:	2202      	movs	r2, #2
 800bc94:	2181      	movs	r1, #129	; 0x81
 800bc96:	6878      	ldr	r0, [r7, #4]
 800bc98:	f009 fafd 	bl	8015296 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2201      	movs	r2, #1
 800bca0:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800bca2:	2340      	movs	r3, #64	; 0x40
 800bca4:	2202      	movs	r2, #2
 800bca6:	2101      	movs	r1, #1
 800bca8:	6878      	ldr	r0, [r7, #4]
 800bcaa:	f009 faf4 	bl	8015296 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	2210      	movs	r2, #16
 800bcba:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bcbe:	2308      	movs	r3, #8
 800bcc0:	2203      	movs	r2, #3
 800bcc2:	2182      	movs	r1, #130	; 0x82
 800bcc4:	6878      	ldr	r0, [r7, #4]
 800bcc6:	f009 fae6 	bl	8015296 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	2201      	movs	r2, #1
 800bcce:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2200      	movs	r2, #0
 800bce0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	2200      	movs	r2, #0
 800bce8:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	7c1b      	ldrb	r3, [r3, #16]
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d109      	bne.n	800bd08 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bcfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bcfe:	2101      	movs	r1, #1
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f009 fbb7 	bl	8015474 <USBD_LL_PrepareReceive>
 800bd06:	e007      	b.n	800bd18 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bd0e:	2340      	movs	r3, #64	; 0x40
 800bd10:	2101      	movs	r1, #1
 800bd12:	6878      	ldr	r0, [r7, #4]
 800bd14:	f009 fbae 	bl	8015474 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bd18:	2300      	movs	r3, #0
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3710      	adds	r7, #16
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}

0800bd22 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd22:	b580      	push	{r7, lr}
 800bd24:	b082      	sub	sp, #8
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
 800bd2a:	460b      	mov	r3, r1
 800bd2c:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800bd2e:	2181      	movs	r1, #129	; 0x81
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f009 fad6 	bl	80152e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	2200      	movs	r2, #0
 800bd3a:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800bd3c:	2101      	movs	r1, #1
 800bd3e:	6878      	ldr	r0, [r7, #4]
 800bd40:	f009 facf 	bl	80152e2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2200      	movs	r2, #0
 800bd48:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800bd4c:	2182      	movs	r1, #130	; 0x82
 800bd4e:	6878      	ldr	r0, [r7, #4]
 800bd50:	f009 fac7 	bl	80152e2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d00e      	beq.n	800bd8c <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bd74:	685b      	ldr	r3, [r3, #4]
 800bd76:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f009 fbba 	bl	80154f8 <USBD_static_free>
    pdev->pClassData = NULL;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	2200      	movs	r2, #0
 800bd88:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bd8c:	2300      	movs	r3, #0
}
 800bd8e:	4618      	mov	r0, r3
 800bd90:	3708      	adds	r7, #8
 800bd92:	46bd      	mov	sp, r7
 800bd94:	bd80      	pop	{r7, pc}
	...

0800bd98 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b086      	sub	sp, #24
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
 800bda0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bda8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bdb6:	693b      	ldr	r3, [r7, #16]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d101      	bne.n	800bdc0 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800bdbc:	2303      	movs	r3, #3
 800bdbe:	e0af      	b.n	800bf20 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bdc0:	683b      	ldr	r3, [r7, #0]
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d03f      	beq.n	800be4c <USBD_CDC_Setup+0xb4>
 800bdcc:	2b20      	cmp	r3, #32
 800bdce:	f040 809f 	bne.w	800bf10 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	88db      	ldrh	r3, [r3, #6]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d02e      	beq.n	800be38 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bdda:	683b      	ldr	r3, [r7, #0]
 800bddc:	781b      	ldrb	r3, [r3, #0]
 800bdde:	b25b      	sxtb	r3, r3
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	da16      	bge.n	800be12 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bdea:	689b      	ldr	r3, [r3, #8]
 800bdec:	683a      	ldr	r2, [r7, #0]
 800bdee:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800bdf0:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800bdf2:	683a      	ldr	r2, [r7, #0]
 800bdf4:	88d2      	ldrh	r2, [r2, #6]
 800bdf6:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	88db      	ldrh	r3, [r3, #6]
 800bdfc:	2b07      	cmp	r3, #7
 800bdfe:	bf28      	it	cs
 800be00:	2307      	movcs	r3, #7
 800be02:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	89fa      	ldrh	r2, [r7, #14]
 800be08:	4619      	mov	r1, r3
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f001 fb19 	bl	800d442 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800be10:	e085      	b.n	800bf1e <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800be12:	683b      	ldr	r3, [r7, #0]
 800be14:	785a      	ldrb	r2, [r3, #1]
 800be16:	693b      	ldr	r3, [r7, #16]
 800be18:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	88db      	ldrh	r3, [r3, #6]
 800be20:	b2da      	uxtb	r2, r3
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800be28:	6939      	ldr	r1, [r7, #16]
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	88db      	ldrh	r3, [r3, #6]
 800be2e:	461a      	mov	r2, r3
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f001 fb32 	bl	800d49a <USBD_CtlPrepareRx>
      break;
 800be36:	e072      	b.n	800bf1e <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800be3e:	689b      	ldr	r3, [r3, #8]
 800be40:	683a      	ldr	r2, [r7, #0]
 800be42:	7850      	ldrb	r0, [r2, #1]
 800be44:	2200      	movs	r2, #0
 800be46:	6839      	ldr	r1, [r7, #0]
 800be48:	4798      	blx	r3
      break;
 800be4a:	e068      	b.n	800bf1e <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	785b      	ldrb	r3, [r3, #1]
 800be50:	2b0b      	cmp	r3, #11
 800be52:	d852      	bhi.n	800befa <USBD_CDC_Setup+0x162>
 800be54:	a201      	add	r2, pc, #4	; (adr r2, 800be5c <USBD_CDC_Setup+0xc4>)
 800be56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be5a:	bf00      	nop
 800be5c:	0800be8d 	.word	0x0800be8d
 800be60:	0800bf09 	.word	0x0800bf09
 800be64:	0800befb 	.word	0x0800befb
 800be68:	0800befb 	.word	0x0800befb
 800be6c:	0800befb 	.word	0x0800befb
 800be70:	0800befb 	.word	0x0800befb
 800be74:	0800befb 	.word	0x0800befb
 800be78:	0800befb 	.word	0x0800befb
 800be7c:	0800befb 	.word	0x0800befb
 800be80:	0800befb 	.word	0x0800befb
 800be84:	0800beb7 	.word	0x0800beb7
 800be88:	0800bee1 	.word	0x0800bee1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800be92:	b2db      	uxtb	r3, r3
 800be94:	2b03      	cmp	r3, #3
 800be96:	d107      	bne.n	800bea8 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800be98:	f107 030a 	add.w	r3, r7, #10
 800be9c:	2202      	movs	r2, #2
 800be9e:	4619      	mov	r1, r3
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f001 face 	bl	800d442 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bea6:	e032      	b.n	800bf0e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bea8:	6839      	ldr	r1, [r7, #0]
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f001 fa58 	bl	800d360 <USBD_CtlError>
            ret = USBD_FAIL;
 800beb0:	2303      	movs	r3, #3
 800beb2:	75fb      	strb	r3, [r7, #23]
          break;
 800beb4:	e02b      	b.n	800bf0e <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bebc:	b2db      	uxtb	r3, r3
 800bebe:	2b03      	cmp	r3, #3
 800bec0:	d107      	bne.n	800bed2 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bec2:	f107 030d 	add.w	r3, r7, #13
 800bec6:	2201      	movs	r2, #1
 800bec8:	4619      	mov	r1, r3
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f001 fab9 	bl	800d442 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bed0:	e01d      	b.n	800bf0e <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800bed2:	6839      	ldr	r1, [r7, #0]
 800bed4:	6878      	ldr	r0, [r7, #4]
 800bed6:	f001 fa43 	bl	800d360 <USBD_CtlError>
            ret = USBD_FAIL;
 800beda:	2303      	movs	r3, #3
 800bedc:	75fb      	strb	r3, [r7, #23]
          break;
 800bede:	e016      	b.n	800bf0e <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	2b03      	cmp	r3, #3
 800beea:	d00f      	beq.n	800bf0c <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800beec:	6839      	ldr	r1, [r7, #0]
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f001 fa36 	bl	800d360 <USBD_CtlError>
            ret = USBD_FAIL;
 800bef4:	2303      	movs	r3, #3
 800bef6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bef8:	e008      	b.n	800bf0c <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800befa:	6839      	ldr	r1, [r7, #0]
 800befc:	6878      	ldr	r0, [r7, #4]
 800befe:	f001 fa2f 	bl	800d360 <USBD_CtlError>
          ret = USBD_FAIL;
 800bf02:	2303      	movs	r3, #3
 800bf04:	75fb      	strb	r3, [r7, #23]
          break;
 800bf06:	e002      	b.n	800bf0e <USBD_CDC_Setup+0x176>
          break;
 800bf08:	bf00      	nop
 800bf0a:	e008      	b.n	800bf1e <USBD_CDC_Setup+0x186>
          break;
 800bf0c:	bf00      	nop
      }
      break;
 800bf0e:	e006      	b.n	800bf1e <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800bf10:	6839      	ldr	r1, [r7, #0]
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f001 fa24 	bl	800d360 <USBD_CtlError>
      ret = USBD_FAIL;
 800bf18:	2303      	movs	r3, #3
 800bf1a:	75fb      	strb	r3, [r7, #23]
      break;
 800bf1c:	bf00      	nop
  }

  return (uint8_t)ret;
 800bf1e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3718      	adds	r7, #24
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b084      	sub	sp, #16
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	460b      	mov	r3, r1
 800bf32:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bf3a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d101      	bne.n	800bf4a <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bf46:	2303      	movs	r3, #3
 800bf48:	e04f      	b.n	800bfea <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800bf50:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bf52:	78fa      	ldrb	r2, [r7, #3]
 800bf54:	6879      	ldr	r1, [r7, #4]
 800bf56:	4613      	mov	r3, r2
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	4413      	add	r3, r2
 800bf5c:	009b      	lsls	r3, r3, #2
 800bf5e:	440b      	add	r3, r1
 800bf60:	3318      	adds	r3, #24
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d029      	beq.n	800bfbc <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800bf68:	78fa      	ldrb	r2, [r7, #3]
 800bf6a:	6879      	ldr	r1, [r7, #4]
 800bf6c:	4613      	mov	r3, r2
 800bf6e:	009b      	lsls	r3, r3, #2
 800bf70:	4413      	add	r3, r2
 800bf72:	009b      	lsls	r3, r3, #2
 800bf74:	440b      	add	r3, r1
 800bf76:	3318      	adds	r3, #24
 800bf78:	681a      	ldr	r2, [r3, #0]
 800bf7a:	78f9      	ldrb	r1, [r7, #3]
 800bf7c:	68f8      	ldr	r0, [r7, #12]
 800bf7e:	460b      	mov	r3, r1
 800bf80:	00db      	lsls	r3, r3, #3
 800bf82:	1a5b      	subs	r3, r3, r1
 800bf84:	009b      	lsls	r3, r3, #2
 800bf86:	4403      	add	r3, r0
 800bf88:	3344      	adds	r3, #68	; 0x44
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	fbb2 f1f3 	udiv	r1, r2, r3
 800bf90:	fb03 f301 	mul.w	r3, r3, r1
 800bf94:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d110      	bne.n	800bfbc <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800bf9a:	78fa      	ldrb	r2, [r7, #3]
 800bf9c:	6879      	ldr	r1, [r7, #4]
 800bf9e:	4613      	mov	r3, r2
 800bfa0:	009b      	lsls	r3, r3, #2
 800bfa2:	4413      	add	r3, r2
 800bfa4:	009b      	lsls	r3, r3, #2
 800bfa6:	440b      	add	r3, r1
 800bfa8:	3318      	adds	r3, #24
 800bfaa:	2200      	movs	r2, #0
 800bfac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bfae:	78f9      	ldrb	r1, [r7, #3]
 800bfb0:	2300      	movs	r3, #0
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f009 fa3c 	bl	8015432 <USBD_LL_Transmit>
 800bfba:	e015      	b.n	800bfe8 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfca:	691b      	ldr	r3, [r3, #16]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d00b      	beq.n	800bfe8 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800bfd6:	691b      	ldr	r3, [r3, #16]
 800bfd8:	68ba      	ldr	r2, [r7, #8]
 800bfda:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bfde:	68ba      	ldr	r2, [r7, #8]
 800bfe0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bfe4:	78fa      	ldrb	r2, [r7, #3]
 800bfe6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bfe8:	2300      	movs	r3, #0
}
 800bfea:	4618      	mov	r0, r3
 800bfec:	3710      	adds	r7, #16
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bd80      	pop	{r7, pc}

0800bff2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bff2:	b580      	push	{r7, lr}
 800bff4:	b084      	sub	sp, #16
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	6078      	str	r0, [r7, #4]
 800bffa:	460b      	mov	r3, r1
 800bffc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c004:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	d101      	bne.n	800c014 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c010:	2303      	movs	r3, #3
 800c012:	e015      	b.n	800c040 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c014:	78fb      	ldrb	r3, [r7, #3]
 800c016:	4619      	mov	r1, r3
 800c018:	6878      	ldr	r0, [r7, #4]
 800c01a:	f009 fa4c 	bl	80154b6 <USBD_LL_GetRxDataSize>
 800c01e:	4602      	mov	r2, r0
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	68fa      	ldr	r2, [r7, #12]
 800c030:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c034:	68fa      	ldr	r2, [r7, #12]
 800c036:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c03a:	4611      	mov	r1, r2
 800c03c:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c03e:	2300      	movs	r3, #0
}
 800c040:	4618      	mov	r0, r3
 800c042:	3710      	adds	r7, #16
 800c044:	46bd      	mov	sp, r7
 800c046:	bd80      	pop	{r7, pc}

0800c048 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c048:	b580      	push	{r7, lr}
 800c04a:	b084      	sub	sp, #16
 800c04c:	af00      	add	r7, sp, #0
 800c04e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c056:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d101      	bne.n	800c062 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800c05e:	2303      	movs	r3, #3
 800c060:	e01b      	b.n	800c09a <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d015      	beq.n	800c098 <USBD_CDC_EP0_RxReady+0x50>
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c072:	2bff      	cmp	r3, #255	; 0xff
 800c074:	d010      	beq.n	800c098 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800c07c:	689b      	ldr	r3, [r3, #8]
 800c07e:	68fa      	ldr	r2, [r7, #12]
 800c080:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800c084:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c086:	68fa      	ldr	r2, [r7, #12]
 800c088:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c08c:	b292      	uxth	r2, r2
 800c08e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	22ff      	movs	r2, #255	; 0xff
 800c094:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c098:	2300      	movs	r3, #0
}
 800c09a:	4618      	mov	r0, r3
 800c09c:	3710      	adds	r7, #16
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}
	...

0800c0a4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c0a4:	b480      	push	{r7}
 800c0a6:	b083      	sub	sp, #12
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	2243      	movs	r2, #67	; 0x43
 800c0b0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800c0b2:	4b03      	ldr	r3, [pc, #12]	; (800c0c0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	370c      	adds	r7, #12
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0be:	4770      	bx	lr
 800c0c0:	200000ac 	.word	0x200000ac

0800c0c4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	2243      	movs	r2, #67	; 0x43
 800c0d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800c0d2:	4b03      	ldr	r3, [pc, #12]	; (800c0e0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800c0d4:	4618      	mov	r0, r3
 800c0d6:	370c      	adds	r7, #12
 800c0d8:	46bd      	mov	sp, r7
 800c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0de:	4770      	bx	lr
 800c0e0:	20000068 	.word	0x20000068

0800c0e4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c0e4:	b480      	push	{r7}
 800c0e6:	b083      	sub	sp, #12
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	2243      	movs	r2, #67	; 0x43
 800c0f0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800c0f2:	4b03      	ldr	r3, [pc, #12]	; (800c100 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	370c      	adds	r7, #12
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fe:	4770      	bx	lr
 800c100:	200000f0 	.word	0x200000f0

0800c104 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c104:	b480      	push	{r7}
 800c106:	b083      	sub	sp, #12
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	220a      	movs	r2, #10
 800c110:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c112:	4b03      	ldr	r3, [pc, #12]	; (800c120 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c114:	4618      	mov	r0, r3
 800c116:	370c      	adds	r7, #12
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr
 800c120:	20000024 	.word	0x20000024

0800c124 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c124:	b480      	push	{r7}
 800c126:	b083      	sub	sp, #12
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d101      	bne.n	800c138 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c134:	2303      	movs	r3, #3
 800c136:	e004      	b.n	800c142 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	683a      	ldr	r2, [r7, #0]
 800c13c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800c140:	2300      	movs	r3, #0
}
 800c142:	4618      	mov	r0, r3
 800c144:	370c      	adds	r7, #12
 800c146:	46bd      	mov	sp, r7
 800c148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14c:	4770      	bx	lr

0800c14e <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c14e:	b480      	push	{r7}
 800c150:	b087      	sub	sp, #28
 800c152:	af00      	add	r7, sp, #0
 800c154:	60f8      	str	r0, [r7, #12]
 800c156:	60b9      	str	r1, [r7, #8]
 800c158:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c160:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	2b00      	cmp	r3, #0
 800c166:	d101      	bne.n	800c16c <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c168:	2303      	movs	r3, #3
 800c16a:	e008      	b.n	800c17e <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	68ba      	ldr	r2, [r7, #8]
 800c170:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	687a      	ldr	r2, [r7, #4]
 800c178:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c17c:	2300      	movs	r3, #0
}
 800c17e:	4618      	mov	r0, r3
 800c180:	371c      	adds	r7, #28
 800c182:	46bd      	mov	sp, r7
 800c184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c188:	4770      	bx	lr

0800c18a <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c18a:	b480      	push	{r7}
 800c18c:	b085      	sub	sp, #20
 800c18e:	af00      	add	r7, sp, #0
 800c190:	6078      	str	r0, [r7, #4]
 800c192:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c19a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d101      	bne.n	800c1a6 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800c1a2:	2303      	movs	r3, #3
 800c1a4:	e004      	b.n	800c1b0 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	683a      	ldr	r2, [r7, #0]
 800c1aa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c1ae:	2300      	movs	r3, #0
}
 800c1b0:	4618      	mov	r0, r3
 800c1b2:	3714      	adds	r7, #20
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ba:	4770      	bx	lr

0800c1bc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1ca:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c1cc:	2301      	movs	r3, #1
 800c1ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d101      	bne.n	800c1de <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c1da:	2303      	movs	r3, #3
 800c1dc:	e01a      	b.n	800c214 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d114      	bne.n	800c212 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c1e8:	68bb      	ldr	r3, [r7, #8]
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800c1f0:	68bb      	ldr	r3, [r7, #8]
 800c1f2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800c1fa:	68bb      	ldr	r3, [r7, #8]
 800c1fc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c206:	2181      	movs	r1, #129	; 0x81
 800c208:	6878      	ldr	r0, [r7, #4]
 800c20a:	f009 f912 	bl	8015432 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c20e:	2300      	movs	r3, #0
 800c210:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c212:	7bfb      	ldrb	r3, [r7, #15]
}
 800c214:	4618      	mov	r0, r3
 800c216:	3710      	adds	r7, #16
 800c218:	46bd      	mov	sp, r7
 800c21a:	bd80      	pop	{r7, pc}

0800c21c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	b084      	sub	sp, #16
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c22a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c232:	2b00      	cmp	r3, #0
 800c234:	d101      	bne.n	800c23a <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800c236:	2303      	movs	r3, #3
 800c238:	e016      	b.n	800c268 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	7c1b      	ldrb	r3, [r3, #16]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d109      	bne.n	800c256 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c248:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c24c:	2101      	movs	r1, #1
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f009 f910 	bl	8015474 <USBD_LL_PrepareReceive>
 800c254:	e007      	b.n	800c266 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c25c:	2340      	movs	r3, #64	; 0x40
 800c25e:	2101      	movs	r1, #1
 800c260:	6878      	ldr	r0, [r7, #4]
 800c262:	f009 f907 	bl	8015474 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c266:	2300      	movs	r3, #0
}
 800c268:	4618      	mov	r0, r3
 800c26a:	3710      	adds	r7, #16
 800c26c:	46bd      	mov	sp, r7
 800c26e:	bd80      	pop	{r7, pc}

0800c270 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c270:	b580      	push	{r7, lr}
 800c272:	b086      	sub	sp, #24
 800c274:	af00      	add	r7, sp, #0
 800c276:	60f8      	str	r0, [r7, #12]
 800c278:	60b9      	str	r1, [r7, #8]
 800c27a:	4613      	mov	r3, r2
 800c27c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c27e:	68fb      	ldr	r3, [r7, #12]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d101      	bne.n	800c288 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c284:	2303      	movs	r3, #3
 800c286:	e01f      	b.n	800c2c8 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	2200      	movs	r2, #0
 800c28c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	2200      	movs	r2, #0
 800c294:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2200      	movs	r2, #0
 800c29c:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d003      	beq.n	800c2ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	68ba      	ldr	r2, [r7, #8]
 800c2aa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c2ae:	68fb      	ldr	r3, [r7, #12]
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	79fa      	ldrb	r2, [r7, #7]
 800c2ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c2bc:	68f8      	ldr	r0, [r7, #12]
 800c2be:	f008 ff83 	bl	80151c8 <USBD_LL_Init>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c2c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3718      	adds	r7, #24
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b084      	sub	sp, #16
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c2da:	2300      	movs	r3, #0
 800c2dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d101      	bne.n	800c2e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800c2e4:	2303      	movs	r3, #3
 800c2e6:	e016      	b.n	800c316 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	683a      	ldr	r2, [r7, #0]
 800c2ec:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d00b      	beq.n	800c314 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c304:	f107 020e 	add.w	r2, r7, #14
 800c308:	4610      	mov	r0, r2
 800c30a:	4798      	blx	r3
 800c30c:	4602      	mov	r2, r0
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800c314:	2300      	movs	r3, #0
}
 800c316:	4618      	mov	r0, r3
 800c318:	3710      	adds	r7, #16
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}

0800c31e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c31e:	b580      	push	{r7, lr}
 800c320:	b082      	sub	sp, #8
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f008 ff9a 	bl	8015260 <USBD_LL_Start>
 800c32c:	4603      	mov	r3, r0
}
 800c32e:	4618      	mov	r0, r3
 800c330:	3708      	adds	r7, #8
 800c332:	46bd      	mov	sp, r7
 800c334:	bd80      	pop	{r7, pc}

0800c336 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800c336:	b480      	push	{r7}
 800c338:	b083      	sub	sp, #12
 800c33a:	af00      	add	r7, sp, #0
 800c33c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c33e:	2300      	movs	r3, #0
}
 800c340:	4618      	mov	r0, r3
 800c342:	370c      	adds	r7, #12
 800c344:	46bd      	mov	sp, r7
 800c346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c34a:	4770      	bx	lr

0800c34c <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
 800c354:	460b      	mov	r3, r1
 800c356:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800c358:	2303      	movs	r3, #3
 800c35a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c362:	2b00      	cmp	r3, #0
 800c364:	d009      	beq.n	800c37a <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	78fa      	ldrb	r2, [r7, #3]
 800c370:	4611      	mov	r1, r2
 800c372:	6878      	ldr	r0, [r7, #4]
 800c374:	4798      	blx	r3
 800c376:	4603      	mov	r3, r0
 800c378:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800c37a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c37c:	4618      	mov	r0, r3
 800c37e:	3710      	adds	r7, #16
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b082      	sub	sp, #8
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	460b      	mov	r3, r1
 800c38e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c396:	2b00      	cmp	r3, #0
 800c398:	d007      	beq.n	800c3aa <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c3a0:	685b      	ldr	r3, [r3, #4]
 800c3a2:	78fa      	ldrb	r2, [r7, #3]
 800c3a4:	4611      	mov	r1, r2
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	4798      	blx	r3
  }

  return USBD_OK;
 800c3aa:	2300      	movs	r3, #0
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3708      	adds	r7, #8
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}

0800c3b4 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b084      	sub	sp, #16
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]
 800c3bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c3c4:	6839      	ldr	r1, [r7, #0]
 800c3c6:	4618      	mov	r0, r3
 800c3c8:	f000 ff90 	bl	800d2ec <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2201      	movs	r2, #1
 800c3d0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c3da:	461a      	mov	r2, r3
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c3e8:	f003 031f 	and.w	r3, r3, #31
 800c3ec:	2b02      	cmp	r3, #2
 800c3ee:	d01a      	beq.n	800c426 <USBD_LL_SetupStage+0x72>
 800c3f0:	2b02      	cmp	r3, #2
 800c3f2:	d822      	bhi.n	800c43a <USBD_LL_SetupStage+0x86>
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d002      	beq.n	800c3fe <USBD_LL_SetupStage+0x4a>
 800c3f8:	2b01      	cmp	r3, #1
 800c3fa:	d00a      	beq.n	800c412 <USBD_LL_SetupStage+0x5e>
 800c3fc:	e01d      	b.n	800c43a <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c404:	4619      	mov	r1, r3
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 fa62 	bl	800c8d0 <USBD_StdDevReq>
 800c40c:	4603      	mov	r3, r0
 800c40e:	73fb      	strb	r3, [r7, #15]
      break;
 800c410:	e020      	b.n	800c454 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c418:	4619      	mov	r1, r3
 800c41a:	6878      	ldr	r0, [r7, #4]
 800c41c:	f000 fac6 	bl	800c9ac <USBD_StdItfReq>
 800c420:	4603      	mov	r3, r0
 800c422:	73fb      	strb	r3, [r7, #15]
      break;
 800c424:	e016      	b.n	800c454 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c42c:	4619      	mov	r1, r3
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f000 fb05 	bl	800ca3e <USBD_StdEPReq>
 800c434:	4603      	mov	r3, r0
 800c436:	73fb      	strb	r3, [r7, #15]
      break;
 800c438:	e00c      	b.n	800c454 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c440:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c444:	b2db      	uxtb	r3, r3
 800c446:	4619      	mov	r1, r3
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f008 ff69 	bl	8015320 <USBD_LL_StallEP>
 800c44e:	4603      	mov	r3, r0
 800c450:	73fb      	strb	r3, [r7, #15]
      break;
 800c452:	bf00      	nop
  }

  return ret;
 800c454:	7bfb      	ldrb	r3, [r7, #15]
}
 800c456:	4618      	mov	r0, r3
 800c458:	3710      	adds	r7, #16
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}

0800c45e <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c45e:	b580      	push	{r7, lr}
 800c460:	b086      	sub	sp, #24
 800c462:	af00      	add	r7, sp, #0
 800c464:	60f8      	str	r0, [r7, #12]
 800c466:	460b      	mov	r3, r1
 800c468:	607a      	str	r2, [r7, #4]
 800c46a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c46c:	7afb      	ldrb	r3, [r7, #11]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d138      	bne.n	800c4e4 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800c472:	68fb      	ldr	r3, [r7, #12]
 800c474:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c478:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c47a:	68fb      	ldr	r3, [r7, #12]
 800c47c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c480:	2b03      	cmp	r3, #3
 800c482:	d14a      	bne.n	800c51a <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	689a      	ldr	r2, [r3, #8]
 800c488:	693b      	ldr	r3, [r7, #16]
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	429a      	cmp	r2, r3
 800c48e:	d913      	bls.n	800c4b8 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c490:	693b      	ldr	r3, [r7, #16]
 800c492:	689a      	ldr	r2, [r3, #8]
 800c494:	693b      	ldr	r3, [r7, #16]
 800c496:	68db      	ldr	r3, [r3, #12]
 800c498:	1ad2      	subs	r2, r2, r3
 800c49a:	693b      	ldr	r3, [r7, #16]
 800c49c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c49e:	693b      	ldr	r3, [r7, #16]
 800c4a0:	68da      	ldr	r2, [r3, #12]
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	689b      	ldr	r3, [r3, #8]
 800c4a6:	4293      	cmp	r3, r2
 800c4a8:	bf28      	it	cs
 800c4aa:	4613      	movcs	r3, r2
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	6879      	ldr	r1, [r7, #4]
 800c4b0:	68f8      	ldr	r0, [r7, #12]
 800c4b2:	f001 f80f 	bl	800d4d4 <USBD_CtlContinueRx>
 800c4b6:	e030      	b.n	800c51a <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4be:	b2db      	uxtb	r3, r3
 800c4c0:	2b03      	cmp	r3, #3
 800c4c2:	d10b      	bne.n	800c4dc <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4ca:	691b      	ldr	r3, [r3, #16]
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d005      	beq.n	800c4dc <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4d6:	691b      	ldr	r3, [r3, #16]
 800c4d8:	68f8      	ldr	r0, [r7, #12]
 800c4da:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c4dc:	68f8      	ldr	r0, [r7, #12]
 800c4de:	f001 f80a 	bl	800d4f6 <USBD_CtlSendStatus>
 800c4e2:	e01a      	b.n	800c51a <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4ea:	b2db      	uxtb	r3, r3
 800c4ec:	2b03      	cmp	r3, #3
 800c4ee:	d114      	bne.n	800c51a <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800c4f0:	68fb      	ldr	r3, [r7, #12]
 800c4f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4f6:	699b      	ldr	r3, [r3, #24]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d00e      	beq.n	800c51a <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c502:	699b      	ldr	r3, [r3, #24]
 800c504:	7afa      	ldrb	r2, [r7, #11]
 800c506:	4611      	mov	r1, r2
 800c508:	68f8      	ldr	r0, [r7, #12]
 800c50a:	4798      	blx	r3
 800c50c:	4603      	mov	r3, r0
 800c50e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c510:	7dfb      	ldrb	r3, [r7, #23]
 800c512:	2b00      	cmp	r3, #0
 800c514:	d001      	beq.n	800c51a <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800c516:	7dfb      	ldrb	r3, [r7, #23]
 800c518:	e000      	b.n	800c51c <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800c51a:	2300      	movs	r3, #0
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3718      	adds	r7, #24
 800c520:	46bd      	mov	sp, r7
 800c522:	bd80      	pop	{r7, pc}

0800c524 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b086      	sub	sp, #24
 800c528:	af00      	add	r7, sp, #0
 800c52a:	60f8      	str	r0, [r7, #12]
 800c52c:	460b      	mov	r3, r1
 800c52e:	607a      	str	r2, [r7, #4]
 800c530:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800c532:	7afb      	ldrb	r3, [r7, #11]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d16b      	bne.n	800c610 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	3314      	adds	r3, #20
 800c53c:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c544:	2b02      	cmp	r3, #2
 800c546:	d156      	bne.n	800c5f6 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	689a      	ldr	r2, [r3, #8]
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	429a      	cmp	r2, r3
 800c552:	d914      	bls.n	800c57e <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	689a      	ldr	r2, [r3, #8]
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	68db      	ldr	r3, [r3, #12]
 800c55c:	1ad2      	subs	r2, r2, r3
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	689b      	ldr	r3, [r3, #8]
 800c566:	461a      	mov	r2, r3
 800c568:	6879      	ldr	r1, [r7, #4]
 800c56a:	68f8      	ldr	r0, [r7, #12]
 800c56c:	f000 ff84 	bl	800d478 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c570:	2300      	movs	r3, #0
 800c572:	2200      	movs	r2, #0
 800c574:	2100      	movs	r1, #0
 800c576:	68f8      	ldr	r0, [r7, #12]
 800c578:	f008 ff7c 	bl	8015474 <USBD_LL_PrepareReceive>
 800c57c:	e03b      	b.n	800c5f6 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c57e:	693b      	ldr	r3, [r7, #16]
 800c580:	68da      	ldr	r2, [r3, #12]
 800c582:	693b      	ldr	r3, [r7, #16]
 800c584:	689b      	ldr	r3, [r3, #8]
 800c586:	429a      	cmp	r2, r3
 800c588:	d11c      	bne.n	800c5c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c58a:	693b      	ldr	r3, [r7, #16]
 800c58c:	685a      	ldr	r2, [r3, #4]
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c592:	429a      	cmp	r2, r3
 800c594:	d316      	bcc.n	800c5c4 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c596:	693b      	ldr	r3, [r7, #16]
 800c598:	685a      	ldr	r2, [r3, #4]
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c5a0:	429a      	cmp	r2, r3
 800c5a2:	d20f      	bcs.n	800c5c4 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	2100      	movs	r1, #0
 800c5a8:	68f8      	ldr	r0, [r7, #12]
 800c5aa:	f000 ff65 	bl	800d478 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	2200      	movs	r2, #0
 800c5b2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	2100      	movs	r1, #0
 800c5bc:	68f8      	ldr	r0, [r7, #12]
 800c5be:	f008 ff59 	bl	8015474 <USBD_LL_PrepareReceive>
 800c5c2:	e018      	b.n	800c5f6 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5ca:	b2db      	uxtb	r3, r3
 800c5cc:	2b03      	cmp	r3, #3
 800c5ce:	d10b      	bne.n	800c5e8 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5d6:	68db      	ldr	r3, [r3, #12]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d005      	beq.n	800c5e8 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5e2:	68db      	ldr	r3, [r3, #12]
 800c5e4:	68f8      	ldr	r0, [r7, #12]
 800c5e6:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c5e8:	2180      	movs	r1, #128	; 0x80
 800c5ea:	68f8      	ldr	r0, [r7, #12]
 800c5ec:	f008 fe98 	bl	8015320 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c5f0:	68f8      	ldr	r0, [r7, #12]
 800c5f2:	f000 ff93 	bl	800d51c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d122      	bne.n	800c646 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800c600:	68f8      	ldr	r0, [r7, #12]
 800c602:	f7ff fe98 	bl	800c336 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	2200      	movs	r2, #0
 800c60a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c60e:	e01a      	b.n	800c646 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c616:	b2db      	uxtb	r3, r3
 800c618:	2b03      	cmp	r3, #3
 800c61a:	d114      	bne.n	800c646 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c622:	695b      	ldr	r3, [r3, #20]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d00e      	beq.n	800c646 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c62e:	695b      	ldr	r3, [r3, #20]
 800c630:	7afa      	ldrb	r2, [r7, #11]
 800c632:	4611      	mov	r1, r2
 800c634:	68f8      	ldr	r0, [r7, #12]
 800c636:	4798      	blx	r3
 800c638:	4603      	mov	r3, r0
 800c63a:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800c63c:	7dfb      	ldrb	r3, [r7, #23]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d001      	beq.n	800c646 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800c642:	7dfb      	ldrb	r3, [r7, #23]
 800c644:	e000      	b.n	800c648 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800c646:	2300      	movs	r3, #0
}
 800c648:	4618      	mov	r0, r3
 800c64a:	3718      	adds	r7, #24
 800c64c:	46bd      	mov	sp, r7
 800c64e:	bd80      	pop	{r7, pc}

0800c650 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b082      	sub	sp, #8
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2201      	movs	r2, #1
 800c65c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2200      	movs	r2, #0
 800c664:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	2200      	movs	r2, #0
 800c66c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	2200      	movs	r2, #0
 800c672:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d101      	bne.n	800c684 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800c680:	2303      	movs	r3, #3
 800c682:	e02f      	b.n	800c6e4 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800c68a:	2b00      	cmp	r3, #0
 800c68c:	d00f      	beq.n	800c6ae <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c694:	685b      	ldr	r3, [r3, #4]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d009      	beq.n	800c6ae <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6a0:	685b      	ldr	r3, [r3, #4]
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	6852      	ldr	r2, [r2, #4]
 800c6a6:	b2d2      	uxtb	r2, r2
 800c6a8:	4611      	mov	r1, r2
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c6ae:	2340      	movs	r3, #64	; 0x40
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	2100      	movs	r1, #0
 800c6b4:	6878      	ldr	r0, [r7, #4]
 800c6b6:	f008 fdee 	bl	8015296 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2201      	movs	r2, #1
 800c6be:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	2240      	movs	r2, #64	; 0x40
 800c6c6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c6ca:	2340      	movs	r3, #64	; 0x40
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	2180      	movs	r1, #128	; 0x80
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	f008 fde0 	bl	8015296 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	2201      	movs	r2, #1
 800c6da:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	2240      	movs	r2, #64	; 0x40
 800c6e0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800c6e2:	2300      	movs	r3, #0
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3708      	adds	r7, #8
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}

0800c6ec <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
 800c6f4:	460b      	mov	r3, r1
 800c6f6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	78fa      	ldrb	r2, [r7, #3]
 800c6fc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c6fe:	2300      	movs	r3, #0
}
 800c700:	4618      	mov	r0, r3
 800c702:	370c      	adds	r7, #12
 800c704:	46bd      	mov	sp, r7
 800c706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70a:	4770      	bx	lr

0800c70c <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c70c:	b480      	push	{r7}
 800c70e:	b083      	sub	sp, #12
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c71a:	b2da      	uxtb	r2, r3
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	2204      	movs	r2, #4
 800c726:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c72a:	2300      	movs	r3, #0
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	370c      	adds	r7, #12
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr

0800c738 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c738:	b480      	push	{r7}
 800c73a:	b083      	sub	sp, #12
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c746:	b2db      	uxtb	r3, r3
 800c748:	2b04      	cmp	r3, #4
 800c74a:	d106      	bne.n	800c75a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c752:	b2da      	uxtb	r2, r3
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c75a:	2300      	movs	r3, #0
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	370c      	adds	r7, #12
 800c760:	46bd      	mov	sp, r7
 800c762:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c766:	4770      	bx	lr

0800c768 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c776:	2b00      	cmp	r3, #0
 800c778:	d101      	bne.n	800c77e <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800c77a:	2303      	movs	r3, #3
 800c77c:	e012      	b.n	800c7a4 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c784:	b2db      	uxtb	r3, r3
 800c786:	2b03      	cmp	r3, #3
 800c788:	d10b      	bne.n	800c7a2 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c790:	69db      	ldr	r3, [r3, #28]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d005      	beq.n	800c7a2 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c79c:	69db      	ldr	r3, [r3, #28]
 800c79e:	6878      	ldr	r0, [r7, #4]
 800c7a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c7a2:	2300      	movs	r3, #0
}
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	3708      	adds	r7, #8
 800c7a8:	46bd      	mov	sp, r7
 800c7aa:	bd80      	pop	{r7, pc}

0800c7ac <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b082      	sub	sp, #8
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	6078      	str	r0, [r7, #4]
 800c7b4:	460b      	mov	r3, r1
 800c7b6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d101      	bne.n	800c7c6 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c7c2:	2303      	movs	r3, #3
 800c7c4:	e014      	b.n	800c7f0 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7cc:	b2db      	uxtb	r3, r3
 800c7ce:	2b03      	cmp	r3, #3
 800c7d0:	d10d      	bne.n	800c7ee <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7d8:	6a1b      	ldr	r3, [r3, #32]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d007      	beq.n	800c7ee <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7e4:	6a1b      	ldr	r3, [r3, #32]
 800c7e6:	78fa      	ldrb	r2, [r7, #3]
 800c7e8:	4611      	mov	r1, r2
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c7ee:	2300      	movs	r3, #0
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	3708      	adds	r7, #8
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	bd80      	pop	{r7, pc}

0800c7f8 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c7f8:	b580      	push	{r7, lr}
 800c7fa:	b082      	sub	sp, #8
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	460b      	mov	r3, r1
 800c802:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d101      	bne.n	800c812 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800c80e:	2303      	movs	r3, #3
 800c810:	e014      	b.n	800c83c <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c818:	b2db      	uxtb	r3, r3
 800c81a:	2b03      	cmp	r3, #3
 800c81c:	d10d      	bne.n	800c83a <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c826:	2b00      	cmp	r3, #0
 800c828:	d007      	beq.n	800c83a <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c832:	78fa      	ldrb	r2, [r7, #3]
 800c834:	4611      	mov	r1, r2
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c83a:	2300      	movs	r3, #0
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c844:	b480      	push	{r7}
 800c846:	b083      	sub	sp, #12
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c84c:	2300      	movs	r3, #0
}
 800c84e:	4618      	mov	r0, r3
 800c850:	370c      	adds	r7, #12
 800c852:	46bd      	mov	sp, r7
 800c854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c858:	4770      	bx	lr

0800c85a <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c85a:	b580      	push	{r7, lr}
 800c85c:	b082      	sub	sp, #8
 800c85e:	af00      	add	r7, sp, #0
 800c860:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2201      	movs	r2, #1
 800c866:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c870:	2b00      	cmp	r3, #0
 800c872:	d009      	beq.n	800c888 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c87a:	685b      	ldr	r3, [r3, #4]
 800c87c:	687a      	ldr	r2, [r7, #4]
 800c87e:	6852      	ldr	r2, [r2, #4]
 800c880:	b2d2      	uxtb	r2, r2
 800c882:	4611      	mov	r1, r2
 800c884:	6878      	ldr	r0, [r7, #4]
 800c886:	4798      	blx	r3
  }

  return USBD_OK;
 800c888:	2300      	movs	r3, #0
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	3708      	adds	r7, #8
 800c88e:	46bd      	mov	sp, r7
 800c890:	bd80      	pop	{r7, pc}

0800c892 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c892:	b480      	push	{r7}
 800c894:	b087      	sub	sp, #28
 800c896:	af00      	add	r7, sp, #0
 800c898:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c89e:	697b      	ldr	r3, [r7, #20]
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c8a4:	697b      	ldr	r3, [r7, #20]
 800c8a6:	3301      	adds	r3, #1
 800c8a8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	781b      	ldrb	r3, [r3, #0]
 800c8ae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c8b0:	8a3b      	ldrh	r3, [r7, #16]
 800c8b2:	021b      	lsls	r3, r3, #8
 800c8b4:	b21a      	sxth	r2, r3
 800c8b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c8ba:	4313      	orrs	r3, r2
 800c8bc:	b21b      	sxth	r3, r3
 800c8be:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c8c0:	89fb      	ldrh	r3, [r7, #14]
}
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	371c      	adds	r7, #28
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8cc:	4770      	bx	lr
	...

0800c8d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8d0:	b580      	push	{r7, lr}
 800c8d2:	b084      	sub	sp, #16
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c8da:	2300      	movs	r3, #0
 800c8dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c8de:	683b      	ldr	r3, [r7, #0]
 800c8e0:	781b      	ldrb	r3, [r3, #0]
 800c8e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c8e6:	2b40      	cmp	r3, #64	; 0x40
 800c8e8:	d005      	beq.n	800c8f6 <USBD_StdDevReq+0x26>
 800c8ea:	2b40      	cmp	r3, #64	; 0x40
 800c8ec:	d853      	bhi.n	800c996 <USBD_StdDevReq+0xc6>
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d00b      	beq.n	800c90a <USBD_StdDevReq+0x3a>
 800c8f2:	2b20      	cmp	r3, #32
 800c8f4:	d14f      	bne.n	800c996 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c8fc:	689b      	ldr	r3, [r3, #8]
 800c8fe:	6839      	ldr	r1, [r7, #0]
 800c900:	6878      	ldr	r0, [r7, #4]
 800c902:	4798      	blx	r3
 800c904:	4603      	mov	r3, r0
 800c906:	73fb      	strb	r3, [r7, #15]
      break;
 800c908:	e04a      	b.n	800c9a0 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c90a:	683b      	ldr	r3, [r7, #0]
 800c90c:	785b      	ldrb	r3, [r3, #1]
 800c90e:	2b09      	cmp	r3, #9
 800c910:	d83b      	bhi.n	800c98a <USBD_StdDevReq+0xba>
 800c912:	a201      	add	r2, pc, #4	; (adr r2, 800c918 <USBD_StdDevReq+0x48>)
 800c914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c918:	0800c96d 	.word	0x0800c96d
 800c91c:	0800c981 	.word	0x0800c981
 800c920:	0800c98b 	.word	0x0800c98b
 800c924:	0800c977 	.word	0x0800c977
 800c928:	0800c98b 	.word	0x0800c98b
 800c92c:	0800c94b 	.word	0x0800c94b
 800c930:	0800c941 	.word	0x0800c941
 800c934:	0800c98b 	.word	0x0800c98b
 800c938:	0800c963 	.word	0x0800c963
 800c93c:	0800c955 	.word	0x0800c955
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c940:	6839      	ldr	r1, [r7, #0]
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f000 f9de 	bl	800cd04 <USBD_GetDescriptor>
          break;
 800c948:	e024      	b.n	800c994 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c94a:	6839      	ldr	r1, [r7, #0]
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f000 fb43 	bl	800cfd8 <USBD_SetAddress>
          break;
 800c952:	e01f      	b.n	800c994 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c954:	6839      	ldr	r1, [r7, #0]
 800c956:	6878      	ldr	r0, [r7, #4]
 800c958:	f000 fb82 	bl	800d060 <USBD_SetConfig>
 800c95c:	4603      	mov	r3, r0
 800c95e:	73fb      	strb	r3, [r7, #15]
          break;
 800c960:	e018      	b.n	800c994 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c962:	6839      	ldr	r1, [r7, #0]
 800c964:	6878      	ldr	r0, [r7, #4]
 800c966:	f000 fc21 	bl	800d1ac <USBD_GetConfig>
          break;
 800c96a:	e013      	b.n	800c994 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c96c:	6839      	ldr	r1, [r7, #0]
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f000 fc52 	bl	800d218 <USBD_GetStatus>
          break;
 800c974:	e00e      	b.n	800c994 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c976:	6839      	ldr	r1, [r7, #0]
 800c978:	6878      	ldr	r0, [r7, #4]
 800c97a:	f000 fc81 	bl	800d280 <USBD_SetFeature>
          break;
 800c97e:	e009      	b.n	800c994 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c980:	6839      	ldr	r1, [r7, #0]
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f000 fc90 	bl	800d2a8 <USBD_ClrFeature>
          break;
 800c988:	e004      	b.n	800c994 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800c98a:	6839      	ldr	r1, [r7, #0]
 800c98c:	6878      	ldr	r0, [r7, #4]
 800c98e:	f000 fce7 	bl	800d360 <USBD_CtlError>
          break;
 800c992:	bf00      	nop
      }
      break;
 800c994:	e004      	b.n	800c9a0 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800c996:	6839      	ldr	r1, [r7, #0]
 800c998:	6878      	ldr	r0, [r7, #4]
 800c99a:	f000 fce1 	bl	800d360 <USBD_CtlError>
      break;
 800c99e:	bf00      	nop
  }

  return ret;
 800c9a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9a2:	4618      	mov	r0, r3
 800c9a4:	3710      	adds	r7, #16
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	bd80      	pop	{r7, pc}
 800c9aa:	bf00      	nop

0800c9ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b084      	sub	sp, #16
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9ba:	683b      	ldr	r3, [r7, #0]
 800c9bc:	781b      	ldrb	r3, [r3, #0]
 800c9be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c9c2:	2b40      	cmp	r3, #64	; 0x40
 800c9c4:	d005      	beq.n	800c9d2 <USBD_StdItfReq+0x26>
 800c9c6:	2b40      	cmp	r3, #64	; 0x40
 800c9c8:	d82f      	bhi.n	800ca2a <USBD_StdItfReq+0x7e>
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d001      	beq.n	800c9d2 <USBD_StdItfReq+0x26>
 800c9ce:	2b20      	cmp	r3, #32
 800c9d0:	d12b      	bne.n	800ca2a <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9d8:	b2db      	uxtb	r3, r3
 800c9da:	3b01      	subs	r3, #1
 800c9dc:	2b02      	cmp	r3, #2
 800c9de:	d81d      	bhi.n	800ca1c <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800c9e0:	683b      	ldr	r3, [r7, #0]
 800c9e2:	889b      	ldrh	r3, [r3, #4]
 800c9e4:	b2db      	uxtb	r3, r3
 800c9e6:	2b01      	cmp	r3, #1
 800c9e8:	d813      	bhi.n	800ca12 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c9f0:	689b      	ldr	r3, [r3, #8]
 800c9f2:	6839      	ldr	r1, [r7, #0]
 800c9f4:	6878      	ldr	r0, [r7, #4]
 800c9f6:	4798      	blx	r3
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800c9fc:	683b      	ldr	r3, [r7, #0]
 800c9fe:	88db      	ldrh	r3, [r3, #6]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d110      	bne.n	800ca26 <USBD_StdItfReq+0x7a>
 800ca04:	7bfb      	ldrb	r3, [r7, #15]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d10d      	bne.n	800ca26 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ca0a:	6878      	ldr	r0, [r7, #4]
 800ca0c:	f000 fd73 	bl	800d4f6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800ca10:	e009      	b.n	800ca26 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800ca12:	6839      	ldr	r1, [r7, #0]
 800ca14:	6878      	ldr	r0, [r7, #4]
 800ca16:	f000 fca3 	bl	800d360 <USBD_CtlError>
          break;
 800ca1a:	e004      	b.n	800ca26 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800ca1c:	6839      	ldr	r1, [r7, #0]
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f000 fc9e 	bl	800d360 <USBD_CtlError>
          break;
 800ca24:	e000      	b.n	800ca28 <USBD_StdItfReq+0x7c>
          break;
 800ca26:	bf00      	nop
      }
      break;
 800ca28:	e004      	b.n	800ca34 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800ca2a:	6839      	ldr	r1, [r7, #0]
 800ca2c:	6878      	ldr	r0, [r7, #4]
 800ca2e:	f000 fc97 	bl	800d360 <USBD_CtlError>
      break;
 800ca32:	bf00      	nop
  }

  return ret;
 800ca34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3710      	adds	r7, #16
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}

0800ca3e <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca3e:	b580      	push	{r7, lr}
 800ca40:	b084      	sub	sp, #16
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
 800ca46:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ca4c:	683b      	ldr	r3, [r7, #0]
 800ca4e:	889b      	ldrh	r3, [r3, #4]
 800ca50:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	781b      	ldrb	r3, [r3, #0]
 800ca56:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca5a:	2b40      	cmp	r3, #64	; 0x40
 800ca5c:	d007      	beq.n	800ca6e <USBD_StdEPReq+0x30>
 800ca5e:	2b40      	cmp	r3, #64	; 0x40
 800ca60:	f200 8145 	bhi.w	800ccee <USBD_StdEPReq+0x2b0>
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d00c      	beq.n	800ca82 <USBD_StdEPReq+0x44>
 800ca68:	2b20      	cmp	r3, #32
 800ca6a:	f040 8140 	bne.w	800ccee <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca74:	689b      	ldr	r3, [r3, #8]
 800ca76:	6839      	ldr	r1, [r7, #0]
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	4798      	blx	r3
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	73fb      	strb	r3, [r7, #15]
      break;
 800ca80:	e13a      	b.n	800ccf8 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	785b      	ldrb	r3, [r3, #1]
 800ca86:	2b03      	cmp	r3, #3
 800ca88:	d007      	beq.n	800ca9a <USBD_StdEPReq+0x5c>
 800ca8a:	2b03      	cmp	r3, #3
 800ca8c:	f300 8129 	bgt.w	800cce2 <USBD_StdEPReq+0x2a4>
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d07f      	beq.n	800cb94 <USBD_StdEPReq+0x156>
 800ca94:	2b01      	cmp	r3, #1
 800ca96:	d03c      	beq.n	800cb12 <USBD_StdEPReq+0xd4>
 800ca98:	e123      	b.n	800cce2 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800caa0:	b2db      	uxtb	r3, r3
 800caa2:	2b02      	cmp	r3, #2
 800caa4:	d002      	beq.n	800caac <USBD_StdEPReq+0x6e>
 800caa6:	2b03      	cmp	r3, #3
 800caa8:	d016      	beq.n	800cad8 <USBD_StdEPReq+0x9a>
 800caaa:	e02c      	b.n	800cb06 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800caac:	7bbb      	ldrb	r3, [r7, #14]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d00d      	beq.n	800cace <USBD_StdEPReq+0x90>
 800cab2:	7bbb      	ldrb	r3, [r7, #14]
 800cab4:	2b80      	cmp	r3, #128	; 0x80
 800cab6:	d00a      	beq.n	800cace <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cab8:	7bbb      	ldrb	r3, [r7, #14]
 800caba:	4619      	mov	r1, r3
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f008 fc2f 	bl	8015320 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cac2:	2180      	movs	r1, #128	; 0x80
 800cac4:	6878      	ldr	r0, [r7, #4]
 800cac6:	f008 fc2b 	bl	8015320 <USBD_LL_StallEP>
 800caca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cacc:	e020      	b.n	800cb10 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800cace:	6839      	ldr	r1, [r7, #0]
 800cad0:	6878      	ldr	r0, [r7, #4]
 800cad2:	f000 fc45 	bl	800d360 <USBD_CtlError>
              break;
 800cad6:	e01b      	b.n	800cb10 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cad8:	683b      	ldr	r3, [r7, #0]
 800cada:	885b      	ldrh	r3, [r3, #2]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d10e      	bne.n	800cafe <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cae0:	7bbb      	ldrb	r3, [r7, #14]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d00b      	beq.n	800cafe <USBD_StdEPReq+0xc0>
 800cae6:	7bbb      	ldrb	r3, [r7, #14]
 800cae8:	2b80      	cmp	r3, #128	; 0x80
 800caea:	d008      	beq.n	800cafe <USBD_StdEPReq+0xc0>
 800caec:	683b      	ldr	r3, [r7, #0]
 800caee:	88db      	ldrh	r3, [r3, #6]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d104      	bne.n	800cafe <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800caf4:	7bbb      	ldrb	r3, [r7, #14]
 800caf6:	4619      	mov	r1, r3
 800caf8:	6878      	ldr	r0, [r7, #4]
 800cafa:	f008 fc11 	bl	8015320 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	f000 fcf9 	bl	800d4f6 <USBD_CtlSendStatus>

              break;
 800cb04:	e004      	b.n	800cb10 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800cb06:	6839      	ldr	r1, [r7, #0]
 800cb08:	6878      	ldr	r0, [r7, #4]
 800cb0a:	f000 fc29 	bl	800d360 <USBD_CtlError>
              break;
 800cb0e:	bf00      	nop
          }
          break;
 800cb10:	e0ec      	b.n	800ccec <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb18:	b2db      	uxtb	r3, r3
 800cb1a:	2b02      	cmp	r3, #2
 800cb1c:	d002      	beq.n	800cb24 <USBD_StdEPReq+0xe6>
 800cb1e:	2b03      	cmp	r3, #3
 800cb20:	d016      	beq.n	800cb50 <USBD_StdEPReq+0x112>
 800cb22:	e030      	b.n	800cb86 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb24:	7bbb      	ldrb	r3, [r7, #14]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d00d      	beq.n	800cb46 <USBD_StdEPReq+0x108>
 800cb2a:	7bbb      	ldrb	r3, [r7, #14]
 800cb2c:	2b80      	cmp	r3, #128	; 0x80
 800cb2e:	d00a      	beq.n	800cb46 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb30:	7bbb      	ldrb	r3, [r7, #14]
 800cb32:	4619      	mov	r1, r3
 800cb34:	6878      	ldr	r0, [r7, #4]
 800cb36:	f008 fbf3 	bl	8015320 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb3a:	2180      	movs	r1, #128	; 0x80
 800cb3c:	6878      	ldr	r0, [r7, #4]
 800cb3e:	f008 fbef 	bl	8015320 <USBD_LL_StallEP>
 800cb42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cb44:	e025      	b.n	800cb92 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800cb46:	6839      	ldr	r1, [r7, #0]
 800cb48:	6878      	ldr	r0, [r7, #4]
 800cb4a:	f000 fc09 	bl	800d360 <USBD_CtlError>
              break;
 800cb4e:	e020      	b.n	800cb92 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	885b      	ldrh	r3, [r3, #2]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d11b      	bne.n	800cb90 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cb58:	7bbb      	ldrb	r3, [r7, #14]
 800cb5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d004      	beq.n	800cb6c <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cb62:	7bbb      	ldrb	r3, [r7, #14]
 800cb64:	4619      	mov	r1, r3
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f008 fbf9 	bl	801535e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cb6c:	6878      	ldr	r0, [r7, #4]
 800cb6e:	f000 fcc2 	bl	800d4f6 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb78:	689b      	ldr	r3, [r3, #8]
 800cb7a:	6839      	ldr	r1, [r7, #0]
 800cb7c:	6878      	ldr	r0, [r7, #4]
 800cb7e:	4798      	blx	r3
 800cb80:	4603      	mov	r3, r0
 800cb82:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800cb84:	e004      	b.n	800cb90 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800cb86:	6839      	ldr	r1, [r7, #0]
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f000 fbe9 	bl	800d360 <USBD_CtlError>
              break;
 800cb8e:	e000      	b.n	800cb92 <USBD_StdEPReq+0x154>
              break;
 800cb90:	bf00      	nop
          }
          break;
 800cb92:	e0ab      	b.n	800ccec <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb9a:	b2db      	uxtb	r3, r3
 800cb9c:	2b02      	cmp	r3, #2
 800cb9e:	d002      	beq.n	800cba6 <USBD_StdEPReq+0x168>
 800cba0:	2b03      	cmp	r3, #3
 800cba2:	d032      	beq.n	800cc0a <USBD_StdEPReq+0x1cc>
 800cba4:	e097      	b.n	800ccd6 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cba6:	7bbb      	ldrb	r3, [r7, #14]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d007      	beq.n	800cbbc <USBD_StdEPReq+0x17e>
 800cbac:	7bbb      	ldrb	r3, [r7, #14]
 800cbae:	2b80      	cmp	r3, #128	; 0x80
 800cbb0:	d004      	beq.n	800cbbc <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800cbb2:	6839      	ldr	r1, [r7, #0]
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f000 fbd3 	bl	800d360 <USBD_CtlError>
                break;
 800cbba:	e091      	b.n	800cce0 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbbc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	da0b      	bge.n	800cbdc <USBD_StdEPReq+0x19e>
 800cbc4:	7bbb      	ldrb	r3, [r7, #14]
 800cbc6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cbca:	4613      	mov	r3, r2
 800cbcc:	009b      	lsls	r3, r3, #2
 800cbce:	4413      	add	r3, r2
 800cbd0:	009b      	lsls	r3, r3, #2
 800cbd2:	3310      	adds	r3, #16
 800cbd4:	687a      	ldr	r2, [r7, #4]
 800cbd6:	4413      	add	r3, r2
 800cbd8:	3304      	adds	r3, #4
 800cbda:	e00b      	b.n	800cbf4 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cbdc:	7bbb      	ldrb	r3, [r7, #14]
 800cbde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cbe2:	4613      	mov	r3, r2
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	4413      	add	r3, r2
 800cbe8:	009b      	lsls	r3, r3, #2
 800cbea:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	4413      	add	r3, r2
 800cbf2:	3304      	adds	r3, #4
 800cbf4:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cbf6:	68bb      	ldr	r3, [r7, #8]
 800cbf8:	2200      	movs	r2, #0
 800cbfa:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cbfc:	68bb      	ldr	r3, [r7, #8]
 800cbfe:	2202      	movs	r2, #2
 800cc00:	4619      	mov	r1, r3
 800cc02:	6878      	ldr	r0, [r7, #4]
 800cc04:	f000 fc1d 	bl	800d442 <USBD_CtlSendData>
              break;
 800cc08:	e06a      	b.n	800cce0 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cc0a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc0e:	2b00      	cmp	r3, #0
 800cc10:	da11      	bge.n	800cc36 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cc12:	7bbb      	ldrb	r3, [r7, #14]
 800cc14:	f003 020f 	and.w	r2, r3, #15
 800cc18:	6879      	ldr	r1, [r7, #4]
 800cc1a:	4613      	mov	r3, r2
 800cc1c:	009b      	lsls	r3, r3, #2
 800cc1e:	4413      	add	r3, r2
 800cc20:	009b      	lsls	r3, r3, #2
 800cc22:	440b      	add	r3, r1
 800cc24:	3324      	adds	r3, #36	; 0x24
 800cc26:	881b      	ldrh	r3, [r3, #0]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d117      	bne.n	800cc5c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cc2c:	6839      	ldr	r1, [r7, #0]
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f000 fb96 	bl	800d360 <USBD_CtlError>
                  break;
 800cc34:	e054      	b.n	800cce0 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cc36:	7bbb      	ldrb	r3, [r7, #14]
 800cc38:	f003 020f 	and.w	r2, r3, #15
 800cc3c:	6879      	ldr	r1, [r7, #4]
 800cc3e:	4613      	mov	r3, r2
 800cc40:	009b      	lsls	r3, r3, #2
 800cc42:	4413      	add	r3, r2
 800cc44:	009b      	lsls	r3, r3, #2
 800cc46:	440b      	add	r3, r1
 800cc48:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cc4c:	881b      	ldrh	r3, [r3, #0]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d104      	bne.n	800cc5c <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800cc52:	6839      	ldr	r1, [r7, #0]
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f000 fb83 	bl	800d360 <USBD_CtlError>
                  break;
 800cc5a:	e041      	b.n	800cce0 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	da0b      	bge.n	800cc7c <USBD_StdEPReq+0x23e>
 800cc64:	7bbb      	ldrb	r3, [r7, #14]
 800cc66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cc6a:	4613      	mov	r3, r2
 800cc6c:	009b      	lsls	r3, r3, #2
 800cc6e:	4413      	add	r3, r2
 800cc70:	009b      	lsls	r3, r3, #2
 800cc72:	3310      	adds	r3, #16
 800cc74:	687a      	ldr	r2, [r7, #4]
 800cc76:	4413      	add	r3, r2
 800cc78:	3304      	adds	r3, #4
 800cc7a:	e00b      	b.n	800cc94 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cc7c:	7bbb      	ldrb	r3, [r7, #14]
 800cc7e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cc82:	4613      	mov	r3, r2
 800cc84:	009b      	lsls	r3, r3, #2
 800cc86:	4413      	add	r3, r2
 800cc88:	009b      	lsls	r3, r3, #2
 800cc8a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	4413      	add	r3, r2
 800cc92:	3304      	adds	r3, #4
 800cc94:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cc96:	7bbb      	ldrb	r3, [r7, #14]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d002      	beq.n	800cca2 <USBD_StdEPReq+0x264>
 800cc9c:	7bbb      	ldrb	r3, [r7, #14]
 800cc9e:	2b80      	cmp	r3, #128	; 0x80
 800cca0:	d103      	bne.n	800ccaa <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	2200      	movs	r2, #0
 800cca6:	601a      	str	r2, [r3, #0]
 800cca8:	e00e      	b.n	800ccc8 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ccaa:	7bbb      	ldrb	r3, [r7, #14]
 800ccac:	4619      	mov	r1, r3
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f008 fb74 	bl	801539c <USBD_LL_IsStallEP>
 800ccb4:	4603      	mov	r3, r0
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d003      	beq.n	800ccc2 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	2201      	movs	r2, #1
 800ccbe:	601a      	str	r2, [r3, #0]
 800ccc0:	e002      	b.n	800ccc8 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	2200      	movs	r2, #0
 800ccc6:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ccc8:	68bb      	ldr	r3, [r7, #8]
 800ccca:	2202      	movs	r2, #2
 800cccc:	4619      	mov	r1, r3
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f000 fbb7 	bl	800d442 <USBD_CtlSendData>
              break;
 800ccd4:	e004      	b.n	800cce0 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ccd6:	6839      	ldr	r1, [r7, #0]
 800ccd8:	6878      	ldr	r0, [r7, #4]
 800ccda:	f000 fb41 	bl	800d360 <USBD_CtlError>
              break;
 800ccde:	bf00      	nop
          }
          break;
 800cce0:	e004      	b.n	800ccec <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800cce2:	6839      	ldr	r1, [r7, #0]
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f000 fb3b 	bl	800d360 <USBD_CtlError>
          break;
 800ccea:	bf00      	nop
      }
      break;
 800ccec:	e004      	b.n	800ccf8 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ccee:	6839      	ldr	r1, [r7, #0]
 800ccf0:	6878      	ldr	r0, [r7, #4]
 800ccf2:	f000 fb35 	bl	800d360 <USBD_CtlError>
      break;
 800ccf6:	bf00      	nop
  }

  return ret;
 800ccf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccfa:	4618      	mov	r0, r3
 800ccfc:	3710      	adds	r7, #16
 800ccfe:	46bd      	mov	sp, r7
 800cd00:	bd80      	pop	{r7, pc}
	...

0800cd04 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd04:	b580      	push	{r7, lr}
 800cd06:	b084      	sub	sp, #16
 800cd08:	af00      	add	r7, sp, #0
 800cd0a:	6078      	str	r0, [r7, #4]
 800cd0c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800cd12:	2300      	movs	r3, #0
 800cd14:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800cd16:	2300      	movs	r3, #0
 800cd18:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800cd1a:	683b      	ldr	r3, [r7, #0]
 800cd1c:	885b      	ldrh	r3, [r3, #2]
 800cd1e:	0a1b      	lsrs	r3, r3, #8
 800cd20:	b29b      	uxth	r3, r3
 800cd22:	3b01      	subs	r3, #1
 800cd24:	2b06      	cmp	r3, #6
 800cd26:	f200 8128 	bhi.w	800cf7a <USBD_GetDescriptor+0x276>
 800cd2a:	a201      	add	r2, pc, #4	; (adr r2, 800cd30 <USBD_GetDescriptor+0x2c>)
 800cd2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd30:	0800cd4d 	.word	0x0800cd4d
 800cd34:	0800cd65 	.word	0x0800cd65
 800cd38:	0800cda5 	.word	0x0800cda5
 800cd3c:	0800cf7b 	.word	0x0800cf7b
 800cd40:	0800cf7b 	.word	0x0800cf7b
 800cd44:	0800cf1b 	.word	0x0800cf1b
 800cd48:	0800cf47 	.word	0x0800cf47
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	687a      	ldr	r2, [r7, #4]
 800cd56:	7c12      	ldrb	r2, [r2, #16]
 800cd58:	f107 0108 	add.w	r1, r7, #8
 800cd5c:	4610      	mov	r0, r2
 800cd5e:	4798      	blx	r3
 800cd60:	60f8      	str	r0, [r7, #12]
      break;
 800cd62:	e112      	b.n	800cf8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	7c1b      	ldrb	r3, [r3, #16]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d10d      	bne.n	800cd88 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd74:	f107 0208 	add.w	r2, r7, #8
 800cd78:	4610      	mov	r0, r2
 800cd7a:	4798      	blx	r3
 800cd7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	3301      	adds	r3, #1
 800cd82:	2202      	movs	r2, #2
 800cd84:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800cd86:	e100      	b.n	800cf8a <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd90:	f107 0208 	add.w	r2, r7, #8
 800cd94:	4610      	mov	r0, r2
 800cd96:	4798      	blx	r3
 800cd98:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	3301      	adds	r3, #1
 800cd9e:	2202      	movs	r2, #2
 800cda0:	701a      	strb	r2, [r3, #0]
      break;
 800cda2:	e0f2      	b.n	800cf8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	885b      	ldrh	r3, [r3, #2]
 800cda8:	b2db      	uxtb	r3, r3
 800cdaa:	2b05      	cmp	r3, #5
 800cdac:	f200 80ac 	bhi.w	800cf08 <USBD_GetDescriptor+0x204>
 800cdb0:	a201      	add	r2, pc, #4	; (adr r2, 800cdb8 <USBD_GetDescriptor+0xb4>)
 800cdb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb6:	bf00      	nop
 800cdb8:	0800cdd1 	.word	0x0800cdd1
 800cdbc:	0800ce05 	.word	0x0800ce05
 800cdc0:	0800ce39 	.word	0x0800ce39
 800cdc4:	0800ce6d 	.word	0x0800ce6d
 800cdc8:	0800cea1 	.word	0x0800cea1
 800cdcc:	0800ced5 	.word	0x0800ced5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cdd6:	685b      	ldr	r3, [r3, #4]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d00b      	beq.n	800cdf4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cde2:	685b      	ldr	r3, [r3, #4]
 800cde4:	687a      	ldr	r2, [r7, #4]
 800cde6:	7c12      	ldrb	r2, [r2, #16]
 800cde8:	f107 0108 	add.w	r1, r7, #8
 800cdec:	4610      	mov	r0, r2
 800cdee:	4798      	blx	r3
 800cdf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cdf2:	e091      	b.n	800cf18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cdf4:	6839      	ldr	r1, [r7, #0]
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	f000 fab2 	bl	800d360 <USBD_CtlError>
            err++;
 800cdfc:	7afb      	ldrb	r3, [r7, #11]
 800cdfe:	3301      	adds	r3, #1
 800ce00:	72fb      	strb	r3, [r7, #11]
          break;
 800ce02:	e089      	b.n	800cf18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce0a:	689b      	ldr	r3, [r3, #8]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d00b      	beq.n	800ce28 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce16:	689b      	ldr	r3, [r3, #8]
 800ce18:	687a      	ldr	r2, [r7, #4]
 800ce1a:	7c12      	ldrb	r2, [r2, #16]
 800ce1c:	f107 0108 	add.w	r1, r7, #8
 800ce20:	4610      	mov	r0, r2
 800ce22:	4798      	blx	r3
 800ce24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce26:	e077      	b.n	800cf18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce28:	6839      	ldr	r1, [r7, #0]
 800ce2a:	6878      	ldr	r0, [r7, #4]
 800ce2c:	f000 fa98 	bl	800d360 <USBD_CtlError>
            err++;
 800ce30:	7afb      	ldrb	r3, [r7, #11]
 800ce32:	3301      	adds	r3, #1
 800ce34:	72fb      	strb	r3, [r7, #11]
          break;
 800ce36:	e06f      	b.n	800cf18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce3e:	68db      	ldr	r3, [r3, #12]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d00b      	beq.n	800ce5c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce4a:	68db      	ldr	r3, [r3, #12]
 800ce4c:	687a      	ldr	r2, [r7, #4]
 800ce4e:	7c12      	ldrb	r2, [r2, #16]
 800ce50:	f107 0108 	add.w	r1, r7, #8
 800ce54:	4610      	mov	r0, r2
 800ce56:	4798      	blx	r3
 800ce58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce5a:	e05d      	b.n	800cf18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce5c:	6839      	ldr	r1, [r7, #0]
 800ce5e:	6878      	ldr	r0, [r7, #4]
 800ce60:	f000 fa7e 	bl	800d360 <USBD_CtlError>
            err++;
 800ce64:	7afb      	ldrb	r3, [r7, #11]
 800ce66:	3301      	adds	r3, #1
 800ce68:	72fb      	strb	r3, [r7, #11]
          break;
 800ce6a:	e055      	b.n	800cf18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce72:	691b      	ldr	r3, [r3, #16]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d00b      	beq.n	800ce90 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce7e:	691b      	ldr	r3, [r3, #16]
 800ce80:	687a      	ldr	r2, [r7, #4]
 800ce82:	7c12      	ldrb	r2, [r2, #16]
 800ce84:	f107 0108 	add.w	r1, r7, #8
 800ce88:	4610      	mov	r0, r2
 800ce8a:	4798      	blx	r3
 800ce8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ce8e:	e043      	b.n	800cf18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ce90:	6839      	ldr	r1, [r7, #0]
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	f000 fa64 	bl	800d360 <USBD_CtlError>
            err++;
 800ce98:	7afb      	ldrb	r3, [r7, #11]
 800ce9a:	3301      	adds	r3, #1
 800ce9c:	72fb      	strb	r3, [r7, #11]
          break;
 800ce9e:	e03b      	b.n	800cf18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cea6:	695b      	ldr	r3, [r3, #20]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	d00b      	beq.n	800cec4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceb2:	695b      	ldr	r3, [r3, #20]
 800ceb4:	687a      	ldr	r2, [r7, #4]
 800ceb6:	7c12      	ldrb	r2, [r2, #16]
 800ceb8:	f107 0108 	add.w	r1, r7, #8
 800cebc:	4610      	mov	r0, r2
 800cebe:	4798      	blx	r3
 800cec0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cec2:	e029      	b.n	800cf18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cec4:	6839      	ldr	r1, [r7, #0]
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f000 fa4a 	bl	800d360 <USBD_CtlError>
            err++;
 800cecc:	7afb      	ldrb	r3, [r7, #11]
 800cece:	3301      	adds	r3, #1
 800ced0:	72fb      	strb	r3, [r7, #11]
          break;
 800ced2:	e021      	b.n	800cf18 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceda:	699b      	ldr	r3, [r3, #24]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d00b      	beq.n	800cef8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cee6:	699b      	ldr	r3, [r3, #24]
 800cee8:	687a      	ldr	r2, [r7, #4]
 800ceea:	7c12      	ldrb	r2, [r2, #16]
 800ceec:	f107 0108 	add.w	r1, r7, #8
 800cef0:	4610      	mov	r0, r2
 800cef2:	4798      	blx	r3
 800cef4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cef6:	e00f      	b.n	800cf18 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800cef8:	6839      	ldr	r1, [r7, #0]
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f000 fa30 	bl	800d360 <USBD_CtlError>
            err++;
 800cf00:	7afb      	ldrb	r3, [r7, #11]
 800cf02:	3301      	adds	r3, #1
 800cf04:	72fb      	strb	r3, [r7, #11]
          break;
 800cf06:	e007      	b.n	800cf18 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800cf08:	6839      	ldr	r1, [r7, #0]
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f000 fa28 	bl	800d360 <USBD_CtlError>
          err++;
 800cf10:	7afb      	ldrb	r3, [r7, #11]
 800cf12:	3301      	adds	r3, #1
 800cf14:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800cf16:	bf00      	nop
      }
      break;
 800cf18:	e037      	b.n	800cf8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	7c1b      	ldrb	r3, [r3, #16]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d109      	bne.n	800cf36 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf2a:	f107 0208 	add.w	r2, r7, #8
 800cf2e:	4610      	mov	r0, r2
 800cf30:	4798      	blx	r3
 800cf32:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf34:	e029      	b.n	800cf8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cf36:	6839      	ldr	r1, [r7, #0]
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f000 fa11 	bl	800d360 <USBD_CtlError>
        err++;
 800cf3e:	7afb      	ldrb	r3, [r7, #11]
 800cf40:	3301      	adds	r3, #1
 800cf42:	72fb      	strb	r3, [r7, #11]
      break;
 800cf44:	e021      	b.n	800cf8a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	7c1b      	ldrb	r3, [r3, #16]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d10d      	bne.n	800cf6a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cf54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf56:	f107 0208 	add.w	r2, r7, #8
 800cf5a:	4610      	mov	r0, r2
 800cf5c:	4798      	blx	r3
 800cf5e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	3301      	adds	r3, #1
 800cf64:	2207      	movs	r2, #7
 800cf66:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cf68:	e00f      	b.n	800cf8a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800cf6a:	6839      	ldr	r1, [r7, #0]
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	f000 f9f7 	bl	800d360 <USBD_CtlError>
        err++;
 800cf72:	7afb      	ldrb	r3, [r7, #11]
 800cf74:	3301      	adds	r3, #1
 800cf76:	72fb      	strb	r3, [r7, #11]
      break;
 800cf78:	e007      	b.n	800cf8a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800cf7a:	6839      	ldr	r1, [r7, #0]
 800cf7c:	6878      	ldr	r0, [r7, #4]
 800cf7e:	f000 f9ef 	bl	800d360 <USBD_CtlError>
      err++;
 800cf82:	7afb      	ldrb	r3, [r7, #11]
 800cf84:	3301      	adds	r3, #1
 800cf86:	72fb      	strb	r3, [r7, #11]
      break;
 800cf88:	bf00      	nop
  }

  if (err != 0U)
 800cf8a:	7afb      	ldrb	r3, [r7, #11]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d11e      	bne.n	800cfce <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800cf90:	683b      	ldr	r3, [r7, #0]
 800cf92:	88db      	ldrh	r3, [r3, #6]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d016      	beq.n	800cfc6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800cf98:	893b      	ldrh	r3, [r7, #8]
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d00e      	beq.n	800cfbc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800cf9e:	683b      	ldr	r3, [r7, #0]
 800cfa0:	88da      	ldrh	r2, [r3, #6]
 800cfa2:	893b      	ldrh	r3, [r7, #8]
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	bf28      	it	cs
 800cfa8:	4613      	movcs	r3, r2
 800cfaa:	b29b      	uxth	r3, r3
 800cfac:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800cfae:	893b      	ldrh	r3, [r7, #8]
 800cfb0:	461a      	mov	r2, r3
 800cfb2:	68f9      	ldr	r1, [r7, #12]
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f000 fa44 	bl	800d442 <USBD_CtlSendData>
 800cfba:	e009      	b.n	800cfd0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800cfbc:	6839      	ldr	r1, [r7, #0]
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f000 f9ce 	bl	800d360 <USBD_CtlError>
 800cfc4:	e004      	b.n	800cfd0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f000 fa95 	bl	800d4f6 <USBD_CtlSendStatus>
 800cfcc:	e000      	b.n	800cfd0 <USBD_GetDescriptor+0x2cc>
    return;
 800cfce:	bf00      	nop
  }
}
 800cfd0:	3710      	adds	r7, #16
 800cfd2:	46bd      	mov	sp, r7
 800cfd4:	bd80      	pop	{r7, pc}
 800cfd6:	bf00      	nop

0800cfd8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b084      	sub	sp, #16
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800cfe2:	683b      	ldr	r3, [r7, #0]
 800cfe4:	889b      	ldrh	r3, [r3, #4]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d131      	bne.n	800d04e <USBD_SetAddress+0x76>
 800cfea:	683b      	ldr	r3, [r7, #0]
 800cfec:	88db      	ldrh	r3, [r3, #6]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d12d      	bne.n	800d04e <USBD_SetAddress+0x76>
 800cff2:	683b      	ldr	r3, [r7, #0]
 800cff4:	885b      	ldrh	r3, [r3, #2]
 800cff6:	2b7f      	cmp	r3, #127	; 0x7f
 800cff8:	d829      	bhi.n	800d04e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	885b      	ldrh	r3, [r3, #2]
 800cffe:	b2db      	uxtb	r3, r3
 800d000:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d004:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d00c:	b2db      	uxtb	r3, r3
 800d00e:	2b03      	cmp	r3, #3
 800d010:	d104      	bne.n	800d01c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d012:	6839      	ldr	r1, [r7, #0]
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f000 f9a3 	bl	800d360 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d01a:	e01d      	b.n	800d058 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	7bfa      	ldrb	r2, [r7, #15]
 800d020:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d024:	7bfb      	ldrb	r3, [r7, #15]
 800d026:	4619      	mov	r1, r3
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f008 f9e3 	bl	80153f4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f000 fa61 	bl	800d4f6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d034:	7bfb      	ldrb	r3, [r7, #15]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d004      	beq.n	800d044 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2202      	movs	r2, #2
 800d03e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d042:	e009      	b.n	800d058 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	2201      	movs	r2, #1
 800d048:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d04c:	e004      	b.n	800d058 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d04e:	6839      	ldr	r1, [r7, #0]
 800d050:	6878      	ldr	r0, [r7, #4]
 800d052:	f000 f985 	bl	800d360 <USBD_CtlError>
  }
}
 800d056:	bf00      	nop
 800d058:	bf00      	nop
 800d05a:	3710      	adds	r7, #16
 800d05c:	46bd      	mov	sp, r7
 800d05e:	bd80      	pop	{r7, pc}

0800d060 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d060:	b580      	push	{r7, lr}
 800d062:	b084      	sub	sp, #16
 800d064:	af00      	add	r7, sp, #0
 800d066:	6078      	str	r0, [r7, #4]
 800d068:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d06a:	2300      	movs	r3, #0
 800d06c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	885b      	ldrh	r3, [r3, #2]
 800d072:	b2da      	uxtb	r2, r3
 800d074:	4b4c      	ldr	r3, [pc, #304]	; (800d1a8 <USBD_SetConfig+0x148>)
 800d076:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d078:	4b4b      	ldr	r3, [pc, #300]	; (800d1a8 <USBD_SetConfig+0x148>)
 800d07a:	781b      	ldrb	r3, [r3, #0]
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d905      	bls.n	800d08c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d080:	6839      	ldr	r1, [r7, #0]
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f000 f96c 	bl	800d360 <USBD_CtlError>
    return USBD_FAIL;
 800d088:	2303      	movs	r3, #3
 800d08a:	e088      	b.n	800d19e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d092:	b2db      	uxtb	r3, r3
 800d094:	2b02      	cmp	r3, #2
 800d096:	d002      	beq.n	800d09e <USBD_SetConfig+0x3e>
 800d098:	2b03      	cmp	r3, #3
 800d09a:	d025      	beq.n	800d0e8 <USBD_SetConfig+0x88>
 800d09c:	e071      	b.n	800d182 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d09e:	4b42      	ldr	r3, [pc, #264]	; (800d1a8 <USBD_SetConfig+0x148>)
 800d0a0:	781b      	ldrb	r3, [r3, #0]
 800d0a2:	2b00      	cmp	r3, #0
 800d0a4:	d01c      	beq.n	800d0e0 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800d0a6:	4b40      	ldr	r3, [pc, #256]	; (800d1a8 <USBD_SetConfig+0x148>)
 800d0a8:	781b      	ldrb	r3, [r3, #0]
 800d0aa:	461a      	mov	r2, r3
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d0b0:	4b3d      	ldr	r3, [pc, #244]	; (800d1a8 <USBD_SetConfig+0x148>)
 800d0b2:	781b      	ldrb	r3, [r3, #0]
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	6878      	ldr	r0, [r7, #4]
 800d0b8:	f7ff f948 	bl	800c34c <USBD_SetClassConfig>
 800d0bc:	4603      	mov	r3, r0
 800d0be:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d0c0:	7bfb      	ldrb	r3, [r7, #15]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d004      	beq.n	800d0d0 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800d0c6:	6839      	ldr	r1, [r7, #0]
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f000 f949 	bl	800d360 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d0ce:	e065      	b.n	800d19c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d0d0:	6878      	ldr	r0, [r7, #4]
 800d0d2:	f000 fa10 	bl	800d4f6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2203      	movs	r2, #3
 800d0da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d0de:	e05d      	b.n	800d19c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d0e0:	6878      	ldr	r0, [r7, #4]
 800d0e2:	f000 fa08 	bl	800d4f6 <USBD_CtlSendStatus>
      break;
 800d0e6:	e059      	b.n	800d19c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d0e8:	4b2f      	ldr	r3, [pc, #188]	; (800d1a8 <USBD_SetConfig+0x148>)
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d112      	bne.n	800d116 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2202      	movs	r2, #2
 800d0f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d0f8:	4b2b      	ldr	r3, [pc, #172]	; (800d1a8 <USBD_SetConfig+0x148>)
 800d0fa:	781b      	ldrb	r3, [r3, #0]
 800d0fc:	461a      	mov	r2, r3
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d102:	4b29      	ldr	r3, [pc, #164]	; (800d1a8 <USBD_SetConfig+0x148>)
 800d104:	781b      	ldrb	r3, [r3, #0]
 800d106:	4619      	mov	r1, r3
 800d108:	6878      	ldr	r0, [r7, #4]
 800d10a:	f7ff f93b 	bl	800c384 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f000 f9f1 	bl	800d4f6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d114:	e042      	b.n	800d19c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800d116:	4b24      	ldr	r3, [pc, #144]	; (800d1a8 <USBD_SetConfig+0x148>)
 800d118:	781b      	ldrb	r3, [r3, #0]
 800d11a:	461a      	mov	r2, r3
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	685b      	ldr	r3, [r3, #4]
 800d120:	429a      	cmp	r2, r3
 800d122:	d02a      	beq.n	800d17a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	685b      	ldr	r3, [r3, #4]
 800d128:	b2db      	uxtb	r3, r3
 800d12a:	4619      	mov	r1, r3
 800d12c:	6878      	ldr	r0, [r7, #4]
 800d12e:	f7ff f929 	bl	800c384 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d132:	4b1d      	ldr	r3, [pc, #116]	; (800d1a8 <USBD_SetConfig+0x148>)
 800d134:	781b      	ldrb	r3, [r3, #0]
 800d136:	461a      	mov	r2, r3
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d13c:	4b1a      	ldr	r3, [pc, #104]	; (800d1a8 <USBD_SetConfig+0x148>)
 800d13e:	781b      	ldrb	r3, [r3, #0]
 800d140:	4619      	mov	r1, r3
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f7ff f902 	bl	800c34c <USBD_SetClassConfig>
 800d148:	4603      	mov	r3, r0
 800d14a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d14c:	7bfb      	ldrb	r3, [r7, #15]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d00f      	beq.n	800d172 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800d152:	6839      	ldr	r1, [r7, #0]
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f000 f903 	bl	800d360 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	685b      	ldr	r3, [r3, #4]
 800d15e:	b2db      	uxtb	r3, r3
 800d160:	4619      	mov	r1, r3
 800d162:	6878      	ldr	r0, [r7, #4]
 800d164:	f7ff f90e 	bl	800c384 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	2202      	movs	r2, #2
 800d16c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d170:	e014      	b.n	800d19c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 f9bf 	bl	800d4f6 <USBD_CtlSendStatus>
      break;
 800d178:	e010      	b.n	800d19c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800d17a:	6878      	ldr	r0, [r7, #4]
 800d17c:	f000 f9bb 	bl	800d4f6 <USBD_CtlSendStatus>
      break;
 800d180:	e00c      	b.n	800d19c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800d182:	6839      	ldr	r1, [r7, #0]
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f000 f8eb 	bl	800d360 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d18a:	4b07      	ldr	r3, [pc, #28]	; (800d1a8 <USBD_SetConfig+0x148>)
 800d18c:	781b      	ldrb	r3, [r3, #0]
 800d18e:	4619      	mov	r1, r3
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f7ff f8f7 	bl	800c384 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d196:	2303      	movs	r3, #3
 800d198:	73fb      	strb	r3, [r7, #15]
      break;
 800d19a:	bf00      	nop
  }

  return ret;
 800d19c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3710      	adds	r7, #16
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	20000788 	.word	0x20000788

0800d1ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b082      	sub	sp, #8
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d1b6:	683b      	ldr	r3, [r7, #0]
 800d1b8:	88db      	ldrh	r3, [r3, #6]
 800d1ba:	2b01      	cmp	r3, #1
 800d1bc:	d004      	beq.n	800d1c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d1be:	6839      	ldr	r1, [r7, #0]
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f000 f8cd 	bl	800d360 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d1c6:	e023      	b.n	800d210 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1ce:	b2db      	uxtb	r3, r3
 800d1d0:	2b02      	cmp	r3, #2
 800d1d2:	dc02      	bgt.n	800d1da <USBD_GetConfig+0x2e>
 800d1d4:	2b00      	cmp	r3, #0
 800d1d6:	dc03      	bgt.n	800d1e0 <USBD_GetConfig+0x34>
 800d1d8:	e015      	b.n	800d206 <USBD_GetConfig+0x5a>
 800d1da:	2b03      	cmp	r3, #3
 800d1dc:	d00b      	beq.n	800d1f6 <USBD_GetConfig+0x4a>
 800d1de:	e012      	b.n	800d206 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	3308      	adds	r3, #8
 800d1ea:	2201      	movs	r2, #1
 800d1ec:	4619      	mov	r1, r3
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f000 f927 	bl	800d442 <USBD_CtlSendData>
        break;
 800d1f4:	e00c      	b.n	800d210 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	3304      	adds	r3, #4
 800d1fa:	2201      	movs	r2, #1
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	6878      	ldr	r0, [r7, #4]
 800d200:	f000 f91f 	bl	800d442 <USBD_CtlSendData>
        break;
 800d204:	e004      	b.n	800d210 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d206:	6839      	ldr	r1, [r7, #0]
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f000 f8a9 	bl	800d360 <USBD_CtlError>
        break;
 800d20e:	bf00      	nop
}
 800d210:	bf00      	nop
 800d212:	3708      	adds	r7, #8
 800d214:	46bd      	mov	sp, r7
 800d216:	bd80      	pop	{r7, pc}

0800d218 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b082      	sub	sp, #8
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d228:	b2db      	uxtb	r3, r3
 800d22a:	3b01      	subs	r3, #1
 800d22c:	2b02      	cmp	r3, #2
 800d22e:	d81e      	bhi.n	800d26e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d230:	683b      	ldr	r3, [r7, #0]
 800d232:	88db      	ldrh	r3, [r3, #6]
 800d234:	2b02      	cmp	r3, #2
 800d236:	d004      	beq.n	800d242 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d238:	6839      	ldr	r1, [r7, #0]
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f000 f890 	bl	800d360 <USBD_CtlError>
        break;
 800d240:	e01a      	b.n	800d278 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	2201      	movs	r2, #1
 800d246:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d005      	beq.n	800d25e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	68db      	ldr	r3, [r3, #12]
 800d256:	f043 0202 	orr.w	r2, r3, #2
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	330c      	adds	r3, #12
 800d262:	2202      	movs	r2, #2
 800d264:	4619      	mov	r1, r3
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f000 f8eb 	bl	800d442 <USBD_CtlSendData>
      break;
 800d26c:	e004      	b.n	800d278 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d26e:	6839      	ldr	r1, [r7, #0]
 800d270:	6878      	ldr	r0, [r7, #4]
 800d272:	f000 f875 	bl	800d360 <USBD_CtlError>
      break;
 800d276:	bf00      	nop
  }
}
 800d278:	bf00      	nop
 800d27a:	3708      	adds	r7, #8
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b082      	sub	sp, #8
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
 800d288:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d28a:	683b      	ldr	r3, [r7, #0]
 800d28c:	885b      	ldrh	r3, [r3, #2]
 800d28e:	2b01      	cmp	r3, #1
 800d290:	d106      	bne.n	800d2a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	2201      	movs	r2, #1
 800d296:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d29a:	6878      	ldr	r0, [r7, #4]
 800d29c:	f000 f92b 	bl	800d4f6 <USBD_CtlSendStatus>
  }
}
 800d2a0:	bf00      	nop
 800d2a2:	3708      	adds	r7, #8
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bd80      	pop	{r7, pc}

0800d2a8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d2a8:	b580      	push	{r7, lr}
 800d2aa:	b082      	sub	sp, #8
 800d2ac:	af00      	add	r7, sp, #0
 800d2ae:	6078      	str	r0, [r7, #4]
 800d2b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2b8:	b2db      	uxtb	r3, r3
 800d2ba:	3b01      	subs	r3, #1
 800d2bc:	2b02      	cmp	r3, #2
 800d2be:	d80b      	bhi.n	800d2d8 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d2c0:	683b      	ldr	r3, [r7, #0]
 800d2c2:	885b      	ldrh	r3, [r3, #2]
 800d2c4:	2b01      	cmp	r3, #1
 800d2c6:	d10c      	bne.n	800d2e2 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f000 f910 	bl	800d4f6 <USBD_CtlSendStatus>
      }
      break;
 800d2d6:	e004      	b.n	800d2e2 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d2d8:	6839      	ldr	r1, [r7, #0]
 800d2da:	6878      	ldr	r0, [r7, #4]
 800d2dc:	f000 f840 	bl	800d360 <USBD_CtlError>
      break;
 800d2e0:	e000      	b.n	800d2e4 <USBD_ClrFeature+0x3c>
      break;
 800d2e2:	bf00      	nop
  }
}
 800d2e4:	bf00      	nop
 800d2e6:	3708      	adds	r7, #8
 800d2e8:	46bd      	mov	sp, r7
 800d2ea:	bd80      	pop	{r7, pc}

0800d2ec <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d2ec:	b580      	push	{r7, lr}
 800d2ee:	b084      	sub	sp, #16
 800d2f0:	af00      	add	r7, sp, #0
 800d2f2:	6078      	str	r0, [r7, #4]
 800d2f4:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d2f6:	683b      	ldr	r3, [r7, #0]
 800d2f8:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	781a      	ldrb	r2, [r3, #0]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	3301      	adds	r3, #1
 800d306:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d308:	68fb      	ldr	r3, [r7, #12]
 800d30a:	781a      	ldrb	r2, [r3, #0]
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d310:	68fb      	ldr	r3, [r7, #12]
 800d312:	3301      	adds	r3, #1
 800d314:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d316:	68f8      	ldr	r0, [r7, #12]
 800d318:	f7ff fabb 	bl	800c892 <SWAPBYTE>
 800d31c:	4603      	mov	r3, r0
 800d31e:	461a      	mov	r2, r3
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	3301      	adds	r3, #1
 800d328:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	3301      	adds	r3, #1
 800d32e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d330:	68f8      	ldr	r0, [r7, #12]
 800d332:	f7ff faae 	bl	800c892 <SWAPBYTE>
 800d336:	4603      	mov	r3, r0
 800d338:	461a      	mov	r2, r3
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	3301      	adds	r3, #1
 800d342:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	3301      	adds	r3, #1
 800d348:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d34a:	68f8      	ldr	r0, [r7, #12]
 800d34c:	f7ff faa1 	bl	800c892 <SWAPBYTE>
 800d350:	4603      	mov	r3, r0
 800d352:	461a      	mov	r2, r3
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	80da      	strh	r2, [r3, #6]
}
 800d358:	bf00      	nop
 800d35a:	3710      	adds	r7, #16
 800d35c:	46bd      	mov	sp, r7
 800d35e:	bd80      	pop	{r7, pc}

0800d360 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b082      	sub	sp, #8
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d36a:	2180      	movs	r1, #128	; 0x80
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f007 ffd7 	bl	8015320 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d372:	2100      	movs	r1, #0
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f007 ffd3 	bl	8015320 <USBD_LL_StallEP>
}
 800d37a:	bf00      	nop
 800d37c:	3708      	adds	r7, #8
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}

0800d382 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d382:	b580      	push	{r7, lr}
 800d384:	b086      	sub	sp, #24
 800d386:	af00      	add	r7, sp, #0
 800d388:	60f8      	str	r0, [r7, #12]
 800d38a:	60b9      	str	r1, [r7, #8]
 800d38c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d38e:	2300      	movs	r3, #0
 800d390:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d036      	beq.n	800d406 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d39c:	6938      	ldr	r0, [r7, #16]
 800d39e:	f000 f836 	bl	800d40e <USBD_GetLen>
 800d3a2:	4603      	mov	r3, r0
 800d3a4:	3301      	adds	r3, #1
 800d3a6:	b29b      	uxth	r3, r3
 800d3a8:	005b      	lsls	r3, r3, #1
 800d3aa:	b29a      	uxth	r2, r3
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d3b0:	7dfb      	ldrb	r3, [r7, #23]
 800d3b2:	68ba      	ldr	r2, [r7, #8]
 800d3b4:	4413      	add	r3, r2
 800d3b6:	687a      	ldr	r2, [r7, #4]
 800d3b8:	7812      	ldrb	r2, [r2, #0]
 800d3ba:	701a      	strb	r2, [r3, #0]
  idx++;
 800d3bc:	7dfb      	ldrb	r3, [r7, #23]
 800d3be:	3301      	adds	r3, #1
 800d3c0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d3c2:	7dfb      	ldrb	r3, [r7, #23]
 800d3c4:	68ba      	ldr	r2, [r7, #8]
 800d3c6:	4413      	add	r3, r2
 800d3c8:	2203      	movs	r2, #3
 800d3ca:	701a      	strb	r2, [r3, #0]
  idx++;
 800d3cc:	7dfb      	ldrb	r3, [r7, #23]
 800d3ce:	3301      	adds	r3, #1
 800d3d0:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d3d2:	e013      	b.n	800d3fc <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d3d4:	7dfb      	ldrb	r3, [r7, #23]
 800d3d6:	68ba      	ldr	r2, [r7, #8]
 800d3d8:	4413      	add	r3, r2
 800d3da:	693a      	ldr	r2, [r7, #16]
 800d3dc:	7812      	ldrb	r2, [r2, #0]
 800d3de:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	613b      	str	r3, [r7, #16]
    idx++;
 800d3e6:	7dfb      	ldrb	r3, [r7, #23]
 800d3e8:	3301      	adds	r3, #1
 800d3ea:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d3ec:	7dfb      	ldrb	r3, [r7, #23]
 800d3ee:	68ba      	ldr	r2, [r7, #8]
 800d3f0:	4413      	add	r3, r2
 800d3f2:	2200      	movs	r2, #0
 800d3f4:	701a      	strb	r2, [r3, #0]
    idx++;
 800d3f6:	7dfb      	ldrb	r3, [r7, #23]
 800d3f8:	3301      	adds	r3, #1
 800d3fa:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d3fc:	693b      	ldr	r3, [r7, #16]
 800d3fe:	781b      	ldrb	r3, [r3, #0]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d1e7      	bne.n	800d3d4 <USBD_GetString+0x52>
 800d404:	e000      	b.n	800d408 <USBD_GetString+0x86>
    return;
 800d406:	bf00      	nop
  }
}
 800d408:	3718      	adds	r7, #24
 800d40a:	46bd      	mov	sp, r7
 800d40c:	bd80      	pop	{r7, pc}

0800d40e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d40e:	b480      	push	{r7}
 800d410:	b085      	sub	sp, #20
 800d412:	af00      	add	r7, sp, #0
 800d414:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d416:	2300      	movs	r3, #0
 800d418:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d41a:	687b      	ldr	r3, [r7, #4]
 800d41c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d41e:	e005      	b.n	800d42c <USBD_GetLen+0x1e>
  {
    len++;
 800d420:	7bfb      	ldrb	r3, [r7, #15]
 800d422:	3301      	adds	r3, #1
 800d424:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d426:	68bb      	ldr	r3, [r7, #8]
 800d428:	3301      	adds	r3, #1
 800d42a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d42c:	68bb      	ldr	r3, [r7, #8]
 800d42e:	781b      	ldrb	r3, [r3, #0]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d1f5      	bne.n	800d420 <USBD_GetLen+0x12>
  }

  return len;
 800d434:	7bfb      	ldrb	r3, [r7, #15]
}
 800d436:	4618      	mov	r0, r3
 800d438:	3714      	adds	r7, #20
 800d43a:	46bd      	mov	sp, r7
 800d43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d440:	4770      	bx	lr

0800d442 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d442:	b580      	push	{r7, lr}
 800d444:	b084      	sub	sp, #16
 800d446:	af00      	add	r7, sp, #0
 800d448:	60f8      	str	r0, [r7, #12]
 800d44a:	60b9      	str	r1, [r7, #8]
 800d44c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	2202      	movs	r2, #2
 800d452:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	687a      	ldr	r2, [r7, #4]
 800d45a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	687a      	ldr	r2, [r7, #4]
 800d460:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	68ba      	ldr	r2, [r7, #8]
 800d466:	2100      	movs	r1, #0
 800d468:	68f8      	ldr	r0, [r7, #12]
 800d46a:	f007 ffe2 	bl	8015432 <USBD_LL_Transmit>

  return USBD_OK;
 800d46e:	2300      	movs	r3, #0
}
 800d470:	4618      	mov	r0, r3
 800d472:	3710      	adds	r7, #16
 800d474:	46bd      	mov	sp, r7
 800d476:	bd80      	pop	{r7, pc}

0800d478 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d478:	b580      	push	{r7, lr}
 800d47a:	b084      	sub	sp, #16
 800d47c:	af00      	add	r7, sp, #0
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	60b9      	str	r1, [r7, #8]
 800d482:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	68ba      	ldr	r2, [r7, #8]
 800d488:	2100      	movs	r1, #0
 800d48a:	68f8      	ldr	r0, [r7, #12]
 800d48c:	f007 ffd1 	bl	8015432 <USBD_LL_Transmit>

  return USBD_OK;
 800d490:	2300      	movs	r3, #0
}
 800d492:	4618      	mov	r0, r3
 800d494:	3710      	adds	r7, #16
 800d496:	46bd      	mov	sp, r7
 800d498:	bd80      	pop	{r7, pc}

0800d49a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d49a:	b580      	push	{r7, lr}
 800d49c:	b084      	sub	sp, #16
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	60f8      	str	r0, [r7, #12]
 800d4a2:	60b9      	str	r1, [r7, #8]
 800d4a4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2203      	movs	r2, #3
 800d4aa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	687a      	ldr	r2, [r7, #4]
 800d4b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	687a      	ldr	r2, [r7, #4]
 800d4ba:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	68ba      	ldr	r2, [r7, #8]
 800d4c2:	2100      	movs	r1, #0
 800d4c4:	68f8      	ldr	r0, [r7, #12]
 800d4c6:	f007 ffd5 	bl	8015474 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d4ca:	2300      	movs	r3, #0
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3710      	adds	r7, #16
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}

0800d4d4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	60f8      	str	r0, [r7, #12]
 800d4dc:	60b9      	str	r1, [r7, #8]
 800d4de:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	68ba      	ldr	r2, [r7, #8]
 800d4e4:	2100      	movs	r1, #0
 800d4e6:	68f8      	ldr	r0, [r7, #12]
 800d4e8:	f007 ffc4 	bl	8015474 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d4ec:	2300      	movs	r3, #0
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3710      	adds	r7, #16
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}

0800d4f6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d4f6:	b580      	push	{r7, lr}
 800d4f8:	b082      	sub	sp, #8
 800d4fa:	af00      	add	r7, sp, #0
 800d4fc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2204      	movs	r2, #4
 800d502:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d506:	2300      	movs	r3, #0
 800d508:	2200      	movs	r2, #0
 800d50a:	2100      	movs	r1, #0
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	f007 ff90 	bl	8015432 <USBD_LL_Transmit>

  return USBD_OK;
 800d512:	2300      	movs	r3, #0
}
 800d514:	4618      	mov	r0, r3
 800d516:	3708      	adds	r7, #8
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	2205      	movs	r2, #5
 800d528:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d52c:	2300      	movs	r3, #0
 800d52e:	2200      	movs	r2, #0
 800d530:	2100      	movs	r1, #0
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f007 ff9e 	bl	8015474 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d538:	2300      	movs	r3, #0
}
 800d53a:	4618      	mov	r0, r3
 800d53c:	3708      	adds	r7, #8
 800d53e:	46bd      	mov	sp, r7
 800d540:	bd80      	pop	{r7, pc}
	...

0800d544 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d544:	b580      	push	{r7, lr}
 800d546:	b084      	sub	sp, #16
 800d548:	af00      	add	r7, sp, #0
 800d54a:	4603      	mov	r3, r0
 800d54c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d54e:	79fb      	ldrb	r3, [r7, #7]
 800d550:	4a08      	ldr	r2, [pc, #32]	; (800d574 <disk_status+0x30>)
 800d552:	009b      	lsls	r3, r3, #2
 800d554:	4413      	add	r3, r2
 800d556:	685b      	ldr	r3, [r3, #4]
 800d558:	685b      	ldr	r3, [r3, #4]
 800d55a:	79fa      	ldrb	r2, [r7, #7]
 800d55c:	4905      	ldr	r1, [pc, #20]	; (800d574 <disk_status+0x30>)
 800d55e:	440a      	add	r2, r1
 800d560:	7a12      	ldrb	r2, [r2, #8]
 800d562:	4610      	mov	r0, r2
 800d564:	4798      	blx	r3
 800d566:	4603      	mov	r3, r0
 800d568:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d56a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d56c:	4618      	mov	r0, r3
 800d56e:	3710      	adds	r7, #16
 800d570:	46bd      	mov	sp, r7
 800d572:	bd80      	pop	{r7, pc}
 800d574:	200007b4 	.word	0x200007b4

0800d578 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d578:	b580      	push	{r7, lr}
 800d57a:	b084      	sub	sp, #16
 800d57c:	af00      	add	r7, sp, #0
 800d57e:	4603      	mov	r3, r0
 800d580:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d582:	2300      	movs	r3, #0
 800d584:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d586:	79fb      	ldrb	r3, [r7, #7]
 800d588:	4a0d      	ldr	r2, [pc, #52]	; (800d5c0 <disk_initialize+0x48>)
 800d58a:	5cd3      	ldrb	r3, [r2, r3]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d111      	bne.n	800d5b4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d590:	79fb      	ldrb	r3, [r7, #7]
 800d592:	4a0b      	ldr	r2, [pc, #44]	; (800d5c0 <disk_initialize+0x48>)
 800d594:	2101      	movs	r1, #1
 800d596:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d598:	79fb      	ldrb	r3, [r7, #7]
 800d59a:	4a09      	ldr	r2, [pc, #36]	; (800d5c0 <disk_initialize+0x48>)
 800d59c:	009b      	lsls	r3, r3, #2
 800d59e:	4413      	add	r3, r2
 800d5a0:	685b      	ldr	r3, [r3, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	79fa      	ldrb	r2, [r7, #7]
 800d5a6:	4906      	ldr	r1, [pc, #24]	; (800d5c0 <disk_initialize+0x48>)
 800d5a8:	440a      	add	r2, r1
 800d5aa:	7a12      	ldrb	r2, [r2, #8]
 800d5ac:	4610      	mov	r0, r2
 800d5ae:	4798      	blx	r3
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3710      	adds	r7, #16
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	200007b4 	.word	0x200007b4

0800d5c4 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d5c4:	b590      	push	{r4, r7, lr}
 800d5c6:	b087      	sub	sp, #28
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	60b9      	str	r1, [r7, #8]
 800d5cc:	607a      	str	r2, [r7, #4]
 800d5ce:	603b      	str	r3, [r7, #0]
 800d5d0:	4603      	mov	r3, r0
 800d5d2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d5d4:	7bfb      	ldrb	r3, [r7, #15]
 800d5d6:	4a0a      	ldr	r2, [pc, #40]	; (800d600 <disk_read+0x3c>)
 800d5d8:	009b      	lsls	r3, r3, #2
 800d5da:	4413      	add	r3, r2
 800d5dc:	685b      	ldr	r3, [r3, #4]
 800d5de:	689c      	ldr	r4, [r3, #8]
 800d5e0:	7bfb      	ldrb	r3, [r7, #15]
 800d5e2:	4a07      	ldr	r2, [pc, #28]	; (800d600 <disk_read+0x3c>)
 800d5e4:	4413      	add	r3, r2
 800d5e6:	7a18      	ldrb	r0, [r3, #8]
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	687a      	ldr	r2, [r7, #4]
 800d5ec:	68b9      	ldr	r1, [r7, #8]
 800d5ee:	47a0      	blx	r4
 800d5f0:	4603      	mov	r3, r0
 800d5f2:	75fb      	strb	r3, [r7, #23]
  return res;
 800d5f4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	371c      	adds	r7, #28
 800d5fa:	46bd      	mov	sp, r7
 800d5fc:	bd90      	pop	{r4, r7, pc}
 800d5fe:	bf00      	nop
 800d600:	200007b4 	.word	0x200007b4

0800d604 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d604:	b590      	push	{r4, r7, lr}
 800d606:	b087      	sub	sp, #28
 800d608:	af00      	add	r7, sp, #0
 800d60a:	60b9      	str	r1, [r7, #8]
 800d60c:	607a      	str	r2, [r7, #4]
 800d60e:	603b      	str	r3, [r7, #0]
 800d610:	4603      	mov	r3, r0
 800d612:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d614:	7bfb      	ldrb	r3, [r7, #15]
 800d616:	4a0a      	ldr	r2, [pc, #40]	; (800d640 <disk_write+0x3c>)
 800d618:	009b      	lsls	r3, r3, #2
 800d61a:	4413      	add	r3, r2
 800d61c:	685b      	ldr	r3, [r3, #4]
 800d61e:	68dc      	ldr	r4, [r3, #12]
 800d620:	7bfb      	ldrb	r3, [r7, #15]
 800d622:	4a07      	ldr	r2, [pc, #28]	; (800d640 <disk_write+0x3c>)
 800d624:	4413      	add	r3, r2
 800d626:	7a18      	ldrb	r0, [r3, #8]
 800d628:	683b      	ldr	r3, [r7, #0]
 800d62a:	687a      	ldr	r2, [r7, #4]
 800d62c:	68b9      	ldr	r1, [r7, #8]
 800d62e:	47a0      	blx	r4
 800d630:	4603      	mov	r3, r0
 800d632:	75fb      	strb	r3, [r7, #23]
  return res;
 800d634:	7dfb      	ldrb	r3, [r7, #23]
}
 800d636:	4618      	mov	r0, r3
 800d638:	371c      	adds	r7, #28
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd90      	pop	{r4, r7, pc}
 800d63e:	bf00      	nop
 800d640:	200007b4 	.word	0x200007b4

0800d644 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	4603      	mov	r3, r0
 800d64c:	603a      	str	r2, [r7, #0]
 800d64e:	71fb      	strb	r3, [r7, #7]
 800d650:	460b      	mov	r3, r1
 800d652:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d654:	79fb      	ldrb	r3, [r7, #7]
 800d656:	4a09      	ldr	r2, [pc, #36]	; (800d67c <disk_ioctl+0x38>)
 800d658:	009b      	lsls	r3, r3, #2
 800d65a:	4413      	add	r3, r2
 800d65c:	685b      	ldr	r3, [r3, #4]
 800d65e:	691b      	ldr	r3, [r3, #16]
 800d660:	79fa      	ldrb	r2, [r7, #7]
 800d662:	4906      	ldr	r1, [pc, #24]	; (800d67c <disk_ioctl+0x38>)
 800d664:	440a      	add	r2, r1
 800d666:	7a10      	ldrb	r0, [r2, #8]
 800d668:	79b9      	ldrb	r1, [r7, #6]
 800d66a:	683a      	ldr	r2, [r7, #0]
 800d66c:	4798      	blx	r3
 800d66e:	4603      	mov	r3, r0
 800d670:	73fb      	strb	r3, [r7, #15]
  return res;
 800d672:	7bfb      	ldrb	r3, [r7, #15]
}
 800d674:	4618      	mov	r0, r3
 800d676:	3710      	adds	r7, #16
 800d678:	46bd      	mov	sp, r7
 800d67a:	bd80      	pop	{r7, pc}
 800d67c:	200007b4 	.word	0x200007b4

0800d680 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d680:	b480      	push	{r7}
 800d682:	b085      	sub	sp, #20
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	3301      	adds	r3, #1
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d690:	89fb      	ldrh	r3, [r7, #14]
 800d692:	021b      	lsls	r3, r3, #8
 800d694:	b21a      	sxth	r2, r3
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	b21b      	sxth	r3, r3
 800d69c:	4313      	orrs	r3, r2
 800d69e:	b21b      	sxth	r3, r3
 800d6a0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d6a2:	89fb      	ldrh	r3, [r7, #14]
}
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	3714      	adds	r7, #20
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ae:	4770      	bx	lr

0800d6b0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d6b0:	b480      	push	{r7}
 800d6b2:	b085      	sub	sp, #20
 800d6b4:	af00      	add	r7, sp, #0
 800d6b6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	3303      	adds	r3, #3
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	021b      	lsls	r3, r3, #8
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	3202      	adds	r2, #2
 800d6c8:	7812      	ldrb	r2, [r2, #0]
 800d6ca:	4313      	orrs	r3, r2
 800d6cc:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	021b      	lsls	r3, r3, #8
 800d6d2:	687a      	ldr	r2, [r7, #4]
 800d6d4:	3201      	adds	r2, #1
 800d6d6:	7812      	ldrb	r2, [r2, #0]
 800d6d8:	4313      	orrs	r3, r2
 800d6da:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	021b      	lsls	r3, r3, #8
 800d6e0:	687a      	ldr	r2, [r7, #4]
 800d6e2:	7812      	ldrb	r2, [r2, #0]
 800d6e4:	4313      	orrs	r3, r2
 800d6e6:	60fb      	str	r3, [r7, #12]
	return rv;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
}
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	3714      	adds	r7, #20
 800d6ee:	46bd      	mov	sp, r7
 800d6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f4:	4770      	bx	lr

0800d6f6 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d6f6:	b480      	push	{r7}
 800d6f8:	b083      	sub	sp, #12
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	6078      	str	r0, [r7, #4]
 800d6fe:	460b      	mov	r3, r1
 800d700:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	1c5a      	adds	r2, r3, #1
 800d706:	607a      	str	r2, [r7, #4]
 800d708:	887a      	ldrh	r2, [r7, #2]
 800d70a:	b2d2      	uxtb	r2, r2
 800d70c:	701a      	strb	r2, [r3, #0]
 800d70e:	887b      	ldrh	r3, [r7, #2]
 800d710:	0a1b      	lsrs	r3, r3, #8
 800d712:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	1c5a      	adds	r2, r3, #1
 800d718:	607a      	str	r2, [r7, #4]
 800d71a:	887a      	ldrh	r2, [r7, #2]
 800d71c:	b2d2      	uxtb	r2, r2
 800d71e:	701a      	strb	r2, [r3, #0]
}
 800d720:	bf00      	nop
 800d722:	370c      	adds	r7, #12
 800d724:	46bd      	mov	sp, r7
 800d726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72a:	4770      	bx	lr

0800d72c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d72c:	b480      	push	{r7}
 800d72e:	b083      	sub	sp, #12
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	1c5a      	adds	r2, r3, #1
 800d73a:	607a      	str	r2, [r7, #4]
 800d73c:	683a      	ldr	r2, [r7, #0]
 800d73e:	b2d2      	uxtb	r2, r2
 800d740:	701a      	strb	r2, [r3, #0]
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	0a1b      	lsrs	r3, r3, #8
 800d746:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	1c5a      	adds	r2, r3, #1
 800d74c:	607a      	str	r2, [r7, #4]
 800d74e:	683a      	ldr	r2, [r7, #0]
 800d750:	b2d2      	uxtb	r2, r2
 800d752:	701a      	strb	r2, [r3, #0]
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	0a1b      	lsrs	r3, r3, #8
 800d758:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	1c5a      	adds	r2, r3, #1
 800d75e:	607a      	str	r2, [r7, #4]
 800d760:	683a      	ldr	r2, [r7, #0]
 800d762:	b2d2      	uxtb	r2, r2
 800d764:	701a      	strb	r2, [r3, #0]
 800d766:	683b      	ldr	r3, [r7, #0]
 800d768:	0a1b      	lsrs	r3, r3, #8
 800d76a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	1c5a      	adds	r2, r3, #1
 800d770:	607a      	str	r2, [r7, #4]
 800d772:	683a      	ldr	r2, [r7, #0]
 800d774:	b2d2      	uxtb	r2, r2
 800d776:	701a      	strb	r2, [r3, #0]
}
 800d778:	bf00      	nop
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr

0800d784 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800d784:	b480      	push	{r7}
 800d786:	b087      	sub	sp, #28
 800d788:	af00      	add	r7, sp, #0
 800d78a:	60f8      	str	r0, [r7, #12]
 800d78c:	60b9      	str	r1, [r7, #8]
 800d78e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d00d      	beq.n	800d7ba <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800d79e:	693a      	ldr	r2, [r7, #16]
 800d7a0:	1c53      	adds	r3, r2, #1
 800d7a2:	613b      	str	r3, [r7, #16]
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	1c59      	adds	r1, r3, #1
 800d7a8:	6179      	str	r1, [r7, #20]
 800d7aa:	7812      	ldrb	r2, [r2, #0]
 800d7ac:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	3b01      	subs	r3, #1
 800d7b2:	607b      	str	r3, [r7, #4]
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d1f1      	bne.n	800d79e <mem_cpy+0x1a>
	}
}
 800d7ba:	bf00      	nop
 800d7bc:	371c      	adds	r7, #28
 800d7be:	46bd      	mov	sp, r7
 800d7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c4:	4770      	bx	lr

0800d7c6 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800d7c6:	b480      	push	{r7}
 800d7c8:	b087      	sub	sp, #28
 800d7ca:	af00      	add	r7, sp, #0
 800d7cc:	60f8      	str	r0, [r7, #12]
 800d7ce:	60b9      	str	r1, [r7, #8]
 800d7d0:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800d7d6:	697b      	ldr	r3, [r7, #20]
 800d7d8:	1c5a      	adds	r2, r3, #1
 800d7da:	617a      	str	r2, [r7, #20]
 800d7dc:	68ba      	ldr	r2, [r7, #8]
 800d7de:	b2d2      	uxtb	r2, r2
 800d7e0:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	3b01      	subs	r3, #1
 800d7e6:	607b      	str	r3, [r7, #4]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d1f3      	bne.n	800d7d6 <mem_set+0x10>
}
 800d7ee:	bf00      	nop
 800d7f0:	bf00      	nop
 800d7f2:	371c      	adds	r7, #28
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr

0800d7fc <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800d7fc:	b480      	push	{r7}
 800d7fe:	b089      	sub	sp, #36	; 0x24
 800d800:	af00      	add	r7, sp, #0
 800d802:	60f8      	str	r0, [r7, #12]
 800d804:	60b9      	str	r1, [r7, #8]
 800d806:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	61fb      	str	r3, [r7, #28]
 800d80c:	68bb      	ldr	r3, [r7, #8]
 800d80e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800d810:	2300      	movs	r3, #0
 800d812:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800d814:	69fb      	ldr	r3, [r7, #28]
 800d816:	1c5a      	adds	r2, r3, #1
 800d818:	61fa      	str	r2, [r7, #28]
 800d81a:	781b      	ldrb	r3, [r3, #0]
 800d81c:	4619      	mov	r1, r3
 800d81e:	69bb      	ldr	r3, [r7, #24]
 800d820:	1c5a      	adds	r2, r3, #1
 800d822:	61ba      	str	r2, [r7, #24]
 800d824:	781b      	ldrb	r3, [r3, #0]
 800d826:	1acb      	subs	r3, r1, r3
 800d828:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	3b01      	subs	r3, #1
 800d82e:	607b      	str	r3, [r7, #4]
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d002      	beq.n	800d83c <mem_cmp+0x40>
 800d836:	697b      	ldr	r3, [r7, #20]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d0eb      	beq.n	800d814 <mem_cmp+0x18>

	return r;
 800d83c:	697b      	ldr	r3, [r7, #20]
}
 800d83e:	4618      	mov	r0, r3
 800d840:	3724      	adds	r7, #36	; 0x24
 800d842:	46bd      	mov	sp, r7
 800d844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d848:	4770      	bx	lr

0800d84a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800d84a:	b480      	push	{r7}
 800d84c:	b083      	sub	sp, #12
 800d84e:	af00      	add	r7, sp, #0
 800d850:	6078      	str	r0, [r7, #4]
 800d852:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800d854:	e002      	b.n	800d85c <chk_chr+0x12>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	3301      	adds	r3, #1
 800d85a:	607b      	str	r3, [r7, #4]
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d005      	beq.n	800d870 <chk_chr+0x26>
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	781b      	ldrb	r3, [r3, #0]
 800d868:	461a      	mov	r2, r3
 800d86a:	683b      	ldr	r3, [r7, #0]
 800d86c:	4293      	cmp	r3, r2
 800d86e:	d1f2      	bne.n	800d856 <chk_chr+0xc>
	return *str;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	781b      	ldrb	r3, [r3, #0]
}
 800d874:	4618      	mov	r0, r3
 800d876:	370c      	adds	r7, #12
 800d878:	46bd      	mov	sp, r7
 800d87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d87e:	4770      	bx	lr

0800d880 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800d880:	b580      	push	{r7, lr}
 800d882:	b082      	sub	sp, #8
 800d884:	af00      	add	r7, sp, #0
 800d886:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d009      	beq.n	800d8a2 <lock_fs+0x22>
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	695b      	ldr	r3, [r3, #20]
 800d892:	4618      	mov	r0, r3
 800d894:	f003 f98d 	bl	8010bb2 <ff_req_grant>
 800d898:	4603      	mov	r3, r0
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d001      	beq.n	800d8a2 <lock_fs+0x22>
 800d89e:	2301      	movs	r3, #1
 800d8a0:	e000      	b.n	800d8a4 <lock_fs+0x24>
 800d8a2:	2300      	movs	r3, #0
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3708      	adds	r7, #8
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b082      	sub	sp, #8
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	460b      	mov	r3, r1
 800d8b6:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d00d      	beq.n	800d8da <unlock_fs+0x2e>
 800d8be:	78fb      	ldrb	r3, [r7, #3]
 800d8c0:	2b0c      	cmp	r3, #12
 800d8c2:	d00a      	beq.n	800d8da <unlock_fs+0x2e>
 800d8c4:	78fb      	ldrb	r3, [r7, #3]
 800d8c6:	2b0b      	cmp	r3, #11
 800d8c8:	d007      	beq.n	800d8da <unlock_fs+0x2e>
 800d8ca:	78fb      	ldrb	r3, [r7, #3]
 800d8cc:	2b0f      	cmp	r3, #15
 800d8ce:	d004      	beq.n	800d8da <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	695b      	ldr	r3, [r3, #20]
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	f003 f981 	bl	8010bdc <ff_rel_grant>
	}
}
 800d8da:	bf00      	nop
 800d8dc:	3708      	adds	r7, #8
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
	...

0800d8e4 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d8e4:	b480      	push	{r7}
 800d8e6:	b085      	sub	sp, #20
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
 800d8ec:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d8ee:	2300      	movs	r3, #0
 800d8f0:	60bb      	str	r3, [r7, #8]
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	60fb      	str	r3, [r7, #12]
 800d8f6:	e029      	b.n	800d94c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800d8f8:	4a27      	ldr	r2, [pc, #156]	; (800d998 <chk_lock+0xb4>)
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	011b      	lsls	r3, r3, #4
 800d8fe:	4413      	add	r3, r2
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d01d      	beq.n	800d942 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d906:	4a24      	ldr	r2, [pc, #144]	; (800d998 <chk_lock+0xb4>)
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	011b      	lsls	r3, r3, #4
 800d90c:	4413      	add	r3, r2
 800d90e:	681a      	ldr	r2, [r3, #0]
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	429a      	cmp	r2, r3
 800d916:	d116      	bne.n	800d946 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800d918:	4a1f      	ldr	r2, [pc, #124]	; (800d998 <chk_lock+0xb4>)
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	011b      	lsls	r3, r3, #4
 800d91e:	4413      	add	r3, r2
 800d920:	3304      	adds	r3, #4
 800d922:	681a      	ldr	r2, [r3, #0]
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800d928:	429a      	cmp	r2, r3
 800d92a:	d10c      	bne.n	800d946 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d92c:	4a1a      	ldr	r2, [pc, #104]	; (800d998 <chk_lock+0xb4>)
 800d92e:	68fb      	ldr	r3, [r7, #12]
 800d930:	011b      	lsls	r3, r3, #4
 800d932:	4413      	add	r3, r2
 800d934:	3308      	adds	r3, #8
 800d936:	681a      	ldr	r2, [r3, #0]
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d102      	bne.n	800d946 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800d940:	e007      	b.n	800d952 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800d942:	2301      	movs	r3, #1
 800d944:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	3301      	adds	r3, #1
 800d94a:	60fb      	str	r3, [r7, #12]
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	2b01      	cmp	r3, #1
 800d950:	d9d2      	bls.n	800d8f8 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	2b02      	cmp	r3, #2
 800d956:	d109      	bne.n	800d96c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d102      	bne.n	800d964 <chk_lock+0x80>
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	2b02      	cmp	r3, #2
 800d962:	d101      	bne.n	800d968 <chk_lock+0x84>
 800d964:	2300      	movs	r3, #0
 800d966:	e010      	b.n	800d98a <chk_lock+0xa6>
 800d968:	2312      	movs	r3, #18
 800d96a:	e00e      	b.n	800d98a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800d96c:	683b      	ldr	r3, [r7, #0]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d108      	bne.n	800d984 <chk_lock+0xa0>
 800d972:	4a09      	ldr	r2, [pc, #36]	; (800d998 <chk_lock+0xb4>)
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	011b      	lsls	r3, r3, #4
 800d978:	4413      	add	r3, r2
 800d97a:	330c      	adds	r3, #12
 800d97c:	881b      	ldrh	r3, [r3, #0]
 800d97e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d982:	d101      	bne.n	800d988 <chk_lock+0xa4>
 800d984:	2310      	movs	r3, #16
 800d986:	e000      	b.n	800d98a <chk_lock+0xa6>
 800d988:	2300      	movs	r3, #0
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3714      	adds	r7, #20
 800d98e:	46bd      	mov	sp, r7
 800d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d994:	4770      	bx	lr
 800d996:	bf00      	nop
 800d998:	20000794 	.word	0x20000794

0800d99c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800d99c:	b480      	push	{r7}
 800d99e:	b083      	sub	sp, #12
 800d9a0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800d9a2:	2300      	movs	r3, #0
 800d9a4:	607b      	str	r3, [r7, #4]
 800d9a6:	e002      	b.n	800d9ae <enq_lock+0x12>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	3301      	adds	r3, #1
 800d9ac:	607b      	str	r3, [r7, #4]
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	2b01      	cmp	r3, #1
 800d9b2:	d806      	bhi.n	800d9c2 <enq_lock+0x26>
 800d9b4:	4a09      	ldr	r2, [pc, #36]	; (800d9dc <enq_lock+0x40>)
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	011b      	lsls	r3, r3, #4
 800d9ba:	4413      	add	r3, r2
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d1f2      	bne.n	800d9a8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	2b02      	cmp	r3, #2
 800d9c6:	bf14      	ite	ne
 800d9c8:	2301      	movne	r3, #1
 800d9ca:	2300      	moveq	r3, #0
 800d9cc:	b2db      	uxtb	r3, r3
}
 800d9ce:	4618      	mov	r0, r3
 800d9d0:	370c      	adds	r7, #12
 800d9d2:	46bd      	mov	sp, r7
 800d9d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d8:	4770      	bx	lr
 800d9da:	bf00      	nop
 800d9dc:	20000794 	.word	0x20000794

0800d9e0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800d9e0:	b480      	push	{r7}
 800d9e2:	b085      	sub	sp, #20
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800d9ea:	2300      	movs	r3, #0
 800d9ec:	60fb      	str	r3, [r7, #12]
 800d9ee:	e01f      	b.n	800da30 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800d9f0:	4a41      	ldr	r2, [pc, #260]	; (800daf8 <inc_lock+0x118>)
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	011b      	lsls	r3, r3, #4
 800d9f6:	4413      	add	r3, r2
 800d9f8:	681a      	ldr	r2, [r3, #0]
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	429a      	cmp	r2, r3
 800da00:	d113      	bne.n	800da2a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800da02:	4a3d      	ldr	r2, [pc, #244]	; (800daf8 <inc_lock+0x118>)
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	011b      	lsls	r3, r3, #4
 800da08:	4413      	add	r3, r2
 800da0a:	3304      	adds	r3, #4
 800da0c:	681a      	ldr	r2, [r3, #0]
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800da12:	429a      	cmp	r2, r3
 800da14:	d109      	bne.n	800da2a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800da16:	4a38      	ldr	r2, [pc, #224]	; (800daf8 <inc_lock+0x118>)
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	011b      	lsls	r3, r3, #4
 800da1c:	4413      	add	r3, r2
 800da1e:	3308      	adds	r3, #8
 800da20:	681a      	ldr	r2, [r3, #0]
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800da26:	429a      	cmp	r2, r3
 800da28:	d006      	beq.n	800da38 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800da2a:	68fb      	ldr	r3, [r7, #12]
 800da2c:	3301      	adds	r3, #1
 800da2e:	60fb      	str	r3, [r7, #12]
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	2b01      	cmp	r3, #1
 800da34:	d9dc      	bls.n	800d9f0 <inc_lock+0x10>
 800da36:	e000      	b.n	800da3a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800da38:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	2b02      	cmp	r3, #2
 800da3e:	d132      	bne.n	800daa6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800da40:	2300      	movs	r3, #0
 800da42:	60fb      	str	r3, [r7, #12]
 800da44:	e002      	b.n	800da4c <inc_lock+0x6c>
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	3301      	adds	r3, #1
 800da4a:	60fb      	str	r3, [r7, #12]
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	2b01      	cmp	r3, #1
 800da50:	d806      	bhi.n	800da60 <inc_lock+0x80>
 800da52:	4a29      	ldr	r2, [pc, #164]	; (800daf8 <inc_lock+0x118>)
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	011b      	lsls	r3, r3, #4
 800da58:	4413      	add	r3, r2
 800da5a:	681b      	ldr	r3, [r3, #0]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d1f2      	bne.n	800da46 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	2b02      	cmp	r3, #2
 800da64:	d101      	bne.n	800da6a <inc_lock+0x8a>
 800da66:	2300      	movs	r3, #0
 800da68:	e040      	b.n	800daec <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681a      	ldr	r2, [r3, #0]
 800da6e:	4922      	ldr	r1, [pc, #136]	; (800daf8 <inc_lock+0x118>)
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	011b      	lsls	r3, r3, #4
 800da74:	440b      	add	r3, r1
 800da76:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	689a      	ldr	r2, [r3, #8]
 800da7c:	491e      	ldr	r1, [pc, #120]	; (800daf8 <inc_lock+0x118>)
 800da7e:	68fb      	ldr	r3, [r7, #12]
 800da80:	011b      	lsls	r3, r3, #4
 800da82:	440b      	add	r3, r1
 800da84:	3304      	adds	r3, #4
 800da86:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	695a      	ldr	r2, [r3, #20]
 800da8c:	491a      	ldr	r1, [pc, #104]	; (800daf8 <inc_lock+0x118>)
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	011b      	lsls	r3, r3, #4
 800da92:	440b      	add	r3, r1
 800da94:	3308      	adds	r3, #8
 800da96:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800da98:	4a17      	ldr	r2, [pc, #92]	; (800daf8 <inc_lock+0x118>)
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	011b      	lsls	r3, r3, #4
 800da9e:	4413      	add	r3, r2
 800daa0:	330c      	adds	r3, #12
 800daa2:	2200      	movs	r2, #0
 800daa4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d009      	beq.n	800dac0 <inc_lock+0xe0>
 800daac:	4a12      	ldr	r2, [pc, #72]	; (800daf8 <inc_lock+0x118>)
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	011b      	lsls	r3, r3, #4
 800dab2:	4413      	add	r3, r2
 800dab4:	330c      	adds	r3, #12
 800dab6:	881b      	ldrh	r3, [r3, #0]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d001      	beq.n	800dac0 <inc_lock+0xe0>
 800dabc:	2300      	movs	r3, #0
 800dabe:	e015      	b.n	800daec <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800dac0:	683b      	ldr	r3, [r7, #0]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d108      	bne.n	800dad8 <inc_lock+0xf8>
 800dac6:	4a0c      	ldr	r2, [pc, #48]	; (800daf8 <inc_lock+0x118>)
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	011b      	lsls	r3, r3, #4
 800dacc:	4413      	add	r3, r2
 800dace:	330c      	adds	r3, #12
 800dad0:	881b      	ldrh	r3, [r3, #0]
 800dad2:	3301      	adds	r3, #1
 800dad4:	b29a      	uxth	r2, r3
 800dad6:	e001      	b.n	800dadc <inc_lock+0xfc>
 800dad8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dadc:	4906      	ldr	r1, [pc, #24]	; (800daf8 <inc_lock+0x118>)
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	011b      	lsls	r3, r3, #4
 800dae2:	440b      	add	r3, r1
 800dae4:	330c      	adds	r3, #12
 800dae6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	3301      	adds	r3, #1
}
 800daec:	4618      	mov	r0, r3
 800daee:	3714      	adds	r7, #20
 800daf0:	46bd      	mov	sp, r7
 800daf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf6:	4770      	bx	lr
 800daf8:	20000794 	.word	0x20000794

0800dafc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800dafc:	b480      	push	{r7}
 800dafe:	b085      	sub	sp, #20
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	3b01      	subs	r3, #1
 800db08:	607b      	str	r3, [r7, #4]
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	2b01      	cmp	r3, #1
 800db0e:	d825      	bhi.n	800db5c <dec_lock+0x60>
		n = Files[i].ctr;
 800db10:	4a17      	ldr	r2, [pc, #92]	; (800db70 <dec_lock+0x74>)
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	011b      	lsls	r3, r3, #4
 800db16:	4413      	add	r3, r2
 800db18:	330c      	adds	r3, #12
 800db1a:	881b      	ldrh	r3, [r3, #0]
 800db1c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800db1e:	89fb      	ldrh	r3, [r7, #14]
 800db20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db24:	d101      	bne.n	800db2a <dec_lock+0x2e>
 800db26:	2300      	movs	r3, #0
 800db28:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800db2a:	89fb      	ldrh	r3, [r7, #14]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d002      	beq.n	800db36 <dec_lock+0x3a>
 800db30:	89fb      	ldrh	r3, [r7, #14]
 800db32:	3b01      	subs	r3, #1
 800db34:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800db36:	4a0e      	ldr	r2, [pc, #56]	; (800db70 <dec_lock+0x74>)
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	011b      	lsls	r3, r3, #4
 800db3c:	4413      	add	r3, r2
 800db3e:	330c      	adds	r3, #12
 800db40:	89fa      	ldrh	r2, [r7, #14]
 800db42:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800db44:	89fb      	ldrh	r3, [r7, #14]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d105      	bne.n	800db56 <dec_lock+0x5a>
 800db4a:	4a09      	ldr	r2, [pc, #36]	; (800db70 <dec_lock+0x74>)
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	011b      	lsls	r3, r3, #4
 800db50:	4413      	add	r3, r2
 800db52:	2200      	movs	r2, #0
 800db54:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800db56:	2300      	movs	r3, #0
 800db58:	737b      	strb	r3, [r7, #13]
 800db5a:	e001      	b.n	800db60 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800db5c:	2302      	movs	r3, #2
 800db5e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800db60:	7b7b      	ldrb	r3, [r7, #13]
}
 800db62:	4618      	mov	r0, r3
 800db64:	3714      	adds	r7, #20
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr
 800db6e:	bf00      	nop
 800db70:	20000794 	.word	0x20000794

0800db74 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800db74:	b480      	push	{r7}
 800db76:	b085      	sub	sp, #20
 800db78:	af00      	add	r7, sp, #0
 800db7a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800db7c:	2300      	movs	r3, #0
 800db7e:	60fb      	str	r3, [r7, #12]
 800db80:	e010      	b.n	800dba4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800db82:	4a0d      	ldr	r2, [pc, #52]	; (800dbb8 <clear_lock+0x44>)
 800db84:	68fb      	ldr	r3, [r7, #12]
 800db86:	011b      	lsls	r3, r3, #4
 800db88:	4413      	add	r3, r2
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	687a      	ldr	r2, [r7, #4]
 800db8e:	429a      	cmp	r2, r3
 800db90:	d105      	bne.n	800db9e <clear_lock+0x2a>
 800db92:	4a09      	ldr	r2, [pc, #36]	; (800dbb8 <clear_lock+0x44>)
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	011b      	lsls	r3, r3, #4
 800db98:	4413      	add	r3, r2
 800db9a:	2200      	movs	r2, #0
 800db9c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	3301      	adds	r3, #1
 800dba2:	60fb      	str	r3, [r7, #12]
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	2b01      	cmp	r3, #1
 800dba8:	d9eb      	bls.n	800db82 <clear_lock+0xe>
	}
}
 800dbaa:	bf00      	nop
 800dbac:	bf00      	nop
 800dbae:	3714      	adds	r7, #20
 800dbb0:	46bd      	mov	sp, r7
 800dbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb6:	4770      	bx	lr
 800dbb8:	20000794 	.word	0x20000794

0800dbbc <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b086      	sub	sp, #24
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	78db      	ldrb	r3, [r3, #3]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d034      	beq.n	800dc3a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbd4:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	7858      	ldrb	r0, [r3, #1]
 800dbda:	687b      	ldr	r3, [r7, #4]
 800dbdc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dbe0:	2301      	movs	r3, #1
 800dbe2:	697a      	ldr	r2, [r7, #20]
 800dbe4:	f7ff fd0e 	bl	800d604 <disk_write>
 800dbe8:	4603      	mov	r3, r0
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d002      	beq.n	800dbf4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800dbee:	2301      	movs	r3, #1
 800dbf0:	73fb      	strb	r3, [r7, #15]
 800dbf2:	e022      	b.n	800dc3a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800dbfa:	687b      	ldr	r3, [r7, #4]
 800dbfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbfe:	697a      	ldr	r2, [r7, #20]
 800dc00:	1ad2      	subs	r2, r2, r3
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d217      	bcs.n	800dc3a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	789b      	ldrb	r3, [r3, #2]
 800dc0e:	613b      	str	r3, [r7, #16]
 800dc10:	e010      	b.n	800dc34 <sync_window+0x78>
					wsect += fs->fsize;
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc16:	697a      	ldr	r2, [r7, #20]
 800dc18:	4413      	add	r3, r2
 800dc1a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	7858      	ldrb	r0, [r3, #1]
 800dc20:	687b      	ldr	r3, [r7, #4]
 800dc22:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dc26:	2301      	movs	r3, #1
 800dc28:	697a      	ldr	r2, [r7, #20]
 800dc2a:	f7ff fceb 	bl	800d604 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dc2e:	693b      	ldr	r3, [r7, #16]
 800dc30:	3b01      	subs	r3, #1
 800dc32:	613b      	str	r3, [r7, #16]
 800dc34:	693b      	ldr	r3, [r7, #16]
 800dc36:	2b01      	cmp	r3, #1
 800dc38:	d8eb      	bhi.n	800dc12 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800dc3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc3c:	4618      	mov	r0, r3
 800dc3e:	3718      	adds	r7, #24
 800dc40:	46bd      	mov	sp, r7
 800dc42:	bd80      	pop	{r7, pc}

0800dc44 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b084      	sub	sp, #16
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
 800dc4c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800dc4e:	2300      	movs	r3, #0
 800dc50:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc56:	683a      	ldr	r2, [r7, #0]
 800dc58:	429a      	cmp	r2, r3
 800dc5a:	d01b      	beq.n	800dc94 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800dc5c:	6878      	ldr	r0, [r7, #4]
 800dc5e:	f7ff ffad 	bl	800dbbc <sync_window>
 800dc62:	4603      	mov	r3, r0
 800dc64:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800dc66:	7bfb      	ldrb	r3, [r7, #15]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d113      	bne.n	800dc94 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	7858      	ldrb	r0, [r3, #1]
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dc76:	2301      	movs	r3, #1
 800dc78:	683a      	ldr	r2, [r7, #0]
 800dc7a:	f7ff fca3 	bl	800d5c4 <disk_read>
 800dc7e:	4603      	mov	r3, r0
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d004      	beq.n	800dc8e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800dc84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc88:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	683a      	ldr	r2, [r7, #0]
 800dc92:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800dc94:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3710      	adds	r7, #16
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}
	...

0800dca0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800dca0:	b580      	push	{r7, lr}
 800dca2:	b084      	sub	sp, #16
 800dca4:	af00      	add	r7, sp, #0
 800dca6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800dca8:	6878      	ldr	r0, [r7, #4]
 800dcaa:	f7ff ff87 	bl	800dbbc <sync_window>
 800dcae:	4603      	mov	r3, r0
 800dcb0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800dcb2:	7bfb      	ldrb	r3, [r7, #15]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d159      	bne.n	800dd6c <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	781b      	ldrb	r3, [r3, #0]
 800dcbc:	2b03      	cmp	r3, #3
 800dcbe:	d149      	bne.n	800dd54 <sync_fs+0xb4>
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	791b      	ldrb	r3, [r3, #4]
 800dcc4:	2b01      	cmp	r3, #1
 800dcc6:	d145      	bne.n	800dd54 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	899b      	ldrh	r3, [r3, #12]
 800dcd2:	461a      	mov	r2, r3
 800dcd4:	2100      	movs	r1, #0
 800dcd6:	f7ff fd76 	bl	800d7c6 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	333c      	adds	r3, #60	; 0x3c
 800dcde:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800dce2:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800dce6:	4618      	mov	r0, r3
 800dce8:	f7ff fd05 	bl	800d6f6 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	333c      	adds	r3, #60	; 0x3c
 800dcf0:	4921      	ldr	r1, [pc, #132]	; (800dd78 <sync_fs+0xd8>)
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f7ff fd1a 	bl	800d72c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	333c      	adds	r3, #60	; 0x3c
 800dcfc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800dd00:	491e      	ldr	r1, [pc, #120]	; (800dd7c <sync_fs+0xdc>)
 800dd02:	4618      	mov	r0, r3
 800dd04:	f7ff fd12 	bl	800d72c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	333c      	adds	r3, #60	; 0x3c
 800dd0c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	69db      	ldr	r3, [r3, #28]
 800dd14:	4619      	mov	r1, r3
 800dd16:	4610      	mov	r0, r2
 800dd18:	f7ff fd08 	bl	800d72c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	333c      	adds	r3, #60	; 0x3c
 800dd20:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	699b      	ldr	r3, [r3, #24]
 800dd28:	4619      	mov	r1, r3
 800dd2a:	4610      	mov	r0, r2
 800dd2c:	f7ff fcfe 	bl	800d72c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dd34:	1c5a      	adds	r2, r3, #1
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	7858      	ldrb	r0, [r3, #1]
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd48:	2301      	movs	r3, #1
 800dd4a:	f7ff fc5b 	bl	800d604 <disk_write>
			fs->fsi_flag = 0;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2200      	movs	r2, #0
 800dd52:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	785b      	ldrb	r3, [r3, #1]
 800dd58:	2200      	movs	r2, #0
 800dd5a:	2100      	movs	r1, #0
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f7ff fc71 	bl	800d644 <disk_ioctl>
 800dd62:	4603      	mov	r3, r0
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d001      	beq.n	800dd6c <sync_fs+0xcc>
 800dd68:	2301      	movs	r3, #1
 800dd6a:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800dd6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800dd6e:	4618      	mov	r0, r3
 800dd70:	3710      	adds	r7, #16
 800dd72:	46bd      	mov	sp, r7
 800dd74:	bd80      	pop	{r7, pc}
 800dd76:	bf00      	nop
 800dd78:	41615252 	.word	0x41615252
 800dd7c:	61417272 	.word	0x61417272

0800dd80 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800dd80:	b480      	push	{r7}
 800dd82:	b083      	sub	sp, #12
 800dd84:	af00      	add	r7, sp, #0
 800dd86:	6078      	str	r0, [r7, #4]
 800dd88:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800dd8a:	683b      	ldr	r3, [r7, #0]
 800dd8c:	3b02      	subs	r3, #2
 800dd8e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	6a1b      	ldr	r3, [r3, #32]
 800dd94:	3b02      	subs	r3, #2
 800dd96:	683a      	ldr	r2, [r7, #0]
 800dd98:	429a      	cmp	r2, r3
 800dd9a:	d301      	bcc.n	800dda0 <clust2sect+0x20>
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	e008      	b.n	800ddb2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	895b      	ldrh	r3, [r3, #10]
 800dda4:	461a      	mov	r2, r3
 800dda6:	683b      	ldr	r3, [r7, #0]
 800dda8:	fb03 f202 	mul.w	r2, r3, r2
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ddb0:	4413      	add	r3, r2
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	370c      	adds	r7, #12
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbc:	4770      	bx	lr

0800ddbe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ddbe:	b580      	push	{r7, lr}
 800ddc0:	b086      	sub	sp, #24
 800ddc2:	af00      	add	r7, sp, #0
 800ddc4:	6078      	str	r0, [r7, #4]
 800ddc6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	681b      	ldr	r3, [r3, #0]
 800ddcc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	2b01      	cmp	r3, #1
 800ddd2:	d904      	bls.n	800ddde <get_fat+0x20>
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	6a1b      	ldr	r3, [r3, #32]
 800ddd8:	683a      	ldr	r2, [r7, #0]
 800ddda:	429a      	cmp	r2, r3
 800dddc:	d302      	bcc.n	800dde4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ddde:	2301      	movs	r3, #1
 800dde0:	617b      	str	r3, [r7, #20]
 800dde2:	e0bb      	b.n	800df5c <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800dde4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dde8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ddea:	693b      	ldr	r3, [r7, #16]
 800ddec:	781b      	ldrb	r3, [r3, #0]
 800ddee:	2b03      	cmp	r3, #3
 800ddf0:	f000 8083 	beq.w	800defa <get_fat+0x13c>
 800ddf4:	2b03      	cmp	r3, #3
 800ddf6:	f300 80a7 	bgt.w	800df48 <get_fat+0x18a>
 800ddfa:	2b01      	cmp	r3, #1
 800ddfc:	d002      	beq.n	800de04 <get_fat+0x46>
 800ddfe:	2b02      	cmp	r3, #2
 800de00:	d056      	beq.n	800deb0 <get_fat+0xf2>
 800de02:	e0a1      	b.n	800df48 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	60fb      	str	r3, [r7, #12]
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	085b      	lsrs	r3, r3, #1
 800de0c:	68fa      	ldr	r2, [r7, #12]
 800de0e:	4413      	add	r3, r2
 800de10:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800de12:	693b      	ldr	r3, [r7, #16]
 800de14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de16:	693b      	ldr	r3, [r7, #16]
 800de18:	899b      	ldrh	r3, [r3, #12]
 800de1a:	4619      	mov	r1, r3
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	fbb3 f3f1 	udiv	r3, r3, r1
 800de22:	4413      	add	r3, r2
 800de24:	4619      	mov	r1, r3
 800de26:	6938      	ldr	r0, [r7, #16]
 800de28:	f7ff ff0c 	bl	800dc44 <move_window>
 800de2c:	4603      	mov	r3, r0
 800de2e:	2b00      	cmp	r3, #0
 800de30:	f040 808d 	bne.w	800df4e <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	1c5a      	adds	r2, r3, #1
 800de38:	60fa      	str	r2, [r7, #12]
 800de3a:	693a      	ldr	r2, [r7, #16]
 800de3c:	8992      	ldrh	r2, [r2, #12]
 800de3e:	fbb3 f1f2 	udiv	r1, r3, r2
 800de42:	fb02 f201 	mul.w	r2, r2, r1
 800de46:	1a9b      	subs	r3, r3, r2
 800de48:	693a      	ldr	r2, [r7, #16]
 800de4a:	4413      	add	r3, r2
 800de4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de50:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800de52:	693b      	ldr	r3, [r7, #16]
 800de54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de56:	693b      	ldr	r3, [r7, #16]
 800de58:	899b      	ldrh	r3, [r3, #12]
 800de5a:	4619      	mov	r1, r3
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	fbb3 f3f1 	udiv	r3, r3, r1
 800de62:	4413      	add	r3, r2
 800de64:	4619      	mov	r1, r3
 800de66:	6938      	ldr	r0, [r7, #16]
 800de68:	f7ff feec 	bl	800dc44 <move_window>
 800de6c:	4603      	mov	r3, r0
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d16f      	bne.n	800df52 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	899b      	ldrh	r3, [r3, #12]
 800de76:	461a      	mov	r2, r3
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	fbb3 f1f2 	udiv	r1, r3, r2
 800de7e:	fb02 f201 	mul.w	r2, r2, r1
 800de82:	1a9b      	subs	r3, r3, r2
 800de84:	693a      	ldr	r2, [r7, #16]
 800de86:	4413      	add	r3, r2
 800de88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800de8c:	021b      	lsls	r3, r3, #8
 800de8e:	461a      	mov	r2, r3
 800de90:	68bb      	ldr	r3, [r7, #8]
 800de92:	4313      	orrs	r3, r2
 800de94:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800de96:	683b      	ldr	r3, [r7, #0]
 800de98:	f003 0301 	and.w	r3, r3, #1
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	d002      	beq.n	800dea6 <get_fat+0xe8>
 800dea0:	68bb      	ldr	r3, [r7, #8]
 800dea2:	091b      	lsrs	r3, r3, #4
 800dea4:	e002      	b.n	800deac <get_fat+0xee>
 800dea6:	68bb      	ldr	r3, [r7, #8]
 800dea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800deac:	617b      	str	r3, [r7, #20]
			break;
 800deae:	e055      	b.n	800df5c <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	899b      	ldrh	r3, [r3, #12]
 800deb8:	085b      	lsrs	r3, r3, #1
 800deba:	b29b      	uxth	r3, r3
 800debc:	4619      	mov	r1, r3
 800debe:	683b      	ldr	r3, [r7, #0]
 800dec0:	fbb3 f3f1 	udiv	r3, r3, r1
 800dec4:	4413      	add	r3, r2
 800dec6:	4619      	mov	r1, r3
 800dec8:	6938      	ldr	r0, [r7, #16]
 800deca:	f7ff febb 	bl	800dc44 <move_window>
 800dece:	4603      	mov	r3, r0
 800ded0:	2b00      	cmp	r3, #0
 800ded2:	d140      	bne.n	800df56 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ded4:	693b      	ldr	r3, [r7, #16]
 800ded6:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	005b      	lsls	r3, r3, #1
 800dede:	693a      	ldr	r2, [r7, #16]
 800dee0:	8992      	ldrh	r2, [r2, #12]
 800dee2:	fbb3 f0f2 	udiv	r0, r3, r2
 800dee6:	fb02 f200 	mul.w	r2, r2, r0
 800deea:	1a9b      	subs	r3, r3, r2
 800deec:	440b      	add	r3, r1
 800deee:	4618      	mov	r0, r3
 800def0:	f7ff fbc6 	bl	800d680 <ld_word>
 800def4:	4603      	mov	r3, r0
 800def6:	617b      	str	r3, [r7, #20]
			break;
 800def8:	e030      	b.n	800df5c <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800defa:	693b      	ldr	r3, [r7, #16]
 800defc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800defe:	693b      	ldr	r3, [r7, #16]
 800df00:	899b      	ldrh	r3, [r3, #12]
 800df02:	089b      	lsrs	r3, r3, #2
 800df04:	b29b      	uxth	r3, r3
 800df06:	4619      	mov	r1, r3
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	fbb3 f3f1 	udiv	r3, r3, r1
 800df0e:	4413      	add	r3, r2
 800df10:	4619      	mov	r1, r3
 800df12:	6938      	ldr	r0, [r7, #16]
 800df14:	f7ff fe96 	bl	800dc44 <move_window>
 800df18:	4603      	mov	r3, r0
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d11d      	bne.n	800df5a <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	009b      	lsls	r3, r3, #2
 800df28:	693a      	ldr	r2, [r7, #16]
 800df2a:	8992      	ldrh	r2, [r2, #12]
 800df2c:	fbb3 f0f2 	udiv	r0, r3, r2
 800df30:	fb02 f200 	mul.w	r2, r2, r0
 800df34:	1a9b      	subs	r3, r3, r2
 800df36:	440b      	add	r3, r1
 800df38:	4618      	mov	r0, r3
 800df3a:	f7ff fbb9 	bl	800d6b0 <ld_dword>
 800df3e:	4603      	mov	r3, r0
 800df40:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800df44:	617b      	str	r3, [r7, #20]
			break;
 800df46:	e009      	b.n	800df5c <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800df48:	2301      	movs	r3, #1
 800df4a:	617b      	str	r3, [r7, #20]
 800df4c:	e006      	b.n	800df5c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800df4e:	bf00      	nop
 800df50:	e004      	b.n	800df5c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800df52:	bf00      	nop
 800df54:	e002      	b.n	800df5c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800df56:	bf00      	nop
 800df58:	e000      	b.n	800df5c <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800df5a:	bf00      	nop
		}
	}

	return val;
 800df5c:	697b      	ldr	r3, [r7, #20]
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3718      	adds	r7, #24
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}

0800df66 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800df66:	b590      	push	{r4, r7, lr}
 800df68:	b089      	sub	sp, #36	; 0x24
 800df6a:	af00      	add	r7, sp, #0
 800df6c:	60f8      	str	r0, [r7, #12]
 800df6e:	60b9      	str	r1, [r7, #8]
 800df70:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800df72:	2302      	movs	r3, #2
 800df74:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800df76:	68bb      	ldr	r3, [r7, #8]
 800df78:	2b01      	cmp	r3, #1
 800df7a:	f240 8102 	bls.w	800e182 <put_fat+0x21c>
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	6a1b      	ldr	r3, [r3, #32]
 800df82:	68ba      	ldr	r2, [r7, #8]
 800df84:	429a      	cmp	r2, r3
 800df86:	f080 80fc 	bcs.w	800e182 <put_fat+0x21c>
		switch (fs->fs_type) {
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	2b03      	cmp	r3, #3
 800df90:	f000 80b6 	beq.w	800e100 <put_fat+0x19a>
 800df94:	2b03      	cmp	r3, #3
 800df96:	f300 80fd 	bgt.w	800e194 <put_fat+0x22e>
 800df9a:	2b01      	cmp	r3, #1
 800df9c:	d003      	beq.n	800dfa6 <put_fat+0x40>
 800df9e:	2b02      	cmp	r3, #2
 800dfa0:	f000 8083 	beq.w	800e0aa <put_fat+0x144>
 800dfa4:	e0f6      	b.n	800e194 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800dfa6:	68bb      	ldr	r3, [r7, #8]
 800dfa8:	61bb      	str	r3, [r7, #24]
 800dfaa:	69bb      	ldr	r3, [r7, #24]
 800dfac:	085b      	lsrs	r3, r3, #1
 800dfae:	69ba      	ldr	r2, [r7, #24]
 800dfb0:	4413      	add	r3, r2
 800dfb2:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800dfb4:	68fb      	ldr	r3, [r7, #12]
 800dfb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	899b      	ldrh	r3, [r3, #12]
 800dfbc:	4619      	mov	r1, r3
 800dfbe:	69bb      	ldr	r3, [r7, #24]
 800dfc0:	fbb3 f3f1 	udiv	r3, r3, r1
 800dfc4:	4413      	add	r3, r2
 800dfc6:	4619      	mov	r1, r3
 800dfc8:	68f8      	ldr	r0, [r7, #12]
 800dfca:	f7ff fe3b 	bl	800dc44 <move_window>
 800dfce:	4603      	mov	r3, r0
 800dfd0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800dfd2:	7ffb      	ldrb	r3, [r7, #31]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	f040 80d6 	bne.w	800e186 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800dfe0:	69bb      	ldr	r3, [r7, #24]
 800dfe2:	1c5a      	adds	r2, r3, #1
 800dfe4:	61ba      	str	r2, [r7, #24]
 800dfe6:	68fa      	ldr	r2, [r7, #12]
 800dfe8:	8992      	ldrh	r2, [r2, #12]
 800dfea:	fbb3 f0f2 	udiv	r0, r3, r2
 800dfee:	fb02 f200 	mul.w	r2, r2, r0
 800dff2:	1a9b      	subs	r3, r3, r2
 800dff4:	440b      	add	r3, r1
 800dff6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	f003 0301 	and.w	r3, r3, #1
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d00d      	beq.n	800e01e <put_fat+0xb8>
 800e002:	697b      	ldr	r3, [r7, #20]
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	b25b      	sxtb	r3, r3
 800e008:	f003 030f 	and.w	r3, r3, #15
 800e00c:	b25a      	sxtb	r2, r3
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	b2db      	uxtb	r3, r3
 800e012:	011b      	lsls	r3, r3, #4
 800e014:	b25b      	sxtb	r3, r3
 800e016:	4313      	orrs	r3, r2
 800e018:	b25b      	sxtb	r3, r3
 800e01a:	b2db      	uxtb	r3, r3
 800e01c:	e001      	b.n	800e022 <put_fat+0xbc>
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	b2db      	uxtb	r3, r3
 800e022:	697a      	ldr	r2, [r7, #20]
 800e024:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	2201      	movs	r2, #1
 800e02a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	899b      	ldrh	r3, [r3, #12]
 800e034:	4619      	mov	r1, r3
 800e036:	69bb      	ldr	r3, [r7, #24]
 800e038:	fbb3 f3f1 	udiv	r3, r3, r1
 800e03c:	4413      	add	r3, r2
 800e03e:	4619      	mov	r1, r3
 800e040:	68f8      	ldr	r0, [r7, #12]
 800e042:	f7ff fdff 	bl	800dc44 <move_window>
 800e046:	4603      	mov	r3, r0
 800e048:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e04a:	7ffb      	ldrb	r3, [r7, #31]
 800e04c:	2b00      	cmp	r3, #0
 800e04e:	f040 809c 	bne.w	800e18a <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	899b      	ldrh	r3, [r3, #12]
 800e05c:	461a      	mov	r2, r3
 800e05e:	69bb      	ldr	r3, [r7, #24]
 800e060:	fbb3 f0f2 	udiv	r0, r3, r2
 800e064:	fb02 f200 	mul.w	r2, r2, r0
 800e068:	1a9b      	subs	r3, r3, r2
 800e06a:	440b      	add	r3, r1
 800e06c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e06e:	68bb      	ldr	r3, [r7, #8]
 800e070:	f003 0301 	and.w	r3, r3, #1
 800e074:	2b00      	cmp	r3, #0
 800e076:	d003      	beq.n	800e080 <put_fat+0x11a>
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	091b      	lsrs	r3, r3, #4
 800e07c:	b2db      	uxtb	r3, r3
 800e07e:	e00e      	b.n	800e09e <put_fat+0x138>
 800e080:	697b      	ldr	r3, [r7, #20]
 800e082:	781b      	ldrb	r3, [r3, #0]
 800e084:	b25b      	sxtb	r3, r3
 800e086:	f023 030f 	bic.w	r3, r3, #15
 800e08a:	b25a      	sxtb	r2, r3
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	0a1b      	lsrs	r3, r3, #8
 800e090:	b25b      	sxtb	r3, r3
 800e092:	f003 030f 	and.w	r3, r3, #15
 800e096:	b25b      	sxtb	r3, r3
 800e098:	4313      	orrs	r3, r2
 800e09a:	b25b      	sxtb	r3, r3
 800e09c:	b2db      	uxtb	r3, r3
 800e09e:	697a      	ldr	r2, [r7, #20]
 800e0a0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	2201      	movs	r2, #1
 800e0a6:	70da      	strb	r2, [r3, #3]
			break;
 800e0a8:	e074      	b.n	800e194 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	899b      	ldrh	r3, [r3, #12]
 800e0b2:	085b      	lsrs	r3, r3, #1
 800e0b4:	b29b      	uxth	r3, r3
 800e0b6:	4619      	mov	r1, r3
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	fbb3 f3f1 	udiv	r3, r3, r1
 800e0be:	4413      	add	r3, r2
 800e0c0:	4619      	mov	r1, r3
 800e0c2:	68f8      	ldr	r0, [r7, #12]
 800e0c4:	f7ff fdbe 	bl	800dc44 <move_window>
 800e0c8:	4603      	mov	r3, r0
 800e0ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e0cc:	7ffb      	ldrb	r3, [r7, #31]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d15d      	bne.n	800e18e <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e0d8:	68bb      	ldr	r3, [r7, #8]
 800e0da:	005b      	lsls	r3, r3, #1
 800e0dc:	68fa      	ldr	r2, [r7, #12]
 800e0de:	8992      	ldrh	r2, [r2, #12]
 800e0e0:	fbb3 f0f2 	udiv	r0, r3, r2
 800e0e4:	fb02 f200 	mul.w	r2, r2, r0
 800e0e8:	1a9b      	subs	r3, r3, r2
 800e0ea:	440b      	add	r3, r1
 800e0ec:	687a      	ldr	r2, [r7, #4]
 800e0ee:	b292      	uxth	r2, r2
 800e0f0:	4611      	mov	r1, r2
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7ff faff 	bl	800d6f6 <st_word>
			fs->wflag = 1;
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	2201      	movs	r2, #1
 800e0fc:	70da      	strb	r2, [r3, #3]
			break;
 800e0fe:	e049      	b.n	800e194 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	899b      	ldrh	r3, [r3, #12]
 800e108:	089b      	lsrs	r3, r3, #2
 800e10a:	b29b      	uxth	r3, r3
 800e10c:	4619      	mov	r1, r3
 800e10e:	68bb      	ldr	r3, [r7, #8]
 800e110:	fbb3 f3f1 	udiv	r3, r3, r1
 800e114:	4413      	add	r3, r2
 800e116:	4619      	mov	r1, r3
 800e118:	68f8      	ldr	r0, [r7, #12]
 800e11a:	f7ff fd93 	bl	800dc44 <move_window>
 800e11e:	4603      	mov	r3, r0
 800e120:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e122:	7ffb      	ldrb	r3, [r7, #31]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d134      	bne.n	800e192 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	009b      	lsls	r3, r3, #2
 800e138:	68fa      	ldr	r2, [r7, #12]
 800e13a:	8992      	ldrh	r2, [r2, #12]
 800e13c:	fbb3 f0f2 	udiv	r0, r3, r2
 800e140:	fb02 f200 	mul.w	r2, r2, r0
 800e144:	1a9b      	subs	r3, r3, r2
 800e146:	440b      	add	r3, r1
 800e148:	4618      	mov	r0, r3
 800e14a:	f7ff fab1 	bl	800d6b0 <ld_dword>
 800e14e:	4603      	mov	r3, r0
 800e150:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e154:	4323      	orrs	r3, r4
 800e156:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e15e:	68bb      	ldr	r3, [r7, #8]
 800e160:	009b      	lsls	r3, r3, #2
 800e162:	68fa      	ldr	r2, [r7, #12]
 800e164:	8992      	ldrh	r2, [r2, #12]
 800e166:	fbb3 f0f2 	udiv	r0, r3, r2
 800e16a:	fb02 f200 	mul.w	r2, r2, r0
 800e16e:	1a9b      	subs	r3, r3, r2
 800e170:	440b      	add	r3, r1
 800e172:	6879      	ldr	r1, [r7, #4]
 800e174:	4618      	mov	r0, r3
 800e176:	f7ff fad9 	bl	800d72c <st_dword>
			fs->wflag = 1;
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	2201      	movs	r2, #1
 800e17e:	70da      	strb	r2, [r3, #3]
			break;
 800e180:	e008      	b.n	800e194 <put_fat+0x22e>
		}
	}
 800e182:	bf00      	nop
 800e184:	e006      	b.n	800e194 <put_fat+0x22e>
			if (res != FR_OK) break;
 800e186:	bf00      	nop
 800e188:	e004      	b.n	800e194 <put_fat+0x22e>
			if (res != FR_OK) break;
 800e18a:	bf00      	nop
 800e18c:	e002      	b.n	800e194 <put_fat+0x22e>
			if (res != FR_OK) break;
 800e18e:	bf00      	nop
 800e190:	e000      	b.n	800e194 <put_fat+0x22e>
			if (res != FR_OK) break;
 800e192:	bf00      	nop
	return res;
 800e194:	7ffb      	ldrb	r3, [r7, #31]
}
 800e196:	4618      	mov	r0, r3
 800e198:	3724      	adds	r7, #36	; 0x24
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd90      	pop	{r4, r7, pc}

0800e19e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e19e:	b580      	push	{r7, lr}
 800e1a0:	b088      	sub	sp, #32
 800e1a2:	af00      	add	r7, sp, #0
 800e1a4:	60f8      	str	r0, [r7, #12]
 800e1a6:	60b9      	str	r1, [r7, #8]
 800e1a8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e1aa:	2300      	movs	r3, #0
 800e1ac:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	681b      	ldr	r3, [r3, #0]
 800e1b2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	2b01      	cmp	r3, #1
 800e1b8:	d904      	bls.n	800e1c4 <remove_chain+0x26>
 800e1ba:	69bb      	ldr	r3, [r7, #24]
 800e1bc:	6a1b      	ldr	r3, [r3, #32]
 800e1be:	68ba      	ldr	r2, [r7, #8]
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d301      	bcc.n	800e1c8 <remove_chain+0x2a>
 800e1c4:	2302      	movs	r3, #2
 800e1c6:	e04b      	b.n	800e260 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d00c      	beq.n	800e1e8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e1ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e1d2:	6879      	ldr	r1, [r7, #4]
 800e1d4:	69b8      	ldr	r0, [r7, #24]
 800e1d6:	f7ff fec6 	bl	800df66 <put_fat>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e1de:	7ffb      	ldrb	r3, [r7, #31]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d001      	beq.n	800e1e8 <remove_chain+0x4a>
 800e1e4:	7ffb      	ldrb	r3, [r7, #31]
 800e1e6:	e03b      	b.n	800e260 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e1e8:	68b9      	ldr	r1, [r7, #8]
 800e1ea:	68f8      	ldr	r0, [r7, #12]
 800e1ec:	f7ff fde7 	bl	800ddbe <get_fat>
 800e1f0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d031      	beq.n	800e25c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e1f8:	697b      	ldr	r3, [r7, #20]
 800e1fa:	2b01      	cmp	r3, #1
 800e1fc:	d101      	bne.n	800e202 <remove_chain+0x64>
 800e1fe:	2302      	movs	r3, #2
 800e200:	e02e      	b.n	800e260 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e202:	697b      	ldr	r3, [r7, #20]
 800e204:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e208:	d101      	bne.n	800e20e <remove_chain+0x70>
 800e20a:	2301      	movs	r3, #1
 800e20c:	e028      	b.n	800e260 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e20e:	2200      	movs	r2, #0
 800e210:	68b9      	ldr	r1, [r7, #8]
 800e212:	69b8      	ldr	r0, [r7, #24]
 800e214:	f7ff fea7 	bl	800df66 <put_fat>
 800e218:	4603      	mov	r3, r0
 800e21a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e21c:	7ffb      	ldrb	r3, [r7, #31]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d001      	beq.n	800e226 <remove_chain+0x88>
 800e222:	7ffb      	ldrb	r3, [r7, #31]
 800e224:	e01c      	b.n	800e260 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e226:	69bb      	ldr	r3, [r7, #24]
 800e228:	69da      	ldr	r2, [r3, #28]
 800e22a:	69bb      	ldr	r3, [r7, #24]
 800e22c:	6a1b      	ldr	r3, [r3, #32]
 800e22e:	3b02      	subs	r3, #2
 800e230:	429a      	cmp	r2, r3
 800e232:	d20b      	bcs.n	800e24c <remove_chain+0xae>
			fs->free_clst++;
 800e234:	69bb      	ldr	r3, [r7, #24]
 800e236:	69db      	ldr	r3, [r3, #28]
 800e238:	1c5a      	adds	r2, r3, #1
 800e23a:	69bb      	ldr	r3, [r7, #24]
 800e23c:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800e23e:	69bb      	ldr	r3, [r7, #24]
 800e240:	791b      	ldrb	r3, [r3, #4]
 800e242:	f043 0301 	orr.w	r3, r3, #1
 800e246:	b2da      	uxtb	r2, r3
 800e248:	69bb      	ldr	r3, [r7, #24]
 800e24a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e250:	69bb      	ldr	r3, [r7, #24]
 800e252:	6a1b      	ldr	r3, [r3, #32]
 800e254:	68ba      	ldr	r2, [r7, #8]
 800e256:	429a      	cmp	r2, r3
 800e258:	d3c6      	bcc.n	800e1e8 <remove_chain+0x4a>
 800e25a:	e000      	b.n	800e25e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e25c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e25e:	2300      	movs	r3, #0
}
 800e260:	4618      	mov	r0, r3
 800e262:	3720      	adds	r7, #32
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}

0800e268 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b088      	sub	sp, #32
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d10d      	bne.n	800e29a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e27e:	693b      	ldr	r3, [r7, #16]
 800e280:	699b      	ldr	r3, [r3, #24]
 800e282:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e284:	69bb      	ldr	r3, [r7, #24]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d004      	beq.n	800e294 <create_chain+0x2c>
 800e28a:	693b      	ldr	r3, [r7, #16]
 800e28c:	6a1b      	ldr	r3, [r3, #32]
 800e28e:	69ba      	ldr	r2, [r7, #24]
 800e290:	429a      	cmp	r2, r3
 800e292:	d31b      	bcc.n	800e2cc <create_chain+0x64>
 800e294:	2301      	movs	r3, #1
 800e296:	61bb      	str	r3, [r7, #24]
 800e298:	e018      	b.n	800e2cc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e29a:	6839      	ldr	r1, [r7, #0]
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f7ff fd8e 	bl	800ddbe <get_fat>
 800e2a2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	2b01      	cmp	r3, #1
 800e2a8:	d801      	bhi.n	800e2ae <create_chain+0x46>
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	e070      	b.n	800e390 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e2b4:	d101      	bne.n	800e2ba <create_chain+0x52>
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	e06a      	b.n	800e390 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e2ba:	693b      	ldr	r3, [r7, #16]
 800e2bc:	6a1b      	ldr	r3, [r3, #32]
 800e2be:	68fa      	ldr	r2, [r7, #12]
 800e2c0:	429a      	cmp	r2, r3
 800e2c2:	d201      	bcs.n	800e2c8 <create_chain+0x60>
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	e063      	b.n	800e390 <create_chain+0x128>
		scl = clst;
 800e2c8:	683b      	ldr	r3, [r7, #0]
 800e2ca:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e2cc:	69bb      	ldr	r3, [r7, #24]
 800e2ce:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e2d0:	69fb      	ldr	r3, [r7, #28]
 800e2d2:	3301      	adds	r3, #1
 800e2d4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e2d6:	693b      	ldr	r3, [r7, #16]
 800e2d8:	6a1b      	ldr	r3, [r3, #32]
 800e2da:	69fa      	ldr	r2, [r7, #28]
 800e2dc:	429a      	cmp	r2, r3
 800e2de:	d307      	bcc.n	800e2f0 <create_chain+0x88>
				ncl = 2;
 800e2e0:	2302      	movs	r3, #2
 800e2e2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e2e4:	69fa      	ldr	r2, [r7, #28]
 800e2e6:	69bb      	ldr	r3, [r7, #24]
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d901      	bls.n	800e2f0 <create_chain+0x88>
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	e04f      	b.n	800e390 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e2f0:	69f9      	ldr	r1, [r7, #28]
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f7ff fd63 	bl	800ddbe <get_fat>
 800e2f8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d00e      	beq.n	800e31e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	2b01      	cmp	r3, #1
 800e304:	d003      	beq.n	800e30e <create_chain+0xa6>
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e30c:	d101      	bne.n	800e312 <create_chain+0xaa>
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	e03e      	b.n	800e390 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e312:	69fa      	ldr	r2, [r7, #28]
 800e314:	69bb      	ldr	r3, [r7, #24]
 800e316:	429a      	cmp	r2, r3
 800e318:	d1da      	bne.n	800e2d0 <create_chain+0x68>
 800e31a:	2300      	movs	r3, #0
 800e31c:	e038      	b.n	800e390 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e31e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e320:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e324:	69f9      	ldr	r1, [r7, #28]
 800e326:	6938      	ldr	r0, [r7, #16]
 800e328:	f7ff fe1d 	bl	800df66 <put_fat>
 800e32c:	4603      	mov	r3, r0
 800e32e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e330:	7dfb      	ldrb	r3, [r7, #23]
 800e332:	2b00      	cmp	r3, #0
 800e334:	d109      	bne.n	800e34a <create_chain+0xe2>
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d006      	beq.n	800e34a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e33c:	69fa      	ldr	r2, [r7, #28]
 800e33e:	6839      	ldr	r1, [r7, #0]
 800e340:	6938      	ldr	r0, [r7, #16]
 800e342:	f7ff fe10 	bl	800df66 <put_fat>
 800e346:	4603      	mov	r3, r0
 800e348:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e34a:	7dfb      	ldrb	r3, [r7, #23]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d116      	bne.n	800e37e <create_chain+0x116>
		fs->last_clst = ncl;
 800e350:	693b      	ldr	r3, [r7, #16]
 800e352:	69fa      	ldr	r2, [r7, #28]
 800e354:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e356:	693b      	ldr	r3, [r7, #16]
 800e358:	69da      	ldr	r2, [r3, #28]
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	6a1b      	ldr	r3, [r3, #32]
 800e35e:	3b02      	subs	r3, #2
 800e360:	429a      	cmp	r2, r3
 800e362:	d804      	bhi.n	800e36e <create_chain+0x106>
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	69db      	ldr	r3, [r3, #28]
 800e368:	1e5a      	subs	r2, r3, #1
 800e36a:	693b      	ldr	r3, [r7, #16]
 800e36c:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 800e36e:	693b      	ldr	r3, [r7, #16]
 800e370:	791b      	ldrb	r3, [r3, #4]
 800e372:	f043 0301 	orr.w	r3, r3, #1
 800e376:	b2da      	uxtb	r2, r3
 800e378:	693b      	ldr	r3, [r7, #16]
 800e37a:	711a      	strb	r2, [r3, #4]
 800e37c:	e007      	b.n	800e38e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e37e:	7dfb      	ldrb	r3, [r7, #23]
 800e380:	2b01      	cmp	r3, #1
 800e382:	d102      	bne.n	800e38a <create_chain+0x122>
 800e384:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e388:	e000      	b.n	800e38c <create_chain+0x124>
 800e38a:	2301      	movs	r3, #1
 800e38c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e38e:	69fb      	ldr	r3, [r7, #28]
}
 800e390:	4618      	mov	r0, r3
 800e392:	3720      	adds	r7, #32
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}

0800e398 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e398:	b480      	push	{r7}
 800e39a:	b087      	sub	sp, #28
 800e39c:	af00      	add	r7, sp, #0
 800e39e:	6078      	str	r0, [r7, #4]
 800e3a0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3ac:	3304      	adds	r3, #4
 800e3ae:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	899b      	ldrh	r3, [r3, #12]
 800e3b4:	461a      	mov	r2, r3
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e3bc:	68fa      	ldr	r2, [r7, #12]
 800e3be:	8952      	ldrh	r2, [r2, #10]
 800e3c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800e3c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e3c6:	693b      	ldr	r3, [r7, #16]
 800e3c8:	1d1a      	adds	r2, r3, #4
 800e3ca:	613a      	str	r2, [r7, #16]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d101      	bne.n	800e3da <clmt_clust+0x42>
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	e010      	b.n	800e3fc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800e3da:	697a      	ldr	r2, [r7, #20]
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d307      	bcc.n	800e3f2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800e3e2:	697a      	ldr	r2, [r7, #20]
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	1ad3      	subs	r3, r2, r3
 800e3e8:	617b      	str	r3, [r7, #20]
 800e3ea:	693b      	ldr	r3, [r7, #16]
 800e3ec:	3304      	adds	r3, #4
 800e3ee:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e3f0:	e7e9      	b.n	800e3c6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800e3f2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e3f4:	693b      	ldr	r3, [r7, #16]
 800e3f6:	681a      	ldr	r2, [r3, #0]
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	4413      	add	r3, r2
}
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	371c      	adds	r7, #28
 800e400:	46bd      	mov	sp, r7
 800e402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e406:	4770      	bx	lr

0800e408 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e408:	b580      	push	{r7, lr}
 800e40a:	b086      	sub	sp, #24
 800e40c:	af00      	add	r7, sp, #0
 800e40e:	6078      	str	r0, [r7, #4]
 800e410:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e418:	683b      	ldr	r3, [r7, #0]
 800e41a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e41e:	d204      	bcs.n	800e42a <dir_sdi+0x22>
 800e420:	683b      	ldr	r3, [r7, #0]
 800e422:	f003 031f 	and.w	r3, r3, #31
 800e426:	2b00      	cmp	r3, #0
 800e428:	d001      	beq.n	800e42e <dir_sdi+0x26>
		return FR_INT_ERR;
 800e42a:	2302      	movs	r3, #2
 800e42c:	e071      	b.n	800e512 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	683a      	ldr	r2, [r7, #0]
 800e432:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	689b      	ldr	r3, [r3, #8]
 800e438:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d106      	bne.n	800e44e <dir_sdi+0x46>
 800e440:	693b      	ldr	r3, [r7, #16]
 800e442:	781b      	ldrb	r3, [r3, #0]
 800e444:	2b02      	cmp	r3, #2
 800e446:	d902      	bls.n	800e44e <dir_sdi+0x46>
		clst = fs->dirbase;
 800e448:	693b      	ldr	r3, [r7, #16]
 800e44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e44c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e44e:	697b      	ldr	r3, [r7, #20]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d10c      	bne.n	800e46e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	095b      	lsrs	r3, r3, #5
 800e458:	693a      	ldr	r2, [r7, #16]
 800e45a:	8912      	ldrh	r2, [r2, #8]
 800e45c:	4293      	cmp	r3, r2
 800e45e:	d301      	bcc.n	800e464 <dir_sdi+0x5c>
 800e460:	2302      	movs	r3, #2
 800e462:	e056      	b.n	800e512 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800e464:	693b      	ldr	r3, [r7, #16]
 800e466:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	61da      	str	r2, [r3, #28]
 800e46c:	e02d      	b.n	800e4ca <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	895b      	ldrh	r3, [r3, #10]
 800e472:	461a      	mov	r2, r3
 800e474:	693b      	ldr	r3, [r7, #16]
 800e476:	899b      	ldrh	r3, [r3, #12]
 800e478:	fb03 f302 	mul.w	r3, r3, r2
 800e47c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e47e:	e019      	b.n	800e4b4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	6979      	ldr	r1, [r7, #20]
 800e484:	4618      	mov	r0, r3
 800e486:	f7ff fc9a 	bl	800ddbe <get_fat>
 800e48a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e48c:	697b      	ldr	r3, [r7, #20]
 800e48e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e492:	d101      	bne.n	800e498 <dir_sdi+0x90>
 800e494:	2301      	movs	r3, #1
 800e496:	e03c      	b.n	800e512 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e498:	697b      	ldr	r3, [r7, #20]
 800e49a:	2b01      	cmp	r3, #1
 800e49c:	d904      	bls.n	800e4a8 <dir_sdi+0xa0>
 800e49e:	693b      	ldr	r3, [r7, #16]
 800e4a0:	6a1b      	ldr	r3, [r3, #32]
 800e4a2:	697a      	ldr	r2, [r7, #20]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d301      	bcc.n	800e4ac <dir_sdi+0xa4>
 800e4a8:	2302      	movs	r3, #2
 800e4aa:	e032      	b.n	800e512 <dir_sdi+0x10a>
			ofs -= csz;
 800e4ac:	683a      	ldr	r2, [r7, #0]
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	1ad3      	subs	r3, r2, r3
 800e4b2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e4b4:	683a      	ldr	r2, [r7, #0]
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	429a      	cmp	r2, r3
 800e4ba:	d2e1      	bcs.n	800e480 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800e4bc:	6979      	ldr	r1, [r7, #20]
 800e4be:	6938      	ldr	r0, [r7, #16]
 800e4c0:	f7ff fc5e 	bl	800dd80 <clust2sect>
 800e4c4:	4602      	mov	r2, r0
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	697a      	ldr	r2, [r7, #20]
 800e4ce:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	69db      	ldr	r3, [r3, #28]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d101      	bne.n	800e4dc <dir_sdi+0xd4>
 800e4d8:	2302      	movs	r3, #2
 800e4da:	e01a      	b.n	800e512 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e4dc:	687b      	ldr	r3, [r7, #4]
 800e4de:	69da      	ldr	r2, [r3, #28]
 800e4e0:	693b      	ldr	r3, [r7, #16]
 800e4e2:	899b      	ldrh	r3, [r3, #12]
 800e4e4:	4619      	mov	r1, r3
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	fbb3 f3f1 	udiv	r3, r3, r1
 800e4ec:	441a      	add	r2, r3
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e4f2:	693b      	ldr	r3, [r7, #16]
 800e4f4:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e4f8:	693b      	ldr	r3, [r7, #16]
 800e4fa:	899b      	ldrh	r3, [r3, #12]
 800e4fc:	461a      	mov	r2, r3
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	fbb3 f0f2 	udiv	r0, r3, r2
 800e504:	fb02 f200 	mul.w	r2, r2, r0
 800e508:	1a9b      	subs	r3, r3, r2
 800e50a:	18ca      	adds	r2, r1, r3
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e510:	2300      	movs	r3, #0
}
 800e512:	4618      	mov	r0, r3
 800e514:	3718      	adds	r7, #24
 800e516:	46bd      	mov	sp, r7
 800e518:	bd80      	pop	{r7, pc}

0800e51a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e51a:	b580      	push	{r7, lr}
 800e51c:	b086      	sub	sp, #24
 800e51e:	af00      	add	r7, sp, #0
 800e520:	6078      	str	r0, [r7, #4]
 800e522:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	695b      	ldr	r3, [r3, #20]
 800e52e:	3320      	adds	r3, #32
 800e530:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	69db      	ldr	r3, [r3, #28]
 800e536:	2b00      	cmp	r3, #0
 800e538:	d003      	beq.n	800e542 <dir_next+0x28>
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e540:	d301      	bcc.n	800e546 <dir_next+0x2c>
 800e542:	2304      	movs	r3, #4
 800e544:	e0bb      	b.n	800e6be <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	899b      	ldrh	r3, [r3, #12]
 800e54a:	461a      	mov	r2, r3
 800e54c:	68bb      	ldr	r3, [r7, #8]
 800e54e:	fbb3 f1f2 	udiv	r1, r3, r2
 800e552:	fb02 f201 	mul.w	r2, r2, r1
 800e556:	1a9b      	subs	r3, r3, r2
 800e558:	2b00      	cmp	r3, #0
 800e55a:	f040 809d 	bne.w	800e698 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	69db      	ldr	r3, [r3, #28]
 800e562:	1c5a      	adds	r2, r3, #1
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	699b      	ldr	r3, [r3, #24]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d10b      	bne.n	800e588 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e570:	68bb      	ldr	r3, [r7, #8]
 800e572:	095b      	lsrs	r3, r3, #5
 800e574:	68fa      	ldr	r2, [r7, #12]
 800e576:	8912      	ldrh	r2, [r2, #8]
 800e578:	4293      	cmp	r3, r2
 800e57a:	f0c0 808d 	bcc.w	800e698 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2200      	movs	r2, #0
 800e582:	61da      	str	r2, [r3, #28]
 800e584:	2304      	movs	r3, #4
 800e586:	e09a      	b.n	800e6be <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	899b      	ldrh	r3, [r3, #12]
 800e58c:	461a      	mov	r2, r3
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	fbb3 f3f2 	udiv	r3, r3, r2
 800e594:	68fa      	ldr	r2, [r7, #12]
 800e596:	8952      	ldrh	r2, [r2, #10]
 800e598:	3a01      	subs	r2, #1
 800e59a:	4013      	ands	r3, r2
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	d17b      	bne.n	800e698 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e5a0:	687a      	ldr	r2, [r7, #4]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	699b      	ldr	r3, [r3, #24]
 800e5a6:	4619      	mov	r1, r3
 800e5a8:	4610      	mov	r0, r2
 800e5aa:	f7ff fc08 	bl	800ddbe <get_fat>
 800e5ae:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	2b01      	cmp	r3, #1
 800e5b4:	d801      	bhi.n	800e5ba <dir_next+0xa0>
 800e5b6:	2302      	movs	r3, #2
 800e5b8:	e081      	b.n	800e6be <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e5ba:	697b      	ldr	r3, [r7, #20]
 800e5bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e5c0:	d101      	bne.n	800e5c6 <dir_next+0xac>
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	e07b      	b.n	800e6be <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	6a1b      	ldr	r3, [r3, #32]
 800e5ca:	697a      	ldr	r2, [r7, #20]
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d359      	bcc.n	800e684 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d104      	bne.n	800e5e0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	61da      	str	r2, [r3, #28]
 800e5dc:	2304      	movs	r3, #4
 800e5de:	e06e      	b.n	800e6be <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e5e0:	687a      	ldr	r2, [r7, #4]
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	699b      	ldr	r3, [r3, #24]
 800e5e6:	4619      	mov	r1, r3
 800e5e8:	4610      	mov	r0, r2
 800e5ea:	f7ff fe3d 	bl	800e268 <create_chain>
 800e5ee:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e5f0:	697b      	ldr	r3, [r7, #20]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d101      	bne.n	800e5fa <dir_next+0xe0>
 800e5f6:	2307      	movs	r3, #7
 800e5f8:	e061      	b.n	800e6be <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e5fa:	697b      	ldr	r3, [r7, #20]
 800e5fc:	2b01      	cmp	r3, #1
 800e5fe:	d101      	bne.n	800e604 <dir_next+0xea>
 800e600:	2302      	movs	r3, #2
 800e602:	e05c      	b.n	800e6be <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e604:	697b      	ldr	r3, [r7, #20]
 800e606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e60a:	d101      	bne.n	800e610 <dir_next+0xf6>
 800e60c:	2301      	movs	r3, #1
 800e60e:	e056      	b.n	800e6be <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e610:	68f8      	ldr	r0, [r7, #12]
 800e612:	f7ff fad3 	bl	800dbbc <sync_window>
 800e616:	4603      	mov	r3, r0
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d001      	beq.n	800e620 <dir_next+0x106>
 800e61c:	2301      	movs	r3, #1
 800e61e:	e04e      	b.n	800e6be <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	899b      	ldrh	r3, [r3, #12]
 800e62a:	461a      	mov	r2, r3
 800e62c:	2100      	movs	r1, #0
 800e62e:	f7ff f8ca 	bl	800d7c6 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e632:	2300      	movs	r3, #0
 800e634:	613b      	str	r3, [r7, #16]
 800e636:	6979      	ldr	r1, [r7, #20]
 800e638:	68f8      	ldr	r0, [r7, #12]
 800e63a:	f7ff fba1 	bl	800dd80 <clust2sect>
 800e63e:	4602      	mov	r2, r0
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	639a      	str	r2, [r3, #56]	; 0x38
 800e644:	e012      	b.n	800e66c <dir_next+0x152>
						fs->wflag = 1;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	2201      	movs	r2, #1
 800e64a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e64c:	68f8      	ldr	r0, [r7, #12]
 800e64e:	f7ff fab5 	bl	800dbbc <sync_window>
 800e652:	4603      	mov	r3, r0
 800e654:	2b00      	cmp	r3, #0
 800e656:	d001      	beq.n	800e65c <dir_next+0x142>
 800e658:	2301      	movs	r3, #1
 800e65a:	e030      	b.n	800e6be <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e65c:	693b      	ldr	r3, [r7, #16]
 800e65e:	3301      	adds	r3, #1
 800e660:	613b      	str	r3, [r7, #16]
 800e662:	68fb      	ldr	r3, [r7, #12]
 800e664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e666:	1c5a      	adds	r2, r3, #1
 800e668:	68fb      	ldr	r3, [r7, #12]
 800e66a:	639a      	str	r2, [r3, #56]	; 0x38
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	895b      	ldrh	r3, [r3, #10]
 800e670:	461a      	mov	r2, r3
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	4293      	cmp	r3, r2
 800e676:	d3e6      	bcc.n	800e646 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e67c:	693b      	ldr	r3, [r7, #16]
 800e67e:	1ad2      	subs	r2, r2, r3
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	697a      	ldr	r2, [r7, #20]
 800e688:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e68a:	6979      	ldr	r1, [r7, #20]
 800e68c:	68f8      	ldr	r0, [r7, #12]
 800e68e:	f7ff fb77 	bl	800dd80 <clust2sect>
 800e692:	4602      	mov	r2, r0
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	68ba      	ldr	r2, [r7, #8]
 800e69c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	899b      	ldrh	r3, [r3, #12]
 800e6a8:	461a      	mov	r2, r3
 800e6aa:	68bb      	ldr	r3, [r7, #8]
 800e6ac:	fbb3 f0f2 	udiv	r0, r3, r2
 800e6b0:	fb02 f200 	mul.w	r2, r2, r0
 800e6b4:	1a9b      	subs	r3, r3, r2
 800e6b6:	18ca      	adds	r2, r1, r3
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e6bc:	2300      	movs	r3, #0
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3718      	adds	r7, #24
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}

0800e6c6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e6c6:	b580      	push	{r7, lr}
 800e6c8:	b086      	sub	sp, #24
 800e6ca:	af00      	add	r7, sp, #0
 800e6cc:	6078      	str	r0, [r7, #4]
 800e6ce:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e6d6:	2100      	movs	r1, #0
 800e6d8:	6878      	ldr	r0, [r7, #4]
 800e6da:	f7ff fe95 	bl	800e408 <dir_sdi>
 800e6de:	4603      	mov	r3, r0
 800e6e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e6e2:	7dfb      	ldrb	r3, [r7, #23]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d12b      	bne.n	800e740 <dir_alloc+0x7a>
		n = 0;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	69db      	ldr	r3, [r3, #28]
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	68f8      	ldr	r0, [r7, #12]
 800e6f4:	f7ff faa6 	bl	800dc44 <move_window>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e6fc:	7dfb      	ldrb	r3, [r7, #23]
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	d11d      	bne.n	800e73e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	6a1b      	ldr	r3, [r3, #32]
 800e706:	781b      	ldrb	r3, [r3, #0]
 800e708:	2be5      	cmp	r3, #229	; 0xe5
 800e70a:	d004      	beq.n	800e716 <dir_alloc+0x50>
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	6a1b      	ldr	r3, [r3, #32]
 800e710:	781b      	ldrb	r3, [r3, #0]
 800e712:	2b00      	cmp	r3, #0
 800e714:	d107      	bne.n	800e726 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e716:	693b      	ldr	r3, [r7, #16]
 800e718:	3301      	adds	r3, #1
 800e71a:	613b      	str	r3, [r7, #16]
 800e71c:	693a      	ldr	r2, [r7, #16]
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	429a      	cmp	r2, r3
 800e722:	d102      	bne.n	800e72a <dir_alloc+0x64>
 800e724:	e00c      	b.n	800e740 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e726:	2300      	movs	r3, #0
 800e728:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e72a:	2101      	movs	r1, #1
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f7ff fef4 	bl	800e51a <dir_next>
 800e732:	4603      	mov	r3, r0
 800e734:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e736:	7dfb      	ldrb	r3, [r7, #23]
 800e738:	2b00      	cmp	r3, #0
 800e73a:	d0d7      	beq.n	800e6ec <dir_alloc+0x26>
 800e73c:	e000      	b.n	800e740 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e73e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e740:	7dfb      	ldrb	r3, [r7, #23]
 800e742:	2b04      	cmp	r3, #4
 800e744:	d101      	bne.n	800e74a <dir_alloc+0x84>
 800e746:	2307      	movs	r3, #7
 800e748:	75fb      	strb	r3, [r7, #23]
	return res;
 800e74a:	7dfb      	ldrb	r3, [r7, #23]
}
 800e74c:	4618      	mov	r0, r3
 800e74e:	3718      	adds	r7, #24
 800e750:	46bd      	mov	sp, r7
 800e752:	bd80      	pop	{r7, pc}

0800e754 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e754:	b580      	push	{r7, lr}
 800e756:	b084      	sub	sp, #16
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
 800e75c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e75e:	683b      	ldr	r3, [r7, #0]
 800e760:	331a      	adds	r3, #26
 800e762:	4618      	mov	r0, r3
 800e764:	f7fe ff8c 	bl	800d680 <ld_word>
 800e768:	4603      	mov	r3, r0
 800e76a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	781b      	ldrb	r3, [r3, #0]
 800e770:	2b03      	cmp	r3, #3
 800e772:	d109      	bne.n	800e788 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	3314      	adds	r3, #20
 800e778:	4618      	mov	r0, r3
 800e77a:	f7fe ff81 	bl	800d680 <ld_word>
 800e77e:	4603      	mov	r3, r0
 800e780:	041b      	lsls	r3, r3, #16
 800e782:	68fa      	ldr	r2, [r7, #12]
 800e784:	4313      	orrs	r3, r2
 800e786:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e788:	68fb      	ldr	r3, [r7, #12]
}
 800e78a:	4618      	mov	r0, r3
 800e78c:	3710      	adds	r7, #16
 800e78e:	46bd      	mov	sp, r7
 800e790:	bd80      	pop	{r7, pc}

0800e792 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e792:	b580      	push	{r7, lr}
 800e794:	b084      	sub	sp, #16
 800e796:	af00      	add	r7, sp, #0
 800e798:	60f8      	str	r0, [r7, #12]
 800e79a:	60b9      	str	r1, [r7, #8]
 800e79c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	331a      	adds	r3, #26
 800e7a2:	687a      	ldr	r2, [r7, #4]
 800e7a4:	b292      	uxth	r2, r2
 800e7a6:	4611      	mov	r1, r2
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f7fe ffa4 	bl	800d6f6 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	781b      	ldrb	r3, [r3, #0]
 800e7b2:	2b03      	cmp	r3, #3
 800e7b4:	d109      	bne.n	800e7ca <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e7b6:	68bb      	ldr	r3, [r7, #8]
 800e7b8:	f103 0214 	add.w	r2, r3, #20
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	0c1b      	lsrs	r3, r3, #16
 800e7c0:	b29b      	uxth	r3, r3
 800e7c2:	4619      	mov	r1, r3
 800e7c4:	4610      	mov	r0, r2
 800e7c6:	f7fe ff96 	bl	800d6f6 <st_word>
	}
}
 800e7ca:	bf00      	nop
 800e7cc:	3710      	adds	r7, #16
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd80      	pop	{r7, pc}
	...

0800e7d4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800e7d4:	b590      	push	{r4, r7, lr}
 800e7d6:	b087      	sub	sp, #28
 800e7d8:	af00      	add	r7, sp, #0
 800e7da:	6078      	str	r0, [r7, #4]
 800e7dc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800e7de:	683b      	ldr	r3, [r7, #0]
 800e7e0:	331a      	adds	r3, #26
 800e7e2:	4618      	mov	r0, r3
 800e7e4:	f7fe ff4c 	bl	800d680 <ld_word>
 800e7e8:	4603      	mov	r3, r0
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d001      	beq.n	800e7f2 <cmp_lfn+0x1e>
 800e7ee:	2300      	movs	r3, #0
 800e7f0:	e059      	b.n	800e8a6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800e7f2:	683b      	ldr	r3, [r7, #0]
 800e7f4:	781b      	ldrb	r3, [r3, #0]
 800e7f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e7fa:	1e5a      	subs	r2, r3, #1
 800e7fc:	4613      	mov	r3, r2
 800e7fe:	005b      	lsls	r3, r3, #1
 800e800:	4413      	add	r3, r2
 800e802:	009b      	lsls	r3, r3, #2
 800e804:	4413      	add	r3, r2
 800e806:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e808:	2301      	movs	r3, #1
 800e80a:	81fb      	strh	r3, [r7, #14]
 800e80c:	2300      	movs	r3, #0
 800e80e:	613b      	str	r3, [r7, #16]
 800e810:	e033      	b.n	800e87a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800e812:	4a27      	ldr	r2, [pc, #156]	; (800e8b0 <cmp_lfn+0xdc>)
 800e814:	693b      	ldr	r3, [r7, #16]
 800e816:	4413      	add	r3, r2
 800e818:	781b      	ldrb	r3, [r3, #0]
 800e81a:	461a      	mov	r2, r3
 800e81c:	683b      	ldr	r3, [r7, #0]
 800e81e:	4413      	add	r3, r2
 800e820:	4618      	mov	r0, r3
 800e822:	f7fe ff2d 	bl	800d680 <ld_word>
 800e826:	4603      	mov	r3, r0
 800e828:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800e82a:	89fb      	ldrh	r3, [r7, #14]
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	d01a      	beq.n	800e866 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800e830:	697b      	ldr	r3, [r7, #20]
 800e832:	2bfe      	cmp	r3, #254	; 0xfe
 800e834:	d812      	bhi.n	800e85c <cmp_lfn+0x88>
 800e836:	89bb      	ldrh	r3, [r7, #12]
 800e838:	4618      	mov	r0, r3
 800e83a:	f002 f909 	bl	8010a50 <ff_wtoupper>
 800e83e:	4603      	mov	r3, r0
 800e840:	461c      	mov	r4, r3
 800e842:	697b      	ldr	r3, [r7, #20]
 800e844:	1c5a      	adds	r2, r3, #1
 800e846:	617a      	str	r2, [r7, #20]
 800e848:	005b      	lsls	r3, r3, #1
 800e84a:	687a      	ldr	r2, [r7, #4]
 800e84c:	4413      	add	r3, r2
 800e84e:	881b      	ldrh	r3, [r3, #0]
 800e850:	4618      	mov	r0, r3
 800e852:	f002 f8fd 	bl	8010a50 <ff_wtoupper>
 800e856:	4603      	mov	r3, r0
 800e858:	429c      	cmp	r4, r3
 800e85a:	d001      	beq.n	800e860 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800e85c:	2300      	movs	r3, #0
 800e85e:	e022      	b.n	800e8a6 <cmp_lfn+0xd2>
			}
			wc = uc;
 800e860:	89bb      	ldrh	r3, [r7, #12]
 800e862:	81fb      	strh	r3, [r7, #14]
 800e864:	e006      	b.n	800e874 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800e866:	89bb      	ldrh	r3, [r7, #12]
 800e868:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e86c:	4293      	cmp	r3, r2
 800e86e:	d001      	beq.n	800e874 <cmp_lfn+0xa0>
 800e870:	2300      	movs	r3, #0
 800e872:	e018      	b.n	800e8a6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800e874:	693b      	ldr	r3, [r7, #16]
 800e876:	3301      	adds	r3, #1
 800e878:	613b      	str	r3, [r7, #16]
 800e87a:	693b      	ldr	r3, [r7, #16]
 800e87c:	2b0c      	cmp	r3, #12
 800e87e:	d9c8      	bls.n	800e812 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800e880:	683b      	ldr	r3, [r7, #0]
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d00b      	beq.n	800e8a4 <cmp_lfn+0xd0>
 800e88c:	89fb      	ldrh	r3, [r7, #14]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d008      	beq.n	800e8a4 <cmp_lfn+0xd0>
 800e892:	697b      	ldr	r3, [r7, #20]
 800e894:	005b      	lsls	r3, r3, #1
 800e896:	687a      	ldr	r2, [r7, #4]
 800e898:	4413      	add	r3, r2
 800e89a:	881b      	ldrh	r3, [r3, #0]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d001      	beq.n	800e8a4 <cmp_lfn+0xd0>
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	e000      	b.n	800e8a6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800e8a4:	2301      	movs	r3, #1
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	371c      	adds	r7, #28
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	bd90      	pop	{r4, r7, pc}
 800e8ae:	bf00      	nop
 800e8b0:	08018d9c 	.word	0x08018d9c

0800e8b4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b088      	sub	sp, #32
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	60f8      	str	r0, [r7, #12]
 800e8bc:	60b9      	str	r1, [r7, #8]
 800e8be:	4611      	mov	r1, r2
 800e8c0:	461a      	mov	r2, r3
 800e8c2:	460b      	mov	r3, r1
 800e8c4:	71fb      	strb	r3, [r7, #7]
 800e8c6:	4613      	mov	r3, r2
 800e8c8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	330d      	adds	r3, #13
 800e8ce:	79ba      	ldrb	r2, [r7, #6]
 800e8d0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	330b      	adds	r3, #11
 800e8d6:	220f      	movs	r2, #15
 800e8d8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800e8da:	68bb      	ldr	r3, [r7, #8]
 800e8dc:	330c      	adds	r3, #12
 800e8de:	2200      	movs	r2, #0
 800e8e0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	331a      	adds	r3, #26
 800e8e6:	2100      	movs	r1, #0
 800e8e8:	4618      	mov	r0, r3
 800e8ea:	f7fe ff04 	bl	800d6f6 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800e8ee:	79fb      	ldrb	r3, [r7, #7]
 800e8f0:	1e5a      	subs	r2, r3, #1
 800e8f2:	4613      	mov	r3, r2
 800e8f4:	005b      	lsls	r3, r3, #1
 800e8f6:	4413      	add	r3, r2
 800e8f8:	009b      	lsls	r3, r3, #2
 800e8fa:	4413      	add	r3, r2
 800e8fc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800e8fe:	2300      	movs	r3, #0
 800e900:	82fb      	strh	r3, [r7, #22]
 800e902:	2300      	movs	r3, #0
 800e904:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800e906:	8afb      	ldrh	r3, [r7, #22]
 800e908:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e90c:	4293      	cmp	r3, r2
 800e90e:	d007      	beq.n	800e920 <put_lfn+0x6c>
 800e910:	69fb      	ldr	r3, [r7, #28]
 800e912:	1c5a      	adds	r2, r3, #1
 800e914:	61fa      	str	r2, [r7, #28]
 800e916:	005b      	lsls	r3, r3, #1
 800e918:	68fa      	ldr	r2, [r7, #12]
 800e91a:	4413      	add	r3, r2
 800e91c:	881b      	ldrh	r3, [r3, #0]
 800e91e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800e920:	4a17      	ldr	r2, [pc, #92]	; (800e980 <put_lfn+0xcc>)
 800e922:	69bb      	ldr	r3, [r7, #24]
 800e924:	4413      	add	r3, r2
 800e926:	781b      	ldrb	r3, [r3, #0]
 800e928:	461a      	mov	r2, r3
 800e92a:	68bb      	ldr	r3, [r7, #8]
 800e92c:	4413      	add	r3, r2
 800e92e:	8afa      	ldrh	r2, [r7, #22]
 800e930:	4611      	mov	r1, r2
 800e932:	4618      	mov	r0, r3
 800e934:	f7fe fedf 	bl	800d6f6 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800e938:	8afb      	ldrh	r3, [r7, #22]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d102      	bne.n	800e944 <put_lfn+0x90>
 800e93e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e942:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800e944:	69bb      	ldr	r3, [r7, #24]
 800e946:	3301      	adds	r3, #1
 800e948:	61bb      	str	r3, [r7, #24]
 800e94a:	69bb      	ldr	r3, [r7, #24]
 800e94c:	2b0c      	cmp	r3, #12
 800e94e:	d9da      	bls.n	800e906 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800e950:	8afb      	ldrh	r3, [r7, #22]
 800e952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e956:	4293      	cmp	r3, r2
 800e958:	d006      	beq.n	800e968 <put_lfn+0xb4>
 800e95a:	69fb      	ldr	r3, [r7, #28]
 800e95c:	005b      	lsls	r3, r3, #1
 800e95e:	68fa      	ldr	r2, [r7, #12]
 800e960:	4413      	add	r3, r2
 800e962:	881b      	ldrh	r3, [r3, #0]
 800e964:	2b00      	cmp	r3, #0
 800e966:	d103      	bne.n	800e970 <put_lfn+0xbc>
 800e968:	79fb      	ldrb	r3, [r7, #7]
 800e96a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e96e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800e970:	68bb      	ldr	r3, [r7, #8]
 800e972:	79fa      	ldrb	r2, [r7, #7]
 800e974:	701a      	strb	r2, [r3, #0]
}
 800e976:	bf00      	nop
 800e978:	3720      	adds	r7, #32
 800e97a:	46bd      	mov	sp, r7
 800e97c:	bd80      	pop	{r7, pc}
 800e97e:	bf00      	nop
 800e980:	08018d9c 	.word	0x08018d9c

0800e984 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b08c      	sub	sp, #48	; 0x30
 800e988:	af00      	add	r7, sp, #0
 800e98a:	60f8      	str	r0, [r7, #12]
 800e98c:	60b9      	str	r1, [r7, #8]
 800e98e:	607a      	str	r2, [r7, #4]
 800e990:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800e992:	220b      	movs	r2, #11
 800e994:	68b9      	ldr	r1, [r7, #8]
 800e996:	68f8      	ldr	r0, [r7, #12]
 800e998:	f7fe fef4 	bl	800d784 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	2b05      	cmp	r3, #5
 800e9a0:	d92b      	bls.n	800e9fa <gen_numname+0x76>
		sr = seq;
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800e9a6:	e022      	b.n	800e9ee <gen_numname+0x6a>
			wc = *lfn++;
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	1c9a      	adds	r2, r3, #2
 800e9ac:	607a      	str	r2, [r7, #4]
 800e9ae:	881b      	ldrh	r3, [r3, #0]
 800e9b0:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800e9b6:	e017      	b.n	800e9e8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800e9b8:	69fb      	ldr	r3, [r7, #28]
 800e9ba:	005a      	lsls	r2, r3, #1
 800e9bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e9be:	f003 0301 	and.w	r3, r3, #1
 800e9c2:	4413      	add	r3, r2
 800e9c4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800e9c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e9c8:	085b      	lsrs	r3, r3, #1
 800e9ca:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800e9cc:	69fb      	ldr	r3, [r7, #28]
 800e9ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d005      	beq.n	800e9e2 <gen_numname+0x5e>
 800e9d6:	69fb      	ldr	r3, [r7, #28]
 800e9d8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800e9dc:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800e9e0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800e9e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9e4:	3301      	adds	r3, #1
 800e9e6:	62bb      	str	r3, [r7, #40]	; 0x28
 800e9e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ea:	2b0f      	cmp	r3, #15
 800e9ec:	d9e4      	bls.n	800e9b8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	881b      	ldrh	r3, [r3, #0]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d1d8      	bne.n	800e9a8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800e9f6:	69fb      	ldr	r3, [r7, #28]
 800e9f8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800e9fa:	2307      	movs	r3, #7
 800e9fc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	b2db      	uxtb	r3, r3
 800ea02:	f003 030f 	and.w	r3, r3, #15
 800ea06:	b2db      	uxtb	r3, r3
 800ea08:	3330      	adds	r3, #48	; 0x30
 800ea0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800ea0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea12:	2b39      	cmp	r3, #57	; 0x39
 800ea14:	d904      	bls.n	800ea20 <gen_numname+0x9c>
 800ea16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ea1a:	3307      	adds	r3, #7
 800ea1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800ea20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea22:	1e5a      	subs	r2, r3, #1
 800ea24:	62ba      	str	r2, [r7, #40]	; 0x28
 800ea26:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ea2a:	4413      	add	r3, r2
 800ea2c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800ea30:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800ea34:	683b      	ldr	r3, [r7, #0]
 800ea36:	091b      	lsrs	r3, r3, #4
 800ea38:	603b      	str	r3, [r7, #0]
	} while (seq);
 800ea3a:	683b      	ldr	r3, [r7, #0]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d1de      	bne.n	800e9fe <gen_numname+0x7a>
	ns[i] = '~';
 800ea40:	f107 0214 	add.w	r2, r7, #20
 800ea44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea46:	4413      	add	r3, r2
 800ea48:	227e      	movs	r2, #126	; 0x7e
 800ea4a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	627b      	str	r3, [r7, #36]	; 0x24
 800ea50:	e002      	b.n	800ea58 <gen_numname+0xd4>
 800ea52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea54:	3301      	adds	r3, #1
 800ea56:	627b      	str	r3, [r7, #36]	; 0x24
 800ea58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea5c:	429a      	cmp	r2, r3
 800ea5e:	d205      	bcs.n	800ea6c <gen_numname+0xe8>
 800ea60:	68fa      	ldr	r2, [r7, #12]
 800ea62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea64:	4413      	add	r3, r2
 800ea66:	781b      	ldrb	r3, [r3, #0]
 800ea68:	2b20      	cmp	r3, #32
 800ea6a:	d1f2      	bne.n	800ea52 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800ea6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea6e:	2b07      	cmp	r3, #7
 800ea70:	d808      	bhi.n	800ea84 <gen_numname+0x100>
 800ea72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea74:	1c5a      	adds	r2, r3, #1
 800ea76:	62ba      	str	r2, [r7, #40]	; 0x28
 800ea78:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800ea7c:	4413      	add	r3, r2
 800ea7e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800ea82:	e000      	b.n	800ea86 <gen_numname+0x102>
 800ea84:	2120      	movs	r1, #32
 800ea86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea88:	1c5a      	adds	r2, r3, #1
 800ea8a:	627a      	str	r2, [r7, #36]	; 0x24
 800ea8c:	68fa      	ldr	r2, [r7, #12]
 800ea8e:	4413      	add	r3, r2
 800ea90:	460a      	mov	r2, r1
 800ea92:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800ea94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea96:	2b07      	cmp	r3, #7
 800ea98:	d9e8      	bls.n	800ea6c <gen_numname+0xe8>
}
 800ea9a:	bf00      	nop
 800ea9c:	bf00      	nop
 800ea9e:	3730      	adds	r7, #48	; 0x30
 800eaa0:	46bd      	mov	sp, r7
 800eaa2:	bd80      	pop	{r7, pc}

0800eaa4 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b085      	sub	sp, #20
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800eaac:	2300      	movs	r3, #0
 800eaae:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800eab0:	230b      	movs	r3, #11
 800eab2:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800eab4:	7bfb      	ldrb	r3, [r7, #15]
 800eab6:	b2da      	uxtb	r2, r3
 800eab8:	0852      	lsrs	r2, r2, #1
 800eaba:	01db      	lsls	r3, r3, #7
 800eabc:	4313      	orrs	r3, r2
 800eabe:	b2da      	uxtb	r2, r3
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	1c59      	adds	r1, r3, #1
 800eac4:	6079      	str	r1, [r7, #4]
 800eac6:	781b      	ldrb	r3, [r3, #0]
 800eac8:	4413      	add	r3, r2
 800eaca:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800eacc:	68bb      	ldr	r3, [r7, #8]
 800eace:	3b01      	subs	r3, #1
 800ead0:	60bb      	str	r3, [r7, #8]
 800ead2:	68bb      	ldr	r3, [r7, #8]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d1ed      	bne.n	800eab4 <sum_sfn+0x10>
	return sum;
 800ead8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eada:	4618      	mov	r0, r3
 800eadc:	3714      	adds	r7, #20
 800eade:	46bd      	mov	sp, r7
 800eae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae4:	4770      	bx	lr

0800eae6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800eae6:	b580      	push	{r7, lr}
 800eae8:	b086      	sub	sp, #24
 800eaea:	af00      	add	r7, sp, #0
 800eaec:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800eaf4:	2100      	movs	r1, #0
 800eaf6:	6878      	ldr	r0, [r7, #4]
 800eaf8:	f7ff fc86 	bl	800e408 <dir_sdi>
 800eafc:	4603      	mov	r3, r0
 800eafe:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800eb00:	7dfb      	ldrb	r3, [r7, #23]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d001      	beq.n	800eb0a <dir_find+0x24>
 800eb06:	7dfb      	ldrb	r3, [r7, #23]
 800eb08:	e0a9      	b.n	800ec5e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800eb0a:	23ff      	movs	r3, #255	; 0xff
 800eb0c:	753b      	strb	r3, [r7, #20]
 800eb0e:	7d3b      	ldrb	r3, [r7, #20]
 800eb10:	757b      	strb	r3, [r7, #21]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb18:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	69db      	ldr	r3, [r3, #28]
 800eb1e:	4619      	mov	r1, r3
 800eb20:	6938      	ldr	r0, [r7, #16]
 800eb22:	f7ff f88f 	bl	800dc44 <move_window>
 800eb26:	4603      	mov	r3, r0
 800eb28:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800eb2a:	7dfb      	ldrb	r3, [r7, #23]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	f040 8090 	bne.w	800ec52 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	6a1b      	ldr	r3, [r3, #32]
 800eb36:	781b      	ldrb	r3, [r3, #0]
 800eb38:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800eb3a:	7dbb      	ldrb	r3, [r7, #22]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d102      	bne.n	800eb46 <dir_find+0x60>
 800eb40:	2304      	movs	r3, #4
 800eb42:	75fb      	strb	r3, [r7, #23]
 800eb44:	e08a      	b.n	800ec5c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6a1b      	ldr	r3, [r3, #32]
 800eb4a:	330b      	adds	r3, #11
 800eb4c:	781b      	ldrb	r3, [r3, #0]
 800eb4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800eb52:	73fb      	strb	r3, [r7, #15]
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	7bfa      	ldrb	r2, [r7, #15]
 800eb58:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800eb5a:	7dbb      	ldrb	r3, [r7, #22]
 800eb5c:	2be5      	cmp	r3, #229	; 0xe5
 800eb5e:	d007      	beq.n	800eb70 <dir_find+0x8a>
 800eb60:	7bfb      	ldrb	r3, [r7, #15]
 800eb62:	f003 0308 	and.w	r3, r3, #8
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d009      	beq.n	800eb7e <dir_find+0x98>
 800eb6a:	7bfb      	ldrb	r3, [r7, #15]
 800eb6c:	2b0f      	cmp	r3, #15
 800eb6e:	d006      	beq.n	800eb7e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800eb70:	23ff      	movs	r3, #255	; 0xff
 800eb72:	757b      	strb	r3, [r7, #21]
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb7a:	631a      	str	r2, [r3, #48]	; 0x30
 800eb7c:	e05e      	b.n	800ec3c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800eb7e:	7bfb      	ldrb	r3, [r7, #15]
 800eb80:	2b0f      	cmp	r3, #15
 800eb82:	d136      	bne.n	800ebf2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eb8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d154      	bne.n	800ec3c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800eb92:	7dbb      	ldrb	r3, [r7, #22]
 800eb94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb98:	2b00      	cmp	r3, #0
 800eb9a:	d00d      	beq.n	800ebb8 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	6a1b      	ldr	r3, [r3, #32]
 800eba0:	7b5b      	ldrb	r3, [r3, #13]
 800eba2:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800eba4:	7dbb      	ldrb	r3, [r7, #22]
 800eba6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ebaa:	75bb      	strb	r3, [r7, #22]
 800ebac:	7dbb      	ldrb	r3, [r7, #22]
 800ebae:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	695a      	ldr	r2, [r3, #20]
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800ebb8:	7dba      	ldrb	r2, [r7, #22]
 800ebba:	7d7b      	ldrb	r3, [r7, #21]
 800ebbc:	429a      	cmp	r2, r3
 800ebbe:	d115      	bne.n	800ebec <dir_find+0x106>
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	6a1b      	ldr	r3, [r3, #32]
 800ebc4:	330d      	adds	r3, #13
 800ebc6:	781b      	ldrb	r3, [r3, #0]
 800ebc8:	7d3a      	ldrb	r2, [r7, #20]
 800ebca:	429a      	cmp	r2, r3
 800ebcc:	d10e      	bne.n	800ebec <dir_find+0x106>
 800ebce:	693b      	ldr	r3, [r7, #16]
 800ebd0:	691a      	ldr	r2, [r3, #16]
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6a1b      	ldr	r3, [r3, #32]
 800ebd6:	4619      	mov	r1, r3
 800ebd8:	4610      	mov	r0, r2
 800ebda:	f7ff fdfb 	bl	800e7d4 <cmp_lfn>
 800ebde:	4603      	mov	r3, r0
 800ebe0:	2b00      	cmp	r3, #0
 800ebe2:	d003      	beq.n	800ebec <dir_find+0x106>
 800ebe4:	7d7b      	ldrb	r3, [r7, #21]
 800ebe6:	3b01      	subs	r3, #1
 800ebe8:	b2db      	uxtb	r3, r3
 800ebea:	e000      	b.n	800ebee <dir_find+0x108>
 800ebec:	23ff      	movs	r3, #255	; 0xff
 800ebee:	757b      	strb	r3, [r7, #21]
 800ebf0:	e024      	b.n	800ec3c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ebf2:	7d7b      	ldrb	r3, [r7, #21]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d109      	bne.n	800ec0c <dir_find+0x126>
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6a1b      	ldr	r3, [r3, #32]
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f7ff ff51 	bl	800eaa4 <sum_sfn>
 800ec02:	4603      	mov	r3, r0
 800ec04:	461a      	mov	r2, r3
 800ec06:	7d3b      	ldrb	r3, [r7, #20]
 800ec08:	4293      	cmp	r3, r2
 800ec0a:	d024      	beq.n	800ec56 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ec12:	f003 0301 	and.w	r3, r3, #1
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d10a      	bne.n	800ec30 <dir_find+0x14a>
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6a18      	ldr	r0, [r3, #32]
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	3324      	adds	r3, #36	; 0x24
 800ec22:	220b      	movs	r2, #11
 800ec24:	4619      	mov	r1, r3
 800ec26:	f7fe fde9 	bl	800d7fc <mem_cmp>
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d014      	beq.n	800ec5a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800ec30:	23ff      	movs	r3, #255	; 0xff
 800ec32:	757b      	strb	r3, [r7, #21]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ec3a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ec3c:	2100      	movs	r1, #0
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	f7ff fc6b 	bl	800e51a <dir_next>
 800ec44:	4603      	mov	r3, r0
 800ec46:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ec48:	7dfb      	ldrb	r3, [r7, #23]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	f43f af65 	beq.w	800eb1a <dir_find+0x34>
 800ec50:	e004      	b.n	800ec5c <dir_find+0x176>
		if (res != FR_OK) break;
 800ec52:	bf00      	nop
 800ec54:	e002      	b.n	800ec5c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800ec56:	bf00      	nop
 800ec58:	e000      	b.n	800ec5c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800ec5a:	bf00      	nop

	return res;
 800ec5c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec5e:	4618      	mov	r0, r3
 800ec60:	3718      	adds	r7, #24
 800ec62:	46bd      	mov	sp, r7
 800ec64:	bd80      	pop	{r7, pc}
	...

0800ec68 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ec68:	b580      	push	{r7, lr}
 800ec6a:	b08c      	sub	sp, #48	; 0x30
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ec7c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d001      	beq.n	800ec88 <dir_register+0x20>
 800ec84:	2306      	movs	r3, #6
 800ec86:	e0e0      	b.n	800ee4a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800ec88:	2300      	movs	r3, #0
 800ec8a:	627b      	str	r3, [r7, #36]	; 0x24
 800ec8c:	e002      	b.n	800ec94 <dir_register+0x2c>
 800ec8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec90:	3301      	adds	r3, #1
 800ec92:	627b      	str	r3, [r7, #36]	; 0x24
 800ec94:	69fb      	ldr	r3, [r7, #28]
 800ec96:	691a      	ldr	r2, [r3, #16]
 800ec98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec9a:	005b      	lsls	r3, r3, #1
 800ec9c:	4413      	add	r3, r2
 800ec9e:	881b      	ldrh	r3, [r3, #0]
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d1f4      	bne.n	800ec8e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800ecaa:	f107 030c 	add.w	r3, r7, #12
 800ecae:	220c      	movs	r2, #12
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f7fe fd67 	bl	800d784 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800ecb6:	7dfb      	ldrb	r3, [r7, #23]
 800ecb8:	f003 0301 	and.w	r3, r3, #1
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d032      	beq.n	800ed26 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	2240      	movs	r2, #64	; 0x40
 800ecc4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800ecc8:	2301      	movs	r3, #1
 800ecca:	62bb      	str	r3, [r7, #40]	; 0x28
 800eccc:	e016      	b.n	800ecfc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800ecd4:	69fb      	ldr	r3, [r7, #28]
 800ecd6:	691a      	ldr	r2, [r3, #16]
 800ecd8:	f107 010c 	add.w	r1, r7, #12
 800ecdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecde:	f7ff fe51 	bl	800e984 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f7ff feff 	bl	800eae6 <dir_find>
 800ece8:	4603      	mov	r3, r0
 800ecea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800ecee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d106      	bne.n	800ed04 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800ecf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf8:	3301      	adds	r3, #1
 800ecfa:	62bb      	str	r3, [r7, #40]	; 0x28
 800ecfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecfe:	2b63      	cmp	r3, #99	; 0x63
 800ed00:	d9e5      	bls.n	800ecce <dir_register+0x66>
 800ed02:	e000      	b.n	800ed06 <dir_register+0x9e>
			if (res != FR_OK) break;
 800ed04:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800ed06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed08:	2b64      	cmp	r3, #100	; 0x64
 800ed0a:	d101      	bne.n	800ed10 <dir_register+0xa8>
 800ed0c:	2307      	movs	r3, #7
 800ed0e:	e09c      	b.n	800ee4a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800ed10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed14:	2b04      	cmp	r3, #4
 800ed16:	d002      	beq.n	800ed1e <dir_register+0xb6>
 800ed18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed1c:	e095      	b.n	800ee4a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800ed1e:	7dfa      	ldrb	r2, [r7, #23]
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800ed26:	7dfb      	ldrb	r3, [r7, #23]
 800ed28:	f003 0302 	and.w	r3, r3, #2
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d007      	beq.n	800ed40 <dir_register+0xd8>
 800ed30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed32:	330c      	adds	r3, #12
 800ed34:	4a47      	ldr	r2, [pc, #284]	; (800ee54 <dir_register+0x1ec>)
 800ed36:	fba2 2303 	umull	r2, r3, r2, r3
 800ed3a:	089b      	lsrs	r3, r3, #2
 800ed3c:	3301      	adds	r3, #1
 800ed3e:	e000      	b.n	800ed42 <dir_register+0xda>
 800ed40:	2301      	movs	r3, #1
 800ed42:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800ed44:	6a39      	ldr	r1, [r7, #32]
 800ed46:	6878      	ldr	r0, [r7, #4]
 800ed48:	f7ff fcbd 	bl	800e6c6 <dir_alloc>
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800ed52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d148      	bne.n	800edec <dir_register+0x184>
 800ed5a:	6a3b      	ldr	r3, [r7, #32]
 800ed5c:	3b01      	subs	r3, #1
 800ed5e:	623b      	str	r3, [r7, #32]
 800ed60:	6a3b      	ldr	r3, [r7, #32]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d042      	beq.n	800edec <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	695a      	ldr	r2, [r3, #20]
 800ed6a:	6a3b      	ldr	r3, [r7, #32]
 800ed6c:	015b      	lsls	r3, r3, #5
 800ed6e:	1ad3      	subs	r3, r2, r3
 800ed70:	4619      	mov	r1, r3
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f7ff fb48 	bl	800e408 <dir_sdi>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ed7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d132      	bne.n	800edec <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	3324      	adds	r3, #36	; 0x24
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	f7ff fe8a 	bl	800eaa4 <sum_sfn>
 800ed90:	4603      	mov	r3, r0
 800ed92:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	69db      	ldr	r3, [r3, #28]
 800ed98:	4619      	mov	r1, r3
 800ed9a:	69f8      	ldr	r0, [r7, #28]
 800ed9c:	f7fe ff52 	bl	800dc44 <move_window>
 800eda0:	4603      	mov	r3, r0
 800eda2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800eda6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800edaa:	2b00      	cmp	r3, #0
 800edac:	d11d      	bne.n	800edea <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800edae:	69fb      	ldr	r3, [r7, #28]
 800edb0:	6918      	ldr	r0, [r3, #16]
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	6a19      	ldr	r1, [r3, #32]
 800edb6:	6a3b      	ldr	r3, [r7, #32]
 800edb8:	b2da      	uxtb	r2, r3
 800edba:	7efb      	ldrb	r3, [r7, #27]
 800edbc:	f7ff fd7a 	bl	800e8b4 <put_lfn>
				fs->wflag = 1;
 800edc0:	69fb      	ldr	r3, [r7, #28]
 800edc2:	2201      	movs	r2, #1
 800edc4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800edc6:	2100      	movs	r1, #0
 800edc8:	6878      	ldr	r0, [r7, #4]
 800edca:	f7ff fba6 	bl	800e51a <dir_next>
 800edce:	4603      	mov	r3, r0
 800edd0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800edd4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d107      	bne.n	800edec <dir_register+0x184>
 800eddc:	6a3b      	ldr	r3, [r7, #32]
 800edde:	3b01      	subs	r3, #1
 800ede0:	623b      	str	r3, [r7, #32]
 800ede2:	6a3b      	ldr	r3, [r7, #32]
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d1d5      	bne.n	800ed94 <dir_register+0x12c>
 800ede8:	e000      	b.n	800edec <dir_register+0x184>
				if (res != FR_OK) break;
 800edea:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800edec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d128      	bne.n	800ee46 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	69db      	ldr	r3, [r3, #28]
 800edf8:	4619      	mov	r1, r3
 800edfa:	69f8      	ldr	r0, [r7, #28]
 800edfc:	f7fe ff22 	bl	800dc44 <move_window>
 800ee00:	4603      	mov	r3, r0
 800ee02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800ee06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d11b      	bne.n	800ee46 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	6a1b      	ldr	r3, [r3, #32]
 800ee12:	2220      	movs	r2, #32
 800ee14:	2100      	movs	r1, #0
 800ee16:	4618      	mov	r0, r3
 800ee18:	f7fe fcd5 	bl	800d7c6 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	6a18      	ldr	r0, [r3, #32]
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	3324      	adds	r3, #36	; 0x24
 800ee24:	220b      	movs	r2, #11
 800ee26:	4619      	mov	r1, r3
 800ee28:	f7fe fcac 	bl	800d784 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800ee2c:	687b      	ldr	r3, [r7, #4]
 800ee2e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	6a1b      	ldr	r3, [r3, #32]
 800ee36:	330c      	adds	r3, #12
 800ee38:	f002 0218 	and.w	r2, r2, #24
 800ee3c:	b2d2      	uxtb	r2, r2
 800ee3e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800ee40:	69fb      	ldr	r3, [r7, #28]
 800ee42:	2201      	movs	r2, #1
 800ee44:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ee46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	3730      	adds	r7, #48	; 0x30
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
 800ee52:	bf00      	nop
 800ee54:	4ec4ec4f 	.word	0x4ec4ec4f

0800ee58 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b088      	sub	sp, #32
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	6078      	str	r0, [r7, #4]
 800ee60:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	2200      	movs	r2, #0
 800ee6c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	69db      	ldr	r3, [r3, #28]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	f000 80c9 	beq.w	800f00a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ee80:	d032      	beq.n	800eee8 <get_fileinfo+0x90>
			i = j = 0;
 800ee82:	2300      	movs	r3, #0
 800ee84:	61bb      	str	r3, [r7, #24]
 800ee86:	69bb      	ldr	r3, [r7, #24]
 800ee88:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800ee8a:	e01b      	b.n	800eec4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800ee8c:	89fb      	ldrh	r3, [r7, #14]
 800ee8e:	2100      	movs	r1, #0
 800ee90:	4618      	mov	r0, r3
 800ee92:	f001 fda1 	bl	80109d8 <ff_convert>
 800ee96:	4603      	mov	r3, r0
 800ee98:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800ee9a:	89fb      	ldrh	r3, [r7, #14]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d102      	bne.n	800eea6 <get_fileinfo+0x4e>
 800eea0:	2300      	movs	r3, #0
 800eea2:	61fb      	str	r3, [r7, #28]
 800eea4:	e01a      	b.n	800eedc <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800eea6:	69fb      	ldr	r3, [r7, #28]
 800eea8:	2bfe      	cmp	r3, #254	; 0xfe
 800eeaa:	d902      	bls.n	800eeb2 <get_fileinfo+0x5a>
 800eeac:	2300      	movs	r3, #0
 800eeae:	61fb      	str	r3, [r7, #28]
 800eeb0:	e014      	b.n	800eedc <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800eeb2:	69fb      	ldr	r3, [r7, #28]
 800eeb4:	1c5a      	adds	r2, r3, #1
 800eeb6:	61fa      	str	r2, [r7, #28]
 800eeb8:	89fa      	ldrh	r2, [r7, #14]
 800eeba:	b2d1      	uxtb	r1, r2
 800eebc:	683a      	ldr	r2, [r7, #0]
 800eebe:	4413      	add	r3, r2
 800eec0:	460a      	mov	r2, r1
 800eec2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800eec4:	693b      	ldr	r3, [r7, #16]
 800eec6:	691a      	ldr	r2, [r3, #16]
 800eec8:	69bb      	ldr	r3, [r7, #24]
 800eeca:	1c59      	adds	r1, r3, #1
 800eecc:	61b9      	str	r1, [r7, #24]
 800eece:	005b      	lsls	r3, r3, #1
 800eed0:	4413      	add	r3, r2
 800eed2:	881b      	ldrh	r3, [r3, #0]
 800eed4:	81fb      	strh	r3, [r7, #14]
 800eed6:	89fb      	ldrh	r3, [r7, #14]
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	d1d7      	bne.n	800ee8c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800eedc:	683a      	ldr	r2, [r7, #0]
 800eede:	69fb      	ldr	r3, [r7, #28]
 800eee0:	4413      	add	r3, r2
 800eee2:	3316      	adds	r3, #22
 800eee4:	2200      	movs	r2, #0
 800eee6:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800eee8:	2300      	movs	r3, #0
 800eeea:	61bb      	str	r3, [r7, #24]
 800eeec:	69bb      	ldr	r3, [r7, #24]
 800eeee:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800eef0:	683a      	ldr	r2, [r7, #0]
 800eef2:	69fb      	ldr	r3, [r7, #28]
 800eef4:	4413      	add	r3, r2
 800eef6:	3316      	adds	r3, #22
 800eef8:	781b      	ldrb	r3, [r3, #0]
 800eefa:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800eefc:	e04c      	b.n	800ef98 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	6a1a      	ldr	r2, [r3, #32]
 800ef02:	69fb      	ldr	r3, [r7, #28]
 800ef04:	1c59      	adds	r1, r3, #1
 800ef06:	61f9      	str	r1, [r7, #28]
 800ef08:	4413      	add	r3, r2
 800ef0a:	781b      	ldrb	r3, [r3, #0]
 800ef0c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800ef0e:	7dfb      	ldrb	r3, [r7, #23]
 800ef10:	2b20      	cmp	r3, #32
 800ef12:	d100      	bne.n	800ef16 <get_fileinfo+0xbe>
 800ef14:	e040      	b.n	800ef98 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800ef16:	7dfb      	ldrb	r3, [r7, #23]
 800ef18:	2b05      	cmp	r3, #5
 800ef1a:	d101      	bne.n	800ef20 <get_fileinfo+0xc8>
 800ef1c:	23e5      	movs	r3, #229	; 0xe5
 800ef1e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800ef20:	69fb      	ldr	r3, [r7, #28]
 800ef22:	2b09      	cmp	r3, #9
 800ef24:	d10f      	bne.n	800ef46 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800ef26:	89bb      	ldrh	r3, [r7, #12]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d105      	bne.n	800ef38 <get_fileinfo+0xe0>
 800ef2c:	683a      	ldr	r2, [r7, #0]
 800ef2e:	69bb      	ldr	r3, [r7, #24]
 800ef30:	4413      	add	r3, r2
 800ef32:	3316      	adds	r3, #22
 800ef34:	222e      	movs	r2, #46	; 0x2e
 800ef36:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800ef38:	69bb      	ldr	r3, [r7, #24]
 800ef3a:	1c5a      	adds	r2, r3, #1
 800ef3c:	61ba      	str	r2, [r7, #24]
 800ef3e:	683a      	ldr	r2, [r7, #0]
 800ef40:	4413      	add	r3, r2
 800ef42:	222e      	movs	r2, #46	; 0x2e
 800ef44:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800ef46:	683a      	ldr	r2, [r7, #0]
 800ef48:	69bb      	ldr	r3, [r7, #24]
 800ef4a:	4413      	add	r3, r2
 800ef4c:	3309      	adds	r3, #9
 800ef4e:	7dfa      	ldrb	r2, [r7, #23]
 800ef50:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800ef52:	89bb      	ldrh	r3, [r7, #12]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d11c      	bne.n	800ef92 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800ef58:	7dfb      	ldrb	r3, [r7, #23]
 800ef5a:	2b40      	cmp	r3, #64	; 0x40
 800ef5c:	d913      	bls.n	800ef86 <get_fileinfo+0x12e>
 800ef5e:	7dfb      	ldrb	r3, [r7, #23]
 800ef60:	2b5a      	cmp	r3, #90	; 0x5a
 800ef62:	d810      	bhi.n	800ef86 <get_fileinfo+0x12e>
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	6a1b      	ldr	r3, [r3, #32]
 800ef68:	330c      	adds	r3, #12
 800ef6a:	781b      	ldrb	r3, [r3, #0]
 800ef6c:	461a      	mov	r2, r3
 800ef6e:	69fb      	ldr	r3, [r7, #28]
 800ef70:	2b08      	cmp	r3, #8
 800ef72:	d901      	bls.n	800ef78 <get_fileinfo+0x120>
 800ef74:	2310      	movs	r3, #16
 800ef76:	e000      	b.n	800ef7a <get_fileinfo+0x122>
 800ef78:	2308      	movs	r3, #8
 800ef7a:	4013      	ands	r3, r2
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d002      	beq.n	800ef86 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800ef80:	7dfb      	ldrb	r3, [r7, #23]
 800ef82:	3320      	adds	r3, #32
 800ef84:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800ef86:	683a      	ldr	r2, [r7, #0]
 800ef88:	69bb      	ldr	r3, [r7, #24]
 800ef8a:	4413      	add	r3, r2
 800ef8c:	3316      	adds	r3, #22
 800ef8e:	7dfa      	ldrb	r2, [r7, #23]
 800ef90:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800ef92:	69bb      	ldr	r3, [r7, #24]
 800ef94:	3301      	adds	r3, #1
 800ef96:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800ef98:	69fb      	ldr	r3, [r7, #28]
 800ef9a:	2b0a      	cmp	r3, #10
 800ef9c:	d9af      	bls.n	800eefe <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800ef9e:	89bb      	ldrh	r3, [r7, #12]
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d10d      	bne.n	800efc0 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800efa4:	683a      	ldr	r2, [r7, #0]
 800efa6:	69bb      	ldr	r3, [r7, #24]
 800efa8:	4413      	add	r3, r2
 800efaa:	3316      	adds	r3, #22
 800efac:	2200      	movs	r2, #0
 800efae:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6a1b      	ldr	r3, [r3, #32]
 800efb4:	330c      	adds	r3, #12
 800efb6:	781b      	ldrb	r3, [r3, #0]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d101      	bne.n	800efc0 <get_fileinfo+0x168>
 800efbc:	2300      	movs	r3, #0
 800efbe:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800efc0:	683a      	ldr	r2, [r7, #0]
 800efc2:	69bb      	ldr	r3, [r7, #24]
 800efc4:	4413      	add	r3, r2
 800efc6:	3309      	adds	r3, #9
 800efc8:	2200      	movs	r2, #0
 800efca:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	6a1b      	ldr	r3, [r3, #32]
 800efd0:	7ada      	ldrb	r2, [r3, #11]
 800efd2:	683b      	ldr	r3, [r7, #0]
 800efd4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800efd6:	687b      	ldr	r3, [r7, #4]
 800efd8:	6a1b      	ldr	r3, [r3, #32]
 800efda:	331c      	adds	r3, #28
 800efdc:	4618      	mov	r0, r3
 800efde:	f7fe fb67 	bl	800d6b0 <ld_dword>
 800efe2:	4602      	mov	r2, r0
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	6a1b      	ldr	r3, [r3, #32]
 800efec:	3316      	adds	r3, #22
 800efee:	4618      	mov	r0, r3
 800eff0:	f7fe fb5e 	bl	800d6b0 <ld_dword>
 800eff4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	b29a      	uxth	r2, r3
 800effa:	683b      	ldr	r3, [r7, #0]
 800effc:	80da      	strh	r2, [r3, #6]
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	0c1b      	lsrs	r3, r3, #16
 800f002:	b29a      	uxth	r2, r3
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	809a      	strh	r2, [r3, #4]
 800f008:	e000      	b.n	800f00c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f00a:	bf00      	nop
}
 800f00c:	3720      	adds	r7, #32
 800f00e:	46bd      	mov	sp, r7
 800f010:	bd80      	pop	{r7, pc}
	...

0800f014 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b08a      	sub	sp, #40	; 0x28
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800f01e:	683b      	ldr	r3, [r7, #0]
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	613b      	str	r3, [r7, #16]
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	691b      	ldr	r3, [r3, #16]
 800f02a:	60fb      	str	r3, [r7, #12]
 800f02c:	2300      	movs	r3, #0
 800f02e:	617b      	str	r3, [r7, #20]
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800f034:	69bb      	ldr	r3, [r7, #24]
 800f036:	1c5a      	adds	r2, r3, #1
 800f038:	61ba      	str	r2, [r7, #24]
 800f03a:	693a      	ldr	r2, [r7, #16]
 800f03c:	4413      	add	r3, r2
 800f03e:	781b      	ldrb	r3, [r3, #0]
 800f040:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800f042:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f044:	2b1f      	cmp	r3, #31
 800f046:	d940      	bls.n	800f0ca <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800f048:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f04a:	2b2f      	cmp	r3, #47	; 0x2f
 800f04c:	d006      	beq.n	800f05c <create_name+0x48>
 800f04e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f050:	2b5c      	cmp	r3, #92	; 0x5c
 800f052:	d110      	bne.n	800f076 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f054:	e002      	b.n	800f05c <create_name+0x48>
 800f056:	69bb      	ldr	r3, [r7, #24]
 800f058:	3301      	adds	r3, #1
 800f05a:	61bb      	str	r3, [r7, #24]
 800f05c:	693a      	ldr	r2, [r7, #16]
 800f05e:	69bb      	ldr	r3, [r7, #24]
 800f060:	4413      	add	r3, r2
 800f062:	781b      	ldrb	r3, [r3, #0]
 800f064:	2b2f      	cmp	r3, #47	; 0x2f
 800f066:	d0f6      	beq.n	800f056 <create_name+0x42>
 800f068:	693a      	ldr	r2, [r7, #16]
 800f06a:	69bb      	ldr	r3, [r7, #24]
 800f06c:	4413      	add	r3, r2
 800f06e:	781b      	ldrb	r3, [r3, #0]
 800f070:	2b5c      	cmp	r3, #92	; 0x5c
 800f072:	d0f0      	beq.n	800f056 <create_name+0x42>
			break;
 800f074:	e02a      	b.n	800f0cc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	2bfe      	cmp	r3, #254	; 0xfe
 800f07a:	d901      	bls.n	800f080 <create_name+0x6c>
 800f07c:	2306      	movs	r3, #6
 800f07e:	e177      	b.n	800f370 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 800f080:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f082:	b2db      	uxtb	r3, r3
 800f084:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800f086:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f088:	2101      	movs	r1, #1
 800f08a:	4618      	mov	r0, r3
 800f08c:	f001 fca4 	bl	80109d8 <ff_convert>
 800f090:	4603      	mov	r3, r0
 800f092:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800f094:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f096:	2b00      	cmp	r3, #0
 800f098:	d101      	bne.n	800f09e <create_name+0x8a>
 800f09a:	2306      	movs	r3, #6
 800f09c:	e168      	b.n	800f370 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800f09e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0a0:	2b7f      	cmp	r3, #127	; 0x7f
 800f0a2:	d809      	bhi.n	800f0b8 <create_name+0xa4>
 800f0a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0a6:	4619      	mov	r1, r3
 800f0a8:	48b3      	ldr	r0, [pc, #716]	; (800f378 <create_name+0x364>)
 800f0aa:	f7fe fbce 	bl	800d84a <chk_chr>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d001      	beq.n	800f0b8 <create_name+0xa4>
 800f0b4:	2306      	movs	r3, #6
 800f0b6:	e15b      	b.n	800f370 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 800f0b8:	697b      	ldr	r3, [r7, #20]
 800f0ba:	1c5a      	adds	r2, r3, #1
 800f0bc:	617a      	str	r2, [r7, #20]
 800f0be:	005b      	lsls	r3, r3, #1
 800f0c0:	68fa      	ldr	r2, [r7, #12]
 800f0c2:	4413      	add	r3, r2
 800f0c4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f0c6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800f0c8:	e7b4      	b.n	800f034 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800f0ca:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800f0cc:	693a      	ldr	r2, [r7, #16]
 800f0ce:	69bb      	ldr	r3, [r7, #24]
 800f0d0:	441a      	add	r2, r3
 800f0d2:	683b      	ldr	r3, [r7, #0]
 800f0d4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800f0d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0d8:	2b1f      	cmp	r3, #31
 800f0da:	d801      	bhi.n	800f0e0 <create_name+0xcc>
 800f0dc:	2304      	movs	r3, #4
 800f0de:	e000      	b.n	800f0e2 <create_name+0xce>
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f0e6:	e011      	b.n	800f10c <create_name+0xf8>
		w = lfn[di - 1];
 800f0e8:	697b      	ldr	r3, [r7, #20]
 800f0ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f0ee:	3b01      	subs	r3, #1
 800f0f0:	005b      	lsls	r3, r3, #1
 800f0f2:	68fa      	ldr	r2, [r7, #12]
 800f0f4:	4413      	add	r3, r2
 800f0f6:	881b      	ldrh	r3, [r3, #0]
 800f0f8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800f0fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f0fc:	2b20      	cmp	r3, #32
 800f0fe:	d002      	beq.n	800f106 <create_name+0xf2>
 800f100:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f102:	2b2e      	cmp	r3, #46	; 0x2e
 800f104:	d106      	bne.n	800f114 <create_name+0x100>
		di--;
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	3b01      	subs	r3, #1
 800f10a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800f10c:	697b      	ldr	r3, [r7, #20]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d1ea      	bne.n	800f0e8 <create_name+0xd4>
 800f112:	e000      	b.n	800f116 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800f114:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	005b      	lsls	r3, r3, #1
 800f11a:	68fa      	ldr	r2, [r7, #12]
 800f11c:	4413      	add	r3, r2
 800f11e:	2200      	movs	r2, #0
 800f120:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800f122:	697b      	ldr	r3, [r7, #20]
 800f124:	2b00      	cmp	r3, #0
 800f126:	d101      	bne.n	800f12c <create_name+0x118>
 800f128:	2306      	movs	r3, #6
 800f12a:	e121      	b.n	800f370 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	3324      	adds	r3, #36	; 0x24
 800f130:	220b      	movs	r2, #11
 800f132:	2120      	movs	r1, #32
 800f134:	4618      	mov	r0, r3
 800f136:	f7fe fb46 	bl	800d7c6 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800f13a:	2300      	movs	r3, #0
 800f13c:	61bb      	str	r3, [r7, #24]
 800f13e:	e002      	b.n	800f146 <create_name+0x132>
 800f140:	69bb      	ldr	r3, [r7, #24]
 800f142:	3301      	adds	r3, #1
 800f144:	61bb      	str	r3, [r7, #24]
 800f146:	69bb      	ldr	r3, [r7, #24]
 800f148:	005b      	lsls	r3, r3, #1
 800f14a:	68fa      	ldr	r2, [r7, #12]
 800f14c:	4413      	add	r3, r2
 800f14e:	881b      	ldrh	r3, [r3, #0]
 800f150:	2b20      	cmp	r3, #32
 800f152:	d0f5      	beq.n	800f140 <create_name+0x12c>
 800f154:	69bb      	ldr	r3, [r7, #24]
 800f156:	005b      	lsls	r3, r3, #1
 800f158:	68fa      	ldr	r2, [r7, #12]
 800f15a:	4413      	add	r3, r2
 800f15c:	881b      	ldrh	r3, [r3, #0]
 800f15e:	2b2e      	cmp	r3, #46	; 0x2e
 800f160:	d0ee      	beq.n	800f140 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800f162:	69bb      	ldr	r3, [r7, #24]
 800f164:	2b00      	cmp	r3, #0
 800f166:	d009      	beq.n	800f17c <create_name+0x168>
 800f168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f16c:	f043 0303 	orr.w	r3, r3, #3
 800f170:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800f174:	e002      	b.n	800f17c <create_name+0x168>
 800f176:	697b      	ldr	r3, [r7, #20]
 800f178:	3b01      	subs	r3, #1
 800f17a:	617b      	str	r3, [r7, #20]
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d009      	beq.n	800f196 <create_name+0x182>
 800f182:	697b      	ldr	r3, [r7, #20]
 800f184:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f188:	3b01      	subs	r3, #1
 800f18a:	005b      	lsls	r3, r3, #1
 800f18c:	68fa      	ldr	r2, [r7, #12]
 800f18e:	4413      	add	r3, r2
 800f190:	881b      	ldrh	r3, [r3, #0]
 800f192:	2b2e      	cmp	r3, #46	; 0x2e
 800f194:	d1ef      	bne.n	800f176 <create_name+0x162>

	i = b = 0; ni = 8;
 800f196:	2300      	movs	r3, #0
 800f198:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f19c:	2300      	movs	r3, #0
 800f19e:	623b      	str	r3, [r7, #32]
 800f1a0:	2308      	movs	r3, #8
 800f1a2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800f1a4:	69bb      	ldr	r3, [r7, #24]
 800f1a6:	1c5a      	adds	r2, r3, #1
 800f1a8:	61ba      	str	r2, [r7, #24]
 800f1aa:	005b      	lsls	r3, r3, #1
 800f1ac:	68fa      	ldr	r2, [r7, #12]
 800f1ae:	4413      	add	r3, r2
 800f1b0:	881b      	ldrh	r3, [r3, #0]
 800f1b2:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800f1b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	f000 8090 	beq.w	800f2dc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800f1bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1be:	2b20      	cmp	r3, #32
 800f1c0:	d006      	beq.n	800f1d0 <create_name+0x1bc>
 800f1c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f1c4:	2b2e      	cmp	r3, #46	; 0x2e
 800f1c6:	d10a      	bne.n	800f1de <create_name+0x1ca>
 800f1c8:	69ba      	ldr	r2, [r7, #24]
 800f1ca:	697b      	ldr	r3, [r7, #20]
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d006      	beq.n	800f1de <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800f1d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1d4:	f043 0303 	orr.w	r3, r3, #3
 800f1d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f1dc:	e07d      	b.n	800f2da <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800f1de:	6a3a      	ldr	r2, [r7, #32]
 800f1e0:	69fb      	ldr	r3, [r7, #28]
 800f1e2:	429a      	cmp	r2, r3
 800f1e4:	d203      	bcs.n	800f1ee <create_name+0x1da>
 800f1e6:	69ba      	ldr	r2, [r7, #24]
 800f1e8:	697b      	ldr	r3, [r7, #20]
 800f1ea:	429a      	cmp	r2, r3
 800f1ec:	d123      	bne.n	800f236 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800f1ee:	69fb      	ldr	r3, [r7, #28]
 800f1f0:	2b0b      	cmp	r3, #11
 800f1f2:	d106      	bne.n	800f202 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800f1f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f1f8:	f043 0303 	orr.w	r3, r3, #3
 800f1fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f200:	e06f      	b.n	800f2e2 <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800f202:	69ba      	ldr	r2, [r7, #24]
 800f204:	697b      	ldr	r3, [r7, #20]
 800f206:	429a      	cmp	r2, r3
 800f208:	d005      	beq.n	800f216 <create_name+0x202>
 800f20a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f20e:	f043 0303 	orr.w	r3, r3, #3
 800f212:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800f216:	69ba      	ldr	r2, [r7, #24]
 800f218:	697b      	ldr	r3, [r7, #20]
 800f21a:	429a      	cmp	r2, r3
 800f21c:	d860      	bhi.n	800f2e0 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800f21e:	697b      	ldr	r3, [r7, #20]
 800f220:	61bb      	str	r3, [r7, #24]
 800f222:	2308      	movs	r3, #8
 800f224:	623b      	str	r3, [r7, #32]
 800f226:	230b      	movs	r3, #11
 800f228:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800f22a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f22e:	009b      	lsls	r3, r3, #2
 800f230:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f234:	e051      	b.n	800f2da <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800f236:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f238:	2b7f      	cmp	r3, #127	; 0x7f
 800f23a:	d914      	bls.n	800f266 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800f23c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f23e:	2100      	movs	r1, #0
 800f240:	4618      	mov	r0, r3
 800f242:	f001 fbc9 	bl	80109d8 <ff_convert>
 800f246:	4603      	mov	r3, r0
 800f248:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800f24a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f24c:	2b00      	cmp	r3, #0
 800f24e:	d004      	beq.n	800f25a <create_name+0x246>
 800f250:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f252:	3b80      	subs	r3, #128	; 0x80
 800f254:	4a49      	ldr	r2, [pc, #292]	; (800f37c <create_name+0x368>)
 800f256:	5cd3      	ldrb	r3, [r2, r3]
 800f258:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800f25a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f25e:	f043 0302 	orr.w	r3, r3, #2
 800f262:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800f266:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f268:	2b00      	cmp	r3, #0
 800f26a:	d007      	beq.n	800f27c <create_name+0x268>
 800f26c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f26e:	4619      	mov	r1, r3
 800f270:	4843      	ldr	r0, [pc, #268]	; (800f380 <create_name+0x36c>)
 800f272:	f7fe faea 	bl	800d84a <chk_chr>
 800f276:	4603      	mov	r3, r0
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d008      	beq.n	800f28e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800f27c:	235f      	movs	r3, #95	; 0x5f
 800f27e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800f280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f284:	f043 0303 	orr.w	r3, r3, #3
 800f288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f28c:	e01b      	b.n	800f2c6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800f28e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f290:	2b40      	cmp	r3, #64	; 0x40
 800f292:	d909      	bls.n	800f2a8 <create_name+0x294>
 800f294:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f296:	2b5a      	cmp	r3, #90	; 0x5a
 800f298:	d806      	bhi.n	800f2a8 <create_name+0x294>
					b |= 2;
 800f29a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f29e:	f043 0302 	orr.w	r3, r3, #2
 800f2a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f2a6:	e00e      	b.n	800f2c6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800f2a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2aa:	2b60      	cmp	r3, #96	; 0x60
 800f2ac:	d90b      	bls.n	800f2c6 <create_name+0x2b2>
 800f2ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2b0:	2b7a      	cmp	r3, #122	; 0x7a
 800f2b2:	d808      	bhi.n	800f2c6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800f2b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f2b8:	f043 0301 	orr.w	r3, r3, #1
 800f2bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f2c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f2c2:	3b20      	subs	r3, #32
 800f2c4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800f2c6:	6a3b      	ldr	r3, [r7, #32]
 800f2c8:	1c5a      	adds	r2, r3, #1
 800f2ca:	623a      	str	r2, [r7, #32]
 800f2cc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800f2ce:	b2d1      	uxtb	r1, r2
 800f2d0:	687a      	ldr	r2, [r7, #4]
 800f2d2:	4413      	add	r3, r2
 800f2d4:	460a      	mov	r2, r1
 800f2d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800f2da:	e763      	b.n	800f1a4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800f2dc:	bf00      	nop
 800f2de:	e000      	b.n	800f2e2 <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 800f2e0:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800f2e8:	2be5      	cmp	r3, #229	; 0xe5
 800f2ea:	d103      	bne.n	800f2f4 <create_name+0x2e0>
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	2205      	movs	r2, #5
 800f2f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800f2f4:	69fb      	ldr	r3, [r7, #28]
 800f2f6:	2b08      	cmp	r3, #8
 800f2f8:	d104      	bne.n	800f304 <create_name+0x2f0>
 800f2fa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f2fe:	009b      	lsls	r3, r3, #2
 800f300:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800f304:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f308:	f003 030c 	and.w	r3, r3, #12
 800f30c:	2b0c      	cmp	r3, #12
 800f30e:	d005      	beq.n	800f31c <create_name+0x308>
 800f310:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f314:	f003 0303 	and.w	r3, r3, #3
 800f318:	2b03      	cmp	r3, #3
 800f31a:	d105      	bne.n	800f328 <create_name+0x314>
 800f31c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f320:	f043 0302 	orr.w	r3, r3, #2
 800f324:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800f328:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f32c:	f003 0302 	and.w	r3, r3, #2
 800f330:	2b00      	cmp	r3, #0
 800f332:	d117      	bne.n	800f364 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800f334:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f338:	f003 0303 	and.w	r3, r3, #3
 800f33c:	2b01      	cmp	r3, #1
 800f33e:	d105      	bne.n	800f34c <create_name+0x338>
 800f340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f344:	f043 0310 	orr.w	r3, r3, #16
 800f348:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800f34c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f350:	f003 030c 	and.w	r3, r3, #12
 800f354:	2b04      	cmp	r3, #4
 800f356:	d105      	bne.n	800f364 <create_name+0x350>
 800f358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f35c:	f043 0308 	orr.w	r3, r3, #8
 800f360:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800f36a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800f36e:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800f370:	4618      	mov	r0, r3
 800f372:	3728      	adds	r7, #40	; 0x28
 800f374:	46bd      	mov	sp, r7
 800f376:	bd80      	pop	{r7, pc}
 800f378:	08018b20 	.word	0x08018b20
 800f37c:	08018d1c 	.word	0x08018d1c
 800f380:	08018b2c 	.word	0x08018b2c

0800f384 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b086      	sub	sp, #24
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800f392:	693b      	ldr	r3, [r7, #16]
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800f398:	e002      	b.n	800f3a0 <follow_path+0x1c>
 800f39a:	683b      	ldr	r3, [r7, #0]
 800f39c:	3301      	adds	r3, #1
 800f39e:	603b      	str	r3, [r7, #0]
 800f3a0:	683b      	ldr	r3, [r7, #0]
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	2b2f      	cmp	r3, #47	; 0x2f
 800f3a6:	d0f8      	beq.n	800f39a <follow_path+0x16>
 800f3a8:	683b      	ldr	r3, [r7, #0]
 800f3aa:	781b      	ldrb	r3, [r3, #0]
 800f3ac:	2b5c      	cmp	r3, #92	; 0x5c
 800f3ae:	d0f4      	beq.n	800f39a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800f3b0:	693b      	ldr	r3, [r7, #16]
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800f3b6:	683b      	ldr	r3, [r7, #0]
 800f3b8:	781b      	ldrb	r3, [r3, #0]
 800f3ba:	2b1f      	cmp	r3, #31
 800f3bc:	d80a      	bhi.n	800f3d4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	2280      	movs	r2, #128	; 0x80
 800f3c2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800f3c6:	2100      	movs	r1, #0
 800f3c8:	6878      	ldr	r0, [r7, #4]
 800f3ca:	f7ff f81d 	bl	800e408 <dir_sdi>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	75fb      	strb	r3, [r7, #23]
 800f3d2:	e048      	b.n	800f466 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f3d4:	463b      	mov	r3, r7
 800f3d6:	4619      	mov	r1, r3
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f7ff fe1b 	bl	800f014 <create_name>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f3e2:	7dfb      	ldrb	r3, [r7, #23]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d139      	bne.n	800f45c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f7ff fb7c 	bl	800eae6 <dir_find>
 800f3ee:	4603      	mov	r3, r0
 800f3f0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f3f8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800f3fa:	7dfb      	ldrb	r3, [r7, #23]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d00a      	beq.n	800f416 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800f400:	7dfb      	ldrb	r3, [r7, #23]
 800f402:	2b04      	cmp	r3, #4
 800f404:	d12c      	bne.n	800f460 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800f406:	7afb      	ldrb	r3, [r7, #11]
 800f408:	f003 0304 	and.w	r3, r3, #4
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	d127      	bne.n	800f460 <follow_path+0xdc>
 800f410:	2305      	movs	r3, #5
 800f412:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800f414:	e024      	b.n	800f460 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f416:	7afb      	ldrb	r3, [r7, #11]
 800f418:	f003 0304 	and.w	r3, r3, #4
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d121      	bne.n	800f464 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800f420:	693b      	ldr	r3, [r7, #16]
 800f422:	799b      	ldrb	r3, [r3, #6]
 800f424:	f003 0310 	and.w	r3, r3, #16
 800f428:	2b00      	cmp	r3, #0
 800f42a:	d102      	bne.n	800f432 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800f42c:	2305      	movs	r3, #5
 800f42e:	75fb      	strb	r3, [r7, #23]
 800f430:	e019      	b.n	800f466 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800f432:	68fb      	ldr	r3, [r7, #12]
 800f434:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	695b      	ldr	r3, [r3, #20]
 800f43c:	68fa      	ldr	r2, [r7, #12]
 800f43e:	8992      	ldrh	r2, [r2, #12]
 800f440:	fbb3 f0f2 	udiv	r0, r3, r2
 800f444:	fb02 f200 	mul.w	r2, r2, r0
 800f448:	1a9b      	subs	r3, r3, r2
 800f44a:	440b      	add	r3, r1
 800f44c:	4619      	mov	r1, r3
 800f44e:	68f8      	ldr	r0, [r7, #12]
 800f450:	f7ff f980 	bl	800e754 <ld_clust>
 800f454:	4602      	mov	r2, r0
 800f456:	693b      	ldr	r3, [r7, #16]
 800f458:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800f45a:	e7bb      	b.n	800f3d4 <follow_path+0x50>
			if (res != FR_OK) break;
 800f45c:	bf00      	nop
 800f45e:	e002      	b.n	800f466 <follow_path+0xe2>
				break;
 800f460:	bf00      	nop
 800f462:	e000      	b.n	800f466 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800f464:	bf00      	nop
			}
		}
	}

	return res;
 800f466:	7dfb      	ldrb	r3, [r7, #23]
}
 800f468:	4618      	mov	r0, r3
 800f46a:	3718      	adds	r7, #24
 800f46c:	46bd      	mov	sp, r7
 800f46e:	bd80      	pop	{r7, pc}

0800f470 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800f470:	b480      	push	{r7}
 800f472:	b087      	sub	sp, #28
 800f474:	af00      	add	r7, sp, #0
 800f476:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800f478:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f47c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	681b      	ldr	r3, [r3, #0]
 800f482:	2b00      	cmp	r3, #0
 800f484:	d031      	beq.n	800f4ea <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800f486:	687b      	ldr	r3, [r7, #4]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	617b      	str	r3, [r7, #20]
 800f48c:	e002      	b.n	800f494 <get_ldnumber+0x24>
 800f48e:	697b      	ldr	r3, [r7, #20]
 800f490:	3301      	adds	r3, #1
 800f492:	617b      	str	r3, [r7, #20]
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	781b      	ldrb	r3, [r3, #0]
 800f498:	2b1f      	cmp	r3, #31
 800f49a:	d903      	bls.n	800f4a4 <get_ldnumber+0x34>
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	781b      	ldrb	r3, [r3, #0]
 800f4a0:	2b3a      	cmp	r3, #58	; 0x3a
 800f4a2:	d1f4      	bne.n	800f48e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800f4a4:	697b      	ldr	r3, [r7, #20]
 800f4a6:	781b      	ldrb	r3, [r3, #0]
 800f4a8:	2b3a      	cmp	r3, #58	; 0x3a
 800f4aa:	d11c      	bne.n	800f4e6 <get_ldnumber+0x76>
			tp = *path;
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	1c5a      	adds	r2, r3, #1
 800f4b6:	60fa      	str	r2, [r7, #12]
 800f4b8:	781b      	ldrb	r3, [r3, #0]
 800f4ba:	3b30      	subs	r3, #48	; 0x30
 800f4bc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800f4be:	68bb      	ldr	r3, [r7, #8]
 800f4c0:	2b09      	cmp	r3, #9
 800f4c2:	d80e      	bhi.n	800f4e2 <get_ldnumber+0x72>
 800f4c4:	68fa      	ldr	r2, [r7, #12]
 800f4c6:	697b      	ldr	r3, [r7, #20]
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d10a      	bne.n	800f4e2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800f4cc:	68bb      	ldr	r3, [r7, #8]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d107      	bne.n	800f4e2 <get_ldnumber+0x72>
					vol = (int)i;
 800f4d2:	68bb      	ldr	r3, [r7, #8]
 800f4d4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800f4d6:	697b      	ldr	r3, [r7, #20]
 800f4d8:	3301      	adds	r3, #1
 800f4da:	617b      	str	r3, [r7, #20]
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	697a      	ldr	r2, [r7, #20]
 800f4e0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800f4e2:	693b      	ldr	r3, [r7, #16]
 800f4e4:	e002      	b.n	800f4ec <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800f4ea:	693b      	ldr	r3, [r7, #16]
}
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	371c      	adds	r7, #28
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f6:	4770      	bx	lr

0800f4f8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b082      	sub	sp, #8
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
 800f500:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	2200      	movs	r2, #0
 800f506:	70da      	strb	r2, [r3, #3]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f50e:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800f510:	6839      	ldr	r1, [r7, #0]
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	f7fe fb96 	bl	800dc44 <move_window>
 800f518:	4603      	mov	r3, r0
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d001      	beq.n	800f522 <check_fs+0x2a>
 800f51e:	2304      	movs	r3, #4
 800f520:	e038      	b.n	800f594 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	333c      	adds	r3, #60	; 0x3c
 800f526:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7fe f8a8 	bl	800d680 <ld_word>
 800f530:	4603      	mov	r3, r0
 800f532:	461a      	mov	r2, r3
 800f534:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f538:	429a      	cmp	r2, r3
 800f53a:	d001      	beq.n	800f540 <check_fs+0x48>
 800f53c:	2303      	movs	r3, #3
 800f53e:	e029      	b.n	800f594 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f546:	2be9      	cmp	r3, #233	; 0xe9
 800f548:	d009      	beq.n	800f55e <check_fs+0x66>
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f550:	2beb      	cmp	r3, #235	; 0xeb
 800f552:	d11e      	bne.n	800f592 <check_fs+0x9a>
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800f55a:	2b90      	cmp	r3, #144	; 0x90
 800f55c:	d119      	bne.n	800f592 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	333c      	adds	r3, #60	; 0x3c
 800f562:	3336      	adds	r3, #54	; 0x36
 800f564:	4618      	mov	r0, r3
 800f566:	f7fe f8a3 	bl	800d6b0 <ld_dword>
 800f56a:	4603      	mov	r3, r0
 800f56c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800f570:	4a0a      	ldr	r2, [pc, #40]	; (800f59c <check_fs+0xa4>)
 800f572:	4293      	cmp	r3, r2
 800f574:	d101      	bne.n	800f57a <check_fs+0x82>
 800f576:	2300      	movs	r3, #0
 800f578:	e00c      	b.n	800f594 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	333c      	adds	r3, #60	; 0x3c
 800f57e:	3352      	adds	r3, #82	; 0x52
 800f580:	4618      	mov	r0, r3
 800f582:	f7fe f895 	bl	800d6b0 <ld_dword>
 800f586:	4603      	mov	r3, r0
 800f588:	4a05      	ldr	r2, [pc, #20]	; (800f5a0 <check_fs+0xa8>)
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d101      	bne.n	800f592 <check_fs+0x9a>
 800f58e:	2300      	movs	r3, #0
 800f590:	e000      	b.n	800f594 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800f592:	2302      	movs	r3, #2
}
 800f594:	4618      	mov	r0, r3
 800f596:	3708      	adds	r7, #8
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}
 800f59c:	00544146 	.word	0x00544146
 800f5a0:	33544146 	.word	0x33544146

0800f5a4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800f5a4:	b580      	push	{r7, lr}
 800f5a6:	b096      	sub	sp, #88	; 0x58
 800f5a8:	af00      	add	r7, sp, #0
 800f5aa:	60f8      	str	r0, [r7, #12]
 800f5ac:	60b9      	str	r1, [r7, #8]
 800f5ae:	4613      	mov	r3, r2
 800f5b0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800f5b8:	68f8      	ldr	r0, [r7, #12]
 800f5ba:	f7ff ff59 	bl	800f470 <get_ldnumber>
 800f5be:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800f5c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	da01      	bge.n	800f5ca <find_volume+0x26>
 800f5c6:	230b      	movs	r3, #11
 800f5c8:	e26c      	b.n	800faa4 <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800f5ca:	4aa4      	ldr	r2, [pc, #656]	; (800f85c <find_volume+0x2b8>)
 800f5cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f5d2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800f5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d101      	bne.n	800f5de <find_volume+0x3a>
 800f5da:	230c      	movs	r3, #12
 800f5dc:	e262      	b.n	800faa4 <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 800f5de:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f5e0:	f7fe f94e 	bl	800d880 <lock_fs>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d101      	bne.n	800f5ee <find_volume+0x4a>
 800f5ea:	230f      	movs	r3, #15
 800f5ec:	e25a      	b.n	800faa4 <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 800f5ee:	68bb      	ldr	r3, [r7, #8]
 800f5f0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f5f2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800f5f4:	79fb      	ldrb	r3, [r7, #7]
 800f5f6:	f023 0301 	bic.w	r3, r3, #1
 800f5fa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800f5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5fe:	781b      	ldrb	r3, [r3, #0]
 800f600:	2b00      	cmp	r3, #0
 800f602:	d01a      	beq.n	800f63a <find_volume+0x96>
		stat = disk_status(fs->drv);
 800f604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f606:	785b      	ldrb	r3, [r3, #1]
 800f608:	4618      	mov	r0, r3
 800f60a:	f7fd ff9b 	bl	800d544 <disk_status>
 800f60e:	4603      	mov	r3, r0
 800f610:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800f614:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f618:	f003 0301 	and.w	r3, r3, #1
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d10c      	bne.n	800f63a <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800f620:	79fb      	ldrb	r3, [r7, #7]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d007      	beq.n	800f636 <find_volume+0x92>
 800f626:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f62a:	f003 0304 	and.w	r3, r3, #4
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d001      	beq.n	800f636 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800f632:	230a      	movs	r3, #10
 800f634:	e236      	b.n	800faa4 <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 800f636:	2300      	movs	r3, #0
 800f638:	e234      	b.n	800faa4 <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800f63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f63c:	2200      	movs	r2, #0
 800f63e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800f640:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f642:	b2da      	uxtb	r2, r3
 800f644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f646:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800f648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f64a:	785b      	ldrb	r3, [r3, #1]
 800f64c:	4618      	mov	r0, r3
 800f64e:	f7fd ff93 	bl	800d578 <disk_initialize>
 800f652:	4603      	mov	r3, r0
 800f654:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800f658:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f65c:	f003 0301 	and.w	r3, r3, #1
 800f660:	2b00      	cmp	r3, #0
 800f662:	d001      	beq.n	800f668 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800f664:	2303      	movs	r3, #3
 800f666:	e21d      	b.n	800faa4 <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800f668:	79fb      	ldrb	r3, [r7, #7]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d007      	beq.n	800f67e <find_volume+0xda>
 800f66e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800f672:	f003 0304 	and.w	r3, r3, #4
 800f676:	2b00      	cmp	r3, #0
 800f678:	d001      	beq.n	800f67e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800f67a:	230a      	movs	r3, #10
 800f67c:	e212      	b.n	800faa4 <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800f67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f680:	7858      	ldrb	r0, [r3, #1]
 800f682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f684:	330c      	adds	r3, #12
 800f686:	461a      	mov	r2, r3
 800f688:	2102      	movs	r1, #2
 800f68a:	f7fd ffdb 	bl	800d644 <disk_ioctl>
 800f68e:	4603      	mov	r3, r0
 800f690:	2b00      	cmp	r3, #0
 800f692:	d001      	beq.n	800f698 <find_volume+0xf4>
 800f694:	2301      	movs	r3, #1
 800f696:	e205      	b.n	800faa4 <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800f698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f69a:	899b      	ldrh	r3, [r3, #12]
 800f69c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6a0:	d80d      	bhi.n	800f6be <find_volume+0x11a>
 800f6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6a4:	899b      	ldrh	r3, [r3, #12]
 800f6a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f6aa:	d308      	bcc.n	800f6be <find_volume+0x11a>
 800f6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6ae:	899b      	ldrh	r3, [r3, #12]
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6b4:	899b      	ldrh	r3, [r3, #12]
 800f6b6:	3b01      	subs	r3, #1
 800f6b8:	4013      	ands	r3, r2
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d001      	beq.n	800f6c2 <find_volume+0x11e>
 800f6be:	2301      	movs	r3, #1
 800f6c0:	e1f0      	b.n	800faa4 <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800f6c2:	2300      	movs	r3, #0
 800f6c4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800f6c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f6c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f6ca:	f7ff ff15 	bl	800f4f8 <check_fs>
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800f6d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f6d8:	2b02      	cmp	r3, #2
 800f6da:	d14b      	bne.n	800f774 <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f6dc:	2300      	movs	r3, #0
 800f6de:	643b      	str	r3, [r7, #64]	; 0x40
 800f6e0:	e01f      	b.n	800f722 <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800f6e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6e4:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800f6e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f6ea:	011b      	lsls	r3, r3, #4
 800f6ec:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800f6f0:	4413      	add	r3, r2
 800f6f2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800f6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6f6:	3304      	adds	r3, #4
 800f6f8:	781b      	ldrb	r3, [r3, #0]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d006      	beq.n	800f70c <find_volume+0x168>
 800f6fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f700:	3308      	adds	r3, #8
 800f702:	4618      	mov	r0, r3
 800f704:	f7fd ffd4 	bl	800d6b0 <ld_dword>
 800f708:	4602      	mov	r2, r0
 800f70a:	e000      	b.n	800f70e <find_volume+0x16a>
 800f70c:	2200      	movs	r2, #0
 800f70e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f710:	009b      	lsls	r3, r3, #2
 800f712:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800f716:	440b      	add	r3, r1
 800f718:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800f71c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f71e:	3301      	adds	r3, #1
 800f720:	643b      	str	r3, [r7, #64]	; 0x40
 800f722:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f724:	2b03      	cmp	r3, #3
 800f726:	d9dc      	bls.n	800f6e2 <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800f728:	2300      	movs	r3, #0
 800f72a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800f72c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d002      	beq.n	800f738 <find_volume+0x194>
 800f732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f734:	3b01      	subs	r3, #1
 800f736:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800f738:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f73a:	009b      	lsls	r3, r3, #2
 800f73c:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800f740:	4413      	add	r3, r2
 800f742:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800f746:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800f748:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d005      	beq.n	800f75a <find_volume+0x1b6>
 800f74e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f750:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f752:	f7ff fed1 	bl	800f4f8 <check_fs>
 800f756:	4603      	mov	r3, r0
 800f758:	e000      	b.n	800f75c <find_volume+0x1b8>
 800f75a:	2303      	movs	r3, #3
 800f75c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800f760:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f764:	2b01      	cmp	r3, #1
 800f766:	d905      	bls.n	800f774 <find_volume+0x1d0>
 800f768:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f76a:	3301      	adds	r3, #1
 800f76c:	643b      	str	r3, [r7, #64]	; 0x40
 800f76e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f770:	2b03      	cmp	r3, #3
 800f772:	d9e1      	bls.n	800f738 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800f774:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f778:	2b04      	cmp	r3, #4
 800f77a:	d101      	bne.n	800f780 <find_volume+0x1dc>
 800f77c:	2301      	movs	r3, #1
 800f77e:	e191      	b.n	800faa4 <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800f780:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f784:	2b01      	cmp	r3, #1
 800f786:	d901      	bls.n	800f78c <find_volume+0x1e8>
 800f788:	230d      	movs	r3, #13
 800f78a:	e18b      	b.n	800faa4 <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800f78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f78e:	333c      	adds	r3, #60	; 0x3c
 800f790:	330b      	adds	r3, #11
 800f792:	4618      	mov	r0, r3
 800f794:	f7fd ff74 	bl	800d680 <ld_word>
 800f798:	4603      	mov	r3, r0
 800f79a:	461a      	mov	r2, r3
 800f79c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f79e:	899b      	ldrh	r3, [r3, #12]
 800f7a0:	429a      	cmp	r2, r3
 800f7a2:	d001      	beq.n	800f7a8 <find_volume+0x204>
 800f7a4:	230d      	movs	r3, #13
 800f7a6:	e17d      	b.n	800faa4 <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7aa:	333c      	adds	r3, #60	; 0x3c
 800f7ac:	3316      	adds	r3, #22
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7fd ff66 	bl	800d680 <ld_word>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f7b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d106      	bne.n	800f7cc <find_volume+0x228>
 800f7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7c0:	333c      	adds	r3, #60	; 0x3c
 800f7c2:	3324      	adds	r3, #36	; 0x24
 800f7c4:	4618      	mov	r0, r3
 800f7c6:	f7fd ff73 	bl	800d6b0 <ld_dword>
 800f7ca:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f7d0:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7d4:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 800f7d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7da:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7de:	789b      	ldrb	r3, [r3, #2]
 800f7e0:	2b01      	cmp	r3, #1
 800f7e2:	d005      	beq.n	800f7f0 <find_volume+0x24c>
 800f7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7e6:	789b      	ldrb	r3, [r3, #2]
 800f7e8:	2b02      	cmp	r3, #2
 800f7ea:	d001      	beq.n	800f7f0 <find_volume+0x24c>
 800f7ec:	230d      	movs	r3, #13
 800f7ee:	e159      	b.n	800faa4 <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f7f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f7f2:	789b      	ldrb	r3, [r3, #2]
 800f7f4:	461a      	mov	r2, r3
 800f7f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f7f8:	fb02 f303 	mul.w	r3, r2, r3
 800f7fc:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f7fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f800:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 800f804:	b29a      	uxth	r2, r3
 800f806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f808:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f80c:	895b      	ldrh	r3, [r3, #10]
 800f80e:	2b00      	cmp	r3, #0
 800f810:	d008      	beq.n	800f824 <find_volume+0x280>
 800f812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f814:	895b      	ldrh	r3, [r3, #10]
 800f816:	461a      	mov	r2, r3
 800f818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f81a:	895b      	ldrh	r3, [r3, #10]
 800f81c:	3b01      	subs	r3, #1
 800f81e:	4013      	ands	r3, r2
 800f820:	2b00      	cmp	r3, #0
 800f822:	d001      	beq.n	800f828 <find_volume+0x284>
 800f824:	230d      	movs	r3, #13
 800f826:	e13d      	b.n	800faa4 <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f828:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f82a:	333c      	adds	r3, #60	; 0x3c
 800f82c:	3311      	adds	r3, #17
 800f82e:	4618      	mov	r0, r3
 800f830:	f7fd ff26 	bl	800d680 <ld_word>
 800f834:	4603      	mov	r3, r0
 800f836:	461a      	mov	r2, r3
 800f838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f83a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f83e:	891b      	ldrh	r3, [r3, #8]
 800f840:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f842:	8992      	ldrh	r2, [r2, #12]
 800f844:	0952      	lsrs	r2, r2, #5
 800f846:	b292      	uxth	r2, r2
 800f848:	fbb3 f1f2 	udiv	r1, r3, r2
 800f84c:	fb02 f201 	mul.w	r2, r2, r1
 800f850:	1a9b      	subs	r3, r3, r2
 800f852:	b29b      	uxth	r3, r3
 800f854:	2b00      	cmp	r3, #0
 800f856:	d003      	beq.n	800f860 <find_volume+0x2bc>
 800f858:	230d      	movs	r3, #13
 800f85a:	e123      	b.n	800faa4 <find_volume+0x500>
 800f85c:	2000078c 	.word	0x2000078c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f862:	333c      	adds	r3, #60	; 0x3c
 800f864:	3313      	adds	r3, #19
 800f866:	4618      	mov	r0, r3
 800f868:	f7fd ff0a 	bl	800d680 <ld_word>
 800f86c:	4603      	mov	r3, r0
 800f86e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f872:	2b00      	cmp	r3, #0
 800f874:	d106      	bne.n	800f884 <find_volume+0x2e0>
 800f876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f878:	333c      	adds	r3, #60	; 0x3c
 800f87a:	3320      	adds	r3, #32
 800f87c:	4618      	mov	r0, r3
 800f87e:	f7fd ff17 	bl	800d6b0 <ld_dword>
 800f882:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f886:	333c      	adds	r3, #60	; 0x3c
 800f888:	330e      	adds	r3, #14
 800f88a:	4618      	mov	r0, r3
 800f88c:	f7fd fef8 	bl	800d680 <ld_word>
 800f890:	4603      	mov	r3, r0
 800f892:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f894:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f896:	2b00      	cmp	r3, #0
 800f898:	d101      	bne.n	800f89e <find_volume+0x2fa>
 800f89a:	230d      	movs	r3, #13
 800f89c:	e102      	b.n	800faa4 <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f89e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f8a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8a2:	4413      	add	r3, r2
 800f8a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8a6:	8911      	ldrh	r1, [r2, #8]
 800f8a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8aa:	8992      	ldrh	r2, [r2, #12]
 800f8ac:	0952      	lsrs	r2, r2, #5
 800f8ae:	b292      	uxth	r2, r2
 800f8b0:	fbb1 f2f2 	udiv	r2, r1, r2
 800f8b4:	b292      	uxth	r2, r2
 800f8b6:	4413      	add	r3, r2
 800f8b8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f8ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f8bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8be:	429a      	cmp	r2, r3
 800f8c0:	d201      	bcs.n	800f8c6 <find_volume+0x322>
 800f8c2:	230d      	movs	r3, #13
 800f8c4:	e0ee      	b.n	800faa4 <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f8c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ca:	1ad3      	subs	r3, r2, r3
 800f8cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f8ce:	8952      	ldrh	r2, [r2, #10]
 800f8d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f8d4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d101      	bne.n	800f8e0 <find_volume+0x33c>
 800f8dc:	230d      	movs	r3, #13
 800f8de:	e0e1      	b.n	800faa4 <find_volume+0x500>
		fmt = FS_FAT32;
 800f8e0:	2303      	movs	r3, #3
 800f8e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8e8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f8ec:	4293      	cmp	r3, r2
 800f8ee:	d802      	bhi.n	800f8f6 <find_volume+0x352>
 800f8f0:	2302      	movs	r3, #2
 800f8f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8f8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f8fc:	4293      	cmp	r3, r2
 800f8fe:	d802      	bhi.n	800f906 <find_volume+0x362>
 800f900:	2301      	movs	r3, #1
 800f902:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f908:	1c9a      	adds	r2, r3, #2
 800f90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f90c:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 800f90e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f910:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f912:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f914:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f916:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f918:	441a      	add	r2, r3
 800f91a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f91c:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 800f91e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f922:	441a      	add	r2, r3
 800f924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f926:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 800f928:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f92c:	2b03      	cmp	r3, #3
 800f92e:	d11e      	bne.n	800f96e <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f932:	333c      	adds	r3, #60	; 0x3c
 800f934:	332a      	adds	r3, #42	; 0x2a
 800f936:	4618      	mov	r0, r3
 800f938:	f7fd fea2 	bl	800d680 <ld_word>
 800f93c:	4603      	mov	r3, r0
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d001      	beq.n	800f946 <find_volume+0x3a2>
 800f942:	230d      	movs	r3, #13
 800f944:	e0ae      	b.n	800faa4 <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f948:	891b      	ldrh	r3, [r3, #8]
 800f94a:	2b00      	cmp	r3, #0
 800f94c:	d001      	beq.n	800f952 <find_volume+0x3ae>
 800f94e:	230d      	movs	r3, #13
 800f950:	e0a8      	b.n	800faa4 <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f954:	333c      	adds	r3, #60	; 0x3c
 800f956:	332c      	adds	r3, #44	; 0x2c
 800f958:	4618      	mov	r0, r3
 800f95a:	f7fd fea9 	bl	800d6b0 <ld_dword>
 800f95e:	4602      	mov	r2, r0
 800f960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f962:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f966:	6a1b      	ldr	r3, [r3, #32]
 800f968:	009b      	lsls	r3, r3, #2
 800f96a:	647b      	str	r3, [r7, #68]	; 0x44
 800f96c:	e01f      	b.n	800f9ae <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f96e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f970:	891b      	ldrh	r3, [r3, #8]
 800f972:	2b00      	cmp	r3, #0
 800f974:	d101      	bne.n	800f97a <find_volume+0x3d6>
 800f976:	230d      	movs	r3, #13
 800f978:	e094      	b.n	800faa4 <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f97a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f97c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f97e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f980:	441a      	add	r2, r3
 800f982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f984:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f986:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f98a:	2b02      	cmp	r3, #2
 800f98c:	d103      	bne.n	800f996 <find_volume+0x3f2>
 800f98e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f990:	6a1b      	ldr	r3, [r3, #32]
 800f992:	005b      	lsls	r3, r3, #1
 800f994:	e00a      	b.n	800f9ac <find_volume+0x408>
 800f996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f998:	6a1a      	ldr	r2, [r3, #32]
 800f99a:	4613      	mov	r3, r2
 800f99c:	005b      	lsls	r3, r3, #1
 800f99e:	4413      	add	r3, r2
 800f9a0:	085a      	lsrs	r2, r3, #1
 800f9a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9a4:	6a1b      	ldr	r3, [r3, #32]
 800f9a6:	f003 0301 	and.w	r3, r3, #1
 800f9aa:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f9ac:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f9ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f9b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9b4:	899b      	ldrh	r3, [r3, #12]
 800f9b6:	4619      	mov	r1, r3
 800f9b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f9ba:	440b      	add	r3, r1
 800f9bc:	3b01      	subs	r3, #1
 800f9be:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f9c0:	8989      	ldrh	r1, [r1, #12]
 800f9c2:	fbb3 f3f1 	udiv	r3, r3, r1
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d201      	bcs.n	800f9ce <find_volume+0x42a>
 800f9ca:	230d      	movs	r3, #13
 800f9cc:	e06a      	b.n	800faa4 <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f9ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f9d4:	61da      	str	r2, [r3, #28]
 800f9d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9d8:	69da      	ldr	r2, [r3, #28]
 800f9da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9dc:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 800f9de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9e0:	2280      	movs	r2, #128	; 0x80
 800f9e2:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f9e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f9e8:	2b03      	cmp	r3, #3
 800f9ea:	d149      	bne.n	800fa80 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f9ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9ee:	333c      	adds	r3, #60	; 0x3c
 800f9f0:	3330      	adds	r3, #48	; 0x30
 800f9f2:	4618      	mov	r0, r3
 800f9f4:	f7fd fe44 	bl	800d680 <ld_word>
 800f9f8:	4603      	mov	r3, r0
 800f9fa:	2b01      	cmp	r3, #1
 800f9fc:	d140      	bne.n	800fa80 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f9fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fa00:	3301      	adds	r3, #1
 800fa02:	4619      	mov	r1, r3
 800fa04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fa06:	f7fe f91d 	bl	800dc44 <move_window>
 800fa0a:	4603      	mov	r3, r0
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d137      	bne.n	800fa80 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 800fa10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa12:	2200      	movs	r2, #0
 800fa14:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800fa16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa18:	333c      	adds	r3, #60	; 0x3c
 800fa1a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fa1e:	4618      	mov	r0, r3
 800fa20:	f7fd fe2e 	bl	800d680 <ld_word>
 800fa24:	4603      	mov	r3, r0
 800fa26:	461a      	mov	r2, r3
 800fa28:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fa2c:	429a      	cmp	r2, r3
 800fa2e:	d127      	bne.n	800fa80 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800fa30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa32:	333c      	adds	r3, #60	; 0x3c
 800fa34:	4618      	mov	r0, r3
 800fa36:	f7fd fe3b 	bl	800d6b0 <ld_dword>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	4a1b      	ldr	r2, [pc, #108]	; (800faac <find_volume+0x508>)
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d11e      	bne.n	800fa80 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800fa42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa44:	333c      	adds	r3, #60	; 0x3c
 800fa46:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fa4a:	4618      	mov	r0, r3
 800fa4c:	f7fd fe30 	bl	800d6b0 <ld_dword>
 800fa50:	4603      	mov	r3, r0
 800fa52:	4a17      	ldr	r2, [pc, #92]	; (800fab0 <find_volume+0x50c>)
 800fa54:	4293      	cmp	r3, r2
 800fa56:	d113      	bne.n	800fa80 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800fa58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa5a:	333c      	adds	r3, #60	; 0x3c
 800fa5c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800fa60:	4618      	mov	r0, r3
 800fa62:	f7fd fe25 	bl	800d6b0 <ld_dword>
 800fa66:	4602      	mov	r2, r0
 800fa68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa6a:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800fa6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa6e:	333c      	adds	r3, #60	; 0x3c
 800fa70:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800fa74:	4618      	mov	r0, r3
 800fa76:	f7fd fe1b 	bl	800d6b0 <ld_dword>
 800fa7a:	4602      	mov	r2, r0
 800fa7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa7e:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800fa80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa82:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800fa86:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800fa88:	4b0a      	ldr	r3, [pc, #40]	; (800fab4 <find_volume+0x510>)
 800fa8a:	881b      	ldrh	r3, [r3, #0]
 800fa8c:	3301      	adds	r3, #1
 800fa8e:	b29a      	uxth	r2, r3
 800fa90:	4b08      	ldr	r3, [pc, #32]	; (800fab4 <find_volume+0x510>)
 800fa92:	801a      	strh	r2, [r3, #0]
 800fa94:	4b07      	ldr	r3, [pc, #28]	; (800fab4 <find_volume+0x510>)
 800fa96:	881a      	ldrh	r2, [r3, #0]
 800fa98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa9a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800fa9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fa9e:	f7fe f869 	bl	800db74 <clear_lock>
#endif
	return FR_OK;
 800faa2:	2300      	movs	r3, #0
}
 800faa4:	4618      	mov	r0, r3
 800faa6:	3758      	adds	r7, #88	; 0x58
 800faa8:	46bd      	mov	sp, r7
 800faaa:	bd80      	pop	{r7, pc}
 800faac:	41615252 	.word	0x41615252
 800fab0:	61417272 	.word	0x61417272
 800fab4:	20000790 	.word	0x20000790

0800fab8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800fab8:	b580      	push	{r7, lr}
 800faba:	b084      	sub	sp, #16
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
 800fac0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800fac2:	2309      	movs	r3, #9
 800fac4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	d02e      	beq.n	800fb2a <validate+0x72>
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	681b      	ldr	r3, [r3, #0]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d02a      	beq.n	800fb2a <validate+0x72>
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	781b      	ldrb	r3, [r3, #0]
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d025      	beq.n	800fb2a <validate+0x72>
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	889a      	ldrh	r2, [r3, #4]
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	88db      	ldrh	r3, [r3, #6]
 800fae8:	429a      	cmp	r2, r3
 800faea:	d11e      	bne.n	800fb2a <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	4618      	mov	r0, r3
 800faf2:	f7fd fec5 	bl	800d880 <lock_fs>
 800faf6:	4603      	mov	r3, r0
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d014      	beq.n	800fb26 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	785b      	ldrb	r3, [r3, #1]
 800fb02:	4618      	mov	r0, r3
 800fb04:	f7fd fd1e 	bl	800d544 <disk_status>
 800fb08:	4603      	mov	r3, r0
 800fb0a:	f003 0301 	and.w	r3, r3, #1
 800fb0e:	2b00      	cmp	r3, #0
 800fb10:	d102      	bne.n	800fb18 <validate+0x60>
				res = FR_OK;
 800fb12:	2300      	movs	r3, #0
 800fb14:	73fb      	strb	r3, [r7, #15]
 800fb16:	e008      	b.n	800fb2a <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	2100      	movs	r1, #0
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f7fd fec4 	bl	800d8ac <unlock_fs>
 800fb24:	e001      	b.n	800fb2a <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800fb26:	230f      	movs	r3, #15
 800fb28:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800fb2a:	7bfb      	ldrb	r3, [r7, #15]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d102      	bne.n	800fb36 <validate+0x7e>
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	681b      	ldr	r3, [r3, #0]
 800fb34:	e000      	b.n	800fb38 <validate+0x80>
 800fb36:	2300      	movs	r3, #0
 800fb38:	683a      	ldr	r2, [r7, #0]
 800fb3a:	6013      	str	r3, [r2, #0]
	return res;
 800fb3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb3e:	4618      	mov	r0, r3
 800fb40:	3710      	adds	r7, #16
 800fb42:	46bd      	mov	sp, r7
 800fb44:	bd80      	pop	{r7, pc}
	...

0800fb48 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800fb48:	b580      	push	{r7, lr}
 800fb4a:	b088      	sub	sp, #32
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	60f8      	str	r0, [r7, #12]
 800fb50:	60b9      	str	r1, [r7, #8]
 800fb52:	4613      	mov	r3, r2
 800fb54:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800fb56:	68bb      	ldr	r3, [r7, #8]
 800fb58:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800fb5a:	f107 0310 	add.w	r3, r7, #16
 800fb5e:	4618      	mov	r0, r3
 800fb60:	f7ff fc86 	bl	800f470 <get_ldnumber>
 800fb64:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800fb66:	69fb      	ldr	r3, [r7, #28]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	da01      	bge.n	800fb70 <f_mount+0x28>
 800fb6c:	230b      	movs	r3, #11
 800fb6e:	e048      	b.n	800fc02 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800fb70:	4a26      	ldr	r2, [pc, #152]	; (800fc0c <f_mount+0xc4>)
 800fb72:	69fb      	ldr	r3, [r7, #28]
 800fb74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb78:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800fb7a:	69bb      	ldr	r3, [r7, #24]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d00f      	beq.n	800fba0 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800fb80:	69b8      	ldr	r0, [r7, #24]
 800fb82:	f7fd fff7 	bl	800db74 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800fb86:	69bb      	ldr	r3, [r7, #24]
 800fb88:	695b      	ldr	r3, [r3, #20]
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f001 f805 	bl	8010b9a <ff_del_syncobj>
 800fb90:	4603      	mov	r3, r0
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d101      	bne.n	800fb9a <f_mount+0x52>
 800fb96:	2302      	movs	r3, #2
 800fb98:	e033      	b.n	800fc02 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800fb9a:	69bb      	ldr	r3, [r7, #24]
 800fb9c:	2200      	movs	r2, #0
 800fb9e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d00f      	beq.n	800fbc6 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800fba6:	68fb      	ldr	r3, [r7, #12]
 800fba8:	2200      	movs	r2, #0
 800fbaa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800fbac:	69fb      	ldr	r3, [r7, #28]
 800fbae:	b2da      	uxtb	r2, r3
 800fbb0:	68fb      	ldr	r3, [r7, #12]
 800fbb2:	3314      	adds	r3, #20
 800fbb4:	4619      	mov	r1, r3
 800fbb6:	4610      	mov	r0, r2
 800fbb8:	f000 ffd4 	bl	8010b64 <ff_cre_syncobj>
 800fbbc:	4603      	mov	r3, r0
 800fbbe:	2b00      	cmp	r3, #0
 800fbc0:	d101      	bne.n	800fbc6 <f_mount+0x7e>
 800fbc2:	2302      	movs	r3, #2
 800fbc4:	e01d      	b.n	800fc02 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800fbc6:	68fa      	ldr	r2, [r7, #12]
 800fbc8:	4910      	ldr	r1, [pc, #64]	; (800fc0c <f_mount+0xc4>)
 800fbca:	69fb      	ldr	r3, [r7, #28]
 800fbcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800fbd0:	68fb      	ldr	r3, [r7, #12]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d002      	beq.n	800fbdc <f_mount+0x94>
 800fbd6:	79fb      	ldrb	r3, [r7, #7]
 800fbd8:	2b01      	cmp	r3, #1
 800fbda:	d001      	beq.n	800fbe0 <f_mount+0x98>
 800fbdc:	2300      	movs	r3, #0
 800fbde:	e010      	b.n	800fc02 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800fbe0:	f107 010c 	add.w	r1, r7, #12
 800fbe4:	f107 0308 	add.w	r3, r7, #8
 800fbe8:	2200      	movs	r2, #0
 800fbea:	4618      	mov	r0, r3
 800fbec:	f7ff fcda 	bl	800f5a4 <find_volume>
 800fbf0:	4603      	mov	r3, r0
 800fbf2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	7dfa      	ldrb	r2, [r7, #23]
 800fbf8:	4611      	mov	r1, r2
 800fbfa:	4618      	mov	r0, r3
 800fbfc:	f7fd fe56 	bl	800d8ac <unlock_fs>
 800fc00:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc02:	4618      	mov	r0, r3
 800fc04:	3720      	adds	r7, #32
 800fc06:	46bd      	mov	sp, r7
 800fc08:	bd80      	pop	{r7, pc}
 800fc0a:	bf00      	nop
 800fc0c:	2000078c 	.word	0x2000078c

0800fc10 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800fc10:	b580      	push	{r7, lr}
 800fc12:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 800fc16:	af00      	add	r7, sp, #0
 800fc18:	f107 030c 	add.w	r3, r7, #12
 800fc1c:	6018      	str	r0, [r3, #0]
 800fc1e:	f107 0308 	add.w	r3, r7, #8
 800fc22:	6019      	str	r1, [r3, #0]
 800fc24:	1dfb      	adds	r3, r7, #7
 800fc26:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800fc28:	f107 030c 	add.w	r3, r7, #12
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	d101      	bne.n	800fc36 <f_open+0x26>
 800fc32:	2309      	movs	r3, #9
 800fc34:	e24a      	b.n	80100cc <f_open+0x4bc>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800fc36:	1dfb      	adds	r3, r7, #7
 800fc38:	1dfa      	adds	r2, r7, #7
 800fc3a:	7812      	ldrb	r2, [r2, #0]
 800fc3c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800fc40:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 800fc42:	1dfb      	adds	r3, r7, #7
 800fc44:	781a      	ldrb	r2, [r3, #0]
 800fc46:	f507 7105 	add.w	r1, r7, #532	; 0x214
 800fc4a:	f107 0308 	add.w	r3, r7, #8
 800fc4e:	4618      	mov	r0, r3
 800fc50:	f7ff fca8 	bl	800f5a4 <find_volume>
 800fc54:	4603      	mov	r3, r0
 800fc56:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 800fc5a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	f040 8221 	bne.w	80100a6 <f_open+0x496>
		dj.obj.fs = fs;
 800fc64:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800fc68:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 800fc6c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800fc70:	f107 0214 	add.w	r2, r7, #20
 800fc74:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 800fc76:	f107 0308 	add.w	r3, r7, #8
 800fc7a:	681a      	ldr	r2, [r3, #0]
 800fc7c:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800fc80:	4611      	mov	r1, r2
 800fc82:	4618      	mov	r0, r3
 800fc84:	f7ff fb7e 	bl	800f384 <follow_path>
 800fc88:	4603      	mov	r3, r0
 800fc8a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800fc8e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d11b      	bne.n	800fcce <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800fc96:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 800fc9a:	b25b      	sxtb	r3, r3
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	da03      	bge.n	800fca8 <f_open+0x98>
				res = FR_INVALID_NAME;
 800fca0:	2306      	movs	r3, #6
 800fca2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800fca6:	e012      	b.n	800fcce <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fca8:	1dfb      	adds	r3, r7, #7
 800fcaa:	781b      	ldrb	r3, [r3, #0]
 800fcac:	f023 0301 	bic.w	r3, r3, #1
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	bf14      	ite	ne
 800fcb4:	2301      	movne	r3, #1
 800fcb6:	2300      	moveq	r3, #0
 800fcb8:	b2db      	uxtb	r3, r3
 800fcba:	461a      	mov	r2, r3
 800fcbc:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800fcc0:	4611      	mov	r1, r2
 800fcc2:	4618      	mov	r0, r3
 800fcc4:	f7fd fe0e 	bl	800d8e4 <chk_lock>
 800fcc8:	4603      	mov	r3, r0
 800fcca:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800fcce:	1dfb      	adds	r3, r7, #7
 800fcd0:	781b      	ldrb	r3, [r3, #0]
 800fcd2:	f003 031c 	and.w	r3, r3, #28
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	f000 809b 	beq.w	800fe12 <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 800fcdc:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d019      	beq.n	800fd18 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800fce4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800fce8:	2b04      	cmp	r3, #4
 800fcea:	d10e      	bne.n	800fd0a <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800fcec:	f7fd fe56 	bl	800d99c <enq_lock>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d006      	beq.n	800fd04 <f_open+0xf4>
 800fcf6:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800fcfa:	4618      	mov	r0, r3
 800fcfc:	f7fe ffb4 	bl	800ec68 <dir_register>
 800fd00:	4603      	mov	r3, r0
 800fd02:	e000      	b.n	800fd06 <f_open+0xf6>
 800fd04:	2312      	movs	r3, #18
 800fd06:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800fd0a:	1dfb      	adds	r3, r7, #7
 800fd0c:	1dfa      	adds	r2, r7, #7
 800fd0e:	7812      	ldrb	r2, [r2, #0]
 800fd10:	f042 0208 	orr.w	r2, r2, #8
 800fd14:	701a      	strb	r2, [r3, #0]
 800fd16:	e012      	b.n	800fd3e <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800fd18:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800fd1c:	f003 0311 	and.w	r3, r3, #17
 800fd20:	2b00      	cmp	r3, #0
 800fd22:	d003      	beq.n	800fd2c <f_open+0x11c>
					res = FR_DENIED;
 800fd24:	2307      	movs	r3, #7
 800fd26:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800fd2a:	e008      	b.n	800fd3e <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800fd2c:	1dfb      	adds	r3, r7, #7
 800fd2e:	781b      	ldrb	r3, [r3, #0]
 800fd30:	f003 0304 	and.w	r3, r3, #4
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d002      	beq.n	800fd3e <f_open+0x12e>
 800fd38:	2308      	movs	r3, #8
 800fd3a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800fd3e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	f040 8082 	bne.w	800fe4c <f_open+0x23c>
 800fd48:	1dfb      	adds	r3, r7, #7
 800fd4a:	781b      	ldrb	r3, [r3, #0]
 800fd4c:	f003 0308 	and.w	r3, r3, #8
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d07b      	beq.n	800fe4c <f_open+0x23c>
				dw = GET_FATTIME();
 800fd54:	f7fb ff04 	bl	800bb60 <get_fattime>
 800fd58:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800fd5c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800fd60:	330e      	adds	r3, #14
 800fd62:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800fd66:	4618      	mov	r0, r3
 800fd68:	f7fd fce0 	bl	800d72c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800fd6c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800fd70:	3316      	adds	r3, #22
 800fd72:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800fd76:	4618      	mov	r0, r3
 800fd78:	f7fd fcd8 	bl	800d72c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800fd7c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800fd80:	330b      	adds	r3, #11
 800fd82:	2220      	movs	r2, #32
 800fd84:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800fd86:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800fd8a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800fd8e:	4611      	mov	r1, r2
 800fd90:	4618      	mov	r0, r3
 800fd92:	f7fe fcdf 	bl	800e754 <ld_clust>
 800fd96:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800fd9a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800fd9e:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 800fda2:	2200      	movs	r2, #0
 800fda4:	4618      	mov	r0, r3
 800fda6:	f7fe fcf4 	bl	800e792 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800fdaa:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800fdae:	331c      	adds	r3, #28
 800fdb0:	2100      	movs	r1, #0
 800fdb2:	4618      	mov	r0, r3
 800fdb4:	f7fd fcba 	bl	800d72c <st_dword>
					fs->wflag = 1;
 800fdb8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800fdbc:	2201      	movs	r2, #1
 800fdbe:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800fdc0:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 800fdc4:	2b00      	cmp	r3, #0
 800fdc6:	d041      	beq.n	800fe4c <f_open+0x23c>
						dw = fs->winsect;
 800fdc8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800fdcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdce:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 800fdd2:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 800fddc:	4618      	mov	r0, r3
 800fdde:	f7fe f9de 	bl	800e19e <remove_chain>
 800fde2:	4603      	mov	r3, r0
 800fde4:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 800fde8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d12d      	bne.n	800fe4c <f_open+0x23c>
							res = move_window(fs, dw);
 800fdf0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800fdf4:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 800fdf8:	4618      	mov	r0, r3
 800fdfa:	f7fd ff23 	bl	800dc44 <move_window>
 800fdfe:	4603      	mov	r3, r0
 800fe00:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800fe04:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800fe08:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 800fe0c:	3a01      	subs	r2, #1
 800fe0e:	619a      	str	r2, [r3, #24]
 800fe10:	e01c      	b.n	800fe4c <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800fe12:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d118      	bne.n	800fe4c <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800fe1a:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800fe1e:	f003 0310 	and.w	r3, r3, #16
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d003      	beq.n	800fe2e <f_open+0x21e>
					res = FR_NO_FILE;
 800fe26:	2304      	movs	r3, #4
 800fe28:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 800fe2c:	e00e      	b.n	800fe4c <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800fe2e:	1dfb      	adds	r3, r7, #7
 800fe30:	781b      	ldrb	r3, [r3, #0]
 800fe32:	f003 0302 	and.w	r3, r3, #2
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d008      	beq.n	800fe4c <f_open+0x23c>
 800fe3a:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 800fe3e:	f003 0301 	and.w	r3, r3, #1
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d002      	beq.n	800fe4c <f_open+0x23c>
						res = FR_DENIED;
 800fe46:	2307      	movs	r3, #7
 800fe48:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 800fe4c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d136      	bne.n	800fec2 <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800fe54:	1dfb      	adds	r3, r7, #7
 800fe56:	781b      	ldrb	r3, [r3, #0]
 800fe58:	f003 0308 	and.w	r3, r3, #8
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	d005      	beq.n	800fe6c <f_open+0x25c>
				mode |= FA_MODIFIED;
 800fe60:	1dfb      	adds	r3, r7, #7
 800fe62:	1dfa      	adds	r2, r7, #7
 800fe64:	7812      	ldrb	r2, [r2, #0]
 800fe66:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fe6a:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800fe6c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800fe70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fe72:	f107 030c 	add.w	r3, r7, #12
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800fe7a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800fe7e:	f107 030c 	add.w	r3, r7, #12
 800fe82:	681b      	ldr	r3, [r3, #0]
 800fe84:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800fe86:	1dfb      	adds	r3, r7, #7
 800fe88:	781b      	ldrb	r3, [r3, #0]
 800fe8a:	f023 0301 	bic.w	r3, r3, #1
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	bf14      	ite	ne
 800fe92:	2301      	movne	r3, #1
 800fe94:	2300      	moveq	r3, #0
 800fe96:	b2db      	uxtb	r3, r3
 800fe98:	461a      	mov	r2, r3
 800fe9a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 800fe9e:	4611      	mov	r1, r2
 800fea0:	4618      	mov	r0, r3
 800fea2:	f7fd fd9d 	bl	800d9e0 <inc_lock>
 800fea6:	4602      	mov	r2, r0
 800fea8:	f107 030c 	add.w	r3, r7, #12
 800feac:	681b      	ldr	r3, [r3, #0]
 800feae:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800feb0:	f107 030c 	add.w	r3, r7, #12
 800feb4:	681b      	ldr	r3, [r3, #0]
 800feb6:	691b      	ldr	r3, [r3, #16]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d102      	bne.n	800fec2 <f_open+0x2b2>
 800febc:	2302      	movs	r3, #2
 800febe:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 800fec2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	f040 80ed 	bne.w	80100a6 <f_open+0x496>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800fecc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800fed0:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 800fed4:	4611      	mov	r1, r2
 800fed6:	4618      	mov	r0, r3
 800fed8:	f7fe fc3c 	bl	800e754 <ld_clust>
 800fedc:	4602      	mov	r2, r0
 800fede:	f107 030c 	add.w	r3, r7, #12
 800fee2:	681b      	ldr	r3, [r3, #0]
 800fee4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800fee6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800feea:	331c      	adds	r3, #28
 800feec:	4618      	mov	r0, r3
 800feee:	f7fd fbdf 	bl	800d6b0 <ld_dword>
 800fef2:	4602      	mov	r2, r0
 800fef4:	f107 030c 	add.w	r3, r7, #12
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800fefc:	f107 030c 	add.w	r3, r7, #12
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	2200      	movs	r2, #0
 800ff04:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800ff06:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 800ff0a:	f107 030c 	add.w	r3, r7, #12
 800ff0e:	681b      	ldr	r3, [r3, #0]
 800ff10:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800ff12:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ff16:	88da      	ldrh	r2, [r3, #6]
 800ff18:	f107 030c 	add.w	r3, r7, #12
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800ff20:	f107 030c 	add.w	r3, r7, #12
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	1dfa      	adds	r2, r7, #7
 800ff28:	7812      	ldrb	r2, [r2, #0]
 800ff2a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800ff2c:	f107 030c 	add.w	r3, r7, #12
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	2200      	movs	r2, #0
 800ff34:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ff36:	f107 030c 	add.w	r3, r7, #12
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	2200      	movs	r2, #0
 800ff3e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ff40:	f107 030c 	add.w	r3, r7, #12
 800ff44:	681b      	ldr	r3, [r3, #0]
 800ff46:	2200      	movs	r2, #0
 800ff48:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ff4a:	f107 030c 	add.w	r3, r7, #12
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	3330      	adds	r3, #48	; 0x30
 800ff52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ff56:	2100      	movs	r1, #0
 800ff58:	4618      	mov	r0, r3
 800ff5a:	f7fd fc34 	bl	800d7c6 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ff5e:	1dfb      	adds	r3, r7, #7
 800ff60:	781b      	ldrb	r3, [r3, #0]
 800ff62:	f003 0320 	and.w	r3, r3, #32
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	f000 809d 	beq.w	80100a6 <f_open+0x496>
 800ff6c:	f107 030c 	add.w	r3, r7, #12
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	68db      	ldr	r3, [r3, #12]
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	f000 8096 	beq.w	80100a6 <f_open+0x496>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ff7a:	f107 030c 	add.w	r3, r7, #12
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	68da      	ldr	r2, [r3, #12]
 800ff82:	f107 030c 	add.w	r3, r7, #12
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ff8a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ff8e:	895b      	ldrh	r3, [r3, #10]
 800ff90:	461a      	mov	r2, r3
 800ff92:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 800ff96:	899b      	ldrh	r3, [r3, #12]
 800ff98:	fb03 f302 	mul.w	r3, r3, r2
 800ff9c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ffa0:	f107 030c 	add.w	r3, r7, #12
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	689b      	ldr	r3, [r3, #8]
 800ffa8:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ffac:	f107 030c 	add.w	r3, r7, #12
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	68db      	ldr	r3, [r3, #12]
 800ffb4:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800ffb8:	e01f      	b.n	800fffa <f_open+0x3ea>
					clst = get_fat(&fp->obj, clst);
 800ffba:	f107 030c 	add.w	r3, r7, #12
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 800ffc4:	4618      	mov	r0, r3
 800ffc6:	f7fd fefa 	bl	800ddbe <get_fat>
 800ffca:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 800ffce:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800ffd2:	2b01      	cmp	r3, #1
 800ffd4:	d802      	bhi.n	800ffdc <f_open+0x3cc>
 800ffd6:	2302      	movs	r3, #2
 800ffd8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ffdc:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 800ffe0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ffe4:	d102      	bne.n	800ffec <f_open+0x3dc>
 800ffe6:	2301      	movs	r3, #1
 800ffe8:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ffec:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 800fff0:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 800fff4:	1ad3      	subs	r3, r2, r3
 800fff6:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800fffa:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d105      	bne.n	801000e <f_open+0x3fe>
 8010002:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8010006:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801000a:	429a      	cmp	r2, r3
 801000c:	d8d5      	bhi.n	800ffba <f_open+0x3aa>
				}
				fp->clust = clst;
 801000e:	f107 030c 	add.w	r3, r7, #12
 8010012:	681b      	ldr	r3, [r3, #0]
 8010014:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8010018:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 801001a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801001e:	2b00      	cmp	r3, #0
 8010020:	d141      	bne.n	80100a6 <f_open+0x496>
 8010022:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010026:	899b      	ldrh	r3, [r3, #12]
 8010028:	461a      	mov	r2, r3
 801002a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801002e:	fbb3 f1f2 	udiv	r1, r3, r2
 8010032:	fb02 f201 	mul.w	r2, r2, r1
 8010036:	1a9b      	subs	r3, r3, r2
 8010038:	2b00      	cmp	r3, #0
 801003a:	d034      	beq.n	80100a6 <f_open+0x496>
					if ((sc = clust2sect(fs, clst)) == 0) {
 801003c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010040:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 8010044:	4618      	mov	r0, r3
 8010046:	f7fd fe9b 	bl	800dd80 <clust2sect>
 801004a:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 801004e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8010052:	2b00      	cmp	r3, #0
 8010054:	d103      	bne.n	801005e <f_open+0x44e>
						res = FR_INT_ERR;
 8010056:	2302      	movs	r3, #2
 8010058:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 801005c:	e023      	b.n	80100a6 <f_open+0x496>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801005e:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010062:	899b      	ldrh	r3, [r3, #12]
 8010064:	461a      	mov	r2, r3
 8010066:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801006a:	fbb3 f2f2 	udiv	r2, r3, r2
 801006e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8010072:	441a      	add	r2, r3
 8010074:	f107 030c 	add.w	r3, r7, #12
 8010078:	681b      	ldr	r3, [r3, #0]
 801007a:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801007c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8010080:	7858      	ldrb	r0, [r3, #1]
 8010082:	f107 030c 	add.w	r3, r7, #12
 8010086:	681b      	ldr	r3, [r3, #0]
 8010088:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801008c:	f107 030c 	add.w	r3, r7, #12
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	6a1a      	ldr	r2, [r3, #32]
 8010094:	2301      	movs	r3, #1
 8010096:	f7fd fa95 	bl	800d5c4 <disk_read>
 801009a:	4603      	mov	r3, r0
 801009c:	2b00      	cmp	r3, #0
 801009e:	d002      	beq.n	80100a6 <f_open+0x496>
 80100a0:	2301      	movs	r3, #1
 80100a2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80100a6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d004      	beq.n	80100b8 <f_open+0x4a8>
 80100ae:	f107 030c 	add.w	r3, r7, #12
 80100b2:	681b      	ldr	r3, [r3, #0]
 80100b4:	2200      	movs	r2, #0
 80100b6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80100b8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80100bc:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 80100c0:	4611      	mov	r1, r2
 80100c2:	4618      	mov	r0, r3
 80100c4:	f7fd fbf2 	bl	800d8ac <unlock_fs>
 80100c8:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 80100cc:	4618      	mov	r0, r3
 80100ce:	f507 771a 	add.w	r7, r7, #616	; 0x268
 80100d2:	46bd      	mov	sp, r7
 80100d4:	bd80      	pop	{r7, pc}

080100d6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80100d6:	b580      	push	{r7, lr}
 80100d8:	b08c      	sub	sp, #48	; 0x30
 80100da:	af00      	add	r7, sp, #0
 80100dc:	60f8      	str	r0, [r7, #12]
 80100de:	60b9      	str	r1, [r7, #8]
 80100e0:	607a      	str	r2, [r7, #4]
 80100e2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80100e4:	68bb      	ldr	r3, [r7, #8]
 80100e6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80100e8:	683b      	ldr	r3, [r7, #0]
 80100ea:	2200      	movs	r2, #0
 80100ec:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	f107 0210 	add.w	r2, r7, #16
 80100f4:	4611      	mov	r1, r2
 80100f6:	4618      	mov	r0, r3
 80100f8:	f7ff fcde 	bl	800fab8 <validate>
 80100fc:	4603      	mov	r3, r0
 80100fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010102:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010106:	2b00      	cmp	r3, #0
 8010108:	d107      	bne.n	801011a <f_write+0x44>
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	7d5b      	ldrb	r3, [r3, #21]
 801010e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010112:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010116:	2b00      	cmp	r3, #0
 8010118:	d009      	beq.n	801012e <f_write+0x58>
 801011a:	693b      	ldr	r3, [r7, #16]
 801011c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8010120:	4611      	mov	r1, r2
 8010122:	4618      	mov	r0, r3
 8010124:	f7fd fbc2 	bl	800d8ac <unlock_fs>
 8010128:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801012c:	e192      	b.n	8010454 <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	7d1b      	ldrb	r3, [r3, #20]
 8010132:	f003 0302 	and.w	r3, r3, #2
 8010136:	2b00      	cmp	r3, #0
 8010138:	d106      	bne.n	8010148 <f_write+0x72>
 801013a:	693b      	ldr	r3, [r7, #16]
 801013c:	2107      	movs	r1, #7
 801013e:	4618      	mov	r0, r3
 8010140:	f7fd fbb4 	bl	800d8ac <unlock_fs>
 8010144:	2307      	movs	r3, #7
 8010146:	e185      	b.n	8010454 <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	699a      	ldr	r2, [r3, #24]
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	441a      	add	r2, r3
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	699b      	ldr	r3, [r3, #24]
 8010154:	429a      	cmp	r2, r3
 8010156:	f080 816a 	bcs.w	801042e <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	699b      	ldr	r3, [r3, #24]
 801015e:	43db      	mvns	r3, r3
 8010160:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8010162:	e164      	b.n	801042e <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	699b      	ldr	r3, [r3, #24]
 8010168:	693a      	ldr	r2, [r7, #16]
 801016a:	8992      	ldrh	r2, [r2, #12]
 801016c:	fbb3 f1f2 	udiv	r1, r3, r2
 8010170:	fb02 f201 	mul.w	r2, r2, r1
 8010174:	1a9b      	subs	r3, r3, r2
 8010176:	2b00      	cmp	r3, #0
 8010178:	f040 810f 	bne.w	801039a <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	699b      	ldr	r3, [r3, #24]
 8010180:	693a      	ldr	r2, [r7, #16]
 8010182:	8992      	ldrh	r2, [r2, #12]
 8010184:	fbb3 f3f2 	udiv	r3, r3, r2
 8010188:	693a      	ldr	r2, [r7, #16]
 801018a:	8952      	ldrh	r2, [r2, #10]
 801018c:	3a01      	subs	r2, #1
 801018e:	4013      	ands	r3, r2
 8010190:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010192:	69bb      	ldr	r3, [r7, #24]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d14d      	bne.n	8010234 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	699b      	ldr	r3, [r3, #24]
 801019c:	2b00      	cmp	r3, #0
 801019e:	d10c      	bne.n	80101ba <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	689b      	ldr	r3, [r3, #8]
 80101a4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80101a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	d11a      	bne.n	80101e2 <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	2100      	movs	r1, #0
 80101b0:	4618      	mov	r0, r3
 80101b2:	f7fe f859 	bl	800e268 <create_chain>
 80101b6:	62b8      	str	r0, [r7, #40]	; 0x28
 80101b8:	e013      	b.n	80101e2 <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80101be:	2b00      	cmp	r3, #0
 80101c0:	d007      	beq.n	80101d2 <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	699b      	ldr	r3, [r3, #24]
 80101c6:	4619      	mov	r1, r3
 80101c8:	68f8      	ldr	r0, [r7, #12]
 80101ca:	f7fe f8e5 	bl	800e398 <clmt_clust>
 80101ce:	62b8      	str	r0, [r7, #40]	; 0x28
 80101d0:	e007      	b.n	80101e2 <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80101d2:	68fa      	ldr	r2, [r7, #12]
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	69db      	ldr	r3, [r3, #28]
 80101d8:	4619      	mov	r1, r3
 80101da:	4610      	mov	r0, r2
 80101dc:	f7fe f844 	bl	800e268 <create_chain>
 80101e0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80101e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	f000 8127 	beq.w	8010438 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80101ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ec:	2b01      	cmp	r3, #1
 80101ee:	d109      	bne.n	8010204 <f_write+0x12e>
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	2202      	movs	r2, #2
 80101f4:	755a      	strb	r2, [r3, #21]
 80101f6:	693b      	ldr	r3, [r7, #16]
 80101f8:	2102      	movs	r1, #2
 80101fa:	4618      	mov	r0, r3
 80101fc:	f7fd fb56 	bl	800d8ac <unlock_fs>
 8010200:	2302      	movs	r3, #2
 8010202:	e127      	b.n	8010454 <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010206:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801020a:	d109      	bne.n	8010220 <f_write+0x14a>
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	2201      	movs	r2, #1
 8010210:	755a      	strb	r2, [r3, #21]
 8010212:	693b      	ldr	r3, [r7, #16]
 8010214:	2101      	movs	r1, #1
 8010216:	4618      	mov	r0, r3
 8010218:	f7fd fb48 	bl	800d8ac <unlock_fs>
 801021c:	2301      	movs	r3, #1
 801021e:	e119      	b.n	8010454 <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010224:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010226:	68fb      	ldr	r3, [r7, #12]
 8010228:	689b      	ldr	r3, [r3, #8]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d102      	bne.n	8010234 <f_write+0x15e>
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010232:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	7d1b      	ldrb	r3, [r3, #20]
 8010238:	b25b      	sxtb	r3, r3
 801023a:	2b00      	cmp	r3, #0
 801023c:	da1d      	bge.n	801027a <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801023e:	693b      	ldr	r3, [r7, #16]
 8010240:	7858      	ldrb	r0, [r3, #1]
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010248:	68fb      	ldr	r3, [r7, #12]
 801024a:	6a1a      	ldr	r2, [r3, #32]
 801024c:	2301      	movs	r3, #1
 801024e:	f7fd f9d9 	bl	800d604 <disk_write>
 8010252:	4603      	mov	r3, r0
 8010254:	2b00      	cmp	r3, #0
 8010256:	d009      	beq.n	801026c <f_write+0x196>
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	2201      	movs	r2, #1
 801025c:	755a      	strb	r2, [r3, #21]
 801025e:	693b      	ldr	r3, [r7, #16]
 8010260:	2101      	movs	r1, #1
 8010262:	4618      	mov	r0, r3
 8010264:	f7fd fb22 	bl	800d8ac <unlock_fs>
 8010268:	2301      	movs	r3, #1
 801026a:	e0f3      	b.n	8010454 <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	7d1b      	ldrb	r3, [r3, #20]
 8010270:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010274:	b2da      	uxtb	r2, r3
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801027a:	693a      	ldr	r2, [r7, #16]
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	69db      	ldr	r3, [r3, #28]
 8010280:	4619      	mov	r1, r3
 8010282:	4610      	mov	r0, r2
 8010284:	f7fd fd7c 	bl	800dd80 <clust2sect>
 8010288:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801028a:	697b      	ldr	r3, [r7, #20]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d109      	bne.n	80102a4 <f_write+0x1ce>
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	2202      	movs	r2, #2
 8010294:	755a      	strb	r2, [r3, #21]
 8010296:	693b      	ldr	r3, [r7, #16]
 8010298:	2102      	movs	r1, #2
 801029a:	4618      	mov	r0, r3
 801029c:	f7fd fb06 	bl	800d8ac <unlock_fs>
 80102a0:	2302      	movs	r3, #2
 80102a2:	e0d7      	b.n	8010454 <f_write+0x37e>
			sect += csect;
 80102a4:	697a      	ldr	r2, [r7, #20]
 80102a6:	69bb      	ldr	r3, [r7, #24]
 80102a8:	4413      	add	r3, r2
 80102aa:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80102ac:	693b      	ldr	r3, [r7, #16]
 80102ae:	899b      	ldrh	r3, [r3, #12]
 80102b0:	461a      	mov	r2, r3
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80102b8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80102ba:	6a3b      	ldr	r3, [r7, #32]
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d048      	beq.n	8010352 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80102c0:	69ba      	ldr	r2, [r7, #24]
 80102c2:	6a3b      	ldr	r3, [r7, #32]
 80102c4:	4413      	add	r3, r2
 80102c6:	693a      	ldr	r2, [r7, #16]
 80102c8:	8952      	ldrh	r2, [r2, #10]
 80102ca:	4293      	cmp	r3, r2
 80102cc:	d905      	bls.n	80102da <f_write+0x204>
					cc = fs->csize - csect;
 80102ce:	693b      	ldr	r3, [r7, #16]
 80102d0:	895b      	ldrh	r3, [r3, #10]
 80102d2:	461a      	mov	r2, r3
 80102d4:	69bb      	ldr	r3, [r7, #24]
 80102d6:	1ad3      	subs	r3, r2, r3
 80102d8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80102da:	693b      	ldr	r3, [r7, #16]
 80102dc:	7858      	ldrb	r0, [r3, #1]
 80102de:	6a3b      	ldr	r3, [r7, #32]
 80102e0:	697a      	ldr	r2, [r7, #20]
 80102e2:	69f9      	ldr	r1, [r7, #28]
 80102e4:	f7fd f98e 	bl	800d604 <disk_write>
 80102e8:	4603      	mov	r3, r0
 80102ea:	2b00      	cmp	r3, #0
 80102ec:	d009      	beq.n	8010302 <f_write+0x22c>
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	2201      	movs	r2, #1
 80102f2:	755a      	strb	r2, [r3, #21]
 80102f4:	693b      	ldr	r3, [r7, #16]
 80102f6:	2101      	movs	r1, #1
 80102f8:	4618      	mov	r0, r3
 80102fa:	f7fd fad7 	bl	800d8ac <unlock_fs>
 80102fe:	2301      	movs	r3, #1
 8010300:	e0a8      	b.n	8010454 <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	6a1a      	ldr	r2, [r3, #32]
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	1ad3      	subs	r3, r2, r3
 801030a:	6a3a      	ldr	r2, [r7, #32]
 801030c:	429a      	cmp	r2, r3
 801030e:	d918      	bls.n	8010342 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	6a1a      	ldr	r2, [r3, #32]
 801031a:	697b      	ldr	r3, [r7, #20]
 801031c:	1ad3      	subs	r3, r2, r3
 801031e:	693a      	ldr	r2, [r7, #16]
 8010320:	8992      	ldrh	r2, [r2, #12]
 8010322:	fb02 f303 	mul.w	r3, r2, r3
 8010326:	69fa      	ldr	r2, [r7, #28]
 8010328:	18d1      	adds	r1, r2, r3
 801032a:	693b      	ldr	r3, [r7, #16]
 801032c:	899b      	ldrh	r3, [r3, #12]
 801032e:	461a      	mov	r2, r3
 8010330:	f7fd fa28 	bl	800d784 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	7d1b      	ldrb	r3, [r3, #20]
 8010338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801033c:	b2da      	uxtb	r2, r3
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8010342:	693b      	ldr	r3, [r7, #16]
 8010344:	899b      	ldrh	r3, [r3, #12]
 8010346:	461a      	mov	r2, r3
 8010348:	6a3b      	ldr	r3, [r7, #32]
 801034a:	fb02 f303 	mul.w	r3, r2, r3
 801034e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8010350:	e050      	b.n	80103f4 <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	6a1b      	ldr	r3, [r3, #32]
 8010356:	697a      	ldr	r2, [r7, #20]
 8010358:	429a      	cmp	r2, r3
 801035a:	d01b      	beq.n	8010394 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	699a      	ldr	r2, [r3, #24]
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8010364:	429a      	cmp	r2, r3
 8010366:	d215      	bcs.n	8010394 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010368:	693b      	ldr	r3, [r7, #16]
 801036a:	7858      	ldrb	r0, [r3, #1]
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010372:	2301      	movs	r3, #1
 8010374:	697a      	ldr	r2, [r7, #20]
 8010376:	f7fd f925 	bl	800d5c4 <disk_read>
 801037a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 801037c:	2b00      	cmp	r3, #0
 801037e:	d009      	beq.n	8010394 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 8010380:	68fb      	ldr	r3, [r7, #12]
 8010382:	2201      	movs	r2, #1
 8010384:	755a      	strb	r2, [r3, #21]
 8010386:	693b      	ldr	r3, [r7, #16]
 8010388:	2101      	movs	r1, #1
 801038a:	4618      	mov	r0, r3
 801038c:	f7fd fa8e 	bl	800d8ac <unlock_fs>
 8010390:	2301      	movs	r3, #1
 8010392:	e05f      	b.n	8010454 <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	697a      	ldr	r2, [r7, #20]
 8010398:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 801039a:	693b      	ldr	r3, [r7, #16]
 801039c:	899b      	ldrh	r3, [r3, #12]
 801039e:	4618      	mov	r0, r3
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	699b      	ldr	r3, [r3, #24]
 80103a4:	693a      	ldr	r2, [r7, #16]
 80103a6:	8992      	ldrh	r2, [r2, #12]
 80103a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80103ac:	fb02 f201 	mul.w	r2, r2, r1
 80103b0:	1a9b      	subs	r3, r3, r2
 80103b2:	1ac3      	subs	r3, r0, r3
 80103b4:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80103b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	429a      	cmp	r2, r3
 80103bc:	d901      	bls.n	80103c2 <f_write+0x2ec>
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	699b      	ldr	r3, [r3, #24]
 80103cc:	693a      	ldr	r2, [r7, #16]
 80103ce:	8992      	ldrh	r2, [r2, #12]
 80103d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80103d4:	fb02 f200 	mul.w	r2, r2, r0
 80103d8:	1a9b      	subs	r3, r3, r2
 80103da:	440b      	add	r3, r1
 80103dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80103de:	69f9      	ldr	r1, [r7, #28]
 80103e0:	4618      	mov	r0, r3
 80103e2:	f7fd f9cf 	bl	800d784 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	7d1b      	ldrb	r3, [r3, #20]
 80103ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80103ee:	b2da      	uxtb	r2, r3
 80103f0:	68fb      	ldr	r3, [r7, #12]
 80103f2:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80103f4:	69fa      	ldr	r2, [r7, #28]
 80103f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103f8:	4413      	add	r3, r2
 80103fa:	61fb      	str	r3, [r7, #28]
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	699a      	ldr	r2, [r3, #24]
 8010400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010402:	441a      	add	r2, r3
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	619a      	str	r2, [r3, #24]
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	68da      	ldr	r2, [r3, #12]
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	699b      	ldr	r3, [r3, #24]
 8010410:	429a      	cmp	r2, r3
 8010412:	bf38      	it	cc
 8010414:	461a      	movcc	r2, r3
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	60da      	str	r2, [r3, #12]
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	681a      	ldr	r2, [r3, #0]
 801041e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010420:	441a      	add	r2, r3
 8010422:	683b      	ldr	r3, [r7, #0]
 8010424:	601a      	str	r2, [r3, #0]
 8010426:	687a      	ldr	r2, [r7, #4]
 8010428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801042a:	1ad3      	subs	r3, r2, r3
 801042c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	2b00      	cmp	r3, #0
 8010432:	f47f ae97 	bne.w	8010164 <f_write+0x8e>
 8010436:	e000      	b.n	801043a <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010438:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	7d1b      	ldrb	r3, [r3, #20]
 801043e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010442:	b2da      	uxtb	r2, r3
 8010444:	68fb      	ldr	r3, [r7, #12]
 8010446:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8010448:	693b      	ldr	r3, [r7, #16]
 801044a:	2100      	movs	r1, #0
 801044c:	4618      	mov	r0, r3
 801044e:	f7fd fa2d 	bl	800d8ac <unlock_fs>
 8010452:	2300      	movs	r3, #0
}
 8010454:	4618      	mov	r0, r3
 8010456:	3730      	adds	r7, #48	; 0x30
 8010458:	46bd      	mov	sp, r7
 801045a:	bd80      	pop	{r7, pc}

0801045c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801045c:	b580      	push	{r7, lr}
 801045e:	b086      	sub	sp, #24
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f107 0208 	add.w	r2, r7, #8
 801046a:	4611      	mov	r1, r2
 801046c:	4618      	mov	r0, r3
 801046e:	f7ff fb23 	bl	800fab8 <validate>
 8010472:	4603      	mov	r3, r0
 8010474:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010476:	7dfb      	ldrb	r3, [r7, #23]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d16d      	bne.n	8010558 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	7d1b      	ldrb	r3, [r3, #20]
 8010480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010484:	2b00      	cmp	r3, #0
 8010486:	d067      	beq.n	8010558 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	7d1b      	ldrb	r3, [r3, #20]
 801048c:	b25b      	sxtb	r3, r3
 801048e:	2b00      	cmp	r3, #0
 8010490:	da1a      	bge.n	80104c8 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010492:	68bb      	ldr	r3, [r7, #8]
 8010494:	7858      	ldrb	r0, [r3, #1]
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	6a1a      	ldr	r2, [r3, #32]
 80104a0:	2301      	movs	r3, #1
 80104a2:	f7fd f8af 	bl	800d604 <disk_write>
 80104a6:	4603      	mov	r3, r0
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d006      	beq.n	80104ba <f_sync+0x5e>
 80104ac:	68bb      	ldr	r3, [r7, #8]
 80104ae:	2101      	movs	r1, #1
 80104b0:	4618      	mov	r0, r3
 80104b2:	f7fd f9fb 	bl	800d8ac <unlock_fs>
 80104b6:	2301      	movs	r3, #1
 80104b8:	e055      	b.n	8010566 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	7d1b      	ldrb	r3, [r3, #20]
 80104be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80104c2:	b2da      	uxtb	r2, r3
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80104c8:	f7fb fb4a 	bl	800bb60 <get_fattime>
 80104cc:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80104ce:	68ba      	ldr	r2, [r7, #8]
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104d4:	4619      	mov	r1, r3
 80104d6:	4610      	mov	r0, r2
 80104d8:	f7fd fbb4 	bl	800dc44 <move_window>
 80104dc:	4603      	mov	r3, r0
 80104de:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80104e0:	7dfb      	ldrb	r3, [r7, #23]
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d138      	bne.n	8010558 <f_sync+0xfc>
					dir = fp->dir_ptr;
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80104ea:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80104ec:	68fb      	ldr	r3, [r7, #12]
 80104ee:	330b      	adds	r3, #11
 80104f0:	781a      	ldrb	r2, [r3, #0]
 80104f2:	68fb      	ldr	r3, [r7, #12]
 80104f4:	330b      	adds	r3, #11
 80104f6:	f042 0220 	orr.w	r2, r2, #32
 80104fa:	b2d2      	uxtb	r2, r2
 80104fc:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	6818      	ldr	r0, [r3, #0]
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	689b      	ldr	r3, [r3, #8]
 8010506:	461a      	mov	r2, r3
 8010508:	68f9      	ldr	r1, [r7, #12]
 801050a:	f7fe f942 	bl	800e792 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 801050e:	68fb      	ldr	r3, [r7, #12]
 8010510:	f103 021c 	add.w	r2, r3, #28
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	68db      	ldr	r3, [r3, #12]
 8010518:	4619      	mov	r1, r3
 801051a:	4610      	mov	r0, r2
 801051c:	f7fd f906 	bl	800d72c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	3316      	adds	r3, #22
 8010524:	6939      	ldr	r1, [r7, #16]
 8010526:	4618      	mov	r0, r3
 8010528:	f7fd f900 	bl	800d72c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801052c:	68fb      	ldr	r3, [r7, #12]
 801052e:	3312      	adds	r3, #18
 8010530:	2100      	movs	r1, #0
 8010532:	4618      	mov	r0, r3
 8010534:	f7fd f8df 	bl	800d6f6 <st_word>
					fs->wflag = 1;
 8010538:	68bb      	ldr	r3, [r7, #8]
 801053a:	2201      	movs	r2, #1
 801053c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 801053e:	68bb      	ldr	r3, [r7, #8]
 8010540:	4618      	mov	r0, r3
 8010542:	f7fd fbad 	bl	800dca0 <sync_fs>
 8010546:	4603      	mov	r3, r0
 8010548:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	7d1b      	ldrb	r3, [r3, #20]
 801054e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010552:	b2da      	uxtb	r2, r3
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010558:	68bb      	ldr	r3, [r7, #8]
 801055a:	7dfa      	ldrb	r2, [r7, #23]
 801055c:	4611      	mov	r1, r2
 801055e:	4618      	mov	r0, r3
 8010560:	f7fd f9a4 	bl	800d8ac <unlock_fs>
 8010564:	7dfb      	ldrb	r3, [r7, #23]
}
 8010566:	4618      	mov	r0, r3
 8010568:	3718      	adds	r7, #24
 801056a:	46bd      	mov	sp, r7
 801056c:	bd80      	pop	{r7, pc}

0801056e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 801056e:	b580      	push	{r7, lr}
 8010570:	b084      	sub	sp, #16
 8010572:	af00      	add	r7, sp, #0
 8010574:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010576:	6878      	ldr	r0, [r7, #4]
 8010578:	f7ff ff70 	bl	801045c <f_sync>
 801057c:	4603      	mov	r3, r0
 801057e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010580:	7bfb      	ldrb	r3, [r7, #15]
 8010582:	2b00      	cmp	r3, #0
 8010584:	d11d      	bne.n	80105c2 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	f107 0208 	add.w	r2, r7, #8
 801058c:	4611      	mov	r1, r2
 801058e:	4618      	mov	r0, r3
 8010590:	f7ff fa92 	bl	800fab8 <validate>
 8010594:	4603      	mov	r3, r0
 8010596:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010598:	7bfb      	ldrb	r3, [r7, #15]
 801059a:	2b00      	cmp	r3, #0
 801059c:	d111      	bne.n	80105c2 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	691b      	ldr	r3, [r3, #16]
 80105a2:	4618      	mov	r0, r3
 80105a4:	f7fd faaa 	bl	800dafc <dec_lock>
 80105a8:	4603      	mov	r3, r0
 80105aa:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80105ac:	7bfb      	ldrb	r3, [r7, #15]
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	d102      	bne.n	80105b8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	2200      	movs	r2, #0
 80105b6:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 80105b8:	68bb      	ldr	r3, [r7, #8]
 80105ba:	2100      	movs	r1, #0
 80105bc:	4618      	mov	r0, r3
 80105be:	f7fd f975 	bl	800d8ac <unlock_fs>
#endif
		}
	}
	return res;
 80105c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80105c4:	4618      	mov	r0, r3
 80105c6:	3710      	adds	r7, #16
 80105c8:	46bd      	mov	sp, r7
 80105ca:	bd80      	pop	{r7, pc}

080105cc <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 80105d2:	af00      	add	r7, sp, #0
 80105d4:	1d3b      	adds	r3, r7, #4
 80105d6:	6018      	str	r0, [r3, #0]
 80105d8:	463b      	mov	r3, r7
 80105da:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 80105dc:	f507 7102 	add.w	r1, r7, #520	; 0x208
 80105e0:	1d3b      	adds	r3, r7, #4
 80105e2:	2200      	movs	r2, #0
 80105e4:	4618      	mov	r0, r3
 80105e6:	f7fe ffdd 	bl	800f5a4 <find_volume>
 80105ea:	4603      	mov	r3, r0
 80105ec:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
	if (res == FR_OK) {
 80105f0:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d127      	bne.n	8010648 <f_stat+0x7c>
		INIT_NAMBUF(dj.obj.fs);
 80105f8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80105fc:	f107 0208 	add.w	r2, r7, #8
 8010600:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8010602:	1d3b      	adds	r3, r7, #4
 8010604:	681a      	ldr	r2, [r3, #0]
 8010606:	f507 7302 	add.w	r3, r7, #520	; 0x208
 801060a:	4611      	mov	r1, r2
 801060c:	4618      	mov	r0, r3
 801060e:	f7fe feb9 	bl	800f384 <follow_path>
 8010612:	4603      	mov	r3, r0
 8010614:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		if (res == FR_OK) {				/* Follow completed */
 8010618:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 801061c:	2b00      	cmp	r3, #0
 801061e:	d113      	bne.n	8010648 <f_stat+0x7c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8010620:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8010624:	b25b      	sxtb	r3, r3
 8010626:	2b00      	cmp	r3, #0
 8010628:	da03      	bge.n	8010632 <f_stat+0x66>
				res = FR_INVALID_NAME;
 801062a:	2306      	movs	r3, #6
 801062c:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 8010630:	e00a      	b.n	8010648 <f_stat+0x7c>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8010632:	463b      	mov	r3, r7
 8010634:	681b      	ldr	r3, [r3, #0]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d006      	beq.n	8010648 <f_stat+0x7c>
 801063a:	463b      	mov	r3, r7
 801063c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8010640:	6819      	ldr	r1, [r3, #0]
 8010642:	4610      	mov	r0, r2
 8010644:	f7fe fc08 	bl	800ee58 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8010648:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 801064c:	f897 223f 	ldrb.w	r2, [r7, #575]	; 0x23f
 8010650:	4611      	mov	r1, r2
 8010652:	4618      	mov	r0, r3
 8010654:	f7fd f92a 	bl	800d8ac <unlock_fs>
 8010658:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
}
 801065c:	4618      	mov	r0, r3
 801065e:	f507 7710 	add.w	r7, r7, #576	; 0x240
 8010662:	46bd      	mov	sp, r7
 8010664:	bd80      	pop	{r7, pc}

08010666 <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 8010666:	b580      	push	{r7, lr}
 8010668:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 801066c:	af00      	add	r7, sp, #0
 801066e:	1d3b      	adds	r3, r7, #4
 8010670:	6018      	str	r0, [r3, #0]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 8010672:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 8010676:	1d3b      	adds	r3, r7, #4
 8010678:	2202      	movs	r2, #2
 801067a:	4618      	mov	r0, r3
 801067c:	f7fe ff92 	bl	800f5a4 <find_volume>
 8010680:	4603      	mov	r3, r0
 8010682:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
	dj.obj.fs = fs;
 8010686:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801068a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	if (res == FR_OK) {
 801068e:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8010692:	2b00      	cmp	r3, #0
 8010694:	f040 8134 	bne.w	8010900 <f_mkdir+0x29a>
		INIT_NAMBUF(fs);
 8010698:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801069c:	f107 020c 	add.w	r2, r7, #12
 80106a0:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);			/* Follow the file path */
 80106a2:	1d3b      	adds	r3, r7, #4
 80106a4:	681a      	ldr	r2, [r3, #0]
 80106a6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80106aa:	4611      	mov	r1, r2
 80106ac:	4618      	mov	r0, r3
 80106ae:	f7fe fe69 	bl	800f384 <follow_path>
 80106b2:	4603      	mov	r3, r0
 80106b4:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 80106b8:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d102      	bne.n	80106c6 <f_mkdir+0x60>
 80106c0:	2308      	movs	r3, #8
 80106c2:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 80106c6:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80106ca:	2b04      	cmp	r3, #4
 80106cc:	f040 8118 	bne.w	8010900 <f_mkdir+0x29a>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 80106d0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80106d4:	2100      	movs	r1, #0
 80106d6:	4618      	mov	r0, r3
 80106d8:	f7fd fdc6 	bl	800e268 <create_chain>
 80106dc:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 80106e0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80106e4:	895b      	ldrh	r3, [r3, #10]
 80106e6:	461a      	mov	r2, r3
 80106e8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80106ec:	899b      	ldrh	r3, [r3, #12]
 80106ee:	fb03 f302 	mul.w	r3, r3, r2
 80106f2:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
			res = FR_OK;
 80106f6:	2300      	movs	r3, #0
 80106f8:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 80106fc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8010700:	2b00      	cmp	r3, #0
 8010702:	d102      	bne.n	801070a <f_mkdir+0xa4>
 8010704:	2307      	movs	r3, #7
 8010706:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 1) res = FR_INT_ERR;
 801070a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801070e:	2b01      	cmp	r3, #1
 8010710:	d102      	bne.n	8010718 <f_mkdir+0xb2>
 8010712:	2302      	movs	r3, #2
 8010714:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010718:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801071c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010720:	d102      	bne.n	8010728 <f_mkdir+0xc2>
 8010722:	2301      	movs	r3, #1
 8010724:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8010728:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 801072c:	2b00      	cmp	r3, #0
 801072e:	d107      	bne.n	8010740 <f_mkdir+0xda>
 8010730:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8010734:	4618      	mov	r0, r3
 8010736:	f7fd fa41 	bl	800dbbc <sync_window>
 801073a:	4603      	mov	r3, r0
 801073c:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			tm = GET_FATTIME();
 8010740:	f7fb fa0e 	bl	800bb60 <get_fattime>
 8010744:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
			if (res == FR_OK) {					/* Initialize the new directory table */
 8010748:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 801074c:	2b00      	cmp	r3, #0
 801074e:	f040 8094 	bne.w	801087a <f_mkdir+0x214>
				dsc = clust2sect(fs, dcl);
 8010752:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8010756:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 801075a:	4618      	mov	r0, r3
 801075c:	f7fd fb10 	bl	800dd80 <clust2sect>
 8010760:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
				dir = fs->win;
 8010764:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8010768:	333c      	adds	r3, #60	; 0x3c
 801076a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				mem_set(dir, 0, SS(fs));
 801076e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8010772:	899b      	ldrh	r3, [r3, #12]
 8010774:	461a      	mov	r2, r3
 8010776:	2100      	movs	r1, #0
 8010778:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 801077c:	f7fd f823 	bl	800d7c6 <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 8010780:	220b      	movs	r2, #11
 8010782:	2120      	movs	r1, #32
 8010784:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8010788:	f7fd f81d 	bl	800d7c6 <mem_set>
					dir[DIR_Name] = '.';
 801078c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8010790:	222e      	movs	r2, #46	; 0x2e
 8010792:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 8010794:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8010798:	330b      	adds	r3, #11
 801079a:	2210      	movs	r2, #16
 801079c:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 801079e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80107a2:	3316      	adds	r3, #22
 80107a4:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80107a8:	4618      	mov	r0, r3
 80107aa:	f7fc ffbf 	bl	800d72c <st_dword>
					st_clust(fs, dir, dcl);
 80107ae:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80107b2:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80107b6:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80107ba:	4618      	mov	r0, r3
 80107bc:	f7fd ffe9 	bl	800e792 <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 80107c0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80107c4:	3320      	adds	r3, #32
 80107c6:	2220      	movs	r2, #32
 80107c8:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80107cc:	4618      	mov	r0, r3
 80107ce:	f7fc ffd9 	bl	800d784 <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 80107d2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80107d6:	3321      	adds	r3, #33	; 0x21
 80107d8:	222e      	movs	r2, #46	; 0x2e
 80107da:	701a      	strb	r2, [r3, #0]
 80107dc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80107e0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 80107e4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80107e8:	781b      	ldrb	r3, [r3, #0]
 80107ea:	2b03      	cmp	r3, #3
 80107ec:	d109      	bne.n	8010802 <f_mkdir+0x19c>
 80107ee:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80107f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80107f4:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 80107f8:	429a      	cmp	r2, r3
 80107fa:	d102      	bne.n	8010802 <f_mkdir+0x19c>
 80107fc:	2300      	movs	r3, #0
 80107fe:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
					st_clust(fs, dir + SZDIRE, pcl);
 8010802:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 8010806:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801080a:	3320      	adds	r3, #32
 801080c:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8010810:	4619      	mov	r1, r3
 8010812:	f7fd ffbe 	bl	800e792 <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010816:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801081a:	895b      	ldrh	r3, [r3, #10]
 801081c:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 8010820:	e025      	b.n	801086e <f_mkdir+0x208>
					fs->winsect = dsc++;
 8010822:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8010826:	1c5a      	adds	r2, r3, #1
 8010828:	f8c7 2254 	str.w	r2, [r7, #596]	; 0x254
 801082c:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8010830:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 8010832:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8010836:	2201      	movs	r2, #1
 8010838:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 801083a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801083e:	4618      	mov	r0, r3
 8010840:	f7fd f9bc 	bl	800dbbc <sync_window>
 8010844:	4603      	mov	r3, r0
 8010846:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
					if (res != FR_OK) break;
 801084a:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 801084e:	2b00      	cmp	r3, #0
 8010850:	d112      	bne.n	8010878 <f_mkdir+0x212>
					mem_set(dir, 0, SS(fs));
 8010852:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8010856:	899b      	ldrh	r3, [r3, #12]
 8010858:	461a      	mov	r2, r3
 801085a:	2100      	movs	r1, #0
 801085c:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8010860:	f7fc ffb1 	bl	800d7c6 <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 8010864:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8010868:	3b01      	subs	r3, #1
 801086a:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 801086e:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8010872:	2b00      	cmp	r3, #0
 8010874:	d1d5      	bne.n	8010822 <f_mkdir+0x1bc>
 8010876:	e000      	b.n	801087a <f_mkdir+0x214>
					if (res != FR_OK) break;
 8010878:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 801087a:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 801087e:	2b00      	cmp	r3, #0
 8010880:	d107      	bne.n	8010892 <f_mkdir+0x22c>
				res = dir_register(&dj);	/* Register the object to the directoy */
 8010882:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8010886:	4618      	mov	r0, r3
 8010888:	f7fe f9ee 	bl	800ec68 <dir_register>
 801088c:	4603      	mov	r3, r0
 801088e:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			}
			if (res == FR_OK) {
 8010892:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8010896:	2b00      	cmp	r3, #0
 8010898:	d12a      	bne.n	80108f0 <f_mkdir+0x28a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 801089a:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801089e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 80108a2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80108a6:	3316      	adds	r3, #22
 80108a8:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 80108ac:	4618      	mov	r0, r3
 80108ae:	f7fc ff3d 	bl	800d72c <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 80108b2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80108b6:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80108ba:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80108be:	4618      	mov	r0, r3
 80108c0:	f7fd ff67 	bl	800e792 <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 80108c4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80108c8:	330b      	adds	r3, #11
 80108ca:	2210      	movs	r2, #16
 80108cc:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 80108ce:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80108d2:	2201      	movs	r2, #1
 80108d4:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 80108d6:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d110      	bne.n	8010900 <f_mkdir+0x29a>
					res = sync_fs(fs);
 80108de:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80108e2:	4618      	mov	r0, r3
 80108e4:	f7fd f9dc 	bl	800dca0 <sync_fs>
 80108e8:	4603      	mov	r3, r0
 80108ea:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 80108ee:	e007      	b.n	8010900 <f_mkdir+0x29a>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 80108f0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80108f4:	2200      	movs	r2, #0
 80108f6:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 80108fa:	4618      	mov	r0, r3
 80108fc:	f7fd fc4f 	bl	800e19e <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8010900:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8010904:	f897 225f 	ldrb.w	r2, [r7, #607]	; 0x25f
 8010908:	4611      	mov	r1, r2
 801090a:	4618      	mov	r0, r3
 801090c:	f7fc ffce 	bl	800d8ac <unlock_fs>
 8010910:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
}
 8010914:	4618      	mov	r0, r3
 8010916:	f507 7718 	add.w	r7, r7, #608	; 0x260
 801091a:	46bd      	mov	sp, r7
 801091c:	bd80      	pop	{r7, pc}
	...

08010920 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010920:	b480      	push	{r7}
 8010922:	b087      	sub	sp, #28
 8010924:	af00      	add	r7, sp, #0
 8010926:	60f8      	str	r0, [r7, #12]
 8010928:	60b9      	str	r1, [r7, #8]
 801092a:	4613      	mov	r3, r2
 801092c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801092e:	2301      	movs	r3, #1
 8010930:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010932:	2300      	movs	r3, #0
 8010934:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010936:	4b1f      	ldr	r3, [pc, #124]	; (80109b4 <FATFS_LinkDriverEx+0x94>)
 8010938:	7a5b      	ldrb	r3, [r3, #9]
 801093a:	b2db      	uxtb	r3, r3
 801093c:	2b00      	cmp	r3, #0
 801093e:	d131      	bne.n	80109a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010940:	4b1c      	ldr	r3, [pc, #112]	; (80109b4 <FATFS_LinkDriverEx+0x94>)
 8010942:	7a5b      	ldrb	r3, [r3, #9]
 8010944:	b2db      	uxtb	r3, r3
 8010946:	461a      	mov	r2, r3
 8010948:	4b1a      	ldr	r3, [pc, #104]	; (80109b4 <FATFS_LinkDriverEx+0x94>)
 801094a:	2100      	movs	r1, #0
 801094c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801094e:	4b19      	ldr	r3, [pc, #100]	; (80109b4 <FATFS_LinkDriverEx+0x94>)
 8010950:	7a5b      	ldrb	r3, [r3, #9]
 8010952:	b2db      	uxtb	r3, r3
 8010954:	4a17      	ldr	r2, [pc, #92]	; (80109b4 <FATFS_LinkDriverEx+0x94>)
 8010956:	009b      	lsls	r3, r3, #2
 8010958:	4413      	add	r3, r2
 801095a:	68fa      	ldr	r2, [r7, #12]
 801095c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801095e:	4b15      	ldr	r3, [pc, #84]	; (80109b4 <FATFS_LinkDriverEx+0x94>)
 8010960:	7a5b      	ldrb	r3, [r3, #9]
 8010962:	b2db      	uxtb	r3, r3
 8010964:	461a      	mov	r2, r3
 8010966:	4b13      	ldr	r3, [pc, #76]	; (80109b4 <FATFS_LinkDriverEx+0x94>)
 8010968:	4413      	add	r3, r2
 801096a:	79fa      	ldrb	r2, [r7, #7]
 801096c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801096e:	4b11      	ldr	r3, [pc, #68]	; (80109b4 <FATFS_LinkDriverEx+0x94>)
 8010970:	7a5b      	ldrb	r3, [r3, #9]
 8010972:	b2db      	uxtb	r3, r3
 8010974:	1c5a      	adds	r2, r3, #1
 8010976:	b2d1      	uxtb	r1, r2
 8010978:	4a0e      	ldr	r2, [pc, #56]	; (80109b4 <FATFS_LinkDriverEx+0x94>)
 801097a:	7251      	strb	r1, [r2, #9]
 801097c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801097e:	7dbb      	ldrb	r3, [r7, #22]
 8010980:	3330      	adds	r3, #48	; 0x30
 8010982:	b2da      	uxtb	r2, r3
 8010984:	68bb      	ldr	r3, [r7, #8]
 8010986:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	3301      	adds	r3, #1
 801098c:	223a      	movs	r2, #58	; 0x3a
 801098e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010990:	68bb      	ldr	r3, [r7, #8]
 8010992:	3302      	adds	r3, #2
 8010994:	222f      	movs	r2, #47	; 0x2f
 8010996:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	3303      	adds	r3, #3
 801099c:	2200      	movs	r2, #0
 801099e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80109a0:	2300      	movs	r3, #0
 80109a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80109a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80109a6:	4618      	mov	r0, r3
 80109a8:	371c      	adds	r7, #28
 80109aa:	46bd      	mov	sp, r7
 80109ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109b0:	4770      	bx	lr
 80109b2:	bf00      	nop
 80109b4:	200007b4 	.word	0x200007b4

080109b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80109b8:	b580      	push	{r7, lr}
 80109ba:	b082      	sub	sp, #8
 80109bc:	af00      	add	r7, sp, #0
 80109be:	6078      	str	r0, [r7, #4]
 80109c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80109c2:	2200      	movs	r2, #0
 80109c4:	6839      	ldr	r1, [r7, #0]
 80109c6:	6878      	ldr	r0, [r7, #4]
 80109c8:	f7ff ffaa 	bl	8010920 <FATFS_LinkDriverEx>
 80109cc:	4603      	mov	r3, r0
}
 80109ce:	4618      	mov	r0, r3
 80109d0:	3708      	adds	r7, #8
 80109d2:	46bd      	mov	sp, r7
 80109d4:	bd80      	pop	{r7, pc}
	...

080109d8 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80109d8:	b480      	push	{r7}
 80109da:	b085      	sub	sp, #20
 80109dc:	af00      	add	r7, sp, #0
 80109de:	4603      	mov	r3, r0
 80109e0:	6039      	str	r1, [r7, #0]
 80109e2:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80109e4:	88fb      	ldrh	r3, [r7, #6]
 80109e6:	2b7f      	cmp	r3, #127	; 0x7f
 80109e8:	d802      	bhi.n	80109f0 <ff_convert+0x18>
		c = chr;
 80109ea:	88fb      	ldrh	r3, [r7, #6]
 80109ec:	81fb      	strh	r3, [r7, #14]
 80109ee:	e025      	b.n	8010a3c <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80109f0:	683b      	ldr	r3, [r7, #0]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d00b      	beq.n	8010a0e <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80109f6:	88fb      	ldrh	r3, [r7, #6]
 80109f8:	2bff      	cmp	r3, #255	; 0xff
 80109fa:	d805      	bhi.n	8010a08 <ff_convert+0x30>
 80109fc:	88fb      	ldrh	r3, [r7, #6]
 80109fe:	3b80      	subs	r3, #128	; 0x80
 8010a00:	4a12      	ldr	r2, [pc, #72]	; (8010a4c <ff_convert+0x74>)
 8010a02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a06:	e000      	b.n	8010a0a <ff_convert+0x32>
 8010a08:	2300      	movs	r3, #0
 8010a0a:	81fb      	strh	r3, [r7, #14]
 8010a0c:	e016      	b.n	8010a3c <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010a0e:	2300      	movs	r3, #0
 8010a10:	81fb      	strh	r3, [r7, #14]
 8010a12:	e009      	b.n	8010a28 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010a14:	89fb      	ldrh	r3, [r7, #14]
 8010a16:	4a0d      	ldr	r2, [pc, #52]	; (8010a4c <ff_convert+0x74>)
 8010a18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010a1c:	88fa      	ldrh	r2, [r7, #6]
 8010a1e:	429a      	cmp	r2, r3
 8010a20:	d006      	beq.n	8010a30 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010a22:	89fb      	ldrh	r3, [r7, #14]
 8010a24:	3301      	adds	r3, #1
 8010a26:	81fb      	strh	r3, [r7, #14]
 8010a28:	89fb      	ldrh	r3, [r7, #14]
 8010a2a:	2b7f      	cmp	r3, #127	; 0x7f
 8010a2c:	d9f2      	bls.n	8010a14 <ff_convert+0x3c>
 8010a2e:	e000      	b.n	8010a32 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010a30:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010a32:	89fb      	ldrh	r3, [r7, #14]
 8010a34:	3380      	adds	r3, #128	; 0x80
 8010a36:	b29b      	uxth	r3, r3
 8010a38:	b2db      	uxtb	r3, r3
 8010a3a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010a3c:	89fb      	ldrh	r3, [r7, #14]
}
 8010a3e:	4618      	mov	r0, r3
 8010a40:	3714      	adds	r7, #20
 8010a42:	46bd      	mov	sp, r7
 8010a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a48:	4770      	bx	lr
 8010a4a:	bf00      	nop
 8010a4c:	08018dac 	.word	0x08018dac

08010a50 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010a50:	b480      	push	{r7}
 8010a52:	b087      	sub	sp, #28
 8010a54:	af00      	add	r7, sp, #0
 8010a56:	4603      	mov	r3, r0
 8010a58:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010a5a:	88fb      	ldrh	r3, [r7, #6]
 8010a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010a60:	d201      	bcs.n	8010a66 <ff_wtoupper+0x16>
 8010a62:	4b3e      	ldr	r3, [pc, #248]	; (8010b5c <ff_wtoupper+0x10c>)
 8010a64:	e000      	b.n	8010a68 <ff_wtoupper+0x18>
 8010a66:	4b3e      	ldr	r3, [pc, #248]	; (8010b60 <ff_wtoupper+0x110>)
 8010a68:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010a6a:	697b      	ldr	r3, [r7, #20]
 8010a6c:	1c9a      	adds	r2, r3, #2
 8010a6e:	617a      	str	r2, [r7, #20]
 8010a70:	881b      	ldrh	r3, [r3, #0]
 8010a72:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010a74:	8a7b      	ldrh	r3, [r7, #18]
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d068      	beq.n	8010b4c <ff_wtoupper+0xfc>
 8010a7a:	88fa      	ldrh	r2, [r7, #6]
 8010a7c:	8a7b      	ldrh	r3, [r7, #18]
 8010a7e:	429a      	cmp	r2, r3
 8010a80:	d364      	bcc.n	8010b4c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8010a82:	697b      	ldr	r3, [r7, #20]
 8010a84:	1c9a      	adds	r2, r3, #2
 8010a86:	617a      	str	r2, [r7, #20]
 8010a88:	881b      	ldrh	r3, [r3, #0]
 8010a8a:	823b      	strh	r3, [r7, #16]
 8010a8c:	8a3b      	ldrh	r3, [r7, #16]
 8010a8e:	0a1b      	lsrs	r3, r3, #8
 8010a90:	81fb      	strh	r3, [r7, #14]
 8010a92:	8a3b      	ldrh	r3, [r7, #16]
 8010a94:	b2db      	uxtb	r3, r3
 8010a96:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8010a98:	88fa      	ldrh	r2, [r7, #6]
 8010a9a:	8a79      	ldrh	r1, [r7, #18]
 8010a9c:	8a3b      	ldrh	r3, [r7, #16]
 8010a9e:	440b      	add	r3, r1
 8010aa0:	429a      	cmp	r2, r3
 8010aa2:	da49      	bge.n	8010b38 <ff_wtoupper+0xe8>
			switch (cmd) {
 8010aa4:	89fb      	ldrh	r3, [r7, #14]
 8010aa6:	2b08      	cmp	r3, #8
 8010aa8:	d84f      	bhi.n	8010b4a <ff_wtoupper+0xfa>
 8010aaa:	a201      	add	r2, pc, #4	; (adr r2, 8010ab0 <ff_wtoupper+0x60>)
 8010aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ab0:	08010ad5 	.word	0x08010ad5
 8010ab4:	08010ae7 	.word	0x08010ae7
 8010ab8:	08010afd 	.word	0x08010afd
 8010abc:	08010b05 	.word	0x08010b05
 8010ac0:	08010b0d 	.word	0x08010b0d
 8010ac4:	08010b15 	.word	0x08010b15
 8010ac8:	08010b1d 	.word	0x08010b1d
 8010acc:	08010b25 	.word	0x08010b25
 8010ad0:	08010b2d 	.word	0x08010b2d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8010ad4:	88fa      	ldrh	r2, [r7, #6]
 8010ad6:	8a7b      	ldrh	r3, [r7, #18]
 8010ad8:	1ad3      	subs	r3, r2, r3
 8010ada:	005b      	lsls	r3, r3, #1
 8010adc:	697a      	ldr	r2, [r7, #20]
 8010ade:	4413      	add	r3, r2
 8010ae0:	881b      	ldrh	r3, [r3, #0]
 8010ae2:	80fb      	strh	r3, [r7, #6]
 8010ae4:	e027      	b.n	8010b36 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8010ae6:	88fa      	ldrh	r2, [r7, #6]
 8010ae8:	8a7b      	ldrh	r3, [r7, #18]
 8010aea:	1ad3      	subs	r3, r2, r3
 8010aec:	b29b      	uxth	r3, r3
 8010aee:	f003 0301 	and.w	r3, r3, #1
 8010af2:	b29b      	uxth	r3, r3
 8010af4:	88fa      	ldrh	r2, [r7, #6]
 8010af6:	1ad3      	subs	r3, r2, r3
 8010af8:	80fb      	strh	r3, [r7, #6]
 8010afa:	e01c      	b.n	8010b36 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8010afc:	88fb      	ldrh	r3, [r7, #6]
 8010afe:	3b10      	subs	r3, #16
 8010b00:	80fb      	strh	r3, [r7, #6]
 8010b02:	e018      	b.n	8010b36 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8010b04:	88fb      	ldrh	r3, [r7, #6]
 8010b06:	3b20      	subs	r3, #32
 8010b08:	80fb      	strh	r3, [r7, #6]
 8010b0a:	e014      	b.n	8010b36 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8010b0c:	88fb      	ldrh	r3, [r7, #6]
 8010b0e:	3b30      	subs	r3, #48	; 0x30
 8010b10:	80fb      	strh	r3, [r7, #6]
 8010b12:	e010      	b.n	8010b36 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8010b14:	88fb      	ldrh	r3, [r7, #6]
 8010b16:	3b1a      	subs	r3, #26
 8010b18:	80fb      	strh	r3, [r7, #6]
 8010b1a:	e00c      	b.n	8010b36 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8010b1c:	88fb      	ldrh	r3, [r7, #6]
 8010b1e:	3308      	adds	r3, #8
 8010b20:	80fb      	strh	r3, [r7, #6]
 8010b22:	e008      	b.n	8010b36 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8010b24:	88fb      	ldrh	r3, [r7, #6]
 8010b26:	3b50      	subs	r3, #80	; 0x50
 8010b28:	80fb      	strh	r3, [r7, #6]
 8010b2a:	e004      	b.n	8010b36 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8010b2c:	88fb      	ldrh	r3, [r7, #6]
 8010b2e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8010b32:	80fb      	strh	r3, [r7, #6]
 8010b34:	bf00      	nop
			}
			break;
 8010b36:	e008      	b.n	8010b4a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8010b38:	89fb      	ldrh	r3, [r7, #14]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d195      	bne.n	8010a6a <ff_wtoupper+0x1a>
 8010b3e:	8a3b      	ldrh	r3, [r7, #16]
 8010b40:	005b      	lsls	r3, r3, #1
 8010b42:	697a      	ldr	r2, [r7, #20]
 8010b44:	4413      	add	r3, r2
 8010b46:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8010b48:	e78f      	b.n	8010a6a <ff_wtoupper+0x1a>
			break;
 8010b4a:	bf00      	nop
	}

	return chr;
 8010b4c:	88fb      	ldrh	r3, [r7, #6]
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	371c      	adds	r7, #28
 8010b52:	46bd      	mov	sp, r7
 8010b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b58:	4770      	bx	lr
 8010b5a:	bf00      	nop
 8010b5c:	08018eac 	.word	0x08018eac
 8010b60:	080190a0 	.word	0x080190a0

08010b64 <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b084      	sub	sp, #16
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	4603      	mov	r3, r0
 8010b6c:	6039      	str	r1, [r7, #0]
 8010b6e:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8010b70:	2200      	movs	r2, #0
 8010b72:	2101      	movs	r1, #1
 8010b74:	2001      	movs	r0, #1
 8010b76:	f000 f978 	bl	8010e6a <osSemaphoreNew>
 8010b7a:	4602      	mov	r2, r0
 8010b7c:	683b      	ldr	r3, [r7, #0]
 8010b7e:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8010b80:	683b      	ldr	r3, [r7, #0]
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	2b00      	cmp	r3, #0
 8010b86:	bf14      	ite	ne
 8010b88:	2301      	movne	r3, #1
 8010b8a:	2300      	moveq	r3, #0
 8010b8c:	b2db      	uxtb	r3, r3
 8010b8e:	60fb      	str	r3, [r7, #12]

    return ret;
 8010b90:	68fb      	ldr	r3, [r7, #12]
}
 8010b92:	4618      	mov	r0, r3
 8010b94:	3710      	adds	r7, #16
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bd80      	pop	{r7, pc}

08010b9a <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8010b9a:	b580      	push	{r7, lr}
 8010b9c:	b082      	sub	sp, #8
 8010b9e:	af00      	add	r7, sp, #0
 8010ba0:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8010ba2:	6878      	ldr	r0, [r7, #4]
 8010ba4:	f000 fa80 	bl	80110a8 <osSemaphoreDelete>
#endif
    return 1;
 8010ba8:	2301      	movs	r3, #1
}
 8010baa:	4618      	mov	r0, r3
 8010bac:	3708      	adds	r7, #8
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}

08010bb2 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8010bb2:	b580      	push	{r7, lr}
 8010bb4:	b084      	sub	sp, #16
 8010bb6:	af00      	add	r7, sp, #0
 8010bb8:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8010bba:	2300      	movs	r3, #0
 8010bbc:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8010bbe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010bc2:	6878      	ldr	r0, [r7, #4]
 8010bc4:	f000 f9da 	bl	8010f7c <osSemaphoreAcquire>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d101      	bne.n	8010bd2 <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8010bce:	2301      	movs	r3, #1
 8010bd0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8010bd2:	68fb      	ldr	r3, [r7, #12]
}
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	3710      	adds	r7, #16
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}

08010bdc <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b082      	sub	sp, #8
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8010be4:	6878      	ldr	r0, [r7, #4]
 8010be6:	f000 fa1b 	bl	8011020 <osSemaphoreRelease>
#endif
}
 8010bea:	bf00      	nop
 8010bec:	3708      	adds	r7, #8
 8010bee:	46bd      	mov	sp, r7
 8010bf0:	bd80      	pop	{r7, pc}
	...

08010bf4 <__NVIC_SetPriority>:
{
 8010bf4:	b480      	push	{r7}
 8010bf6:	b083      	sub	sp, #12
 8010bf8:	af00      	add	r7, sp, #0
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	6039      	str	r1, [r7, #0]
 8010bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8010c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	db0a      	blt.n	8010c1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010c08:	683b      	ldr	r3, [r7, #0]
 8010c0a:	b2da      	uxtb	r2, r3
 8010c0c:	490c      	ldr	r1, [pc, #48]	; (8010c40 <__NVIC_SetPriority+0x4c>)
 8010c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010c12:	0112      	lsls	r2, r2, #4
 8010c14:	b2d2      	uxtb	r2, r2
 8010c16:	440b      	add	r3, r1
 8010c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8010c1c:	e00a      	b.n	8010c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8010c1e:	683b      	ldr	r3, [r7, #0]
 8010c20:	b2da      	uxtb	r2, r3
 8010c22:	4908      	ldr	r1, [pc, #32]	; (8010c44 <__NVIC_SetPriority+0x50>)
 8010c24:	79fb      	ldrb	r3, [r7, #7]
 8010c26:	f003 030f 	and.w	r3, r3, #15
 8010c2a:	3b04      	subs	r3, #4
 8010c2c:	0112      	lsls	r2, r2, #4
 8010c2e:	b2d2      	uxtb	r2, r2
 8010c30:	440b      	add	r3, r1
 8010c32:	761a      	strb	r2, [r3, #24]
}
 8010c34:	bf00      	nop
 8010c36:	370c      	adds	r7, #12
 8010c38:	46bd      	mov	sp, r7
 8010c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c3e:	4770      	bx	lr
 8010c40:	e000e100 	.word	0xe000e100
 8010c44:	e000ed00 	.word	0xe000ed00

08010c48 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8010c4c:	4b05      	ldr	r3, [pc, #20]	; (8010c64 <SysTick_Handler+0x1c>)
 8010c4e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8010c50:	f002 fcae 	bl	80135b0 <xTaskGetSchedulerState>
 8010c54:	4603      	mov	r3, r0
 8010c56:	2b01      	cmp	r3, #1
 8010c58:	d001      	beq.n	8010c5e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8010c5a:	f003 fcd5 	bl	8014608 <xPortSysTickHandler>
  }
}
 8010c5e:	bf00      	nop
 8010c60:	bd80      	pop	{r7, pc}
 8010c62:	bf00      	nop
 8010c64:	e000e010 	.word	0xe000e010

08010c68 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8010c68:	b580      	push	{r7, lr}
 8010c6a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8010c6c:	2100      	movs	r1, #0
 8010c6e:	f06f 0004 	mvn.w	r0, #4
 8010c72:	f7ff ffbf 	bl	8010bf4 <__NVIC_SetPriority>
#endif
}
 8010c76:	bf00      	nop
 8010c78:	bd80      	pop	{r7, pc}
	...

08010c7c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8010c7c:	b480      	push	{r7}
 8010c7e:	b083      	sub	sp, #12
 8010c80:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010c82:	f3ef 8305 	mrs	r3, IPSR
 8010c86:	603b      	str	r3, [r7, #0]
  return(result);
 8010c88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d003      	beq.n	8010c96 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8010c8e:	f06f 0305 	mvn.w	r3, #5
 8010c92:	607b      	str	r3, [r7, #4]
 8010c94:	e00c      	b.n	8010cb0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8010c96:	4b0a      	ldr	r3, [pc, #40]	; (8010cc0 <osKernelInitialize+0x44>)
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d105      	bne.n	8010caa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8010c9e:	4b08      	ldr	r3, [pc, #32]	; (8010cc0 <osKernelInitialize+0x44>)
 8010ca0:	2201      	movs	r2, #1
 8010ca2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	607b      	str	r3, [r7, #4]
 8010ca8:	e002      	b.n	8010cb0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8010caa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010cae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010cb0:	687b      	ldr	r3, [r7, #4]
}
 8010cb2:	4618      	mov	r0, r3
 8010cb4:	370c      	adds	r7, #12
 8010cb6:	46bd      	mov	sp, r7
 8010cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cbc:	4770      	bx	lr
 8010cbe:	bf00      	nop
 8010cc0:	200007c0 	.word	0x200007c0

08010cc4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b082      	sub	sp, #8
 8010cc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010cca:	f3ef 8305 	mrs	r3, IPSR
 8010cce:	603b      	str	r3, [r7, #0]
  return(result);
 8010cd0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d003      	beq.n	8010cde <osKernelStart+0x1a>
    stat = osErrorISR;
 8010cd6:	f06f 0305 	mvn.w	r3, #5
 8010cda:	607b      	str	r3, [r7, #4]
 8010cdc:	e010      	b.n	8010d00 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8010cde:	4b0b      	ldr	r3, [pc, #44]	; (8010d0c <osKernelStart+0x48>)
 8010ce0:	681b      	ldr	r3, [r3, #0]
 8010ce2:	2b01      	cmp	r3, #1
 8010ce4:	d109      	bne.n	8010cfa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8010ce6:	f7ff ffbf 	bl	8010c68 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8010cea:	4b08      	ldr	r3, [pc, #32]	; (8010d0c <osKernelStart+0x48>)
 8010cec:	2202      	movs	r2, #2
 8010cee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8010cf0:	f001 fe7c 	bl	80129ec <vTaskStartScheduler>
      stat = osOK;
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	607b      	str	r3, [r7, #4]
 8010cf8:	e002      	b.n	8010d00 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8010cfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010cfe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8010d00:	687b      	ldr	r3, [r7, #4]
}
 8010d02:	4618      	mov	r0, r3
 8010d04:	3708      	adds	r7, #8
 8010d06:	46bd      	mov	sp, r7
 8010d08:	bd80      	pop	{r7, pc}
 8010d0a:	bf00      	nop
 8010d0c:	200007c0 	.word	0x200007c0

08010d10 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8010d10:	b580      	push	{r7, lr}
 8010d12:	b08e      	sub	sp, #56	; 0x38
 8010d14:	af04      	add	r7, sp, #16
 8010d16:	60f8      	str	r0, [r7, #12]
 8010d18:	60b9      	str	r1, [r7, #8]
 8010d1a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010d20:	f3ef 8305 	mrs	r3, IPSR
 8010d24:	617b      	str	r3, [r7, #20]
  return(result);
 8010d26:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8010d28:	2b00      	cmp	r3, #0
 8010d2a:	d17e      	bne.n	8010e2a <osThreadNew+0x11a>
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d07b      	beq.n	8010e2a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8010d32:	2380      	movs	r3, #128	; 0x80
 8010d34:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8010d36:	2318      	movs	r3, #24
 8010d38:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8010d3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010d42:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	2b00      	cmp	r3, #0
 8010d48:	d045      	beq.n	8010dd6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8010d4a:	687b      	ldr	r3, [r7, #4]
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	2b00      	cmp	r3, #0
 8010d50:	d002      	beq.n	8010d58 <osThreadNew+0x48>
        name = attr->name;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	699b      	ldr	r3, [r3, #24]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d002      	beq.n	8010d66 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	699b      	ldr	r3, [r3, #24]
 8010d64:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8010d66:	69fb      	ldr	r3, [r7, #28]
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d008      	beq.n	8010d7e <osThreadNew+0x6e>
 8010d6c:	69fb      	ldr	r3, [r7, #28]
 8010d6e:	2b38      	cmp	r3, #56	; 0x38
 8010d70:	d805      	bhi.n	8010d7e <osThreadNew+0x6e>
 8010d72:	687b      	ldr	r3, [r7, #4]
 8010d74:	685b      	ldr	r3, [r3, #4]
 8010d76:	f003 0301 	and.w	r3, r3, #1
 8010d7a:	2b00      	cmp	r3, #0
 8010d7c:	d001      	beq.n	8010d82 <osThreadNew+0x72>
        return (NULL);
 8010d7e:	2300      	movs	r3, #0
 8010d80:	e054      	b.n	8010e2c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	695b      	ldr	r3, [r3, #20]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d003      	beq.n	8010d92 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	695b      	ldr	r3, [r3, #20]
 8010d8e:	089b      	lsrs	r3, r3, #2
 8010d90:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	689b      	ldr	r3, [r3, #8]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d00e      	beq.n	8010db8 <osThreadNew+0xa8>
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	68db      	ldr	r3, [r3, #12]
 8010d9e:	2bbf      	cmp	r3, #191	; 0xbf
 8010da0:	d90a      	bls.n	8010db8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d006      	beq.n	8010db8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8010daa:	687b      	ldr	r3, [r7, #4]
 8010dac:	695b      	ldr	r3, [r3, #20]
 8010dae:	2b00      	cmp	r3, #0
 8010db0:	d002      	beq.n	8010db8 <osThreadNew+0xa8>
        mem = 1;
 8010db2:	2301      	movs	r3, #1
 8010db4:	61bb      	str	r3, [r7, #24]
 8010db6:	e010      	b.n	8010dda <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8010db8:	687b      	ldr	r3, [r7, #4]
 8010dba:	689b      	ldr	r3, [r3, #8]
 8010dbc:	2b00      	cmp	r3, #0
 8010dbe:	d10c      	bne.n	8010dda <osThreadNew+0xca>
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	68db      	ldr	r3, [r3, #12]
 8010dc4:	2b00      	cmp	r3, #0
 8010dc6:	d108      	bne.n	8010dda <osThreadNew+0xca>
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	691b      	ldr	r3, [r3, #16]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d104      	bne.n	8010dda <osThreadNew+0xca>
          mem = 0;
 8010dd0:	2300      	movs	r3, #0
 8010dd2:	61bb      	str	r3, [r7, #24]
 8010dd4:	e001      	b.n	8010dda <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8010dd6:	2300      	movs	r3, #0
 8010dd8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8010dda:	69bb      	ldr	r3, [r7, #24]
 8010ddc:	2b01      	cmp	r3, #1
 8010dde:	d110      	bne.n	8010e02 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010de0:	687b      	ldr	r3, [r7, #4]
 8010de2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8010de4:	687a      	ldr	r2, [r7, #4]
 8010de6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8010de8:	9202      	str	r2, [sp, #8]
 8010dea:	9301      	str	r3, [sp, #4]
 8010dec:	69fb      	ldr	r3, [r7, #28]
 8010dee:	9300      	str	r3, [sp, #0]
 8010df0:	68bb      	ldr	r3, [r7, #8]
 8010df2:	6a3a      	ldr	r2, [r7, #32]
 8010df4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010df6:	68f8      	ldr	r0, [r7, #12]
 8010df8:	f001 fba2 	bl	8012540 <xTaskCreateStatic>
 8010dfc:	4603      	mov	r3, r0
 8010dfe:	613b      	str	r3, [r7, #16]
 8010e00:	e013      	b.n	8010e2a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8010e02:	69bb      	ldr	r3, [r7, #24]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d110      	bne.n	8010e2a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8010e08:	6a3b      	ldr	r3, [r7, #32]
 8010e0a:	b29a      	uxth	r2, r3
 8010e0c:	f107 0310 	add.w	r3, r7, #16
 8010e10:	9301      	str	r3, [sp, #4]
 8010e12:	69fb      	ldr	r3, [r7, #28]
 8010e14:	9300      	str	r3, [sp, #0]
 8010e16:	68bb      	ldr	r3, [r7, #8]
 8010e18:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010e1a:	68f8      	ldr	r0, [r7, #12]
 8010e1c:	f001 fbed 	bl	80125fa <xTaskCreate>
 8010e20:	4603      	mov	r3, r0
 8010e22:	2b01      	cmp	r3, #1
 8010e24:	d001      	beq.n	8010e2a <osThreadNew+0x11a>
            hTask = NULL;
 8010e26:	2300      	movs	r3, #0
 8010e28:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8010e2a:	693b      	ldr	r3, [r7, #16]
}
 8010e2c:	4618      	mov	r0, r3
 8010e2e:	3728      	adds	r7, #40	; 0x28
 8010e30:	46bd      	mov	sp, r7
 8010e32:	bd80      	pop	{r7, pc}

08010e34 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b084      	sub	sp, #16
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e3c:	f3ef 8305 	mrs	r3, IPSR
 8010e40:	60bb      	str	r3, [r7, #8]
  return(result);
 8010e42:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d003      	beq.n	8010e50 <osDelay+0x1c>
    stat = osErrorISR;
 8010e48:	f06f 0305 	mvn.w	r3, #5
 8010e4c:	60fb      	str	r3, [r7, #12]
 8010e4e:	e007      	b.n	8010e60 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8010e50:	2300      	movs	r3, #0
 8010e52:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d002      	beq.n	8010e60 <osDelay+0x2c>
      vTaskDelay(ticks);
 8010e5a:	6878      	ldr	r0, [r7, #4]
 8010e5c:	f001 fd2c 	bl	80128b8 <vTaskDelay>
    }
  }

  return (stat);
 8010e60:	68fb      	ldr	r3, [r7, #12]
}
 8010e62:	4618      	mov	r0, r3
 8010e64:	3710      	adds	r7, #16
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}

08010e6a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8010e6a:	b580      	push	{r7, lr}
 8010e6c:	b08a      	sub	sp, #40	; 0x28
 8010e6e:	af02      	add	r7, sp, #8
 8010e70:	60f8      	str	r0, [r7, #12]
 8010e72:	60b9      	str	r1, [r7, #8]
 8010e74:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8010e76:	2300      	movs	r3, #0
 8010e78:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010e7a:	f3ef 8305 	mrs	r3, IPSR
 8010e7e:	613b      	str	r3, [r7, #16]
  return(result);
 8010e80:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	d175      	bne.n	8010f72 <osSemaphoreNew+0x108>
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d072      	beq.n	8010f72 <osSemaphoreNew+0x108>
 8010e8c:	68ba      	ldr	r2, [r7, #8]
 8010e8e:	68fb      	ldr	r3, [r7, #12]
 8010e90:	429a      	cmp	r2, r3
 8010e92:	d86e      	bhi.n	8010f72 <osSemaphoreNew+0x108>
    mem = -1;
 8010e94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010e98:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d015      	beq.n	8010ecc <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	689b      	ldr	r3, [r3, #8]
 8010ea4:	2b00      	cmp	r3, #0
 8010ea6:	d006      	beq.n	8010eb6 <osSemaphoreNew+0x4c>
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	68db      	ldr	r3, [r3, #12]
 8010eac:	2b4f      	cmp	r3, #79	; 0x4f
 8010eae:	d902      	bls.n	8010eb6 <osSemaphoreNew+0x4c>
        mem = 1;
 8010eb0:	2301      	movs	r3, #1
 8010eb2:	61bb      	str	r3, [r7, #24]
 8010eb4:	e00c      	b.n	8010ed0 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8010eb6:	687b      	ldr	r3, [r7, #4]
 8010eb8:	689b      	ldr	r3, [r3, #8]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d108      	bne.n	8010ed0 <osSemaphoreNew+0x66>
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	68db      	ldr	r3, [r3, #12]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d104      	bne.n	8010ed0 <osSemaphoreNew+0x66>
          mem = 0;
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	61bb      	str	r3, [r7, #24]
 8010eca:	e001      	b.n	8010ed0 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8010ecc:	2300      	movs	r3, #0
 8010ece:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8010ed0:	69bb      	ldr	r3, [r7, #24]
 8010ed2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010ed6:	d04c      	beq.n	8010f72 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8010ed8:	68fb      	ldr	r3, [r7, #12]
 8010eda:	2b01      	cmp	r3, #1
 8010edc:	d128      	bne.n	8010f30 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8010ede:	69bb      	ldr	r3, [r7, #24]
 8010ee0:	2b01      	cmp	r3, #1
 8010ee2:	d10a      	bne.n	8010efa <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	689b      	ldr	r3, [r3, #8]
 8010ee8:	2203      	movs	r2, #3
 8010eea:	9200      	str	r2, [sp, #0]
 8010eec:	2200      	movs	r2, #0
 8010eee:	2100      	movs	r1, #0
 8010ef0:	2001      	movs	r0, #1
 8010ef2:	f000 fb7f 	bl	80115f4 <xQueueGenericCreateStatic>
 8010ef6:	61f8      	str	r0, [r7, #28]
 8010ef8:	e005      	b.n	8010f06 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8010efa:	2203      	movs	r2, #3
 8010efc:	2100      	movs	r1, #0
 8010efe:	2001      	movs	r0, #1
 8010f00:	f000 fbf0 	bl	80116e4 <xQueueGenericCreate>
 8010f04:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8010f06:	69fb      	ldr	r3, [r7, #28]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d022      	beq.n	8010f52 <osSemaphoreNew+0xe8>
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d01f      	beq.n	8010f52 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8010f12:	2300      	movs	r3, #0
 8010f14:	2200      	movs	r2, #0
 8010f16:	2100      	movs	r1, #0
 8010f18:	69f8      	ldr	r0, [r7, #28]
 8010f1a:	f000 fcab 	bl	8011874 <xQueueGenericSend>
 8010f1e:	4603      	mov	r3, r0
 8010f20:	2b01      	cmp	r3, #1
 8010f22:	d016      	beq.n	8010f52 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8010f24:	69f8      	ldr	r0, [r7, #28]
 8010f26:	f001 f937 	bl	8012198 <vQueueDelete>
            hSemaphore = NULL;
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	61fb      	str	r3, [r7, #28]
 8010f2e:	e010      	b.n	8010f52 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8010f30:	69bb      	ldr	r3, [r7, #24]
 8010f32:	2b01      	cmp	r3, #1
 8010f34:	d108      	bne.n	8010f48 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	689b      	ldr	r3, [r3, #8]
 8010f3a:	461a      	mov	r2, r3
 8010f3c:	68b9      	ldr	r1, [r7, #8]
 8010f3e:	68f8      	ldr	r0, [r7, #12]
 8010f40:	f000 fc2d 	bl	801179e <xQueueCreateCountingSemaphoreStatic>
 8010f44:	61f8      	str	r0, [r7, #28]
 8010f46:	e004      	b.n	8010f52 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8010f48:	68b9      	ldr	r1, [r7, #8]
 8010f4a:	68f8      	ldr	r0, [r7, #12]
 8010f4c:	f000 fc5e 	bl	801180c <xQueueCreateCountingSemaphore>
 8010f50:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8010f52:	69fb      	ldr	r3, [r7, #28]
 8010f54:	2b00      	cmp	r3, #0
 8010f56:	d00c      	beq.n	8010f72 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	2b00      	cmp	r3, #0
 8010f5c:	d003      	beq.n	8010f66 <osSemaphoreNew+0xfc>
          name = attr->name;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	681b      	ldr	r3, [r3, #0]
 8010f62:	617b      	str	r3, [r7, #20]
 8010f64:	e001      	b.n	8010f6a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8010f66:	2300      	movs	r3, #0
 8010f68:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8010f6a:	6979      	ldr	r1, [r7, #20]
 8010f6c:	69f8      	ldr	r0, [r7, #28]
 8010f6e:	f001 fa5f 	bl	8012430 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8010f72:	69fb      	ldr	r3, [r7, #28]
}
 8010f74:	4618      	mov	r0, r3
 8010f76:	3720      	adds	r7, #32
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	bd80      	pop	{r7, pc}

08010f7c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b086      	sub	sp, #24
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
 8010f84:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8010f8e:	693b      	ldr	r3, [r7, #16]
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	d103      	bne.n	8010f9c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8010f94:	f06f 0303 	mvn.w	r3, #3
 8010f98:	617b      	str	r3, [r7, #20]
 8010f9a:	e039      	b.n	8011010 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8010f9c:	f3ef 8305 	mrs	r3, IPSR
 8010fa0:	60fb      	str	r3, [r7, #12]
  return(result);
 8010fa2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8010fa4:	2b00      	cmp	r3, #0
 8010fa6:	d022      	beq.n	8010fee <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8010fa8:	683b      	ldr	r3, [r7, #0]
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d003      	beq.n	8010fb6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8010fae:	f06f 0303 	mvn.w	r3, #3
 8010fb2:	617b      	str	r3, [r7, #20]
 8010fb4:	e02c      	b.n	8011010 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8010fb6:	2300      	movs	r3, #0
 8010fb8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8010fba:	f107 0308 	add.w	r3, r7, #8
 8010fbe:	461a      	mov	r2, r3
 8010fc0:	2100      	movs	r1, #0
 8010fc2:	6938      	ldr	r0, [r7, #16]
 8010fc4:	f001 f868 	bl	8012098 <xQueueReceiveFromISR>
 8010fc8:	4603      	mov	r3, r0
 8010fca:	2b01      	cmp	r3, #1
 8010fcc:	d003      	beq.n	8010fd6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8010fce:	f06f 0302 	mvn.w	r3, #2
 8010fd2:	617b      	str	r3, [r7, #20]
 8010fd4:	e01c      	b.n	8011010 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8010fd6:	68bb      	ldr	r3, [r7, #8]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d019      	beq.n	8011010 <osSemaphoreAcquire+0x94>
 8010fdc:	4b0f      	ldr	r3, [pc, #60]	; (801101c <osSemaphoreAcquire+0xa0>)
 8010fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fe2:	601a      	str	r2, [r3, #0]
 8010fe4:	f3bf 8f4f 	dsb	sy
 8010fe8:	f3bf 8f6f 	isb	sy
 8010fec:	e010      	b.n	8011010 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8010fee:	6839      	ldr	r1, [r7, #0]
 8010ff0:	6938      	ldr	r0, [r7, #16]
 8010ff2:	f000 ff45 	bl	8011e80 <xQueueSemaphoreTake>
 8010ff6:	4603      	mov	r3, r0
 8010ff8:	2b01      	cmp	r3, #1
 8010ffa:	d009      	beq.n	8011010 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8010ffc:	683b      	ldr	r3, [r7, #0]
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d003      	beq.n	801100a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8011002:	f06f 0301 	mvn.w	r3, #1
 8011006:	617b      	str	r3, [r7, #20]
 8011008:	e002      	b.n	8011010 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 801100a:	f06f 0302 	mvn.w	r3, #2
 801100e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8011010:	697b      	ldr	r3, [r7, #20]
}
 8011012:	4618      	mov	r0, r3
 8011014:	3718      	adds	r7, #24
 8011016:	46bd      	mov	sp, r7
 8011018:	bd80      	pop	{r7, pc}
 801101a:	bf00      	nop
 801101c:	e000ed04 	.word	0xe000ed04

08011020 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8011020:	b580      	push	{r7, lr}
 8011022:	b086      	sub	sp, #24
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8011028:	687b      	ldr	r3, [r7, #4]
 801102a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 801102c:	2300      	movs	r3, #0
 801102e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8011030:	693b      	ldr	r3, [r7, #16]
 8011032:	2b00      	cmp	r3, #0
 8011034:	d103      	bne.n	801103e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8011036:	f06f 0303 	mvn.w	r3, #3
 801103a:	617b      	str	r3, [r7, #20]
 801103c:	e02c      	b.n	8011098 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801103e:	f3ef 8305 	mrs	r3, IPSR
 8011042:	60fb      	str	r3, [r7, #12]
  return(result);
 8011044:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8011046:	2b00      	cmp	r3, #0
 8011048:	d01a      	beq.n	8011080 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 801104a:	2300      	movs	r3, #0
 801104c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 801104e:	f107 0308 	add.w	r3, r7, #8
 8011052:	4619      	mov	r1, r3
 8011054:	6938      	ldr	r0, [r7, #16]
 8011056:	f000 fda6 	bl	8011ba6 <xQueueGiveFromISR>
 801105a:	4603      	mov	r3, r0
 801105c:	2b01      	cmp	r3, #1
 801105e:	d003      	beq.n	8011068 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8011060:	f06f 0302 	mvn.w	r3, #2
 8011064:	617b      	str	r3, [r7, #20]
 8011066:	e017      	b.n	8011098 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8011068:	68bb      	ldr	r3, [r7, #8]
 801106a:	2b00      	cmp	r3, #0
 801106c:	d014      	beq.n	8011098 <osSemaphoreRelease+0x78>
 801106e:	4b0d      	ldr	r3, [pc, #52]	; (80110a4 <osSemaphoreRelease+0x84>)
 8011070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011074:	601a      	str	r2, [r3, #0]
 8011076:	f3bf 8f4f 	dsb	sy
 801107a:	f3bf 8f6f 	isb	sy
 801107e:	e00b      	b.n	8011098 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8011080:	2300      	movs	r3, #0
 8011082:	2200      	movs	r2, #0
 8011084:	2100      	movs	r1, #0
 8011086:	6938      	ldr	r0, [r7, #16]
 8011088:	f000 fbf4 	bl	8011874 <xQueueGenericSend>
 801108c:	4603      	mov	r3, r0
 801108e:	2b01      	cmp	r3, #1
 8011090:	d002      	beq.n	8011098 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8011092:	f06f 0302 	mvn.w	r3, #2
 8011096:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8011098:	697b      	ldr	r3, [r7, #20]
}
 801109a:	4618      	mov	r0, r3
 801109c:	3718      	adds	r7, #24
 801109e:	46bd      	mov	sp, r7
 80110a0:	bd80      	pop	{r7, pc}
 80110a2:	bf00      	nop
 80110a4:	e000ed04 	.word	0xe000ed04

080110a8 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b086      	sub	sp, #24
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80110b4:	f3ef 8305 	mrs	r3, IPSR
 80110b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80110ba:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d003      	beq.n	80110c8 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 80110c0:	f06f 0305 	mvn.w	r3, #5
 80110c4:	617b      	str	r3, [r7, #20]
 80110c6:	e00e      	b.n	80110e6 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 80110c8:	693b      	ldr	r3, [r7, #16]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d103      	bne.n	80110d6 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 80110ce:	f06f 0303 	mvn.w	r3, #3
 80110d2:	617b      	str	r3, [r7, #20]
 80110d4:	e007      	b.n	80110e6 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 80110d6:	6938      	ldr	r0, [r7, #16]
 80110d8:	f001 f9d4 	bl	8012484 <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 80110dc:	2300      	movs	r3, #0
 80110de:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 80110e0:	6938      	ldr	r0, [r7, #16]
 80110e2:	f001 f859 	bl	8012198 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 80110e6:	697b      	ldr	r3, [r7, #20]
}
 80110e8:	4618      	mov	r0, r3
 80110ea:	3718      	adds	r7, #24
 80110ec:	46bd      	mov	sp, r7
 80110ee:	bd80      	pop	{r7, pc}

080110f0 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80110f0:	b580      	push	{r7, lr}
 80110f2:	b08a      	sub	sp, #40	; 0x28
 80110f4:	af02      	add	r7, sp, #8
 80110f6:	60f8      	str	r0, [r7, #12]
 80110f8:	60b9      	str	r1, [r7, #8]
 80110fa:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80110fc:	2300      	movs	r3, #0
 80110fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011100:	f3ef 8305 	mrs	r3, IPSR
 8011104:	613b      	str	r3, [r7, #16]
  return(result);
 8011106:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8011108:	2b00      	cmp	r3, #0
 801110a:	d15f      	bne.n	80111cc <osMessageQueueNew+0xdc>
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d05c      	beq.n	80111cc <osMessageQueueNew+0xdc>
 8011112:	68bb      	ldr	r3, [r7, #8]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d059      	beq.n	80111cc <osMessageQueueNew+0xdc>
    mem = -1;
 8011118:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801111c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d029      	beq.n	8011178 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011124:	687b      	ldr	r3, [r7, #4]
 8011126:	689b      	ldr	r3, [r3, #8]
 8011128:	2b00      	cmp	r3, #0
 801112a:	d012      	beq.n	8011152 <osMessageQueueNew+0x62>
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	68db      	ldr	r3, [r3, #12]
 8011130:	2b4f      	cmp	r3, #79	; 0x4f
 8011132:	d90e      	bls.n	8011152 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8011138:	2b00      	cmp	r3, #0
 801113a:	d00a      	beq.n	8011152 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	695a      	ldr	r2, [r3, #20]
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	68b9      	ldr	r1, [r7, #8]
 8011144:	fb01 f303 	mul.w	r3, r1, r3
 8011148:	429a      	cmp	r2, r3
 801114a:	d302      	bcc.n	8011152 <osMessageQueueNew+0x62>
        mem = 1;
 801114c:	2301      	movs	r3, #1
 801114e:	61bb      	str	r3, [r7, #24]
 8011150:	e014      	b.n	801117c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	689b      	ldr	r3, [r3, #8]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d110      	bne.n	801117c <osMessageQueueNew+0x8c>
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	68db      	ldr	r3, [r3, #12]
 801115e:	2b00      	cmp	r3, #0
 8011160:	d10c      	bne.n	801117c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8011162:	687b      	ldr	r3, [r7, #4]
 8011164:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8011166:	2b00      	cmp	r3, #0
 8011168:	d108      	bne.n	801117c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	695b      	ldr	r3, [r3, #20]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d104      	bne.n	801117c <osMessageQueueNew+0x8c>
          mem = 0;
 8011172:	2300      	movs	r3, #0
 8011174:	61bb      	str	r3, [r7, #24]
 8011176:	e001      	b.n	801117c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8011178:	2300      	movs	r3, #0
 801117a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801117c:	69bb      	ldr	r3, [r7, #24]
 801117e:	2b01      	cmp	r3, #1
 8011180:	d10b      	bne.n	801119a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	691a      	ldr	r2, [r3, #16]
 8011186:	687b      	ldr	r3, [r7, #4]
 8011188:	689b      	ldr	r3, [r3, #8]
 801118a:	2100      	movs	r1, #0
 801118c:	9100      	str	r1, [sp, #0]
 801118e:	68b9      	ldr	r1, [r7, #8]
 8011190:	68f8      	ldr	r0, [r7, #12]
 8011192:	f000 fa2f 	bl	80115f4 <xQueueGenericCreateStatic>
 8011196:	61f8      	str	r0, [r7, #28]
 8011198:	e008      	b.n	80111ac <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 801119a:	69bb      	ldr	r3, [r7, #24]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d105      	bne.n	80111ac <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80111a0:	2200      	movs	r2, #0
 80111a2:	68b9      	ldr	r1, [r7, #8]
 80111a4:	68f8      	ldr	r0, [r7, #12]
 80111a6:	f000 fa9d 	bl	80116e4 <xQueueGenericCreate>
 80111aa:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80111ac:	69fb      	ldr	r3, [r7, #28]
 80111ae:	2b00      	cmp	r3, #0
 80111b0:	d00c      	beq.n	80111cc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80111b2:	687b      	ldr	r3, [r7, #4]
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d003      	beq.n	80111c0 <osMessageQueueNew+0xd0>
        name = attr->name;
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	681b      	ldr	r3, [r3, #0]
 80111bc:	617b      	str	r3, [r7, #20]
 80111be:	e001      	b.n	80111c4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80111c0:	2300      	movs	r3, #0
 80111c2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80111c4:	6979      	ldr	r1, [r7, #20]
 80111c6:	69f8      	ldr	r0, [r7, #28]
 80111c8:	f001 f932 	bl	8012430 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80111cc:	69fb      	ldr	r3, [r7, #28]
}
 80111ce:	4618      	mov	r0, r3
 80111d0:	3720      	adds	r7, #32
 80111d2:	46bd      	mov	sp, r7
 80111d4:	bd80      	pop	{r7, pc}
	...

080111d8 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80111d8:	b580      	push	{r7, lr}
 80111da:	b088      	sub	sp, #32
 80111dc:	af00      	add	r7, sp, #0
 80111de:	60f8      	str	r0, [r7, #12]
 80111e0:	60b9      	str	r1, [r7, #8]
 80111e2:	603b      	str	r3, [r7, #0]
 80111e4:	4613      	mov	r3, r2
 80111e6:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80111ec:	2300      	movs	r3, #0
 80111ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80111f0:	f3ef 8305 	mrs	r3, IPSR
 80111f4:	617b      	str	r3, [r7, #20]
  return(result);
 80111f6:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d028      	beq.n	801124e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80111fc:	69bb      	ldr	r3, [r7, #24]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d005      	beq.n	801120e <osMessageQueuePut+0x36>
 8011202:	68bb      	ldr	r3, [r7, #8]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d002      	beq.n	801120e <osMessageQueuePut+0x36>
 8011208:	683b      	ldr	r3, [r7, #0]
 801120a:	2b00      	cmp	r3, #0
 801120c:	d003      	beq.n	8011216 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 801120e:	f06f 0303 	mvn.w	r3, #3
 8011212:	61fb      	str	r3, [r7, #28]
 8011214:	e038      	b.n	8011288 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8011216:	2300      	movs	r3, #0
 8011218:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 801121a:	f107 0210 	add.w	r2, r7, #16
 801121e:	2300      	movs	r3, #0
 8011220:	68b9      	ldr	r1, [r7, #8]
 8011222:	69b8      	ldr	r0, [r7, #24]
 8011224:	f000 fc24 	bl	8011a70 <xQueueGenericSendFromISR>
 8011228:	4603      	mov	r3, r0
 801122a:	2b01      	cmp	r3, #1
 801122c:	d003      	beq.n	8011236 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 801122e:	f06f 0302 	mvn.w	r3, #2
 8011232:	61fb      	str	r3, [r7, #28]
 8011234:	e028      	b.n	8011288 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8011236:	693b      	ldr	r3, [r7, #16]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d025      	beq.n	8011288 <osMessageQueuePut+0xb0>
 801123c:	4b15      	ldr	r3, [pc, #84]	; (8011294 <osMessageQueuePut+0xbc>)
 801123e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011242:	601a      	str	r2, [r3, #0]
 8011244:	f3bf 8f4f 	dsb	sy
 8011248:	f3bf 8f6f 	isb	sy
 801124c:	e01c      	b.n	8011288 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801124e:	69bb      	ldr	r3, [r7, #24]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d002      	beq.n	801125a <osMessageQueuePut+0x82>
 8011254:	68bb      	ldr	r3, [r7, #8]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d103      	bne.n	8011262 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 801125a:	f06f 0303 	mvn.w	r3, #3
 801125e:	61fb      	str	r3, [r7, #28]
 8011260:	e012      	b.n	8011288 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011262:	2300      	movs	r3, #0
 8011264:	683a      	ldr	r2, [r7, #0]
 8011266:	68b9      	ldr	r1, [r7, #8]
 8011268:	69b8      	ldr	r0, [r7, #24]
 801126a:	f000 fb03 	bl	8011874 <xQueueGenericSend>
 801126e:	4603      	mov	r3, r0
 8011270:	2b01      	cmp	r3, #1
 8011272:	d009      	beq.n	8011288 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8011274:	683b      	ldr	r3, [r7, #0]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d003      	beq.n	8011282 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 801127a:	f06f 0301 	mvn.w	r3, #1
 801127e:	61fb      	str	r3, [r7, #28]
 8011280:	e002      	b.n	8011288 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8011282:	f06f 0302 	mvn.w	r3, #2
 8011286:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011288:	69fb      	ldr	r3, [r7, #28]
}
 801128a:	4618      	mov	r0, r3
 801128c:	3720      	adds	r7, #32
 801128e:	46bd      	mov	sp, r7
 8011290:	bd80      	pop	{r7, pc}
 8011292:	bf00      	nop
 8011294:	e000ed04 	.word	0xe000ed04

08011298 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8011298:	b580      	push	{r7, lr}
 801129a:	b088      	sub	sp, #32
 801129c:	af00      	add	r7, sp, #0
 801129e:	60f8      	str	r0, [r7, #12]
 80112a0:	60b9      	str	r1, [r7, #8]
 80112a2:	607a      	str	r2, [r7, #4]
 80112a4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80112aa:	2300      	movs	r3, #0
 80112ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80112ae:	f3ef 8305 	mrs	r3, IPSR
 80112b2:	617b      	str	r3, [r7, #20]
  return(result);
 80112b4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d028      	beq.n	801130c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80112ba:	69bb      	ldr	r3, [r7, #24]
 80112bc:	2b00      	cmp	r3, #0
 80112be:	d005      	beq.n	80112cc <osMessageQueueGet+0x34>
 80112c0:	68bb      	ldr	r3, [r7, #8]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d002      	beq.n	80112cc <osMessageQueueGet+0x34>
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d003      	beq.n	80112d4 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80112cc:	f06f 0303 	mvn.w	r3, #3
 80112d0:	61fb      	str	r3, [r7, #28]
 80112d2:	e037      	b.n	8011344 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80112d4:	2300      	movs	r3, #0
 80112d6:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80112d8:	f107 0310 	add.w	r3, r7, #16
 80112dc:	461a      	mov	r2, r3
 80112de:	68b9      	ldr	r1, [r7, #8]
 80112e0:	69b8      	ldr	r0, [r7, #24]
 80112e2:	f000 fed9 	bl	8012098 <xQueueReceiveFromISR>
 80112e6:	4603      	mov	r3, r0
 80112e8:	2b01      	cmp	r3, #1
 80112ea:	d003      	beq.n	80112f4 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80112ec:	f06f 0302 	mvn.w	r3, #2
 80112f0:	61fb      	str	r3, [r7, #28]
 80112f2:	e027      	b.n	8011344 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80112f4:	693b      	ldr	r3, [r7, #16]
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d024      	beq.n	8011344 <osMessageQueueGet+0xac>
 80112fa:	4b15      	ldr	r3, [pc, #84]	; (8011350 <osMessageQueueGet+0xb8>)
 80112fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011300:	601a      	str	r2, [r3, #0]
 8011302:	f3bf 8f4f 	dsb	sy
 8011306:	f3bf 8f6f 	isb	sy
 801130a:	e01b      	b.n	8011344 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 801130c:	69bb      	ldr	r3, [r7, #24]
 801130e:	2b00      	cmp	r3, #0
 8011310:	d002      	beq.n	8011318 <osMessageQueueGet+0x80>
 8011312:	68bb      	ldr	r3, [r7, #8]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d103      	bne.n	8011320 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8011318:	f06f 0303 	mvn.w	r3, #3
 801131c:	61fb      	str	r3, [r7, #28]
 801131e:	e011      	b.n	8011344 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8011320:	683a      	ldr	r2, [r7, #0]
 8011322:	68b9      	ldr	r1, [r7, #8]
 8011324:	69b8      	ldr	r0, [r7, #24]
 8011326:	f000 fccb 	bl	8011cc0 <xQueueReceive>
 801132a:	4603      	mov	r3, r0
 801132c:	2b01      	cmp	r3, #1
 801132e:	d009      	beq.n	8011344 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d003      	beq.n	801133e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8011336:	f06f 0301 	mvn.w	r3, #1
 801133a:	61fb      	str	r3, [r7, #28]
 801133c:	e002      	b.n	8011344 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 801133e:	f06f 0302 	mvn.w	r3, #2
 8011342:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8011344:	69fb      	ldr	r3, [r7, #28]
}
 8011346:	4618      	mov	r0, r3
 8011348:	3720      	adds	r7, #32
 801134a:	46bd      	mov	sp, r7
 801134c:	bd80      	pop	{r7, pc}
 801134e:	bf00      	nop
 8011350:	e000ed04 	.word	0xe000ed04

08011354 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8011354:	b480      	push	{r7}
 8011356:	b085      	sub	sp, #20
 8011358:	af00      	add	r7, sp, #0
 801135a:	60f8      	str	r0, [r7, #12]
 801135c:	60b9      	str	r1, [r7, #8]
 801135e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	4a07      	ldr	r2, [pc, #28]	; (8011380 <vApplicationGetIdleTaskMemory+0x2c>)
 8011364:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	4a06      	ldr	r2, [pc, #24]	; (8011384 <vApplicationGetIdleTaskMemory+0x30>)
 801136a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	2280      	movs	r2, #128	; 0x80
 8011370:	601a      	str	r2, [r3, #0]
}
 8011372:	bf00      	nop
 8011374:	3714      	adds	r7, #20
 8011376:	46bd      	mov	sp, r7
 8011378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137c:	4770      	bx	lr
 801137e:	bf00      	nop
 8011380:	200007c4 	.word	0x200007c4
 8011384:	20000884 	.word	0x20000884

08011388 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8011388:	b480      	push	{r7}
 801138a:	b085      	sub	sp, #20
 801138c:	af00      	add	r7, sp, #0
 801138e:	60f8      	str	r0, [r7, #12]
 8011390:	60b9      	str	r1, [r7, #8]
 8011392:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8011394:	68fb      	ldr	r3, [r7, #12]
 8011396:	4a07      	ldr	r2, [pc, #28]	; (80113b4 <vApplicationGetTimerTaskMemory+0x2c>)
 8011398:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	4a06      	ldr	r2, [pc, #24]	; (80113b8 <vApplicationGetTimerTaskMemory+0x30>)
 801139e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80113a6:	601a      	str	r2, [r3, #0]
}
 80113a8:	bf00      	nop
 80113aa:	3714      	adds	r7, #20
 80113ac:	46bd      	mov	sp, r7
 80113ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113b2:	4770      	bx	lr
 80113b4:	20000a84 	.word	0x20000a84
 80113b8:	20000b44 	.word	0x20000b44

080113bc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80113bc:	b480      	push	{r7}
 80113be:	b083      	sub	sp, #12
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	f103 0208 	add.w	r2, r3, #8
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80113d4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	f103 0208 	add.w	r2, r3, #8
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	f103 0208 	add.w	r2, r3, #8
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80113ea:	687b      	ldr	r3, [r7, #4]
 80113ec:	2200      	movs	r2, #0
 80113ee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80113f0:	bf00      	nop
 80113f2:	370c      	adds	r7, #12
 80113f4:	46bd      	mov	sp, r7
 80113f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113fa:	4770      	bx	lr

080113fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80113fc:	b480      	push	{r7}
 80113fe:	b083      	sub	sp, #12
 8011400:	af00      	add	r7, sp, #0
 8011402:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	2200      	movs	r2, #0
 8011408:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801140a:	bf00      	nop
 801140c:	370c      	adds	r7, #12
 801140e:	46bd      	mov	sp, r7
 8011410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011414:	4770      	bx	lr

08011416 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011416:	b480      	push	{r7}
 8011418:	b085      	sub	sp, #20
 801141a:	af00      	add	r7, sp, #0
 801141c:	6078      	str	r0, [r7, #4]
 801141e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	685b      	ldr	r3, [r3, #4]
 8011424:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011426:	683b      	ldr	r3, [r7, #0]
 8011428:	68fa      	ldr	r2, [r7, #12]
 801142a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801142c:	68fb      	ldr	r3, [r7, #12]
 801142e:	689a      	ldr	r2, [r3, #8]
 8011430:	683b      	ldr	r3, [r7, #0]
 8011432:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	689b      	ldr	r3, [r3, #8]
 8011438:	683a      	ldr	r2, [r7, #0]
 801143a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	683a      	ldr	r2, [r7, #0]
 8011440:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011442:	683b      	ldr	r3, [r7, #0]
 8011444:	687a      	ldr	r2, [r7, #4]
 8011446:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	681b      	ldr	r3, [r3, #0]
 801144c:	1c5a      	adds	r2, r3, #1
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	601a      	str	r2, [r3, #0]
}
 8011452:	bf00      	nop
 8011454:	3714      	adds	r7, #20
 8011456:	46bd      	mov	sp, r7
 8011458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801145c:	4770      	bx	lr

0801145e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801145e:	b480      	push	{r7}
 8011460:	b085      	sub	sp, #20
 8011462:	af00      	add	r7, sp, #0
 8011464:	6078      	str	r0, [r7, #4]
 8011466:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	681b      	ldr	r3, [r3, #0]
 801146c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801146e:	68bb      	ldr	r3, [r7, #8]
 8011470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011474:	d103      	bne.n	801147e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	691b      	ldr	r3, [r3, #16]
 801147a:	60fb      	str	r3, [r7, #12]
 801147c:	e00c      	b.n	8011498 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	3308      	adds	r3, #8
 8011482:	60fb      	str	r3, [r7, #12]
 8011484:	e002      	b.n	801148c <vListInsert+0x2e>
 8011486:	68fb      	ldr	r3, [r7, #12]
 8011488:	685b      	ldr	r3, [r3, #4]
 801148a:	60fb      	str	r3, [r7, #12]
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	685b      	ldr	r3, [r3, #4]
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	68ba      	ldr	r2, [r7, #8]
 8011494:	429a      	cmp	r2, r3
 8011496:	d2f6      	bcs.n	8011486 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	685a      	ldr	r2, [r3, #4]
 801149c:	683b      	ldr	r3, [r7, #0]
 801149e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80114a0:	683b      	ldr	r3, [r7, #0]
 80114a2:	685b      	ldr	r3, [r3, #4]
 80114a4:	683a      	ldr	r2, [r7, #0]
 80114a6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	68fa      	ldr	r2, [r7, #12]
 80114ac:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	683a      	ldr	r2, [r7, #0]
 80114b2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80114b4:	683b      	ldr	r3, [r7, #0]
 80114b6:	687a      	ldr	r2, [r7, #4]
 80114b8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	681b      	ldr	r3, [r3, #0]
 80114be:	1c5a      	adds	r2, r3, #1
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	601a      	str	r2, [r3, #0]
}
 80114c4:	bf00      	nop
 80114c6:	3714      	adds	r7, #20
 80114c8:	46bd      	mov	sp, r7
 80114ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ce:	4770      	bx	lr

080114d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80114d0:	b480      	push	{r7}
 80114d2:	b085      	sub	sp, #20
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	691b      	ldr	r3, [r3, #16]
 80114dc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	685b      	ldr	r3, [r3, #4]
 80114e2:	687a      	ldr	r2, [r7, #4]
 80114e4:	6892      	ldr	r2, [r2, #8]
 80114e6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	689b      	ldr	r3, [r3, #8]
 80114ec:	687a      	ldr	r2, [r7, #4]
 80114ee:	6852      	ldr	r2, [r2, #4]
 80114f0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	685b      	ldr	r3, [r3, #4]
 80114f6:	687a      	ldr	r2, [r7, #4]
 80114f8:	429a      	cmp	r2, r3
 80114fa:	d103      	bne.n	8011504 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	689a      	ldr	r2, [r3, #8]
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	2200      	movs	r2, #0
 8011508:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	681b      	ldr	r3, [r3, #0]
 801150e:	1e5a      	subs	r2, r3, #1
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011514:	68fb      	ldr	r3, [r7, #12]
 8011516:	681b      	ldr	r3, [r3, #0]
}
 8011518:	4618      	mov	r0, r3
 801151a:	3714      	adds	r7, #20
 801151c:	46bd      	mov	sp, r7
 801151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011522:	4770      	bx	lr

08011524 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011524:	b580      	push	{r7, lr}
 8011526:	b084      	sub	sp, #16
 8011528:	af00      	add	r7, sp, #0
 801152a:	6078      	str	r0, [r7, #4]
 801152c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	2b00      	cmp	r3, #0
 8011536:	d10a      	bne.n	801154e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011538:	f04f 0350 	mov.w	r3, #80	; 0x50
 801153c:	f383 8811 	msr	BASEPRI, r3
 8011540:	f3bf 8f6f 	isb	sy
 8011544:	f3bf 8f4f 	dsb	sy
 8011548:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801154a:	bf00      	nop
 801154c:	e7fe      	b.n	801154c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801154e:	f002 ffc9 	bl	80144e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	681a      	ldr	r2, [r3, #0]
 8011556:	68fb      	ldr	r3, [r7, #12]
 8011558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801155a:	68f9      	ldr	r1, [r7, #12]
 801155c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801155e:	fb01 f303 	mul.w	r3, r1, r3
 8011562:	441a      	add	r2, r3
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	2200      	movs	r2, #0
 801156c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	681a      	ldr	r2, [r3, #0]
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	681a      	ldr	r2, [r3, #0]
 801157a:	68fb      	ldr	r3, [r7, #12]
 801157c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801157e:	3b01      	subs	r3, #1
 8011580:	68f9      	ldr	r1, [r7, #12]
 8011582:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011584:	fb01 f303 	mul.w	r3, r1, r3
 8011588:	441a      	add	r2, r3
 801158a:	68fb      	ldr	r3, [r7, #12]
 801158c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	22ff      	movs	r2, #255	; 0xff
 8011592:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	22ff      	movs	r2, #255	; 0xff
 801159a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801159e:	683b      	ldr	r3, [r7, #0]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d114      	bne.n	80115ce <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	691b      	ldr	r3, [r3, #16]
 80115a8:	2b00      	cmp	r3, #0
 80115aa:	d01a      	beq.n	80115e2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	3310      	adds	r3, #16
 80115b0:	4618      	mov	r0, r3
 80115b2:	f001 fd67 	bl	8013084 <xTaskRemoveFromEventList>
 80115b6:	4603      	mov	r3, r0
 80115b8:	2b00      	cmp	r3, #0
 80115ba:	d012      	beq.n	80115e2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80115bc:	4b0c      	ldr	r3, [pc, #48]	; (80115f0 <xQueueGenericReset+0xcc>)
 80115be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115c2:	601a      	str	r2, [r3, #0]
 80115c4:	f3bf 8f4f 	dsb	sy
 80115c8:	f3bf 8f6f 	isb	sy
 80115cc:	e009      	b.n	80115e2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80115ce:	68fb      	ldr	r3, [r7, #12]
 80115d0:	3310      	adds	r3, #16
 80115d2:	4618      	mov	r0, r3
 80115d4:	f7ff fef2 	bl	80113bc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80115d8:	68fb      	ldr	r3, [r7, #12]
 80115da:	3324      	adds	r3, #36	; 0x24
 80115dc:	4618      	mov	r0, r3
 80115de:	f7ff feed 	bl	80113bc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80115e2:	f002 ffaf 	bl	8014544 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80115e6:	2301      	movs	r3, #1
}
 80115e8:	4618      	mov	r0, r3
 80115ea:	3710      	adds	r7, #16
 80115ec:	46bd      	mov	sp, r7
 80115ee:	bd80      	pop	{r7, pc}
 80115f0:	e000ed04 	.word	0xe000ed04

080115f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80115f4:	b580      	push	{r7, lr}
 80115f6:	b08e      	sub	sp, #56	; 0x38
 80115f8:	af02      	add	r7, sp, #8
 80115fa:	60f8      	str	r0, [r7, #12]
 80115fc:	60b9      	str	r1, [r7, #8]
 80115fe:	607a      	str	r2, [r7, #4]
 8011600:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	2b00      	cmp	r3, #0
 8011606:	d10a      	bne.n	801161e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8011608:	f04f 0350 	mov.w	r3, #80	; 0x50
 801160c:	f383 8811 	msr	BASEPRI, r3
 8011610:	f3bf 8f6f 	isb	sy
 8011614:	f3bf 8f4f 	dsb	sy
 8011618:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801161a:	bf00      	nop
 801161c:	e7fe      	b.n	801161c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801161e:	683b      	ldr	r3, [r7, #0]
 8011620:	2b00      	cmp	r3, #0
 8011622:	d10a      	bne.n	801163a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8011624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011628:	f383 8811 	msr	BASEPRI, r3
 801162c:	f3bf 8f6f 	isb	sy
 8011630:	f3bf 8f4f 	dsb	sy
 8011634:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011636:	bf00      	nop
 8011638:	e7fe      	b.n	8011638 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	2b00      	cmp	r3, #0
 801163e:	d002      	beq.n	8011646 <xQueueGenericCreateStatic+0x52>
 8011640:	68bb      	ldr	r3, [r7, #8]
 8011642:	2b00      	cmp	r3, #0
 8011644:	d001      	beq.n	801164a <xQueueGenericCreateStatic+0x56>
 8011646:	2301      	movs	r3, #1
 8011648:	e000      	b.n	801164c <xQueueGenericCreateStatic+0x58>
 801164a:	2300      	movs	r3, #0
 801164c:	2b00      	cmp	r3, #0
 801164e:	d10a      	bne.n	8011666 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8011650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011654:	f383 8811 	msr	BASEPRI, r3
 8011658:	f3bf 8f6f 	isb	sy
 801165c:	f3bf 8f4f 	dsb	sy
 8011660:	623b      	str	r3, [r7, #32]
}
 8011662:	bf00      	nop
 8011664:	e7fe      	b.n	8011664 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8011666:	687b      	ldr	r3, [r7, #4]
 8011668:	2b00      	cmp	r3, #0
 801166a:	d102      	bne.n	8011672 <xQueueGenericCreateStatic+0x7e>
 801166c:	68bb      	ldr	r3, [r7, #8]
 801166e:	2b00      	cmp	r3, #0
 8011670:	d101      	bne.n	8011676 <xQueueGenericCreateStatic+0x82>
 8011672:	2301      	movs	r3, #1
 8011674:	e000      	b.n	8011678 <xQueueGenericCreateStatic+0x84>
 8011676:	2300      	movs	r3, #0
 8011678:	2b00      	cmp	r3, #0
 801167a:	d10a      	bne.n	8011692 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801167c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011680:	f383 8811 	msr	BASEPRI, r3
 8011684:	f3bf 8f6f 	isb	sy
 8011688:	f3bf 8f4f 	dsb	sy
 801168c:	61fb      	str	r3, [r7, #28]
}
 801168e:	bf00      	nop
 8011690:	e7fe      	b.n	8011690 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8011692:	2350      	movs	r3, #80	; 0x50
 8011694:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8011696:	697b      	ldr	r3, [r7, #20]
 8011698:	2b50      	cmp	r3, #80	; 0x50
 801169a:	d00a      	beq.n	80116b2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801169c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116a0:	f383 8811 	msr	BASEPRI, r3
 80116a4:	f3bf 8f6f 	isb	sy
 80116a8:	f3bf 8f4f 	dsb	sy
 80116ac:	61bb      	str	r3, [r7, #24]
}
 80116ae:	bf00      	nop
 80116b0:	e7fe      	b.n	80116b0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80116b2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80116b4:	683b      	ldr	r3, [r7, #0]
 80116b6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80116b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d00d      	beq.n	80116da <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80116be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116c0:	2201      	movs	r2, #1
 80116c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80116c6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80116ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116cc:	9300      	str	r3, [sp, #0]
 80116ce:	4613      	mov	r3, r2
 80116d0:	687a      	ldr	r2, [r7, #4]
 80116d2:	68b9      	ldr	r1, [r7, #8]
 80116d4:	68f8      	ldr	r0, [r7, #12]
 80116d6:	f000 f83f 	bl	8011758 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80116da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80116dc:	4618      	mov	r0, r3
 80116de:	3730      	adds	r7, #48	; 0x30
 80116e0:	46bd      	mov	sp, r7
 80116e2:	bd80      	pop	{r7, pc}

080116e4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80116e4:	b580      	push	{r7, lr}
 80116e6:	b08a      	sub	sp, #40	; 0x28
 80116e8:	af02      	add	r7, sp, #8
 80116ea:	60f8      	str	r0, [r7, #12]
 80116ec:	60b9      	str	r1, [r7, #8]
 80116ee:	4613      	mov	r3, r2
 80116f0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d10a      	bne.n	801170e <xQueueGenericCreate+0x2a>
	__asm volatile
 80116f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116fc:	f383 8811 	msr	BASEPRI, r3
 8011700:	f3bf 8f6f 	isb	sy
 8011704:	f3bf 8f4f 	dsb	sy
 8011708:	613b      	str	r3, [r7, #16]
}
 801170a:	bf00      	nop
 801170c:	e7fe      	b.n	801170c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	68ba      	ldr	r2, [r7, #8]
 8011712:	fb02 f303 	mul.w	r3, r2, r3
 8011716:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011718:	69fb      	ldr	r3, [r7, #28]
 801171a:	3350      	adds	r3, #80	; 0x50
 801171c:	4618      	mov	r0, r3
 801171e:	f003 f803 	bl	8014728 <pvPortMalloc>
 8011722:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011724:	69bb      	ldr	r3, [r7, #24]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d011      	beq.n	801174e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801172a:	69bb      	ldr	r3, [r7, #24]
 801172c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801172e:	697b      	ldr	r3, [r7, #20]
 8011730:	3350      	adds	r3, #80	; 0x50
 8011732:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8011734:	69bb      	ldr	r3, [r7, #24]
 8011736:	2200      	movs	r2, #0
 8011738:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801173c:	79fa      	ldrb	r2, [r7, #7]
 801173e:	69bb      	ldr	r3, [r7, #24]
 8011740:	9300      	str	r3, [sp, #0]
 8011742:	4613      	mov	r3, r2
 8011744:	697a      	ldr	r2, [r7, #20]
 8011746:	68b9      	ldr	r1, [r7, #8]
 8011748:	68f8      	ldr	r0, [r7, #12]
 801174a:	f000 f805 	bl	8011758 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801174e:	69bb      	ldr	r3, [r7, #24]
	}
 8011750:	4618      	mov	r0, r3
 8011752:	3720      	adds	r7, #32
 8011754:	46bd      	mov	sp, r7
 8011756:	bd80      	pop	{r7, pc}

08011758 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011758:	b580      	push	{r7, lr}
 801175a:	b084      	sub	sp, #16
 801175c:	af00      	add	r7, sp, #0
 801175e:	60f8      	str	r0, [r7, #12]
 8011760:	60b9      	str	r1, [r7, #8]
 8011762:	607a      	str	r2, [r7, #4]
 8011764:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011766:	68bb      	ldr	r3, [r7, #8]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d103      	bne.n	8011774 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801176c:	69bb      	ldr	r3, [r7, #24]
 801176e:	69ba      	ldr	r2, [r7, #24]
 8011770:	601a      	str	r2, [r3, #0]
 8011772:	e002      	b.n	801177a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011774:	69bb      	ldr	r3, [r7, #24]
 8011776:	687a      	ldr	r2, [r7, #4]
 8011778:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801177a:	69bb      	ldr	r3, [r7, #24]
 801177c:	68fa      	ldr	r2, [r7, #12]
 801177e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011780:	69bb      	ldr	r3, [r7, #24]
 8011782:	68ba      	ldr	r2, [r7, #8]
 8011784:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011786:	2101      	movs	r1, #1
 8011788:	69b8      	ldr	r0, [r7, #24]
 801178a:	f7ff fecb 	bl	8011524 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801178e:	69bb      	ldr	r3, [r7, #24]
 8011790:	78fa      	ldrb	r2, [r7, #3]
 8011792:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011796:	bf00      	nop
 8011798:	3710      	adds	r7, #16
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}

0801179e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 801179e:	b580      	push	{r7, lr}
 80117a0:	b08a      	sub	sp, #40	; 0x28
 80117a2:	af02      	add	r7, sp, #8
 80117a4:	60f8      	str	r0, [r7, #12]
 80117a6:	60b9      	str	r1, [r7, #8]
 80117a8:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d10a      	bne.n	80117c6 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80117b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117b4:	f383 8811 	msr	BASEPRI, r3
 80117b8:	f3bf 8f6f 	isb	sy
 80117bc:	f3bf 8f4f 	dsb	sy
 80117c0:	61bb      	str	r3, [r7, #24]
}
 80117c2:	bf00      	nop
 80117c4:	e7fe      	b.n	80117c4 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80117c6:	68ba      	ldr	r2, [r7, #8]
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	429a      	cmp	r2, r3
 80117cc:	d90a      	bls.n	80117e4 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80117ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117d2:	f383 8811 	msr	BASEPRI, r3
 80117d6:	f3bf 8f6f 	isb	sy
 80117da:	f3bf 8f4f 	dsb	sy
 80117de:	617b      	str	r3, [r7, #20]
}
 80117e0:	bf00      	nop
 80117e2:	e7fe      	b.n	80117e2 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80117e4:	2302      	movs	r3, #2
 80117e6:	9300      	str	r3, [sp, #0]
 80117e8:	687b      	ldr	r3, [r7, #4]
 80117ea:	2200      	movs	r2, #0
 80117ec:	2100      	movs	r1, #0
 80117ee:	68f8      	ldr	r0, [r7, #12]
 80117f0:	f7ff ff00 	bl	80115f4 <xQueueGenericCreateStatic>
 80117f4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80117f6:	69fb      	ldr	r3, [r7, #28]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d002      	beq.n	8011802 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80117fc:	69fb      	ldr	r3, [r7, #28]
 80117fe:	68ba      	ldr	r2, [r7, #8]
 8011800:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011802:	69fb      	ldr	r3, [r7, #28]
	}
 8011804:	4618      	mov	r0, r3
 8011806:	3720      	adds	r7, #32
 8011808:	46bd      	mov	sp, r7
 801180a:	bd80      	pop	{r7, pc}

0801180c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 801180c:	b580      	push	{r7, lr}
 801180e:	b086      	sub	sp, #24
 8011810:	af00      	add	r7, sp, #0
 8011812:	6078      	str	r0, [r7, #4]
 8011814:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d10a      	bne.n	8011832 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 801181c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011820:	f383 8811 	msr	BASEPRI, r3
 8011824:	f3bf 8f6f 	isb	sy
 8011828:	f3bf 8f4f 	dsb	sy
 801182c:	613b      	str	r3, [r7, #16]
}
 801182e:	bf00      	nop
 8011830:	e7fe      	b.n	8011830 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8011832:	683a      	ldr	r2, [r7, #0]
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	429a      	cmp	r2, r3
 8011838:	d90a      	bls.n	8011850 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 801183a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801183e:	f383 8811 	msr	BASEPRI, r3
 8011842:	f3bf 8f6f 	isb	sy
 8011846:	f3bf 8f4f 	dsb	sy
 801184a:	60fb      	str	r3, [r7, #12]
}
 801184c:	bf00      	nop
 801184e:	e7fe      	b.n	801184e <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011850:	2202      	movs	r2, #2
 8011852:	2100      	movs	r1, #0
 8011854:	6878      	ldr	r0, [r7, #4]
 8011856:	f7ff ff45 	bl	80116e4 <xQueueGenericCreate>
 801185a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801185c:	697b      	ldr	r3, [r7, #20]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d002      	beq.n	8011868 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011862:	697b      	ldr	r3, [r7, #20]
 8011864:	683a      	ldr	r2, [r7, #0]
 8011866:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011868:	697b      	ldr	r3, [r7, #20]
	}
 801186a:	4618      	mov	r0, r3
 801186c:	3718      	adds	r7, #24
 801186e:	46bd      	mov	sp, r7
 8011870:	bd80      	pop	{r7, pc}
	...

08011874 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011874:	b580      	push	{r7, lr}
 8011876:	b08e      	sub	sp, #56	; 0x38
 8011878:	af00      	add	r7, sp, #0
 801187a:	60f8      	str	r0, [r7, #12]
 801187c:	60b9      	str	r1, [r7, #8]
 801187e:	607a      	str	r2, [r7, #4]
 8011880:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011882:	2300      	movs	r3, #0
 8011884:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801188a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801188c:	2b00      	cmp	r3, #0
 801188e:	d10a      	bne.n	80118a6 <xQueueGenericSend+0x32>
	__asm volatile
 8011890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011894:	f383 8811 	msr	BASEPRI, r3
 8011898:	f3bf 8f6f 	isb	sy
 801189c:	f3bf 8f4f 	dsb	sy
 80118a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80118a2:	bf00      	nop
 80118a4:	e7fe      	b.n	80118a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80118a6:	68bb      	ldr	r3, [r7, #8]
 80118a8:	2b00      	cmp	r3, #0
 80118aa:	d103      	bne.n	80118b4 <xQueueGenericSend+0x40>
 80118ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d101      	bne.n	80118b8 <xQueueGenericSend+0x44>
 80118b4:	2301      	movs	r3, #1
 80118b6:	e000      	b.n	80118ba <xQueueGenericSend+0x46>
 80118b8:	2300      	movs	r3, #0
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d10a      	bne.n	80118d4 <xQueueGenericSend+0x60>
	__asm volatile
 80118be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118c2:	f383 8811 	msr	BASEPRI, r3
 80118c6:	f3bf 8f6f 	isb	sy
 80118ca:	f3bf 8f4f 	dsb	sy
 80118ce:	627b      	str	r3, [r7, #36]	; 0x24
}
 80118d0:	bf00      	nop
 80118d2:	e7fe      	b.n	80118d2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80118d4:	683b      	ldr	r3, [r7, #0]
 80118d6:	2b02      	cmp	r3, #2
 80118d8:	d103      	bne.n	80118e2 <xQueueGenericSend+0x6e>
 80118da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80118de:	2b01      	cmp	r3, #1
 80118e0:	d101      	bne.n	80118e6 <xQueueGenericSend+0x72>
 80118e2:	2301      	movs	r3, #1
 80118e4:	e000      	b.n	80118e8 <xQueueGenericSend+0x74>
 80118e6:	2300      	movs	r3, #0
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d10a      	bne.n	8011902 <xQueueGenericSend+0x8e>
	__asm volatile
 80118ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118f0:	f383 8811 	msr	BASEPRI, r3
 80118f4:	f3bf 8f6f 	isb	sy
 80118f8:	f3bf 8f4f 	dsb	sy
 80118fc:	623b      	str	r3, [r7, #32]
}
 80118fe:	bf00      	nop
 8011900:	e7fe      	b.n	8011900 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011902:	f001 fe55 	bl	80135b0 <xTaskGetSchedulerState>
 8011906:	4603      	mov	r3, r0
 8011908:	2b00      	cmp	r3, #0
 801190a:	d102      	bne.n	8011912 <xQueueGenericSend+0x9e>
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d101      	bne.n	8011916 <xQueueGenericSend+0xa2>
 8011912:	2301      	movs	r3, #1
 8011914:	e000      	b.n	8011918 <xQueueGenericSend+0xa4>
 8011916:	2300      	movs	r3, #0
 8011918:	2b00      	cmp	r3, #0
 801191a:	d10a      	bne.n	8011932 <xQueueGenericSend+0xbe>
	__asm volatile
 801191c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011920:	f383 8811 	msr	BASEPRI, r3
 8011924:	f3bf 8f6f 	isb	sy
 8011928:	f3bf 8f4f 	dsb	sy
 801192c:	61fb      	str	r3, [r7, #28]
}
 801192e:	bf00      	nop
 8011930:	e7fe      	b.n	8011930 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011932:	f002 fdd7 	bl	80144e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011938:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801193a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801193c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801193e:	429a      	cmp	r2, r3
 8011940:	d302      	bcc.n	8011948 <xQueueGenericSend+0xd4>
 8011942:	683b      	ldr	r3, [r7, #0]
 8011944:	2b02      	cmp	r3, #2
 8011946:	d129      	bne.n	801199c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011948:	683a      	ldr	r2, [r7, #0]
 801194a:	68b9      	ldr	r1, [r7, #8]
 801194c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801194e:	f000 fc5e 	bl	801220e <prvCopyDataToQueue>
 8011952:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011958:	2b00      	cmp	r3, #0
 801195a:	d010      	beq.n	801197e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801195c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801195e:	3324      	adds	r3, #36	; 0x24
 8011960:	4618      	mov	r0, r3
 8011962:	f001 fb8f 	bl	8013084 <xTaskRemoveFromEventList>
 8011966:	4603      	mov	r3, r0
 8011968:	2b00      	cmp	r3, #0
 801196a:	d013      	beq.n	8011994 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 801196c:	4b3f      	ldr	r3, [pc, #252]	; (8011a6c <xQueueGenericSend+0x1f8>)
 801196e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011972:	601a      	str	r2, [r3, #0]
 8011974:	f3bf 8f4f 	dsb	sy
 8011978:	f3bf 8f6f 	isb	sy
 801197c:	e00a      	b.n	8011994 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801197e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011980:	2b00      	cmp	r3, #0
 8011982:	d007      	beq.n	8011994 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011984:	4b39      	ldr	r3, [pc, #228]	; (8011a6c <xQueueGenericSend+0x1f8>)
 8011986:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801198a:	601a      	str	r2, [r3, #0]
 801198c:	f3bf 8f4f 	dsb	sy
 8011990:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011994:	f002 fdd6 	bl	8014544 <vPortExitCritical>
				return pdPASS;
 8011998:	2301      	movs	r3, #1
 801199a:	e063      	b.n	8011a64 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d103      	bne.n	80119aa <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80119a2:	f002 fdcf 	bl	8014544 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80119a6:	2300      	movs	r3, #0
 80119a8:	e05c      	b.n	8011a64 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80119aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d106      	bne.n	80119be <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80119b0:	f107 0314 	add.w	r3, r7, #20
 80119b4:	4618      	mov	r0, r3
 80119b6:	f001 fbc9 	bl	801314c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80119ba:	2301      	movs	r3, #1
 80119bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80119be:	f002 fdc1 	bl	8014544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80119c2:	f001 f887 	bl	8012ad4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80119c6:	f002 fd8d 	bl	80144e4 <vPortEnterCritical>
 80119ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80119d0:	b25b      	sxtb	r3, r3
 80119d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80119d6:	d103      	bne.n	80119e0 <xQueueGenericSend+0x16c>
 80119d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119da:	2200      	movs	r2, #0
 80119dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80119e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80119e6:	b25b      	sxtb	r3, r3
 80119e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80119ec:	d103      	bne.n	80119f6 <xQueueGenericSend+0x182>
 80119ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119f0:	2200      	movs	r2, #0
 80119f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80119f6:	f002 fda5 	bl	8014544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80119fa:	1d3a      	adds	r2, r7, #4
 80119fc:	f107 0314 	add.w	r3, r7, #20
 8011a00:	4611      	mov	r1, r2
 8011a02:	4618      	mov	r0, r3
 8011a04:	f001 fbb8 	bl	8013178 <xTaskCheckForTimeOut>
 8011a08:	4603      	mov	r3, r0
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d124      	bne.n	8011a58 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011a0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a10:	f000 fcf5 	bl	80123fe <prvIsQueueFull>
 8011a14:	4603      	mov	r3, r0
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d018      	beq.n	8011a4c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a1c:	3310      	adds	r3, #16
 8011a1e:	687a      	ldr	r2, [r7, #4]
 8011a20:	4611      	mov	r1, r2
 8011a22:	4618      	mov	r0, r3
 8011a24:	f001 fade 	bl	8012fe4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011a28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a2a:	f000 fc80 	bl	801232e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011a2e:	f001 f85f 	bl	8012af0 <xTaskResumeAll>
 8011a32:	4603      	mov	r3, r0
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	f47f af7c 	bne.w	8011932 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8011a3a:	4b0c      	ldr	r3, [pc, #48]	; (8011a6c <xQueueGenericSend+0x1f8>)
 8011a3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a40:	601a      	str	r2, [r3, #0]
 8011a42:	f3bf 8f4f 	dsb	sy
 8011a46:	f3bf 8f6f 	isb	sy
 8011a4a:	e772      	b.n	8011932 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a4e:	f000 fc6e 	bl	801232e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011a52:	f001 f84d 	bl	8012af0 <xTaskResumeAll>
 8011a56:	e76c      	b.n	8011932 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011a58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a5a:	f000 fc68 	bl	801232e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011a5e:	f001 f847 	bl	8012af0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011a62:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011a64:	4618      	mov	r0, r3
 8011a66:	3738      	adds	r7, #56	; 0x38
 8011a68:	46bd      	mov	sp, r7
 8011a6a:	bd80      	pop	{r7, pc}
 8011a6c:	e000ed04 	.word	0xe000ed04

08011a70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b090      	sub	sp, #64	; 0x40
 8011a74:	af00      	add	r7, sp, #0
 8011a76:	60f8      	str	r0, [r7, #12]
 8011a78:	60b9      	str	r1, [r7, #8]
 8011a7a:	607a      	str	r2, [r7, #4]
 8011a7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8011a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d10a      	bne.n	8011a9e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8011a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a8c:	f383 8811 	msr	BASEPRI, r3
 8011a90:	f3bf 8f6f 	isb	sy
 8011a94:	f3bf 8f4f 	dsb	sy
 8011a98:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8011a9a:	bf00      	nop
 8011a9c:	e7fe      	b.n	8011a9c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011a9e:	68bb      	ldr	r3, [r7, #8]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	d103      	bne.n	8011aac <xQueueGenericSendFromISR+0x3c>
 8011aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d101      	bne.n	8011ab0 <xQueueGenericSendFromISR+0x40>
 8011aac:	2301      	movs	r3, #1
 8011aae:	e000      	b.n	8011ab2 <xQueueGenericSendFromISR+0x42>
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d10a      	bne.n	8011acc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8011ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aba:	f383 8811 	msr	BASEPRI, r3
 8011abe:	f3bf 8f6f 	isb	sy
 8011ac2:	f3bf 8f4f 	dsb	sy
 8011ac6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011ac8:	bf00      	nop
 8011aca:	e7fe      	b.n	8011aca <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011acc:	683b      	ldr	r3, [r7, #0]
 8011ace:	2b02      	cmp	r3, #2
 8011ad0:	d103      	bne.n	8011ada <xQueueGenericSendFromISR+0x6a>
 8011ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ad6:	2b01      	cmp	r3, #1
 8011ad8:	d101      	bne.n	8011ade <xQueueGenericSendFromISR+0x6e>
 8011ada:	2301      	movs	r3, #1
 8011adc:	e000      	b.n	8011ae0 <xQueueGenericSendFromISR+0x70>
 8011ade:	2300      	movs	r3, #0
 8011ae0:	2b00      	cmp	r3, #0
 8011ae2:	d10a      	bne.n	8011afa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8011ae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ae8:	f383 8811 	msr	BASEPRI, r3
 8011aec:	f3bf 8f6f 	isb	sy
 8011af0:	f3bf 8f4f 	dsb	sy
 8011af4:	623b      	str	r3, [r7, #32]
}
 8011af6:	bf00      	nop
 8011af8:	e7fe      	b.n	8011af8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011afa:	f002 fdd5 	bl	80146a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011afe:	f3ef 8211 	mrs	r2, BASEPRI
 8011b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b06:	f383 8811 	msr	BASEPRI, r3
 8011b0a:	f3bf 8f6f 	isb	sy
 8011b0e:	f3bf 8f4f 	dsb	sy
 8011b12:	61fa      	str	r2, [r7, #28]
 8011b14:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011b16:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011b18:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b22:	429a      	cmp	r2, r3
 8011b24:	d302      	bcc.n	8011b2c <xQueueGenericSendFromISR+0xbc>
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	2b02      	cmp	r3, #2
 8011b2a:	d12f      	bne.n	8011b8c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b2e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011b32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011b3c:	683a      	ldr	r2, [r7, #0]
 8011b3e:	68b9      	ldr	r1, [r7, #8]
 8011b40:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011b42:	f000 fb64 	bl	801220e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011b46:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8011b4a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011b4e:	d112      	bne.n	8011b76 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d016      	beq.n	8011b86 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b5a:	3324      	adds	r3, #36	; 0x24
 8011b5c:	4618      	mov	r0, r3
 8011b5e:	f001 fa91 	bl	8013084 <xTaskRemoveFromEventList>
 8011b62:	4603      	mov	r3, r0
 8011b64:	2b00      	cmp	r3, #0
 8011b66:	d00e      	beq.n	8011b86 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011b68:	687b      	ldr	r3, [r7, #4]
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d00b      	beq.n	8011b86 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	2201      	movs	r2, #1
 8011b72:	601a      	str	r2, [r3, #0]
 8011b74:	e007      	b.n	8011b86 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011b76:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8011b7a:	3301      	adds	r3, #1
 8011b7c:	b2db      	uxtb	r3, r3
 8011b7e:	b25a      	sxtb	r2, r3
 8011b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011b86:	2301      	movs	r3, #1
 8011b88:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8011b8a:	e001      	b.n	8011b90 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b92:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011b94:	697b      	ldr	r3, [r7, #20]
 8011b96:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011b9a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011b9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	3740      	adds	r7, #64	; 0x40
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}

08011ba6 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011ba6:	b580      	push	{r7, lr}
 8011ba8:	b08e      	sub	sp, #56	; 0x38
 8011baa:	af00      	add	r7, sp, #0
 8011bac:	6078      	str	r0, [r7, #4]
 8011bae:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bb6:	2b00      	cmp	r3, #0
 8011bb8:	d10a      	bne.n	8011bd0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8011bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bbe:	f383 8811 	msr	BASEPRI, r3
 8011bc2:	f3bf 8f6f 	isb	sy
 8011bc6:	f3bf 8f4f 	dsb	sy
 8011bca:	623b      	str	r3, [r7, #32]
}
 8011bcc:	bf00      	nop
 8011bce:	e7fe      	b.n	8011bce <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d00a      	beq.n	8011bee <xQueueGiveFromISR+0x48>
	__asm volatile
 8011bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bdc:	f383 8811 	msr	BASEPRI, r3
 8011be0:	f3bf 8f6f 	isb	sy
 8011be4:	f3bf 8f4f 	dsb	sy
 8011be8:	61fb      	str	r3, [r7, #28]
}
 8011bea:	bf00      	nop
 8011bec:	e7fe      	b.n	8011bec <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8011bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	2b00      	cmp	r3, #0
 8011bf4:	d103      	bne.n	8011bfe <xQueueGiveFromISR+0x58>
 8011bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bf8:	689b      	ldr	r3, [r3, #8]
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d101      	bne.n	8011c02 <xQueueGiveFromISR+0x5c>
 8011bfe:	2301      	movs	r3, #1
 8011c00:	e000      	b.n	8011c04 <xQueueGiveFromISR+0x5e>
 8011c02:	2300      	movs	r3, #0
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d10a      	bne.n	8011c1e <xQueueGiveFromISR+0x78>
	__asm volatile
 8011c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c0c:	f383 8811 	msr	BASEPRI, r3
 8011c10:	f3bf 8f6f 	isb	sy
 8011c14:	f3bf 8f4f 	dsb	sy
 8011c18:	61bb      	str	r3, [r7, #24]
}
 8011c1a:	bf00      	nop
 8011c1c:	e7fe      	b.n	8011c1c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011c1e:	f002 fd43 	bl	80146a8 <vPortValidateInterruptPriority>
	__asm volatile
 8011c22:	f3ef 8211 	mrs	r2, BASEPRI
 8011c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c2a:	f383 8811 	msr	BASEPRI, r3
 8011c2e:	f3bf 8f6f 	isb	sy
 8011c32:	f3bf 8f4f 	dsb	sy
 8011c36:	617a      	str	r2, [r7, #20]
 8011c38:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8011c3a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c42:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c4a:	429a      	cmp	r2, r3
 8011c4c:	d22b      	bcs.n	8011ca6 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011c54:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c5a:	1c5a      	adds	r2, r3, #1
 8011c5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c5e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011c60:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011c68:	d112      	bne.n	8011c90 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d016      	beq.n	8011ca0 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c74:	3324      	adds	r3, #36	; 0x24
 8011c76:	4618      	mov	r0, r3
 8011c78:	f001 fa04 	bl	8013084 <xTaskRemoveFromEventList>
 8011c7c:	4603      	mov	r3, r0
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d00e      	beq.n	8011ca0 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011c82:	683b      	ldr	r3, [r7, #0]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d00b      	beq.n	8011ca0 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011c88:	683b      	ldr	r3, [r7, #0]
 8011c8a:	2201      	movs	r2, #1
 8011c8c:	601a      	str	r2, [r3, #0]
 8011c8e:	e007      	b.n	8011ca0 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011c90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c94:	3301      	adds	r3, #1
 8011c96:	b2db      	uxtb	r3, r3
 8011c98:	b25a      	sxtb	r2, r3
 8011c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011ca0:	2301      	movs	r3, #1
 8011ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8011ca4:	e001      	b.n	8011caa <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	637b      	str	r3, [r7, #52]	; 0x34
 8011caa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cac:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011cae:	68fb      	ldr	r3, [r7, #12]
 8011cb0:	f383 8811 	msr	BASEPRI, r3
}
 8011cb4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011cb8:	4618      	mov	r0, r3
 8011cba:	3738      	adds	r7, #56	; 0x38
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bd80      	pop	{r7, pc}

08011cc0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b08c      	sub	sp, #48	; 0x30
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	60f8      	str	r0, [r7, #12]
 8011cc8:	60b9      	str	r1, [r7, #8]
 8011cca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011ccc:	2300      	movs	r3, #0
 8011cce:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011cd0:	68fb      	ldr	r3, [r7, #12]
 8011cd2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	d10a      	bne.n	8011cf0 <xQueueReceive+0x30>
	__asm volatile
 8011cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cde:	f383 8811 	msr	BASEPRI, r3
 8011ce2:	f3bf 8f6f 	isb	sy
 8011ce6:	f3bf 8f4f 	dsb	sy
 8011cea:	623b      	str	r3, [r7, #32]
}
 8011cec:	bf00      	nop
 8011cee:	e7fe      	b.n	8011cee <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011cf0:	68bb      	ldr	r3, [r7, #8]
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d103      	bne.n	8011cfe <xQueueReceive+0x3e>
 8011cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d101      	bne.n	8011d02 <xQueueReceive+0x42>
 8011cfe:	2301      	movs	r3, #1
 8011d00:	e000      	b.n	8011d04 <xQueueReceive+0x44>
 8011d02:	2300      	movs	r3, #0
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d10a      	bne.n	8011d1e <xQueueReceive+0x5e>
	__asm volatile
 8011d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d0c:	f383 8811 	msr	BASEPRI, r3
 8011d10:	f3bf 8f6f 	isb	sy
 8011d14:	f3bf 8f4f 	dsb	sy
 8011d18:	61fb      	str	r3, [r7, #28]
}
 8011d1a:	bf00      	nop
 8011d1c:	e7fe      	b.n	8011d1c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011d1e:	f001 fc47 	bl	80135b0 <xTaskGetSchedulerState>
 8011d22:	4603      	mov	r3, r0
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d102      	bne.n	8011d2e <xQueueReceive+0x6e>
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	2b00      	cmp	r3, #0
 8011d2c:	d101      	bne.n	8011d32 <xQueueReceive+0x72>
 8011d2e:	2301      	movs	r3, #1
 8011d30:	e000      	b.n	8011d34 <xQueueReceive+0x74>
 8011d32:	2300      	movs	r3, #0
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	d10a      	bne.n	8011d4e <xQueueReceive+0x8e>
	__asm volatile
 8011d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d3c:	f383 8811 	msr	BASEPRI, r3
 8011d40:	f3bf 8f6f 	isb	sy
 8011d44:	f3bf 8f4f 	dsb	sy
 8011d48:	61bb      	str	r3, [r7, #24]
}
 8011d4a:	bf00      	nop
 8011d4c:	e7fe      	b.n	8011d4c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011d4e:	f002 fbc9 	bl	80144e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d56:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d01f      	beq.n	8011d9e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011d5e:	68b9      	ldr	r1, [r7, #8]
 8011d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011d62:	f000 fabe 	bl	80122e2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d68:	1e5a      	subs	r2, r3, #1
 8011d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d6c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d70:	691b      	ldr	r3, [r3, #16]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d00f      	beq.n	8011d96 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d78:	3310      	adds	r3, #16
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	f001 f982 	bl	8013084 <xTaskRemoveFromEventList>
 8011d80:	4603      	mov	r3, r0
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d007      	beq.n	8011d96 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011d86:	4b3d      	ldr	r3, [pc, #244]	; (8011e7c <xQueueReceive+0x1bc>)
 8011d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011d8c:	601a      	str	r2, [r3, #0]
 8011d8e:	f3bf 8f4f 	dsb	sy
 8011d92:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011d96:	f002 fbd5 	bl	8014544 <vPortExitCritical>
				return pdPASS;
 8011d9a:	2301      	movs	r3, #1
 8011d9c:	e069      	b.n	8011e72 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d103      	bne.n	8011dac <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011da4:	f002 fbce 	bl	8014544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011da8:	2300      	movs	r3, #0
 8011daa:	e062      	b.n	8011e72 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d106      	bne.n	8011dc0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011db2:	f107 0310 	add.w	r3, r7, #16
 8011db6:	4618      	mov	r0, r3
 8011db8:	f001 f9c8 	bl	801314c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011dbc:	2301      	movs	r3, #1
 8011dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011dc0:	f002 fbc0 	bl	8014544 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011dc4:	f000 fe86 	bl	8012ad4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011dc8:	f002 fb8c 	bl	80144e4 <vPortEnterCritical>
 8011dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dce:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011dd2:	b25b      	sxtb	r3, r3
 8011dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011dd8:	d103      	bne.n	8011de2 <xQueueReceive+0x122>
 8011dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ddc:	2200      	movs	r2, #0
 8011dde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011de2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011de4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011de8:	b25b      	sxtb	r3, r3
 8011dea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011dee:	d103      	bne.n	8011df8 <xQueueReceive+0x138>
 8011df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011df2:	2200      	movs	r2, #0
 8011df4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011df8:	f002 fba4 	bl	8014544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011dfc:	1d3a      	adds	r2, r7, #4
 8011dfe:	f107 0310 	add.w	r3, r7, #16
 8011e02:	4611      	mov	r1, r2
 8011e04:	4618      	mov	r0, r3
 8011e06:	f001 f9b7 	bl	8013178 <xTaskCheckForTimeOut>
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d123      	bne.n	8011e58 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e12:	f000 fade 	bl	80123d2 <prvIsQueueEmpty>
 8011e16:	4603      	mov	r3, r0
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d017      	beq.n	8011e4c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011e1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e1e:	3324      	adds	r3, #36	; 0x24
 8011e20:	687a      	ldr	r2, [r7, #4]
 8011e22:	4611      	mov	r1, r2
 8011e24:	4618      	mov	r0, r3
 8011e26:	f001 f8dd 	bl	8012fe4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011e2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e2c:	f000 fa7f 	bl	801232e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011e30:	f000 fe5e 	bl	8012af0 <xTaskResumeAll>
 8011e34:	4603      	mov	r3, r0
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d189      	bne.n	8011d4e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8011e3a:	4b10      	ldr	r3, [pc, #64]	; (8011e7c <xQueueReceive+0x1bc>)
 8011e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e40:	601a      	str	r2, [r3, #0]
 8011e42:	f3bf 8f4f 	dsb	sy
 8011e46:	f3bf 8f6f 	isb	sy
 8011e4a:	e780      	b.n	8011d4e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011e4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e4e:	f000 fa6e 	bl	801232e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011e52:	f000 fe4d 	bl	8012af0 <xTaskResumeAll>
 8011e56:	e77a      	b.n	8011d4e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011e58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e5a:	f000 fa68 	bl	801232e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011e5e:	f000 fe47 	bl	8012af0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011e62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e64:	f000 fab5 	bl	80123d2 <prvIsQueueEmpty>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	2b00      	cmp	r3, #0
 8011e6c:	f43f af6f 	beq.w	8011d4e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011e70:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011e72:	4618      	mov	r0, r3
 8011e74:	3730      	adds	r7, #48	; 0x30
 8011e76:	46bd      	mov	sp, r7
 8011e78:	bd80      	pop	{r7, pc}
 8011e7a:	bf00      	nop
 8011e7c:	e000ed04 	.word	0xe000ed04

08011e80 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b08e      	sub	sp, #56	; 0x38
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]
 8011e88:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011e8a:	2300      	movs	r3, #0
 8011e8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011e92:	2300      	movs	r3, #0
 8011e94:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e98:	2b00      	cmp	r3, #0
 8011e9a:	d10a      	bne.n	8011eb2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8011e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ea0:	f383 8811 	msr	BASEPRI, r3
 8011ea4:	f3bf 8f6f 	isb	sy
 8011ea8:	f3bf 8f4f 	dsb	sy
 8011eac:	623b      	str	r3, [r7, #32]
}
 8011eae:	bf00      	nop
 8011eb0:	e7fe      	b.n	8011eb0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d00a      	beq.n	8011ed0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8011eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ebe:	f383 8811 	msr	BASEPRI, r3
 8011ec2:	f3bf 8f6f 	isb	sy
 8011ec6:	f3bf 8f4f 	dsb	sy
 8011eca:	61fb      	str	r3, [r7, #28]
}
 8011ecc:	bf00      	nop
 8011ece:	e7fe      	b.n	8011ece <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011ed0:	f001 fb6e 	bl	80135b0 <xTaskGetSchedulerState>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d102      	bne.n	8011ee0 <xQueueSemaphoreTake+0x60>
 8011eda:	683b      	ldr	r3, [r7, #0]
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d101      	bne.n	8011ee4 <xQueueSemaphoreTake+0x64>
 8011ee0:	2301      	movs	r3, #1
 8011ee2:	e000      	b.n	8011ee6 <xQueueSemaphoreTake+0x66>
 8011ee4:	2300      	movs	r3, #0
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d10a      	bne.n	8011f00 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8011eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eee:	f383 8811 	msr	BASEPRI, r3
 8011ef2:	f3bf 8f6f 	isb	sy
 8011ef6:	f3bf 8f4f 	dsb	sy
 8011efa:	61bb      	str	r3, [r7, #24]
}
 8011efc:	bf00      	nop
 8011efe:	e7fe      	b.n	8011efe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011f00:	f002 faf0 	bl	80144e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f08:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	d024      	beq.n	8011f5a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f12:	1e5a      	subs	r2, r3, #1
 8011f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f16:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f1a:	681b      	ldr	r3, [r3, #0]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d104      	bne.n	8011f2a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8011f20:	f001 fdfc 	bl	8013b1c <pvTaskIncrementMutexHeldCount>
 8011f24:	4602      	mov	r2, r0
 8011f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f28:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011f2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f2c:	691b      	ldr	r3, [r3, #16]
 8011f2e:	2b00      	cmp	r3, #0
 8011f30:	d00f      	beq.n	8011f52 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f34:	3310      	adds	r3, #16
 8011f36:	4618      	mov	r0, r3
 8011f38:	f001 f8a4 	bl	8013084 <xTaskRemoveFromEventList>
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d007      	beq.n	8011f52 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011f42:	4b54      	ldr	r3, [pc, #336]	; (8012094 <xQueueSemaphoreTake+0x214>)
 8011f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f48:	601a      	str	r2, [r3, #0]
 8011f4a:	f3bf 8f4f 	dsb	sy
 8011f4e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011f52:	f002 faf7 	bl	8014544 <vPortExitCritical>
				return pdPASS;
 8011f56:	2301      	movs	r3, #1
 8011f58:	e097      	b.n	801208a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011f5a:	683b      	ldr	r3, [r7, #0]
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d111      	bne.n	8011f84 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d00a      	beq.n	8011f7c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8011f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f6a:	f383 8811 	msr	BASEPRI, r3
 8011f6e:	f3bf 8f6f 	isb	sy
 8011f72:	f3bf 8f4f 	dsb	sy
 8011f76:	617b      	str	r3, [r7, #20]
}
 8011f78:	bf00      	nop
 8011f7a:	e7fe      	b.n	8011f7a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011f7c:	f002 fae2 	bl	8014544 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011f80:	2300      	movs	r3, #0
 8011f82:	e082      	b.n	801208a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d106      	bne.n	8011f98 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011f8a:	f107 030c 	add.w	r3, r7, #12
 8011f8e:	4618      	mov	r0, r3
 8011f90:	f001 f8dc 	bl	801314c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011f94:	2301      	movs	r3, #1
 8011f96:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011f98:	f002 fad4 	bl	8014544 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011f9c:	f000 fd9a 	bl	8012ad4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011fa0:	f002 faa0 	bl	80144e4 <vPortEnterCritical>
 8011fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fa6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011faa:	b25b      	sxtb	r3, r3
 8011fac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011fb0:	d103      	bne.n	8011fba <xQueueSemaphoreTake+0x13a>
 8011fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fb4:	2200      	movs	r2, #0
 8011fb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011fc0:	b25b      	sxtb	r3, r3
 8011fc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011fc6:	d103      	bne.n	8011fd0 <xQueueSemaphoreTake+0x150>
 8011fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fca:	2200      	movs	r2, #0
 8011fcc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011fd0:	f002 fab8 	bl	8014544 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011fd4:	463a      	mov	r2, r7
 8011fd6:	f107 030c 	add.w	r3, r7, #12
 8011fda:	4611      	mov	r1, r2
 8011fdc:	4618      	mov	r0, r3
 8011fde:	f001 f8cb 	bl	8013178 <xTaskCheckForTimeOut>
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d132      	bne.n	801204e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011fe8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011fea:	f000 f9f2 	bl	80123d2 <prvIsQueueEmpty>
 8011fee:	4603      	mov	r3, r0
 8011ff0:	2b00      	cmp	r3, #0
 8011ff2:	d026      	beq.n	8012042 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d109      	bne.n	8012010 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8011ffc:	f002 fa72 	bl	80144e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012002:	689b      	ldr	r3, [r3, #8]
 8012004:	4618      	mov	r0, r3
 8012006:	f001 faf1 	bl	80135ec <xTaskPriorityInherit>
 801200a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801200c:	f002 fa9a 	bl	8014544 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012012:	3324      	adds	r3, #36	; 0x24
 8012014:	683a      	ldr	r2, [r7, #0]
 8012016:	4611      	mov	r1, r2
 8012018:	4618      	mov	r0, r3
 801201a:	f000 ffe3 	bl	8012fe4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801201e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012020:	f000 f985 	bl	801232e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012024:	f000 fd64 	bl	8012af0 <xTaskResumeAll>
 8012028:	4603      	mov	r3, r0
 801202a:	2b00      	cmp	r3, #0
 801202c:	f47f af68 	bne.w	8011f00 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8012030:	4b18      	ldr	r3, [pc, #96]	; (8012094 <xQueueSemaphoreTake+0x214>)
 8012032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012036:	601a      	str	r2, [r3, #0]
 8012038:	f3bf 8f4f 	dsb	sy
 801203c:	f3bf 8f6f 	isb	sy
 8012040:	e75e      	b.n	8011f00 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012042:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012044:	f000 f973 	bl	801232e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012048:	f000 fd52 	bl	8012af0 <xTaskResumeAll>
 801204c:	e758      	b.n	8011f00 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801204e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012050:	f000 f96d 	bl	801232e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012054:	f000 fd4c 	bl	8012af0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012058:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801205a:	f000 f9ba 	bl	80123d2 <prvIsQueueEmpty>
 801205e:	4603      	mov	r3, r0
 8012060:	2b00      	cmp	r3, #0
 8012062:	f43f af4d 	beq.w	8011f00 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012068:	2b00      	cmp	r3, #0
 801206a:	d00d      	beq.n	8012088 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 801206c:	f002 fa3a 	bl	80144e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012070:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012072:	f000 f8b4 	bl	80121de <prvGetDisinheritPriorityAfterTimeout>
 8012076:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801207a:	689b      	ldr	r3, [r3, #8]
 801207c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801207e:	4618      	mov	r0, r3
 8012080:	f001 fb8a 	bl	8013798 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012084:	f002 fa5e 	bl	8014544 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012088:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801208a:	4618      	mov	r0, r3
 801208c:	3738      	adds	r7, #56	; 0x38
 801208e:	46bd      	mov	sp, r7
 8012090:	bd80      	pop	{r7, pc}
 8012092:	bf00      	nop
 8012094:	e000ed04 	.word	0xe000ed04

08012098 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012098:	b580      	push	{r7, lr}
 801209a:	b08e      	sub	sp, #56	; 0x38
 801209c:	af00      	add	r7, sp, #0
 801209e:	60f8      	str	r0, [r7, #12]
 80120a0:	60b9      	str	r1, [r7, #8]
 80120a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80120a4:	68fb      	ldr	r3, [r7, #12]
 80120a6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80120a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d10a      	bne.n	80120c4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80120ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120b2:	f383 8811 	msr	BASEPRI, r3
 80120b6:	f3bf 8f6f 	isb	sy
 80120ba:	f3bf 8f4f 	dsb	sy
 80120be:	623b      	str	r3, [r7, #32]
}
 80120c0:	bf00      	nop
 80120c2:	e7fe      	b.n	80120c2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80120c4:	68bb      	ldr	r3, [r7, #8]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d103      	bne.n	80120d2 <xQueueReceiveFromISR+0x3a>
 80120ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	d101      	bne.n	80120d6 <xQueueReceiveFromISR+0x3e>
 80120d2:	2301      	movs	r3, #1
 80120d4:	e000      	b.n	80120d8 <xQueueReceiveFromISR+0x40>
 80120d6:	2300      	movs	r3, #0
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d10a      	bne.n	80120f2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80120dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120e0:	f383 8811 	msr	BASEPRI, r3
 80120e4:	f3bf 8f6f 	isb	sy
 80120e8:	f3bf 8f4f 	dsb	sy
 80120ec:	61fb      	str	r3, [r7, #28]
}
 80120ee:	bf00      	nop
 80120f0:	e7fe      	b.n	80120f0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80120f2:	f002 fad9 	bl	80146a8 <vPortValidateInterruptPriority>
	__asm volatile
 80120f6:	f3ef 8211 	mrs	r2, BASEPRI
 80120fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120fe:	f383 8811 	msr	BASEPRI, r3
 8012102:	f3bf 8f6f 	isb	sy
 8012106:	f3bf 8f4f 	dsb	sy
 801210a:	61ba      	str	r2, [r7, #24]
 801210c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801210e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012110:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012116:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801211a:	2b00      	cmp	r3, #0
 801211c:	d02f      	beq.n	801217e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801211e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012120:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012124:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012128:	68b9      	ldr	r1, [r7, #8]
 801212a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801212c:	f000 f8d9 	bl	80122e2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012132:	1e5a      	subs	r2, r3, #1
 8012134:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012136:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012138:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801213c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012140:	d112      	bne.n	8012168 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012144:	691b      	ldr	r3, [r3, #16]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d016      	beq.n	8012178 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801214a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801214c:	3310      	adds	r3, #16
 801214e:	4618      	mov	r0, r3
 8012150:	f000 ff98 	bl	8013084 <xTaskRemoveFromEventList>
 8012154:	4603      	mov	r3, r0
 8012156:	2b00      	cmp	r3, #0
 8012158:	d00e      	beq.n	8012178 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d00b      	beq.n	8012178 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	2201      	movs	r2, #1
 8012164:	601a      	str	r2, [r3, #0]
 8012166:	e007      	b.n	8012178 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012168:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801216c:	3301      	adds	r3, #1
 801216e:	b2db      	uxtb	r3, r3
 8012170:	b25a      	sxtb	r2, r3
 8012172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012174:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012178:	2301      	movs	r3, #1
 801217a:	637b      	str	r3, [r7, #52]	; 0x34
 801217c:	e001      	b.n	8012182 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 801217e:	2300      	movs	r3, #0
 8012180:	637b      	str	r3, [r7, #52]	; 0x34
 8012182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012184:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012186:	693b      	ldr	r3, [r7, #16]
 8012188:	f383 8811 	msr	BASEPRI, r3
}
 801218c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801218e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012190:	4618      	mov	r0, r3
 8012192:	3738      	adds	r7, #56	; 0x38
 8012194:	46bd      	mov	sp, r7
 8012196:	bd80      	pop	{r7, pc}

08012198 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b084      	sub	sp, #16
 801219c:	af00      	add	r7, sp, #0
 801219e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80121a4:	68fb      	ldr	r3, [r7, #12]
 80121a6:	2b00      	cmp	r3, #0
 80121a8:	d10a      	bne.n	80121c0 <vQueueDelete+0x28>
	__asm volatile
 80121aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121ae:	f383 8811 	msr	BASEPRI, r3
 80121b2:	f3bf 8f6f 	isb	sy
 80121b6:	f3bf 8f4f 	dsb	sy
 80121ba:	60bb      	str	r3, [r7, #8]
}
 80121bc:	bf00      	nop
 80121be:	e7fe      	b.n	80121be <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80121c0:	68f8      	ldr	r0, [r7, #12]
 80121c2:	f000 f95f 	bl	8012484 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d102      	bne.n	80121d6 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80121d0:	68f8      	ldr	r0, [r7, #12]
 80121d2:	f002 fb75 	bl	80148c0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80121d6:	bf00      	nop
 80121d8:	3710      	adds	r7, #16
 80121da:	46bd      	mov	sp, r7
 80121dc:	bd80      	pop	{r7, pc}

080121de <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80121de:	b480      	push	{r7}
 80121e0:	b085      	sub	sp, #20
 80121e2:	af00      	add	r7, sp, #0
 80121e4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121ea:	2b00      	cmp	r3, #0
 80121ec:	d006      	beq.n	80121fc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80121f2:	681b      	ldr	r3, [r3, #0]
 80121f4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80121f8:	60fb      	str	r3, [r7, #12]
 80121fa:	e001      	b.n	8012200 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80121fc:	2300      	movs	r3, #0
 80121fe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012200:	68fb      	ldr	r3, [r7, #12]
	}
 8012202:	4618      	mov	r0, r3
 8012204:	3714      	adds	r7, #20
 8012206:	46bd      	mov	sp, r7
 8012208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220c:	4770      	bx	lr

0801220e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801220e:	b580      	push	{r7, lr}
 8012210:	b086      	sub	sp, #24
 8012212:	af00      	add	r7, sp, #0
 8012214:	60f8      	str	r0, [r7, #12]
 8012216:	60b9      	str	r1, [r7, #8]
 8012218:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801221a:	2300      	movs	r3, #0
 801221c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012222:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012228:	2b00      	cmp	r3, #0
 801222a:	d10d      	bne.n	8012248 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801222c:	68fb      	ldr	r3, [r7, #12]
 801222e:	681b      	ldr	r3, [r3, #0]
 8012230:	2b00      	cmp	r3, #0
 8012232:	d14d      	bne.n	80122d0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	689b      	ldr	r3, [r3, #8]
 8012238:	4618      	mov	r0, r3
 801223a:	f001 fa3f 	bl	80136bc <xTaskPriorityDisinherit>
 801223e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012240:	68fb      	ldr	r3, [r7, #12]
 8012242:	2200      	movs	r2, #0
 8012244:	609a      	str	r2, [r3, #8]
 8012246:	e043      	b.n	80122d0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d119      	bne.n	8012282 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	6858      	ldr	r0, [r3, #4]
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012256:	461a      	mov	r2, r3
 8012258:	68b9      	ldr	r1, [r7, #8]
 801225a:	f003 fad1 	bl	8015800 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801225e:	68fb      	ldr	r3, [r7, #12]
 8012260:	685a      	ldr	r2, [r3, #4]
 8012262:	68fb      	ldr	r3, [r7, #12]
 8012264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012266:	441a      	add	r2, r3
 8012268:	68fb      	ldr	r3, [r7, #12]
 801226a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801226c:	68fb      	ldr	r3, [r7, #12]
 801226e:	685a      	ldr	r2, [r3, #4]
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	689b      	ldr	r3, [r3, #8]
 8012274:	429a      	cmp	r2, r3
 8012276:	d32b      	bcc.n	80122d0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012278:	68fb      	ldr	r3, [r7, #12]
 801227a:	681a      	ldr	r2, [r3, #0]
 801227c:	68fb      	ldr	r3, [r7, #12]
 801227e:	605a      	str	r2, [r3, #4]
 8012280:	e026      	b.n	80122d0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	68d8      	ldr	r0, [r3, #12]
 8012286:	68fb      	ldr	r3, [r7, #12]
 8012288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801228a:	461a      	mov	r2, r3
 801228c:	68b9      	ldr	r1, [r7, #8]
 801228e:	f003 fab7 	bl	8015800 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012292:	68fb      	ldr	r3, [r7, #12]
 8012294:	68da      	ldr	r2, [r3, #12]
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801229a:	425b      	negs	r3, r3
 801229c:	441a      	add	r2, r3
 801229e:	68fb      	ldr	r3, [r7, #12]
 80122a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	68da      	ldr	r2, [r3, #12]
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	429a      	cmp	r2, r3
 80122ac:	d207      	bcs.n	80122be <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	689a      	ldr	r2, [r3, #8]
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122b6:	425b      	negs	r3, r3
 80122b8:	441a      	add	r2, r3
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	2b02      	cmp	r3, #2
 80122c2:	d105      	bne.n	80122d0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80122c4:	693b      	ldr	r3, [r7, #16]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d002      	beq.n	80122d0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80122ca:	693b      	ldr	r3, [r7, #16]
 80122cc:	3b01      	subs	r3, #1
 80122ce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80122d0:	693b      	ldr	r3, [r7, #16]
 80122d2:	1c5a      	adds	r2, r3, #1
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80122d8:	697b      	ldr	r3, [r7, #20]
}
 80122da:	4618      	mov	r0, r3
 80122dc:	3718      	adds	r7, #24
 80122de:	46bd      	mov	sp, r7
 80122e0:	bd80      	pop	{r7, pc}

080122e2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80122e2:	b580      	push	{r7, lr}
 80122e4:	b082      	sub	sp, #8
 80122e6:	af00      	add	r7, sp, #0
 80122e8:	6078      	str	r0, [r7, #4]
 80122ea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d018      	beq.n	8012326 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	68da      	ldr	r2, [r3, #12]
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122fc:	441a      	add	r2, r3
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	68da      	ldr	r2, [r3, #12]
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	689b      	ldr	r3, [r3, #8]
 801230a:	429a      	cmp	r2, r3
 801230c:	d303      	bcc.n	8012316 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	681a      	ldr	r2, [r3, #0]
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012316:	687b      	ldr	r3, [r7, #4]
 8012318:	68d9      	ldr	r1, [r3, #12]
 801231a:	687b      	ldr	r3, [r7, #4]
 801231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801231e:	461a      	mov	r2, r3
 8012320:	6838      	ldr	r0, [r7, #0]
 8012322:	f003 fa6d 	bl	8015800 <memcpy>
	}
}
 8012326:	bf00      	nop
 8012328:	3708      	adds	r7, #8
 801232a:	46bd      	mov	sp, r7
 801232c:	bd80      	pop	{r7, pc}

0801232e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801232e:	b580      	push	{r7, lr}
 8012330:	b084      	sub	sp, #16
 8012332:	af00      	add	r7, sp, #0
 8012334:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012336:	f002 f8d5 	bl	80144e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012340:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012342:	e011      	b.n	8012368 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012344:	687b      	ldr	r3, [r7, #4]
 8012346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012348:	2b00      	cmp	r3, #0
 801234a:	d012      	beq.n	8012372 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	3324      	adds	r3, #36	; 0x24
 8012350:	4618      	mov	r0, r3
 8012352:	f000 fe97 	bl	8013084 <xTaskRemoveFromEventList>
 8012356:	4603      	mov	r3, r0
 8012358:	2b00      	cmp	r3, #0
 801235a:	d001      	beq.n	8012360 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801235c:	f000 ff6e 	bl	801323c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012360:	7bfb      	ldrb	r3, [r7, #15]
 8012362:	3b01      	subs	r3, #1
 8012364:	b2db      	uxtb	r3, r3
 8012366:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012368:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801236c:	2b00      	cmp	r3, #0
 801236e:	dce9      	bgt.n	8012344 <prvUnlockQueue+0x16>
 8012370:	e000      	b.n	8012374 <prvUnlockQueue+0x46>
					break;
 8012372:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012374:	687b      	ldr	r3, [r7, #4]
 8012376:	22ff      	movs	r2, #255	; 0xff
 8012378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801237c:	f002 f8e2 	bl	8014544 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012380:	f002 f8b0 	bl	80144e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012384:	687b      	ldr	r3, [r7, #4]
 8012386:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801238a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801238c:	e011      	b.n	80123b2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	691b      	ldr	r3, [r3, #16]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d012      	beq.n	80123bc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	3310      	adds	r3, #16
 801239a:	4618      	mov	r0, r3
 801239c:	f000 fe72 	bl	8013084 <xTaskRemoveFromEventList>
 80123a0:	4603      	mov	r3, r0
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d001      	beq.n	80123aa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80123a6:	f000 ff49 	bl	801323c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80123aa:	7bbb      	ldrb	r3, [r7, #14]
 80123ac:	3b01      	subs	r3, #1
 80123ae:	b2db      	uxtb	r3, r3
 80123b0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80123b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	dce9      	bgt.n	801238e <prvUnlockQueue+0x60>
 80123ba:	e000      	b.n	80123be <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80123bc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	22ff      	movs	r2, #255	; 0xff
 80123c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80123c6:	f002 f8bd 	bl	8014544 <vPortExitCritical>
}
 80123ca:	bf00      	nop
 80123cc:	3710      	adds	r7, #16
 80123ce:	46bd      	mov	sp, r7
 80123d0:	bd80      	pop	{r7, pc}

080123d2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80123d2:	b580      	push	{r7, lr}
 80123d4:	b084      	sub	sp, #16
 80123d6:	af00      	add	r7, sp, #0
 80123d8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80123da:	f002 f883 	bl	80144e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80123e2:	2b00      	cmp	r3, #0
 80123e4:	d102      	bne.n	80123ec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80123e6:	2301      	movs	r3, #1
 80123e8:	60fb      	str	r3, [r7, #12]
 80123ea:	e001      	b.n	80123f0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80123ec:	2300      	movs	r3, #0
 80123ee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80123f0:	f002 f8a8 	bl	8014544 <vPortExitCritical>

	return xReturn;
 80123f4:	68fb      	ldr	r3, [r7, #12]
}
 80123f6:	4618      	mov	r0, r3
 80123f8:	3710      	adds	r7, #16
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd80      	pop	{r7, pc}

080123fe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80123fe:	b580      	push	{r7, lr}
 8012400:	b084      	sub	sp, #16
 8012402:	af00      	add	r7, sp, #0
 8012404:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012406:	f002 f86d 	bl	80144e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012412:	429a      	cmp	r2, r3
 8012414:	d102      	bne.n	801241c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012416:	2301      	movs	r3, #1
 8012418:	60fb      	str	r3, [r7, #12]
 801241a:	e001      	b.n	8012420 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801241c:	2300      	movs	r3, #0
 801241e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012420:	f002 f890 	bl	8014544 <vPortExitCritical>

	return xReturn;
 8012424:	68fb      	ldr	r3, [r7, #12]
}
 8012426:	4618      	mov	r0, r3
 8012428:	3710      	adds	r7, #16
 801242a:	46bd      	mov	sp, r7
 801242c:	bd80      	pop	{r7, pc}
	...

08012430 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8012430:	b480      	push	{r7}
 8012432:	b085      	sub	sp, #20
 8012434:	af00      	add	r7, sp, #0
 8012436:	6078      	str	r0, [r7, #4]
 8012438:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801243a:	2300      	movs	r3, #0
 801243c:	60fb      	str	r3, [r7, #12]
 801243e:	e014      	b.n	801246a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8012440:	4a0f      	ldr	r2, [pc, #60]	; (8012480 <vQueueAddToRegistry+0x50>)
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d10b      	bne.n	8012464 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 801244c:	490c      	ldr	r1, [pc, #48]	; (8012480 <vQueueAddToRegistry+0x50>)
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	683a      	ldr	r2, [r7, #0]
 8012452:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8012456:	4a0a      	ldr	r2, [pc, #40]	; (8012480 <vQueueAddToRegistry+0x50>)
 8012458:	68fb      	ldr	r3, [r7, #12]
 801245a:	00db      	lsls	r3, r3, #3
 801245c:	4413      	add	r3, r2
 801245e:	687a      	ldr	r2, [r7, #4]
 8012460:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8012462:	e006      	b.n	8012472 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8012464:	68fb      	ldr	r3, [r7, #12]
 8012466:	3301      	adds	r3, #1
 8012468:	60fb      	str	r3, [r7, #12]
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	2b07      	cmp	r3, #7
 801246e:	d9e7      	bls.n	8012440 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012470:	bf00      	nop
 8012472:	bf00      	nop
 8012474:	3714      	adds	r7, #20
 8012476:	46bd      	mov	sp, r7
 8012478:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247c:	4770      	bx	lr
 801247e:	bf00      	nop
 8012480:	200132d4 	.word	0x200132d4

08012484 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8012484:	b480      	push	{r7}
 8012486:	b085      	sub	sp, #20
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 801248c:	2300      	movs	r3, #0
 801248e:	60fb      	str	r3, [r7, #12]
 8012490:	e016      	b.n	80124c0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8012492:	4a10      	ldr	r2, [pc, #64]	; (80124d4 <vQueueUnregisterQueue+0x50>)
 8012494:	68fb      	ldr	r3, [r7, #12]
 8012496:	00db      	lsls	r3, r3, #3
 8012498:	4413      	add	r3, r2
 801249a:	685b      	ldr	r3, [r3, #4]
 801249c:	687a      	ldr	r2, [r7, #4]
 801249e:	429a      	cmp	r2, r3
 80124a0:	d10b      	bne.n	80124ba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80124a2:	4a0c      	ldr	r2, [pc, #48]	; (80124d4 <vQueueUnregisterQueue+0x50>)
 80124a4:	68fb      	ldr	r3, [r7, #12]
 80124a6:	2100      	movs	r1, #0
 80124a8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80124ac:	4a09      	ldr	r2, [pc, #36]	; (80124d4 <vQueueUnregisterQueue+0x50>)
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	00db      	lsls	r3, r3, #3
 80124b2:	4413      	add	r3, r2
 80124b4:	2200      	movs	r2, #0
 80124b6:	605a      	str	r2, [r3, #4]
				break;
 80124b8:	e006      	b.n	80124c8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	3301      	adds	r3, #1
 80124be:	60fb      	str	r3, [r7, #12]
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	2b07      	cmp	r3, #7
 80124c4:	d9e5      	bls.n	8012492 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80124c6:	bf00      	nop
 80124c8:	bf00      	nop
 80124ca:	3714      	adds	r7, #20
 80124cc:	46bd      	mov	sp, r7
 80124ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124d2:	4770      	bx	lr
 80124d4:	200132d4 	.word	0x200132d4

080124d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b086      	sub	sp, #24
 80124dc:	af00      	add	r7, sp, #0
 80124de:	60f8      	str	r0, [r7, #12]
 80124e0:	60b9      	str	r1, [r7, #8]
 80124e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80124e8:	f001 fffc 	bl	80144e4 <vPortEnterCritical>
 80124ec:	697b      	ldr	r3, [r7, #20]
 80124ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80124f2:	b25b      	sxtb	r3, r3
 80124f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80124f8:	d103      	bne.n	8012502 <vQueueWaitForMessageRestricted+0x2a>
 80124fa:	697b      	ldr	r3, [r7, #20]
 80124fc:	2200      	movs	r2, #0
 80124fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012502:	697b      	ldr	r3, [r7, #20]
 8012504:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012508:	b25b      	sxtb	r3, r3
 801250a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801250e:	d103      	bne.n	8012518 <vQueueWaitForMessageRestricted+0x40>
 8012510:	697b      	ldr	r3, [r7, #20]
 8012512:	2200      	movs	r2, #0
 8012514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012518:	f002 f814 	bl	8014544 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801251c:	697b      	ldr	r3, [r7, #20]
 801251e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012520:	2b00      	cmp	r3, #0
 8012522:	d106      	bne.n	8012532 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8012524:	697b      	ldr	r3, [r7, #20]
 8012526:	3324      	adds	r3, #36	; 0x24
 8012528:	687a      	ldr	r2, [r7, #4]
 801252a:	68b9      	ldr	r1, [r7, #8]
 801252c:	4618      	mov	r0, r3
 801252e:	f000 fd7d 	bl	801302c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8012532:	6978      	ldr	r0, [r7, #20]
 8012534:	f7ff fefb 	bl	801232e <prvUnlockQueue>
	}
 8012538:	bf00      	nop
 801253a:	3718      	adds	r7, #24
 801253c:	46bd      	mov	sp, r7
 801253e:	bd80      	pop	{r7, pc}

08012540 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8012540:	b580      	push	{r7, lr}
 8012542:	b08e      	sub	sp, #56	; 0x38
 8012544:	af04      	add	r7, sp, #16
 8012546:	60f8      	str	r0, [r7, #12]
 8012548:	60b9      	str	r1, [r7, #8]
 801254a:	607a      	str	r2, [r7, #4]
 801254c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801254e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012550:	2b00      	cmp	r3, #0
 8012552:	d10a      	bne.n	801256a <xTaskCreateStatic+0x2a>
	__asm volatile
 8012554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012558:	f383 8811 	msr	BASEPRI, r3
 801255c:	f3bf 8f6f 	isb	sy
 8012560:	f3bf 8f4f 	dsb	sy
 8012564:	623b      	str	r3, [r7, #32]
}
 8012566:	bf00      	nop
 8012568:	e7fe      	b.n	8012568 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 801256a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801256c:	2b00      	cmp	r3, #0
 801256e:	d10a      	bne.n	8012586 <xTaskCreateStatic+0x46>
	__asm volatile
 8012570:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012574:	f383 8811 	msr	BASEPRI, r3
 8012578:	f3bf 8f6f 	isb	sy
 801257c:	f3bf 8f4f 	dsb	sy
 8012580:	61fb      	str	r3, [r7, #28]
}
 8012582:	bf00      	nop
 8012584:	e7fe      	b.n	8012584 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8012586:	23c0      	movs	r3, #192	; 0xc0
 8012588:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 801258a:	693b      	ldr	r3, [r7, #16]
 801258c:	2bc0      	cmp	r3, #192	; 0xc0
 801258e:	d00a      	beq.n	80125a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8012590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012594:	f383 8811 	msr	BASEPRI, r3
 8012598:	f3bf 8f6f 	isb	sy
 801259c:	f3bf 8f4f 	dsb	sy
 80125a0:	61bb      	str	r3, [r7, #24]
}
 80125a2:	bf00      	nop
 80125a4:	e7fe      	b.n	80125a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80125a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80125a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d01e      	beq.n	80125ec <xTaskCreateStatic+0xac>
 80125ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	d01b      	beq.n	80125ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80125b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80125b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80125bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80125be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125c0:	2202      	movs	r2, #2
 80125c2:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80125c6:	2300      	movs	r3, #0
 80125c8:	9303      	str	r3, [sp, #12]
 80125ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125cc:	9302      	str	r3, [sp, #8]
 80125ce:	f107 0314 	add.w	r3, r7, #20
 80125d2:	9301      	str	r3, [sp, #4]
 80125d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125d6:	9300      	str	r3, [sp, #0]
 80125d8:	683b      	ldr	r3, [r7, #0]
 80125da:	687a      	ldr	r2, [r7, #4]
 80125dc:	68b9      	ldr	r1, [r7, #8]
 80125de:	68f8      	ldr	r0, [r7, #12]
 80125e0:	f000 f850 	bl	8012684 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80125e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80125e6:	f000 f8f7 	bl	80127d8 <prvAddNewTaskToReadyList>
 80125ea:	e001      	b.n	80125f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80125ec:	2300      	movs	r3, #0
 80125ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80125f0:	697b      	ldr	r3, [r7, #20]
	}
 80125f2:	4618      	mov	r0, r3
 80125f4:	3728      	adds	r7, #40	; 0x28
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bd80      	pop	{r7, pc}

080125fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80125fa:	b580      	push	{r7, lr}
 80125fc:	b08c      	sub	sp, #48	; 0x30
 80125fe:	af04      	add	r7, sp, #16
 8012600:	60f8      	str	r0, [r7, #12]
 8012602:	60b9      	str	r1, [r7, #8]
 8012604:	603b      	str	r3, [r7, #0]
 8012606:	4613      	mov	r3, r2
 8012608:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801260a:	88fb      	ldrh	r3, [r7, #6]
 801260c:	009b      	lsls	r3, r3, #2
 801260e:	4618      	mov	r0, r3
 8012610:	f002 f88a 	bl	8014728 <pvPortMalloc>
 8012614:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012616:	697b      	ldr	r3, [r7, #20]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d00e      	beq.n	801263a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801261c:	20c0      	movs	r0, #192	; 0xc0
 801261e:	f002 f883 	bl	8014728 <pvPortMalloc>
 8012622:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012624:	69fb      	ldr	r3, [r7, #28]
 8012626:	2b00      	cmp	r3, #0
 8012628:	d003      	beq.n	8012632 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801262a:	69fb      	ldr	r3, [r7, #28]
 801262c:	697a      	ldr	r2, [r7, #20]
 801262e:	631a      	str	r2, [r3, #48]	; 0x30
 8012630:	e005      	b.n	801263e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012632:	6978      	ldr	r0, [r7, #20]
 8012634:	f002 f944 	bl	80148c0 <vPortFree>
 8012638:	e001      	b.n	801263e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801263a:	2300      	movs	r3, #0
 801263c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801263e:	69fb      	ldr	r3, [r7, #28]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d017      	beq.n	8012674 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8012644:	69fb      	ldr	r3, [r7, #28]
 8012646:	2200      	movs	r2, #0
 8012648:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801264c:	88fa      	ldrh	r2, [r7, #6]
 801264e:	2300      	movs	r3, #0
 8012650:	9303      	str	r3, [sp, #12]
 8012652:	69fb      	ldr	r3, [r7, #28]
 8012654:	9302      	str	r3, [sp, #8]
 8012656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012658:	9301      	str	r3, [sp, #4]
 801265a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801265c:	9300      	str	r3, [sp, #0]
 801265e:	683b      	ldr	r3, [r7, #0]
 8012660:	68b9      	ldr	r1, [r7, #8]
 8012662:	68f8      	ldr	r0, [r7, #12]
 8012664:	f000 f80e 	bl	8012684 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012668:	69f8      	ldr	r0, [r7, #28]
 801266a:	f000 f8b5 	bl	80127d8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801266e:	2301      	movs	r3, #1
 8012670:	61bb      	str	r3, [r7, #24]
 8012672:	e002      	b.n	801267a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012678:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801267a:	69bb      	ldr	r3, [r7, #24]
	}
 801267c:	4618      	mov	r0, r3
 801267e:	3720      	adds	r7, #32
 8012680:	46bd      	mov	sp, r7
 8012682:	bd80      	pop	{r7, pc}

08012684 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012684:	b580      	push	{r7, lr}
 8012686:	b088      	sub	sp, #32
 8012688:	af00      	add	r7, sp, #0
 801268a:	60f8      	str	r0, [r7, #12]
 801268c:	60b9      	str	r1, [r7, #8]
 801268e:	607a      	str	r2, [r7, #4]
 8012690:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012694:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	009b      	lsls	r3, r3, #2
 801269a:	461a      	mov	r2, r3
 801269c:	21a5      	movs	r1, #165	; 0xa5
 801269e:	f003 f8bd 	bl	801581c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80126a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80126ac:	3b01      	subs	r3, #1
 80126ae:	009b      	lsls	r3, r3, #2
 80126b0:	4413      	add	r3, r2
 80126b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80126b4:	69bb      	ldr	r3, [r7, #24]
 80126b6:	f023 0307 	bic.w	r3, r3, #7
 80126ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80126bc:	69bb      	ldr	r3, [r7, #24]
 80126be:	f003 0307 	and.w	r3, r3, #7
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	d00a      	beq.n	80126dc <prvInitialiseNewTask+0x58>
	__asm volatile
 80126c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126ca:	f383 8811 	msr	BASEPRI, r3
 80126ce:	f3bf 8f6f 	isb	sy
 80126d2:	f3bf 8f4f 	dsb	sy
 80126d6:	617b      	str	r3, [r7, #20]
}
 80126d8:	bf00      	nop
 80126da:	e7fe      	b.n	80126da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80126dc:	68bb      	ldr	r3, [r7, #8]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d01f      	beq.n	8012722 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80126e2:	2300      	movs	r3, #0
 80126e4:	61fb      	str	r3, [r7, #28]
 80126e6:	e012      	b.n	801270e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80126e8:	68ba      	ldr	r2, [r7, #8]
 80126ea:	69fb      	ldr	r3, [r7, #28]
 80126ec:	4413      	add	r3, r2
 80126ee:	7819      	ldrb	r1, [r3, #0]
 80126f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80126f2:	69fb      	ldr	r3, [r7, #28]
 80126f4:	4413      	add	r3, r2
 80126f6:	3334      	adds	r3, #52	; 0x34
 80126f8:	460a      	mov	r2, r1
 80126fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80126fc:	68ba      	ldr	r2, [r7, #8]
 80126fe:	69fb      	ldr	r3, [r7, #28]
 8012700:	4413      	add	r3, r2
 8012702:	781b      	ldrb	r3, [r3, #0]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d006      	beq.n	8012716 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012708:	69fb      	ldr	r3, [r7, #28]
 801270a:	3301      	adds	r3, #1
 801270c:	61fb      	str	r3, [r7, #28]
 801270e:	69fb      	ldr	r3, [r7, #28]
 8012710:	2b0f      	cmp	r3, #15
 8012712:	d9e9      	bls.n	80126e8 <prvInitialiseNewTask+0x64>
 8012714:	e000      	b.n	8012718 <prvInitialiseNewTask+0x94>
			{
				break;
 8012716:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801271a:	2200      	movs	r2, #0
 801271c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012720:	e003      	b.n	801272a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012724:	2200      	movs	r2, #0
 8012726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801272c:	2b37      	cmp	r3, #55	; 0x37
 801272e:	d901      	bls.n	8012734 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012730:	2337      	movs	r3, #55	; 0x37
 8012732:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012736:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012738:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801273a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801273c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801273e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8012740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012742:	2200      	movs	r2, #0
 8012744:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012748:	3304      	adds	r3, #4
 801274a:	4618      	mov	r0, r3
 801274c:	f7fe fe56 	bl	80113fc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012752:	3318      	adds	r3, #24
 8012754:	4618      	mov	r0, r3
 8012756:	f7fe fe51 	bl	80113fc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801275a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801275c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801275e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012762:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8012766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012768:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801276a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801276c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801276e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8012770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012772:	2200      	movs	r2, #0
 8012774:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012778:	2200      	movs	r2, #0
 801277a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801277e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012780:	2200      	movs	r2, #0
 8012782:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8012786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012788:	3358      	adds	r3, #88	; 0x58
 801278a:	2260      	movs	r2, #96	; 0x60
 801278c:	2100      	movs	r1, #0
 801278e:	4618      	mov	r0, r3
 8012790:	f003 f844 	bl	801581c <memset>
 8012794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012796:	4a0d      	ldr	r2, [pc, #52]	; (80127cc <prvInitialiseNewTask+0x148>)
 8012798:	65da      	str	r2, [r3, #92]	; 0x5c
 801279a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801279c:	4a0c      	ldr	r2, [pc, #48]	; (80127d0 <prvInitialiseNewTask+0x14c>)
 801279e:	661a      	str	r2, [r3, #96]	; 0x60
 80127a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127a2:	4a0c      	ldr	r2, [pc, #48]	; (80127d4 <prvInitialiseNewTask+0x150>)
 80127a4:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80127a6:	683a      	ldr	r2, [r7, #0]
 80127a8:	68f9      	ldr	r1, [r7, #12]
 80127aa:	69b8      	ldr	r0, [r7, #24]
 80127ac:	f001 fd6c 	bl	8014288 <pxPortInitialiseStack>
 80127b0:	4602      	mov	r2, r0
 80127b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127b4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80127b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d002      	beq.n	80127c2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80127bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80127c2:	bf00      	nop
 80127c4:	3720      	adds	r7, #32
 80127c6:	46bd      	mov	sp, r7
 80127c8:	bd80      	pop	{r7, pc}
 80127ca:	bf00      	nop
 80127cc:	0801917c 	.word	0x0801917c
 80127d0:	0801919c 	.word	0x0801919c
 80127d4:	0801915c 	.word	0x0801915c

080127d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b082      	sub	sp, #8
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80127e0:	f001 fe80 	bl	80144e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80127e4:	4b2d      	ldr	r3, [pc, #180]	; (801289c <prvAddNewTaskToReadyList+0xc4>)
 80127e6:	681b      	ldr	r3, [r3, #0]
 80127e8:	3301      	adds	r3, #1
 80127ea:	4a2c      	ldr	r2, [pc, #176]	; (801289c <prvAddNewTaskToReadyList+0xc4>)
 80127ec:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80127ee:	4b2c      	ldr	r3, [pc, #176]	; (80128a0 <prvAddNewTaskToReadyList+0xc8>)
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d109      	bne.n	801280a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80127f6:	4a2a      	ldr	r2, [pc, #168]	; (80128a0 <prvAddNewTaskToReadyList+0xc8>)
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80127fc:	4b27      	ldr	r3, [pc, #156]	; (801289c <prvAddNewTaskToReadyList+0xc4>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	2b01      	cmp	r3, #1
 8012802:	d110      	bne.n	8012826 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012804:	f000 fd3e 	bl	8013284 <prvInitialiseTaskLists>
 8012808:	e00d      	b.n	8012826 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801280a:	4b26      	ldr	r3, [pc, #152]	; (80128a4 <prvAddNewTaskToReadyList+0xcc>)
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	2b00      	cmp	r3, #0
 8012810:	d109      	bne.n	8012826 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012812:	4b23      	ldr	r3, [pc, #140]	; (80128a0 <prvAddNewTaskToReadyList+0xc8>)
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801281c:	429a      	cmp	r2, r3
 801281e:	d802      	bhi.n	8012826 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8012820:	4a1f      	ldr	r2, [pc, #124]	; (80128a0 <prvAddNewTaskToReadyList+0xc8>)
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012826:	4b20      	ldr	r3, [pc, #128]	; (80128a8 <prvAddNewTaskToReadyList+0xd0>)
 8012828:	681b      	ldr	r3, [r3, #0]
 801282a:	3301      	adds	r3, #1
 801282c:	4a1e      	ldr	r2, [pc, #120]	; (80128a8 <prvAddNewTaskToReadyList+0xd0>)
 801282e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8012830:	4b1d      	ldr	r3, [pc, #116]	; (80128a8 <prvAddNewTaskToReadyList+0xd0>)
 8012832:	681a      	ldr	r2, [r3, #0]
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801283c:	4b1b      	ldr	r3, [pc, #108]	; (80128ac <prvAddNewTaskToReadyList+0xd4>)
 801283e:	681b      	ldr	r3, [r3, #0]
 8012840:	429a      	cmp	r2, r3
 8012842:	d903      	bls.n	801284c <prvAddNewTaskToReadyList+0x74>
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012848:	4a18      	ldr	r2, [pc, #96]	; (80128ac <prvAddNewTaskToReadyList+0xd4>)
 801284a:	6013      	str	r3, [r2, #0]
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012850:	4613      	mov	r3, r2
 8012852:	009b      	lsls	r3, r3, #2
 8012854:	4413      	add	r3, r2
 8012856:	009b      	lsls	r3, r3, #2
 8012858:	4a15      	ldr	r2, [pc, #84]	; (80128b0 <prvAddNewTaskToReadyList+0xd8>)
 801285a:	441a      	add	r2, r3
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	3304      	adds	r3, #4
 8012860:	4619      	mov	r1, r3
 8012862:	4610      	mov	r0, r2
 8012864:	f7fe fdd7 	bl	8011416 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8012868:	f001 fe6c 	bl	8014544 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801286c:	4b0d      	ldr	r3, [pc, #52]	; (80128a4 <prvAddNewTaskToReadyList+0xcc>)
 801286e:	681b      	ldr	r3, [r3, #0]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d00e      	beq.n	8012892 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012874:	4b0a      	ldr	r3, [pc, #40]	; (80128a0 <prvAddNewTaskToReadyList+0xc8>)
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801287a:	687b      	ldr	r3, [r7, #4]
 801287c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801287e:	429a      	cmp	r2, r3
 8012880:	d207      	bcs.n	8012892 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012882:	4b0c      	ldr	r3, [pc, #48]	; (80128b4 <prvAddNewTaskToReadyList+0xdc>)
 8012884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012888:	601a      	str	r2, [r3, #0]
 801288a:	f3bf 8f4f 	dsb	sy
 801288e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012892:	bf00      	nop
 8012894:	3708      	adds	r7, #8
 8012896:	46bd      	mov	sp, r7
 8012898:	bd80      	pop	{r7, pc}
 801289a:	bf00      	nop
 801289c:	20001418 	.word	0x20001418
 80128a0:	20000f44 	.word	0x20000f44
 80128a4:	20001424 	.word	0x20001424
 80128a8:	20001434 	.word	0x20001434
 80128ac:	20001420 	.word	0x20001420
 80128b0:	20000f48 	.word	0x20000f48
 80128b4:	e000ed04 	.word	0xe000ed04

080128b8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80128b8:	b580      	push	{r7, lr}
 80128ba:	b084      	sub	sp, #16
 80128bc:	af00      	add	r7, sp, #0
 80128be:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80128c0:	2300      	movs	r3, #0
 80128c2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d017      	beq.n	80128fa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80128ca:	4b13      	ldr	r3, [pc, #76]	; (8012918 <vTaskDelay+0x60>)
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d00a      	beq.n	80128e8 <vTaskDelay+0x30>
	__asm volatile
 80128d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128d6:	f383 8811 	msr	BASEPRI, r3
 80128da:	f3bf 8f6f 	isb	sy
 80128de:	f3bf 8f4f 	dsb	sy
 80128e2:	60bb      	str	r3, [r7, #8]
}
 80128e4:	bf00      	nop
 80128e6:	e7fe      	b.n	80128e6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80128e8:	f000 f8f4 	bl	8012ad4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80128ec:	2100      	movs	r1, #0
 80128ee:	6878      	ldr	r0, [r7, #4]
 80128f0:	f001 f928 	bl	8013b44 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80128f4:	f000 f8fc 	bl	8012af0 <xTaskResumeAll>
 80128f8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80128fa:	68fb      	ldr	r3, [r7, #12]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d107      	bne.n	8012910 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8012900:	4b06      	ldr	r3, [pc, #24]	; (801291c <vTaskDelay+0x64>)
 8012902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012906:	601a      	str	r2, [r3, #0]
 8012908:	f3bf 8f4f 	dsb	sy
 801290c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012910:	bf00      	nop
 8012912:	3710      	adds	r7, #16
 8012914:	46bd      	mov	sp, r7
 8012916:	bd80      	pop	{r7, pc}
 8012918:	20001440 	.word	0x20001440
 801291c:	e000ed04 	.word	0xe000ed04

08012920 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8012920:	b580      	push	{r7, lr}
 8012922:	b088      	sub	sp, #32
 8012924:	af00      	add	r7, sp, #0
 8012926:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 801292c:	69bb      	ldr	r3, [r7, #24]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d10a      	bne.n	8012948 <eTaskGetState+0x28>
	__asm volatile
 8012932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012936:	f383 8811 	msr	BASEPRI, r3
 801293a:	f3bf 8f6f 	isb	sy
 801293e:	f3bf 8f4f 	dsb	sy
 8012942:	60bb      	str	r3, [r7, #8]
}
 8012944:	bf00      	nop
 8012946:	e7fe      	b.n	8012946 <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8012948:	4b23      	ldr	r3, [pc, #140]	; (80129d8 <eTaskGetState+0xb8>)
 801294a:	681b      	ldr	r3, [r3, #0]
 801294c:	69ba      	ldr	r2, [r7, #24]
 801294e:	429a      	cmp	r2, r3
 8012950:	d102      	bne.n	8012958 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8012952:	2300      	movs	r3, #0
 8012954:	77fb      	strb	r3, [r7, #31]
 8012956:	e03a      	b.n	80129ce <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8012958:	f001 fdc4 	bl	80144e4 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 801295c:	69bb      	ldr	r3, [r7, #24]
 801295e:	695b      	ldr	r3, [r3, #20]
 8012960:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8012962:	4b1e      	ldr	r3, [pc, #120]	; (80129dc <eTaskGetState+0xbc>)
 8012964:	681b      	ldr	r3, [r3, #0]
 8012966:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8012968:	4b1d      	ldr	r3, [pc, #116]	; (80129e0 <eTaskGetState+0xc0>)
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 801296e:	f001 fde9 	bl	8014544 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8012972:	697a      	ldr	r2, [r7, #20]
 8012974:	693b      	ldr	r3, [r7, #16]
 8012976:	429a      	cmp	r2, r3
 8012978:	d003      	beq.n	8012982 <eTaskGetState+0x62>
 801297a:	697a      	ldr	r2, [r7, #20]
 801297c:	68fb      	ldr	r3, [r7, #12]
 801297e:	429a      	cmp	r2, r3
 8012980:	d102      	bne.n	8012988 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8012982:	2302      	movs	r3, #2
 8012984:	77fb      	strb	r3, [r7, #31]
 8012986:	e022      	b.n	80129ce <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8012988:	697b      	ldr	r3, [r7, #20]
 801298a:	4a16      	ldr	r2, [pc, #88]	; (80129e4 <eTaskGetState+0xc4>)
 801298c:	4293      	cmp	r3, r2
 801298e:	d112      	bne.n	80129b6 <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8012990:	69bb      	ldr	r3, [r7, #24]
 8012992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012994:	2b00      	cmp	r3, #0
 8012996:	d10b      	bne.n	80129b0 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8012998:	69bb      	ldr	r3, [r7, #24]
 801299a:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 801299e:	b2db      	uxtb	r3, r3
 80129a0:	2b01      	cmp	r3, #1
 80129a2:	d102      	bne.n	80129aa <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 80129a4:	2302      	movs	r3, #2
 80129a6:	77fb      	strb	r3, [r7, #31]
 80129a8:	e011      	b.n	80129ce <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 80129aa:	2303      	movs	r3, #3
 80129ac:	77fb      	strb	r3, [r7, #31]
 80129ae:	e00e      	b.n	80129ce <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 80129b0:	2302      	movs	r3, #2
 80129b2:	77fb      	strb	r3, [r7, #31]
 80129b4:	e00b      	b.n	80129ce <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80129b6:	697b      	ldr	r3, [r7, #20]
 80129b8:	4a0b      	ldr	r2, [pc, #44]	; (80129e8 <eTaskGetState+0xc8>)
 80129ba:	4293      	cmp	r3, r2
 80129bc:	d002      	beq.n	80129c4 <eTaskGetState+0xa4>
 80129be:	697b      	ldr	r3, [r7, #20]
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d102      	bne.n	80129ca <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80129c4:	2304      	movs	r3, #4
 80129c6:	77fb      	strb	r3, [r7, #31]
 80129c8:	e001      	b.n	80129ce <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80129ca:	2301      	movs	r3, #1
 80129cc:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80129ce:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80129d0:	4618      	mov	r0, r3
 80129d2:	3720      	adds	r7, #32
 80129d4:	46bd      	mov	sp, r7
 80129d6:	bd80      	pop	{r7, pc}
 80129d8:	20000f44 	.word	0x20000f44
 80129dc:	200013d0 	.word	0x200013d0
 80129e0:	200013d4 	.word	0x200013d4
 80129e4:	20001404 	.word	0x20001404
 80129e8:	200013ec 	.word	0x200013ec

080129ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80129ec:	b580      	push	{r7, lr}
 80129ee:	b08a      	sub	sp, #40	; 0x28
 80129f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80129f2:	2300      	movs	r3, #0
 80129f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80129f6:	2300      	movs	r3, #0
 80129f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80129fa:	463a      	mov	r2, r7
 80129fc:	1d39      	adds	r1, r7, #4
 80129fe:	f107 0308 	add.w	r3, r7, #8
 8012a02:	4618      	mov	r0, r3
 8012a04:	f7fe fca6 	bl	8011354 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8012a08:	6839      	ldr	r1, [r7, #0]
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	68ba      	ldr	r2, [r7, #8]
 8012a0e:	9202      	str	r2, [sp, #8]
 8012a10:	9301      	str	r3, [sp, #4]
 8012a12:	2300      	movs	r3, #0
 8012a14:	9300      	str	r3, [sp, #0]
 8012a16:	2300      	movs	r3, #0
 8012a18:	460a      	mov	r2, r1
 8012a1a:	4925      	ldr	r1, [pc, #148]	; (8012ab0 <vTaskStartScheduler+0xc4>)
 8012a1c:	4825      	ldr	r0, [pc, #148]	; (8012ab4 <vTaskStartScheduler+0xc8>)
 8012a1e:	f7ff fd8f 	bl	8012540 <xTaskCreateStatic>
 8012a22:	4603      	mov	r3, r0
 8012a24:	4a24      	ldr	r2, [pc, #144]	; (8012ab8 <vTaskStartScheduler+0xcc>)
 8012a26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8012a28:	4b23      	ldr	r3, [pc, #140]	; (8012ab8 <vTaskStartScheduler+0xcc>)
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	2b00      	cmp	r3, #0
 8012a2e:	d002      	beq.n	8012a36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8012a30:	2301      	movs	r3, #1
 8012a32:	617b      	str	r3, [r7, #20]
 8012a34:	e001      	b.n	8012a3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8012a36:	2300      	movs	r3, #0
 8012a38:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8012a3a:	697b      	ldr	r3, [r7, #20]
 8012a3c:	2b01      	cmp	r3, #1
 8012a3e:	d102      	bne.n	8012a46 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8012a40:	f001 f8d4 	bl	8013bec <xTimerCreateTimerTask>
 8012a44:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012a46:	697b      	ldr	r3, [r7, #20]
 8012a48:	2b01      	cmp	r3, #1
 8012a4a:	d11e      	bne.n	8012a8a <vTaskStartScheduler+0x9e>
	__asm volatile
 8012a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a50:	f383 8811 	msr	BASEPRI, r3
 8012a54:	f3bf 8f6f 	isb	sy
 8012a58:	f3bf 8f4f 	dsb	sy
 8012a5c:	613b      	str	r3, [r7, #16]
}
 8012a5e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012a60:	4b16      	ldr	r3, [pc, #88]	; (8012abc <vTaskStartScheduler+0xd0>)
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	3358      	adds	r3, #88	; 0x58
 8012a66:	4a16      	ldr	r2, [pc, #88]	; (8012ac0 <vTaskStartScheduler+0xd4>)
 8012a68:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8012a6a:	4b16      	ldr	r3, [pc, #88]	; (8012ac4 <vTaskStartScheduler+0xd8>)
 8012a6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012a70:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012a72:	4b15      	ldr	r3, [pc, #84]	; (8012ac8 <vTaskStartScheduler+0xdc>)
 8012a74:	2201      	movs	r2, #1
 8012a76:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012a78:	4b14      	ldr	r3, [pc, #80]	; (8012acc <vTaskStartScheduler+0xe0>)
 8012a7a:	2200      	movs	r2, #0
 8012a7c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8012a7e:	4b14      	ldr	r3, [pc, #80]	; (8012ad0 <vTaskStartScheduler+0xe4>)
 8012a80:	2200      	movs	r2, #0
 8012a82:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012a84:	f001 fc8c 	bl	80143a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012a88:	e00e      	b.n	8012aa8 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012a8a:	697b      	ldr	r3, [r7, #20]
 8012a8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012a90:	d10a      	bne.n	8012aa8 <vTaskStartScheduler+0xbc>
	__asm volatile
 8012a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a96:	f383 8811 	msr	BASEPRI, r3
 8012a9a:	f3bf 8f6f 	isb	sy
 8012a9e:	f3bf 8f4f 	dsb	sy
 8012aa2:	60fb      	str	r3, [r7, #12]
}
 8012aa4:	bf00      	nop
 8012aa6:	e7fe      	b.n	8012aa6 <vTaskStartScheduler+0xba>
}
 8012aa8:	bf00      	nop
 8012aaa:	3718      	adds	r7, #24
 8012aac:	46bd      	mov	sp, r7
 8012aae:	bd80      	pop	{r7, pc}
 8012ab0:	08018b68 	.word	0x08018b68
 8012ab4:	08013255 	.word	0x08013255
 8012ab8:	2000143c 	.word	0x2000143c
 8012abc:	20000f44 	.word	0x20000f44
 8012ac0:	2000019c 	.word	0x2000019c
 8012ac4:	20001438 	.word	0x20001438
 8012ac8:	20001424 	.word	0x20001424
 8012acc:	2000141c 	.word	0x2000141c
 8012ad0:	2000efdc 	.word	0x2000efdc

08012ad4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012ad4:	b480      	push	{r7}
 8012ad6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012ad8:	4b04      	ldr	r3, [pc, #16]	; (8012aec <vTaskSuspendAll+0x18>)
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	3301      	adds	r3, #1
 8012ade:	4a03      	ldr	r2, [pc, #12]	; (8012aec <vTaskSuspendAll+0x18>)
 8012ae0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012ae2:	bf00      	nop
 8012ae4:	46bd      	mov	sp, r7
 8012ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aea:	4770      	bx	lr
 8012aec:	20001440 	.word	0x20001440

08012af0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b084      	sub	sp, #16
 8012af4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012af6:	2300      	movs	r3, #0
 8012af8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012afa:	2300      	movs	r3, #0
 8012afc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8012afe:	4b42      	ldr	r3, [pc, #264]	; (8012c08 <xTaskResumeAll+0x118>)
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d10a      	bne.n	8012b1c <xTaskResumeAll+0x2c>
	__asm volatile
 8012b06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b0a:	f383 8811 	msr	BASEPRI, r3
 8012b0e:	f3bf 8f6f 	isb	sy
 8012b12:	f3bf 8f4f 	dsb	sy
 8012b16:	603b      	str	r3, [r7, #0]
}
 8012b18:	bf00      	nop
 8012b1a:	e7fe      	b.n	8012b1a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012b1c:	f001 fce2 	bl	80144e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012b20:	4b39      	ldr	r3, [pc, #228]	; (8012c08 <xTaskResumeAll+0x118>)
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	3b01      	subs	r3, #1
 8012b26:	4a38      	ldr	r2, [pc, #224]	; (8012c08 <xTaskResumeAll+0x118>)
 8012b28:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012b2a:	4b37      	ldr	r3, [pc, #220]	; (8012c08 <xTaskResumeAll+0x118>)
 8012b2c:	681b      	ldr	r3, [r3, #0]
 8012b2e:	2b00      	cmp	r3, #0
 8012b30:	d162      	bne.n	8012bf8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012b32:	4b36      	ldr	r3, [pc, #216]	; (8012c0c <xTaskResumeAll+0x11c>)
 8012b34:	681b      	ldr	r3, [r3, #0]
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d05e      	beq.n	8012bf8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012b3a:	e02f      	b.n	8012b9c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012b3c:	4b34      	ldr	r3, [pc, #208]	; (8012c10 <xTaskResumeAll+0x120>)
 8012b3e:	68db      	ldr	r3, [r3, #12]
 8012b40:	68db      	ldr	r3, [r3, #12]
 8012b42:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012b44:	68fb      	ldr	r3, [r7, #12]
 8012b46:	3318      	adds	r3, #24
 8012b48:	4618      	mov	r0, r3
 8012b4a:	f7fe fcc1 	bl	80114d0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012b4e:	68fb      	ldr	r3, [r7, #12]
 8012b50:	3304      	adds	r3, #4
 8012b52:	4618      	mov	r0, r3
 8012b54:	f7fe fcbc 	bl	80114d0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b5c:	4b2d      	ldr	r3, [pc, #180]	; (8012c14 <xTaskResumeAll+0x124>)
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	429a      	cmp	r2, r3
 8012b62:	d903      	bls.n	8012b6c <xTaskResumeAll+0x7c>
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b68:	4a2a      	ldr	r2, [pc, #168]	; (8012c14 <xTaskResumeAll+0x124>)
 8012b6a:	6013      	str	r3, [r2, #0]
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b70:	4613      	mov	r3, r2
 8012b72:	009b      	lsls	r3, r3, #2
 8012b74:	4413      	add	r3, r2
 8012b76:	009b      	lsls	r3, r3, #2
 8012b78:	4a27      	ldr	r2, [pc, #156]	; (8012c18 <xTaskResumeAll+0x128>)
 8012b7a:	441a      	add	r2, r3
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	3304      	adds	r3, #4
 8012b80:	4619      	mov	r1, r3
 8012b82:	4610      	mov	r0, r2
 8012b84:	f7fe fc47 	bl	8011416 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012b88:	68fb      	ldr	r3, [r7, #12]
 8012b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b8c:	4b23      	ldr	r3, [pc, #140]	; (8012c1c <xTaskResumeAll+0x12c>)
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b92:	429a      	cmp	r2, r3
 8012b94:	d302      	bcc.n	8012b9c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8012b96:	4b22      	ldr	r3, [pc, #136]	; (8012c20 <xTaskResumeAll+0x130>)
 8012b98:	2201      	movs	r2, #1
 8012b9a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012b9c:	4b1c      	ldr	r3, [pc, #112]	; (8012c10 <xTaskResumeAll+0x120>)
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d1cb      	bne.n	8012b3c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d001      	beq.n	8012bae <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012baa:	f000 fce1 	bl	8013570 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8012bae:	4b1d      	ldr	r3, [pc, #116]	; (8012c24 <xTaskResumeAll+0x134>)
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012bb4:	687b      	ldr	r3, [r7, #4]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d010      	beq.n	8012bdc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012bba:	f000 f8d7 	bl	8012d6c <xTaskIncrementTick>
 8012bbe:	4603      	mov	r3, r0
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d002      	beq.n	8012bca <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8012bc4:	4b16      	ldr	r3, [pc, #88]	; (8012c20 <xTaskResumeAll+0x130>)
 8012bc6:	2201      	movs	r2, #1
 8012bc8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	3b01      	subs	r3, #1
 8012bce:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d1f1      	bne.n	8012bba <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8012bd6:	4b13      	ldr	r3, [pc, #76]	; (8012c24 <xTaskResumeAll+0x134>)
 8012bd8:	2200      	movs	r2, #0
 8012bda:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012bdc:	4b10      	ldr	r3, [pc, #64]	; (8012c20 <xTaskResumeAll+0x130>)
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	2b00      	cmp	r3, #0
 8012be2:	d009      	beq.n	8012bf8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012be4:	2301      	movs	r3, #1
 8012be6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012be8:	4b0f      	ldr	r3, [pc, #60]	; (8012c28 <xTaskResumeAll+0x138>)
 8012bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bee:	601a      	str	r2, [r3, #0]
 8012bf0:	f3bf 8f4f 	dsb	sy
 8012bf4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012bf8:	f001 fca4 	bl	8014544 <vPortExitCritical>

	return xAlreadyYielded;
 8012bfc:	68bb      	ldr	r3, [r7, #8]
}
 8012bfe:	4618      	mov	r0, r3
 8012c00:	3710      	adds	r7, #16
 8012c02:	46bd      	mov	sp, r7
 8012c04:	bd80      	pop	{r7, pc}
 8012c06:	bf00      	nop
 8012c08:	20001440 	.word	0x20001440
 8012c0c:	20001418 	.word	0x20001418
 8012c10:	200013d8 	.word	0x200013d8
 8012c14:	20001420 	.word	0x20001420
 8012c18:	20000f48 	.word	0x20000f48
 8012c1c:	20000f44 	.word	0x20000f44
 8012c20:	2000142c 	.word	0x2000142c
 8012c24:	20001428 	.word	0x20001428
 8012c28:	e000ed04 	.word	0xe000ed04

08012c2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012c2c:	b480      	push	{r7}
 8012c2e:	b083      	sub	sp, #12
 8012c30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012c32:	4b05      	ldr	r3, [pc, #20]	; (8012c48 <xTaskGetTickCount+0x1c>)
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012c38:	687b      	ldr	r3, [r7, #4]
}
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	370c      	adds	r7, #12
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c44:	4770      	bx	lr
 8012c46:	bf00      	nop
 8012c48:	2000141c 	.word	0x2000141c

08012c4c <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8012c4c:	b580      	push	{r7, lr}
 8012c4e:	b086      	sub	sp, #24
 8012c50:	af00      	add	r7, sp, #0
 8012c52:	60f8      	str	r0, [r7, #12]
 8012c54:	60b9      	str	r1, [r7, #8]
 8012c56:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8012c58:	2300      	movs	r3, #0
 8012c5a:	617b      	str	r3, [r7, #20]
 8012c5c:	2338      	movs	r3, #56	; 0x38
 8012c5e:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8012c60:	f7ff ff38 	bl	8012ad4 <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8012c64:	4b3a      	ldr	r3, [pc, #232]	; (8012d50 <uxTaskGetSystemState+0x104>)
 8012c66:	681b      	ldr	r3, [r3, #0]
 8012c68:	68ba      	ldr	r2, [r7, #8]
 8012c6a:	429a      	cmp	r2, r3
 8012c6c:	d369      	bcc.n	8012d42 <uxTaskGetSystemState+0xf6>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8012c6e:	693b      	ldr	r3, [r7, #16]
 8012c70:	3b01      	subs	r3, #1
 8012c72:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8012c74:	697a      	ldr	r2, [r7, #20]
 8012c76:	4613      	mov	r3, r2
 8012c78:	00db      	lsls	r3, r3, #3
 8012c7a:	4413      	add	r3, r2
 8012c7c:	009b      	lsls	r3, r3, #2
 8012c7e:	461a      	mov	r2, r3
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	1898      	adds	r0, r3, r2
 8012c84:	693a      	ldr	r2, [r7, #16]
 8012c86:	4613      	mov	r3, r2
 8012c88:	009b      	lsls	r3, r3, #2
 8012c8a:	4413      	add	r3, r2
 8012c8c:	009b      	lsls	r3, r3, #2
 8012c8e:	4a31      	ldr	r2, [pc, #196]	; (8012d54 <uxTaskGetSystemState+0x108>)
 8012c90:	4413      	add	r3, r2
 8012c92:	2201      	movs	r2, #1
 8012c94:	4619      	mov	r1, r3
 8012c96:	f000 fbc9 	bl	801342c <prvListTasksWithinSingleList>
 8012c9a:	4602      	mov	r2, r0
 8012c9c:	697b      	ldr	r3, [r7, #20]
 8012c9e:	4413      	add	r3, r2
 8012ca0:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012ca2:	693b      	ldr	r3, [r7, #16]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d1e2      	bne.n	8012c6e <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8012ca8:	697a      	ldr	r2, [r7, #20]
 8012caa:	4613      	mov	r3, r2
 8012cac:	00db      	lsls	r3, r3, #3
 8012cae:	4413      	add	r3, r2
 8012cb0:	009b      	lsls	r3, r3, #2
 8012cb2:	461a      	mov	r2, r3
 8012cb4:	68fb      	ldr	r3, [r7, #12]
 8012cb6:	4413      	add	r3, r2
 8012cb8:	4a27      	ldr	r2, [pc, #156]	; (8012d58 <uxTaskGetSystemState+0x10c>)
 8012cba:	6811      	ldr	r1, [r2, #0]
 8012cbc:	2202      	movs	r2, #2
 8012cbe:	4618      	mov	r0, r3
 8012cc0:	f000 fbb4 	bl	801342c <prvListTasksWithinSingleList>
 8012cc4:	4602      	mov	r2, r0
 8012cc6:	697b      	ldr	r3, [r7, #20]
 8012cc8:	4413      	add	r3, r2
 8012cca:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8012ccc:	697a      	ldr	r2, [r7, #20]
 8012cce:	4613      	mov	r3, r2
 8012cd0:	00db      	lsls	r3, r3, #3
 8012cd2:	4413      	add	r3, r2
 8012cd4:	009b      	lsls	r3, r3, #2
 8012cd6:	461a      	mov	r2, r3
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	4413      	add	r3, r2
 8012cdc:	4a1f      	ldr	r2, [pc, #124]	; (8012d5c <uxTaskGetSystemState+0x110>)
 8012cde:	6811      	ldr	r1, [r2, #0]
 8012ce0:	2202      	movs	r2, #2
 8012ce2:	4618      	mov	r0, r3
 8012ce4:	f000 fba2 	bl	801342c <prvListTasksWithinSingleList>
 8012ce8:	4602      	mov	r2, r0
 8012cea:	697b      	ldr	r3, [r7, #20]
 8012cec:	4413      	add	r3, r2
 8012cee:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8012cf0:	697a      	ldr	r2, [r7, #20]
 8012cf2:	4613      	mov	r3, r2
 8012cf4:	00db      	lsls	r3, r3, #3
 8012cf6:	4413      	add	r3, r2
 8012cf8:	009b      	lsls	r3, r3, #2
 8012cfa:	461a      	mov	r2, r3
 8012cfc:	68fb      	ldr	r3, [r7, #12]
 8012cfe:	4413      	add	r3, r2
 8012d00:	2204      	movs	r2, #4
 8012d02:	4917      	ldr	r1, [pc, #92]	; (8012d60 <uxTaskGetSystemState+0x114>)
 8012d04:	4618      	mov	r0, r3
 8012d06:	f000 fb91 	bl	801342c <prvListTasksWithinSingleList>
 8012d0a:	4602      	mov	r2, r0
 8012d0c:	697b      	ldr	r3, [r7, #20]
 8012d0e:	4413      	add	r3, r2
 8012d10:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8012d12:	697a      	ldr	r2, [r7, #20]
 8012d14:	4613      	mov	r3, r2
 8012d16:	00db      	lsls	r3, r3, #3
 8012d18:	4413      	add	r3, r2
 8012d1a:	009b      	lsls	r3, r3, #2
 8012d1c:	461a      	mov	r2, r3
 8012d1e:	68fb      	ldr	r3, [r7, #12]
 8012d20:	4413      	add	r3, r2
 8012d22:	2203      	movs	r2, #3
 8012d24:	490f      	ldr	r1, [pc, #60]	; (8012d64 <uxTaskGetSystemState+0x118>)
 8012d26:	4618      	mov	r0, r3
 8012d28:	f000 fb80 	bl	801342c <prvListTasksWithinSingleList>
 8012d2c:	4602      	mov	r2, r0
 8012d2e:	697b      	ldr	r3, [r7, #20]
 8012d30:	4413      	add	r3, r2
 8012d32:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d003      	beq.n	8012d42 <uxTaskGetSystemState+0xf6>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8012d3a:	4b0b      	ldr	r3, [pc, #44]	; (8012d68 <uxTaskGetSystemState+0x11c>)
 8012d3c:	681a      	ldr	r2, [r3, #0]
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8012d42:	f7ff fed5 	bl	8012af0 <xTaskResumeAll>

		return uxTask;
 8012d46:	697b      	ldr	r3, [r7, #20]
	}
 8012d48:	4618      	mov	r0, r3
 8012d4a:	3718      	adds	r7, #24
 8012d4c:	46bd      	mov	sp, r7
 8012d4e:	bd80      	pop	{r7, pc}
 8012d50:	20001418 	.word	0x20001418
 8012d54:	20000f48 	.word	0x20000f48
 8012d58:	200013d0 	.word	0x200013d0
 8012d5c:	200013d4 	.word	0x200013d4
 8012d60:	200013ec 	.word	0x200013ec
 8012d64:	20001404 	.word	0x20001404
 8012d68:	2000efdc 	.word	0x2000efdc

08012d6c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012d6c:	b580      	push	{r7, lr}
 8012d6e:	b086      	sub	sp, #24
 8012d70:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012d72:	2300      	movs	r3, #0
 8012d74:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012d76:	4b4f      	ldr	r3, [pc, #316]	; (8012eb4 <xTaskIncrementTick+0x148>)
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	f040 808f 	bne.w	8012e9e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012d80:	4b4d      	ldr	r3, [pc, #308]	; (8012eb8 <xTaskIncrementTick+0x14c>)
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	3301      	adds	r3, #1
 8012d86:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012d88:	4a4b      	ldr	r2, [pc, #300]	; (8012eb8 <xTaskIncrementTick+0x14c>)
 8012d8a:	693b      	ldr	r3, [r7, #16]
 8012d8c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012d8e:	693b      	ldr	r3, [r7, #16]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	d120      	bne.n	8012dd6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8012d94:	4b49      	ldr	r3, [pc, #292]	; (8012ebc <xTaskIncrementTick+0x150>)
 8012d96:	681b      	ldr	r3, [r3, #0]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	2b00      	cmp	r3, #0
 8012d9c:	d00a      	beq.n	8012db4 <xTaskIncrementTick+0x48>
	__asm volatile
 8012d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012da2:	f383 8811 	msr	BASEPRI, r3
 8012da6:	f3bf 8f6f 	isb	sy
 8012daa:	f3bf 8f4f 	dsb	sy
 8012dae:	603b      	str	r3, [r7, #0]
}
 8012db0:	bf00      	nop
 8012db2:	e7fe      	b.n	8012db2 <xTaskIncrementTick+0x46>
 8012db4:	4b41      	ldr	r3, [pc, #260]	; (8012ebc <xTaskIncrementTick+0x150>)
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	60fb      	str	r3, [r7, #12]
 8012dba:	4b41      	ldr	r3, [pc, #260]	; (8012ec0 <xTaskIncrementTick+0x154>)
 8012dbc:	681b      	ldr	r3, [r3, #0]
 8012dbe:	4a3f      	ldr	r2, [pc, #252]	; (8012ebc <xTaskIncrementTick+0x150>)
 8012dc0:	6013      	str	r3, [r2, #0]
 8012dc2:	4a3f      	ldr	r2, [pc, #252]	; (8012ec0 <xTaskIncrementTick+0x154>)
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	6013      	str	r3, [r2, #0]
 8012dc8:	4b3e      	ldr	r3, [pc, #248]	; (8012ec4 <xTaskIncrementTick+0x158>)
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	3301      	adds	r3, #1
 8012dce:	4a3d      	ldr	r2, [pc, #244]	; (8012ec4 <xTaskIncrementTick+0x158>)
 8012dd0:	6013      	str	r3, [r2, #0]
 8012dd2:	f000 fbcd 	bl	8013570 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012dd6:	4b3c      	ldr	r3, [pc, #240]	; (8012ec8 <xTaskIncrementTick+0x15c>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	693a      	ldr	r2, [r7, #16]
 8012ddc:	429a      	cmp	r2, r3
 8012dde:	d349      	bcc.n	8012e74 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012de0:	4b36      	ldr	r3, [pc, #216]	; (8012ebc <xTaskIncrementTick+0x150>)
 8012de2:	681b      	ldr	r3, [r3, #0]
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	2b00      	cmp	r3, #0
 8012de8:	d104      	bne.n	8012df4 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012dea:	4b37      	ldr	r3, [pc, #220]	; (8012ec8 <xTaskIncrementTick+0x15c>)
 8012dec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012df0:	601a      	str	r2, [r3, #0]
					break;
 8012df2:	e03f      	b.n	8012e74 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012df4:	4b31      	ldr	r3, [pc, #196]	; (8012ebc <xTaskIncrementTick+0x150>)
 8012df6:	681b      	ldr	r3, [r3, #0]
 8012df8:	68db      	ldr	r3, [r3, #12]
 8012dfa:	68db      	ldr	r3, [r3, #12]
 8012dfc:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012dfe:	68bb      	ldr	r3, [r7, #8]
 8012e00:	685b      	ldr	r3, [r3, #4]
 8012e02:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012e04:	693a      	ldr	r2, [r7, #16]
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	429a      	cmp	r2, r3
 8012e0a:	d203      	bcs.n	8012e14 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012e0c:	4a2e      	ldr	r2, [pc, #184]	; (8012ec8 <xTaskIncrementTick+0x15c>)
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012e12:	e02f      	b.n	8012e74 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012e14:	68bb      	ldr	r3, [r7, #8]
 8012e16:	3304      	adds	r3, #4
 8012e18:	4618      	mov	r0, r3
 8012e1a:	f7fe fb59 	bl	80114d0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012e1e:	68bb      	ldr	r3, [r7, #8]
 8012e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d004      	beq.n	8012e30 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012e26:	68bb      	ldr	r3, [r7, #8]
 8012e28:	3318      	adds	r3, #24
 8012e2a:	4618      	mov	r0, r3
 8012e2c:	f7fe fb50 	bl	80114d0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012e30:	68bb      	ldr	r3, [r7, #8]
 8012e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e34:	4b25      	ldr	r3, [pc, #148]	; (8012ecc <xTaskIncrementTick+0x160>)
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	429a      	cmp	r2, r3
 8012e3a:	d903      	bls.n	8012e44 <xTaskIncrementTick+0xd8>
 8012e3c:	68bb      	ldr	r3, [r7, #8]
 8012e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e40:	4a22      	ldr	r2, [pc, #136]	; (8012ecc <xTaskIncrementTick+0x160>)
 8012e42:	6013      	str	r3, [r2, #0]
 8012e44:	68bb      	ldr	r3, [r7, #8]
 8012e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e48:	4613      	mov	r3, r2
 8012e4a:	009b      	lsls	r3, r3, #2
 8012e4c:	4413      	add	r3, r2
 8012e4e:	009b      	lsls	r3, r3, #2
 8012e50:	4a1f      	ldr	r2, [pc, #124]	; (8012ed0 <xTaskIncrementTick+0x164>)
 8012e52:	441a      	add	r2, r3
 8012e54:	68bb      	ldr	r3, [r7, #8]
 8012e56:	3304      	adds	r3, #4
 8012e58:	4619      	mov	r1, r3
 8012e5a:	4610      	mov	r0, r2
 8012e5c:	f7fe fadb 	bl	8011416 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012e60:	68bb      	ldr	r3, [r7, #8]
 8012e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e64:	4b1b      	ldr	r3, [pc, #108]	; (8012ed4 <xTaskIncrementTick+0x168>)
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e6a:	429a      	cmp	r2, r3
 8012e6c:	d3b8      	bcc.n	8012de0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8012e6e:	2301      	movs	r3, #1
 8012e70:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012e72:	e7b5      	b.n	8012de0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012e74:	4b17      	ldr	r3, [pc, #92]	; (8012ed4 <xTaskIncrementTick+0x168>)
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e7a:	4915      	ldr	r1, [pc, #84]	; (8012ed0 <xTaskIncrementTick+0x164>)
 8012e7c:	4613      	mov	r3, r2
 8012e7e:	009b      	lsls	r3, r3, #2
 8012e80:	4413      	add	r3, r2
 8012e82:	009b      	lsls	r3, r3, #2
 8012e84:	440b      	add	r3, r1
 8012e86:	681b      	ldr	r3, [r3, #0]
 8012e88:	2b01      	cmp	r3, #1
 8012e8a:	d901      	bls.n	8012e90 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8012e8c:	2301      	movs	r3, #1
 8012e8e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012e90:	4b11      	ldr	r3, [pc, #68]	; (8012ed8 <xTaskIncrementTick+0x16c>)
 8012e92:	681b      	ldr	r3, [r3, #0]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d007      	beq.n	8012ea8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8012e98:	2301      	movs	r3, #1
 8012e9a:	617b      	str	r3, [r7, #20]
 8012e9c:	e004      	b.n	8012ea8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012e9e:	4b0f      	ldr	r3, [pc, #60]	; (8012edc <xTaskIncrementTick+0x170>)
 8012ea0:	681b      	ldr	r3, [r3, #0]
 8012ea2:	3301      	adds	r3, #1
 8012ea4:	4a0d      	ldr	r2, [pc, #52]	; (8012edc <xTaskIncrementTick+0x170>)
 8012ea6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012ea8:	697b      	ldr	r3, [r7, #20]
}
 8012eaa:	4618      	mov	r0, r3
 8012eac:	3718      	adds	r7, #24
 8012eae:	46bd      	mov	sp, r7
 8012eb0:	bd80      	pop	{r7, pc}
 8012eb2:	bf00      	nop
 8012eb4:	20001440 	.word	0x20001440
 8012eb8:	2000141c 	.word	0x2000141c
 8012ebc:	200013d0 	.word	0x200013d0
 8012ec0:	200013d4 	.word	0x200013d4
 8012ec4:	20001430 	.word	0x20001430
 8012ec8:	20001438 	.word	0x20001438
 8012ecc:	20001420 	.word	0x20001420
 8012ed0:	20000f48 	.word	0x20000f48
 8012ed4:	20000f44 	.word	0x20000f44
 8012ed8:	2000142c 	.word	0x2000142c
 8012edc:	20001428 	.word	0x20001428

08012ee0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012ee0:	b480      	push	{r7}
 8012ee2:	b085      	sub	sp, #20
 8012ee4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012ee6:	4b36      	ldr	r3, [pc, #216]	; (8012fc0 <vTaskSwitchContext+0xe0>)
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d003      	beq.n	8012ef6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012eee:	4b35      	ldr	r3, [pc, #212]	; (8012fc4 <vTaskSwitchContext+0xe4>)
 8012ef0:	2201      	movs	r2, #1
 8012ef2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012ef4:	e05e      	b.n	8012fb4 <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 8012ef6:	4b33      	ldr	r3, [pc, #204]	; (8012fc4 <vTaskSwitchContext+0xe4>)
 8012ef8:	2200      	movs	r2, #0
 8012efa:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8012efc:	4b32      	ldr	r3, [pc, #200]	; (8012fc8 <vTaskSwitchContext+0xe8>)
 8012efe:	681b      	ldr	r3, [r3, #0]
 8012f00:	4a32      	ldr	r2, [pc, #200]	; (8012fcc <vTaskSwitchContext+0xec>)
 8012f02:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8012f04:	4b31      	ldr	r3, [pc, #196]	; (8012fcc <vTaskSwitchContext+0xec>)
 8012f06:	681a      	ldr	r2, [r3, #0]
 8012f08:	4b31      	ldr	r3, [pc, #196]	; (8012fd0 <vTaskSwitchContext+0xf0>)
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	429a      	cmp	r2, r3
 8012f0e:	d909      	bls.n	8012f24 <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8012f10:	4b30      	ldr	r3, [pc, #192]	; (8012fd4 <vTaskSwitchContext+0xf4>)
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8012f16:	4a2d      	ldr	r2, [pc, #180]	; (8012fcc <vTaskSwitchContext+0xec>)
 8012f18:	6810      	ldr	r0, [r2, #0]
 8012f1a:	4a2d      	ldr	r2, [pc, #180]	; (8012fd0 <vTaskSwitchContext+0xf0>)
 8012f1c:	6812      	ldr	r2, [r2, #0]
 8012f1e:	1a82      	subs	r2, r0, r2
 8012f20:	440a      	add	r2, r1
 8012f22:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8012f24:	4b29      	ldr	r3, [pc, #164]	; (8012fcc <vTaskSwitchContext+0xec>)
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	4a29      	ldr	r2, [pc, #164]	; (8012fd0 <vTaskSwitchContext+0xf0>)
 8012f2a:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f2c:	4b2a      	ldr	r3, [pc, #168]	; (8012fd8 <vTaskSwitchContext+0xf8>)
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	60fb      	str	r3, [r7, #12]
 8012f32:	e010      	b.n	8012f56 <vTaskSwitchContext+0x76>
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	2b00      	cmp	r3, #0
 8012f38:	d10a      	bne.n	8012f50 <vTaskSwitchContext+0x70>
	__asm volatile
 8012f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f3e:	f383 8811 	msr	BASEPRI, r3
 8012f42:	f3bf 8f6f 	isb	sy
 8012f46:	f3bf 8f4f 	dsb	sy
 8012f4a:	607b      	str	r3, [r7, #4]
}
 8012f4c:	bf00      	nop
 8012f4e:	e7fe      	b.n	8012f4e <vTaskSwitchContext+0x6e>
 8012f50:	68fb      	ldr	r3, [r7, #12]
 8012f52:	3b01      	subs	r3, #1
 8012f54:	60fb      	str	r3, [r7, #12]
 8012f56:	4921      	ldr	r1, [pc, #132]	; (8012fdc <vTaskSwitchContext+0xfc>)
 8012f58:	68fa      	ldr	r2, [r7, #12]
 8012f5a:	4613      	mov	r3, r2
 8012f5c:	009b      	lsls	r3, r3, #2
 8012f5e:	4413      	add	r3, r2
 8012f60:	009b      	lsls	r3, r3, #2
 8012f62:	440b      	add	r3, r1
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d0e4      	beq.n	8012f34 <vTaskSwitchContext+0x54>
 8012f6a:	68fa      	ldr	r2, [r7, #12]
 8012f6c:	4613      	mov	r3, r2
 8012f6e:	009b      	lsls	r3, r3, #2
 8012f70:	4413      	add	r3, r2
 8012f72:	009b      	lsls	r3, r3, #2
 8012f74:	4a19      	ldr	r2, [pc, #100]	; (8012fdc <vTaskSwitchContext+0xfc>)
 8012f76:	4413      	add	r3, r2
 8012f78:	60bb      	str	r3, [r7, #8]
 8012f7a:	68bb      	ldr	r3, [r7, #8]
 8012f7c:	685b      	ldr	r3, [r3, #4]
 8012f7e:	685a      	ldr	r2, [r3, #4]
 8012f80:	68bb      	ldr	r3, [r7, #8]
 8012f82:	605a      	str	r2, [r3, #4]
 8012f84:	68bb      	ldr	r3, [r7, #8]
 8012f86:	685a      	ldr	r2, [r3, #4]
 8012f88:	68bb      	ldr	r3, [r7, #8]
 8012f8a:	3308      	adds	r3, #8
 8012f8c:	429a      	cmp	r2, r3
 8012f8e:	d104      	bne.n	8012f9a <vTaskSwitchContext+0xba>
 8012f90:	68bb      	ldr	r3, [r7, #8]
 8012f92:	685b      	ldr	r3, [r3, #4]
 8012f94:	685a      	ldr	r2, [r3, #4]
 8012f96:	68bb      	ldr	r3, [r7, #8]
 8012f98:	605a      	str	r2, [r3, #4]
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	685b      	ldr	r3, [r3, #4]
 8012f9e:	68db      	ldr	r3, [r3, #12]
 8012fa0:	4a0c      	ldr	r2, [pc, #48]	; (8012fd4 <vTaskSwitchContext+0xf4>)
 8012fa2:	6013      	str	r3, [r2, #0]
 8012fa4:	4a0c      	ldr	r2, [pc, #48]	; (8012fd8 <vTaskSwitchContext+0xf8>)
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8012faa:	4b0a      	ldr	r3, [pc, #40]	; (8012fd4 <vTaskSwitchContext+0xf4>)
 8012fac:	681b      	ldr	r3, [r3, #0]
 8012fae:	3358      	adds	r3, #88	; 0x58
 8012fb0:	4a0b      	ldr	r2, [pc, #44]	; (8012fe0 <vTaskSwitchContext+0x100>)
 8012fb2:	6013      	str	r3, [r2, #0]
}
 8012fb4:	bf00      	nop
 8012fb6:	3714      	adds	r7, #20
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fbe:	4770      	bx	lr
 8012fc0:	20001440 	.word	0x20001440
 8012fc4:	2000142c 	.word	0x2000142c
 8012fc8:	2000efdc 	.word	0x2000efdc
 8012fcc:	20001448 	.word	0x20001448
 8012fd0:	20001444 	.word	0x20001444
 8012fd4:	20000f44 	.word	0x20000f44
 8012fd8:	20001420 	.word	0x20001420
 8012fdc:	20000f48 	.word	0x20000f48
 8012fe0:	2000019c 	.word	0x2000019c

08012fe4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b084      	sub	sp, #16
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]
 8012fec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d10a      	bne.n	801300a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8012ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ff8:	f383 8811 	msr	BASEPRI, r3
 8012ffc:	f3bf 8f6f 	isb	sy
 8013000:	f3bf 8f4f 	dsb	sy
 8013004:	60fb      	str	r3, [r7, #12]
}
 8013006:	bf00      	nop
 8013008:	e7fe      	b.n	8013008 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801300a:	4b07      	ldr	r3, [pc, #28]	; (8013028 <vTaskPlaceOnEventList+0x44>)
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	3318      	adds	r3, #24
 8013010:	4619      	mov	r1, r3
 8013012:	6878      	ldr	r0, [r7, #4]
 8013014:	f7fe fa23 	bl	801145e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013018:	2101      	movs	r1, #1
 801301a:	6838      	ldr	r0, [r7, #0]
 801301c:	f000 fd92 	bl	8013b44 <prvAddCurrentTaskToDelayedList>
}
 8013020:	bf00      	nop
 8013022:	3710      	adds	r7, #16
 8013024:	46bd      	mov	sp, r7
 8013026:	bd80      	pop	{r7, pc}
 8013028:	20000f44 	.word	0x20000f44

0801302c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801302c:	b580      	push	{r7, lr}
 801302e:	b086      	sub	sp, #24
 8013030:	af00      	add	r7, sp, #0
 8013032:	60f8      	str	r0, [r7, #12]
 8013034:	60b9      	str	r1, [r7, #8]
 8013036:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d10a      	bne.n	8013054 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801303e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013042:	f383 8811 	msr	BASEPRI, r3
 8013046:	f3bf 8f6f 	isb	sy
 801304a:	f3bf 8f4f 	dsb	sy
 801304e:	617b      	str	r3, [r7, #20]
}
 8013050:	bf00      	nop
 8013052:	e7fe      	b.n	8013052 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013054:	4b0a      	ldr	r3, [pc, #40]	; (8013080 <vTaskPlaceOnEventListRestricted+0x54>)
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	3318      	adds	r3, #24
 801305a:	4619      	mov	r1, r3
 801305c:	68f8      	ldr	r0, [r7, #12]
 801305e:	f7fe f9da 	bl	8011416 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8013062:	687b      	ldr	r3, [r7, #4]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d002      	beq.n	801306e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8013068:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801306c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801306e:	6879      	ldr	r1, [r7, #4]
 8013070:	68b8      	ldr	r0, [r7, #8]
 8013072:	f000 fd67 	bl	8013b44 <prvAddCurrentTaskToDelayedList>
	}
 8013076:	bf00      	nop
 8013078:	3718      	adds	r7, #24
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}
 801307e:	bf00      	nop
 8013080:	20000f44 	.word	0x20000f44

08013084 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013084:	b580      	push	{r7, lr}
 8013086:	b086      	sub	sp, #24
 8013088:	af00      	add	r7, sp, #0
 801308a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	68db      	ldr	r3, [r3, #12]
 8013090:	68db      	ldr	r3, [r3, #12]
 8013092:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013094:	693b      	ldr	r3, [r7, #16]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d10a      	bne.n	80130b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801309a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801309e:	f383 8811 	msr	BASEPRI, r3
 80130a2:	f3bf 8f6f 	isb	sy
 80130a6:	f3bf 8f4f 	dsb	sy
 80130aa:	60fb      	str	r3, [r7, #12]
}
 80130ac:	bf00      	nop
 80130ae:	e7fe      	b.n	80130ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80130b0:	693b      	ldr	r3, [r7, #16]
 80130b2:	3318      	adds	r3, #24
 80130b4:	4618      	mov	r0, r3
 80130b6:	f7fe fa0b 	bl	80114d0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80130ba:	4b1e      	ldr	r3, [pc, #120]	; (8013134 <xTaskRemoveFromEventList+0xb0>)
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d11d      	bne.n	80130fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80130c2:	693b      	ldr	r3, [r7, #16]
 80130c4:	3304      	adds	r3, #4
 80130c6:	4618      	mov	r0, r3
 80130c8:	f7fe fa02 	bl	80114d0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80130cc:	693b      	ldr	r3, [r7, #16]
 80130ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130d0:	4b19      	ldr	r3, [pc, #100]	; (8013138 <xTaskRemoveFromEventList+0xb4>)
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	429a      	cmp	r2, r3
 80130d6:	d903      	bls.n	80130e0 <xTaskRemoveFromEventList+0x5c>
 80130d8:	693b      	ldr	r3, [r7, #16]
 80130da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130dc:	4a16      	ldr	r2, [pc, #88]	; (8013138 <xTaskRemoveFromEventList+0xb4>)
 80130de:	6013      	str	r3, [r2, #0]
 80130e0:	693b      	ldr	r3, [r7, #16]
 80130e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130e4:	4613      	mov	r3, r2
 80130e6:	009b      	lsls	r3, r3, #2
 80130e8:	4413      	add	r3, r2
 80130ea:	009b      	lsls	r3, r3, #2
 80130ec:	4a13      	ldr	r2, [pc, #76]	; (801313c <xTaskRemoveFromEventList+0xb8>)
 80130ee:	441a      	add	r2, r3
 80130f0:	693b      	ldr	r3, [r7, #16]
 80130f2:	3304      	adds	r3, #4
 80130f4:	4619      	mov	r1, r3
 80130f6:	4610      	mov	r0, r2
 80130f8:	f7fe f98d 	bl	8011416 <vListInsertEnd>
 80130fc:	e005      	b.n	801310a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80130fe:	693b      	ldr	r3, [r7, #16]
 8013100:	3318      	adds	r3, #24
 8013102:	4619      	mov	r1, r3
 8013104:	480e      	ldr	r0, [pc, #56]	; (8013140 <xTaskRemoveFromEventList+0xbc>)
 8013106:	f7fe f986 	bl	8011416 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801310a:	693b      	ldr	r3, [r7, #16]
 801310c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801310e:	4b0d      	ldr	r3, [pc, #52]	; (8013144 <xTaskRemoveFromEventList+0xc0>)
 8013110:	681b      	ldr	r3, [r3, #0]
 8013112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013114:	429a      	cmp	r2, r3
 8013116:	d905      	bls.n	8013124 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8013118:	2301      	movs	r3, #1
 801311a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801311c:	4b0a      	ldr	r3, [pc, #40]	; (8013148 <xTaskRemoveFromEventList+0xc4>)
 801311e:	2201      	movs	r2, #1
 8013120:	601a      	str	r2, [r3, #0]
 8013122:	e001      	b.n	8013128 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8013124:	2300      	movs	r3, #0
 8013126:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8013128:	697b      	ldr	r3, [r7, #20]
}
 801312a:	4618      	mov	r0, r3
 801312c:	3718      	adds	r7, #24
 801312e:	46bd      	mov	sp, r7
 8013130:	bd80      	pop	{r7, pc}
 8013132:	bf00      	nop
 8013134:	20001440 	.word	0x20001440
 8013138:	20001420 	.word	0x20001420
 801313c:	20000f48 	.word	0x20000f48
 8013140:	200013d8 	.word	0x200013d8
 8013144:	20000f44 	.word	0x20000f44
 8013148:	2000142c 	.word	0x2000142c

0801314c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801314c:	b480      	push	{r7}
 801314e:	b083      	sub	sp, #12
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8013154:	4b06      	ldr	r3, [pc, #24]	; (8013170 <vTaskInternalSetTimeOutState+0x24>)
 8013156:	681a      	ldr	r2, [r3, #0]
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801315c:	4b05      	ldr	r3, [pc, #20]	; (8013174 <vTaskInternalSetTimeOutState+0x28>)
 801315e:	681a      	ldr	r2, [r3, #0]
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	605a      	str	r2, [r3, #4]
}
 8013164:	bf00      	nop
 8013166:	370c      	adds	r7, #12
 8013168:	46bd      	mov	sp, r7
 801316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801316e:	4770      	bx	lr
 8013170:	20001430 	.word	0x20001430
 8013174:	2000141c 	.word	0x2000141c

08013178 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8013178:	b580      	push	{r7, lr}
 801317a:	b088      	sub	sp, #32
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
 8013180:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d10a      	bne.n	801319e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8013188:	f04f 0350 	mov.w	r3, #80	; 0x50
 801318c:	f383 8811 	msr	BASEPRI, r3
 8013190:	f3bf 8f6f 	isb	sy
 8013194:	f3bf 8f4f 	dsb	sy
 8013198:	613b      	str	r3, [r7, #16]
}
 801319a:	bf00      	nop
 801319c:	e7fe      	b.n	801319c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801319e:	683b      	ldr	r3, [r7, #0]
 80131a0:	2b00      	cmp	r3, #0
 80131a2:	d10a      	bne.n	80131ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80131a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131a8:	f383 8811 	msr	BASEPRI, r3
 80131ac:	f3bf 8f6f 	isb	sy
 80131b0:	f3bf 8f4f 	dsb	sy
 80131b4:	60fb      	str	r3, [r7, #12]
}
 80131b6:	bf00      	nop
 80131b8:	e7fe      	b.n	80131b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80131ba:	f001 f993 	bl	80144e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80131be:	4b1d      	ldr	r3, [pc, #116]	; (8013234 <xTaskCheckForTimeOut+0xbc>)
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	685b      	ldr	r3, [r3, #4]
 80131c8:	69ba      	ldr	r2, [r7, #24]
 80131ca:	1ad3      	subs	r3, r2, r3
 80131cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80131ce:	683b      	ldr	r3, [r7, #0]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80131d6:	d102      	bne.n	80131de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80131d8:	2300      	movs	r3, #0
 80131da:	61fb      	str	r3, [r7, #28]
 80131dc:	e023      	b.n	8013226 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	681a      	ldr	r2, [r3, #0]
 80131e2:	4b15      	ldr	r3, [pc, #84]	; (8013238 <xTaskCheckForTimeOut+0xc0>)
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	429a      	cmp	r2, r3
 80131e8:	d007      	beq.n	80131fa <xTaskCheckForTimeOut+0x82>
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	685b      	ldr	r3, [r3, #4]
 80131ee:	69ba      	ldr	r2, [r7, #24]
 80131f0:	429a      	cmp	r2, r3
 80131f2:	d302      	bcc.n	80131fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80131f4:	2301      	movs	r3, #1
 80131f6:	61fb      	str	r3, [r7, #28]
 80131f8:	e015      	b.n	8013226 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80131fa:	683b      	ldr	r3, [r7, #0]
 80131fc:	681b      	ldr	r3, [r3, #0]
 80131fe:	697a      	ldr	r2, [r7, #20]
 8013200:	429a      	cmp	r2, r3
 8013202:	d20b      	bcs.n	801321c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8013204:	683b      	ldr	r3, [r7, #0]
 8013206:	681a      	ldr	r2, [r3, #0]
 8013208:	697b      	ldr	r3, [r7, #20]
 801320a:	1ad2      	subs	r2, r2, r3
 801320c:	683b      	ldr	r3, [r7, #0]
 801320e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8013210:	6878      	ldr	r0, [r7, #4]
 8013212:	f7ff ff9b 	bl	801314c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8013216:	2300      	movs	r3, #0
 8013218:	61fb      	str	r3, [r7, #28]
 801321a:	e004      	b.n	8013226 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801321c:	683b      	ldr	r3, [r7, #0]
 801321e:	2200      	movs	r2, #0
 8013220:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8013222:	2301      	movs	r3, #1
 8013224:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8013226:	f001 f98d 	bl	8014544 <vPortExitCritical>

	return xReturn;
 801322a:	69fb      	ldr	r3, [r7, #28]
}
 801322c:	4618      	mov	r0, r3
 801322e:	3720      	adds	r7, #32
 8013230:	46bd      	mov	sp, r7
 8013232:	bd80      	pop	{r7, pc}
 8013234:	2000141c 	.word	0x2000141c
 8013238:	20001430 	.word	0x20001430

0801323c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801323c:	b480      	push	{r7}
 801323e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8013240:	4b03      	ldr	r3, [pc, #12]	; (8013250 <vTaskMissedYield+0x14>)
 8013242:	2201      	movs	r2, #1
 8013244:	601a      	str	r2, [r3, #0]
}
 8013246:	bf00      	nop
 8013248:	46bd      	mov	sp, r7
 801324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801324e:	4770      	bx	lr
 8013250:	2000142c 	.word	0x2000142c

08013254 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8013254:	b580      	push	{r7, lr}
 8013256:	b082      	sub	sp, #8
 8013258:	af00      	add	r7, sp, #0
 801325a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801325c:	f000 f852 	bl	8013304 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8013260:	4b06      	ldr	r3, [pc, #24]	; (801327c <prvIdleTask+0x28>)
 8013262:	681b      	ldr	r3, [r3, #0]
 8013264:	2b01      	cmp	r3, #1
 8013266:	d9f9      	bls.n	801325c <prvIdleTask+0x8>
			{
				taskYIELD();
 8013268:	4b05      	ldr	r3, [pc, #20]	; (8013280 <prvIdleTask+0x2c>)
 801326a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801326e:	601a      	str	r2, [r3, #0]
 8013270:	f3bf 8f4f 	dsb	sy
 8013274:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8013278:	e7f0      	b.n	801325c <prvIdleTask+0x8>
 801327a:	bf00      	nop
 801327c:	20000f48 	.word	0x20000f48
 8013280:	e000ed04 	.word	0xe000ed04

08013284 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8013284:	b580      	push	{r7, lr}
 8013286:	b082      	sub	sp, #8
 8013288:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801328a:	2300      	movs	r3, #0
 801328c:	607b      	str	r3, [r7, #4]
 801328e:	e00c      	b.n	80132aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8013290:	687a      	ldr	r2, [r7, #4]
 8013292:	4613      	mov	r3, r2
 8013294:	009b      	lsls	r3, r3, #2
 8013296:	4413      	add	r3, r2
 8013298:	009b      	lsls	r3, r3, #2
 801329a:	4a12      	ldr	r2, [pc, #72]	; (80132e4 <prvInitialiseTaskLists+0x60>)
 801329c:	4413      	add	r3, r2
 801329e:	4618      	mov	r0, r3
 80132a0:	f7fe f88c 	bl	80113bc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	3301      	adds	r3, #1
 80132a8:	607b      	str	r3, [r7, #4]
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	2b37      	cmp	r3, #55	; 0x37
 80132ae:	d9ef      	bls.n	8013290 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80132b0:	480d      	ldr	r0, [pc, #52]	; (80132e8 <prvInitialiseTaskLists+0x64>)
 80132b2:	f7fe f883 	bl	80113bc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80132b6:	480d      	ldr	r0, [pc, #52]	; (80132ec <prvInitialiseTaskLists+0x68>)
 80132b8:	f7fe f880 	bl	80113bc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80132bc:	480c      	ldr	r0, [pc, #48]	; (80132f0 <prvInitialiseTaskLists+0x6c>)
 80132be:	f7fe f87d 	bl	80113bc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80132c2:	480c      	ldr	r0, [pc, #48]	; (80132f4 <prvInitialiseTaskLists+0x70>)
 80132c4:	f7fe f87a 	bl	80113bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80132c8:	480b      	ldr	r0, [pc, #44]	; (80132f8 <prvInitialiseTaskLists+0x74>)
 80132ca:	f7fe f877 	bl	80113bc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80132ce:	4b0b      	ldr	r3, [pc, #44]	; (80132fc <prvInitialiseTaskLists+0x78>)
 80132d0:	4a05      	ldr	r2, [pc, #20]	; (80132e8 <prvInitialiseTaskLists+0x64>)
 80132d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80132d4:	4b0a      	ldr	r3, [pc, #40]	; (8013300 <prvInitialiseTaskLists+0x7c>)
 80132d6:	4a05      	ldr	r2, [pc, #20]	; (80132ec <prvInitialiseTaskLists+0x68>)
 80132d8:	601a      	str	r2, [r3, #0]
}
 80132da:	bf00      	nop
 80132dc:	3708      	adds	r7, #8
 80132de:	46bd      	mov	sp, r7
 80132e0:	bd80      	pop	{r7, pc}
 80132e2:	bf00      	nop
 80132e4:	20000f48 	.word	0x20000f48
 80132e8:	200013a8 	.word	0x200013a8
 80132ec:	200013bc 	.word	0x200013bc
 80132f0:	200013d8 	.word	0x200013d8
 80132f4:	200013ec 	.word	0x200013ec
 80132f8:	20001404 	.word	0x20001404
 80132fc:	200013d0 	.word	0x200013d0
 8013300:	200013d4 	.word	0x200013d4

08013304 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013304:	b580      	push	{r7, lr}
 8013306:	b082      	sub	sp, #8
 8013308:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801330a:	e019      	b.n	8013340 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801330c:	f001 f8ea 	bl	80144e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013310:	4b10      	ldr	r3, [pc, #64]	; (8013354 <prvCheckTasksWaitingTermination+0x50>)
 8013312:	68db      	ldr	r3, [r3, #12]
 8013314:	68db      	ldr	r3, [r3, #12]
 8013316:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	3304      	adds	r3, #4
 801331c:	4618      	mov	r0, r3
 801331e:	f7fe f8d7 	bl	80114d0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013322:	4b0d      	ldr	r3, [pc, #52]	; (8013358 <prvCheckTasksWaitingTermination+0x54>)
 8013324:	681b      	ldr	r3, [r3, #0]
 8013326:	3b01      	subs	r3, #1
 8013328:	4a0b      	ldr	r2, [pc, #44]	; (8013358 <prvCheckTasksWaitingTermination+0x54>)
 801332a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801332c:	4b0b      	ldr	r3, [pc, #44]	; (801335c <prvCheckTasksWaitingTermination+0x58>)
 801332e:	681b      	ldr	r3, [r3, #0]
 8013330:	3b01      	subs	r3, #1
 8013332:	4a0a      	ldr	r2, [pc, #40]	; (801335c <prvCheckTasksWaitingTermination+0x58>)
 8013334:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8013336:	f001 f905 	bl	8014544 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801333a:	6878      	ldr	r0, [r7, #4]
 801333c:	f000 f8e4 	bl	8013508 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013340:	4b06      	ldr	r3, [pc, #24]	; (801335c <prvCheckTasksWaitingTermination+0x58>)
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d1e1      	bne.n	801330c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8013348:	bf00      	nop
 801334a:	bf00      	nop
 801334c:	3708      	adds	r7, #8
 801334e:	46bd      	mov	sp, r7
 8013350:	bd80      	pop	{r7, pc}
 8013352:	bf00      	nop
 8013354:	200013ec 	.word	0x200013ec
 8013358:	20001418 	.word	0x20001418
 801335c:	20001400 	.word	0x20001400

08013360 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8013360:	b580      	push	{r7, lr}
 8013362:	b086      	sub	sp, #24
 8013364:	af00      	add	r7, sp, #0
 8013366:	60f8      	str	r0, [r7, #12]
 8013368:	60b9      	str	r1, [r7, #8]
 801336a:	607a      	str	r2, [r7, #4]
 801336c:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	2b00      	cmp	r3, #0
 8013372:	d102      	bne.n	801337a <vTaskGetInfo+0x1a>
 8013374:	4b2c      	ldr	r3, [pc, #176]	; (8013428 <vTaskGetInfo+0xc8>)
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	e000      	b.n	801337c <vTaskGetInfo+0x1c>
 801337a:	68fb      	ldr	r3, [r7, #12]
 801337c:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 801337e:	68bb      	ldr	r3, [r7, #8]
 8013380:	697a      	ldr	r2, [r7, #20]
 8013382:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8013384:	697b      	ldr	r3, [r7, #20]
 8013386:	f103 0234 	add.w	r2, r3, #52	; 0x34
 801338a:	68bb      	ldr	r3, [r7, #8]
 801338c:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 801338e:	697b      	ldr	r3, [r7, #20]
 8013390:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013392:	68bb      	ldr	r3, [r7, #8]
 8013394:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8013396:	697b      	ldr	r3, [r7, #20]
 8013398:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801339a:	68bb      	ldr	r3, [r7, #8]
 801339c:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 801339e:	697b      	ldr	r3, [r7, #20]
 80133a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80133a2:	68bb      	ldr	r3, [r7, #8]
 80133a4:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 80133a6:	697b      	ldr	r3, [r7, #20]
 80133a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80133aa:	68bb      	ldr	r3, [r7, #8]
 80133ac:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 80133ae:	697b      	ldr	r3, [r7, #20]
 80133b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80133b2:	68bb      	ldr	r3, [r7, #8]
 80133b4:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 80133b6:	78fb      	ldrb	r3, [r7, #3]
 80133b8:	2b05      	cmp	r3, #5
 80133ba:	d01a      	beq.n	80133f2 <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 80133bc:	4b1a      	ldr	r3, [pc, #104]	; (8013428 <vTaskGetInfo+0xc8>)
 80133be:	681b      	ldr	r3, [r3, #0]
 80133c0:	697a      	ldr	r2, [r7, #20]
 80133c2:	429a      	cmp	r2, r3
 80133c4:	d103      	bne.n	80133ce <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 80133c6:	68bb      	ldr	r3, [r7, #8]
 80133c8:	2200      	movs	r2, #0
 80133ca:	731a      	strb	r2, [r3, #12]
 80133cc:	e018      	b.n	8013400 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 80133ce:	68bb      	ldr	r3, [r7, #8]
 80133d0:	78fa      	ldrb	r2, [r7, #3]
 80133d2:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 80133d4:	78fb      	ldrb	r3, [r7, #3]
 80133d6:	2b03      	cmp	r3, #3
 80133d8:	d112      	bne.n	8013400 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 80133da:	f7ff fb7b 	bl	8012ad4 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80133de:	697b      	ldr	r3, [r7, #20]
 80133e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d002      	beq.n	80133ec <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 80133e6:	68bb      	ldr	r3, [r7, #8]
 80133e8:	2202      	movs	r2, #2
 80133ea:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 80133ec:	f7ff fb80 	bl	8012af0 <xTaskResumeAll>
 80133f0:	e006      	b.n	8013400 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 80133f2:	6978      	ldr	r0, [r7, #20]
 80133f4:	f7ff fa94 	bl	8012920 <eTaskGetState>
 80133f8:	4603      	mov	r3, r0
 80133fa:	461a      	mov	r2, r3
 80133fc:	68bb      	ldr	r3, [r7, #8]
 80133fe:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8013400:	687b      	ldr	r3, [r7, #4]
 8013402:	2b00      	cmp	r3, #0
 8013404:	d009      	beq.n	801341a <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8013406:	697b      	ldr	r3, [r7, #20]
 8013408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801340a:	4618      	mov	r0, r3
 801340c:	f000 f860 	bl	80134d0 <prvTaskCheckFreeStackSpace>
 8013410:	4603      	mov	r3, r0
 8013412:	461a      	mov	r2, r3
 8013414:	68bb      	ldr	r3, [r7, #8]
 8013416:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8013418:	e002      	b.n	8013420 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 801341a:	68bb      	ldr	r3, [r7, #8]
 801341c:	2200      	movs	r2, #0
 801341e:	841a      	strh	r2, [r3, #32]
	}
 8013420:	bf00      	nop
 8013422:	3718      	adds	r7, #24
 8013424:	46bd      	mov	sp, r7
 8013426:	bd80      	pop	{r7, pc}
 8013428:	20000f44 	.word	0x20000f44

0801342c <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 801342c:	b580      	push	{r7, lr}
 801342e:	b08a      	sub	sp, #40	; 0x28
 8013430:	af00      	add	r7, sp, #0
 8013432:	60f8      	str	r0, [r7, #12]
 8013434:	60b9      	str	r1, [r7, #8]
 8013436:	4613      	mov	r3, r2
 8013438:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 801343a:	2300      	movs	r3, #0
 801343c:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 801343e:	68bb      	ldr	r3, [r7, #8]
 8013440:	681b      	ldr	r3, [r3, #0]
 8013442:	2b00      	cmp	r3, #0
 8013444:	d03f      	beq.n	80134c6 <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013446:	68bb      	ldr	r3, [r7, #8]
 8013448:	623b      	str	r3, [r7, #32]
 801344a:	6a3b      	ldr	r3, [r7, #32]
 801344c:	685b      	ldr	r3, [r3, #4]
 801344e:	685a      	ldr	r2, [r3, #4]
 8013450:	6a3b      	ldr	r3, [r7, #32]
 8013452:	605a      	str	r2, [r3, #4]
 8013454:	6a3b      	ldr	r3, [r7, #32]
 8013456:	685a      	ldr	r2, [r3, #4]
 8013458:	6a3b      	ldr	r3, [r7, #32]
 801345a:	3308      	adds	r3, #8
 801345c:	429a      	cmp	r2, r3
 801345e:	d104      	bne.n	801346a <prvListTasksWithinSingleList+0x3e>
 8013460:	6a3b      	ldr	r3, [r7, #32]
 8013462:	685b      	ldr	r3, [r3, #4]
 8013464:	685a      	ldr	r2, [r3, #4]
 8013466:	6a3b      	ldr	r3, [r7, #32]
 8013468:	605a      	str	r2, [r3, #4]
 801346a:	6a3b      	ldr	r3, [r7, #32]
 801346c:	685b      	ldr	r3, [r3, #4]
 801346e:	68db      	ldr	r3, [r3, #12]
 8013470:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013472:	68bb      	ldr	r3, [r7, #8]
 8013474:	61bb      	str	r3, [r7, #24]
 8013476:	69bb      	ldr	r3, [r7, #24]
 8013478:	685b      	ldr	r3, [r3, #4]
 801347a:	685a      	ldr	r2, [r3, #4]
 801347c:	69bb      	ldr	r3, [r7, #24]
 801347e:	605a      	str	r2, [r3, #4]
 8013480:	69bb      	ldr	r3, [r7, #24]
 8013482:	685a      	ldr	r2, [r3, #4]
 8013484:	69bb      	ldr	r3, [r7, #24]
 8013486:	3308      	adds	r3, #8
 8013488:	429a      	cmp	r2, r3
 801348a:	d104      	bne.n	8013496 <prvListTasksWithinSingleList+0x6a>
 801348c:	69bb      	ldr	r3, [r7, #24]
 801348e:	685b      	ldr	r3, [r3, #4]
 8013490:	685a      	ldr	r2, [r3, #4]
 8013492:	69bb      	ldr	r3, [r7, #24]
 8013494:	605a      	str	r2, [r3, #4]
 8013496:	69bb      	ldr	r3, [r7, #24]
 8013498:	685b      	ldr	r3, [r3, #4]
 801349a:	68db      	ldr	r3, [r3, #12]
 801349c:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 801349e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80134a0:	4613      	mov	r3, r2
 80134a2:	00db      	lsls	r3, r3, #3
 80134a4:	4413      	add	r3, r2
 80134a6:	009b      	lsls	r3, r3, #2
 80134a8:	461a      	mov	r2, r3
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	1899      	adds	r1, r3, r2
 80134ae:	79fb      	ldrb	r3, [r7, #7]
 80134b0:	2201      	movs	r2, #1
 80134b2:	6978      	ldr	r0, [r7, #20]
 80134b4:	f7ff ff54 	bl	8013360 <vTaskGetInfo>
				uxTask++;
 80134b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ba:	3301      	adds	r3, #1
 80134bc:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 80134be:	697a      	ldr	r2, [r7, #20]
 80134c0:	69fb      	ldr	r3, [r7, #28]
 80134c2:	429a      	cmp	r2, r3
 80134c4:	d1d5      	bne.n	8013472 <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 80134c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80134c8:	4618      	mov	r0, r3
 80134ca:	3728      	adds	r7, #40	; 0x28
 80134cc:	46bd      	mov	sp, r7
 80134ce:	bd80      	pop	{r7, pc}

080134d0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 80134d0:	b480      	push	{r7}
 80134d2:	b085      	sub	sp, #20
 80134d4:	af00      	add	r7, sp, #0
 80134d6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 80134d8:	2300      	movs	r3, #0
 80134da:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80134dc:	e005      	b.n	80134ea <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	3301      	adds	r3, #1
 80134e2:	607b      	str	r3, [r7, #4]
			ulCount++;
 80134e4:	68fb      	ldr	r3, [r7, #12]
 80134e6:	3301      	adds	r3, #1
 80134e8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	781b      	ldrb	r3, [r3, #0]
 80134ee:	2ba5      	cmp	r3, #165	; 0xa5
 80134f0:	d0f5      	beq.n	80134de <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 80134f2:	68fb      	ldr	r3, [r7, #12]
 80134f4:	089b      	lsrs	r3, r3, #2
 80134f6:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	b29b      	uxth	r3, r3
	}
 80134fc:	4618      	mov	r0, r3
 80134fe:	3714      	adds	r7, #20
 8013500:	46bd      	mov	sp, r7
 8013502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013506:	4770      	bx	lr

08013508 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013508:	b580      	push	{r7, lr}
 801350a:	b084      	sub	sp, #16
 801350c:	af00      	add	r7, sp, #0
 801350e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	3358      	adds	r3, #88	; 0x58
 8013514:	4618      	mov	r0, r3
 8013516:	f002 feab 	bl	8016270 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8013520:	2b00      	cmp	r3, #0
 8013522:	d108      	bne.n	8013536 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013528:	4618      	mov	r0, r3
 801352a:	f001 f9c9 	bl	80148c0 <vPortFree>
				vPortFree( pxTCB );
 801352e:	6878      	ldr	r0, [r7, #4]
 8013530:	f001 f9c6 	bl	80148c0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013534:	e018      	b.n	8013568 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801353c:	2b01      	cmp	r3, #1
 801353e:	d103      	bne.n	8013548 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8013540:	6878      	ldr	r0, [r7, #4]
 8013542:	f001 f9bd 	bl	80148c0 <vPortFree>
	}
 8013546:	e00f      	b.n	8013568 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 801354e:	2b02      	cmp	r3, #2
 8013550:	d00a      	beq.n	8013568 <prvDeleteTCB+0x60>
	__asm volatile
 8013552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013556:	f383 8811 	msr	BASEPRI, r3
 801355a:	f3bf 8f6f 	isb	sy
 801355e:	f3bf 8f4f 	dsb	sy
 8013562:	60fb      	str	r3, [r7, #12]
}
 8013564:	bf00      	nop
 8013566:	e7fe      	b.n	8013566 <prvDeleteTCB+0x5e>
	}
 8013568:	bf00      	nop
 801356a:	3710      	adds	r7, #16
 801356c:	46bd      	mov	sp, r7
 801356e:	bd80      	pop	{r7, pc}

08013570 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8013570:	b480      	push	{r7}
 8013572:	b083      	sub	sp, #12
 8013574:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013576:	4b0c      	ldr	r3, [pc, #48]	; (80135a8 <prvResetNextTaskUnblockTime+0x38>)
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	2b00      	cmp	r3, #0
 801357e:	d104      	bne.n	801358a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013580:	4b0a      	ldr	r3, [pc, #40]	; (80135ac <prvResetNextTaskUnblockTime+0x3c>)
 8013582:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013586:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8013588:	e008      	b.n	801359c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801358a:	4b07      	ldr	r3, [pc, #28]	; (80135a8 <prvResetNextTaskUnblockTime+0x38>)
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	68db      	ldr	r3, [r3, #12]
 8013590:	68db      	ldr	r3, [r3, #12]
 8013592:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	685b      	ldr	r3, [r3, #4]
 8013598:	4a04      	ldr	r2, [pc, #16]	; (80135ac <prvResetNextTaskUnblockTime+0x3c>)
 801359a:	6013      	str	r3, [r2, #0]
}
 801359c:	bf00      	nop
 801359e:	370c      	adds	r7, #12
 80135a0:	46bd      	mov	sp, r7
 80135a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135a6:	4770      	bx	lr
 80135a8:	200013d0 	.word	0x200013d0
 80135ac:	20001438 	.word	0x20001438

080135b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80135b0:	b480      	push	{r7}
 80135b2:	b083      	sub	sp, #12
 80135b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80135b6:	4b0b      	ldr	r3, [pc, #44]	; (80135e4 <xTaskGetSchedulerState+0x34>)
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d102      	bne.n	80135c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80135be:	2301      	movs	r3, #1
 80135c0:	607b      	str	r3, [r7, #4]
 80135c2:	e008      	b.n	80135d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80135c4:	4b08      	ldr	r3, [pc, #32]	; (80135e8 <xTaskGetSchedulerState+0x38>)
 80135c6:	681b      	ldr	r3, [r3, #0]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d102      	bne.n	80135d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80135cc:	2302      	movs	r3, #2
 80135ce:	607b      	str	r3, [r7, #4]
 80135d0:	e001      	b.n	80135d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80135d2:	2300      	movs	r3, #0
 80135d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80135d6:	687b      	ldr	r3, [r7, #4]
	}
 80135d8:	4618      	mov	r0, r3
 80135da:	370c      	adds	r7, #12
 80135dc:	46bd      	mov	sp, r7
 80135de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e2:	4770      	bx	lr
 80135e4:	20001424 	.word	0x20001424
 80135e8:	20001440 	.word	0x20001440

080135ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80135ec:	b580      	push	{r7, lr}
 80135ee:	b084      	sub	sp, #16
 80135f0:	af00      	add	r7, sp, #0
 80135f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80135f8:	2300      	movs	r3, #0
 80135fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d051      	beq.n	80136a6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013602:	68bb      	ldr	r3, [r7, #8]
 8013604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013606:	4b2a      	ldr	r3, [pc, #168]	; (80136b0 <xTaskPriorityInherit+0xc4>)
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801360c:	429a      	cmp	r2, r3
 801360e:	d241      	bcs.n	8013694 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013610:	68bb      	ldr	r3, [r7, #8]
 8013612:	699b      	ldr	r3, [r3, #24]
 8013614:	2b00      	cmp	r3, #0
 8013616:	db06      	blt.n	8013626 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013618:	4b25      	ldr	r3, [pc, #148]	; (80136b0 <xTaskPriorityInherit+0xc4>)
 801361a:	681b      	ldr	r3, [r3, #0]
 801361c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801361e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013622:	68bb      	ldr	r3, [r7, #8]
 8013624:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013626:	68bb      	ldr	r3, [r7, #8]
 8013628:	6959      	ldr	r1, [r3, #20]
 801362a:	68bb      	ldr	r3, [r7, #8]
 801362c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801362e:	4613      	mov	r3, r2
 8013630:	009b      	lsls	r3, r3, #2
 8013632:	4413      	add	r3, r2
 8013634:	009b      	lsls	r3, r3, #2
 8013636:	4a1f      	ldr	r2, [pc, #124]	; (80136b4 <xTaskPriorityInherit+0xc8>)
 8013638:	4413      	add	r3, r2
 801363a:	4299      	cmp	r1, r3
 801363c:	d122      	bne.n	8013684 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801363e:	68bb      	ldr	r3, [r7, #8]
 8013640:	3304      	adds	r3, #4
 8013642:	4618      	mov	r0, r3
 8013644:	f7fd ff44 	bl	80114d0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013648:	4b19      	ldr	r3, [pc, #100]	; (80136b0 <xTaskPriorityInherit+0xc4>)
 801364a:	681b      	ldr	r3, [r3, #0]
 801364c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801364e:	68bb      	ldr	r3, [r7, #8]
 8013650:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013652:	68bb      	ldr	r3, [r7, #8]
 8013654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013656:	4b18      	ldr	r3, [pc, #96]	; (80136b8 <xTaskPriorityInherit+0xcc>)
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	429a      	cmp	r2, r3
 801365c:	d903      	bls.n	8013666 <xTaskPriorityInherit+0x7a>
 801365e:	68bb      	ldr	r3, [r7, #8]
 8013660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013662:	4a15      	ldr	r2, [pc, #84]	; (80136b8 <xTaskPriorityInherit+0xcc>)
 8013664:	6013      	str	r3, [r2, #0]
 8013666:	68bb      	ldr	r3, [r7, #8]
 8013668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801366a:	4613      	mov	r3, r2
 801366c:	009b      	lsls	r3, r3, #2
 801366e:	4413      	add	r3, r2
 8013670:	009b      	lsls	r3, r3, #2
 8013672:	4a10      	ldr	r2, [pc, #64]	; (80136b4 <xTaskPriorityInherit+0xc8>)
 8013674:	441a      	add	r2, r3
 8013676:	68bb      	ldr	r3, [r7, #8]
 8013678:	3304      	adds	r3, #4
 801367a:	4619      	mov	r1, r3
 801367c:	4610      	mov	r0, r2
 801367e:	f7fd feca 	bl	8011416 <vListInsertEnd>
 8013682:	e004      	b.n	801368e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013684:	4b0a      	ldr	r3, [pc, #40]	; (80136b0 <xTaskPriorityInherit+0xc4>)
 8013686:	681b      	ldr	r3, [r3, #0]
 8013688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801368a:	68bb      	ldr	r3, [r7, #8]
 801368c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801368e:	2301      	movs	r3, #1
 8013690:	60fb      	str	r3, [r7, #12]
 8013692:	e008      	b.n	80136a6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013694:	68bb      	ldr	r3, [r7, #8]
 8013696:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8013698:	4b05      	ldr	r3, [pc, #20]	; (80136b0 <xTaskPriorityInherit+0xc4>)
 801369a:	681b      	ldr	r3, [r3, #0]
 801369c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801369e:	429a      	cmp	r2, r3
 80136a0:	d201      	bcs.n	80136a6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80136a2:	2301      	movs	r3, #1
 80136a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80136a6:	68fb      	ldr	r3, [r7, #12]
	}
 80136a8:	4618      	mov	r0, r3
 80136aa:	3710      	adds	r7, #16
 80136ac:	46bd      	mov	sp, r7
 80136ae:	bd80      	pop	{r7, pc}
 80136b0:	20000f44 	.word	0x20000f44
 80136b4:	20000f48 	.word	0x20000f48
 80136b8:	20001420 	.word	0x20001420

080136bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80136bc:	b580      	push	{r7, lr}
 80136be:	b086      	sub	sp, #24
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80136c4:	687b      	ldr	r3, [r7, #4]
 80136c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80136c8:	2300      	movs	r3, #0
 80136ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d056      	beq.n	8013780 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80136d2:	4b2e      	ldr	r3, [pc, #184]	; (801378c <xTaskPriorityDisinherit+0xd0>)
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	693a      	ldr	r2, [r7, #16]
 80136d8:	429a      	cmp	r2, r3
 80136da:	d00a      	beq.n	80136f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80136dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136e0:	f383 8811 	msr	BASEPRI, r3
 80136e4:	f3bf 8f6f 	isb	sy
 80136e8:	f3bf 8f4f 	dsb	sy
 80136ec:	60fb      	str	r3, [r7, #12]
}
 80136ee:	bf00      	nop
 80136f0:	e7fe      	b.n	80136f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80136f2:	693b      	ldr	r3, [r7, #16]
 80136f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d10a      	bne.n	8013710 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80136fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136fe:	f383 8811 	msr	BASEPRI, r3
 8013702:	f3bf 8f6f 	isb	sy
 8013706:	f3bf 8f4f 	dsb	sy
 801370a:	60bb      	str	r3, [r7, #8]
}
 801370c:	bf00      	nop
 801370e:	e7fe      	b.n	801370e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8013710:	693b      	ldr	r3, [r7, #16]
 8013712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013714:	1e5a      	subs	r2, r3, #1
 8013716:	693b      	ldr	r3, [r7, #16]
 8013718:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801371a:	693b      	ldr	r3, [r7, #16]
 801371c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801371e:	693b      	ldr	r3, [r7, #16]
 8013720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013722:	429a      	cmp	r2, r3
 8013724:	d02c      	beq.n	8013780 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8013726:	693b      	ldr	r3, [r7, #16]
 8013728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801372a:	2b00      	cmp	r3, #0
 801372c:	d128      	bne.n	8013780 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801372e:	693b      	ldr	r3, [r7, #16]
 8013730:	3304      	adds	r3, #4
 8013732:	4618      	mov	r0, r3
 8013734:	f7fd fecc 	bl	80114d0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013738:	693b      	ldr	r3, [r7, #16]
 801373a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801373c:	693b      	ldr	r3, [r7, #16]
 801373e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013740:	693b      	ldr	r3, [r7, #16]
 8013742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013744:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013748:	693b      	ldr	r3, [r7, #16]
 801374a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801374c:	693b      	ldr	r3, [r7, #16]
 801374e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013750:	4b0f      	ldr	r3, [pc, #60]	; (8013790 <xTaskPriorityDisinherit+0xd4>)
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	429a      	cmp	r2, r3
 8013756:	d903      	bls.n	8013760 <xTaskPriorityDisinherit+0xa4>
 8013758:	693b      	ldr	r3, [r7, #16]
 801375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801375c:	4a0c      	ldr	r2, [pc, #48]	; (8013790 <xTaskPriorityDisinherit+0xd4>)
 801375e:	6013      	str	r3, [r2, #0]
 8013760:	693b      	ldr	r3, [r7, #16]
 8013762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013764:	4613      	mov	r3, r2
 8013766:	009b      	lsls	r3, r3, #2
 8013768:	4413      	add	r3, r2
 801376a:	009b      	lsls	r3, r3, #2
 801376c:	4a09      	ldr	r2, [pc, #36]	; (8013794 <xTaskPriorityDisinherit+0xd8>)
 801376e:	441a      	add	r2, r3
 8013770:	693b      	ldr	r3, [r7, #16]
 8013772:	3304      	adds	r3, #4
 8013774:	4619      	mov	r1, r3
 8013776:	4610      	mov	r0, r2
 8013778:	f7fd fe4d 	bl	8011416 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801377c:	2301      	movs	r3, #1
 801377e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013780:	697b      	ldr	r3, [r7, #20]
	}
 8013782:	4618      	mov	r0, r3
 8013784:	3718      	adds	r7, #24
 8013786:	46bd      	mov	sp, r7
 8013788:	bd80      	pop	{r7, pc}
 801378a:	bf00      	nop
 801378c:	20000f44 	.word	0x20000f44
 8013790:	20001420 	.word	0x20001420
 8013794:	20000f48 	.word	0x20000f48

08013798 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8013798:	b580      	push	{r7, lr}
 801379a:	b088      	sub	sp, #32
 801379c:	af00      	add	r7, sp, #0
 801379e:	6078      	str	r0, [r7, #4]
 80137a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80137a6:	2301      	movs	r3, #1
 80137a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d06a      	beq.n	8013886 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80137b0:	69bb      	ldr	r3, [r7, #24]
 80137b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d10a      	bne.n	80137ce <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80137b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137bc:	f383 8811 	msr	BASEPRI, r3
 80137c0:	f3bf 8f6f 	isb	sy
 80137c4:	f3bf 8f4f 	dsb	sy
 80137c8:	60fb      	str	r3, [r7, #12]
}
 80137ca:	bf00      	nop
 80137cc:	e7fe      	b.n	80137cc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80137ce:	69bb      	ldr	r3, [r7, #24]
 80137d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80137d2:	683a      	ldr	r2, [r7, #0]
 80137d4:	429a      	cmp	r2, r3
 80137d6:	d902      	bls.n	80137de <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80137d8:	683b      	ldr	r3, [r7, #0]
 80137da:	61fb      	str	r3, [r7, #28]
 80137dc:	e002      	b.n	80137e4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80137de:	69bb      	ldr	r3, [r7, #24]
 80137e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80137e2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80137e4:	69bb      	ldr	r3, [r7, #24]
 80137e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137e8:	69fa      	ldr	r2, [r7, #28]
 80137ea:	429a      	cmp	r2, r3
 80137ec:	d04b      	beq.n	8013886 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80137ee:	69bb      	ldr	r3, [r7, #24]
 80137f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80137f2:	697a      	ldr	r2, [r7, #20]
 80137f4:	429a      	cmp	r2, r3
 80137f6:	d146      	bne.n	8013886 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80137f8:	4b25      	ldr	r3, [pc, #148]	; (8013890 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	69ba      	ldr	r2, [r7, #24]
 80137fe:	429a      	cmp	r2, r3
 8013800:	d10a      	bne.n	8013818 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8013802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013806:	f383 8811 	msr	BASEPRI, r3
 801380a:	f3bf 8f6f 	isb	sy
 801380e:	f3bf 8f4f 	dsb	sy
 8013812:	60bb      	str	r3, [r7, #8]
}
 8013814:	bf00      	nop
 8013816:	e7fe      	b.n	8013816 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013818:	69bb      	ldr	r3, [r7, #24]
 801381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801381c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801381e:	69bb      	ldr	r3, [r7, #24]
 8013820:	69fa      	ldr	r2, [r7, #28]
 8013822:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013824:	69bb      	ldr	r3, [r7, #24]
 8013826:	699b      	ldr	r3, [r3, #24]
 8013828:	2b00      	cmp	r3, #0
 801382a:	db04      	blt.n	8013836 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801382c:	69fb      	ldr	r3, [r7, #28]
 801382e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8013832:	69bb      	ldr	r3, [r7, #24]
 8013834:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013836:	69bb      	ldr	r3, [r7, #24]
 8013838:	6959      	ldr	r1, [r3, #20]
 801383a:	693a      	ldr	r2, [r7, #16]
 801383c:	4613      	mov	r3, r2
 801383e:	009b      	lsls	r3, r3, #2
 8013840:	4413      	add	r3, r2
 8013842:	009b      	lsls	r3, r3, #2
 8013844:	4a13      	ldr	r2, [pc, #76]	; (8013894 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013846:	4413      	add	r3, r2
 8013848:	4299      	cmp	r1, r3
 801384a:	d11c      	bne.n	8013886 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801384c:	69bb      	ldr	r3, [r7, #24]
 801384e:	3304      	adds	r3, #4
 8013850:	4618      	mov	r0, r3
 8013852:	f7fd fe3d 	bl	80114d0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013856:	69bb      	ldr	r3, [r7, #24]
 8013858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801385a:	4b0f      	ldr	r3, [pc, #60]	; (8013898 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	429a      	cmp	r2, r3
 8013860:	d903      	bls.n	801386a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8013862:	69bb      	ldr	r3, [r7, #24]
 8013864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013866:	4a0c      	ldr	r2, [pc, #48]	; (8013898 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8013868:	6013      	str	r3, [r2, #0]
 801386a:	69bb      	ldr	r3, [r7, #24]
 801386c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801386e:	4613      	mov	r3, r2
 8013870:	009b      	lsls	r3, r3, #2
 8013872:	4413      	add	r3, r2
 8013874:	009b      	lsls	r3, r3, #2
 8013876:	4a07      	ldr	r2, [pc, #28]	; (8013894 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8013878:	441a      	add	r2, r3
 801387a:	69bb      	ldr	r3, [r7, #24]
 801387c:	3304      	adds	r3, #4
 801387e:	4619      	mov	r1, r3
 8013880:	4610      	mov	r0, r2
 8013882:	f7fd fdc8 	bl	8011416 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013886:	bf00      	nop
 8013888:	3720      	adds	r7, #32
 801388a:	46bd      	mov	sp, r7
 801388c:	bd80      	pop	{r7, pc}
 801388e:	bf00      	nop
 8013890:	20000f44 	.word	0x20000f44
 8013894:	20000f48 	.word	0x20000f48
 8013898:	20001420 	.word	0x20001420

0801389c <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 801389c:	b580      	push	{r7, lr}
 801389e:	b084      	sub	sp, #16
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	6078      	str	r0, [r7, #4]
 80138a4:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 80138a6:	6839      	ldr	r1, [r7, #0]
 80138a8:	6878      	ldr	r0, [r7, #4]
 80138aa:	f002 fdbf 	bl	801642c <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80138ae:	6878      	ldr	r0, [r7, #4]
 80138b0:	f7ec fc8e 	bl	80001d0 <strlen>
 80138b4:	60f8      	str	r0, [r7, #12]
 80138b6:	e007      	b.n	80138c8 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 80138b8:	687a      	ldr	r2, [r7, #4]
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	4413      	add	r3, r2
 80138be:	2220      	movs	r2, #32
 80138c0:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	3301      	adds	r3, #1
 80138c6:	60fb      	str	r3, [r7, #12]
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	2b0e      	cmp	r3, #14
 80138cc:	d9f4      	bls.n	80138b8 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 80138ce:	687a      	ldr	r2, [r7, #4]
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	4413      	add	r3, r2
 80138d4:	2200      	movs	r2, #0
 80138d6:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 80138d8:	687a      	ldr	r2, [r7, #4]
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	4413      	add	r3, r2
	}
 80138de:	4618      	mov	r0, r3
 80138e0:	3710      	adds	r7, #16
 80138e2:	46bd      	mov	sp, r7
 80138e4:	bd80      	pop	{r7, pc}
	...

080138e8 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 80138e8:	b590      	push	{r4, r7, lr}
 80138ea:	b089      	sub	sp, #36	; 0x24
 80138ec:	af02      	add	r7, sp, #8
 80138ee:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 80138f0:	687b      	ldr	r3, [r7, #4]
 80138f2:	2200      	movs	r2, #0
 80138f4:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 80138f6:	4b45      	ldr	r3, [pc, #276]	; (8013a0c <vTaskList+0x124>)
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 80138fc:	4b43      	ldr	r3, [pc, #268]	; (8013a0c <vTaskList+0x124>)
 80138fe:	681a      	ldr	r2, [r3, #0]
 8013900:	4613      	mov	r3, r2
 8013902:	00db      	lsls	r3, r3, #3
 8013904:	4413      	add	r3, r2
 8013906:	009b      	lsls	r3, r3, #2
 8013908:	4618      	mov	r0, r3
 801390a:	f000 ff0d 	bl	8014728 <pvPortMalloc>
 801390e:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 8013910:	68bb      	ldr	r3, [r7, #8]
 8013912:	2b00      	cmp	r3, #0
 8013914:	d076      	beq.n	8013a04 <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8013916:	2200      	movs	r2, #0
 8013918:	68f9      	ldr	r1, [r7, #12]
 801391a:	68b8      	ldr	r0, [r7, #8]
 801391c:	f7ff f996 	bl	8012c4c <uxTaskGetSystemState>
 8013920:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8013922:	2300      	movs	r3, #0
 8013924:	617b      	str	r3, [r7, #20]
 8013926:	e066      	b.n	80139f6 <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8013928:	697a      	ldr	r2, [r7, #20]
 801392a:	4613      	mov	r3, r2
 801392c:	00db      	lsls	r3, r3, #3
 801392e:	4413      	add	r3, r2
 8013930:	009b      	lsls	r3, r3, #2
 8013932:	461a      	mov	r2, r3
 8013934:	68bb      	ldr	r3, [r7, #8]
 8013936:	4413      	add	r3, r2
 8013938:	7b1b      	ldrb	r3, [r3, #12]
 801393a:	2b04      	cmp	r3, #4
 801393c:	d81b      	bhi.n	8013976 <vTaskList+0x8e>
 801393e:	a201      	add	r2, pc, #4	; (adr r2, 8013944 <vTaskList+0x5c>)
 8013940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013944:	08013959 	.word	0x08013959
 8013948:	0801395f 	.word	0x0801395f
 801394c:	08013965 	.word	0x08013965
 8013950:	0801396b 	.word	0x0801396b
 8013954:	08013971 	.word	0x08013971
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8013958:	2358      	movs	r3, #88	; 0x58
 801395a:	74fb      	strb	r3, [r7, #19]
										break;
 801395c:	e00e      	b.n	801397c <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 801395e:	2352      	movs	r3, #82	; 0x52
 8013960:	74fb      	strb	r3, [r7, #19]
										break;
 8013962:	e00b      	b.n	801397c <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8013964:	2342      	movs	r3, #66	; 0x42
 8013966:	74fb      	strb	r3, [r7, #19]
										break;
 8013968:	e008      	b.n	801397c <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 801396a:	2353      	movs	r3, #83	; 0x53
 801396c:	74fb      	strb	r3, [r7, #19]
										break;
 801396e:	e005      	b.n	801397c <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8013970:	2344      	movs	r3, #68	; 0x44
 8013972:	74fb      	strb	r3, [r7, #19]
										break;
 8013974:	e002      	b.n	801397c <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 8013976:	2300      	movs	r3, #0
 8013978:	74fb      	strb	r3, [r7, #19]
										break;
 801397a:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 801397c:	697a      	ldr	r2, [r7, #20]
 801397e:	4613      	mov	r3, r2
 8013980:	00db      	lsls	r3, r3, #3
 8013982:	4413      	add	r3, r2
 8013984:	009b      	lsls	r3, r3, #2
 8013986:	461a      	mov	r2, r3
 8013988:	68bb      	ldr	r3, [r7, #8]
 801398a:	4413      	add	r3, r2
 801398c:	685b      	ldr	r3, [r3, #4]
 801398e:	4619      	mov	r1, r3
 8013990:	6878      	ldr	r0, [r7, #4]
 8013992:	f7ff ff83 	bl	801389c <prvWriteNameToBuffer>
 8013996:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8013998:	7cf9      	ldrb	r1, [r7, #19]
 801399a:	697a      	ldr	r2, [r7, #20]
 801399c:	4613      	mov	r3, r2
 801399e:	00db      	lsls	r3, r3, #3
 80139a0:	4413      	add	r3, r2
 80139a2:	009b      	lsls	r3, r3, #2
 80139a4:	461a      	mov	r2, r3
 80139a6:	68bb      	ldr	r3, [r7, #8]
 80139a8:	4413      	add	r3, r2
 80139aa:	6918      	ldr	r0, [r3, #16]
 80139ac:	697a      	ldr	r2, [r7, #20]
 80139ae:	4613      	mov	r3, r2
 80139b0:	00db      	lsls	r3, r3, #3
 80139b2:	4413      	add	r3, r2
 80139b4:	009b      	lsls	r3, r3, #2
 80139b6:	461a      	mov	r2, r3
 80139b8:	68bb      	ldr	r3, [r7, #8]
 80139ba:	4413      	add	r3, r2
 80139bc:	8c1b      	ldrh	r3, [r3, #32]
 80139be:	461c      	mov	r4, r3
 80139c0:	697a      	ldr	r2, [r7, #20]
 80139c2:	4613      	mov	r3, r2
 80139c4:	00db      	lsls	r3, r3, #3
 80139c6:	4413      	add	r3, r2
 80139c8:	009b      	lsls	r3, r3, #2
 80139ca:	461a      	mov	r2, r3
 80139cc:	68bb      	ldr	r3, [r7, #8]
 80139ce:	4413      	add	r3, r2
 80139d0:	689b      	ldr	r3, [r3, #8]
 80139d2:	9301      	str	r3, [sp, #4]
 80139d4:	9400      	str	r4, [sp, #0]
 80139d6:	4603      	mov	r3, r0
 80139d8:	460a      	mov	r2, r1
 80139da:	490d      	ldr	r1, [pc, #52]	; (8013a10 <vTaskList+0x128>)
 80139dc:	6878      	ldr	r0, [r7, #4]
 80139de:	f002 fcb3 	bl	8016348 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 80139e2:	6878      	ldr	r0, [r7, #4]
 80139e4:	f7ec fbf4 	bl	80001d0 <strlen>
 80139e8:	4602      	mov	r2, r0
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	4413      	add	r3, r2
 80139ee:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 80139f0:	697b      	ldr	r3, [r7, #20]
 80139f2:	3301      	adds	r3, #1
 80139f4:	617b      	str	r3, [r7, #20]
 80139f6:	697a      	ldr	r2, [r7, #20]
 80139f8:	68fb      	ldr	r3, [r7, #12]
 80139fa:	429a      	cmp	r2, r3
 80139fc:	d394      	bcc.n	8013928 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 80139fe:	68b8      	ldr	r0, [r7, #8]
 8013a00:	f000 ff5e 	bl	80148c0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013a04:	bf00      	nop
 8013a06:	371c      	adds	r7, #28
 8013a08:	46bd      	mov	sp, r7
 8013a0a:	bd90      	pop	{r4, r7, pc}
 8013a0c:	20001418 	.word	0x20001418
 8013a10:	08018b70 	.word	0x08018b70

08013a14 <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 8013a14:	b580      	push	{r7, lr}
 8013a16:	b088      	sub	sp, #32
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	2200      	movs	r2, #0
 8013a20:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8013a22:	4b3a      	ldr	r3, [pc, #232]	; (8013b0c <vTaskGetRunTimeStats+0xf8>)
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8013a28:	4b38      	ldr	r3, [pc, #224]	; (8013b0c <vTaskGetRunTimeStats+0xf8>)
 8013a2a:	681a      	ldr	r2, [r3, #0]
 8013a2c:	4613      	mov	r3, r2
 8013a2e:	00db      	lsls	r3, r3, #3
 8013a30:	4413      	add	r3, r2
 8013a32:	009b      	lsls	r3, r3, #2
 8013a34:	4618      	mov	r0, r3
 8013a36:	f000 fe77 	bl	8014728 <pvPortMalloc>
 8013a3a:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 8013a3c:	697b      	ldr	r3, [r7, #20]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d05f      	beq.n	8013b02 <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8013a42:	f107 030c 	add.w	r3, r7, #12
 8013a46:	461a      	mov	r2, r3
 8013a48:	69b9      	ldr	r1, [r7, #24]
 8013a4a:	6978      	ldr	r0, [r7, #20]
 8013a4c:	f7ff f8fe 	bl	8012c4c <uxTaskGetSystemState>
 8013a50:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	4a2e      	ldr	r2, [pc, #184]	; (8013b10 <vTaskGetRunTimeStats+0xfc>)
 8013a56:	fba2 2303 	umull	r2, r3, r2, r3
 8013a5a:	095b      	lsrs	r3, r3, #5
 8013a5c:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 8013a5e:	68fb      	ldr	r3, [r7, #12]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d04b      	beq.n	8013afc <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 8013a64:	2300      	movs	r3, #0
 8013a66:	61fb      	str	r3, [r7, #28]
 8013a68:	e044      	b.n	8013af4 <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8013a6a:	69fa      	ldr	r2, [r7, #28]
 8013a6c:	4613      	mov	r3, r2
 8013a6e:	00db      	lsls	r3, r3, #3
 8013a70:	4413      	add	r3, r2
 8013a72:	009b      	lsls	r3, r3, #2
 8013a74:	461a      	mov	r2, r3
 8013a76:	697b      	ldr	r3, [r7, #20]
 8013a78:	4413      	add	r3, r2
 8013a7a:	699a      	ldr	r2, [r3, #24]
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8013a82:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8013a84:	69fa      	ldr	r2, [r7, #28]
 8013a86:	4613      	mov	r3, r2
 8013a88:	00db      	lsls	r3, r3, #3
 8013a8a:	4413      	add	r3, r2
 8013a8c:	009b      	lsls	r3, r3, #2
 8013a8e:	461a      	mov	r2, r3
 8013a90:	697b      	ldr	r3, [r7, #20]
 8013a92:	4413      	add	r3, r2
 8013a94:	685b      	ldr	r3, [r3, #4]
 8013a96:	4619      	mov	r1, r3
 8013a98:	6878      	ldr	r0, [r7, #4]
 8013a9a:	f7ff feff 	bl	801389c <prvWriteNameToBuffer>
 8013a9e:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 8013aa0:	693b      	ldr	r3, [r7, #16]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d00e      	beq.n	8013ac4 <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8013aa6:	69fa      	ldr	r2, [r7, #28]
 8013aa8:	4613      	mov	r3, r2
 8013aaa:	00db      	lsls	r3, r3, #3
 8013aac:	4413      	add	r3, r2
 8013aae:	009b      	lsls	r3, r3, #2
 8013ab0:	461a      	mov	r2, r3
 8013ab2:	697b      	ldr	r3, [r7, #20]
 8013ab4:	4413      	add	r3, r2
 8013ab6:	699a      	ldr	r2, [r3, #24]
 8013ab8:	693b      	ldr	r3, [r7, #16]
 8013aba:	4916      	ldr	r1, [pc, #88]	; (8013b14 <vTaskGetRunTimeStats+0x100>)
 8013abc:	6878      	ldr	r0, [r7, #4]
 8013abe:	f002 fc43 	bl	8016348 <siprintf>
 8013ac2:	e00d      	b.n	8013ae0 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8013ac4:	69fa      	ldr	r2, [r7, #28]
 8013ac6:	4613      	mov	r3, r2
 8013ac8:	00db      	lsls	r3, r3, #3
 8013aca:	4413      	add	r3, r2
 8013acc:	009b      	lsls	r3, r3, #2
 8013ace:	461a      	mov	r2, r3
 8013ad0:	697b      	ldr	r3, [r7, #20]
 8013ad2:	4413      	add	r3, r2
 8013ad4:	699b      	ldr	r3, [r3, #24]
 8013ad6:	461a      	mov	r2, r3
 8013ad8:	490f      	ldr	r1, [pc, #60]	; (8013b18 <vTaskGetRunTimeStats+0x104>)
 8013ada:	6878      	ldr	r0, [r7, #4]
 8013adc:	f002 fc34 	bl	8016348 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8013ae0:	6878      	ldr	r0, [r7, #4]
 8013ae2:	f7ec fb75 	bl	80001d0 <strlen>
 8013ae6:	4602      	mov	r2, r0
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	4413      	add	r3, r2
 8013aec:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 8013aee:	69fb      	ldr	r3, [r7, #28]
 8013af0:	3301      	adds	r3, #1
 8013af2:	61fb      	str	r3, [r7, #28]
 8013af4:	69fa      	ldr	r2, [r7, #28]
 8013af6:	69bb      	ldr	r3, [r7, #24]
 8013af8:	429a      	cmp	r2, r3
 8013afa:	d3b6      	bcc.n	8013a6a <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8013afc:	6978      	ldr	r0, [r7, #20]
 8013afe:	f000 fedf 	bl	80148c0 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013b02:	bf00      	nop
 8013b04:	3720      	adds	r7, #32
 8013b06:	46bd      	mov	sp, r7
 8013b08:	bd80      	pop	{r7, pc}
 8013b0a:	bf00      	nop
 8013b0c:	20001418 	.word	0x20001418
 8013b10:	51eb851f 	.word	0x51eb851f
 8013b14:	08018b80 	.word	0x08018b80
 8013b18:	08018b8c 	.word	0x08018b8c

08013b1c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8013b1c:	b480      	push	{r7}
 8013b1e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013b20:	4b07      	ldr	r3, [pc, #28]	; (8013b40 <pvTaskIncrementMutexHeldCount+0x24>)
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d004      	beq.n	8013b32 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013b28:	4b05      	ldr	r3, [pc, #20]	; (8013b40 <pvTaskIncrementMutexHeldCount+0x24>)
 8013b2a:	681b      	ldr	r3, [r3, #0]
 8013b2c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013b2e:	3201      	adds	r2, #1
 8013b30:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8013b32:	4b03      	ldr	r3, [pc, #12]	; (8013b40 <pvTaskIncrementMutexHeldCount+0x24>)
 8013b34:	681b      	ldr	r3, [r3, #0]
	}
 8013b36:	4618      	mov	r0, r3
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b3e:	4770      	bx	lr
 8013b40:	20000f44 	.word	0x20000f44

08013b44 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8013b44:	b580      	push	{r7, lr}
 8013b46:	b084      	sub	sp, #16
 8013b48:	af00      	add	r7, sp, #0
 8013b4a:	6078      	str	r0, [r7, #4]
 8013b4c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013b4e:	4b21      	ldr	r3, [pc, #132]	; (8013bd4 <prvAddCurrentTaskToDelayedList+0x90>)
 8013b50:	681b      	ldr	r3, [r3, #0]
 8013b52:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013b54:	4b20      	ldr	r3, [pc, #128]	; (8013bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	3304      	adds	r3, #4
 8013b5a:	4618      	mov	r0, r3
 8013b5c:	f7fd fcb8 	bl	80114d0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b66:	d10a      	bne.n	8013b7e <prvAddCurrentTaskToDelayedList+0x3a>
 8013b68:	683b      	ldr	r3, [r7, #0]
 8013b6a:	2b00      	cmp	r3, #0
 8013b6c:	d007      	beq.n	8013b7e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013b6e:	4b1a      	ldr	r3, [pc, #104]	; (8013bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	3304      	adds	r3, #4
 8013b74:	4619      	mov	r1, r3
 8013b76:	4819      	ldr	r0, [pc, #100]	; (8013bdc <prvAddCurrentTaskToDelayedList+0x98>)
 8013b78:	f7fd fc4d 	bl	8011416 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013b7c:	e026      	b.n	8013bcc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013b7e:	68fa      	ldr	r2, [r7, #12]
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	4413      	add	r3, r2
 8013b84:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013b86:	4b14      	ldr	r3, [pc, #80]	; (8013bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8013b88:	681b      	ldr	r3, [r3, #0]
 8013b8a:	68ba      	ldr	r2, [r7, #8]
 8013b8c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013b8e:	68ba      	ldr	r2, [r7, #8]
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	429a      	cmp	r2, r3
 8013b94:	d209      	bcs.n	8013baa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013b96:	4b12      	ldr	r3, [pc, #72]	; (8013be0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8013b98:	681a      	ldr	r2, [r3, #0]
 8013b9a:	4b0f      	ldr	r3, [pc, #60]	; (8013bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	3304      	adds	r3, #4
 8013ba0:	4619      	mov	r1, r3
 8013ba2:	4610      	mov	r0, r2
 8013ba4:	f7fd fc5b 	bl	801145e <vListInsert>
}
 8013ba8:	e010      	b.n	8013bcc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013baa:	4b0e      	ldr	r3, [pc, #56]	; (8013be4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8013bac:	681a      	ldr	r2, [r3, #0]
 8013bae:	4b0a      	ldr	r3, [pc, #40]	; (8013bd8 <prvAddCurrentTaskToDelayedList+0x94>)
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	3304      	adds	r3, #4
 8013bb4:	4619      	mov	r1, r3
 8013bb6:	4610      	mov	r0, r2
 8013bb8:	f7fd fc51 	bl	801145e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013bbc:	4b0a      	ldr	r3, [pc, #40]	; (8013be8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	68ba      	ldr	r2, [r7, #8]
 8013bc2:	429a      	cmp	r2, r3
 8013bc4:	d202      	bcs.n	8013bcc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8013bc6:	4a08      	ldr	r2, [pc, #32]	; (8013be8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8013bc8:	68bb      	ldr	r3, [r7, #8]
 8013bca:	6013      	str	r3, [r2, #0]
}
 8013bcc:	bf00      	nop
 8013bce:	3710      	adds	r7, #16
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	bd80      	pop	{r7, pc}
 8013bd4:	2000141c 	.word	0x2000141c
 8013bd8:	20000f44 	.word	0x20000f44
 8013bdc:	20001404 	.word	0x20001404
 8013be0:	200013d4 	.word	0x200013d4
 8013be4:	200013d0 	.word	0x200013d0
 8013be8:	20001438 	.word	0x20001438

08013bec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8013bec:	b580      	push	{r7, lr}
 8013bee:	b08a      	sub	sp, #40	; 0x28
 8013bf0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8013bf2:	2300      	movs	r3, #0
 8013bf4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8013bf6:	f000 fb07 	bl	8014208 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8013bfa:	4b1c      	ldr	r3, [pc, #112]	; (8013c6c <xTimerCreateTimerTask+0x80>)
 8013bfc:	681b      	ldr	r3, [r3, #0]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d021      	beq.n	8013c46 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8013c02:	2300      	movs	r3, #0
 8013c04:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8013c06:	2300      	movs	r3, #0
 8013c08:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8013c0a:	1d3a      	adds	r2, r7, #4
 8013c0c:	f107 0108 	add.w	r1, r7, #8
 8013c10:	f107 030c 	add.w	r3, r7, #12
 8013c14:	4618      	mov	r0, r3
 8013c16:	f7fd fbb7 	bl	8011388 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8013c1a:	6879      	ldr	r1, [r7, #4]
 8013c1c:	68bb      	ldr	r3, [r7, #8]
 8013c1e:	68fa      	ldr	r2, [r7, #12]
 8013c20:	9202      	str	r2, [sp, #8]
 8013c22:	9301      	str	r3, [sp, #4]
 8013c24:	2302      	movs	r3, #2
 8013c26:	9300      	str	r3, [sp, #0]
 8013c28:	2300      	movs	r3, #0
 8013c2a:	460a      	mov	r2, r1
 8013c2c:	4910      	ldr	r1, [pc, #64]	; (8013c70 <xTimerCreateTimerTask+0x84>)
 8013c2e:	4811      	ldr	r0, [pc, #68]	; (8013c74 <xTimerCreateTimerTask+0x88>)
 8013c30:	f7fe fc86 	bl	8012540 <xTaskCreateStatic>
 8013c34:	4603      	mov	r3, r0
 8013c36:	4a10      	ldr	r2, [pc, #64]	; (8013c78 <xTimerCreateTimerTask+0x8c>)
 8013c38:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8013c3a:	4b0f      	ldr	r3, [pc, #60]	; (8013c78 <xTimerCreateTimerTask+0x8c>)
 8013c3c:	681b      	ldr	r3, [r3, #0]
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d001      	beq.n	8013c46 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8013c42:	2301      	movs	r3, #1
 8013c44:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8013c46:	697b      	ldr	r3, [r7, #20]
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d10a      	bne.n	8013c62 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8013c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c50:	f383 8811 	msr	BASEPRI, r3
 8013c54:	f3bf 8f6f 	isb	sy
 8013c58:	f3bf 8f4f 	dsb	sy
 8013c5c:	613b      	str	r3, [r7, #16]
}
 8013c5e:	bf00      	nop
 8013c60:	e7fe      	b.n	8013c60 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8013c62:	697b      	ldr	r3, [r7, #20]
}
 8013c64:	4618      	mov	r0, r3
 8013c66:	3718      	adds	r7, #24
 8013c68:	46bd      	mov	sp, r7
 8013c6a:	bd80      	pop	{r7, pc}
 8013c6c:	2000147c 	.word	0x2000147c
 8013c70:	08018b98 	.word	0x08018b98
 8013c74:	08013db1 	.word	0x08013db1
 8013c78:	20001480 	.word	0x20001480

08013c7c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b08a      	sub	sp, #40	; 0x28
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	60f8      	str	r0, [r7, #12]
 8013c84:	60b9      	str	r1, [r7, #8]
 8013c86:	607a      	str	r2, [r7, #4]
 8013c88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8013c8a:	2300      	movs	r3, #0
 8013c8c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d10a      	bne.n	8013caa <xTimerGenericCommand+0x2e>
	__asm volatile
 8013c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c98:	f383 8811 	msr	BASEPRI, r3
 8013c9c:	f3bf 8f6f 	isb	sy
 8013ca0:	f3bf 8f4f 	dsb	sy
 8013ca4:	623b      	str	r3, [r7, #32]
}
 8013ca6:	bf00      	nop
 8013ca8:	e7fe      	b.n	8013ca8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8013caa:	4b1a      	ldr	r3, [pc, #104]	; (8013d14 <xTimerGenericCommand+0x98>)
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	2b00      	cmp	r3, #0
 8013cb0:	d02a      	beq.n	8013d08 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8013cb2:	68bb      	ldr	r3, [r7, #8]
 8013cb4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8013cba:	68fb      	ldr	r3, [r7, #12]
 8013cbc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8013cbe:	68bb      	ldr	r3, [r7, #8]
 8013cc0:	2b05      	cmp	r3, #5
 8013cc2:	dc18      	bgt.n	8013cf6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8013cc4:	f7ff fc74 	bl	80135b0 <xTaskGetSchedulerState>
 8013cc8:	4603      	mov	r3, r0
 8013cca:	2b02      	cmp	r3, #2
 8013ccc:	d109      	bne.n	8013ce2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8013cce:	4b11      	ldr	r3, [pc, #68]	; (8013d14 <xTimerGenericCommand+0x98>)
 8013cd0:	6818      	ldr	r0, [r3, #0]
 8013cd2:	f107 0110 	add.w	r1, r7, #16
 8013cd6:	2300      	movs	r3, #0
 8013cd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013cda:	f7fd fdcb 	bl	8011874 <xQueueGenericSend>
 8013cde:	6278      	str	r0, [r7, #36]	; 0x24
 8013ce0:	e012      	b.n	8013d08 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8013ce2:	4b0c      	ldr	r3, [pc, #48]	; (8013d14 <xTimerGenericCommand+0x98>)
 8013ce4:	6818      	ldr	r0, [r3, #0]
 8013ce6:	f107 0110 	add.w	r1, r7, #16
 8013cea:	2300      	movs	r3, #0
 8013cec:	2200      	movs	r2, #0
 8013cee:	f7fd fdc1 	bl	8011874 <xQueueGenericSend>
 8013cf2:	6278      	str	r0, [r7, #36]	; 0x24
 8013cf4:	e008      	b.n	8013d08 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8013cf6:	4b07      	ldr	r3, [pc, #28]	; (8013d14 <xTimerGenericCommand+0x98>)
 8013cf8:	6818      	ldr	r0, [r3, #0]
 8013cfa:	f107 0110 	add.w	r1, r7, #16
 8013cfe:	2300      	movs	r3, #0
 8013d00:	683a      	ldr	r2, [r7, #0]
 8013d02:	f7fd feb5 	bl	8011a70 <xQueueGenericSendFromISR>
 8013d06:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8013d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	3728      	adds	r7, #40	; 0x28
 8013d0e:	46bd      	mov	sp, r7
 8013d10:	bd80      	pop	{r7, pc}
 8013d12:	bf00      	nop
 8013d14:	2000147c 	.word	0x2000147c

08013d18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8013d18:	b580      	push	{r7, lr}
 8013d1a:	b088      	sub	sp, #32
 8013d1c:	af02      	add	r7, sp, #8
 8013d1e:	6078      	str	r0, [r7, #4]
 8013d20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d22:	4b22      	ldr	r3, [pc, #136]	; (8013dac <prvProcessExpiredTimer+0x94>)
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	68db      	ldr	r3, [r3, #12]
 8013d28:	68db      	ldr	r3, [r3, #12]
 8013d2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013d2c:	697b      	ldr	r3, [r7, #20]
 8013d2e:	3304      	adds	r3, #4
 8013d30:	4618      	mov	r0, r3
 8013d32:	f7fd fbcd 	bl	80114d0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8013d36:	697b      	ldr	r3, [r7, #20]
 8013d38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d3c:	f003 0304 	and.w	r3, r3, #4
 8013d40:	2b00      	cmp	r3, #0
 8013d42:	d022      	beq.n	8013d8a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8013d44:	697b      	ldr	r3, [r7, #20]
 8013d46:	699a      	ldr	r2, [r3, #24]
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	18d1      	adds	r1, r2, r3
 8013d4c:	687b      	ldr	r3, [r7, #4]
 8013d4e:	683a      	ldr	r2, [r7, #0]
 8013d50:	6978      	ldr	r0, [r7, #20]
 8013d52:	f000 f8d1 	bl	8013ef8 <prvInsertTimerInActiveList>
 8013d56:	4603      	mov	r3, r0
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d01f      	beq.n	8013d9c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8013d5c:	2300      	movs	r3, #0
 8013d5e:	9300      	str	r3, [sp, #0]
 8013d60:	2300      	movs	r3, #0
 8013d62:	687a      	ldr	r2, [r7, #4]
 8013d64:	2100      	movs	r1, #0
 8013d66:	6978      	ldr	r0, [r7, #20]
 8013d68:	f7ff ff88 	bl	8013c7c <xTimerGenericCommand>
 8013d6c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8013d6e:	693b      	ldr	r3, [r7, #16]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d113      	bne.n	8013d9c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8013d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d78:	f383 8811 	msr	BASEPRI, r3
 8013d7c:	f3bf 8f6f 	isb	sy
 8013d80:	f3bf 8f4f 	dsb	sy
 8013d84:	60fb      	str	r3, [r7, #12]
}
 8013d86:	bf00      	nop
 8013d88:	e7fe      	b.n	8013d88 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8013d8a:	697b      	ldr	r3, [r7, #20]
 8013d8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8013d90:	f023 0301 	bic.w	r3, r3, #1
 8013d94:	b2da      	uxtb	r2, r3
 8013d96:	697b      	ldr	r3, [r7, #20]
 8013d98:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8013d9c:	697b      	ldr	r3, [r7, #20]
 8013d9e:	6a1b      	ldr	r3, [r3, #32]
 8013da0:	6978      	ldr	r0, [r7, #20]
 8013da2:	4798      	blx	r3
}
 8013da4:	bf00      	nop
 8013da6:	3718      	adds	r7, #24
 8013da8:	46bd      	mov	sp, r7
 8013daa:	bd80      	pop	{r7, pc}
 8013dac:	20001474 	.word	0x20001474

08013db0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8013db0:	b580      	push	{r7, lr}
 8013db2:	b084      	sub	sp, #16
 8013db4:	af00      	add	r7, sp, #0
 8013db6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013db8:	f107 0308 	add.w	r3, r7, #8
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	f000 f857 	bl	8013e70 <prvGetNextExpireTime>
 8013dc2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8013dc4:	68bb      	ldr	r3, [r7, #8]
 8013dc6:	4619      	mov	r1, r3
 8013dc8:	68f8      	ldr	r0, [r7, #12]
 8013dca:	f000 f803 	bl	8013dd4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8013dce:	f000 f8d5 	bl	8013f7c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8013dd2:	e7f1      	b.n	8013db8 <prvTimerTask+0x8>

08013dd4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	b084      	sub	sp, #16
 8013dd8:	af00      	add	r7, sp, #0
 8013dda:	6078      	str	r0, [r7, #4]
 8013ddc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8013dde:	f7fe fe79 	bl	8012ad4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013de2:	f107 0308 	add.w	r3, r7, #8
 8013de6:	4618      	mov	r0, r3
 8013de8:	f000 f866 	bl	8013eb8 <prvSampleTimeNow>
 8013dec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8013dee:	68bb      	ldr	r3, [r7, #8]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d130      	bne.n	8013e56 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8013df4:	683b      	ldr	r3, [r7, #0]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d10a      	bne.n	8013e10 <prvProcessTimerOrBlockTask+0x3c>
 8013dfa:	687a      	ldr	r2, [r7, #4]
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	429a      	cmp	r2, r3
 8013e00:	d806      	bhi.n	8013e10 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8013e02:	f7fe fe75 	bl	8012af0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8013e06:	68f9      	ldr	r1, [r7, #12]
 8013e08:	6878      	ldr	r0, [r7, #4]
 8013e0a:	f7ff ff85 	bl	8013d18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8013e0e:	e024      	b.n	8013e5a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8013e10:	683b      	ldr	r3, [r7, #0]
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d008      	beq.n	8013e28 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8013e16:	4b13      	ldr	r3, [pc, #76]	; (8013e64 <prvProcessTimerOrBlockTask+0x90>)
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	d101      	bne.n	8013e24 <prvProcessTimerOrBlockTask+0x50>
 8013e20:	2301      	movs	r3, #1
 8013e22:	e000      	b.n	8013e26 <prvProcessTimerOrBlockTask+0x52>
 8013e24:	2300      	movs	r3, #0
 8013e26:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8013e28:	4b0f      	ldr	r3, [pc, #60]	; (8013e68 <prvProcessTimerOrBlockTask+0x94>)
 8013e2a:	6818      	ldr	r0, [r3, #0]
 8013e2c:	687a      	ldr	r2, [r7, #4]
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	1ad3      	subs	r3, r2, r3
 8013e32:	683a      	ldr	r2, [r7, #0]
 8013e34:	4619      	mov	r1, r3
 8013e36:	f7fe fb4f 	bl	80124d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8013e3a:	f7fe fe59 	bl	8012af0 <xTaskResumeAll>
 8013e3e:	4603      	mov	r3, r0
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d10a      	bne.n	8013e5a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8013e44:	4b09      	ldr	r3, [pc, #36]	; (8013e6c <prvProcessTimerOrBlockTask+0x98>)
 8013e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013e4a:	601a      	str	r2, [r3, #0]
 8013e4c:	f3bf 8f4f 	dsb	sy
 8013e50:	f3bf 8f6f 	isb	sy
}
 8013e54:	e001      	b.n	8013e5a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8013e56:	f7fe fe4b 	bl	8012af0 <xTaskResumeAll>
}
 8013e5a:	bf00      	nop
 8013e5c:	3710      	adds	r7, #16
 8013e5e:	46bd      	mov	sp, r7
 8013e60:	bd80      	pop	{r7, pc}
 8013e62:	bf00      	nop
 8013e64:	20001478 	.word	0x20001478
 8013e68:	2000147c 	.word	0x2000147c
 8013e6c:	e000ed04 	.word	0xe000ed04

08013e70 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8013e70:	b480      	push	{r7}
 8013e72:	b085      	sub	sp, #20
 8013e74:	af00      	add	r7, sp, #0
 8013e76:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8013e78:	4b0e      	ldr	r3, [pc, #56]	; (8013eb4 <prvGetNextExpireTime+0x44>)
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	2b00      	cmp	r3, #0
 8013e80:	d101      	bne.n	8013e86 <prvGetNextExpireTime+0x16>
 8013e82:	2201      	movs	r2, #1
 8013e84:	e000      	b.n	8013e88 <prvGetNextExpireTime+0x18>
 8013e86:	2200      	movs	r2, #0
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	2b00      	cmp	r3, #0
 8013e92:	d105      	bne.n	8013ea0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8013e94:	4b07      	ldr	r3, [pc, #28]	; (8013eb4 <prvGetNextExpireTime+0x44>)
 8013e96:	681b      	ldr	r3, [r3, #0]
 8013e98:	68db      	ldr	r3, [r3, #12]
 8013e9a:	681b      	ldr	r3, [r3, #0]
 8013e9c:	60fb      	str	r3, [r7, #12]
 8013e9e:	e001      	b.n	8013ea4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8013ea0:	2300      	movs	r3, #0
 8013ea2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8013ea4:	68fb      	ldr	r3, [r7, #12]
}
 8013ea6:	4618      	mov	r0, r3
 8013ea8:	3714      	adds	r7, #20
 8013eaa:	46bd      	mov	sp, r7
 8013eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb0:	4770      	bx	lr
 8013eb2:	bf00      	nop
 8013eb4:	20001474 	.word	0x20001474

08013eb8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8013eb8:	b580      	push	{r7, lr}
 8013eba:	b084      	sub	sp, #16
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8013ec0:	f7fe feb4 	bl	8012c2c <xTaskGetTickCount>
 8013ec4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8013ec6:	4b0b      	ldr	r3, [pc, #44]	; (8013ef4 <prvSampleTimeNow+0x3c>)
 8013ec8:	681b      	ldr	r3, [r3, #0]
 8013eca:	68fa      	ldr	r2, [r7, #12]
 8013ecc:	429a      	cmp	r2, r3
 8013ece:	d205      	bcs.n	8013edc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8013ed0:	f000 f936 	bl	8014140 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	2201      	movs	r2, #1
 8013ed8:	601a      	str	r2, [r3, #0]
 8013eda:	e002      	b.n	8013ee2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	2200      	movs	r2, #0
 8013ee0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8013ee2:	4a04      	ldr	r2, [pc, #16]	; (8013ef4 <prvSampleTimeNow+0x3c>)
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8013ee8:	68fb      	ldr	r3, [r7, #12]
}
 8013eea:	4618      	mov	r0, r3
 8013eec:	3710      	adds	r7, #16
 8013eee:	46bd      	mov	sp, r7
 8013ef0:	bd80      	pop	{r7, pc}
 8013ef2:	bf00      	nop
 8013ef4:	20001484 	.word	0x20001484

08013ef8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b086      	sub	sp, #24
 8013efc:	af00      	add	r7, sp, #0
 8013efe:	60f8      	str	r0, [r7, #12]
 8013f00:	60b9      	str	r1, [r7, #8]
 8013f02:	607a      	str	r2, [r7, #4]
 8013f04:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8013f06:	2300      	movs	r3, #0
 8013f08:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8013f0a:	68fb      	ldr	r3, [r7, #12]
 8013f0c:	68ba      	ldr	r2, [r7, #8]
 8013f0e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	68fa      	ldr	r2, [r7, #12]
 8013f14:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8013f16:	68ba      	ldr	r2, [r7, #8]
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	429a      	cmp	r2, r3
 8013f1c:	d812      	bhi.n	8013f44 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013f1e:	687a      	ldr	r2, [r7, #4]
 8013f20:	683b      	ldr	r3, [r7, #0]
 8013f22:	1ad2      	subs	r2, r2, r3
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	699b      	ldr	r3, [r3, #24]
 8013f28:	429a      	cmp	r2, r3
 8013f2a:	d302      	bcc.n	8013f32 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8013f2c:	2301      	movs	r3, #1
 8013f2e:	617b      	str	r3, [r7, #20]
 8013f30:	e01b      	b.n	8013f6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8013f32:	4b10      	ldr	r3, [pc, #64]	; (8013f74 <prvInsertTimerInActiveList+0x7c>)
 8013f34:	681a      	ldr	r2, [r3, #0]
 8013f36:	68fb      	ldr	r3, [r7, #12]
 8013f38:	3304      	adds	r3, #4
 8013f3a:	4619      	mov	r1, r3
 8013f3c:	4610      	mov	r0, r2
 8013f3e:	f7fd fa8e 	bl	801145e <vListInsert>
 8013f42:	e012      	b.n	8013f6a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8013f44:	687a      	ldr	r2, [r7, #4]
 8013f46:	683b      	ldr	r3, [r7, #0]
 8013f48:	429a      	cmp	r2, r3
 8013f4a:	d206      	bcs.n	8013f5a <prvInsertTimerInActiveList+0x62>
 8013f4c:	68ba      	ldr	r2, [r7, #8]
 8013f4e:	683b      	ldr	r3, [r7, #0]
 8013f50:	429a      	cmp	r2, r3
 8013f52:	d302      	bcc.n	8013f5a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8013f54:	2301      	movs	r3, #1
 8013f56:	617b      	str	r3, [r7, #20]
 8013f58:	e007      	b.n	8013f6a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8013f5a:	4b07      	ldr	r3, [pc, #28]	; (8013f78 <prvInsertTimerInActiveList+0x80>)
 8013f5c:	681a      	ldr	r2, [r3, #0]
 8013f5e:	68fb      	ldr	r3, [r7, #12]
 8013f60:	3304      	adds	r3, #4
 8013f62:	4619      	mov	r1, r3
 8013f64:	4610      	mov	r0, r2
 8013f66:	f7fd fa7a 	bl	801145e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8013f6a:	697b      	ldr	r3, [r7, #20]
}
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	3718      	adds	r7, #24
 8013f70:	46bd      	mov	sp, r7
 8013f72:	bd80      	pop	{r7, pc}
 8013f74:	20001478 	.word	0x20001478
 8013f78:	20001474 	.word	0x20001474

08013f7c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8013f7c:	b580      	push	{r7, lr}
 8013f7e:	b08e      	sub	sp, #56	; 0x38
 8013f80:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8013f82:	e0ca      	b.n	801411a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	da18      	bge.n	8013fbc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8013f8a:	1d3b      	adds	r3, r7, #4
 8013f8c:	3304      	adds	r3, #4
 8013f8e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8013f90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d10a      	bne.n	8013fac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8013f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f9a:	f383 8811 	msr	BASEPRI, r3
 8013f9e:	f3bf 8f6f 	isb	sy
 8013fa2:	f3bf 8f4f 	dsb	sy
 8013fa6:	61fb      	str	r3, [r7, #28]
}
 8013fa8:	bf00      	nop
 8013faa:	e7fe      	b.n	8013faa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8013fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013fb2:	6850      	ldr	r0, [r2, #4]
 8013fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013fb6:	6892      	ldr	r2, [r2, #8]
 8013fb8:	4611      	mov	r1, r2
 8013fba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	f2c0 80aa 	blt.w	8014118 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8013fc4:	68fb      	ldr	r3, [r7, #12]
 8013fc6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8013fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fca:	695b      	ldr	r3, [r3, #20]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d004      	beq.n	8013fda <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8013fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013fd2:	3304      	adds	r3, #4
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	f7fd fa7b 	bl	80114d0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8013fda:	463b      	mov	r3, r7
 8013fdc:	4618      	mov	r0, r3
 8013fde:	f7ff ff6b 	bl	8013eb8 <prvSampleTimeNow>
 8013fe2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	2b09      	cmp	r3, #9
 8013fe8:	f200 8097 	bhi.w	801411a <prvProcessReceivedCommands+0x19e>
 8013fec:	a201      	add	r2, pc, #4	; (adr r2, 8013ff4 <prvProcessReceivedCommands+0x78>)
 8013fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013ff2:	bf00      	nop
 8013ff4:	0801401d 	.word	0x0801401d
 8013ff8:	0801401d 	.word	0x0801401d
 8013ffc:	0801401d 	.word	0x0801401d
 8014000:	08014091 	.word	0x08014091
 8014004:	080140a5 	.word	0x080140a5
 8014008:	080140ef 	.word	0x080140ef
 801400c:	0801401d 	.word	0x0801401d
 8014010:	0801401d 	.word	0x0801401d
 8014014:	08014091 	.word	0x08014091
 8014018:	080140a5 	.word	0x080140a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801401c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801401e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014022:	f043 0301 	orr.w	r3, r3, #1
 8014026:	b2da      	uxtb	r2, r3
 8014028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801402a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801402e:	68ba      	ldr	r2, [r7, #8]
 8014030:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014032:	699b      	ldr	r3, [r3, #24]
 8014034:	18d1      	adds	r1, r2, r3
 8014036:	68bb      	ldr	r3, [r7, #8]
 8014038:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801403a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801403c:	f7ff ff5c 	bl	8013ef8 <prvInsertTimerInActiveList>
 8014040:	4603      	mov	r3, r0
 8014042:	2b00      	cmp	r3, #0
 8014044:	d069      	beq.n	801411a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014048:	6a1b      	ldr	r3, [r3, #32]
 801404a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801404c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801404e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014050:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014054:	f003 0304 	and.w	r3, r3, #4
 8014058:	2b00      	cmp	r3, #0
 801405a:	d05e      	beq.n	801411a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801405c:	68ba      	ldr	r2, [r7, #8]
 801405e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014060:	699b      	ldr	r3, [r3, #24]
 8014062:	441a      	add	r2, r3
 8014064:	2300      	movs	r3, #0
 8014066:	9300      	str	r3, [sp, #0]
 8014068:	2300      	movs	r3, #0
 801406a:	2100      	movs	r1, #0
 801406c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801406e:	f7ff fe05 	bl	8013c7c <xTimerGenericCommand>
 8014072:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8014074:	6a3b      	ldr	r3, [r7, #32]
 8014076:	2b00      	cmp	r3, #0
 8014078:	d14f      	bne.n	801411a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801407a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801407e:	f383 8811 	msr	BASEPRI, r3
 8014082:	f3bf 8f6f 	isb	sy
 8014086:	f3bf 8f4f 	dsb	sy
 801408a:	61bb      	str	r3, [r7, #24]
}
 801408c:	bf00      	nop
 801408e:	e7fe      	b.n	801408e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014092:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014096:	f023 0301 	bic.w	r3, r3, #1
 801409a:	b2da      	uxtb	r2, r3
 801409c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801409e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80140a2:	e03a      	b.n	801411a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80140a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80140aa:	f043 0301 	orr.w	r3, r3, #1
 80140ae:	b2da      	uxtb	r2, r3
 80140b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80140b6:	68ba      	ldr	r2, [r7, #8]
 80140b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80140bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140be:	699b      	ldr	r3, [r3, #24]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d10a      	bne.n	80140da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80140c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140c8:	f383 8811 	msr	BASEPRI, r3
 80140cc:	f3bf 8f6f 	isb	sy
 80140d0:	f3bf 8f4f 	dsb	sy
 80140d4:	617b      	str	r3, [r7, #20]
}
 80140d6:	bf00      	nop
 80140d8:	e7fe      	b.n	80140d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80140da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140dc:	699a      	ldr	r2, [r3, #24]
 80140de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140e0:	18d1      	adds	r1, r2, r3
 80140e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80140e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80140e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80140e8:	f7ff ff06 	bl	8013ef8 <prvInsertTimerInActiveList>
					break;
 80140ec:	e015      	b.n	801411a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80140ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80140f4:	f003 0302 	and.w	r3, r3, #2
 80140f8:	2b00      	cmp	r3, #0
 80140fa:	d103      	bne.n	8014104 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80140fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80140fe:	f000 fbdf 	bl	80148c0 <vPortFree>
 8014102:	e00a      	b.n	801411a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8014104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014106:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801410a:	f023 0301 	bic.w	r3, r3, #1
 801410e:	b2da      	uxtb	r2, r3
 8014110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014112:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8014116:	e000      	b.n	801411a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8014118:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801411a:	4b08      	ldr	r3, [pc, #32]	; (801413c <prvProcessReceivedCommands+0x1c0>)
 801411c:	681b      	ldr	r3, [r3, #0]
 801411e:	1d39      	adds	r1, r7, #4
 8014120:	2200      	movs	r2, #0
 8014122:	4618      	mov	r0, r3
 8014124:	f7fd fdcc 	bl	8011cc0 <xQueueReceive>
 8014128:	4603      	mov	r3, r0
 801412a:	2b00      	cmp	r3, #0
 801412c:	f47f af2a 	bne.w	8013f84 <prvProcessReceivedCommands+0x8>
	}
}
 8014130:	bf00      	nop
 8014132:	bf00      	nop
 8014134:	3730      	adds	r7, #48	; 0x30
 8014136:	46bd      	mov	sp, r7
 8014138:	bd80      	pop	{r7, pc}
 801413a:	bf00      	nop
 801413c:	2000147c 	.word	0x2000147c

08014140 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8014140:	b580      	push	{r7, lr}
 8014142:	b088      	sub	sp, #32
 8014144:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8014146:	e048      	b.n	80141da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8014148:	4b2d      	ldr	r3, [pc, #180]	; (8014200 <prvSwitchTimerLists+0xc0>)
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	68db      	ldr	r3, [r3, #12]
 801414e:	681b      	ldr	r3, [r3, #0]
 8014150:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014152:	4b2b      	ldr	r3, [pc, #172]	; (8014200 <prvSwitchTimerLists+0xc0>)
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	68db      	ldr	r3, [r3, #12]
 8014158:	68db      	ldr	r3, [r3, #12]
 801415a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801415c:	68fb      	ldr	r3, [r7, #12]
 801415e:	3304      	adds	r3, #4
 8014160:	4618      	mov	r0, r3
 8014162:	f7fd f9b5 	bl	80114d0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	6a1b      	ldr	r3, [r3, #32]
 801416a:	68f8      	ldr	r0, [r7, #12]
 801416c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801416e:	68fb      	ldr	r3, [r7, #12]
 8014170:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014174:	f003 0304 	and.w	r3, r3, #4
 8014178:	2b00      	cmp	r3, #0
 801417a:	d02e      	beq.n	80141da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801417c:	68fb      	ldr	r3, [r7, #12]
 801417e:	699b      	ldr	r3, [r3, #24]
 8014180:	693a      	ldr	r2, [r7, #16]
 8014182:	4413      	add	r3, r2
 8014184:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8014186:	68ba      	ldr	r2, [r7, #8]
 8014188:	693b      	ldr	r3, [r7, #16]
 801418a:	429a      	cmp	r2, r3
 801418c:	d90e      	bls.n	80141ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	68ba      	ldr	r2, [r7, #8]
 8014192:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8014194:	68fb      	ldr	r3, [r7, #12]
 8014196:	68fa      	ldr	r2, [r7, #12]
 8014198:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801419a:	4b19      	ldr	r3, [pc, #100]	; (8014200 <prvSwitchTimerLists+0xc0>)
 801419c:	681a      	ldr	r2, [r3, #0]
 801419e:	68fb      	ldr	r3, [r7, #12]
 80141a0:	3304      	adds	r3, #4
 80141a2:	4619      	mov	r1, r3
 80141a4:	4610      	mov	r0, r2
 80141a6:	f7fd f95a 	bl	801145e <vListInsert>
 80141aa:	e016      	b.n	80141da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80141ac:	2300      	movs	r3, #0
 80141ae:	9300      	str	r3, [sp, #0]
 80141b0:	2300      	movs	r3, #0
 80141b2:	693a      	ldr	r2, [r7, #16]
 80141b4:	2100      	movs	r1, #0
 80141b6:	68f8      	ldr	r0, [r7, #12]
 80141b8:	f7ff fd60 	bl	8013c7c <xTimerGenericCommand>
 80141bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d10a      	bne.n	80141da <prvSwitchTimerLists+0x9a>
	__asm volatile
 80141c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141c8:	f383 8811 	msr	BASEPRI, r3
 80141cc:	f3bf 8f6f 	isb	sy
 80141d0:	f3bf 8f4f 	dsb	sy
 80141d4:	603b      	str	r3, [r7, #0]
}
 80141d6:	bf00      	nop
 80141d8:	e7fe      	b.n	80141d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80141da:	4b09      	ldr	r3, [pc, #36]	; (8014200 <prvSwitchTimerLists+0xc0>)
 80141dc:	681b      	ldr	r3, [r3, #0]
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	2b00      	cmp	r3, #0
 80141e2:	d1b1      	bne.n	8014148 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80141e4:	4b06      	ldr	r3, [pc, #24]	; (8014200 <prvSwitchTimerLists+0xc0>)
 80141e6:	681b      	ldr	r3, [r3, #0]
 80141e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80141ea:	4b06      	ldr	r3, [pc, #24]	; (8014204 <prvSwitchTimerLists+0xc4>)
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	4a04      	ldr	r2, [pc, #16]	; (8014200 <prvSwitchTimerLists+0xc0>)
 80141f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80141f2:	4a04      	ldr	r2, [pc, #16]	; (8014204 <prvSwitchTimerLists+0xc4>)
 80141f4:	697b      	ldr	r3, [r7, #20]
 80141f6:	6013      	str	r3, [r2, #0]
}
 80141f8:	bf00      	nop
 80141fa:	3718      	adds	r7, #24
 80141fc:	46bd      	mov	sp, r7
 80141fe:	bd80      	pop	{r7, pc}
 8014200:	20001474 	.word	0x20001474
 8014204:	20001478 	.word	0x20001478

08014208 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8014208:	b580      	push	{r7, lr}
 801420a:	b082      	sub	sp, #8
 801420c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801420e:	f000 f969 	bl	80144e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8014212:	4b15      	ldr	r3, [pc, #84]	; (8014268 <prvCheckForValidListAndQueue+0x60>)
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	2b00      	cmp	r3, #0
 8014218:	d120      	bne.n	801425c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801421a:	4814      	ldr	r0, [pc, #80]	; (801426c <prvCheckForValidListAndQueue+0x64>)
 801421c:	f7fd f8ce 	bl	80113bc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8014220:	4813      	ldr	r0, [pc, #76]	; (8014270 <prvCheckForValidListAndQueue+0x68>)
 8014222:	f7fd f8cb 	bl	80113bc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8014226:	4b13      	ldr	r3, [pc, #76]	; (8014274 <prvCheckForValidListAndQueue+0x6c>)
 8014228:	4a10      	ldr	r2, [pc, #64]	; (801426c <prvCheckForValidListAndQueue+0x64>)
 801422a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801422c:	4b12      	ldr	r3, [pc, #72]	; (8014278 <prvCheckForValidListAndQueue+0x70>)
 801422e:	4a10      	ldr	r2, [pc, #64]	; (8014270 <prvCheckForValidListAndQueue+0x68>)
 8014230:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8014232:	2300      	movs	r3, #0
 8014234:	9300      	str	r3, [sp, #0]
 8014236:	4b11      	ldr	r3, [pc, #68]	; (801427c <prvCheckForValidListAndQueue+0x74>)
 8014238:	4a11      	ldr	r2, [pc, #68]	; (8014280 <prvCheckForValidListAndQueue+0x78>)
 801423a:	2110      	movs	r1, #16
 801423c:	200a      	movs	r0, #10
 801423e:	f7fd f9d9 	bl	80115f4 <xQueueGenericCreateStatic>
 8014242:	4603      	mov	r3, r0
 8014244:	4a08      	ldr	r2, [pc, #32]	; (8014268 <prvCheckForValidListAndQueue+0x60>)
 8014246:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8014248:	4b07      	ldr	r3, [pc, #28]	; (8014268 <prvCheckForValidListAndQueue+0x60>)
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d005      	beq.n	801425c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8014250:	4b05      	ldr	r3, [pc, #20]	; (8014268 <prvCheckForValidListAndQueue+0x60>)
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	490b      	ldr	r1, [pc, #44]	; (8014284 <prvCheckForValidListAndQueue+0x7c>)
 8014256:	4618      	mov	r0, r3
 8014258:	f7fe f8ea 	bl	8012430 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801425c:	f000 f972 	bl	8014544 <vPortExitCritical>
}
 8014260:	bf00      	nop
 8014262:	46bd      	mov	sp, r7
 8014264:	bd80      	pop	{r7, pc}
 8014266:	bf00      	nop
 8014268:	2000147c 	.word	0x2000147c
 801426c:	2000144c 	.word	0x2000144c
 8014270:	20001460 	.word	0x20001460
 8014274:	20001474 	.word	0x20001474
 8014278:	20001478 	.word	0x20001478
 801427c:	20001528 	.word	0x20001528
 8014280:	20001488 	.word	0x20001488
 8014284:	08018ba0 	.word	0x08018ba0

08014288 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014288:	b480      	push	{r7}
 801428a:	b085      	sub	sp, #20
 801428c:	af00      	add	r7, sp, #0
 801428e:	60f8      	str	r0, [r7, #12]
 8014290:	60b9      	str	r1, [r7, #8]
 8014292:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	3b04      	subs	r3, #4
 8014298:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801429a:	68fb      	ldr	r3, [r7, #12]
 801429c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80142a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80142a2:	68fb      	ldr	r3, [r7, #12]
 80142a4:	3b04      	subs	r3, #4
 80142a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80142a8:	68bb      	ldr	r3, [r7, #8]
 80142aa:	f023 0201 	bic.w	r2, r3, #1
 80142ae:	68fb      	ldr	r3, [r7, #12]
 80142b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80142b2:	68fb      	ldr	r3, [r7, #12]
 80142b4:	3b04      	subs	r3, #4
 80142b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80142b8:	4a0c      	ldr	r2, [pc, #48]	; (80142ec <pxPortInitialiseStack+0x64>)
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80142be:	68fb      	ldr	r3, [r7, #12]
 80142c0:	3b14      	subs	r3, #20
 80142c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80142c4:	687a      	ldr	r2, [r7, #4]
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80142ca:	68fb      	ldr	r3, [r7, #12]
 80142cc:	3b04      	subs	r3, #4
 80142ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80142d0:	68fb      	ldr	r3, [r7, #12]
 80142d2:	f06f 0202 	mvn.w	r2, #2
 80142d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80142d8:	68fb      	ldr	r3, [r7, #12]
 80142da:	3b20      	subs	r3, #32
 80142dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80142de:	68fb      	ldr	r3, [r7, #12]
}
 80142e0:	4618      	mov	r0, r3
 80142e2:	3714      	adds	r7, #20
 80142e4:	46bd      	mov	sp, r7
 80142e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142ea:	4770      	bx	lr
 80142ec:	080142f1 	.word	0x080142f1

080142f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80142f0:	b480      	push	{r7}
 80142f2:	b085      	sub	sp, #20
 80142f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80142f6:	2300      	movs	r3, #0
 80142f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80142fa:	4b12      	ldr	r3, [pc, #72]	; (8014344 <prvTaskExitError+0x54>)
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014302:	d00a      	beq.n	801431a <prvTaskExitError+0x2a>
	__asm volatile
 8014304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014308:	f383 8811 	msr	BASEPRI, r3
 801430c:	f3bf 8f6f 	isb	sy
 8014310:	f3bf 8f4f 	dsb	sy
 8014314:	60fb      	str	r3, [r7, #12]
}
 8014316:	bf00      	nop
 8014318:	e7fe      	b.n	8014318 <prvTaskExitError+0x28>
	__asm volatile
 801431a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801431e:	f383 8811 	msr	BASEPRI, r3
 8014322:	f3bf 8f6f 	isb	sy
 8014326:	f3bf 8f4f 	dsb	sy
 801432a:	60bb      	str	r3, [r7, #8]
}
 801432c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801432e:	bf00      	nop
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	2b00      	cmp	r3, #0
 8014334:	d0fc      	beq.n	8014330 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014336:	bf00      	nop
 8014338:	bf00      	nop
 801433a:	3714      	adds	r7, #20
 801433c:	46bd      	mov	sp, r7
 801433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014342:	4770      	bx	lr
 8014344:	20000134 	.word	0x20000134
	...

08014350 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014350:	4b07      	ldr	r3, [pc, #28]	; (8014370 <pxCurrentTCBConst2>)
 8014352:	6819      	ldr	r1, [r3, #0]
 8014354:	6808      	ldr	r0, [r1, #0]
 8014356:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801435a:	f380 8809 	msr	PSP, r0
 801435e:	f3bf 8f6f 	isb	sy
 8014362:	f04f 0000 	mov.w	r0, #0
 8014366:	f380 8811 	msr	BASEPRI, r0
 801436a:	4770      	bx	lr
 801436c:	f3af 8000 	nop.w

08014370 <pxCurrentTCBConst2>:
 8014370:	20000f44 	.word	0x20000f44
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014374:	bf00      	nop
 8014376:	bf00      	nop

08014378 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014378:	4808      	ldr	r0, [pc, #32]	; (801439c <prvPortStartFirstTask+0x24>)
 801437a:	6800      	ldr	r0, [r0, #0]
 801437c:	6800      	ldr	r0, [r0, #0]
 801437e:	f380 8808 	msr	MSP, r0
 8014382:	f04f 0000 	mov.w	r0, #0
 8014386:	f380 8814 	msr	CONTROL, r0
 801438a:	b662      	cpsie	i
 801438c:	b661      	cpsie	f
 801438e:	f3bf 8f4f 	dsb	sy
 8014392:	f3bf 8f6f 	isb	sy
 8014396:	df00      	svc	0
 8014398:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801439a:	bf00      	nop
 801439c:	e000ed08 	.word	0xe000ed08

080143a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80143a0:	b580      	push	{r7, lr}
 80143a2:	b086      	sub	sp, #24
 80143a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80143a6:	4b46      	ldr	r3, [pc, #280]	; (80144c0 <xPortStartScheduler+0x120>)
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	4a46      	ldr	r2, [pc, #280]	; (80144c4 <xPortStartScheduler+0x124>)
 80143ac:	4293      	cmp	r3, r2
 80143ae:	d10a      	bne.n	80143c6 <xPortStartScheduler+0x26>
	__asm volatile
 80143b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143b4:	f383 8811 	msr	BASEPRI, r3
 80143b8:	f3bf 8f6f 	isb	sy
 80143bc:	f3bf 8f4f 	dsb	sy
 80143c0:	613b      	str	r3, [r7, #16]
}
 80143c2:	bf00      	nop
 80143c4:	e7fe      	b.n	80143c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80143c6:	4b3e      	ldr	r3, [pc, #248]	; (80144c0 <xPortStartScheduler+0x120>)
 80143c8:	681b      	ldr	r3, [r3, #0]
 80143ca:	4a3f      	ldr	r2, [pc, #252]	; (80144c8 <xPortStartScheduler+0x128>)
 80143cc:	4293      	cmp	r3, r2
 80143ce:	d10a      	bne.n	80143e6 <xPortStartScheduler+0x46>
	__asm volatile
 80143d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143d4:	f383 8811 	msr	BASEPRI, r3
 80143d8:	f3bf 8f6f 	isb	sy
 80143dc:	f3bf 8f4f 	dsb	sy
 80143e0:	60fb      	str	r3, [r7, #12]
}
 80143e2:	bf00      	nop
 80143e4:	e7fe      	b.n	80143e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80143e6:	4b39      	ldr	r3, [pc, #228]	; (80144cc <xPortStartScheduler+0x12c>)
 80143e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80143ea:	697b      	ldr	r3, [r7, #20]
 80143ec:	781b      	ldrb	r3, [r3, #0]
 80143ee:	b2db      	uxtb	r3, r3
 80143f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80143f2:	697b      	ldr	r3, [r7, #20]
 80143f4:	22ff      	movs	r2, #255	; 0xff
 80143f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80143f8:	697b      	ldr	r3, [r7, #20]
 80143fa:	781b      	ldrb	r3, [r3, #0]
 80143fc:	b2db      	uxtb	r3, r3
 80143fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8014400:	78fb      	ldrb	r3, [r7, #3]
 8014402:	b2db      	uxtb	r3, r3
 8014404:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8014408:	b2da      	uxtb	r2, r3
 801440a:	4b31      	ldr	r3, [pc, #196]	; (80144d0 <xPortStartScheduler+0x130>)
 801440c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801440e:	4b31      	ldr	r3, [pc, #196]	; (80144d4 <xPortStartScheduler+0x134>)
 8014410:	2207      	movs	r2, #7
 8014412:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8014414:	e009      	b.n	801442a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8014416:	4b2f      	ldr	r3, [pc, #188]	; (80144d4 <xPortStartScheduler+0x134>)
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	3b01      	subs	r3, #1
 801441c:	4a2d      	ldr	r2, [pc, #180]	; (80144d4 <xPortStartScheduler+0x134>)
 801441e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8014420:	78fb      	ldrb	r3, [r7, #3]
 8014422:	b2db      	uxtb	r3, r3
 8014424:	005b      	lsls	r3, r3, #1
 8014426:	b2db      	uxtb	r3, r3
 8014428:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801442a:	78fb      	ldrb	r3, [r7, #3]
 801442c:	b2db      	uxtb	r3, r3
 801442e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014432:	2b80      	cmp	r3, #128	; 0x80
 8014434:	d0ef      	beq.n	8014416 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8014436:	4b27      	ldr	r3, [pc, #156]	; (80144d4 <xPortStartScheduler+0x134>)
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	f1c3 0307 	rsb	r3, r3, #7
 801443e:	2b04      	cmp	r3, #4
 8014440:	d00a      	beq.n	8014458 <xPortStartScheduler+0xb8>
	__asm volatile
 8014442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014446:	f383 8811 	msr	BASEPRI, r3
 801444a:	f3bf 8f6f 	isb	sy
 801444e:	f3bf 8f4f 	dsb	sy
 8014452:	60bb      	str	r3, [r7, #8]
}
 8014454:	bf00      	nop
 8014456:	e7fe      	b.n	8014456 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8014458:	4b1e      	ldr	r3, [pc, #120]	; (80144d4 <xPortStartScheduler+0x134>)
 801445a:	681b      	ldr	r3, [r3, #0]
 801445c:	021b      	lsls	r3, r3, #8
 801445e:	4a1d      	ldr	r2, [pc, #116]	; (80144d4 <xPortStartScheduler+0x134>)
 8014460:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014462:	4b1c      	ldr	r3, [pc, #112]	; (80144d4 <xPortStartScheduler+0x134>)
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801446a:	4a1a      	ldr	r2, [pc, #104]	; (80144d4 <xPortStartScheduler+0x134>)
 801446c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	b2da      	uxtb	r2, r3
 8014472:	697b      	ldr	r3, [r7, #20]
 8014474:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8014476:	4b18      	ldr	r3, [pc, #96]	; (80144d8 <xPortStartScheduler+0x138>)
 8014478:	681b      	ldr	r3, [r3, #0]
 801447a:	4a17      	ldr	r2, [pc, #92]	; (80144d8 <xPortStartScheduler+0x138>)
 801447c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014480:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014482:	4b15      	ldr	r3, [pc, #84]	; (80144d8 <xPortStartScheduler+0x138>)
 8014484:	681b      	ldr	r3, [r3, #0]
 8014486:	4a14      	ldr	r2, [pc, #80]	; (80144d8 <xPortStartScheduler+0x138>)
 8014488:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801448c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801448e:	f000 f8dd 	bl	801464c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014492:	4b12      	ldr	r3, [pc, #72]	; (80144dc <xPortStartScheduler+0x13c>)
 8014494:	2200      	movs	r2, #0
 8014496:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8014498:	f000 f8fc 	bl	8014694 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801449c:	4b10      	ldr	r3, [pc, #64]	; (80144e0 <xPortStartScheduler+0x140>)
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	4a0f      	ldr	r2, [pc, #60]	; (80144e0 <xPortStartScheduler+0x140>)
 80144a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80144a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80144a8:	f7ff ff66 	bl	8014378 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80144ac:	f7fe fd18 	bl	8012ee0 <vTaskSwitchContext>
	prvTaskExitError();
 80144b0:	f7ff ff1e 	bl	80142f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80144b4:	2300      	movs	r3, #0
}
 80144b6:	4618      	mov	r0, r3
 80144b8:	3718      	adds	r7, #24
 80144ba:	46bd      	mov	sp, r7
 80144bc:	bd80      	pop	{r7, pc}
 80144be:	bf00      	nop
 80144c0:	e000ed00 	.word	0xe000ed00
 80144c4:	410fc271 	.word	0x410fc271
 80144c8:	410fc270 	.word	0x410fc270
 80144cc:	e000e400 	.word	0xe000e400
 80144d0:	20001578 	.word	0x20001578
 80144d4:	2000157c 	.word	0x2000157c
 80144d8:	e000ed20 	.word	0xe000ed20
 80144dc:	20000134 	.word	0x20000134
 80144e0:	e000ef34 	.word	0xe000ef34

080144e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80144e4:	b480      	push	{r7}
 80144e6:	b083      	sub	sp, #12
 80144e8:	af00      	add	r7, sp, #0
	__asm volatile
 80144ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144ee:	f383 8811 	msr	BASEPRI, r3
 80144f2:	f3bf 8f6f 	isb	sy
 80144f6:	f3bf 8f4f 	dsb	sy
 80144fa:	607b      	str	r3, [r7, #4]
}
 80144fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80144fe:	4b0f      	ldr	r3, [pc, #60]	; (801453c <vPortEnterCritical+0x58>)
 8014500:	681b      	ldr	r3, [r3, #0]
 8014502:	3301      	adds	r3, #1
 8014504:	4a0d      	ldr	r2, [pc, #52]	; (801453c <vPortEnterCritical+0x58>)
 8014506:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8014508:	4b0c      	ldr	r3, [pc, #48]	; (801453c <vPortEnterCritical+0x58>)
 801450a:	681b      	ldr	r3, [r3, #0]
 801450c:	2b01      	cmp	r3, #1
 801450e:	d10f      	bne.n	8014530 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8014510:	4b0b      	ldr	r3, [pc, #44]	; (8014540 <vPortEnterCritical+0x5c>)
 8014512:	681b      	ldr	r3, [r3, #0]
 8014514:	b2db      	uxtb	r3, r3
 8014516:	2b00      	cmp	r3, #0
 8014518:	d00a      	beq.n	8014530 <vPortEnterCritical+0x4c>
	__asm volatile
 801451a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801451e:	f383 8811 	msr	BASEPRI, r3
 8014522:	f3bf 8f6f 	isb	sy
 8014526:	f3bf 8f4f 	dsb	sy
 801452a:	603b      	str	r3, [r7, #0]
}
 801452c:	bf00      	nop
 801452e:	e7fe      	b.n	801452e <vPortEnterCritical+0x4a>
	}
}
 8014530:	bf00      	nop
 8014532:	370c      	adds	r7, #12
 8014534:	46bd      	mov	sp, r7
 8014536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801453a:	4770      	bx	lr
 801453c:	20000134 	.word	0x20000134
 8014540:	e000ed04 	.word	0xe000ed04

08014544 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014544:	b480      	push	{r7}
 8014546:	b083      	sub	sp, #12
 8014548:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801454a:	4b12      	ldr	r3, [pc, #72]	; (8014594 <vPortExitCritical+0x50>)
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	2b00      	cmp	r3, #0
 8014550:	d10a      	bne.n	8014568 <vPortExitCritical+0x24>
	__asm volatile
 8014552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014556:	f383 8811 	msr	BASEPRI, r3
 801455a:	f3bf 8f6f 	isb	sy
 801455e:	f3bf 8f4f 	dsb	sy
 8014562:	607b      	str	r3, [r7, #4]
}
 8014564:	bf00      	nop
 8014566:	e7fe      	b.n	8014566 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8014568:	4b0a      	ldr	r3, [pc, #40]	; (8014594 <vPortExitCritical+0x50>)
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	3b01      	subs	r3, #1
 801456e:	4a09      	ldr	r2, [pc, #36]	; (8014594 <vPortExitCritical+0x50>)
 8014570:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014572:	4b08      	ldr	r3, [pc, #32]	; (8014594 <vPortExitCritical+0x50>)
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	2b00      	cmp	r3, #0
 8014578:	d105      	bne.n	8014586 <vPortExitCritical+0x42>
 801457a:	2300      	movs	r3, #0
 801457c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801457e:	683b      	ldr	r3, [r7, #0]
 8014580:	f383 8811 	msr	BASEPRI, r3
}
 8014584:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014586:	bf00      	nop
 8014588:	370c      	adds	r7, #12
 801458a:	46bd      	mov	sp, r7
 801458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014590:	4770      	bx	lr
 8014592:	bf00      	nop
 8014594:	20000134 	.word	0x20000134
	...

080145a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80145a0:	f3ef 8009 	mrs	r0, PSP
 80145a4:	f3bf 8f6f 	isb	sy
 80145a8:	4b15      	ldr	r3, [pc, #84]	; (8014600 <pxCurrentTCBConst>)
 80145aa:	681a      	ldr	r2, [r3, #0]
 80145ac:	f01e 0f10 	tst.w	lr, #16
 80145b0:	bf08      	it	eq
 80145b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80145b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145ba:	6010      	str	r0, [r2, #0]
 80145bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80145c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80145c4:	f380 8811 	msr	BASEPRI, r0
 80145c8:	f3bf 8f4f 	dsb	sy
 80145cc:	f3bf 8f6f 	isb	sy
 80145d0:	f7fe fc86 	bl	8012ee0 <vTaskSwitchContext>
 80145d4:	f04f 0000 	mov.w	r0, #0
 80145d8:	f380 8811 	msr	BASEPRI, r0
 80145dc:	bc09      	pop	{r0, r3}
 80145de:	6819      	ldr	r1, [r3, #0]
 80145e0:	6808      	ldr	r0, [r1, #0]
 80145e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145e6:	f01e 0f10 	tst.w	lr, #16
 80145ea:	bf08      	it	eq
 80145ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80145f0:	f380 8809 	msr	PSP, r0
 80145f4:	f3bf 8f6f 	isb	sy
 80145f8:	4770      	bx	lr
 80145fa:	bf00      	nop
 80145fc:	f3af 8000 	nop.w

08014600 <pxCurrentTCBConst>:
 8014600:	20000f44 	.word	0x20000f44
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014604:	bf00      	nop
 8014606:	bf00      	nop

08014608 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b082      	sub	sp, #8
 801460c:	af00      	add	r7, sp, #0
	__asm volatile
 801460e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014612:	f383 8811 	msr	BASEPRI, r3
 8014616:	f3bf 8f6f 	isb	sy
 801461a:	f3bf 8f4f 	dsb	sy
 801461e:	607b      	str	r3, [r7, #4]
}
 8014620:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014622:	f7fe fba3 	bl	8012d6c <xTaskIncrementTick>
 8014626:	4603      	mov	r3, r0
 8014628:	2b00      	cmp	r3, #0
 801462a:	d003      	beq.n	8014634 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801462c:	4b06      	ldr	r3, [pc, #24]	; (8014648 <xPortSysTickHandler+0x40>)
 801462e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014632:	601a      	str	r2, [r3, #0]
 8014634:	2300      	movs	r3, #0
 8014636:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014638:	683b      	ldr	r3, [r7, #0]
 801463a:	f383 8811 	msr	BASEPRI, r3
}
 801463e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014640:	bf00      	nop
 8014642:	3708      	adds	r7, #8
 8014644:	46bd      	mov	sp, r7
 8014646:	bd80      	pop	{r7, pc}
 8014648:	e000ed04 	.word	0xe000ed04

0801464c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801464c:	b480      	push	{r7}
 801464e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014650:	4b0b      	ldr	r3, [pc, #44]	; (8014680 <vPortSetupTimerInterrupt+0x34>)
 8014652:	2200      	movs	r2, #0
 8014654:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014656:	4b0b      	ldr	r3, [pc, #44]	; (8014684 <vPortSetupTimerInterrupt+0x38>)
 8014658:	2200      	movs	r2, #0
 801465a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801465c:	4b0a      	ldr	r3, [pc, #40]	; (8014688 <vPortSetupTimerInterrupt+0x3c>)
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	4a0a      	ldr	r2, [pc, #40]	; (801468c <vPortSetupTimerInterrupt+0x40>)
 8014662:	fba2 2303 	umull	r2, r3, r2, r3
 8014666:	099b      	lsrs	r3, r3, #6
 8014668:	4a09      	ldr	r2, [pc, #36]	; (8014690 <vPortSetupTimerInterrupt+0x44>)
 801466a:	3b01      	subs	r3, #1
 801466c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801466e:	4b04      	ldr	r3, [pc, #16]	; (8014680 <vPortSetupTimerInterrupt+0x34>)
 8014670:	2207      	movs	r2, #7
 8014672:	601a      	str	r2, [r3, #0]
}
 8014674:	bf00      	nop
 8014676:	46bd      	mov	sp, r7
 8014678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801467c:	4770      	bx	lr
 801467e:	bf00      	nop
 8014680:	e000e010 	.word	0xe000e010
 8014684:	e000e018 	.word	0xe000e018
 8014688:	20000004 	.word	0x20000004
 801468c:	10624dd3 	.word	0x10624dd3
 8014690:	e000e014 	.word	0xe000e014

08014694 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014694:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80146a4 <vPortEnableVFP+0x10>
 8014698:	6801      	ldr	r1, [r0, #0]
 801469a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801469e:	6001      	str	r1, [r0, #0]
 80146a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80146a2:	bf00      	nop
 80146a4:	e000ed88 	.word	0xe000ed88

080146a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80146a8:	b480      	push	{r7}
 80146aa:	b085      	sub	sp, #20
 80146ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80146ae:	f3ef 8305 	mrs	r3, IPSR
 80146b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80146b4:	68fb      	ldr	r3, [r7, #12]
 80146b6:	2b0f      	cmp	r3, #15
 80146b8:	d914      	bls.n	80146e4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80146ba:	4a17      	ldr	r2, [pc, #92]	; (8014718 <vPortValidateInterruptPriority+0x70>)
 80146bc:	68fb      	ldr	r3, [r7, #12]
 80146be:	4413      	add	r3, r2
 80146c0:	781b      	ldrb	r3, [r3, #0]
 80146c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80146c4:	4b15      	ldr	r3, [pc, #84]	; (801471c <vPortValidateInterruptPriority+0x74>)
 80146c6:	781b      	ldrb	r3, [r3, #0]
 80146c8:	7afa      	ldrb	r2, [r7, #11]
 80146ca:	429a      	cmp	r2, r3
 80146cc:	d20a      	bcs.n	80146e4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80146ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146d2:	f383 8811 	msr	BASEPRI, r3
 80146d6:	f3bf 8f6f 	isb	sy
 80146da:	f3bf 8f4f 	dsb	sy
 80146de:	607b      	str	r3, [r7, #4]
}
 80146e0:	bf00      	nop
 80146e2:	e7fe      	b.n	80146e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80146e4:	4b0e      	ldr	r3, [pc, #56]	; (8014720 <vPortValidateInterruptPriority+0x78>)
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80146ec:	4b0d      	ldr	r3, [pc, #52]	; (8014724 <vPortValidateInterruptPriority+0x7c>)
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	429a      	cmp	r2, r3
 80146f2:	d90a      	bls.n	801470a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80146f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146f8:	f383 8811 	msr	BASEPRI, r3
 80146fc:	f3bf 8f6f 	isb	sy
 8014700:	f3bf 8f4f 	dsb	sy
 8014704:	603b      	str	r3, [r7, #0]
}
 8014706:	bf00      	nop
 8014708:	e7fe      	b.n	8014708 <vPortValidateInterruptPriority+0x60>
	}
 801470a:	bf00      	nop
 801470c:	3714      	adds	r7, #20
 801470e:	46bd      	mov	sp, r7
 8014710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014714:	4770      	bx	lr
 8014716:	bf00      	nop
 8014718:	e000e3f0 	.word	0xe000e3f0
 801471c:	20001578 	.word	0x20001578
 8014720:	e000ed0c 	.word	0xe000ed0c
 8014724:	2000157c 	.word	0x2000157c

08014728 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8014728:	b580      	push	{r7, lr}
 801472a:	b08a      	sub	sp, #40	; 0x28
 801472c:	af00      	add	r7, sp, #0
 801472e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8014730:	2300      	movs	r3, #0
 8014732:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8014734:	f7fe f9ce 	bl	8012ad4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8014738:	4b5b      	ldr	r3, [pc, #364]	; (80148a8 <pvPortMalloc+0x180>)
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	2b00      	cmp	r3, #0
 801473e:	d101      	bne.n	8014744 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8014740:	f000 f92c 	bl	801499c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8014744:	4b59      	ldr	r3, [pc, #356]	; (80148ac <pvPortMalloc+0x184>)
 8014746:	681a      	ldr	r2, [r3, #0]
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	4013      	ands	r3, r2
 801474c:	2b00      	cmp	r3, #0
 801474e:	f040 8093 	bne.w	8014878 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	2b00      	cmp	r3, #0
 8014756:	d01d      	beq.n	8014794 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8014758:	2208      	movs	r2, #8
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	4413      	add	r3, r2
 801475e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	f003 0307 	and.w	r3, r3, #7
 8014766:	2b00      	cmp	r3, #0
 8014768:	d014      	beq.n	8014794 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801476a:	687b      	ldr	r3, [r7, #4]
 801476c:	f023 0307 	bic.w	r3, r3, #7
 8014770:	3308      	adds	r3, #8
 8014772:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	f003 0307 	and.w	r3, r3, #7
 801477a:	2b00      	cmp	r3, #0
 801477c:	d00a      	beq.n	8014794 <pvPortMalloc+0x6c>
	__asm volatile
 801477e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014782:	f383 8811 	msr	BASEPRI, r3
 8014786:	f3bf 8f6f 	isb	sy
 801478a:	f3bf 8f4f 	dsb	sy
 801478e:	617b      	str	r3, [r7, #20]
}
 8014790:	bf00      	nop
 8014792:	e7fe      	b.n	8014792 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d06e      	beq.n	8014878 <pvPortMalloc+0x150>
 801479a:	4b45      	ldr	r3, [pc, #276]	; (80148b0 <pvPortMalloc+0x188>)
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	687a      	ldr	r2, [r7, #4]
 80147a0:	429a      	cmp	r2, r3
 80147a2:	d869      	bhi.n	8014878 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80147a4:	4b43      	ldr	r3, [pc, #268]	; (80148b4 <pvPortMalloc+0x18c>)
 80147a6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80147a8:	4b42      	ldr	r3, [pc, #264]	; (80148b4 <pvPortMalloc+0x18c>)
 80147aa:	681b      	ldr	r3, [r3, #0]
 80147ac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80147ae:	e004      	b.n	80147ba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80147b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147b2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80147b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80147ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147bc:	685b      	ldr	r3, [r3, #4]
 80147be:	687a      	ldr	r2, [r7, #4]
 80147c0:	429a      	cmp	r2, r3
 80147c2:	d903      	bls.n	80147cc <pvPortMalloc+0xa4>
 80147c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d1f1      	bne.n	80147b0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80147cc:	4b36      	ldr	r3, [pc, #216]	; (80148a8 <pvPortMalloc+0x180>)
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147d2:	429a      	cmp	r2, r3
 80147d4:	d050      	beq.n	8014878 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80147d6:	6a3b      	ldr	r3, [r7, #32]
 80147d8:	681b      	ldr	r3, [r3, #0]
 80147da:	2208      	movs	r2, #8
 80147dc:	4413      	add	r3, r2
 80147de:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80147e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147e2:	681a      	ldr	r2, [r3, #0]
 80147e4:	6a3b      	ldr	r3, [r7, #32]
 80147e6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80147e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ea:	685a      	ldr	r2, [r3, #4]
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	1ad2      	subs	r2, r2, r3
 80147f0:	2308      	movs	r3, #8
 80147f2:	005b      	lsls	r3, r3, #1
 80147f4:	429a      	cmp	r2, r3
 80147f6:	d91f      	bls.n	8014838 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80147f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	4413      	add	r3, r2
 80147fe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8014800:	69bb      	ldr	r3, [r7, #24]
 8014802:	f003 0307 	and.w	r3, r3, #7
 8014806:	2b00      	cmp	r3, #0
 8014808:	d00a      	beq.n	8014820 <pvPortMalloc+0xf8>
	__asm volatile
 801480a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801480e:	f383 8811 	msr	BASEPRI, r3
 8014812:	f3bf 8f6f 	isb	sy
 8014816:	f3bf 8f4f 	dsb	sy
 801481a:	613b      	str	r3, [r7, #16]
}
 801481c:	bf00      	nop
 801481e:	e7fe      	b.n	801481e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8014820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014822:	685a      	ldr	r2, [r3, #4]
 8014824:	687b      	ldr	r3, [r7, #4]
 8014826:	1ad2      	subs	r2, r2, r3
 8014828:	69bb      	ldr	r3, [r7, #24]
 801482a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801482e:	687a      	ldr	r2, [r7, #4]
 8014830:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8014832:	69b8      	ldr	r0, [r7, #24]
 8014834:	f000 f914 	bl	8014a60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8014838:	4b1d      	ldr	r3, [pc, #116]	; (80148b0 <pvPortMalloc+0x188>)
 801483a:	681a      	ldr	r2, [r3, #0]
 801483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801483e:	685b      	ldr	r3, [r3, #4]
 8014840:	1ad3      	subs	r3, r2, r3
 8014842:	4a1b      	ldr	r2, [pc, #108]	; (80148b0 <pvPortMalloc+0x188>)
 8014844:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8014846:	4b1a      	ldr	r3, [pc, #104]	; (80148b0 <pvPortMalloc+0x188>)
 8014848:	681a      	ldr	r2, [r3, #0]
 801484a:	4b1b      	ldr	r3, [pc, #108]	; (80148b8 <pvPortMalloc+0x190>)
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	429a      	cmp	r2, r3
 8014850:	d203      	bcs.n	801485a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8014852:	4b17      	ldr	r3, [pc, #92]	; (80148b0 <pvPortMalloc+0x188>)
 8014854:	681b      	ldr	r3, [r3, #0]
 8014856:	4a18      	ldr	r2, [pc, #96]	; (80148b8 <pvPortMalloc+0x190>)
 8014858:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801485c:	685a      	ldr	r2, [r3, #4]
 801485e:	4b13      	ldr	r3, [pc, #76]	; (80148ac <pvPortMalloc+0x184>)
 8014860:	681b      	ldr	r3, [r3, #0]
 8014862:	431a      	orrs	r2, r3
 8014864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014866:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8014868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801486a:	2200      	movs	r2, #0
 801486c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801486e:	4b13      	ldr	r3, [pc, #76]	; (80148bc <pvPortMalloc+0x194>)
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	3301      	adds	r3, #1
 8014874:	4a11      	ldr	r2, [pc, #68]	; (80148bc <pvPortMalloc+0x194>)
 8014876:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8014878:	f7fe f93a 	bl	8012af0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801487c:	69fb      	ldr	r3, [r7, #28]
 801487e:	f003 0307 	and.w	r3, r3, #7
 8014882:	2b00      	cmp	r3, #0
 8014884:	d00a      	beq.n	801489c <pvPortMalloc+0x174>
	__asm volatile
 8014886:	f04f 0350 	mov.w	r3, #80	; 0x50
 801488a:	f383 8811 	msr	BASEPRI, r3
 801488e:	f3bf 8f6f 	isb	sy
 8014892:	f3bf 8f4f 	dsb	sy
 8014896:	60fb      	str	r3, [r7, #12]
}
 8014898:	bf00      	nop
 801489a:	e7fe      	b.n	801489a <pvPortMalloc+0x172>
	return pvReturn;
 801489c:	69fb      	ldr	r3, [r7, #28]
}
 801489e:	4618      	mov	r0, r3
 80148a0:	3728      	adds	r7, #40	; 0x28
 80148a2:	46bd      	mov	sp, r7
 80148a4:	bd80      	pop	{r7, pc}
 80148a6:	bf00      	nop
 80148a8:	20005bd8 	.word	0x20005bd8
 80148ac:	20005bec 	.word	0x20005bec
 80148b0:	20005bdc 	.word	0x20005bdc
 80148b4:	20005bd0 	.word	0x20005bd0
 80148b8:	20005be0 	.word	0x20005be0
 80148bc:	20005be4 	.word	0x20005be4

080148c0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80148c0:	b580      	push	{r7, lr}
 80148c2:	b086      	sub	sp, #24
 80148c4:	af00      	add	r7, sp, #0
 80148c6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80148c8:	687b      	ldr	r3, [r7, #4]
 80148ca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d04d      	beq.n	801496e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80148d2:	2308      	movs	r3, #8
 80148d4:	425b      	negs	r3, r3
 80148d6:	697a      	ldr	r2, [r7, #20]
 80148d8:	4413      	add	r3, r2
 80148da:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80148dc:	697b      	ldr	r3, [r7, #20]
 80148de:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80148e0:	693b      	ldr	r3, [r7, #16]
 80148e2:	685a      	ldr	r2, [r3, #4]
 80148e4:	4b24      	ldr	r3, [pc, #144]	; (8014978 <vPortFree+0xb8>)
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	4013      	ands	r3, r2
 80148ea:	2b00      	cmp	r3, #0
 80148ec:	d10a      	bne.n	8014904 <vPortFree+0x44>
	__asm volatile
 80148ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148f2:	f383 8811 	msr	BASEPRI, r3
 80148f6:	f3bf 8f6f 	isb	sy
 80148fa:	f3bf 8f4f 	dsb	sy
 80148fe:	60fb      	str	r3, [r7, #12]
}
 8014900:	bf00      	nop
 8014902:	e7fe      	b.n	8014902 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8014904:	693b      	ldr	r3, [r7, #16]
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d00a      	beq.n	8014922 <vPortFree+0x62>
	__asm volatile
 801490c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014910:	f383 8811 	msr	BASEPRI, r3
 8014914:	f3bf 8f6f 	isb	sy
 8014918:	f3bf 8f4f 	dsb	sy
 801491c:	60bb      	str	r3, [r7, #8]
}
 801491e:	bf00      	nop
 8014920:	e7fe      	b.n	8014920 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8014922:	693b      	ldr	r3, [r7, #16]
 8014924:	685a      	ldr	r2, [r3, #4]
 8014926:	4b14      	ldr	r3, [pc, #80]	; (8014978 <vPortFree+0xb8>)
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	4013      	ands	r3, r2
 801492c:	2b00      	cmp	r3, #0
 801492e:	d01e      	beq.n	801496e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8014930:	693b      	ldr	r3, [r7, #16]
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	2b00      	cmp	r3, #0
 8014936:	d11a      	bne.n	801496e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8014938:	693b      	ldr	r3, [r7, #16]
 801493a:	685a      	ldr	r2, [r3, #4]
 801493c:	4b0e      	ldr	r3, [pc, #56]	; (8014978 <vPortFree+0xb8>)
 801493e:	681b      	ldr	r3, [r3, #0]
 8014940:	43db      	mvns	r3, r3
 8014942:	401a      	ands	r2, r3
 8014944:	693b      	ldr	r3, [r7, #16]
 8014946:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8014948:	f7fe f8c4 	bl	8012ad4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801494c:	693b      	ldr	r3, [r7, #16]
 801494e:	685a      	ldr	r2, [r3, #4]
 8014950:	4b0a      	ldr	r3, [pc, #40]	; (801497c <vPortFree+0xbc>)
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	4413      	add	r3, r2
 8014956:	4a09      	ldr	r2, [pc, #36]	; (801497c <vPortFree+0xbc>)
 8014958:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801495a:	6938      	ldr	r0, [r7, #16]
 801495c:	f000 f880 	bl	8014a60 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8014960:	4b07      	ldr	r3, [pc, #28]	; (8014980 <vPortFree+0xc0>)
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	3301      	adds	r3, #1
 8014966:	4a06      	ldr	r2, [pc, #24]	; (8014980 <vPortFree+0xc0>)
 8014968:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801496a:	f7fe f8c1 	bl	8012af0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801496e:	bf00      	nop
 8014970:	3718      	adds	r7, #24
 8014972:	46bd      	mov	sp, r7
 8014974:	bd80      	pop	{r7, pc}
 8014976:	bf00      	nop
 8014978:	20005bec 	.word	0x20005bec
 801497c:	20005bdc 	.word	0x20005bdc
 8014980:	20005be8 	.word	0x20005be8

08014984 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8014984:	b480      	push	{r7}
 8014986:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8014988:	4b03      	ldr	r3, [pc, #12]	; (8014998 <xPortGetFreeHeapSize+0x14>)
 801498a:	681b      	ldr	r3, [r3, #0]
}
 801498c:	4618      	mov	r0, r3
 801498e:	46bd      	mov	sp, r7
 8014990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014994:	4770      	bx	lr
 8014996:	bf00      	nop
 8014998:	20005bdc 	.word	0x20005bdc

0801499c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801499c:	b480      	push	{r7}
 801499e:	b085      	sub	sp, #20
 80149a0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80149a2:	f244 6350 	movw	r3, #18000	; 0x4650
 80149a6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80149a8:	4b27      	ldr	r3, [pc, #156]	; (8014a48 <prvHeapInit+0xac>)
 80149aa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80149ac:	68fb      	ldr	r3, [r7, #12]
 80149ae:	f003 0307 	and.w	r3, r3, #7
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	d00c      	beq.n	80149d0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80149b6:	68fb      	ldr	r3, [r7, #12]
 80149b8:	3307      	adds	r3, #7
 80149ba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	f023 0307 	bic.w	r3, r3, #7
 80149c2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80149c4:	68ba      	ldr	r2, [r7, #8]
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	1ad3      	subs	r3, r2, r3
 80149ca:	4a1f      	ldr	r2, [pc, #124]	; (8014a48 <prvHeapInit+0xac>)
 80149cc:	4413      	add	r3, r2
 80149ce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80149d4:	4a1d      	ldr	r2, [pc, #116]	; (8014a4c <prvHeapInit+0xb0>)
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80149da:	4b1c      	ldr	r3, [pc, #112]	; (8014a4c <prvHeapInit+0xb0>)
 80149dc:	2200      	movs	r2, #0
 80149de:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80149e0:	687b      	ldr	r3, [r7, #4]
 80149e2:	68ba      	ldr	r2, [r7, #8]
 80149e4:	4413      	add	r3, r2
 80149e6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80149e8:	2208      	movs	r2, #8
 80149ea:	68fb      	ldr	r3, [r7, #12]
 80149ec:	1a9b      	subs	r3, r3, r2
 80149ee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	f023 0307 	bic.w	r3, r3, #7
 80149f6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	4a15      	ldr	r2, [pc, #84]	; (8014a50 <prvHeapInit+0xb4>)
 80149fc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80149fe:	4b14      	ldr	r3, [pc, #80]	; (8014a50 <prvHeapInit+0xb4>)
 8014a00:	681b      	ldr	r3, [r3, #0]
 8014a02:	2200      	movs	r2, #0
 8014a04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8014a06:	4b12      	ldr	r3, [pc, #72]	; (8014a50 <prvHeapInit+0xb4>)
 8014a08:	681b      	ldr	r3, [r3, #0]
 8014a0a:	2200      	movs	r2, #0
 8014a0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8014a0e:	687b      	ldr	r3, [r7, #4]
 8014a10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8014a12:	683b      	ldr	r3, [r7, #0]
 8014a14:	68fa      	ldr	r2, [r7, #12]
 8014a16:	1ad2      	subs	r2, r2, r3
 8014a18:	683b      	ldr	r3, [r7, #0]
 8014a1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8014a1c:	4b0c      	ldr	r3, [pc, #48]	; (8014a50 <prvHeapInit+0xb4>)
 8014a1e:	681a      	ldr	r2, [r3, #0]
 8014a20:	683b      	ldr	r3, [r7, #0]
 8014a22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014a24:	683b      	ldr	r3, [r7, #0]
 8014a26:	685b      	ldr	r3, [r3, #4]
 8014a28:	4a0a      	ldr	r2, [pc, #40]	; (8014a54 <prvHeapInit+0xb8>)
 8014a2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8014a2c:	683b      	ldr	r3, [r7, #0]
 8014a2e:	685b      	ldr	r3, [r3, #4]
 8014a30:	4a09      	ldr	r2, [pc, #36]	; (8014a58 <prvHeapInit+0xbc>)
 8014a32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8014a34:	4b09      	ldr	r3, [pc, #36]	; (8014a5c <prvHeapInit+0xc0>)
 8014a36:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8014a3a:	601a      	str	r2, [r3, #0]
}
 8014a3c:	bf00      	nop
 8014a3e:	3714      	adds	r7, #20
 8014a40:	46bd      	mov	sp, r7
 8014a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a46:	4770      	bx	lr
 8014a48:	20001580 	.word	0x20001580
 8014a4c:	20005bd0 	.word	0x20005bd0
 8014a50:	20005bd8 	.word	0x20005bd8
 8014a54:	20005be0 	.word	0x20005be0
 8014a58:	20005bdc 	.word	0x20005bdc
 8014a5c:	20005bec 	.word	0x20005bec

08014a60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8014a60:	b480      	push	{r7}
 8014a62:	b085      	sub	sp, #20
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8014a68:	4b28      	ldr	r3, [pc, #160]	; (8014b0c <prvInsertBlockIntoFreeList+0xac>)
 8014a6a:	60fb      	str	r3, [r7, #12]
 8014a6c:	e002      	b.n	8014a74 <prvInsertBlockIntoFreeList+0x14>
 8014a6e:	68fb      	ldr	r3, [r7, #12]
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	60fb      	str	r3, [r7, #12]
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	681b      	ldr	r3, [r3, #0]
 8014a78:	687a      	ldr	r2, [r7, #4]
 8014a7a:	429a      	cmp	r2, r3
 8014a7c:	d8f7      	bhi.n	8014a6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8014a7e:	68fb      	ldr	r3, [r7, #12]
 8014a80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	685b      	ldr	r3, [r3, #4]
 8014a86:	68ba      	ldr	r2, [r7, #8]
 8014a88:	4413      	add	r3, r2
 8014a8a:	687a      	ldr	r2, [r7, #4]
 8014a8c:	429a      	cmp	r2, r3
 8014a8e:	d108      	bne.n	8014aa2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	685a      	ldr	r2, [r3, #4]
 8014a94:	687b      	ldr	r3, [r7, #4]
 8014a96:	685b      	ldr	r3, [r3, #4]
 8014a98:	441a      	add	r2, r3
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	685b      	ldr	r3, [r3, #4]
 8014aaa:	68ba      	ldr	r2, [r7, #8]
 8014aac:	441a      	add	r2, r3
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	429a      	cmp	r2, r3
 8014ab4:	d118      	bne.n	8014ae8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	681a      	ldr	r2, [r3, #0]
 8014aba:	4b15      	ldr	r3, [pc, #84]	; (8014b10 <prvInsertBlockIntoFreeList+0xb0>)
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	429a      	cmp	r2, r3
 8014ac0:	d00d      	beq.n	8014ade <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	685a      	ldr	r2, [r3, #4]
 8014ac6:	68fb      	ldr	r3, [r7, #12]
 8014ac8:	681b      	ldr	r3, [r3, #0]
 8014aca:	685b      	ldr	r3, [r3, #4]
 8014acc:	441a      	add	r2, r3
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8014ad2:	68fb      	ldr	r3, [r7, #12]
 8014ad4:	681b      	ldr	r3, [r3, #0]
 8014ad6:	681a      	ldr	r2, [r3, #0]
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	601a      	str	r2, [r3, #0]
 8014adc:	e008      	b.n	8014af0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8014ade:	4b0c      	ldr	r3, [pc, #48]	; (8014b10 <prvInsertBlockIntoFreeList+0xb0>)
 8014ae0:	681a      	ldr	r2, [r3, #0]
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	601a      	str	r2, [r3, #0]
 8014ae6:	e003      	b.n	8014af0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	681a      	ldr	r2, [r3, #0]
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8014af0:	68fa      	ldr	r2, [r7, #12]
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	429a      	cmp	r2, r3
 8014af6:	d002      	beq.n	8014afe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	687a      	ldr	r2, [r7, #4]
 8014afc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8014afe:	bf00      	nop
 8014b00:	3714      	adds	r7, #20
 8014b02:	46bd      	mov	sp, r7
 8014b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b08:	4770      	bx	lr
 8014b0a:	bf00      	nop
 8014b0c:	20005bd0 	.word	0x20005bd0
 8014b10:	20005bd8 	.word	0x20005bd8

08014b14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014b14:	b580      	push	{r7, lr}
 8014b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8014b18:	2200      	movs	r2, #0
 8014b1a:	4912      	ldr	r1, [pc, #72]	; (8014b64 <MX_USB_DEVICE_Init+0x50>)
 8014b1c:	4812      	ldr	r0, [pc, #72]	; (8014b68 <MX_USB_DEVICE_Init+0x54>)
 8014b1e:	f7f7 fba7 	bl	800c270 <USBD_Init>
 8014b22:	4603      	mov	r3, r0
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d001      	beq.n	8014b2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014b28:	f7ef ff16 	bl	8004958 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8014b2c:	490f      	ldr	r1, [pc, #60]	; (8014b6c <MX_USB_DEVICE_Init+0x58>)
 8014b2e:	480e      	ldr	r0, [pc, #56]	; (8014b68 <MX_USB_DEVICE_Init+0x54>)
 8014b30:	f7f7 fbce 	bl	800c2d0 <USBD_RegisterClass>
 8014b34:	4603      	mov	r3, r0
 8014b36:	2b00      	cmp	r3, #0
 8014b38:	d001      	beq.n	8014b3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014b3a:	f7ef ff0d 	bl	8004958 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8014b3e:	490c      	ldr	r1, [pc, #48]	; (8014b70 <MX_USB_DEVICE_Init+0x5c>)
 8014b40:	4809      	ldr	r0, [pc, #36]	; (8014b68 <MX_USB_DEVICE_Init+0x54>)
 8014b42:	f7f7 faef 	bl	800c124 <USBD_CDC_RegisterInterface>
 8014b46:	4603      	mov	r3, r0
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d001      	beq.n	8014b50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014b4c:	f7ef ff04 	bl	8004958 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8014b50:	4805      	ldr	r0, [pc, #20]	; (8014b68 <MX_USB_DEVICE_Init+0x54>)
 8014b52:	f7f7 fbe4 	bl	800c31e <USBD_Start>
 8014b56:	4603      	mov	r3, r0
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d001      	beq.n	8014b60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014b5c:	f7ef fefc 	bl	8004958 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014b60:	bf00      	nop
 8014b62:	bd80      	pop	{r7, pc}
 8014b64:	2000014c 	.word	0x2000014c
 8014b68:	20013314 	.word	0x20013314
 8014b6c:	20000030 	.word	0x20000030
 8014b70:	20000138 	.word	0x20000138

08014b74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8014b74:	b580      	push	{r7, lr}
 8014b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8014b78:	2200      	movs	r2, #0
 8014b7a:	4905      	ldr	r1, [pc, #20]	; (8014b90 <CDC_Init_FS+0x1c>)
 8014b7c:	4805      	ldr	r0, [pc, #20]	; (8014b94 <CDC_Init_FS+0x20>)
 8014b7e:	f7f7 fae6 	bl	800c14e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8014b82:	4905      	ldr	r1, [pc, #20]	; (8014b98 <CDC_Init_FS+0x24>)
 8014b84:	4803      	ldr	r0, [pc, #12]	; (8014b94 <CDC_Init_FS+0x20>)
 8014b86:	f7f7 fb00 	bl	800c18a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8014b8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8014b8c:	4618      	mov	r0, r3
 8014b8e:	bd80      	pop	{r7, pc}
 8014b90:	20013de4 	.word	0x20013de4
 8014b94:	20013314 	.word	0x20013314
 8014b98:	200135e4 	.word	0x200135e4

08014b9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8014b9c:	b480      	push	{r7}
 8014b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8014ba0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	46bd      	mov	sp, r7
 8014ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014baa:	4770      	bx	lr

08014bac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014bac:	b480      	push	{r7}
 8014bae:	b083      	sub	sp, #12
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	4603      	mov	r3, r0
 8014bb4:	6039      	str	r1, [r7, #0]
 8014bb6:	71fb      	strb	r3, [r7, #7]
 8014bb8:	4613      	mov	r3, r2
 8014bba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8014bbc:	79fb      	ldrb	r3, [r7, #7]
 8014bbe:	2b23      	cmp	r3, #35	; 0x23
 8014bc0:	d84a      	bhi.n	8014c58 <CDC_Control_FS+0xac>
 8014bc2:	a201      	add	r2, pc, #4	; (adr r2, 8014bc8 <CDC_Control_FS+0x1c>)
 8014bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014bc8:	08014c59 	.word	0x08014c59
 8014bcc:	08014c59 	.word	0x08014c59
 8014bd0:	08014c59 	.word	0x08014c59
 8014bd4:	08014c59 	.word	0x08014c59
 8014bd8:	08014c59 	.word	0x08014c59
 8014bdc:	08014c59 	.word	0x08014c59
 8014be0:	08014c59 	.word	0x08014c59
 8014be4:	08014c59 	.word	0x08014c59
 8014be8:	08014c59 	.word	0x08014c59
 8014bec:	08014c59 	.word	0x08014c59
 8014bf0:	08014c59 	.word	0x08014c59
 8014bf4:	08014c59 	.word	0x08014c59
 8014bf8:	08014c59 	.word	0x08014c59
 8014bfc:	08014c59 	.word	0x08014c59
 8014c00:	08014c59 	.word	0x08014c59
 8014c04:	08014c59 	.word	0x08014c59
 8014c08:	08014c59 	.word	0x08014c59
 8014c0c:	08014c59 	.word	0x08014c59
 8014c10:	08014c59 	.word	0x08014c59
 8014c14:	08014c59 	.word	0x08014c59
 8014c18:	08014c59 	.word	0x08014c59
 8014c1c:	08014c59 	.word	0x08014c59
 8014c20:	08014c59 	.word	0x08014c59
 8014c24:	08014c59 	.word	0x08014c59
 8014c28:	08014c59 	.word	0x08014c59
 8014c2c:	08014c59 	.word	0x08014c59
 8014c30:	08014c59 	.word	0x08014c59
 8014c34:	08014c59 	.word	0x08014c59
 8014c38:	08014c59 	.word	0x08014c59
 8014c3c:	08014c59 	.word	0x08014c59
 8014c40:	08014c59 	.word	0x08014c59
 8014c44:	08014c59 	.word	0x08014c59
 8014c48:	08014c59 	.word	0x08014c59
 8014c4c:	08014c59 	.word	0x08014c59
 8014c50:	08014c59 	.word	0x08014c59
 8014c54:	08014c59 	.word	0x08014c59
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8014c58:	bf00      	nop
  }

  return (USBD_OK);
 8014c5a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	370c      	adds	r7, #12
 8014c60:	46bd      	mov	sp, r7
 8014c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c66:	4770      	bx	lr

08014c68 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b082      	sub	sp, #8
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
 8014c70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8014c72:	6879      	ldr	r1, [r7, #4]
 8014c74:	4805      	ldr	r0, [pc, #20]	; (8014c8c <CDC_Receive_FS+0x24>)
 8014c76:	f7f7 fa88 	bl	800c18a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8014c7a:	4804      	ldr	r0, [pc, #16]	; (8014c8c <CDC_Receive_FS+0x24>)
 8014c7c:	f7f7 face 	bl	800c21c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8014c80:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8014c82:	4618      	mov	r0, r3
 8014c84:	3708      	adds	r7, #8
 8014c86:	46bd      	mov	sp, r7
 8014c88:	bd80      	pop	{r7, pc}
 8014c8a:	bf00      	nop
 8014c8c:	20013314 	.word	0x20013314

08014c90 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8014c90:	b580      	push	{r7, lr}
 8014c92:	b084      	sub	sp, #16
 8014c94:	af00      	add	r7, sp, #0
 8014c96:	6078      	str	r0, [r7, #4]
 8014c98:	460b      	mov	r3, r1
 8014c9a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8014c9c:	2300      	movs	r3, #0
 8014c9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8014ca0:	4b0d      	ldr	r3, [pc, #52]	; (8014cd8 <CDC_Transmit_FS+0x48>)
 8014ca2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014ca6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8014ca8:	68bb      	ldr	r3, [r7, #8]
 8014caa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d001      	beq.n	8014cb6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8014cb2:	2301      	movs	r3, #1
 8014cb4:	e00b      	b.n	8014cce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8014cb6:	887b      	ldrh	r3, [r7, #2]
 8014cb8:	461a      	mov	r2, r3
 8014cba:	6879      	ldr	r1, [r7, #4]
 8014cbc:	4806      	ldr	r0, [pc, #24]	; (8014cd8 <CDC_Transmit_FS+0x48>)
 8014cbe:	f7f7 fa46 	bl	800c14e <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8014cc2:	4805      	ldr	r0, [pc, #20]	; (8014cd8 <CDC_Transmit_FS+0x48>)
 8014cc4:	f7f7 fa7a 	bl	800c1bc <USBD_CDC_TransmitPacket>
 8014cc8:	4603      	mov	r3, r0
 8014cca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8014ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8014cce:	4618      	mov	r0, r3
 8014cd0:	3710      	adds	r7, #16
 8014cd2:	46bd      	mov	sp, r7
 8014cd4:	bd80      	pop	{r7, pc}
 8014cd6:	bf00      	nop
 8014cd8:	20013314 	.word	0x20013314

08014cdc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014cdc:	b480      	push	{r7}
 8014cde:	b087      	sub	sp, #28
 8014ce0:	af00      	add	r7, sp, #0
 8014ce2:	60f8      	str	r0, [r7, #12]
 8014ce4:	60b9      	str	r1, [r7, #8]
 8014ce6:	4613      	mov	r3, r2
 8014ce8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8014cea:	2300      	movs	r3, #0
 8014cec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8014cee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	371c      	adds	r7, #28
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cfc:	4770      	bx	lr
	...

08014d00 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014d00:	b480      	push	{r7}
 8014d02:	b083      	sub	sp, #12
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	4603      	mov	r3, r0
 8014d08:	6039      	str	r1, [r7, #0]
 8014d0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8014d0c:	683b      	ldr	r3, [r7, #0]
 8014d0e:	2212      	movs	r2, #18
 8014d10:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8014d12:	4b03      	ldr	r3, [pc, #12]	; (8014d20 <USBD_FS_DeviceDescriptor+0x20>)
}
 8014d14:	4618      	mov	r0, r3
 8014d16:	370c      	adds	r7, #12
 8014d18:	46bd      	mov	sp, r7
 8014d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d1e:	4770      	bx	lr
 8014d20:	20000168 	.word	0x20000168

08014d24 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014d24:	b480      	push	{r7}
 8014d26:	b083      	sub	sp, #12
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	4603      	mov	r3, r0
 8014d2c:	6039      	str	r1, [r7, #0]
 8014d2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8014d30:	683b      	ldr	r3, [r7, #0]
 8014d32:	2204      	movs	r2, #4
 8014d34:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8014d36:	4b03      	ldr	r3, [pc, #12]	; (8014d44 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8014d38:	4618      	mov	r0, r3
 8014d3a:	370c      	adds	r7, #12
 8014d3c:	46bd      	mov	sp, r7
 8014d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d42:	4770      	bx	lr
 8014d44:	2000017c 	.word	0x2000017c

08014d48 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b082      	sub	sp, #8
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	4603      	mov	r3, r0
 8014d50:	6039      	str	r1, [r7, #0]
 8014d52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014d54:	79fb      	ldrb	r3, [r7, #7]
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d105      	bne.n	8014d66 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014d5a:	683a      	ldr	r2, [r7, #0]
 8014d5c:	4907      	ldr	r1, [pc, #28]	; (8014d7c <USBD_FS_ProductStrDescriptor+0x34>)
 8014d5e:	4808      	ldr	r0, [pc, #32]	; (8014d80 <USBD_FS_ProductStrDescriptor+0x38>)
 8014d60:	f7f8 fb0f 	bl	800d382 <USBD_GetString>
 8014d64:	e004      	b.n	8014d70 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8014d66:	683a      	ldr	r2, [r7, #0]
 8014d68:	4904      	ldr	r1, [pc, #16]	; (8014d7c <USBD_FS_ProductStrDescriptor+0x34>)
 8014d6a:	4805      	ldr	r0, [pc, #20]	; (8014d80 <USBD_FS_ProductStrDescriptor+0x38>)
 8014d6c:	f7f8 fb09 	bl	800d382 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014d70:	4b02      	ldr	r3, [pc, #8]	; (8014d7c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8014d72:	4618      	mov	r0, r3
 8014d74:	3708      	adds	r7, #8
 8014d76:	46bd      	mov	sp, r7
 8014d78:	bd80      	pop	{r7, pc}
 8014d7a:	bf00      	nop
 8014d7c:	200145e4 	.word	0x200145e4
 8014d80:	08018ba8 	.word	0x08018ba8

08014d84 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b082      	sub	sp, #8
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	4603      	mov	r3, r0
 8014d8c:	6039      	str	r1, [r7, #0]
 8014d8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8014d90:	683a      	ldr	r2, [r7, #0]
 8014d92:	4904      	ldr	r1, [pc, #16]	; (8014da4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8014d94:	4804      	ldr	r0, [pc, #16]	; (8014da8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8014d96:	f7f8 faf4 	bl	800d382 <USBD_GetString>
  return USBD_StrDesc;
 8014d9a:	4b02      	ldr	r3, [pc, #8]	; (8014da4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	3708      	adds	r7, #8
 8014da0:	46bd      	mov	sp, r7
 8014da2:	bd80      	pop	{r7, pc}
 8014da4:	200145e4 	.word	0x200145e4
 8014da8:	08018bc0 	.word	0x08018bc0

08014dac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014dac:	b580      	push	{r7, lr}
 8014dae:	b082      	sub	sp, #8
 8014db0:	af00      	add	r7, sp, #0
 8014db2:	4603      	mov	r3, r0
 8014db4:	6039      	str	r1, [r7, #0]
 8014db6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8014db8:	683b      	ldr	r3, [r7, #0]
 8014dba:	221a      	movs	r2, #26
 8014dbc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8014dbe:	f000 f843 	bl	8014e48 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8014dc2:	4b02      	ldr	r3, [pc, #8]	; (8014dcc <USBD_FS_SerialStrDescriptor+0x20>)
}
 8014dc4:	4618      	mov	r0, r3
 8014dc6:	3708      	adds	r7, #8
 8014dc8:	46bd      	mov	sp, r7
 8014dca:	bd80      	pop	{r7, pc}
 8014dcc:	20000180 	.word	0x20000180

08014dd0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014dd0:	b580      	push	{r7, lr}
 8014dd2:	b082      	sub	sp, #8
 8014dd4:	af00      	add	r7, sp, #0
 8014dd6:	4603      	mov	r3, r0
 8014dd8:	6039      	str	r1, [r7, #0]
 8014dda:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8014ddc:	79fb      	ldrb	r3, [r7, #7]
 8014dde:	2b00      	cmp	r3, #0
 8014de0:	d105      	bne.n	8014dee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014de2:	683a      	ldr	r2, [r7, #0]
 8014de4:	4907      	ldr	r1, [pc, #28]	; (8014e04 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014de6:	4808      	ldr	r0, [pc, #32]	; (8014e08 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014de8:	f7f8 facb 	bl	800d382 <USBD_GetString>
 8014dec:	e004      	b.n	8014df8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8014dee:	683a      	ldr	r2, [r7, #0]
 8014df0:	4904      	ldr	r1, [pc, #16]	; (8014e04 <USBD_FS_ConfigStrDescriptor+0x34>)
 8014df2:	4805      	ldr	r0, [pc, #20]	; (8014e08 <USBD_FS_ConfigStrDescriptor+0x38>)
 8014df4:	f7f8 fac5 	bl	800d382 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014df8:	4b02      	ldr	r3, [pc, #8]	; (8014e04 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8014dfa:	4618      	mov	r0, r3
 8014dfc:	3708      	adds	r7, #8
 8014dfe:	46bd      	mov	sp, r7
 8014e00:	bd80      	pop	{r7, pc}
 8014e02:	bf00      	nop
 8014e04:	200145e4 	.word	0x200145e4
 8014e08:	08018bd4 	.word	0x08018bd4

08014e0c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8014e0c:	b580      	push	{r7, lr}
 8014e0e:	b082      	sub	sp, #8
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	4603      	mov	r3, r0
 8014e14:	6039      	str	r1, [r7, #0]
 8014e16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8014e18:	79fb      	ldrb	r3, [r7, #7]
 8014e1a:	2b00      	cmp	r3, #0
 8014e1c:	d105      	bne.n	8014e2a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014e1e:	683a      	ldr	r2, [r7, #0]
 8014e20:	4907      	ldr	r1, [pc, #28]	; (8014e40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014e22:	4808      	ldr	r0, [pc, #32]	; (8014e44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014e24:	f7f8 faad 	bl	800d382 <USBD_GetString>
 8014e28:	e004      	b.n	8014e34 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8014e2a:	683a      	ldr	r2, [r7, #0]
 8014e2c:	4904      	ldr	r1, [pc, #16]	; (8014e40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8014e2e:	4805      	ldr	r0, [pc, #20]	; (8014e44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8014e30:	f7f8 faa7 	bl	800d382 <USBD_GetString>
  }
  return USBD_StrDesc;
 8014e34:	4b02      	ldr	r3, [pc, #8]	; (8014e40 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8014e36:	4618      	mov	r0, r3
 8014e38:	3708      	adds	r7, #8
 8014e3a:	46bd      	mov	sp, r7
 8014e3c:	bd80      	pop	{r7, pc}
 8014e3e:	bf00      	nop
 8014e40:	200145e4 	.word	0x200145e4
 8014e44:	08018be0 	.word	0x08018be0

08014e48 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8014e48:	b580      	push	{r7, lr}
 8014e4a:	b084      	sub	sp, #16
 8014e4c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8014e4e:	4b0f      	ldr	r3, [pc, #60]	; (8014e8c <Get_SerialNum+0x44>)
 8014e50:	681b      	ldr	r3, [r3, #0]
 8014e52:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8014e54:	4b0e      	ldr	r3, [pc, #56]	; (8014e90 <Get_SerialNum+0x48>)
 8014e56:	681b      	ldr	r3, [r3, #0]
 8014e58:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8014e5a:	4b0e      	ldr	r3, [pc, #56]	; (8014e94 <Get_SerialNum+0x4c>)
 8014e5c:	681b      	ldr	r3, [r3, #0]
 8014e5e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8014e60:	68fa      	ldr	r2, [r7, #12]
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	4413      	add	r3, r2
 8014e66:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8014e68:	68fb      	ldr	r3, [r7, #12]
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d009      	beq.n	8014e82 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8014e6e:	2208      	movs	r2, #8
 8014e70:	4909      	ldr	r1, [pc, #36]	; (8014e98 <Get_SerialNum+0x50>)
 8014e72:	68f8      	ldr	r0, [r7, #12]
 8014e74:	f000 f814 	bl	8014ea0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8014e78:	2204      	movs	r2, #4
 8014e7a:	4908      	ldr	r1, [pc, #32]	; (8014e9c <Get_SerialNum+0x54>)
 8014e7c:	68b8      	ldr	r0, [r7, #8]
 8014e7e:	f000 f80f 	bl	8014ea0 <IntToUnicode>
  }
}
 8014e82:	bf00      	nop
 8014e84:	3710      	adds	r7, #16
 8014e86:	46bd      	mov	sp, r7
 8014e88:	bd80      	pop	{r7, pc}
 8014e8a:	bf00      	nop
 8014e8c:	1fff7a10 	.word	0x1fff7a10
 8014e90:	1fff7a14 	.word	0x1fff7a14
 8014e94:	1fff7a18 	.word	0x1fff7a18
 8014e98:	20000182 	.word	0x20000182
 8014e9c:	20000192 	.word	0x20000192

08014ea0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8014ea0:	b480      	push	{r7}
 8014ea2:	b087      	sub	sp, #28
 8014ea4:	af00      	add	r7, sp, #0
 8014ea6:	60f8      	str	r0, [r7, #12]
 8014ea8:	60b9      	str	r1, [r7, #8]
 8014eaa:	4613      	mov	r3, r2
 8014eac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8014eae:	2300      	movs	r3, #0
 8014eb0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	75fb      	strb	r3, [r7, #23]
 8014eb6:	e027      	b.n	8014f08 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	0f1b      	lsrs	r3, r3, #28
 8014ebc:	2b09      	cmp	r3, #9
 8014ebe:	d80b      	bhi.n	8014ed8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	0f1b      	lsrs	r3, r3, #28
 8014ec4:	b2da      	uxtb	r2, r3
 8014ec6:	7dfb      	ldrb	r3, [r7, #23]
 8014ec8:	005b      	lsls	r3, r3, #1
 8014eca:	4619      	mov	r1, r3
 8014ecc:	68bb      	ldr	r3, [r7, #8]
 8014ece:	440b      	add	r3, r1
 8014ed0:	3230      	adds	r2, #48	; 0x30
 8014ed2:	b2d2      	uxtb	r2, r2
 8014ed4:	701a      	strb	r2, [r3, #0]
 8014ed6:	e00a      	b.n	8014eee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	0f1b      	lsrs	r3, r3, #28
 8014edc:	b2da      	uxtb	r2, r3
 8014ede:	7dfb      	ldrb	r3, [r7, #23]
 8014ee0:	005b      	lsls	r3, r3, #1
 8014ee2:	4619      	mov	r1, r3
 8014ee4:	68bb      	ldr	r3, [r7, #8]
 8014ee6:	440b      	add	r3, r1
 8014ee8:	3237      	adds	r2, #55	; 0x37
 8014eea:	b2d2      	uxtb	r2, r2
 8014eec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	011b      	lsls	r3, r3, #4
 8014ef2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8014ef4:	7dfb      	ldrb	r3, [r7, #23]
 8014ef6:	005b      	lsls	r3, r3, #1
 8014ef8:	3301      	adds	r3, #1
 8014efa:	68ba      	ldr	r2, [r7, #8]
 8014efc:	4413      	add	r3, r2
 8014efe:	2200      	movs	r2, #0
 8014f00:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8014f02:	7dfb      	ldrb	r3, [r7, #23]
 8014f04:	3301      	adds	r3, #1
 8014f06:	75fb      	strb	r3, [r7, #23]
 8014f08:	7dfa      	ldrb	r2, [r7, #23]
 8014f0a:	79fb      	ldrb	r3, [r7, #7]
 8014f0c:	429a      	cmp	r2, r3
 8014f0e:	d3d3      	bcc.n	8014eb8 <IntToUnicode+0x18>
  }
}
 8014f10:	bf00      	nop
 8014f12:	bf00      	nop
 8014f14:	371c      	adds	r7, #28
 8014f16:	46bd      	mov	sp, r7
 8014f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f1c:	4770      	bx	lr
	...

08014f20 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8014f20:	b580      	push	{r7, lr}
 8014f22:	b08a      	sub	sp, #40	; 0x28
 8014f24:	af00      	add	r7, sp, #0
 8014f26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014f28:	f107 0314 	add.w	r3, r7, #20
 8014f2c:	2200      	movs	r2, #0
 8014f2e:	601a      	str	r2, [r3, #0]
 8014f30:	605a      	str	r2, [r3, #4]
 8014f32:	609a      	str	r2, [r3, #8]
 8014f34:	60da      	str	r2, [r3, #12]
 8014f36:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	681b      	ldr	r3, [r3, #0]
 8014f3c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8014f40:	d147      	bne.n	8014fd2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014f42:	2300      	movs	r3, #0
 8014f44:	613b      	str	r3, [r7, #16]
 8014f46:	4b25      	ldr	r3, [pc, #148]	; (8014fdc <HAL_PCD_MspInit+0xbc>)
 8014f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f4a:	4a24      	ldr	r2, [pc, #144]	; (8014fdc <HAL_PCD_MspInit+0xbc>)
 8014f4c:	f043 0301 	orr.w	r3, r3, #1
 8014f50:	6313      	str	r3, [r2, #48]	; 0x30
 8014f52:	4b22      	ldr	r3, [pc, #136]	; (8014fdc <HAL_PCD_MspInit+0xbc>)
 8014f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014f56:	f003 0301 	and.w	r3, r3, #1
 8014f5a:	613b      	str	r3, [r7, #16]
 8014f5c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8014f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014f62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8014f64:	2300      	movs	r3, #0
 8014f66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f68:	2300      	movs	r3, #0
 8014f6a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8014f6c:	f107 0314 	add.w	r3, r7, #20
 8014f70:	4619      	mov	r1, r3
 8014f72:	481b      	ldr	r0, [pc, #108]	; (8014fe0 <HAL_PCD_MspInit+0xc0>)
 8014f74:	f7f0 f9c4 	bl	8005300 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8014f78:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8014f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014f7e:	2302      	movs	r3, #2
 8014f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014f82:	2300      	movs	r3, #0
 8014f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8014f86:	2300      	movs	r3, #0
 8014f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8014f8a:	230a      	movs	r3, #10
 8014f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014f8e:	f107 0314 	add.w	r3, r7, #20
 8014f92:	4619      	mov	r1, r3
 8014f94:	4812      	ldr	r0, [pc, #72]	; (8014fe0 <HAL_PCD_MspInit+0xc0>)
 8014f96:	f7f0 f9b3 	bl	8005300 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8014f9a:	4b10      	ldr	r3, [pc, #64]	; (8014fdc <HAL_PCD_MspInit+0xbc>)
 8014f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014f9e:	4a0f      	ldr	r2, [pc, #60]	; (8014fdc <HAL_PCD_MspInit+0xbc>)
 8014fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014fa4:	6353      	str	r3, [r2, #52]	; 0x34
 8014fa6:	2300      	movs	r3, #0
 8014fa8:	60fb      	str	r3, [r7, #12]
 8014faa:	4b0c      	ldr	r3, [pc, #48]	; (8014fdc <HAL_PCD_MspInit+0xbc>)
 8014fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014fae:	4a0b      	ldr	r2, [pc, #44]	; (8014fdc <HAL_PCD_MspInit+0xbc>)
 8014fb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014fb4:	6453      	str	r3, [r2, #68]	; 0x44
 8014fb6:	4b09      	ldr	r3, [pc, #36]	; (8014fdc <HAL_PCD_MspInit+0xbc>)
 8014fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014fba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8014fbe:	60fb      	str	r3, [r7, #12]
 8014fc0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8014fc2:	2200      	movs	r2, #0
 8014fc4:	2105      	movs	r1, #5
 8014fc6:	2043      	movs	r0, #67	; 0x43
 8014fc8:	f7f0 f970 	bl	80052ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8014fcc:	2043      	movs	r0, #67	; 0x43
 8014fce:	f7f0 f989 	bl	80052e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8014fd2:	bf00      	nop
 8014fd4:	3728      	adds	r7, #40	; 0x28
 8014fd6:	46bd      	mov	sp, r7
 8014fd8:	bd80      	pop	{r7, pc}
 8014fda:	bf00      	nop
 8014fdc:	40023800 	.word	0x40023800
 8014fe0:	40020000 	.word	0x40020000

08014fe4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8014fe4:	b580      	push	{r7, lr}
 8014fe6:	b082      	sub	sp, #8
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8014fec:	687b      	ldr	r3, [r7, #4]
 8014fee:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8014ff8:	4619      	mov	r1, r3
 8014ffa:	4610      	mov	r0, r2
 8014ffc:	f7f7 f9da 	bl	800c3b4 <USBD_LL_SetupStage>
}
 8015000:	bf00      	nop
 8015002:	3708      	adds	r7, #8
 8015004:	46bd      	mov	sp, r7
 8015006:	bd80      	pop	{r7, pc}

08015008 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015008:	b580      	push	{r7, lr}
 801500a:	b082      	sub	sp, #8
 801500c:	af00      	add	r7, sp, #0
 801500e:	6078      	str	r0, [r7, #4]
 8015010:	460b      	mov	r3, r1
 8015012:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801501a:	78fa      	ldrb	r2, [r7, #3]
 801501c:	6879      	ldr	r1, [r7, #4]
 801501e:	4613      	mov	r3, r2
 8015020:	00db      	lsls	r3, r3, #3
 8015022:	1a9b      	subs	r3, r3, r2
 8015024:	009b      	lsls	r3, r3, #2
 8015026:	440b      	add	r3, r1
 8015028:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801502c:	681a      	ldr	r2, [r3, #0]
 801502e:	78fb      	ldrb	r3, [r7, #3]
 8015030:	4619      	mov	r1, r3
 8015032:	f7f7 fa14 	bl	800c45e <USBD_LL_DataOutStage>
}
 8015036:	bf00      	nop
 8015038:	3708      	adds	r7, #8
 801503a:	46bd      	mov	sp, r7
 801503c:	bd80      	pop	{r7, pc}

0801503e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801503e:	b580      	push	{r7, lr}
 8015040:	b082      	sub	sp, #8
 8015042:	af00      	add	r7, sp, #0
 8015044:	6078      	str	r0, [r7, #4]
 8015046:	460b      	mov	r3, r1
 8015048:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8015050:	78fa      	ldrb	r2, [r7, #3]
 8015052:	6879      	ldr	r1, [r7, #4]
 8015054:	4613      	mov	r3, r2
 8015056:	00db      	lsls	r3, r3, #3
 8015058:	1a9b      	subs	r3, r3, r2
 801505a:	009b      	lsls	r3, r3, #2
 801505c:	440b      	add	r3, r1
 801505e:	3348      	adds	r3, #72	; 0x48
 8015060:	681a      	ldr	r2, [r3, #0]
 8015062:	78fb      	ldrb	r3, [r7, #3]
 8015064:	4619      	mov	r1, r3
 8015066:	f7f7 fa5d 	bl	800c524 <USBD_LL_DataInStage>
}
 801506a:	bf00      	nop
 801506c:	3708      	adds	r7, #8
 801506e:	46bd      	mov	sp, r7
 8015070:	bd80      	pop	{r7, pc}

08015072 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015072:	b580      	push	{r7, lr}
 8015074:	b082      	sub	sp, #8
 8015076:	af00      	add	r7, sp, #0
 8015078:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8015080:	4618      	mov	r0, r3
 8015082:	f7f7 fb71 	bl	800c768 <USBD_LL_SOF>
}
 8015086:	bf00      	nop
 8015088:	3708      	adds	r7, #8
 801508a:	46bd      	mov	sp, r7
 801508c:	bd80      	pop	{r7, pc}

0801508e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801508e:	b580      	push	{r7, lr}
 8015090:	b084      	sub	sp, #16
 8015092:	af00      	add	r7, sp, #0
 8015094:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8015096:	2301      	movs	r3, #1
 8015098:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	68db      	ldr	r3, [r3, #12]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d102      	bne.n	80150a8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80150a2:	2300      	movs	r3, #0
 80150a4:	73fb      	strb	r3, [r7, #15]
 80150a6:	e008      	b.n	80150ba <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80150a8:	687b      	ldr	r3, [r7, #4]
 80150aa:	68db      	ldr	r3, [r3, #12]
 80150ac:	2b02      	cmp	r3, #2
 80150ae:	d102      	bne.n	80150b6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80150b0:	2301      	movs	r3, #1
 80150b2:	73fb      	strb	r3, [r7, #15]
 80150b4:	e001      	b.n	80150ba <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80150b6:	f7ef fc4f 	bl	8004958 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80150c0:	7bfa      	ldrb	r2, [r7, #15]
 80150c2:	4611      	mov	r1, r2
 80150c4:	4618      	mov	r0, r3
 80150c6:	f7f7 fb11 	bl	800c6ec <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80150d0:	4618      	mov	r0, r3
 80150d2:	f7f7 fabd 	bl	800c650 <USBD_LL_Reset>
}
 80150d6:	bf00      	nop
 80150d8:	3710      	adds	r7, #16
 80150da:	46bd      	mov	sp, r7
 80150dc:	bd80      	pop	{r7, pc}
	...

080150e0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80150e0:	b580      	push	{r7, lr}
 80150e2:	b082      	sub	sp, #8
 80150e4:	af00      	add	r7, sp, #0
 80150e6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80150ee:	4618      	mov	r0, r3
 80150f0:	f7f7 fb0c 	bl	800c70c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80150f4:	687b      	ldr	r3, [r7, #4]
 80150f6:	681b      	ldr	r3, [r3, #0]
 80150f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	687a      	ldr	r2, [r7, #4]
 8015100:	6812      	ldr	r2, [r2, #0]
 8015102:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015106:	f043 0301 	orr.w	r3, r3, #1
 801510a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	6a1b      	ldr	r3, [r3, #32]
 8015110:	2b00      	cmp	r3, #0
 8015112:	d005      	beq.n	8015120 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015114:	4b04      	ldr	r3, [pc, #16]	; (8015128 <HAL_PCD_SuspendCallback+0x48>)
 8015116:	691b      	ldr	r3, [r3, #16]
 8015118:	4a03      	ldr	r2, [pc, #12]	; (8015128 <HAL_PCD_SuspendCallback+0x48>)
 801511a:	f043 0306 	orr.w	r3, r3, #6
 801511e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8015120:	bf00      	nop
 8015122:	3708      	adds	r7, #8
 8015124:	46bd      	mov	sp, r7
 8015126:	bd80      	pop	{r7, pc}
 8015128:	e000ed00 	.word	0xe000ed00

0801512c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801512c:	b580      	push	{r7, lr}
 801512e:	b082      	sub	sp, #8
 8015130:	af00      	add	r7, sp, #0
 8015132:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801513a:	4618      	mov	r0, r3
 801513c:	f7f7 fafc 	bl	800c738 <USBD_LL_Resume>
}
 8015140:	bf00      	nop
 8015142:	3708      	adds	r7, #8
 8015144:	46bd      	mov	sp, r7
 8015146:	bd80      	pop	{r7, pc}

08015148 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015148:	b580      	push	{r7, lr}
 801514a:	b082      	sub	sp, #8
 801514c:	af00      	add	r7, sp, #0
 801514e:	6078      	str	r0, [r7, #4]
 8015150:	460b      	mov	r3, r1
 8015152:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801515a:	78fa      	ldrb	r2, [r7, #3]
 801515c:	4611      	mov	r1, r2
 801515e:	4618      	mov	r0, r3
 8015160:	f7f7 fb4a 	bl	800c7f8 <USBD_LL_IsoOUTIncomplete>
}
 8015164:	bf00      	nop
 8015166:	3708      	adds	r7, #8
 8015168:	46bd      	mov	sp, r7
 801516a:	bd80      	pop	{r7, pc}

0801516c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801516c:	b580      	push	{r7, lr}
 801516e:	b082      	sub	sp, #8
 8015170:	af00      	add	r7, sp, #0
 8015172:	6078      	str	r0, [r7, #4]
 8015174:	460b      	mov	r3, r1
 8015176:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801517e:	78fa      	ldrb	r2, [r7, #3]
 8015180:	4611      	mov	r1, r2
 8015182:	4618      	mov	r0, r3
 8015184:	f7f7 fb12 	bl	800c7ac <USBD_LL_IsoINIncomplete>
}
 8015188:	bf00      	nop
 801518a:	3708      	adds	r7, #8
 801518c:	46bd      	mov	sp, r7
 801518e:	bd80      	pop	{r7, pc}

08015190 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015190:	b580      	push	{r7, lr}
 8015192:	b082      	sub	sp, #8
 8015194:	af00      	add	r7, sp, #0
 8015196:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801519e:	4618      	mov	r0, r3
 80151a0:	f7f7 fb50 	bl	800c844 <USBD_LL_DevConnected>
}
 80151a4:	bf00      	nop
 80151a6:	3708      	adds	r7, #8
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bd80      	pop	{r7, pc}

080151ac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80151ac:	b580      	push	{r7, lr}
 80151ae:	b082      	sub	sp, #8
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80151ba:	4618      	mov	r0, r3
 80151bc:	f7f7 fb4d 	bl	800c85a <USBD_LL_DevDisconnected>
}
 80151c0:	bf00      	nop
 80151c2:	3708      	adds	r7, #8
 80151c4:	46bd      	mov	sp, r7
 80151c6:	bd80      	pop	{r7, pc}

080151c8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80151c8:	b580      	push	{r7, lr}
 80151ca:	b082      	sub	sp, #8
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80151d0:	687b      	ldr	r3, [r7, #4]
 80151d2:	781b      	ldrb	r3, [r3, #0]
 80151d4:	2b00      	cmp	r3, #0
 80151d6:	d13c      	bne.n	8015252 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80151d8:	4a20      	ldr	r2, [pc, #128]	; (801525c <USBD_LL_Init+0x94>)
 80151da:	687b      	ldr	r3, [r7, #4]
 80151dc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80151e0:	687b      	ldr	r3, [r7, #4]
 80151e2:	4a1e      	ldr	r2, [pc, #120]	; (801525c <USBD_LL_Init+0x94>)
 80151e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80151e8:	4b1c      	ldr	r3, [pc, #112]	; (801525c <USBD_LL_Init+0x94>)
 80151ea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80151ee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80151f0:	4b1a      	ldr	r3, [pc, #104]	; (801525c <USBD_LL_Init+0x94>)
 80151f2:	2204      	movs	r2, #4
 80151f4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80151f6:	4b19      	ldr	r3, [pc, #100]	; (801525c <USBD_LL_Init+0x94>)
 80151f8:	2202      	movs	r2, #2
 80151fa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80151fc:	4b17      	ldr	r3, [pc, #92]	; (801525c <USBD_LL_Init+0x94>)
 80151fe:	2200      	movs	r2, #0
 8015200:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8015202:	4b16      	ldr	r3, [pc, #88]	; (801525c <USBD_LL_Init+0x94>)
 8015204:	2202      	movs	r2, #2
 8015206:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015208:	4b14      	ldr	r3, [pc, #80]	; (801525c <USBD_LL_Init+0x94>)
 801520a:	2200      	movs	r2, #0
 801520c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801520e:	4b13      	ldr	r3, [pc, #76]	; (801525c <USBD_LL_Init+0x94>)
 8015210:	2200      	movs	r2, #0
 8015212:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8015214:	4b11      	ldr	r3, [pc, #68]	; (801525c <USBD_LL_Init+0x94>)
 8015216:	2200      	movs	r2, #0
 8015218:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801521a:	4b10      	ldr	r3, [pc, #64]	; (801525c <USBD_LL_Init+0x94>)
 801521c:	2200      	movs	r2, #0
 801521e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8015220:	4b0e      	ldr	r3, [pc, #56]	; (801525c <USBD_LL_Init+0x94>)
 8015222:	2200      	movs	r2, #0
 8015224:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8015226:	480d      	ldr	r0, [pc, #52]	; (801525c <USBD_LL_Init+0x94>)
 8015228:	f7f1 fcdd 	bl	8006be6 <HAL_PCD_Init>
 801522c:	4603      	mov	r3, r0
 801522e:	2b00      	cmp	r3, #0
 8015230:	d001      	beq.n	8015236 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8015232:	f7ef fb91 	bl	8004958 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8015236:	2180      	movs	r1, #128	; 0x80
 8015238:	4808      	ldr	r0, [pc, #32]	; (801525c <USBD_LL_Init+0x94>)
 801523a:	f7f2 fe3a 	bl	8007eb2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801523e:	2240      	movs	r2, #64	; 0x40
 8015240:	2100      	movs	r1, #0
 8015242:	4806      	ldr	r0, [pc, #24]	; (801525c <USBD_LL_Init+0x94>)
 8015244:	f7f2 fdee 	bl	8007e24 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8015248:	2280      	movs	r2, #128	; 0x80
 801524a:	2101      	movs	r1, #1
 801524c:	4803      	ldr	r0, [pc, #12]	; (801525c <USBD_LL_Init+0x94>)
 801524e:	f7f2 fde9 	bl	8007e24 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015252:	2300      	movs	r3, #0
}
 8015254:	4618      	mov	r0, r3
 8015256:	3708      	adds	r7, #8
 8015258:	46bd      	mov	sp, r7
 801525a:	bd80      	pop	{r7, pc}
 801525c:	200147e4 	.word	0x200147e4

08015260 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8015260:	b580      	push	{r7, lr}
 8015262:	b084      	sub	sp, #16
 8015264:	af00      	add	r7, sp, #0
 8015266:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015268:	2300      	movs	r3, #0
 801526a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801526c:	2300      	movs	r3, #0
 801526e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015276:	4618      	mov	r0, r3
 8015278:	f7f1 fdd2 	bl	8006e20 <HAL_PCD_Start>
 801527c:	4603      	mov	r3, r0
 801527e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015280:	7bfb      	ldrb	r3, [r7, #15]
 8015282:	4618      	mov	r0, r3
 8015284:	f000 f942 	bl	801550c <USBD_Get_USB_Status>
 8015288:	4603      	mov	r3, r0
 801528a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801528c:	7bbb      	ldrb	r3, [r7, #14]
}
 801528e:	4618      	mov	r0, r3
 8015290:	3710      	adds	r7, #16
 8015292:	46bd      	mov	sp, r7
 8015294:	bd80      	pop	{r7, pc}

08015296 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015296:	b580      	push	{r7, lr}
 8015298:	b084      	sub	sp, #16
 801529a:	af00      	add	r7, sp, #0
 801529c:	6078      	str	r0, [r7, #4]
 801529e:	4608      	mov	r0, r1
 80152a0:	4611      	mov	r1, r2
 80152a2:	461a      	mov	r2, r3
 80152a4:	4603      	mov	r3, r0
 80152a6:	70fb      	strb	r3, [r7, #3]
 80152a8:	460b      	mov	r3, r1
 80152aa:	70bb      	strb	r3, [r7, #2]
 80152ac:	4613      	mov	r3, r2
 80152ae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80152b0:	2300      	movs	r3, #0
 80152b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80152b4:	2300      	movs	r3, #0
 80152b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80152be:	78bb      	ldrb	r3, [r7, #2]
 80152c0:	883a      	ldrh	r2, [r7, #0]
 80152c2:	78f9      	ldrb	r1, [r7, #3]
 80152c4:	f7f2 f9b6 	bl	8007634 <HAL_PCD_EP_Open>
 80152c8:	4603      	mov	r3, r0
 80152ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80152cc:	7bfb      	ldrb	r3, [r7, #15]
 80152ce:	4618      	mov	r0, r3
 80152d0:	f000 f91c 	bl	801550c <USBD_Get_USB_Status>
 80152d4:	4603      	mov	r3, r0
 80152d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80152d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80152da:	4618      	mov	r0, r3
 80152dc:	3710      	adds	r7, #16
 80152de:	46bd      	mov	sp, r7
 80152e0:	bd80      	pop	{r7, pc}

080152e2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80152e2:	b580      	push	{r7, lr}
 80152e4:	b084      	sub	sp, #16
 80152e6:	af00      	add	r7, sp, #0
 80152e8:	6078      	str	r0, [r7, #4]
 80152ea:	460b      	mov	r3, r1
 80152ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80152ee:	2300      	movs	r3, #0
 80152f0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80152f2:	2300      	movs	r3, #0
 80152f4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80152fc:	78fa      	ldrb	r2, [r7, #3]
 80152fe:	4611      	mov	r1, r2
 8015300:	4618      	mov	r0, r3
 8015302:	f7f2 f9ff 	bl	8007704 <HAL_PCD_EP_Close>
 8015306:	4603      	mov	r3, r0
 8015308:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801530a:	7bfb      	ldrb	r3, [r7, #15]
 801530c:	4618      	mov	r0, r3
 801530e:	f000 f8fd 	bl	801550c <USBD_Get_USB_Status>
 8015312:	4603      	mov	r3, r0
 8015314:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015316:	7bbb      	ldrb	r3, [r7, #14]
}
 8015318:	4618      	mov	r0, r3
 801531a:	3710      	adds	r7, #16
 801531c:	46bd      	mov	sp, r7
 801531e:	bd80      	pop	{r7, pc}

08015320 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015320:	b580      	push	{r7, lr}
 8015322:	b084      	sub	sp, #16
 8015324:	af00      	add	r7, sp, #0
 8015326:	6078      	str	r0, [r7, #4]
 8015328:	460b      	mov	r3, r1
 801532a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801532c:	2300      	movs	r3, #0
 801532e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015330:	2300      	movs	r3, #0
 8015332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801533a:	78fa      	ldrb	r2, [r7, #3]
 801533c:	4611      	mov	r1, r2
 801533e:	4618      	mov	r0, r3
 8015340:	f7f2 fad7 	bl	80078f2 <HAL_PCD_EP_SetStall>
 8015344:	4603      	mov	r3, r0
 8015346:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015348:	7bfb      	ldrb	r3, [r7, #15]
 801534a:	4618      	mov	r0, r3
 801534c:	f000 f8de 	bl	801550c <USBD_Get_USB_Status>
 8015350:	4603      	mov	r3, r0
 8015352:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015354:	7bbb      	ldrb	r3, [r7, #14]
}
 8015356:	4618      	mov	r0, r3
 8015358:	3710      	adds	r7, #16
 801535a:	46bd      	mov	sp, r7
 801535c:	bd80      	pop	{r7, pc}

0801535e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801535e:	b580      	push	{r7, lr}
 8015360:	b084      	sub	sp, #16
 8015362:	af00      	add	r7, sp, #0
 8015364:	6078      	str	r0, [r7, #4]
 8015366:	460b      	mov	r3, r1
 8015368:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801536a:	2300      	movs	r3, #0
 801536c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801536e:	2300      	movs	r3, #0
 8015370:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8015378:	78fa      	ldrb	r2, [r7, #3]
 801537a:	4611      	mov	r1, r2
 801537c:	4618      	mov	r0, r3
 801537e:	f7f2 fb1c 	bl	80079ba <HAL_PCD_EP_ClrStall>
 8015382:	4603      	mov	r3, r0
 8015384:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015386:	7bfb      	ldrb	r3, [r7, #15]
 8015388:	4618      	mov	r0, r3
 801538a:	f000 f8bf 	bl	801550c <USBD_Get_USB_Status>
 801538e:	4603      	mov	r3, r0
 8015390:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015392:	7bbb      	ldrb	r3, [r7, #14]
}
 8015394:	4618      	mov	r0, r3
 8015396:	3710      	adds	r7, #16
 8015398:	46bd      	mov	sp, r7
 801539a:	bd80      	pop	{r7, pc}

0801539c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801539c:	b480      	push	{r7}
 801539e:	b085      	sub	sp, #20
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	6078      	str	r0, [r7, #4]
 80153a4:	460b      	mov	r3, r1
 80153a6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80153ae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80153b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	da0b      	bge.n	80153d0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80153b8:	78fb      	ldrb	r3, [r7, #3]
 80153ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80153be:	68f9      	ldr	r1, [r7, #12]
 80153c0:	4613      	mov	r3, r2
 80153c2:	00db      	lsls	r3, r3, #3
 80153c4:	1a9b      	subs	r3, r3, r2
 80153c6:	009b      	lsls	r3, r3, #2
 80153c8:	440b      	add	r3, r1
 80153ca:	333e      	adds	r3, #62	; 0x3e
 80153cc:	781b      	ldrb	r3, [r3, #0]
 80153ce:	e00b      	b.n	80153e8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80153d0:	78fb      	ldrb	r3, [r7, #3]
 80153d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80153d6:	68f9      	ldr	r1, [r7, #12]
 80153d8:	4613      	mov	r3, r2
 80153da:	00db      	lsls	r3, r3, #3
 80153dc:	1a9b      	subs	r3, r3, r2
 80153de:	009b      	lsls	r3, r3, #2
 80153e0:	440b      	add	r3, r1
 80153e2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80153e6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80153e8:	4618      	mov	r0, r3
 80153ea:	3714      	adds	r7, #20
 80153ec:	46bd      	mov	sp, r7
 80153ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153f2:	4770      	bx	lr

080153f4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80153f4:	b580      	push	{r7, lr}
 80153f6:	b084      	sub	sp, #16
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	6078      	str	r0, [r7, #4]
 80153fc:	460b      	mov	r3, r1
 80153fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015400:	2300      	movs	r3, #0
 8015402:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015404:	2300      	movs	r3, #0
 8015406:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801540e:	78fa      	ldrb	r2, [r7, #3]
 8015410:	4611      	mov	r1, r2
 8015412:	4618      	mov	r0, r3
 8015414:	f7f2 f8e9 	bl	80075ea <HAL_PCD_SetAddress>
 8015418:	4603      	mov	r3, r0
 801541a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801541c:	7bfb      	ldrb	r3, [r7, #15]
 801541e:	4618      	mov	r0, r3
 8015420:	f000 f874 	bl	801550c <USBD_Get_USB_Status>
 8015424:	4603      	mov	r3, r0
 8015426:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015428:	7bbb      	ldrb	r3, [r7, #14]
}
 801542a:	4618      	mov	r0, r3
 801542c:	3710      	adds	r7, #16
 801542e:	46bd      	mov	sp, r7
 8015430:	bd80      	pop	{r7, pc}

08015432 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015432:	b580      	push	{r7, lr}
 8015434:	b086      	sub	sp, #24
 8015436:	af00      	add	r7, sp, #0
 8015438:	60f8      	str	r0, [r7, #12]
 801543a:	607a      	str	r2, [r7, #4]
 801543c:	603b      	str	r3, [r7, #0]
 801543e:	460b      	mov	r3, r1
 8015440:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015442:	2300      	movs	r3, #0
 8015444:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015446:	2300      	movs	r3, #0
 8015448:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801544a:	68fb      	ldr	r3, [r7, #12]
 801544c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015450:	7af9      	ldrb	r1, [r7, #11]
 8015452:	683b      	ldr	r3, [r7, #0]
 8015454:	687a      	ldr	r2, [r7, #4]
 8015456:	f7f2 fa02 	bl	800785e <HAL_PCD_EP_Transmit>
 801545a:	4603      	mov	r3, r0
 801545c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801545e:	7dfb      	ldrb	r3, [r7, #23]
 8015460:	4618      	mov	r0, r3
 8015462:	f000 f853 	bl	801550c <USBD_Get_USB_Status>
 8015466:	4603      	mov	r3, r0
 8015468:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801546a:	7dbb      	ldrb	r3, [r7, #22]
}
 801546c:	4618      	mov	r0, r3
 801546e:	3718      	adds	r7, #24
 8015470:	46bd      	mov	sp, r7
 8015472:	bd80      	pop	{r7, pc}

08015474 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8015474:	b580      	push	{r7, lr}
 8015476:	b086      	sub	sp, #24
 8015478:	af00      	add	r7, sp, #0
 801547a:	60f8      	str	r0, [r7, #12]
 801547c:	607a      	str	r2, [r7, #4]
 801547e:	603b      	str	r3, [r7, #0]
 8015480:	460b      	mov	r3, r1
 8015482:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015484:	2300      	movs	r3, #0
 8015486:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015488:	2300      	movs	r3, #0
 801548a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801548c:	68fb      	ldr	r3, [r7, #12]
 801548e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8015492:	7af9      	ldrb	r1, [r7, #11]
 8015494:	683b      	ldr	r3, [r7, #0]
 8015496:	687a      	ldr	r2, [r7, #4]
 8015498:	f7f2 f97e 	bl	8007798 <HAL_PCD_EP_Receive>
 801549c:	4603      	mov	r3, r0
 801549e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80154a0:	7dfb      	ldrb	r3, [r7, #23]
 80154a2:	4618      	mov	r0, r3
 80154a4:	f000 f832 	bl	801550c <USBD_Get_USB_Status>
 80154a8:	4603      	mov	r3, r0
 80154aa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80154ac:	7dbb      	ldrb	r3, [r7, #22]
}
 80154ae:	4618      	mov	r0, r3
 80154b0:	3718      	adds	r7, #24
 80154b2:	46bd      	mov	sp, r7
 80154b4:	bd80      	pop	{r7, pc}

080154b6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80154b6:	b580      	push	{r7, lr}
 80154b8:	b082      	sub	sp, #8
 80154ba:	af00      	add	r7, sp, #0
 80154bc:	6078      	str	r0, [r7, #4]
 80154be:	460b      	mov	r3, r1
 80154c0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80154c8:	78fa      	ldrb	r2, [r7, #3]
 80154ca:	4611      	mov	r1, r2
 80154cc:	4618      	mov	r0, r3
 80154ce:	f7f2 f9ae 	bl	800782e <HAL_PCD_EP_GetRxCount>
 80154d2:	4603      	mov	r3, r0
}
 80154d4:	4618      	mov	r0, r3
 80154d6:	3708      	adds	r7, #8
 80154d8:	46bd      	mov	sp, r7
 80154da:	bd80      	pop	{r7, pc}

080154dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80154dc:	b480      	push	{r7}
 80154de:	b083      	sub	sp, #12
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80154e4:	4b03      	ldr	r3, [pc, #12]	; (80154f4 <USBD_static_malloc+0x18>)
}
 80154e6:	4618      	mov	r0, r3
 80154e8:	370c      	adds	r7, #12
 80154ea:	46bd      	mov	sp, r7
 80154ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f0:	4770      	bx	lr
 80154f2:	bf00      	nop
 80154f4:	20005bf0 	.word	0x20005bf0

080154f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80154f8:	b480      	push	{r7}
 80154fa:	b083      	sub	sp, #12
 80154fc:	af00      	add	r7, sp, #0
 80154fe:	6078      	str	r0, [r7, #4]

}
 8015500:	bf00      	nop
 8015502:	370c      	adds	r7, #12
 8015504:	46bd      	mov	sp, r7
 8015506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801550a:	4770      	bx	lr

0801550c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801550c:	b480      	push	{r7}
 801550e:	b085      	sub	sp, #20
 8015510:	af00      	add	r7, sp, #0
 8015512:	4603      	mov	r3, r0
 8015514:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015516:	2300      	movs	r3, #0
 8015518:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801551a:	79fb      	ldrb	r3, [r7, #7]
 801551c:	2b03      	cmp	r3, #3
 801551e:	d817      	bhi.n	8015550 <USBD_Get_USB_Status+0x44>
 8015520:	a201      	add	r2, pc, #4	; (adr r2, 8015528 <USBD_Get_USB_Status+0x1c>)
 8015522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015526:	bf00      	nop
 8015528:	08015539 	.word	0x08015539
 801552c:	0801553f 	.word	0x0801553f
 8015530:	08015545 	.word	0x08015545
 8015534:	0801554b 	.word	0x0801554b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015538:	2300      	movs	r3, #0
 801553a:	73fb      	strb	r3, [r7, #15]
    break;
 801553c:	e00b      	b.n	8015556 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801553e:	2303      	movs	r3, #3
 8015540:	73fb      	strb	r3, [r7, #15]
    break;
 8015542:	e008      	b.n	8015556 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015544:	2301      	movs	r3, #1
 8015546:	73fb      	strb	r3, [r7, #15]
    break;
 8015548:	e005      	b.n	8015556 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801554a:	2303      	movs	r3, #3
 801554c:	73fb      	strb	r3, [r7, #15]
    break;
 801554e:	e002      	b.n	8015556 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015550:	2303      	movs	r3, #3
 8015552:	73fb      	strb	r3, [r7, #15]
    break;
 8015554:	bf00      	nop
  }
  return usb_status;
 8015556:	7bfb      	ldrb	r3, [r7, #15]
}
 8015558:	4618      	mov	r0, r3
 801555a:	3714      	adds	r7, #20
 801555c:	46bd      	mov	sp, r7
 801555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015562:	4770      	bx	lr

08015564 <__errno>:
 8015564:	4b01      	ldr	r3, [pc, #4]	; (801556c <__errno+0x8>)
 8015566:	6818      	ldr	r0, [r3, #0]
 8015568:	4770      	bx	lr
 801556a:	bf00      	nop
 801556c:	2000019c 	.word	0x2000019c

08015570 <std>:
 8015570:	2300      	movs	r3, #0
 8015572:	b510      	push	{r4, lr}
 8015574:	4604      	mov	r4, r0
 8015576:	e9c0 3300 	strd	r3, r3, [r0]
 801557a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801557e:	6083      	str	r3, [r0, #8]
 8015580:	8181      	strh	r1, [r0, #12]
 8015582:	6643      	str	r3, [r0, #100]	; 0x64
 8015584:	81c2      	strh	r2, [r0, #14]
 8015586:	6183      	str	r3, [r0, #24]
 8015588:	4619      	mov	r1, r3
 801558a:	2208      	movs	r2, #8
 801558c:	305c      	adds	r0, #92	; 0x5c
 801558e:	f000 f945 	bl	801581c <memset>
 8015592:	4b05      	ldr	r3, [pc, #20]	; (80155a8 <std+0x38>)
 8015594:	6263      	str	r3, [r4, #36]	; 0x24
 8015596:	4b05      	ldr	r3, [pc, #20]	; (80155ac <std+0x3c>)
 8015598:	62a3      	str	r3, [r4, #40]	; 0x28
 801559a:	4b05      	ldr	r3, [pc, #20]	; (80155b0 <std+0x40>)
 801559c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801559e:	4b05      	ldr	r3, [pc, #20]	; (80155b4 <std+0x44>)
 80155a0:	6224      	str	r4, [r4, #32]
 80155a2:	6323      	str	r3, [r4, #48]	; 0x30
 80155a4:	bd10      	pop	{r4, pc}
 80155a6:	bf00      	nop
 80155a8:	08016389 	.word	0x08016389
 80155ac:	080163ab 	.word	0x080163ab
 80155b0:	080163e3 	.word	0x080163e3
 80155b4:	08016407 	.word	0x08016407

080155b8 <_cleanup_r>:
 80155b8:	4901      	ldr	r1, [pc, #4]	; (80155c0 <_cleanup_r+0x8>)
 80155ba:	f000 b8af 	b.w	801571c <_fwalk_reent>
 80155be:	bf00      	nop
 80155c0:	08017305 	.word	0x08017305

080155c4 <__sfmoreglue>:
 80155c4:	b570      	push	{r4, r5, r6, lr}
 80155c6:	1e4a      	subs	r2, r1, #1
 80155c8:	2568      	movs	r5, #104	; 0x68
 80155ca:	4355      	muls	r5, r2
 80155cc:	460e      	mov	r6, r1
 80155ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80155d2:	f000 f97b 	bl	80158cc <_malloc_r>
 80155d6:	4604      	mov	r4, r0
 80155d8:	b140      	cbz	r0, 80155ec <__sfmoreglue+0x28>
 80155da:	2100      	movs	r1, #0
 80155dc:	e9c0 1600 	strd	r1, r6, [r0]
 80155e0:	300c      	adds	r0, #12
 80155e2:	60a0      	str	r0, [r4, #8]
 80155e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80155e8:	f000 f918 	bl	801581c <memset>
 80155ec:	4620      	mov	r0, r4
 80155ee:	bd70      	pop	{r4, r5, r6, pc}

080155f0 <__sfp_lock_acquire>:
 80155f0:	4801      	ldr	r0, [pc, #4]	; (80155f8 <__sfp_lock_acquire+0x8>)
 80155f2:	f000 b8f2 	b.w	80157da <__retarget_lock_acquire_recursive>
 80155f6:	bf00      	nop
 80155f8:	20014bf4 	.word	0x20014bf4

080155fc <__sfp_lock_release>:
 80155fc:	4801      	ldr	r0, [pc, #4]	; (8015604 <__sfp_lock_release+0x8>)
 80155fe:	f000 b8ed 	b.w	80157dc <__retarget_lock_release_recursive>
 8015602:	bf00      	nop
 8015604:	20014bf4 	.word	0x20014bf4

08015608 <__sinit_lock_acquire>:
 8015608:	4801      	ldr	r0, [pc, #4]	; (8015610 <__sinit_lock_acquire+0x8>)
 801560a:	f000 b8e6 	b.w	80157da <__retarget_lock_acquire_recursive>
 801560e:	bf00      	nop
 8015610:	20014bef 	.word	0x20014bef

08015614 <__sinit_lock_release>:
 8015614:	4801      	ldr	r0, [pc, #4]	; (801561c <__sinit_lock_release+0x8>)
 8015616:	f000 b8e1 	b.w	80157dc <__retarget_lock_release_recursive>
 801561a:	bf00      	nop
 801561c:	20014bef 	.word	0x20014bef

08015620 <__sinit>:
 8015620:	b510      	push	{r4, lr}
 8015622:	4604      	mov	r4, r0
 8015624:	f7ff fff0 	bl	8015608 <__sinit_lock_acquire>
 8015628:	69a3      	ldr	r3, [r4, #24]
 801562a:	b11b      	cbz	r3, 8015634 <__sinit+0x14>
 801562c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015630:	f7ff bff0 	b.w	8015614 <__sinit_lock_release>
 8015634:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8015638:	6523      	str	r3, [r4, #80]	; 0x50
 801563a:	4b13      	ldr	r3, [pc, #76]	; (8015688 <__sinit+0x68>)
 801563c:	4a13      	ldr	r2, [pc, #76]	; (801568c <__sinit+0x6c>)
 801563e:	681b      	ldr	r3, [r3, #0]
 8015640:	62a2      	str	r2, [r4, #40]	; 0x28
 8015642:	42a3      	cmp	r3, r4
 8015644:	bf04      	itt	eq
 8015646:	2301      	moveq	r3, #1
 8015648:	61a3      	streq	r3, [r4, #24]
 801564a:	4620      	mov	r0, r4
 801564c:	f000 f820 	bl	8015690 <__sfp>
 8015650:	6060      	str	r0, [r4, #4]
 8015652:	4620      	mov	r0, r4
 8015654:	f000 f81c 	bl	8015690 <__sfp>
 8015658:	60a0      	str	r0, [r4, #8]
 801565a:	4620      	mov	r0, r4
 801565c:	f000 f818 	bl	8015690 <__sfp>
 8015660:	2200      	movs	r2, #0
 8015662:	60e0      	str	r0, [r4, #12]
 8015664:	2104      	movs	r1, #4
 8015666:	6860      	ldr	r0, [r4, #4]
 8015668:	f7ff ff82 	bl	8015570 <std>
 801566c:	68a0      	ldr	r0, [r4, #8]
 801566e:	2201      	movs	r2, #1
 8015670:	2109      	movs	r1, #9
 8015672:	f7ff ff7d 	bl	8015570 <std>
 8015676:	68e0      	ldr	r0, [r4, #12]
 8015678:	2202      	movs	r2, #2
 801567a:	2112      	movs	r1, #18
 801567c:	f7ff ff78 	bl	8015570 <std>
 8015680:	2301      	movs	r3, #1
 8015682:	61a3      	str	r3, [r4, #24]
 8015684:	e7d2      	b.n	801562c <__sinit+0xc>
 8015686:	bf00      	nop
 8015688:	080191bc 	.word	0x080191bc
 801568c:	080155b9 	.word	0x080155b9

08015690 <__sfp>:
 8015690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015692:	4607      	mov	r7, r0
 8015694:	f7ff ffac 	bl	80155f0 <__sfp_lock_acquire>
 8015698:	4b1e      	ldr	r3, [pc, #120]	; (8015714 <__sfp+0x84>)
 801569a:	681e      	ldr	r6, [r3, #0]
 801569c:	69b3      	ldr	r3, [r6, #24]
 801569e:	b913      	cbnz	r3, 80156a6 <__sfp+0x16>
 80156a0:	4630      	mov	r0, r6
 80156a2:	f7ff ffbd 	bl	8015620 <__sinit>
 80156a6:	3648      	adds	r6, #72	; 0x48
 80156a8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80156ac:	3b01      	subs	r3, #1
 80156ae:	d503      	bpl.n	80156b8 <__sfp+0x28>
 80156b0:	6833      	ldr	r3, [r6, #0]
 80156b2:	b30b      	cbz	r3, 80156f8 <__sfp+0x68>
 80156b4:	6836      	ldr	r6, [r6, #0]
 80156b6:	e7f7      	b.n	80156a8 <__sfp+0x18>
 80156b8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80156bc:	b9d5      	cbnz	r5, 80156f4 <__sfp+0x64>
 80156be:	4b16      	ldr	r3, [pc, #88]	; (8015718 <__sfp+0x88>)
 80156c0:	60e3      	str	r3, [r4, #12]
 80156c2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80156c6:	6665      	str	r5, [r4, #100]	; 0x64
 80156c8:	f000 f886 	bl	80157d8 <__retarget_lock_init_recursive>
 80156cc:	f7ff ff96 	bl	80155fc <__sfp_lock_release>
 80156d0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80156d4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80156d8:	6025      	str	r5, [r4, #0]
 80156da:	61a5      	str	r5, [r4, #24]
 80156dc:	2208      	movs	r2, #8
 80156de:	4629      	mov	r1, r5
 80156e0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80156e4:	f000 f89a 	bl	801581c <memset>
 80156e8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80156ec:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80156f0:	4620      	mov	r0, r4
 80156f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80156f4:	3468      	adds	r4, #104	; 0x68
 80156f6:	e7d9      	b.n	80156ac <__sfp+0x1c>
 80156f8:	2104      	movs	r1, #4
 80156fa:	4638      	mov	r0, r7
 80156fc:	f7ff ff62 	bl	80155c4 <__sfmoreglue>
 8015700:	4604      	mov	r4, r0
 8015702:	6030      	str	r0, [r6, #0]
 8015704:	2800      	cmp	r0, #0
 8015706:	d1d5      	bne.n	80156b4 <__sfp+0x24>
 8015708:	f7ff ff78 	bl	80155fc <__sfp_lock_release>
 801570c:	230c      	movs	r3, #12
 801570e:	603b      	str	r3, [r7, #0]
 8015710:	e7ee      	b.n	80156f0 <__sfp+0x60>
 8015712:	bf00      	nop
 8015714:	080191bc 	.word	0x080191bc
 8015718:	ffff0001 	.word	0xffff0001

0801571c <_fwalk_reent>:
 801571c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015720:	4606      	mov	r6, r0
 8015722:	4688      	mov	r8, r1
 8015724:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015728:	2700      	movs	r7, #0
 801572a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801572e:	f1b9 0901 	subs.w	r9, r9, #1
 8015732:	d505      	bpl.n	8015740 <_fwalk_reent+0x24>
 8015734:	6824      	ldr	r4, [r4, #0]
 8015736:	2c00      	cmp	r4, #0
 8015738:	d1f7      	bne.n	801572a <_fwalk_reent+0xe>
 801573a:	4638      	mov	r0, r7
 801573c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015740:	89ab      	ldrh	r3, [r5, #12]
 8015742:	2b01      	cmp	r3, #1
 8015744:	d907      	bls.n	8015756 <_fwalk_reent+0x3a>
 8015746:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801574a:	3301      	adds	r3, #1
 801574c:	d003      	beq.n	8015756 <_fwalk_reent+0x3a>
 801574e:	4629      	mov	r1, r5
 8015750:	4630      	mov	r0, r6
 8015752:	47c0      	blx	r8
 8015754:	4307      	orrs	r7, r0
 8015756:	3568      	adds	r5, #104	; 0x68
 8015758:	e7e9      	b.n	801572e <_fwalk_reent+0x12>
	...

0801575c <__libc_init_array>:
 801575c:	b570      	push	{r4, r5, r6, lr}
 801575e:	4d0d      	ldr	r5, [pc, #52]	; (8015794 <__libc_init_array+0x38>)
 8015760:	4c0d      	ldr	r4, [pc, #52]	; (8015798 <__libc_init_array+0x3c>)
 8015762:	1b64      	subs	r4, r4, r5
 8015764:	10a4      	asrs	r4, r4, #2
 8015766:	2600      	movs	r6, #0
 8015768:	42a6      	cmp	r6, r4
 801576a:	d109      	bne.n	8015780 <__libc_init_array+0x24>
 801576c:	4d0b      	ldr	r5, [pc, #44]	; (801579c <__libc_init_array+0x40>)
 801576e:	4c0c      	ldr	r4, [pc, #48]	; (80157a0 <__libc_init_array+0x44>)
 8015770:	f002 fea4 	bl	80184bc <_init>
 8015774:	1b64      	subs	r4, r4, r5
 8015776:	10a4      	asrs	r4, r4, #2
 8015778:	2600      	movs	r6, #0
 801577a:	42a6      	cmp	r6, r4
 801577c:	d105      	bne.n	801578a <__libc_init_array+0x2e>
 801577e:	bd70      	pop	{r4, r5, r6, pc}
 8015780:	f855 3b04 	ldr.w	r3, [r5], #4
 8015784:	4798      	blx	r3
 8015786:	3601      	adds	r6, #1
 8015788:	e7ee      	b.n	8015768 <__libc_init_array+0xc>
 801578a:	f855 3b04 	ldr.w	r3, [r5], #4
 801578e:	4798      	blx	r3
 8015790:	3601      	adds	r6, #1
 8015792:	e7f2      	b.n	801577a <__libc_init_array+0x1e>
 8015794:	0801956c 	.word	0x0801956c
 8015798:	0801956c 	.word	0x0801956c
 801579c:	0801956c 	.word	0x0801956c
 80157a0:	08019570 	.word	0x08019570

080157a4 <__itoa>:
 80157a4:	1e93      	subs	r3, r2, #2
 80157a6:	2b22      	cmp	r3, #34	; 0x22
 80157a8:	b510      	push	{r4, lr}
 80157aa:	460c      	mov	r4, r1
 80157ac:	d904      	bls.n	80157b8 <__itoa+0x14>
 80157ae:	2300      	movs	r3, #0
 80157b0:	700b      	strb	r3, [r1, #0]
 80157b2:	461c      	mov	r4, r3
 80157b4:	4620      	mov	r0, r4
 80157b6:	bd10      	pop	{r4, pc}
 80157b8:	2a0a      	cmp	r2, #10
 80157ba:	d109      	bne.n	80157d0 <__itoa+0x2c>
 80157bc:	2800      	cmp	r0, #0
 80157be:	da07      	bge.n	80157d0 <__itoa+0x2c>
 80157c0:	232d      	movs	r3, #45	; 0x2d
 80157c2:	700b      	strb	r3, [r1, #0]
 80157c4:	4240      	negs	r0, r0
 80157c6:	2101      	movs	r1, #1
 80157c8:	4421      	add	r1, r4
 80157ca:	f000 fe37 	bl	801643c <__utoa>
 80157ce:	e7f1      	b.n	80157b4 <__itoa+0x10>
 80157d0:	2100      	movs	r1, #0
 80157d2:	e7f9      	b.n	80157c8 <__itoa+0x24>

080157d4 <itoa>:
 80157d4:	f7ff bfe6 	b.w	80157a4 <__itoa>

080157d8 <__retarget_lock_init_recursive>:
 80157d8:	4770      	bx	lr

080157da <__retarget_lock_acquire_recursive>:
 80157da:	4770      	bx	lr

080157dc <__retarget_lock_release_recursive>:
 80157dc:	4770      	bx	lr
	...

080157e0 <malloc>:
 80157e0:	4b02      	ldr	r3, [pc, #8]	; (80157ec <malloc+0xc>)
 80157e2:	4601      	mov	r1, r0
 80157e4:	6818      	ldr	r0, [r3, #0]
 80157e6:	f000 b871 	b.w	80158cc <_malloc_r>
 80157ea:	bf00      	nop
 80157ec:	2000019c 	.word	0x2000019c

080157f0 <free>:
 80157f0:	4b02      	ldr	r3, [pc, #8]	; (80157fc <free+0xc>)
 80157f2:	4601      	mov	r1, r0
 80157f4:	6818      	ldr	r0, [r3, #0]
 80157f6:	f000 b819 	b.w	801582c <_free_r>
 80157fa:	bf00      	nop
 80157fc:	2000019c 	.word	0x2000019c

08015800 <memcpy>:
 8015800:	440a      	add	r2, r1
 8015802:	4291      	cmp	r1, r2
 8015804:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8015808:	d100      	bne.n	801580c <memcpy+0xc>
 801580a:	4770      	bx	lr
 801580c:	b510      	push	{r4, lr}
 801580e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015812:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015816:	4291      	cmp	r1, r2
 8015818:	d1f9      	bne.n	801580e <memcpy+0xe>
 801581a:	bd10      	pop	{r4, pc}

0801581c <memset>:
 801581c:	4402      	add	r2, r0
 801581e:	4603      	mov	r3, r0
 8015820:	4293      	cmp	r3, r2
 8015822:	d100      	bne.n	8015826 <memset+0xa>
 8015824:	4770      	bx	lr
 8015826:	f803 1b01 	strb.w	r1, [r3], #1
 801582a:	e7f9      	b.n	8015820 <memset+0x4>

0801582c <_free_r>:
 801582c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801582e:	2900      	cmp	r1, #0
 8015830:	d048      	beq.n	80158c4 <_free_r+0x98>
 8015832:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015836:	9001      	str	r0, [sp, #4]
 8015838:	2b00      	cmp	r3, #0
 801583a:	f1a1 0404 	sub.w	r4, r1, #4
 801583e:	bfb8      	it	lt
 8015840:	18e4      	addlt	r4, r4, r3
 8015842:	f001 fdb1 	bl	80173a8 <__malloc_lock>
 8015846:	4a20      	ldr	r2, [pc, #128]	; (80158c8 <_free_r+0x9c>)
 8015848:	9801      	ldr	r0, [sp, #4]
 801584a:	6813      	ldr	r3, [r2, #0]
 801584c:	4615      	mov	r5, r2
 801584e:	b933      	cbnz	r3, 801585e <_free_r+0x32>
 8015850:	6063      	str	r3, [r4, #4]
 8015852:	6014      	str	r4, [r2, #0]
 8015854:	b003      	add	sp, #12
 8015856:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801585a:	f001 bdab 	b.w	80173b4 <__malloc_unlock>
 801585e:	42a3      	cmp	r3, r4
 8015860:	d90b      	bls.n	801587a <_free_r+0x4e>
 8015862:	6821      	ldr	r1, [r4, #0]
 8015864:	1862      	adds	r2, r4, r1
 8015866:	4293      	cmp	r3, r2
 8015868:	bf04      	itt	eq
 801586a:	681a      	ldreq	r2, [r3, #0]
 801586c:	685b      	ldreq	r3, [r3, #4]
 801586e:	6063      	str	r3, [r4, #4]
 8015870:	bf04      	itt	eq
 8015872:	1852      	addeq	r2, r2, r1
 8015874:	6022      	streq	r2, [r4, #0]
 8015876:	602c      	str	r4, [r5, #0]
 8015878:	e7ec      	b.n	8015854 <_free_r+0x28>
 801587a:	461a      	mov	r2, r3
 801587c:	685b      	ldr	r3, [r3, #4]
 801587e:	b10b      	cbz	r3, 8015884 <_free_r+0x58>
 8015880:	42a3      	cmp	r3, r4
 8015882:	d9fa      	bls.n	801587a <_free_r+0x4e>
 8015884:	6811      	ldr	r1, [r2, #0]
 8015886:	1855      	adds	r5, r2, r1
 8015888:	42a5      	cmp	r5, r4
 801588a:	d10b      	bne.n	80158a4 <_free_r+0x78>
 801588c:	6824      	ldr	r4, [r4, #0]
 801588e:	4421      	add	r1, r4
 8015890:	1854      	adds	r4, r2, r1
 8015892:	42a3      	cmp	r3, r4
 8015894:	6011      	str	r1, [r2, #0]
 8015896:	d1dd      	bne.n	8015854 <_free_r+0x28>
 8015898:	681c      	ldr	r4, [r3, #0]
 801589a:	685b      	ldr	r3, [r3, #4]
 801589c:	6053      	str	r3, [r2, #4]
 801589e:	4421      	add	r1, r4
 80158a0:	6011      	str	r1, [r2, #0]
 80158a2:	e7d7      	b.n	8015854 <_free_r+0x28>
 80158a4:	d902      	bls.n	80158ac <_free_r+0x80>
 80158a6:	230c      	movs	r3, #12
 80158a8:	6003      	str	r3, [r0, #0]
 80158aa:	e7d3      	b.n	8015854 <_free_r+0x28>
 80158ac:	6825      	ldr	r5, [r4, #0]
 80158ae:	1961      	adds	r1, r4, r5
 80158b0:	428b      	cmp	r3, r1
 80158b2:	bf04      	itt	eq
 80158b4:	6819      	ldreq	r1, [r3, #0]
 80158b6:	685b      	ldreq	r3, [r3, #4]
 80158b8:	6063      	str	r3, [r4, #4]
 80158ba:	bf04      	itt	eq
 80158bc:	1949      	addeq	r1, r1, r5
 80158be:	6021      	streq	r1, [r4, #0]
 80158c0:	6054      	str	r4, [r2, #4]
 80158c2:	e7c7      	b.n	8015854 <_free_r+0x28>
 80158c4:	b003      	add	sp, #12
 80158c6:	bd30      	pop	{r4, r5, pc}
 80158c8:	20005e10 	.word	0x20005e10

080158cc <_malloc_r>:
 80158cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80158ce:	1ccd      	adds	r5, r1, #3
 80158d0:	f025 0503 	bic.w	r5, r5, #3
 80158d4:	3508      	adds	r5, #8
 80158d6:	2d0c      	cmp	r5, #12
 80158d8:	bf38      	it	cc
 80158da:	250c      	movcc	r5, #12
 80158dc:	2d00      	cmp	r5, #0
 80158de:	4606      	mov	r6, r0
 80158e0:	db01      	blt.n	80158e6 <_malloc_r+0x1a>
 80158e2:	42a9      	cmp	r1, r5
 80158e4:	d903      	bls.n	80158ee <_malloc_r+0x22>
 80158e6:	230c      	movs	r3, #12
 80158e8:	6033      	str	r3, [r6, #0]
 80158ea:	2000      	movs	r0, #0
 80158ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80158ee:	f001 fd5b 	bl	80173a8 <__malloc_lock>
 80158f2:	4921      	ldr	r1, [pc, #132]	; (8015978 <_malloc_r+0xac>)
 80158f4:	680a      	ldr	r2, [r1, #0]
 80158f6:	4614      	mov	r4, r2
 80158f8:	b99c      	cbnz	r4, 8015922 <_malloc_r+0x56>
 80158fa:	4f20      	ldr	r7, [pc, #128]	; (801597c <_malloc_r+0xb0>)
 80158fc:	683b      	ldr	r3, [r7, #0]
 80158fe:	b923      	cbnz	r3, 801590a <_malloc_r+0x3e>
 8015900:	4621      	mov	r1, r4
 8015902:	4630      	mov	r0, r6
 8015904:	f000 fd10 	bl	8016328 <_sbrk_r>
 8015908:	6038      	str	r0, [r7, #0]
 801590a:	4629      	mov	r1, r5
 801590c:	4630      	mov	r0, r6
 801590e:	f000 fd0b 	bl	8016328 <_sbrk_r>
 8015912:	1c43      	adds	r3, r0, #1
 8015914:	d123      	bne.n	801595e <_malloc_r+0x92>
 8015916:	230c      	movs	r3, #12
 8015918:	6033      	str	r3, [r6, #0]
 801591a:	4630      	mov	r0, r6
 801591c:	f001 fd4a 	bl	80173b4 <__malloc_unlock>
 8015920:	e7e3      	b.n	80158ea <_malloc_r+0x1e>
 8015922:	6823      	ldr	r3, [r4, #0]
 8015924:	1b5b      	subs	r3, r3, r5
 8015926:	d417      	bmi.n	8015958 <_malloc_r+0x8c>
 8015928:	2b0b      	cmp	r3, #11
 801592a:	d903      	bls.n	8015934 <_malloc_r+0x68>
 801592c:	6023      	str	r3, [r4, #0]
 801592e:	441c      	add	r4, r3
 8015930:	6025      	str	r5, [r4, #0]
 8015932:	e004      	b.n	801593e <_malloc_r+0x72>
 8015934:	6863      	ldr	r3, [r4, #4]
 8015936:	42a2      	cmp	r2, r4
 8015938:	bf0c      	ite	eq
 801593a:	600b      	streq	r3, [r1, #0]
 801593c:	6053      	strne	r3, [r2, #4]
 801593e:	4630      	mov	r0, r6
 8015940:	f001 fd38 	bl	80173b4 <__malloc_unlock>
 8015944:	f104 000b 	add.w	r0, r4, #11
 8015948:	1d23      	adds	r3, r4, #4
 801594a:	f020 0007 	bic.w	r0, r0, #7
 801594e:	1ac2      	subs	r2, r0, r3
 8015950:	d0cc      	beq.n	80158ec <_malloc_r+0x20>
 8015952:	1a1b      	subs	r3, r3, r0
 8015954:	50a3      	str	r3, [r4, r2]
 8015956:	e7c9      	b.n	80158ec <_malloc_r+0x20>
 8015958:	4622      	mov	r2, r4
 801595a:	6864      	ldr	r4, [r4, #4]
 801595c:	e7cc      	b.n	80158f8 <_malloc_r+0x2c>
 801595e:	1cc4      	adds	r4, r0, #3
 8015960:	f024 0403 	bic.w	r4, r4, #3
 8015964:	42a0      	cmp	r0, r4
 8015966:	d0e3      	beq.n	8015930 <_malloc_r+0x64>
 8015968:	1a21      	subs	r1, r4, r0
 801596a:	4630      	mov	r0, r6
 801596c:	f000 fcdc 	bl	8016328 <_sbrk_r>
 8015970:	3001      	adds	r0, #1
 8015972:	d1dd      	bne.n	8015930 <_malloc_r+0x64>
 8015974:	e7cf      	b.n	8015916 <_malloc_r+0x4a>
 8015976:	bf00      	nop
 8015978:	20005e10 	.word	0x20005e10
 801597c:	20005e14 	.word	0x20005e14

08015980 <__cvt>:
 8015980:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015984:	ec55 4b10 	vmov	r4, r5, d0
 8015988:	2d00      	cmp	r5, #0
 801598a:	460e      	mov	r6, r1
 801598c:	4619      	mov	r1, r3
 801598e:	462b      	mov	r3, r5
 8015990:	bfbb      	ittet	lt
 8015992:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8015996:	461d      	movlt	r5, r3
 8015998:	2300      	movge	r3, #0
 801599a:	232d      	movlt	r3, #45	; 0x2d
 801599c:	700b      	strb	r3, [r1, #0]
 801599e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80159a0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80159a4:	4691      	mov	r9, r2
 80159a6:	f023 0820 	bic.w	r8, r3, #32
 80159aa:	bfbc      	itt	lt
 80159ac:	4622      	movlt	r2, r4
 80159ae:	4614      	movlt	r4, r2
 80159b0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80159b4:	d005      	beq.n	80159c2 <__cvt+0x42>
 80159b6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80159ba:	d100      	bne.n	80159be <__cvt+0x3e>
 80159bc:	3601      	adds	r6, #1
 80159be:	2102      	movs	r1, #2
 80159c0:	e000      	b.n	80159c4 <__cvt+0x44>
 80159c2:	2103      	movs	r1, #3
 80159c4:	ab03      	add	r3, sp, #12
 80159c6:	9301      	str	r3, [sp, #4]
 80159c8:	ab02      	add	r3, sp, #8
 80159ca:	9300      	str	r3, [sp, #0]
 80159cc:	ec45 4b10 	vmov	d0, r4, r5
 80159d0:	4653      	mov	r3, sl
 80159d2:	4632      	mov	r2, r6
 80159d4:	f000 fe24 	bl	8016620 <_dtoa_r>
 80159d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80159dc:	4607      	mov	r7, r0
 80159de:	d102      	bne.n	80159e6 <__cvt+0x66>
 80159e0:	f019 0f01 	tst.w	r9, #1
 80159e4:	d022      	beq.n	8015a2c <__cvt+0xac>
 80159e6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80159ea:	eb07 0906 	add.w	r9, r7, r6
 80159ee:	d110      	bne.n	8015a12 <__cvt+0x92>
 80159f0:	783b      	ldrb	r3, [r7, #0]
 80159f2:	2b30      	cmp	r3, #48	; 0x30
 80159f4:	d10a      	bne.n	8015a0c <__cvt+0x8c>
 80159f6:	2200      	movs	r2, #0
 80159f8:	2300      	movs	r3, #0
 80159fa:	4620      	mov	r0, r4
 80159fc:	4629      	mov	r1, r5
 80159fe:	f7eb f863 	bl	8000ac8 <__aeabi_dcmpeq>
 8015a02:	b918      	cbnz	r0, 8015a0c <__cvt+0x8c>
 8015a04:	f1c6 0601 	rsb	r6, r6, #1
 8015a08:	f8ca 6000 	str.w	r6, [sl]
 8015a0c:	f8da 3000 	ldr.w	r3, [sl]
 8015a10:	4499      	add	r9, r3
 8015a12:	2200      	movs	r2, #0
 8015a14:	2300      	movs	r3, #0
 8015a16:	4620      	mov	r0, r4
 8015a18:	4629      	mov	r1, r5
 8015a1a:	f7eb f855 	bl	8000ac8 <__aeabi_dcmpeq>
 8015a1e:	b108      	cbz	r0, 8015a24 <__cvt+0xa4>
 8015a20:	f8cd 900c 	str.w	r9, [sp, #12]
 8015a24:	2230      	movs	r2, #48	; 0x30
 8015a26:	9b03      	ldr	r3, [sp, #12]
 8015a28:	454b      	cmp	r3, r9
 8015a2a:	d307      	bcc.n	8015a3c <__cvt+0xbc>
 8015a2c:	9b03      	ldr	r3, [sp, #12]
 8015a2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8015a30:	1bdb      	subs	r3, r3, r7
 8015a32:	4638      	mov	r0, r7
 8015a34:	6013      	str	r3, [r2, #0]
 8015a36:	b004      	add	sp, #16
 8015a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015a3c:	1c59      	adds	r1, r3, #1
 8015a3e:	9103      	str	r1, [sp, #12]
 8015a40:	701a      	strb	r2, [r3, #0]
 8015a42:	e7f0      	b.n	8015a26 <__cvt+0xa6>

08015a44 <__exponent>:
 8015a44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8015a46:	4603      	mov	r3, r0
 8015a48:	2900      	cmp	r1, #0
 8015a4a:	bfb8      	it	lt
 8015a4c:	4249      	neglt	r1, r1
 8015a4e:	f803 2b02 	strb.w	r2, [r3], #2
 8015a52:	bfb4      	ite	lt
 8015a54:	222d      	movlt	r2, #45	; 0x2d
 8015a56:	222b      	movge	r2, #43	; 0x2b
 8015a58:	2909      	cmp	r1, #9
 8015a5a:	7042      	strb	r2, [r0, #1]
 8015a5c:	dd2a      	ble.n	8015ab4 <__exponent+0x70>
 8015a5e:	f10d 0407 	add.w	r4, sp, #7
 8015a62:	46a4      	mov	ip, r4
 8015a64:	270a      	movs	r7, #10
 8015a66:	46a6      	mov	lr, r4
 8015a68:	460a      	mov	r2, r1
 8015a6a:	fb91 f6f7 	sdiv	r6, r1, r7
 8015a6e:	fb07 1516 	mls	r5, r7, r6, r1
 8015a72:	3530      	adds	r5, #48	; 0x30
 8015a74:	2a63      	cmp	r2, #99	; 0x63
 8015a76:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8015a7a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8015a7e:	4631      	mov	r1, r6
 8015a80:	dcf1      	bgt.n	8015a66 <__exponent+0x22>
 8015a82:	3130      	adds	r1, #48	; 0x30
 8015a84:	f1ae 0502 	sub.w	r5, lr, #2
 8015a88:	f804 1c01 	strb.w	r1, [r4, #-1]
 8015a8c:	1c44      	adds	r4, r0, #1
 8015a8e:	4629      	mov	r1, r5
 8015a90:	4561      	cmp	r1, ip
 8015a92:	d30a      	bcc.n	8015aaa <__exponent+0x66>
 8015a94:	f10d 0209 	add.w	r2, sp, #9
 8015a98:	eba2 020e 	sub.w	r2, r2, lr
 8015a9c:	4565      	cmp	r5, ip
 8015a9e:	bf88      	it	hi
 8015aa0:	2200      	movhi	r2, #0
 8015aa2:	4413      	add	r3, r2
 8015aa4:	1a18      	subs	r0, r3, r0
 8015aa6:	b003      	add	sp, #12
 8015aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015aaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015aae:	f804 2f01 	strb.w	r2, [r4, #1]!
 8015ab2:	e7ed      	b.n	8015a90 <__exponent+0x4c>
 8015ab4:	2330      	movs	r3, #48	; 0x30
 8015ab6:	3130      	adds	r1, #48	; 0x30
 8015ab8:	7083      	strb	r3, [r0, #2]
 8015aba:	70c1      	strb	r1, [r0, #3]
 8015abc:	1d03      	adds	r3, r0, #4
 8015abe:	e7f1      	b.n	8015aa4 <__exponent+0x60>

08015ac0 <_printf_float>:
 8015ac0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ac4:	ed2d 8b02 	vpush	{d8}
 8015ac8:	b08d      	sub	sp, #52	; 0x34
 8015aca:	460c      	mov	r4, r1
 8015acc:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8015ad0:	4616      	mov	r6, r2
 8015ad2:	461f      	mov	r7, r3
 8015ad4:	4605      	mov	r5, r0
 8015ad6:	f001 fc51 	bl	801737c <_localeconv_r>
 8015ada:	f8d0 a000 	ldr.w	sl, [r0]
 8015ade:	4650      	mov	r0, sl
 8015ae0:	f7ea fb76 	bl	80001d0 <strlen>
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	930a      	str	r3, [sp, #40]	; 0x28
 8015ae8:	6823      	ldr	r3, [r4, #0]
 8015aea:	9305      	str	r3, [sp, #20]
 8015aec:	f8d8 3000 	ldr.w	r3, [r8]
 8015af0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8015af4:	3307      	adds	r3, #7
 8015af6:	f023 0307 	bic.w	r3, r3, #7
 8015afa:	f103 0208 	add.w	r2, r3, #8
 8015afe:	f8c8 2000 	str.w	r2, [r8]
 8015b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015b06:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8015b0a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8015b0e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8015b12:	9307      	str	r3, [sp, #28]
 8015b14:	f8cd 8018 	str.w	r8, [sp, #24]
 8015b18:	ee08 0a10 	vmov	s16, r0
 8015b1c:	4b9f      	ldr	r3, [pc, #636]	; (8015d9c <_printf_float+0x2dc>)
 8015b1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015b22:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015b26:	f7eb f801 	bl	8000b2c <__aeabi_dcmpun>
 8015b2a:	bb88      	cbnz	r0, 8015b90 <_printf_float+0xd0>
 8015b2c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8015b30:	4b9a      	ldr	r3, [pc, #616]	; (8015d9c <_printf_float+0x2dc>)
 8015b32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015b36:	f7ea ffdb 	bl	8000af0 <__aeabi_dcmple>
 8015b3a:	bb48      	cbnz	r0, 8015b90 <_printf_float+0xd0>
 8015b3c:	2200      	movs	r2, #0
 8015b3e:	2300      	movs	r3, #0
 8015b40:	4640      	mov	r0, r8
 8015b42:	4649      	mov	r1, r9
 8015b44:	f7ea ffca 	bl	8000adc <__aeabi_dcmplt>
 8015b48:	b110      	cbz	r0, 8015b50 <_printf_float+0x90>
 8015b4a:	232d      	movs	r3, #45	; 0x2d
 8015b4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015b50:	4b93      	ldr	r3, [pc, #588]	; (8015da0 <_printf_float+0x2e0>)
 8015b52:	4894      	ldr	r0, [pc, #592]	; (8015da4 <_printf_float+0x2e4>)
 8015b54:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8015b58:	bf94      	ite	ls
 8015b5a:	4698      	movls	r8, r3
 8015b5c:	4680      	movhi	r8, r0
 8015b5e:	2303      	movs	r3, #3
 8015b60:	6123      	str	r3, [r4, #16]
 8015b62:	9b05      	ldr	r3, [sp, #20]
 8015b64:	f023 0204 	bic.w	r2, r3, #4
 8015b68:	6022      	str	r2, [r4, #0]
 8015b6a:	f04f 0900 	mov.w	r9, #0
 8015b6e:	9700      	str	r7, [sp, #0]
 8015b70:	4633      	mov	r3, r6
 8015b72:	aa0b      	add	r2, sp, #44	; 0x2c
 8015b74:	4621      	mov	r1, r4
 8015b76:	4628      	mov	r0, r5
 8015b78:	f000 f9d8 	bl	8015f2c <_printf_common>
 8015b7c:	3001      	adds	r0, #1
 8015b7e:	f040 8090 	bne.w	8015ca2 <_printf_float+0x1e2>
 8015b82:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015b86:	b00d      	add	sp, #52	; 0x34
 8015b88:	ecbd 8b02 	vpop	{d8}
 8015b8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015b90:	4642      	mov	r2, r8
 8015b92:	464b      	mov	r3, r9
 8015b94:	4640      	mov	r0, r8
 8015b96:	4649      	mov	r1, r9
 8015b98:	f7ea ffc8 	bl	8000b2c <__aeabi_dcmpun>
 8015b9c:	b140      	cbz	r0, 8015bb0 <_printf_float+0xf0>
 8015b9e:	464b      	mov	r3, r9
 8015ba0:	2b00      	cmp	r3, #0
 8015ba2:	bfbc      	itt	lt
 8015ba4:	232d      	movlt	r3, #45	; 0x2d
 8015ba6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8015baa:	487f      	ldr	r0, [pc, #508]	; (8015da8 <_printf_float+0x2e8>)
 8015bac:	4b7f      	ldr	r3, [pc, #508]	; (8015dac <_printf_float+0x2ec>)
 8015bae:	e7d1      	b.n	8015b54 <_printf_float+0x94>
 8015bb0:	6863      	ldr	r3, [r4, #4]
 8015bb2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8015bb6:	9206      	str	r2, [sp, #24]
 8015bb8:	1c5a      	adds	r2, r3, #1
 8015bba:	d13f      	bne.n	8015c3c <_printf_float+0x17c>
 8015bbc:	2306      	movs	r3, #6
 8015bbe:	6063      	str	r3, [r4, #4]
 8015bc0:	9b05      	ldr	r3, [sp, #20]
 8015bc2:	6861      	ldr	r1, [r4, #4]
 8015bc4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8015bc8:	2300      	movs	r3, #0
 8015bca:	9303      	str	r3, [sp, #12]
 8015bcc:	ab0a      	add	r3, sp, #40	; 0x28
 8015bce:	e9cd b301 	strd	fp, r3, [sp, #4]
 8015bd2:	ab09      	add	r3, sp, #36	; 0x24
 8015bd4:	ec49 8b10 	vmov	d0, r8, r9
 8015bd8:	9300      	str	r3, [sp, #0]
 8015bda:	6022      	str	r2, [r4, #0]
 8015bdc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8015be0:	4628      	mov	r0, r5
 8015be2:	f7ff fecd 	bl	8015980 <__cvt>
 8015be6:	9b06      	ldr	r3, [sp, #24]
 8015be8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015bea:	2b47      	cmp	r3, #71	; 0x47
 8015bec:	4680      	mov	r8, r0
 8015bee:	d108      	bne.n	8015c02 <_printf_float+0x142>
 8015bf0:	1cc8      	adds	r0, r1, #3
 8015bf2:	db02      	blt.n	8015bfa <_printf_float+0x13a>
 8015bf4:	6863      	ldr	r3, [r4, #4]
 8015bf6:	4299      	cmp	r1, r3
 8015bf8:	dd41      	ble.n	8015c7e <_printf_float+0x1be>
 8015bfa:	f1ab 0b02 	sub.w	fp, fp, #2
 8015bfe:	fa5f fb8b 	uxtb.w	fp, fp
 8015c02:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015c06:	d820      	bhi.n	8015c4a <_printf_float+0x18a>
 8015c08:	3901      	subs	r1, #1
 8015c0a:	465a      	mov	r2, fp
 8015c0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8015c10:	9109      	str	r1, [sp, #36]	; 0x24
 8015c12:	f7ff ff17 	bl	8015a44 <__exponent>
 8015c16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015c18:	1813      	adds	r3, r2, r0
 8015c1a:	2a01      	cmp	r2, #1
 8015c1c:	4681      	mov	r9, r0
 8015c1e:	6123      	str	r3, [r4, #16]
 8015c20:	dc02      	bgt.n	8015c28 <_printf_float+0x168>
 8015c22:	6822      	ldr	r2, [r4, #0]
 8015c24:	07d2      	lsls	r2, r2, #31
 8015c26:	d501      	bpl.n	8015c2c <_printf_float+0x16c>
 8015c28:	3301      	adds	r3, #1
 8015c2a:	6123      	str	r3, [r4, #16]
 8015c2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8015c30:	2b00      	cmp	r3, #0
 8015c32:	d09c      	beq.n	8015b6e <_printf_float+0xae>
 8015c34:	232d      	movs	r3, #45	; 0x2d
 8015c36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015c3a:	e798      	b.n	8015b6e <_printf_float+0xae>
 8015c3c:	9a06      	ldr	r2, [sp, #24]
 8015c3e:	2a47      	cmp	r2, #71	; 0x47
 8015c40:	d1be      	bne.n	8015bc0 <_printf_float+0x100>
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d1bc      	bne.n	8015bc0 <_printf_float+0x100>
 8015c46:	2301      	movs	r3, #1
 8015c48:	e7b9      	b.n	8015bbe <_printf_float+0xfe>
 8015c4a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8015c4e:	d118      	bne.n	8015c82 <_printf_float+0x1c2>
 8015c50:	2900      	cmp	r1, #0
 8015c52:	6863      	ldr	r3, [r4, #4]
 8015c54:	dd0b      	ble.n	8015c6e <_printf_float+0x1ae>
 8015c56:	6121      	str	r1, [r4, #16]
 8015c58:	b913      	cbnz	r3, 8015c60 <_printf_float+0x1a0>
 8015c5a:	6822      	ldr	r2, [r4, #0]
 8015c5c:	07d0      	lsls	r0, r2, #31
 8015c5e:	d502      	bpl.n	8015c66 <_printf_float+0x1a6>
 8015c60:	3301      	adds	r3, #1
 8015c62:	440b      	add	r3, r1
 8015c64:	6123      	str	r3, [r4, #16]
 8015c66:	65a1      	str	r1, [r4, #88]	; 0x58
 8015c68:	f04f 0900 	mov.w	r9, #0
 8015c6c:	e7de      	b.n	8015c2c <_printf_float+0x16c>
 8015c6e:	b913      	cbnz	r3, 8015c76 <_printf_float+0x1b6>
 8015c70:	6822      	ldr	r2, [r4, #0]
 8015c72:	07d2      	lsls	r2, r2, #31
 8015c74:	d501      	bpl.n	8015c7a <_printf_float+0x1ba>
 8015c76:	3302      	adds	r3, #2
 8015c78:	e7f4      	b.n	8015c64 <_printf_float+0x1a4>
 8015c7a:	2301      	movs	r3, #1
 8015c7c:	e7f2      	b.n	8015c64 <_printf_float+0x1a4>
 8015c7e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8015c82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015c84:	4299      	cmp	r1, r3
 8015c86:	db05      	blt.n	8015c94 <_printf_float+0x1d4>
 8015c88:	6823      	ldr	r3, [r4, #0]
 8015c8a:	6121      	str	r1, [r4, #16]
 8015c8c:	07d8      	lsls	r0, r3, #31
 8015c8e:	d5ea      	bpl.n	8015c66 <_printf_float+0x1a6>
 8015c90:	1c4b      	adds	r3, r1, #1
 8015c92:	e7e7      	b.n	8015c64 <_printf_float+0x1a4>
 8015c94:	2900      	cmp	r1, #0
 8015c96:	bfd4      	ite	le
 8015c98:	f1c1 0202 	rsble	r2, r1, #2
 8015c9c:	2201      	movgt	r2, #1
 8015c9e:	4413      	add	r3, r2
 8015ca0:	e7e0      	b.n	8015c64 <_printf_float+0x1a4>
 8015ca2:	6823      	ldr	r3, [r4, #0]
 8015ca4:	055a      	lsls	r2, r3, #21
 8015ca6:	d407      	bmi.n	8015cb8 <_printf_float+0x1f8>
 8015ca8:	6923      	ldr	r3, [r4, #16]
 8015caa:	4642      	mov	r2, r8
 8015cac:	4631      	mov	r1, r6
 8015cae:	4628      	mov	r0, r5
 8015cb0:	47b8      	blx	r7
 8015cb2:	3001      	adds	r0, #1
 8015cb4:	d12c      	bne.n	8015d10 <_printf_float+0x250>
 8015cb6:	e764      	b.n	8015b82 <_printf_float+0xc2>
 8015cb8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8015cbc:	f240 80e0 	bls.w	8015e80 <_printf_float+0x3c0>
 8015cc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015cc4:	2200      	movs	r2, #0
 8015cc6:	2300      	movs	r3, #0
 8015cc8:	f7ea fefe 	bl	8000ac8 <__aeabi_dcmpeq>
 8015ccc:	2800      	cmp	r0, #0
 8015cce:	d034      	beq.n	8015d3a <_printf_float+0x27a>
 8015cd0:	4a37      	ldr	r2, [pc, #220]	; (8015db0 <_printf_float+0x2f0>)
 8015cd2:	2301      	movs	r3, #1
 8015cd4:	4631      	mov	r1, r6
 8015cd6:	4628      	mov	r0, r5
 8015cd8:	47b8      	blx	r7
 8015cda:	3001      	adds	r0, #1
 8015cdc:	f43f af51 	beq.w	8015b82 <_printf_float+0xc2>
 8015ce0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015ce4:	429a      	cmp	r2, r3
 8015ce6:	db02      	blt.n	8015cee <_printf_float+0x22e>
 8015ce8:	6823      	ldr	r3, [r4, #0]
 8015cea:	07d8      	lsls	r0, r3, #31
 8015cec:	d510      	bpl.n	8015d10 <_printf_float+0x250>
 8015cee:	ee18 3a10 	vmov	r3, s16
 8015cf2:	4652      	mov	r2, sl
 8015cf4:	4631      	mov	r1, r6
 8015cf6:	4628      	mov	r0, r5
 8015cf8:	47b8      	blx	r7
 8015cfa:	3001      	adds	r0, #1
 8015cfc:	f43f af41 	beq.w	8015b82 <_printf_float+0xc2>
 8015d00:	f04f 0800 	mov.w	r8, #0
 8015d04:	f104 091a 	add.w	r9, r4, #26
 8015d08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d0a:	3b01      	subs	r3, #1
 8015d0c:	4543      	cmp	r3, r8
 8015d0e:	dc09      	bgt.n	8015d24 <_printf_float+0x264>
 8015d10:	6823      	ldr	r3, [r4, #0]
 8015d12:	079b      	lsls	r3, r3, #30
 8015d14:	f100 8105 	bmi.w	8015f22 <_printf_float+0x462>
 8015d18:	68e0      	ldr	r0, [r4, #12]
 8015d1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8015d1c:	4298      	cmp	r0, r3
 8015d1e:	bfb8      	it	lt
 8015d20:	4618      	movlt	r0, r3
 8015d22:	e730      	b.n	8015b86 <_printf_float+0xc6>
 8015d24:	2301      	movs	r3, #1
 8015d26:	464a      	mov	r2, r9
 8015d28:	4631      	mov	r1, r6
 8015d2a:	4628      	mov	r0, r5
 8015d2c:	47b8      	blx	r7
 8015d2e:	3001      	adds	r0, #1
 8015d30:	f43f af27 	beq.w	8015b82 <_printf_float+0xc2>
 8015d34:	f108 0801 	add.w	r8, r8, #1
 8015d38:	e7e6      	b.n	8015d08 <_printf_float+0x248>
 8015d3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d3c:	2b00      	cmp	r3, #0
 8015d3e:	dc39      	bgt.n	8015db4 <_printf_float+0x2f4>
 8015d40:	4a1b      	ldr	r2, [pc, #108]	; (8015db0 <_printf_float+0x2f0>)
 8015d42:	2301      	movs	r3, #1
 8015d44:	4631      	mov	r1, r6
 8015d46:	4628      	mov	r0, r5
 8015d48:	47b8      	blx	r7
 8015d4a:	3001      	adds	r0, #1
 8015d4c:	f43f af19 	beq.w	8015b82 <_printf_float+0xc2>
 8015d50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015d54:	4313      	orrs	r3, r2
 8015d56:	d102      	bne.n	8015d5e <_printf_float+0x29e>
 8015d58:	6823      	ldr	r3, [r4, #0]
 8015d5a:	07d9      	lsls	r1, r3, #31
 8015d5c:	d5d8      	bpl.n	8015d10 <_printf_float+0x250>
 8015d5e:	ee18 3a10 	vmov	r3, s16
 8015d62:	4652      	mov	r2, sl
 8015d64:	4631      	mov	r1, r6
 8015d66:	4628      	mov	r0, r5
 8015d68:	47b8      	blx	r7
 8015d6a:	3001      	adds	r0, #1
 8015d6c:	f43f af09 	beq.w	8015b82 <_printf_float+0xc2>
 8015d70:	f04f 0900 	mov.w	r9, #0
 8015d74:	f104 0a1a 	add.w	sl, r4, #26
 8015d78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8015d7a:	425b      	negs	r3, r3
 8015d7c:	454b      	cmp	r3, r9
 8015d7e:	dc01      	bgt.n	8015d84 <_printf_float+0x2c4>
 8015d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015d82:	e792      	b.n	8015caa <_printf_float+0x1ea>
 8015d84:	2301      	movs	r3, #1
 8015d86:	4652      	mov	r2, sl
 8015d88:	4631      	mov	r1, r6
 8015d8a:	4628      	mov	r0, r5
 8015d8c:	47b8      	blx	r7
 8015d8e:	3001      	adds	r0, #1
 8015d90:	f43f aef7 	beq.w	8015b82 <_printf_float+0xc2>
 8015d94:	f109 0901 	add.w	r9, r9, #1
 8015d98:	e7ee      	b.n	8015d78 <_printf_float+0x2b8>
 8015d9a:	bf00      	nop
 8015d9c:	7fefffff 	.word	0x7fefffff
 8015da0:	080191c0 	.word	0x080191c0
 8015da4:	080191c4 	.word	0x080191c4
 8015da8:	080191cc 	.word	0x080191cc
 8015dac:	080191c8 	.word	0x080191c8
 8015db0:	080191d0 	.word	0x080191d0
 8015db4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015db6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015db8:	429a      	cmp	r2, r3
 8015dba:	bfa8      	it	ge
 8015dbc:	461a      	movge	r2, r3
 8015dbe:	2a00      	cmp	r2, #0
 8015dc0:	4691      	mov	r9, r2
 8015dc2:	dc37      	bgt.n	8015e34 <_printf_float+0x374>
 8015dc4:	f04f 0b00 	mov.w	fp, #0
 8015dc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015dcc:	f104 021a 	add.w	r2, r4, #26
 8015dd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8015dd2:	9305      	str	r3, [sp, #20]
 8015dd4:	eba3 0309 	sub.w	r3, r3, r9
 8015dd8:	455b      	cmp	r3, fp
 8015dda:	dc33      	bgt.n	8015e44 <_printf_float+0x384>
 8015ddc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015de0:	429a      	cmp	r2, r3
 8015de2:	db3b      	blt.n	8015e5c <_printf_float+0x39c>
 8015de4:	6823      	ldr	r3, [r4, #0]
 8015de6:	07da      	lsls	r2, r3, #31
 8015de8:	d438      	bmi.n	8015e5c <_printf_float+0x39c>
 8015dea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015dec:	9b05      	ldr	r3, [sp, #20]
 8015dee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8015df0:	1ad3      	subs	r3, r2, r3
 8015df2:	eba2 0901 	sub.w	r9, r2, r1
 8015df6:	4599      	cmp	r9, r3
 8015df8:	bfa8      	it	ge
 8015dfa:	4699      	movge	r9, r3
 8015dfc:	f1b9 0f00 	cmp.w	r9, #0
 8015e00:	dc35      	bgt.n	8015e6e <_printf_float+0x3ae>
 8015e02:	f04f 0800 	mov.w	r8, #0
 8015e06:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8015e0a:	f104 0a1a 	add.w	sl, r4, #26
 8015e0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8015e12:	1a9b      	subs	r3, r3, r2
 8015e14:	eba3 0309 	sub.w	r3, r3, r9
 8015e18:	4543      	cmp	r3, r8
 8015e1a:	f77f af79 	ble.w	8015d10 <_printf_float+0x250>
 8015e1e:	2301      	movs	r3, #1
 8015e20:	4652      	mov	r2, sl
 8015e22:	4631      	mov	r1, r6
 8015e24:	4628      	mov	r0, r5
 8015e26:	47b8      	blx	r7
 8015e28:	3001      	adds	r0, #1
 8015e2a:	f43f aeaa 	beq.w	8015b82 <_printf_float+0xc2>
 8015e2e:	f108 0801 	add.w	r8, r8, #1
 8015e32:	e7ec      	b.n	8015e0e <_printf_float+0x34e>
 8015e34:	4613      	mov	r3, r2
 8015e36:	4631      	mov	r1, r6
 8015e38:	4642      	mov	r2, r8
 8015e3a:	4628      	mov	r0, r5
 8015e3c:	47b8      	blx	r7
 8015e3e:	3001      	adds	r0, #1
 8015e40:	d1c0      	bne.n	8015dc4 <_printf_float+0x304>
 8015e42:	e69e      	b.n	8015b82 <_printf_float+0xc2>
 8015e44:	2301      	movs	r3, #1
 8015e46:	4631      	mov	r1, r6
 8015e48:	4628      	mov	r0, r5
 8015e4a:	9205      	str	r2, [sp, #20]
 8015e4c:	47b8      	blx	r7
 8015e4e:	3001      	adds	r0, #1
 8015e50:	f43f ae97 	beq.w	8015b82 <_printf_float+0xc2>
 8015e54:	9a05      	ldr	r2, [sp, #20]
 8015e56:	f10b 0b01 	add.w	fp, fp, #1
 8015e5a:	e7b9      	b.n	8015dd0 <_printf_float+0x310>
 8015e5c:	ee18 3a10 	vmov	r3, s16
 8015e60:	4652      	mov	r2, sl
 8015e62:	4631      	mov	r1, r6
 8015e64:	4628      	mov	r0, r5
 8015e66:	47b8      	blx	r7
 8015e68:	3001      	adds	r0, #1
 8015e6a:	d1be      	bne.n	8015dea <_printf_float+0x32a>
 8015e6c:	e689      	b.n	8015b82 <_printf_float+0xc2>
 8015e6e:	9a05      	ldr	r2, [sp, #20]
 8015e70:	464b      	mov	r3, r9
 8015e72:	4442      	add	r2, r8
 8015e74:	4631      	mov	r1, r6
 8015e76:	4628      	mov	r0, r5
 8015e78:	47b8      	blx	r7
 8015e7a:	3001      	adds	r0, #1
 8015e7c:	d1c1      	bne.n	8015e02 <_printf_float+0x342>
 8015e7e:	e680      	b.n	8015b82 <_printf_float+0xc2>
 8015e80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8015e82:	2a01      	cmp	r2, #1
 8015e84:	dc01      	bgt.n	8015e8a <_printf_float+0x3ca>
 8015e86:	07db      	lsls	r3, r3, #31
 8015e88:	d538      	bpl.n	8015efc <_printf_float+0x43c>
 8015e8a:	2301      	movs	r3, #1
 8015e8c:	4642      	mov	r2, r8
 8015e8e:	4631      	mov	r1, r6
 8015e90:	4628      	mov	r0, r5
 8015e92:	47b8      	blx	r7
 8015e94:	3001      	adds	r0, #1
 8015e96:	f43f ae74 	beq.w	8015b82 <_printf_float+0xc2>
 8015e9a:	ee18 3a10 	vmov	r3, s16
 8015e9e:	4652      	mov	r2, sl
 8015ea0:	4631      	mov	r1, r6
 8015ea2:	4628      	mov	r0, r5
 8015ea4:	47b8      	blx	r7
 8015ea6:	3001      	adds	r0, #1
 8015ea8:	f43f ae6b 	beq.w	8015b82 <_printf_float+0xc2>
 8015eac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8015eb0:	2200      	movs	r2, #0
 8015eb2:	2300      	movs	r3, #0
 8015eb4:	f7ea fe08 	bl	8000ac8 <__aeabi_dcmpeq>
 8015eb8:	b9d8      	cbnz	r0, 8015ef2 <_printf_float+0x432>
 8015eba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ebc:	f108 0201 	add.w	r2, r8, #1
 8015ec0:	3b01      	subs	r3, #1
 8015ec2:	4631      	mov	r1, r6
 8015ec4:	4628      	mov	r0, r5
 8015ec6:	47b8      	blx	r7
 8015ec8:	3001      	adds	r0, #1
 8015eca:	d10e      	bne.n	8015eea <_printf_float+0x42a>
 8015ecc:	e659      	b.n	8015b82 <_printf_float+0xc2>
 8015ece:	2301      	movs	r3, #1
 8015ed0:	4652      	mov	r2, sl
 8015ed2:	4631      	mov	r1, r6
 8015ed4:	4628      	mov	r0, r5
 8015ed6:	47b8      	blx	r7
 8015ed8:	3001      	adds	r0, #1
 8015eda:	f43f ae52 	beq.w	8015b82 <_printf_float+0xc2>
 8015ede:	f108 0801 	add.w	r8, r8, #1
 8015ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8015ee4:	3b01      	subs	r3, #1
 8015ee6:	4543      	cmp	r3, r8
 8015ee8:	dcf1      	bgt.n	8015ece <_printf_float+0x40e>
 8015eea:	464b      	mov	r3, r9
 8015eec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8015ef0:	e6dc      	b.n	8015cac <_printf_float+0x1ec>
 8015ef2:	f04f 0800 	mov.w	r8, #0
 8015ef6:	f104 0a1a 	add.w	sl, r4, #26
 8015efa:	e7f2      	b.n	8015ee2 <_printf_float+0x422>
 8015efc:	2301      	movs	r3, #1
 8015efe:	4642      	mov	r2, r8
 8015f00:	e7df      	b.n	8015ec2 <_printf_float+0x402>
 8015f02:	2301      	movs	r3, #1
 8015f04:	464a      	mov	r2, r9
 8015f06:	4631      	mov	r1, r6
 8015f08:	4628      	mov	r0, r5
 8015f0a:	47b8      	blx	r7
 8015f0c:	3001      	adds	r0, #1
 8015f0e:	f43f ae38 	beq.w	8015b82 <_printf_float+0xc2>
 8015f12:	f108 0801 	add.w	r8, r8, #1
 8015f16:	68e3      	ldr	r3, [r4, #12]
 8015f18:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8015f1a:	1a5b      	subs	r3, r3, r1
 8015f1c:	4543      	cmp	r3, r8
 8015f1e:	dcf0      	bgt.n	8015f02 <_printf_float+0x442>
 8015f20:	e6fa      	b.n	8015d18 <_printf_float+0x258>
 8015f22:	f04f 0800 	mov.w	r8, #0
 8015f26:	f104 0919 	add.w	r9, r4, #25
 8015f2a:	e7f4      	b.n	8015f16 <_printf_float+0x456>

08015f2c <_printf_common>:
 8015f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015f30:	4616      	mov	r6, r2
 8015f32:	4699      	mov	r9, r3
 8015f34:	688a      	ldr	r2, [r1, #8]
 8015f36:	690b      	ldr	r3, [r1, #16]
 8015f38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8015f3c:	4293      	cmp	r3, r2
 8015f3e:	bfb8      	it	lt
 8015f40:	4613      	movlt	r3, r2
 8015f42:	6033      	str	r3, [r6, #0]
 8015f44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8015f48:	4607      	mov	r7, r0
 8015f4a:	460c      	mov	r4, r1
 8015f4c:	b10a      	cbz	r2, 8015f52 <_printf_common+0x26>
 8015f4e:	3301      	adds	r3, #1
 8015f50:	6033      	str	r3, [r6, #0]
 8015f52:	6823      	ldr	r3, [r4, #0]
 8015f54:	0699      	lsls	r1, r3, #26
 8015f56:	bf42      	ittt	mi
 8015f58:	6833      	ldrmi	r3, [r6, #0]
 8015f5a:	3302      	addmi	r3, #2
 8015f5c:	6033      	strmi	r3, [r6, #0]
 8015f5e:	6825      	ldr	r5, [r4, #0]
 8015f60:	f015 0506 	ands.w	r5, r5, #6
 8015f64:	d106      	bne.n	8015f74 <_printf_common+0x48>
 8015f66:	f104 0a19 	add.w	sl, r4, #25
 8015f6a:	68e3      	ldr	r3, [r4, #12]
 8015f6c:	6832      	ldr	r2, [r6, #0]
 8015f6e:	1a9b      	subs	r3, r3, r2
 8015f70:	42ab      	cmp	r3, r5
 8015f72:	dc26      	bgt.n	8015fc2 <_printf_common+0x96>
 8015f74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8015f78:	1e13      	subs	r3, r2, #0
 8015f7a:	6822      	ldr	r2, [r4, #0]
 8015f7c:	bf18      	it	ne
 8015f7e:	2301      	movne	r3, #1
 8015f80:	0692      	lsls	r2, r2, #26
 8015f82:	d42b      	bmi.n	8015fdc <_printf_common+0xb0>
 8015f84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8015f88:	4649      	mov	r1, r9
 8015f8a:	4638      	mov	r0, r7
 8015f8c:	47c0      	blx	r8
 8015f8e:	3001      	adds	r0, #1
 8015f90:	d01e      	beq.n	8015fd0 <_printf_common+0xa4>
 8015f92:	6823      	ldr	r3, [r4, #0]
 8015f94:	68e5      	ldr	r5, [r4, #12]
 8015f96:	6832      	ldr	r2, [r6, #0]
 8015f98:	f003 0306 	and.w	r3, r3, #6
 8015f9c:	2b04      	cmp	r3, #4
 8015f9e:	bf08      	it	eq
 8015fa0:	1aad      	subeq	r5, r5, r2
 8015fa2:	68a3      	ldr	r3, [r4, #8]
 8015fa4:	6922      	ldr	r2, [r4, #16]
 8015fa6:	bf0c      	ite	eq
 8015fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015fac:	2500      	movne	r5, #0
 8015fae:	4293      	cmp	r3, r2
 8015fb0:	bfc4      	itt	gt
 8015fb2:	1a9b      	subgt	r3, r3, r2
 8015fb4:	18ed      	addgt	r5, r5, r3
 8015fb6:	2600      	movs	r6, #0
 8015fb8:	341a      	adds	r4, #26
 8015fba:	42b5      	cmp	r5, r6
 8015fbc:	d11a      	bne.n	8015ff4 <_printf_common+0xc8>
 8015fbe:	2000      	movs	r0, #0
 8015fc0:	e008      	b.n	8015fd4 <_printf_common+0xa8>
 8015fc2:	2301      	movs	r3, #1
 8015fc4:	4652      	mov	r2, sl
 8015fc6:	4649      	mov	r1, r9
 8015fc8:	4638      	mov	r0, r7
 8015fca:	47c0      	blx	r8
 8015fcc:	3001      	adds	r0, #1
 8015fce:	d103      	bne.n	8015fd8 <_printf_common+0xac>
 8015fd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015fd8:	3501      	adds	r5, #1
 8015fda:	e7c6      	b.n	8015f6a <_printf_common+0x3e>
 8015fdc:	18e1      	adds	r1, r4, r3
 8015fde:	1c5a      	adds	r2, r3, #1
 8015fe0:	2030      	movs	r0, #48	; 0x30
 8015fe2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8015fe6:	4422      	add	r2, r4
 8015fe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015fec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015ff0:	3302      	adds	r3, #2
 8015ff2:	e7c7      	b.n	8015f84 <_printf_common+0x58>
 8015ff4:	2301      	movs	r3, #1
 8015ff6:	4622      	mov	r2, r4
 8015ff8:	4649      	mov	r1, r9
 8015ffa:	4638      	mov	r0, r7
 8015ffc:	47c0      	blx	r8
 8015ffe:	3001      	adds	r0, #1
 8016000:	d0e6      	beq.n	8015fd0 <_printf_common+0xa4>
 8016002:	3601      	adds	r6, #1
 8016004:	e7d9      	b.n	8015fba <_printf_common+0x8e>
	...

08016008 <_printf_i>:
 8016008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801600c:	460c      	mov	r4, r1
 801600e:	4691      	mov	r9, r2
 8016010:	7e27      	ldrb	r7, [r4, #24]
 8016012:	990c      	ldr	r1, [sp, #48]	; 0x30
 8016014:	2f78      	cmp	r7, #120	; 0x78
 8016016:	4680      	mov	r8, r0
 8016018:	469a      	mov	sl, r3
 801601a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801601e:	d807      	bhi.n	8016030 <_printf_i+0x28>
 8016020:	2f62      	cmp	r7, #98	; 0x62
 8016022:	d80a      	bhi.n	801603a <_printf_i+0x32>
 8016024:	2f00      	cmp	r7, #0
 8016026:	f000 80d8 	beq.w	80161da <_printf_i+0x1d2>
 801602a:	2f58      	cmp	r7, #88	; 0x58
 801602c:	f000 80a3 	beq.w	8016176 <_printf_i+0x16e>
 8016030:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8016034:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016038:	e03a      	b.n	80160b0 <_printf_i+0xa8>
 801603a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801603e:	2b15      	cmp	r3, #21
 8016040:	d8f6      	bhi.n	8016030 <_printf_i+0x28>
 8016042:	a001      	add	r0, pc, #4	; (adr r0, 8016048 <_printf_i+0x40>)
 8016044:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8016048:	080160a1 	.word	0x080160a1
 801604c:	080160b5 	.word	0x080160b5
 8016050:	08016031 	.word	0x08016031
 8016054:	08016031 	.word	0x08016031
 8016058:	08016031 	.word	0x08016031
 801605c:	08016031 	.word	0x08016031
 8016060:	080160b5 	.word	0x080160b5
 8016064:	08016031 	.word	0x08016031
 8016068:	08016031 	.word	0x08016031
 801606c:	08016031 	.word	0x08016031
 8016070:	08016031 	.word	0x08016031
 8016074:	080161c1 	.word	0x080161c1
 8016078:	080160e5 	.word	0x080160e5
 801607c:	080161a3 	.word	0x080161a3
 8016080:	08016031 	.word	0x08016031
 8016084:	08016031 	.word	0x08016031
 8016088:	080161e3 	.word	0x080161e3
 801608c:	08016031 	.word	0x08016031
 8016090:	080160e5 	.word	0x080160e5
 8016094:	08016031 	.word	0x08016031
 8016098:	08016031 	.word	0x08016031
 801609c:	080161ab 	.word	0x080161ab
 80160a0:	680b      	ldr	r3, [r1, #0]
 80160a2:	1d1a      	adds	r2, r3, #4
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	600a      	str	r2, [r1, #0]
 80160a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80160ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80160b0:	2301      	movs	r3, #1
 80160b2:	e0a3      	b.n	80161fc <_printf_i+0x1f4>
 80160b4:	6825      	ldr	r5, [r4, #0]
 80160b6:	6808      	ldr	r0, [r1, #0]
 80160b8:	062e      	lsls	r6, r5, #24
 80160ba:	f100 0304 	add.w	r3, r0, #4
 80160be:	d50a      	bpl.n	80160d6 <_printf_i+0xce>
 80160c0:	6805      	ldr	r5, [r0, #0]
 80160c2:	600b      	str	r3, [r1, #0]
 80160c4:	2d00      	cmp	r5, #0
 80160c6:	da03      	bge.n	80160d0 <_printf_i+0xc8>
 80160c8:	232d      	movs	r3, #45	; 0x2d
 80160ca:	426d      	negs	r5, r5
 80160cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80160d0:	485e      	ldr	r0, [pc, #376]	; (801624c <_printf_i+0x244>)
 80160d2:	230a      	movs	r3, #10
 80160d4:	e019      	b.n	801610a <_printf_i+0x102>
 80160d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80160da:	6805      	ldr	r5, [r0, #0]
 80160dc:	600b      	str	r3, [r1, #0]
 80160de:	bf18      	it	ne
 80160e0:	b22d      	sxthne	r5, r5
 80160e2:	e7ef      	b.n	80160c4 <_printf_i+0xbc>
 80160e4:	680b      	ldr	r3, [r1, #0]
 80160e6:	6825      	ldr	r5, [r4, #0]
 80160e8:	1d18      	adds	r0, r3, #4
 80160ea:	6008      	str	r0, [r1, #0]
 80160ec:	0628      	lsls	r0, r5, #24
 80160ee:	d501      	bpl.n	80160f4 <_printf_i+0xec>
 80160f0:	681d      	ldr	r5, [r3, #0]
 80160f2:	e002      	b.n	80160fa <_printf_i+0xf2>
 80160f4:	0669      	lsls	r1, r5, #25
 80160f6:	d5fb      	bpl.n	80160f0 <_printf_i+0xe8>
 80160f8:	881d      	ldrh	r5, [r3, #0]
 80160fa:	4854      	ldr	r0, [pc, #336]	; (801624c <_printf_i+0x244>)
 80160fc:	2f6f      	cmp	r7, #111	; 0x6f
 80160fe:	bf0c      	ite	eq
 8016100:	2308      	moveq	r3, #8
 8016102:	230a      	movne	r3, #10
 8016104:	2100      	movs	r1, #0
 8016106:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801610a:	6866      	ldr	r6, [r4, #4]
 801610c:	60a6      	str	r6, [r4, #8]
 801610e:	2e00      	cmp	r6, #0
 8016110:	bfa2      	ittt	ge
 8016112:	6821      	ldrge	r1, [r4, #0]
 8016114:	f021 0104 	bicge.w	r1, r1, #4
 8016118:	6021      	strge	r1, [r4, #0]
 801611a:	b90d      	cbnz	r5, 8016120 <_printf_i+0x118>
 801611c:	2e00      	cmp	r6, #0
 801611e:	d04d      	beq.n	80161bc <_printf_i+0x1b4>
 8016120:	4616      	mov	r6, r2
 8016122:	fbb5 f1f3 	udiv	r1, r5, r3
 8016126:	fb03 5711 	mls	r7, r3, r1, r5
 801612a:	5dc7      	ldrb	r7, [r0, r7]
 801612c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8016130:	462f      	mov	r7, r5
 8016132:	42bb      	cmp	r3, r7
 8016134:	460d      	mov	r5, r1
 8016136:	d9f4      	bls.n	8016122 <_printf_i+0x11a>
 8016138:	2b08      	cmp	r3, #8
 801613a:	d10b      	bne.n	8016154 <_printf_i+0x14c>
 801613c:	6823      	ldr	r3, [r4, #0]
 801613e:	07df      	lsls	r7, r3, #31
 8016140:	d508      	bpl.n	8016154 <_printf_i+0x14c>
 8016142:	6923      	ldr	r3, [r4, #16]
 8016144:	6861      	ldr	r1, [r4, #4]
 8016146:	4299      	cmp	r1, r3
 8016148:	bfde      	ittt	le
 801614a:	2330      	movle	r3, #48	; 0x30
 801614c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8016150:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8016154:	1b92      	subs	r2, r2, r6
 8016156:	6122      	str	r2, [r4, #16]
 8016158:	f8cd a000 	str.w	sl, [sp]
 801615c:	464b      	mov	r3, r9
 801615e:	aa03      	add	r2, sp, #12
 8016160:	4621      	mov	r1, r4
 8016162:	4640      	mov	r0, r8
 8016164:	f7ff fee2 	bl	8015f2c <_printf_common>
 8016168:	3001      	adds	r0, #1
 801616a:	d14c      	bne.n	8016206 <_printf_i+0x1fe>
 801616c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016170:	b004      	add	sp, #16
 8016172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016176:	4835      	ldr	r0, [pc, #212]	; (801624c <_printf_i+0x244>)
 8016178:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801617c:	6823      	ldr	r3, [r4, #0]
 801617e:	680e      	ldr	r6, [r1, #0]
 8016180:	061f      	lsls	r7, r3, #24
 8016182:	f856 5b04 	ldr.w	r5, [r6], #4
 8016186:	600e      	str	r6, [r1, #0]
 8016188:	d514      	bpl.n	80161b4 <_printf_i+0x1ac>
 801618a:	07d9      	lsls	r1, r3, #31
 801618c:	bf44      	itt	mi
 801618e:	f043 0320 	orrmi.w	r3, r3, #32
 8016192:	6023      	strmi	r3, [r4, #0]
 8016194:	b91d      	cbnz	r5, 801619e <_printf_i+0x196>
 8016196:	6823      	ldr	r3, [r4, #0]
 8016198:	f023 0320 	bic.w	r3, r3, #32
 801619c:	6023      	str	r3, [r4, #0]
 801619e:	2310      	movs	r3, #16
 80161a0:	e7b0      	b.n	8016104 <_printf_i+0xfc>
 80161a2:	6823      	ldr	r3, [r4, #0]
 80161a4:	f043 0320 	orr.w	r3, r3, #32
 80161a8:	6023      	str	r3, [r4, #0]
 80161aa:	2378      	movs	r3, #120	; 0x78
 80161ac:	4828      	ldr	r0, [pc, #160]	; (8016250 <_printf_i+0x248>)
 80161ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80161b2:	e7e3      	b.n	801617c <_printf_i+0x174>
 80161b4:	065e      	lsls	r6, r3, #25
 80161b6:	bf48      	it	mi
 80161b8:	b2ad      	uxthmi	r5, r5
 80161ba:	e7e6      	b.n	801618a <_printf_i+0x182>
 80161bc:	4616      	mov	r6, r2
 80161be:	e7bb      	b.n	8016138 <_printf_i+0x130>
 80161c0:	680b      	ldr	r3, [r1, #0]
 80161c2:	6826      	ldr	r6, [r4, #0]
 80161c4:	6960      	ldr	r0, [r4, #20]
 80161c6:	1d1d      	adds	r5, r3, #4
 80161c8:	600d      	str	r5, [r1, #0]
 80161ca:	0635      	lsls	r5, r6, #24
 80161cc:	681b      	ldr	r3, [r3, #0]
 80161ce:	d501      	bpl.n	80161d4 <_printf_i+0x1cc>
 80161d0:	6018      	str	r0, [r3, #0]
 80161d2:	e002      	b.n	80161da <_printf_i+0x1d2>
 80161d4:	0671      	lsls	r1, r6, #25
 80161d6:	d5fb      	bpl.n	80161d0 <_printf_i+0x1c8>
 80161d8:	8018      	strh	r0, [r3, #0]
 80161da:	2300      	movs	r3, #0
 80161dc:	6123      	str	r3, [r4, #16]
 80161de:	4616      	mov	r6, r2
 80161e0:	e7ba      	b.n	8016158 <_printf_i+0x150>
 80161e2:	680b      	ldr	r3, [r1, #0]
 80161e4:	1d1a      	adds	r2, r3, #4
 80161e6:	600a      	str	r2, [r1, #0]
 80161e8:	681e      	ldr	r6, [r3, #0]
 80161ea:	6862      	ldr	r2, [r4, #4]
 80161ec:	2100      	movs	r1, #0
 80161ee:	4630      	mov	r0, r6
 80161f0:	f7e9 fff6 	bl	80001e0 <memchr>
 80161f4:	b108      	cbz	r0, 80161fa <_printf_i+0x1f2>
 80161f6:	1b80      	subs	r0, r0, r6
 80161f8:	6060      	str	r0, [r4, #4]
 80161fa:	6863      	ldr	r3, [r4, #4]
 80161fc:	6123      	str	r3, [r4, #16]
 80161fe:	2300      	movs	r3, #0
 8016200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016204:	e7a8      	b.n	8016158 <_printf_i+0x150>
 8016206:	6923      	ldr	r3, [r4, #16]
 8016208:	4632      	mov	r2, r6
 801620a:	4649      	mov	r1, r9
 801620c:	4640      	mov	r0, r8
 801620e:	47d0      	blx	sl
 8016210:	3001      	adds	r0, #1
 8016212:	d0ab      	beq.n	801616c <_printf_i+0x164>
 8016214:	6823      	ldr	r3, [r4, #0]
 8016216:	079b      	lsls	r3, r3, #30
 8016218:	d413      	bmi.n	8016242 <_printf_i+0x23a>
 801621a:	68e0      	ldr	r0, [r4, #12]
 801621c:	9b03      	ldr	r3, [sp, #12]
 801621e:	4298      	cmp	r0, r3
 8016220:	bfb8      	it	lt
 8016222:	4618      	movlt	r0, r3
 8016224:	e7a4      	b.n	8016170 <_printf_i+0x168>
 8016226:	2301      	movs	r3, #1
 8016228:	4632      	mov	r2, r6
 801622a:	4649      	mov	r1, r9
 801622c:	4640      	mov	r0, r8
 801622e:	47d0      	blx	sl
 8016230:	3001      	adds	r0, #1
 8016232:	d09b      	beq.n	801616c <_printf_i+0x164>
 8016234:	3501      	adds	r5, #1
 8016236:	68e3      	ldr	r3, [r4, #12]
 8016238:	9903      	ldr	r1, [sp, #12]
 801623a:	1a5b      	subs	r3, r3, r1
 801623c:	42ab      	cmp	r3, r5
 801623e:	dcf2      	bgt.n	8016226 <_printf_i+0x21e>
 8016240:	e7eb      	b.n	801621a <_printf_i+0x212>
 8016242:	2500      	movs	r5, #0
 8016244:	f104 0619 	add.w	r6, r4, #25
 8016248:	e7f5      	b.n	8016236 <_printf_i+0x22e>
 801624a:	bf00      	nop
 801624c:	080191d2 	.word	0x080191d2
 8016250:	080191e3 	.word	0x080191e3

08016254 <cleanup_glue>:
 8016254:	b538      	push	{r3, r4, r5, lr}
 8016256:	460c      	mov	r4, r1
 8016258:	6809      	ldr	r1, [r1, #0]
 801625a:	4605      	mov	r5, r0
 801625c:	b109      	cbz	r1, 8016262 <cleanup_glue+0xe>
 801625e:	f7ff fff9 	bl	8016254 <cleanup_glue>
 8016262:	4621      	mov	r1, r4
 8016264:	4628      	mov	r0, r5
 8016266:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801626a:	f7ff badf 	b.w	801582c <_free_r>
	...

08016270 <_reclaim_reent>:
 8016270:	4b2c      	ldr	r3, [pc, #176]	; (8016324 <_reclaim_reent+0xb4>)
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	4283      	cmp	r3, r0
 8016276:	b570      	push	{r4, r5, r6, lr}
 8016278:	4604      	mov	r4, r0
 801627a:	d051      	beq.n	8016320 <_reclaim_reent+0xb0>
 801627c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801627e:	b143      	cbz	r3, 8016292 <_reclaim_reent+0x22>
 8016280:	68db      	ldr	r3, [r3, #12]
 8016282:	2b00      	cmp	r3, #0
 8016284:	d14a      	bne.n	801631c <_reclaim_reent+0xac>
 8016286:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016288:	6819      	ldr	r1, [r3, #0]
 801628a:	b111      	cbz	r1, 8016292 <_reclaim_reent+0x22>
 801628c:	4620      	mov	r0, r4
 801628e:	f7ff facd 	bl	801582c <_free_r>
 8016292:	6961      	ldr	r1, [r4, #20]
 8016294:	b111      	cbz	r1, 801629c <_reclaim_reent+0x2c>
 8016296:	4620      	mov	r0, r4
 8016298:	f7ff fac8 	bl	801582c <_free_r>
 801629c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801629e:	b111      	cbz	r1, 80162a6 <_reclaim_reent+0x36>
 80162a0:	4620      	mov	r0, r4
 80162a2:	f7ff fac3 	bl	801582c <_free_r>
 80162a6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80162a8:	b111      	cbz	r1, 80162b0 <_reclaim_reent+0x40>
 80162aa:	4620      	mov	r0, r4
 80162ac:	f7ff fabe 	bl	801582c <_free_r>
 80162b0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80162b2:	b111      	cbz	r1, 80162ba <_reclaim_reent+0x4a>
 80162b4:	4620      	mov	r0, r4
 80162b6:	f7ff fab9 	bl	801582c <_free_r>
 80162ba:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80162bc:	b111      	cbz	r1, 80162c4 <_reclaim_reent+0x54>
 80162be:	4620      	mov	r0, r4
 80162c0:	f7ff fab4 	bl	801582c <_free_r>
 80162c4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80162c6:	b111      	cbz	r1, 80162ce <_reclaim_reent+0x5e>
 80162c8:	4620      	mov	r0, r4
 80162ca:	f7ff faaf 	bl	801582c <_free_r>
 80162ce:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80162d0:	b111      	cbz	r1, 80162d8 <_reclaim_reent+0x68>
 80162d2:	4620      	mov	r0, r4
 80162d4:	f7ff faaa 	bl	801582c <_free_r>
 80162d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80162da:	b111      	cbz	r1, 80162e2 <_reclaim_reent+0x72>
 80162dc:	4620      	mov	r0, r4
 80162de:	f7ff faa5 	bl	801582c <_free_r>
 80162e2:	69a3      	ldr	r3, [r4, #24]
 80162e4:	b1e3      	cbz	r3, 8016320 <_reclaim_reent+0xb0>
 80162e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80162e8:	4620      	mov	r0, r4
 80162ea:	4798      	blx	r3
 80162ec:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80162ee:	b1b9      	cbz	r1, 8016320 <_reclaim_reent+0xb0>
 80162f0:	4620      	mov	r0, r4
 80162f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80162f6:	f7ff bfad 	b.w	8016254 <cleanup_glue>
 80162fa:	5949      	ldr	r1, [r1, r5]
 80162fc:	b941      	cbnz	r1, 8016310 <_reclaim_reent+0xa0>
 80162fe:	3504      	adds	r5, #4
 8016300:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016302:	2d80      	cmp	r5, #128	; 0x80
 8016304:	68d9      	ldr	r1, [r3, #12]
 8016306:	d1f8      	bne.n	80162fa <_reclaim_reent+0x8a>
 8016308:	4620      	mov	r0, r4
 801630a:	f7ff fa8f 	bl	801582c <_free_r>
 801630e:	e7ba      	b.n	8016286 <_reclaim_reent+0x16>
 8016310:	680e      	ldr	r6, [r1, #0]
 8016312:	4620      	mov	r0, r4
 8016314:	f7ff fa8a 	bl	801582c <_free_r>
 8016318:	4631      	mov	r1, r6
 801631a:	e7ef      	b.n	80162fc <_reclaim_reent+0x8c>
 801631c:	2500      	movs	r5, #0
 801631e:	e7ef      	b.n	8016300 <_reclaim_reent+0x90>
 8016320:	bd70      	pop	{r4, r5, r6, pc}
 8016322:	bf00      	nop
 8016324:	2000019c 	.word	0x2000019c

08016328 <_sbrk_r>:
 8016328:	b538      	push	{r3, r4, r5, lr}
 801632a:	4d06      	ldr	r5, [pc, #24]	; (8016344 <_sbrk_r+0x1c>)
 801632c:	2300      	movs	r3, #0
 801632e:	4604      	mov	r4, r0
 8016330:	4608      	mov	r0, r1
 8016332:	602b      	str	r3, [r5, #0]
 8016334:	f7ee fe2a 	bl	8004f8c <_sbrk>
 8016338:	1c43      	adds	r3, r0, #1
 801633a:	d102      	bne.n	8016342 <_sbrk_r+0x1a>
 801633c:	682b      	ldr	r3, [r5, #0]
 801633e:	b103      	cbz	r3, 8016342 <_sbrk_r+0x1a>
 8016340:	6023      	str	r3, [r4, #0]
 8016342:	bd38      	pop	{r3, r4, r5, pc}
 8016344:	20014bf8 	.word	0x20014bf8

08016348 <siprintf>:
 8016348:	b40e      	push	{r1, r2, r3}
 801634a:	b500      	push	{lr}
 801634c:	b09c      	sub	sp, #112	; 0x70
 801634e:	ab1d      	add	r3, sp, #116	; 0x74
 8016350:	9002      	str	r0, [sp, #8]
 8016352:	9006      	str	r0, [sp, #24]
 8016354:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016358:	4809      	ldr	r0, [pc, #36]	; (8016380 <siprintf+0x38>)
 801635a:	9107      	str	r1, [sp, #28]
 801635c:	9104      	str	r1, [sp, #16]
 801635e:	4909      	ldr	r1, [pc, #36]	; (8016384 <siprintf+0x3c>)
 8016360:	f853 2b04 	ldr.w	r2, [r3], #4
 8016364:	9105      	str	r1, [sp, #20]
 8016366:	6800      	ldr	r0, [r0, #0]
 8016368:	9301      	str	r3, [sp, #4]
 801636a:	a902      	add	r1, sp, #8
 801636c:	f001 fc10 	bl	8017b90 <_svfiprintf_r>
 8016370:	9b02      	ldr	r3, [sp, #8]
 8016372:	2200      	movs	r2, #0
 8016374:	701a      	strb	r2, [r3, #0]
 8016376:	b01c      	add	sp, #112	; 0x70
 8016378:	f85d eb04 	ldr.w	lr, [sp], #4
 801637c:	b003      	add	sp, #12
 801637e:	4770      	bx	lr
 8016380:	2000019c 	.word	0x2000019c
 8016384:	ffff0208 	.word	0xffff0208

08016388 <__sread>:
 8016388:	b510      	push	{r4, lr}
 801638a:	460c      	mov	r4, r1
 801638c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016390:	f001 fcfe 	bl	8017d90 <_read_r>
 8016394:	2800      	cmp	r0, #0
 8016396:	bfab      	itete	ge
 8016398:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801639a:	89a3      	ldrhlt	r3, [r4, #12]
 801639c:	181b      	addge	r3, r3, r0
 801639e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80163a2:	bfac      	ite	ge
 80163a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80163a6:	81a3      	strhlt	r3, [r4, #12]
 80163a8:	bd10      	pop	{r4, pc}

080163aa <__swrite>:
 80163aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163ae:	461f      	mov	r7, r3
 80163b0:	898b      	ldrh	r3, [r1, #12]
 80163b2:	05db      	lsls	r3, r3, #23
 80163b4:	4605      	mov	r5, r0
 80163b6:	460c      	mov	r4, r1
 80163b8:	4616      	mov	r6, r2
 80163ba:	d505      	bpl.n	80163c8 <__swrite+0x1e>
 80163bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163c0:	2302      	movs	r3, #2
 80163c2:	2200      	movs	r2, #0
 80163c4:	f000 ffde 	bl	8017384 <_lseek_r>
 80163c8:	89a3      	ldrh	r3, [r4, #12]
 80163ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80163ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80163d2:	81a3      	strh	r3, [r4, #12]
 80163d4:	4632      	mov	r2, r6
 80163d6:	463b      	mov	r3, r7
 80163d8:	4628      	mov	r0, r5
 80163da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80163de:	f000 b86f 	b.w	80164c0 <_write_r>

080163e2 <__sseek>:
 80163e2:	b510      	push	{r4, lr}
 80163e4:	460c      	mov	r4, r1
 80163e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80163ea:	f000 ffcb 	bl	8017384 <_lseek_r>
 80163ee:	1c43      	adds	r3, r0, #1
 80163f0:	89a3      	ldrh	r3, [r4, #12]
 80163f2:	bf15      	itete	ne
 80163f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80163f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80163fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80163fe:	81a3      	strheq	r3, [r4, #12]
 8016400:	bf18      	it	ne
 8016402:	81a3      	strhne	r3, [r4, #12]
 8016404:	bd10      	pop	{r4, pc}

08016406 <__sclose>:
 8016406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801640a:	f000 b86b 	b.w	80164e4 <_close_r>

0801640e <strcat>:
 801640e:	b510      	push	{r4, lr}
 8016410:	4602      	mov	r2, r0
 8016412:	7814      	ldrb	r4, [r2, #0]
 8016414:	4613      	mov	r3, r2
 8016416:	3201      	adds	r2, #1
 8016418:	2c00      	cmp	r4, #0
 801641a:	d1fa      	bne.n	8016412 <strcat+0x4>
 801641c:	3b01      	subs	r3, #1
 801641e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016422:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016426:	2a00      	cmp	r2, #0
 8016428:	d1f9      	bne.n	801641e <strcat+0x10>
 801642a:	bd10      	pop	{r4, pc}

0801642c <strcpy>:
 801642c:	4603      	mov	r3, r0
 801642e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016432:	f803 2b01 	strb.w	r2, [r3], #1
 8016436:	2a00      	cmp	r2, #0
 8016438:	d1f9      	bne.n	801642e <strcpy+0x2>
 801643a:	4770      	bx	lr

0801643c <__utoa>:
 801643c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801643e:	4c1f      	ldr	r4, [pc, #124]	; (80164bc <__utoa+0x80>)
 8016440:	b08b      	sub	sp, #44	; 0x2c
 8016442:	4605      	mov	r5, r0
 8016444:	460b      	mov	r3, r1
 8016446:	466e      	mov	r6, sp
 8016448:	f104 0c20 	add.w	ip, r4, #32
 801644c:	6820      	ldr	r0, [r4, #0]
 801644e:	6861      	ldr	r1, [r4, #4]
 8016450:	4637      	mov	r7, r6
 8016452:	c703      	stmia	r7!, {r0, r1}
 8016454:	3408      	adds	r4, #8
 8016456:	4564      	cmp	r4, ip
 8016458:	463e      	mov	r6, r7
 801645a:	d1f7      	bne.n	801644c <__utoa+0x10>
 801645c:	7921      	ldrb	r1, [r4, #4]
 801645e:	7139      	strb	r1, [r7, #4]
 8016460:	1e91      	subs	r1, r2, #2
 8016462:	6820      	ldr	r0, [r4, #0]
 8016464:	6038      	str	r0, [r7, #0]
 8016466:	2922      	cmp	r1, #34	; 0x22
 8016468:	f04f 0100 	mov.w	r1, #0
 801646c:	d904      	bls.n	8016478 <__utoa+0x3c>
 801646e:	7019      	strb	r1, [r3, #0]
 8016470:	460b      	mov	r3, r1
 8016472:	4618      	mov	r0, r3
 8016474:	b00b      	add	sp, #44	; 0x2c
 8016476:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016478:	1e58      	subs	r0, r3, #1
 801647a:	4684      	mov	ip, r0
 801647c:	fbb5 f7f2 	udiv	r7, r5, r2
 8016480:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 8016484:	fb02 5617 	mls	r6, r2, r7, r5
 8016488:	4476      	add	r6, lr
 801648a:	460c      	mov	r4, r1
 801648c:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8016490:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8016494:	462e      	mov	r6, r5
 8016496:	42b2      	cmp	r2, r6
 8016498:	f101 0101 	add.w	r1, r1, #1
 801649c:	463d      	mov	r5, r7
 801649e:	d9ed      	bls.n	801647c <__utoa+0x40>
 80164a0:	2200      	movs	r2, #0
 80164a2:	545a      	strb	r2, [r3, r1]
 80164a4:	1919      	adds	r1, r3, r4
 80164a6:	1aa5      	subs	r5, r4, r2
 80164a8:	42aa      	cmp	r2, r5
 80164aa:	dae2      	bge.n	8016472 <__utoa+0x36>
 80164ac:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80164b0:	780e      	ldrb	r6, [r1, #0]
 80164b2:	7006      	strb	r6, [r0, #0]
 80164b4:	3201      	adds	r2, #1
 80164b6:	f801 5901 	strb.w	r5, [r1], #-1
 80164ba:	e7f4      	b.n	80164a6 <__utoa+0x6a>
 80164bc:	080191f4 	.word	0x080191f4

080164c0 <_write_r>:
 80164c0:	b538      	push	{r3, r4, r5, lr}
 80164c2:	4d07      	ldr	r5, [pc, #28]	; (80164e0 <_write_r+0x20>)
 80164c4:	4604      	mov	r4, r0
 80164c6:	4608      	mov	r0, r1
 80164c8:	4611      	mov	r1, r2
 80164ca:	2200      	movs	r2, #0
 80164cc:	602a      	str	r2, [r5, #0]
 80164ce:	461a      	mov	r2, r3
 80164d0:	f7ee fd0b 	bl	8004eea <_write>
 80164d4:	1c43      	adds	r3, r0, #1
 80164d6:	d102      	bne.n	80164de <_write_r+0x1e>
 80164d8:	682b      	ldr	r3, [r5, #0]
 80164da:	b103      	cbz	r3, 80164de <_write_r+0x1e>
 80164dc:	6023      	str	r3, [r4, #0]
 80164de:	bd38      	pop	{r3, r4, r5, pc}
 80164e0:	20014bf8 	.word	0x20014bf8

080164e4 <_close_r>:
 80164e4:	b538      	push	{r3, r4, r5, lr}
 80164e6:	4d06      	ldr	r5, [pc, #24]	; (8016500 <_close_r+0x1c>)
 80164e8:	2300      	movs	r3, #0
 80164ea:	4604      	mov	r4, r0
 80164ec:	4608      	mov	r0, r1
 80164ee:	602b      	str	r3, [r5, #0]
 80164f0:	f7ee fd17 	bl	8004f22 <_close>
 80164f4:	1c43      	adds	r3, r0, #1
 80164f6:	d102      	bne.n	80164fe <_close_r+0x1a>
 80164f8:	682b      	ldr	r3, [r5, #0]
 80164fa:	b103      	cbz	r3, 80164fe <_close_r+0x1a>
 80164fc:	6023      	str	r3, [r4, #0]
 80164fe:	bd38      	pop	{r3, r4, r5, pc}
 8016500:	20014bf8 	.word	0x20014bf8

08016504 <quorem>:
 8016504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016508:	6903      	ldr	r3, [r0, #16]
 801650a:	690c      	ldr	r4, [r1, #16]
 801650c:	42a3      	cmp	r3, r4
 801650e:	4607      	mov	r7, r0
 8016510:	f2c0 8081 	blt.w	8016616 <quorem+0x112>
 8016514:	3c01      	subs	r4, #1
 8016516:	f101 0814 	add.w	r8, r1, #20
 801651a:	f100 0514 	add.w	r5, r0, #20
 801651e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016522:	9301      	str	r3, [sp, #4]
 8016524:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016528:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801652c:	3301      	adds	r3, #1
 801652e:	429a      	cmp	r2, r3
 8016530:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016534:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016538:	fbb2 f6f3 	udiv	r6, r2, r3
 801653c:	d331      	bcc.n	80165a2 <quorem+0x9e>
 801653e:	f04f 0e00 	mov.w	lr, #0
 8016542:	4640      	mov	r0, r8
 8016544:	46ac      	mov	ip, r5
 8016546:	46f2      	mov	sl, lr
 8016548:	f850 2b04 	ldr.w	r2, [r0], #4
 801654c:	b293      	uxth	r3, r2
 801654e:	fb06 e303 	mla	r3, r6, r3, lr
 8016552:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8016556:	b29b      	uxth	r3, r3
 8016558:	ebaa 0303 	sub.w	r3, sl, r3
 801655c:	0c12      	lsrs	r2, r2, #16
 801655e:	f8dc a000 	ldr.w	sl, [ip]
 8016562:	fb06 e202 	mla	r2, r6, r2, lr
 8016566:	fa13 f38a 	uxtah	r3, r3, sl
 801656a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801656e:	fa1f fa82 	uxth.w	sl, r2
 8016572:	f8dc 2000 	ldr.w	r2, [ip]
 8016576:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 801657a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801657e:	b29b      	uxth	r3, r3
 8016580:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016584:	4581      	cmp	r9, r0
 8016586:	f84c 3b04 	str.w	r3, [ip], #4
 801658a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801658e:	d2db      	bcs.n	8016548 <quorem+0x44>
 8016590:	f855 300b 	ldr.w	r3, [r5, fp]
 8016594:	b92b      	cbnz	r3, 80165a2 <quorem+0x9e>
 8016596:	9b01      	ldr	r3, [sp, #4]
 8016598:	3b04      	subs	r3, #4
 801659a:	429d      	cmp	r5, r3
 801659c:	461a      	mov	r2, r3
 801659e:	d32e      	bcc.n	80165fe <quorem+0xfa>
 80165a0:	613c      	str	r4, [r7, #16]
 80165a2:	4638      	mov	r0, r7
 80165a4:	f001 f98a 	bl	80178bc <__mcmp>
 80165a8:	2800      	cmp	r0, #0
 80165aa:	db24      	blt.n	80165f6 <quorem+0xf2>
 80165ac:	3601      	adds	r6, #1
 80165ae:	4628      	mov	r0, r5
 80165b0:	f04f 0c00 	mov.w	ip, #0
 80165b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80165b8:	f8d0 e000 	ldr.w	lr, [r0]
 80165bc:	b293      	uxth	r3, r2
 80165be:	ebac 0303 	sub.w	r3, ip, r3
 80165c2:	0c12      	lsrs	r2, r2, #16
 80165c4:	fa13 f38e 	uxtah	r3, r3, lr
 80165c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80165cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80165d0:	b29b      	uxth	r3, r3
 80165d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80165d6:	45c1      	cmp	r9, r8
 80165d8:	f840 3b04 	str.w	r3, [r0], #4
 80165dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80165e0:	d2e8      	bcs.n	80165b4 <quorem+0xb0>
 80165e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80165e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80165ea:	b922      	cbnz	r2, 80165f6 <quorem+0xf2>
 80165ec:	3b04      	subs	r3, #4
 80165ee:	429d      	cmp	r5, r3
 80165f0:	461a      	mov	r2, r3
 80165f2:	d30a      	bcc.n	801660a <quorem+0x106>
 80165f4:	613c      	str	r4, [r7, #16]
 80165f6:	4630      	mov	r0, r6
 80165f8:	b003      	add	sp, #12
 80165fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80165fe:	6812      	ldr	r2, [r2, #0]
 8016600:	3b04      	subs	r3, #4
 8016602:	2a00      	cmp	r2, #0
 8016604:	d1cc      	bne.n	80165a0 <quorem+0x9c>
 8016606:	3c01      	subs	r4, #1
 8016608:	e7c7      	b.n	801659a <quorem+0x96>
 801660a:	6812      	ldr	r2, [r2, #0]
 801660c:	3b04      	subs	r3, #4
 801660e:	2a00      	cmp	r2, #0
 8016610:	d1f0      	bne.n	80165f4 <quorem+0xf0>
 8016612:	3c01      	subs	r4, #1
 8016614:	e7eb      	b.n	80165ee <quorem+0xea>
 8016616:	2000      	movs	r0, #0
 8016618:	e7ee      	b.n	80165f8 <quorem+0xf4>
 801661a:	0000      	movs	r0, r0
 801661c:	0000      	movs	r0, r0
	...

08016620 <_dtoa_r>:
 8016620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016624:	ed2d 8b02 	vpush	{d8}
 8016628:	ec57 6b10 	vmov	r6, r7, d0
 801662c:	b095      	sub	sp, #84	; 0x54
 801662e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016630:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016634:	9105      	str	r1, [sp, #20]
 8016636:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801663a:	4604      	mov	r4, r0
 801663c:	9209      	str	r2, [sp, #36]	; 0x24
 801663e:	930f      	str	r3, [sp, #60]	; 0x3c
 8016640:	b975      	cbnz	r5, 8016660 <_dtoa_r+0x40>
 8016642:	2010      	movs	r0, #16
 8016644:	f7ff f8cc 	bl	80157e0 <malloc>
 8016648:	4602      	mov	r2, r0
 801664a:	6260      	str	r0, [r4, #36]	; 0x24
 801664c:	b920      	cbnz	r0, 8016658 <_dtoa_r+0x38>
 801664e:	4bb2      	ldr	r3, [pc, #712]	; (8016918 <_dtoa_r+0x2f8>)
 8016650:	21ea      	movs	r1, #234	; 0xea
 8016652:	48b2      	ldr	r0, [pc, #712]	; (801691c <_dtoa_r+0x2fc>)
 8016654:	f001 fbae 	bl	8017db4 <__assert_func>
 8016658:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801665c:	6005      	str	r5, [r0, #0]
 801665e:	60c5      	str	r5, [r0, #12]
 8016660:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016662:	6819      	ldr	r1, [r3, #0]
 8016664:	b151      	cbz	r1, 801667c <_dtoa_r+0x5c>
 8016666:	685a      	ldr	r2, [r3, #4]
 8016668:	604a      	str	r2, [r1, #4]
 801666a:	2301      	movs	r3, #1
 801666c:	4093      	lsls	r3, r2
 801666e:	608b      	str	r3, [r1, #8]
 8016670:	4620      	mov	r0, r4
 8016672:	f000 fee5 	bl	8017440 <_Bfree>
 8016676:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016678:	2200      	movs	r2, #0
 801667a:	601a      	str	r2, [r3, #0]
 801667c:	1e3b      	subs	r3, r7, #0
 801667e:	bfb9      	ittee	lt
 8016680:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8016684:	9303      	strlt	r3, [sp, #12]
 8016686:	2300      	movge	r3, #0
 8016688:	f8c8 3000 	strge.w	r3, [r8]
 801668c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8016690:	4ba3      	ldr	r3, [pc, #652]	; (8016920 <_dtoa_r+0x300>)
 8016692:	bfbc      	itt	lt
 8016694:	2201      	movlt	r2, #1
 8016696:	f8c8 2000 	strlt.w	r2, [r8]
 801669a:	ea33 0309 	bics.w	r3, r3, r9
 801669e:	d11b      	bne.n	80166d8 <_dtoa_r+0xb8>
 80166a0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80166a2:	f242 730f 	movw	r3, #9999	; 0x270f
 80166a6:	6013      	str	r3, [r2, #0]
 80166a8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80166ac:	4333      	orrs	r3, r6
 80166ae:	f000 857a 	beq.w	80171a6 <_dtoa_r+0xb86>
 80166b2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80166b4:	b963      	cbnz	r3, 80166d0 <_dtoa_r+0xb0>
 80166b6:	4b9b      	ldr	r3, [pc, #620]	; (8016924 <_dtoa_r+0x304>)
 80166b8:	e024      	b.n	8016704 <_dtoa_r+0xe4>
 80166ba:	4b9b      	ldr	r3, [pc, #620]	; (8016928 <_dtoa_r+0x308>)
 80166bc:	9300      	str	r3, [sp, #0]
 80166be:	3308      	adds	r3, #8
 80166c0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80166c2:	6013      	str	r3, [r2, #0]
 80166c4:	9800      	ldr	r0, [sp, #0]
 80166c6:	b015      	add	sp, #84	; 0x54
 80166c8:	ecbd 8b02 	vpop	{d8}
 80166cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166d0:	4b94      	ldr	r3, [pc, #592]	; (8016924 <_dtoa_r+0x304>)
 80166d2:	9300      	str	r3, [sp, #0]
 80166d4:	3303      	adds	r3, #3
 80166d6:	e7f3      	b.n	80166c0 <_dtoa_r+0xa0>
 80166d8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80166dc:	2200      	movs	r2, #0
 80166de:	ec51 0b17 	vmov	r0, r1, d7
 80166e2:	2300      	movs	r3, #0
 80166e4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80166e8:	f7ea f9ee 	bl	8000ac8 <__aeabi_dcmpeq>
 80166ec:	4680      	mov	r8, r0
 80166ee:	b158      	cbz	r0, 8016708 <_dtoa_r+0xe8>
 80166f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80166f2:	2301      	movs	r3, #1
 80166f4:	6013      	str	r3, [r2, #0]
 80166f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	f000 8551 	beq.w	80171a0 <_dtoa_r+0xb80>
 80166fe:	488b      	ldr	r0, [pc, #556]	; (801692c <_dtoa_r+0x30c>)
 8016700:	6018      	str	r0, [r3, #0]
 8016702:	1e43      	subs	r3, r0, #1
 8016704:	9300      	str	r3, [sp, #0]
 8016706:	e7dd      	b.n	80166c4 <_dtoa_r+0xa4>
 8016708:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801670c:	aa12      	add	r2, sp, #72	; 0x48
 801670e:	a913      	add	r1, sp, #76	; 0x4c
 8016710:	4620      	mov	r0, r4
 8016712:	f001 f977 	bl	8017a04 <__d2b>
 8016716:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801671a:	4683      	mov	fp, r0
 801671c:	2d00      	cmp	r5, #0
 801671e:	d07c      	beq.n	801681a <_dtoa_r+0x1fa>
 8016720:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016722:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8016726:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801672a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801672e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8016732:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8016736:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801673a:	4b7d      	ldr	r3, [pc, #500]	; (8016930 <_dtoa_r+0x310>)
 801673c:	2200      	movs	r2, #0
 801673e:	4630      	mov	r0, r6
 8016740:	4639      	mov	r1, r7
 8016742:	f7e9 fda1 	bl	8000288 <__aeabi_dsub>
 8016746:	a36e      	add	r3, pc, #440	; (adr r3, 8016900 <_dtoa_r+0x2e0>)
 8016748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801674c:	f7e9 ff54 	bl	80005f8 <__aeabi_dmul>
 8016750:	a36d      	add	r3, pc, #436	; (adr r3, 8016908 <_dtoa_r+0x2e8>)
 8016752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016756:	f7e9 fd99 	bl	800028c <__adddf3>
 801675a:	4606      	mov	r6, r0
 801675c:	4628      	mov	r0, r5
 801675e:	460f      	mov	r7, r1
 8016760:	f7e9 fee0 	bl	8000524 <__aeabi_i2d>
 8016764:	a36a      	add	r3, pc, #424	; (adr r3, 8016910 <_dtoa_r+0x2f0>)
 8016766:	e9d3 2300 	ldrd	r2, r3, [r3]
 801676a:	f7e9 ff45 	bl	80005f8 <__aeabi_dmul>
 801676e:	4602      	mov	r2, r0
 8016770:	460b      	mov	r3, r1
 8016772:	4630      	mov	r0, r6
 8016774:	4639      	mov	r1, r7
 8016776:	f7e9 fd89 	bl	800028c <__adddf3>
 801677a:	4606      	mov	r6, r0
 801677c:	460f      	mov	r7, r1
 801677e:	f7ea f9eb 	bl	8000b58 <__aeabi_d2iz>
 8016782:	2200      	movs	r2, #0
 8016784:	4682      	mov	sl, r0
 8016786:	2300      	movs	r3, #0
 8016788:	4630      	mov	r0, r6
 801678a:	4639      	mov	r1, r7
 801678c:	f7ea f9a6 	bl	8000adc <__aeabi_dcmplt>
 8016790:	b148      	cbz	r0, 80167a6 <_dtoa_r+0x186>
 8016792:	4650      	mov	r0, sl
 8016794:	f7e9 fec6 	bl	8000524 <__aeabi_i2d>
 8016798:	4632      	mov	r2, r6
 801679a:	463b      	mov	r3, r7
 801679c:	f7ea f994 	bl	8000ac8 <__aeabi_dcmpeq>
 80167a0:	b908      	cbnz	r0, 80167a6 <_dtoa_r+0x186>
 80167a2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80167a6:	f1ba 0f16 	cmp.w	sl, #22
 80167aa:	d854      	bhi.n	8016856 <_dtoa_r+0x236>
 80167ac:	4b61      	ldr	r3, [pc, #388]	; (8016934 <_dtoa_r+0x314>)
 80167ae:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80167b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80167b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80167ba:	f7ea f98f 	bl	8000adc <__aeabi_dcmplt>
 80167be:	2800      	cmp	r0, #0
 80167c0:	d04b      	beq.n	801685a <_dtoa_r+0x23a>
 80167c2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80167c6:	2300      	movs	r3, #0
 80167c8:	930e      	str	r3, [sp, #56]	; 0x38
 80167ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80167cc:	1b5d      	subs	r5, r3, r5
 80167ce:	1e6b      	subs	r3, r5, #1
 80167d0:	9304      	str	r3, [sp, #16]
 80167d2:	bf43      	ittte	mi
 80167d4:	2300      	movmi	r3, #0
 80167d6:	f1c5 0801 	rsbmi	r8, r5, #1
 80167da:	9304      	strmi	r3, [sp, #16]
 80167dc:	f04f 0800 	movpl.w	r8, #0
 80167e0:	f1ba 0f00 	cmp.w	sl, #0
 80167e4:	db3b      	blt.n	801685e <_dtoa_r+0x23e>
 80167e6:	9b04      	ldr	r3, [sp, #16]
 80167e8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80167ec:	4453      	add	r3, sl
 80167ee:	9304      	str	r3, [sp, #16]
 80167f0:	2300      	movs	r3, #0
 80167f2:	9306      	str	r3, [sp, #24]
 80167f4:	9b05      	ldr	r3, [sp, #20]
 80167f6:	2b09      	cmp	r3, #9
 80167f8:	d869      	bhi.n	80168ce <_dtoa_r+0x2ae>
 80167fa:	2b05      	cmp	r3, #5
 80167fc:	bfc4      	itt	gt
 80167fe:	3b04      	subgt	r3, #4
 8016800:	9305      	strgt	r3, [sp, #20]
 8016802:	9b05      	ldr	r3, [sp, #20]
 8016804:	f1a3 0302 	sub.w	r3, r3, #2
 8016808:	bfcc      	ite	gt
 801680a:	2500      	movgt	r5, #0
 801680c:	2501      	movle	r5, #1
 801680e:	2b03      	cmp	r3, #3
 8016810:	d869      	bhi.n	80168e6 <_dtoa_r+0x2c6>
 8016812:	e8df f003 	tbb	[pc, r3]
 8016816:	4e2c      	.short	0x4e2c
 8016818:	5a4c      	.short	0x5a4c
 801681a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801681e:	441d      	add	r5, r3
 8016820:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8016824:	2b20      	cmp	r3, #32
 8016826:	bfc1      	itttt	gt
 8016828:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801682c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8016830:	fa09 f303 	lslgt.w	r3, r9, r3
 8016834:	fa26 f000 	lsrgt.w	r0, r6, r0
 8016838:	bfda      	itte	le
 801683a:	f1c3 0320 	rsble	r3, r3, #32
 801683e:	fa06 f003 	lslle.w	r0, r6, r3
 8016842:	4318      	orrgt	r0, r3
 8016844:	f7e9 fe5e 	bl	8000504 <__aeabi_ui2d>
 8016848:	2301      	movs	r3, #1
 801684a:	4606      	mov	r6, r0
 801684c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8016850:	3d01      	subs	r5, #1
 8016852:	9310      	str	r3, [sp, #64]	; 0x40
 8016854:	e771      	b.n	801673a <_dtoa_r+0x11a>
 8016856:	2301      	movs	r3, #1
 8016858:	e7b6      	b.n	80167c8 <_dtoa_r+0x1a8>
 801685a:	900e      	str	r0, [sp, #56]	; 0x38
 801685c:	e7b5      	b.n	80167ca <_dtoa_r+0x1aa>
 801685e:	f1ca 0300 	rsb	r3, sl, #0
 8016862:	9306      	str	r3, [sp, #24]
 8016864:	2300      	movs	r3, #0
 8016866:	eba8 080a 	sub.w	r8, r8, sl
 801686a:	930d      	str	r3, [sp, #52]	; 0x34
 801686c:	e7c2      	b.n	80167f4 <_dtoa_r+0x1d4>
 801686e:	2300      	movs	r3, #0
 8016870:	9308      	str	r3, [sp, #32]
 8016872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016874:	2b00      	cmp	r3, #0
 8016876:	dc39      	bgt.n	80168ec <_dtoa_r+0x2cc>
 8016878:	f04f 0901 	mov.w	r9, #1
 801687c:	f8cd 9004 	str.w	r9, [sp, #4]
 8016880:	464b      	mov	r3, r9
 8016882:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8016886:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8016888:	2200      	movs	r2, #0
 801688a:	6042      	str	r2, [r0, #4]
 801688c:	2204      	movs	r2, #4
 801688e:	f102 0614 	add.w	r6, r2, #20
 8016892:	429e      	cmp	r6, r3
 8016894:	6841      	ldr	r1, [r0, #4]
 8016896:	d92f      	bls.n	80168f8 <_dtoa_r+0x2d8>
 8016898:	4620      	mov	r0, r4
 801689a:	f000 fd91 	bl	80173c0 <_Balloc>
 801689e:	9000      	str	r0, [sp, #0]
 80168a0:	2800      	cmp	r0, #0
 80168a2:	d14b      	bne.n	801693c <_dtoa_r+0x31c>
 80168a4:	4b24      	ldr	r3, [pc, #144]	; (8016938 <_dtoa_r+0x318>)
 80168a6:	4602      	mov	r2, r0
 80168a8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80168ac:	e6d1      	b.n	8016652 <_dtoa_r+0x32>
 80168ae:	2301      	movs	r3, #1
 80168b0:	e7de      	b.n	8016870 <_dtoa_r+0x250>
 80168b2:	2300      	movs	r3, #0
 80168b4:	9308      	str	r3, [sp, #32]
 80168b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80168b8:	eb0a 0903 	add.w	r9, sl, r3
 80168bc:	f109 0301 	add.w	r3, r9, #1
 80168c0:	2b01      	cmp	r3, #1
 80168c2:	9301      	str	r3, [sp, #4]
 80168c4:	bfb8      	it	lt
 80168c6:	2301      	movlt	r3, #1
 80168c8:	e7dd      	b.n	8016886 <_dtoa_r+0x266>
 80168ca:	2301      	movs	r3, #1
 80168cc:	e7f2      	b.n	80168b4 <_dtoa_r+0x294>
 80168ce:	2501      	movs	r5, #1
 80168d0:	2300      	movs	r3, #0
 80168d2:	9305      	str	r3, [sp, #20]
 80168d4:	9508      	str	r5, [sp, #32]
 80168d6:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 80168da:	2200      	movs	r2, #0
 80168dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80168e0:	2312      	movs	r3, #18
 80168e2:	9209      	str	r2, [sp, #36]	; 0x24
 80168e4:	e7cf      	b.n	8016886 <_dtoa_r+0x266>
 80168e6:	2301      	movs	r3, #1
 80168e8:	9308      	str	r3, [sp, #32]
 80168ea:	e7f4      	b.n	80168d6 <_dtoa_r+0x2b6>
 80168ec:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80168f0:	f8cd 9004 	str.w	r9, [sp, #4]
 80168f4:	464b      	mov	r3, r9
 80168f6:	e7c6      	b.n	8016886 <_dtoa_r+0x266>
 80168f8:	3101      	adds	r1, #1
 80168fa:	6041      	str	r1, [r0, #4]
 80168fc:	0052      	lsls	r2, r2, #1
 80168fe:	e7c6      	b.n	801688e <_dtoa_r+0x26e>
 8016900:	636f4361 	.word	0x636f4361
 8016904:	3fd287a7 	.word	0x3fd287a7
 8016908:	8b60c8b3 	.word	0x8b60c8b3
 801690c:	3fc68a28 	.word	0x3fc68a28
 8016910:	509f79fb 	.word	0x509f79fb
 8016914:	3fd34413 	.word	0x3fd34413
 8016918:	08019226 	.word	0x08019226
 801691c:	0801923d 	.word	0x0801923d
 8016920:	7ff00000 	.word	0x7ff00000
 8016924:	08019222 	.word	0x08019222
 8016928:	08019219 	.word	0x08019219
 801692c:	080191d1 	.word	0x080191d1
 8016930:	3ff80000 	.word	0x3ff80000
 8016934:	08019338 	.word	0x08019338
 8016938:	0801929c 	.word	0x0801929c
 801693c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801693e:	9a00      	ldr	r2, [sp, #0]
 8016940:	601a      	str	r2, [r3, #0]
 8016942:	9b01      	ldr	r3, [sp, #4]
 8016944:	2b0e      	cmp	r3, #14
 8016946:	f200 80ad 	bhi.w	8016aa4 <_dtoa_r+0x484>
 801694a:	2d00      	cmp	r5, #0
 801694c:	f000 80aa 	beq.w	8016aa4 <_dtoa_r+0x484>
 8016950:	f1ba 0f00 	cmp.w	sl, #0
 8016954:	dd36      	ble.n	80169c4 <_dtoa_r+0x3a4>
 8016956:	4ac3      	ldr	r2, [pc, #780]	; (8016c64 <_dtoa_r+0x644>)
 8016958:	f00a 030f 	and.w	r3, sl, #15
 801695c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8016960:	ed93 7b00 	vldr	d7, [r3]
 8016964:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8016968:	ea4f 172a 	mov.w	r7, sl, asr #4
 801696c:	eeb0 8a47 	vmov.f32	s16, s14
 8016970:	eef0 8a67 	vmov.f32	s17, s15
 8016974:	d016      	beq.n	80169a4 <_dtoa_r+0x384>
 8016976:	4bbc      	ldr	r3, [pc, #752]	; (8016c68 <_dtoa_r+0x648>)
 8016978:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801697c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8016980:	f7e9 ff64 	bl	800084c <__aeabi_ddiv>
 8016984:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016988:	f007 070f 	and.w	r7, r7, #15
 801698c:	2503      	movs	r5, #3
 801698e:	4eb6      	ldr	r6, [pc, #728]	; (8016c68 <_dtoa_r+0x648>)
 8016990:	b957      	cbnz	r7, 80169a8 <_dtoa_r+0x388>
 8016992:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8016996:	ec53 2b18 	vmov	r2, r3, d8
 801699a:	f7e9 ff57 	bl	800084c <__aeabi_ddiv>
 801699e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80169a2:	e029      	b.n	80169f8 <_dtoa_r+0x3d8>
 80169a4:	2502      	movs	r5, #2
 80169a6:	e7f2      	b.n	801698e <_dtoa_r+0x36e>
 80169a8:	07f9      	lsls	r1, r7, #31
 80169aa:	d508      	bpl.n	80169be <_dtoa_r+0x39e>
 80169ac:	ec51 0b18 	vmov	r0, r1, d8
 80169b0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80169b4:	f7e9 fe20 	bl	80005f8 <__aeabi_dmul>
 80169b8:	ec41 0b18 	vmov	d8, r0, r1
 80169bc:	3501      	adds	r5, #1
 80169be:	107f      	asrs	r7, r7, #1
 80169c0:	3608      	adds	r6, #8
 80169c2:	e7e5      	b.n	8016990 <_dtoa_r+0x370>
 80169c4:	f000 80a6 	beq.w	8016b14 <_dtoa_r+0x4f4>
 80169c8:	f1ca 0600 	rsb	r6, sl, #0
 80169cc:	4ba5      	ldr	r3, [pc, #660]	; (8016c64 <_dtoa_r+0x644>)
 80169ce:	4fa6      	ldr	r7, [pc, #664]	; (8016c68 <_dtoa_r+0x648>)
 80169d0:	f006 020f 	and.w	r2, r6, #15
 80169d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80169d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80169dc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80169e0:	f7e9 fe0a 	bl	80005f8 <__aeabi_dmul>
 80169e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80169e8:	1136      	asrs	r6, r6, #4
 80169ea:	2300      	movs	r3, #0
 80169ec:	2502      	movs	r5, #2
 80169ee:	2e00      	cmp	r6, #0
 80169f0:	f040 8085 	bne.w	8016afe <_dtoa_r+0x4de>
 80169f4:	2b00      	cmp	r3, #0
 80169f6:	d1d2      	bne.n	801699e <_dtoa_r+0x37e>
 80169f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80169fa:	2b00      	cmp	r3, #0
 80169fc:	f000 808c 	beq.w	8016b18 <_dtoa_r+0x4f8>
 8016a00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8016a04:	4b99      	ldr	r3, [pc, #612]	; (8016c6c <_dtoa_r+0x64c>)
 8016a06:	2200      	movs	r2, #0
 8016a08:	4630      	mov	r0, r6
 8016a0a:	4639      	mov	r1, r7
 8016a0c:	f7ea f866 	bl	8000adc <__aeabi_dcmplt>
 8016a10:	2800      	cmp	r0, #0
 8016a12:	f000 8081 	beq.w	8016b18 <_dtoa_r+0x4f8>
 8016a16:	9b01      	ldr	r3, [sp, #4]
 8016a18:	2b00      	cmp	r3, #0
 8016a1a:	d07d      	beq.n	8016b18 <_dtoa_r+0x4f8>
 8016a1c:	f1b9 0f00 	cmp.w	r9, #0
 8016a20:	dd3c      	ble.n	8016a9c <_dtoa_r+0x47c>
 8016a22:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8016a26:	9307      	str	r3, [sp, #28]
 8016a28:	2200      	movs	r2, #0
 8016a2a:	4b91      	ldr	r3, [pc, #580]	; (8016c70 <_dtoa_r+0x650>)
 8016a2c:	4630      	mov	r0, r6
 8016a2e:	4639      	mov	r1, r7
 8016a30:	f7e9 fde2 	bl	80005f8 <__aeabi_dmul>
 8016a34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016a38:	3501      	adds	r5, #1
 8016a3a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8016a3e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8016a42:	4628      	mov	r0, r5
 8016a44:	f7e9 fd6e 	bl	8000524 <__aeabi_i2d>
 8016a48:	4632      	mov	r2, r6
 8016a4a:	463b      	mov	r3, r7
 8016a4c:	f7e9 fdd4 	bl	80005f8 <__aeabi_dmul>
 8016a50:	4b88      	ldr	r3, [pc, #544]	; (8016c74 <_dtoa_r+0x654>)
 8016a52:	2200      	movs	r2, #0
 8016a54:	f7e9 fc1a 	bl	800028c <__adddf3>
 8016a58:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8016a5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8016a60:	9303      	str	r3, [sp, #12]
 8016a62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016a64:	2b00      	cmp	r3, #0
 8016a66:	d15c      	bne.n	8016b22 <_dtoa_r+0x502>
 8016a68:	4b83      	ldr	r3, [pc, #524]	; (8016c78 <_dtoa_r+0x658>)
 8016a6a:	2200      	movs	r2, #0
 8016a6c:	4630      	mov	r0, r6
 8016a6e:	4639      	mov	r1, r7
 8016a70:	f7e9 fc0a 	bl	8000288 <__aeabi_dsub>
 8016a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016a78:	4606      	mov	r6, r0
 8016a7a:	460f      	mov	r7, r1
 8016a7c:	f7ea f84c 	bl	8000b18 <__aeabi_dcmpgt>
 8016a80:	2800      	cmp	r0, #0
 8016a82:	f040 8296 	bne.w	8016fb2 <_dtoa_r+0x992>
 8016a86:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8016a8a:	4630      	mov	r0, r6
 8016a8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8016a90:	4639      	mov	r1, r7
 8016a92:	f7ea f823 	bl	8000adc <__aeabi_dcmplt>
 8016a96:	2800      	cmp	r0, #0
 8016a98:	f040 8288 	bne.w	8016fac <_dtoa_r+0x98c>
 8016a9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8016aa0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8016aa4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	f2c0 8158 	blt.w	8016d5c <_dtoa_r+0x73c>
 8016aac:	f1ba 0f0e 	cmp.w	sl, #14
 8016ab0:	f300 8154 	bgt.w	8016d5c <_dtoa_r+0x73c>
 8016ab4:	4b6b      	ldr	r3, [pc, #428]	; (8016c64 <_dtoa_r+0x644>)
 8016ab6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8016aba:	e9d3 8900 	ldrd	r8, r9, [r3]
 8016abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	f280 80e3 	bge.w	8016c8c <_dtoa_r+0x66c>
 8016ac6:	9b01      	ldr	r3, [sp, #4]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	f300 80df 	bgt.w	8016c8c <_dtoa_r+0x66c>
 8016ace:	f040 826d 	bne.w	8016fac <_dtoa_r+0x98c>
 8016ad2:	4b69      	ldr	r3, [pc, #420]	; (8016c78 <_dtoa_r+0x658>)
 8016ad4:	2200      	movs	r2, #0
 8016ad6:	4640      	mov	r0, r8
 8016ad8:	4649      	mov	r1, r9
 8016ada:	f7e9 fd8d 	bl	80005f8 <__aeabi_dmul>
 8016ade:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8016ae2:	f7ea f80f 	bl	8000b04 <__aeabi_dcmpge>
 8016ae6:	9e01      	ldr	r6, [sp, #4]
 8016ae8:	4637      	mov	r7, r6
 8016aea:	2800      	cmp	r0, #0
 8016aec:	f040 8243 	bne.w	8016f76 <_dtoa_r+0x956>
 8016af0:	9d00      	ldr	r5, [sp, #0]
 8016af2:	2331      	movs	r3, #49	; 0x31
 8016af4:	f805 3b01 	strb.w	r3, [r5], #1
 8016af8:	f10a 0a01 	add.w	sl, sl, #1
 8016afc:	e23f      	b.n	8016f7e <_dtoa_r+0x95e>
 8016afe:	07f2      	lsls	r2, r6, #31
 8016b00:	d505      	bpl.n	8016b0e <_dtoa_r+0x4ee>
 8016b02:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016b06:	f7e9 fd77 	bl	80005f8 <__aeabi_dmul>
 8016b0a:	3501      	adds	r5, #1
 8016b0c:	2301      	movs	r3, #1
 8016b0e:	1076      	asrs	r6, r6, #1
 8016b10:	3708      	adds	r7, #8
 8016b12:	e76c      	b.n	80169ee <_dtoa_r+0x3ce>
 8016b14:	2502      	movs	r5, #2
 8016b16:	e76f      	b.n	80169f8 <_dtoa_r+0x3d8>
 8016b18:	9b01      	ldr	r3, [sp, #4]
 8016b1a:	f8cd a01c 	str.w	sl, [sp, #28]
 8016b1e:	930c      	str	r3, [sp, #48]	; 0x30
 8016b20:	e78d      	b.n	8016a3e <_dtoa_r+0x41e>
 8016b22:	9900      	ldr	r1, [sp, #0]
 8016b24:	980c      	ldr	r0, [sp, #48]	; 0x30
 8016b26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016b28:	4b4e      	ldr	r3, [pc, #312]	; (8016c64 <_dtoa_r+0x644>)
 8016b2a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8016b2e:	4401      	add	r1, r0
 8016b30:	9102      	str	r1, [sp, #8]
 8016b32:	9908      	ldr	r1, [sp, #32]
 8016b34:	eeb0 8a47 	vmov.f32	s16, s14
 8016b38:	eef0 8a67 	vmov.f32	s17, s15
 8016b3c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016b40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8016b44:	2900      	cmp	r1, #0
 8016b46:	d045      	beq.n	8016bd4 <_dtoa_r+0x5b4>
 8016b48:	494c      	ldr	r1, [pc, #304]	; (8016c7c <_dtoa_r+0x65c>)
 8016b4a:	2000      	movs	r0, #0
 8016b4c:	f7e9 fe7e 	bl	800084c <__aeabi_ddiv>
 8016b50:	ec53 2b18 	vmov	r2, r3, d8
 8016b54:	f7e9 fb98 	bl	8000288 <__aeabi_dsub>
 8016b58:	9d00      	ldr	r5, [sp, #0]
 8016b5a:	ec41 0b18 	vmov	d8, r0, r1
 8016b5e:	4639      	mov	r1, r7
 8016b60:	4630      	mov	r0, r6
 8016b62:	f7e9 fff9 	bl	8000b58 <__aeabi_d2iz>
 8016b66:	900c      	str	r0, [sp, #48]	; 0x30
 8016b68:	f7e9 fcdc 	bl	8000524 <__aeabi_i2d>
 8016b6c:	4602      	mov	r2, r0
 8016b6e:	460b      	mov	r3, r1
 8016b70:	4630      	mov	r0, r6
 8016b72:	4639      	mov	r1, r7
 8016b74:	f7e9 fb88 	bl	8000288 <__aeabi_dsub>
 8016b78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8016b7a:	3330      	adds	r3, #48	; 0x30
 8016b7c:	f805 3b01 	strb.w	r3, [r5], #1
 8016b80:	ec53 2b18 	vmov	r2, r3, d8
 8016b84:	4606      	mov	r6, r0
 8016b86:	460f      	mov	r7, r1
 8016b88:	f7e9 ffa8 	bl	8000adc <__aeabi_dcmplt>
 8016b8c:	2800      	cmp	r0, #0
 8016b8e:	d165      	bne.n	8016c5c <_dtoa_r+0x63c>
 8016b90:	4632      	mov	r2, r6
 8016b92:	463b      	mov	r3, r7
 8016b94:	4935      	ldr	r1, [pc, #212]	; (8016c6c <_dtoa_r+0x64c>)
 8016b96:	2000      	movs	r0, #0
 8016b98:	f7e9 fb76 	bl	8000288 <__aeabi_dsub>
 8016b9c:	ec53 2b18 	vmov	r2, r3, d8
 8016ba0:	f7e9 ff9c 	bl	8000adc <__aeabi_dcmplt>
 8016ba4:	2800      	cmp	r0, #0
 8016ba6:	f040 80b9 	bne.w	8016d1c <_dtoa_r+0x6fc>
 8016baa:	9b02      	ldr	r3, [sp, #8]
 8016bac:	429d      	cmp	r5, r3
 8016bae:	f43f af75 	beq.w	8016a9c <_dtoa_r+0x47c>
 8016bb2:	4b2f      	ldr	r3, [pc, #188]	; (8016c70 <_dtoa_r+0x650>)
 8016bb4:	ec51 0b18 	vmov	r0, r1, d8
 8016bb8:	2200      	movs	r2, #0
 8016bba:	f7e9 fd1d 	bl	80005f8 <__aeabi_dmul>
 8016bbe:	4b2c      	ldr	r3, [pc, #176]	; (8016c70 <_dtoa_r+0x650>)
 8016bc0:	ec41 0b18 	vmov	d8, r0, r1
 8016bc4:	2200      	movs	r2, #0
 8016bc6:	4630      	mov	r0, r6
 8016bc8:	4639      	mov	r1, r7
 8016bca:	f7e9 fd15 	bl	80005f8 <__aeabi_dmul>
 8016bce:	4606      	mov	r6, r0
 8016bd0:	460f      	mov	r7, r1
 8016bd2:	e7c4      	b.n	8016b5e <_dtoa_r+0x53e>
 8016bd4:	ec51 0b17 	vmov	r0, r1, d7
 8016bd8:	f7e9 fd0e 	bl	80005f8 <__aeabi_dmul>
 8016bdc:	9b02      	ldr	r3, [sp, #8]
 8016bde:	9d00      	ldr	r5, [sp, #0]
 8016be0:	930c      	str	r3, [sp, #48]	; 0x30
 8016be2:	ec41 0b18 	vmov	d8, r0, r1
 8016be6:	4639      	mov	r1, r7
 8016be8:	4630      	mov	r0, r6
 8016bea:	f7e9 ffb5 	bl	8000b58 <__aeabi_d2iz>
 8016bee:	9011      	str	r0, [sp, #68]	; 0x44
 8016bf0:	f7e9 fc98 	bl	8000524 <__aeabi_i2d>
 8016bf4:	4602      	mov	r2, r0
 8016bf6:	460b      	mov	r3, r1
 8016bf8:	4630      	mov	r0, r6
 8016bfa:	4639      	mov	r1, r7
 8016bfc:	f7e9 fb44 	bl	8000288 <__aeabi_dsub>
 8016c00:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8016c02:	3330      	adds	r3, #48	; 0x30
 8016c04:	f805 3b01 	strb.w	r3, [r5], #1
 8016c08:	9b02      	ldr	r3, [sp, #8]
 8016c0a:	429d      	cmp	r5, r3
 8016c0c:	4606      	mov	r6, r0
 8016c0e:	460f      	mov	r7, r1
 8016c10:	f04f 0200 	mov.w	r2, #0
 8016c14:	d134      	bne.n	8016c80 <_dtoa_r+0x660>
 8016c16:	4b19      	ldr	r3, [pc, #100]	; (8016c7c <_dtoa_r+0x65c>)
 8016c18:	ec51 0b18 	vmov	r0, r1, d8
 8016c1c:	f7e9 fb36 	bl	800028c <__adddf3>
 8016c20:	4602      	mov	r2, r0
 8016c22:	460b      	mov	r3, r1
 8016c24:	4630      	mov	r0, r6
 8016c26:	4639      	mov	r1, r7
 8016c28:	f7e9 ff76 	bl	8000b18 <__aeabi_dcmpgt>
 8016c2c:	2800      	cmp	r0, #0
 8016c2e:	d175      	bne.n	8016d1c <_dtoa_r+0x6fc>
 8016c30:	ec53 2b18 	vmov	r2, r3, d8
 8016c34:	4911      	ldr	r1, [pc, #68]	; (8016c7c <_dtoa_r+0x65c>)
 8016c36:	2000      	movs	r0, #0
 8016c38:	f7e9 fb26 	bl	8000288 <__aeabi_dsub>
 8016c3c:	4602      	mov	r2, r0
 8016c3e:	460b      	mov	r3, r1
 8016c40:	4630      	mov	r0, r6
 8016c42:	4639      	mov	r1, r7
 8016c44:	f7e9 ff4a 	bl	8000adc <__aeabi_dcmplt>
 8016c48:	2800      	cmp	r0, #0
 8016c4a:	f43f af27 	beq.w	8016a9c <_dtoa_r+0x47c>
 8016c4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8016c50:	1e6b      	subs	r3, r5, #1
 8016c52:	930c      	str	r3, [sp, #48]	; 0x30
 8016c54:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8016c58:	2b30      	cmp	r3, #48	; 0x30
 8016c5a:	d0f8      	beq.n	8016c4e <_dtoa_r+0x62e>
 8016c5c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8016c60:	e04a      	b.n	8016cf8 <_dtoa_r+0x6d8>
 8016c62:	bf00      	nop
 8016c64:	08019338 	.word	0x08019338
 8016c68:	08019310 	.word	0x08019310
 8016c6c:	3ff00000 	.word	0x3ff00000
 8016c70:	40240000 	.word	0x40240000
 8016c74:	401c0000 	.word	0x401c0000
 8016c78:	40140000 	.word	0x40140000
 8016c7c:	3fe00000 	.word	0x3fe00000
 8016c80:	4baf      	ldr	r3, [pc, #700]	; (8016f40 <_dtoa_r+0x920>)
 8016c82:	f7e9 fcb9 	bl	80005f8 <__aeabi_dmul>
 8016c86:	4606      	mov	r6, r0
 8016c88:	460f      	mov	r7, r1
 8016c8a:	e7ac      	b.n	8016be6 <_dtoa_r+0x5c6>
 8016c8c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8016c90:	9d00      	ldr	r5, [sp, #0]
 8016c92:	4642      	mov	r2, r8
 8016c94:	464b      	mov	r3, r9
 8016c96:	4630      	mov	r0, r6
 8016c98:	4639      	mov	r1, r7
 8016c9a:	f7e9 fdd7 	bl	800084c <__aeabi_ddiv>
 8016c9e:	f7e9 ff5b 	bl	8000b58 <__aeabi_d2iz>
 8016ca2:	9002      	str	r0, [sp, #8]
 8016ca4:	f7e9 fc3e 	bl	8000524 <__aeabi_i2d>
 8016ca8:	4642      	mov	r2, r8
 8016caa:	464b      	mov	r3, r9
 8016cac:	f7e9 fca4 	bl	80005f8 <__aeabi_dmul>
 8016cb0:	4602      	mov	r2, r0
 8016cb2:	460b      	mov	r3, r1
 8016cb4:	4630      	mov	r0, r6
 8016cb6:	4639      	mov	r1, r7
 8016cb8:	f7e9 fae6 	bl	8000288 <__aeabi_dsub>
 8016cbc:	9e02      	ldr	r6, [sp, #8]
 8016cbe:	9f01      	ldr	r7, [sp, #4]
 8016cc0:	3630      	adds	r6, #48	; 0x30
 8016cc2:	f805 6b01 	strb.w	r6, [r5], #1
 8016cc6:	9e00      	ldr	r6, [sp, #0]
 8016cc8:	1bae      	subs	r6, r5, r6
 8016cca:	42b7      	cmp	r7, r6
 8016ccc:	4602      	mov	r2, r0
 8016cce:	460b      	mov	r3, r1
 8016cd0:	d137      	bne.n	8016d42 <_dtoa_r+0x722>
 8016cd2:	f7e9 fadb 	bl	800028c <__adddf3>
 8016cd6:	4642      	mov	r2, r8
 8016cd8:	464b      	mov	r3, r9
 8016cda:	4606      	mov	r6, r0
 8016cdc:	460f      	mov	r7, r1
 8016cde:	f7e9 ff1b 	bl	8000b18 <__aeabi_dcmpgt>
 8016ce2:	b9c8      	cbnz	r0, 8016d18 <_dtoa_r+0x6f8>
 8016ce4:	4642      	mov	r2, r8
 8016ce6:	464b      	mov	r3, r9
 8016ce8:	4630      	mov	r0, r6
 8016cea:	4639      	mov	r1, r7
 8016cec:	f7e9 feec 	bl	8000ac8 <__aeabi_dcmpeq>
 8016cf0:	b110      	cbz	r0, 8016cf8 <_dtoa_r+0x6d8>
 8016cf2:	9b02      	ldr	r3, [sp, #8]
 8016cf4:	07d9      	lsls	r1, r3, #31
 8016cf6:	d40f      	bmi.n	8016d18 <_dtoa_r+0x6f8>
 8016cf8:	4620      	mov	r0, r4
 8016cfa:	4659      	mov	r1, fp
 8016cfc:	f000 fba0 	bl	8017440 <_Bfree>
 8016d00:	2300      	movs	r3, #0
 8016d02:	702b      	strb	r3, [r5, #0]
 8016d04:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8016d06:	f10a 0001 	add.w	r0, sl, #1
 8016d0a:	6018      	str	r0, [r3, #0]
 8016d0c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	f43f acd8 	beq.w	80166c4 <_dtoa_r+0xa4>
 8016d14:	601d      	str	r5, [r3, #0]
 8016d16:	e4d5      	b.n	80166c4 <_dtoa_r+0xa4>
 8016d18:	f8cd a01c 	str.w	sl, [sp, #28]
 8016d1c:	462b      	mov	r3, r5
 8016d1e:	461d      	mov	r5, r3
 8016d20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8016d24:	2a39      	cmp	r2, #57	; 0x39
 8016d26:	d108      	bne.n	8016d3a <_dtoa_r+0x71a>
 8016d28:	9a00      	ldr	r2, [sp, #0]
 8016d2a:	429a      	cmp	r2, r3
 8016d2c:	d1f7      	bne.n	8016d1e <_dtoa_r+0x6fe>
 8016d2e:	9a07      	ldr	r2, [sp, #28]
 8016d30:	9900      	ldr	r1, [sp, #0]
 8016d32:	3201      	adds	r2, #1
 8016d34:	9207      	str	r2, [sp, #28]
 8016d36:	2230      	movs	r2, #48	; 0x30
 8016d38:	700a      	strb	r2, [r1, #0]
 8016d3a:	781a      	ldrb	r2, [r3, #0]
 8016d3c:	3201      	adds	r2, #1
 8016d3e:	701a      	strb	r2, [r3, #0]
 8016d40:	e78c      	b.n	8016c5c <_dtoa_r+0x63c>
 8016d42:	4b7f      	ldr	r3, [pc, #508]	; (8016f40 <_dtoa_r+0x920>)
 8016d44:	2200      	movs	r2, #0
 8016d46:	f7e9 fc57 	bl	80005f8 <__aeabi_dmul>
 8016d4a:	2200      	movs	r2, #0
 8016d4c:	2300      	movs	r3, #0
 8016d4e:	4606      	mov	r6, r0
 8016d50:	460f      	mov	r7, r1
 8016d52:	f7e9 feb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8016d56:	2800      	cmp	r0, #0
 8016d58:	d09b      	beq.n	8016c92 <_dtoa_r+0x672>
 8016d5a:	e7cd      	b.n	8016cf8 <_dtoa_r+0x6d8>
 8016d5c:	9a08      	ldr	r2, [sp, #32]
 8016d5e:	2a00      	cmp	r2, #0
 8016d60:	f000 80c4 	beq.w	8016eec <_dtoa_r+0x8cc>
 8016d64:	9a05      	ldr	r2, [sp, #20]
 8016d66:	2a01      	cmp	r2, #1
 8016d68:	f300 80a8 	bgt.w	8016ebc <_dtoa_r+0x89c>
 8016d6c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016d6e:	2a00      	cmp	r2, #0
 8016d70:	f000 80a0 	beq.w	8016eb4 <_dtoa_r+0x894>
 8016d74:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8016d78:	9e06      	ldr	r6, [sp, #24]
 8016d7a:	4645      	mov	r5, r8
 8016d7c:	9a04      	ldr	r2, [sp, #16]
 8016d7e:	2101      	movs	r1, #1
 8016d80:	441a      	add	r2, r3
 8016d82:	4620      	mov	r0, r4
 8016d84:	4498      	add	r8, r3
 8016d86:	9204      	str	r2, [sp, #16]
 8016d88:	f000 fc16 	bl	80175b8 <__i2b>
 8016d8c:	4607      	mov	r7, r0
 8016d8e:	2d00      	cmp	r5, #0
 8016d90:	dd0b      	ble.n	8016daa <_dtoa_r+0x78a>
 8016d92:	9b04      	ldr	r3, [sp, #16]
 8016d94:	2b00      	cmp	r3, #0
 8016d96:	dd08      	ble.n	8016daa <_dtoa_r+0x78a>
 8016d98:	42ab      	cmp	r3, r5
 8016d9a:	9a04      	ldr	r2, [sp, #16]
 8016d9c:	bfa8      	it	ge
 8016d9e:	462b      	movge	r3, r5
 8016da0:	eba8 0803 	sub.w	r8, r8, r3
 8016da4:	1aed      	subs	r5, r5, r3
 8016da6:	1ad3      	subs	r3, r2, r3
 8016da8:	9304      	str	r3, [sp, #16]
 8016daa:	9b06      	ldr	r3, [sp, #24]
 8016dac:	b1fb      	cbz	r3, 8016dee <_dtoa_r+0x7ce>
 8016dae:	9b08      	ldr	r3, [sp, #32]
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	f000 809f 	beq.w	8016ef4 <_dtoa_r+0x8d4>
 8016db6:	2e00      	cmp	r6, #0
 8016db8:	dd11      	ble.n	8016dde <_dtoa_r+0x7be>
 8016dba:	4639      	mov	r1, r7
 8016dbc:	4632      	mov	r2, r6
 8016dbe:	4620      	mov	r0, r4
 8016dc0:	f000 fcb6 	bl	8017730 <__pow5mult>
 8016dc4:	465a      	mov	r2, fp
 8016dc6:	4601      	mov	r1, r0
 8016dc8:	4607      	mov	r7, r0
 8016dca:	4620      	mov	r0, r4
 8016dcc:	f000 fc0a 	bl	80175e4 <__multiply>
 8016dd0:	4659      	mov	r1, fp
 8016dd2:	9007      	str	r0, [sp, #28]
 8016dd4:	4620      	mov	r0, r4
 8016dd6:	f000 fb33 	bl	8017440 <_Bfree>
 8016dda:	9b07      	ldr	r3, [sp, #28]
 8016ddc:	469b      	mov	fp, r3
 8016dde:	9b06      	ldr	r3, [sp, #24]
 8016de0:	1b9a      	subs	r2, r3, r6
 8016de2:	d004      	beq.n	8016dee <_dtoa_r+0x7ce>
 8016de4:	4659      	mov	r1, fp
 8016de6:	4620      	mov	r0, r4
 8016de8:	f000 fca2 	bl	8017730 <__pow5mult>
 8016dec:	4683      	mov	fp, r0
 8016dee:	2101      	movs	r1, #1
 8016df0:	4620      	mov	r0, r4
 8016df2:	f000 fbe1 	bl	80175b8 <__i2b>
 8016df6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	4606      	mov	r6, r0
 8016dfc:	dd7c      	ble.n	8016ef8 <_dtoa_r+0x8d8>
 8016dfe:	461a      	mov	r2, r3
 8016e00:	4601      	mov	r1, r0
 8016e02:	4620      	mov	r0, r4
 8016e04:	f000 fc94 	bl	8017730 <__pow5mult>
 8016e08:	9b05      	ldr	r3, [sp, #20]
 8016e0a:	2b01      	cmp	r3, #1
 8016e0c:	4606      	mov	r6, r0
 8016e0e:	dd76      	ble.n	8016efe <_dtoa_r+0x8de>
 8016e10:	2300      	movs	r3, #0
 8016e12:	9306      	str	r3, [sp, #24]
 8016e14:	6933      	ldr	r3, [r6, #16]
 8016e16:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8016e1a:	6918      	ldr	r0, [r3, #16]
 8016e1c:	f000 fb7c 	bl	8017518 <__hi0bits>
 8016e20:	f1c0 0020 	rsb	r0, r0, #32
 8016e24:	9b04      	ldr	r3, [sp, #16]
 8016e26:	4418      	add	r0, r3
 8016e28:	f010 001f 	ands.w	r0, r0, #31
 8016e2c:	f000 8086 	beq.w	8016f3c <_dtoa_r+0x91c>
 8016e30:	f1c0 0320 	rsb	r3, r0, #32
 8016e34:	2b04      	cmp	r3, #4
 8016e36:	dd7f      	ble.n	8016f38 <_dtoa_r+0x918>
 8016e38:	f1c0 001c 	rsb	r0, r0, #28
 8016e3c:	9b04      	ldr	r3, [sp, #16]
 8016e3e:	4403      	add	r3, r0
 8016e40:	4480      	add	r8, r0
 8016e42:	4405      	add	r5, r0
 8016e44:	9304      	str	r3, [sp, #16]
 8016e46:	f1b8 0f00 	cmp.w	r8, #0
 8016e4a:	dd05      	ble.n	8016e58 <_dtoa_r+0x838>
 8016e4c:	4659      	mov	r1, fp
 8016e4e:	4642      	mov	r2, r8
 8016e50:	4620      	mov	r0, r4
 8016e52:	f000 fcc7 	bl	80177e4 <__lshift>
 8016e56:	4683      	mov	fp, r0
 8016e58:	9b04      	ldr	r3, [sp, #16]
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	dd05      	ble.n	8016e6a <_dtoa_r+0x84a>
 8016e5e:	4631      	mov	r1, r6
 8016e60:	461a      	mov	r2, r3
 8016e62:	4620      	mov	r0, r4
 8016e64:	f000 fcbe 	bl	80177e4 <__lshift>
 8016e68:	4606      	mov	r6, r0
 8016e6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016e6c:	2b00      	cmp	r3, #0
 8016e6e:	d069      	beq.n	8016f44 <_dtoa_r+0x924>
 8016e70:	4631      	mov	r1, r6
 8016e72:	4658      	mov	r0, fp
 8016e74:	f000 fd22 	bl	80178bc <__mcmp>
 8016e78:	2800      	cmp	r0, #0
 8016e7a:	da63      	bge.n	8016f44 <_dtoa_r+0x924>
 8016e7c:	2300      	movs	r3, #0
 8016e7e:	4659      	mov	r1, fp
 8016e80:	220a      	movs	r2, #10
 8016e82:	4620      	mov	r0, r4
 8016e84:	f000 fafe 	bl	8017484 <__multadd>
 8016e88:	9b08      	ldr	r3, [sp, #32]
 8016e8a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8016e8e:	4683      	mov	fp, r0
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	f000 818f 	beq.w	80171b4 <_dtoa_r+0xb94>
 8016e96:	4639      	mov	r1, r7
 8016e98:	2300      	movs	r3, #0
 8016e9a:	220a      	movs	r2, #10
 8016e9c:	4620      	mov	r0, r4
 8016e9e:	f000 faf1 	bl	8017484 <__multadd>
 8016ea2:	f1b9 0f00 	cmp.w	r9, #0
 8016ea6:	4607      	mov	r7, r0
 8016ea8:	f300 808e 	bgt.w	8016fc8 <_dtoa_r+0x9a8>
 8016eac:	9b05      	ldr	r3, [sp, #20]
 8016eae:	2b02      	cmp	r3, #2
 8016eb0:	dc50      	bgt.n	8016f54 <_dtoa_r+0x934>
 8016eb2:	e089      	b.n	8016fc8 <_dtoa_r+0x9a8>
 8016eb4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8016eb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8016eba:	e75d      	b.n	8016d78 <_dtoa_r+0x758>
 8016ebc:	9b01      	ldr	r3, [sp, #4]
 8016ebe:	1e5e      	subs	r6, r3, #1
 8016ec0:	9b06      	ldr	r3, [sp, #24]
 8016ec2:	42b3      	cmp	r3, r6
 8016ec4:	bfbf      	itttt	lt
 8016ec6:	9b06      	ldrlt	r3, [sp, #24]
 8016ec8:	9606      	strlt	r6, [sp, #24]
 8016eca:	1af2      	sublt	r2, r6, r3
 8016ecc:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8016ece:	bfb6      	itet	lt
 8016ed0:	189b      	addlt	r3, r3, r2
 8016ed2:	1b9e      	subge	r6, r3, r6
 8016ed4:	930d      	strlt	r3, [sp, #52]	; 0x34
 8016ed6:	9b01      	ldr	r3, [sp, #4]
 8016ed8:	bfb8      	it	lt
 8016eda:	2600      	movlt	r6, #0
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	bfb5      	itete	lt
 8016ee0:	eba8 0503 	sublt.w	r5, r8, r3
 8016ee4:	9b01      	ldrge	r3, [sp, #4]
 8016ee6:	2300      	movlt	r3, #0
 8016ee8:	4645      	movge	r5, r8
 8016eea:	e747      	b.n	8016d7c <_dtoa_r+0x75c>
 8016eec:	9e06      	ldr	r6, [sp, #24]
 8016eee:	9f08      	ldr	r7, [sp, #32]
 8016ef0:	4645      	mov	r5, r8
 8016ef2:	e74c      	b.n	8016d8e <_dtoa_r+0x76e>
 8016ef4:	9a06      	ldr	r2, [sp, #24]
 8016ef6:	e775      	b.n	8016de4 <_dtoa_r+0x7c4>
 8016ef8:	9b05      	ldr	r3, [sp, #20]
 8016efa:	2b01      	cmp	r3, #1
 8016efc:	dc18      	bgt.n	8016f30 <_dtoa_r+0x910>
 8016efe:	9b02      	ldr	r3, [sp, #8]
 8016f00:	b9b3      	cbnz	r3, 8016f30 <_dtoa_r+0x910>
 8016f02:	9b03      	ldr	r3, [sp, #12]
 8016f04:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016f08:	b9a3      	cbnz	r3, 8016f34 <_dtoa_r+0x914>
 8016f0a:	9b03      	ldr	r3, [sp, #12]
 8016f0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8016f10:	0d1b      	lsrs	r3, r3, #20
 8016f12:	051b      	lsls	r3, r3, #20
 8016f14:	b12b      	cbz	r3, 8016f22 <_dtoa_r+0x902>
 8016f16:	9b04      	ldr	r3, [sp, #16]
 8016f18:	3301      	adds	r3, #1
 8016f1a:	9304      	str	r3, [sp, #16]
 8016f1c:	f108 0801 	add.w	r8, r8, #1
 8016f20:	2301      	movs	r3, #1
 8016f22:	9306      	str	r3, [sp, #24]
 8016f24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8016f26:	2b00      	cmp	r3, #0
 8016f28:	f47f af74 	bne.w	8016e14 <_dtoa_r+0x7f4>
 8016f2c:	2001      	movs	r0, #1
 8016f2e:	e779      	b.n	8016e24 <_dtoa_r+0x804>
 8016f30:	2300      	movs	r3, #0
 8016f32:	e7f6      	b.n	8016f22 <_dtoa_r+0x902>
 8016f34:	9b02      	ldr	r3, [sp, #8]
 8016f36:	e7f4      	b.n	8016f22 <_dtoa_r+0x902>
 8016f38:	d085      	beq.n	8016e46 <_dtoa_r+0x826>
 8016f3a:	4618      	mov	r0, r3
 8016f3c:	301c      	adds	r0, #28
 8016f3e:	e77d      	b.n	8016e3c <_dtoa_r+0x81c>
 8016f40:	40240000 	.word	0x40240000
 8016f44:	9b01      	ldr	r3, [sp, #4]
 8016f46:	2b00      	cmp	r3, #0
 8016f48:	dc38      	bgt.n	8016fbc <_dtoa_r+0x99c>
 8016f4a:	9b05      	ldr	r3, [sp, #20]
 8016f4c:	2b02      	cmp	r3, #2
 8016f4e:	dd35      	ble.n	8016fbc <_dtoa_r+0x99c>
 8016f50:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8016f54:	f1b9 0f00 	cmp.w	r9, #0
 8016f58:	d10d      	bne.n	8016f76 <_dtoa_r+0x956>
 8016f5a:	4631      	mov	r1, r6
 8016f5c:	464b      	mov	r3, r9
 8016f5e:	2205      	movs	r2, #5
 8016f60:	4620      	mov	r0, r4
 8016f62:	f000 fa8f 	bl	8017484 <__multadd>
 8016f66:	4601      	mov	r1, r0
 8016f68:	4606      	mov	r6, r0
 8016f6a:	4658      	mov	r0, fp
 8016f6c:	f000 fca6 	bl	80178bc <__mcmp>
 8016f70:	2800      	cmp	r0, #0
 8016f72:	f73f adbd 	bgt.w	8016af0 <_dtoa_r+0x4d0>
 8016f76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f78:	9d00      	ldr	r5, [sp, #0]
 8016f7a:	ea6f 0a03 	mvn.w	sl, r3
 8016f7e:	f04f 0800 	mov.w	r8, #0
 8016f82:	4631      	mov	r1, r6
 8016f84:	4620      	mov	r0, r4
 8016f86:	f000 fa5b 	bl	8017440 <_Bfree>
 8016f8a:	2f00      	cmp	r7, #0
 8016f8c:	f43f aeb4 	beq.w	8016cf8 <_dtoa_r+0x6d8>
 8016f90:	f1b8 0f00 	cmp.w	r8, #0
 8016f94:	d005      	beq.n	8016fa2 <_dtoa_r+0x982>
 8016f96:	45b8      	cmp	r8, r7
 8016f98:	d003      	beq.n	8016fa2 <_dtoa_r+0x982>
 8016f9a:	4641      	mov	r1, r8
 8016f9c:	4620      	mov	r0, r4
 8016f9e:	f000 fa4f 	bl	8017440 <_Bfree>
 8016fa2:	4639      	mov	r1, r7
 8016fa4:	4620      	mov	r0, r4
 8016fa6:	f000 fa4b 	bl	8017440 <_Bfree>
 8016faa:	e6a5      	b.n	8016cf8 <_dtoa_r+0x6d8>
 8016fac:	2600      	movs	r6, #0
 8016fae:	4637      	mov	r7, r6
 8016fb0:	e7e1      	b.n	8016f76 <_dtoa_r+0x956>
 8016fb2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8016fb4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8016fb8:	4637      	mov	r7, r6
 8016fba:	e599      	b.n	8016af0 <_dtoa_r+0x4d0>
 8016fbc:	9b08      	ldr	r3, [sp, #32]
 8016fbe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	f000 80fd 	beq.w	80171c2 <_dtoa_r+0xba2>
 8016fc8:	2d00      	cmp	r5, #0
 8016fca:	dd05      	ble.n	8016fd8 <_dtoa_r+0x9b8>
 8016fcc:	4639      	mov	r1, r7
 8016fce:	462a      	mov	r2, r5
 8016fd0:	4620      	mov	r0, r4
 8016fd2:	f000 fc07 	bl	80177e4 <__lshift>
 8016fd6:	4607      	mov	r7, r0
 8016fd8:	9b06      	ldr	r3, [sp, #24]
 8016fda:	2b00      	cmp	r3, #0
 8016fdc:	d05c      	beq.n	8017098 <_dtoa_r+0xa78>
 8016fde:	6879      	ldr	r1, [r7, #4]
 8016fe0:	4620      	mov	r0, r4
 8016fe2:	f000 f9ed 	bl	80173c0 <_Balloc>
 8016fe6:	4605      	mov	r5, r0
 8016fe8:	b928      	cbnz	r0, 8016ff6 <_dtoa_r+0x9d6>
 8016fea:	4b80      	ldr	r3, [pc, #512]	; (80171ec <_dtoa_r+0xbcc>)
 8016fec:	4602      	mov	r2, r0
 8016fee:	f240 21ea 	movw	r1, #746	; 0x2ea
 8016ff2:	f7ff bb2e 	b.w	8016652 <_dtoa_r+0x32>
 8016ff6:	693a      	ldr	r2, [r7, #16]
 8016ff8:	3202      	adds	r2, #2
 8016ffa:	0092      	lsls	r2, r2, #2
 8016ffc:	f107 010c 	add.w	r1, r7, #12
 8017000:	300c      	adds	r0, #12
 8017002:	f7fe fbfd 	bl	8015800 <memcpy>
 8017006:	2201      	movs	r2, #1
 8017008:	4629      	mov	r1, r5
 801700a:	4620      	mov	r0, r4
 801700c:	f000 fbea 	bl	80177e4 <__lshift>
 8017010:	9b00      	ldr	r3, [sp, #0]
 8017012:	3301      	adds	r3, #1
 8017014:	9301      	str	r3, [sp, #4]
 8017016:	9b00      	ldr	r3, [sp, #0]
 8017018:	444b      	add	r3, r9
 801701a:	9307      	str	r3, [sp, #28]
 801701c:	9b02      	ldr	r3, [sp, #8]
 801701e:	f003 0301 	and.w	r3, r3, #1
 8017022:	46b8      	mov	r8, r7
 8017024:	9306      	str	r3, [sp, #24]
 8017026:	4607      	mov	r7, r0
 8017028:	9b01      	ldr	r3, [sp, #4]
 801702a:	4631      	mov	r1, r6
 801702c:	3b01      	subs	r3, #1
 801702e:	4658      	mov	r0, fp
 8017030:	9302      	str	r3, [sp, #8]
 8017032:	f7ff fa67 	bl	8016504 <quorem>
 8017036:	4603      	mov	r3, r0
 8017038:	3330      	adds	r3, #48	; 0x30
 801703a:	9004      	str	r0, [sp, #16]
 801703c:	4641      	mov	r1, r8
 801703e:	4658      	mov	r0, fp
 8017040:	9308      	str	r3, [sp, #32]
 8017042:	f000 fc3b 	bl	80178bc <__mcmp>
 8017046:	463a      	mov	r2, r7
 8017048:	4681      	mov	r9, r0
 801704a:	4631      	mov	r1, r6
 801704c:	4620      	mov	r0, r4
 801704e:	f000 fc51 	bl	80178f4 <__mdiff>
 8017052:	68c2      	ldr	r2, [r0, #12]
 8017054:	9b08      	ldr	r3, [sp, #32]
 8017056:	4605      	mov	r5, r0
 8017058:	bb02      	cbnz	r2, 801709c <_dtoa_r+0xa7c>
 801705a:	4601      	mov	r1, r0
 801705c:	4658      	mov	r0, fp
 801705e:	f000 fc2d 	bl	80178bc <__mcmp>
 8017062:	9b08      	ldr	r3, [sp, #32]
 8017064:	4602      	mov	r2, r0
 8017066:	4629      	mov	r1, r5
 8017068:	4620      	mov	r0, r4
 801706a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 801706e:	f000 f9e7 	bl	8017440 <_Bfree>
 8017072:	9b05      	ldr	r3, [sp, #20]
 8017074:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017076:	9d01      	ldr	r5, [sp, #4]
 8017078:	ea43 0102 	orr.w	r1, r3, r2
 801707c:	9b06      	ldr	r3, [sp, #24]
 801707e:	430b      	orrs	r3, r1
 8017080:	9b08      	ldr	r3, [sp, #32]
 8017082:	d10d      	bne.n	80170a0 <_dtoa_r+0xa80>
 8017084:	2b39      	cmp	r3, #57	; 0x39
 8017086:	d029      	beq.n	80170dc <_dtoa_r+0xabc>
 8017088:	f1b9 0f00 	cmp.w	r9, #0
 801708c:	dd01      	ble.n	8017092 <_dtoa_r+0xa72>
 801708e:	9b04      	ldr	r3, [sp, #16]
 8017090:	3331      	adds	r3, #49	; 0x31
 8017092:	9a02      	ldr	r2, [sp, #8]
 8017094:	7013      	strb	r3, [r2, #0]
 8017096:	e774      	b.n	8016f82 <_dtoa_r+0x962>
 8017098:	4638      	mov	r0, r7
 801709a:	e7b9      	b.n	8017010 <_dtoa_r+0x9f0>
 801709c:	2201      	movs	r2, #1
 801709e:	e7e2      	b.n	8017066 <_dtoa_r+0xa46>
 80170a0:	f1b9 0f00 	cmp.w	r9, #0
 80170a4:	db06      	blt.n	80170b4 <_dtoa_r+0xa94>
 80170a6:	9905      	ldr	r1, [sp, #20]
 80170a8:	ea41 0909 	orr.w	r9, r1, r9
 80170ac:	9906      	ldr	r1, [sp, #24]
 80170ae:	ea59 0101 	orrs.w	r1, r9, r1
 80170b2:	d120      	bne.n	80170f6 <_dtoa_r+0xad6>
 80170b4:	2a00      	cmp	r2, #0
 80170b6:	ddec      	ble.n	8017092 <_dtoa_r+0xa72>
 80170b8:	4659      	mov	r1, fp
 80170ba:	2201      	movs	r2, #1
 80170bc:	4620      	mov	r0, r4
 80170be:	9301      	str	r3, [sp, #4]
 80170c0:	f000 fb90 	bl	80177e4 <__lshift>
 80170c4:	4631      	mov	r1, r6
 80170c6:	4683      	mov	fp, r0
 80170c8:	f000 fbf8 	bl	80178bc <__mcmp>
 80170cc:	2800      	cmp	r0, #0
 80170ce:	9b01      	ldr	r3, [sp, #4]
 80170d0:	dc02      	bgt.n	80170d8 <_dtoa_r+0xab8>
 80170d2:	d1de      	bne.n	8017092 <_dtoa_r+0xa72>
 80170d4:	07da      	lsls	r2, r3, #31
 80170d6:	d5dc      	bpl.n	8017092 <_dtoa_r+0xa72>
 80170d8:	2b39      	cmp	r3, #57	; 0x39
 80170da:	d1d8      	bne.n	801708e <_dtoa_r+0xa6e>
 80170dc:	9a02      	ldr	r2, [sp, #8]
 80170de:	2339      	movs	r3, #57	; 0x39
 80170e0:	7013      	strb	r3, [r2, #0]
 80170e2:	462b      	mov	r3, r5
 80170e4:	461d      	mov	r5, r3
 80170e6:	3b01      	subs	r3, #1
 80170e8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80170ec:	2a39      	cmp	r2, #57	; 0x39
 80170ee:	d050      	beq.n	8017192 <_dtoa_r+0xb72>
 80170f0:	3201      	adds	r2, #1
 80170f2:	701a      	strb	r2, [r3, #0]
 80170f4:	e745      	b.n	8016f82 <_dtoa_r+0x962>
 80170f6:	2a00      	cmp	r2, #0
 80170f8:	dd03      	ble.n	8017102 <_dtoa_r+0xae2>
 80170fa:	2b39      	cmp	r3, #57	; 0x39
 80170fc:	d0ee      	beq.n	80170dc <_dtoa_r+0xabc>
 80170fe:	3301      	adds	r3, #1
 8017100:	e7c7      	b.n	8017092 <_dtoa_r+0xa72>
 8017102:	9a01      	ldr	r2, [sp, #4]
 8017104:	9907      	ldr	r1, [sp, #28]
 8017106:	f802 3c01 	strb.w	r3, [r2, #-1]
 801710a:	428a      	cmp	r2, r1
 801710c:	d02a      	beq.n	8017164 <_dtoa_r+0xb44>
 801710e:	4659      	mov	r1, fp
 8017110:	2300      	movs	r3, #0
 8017112:	220a      	movs	r2, #10
 8017114:	4620      	mov	r0, r4
 8017116:	f000 f9b5 	bl	8017484 <__multadd>
 801711a:	45b8      	cmp	r8, r7
 801711c:	4683      	mov	fp, r0
 801711e:	f04f 0300 	mov.w	r3, #0
 8017122:	f04f 020a 	mov.w	r2, #10
 8017126:	4641      	mov	r1, r8
 8017128:	4620      	mov	r0, r4
 801712a:	d107      	bne.n	801713c <_dtoa_r+0xb1c>
 801712c:	f000 f9aa 	bl	8017484 <__multadd>
 8017130:	4680      	mov	r8, r0
 8017132:	4607      	mov	r7, r0
 8017134:	9b01      	ldr	r3, [sp, #4]
 8017136:	3301      	adds	r3, #1
 8017138:	9301      	str	r3, [sp, #4]
 801713a:	e775      	b.n	8017028 <_dtoa_r+0xa08>
 801713c:	f000 f9a2 	bl	8017484 <__multadd>
 8017140:	4639      	mov	r1, r7
 8017142:	4680      	mov	r8, r0
 8017144:	2300      	movs	r3, #0
 8017146:	220a      	movs	r2, #10
 8017148:	4620      	mov	r0, r4
 801714a:	f000 f99b 	bl	8017484 <__multadd>
 801714e:	4607      	mov	r7, r0
 8017150:	e7f0      	b.n	8017134 <_dtoa_r+0xb14>
 8017152:	f1b9 0f00 	cmp.w	r9, #0
 8017156:	9a00      	ldr	r2, [sp, #0]
 8017158:	bfcc      	ite	gt
 801715a:	464d      	movgt	r5, r9
 801715c:	2501      	movle	r5, #1
 801715e:	4415      	add	r5, r2
 8017160:	f04f 0800 	mov.w	r8, #0
 8017164:	4659      	mov	r1, fp
 8017166:	2201      	movs	r2, #1
 8017168:	4620      	mov	r0, r4
 801716a:	9301      	str	r3, [sp, #4]
 801716c:	f000 fb3a 	bl	80177e4 <__lshift>
 8017170:	4631      	mov	r1, r6
 8017172:	4683      	mov	fp, r0
 8017174:	f000 fba2 	bl	80178bc <__mcmp>
 8017178:	2800      	cmp	r0, #0
 801717a:	dcb2      	bgt.n	80170e2 <_dtoa_r+0xac2>
 801717c:	d102      	bne.n	8017184 <_dtoa_r+0xb64>
 801717e:	9b01      	ldr	r3, [sp, #4]
 8017180:	07db      	lsls	r3, r3, #31
 8017182:	d4ae      	bmi.n	80170e2 <_dtoa_r+0xac2>
 8017184:	462b      	mov	r3, r5
 8017186:	461d      	mov	r5, r3
 8017188:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801718c:	2a30      	cmp	r2, #48	; 0x30
 801718e:	d0fa      	beq.n	8017186 <_dtoa_r+0xb66>
 8017190:	e6f7      	b.n	8016f82 <_dtoa_r+0x962>
 8017192:	9a00      	ldr	r2, [sp, #0]
 8017194:	429a      	cmp	r2, r3
 8017196:	d1a5      	bne.n	80170e4 <_dtoa_r+0xac4>
 8017198:	f10a 0a01 	add.w	sl, sl, #1
 801719c:	2331      	movs	r3, #49	; 0x31
 801719e:	e779      	b.n	8017094 <_dtoa_r+0xa74>
 80171a0:	4b13      	ldr	r3, [pc, #76]	; (80171f0 <_dtoa_r+0xbd0>)
 80171a2:	f7ff baaf 	b.w	8016704 <_dtoa_r+0xe4>
 80171a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	f47f aa86 	bne.w	80166ba <_dtoa_r+0x9a>
 80171ae:	4b11      	ldr	r3, [pc, #68]	; (80171f4 <_dtoa_r+0xbd4>)
 80171b0:	f7ff baa8 	b.w	8016704 <_dtoa_r+0xe4>
 80171b4:	f1b9 0f00 	cmp.w	r9, #0
 80171b8:	dc03      	bgt.n	80171c2 <_dtoa_r+0xba2>
 80171ba:	9b05      	ldr	r3, [sp, #20]
 80171bc:	2b02      	cmp	r3, #2
 80171be:	f73f aec9 	bgt.w	8016f54 <_dtoa_r+0x934>
 80171c2:	9d00      	ldr	r5, [sp, #0]
 80171c4:	4631      	mov	r1, r6
 80171c6:	4658      	mov	r0, fp
 80171c8:	f7ff f99c 	bl	8016504 <quorem>
 80171cc:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80171d0:	f805 3b01 	strb.w	r3, [r5], #1
 80171d4:	9a00      	ldr	r2, [sp, #0]
 80171d6:	1aaa      	subs	r2, r5, r2
 80171d8:	4591      	cmp	r9, r2
 80171da:	ddba      	ble.n	8017152 <_dtoa_r+0xb32>
 80171dc:	4659      	mov	r1, fp
 80171de:	2300      	movs	r3, #0
 80171e0:	220a      	movs	r2, #10
 80171e2:	4620      	mov	r0, r4
 80171e4:	f000 f94e 	bl	8017484 <__multadd>
 80171e8:	4683      	mov	fp, r0
 80171ea:	e7eb      	b.n	80171c4 <_dtoa_r+0xba4>
 80171ec:	0801929c 	.word	0x0801929c
 80171f0:	080191d0 	.word	0x080191d0
 80171f4:	08019219 	.word	0x08019219

080171f8 <__sflush_r>:
 80171f8:	898a      	ldrh	r2, [r1, #12]
 80171fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80171fe:	4605      	mov	r5, r0
 8017200:	0710      	lsls	r0, r2, #28
 8017202:	460c      	mov	r4, r1
 8017204:	d458      	bmi.n	80172b8 <__sflush_r+0xc0>
 8017206:	684b      	ldr	r3, [r1, #4]
 8017208:	2b00      	cmp	r3, #0
 801720a:	dc05      	bgt.n	8017218 <__sflush_r+0x20>
 801720c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801720e:	2b00      	cmp	r3, #0
 8017210:	dc02      	bgt.n	8017218 <__sflush_r+0x20>
 8017212:	2000      	movs	r0, #0
 8017214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017218:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801721a:	2e00      	cmp	r6, #0
 801721c:	d0f9      	beq.n	8017212 <__sflush_r+0x1a>
 801721e:	2300      	movs	r3, #0
 8017220:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017224:	682f      	ldr	r7, [r5, #0]
 8017226:	602b      	str	r3, [r5, #0]
 8017228:	d032      	beq.n	8017290 <__sflush_r+0x98>
 801722a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801722c:	89a3      	ldrh	r3, [r4, #12]
 801722e:	075a      	lsls	r2, r3, #29
 8017230:	d505      	bpl.n	801723e <__sflush_r+0x46>
 8017232:	6863      	ldr	r3, [r4, #4]
 8017234:	1ac0      	subs	r0, r0, r3
 8017236:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017238:	b10b      	cbz	r3, 801723e <__sflush_r+0x46>
 801723a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801723c:	1ac0      	subs	r0, r0, r3
 801723e:	2300      	movs	r3, #0
 8017240:	4602      	mov	r2, r0
 8017242:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017244:	6a21      	ldr	r1, [r4, #32]
 8017246:	4628      	mov	r0, r5
 8017248:	47b0      	blx	r6
 801724a:	1c43      	adds	r3, r0, #1
 801724c:	89a3      	ldrh	r3, [r4, #12]
 801724e:	d106      	bne.n	801725e <__sflush_r+0x66>
 8017250:	6829      	ldr	r1, [r5, #0]
 8017252:	291d      	cmp	r1, #29
 8017254:	d82c      	bhi.n	80172b0 <__sflush_r+0xb8>
 8017256:	4a2a      	ldr	r2, [pc, #168]	; (8017300 <__sflush_r+0x108>)
 8017258:	40ca      	lsrs	r2, r1
 801725a:	07d6      	lsls	r6, r2, #31
 801725c:	d528      	bpl.n	80172b0 <__sflush_r+0xb8>
 801725e:	2200      	movs	r2, #0
 8017260:	6062      	str	r2, [r4, #4]
 8017262:	04d9      	lsls	r1, r3, #19
 8017264:	6922      	ldr	r2, [r4, #16]
 8017266:	6022      	str	r2, [r4, #0]
 8017268:	d504      	bpl.n	8017274 <__sflush_r+0x7c>
 801726a:	1c42      	adds	r2, r0, #1
 801726c:	d101      	bne.n	8017272 <__sflush_r+0x7a>
 801726e:	682b      	ldr	r3, [r5, #0]
 8017270:	b903      	cbnz	r3, 8017274 <__sflush_r+0x7c>
 8017272:	6560      	str	r0, [r4, #84]	; 0x54
 8017274:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017276:	602f      	str	r7, [r5, #0]
 8017278:	2900      	cmp	r1, #0
 801727a:	d0ca      	beq.n	8017212 <__sflush_r+0x1a>
 801727c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017280:	4299      	cmp	r1, r3
 8017282:	d002      	beq.n	801728a <__sflush_r+0x92>
 8017284:	4628      	mov	r0, r5
 8017286:	f7fe fad1 	bl	801582c <_free_r>
 801728a:	2000      	movs	r0, #0
 801728c:	6360      	str	r0, [r4, #52]	; 0x34
 801728e:	e7c1      	b.n	8017214 <__sflush_r+0x1c>
 8017290:	6a21      	ldr	r1, [r4, #32]
 8017292:	2301      	movs	r3, #1
 8017294:	4628      	mov	r0, r5
 8017296:	47b0      	blx	r6
 8017298:	1c41      	adds	r1, r0, #1
 801729a:	d1c7      	bne.n	801722c <__sflush_r+0x34>
 801729c:	682b      	ldr	r3, [r5, #0]
 801729e:	2b00      	cmp	r3, #0
 80172a0:	d0c4      	beq.n	801722c <__sflush_r+0x34>
 80172a2:	2b1d      	cmp	r3, #29
 80172a4:	d001      	beq.n	80172aa <__sflush_r+0xb2>
 80172a6:	2b16      	cmp	r3, #22
 80172a8:	d101      	bne.n	80172ae <__sflush_r+0xb6>
 80172aa:	602f      	str	r7, [r5, #0]
 80172ac:	e7b1      	b.n	8017212 <__sflush_r+0x1a>
 80172ae:	89a3      	ldrh	r3, [r4, #12]
 80172b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172b4:	81a3      	strh	r3, [r4, #12]
 80172b6:	e7ad      	b.n	8017214 <__sflush_r+0x1c>
 80172b8:	690f      	ldr	r7, [r1, #16]
 80172ba:	2f00      	cmp	r7, #0
 80172bc:	d0a9      	beq.n	8017212 <__sflush_r+0x1a>
 80172be:	0793      	lsls	r3, r2, #30
 80172c0:	680e      	ldr	r6, [r1, #0]
 80172c2:	bf08      	it	eq
 80172c4:	694b      	ldreq	r3, [r1, #20]
 80172c6:	600f      	str	r7, [r1, #0]
 80172c8:	bf18      	it	ne
 80172ca:	2300      	movne	r3, #0
 80172cc:	eba6 0807 	sub.w	r8, r6, r7
 80172d0:	608b      	str	r3, [r1, #8]
 80172d2:	f1b8 0f00 	cmp.w	r8, #0
 80172d6:	dd9c      	ble.n	8017212 <__sflush_r+0x1a>
 80172d8:	6a21      	ldr	r1, [r4, #32]
 80172da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80172dc:	4643      	mov	r3, r8
 80172de:	463a      	mov	r2, r7
 80172e0:	4628      	mov	r0, r5
 80172e2:	47b0      	blx	r6
 80172e4:	2800      	cmp	r0, #0
 80172e6:	dc06      	bgt.n	80172f6 <__sflush_r+0xfe>
 80172e8:	89a3      	ldrh	r3, [r4, #12]
 80172ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80172ee:	81a3      	strh	r3, [r4, #12]
 80172f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80172f4:	e78e      	b.n	8017214 <__sflush_r+0x1c>
 80172f6:	4407      	add	r7, r0
 80172f8:	eba8 0800 	sub.w	r8, r8, r0
 80172fc:	e7e9      	b.n	80172d2 <__sflush_r+0xda>
 80172fe:	bf00      	nop
 8017300:	20400001 	.word	0x20400001

08017304 <_fflush_r>:
 8017304:	b538      	push	{r3, r4, r5, lr}
 8017306:	690b      	ldr	r3, [r1, #16]
 8017308:	4605      	mov	r5, r0
 801730a:	460c      	mov	r4, r1
 801730c:	b913      	cbnz	r3, 8017314 <_fflush_r+0x10>
 801730e:	2500      	movs	r5, #0
 8017310:	4628      	mov	r0, r5
 8017312:	bd38      	pop	{r3, r4, r5, pc}
 8017314:	b118      	cbz	r0, 801731e <_fflush_r+0x1a>
 8017316:	6983      	ldr	r3, [r0, #24]
 8017318:	b90b      	cbnz	r3, 801731e <_fflush_r+0x1a>
 801731a:	f7fe f981 	bl	8015620 <__sinit>
 801731e:	4b14      	ldr	r3, [pc, #80]	; (8017370 <_fflush_r+0x6c>)
 8017320:	429c      	cmp	r4, r3
 8017322:	d11b      	bne.n	801735c <_fflush_r+0x58>
 8017324:	686c      	ldr	r4, [r5, #4]
 8017326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801732a:	2b00      	cmp	r3, #0
 801732c:	d0ef      	beq.n	801730e <_fflush_r+0xa>
 801732e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017330:	07d0      	lsls	r0, r2, #31
 8017332:	d404      	bmi.n	801733e <_fflush_r+0x3a>
 8017334:	0599      	lsls	r1, r3, #22
 8017336:	d402      	bmi.n	801733e <_fflush_r+0x3a>
 8017338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801733a:	f7fe fa4e 	bl	80157da <__retarget_lock_acquire_recursive>
 801733e:	4628      	mov	r0, r5
 8017340:	4621      	mov	r1, r4
 8017342:	f7ff ff59 	bl	80171f8 <__sflush_r>
 8017346:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017348:	07da      	lsls	r2, r3, #31
 801734a:	4605      	mov	r5, r0
 801734c:	d4e0      	bmi.n	8017310 <_fflush_r+0xc>
 801734e:	89a3      	ldrh	r3, [r4, #12]
 8017350:	059b      	lsls	r3, r3, #22
 8017352:	d4dd      	bmi.n	8017310 <_fflush_r+0xc>
 8017354:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017356:	f7fe fa41 	bl	80157dc <__retarget_lock_release_recursive>
 801735a:	e7d9      	b.n	8017310 <_fflush_r+0xc>
 801735c:	4b05      	ldr	r3, [pc, #20]	; (8017374 <_fflush_r+0x70>)
 801735e:	429c      	cmp	r4, r3
 8017360:	d101      	bne.n	8017366 <_fflush_r+0x62>
 8017362:	68ac      	ldr	r4, [r5, #8]
 8017364:	e7df      	b.n	8017326 <_fflush_r+0x22>
 8017366:	4b04      	ldr	r3, [pc, #16]	; (8017378 <_fflush_r+0x74>)
 8017368:	429c      	cmp	r4, r3
 801736a:	bf08      	it	eq
 801736c:	68ec      	ldreq	r4, [r5, #12]
 801736e:	e7da      	b.n	8017326 <_fflush_r+0x22>
 8017370:	0801917c 	.word	0x0801917c
 8017374:	0801919c 	.word	0x0801919c
 8017378:	0801915c 	.word	0x0801915c

0801737c <_localeconv_r>:
 801737c:	4800      	ldr	r0, [pc, #0]	; (8017380 <_localeconv_r+0x4>)
 801737e:	4770      	bx	lr
 8017380:	200002f0 	.word	0x200002f0

08017384 <_lseek_r>:
 8017384:	b538      	push	{r3, r4, r5, lr}
 8017386:	4d07      	ldr	r5, [pc, #28]	; (80173a4 <_lseek_r+0x20>)
 8017388:	4604      	mov	r4, r0
 801738a:	4608      	mov	r0, r1
 801738c:	4611      	mov	r1, r2
 801738e:	2200      	movs	r2, #0
 8017390:	602a      	str	r2, [r5, #0]
 8017392:	461a      	mov	r2, r3
 8017394:	f7ed fdec 	bl	8004f70 <_lseek>
 8017398:	1c43      	adds	r3, r0, #1
 801739a:	d102      	bne.n	80173a2 <_lseek_r+0x1e>
 801739c:	682b      	ldr	r3, [r5, #0]
 801739e:	b103      	cbz	r3, 80173a2 <_lseek_r+0x1e>
 80173a0:	6023      	str	r3, [r4, #0]
 80173a2:	bd38      	pop	{r3, r4, r5, pc}
 80173a4:	20014bf8 	.word	0x20014bf8

080173a8 <__malloc_lock>:
 80173a8:	4801      	ldr	r0, [pc, #4]	; (80173b0 <__malloc_lock+0x8>)
 80173aa:	f7fe ba16 	b.w	80157da <__retarget_lock_acquire_recursive>
 80173ae:	bf00      	nop
 80173b0:	20014bf0 	.word	0x20014bf0

080173b4 <__malloc_unlock>:
 80173b4:	4801      	ldr	r0, [pc, #4]	; (80173bc <__malloc_unlock+0x8>)
 80173b6:	f7fe ba11 	b.w	80157dc <__retarget_lock_release_recursive>
 80173ba:	bf00      	nop
 80173bc:	20014bf0 	.word	0x20014bf0

080173c0 <_Balloc>:
 80173c0:	b570      	push	{r4, r5, r6, lr}
 80173c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80173c4:	4604      	mov	r4, r0
 80173c6:	460d      	mov	r5, r1
 80173c8:	b976      	cbnz	r6, 80173e8 <_Balloc+0x28>
 80173ca:	2010      	movs	r0, #16
 80173cc:	f7fe fa08 	bl	80157e0 <malloc>
 80173d0:	4602      	mov	r2, r0
 80173d2:	6260      	str	r0, [r4, #36]	; 0x24
 80173d4:	b920      	cbnz	r0, 80173e0 <_Balloc+0x20>
 80173d6:	4b18      	ldr	r3, [pc, #96]	; (8017438 <_Balloc+0x78>)
 80173d8:	4818      	ldr	r0, [pc, #96]	; (801743c <_Balloc+0x7c>)
 80173da:	2166      	movs	r1, #102	; 0x66
 80173dc:	f000 fcea 	bl	8017db4 <__assert_func>
 80173e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80173e4:	6006      	str	r6, [r0, #0]
 80173e6:	60c6      	str	r6, [r0, #12]
 80173e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80173ea:	68f3      	ldr	r3, [r6, #12]
 80173ec:	b183      	cbz	r3, 8017410 <_Balloc+0x50>
 80173ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80173f0:	68db      	ldr	r3, [r3, #12]
 80173f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80173f6:	b9b8      	cbnz	r0, 8017428 <_Balloc+0x68>
 80173f8:	2101      	movs	r1, #1
 80173fa:	fa01 f605 	lsl.w	r6, r1, r5
 80173fe:	1d72      	adds	r2, r6, #5
 8017400:	0092      	lsls	r2, r2, #2
 8017402:	4620      	mov	r0, r4
 8017404:	f000 fb5a 	bl	8017abc <_calloc_r>
 8017408:	b160      	cbz	r0, 8017424 <_Balloc+0x64>
 801740a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801740e:	e00e      	b.n	801742e <_Balloc+0x6e>
 8017410:	2221      	movs	r2, #33	; 0x21
 8017412:	2104      	movs	r1, #4
 8017414:	4620      	mov	r0, r4
 8017416:	f000 fb51 	bl	8017abc <_calloc_r>
 801741a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801741c:	60f0      	str	r0, [r6, #12]
 801741e:	68db      	ldr	r3, [r3, #12]
 8017420:	2b00      	cmp	r3, #0
 8017422:	d1e4      	bne.n	80173ee <_Balloc+0x2e>
 8017424:	2000      	movs	r0, #0
 8017426:	bd70      	pop	{r4, r5, r6, pc}
 8017428:	6802      	ldr	r2, [r0, #0]
 801742a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801742e:	2300      	movs	r3, #0
 8017430:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017434:	e7f7      	b.n	8017426 <_Balloc+0x66>
 8017436:	bf00      	nop
 8017438:	08019226 	.word	0x08019226
 801743c:	080192ad 	.word	0x080192ad

08017440 <_Bfree>:
 8017440:	b570      	push	{r4, r5, r6, lr}
 8017442:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017444:	4605      	mov	r5, r0
 8017446:	460c      	mov	r4, r1
 8017448:	b976      	cbnz	r6, 8017468 <_Bfree+0x28>
 801744a:	2010      	movs	r0, #16
 801744c:	f7fe f9c8 	bl	80157e0 <malloc>
 8017450:	4602      	mov	r2, r0
 8017452:	6268      	str	r0, [r5, #36]	; 0x24
 8017454:	b920      	cbnz	r0, 8017460 <_Bfree+0x20>
 8017456:	4b09      	ldr	r3, [pc, #36]	; (801747c <_Bfree+0x3c>)
 8017458:	4809      	ldr	r0, [pc, #36]	; (8017480 <_Bfree+0x40>)
 801745a:	218a      	movs	r1, #138	; 0x8a
 801745c:	f000 fcaa 	bl	8017db4 <__assert_func>
 8017460:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017464:	6006      	str	r6, [r0, #0]
 8017466:	60c6      	str	r6, [r0, #12]
 8017468:	b13c      	cbz	r4, 801747a <_Bfree+0x3a>
 801746a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801746c:	6862      	ldr	r2, [r4, #4]
 801746e:	68db      	ldr	r3, [r3, #12]
 8017470:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017474:	6021      	str	r1, [r4, #0]
 8017476:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801747a:	bd70      	pop	{r4, r5, r6, pc}
 801747c:	08019226 	.word	0x08019226
 8017480:	080192ad 	.word	0x080192ad

08017484 <__multadd>:
 8017484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017488:	690e      	ldr	r6, [r1, #16]
 801748a:	4607      	mov	r7, r0
 801748c:	4698      	mov	r8, r3
 801748e:	460c      	mov	r4, r1
 8017490:	f101 0014 	add.w	r0, r1, #20
 8017494:	2300      	movs	r3, #0
 8017496:	6805      	ldr	r5, [r0, #0]
 8017498:	b2a9      	uxth	r1, r5
 801749a:	fb02 8101 	mla	r1, r2, r1, r8
 801749e:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 80174a2:	0c2d      	lsrs	r5, r5, #16
 80174a4:	fb02 c505 	mla	r5, r2, r5, ip
 80174a8:	b289      	uxth	r1, r1
 80174aa:	3301      	adds	r3, #1
 80174ac:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80174b0:	429e      	cmp	r6, r3
 80174b2:	f840 1b04 	str.w	r1, [r0], #4
 80174b6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80174ba:	dcec      	bgt.n	8017496 <__multadd+0x12>
 80174bc:	f1b8 0f00 	cmp.w	r8, #0
 80174c0:	d022      	beq.n	8017508 <__multadd+0x84>
 80174c2:	68a3      	ldr	r3, [r4, #8]
 80174c4:	42b3      	cmp	r3, r6
 80174c6:	dc19      	bgt.n	80174fc <__multadd+0x78>
 80174c8:	6861      	ldr	r1, [r4, #4]
 80174ca:	4638      	mov	r0, r7
 80174cc:	3101      	adds	r1, #1
 80174ce:	f7ff ff77 	bl	80173c0 <_Balloc>
 80174d2:	4605      	mov	r5, r0
 80174d4:	b928      	cbnz	r0, 80174e2 <__multadd+0x5e>
 80174d6:	4602      	mov	r2, r0
 80174d8:	4b0d      	ldr	r3, [pc, #52]	; (8017510 <__multadd+0x8c>)
 80174da:	480e      	ldr	r0, [pc, #56]	; (8017514 <__multadd+0x90>)
 80174dc:	21b5      	movs	r1, #181	; 0xb5
 80174de:	f000 fc69 	bl	8017db4 <__assert_func>
 80174e2:	6922      	ldr	r2, [r4, #16]
 80174e4:	3202      	adds	r2, #2
 80174e6:	f104 010c 	add.w	r1, r4, #12
 80174ea:	0092      	lsls	r2, r2, #2
 80174ec:	300c      	adds	r0, #12
 80174ee:	f7fe f987 	bl	8015800 <memcpy>
 80174f2:	4621      	mov	r1, r4
 80174f4:	4638      	mov	r0, r7
 80174f6:	f7ff ffa3 	bl	8017440 <_Bfree>
 80174fa:	462c      	mov	r4, r5
 80174fc:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8017500:	3601      	adds	r6, #1
 8017502:	f8c3 8014 	str.w	r8, [r3, #20]
 8017506:	6126      	str	r6, [r4, #16]
 8017508:	4620      	mov	r0, r4
 801750a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801750e:	bf00      	nop
 8017510:	0801929c 	.word	0x0801929c
 8017514:	080192ad 	.word	0x080192ad

08017518 <__hi0bits>:
 8017518:	0c03      	lsrs	r3, r0, #16
 801751a:	041b      	lsls	r3, r3, #16
 801751c:	b9d3      	cbnz	r3, 8017554 <__hi0bits+0x3c>
 801751e:	0400      	lsls	r0, r0, #16
 8017520:	2310      	movs	r3, #16
 8017522:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8017526:	bf04      	itt	eq
 8017528:	0200      	lsleq	r0, r0, #8
 801752a:	3308      	addeq	r3, #8
 801752c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8017530:	bf04      	itt	eq
 8017532:	0100      	lsleq	r0, r0, #4
 8017534:	3304      	addeq	r3, #4
 8017536:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801753a:	bf04      	itt	eq
 801753c:	0080      	lsleq	r0, r0, #2
 801753e:	3302      	addeq	r3, #2
 8017540:	2800      	cmp	r0, #0
 8017542:	db05      	blt.n	8017550 <__hi0bits+0x38>
 8017544:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8017548:	f103 0301 	add.w	r3, r3, #1
 801754c:	bf08      	it	eq
 801754e:	2320      	moveq	r3, #32
 8017550:	4618      	mov	r0, r3
 8017552:	4770      	bx	lr
 8017554:	2300      	movs	r3, #0
 8017556:	e7e4      	b.n	8017522 <__hi0bits+0xa>

08017558 <__lo0bits>:
 8017558:	6803      	ldr	r3, [r0, #0]
 801755a:	f013 0207 	ands.w	r2, r3, #7
 801755e:	4601      	mov	r1, r0
 8017560:	d00b      	beq.n	801757a <__lo0bits+0x22>
 8017562:	07da      	lsls	r2, r3, #31
 8017564:	d424      	bmi.n	80175b0 <__lo0bits+0x58>
 8017566:	0798      	lsls	r0, r3, #30
 8017568:	bf49      	itett	mi
 801756a:	085b      	lsrmi	r3, r3, #1
 801756c:	089b      	lsrpl	r3, r3, #2
 801756e:	2001      	movmi	r0, #1
 8017570:	600b      	strmi	r3, [r1, #0]
 8017572:	bf5c      	itt	pl
 8017574:	600b      	strpl	r3, [r1, #0]
 8017576:	2002      	movpl	r0, #2
 8017578:	4770      	bx	lr
 801757a:	b298      	uxth	r0, r3
 801757c:	b9b0      	cbnz	r0, 80175ac <__lo0bits+0x54>
 801757e:	0c1b      	lsrs	r3, r3, #16
 8017580:	2010      	movs	r0, #16
 8017582:	f013 0fff 	tst.w	r3, #255	; 0xff
 8017586:	bf04      	itt	eq
 8017588:	0a1b      	lsreq	r3, r3, #8
 801758a:	3008      	addeq	r0, #8
 801758c:	071a      	lsls	r2, r3, #28
 801758e:	bf04      	itt	eq
 8017590:	091b      	lsreq	r3, r3, #4
 8017592:	3004      	addeq	r0, #4
 8017594:	079a      	lsls	r2, r3, #30
 8017596:	bf04      	itt	eq
 8017598:	089b      	lsreq	r3, r3, #2
 801759a:	3002      	addeq	r0, #2
 801759c:	07da      	lsls	r2, r3, #31
 801759e:	d403      	bmi.n	80175a8 <__lo0bits+0x50>
 80175a0:	085b      	lsrs	r3, r3, #1
 80175a2:	f100 0001 	add.w	r0, r0, #1
 80175a6:	d005      	beq.n	80175b4 <__lo0bits+0x5c>
 80175a8:	600b      	str	r3, [r1, #0]
 80175aa:	4770      	bx	lr
 80175ac:	4610      	mov	r0, r2
 80175ae:	e7e8      	b.n	8017582 <__lo0bits+0x2a>
 80175b0:	2000      	movs	r0, #0
 80175b2:	4770      	bx	lr
 80175b4:	2020      	movs	r0, #32
 80175b6:	4770      	bx	lr

080175b8 <__i2b>:
 80175b8:	b510      	push	{r4, lr}
 80175ba:	460c      	mov	r4, r1
 80175bc:	2101      	movs	r1, #1
 80175be:	f7ff feff 	bl	80173c0 <_Balloc>
 80175c2:	4602      	mov	r2, r0
 80175c4:	b928      	cbnz	r0, 80175d2 <__i2b+0x1a>
 80175c6:	4b05      	ldr	r3, [pc, #20]	; (80175dc <__i2b+0x24>)
 80175c8:	4805      	ldr	r0, [pc, #20]	; (80175e0 <__i2b+0x28>)
 80175ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80175ce:	f000 fbf1 	bl	8017db4 <__assert_func>
 80175d2:	2301      	movs	r3, #1
 80175d4:	6144      	str	r4, [r0, #20]
 80175d6:	6103      	str	r3, [r0, #16]
 80175d8:	bd10      	pop	{r4, pc}
 80175da:	bf00      	nop
 80175dc:	0801929c 	.word	0x0801929c
 80175e0:	080192ad 	.word	0x080192ad

080175e4 <__multiply>:
 80175e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80175e8:	4614      	mov	r4, r2
 80175ea:	690a      	ldr	r2, [r1, #16]
 80175ec:	6923      	ldr	r3, [r4, #16]
 80175ee:	429a      	cmp	r2, r3
 80175f0:	bfb8      	it	lt
 80175f2:	460b      	movlt	r3, r1
 80175f4:	460d      	mov	r5, r1
 80175f6:	bfbc      	itt	lt
 80175f8:	4625      	movlt	r5, r4
 80175fa:	461c      	movlt	r4, r3
 80175fc:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8017600:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8017604:	68ab      	ldr	r3, [r5, #8]
 8017606:	6869      	ldr	r1, [r5, #4]
 8017608:	eb0a 0709 	add.w	r7, sl, r9
 801760c:	42bb      	cmp	r3, r7
 801760e:	b085      	sub	sp, #20
 8017610:	bfb8      	it	lt
 8017612:	3101      	addlt	r1, #1
 8017614:	f7ff fed4 	bl	80173c0 <_Balloc>
 8017618:	b930      	cbnz	r0, 8017628 <__multiply+0x44>
 801761a:	4602      	mov	r2, r0
 801761c:	4b42      	ldr	r3, [pc, #264]	; (8017728 <__multiply+0x144>)
 801761e:	4843      	ldr	r0, [pc, #268]	; (801772c <__multiply+0x148>)
 8017620:	f240 115d 	movw	r1, #349	; 0x15d
 8017624:	f000 fbc6 	bl	8017db4 <__assert_func>
 8017628:	f100 0614 	add.w	r6, r0, #20
 801762c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8017630:	4633      	mov	r3, r6
 8017632:	2200      	movs	r2, #0
 8017634:	4543      	cmp	r3, r8
 8017636:	d31e      	bcc.n	8017676 <__multiply+0x92>
 8017638:	f105 0c14 	add.w	ip, r5, #20
 801763c:	f104 0314 	add.w	r3, r4, #20
 8017640:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8017644:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8017648:	9202      	str	r2, [sp, #8]
 801764a:	ebac 0205 	sub.w	r2, ip, r5
 801764e:	3a15      	subs	r2, #21
 8017650:	f022 0203 	bic.w	r2, r2, #3
 8017654:	3204      	adds	r2, #4
 8017656:	f105 0115 	add.w	r1, r5, #21
 801765a:	458c      	cmp	ip, r1
 801765c:	bf38      	it	cc
 801765e:	2204      	movcc	r2, #4
 8017660:	9201      	str	r2, [sp, #4]
 8017662:	9a02      	ldr	r2, [sp, #8]
 8017664:	9303      	str	r3, [sp, #12]
 8017666:	429a      	cmp	r2, r3
 8017668:	d808      	bhi.n	801767c <__multiply+0x98>
 801766a:	2f00      	cmp	r7, #0
 801766c:	dc55      	bgt.n	801771a <__multiply+0x136>
 801766e:	6107      	str	r7, [r0, #16]
 8017670:	b005      	add	sp, #20
 8017672:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017676:	f843 2b04 	str.w	r2, [r3], #4
 801767a:	e7db      	b.n	8017634 <__multiply+0x50>
 801767c:	f8b3 a000 	ldrh.w	sl, [r3]
 8017680:	f1ba 0f00 	cmp.w	sl, #0
 8017684:	d020      	beq.n	80176c8 <__multiply+0xe4>
 8017686:	f105 0e14 	add.w	lr, r5, #20
 801768a:	46b1      	mov	r9, r6
 801768c:	2200      	movs	r2, #0
 801768e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8017692:	f8d9 b000 	ldr.w	fp, [r9]
 8017696:	b2a1      	uxth	r1, r4
 8017698:	fa1f fb8b 	uxth.w	fp, fp
 801769c:	fb0a b101 	mla	r1, sl, r1, fp
 80176a0:	4411      	add	r1, r2
 80176a2:	f8d9 2000 	ldr.w	r2, [r9]
 80176a6:	0c24      	lsrs	r4, r4, #16
 80176a8:	0c12      	lsrs	r2, r2, #16
 80176aa:	fb0a 2404 	mla	r4, sl, r4, r2
 80176ae:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80176b2:	b289      	uxth	r1, r1
 80176b4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80176b8:	45f4      	cmp	ip, lr
 80176ba:	f849 1b04 	str.w	r1, [r9], #4
 80176be:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80176c2:	d8e4      	bhi.n	801768e <__multiply+0xaa>
 80176c4:	9901      	ldr	r1, [sp, #4]
 80176c6:	5072      	str	r2, [r6, r1]
 80176c8:	9a03      	ldr	r2, [sp, #12]
 80176ca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80176ce:	3304      	adds	r3, #4
 80176d0:	f1b9 0f00 	cmp.w	r9, #0
 80176d4:	d01f      	beq.n	8017716 <__multiply+0x132>
 80176d6:	6834      	ldr	r4, [r6, #0]
 80176d8:	f105 0114 	add.w	r1, r5, #20
 80176dc:	46b6      	mov	lr, r6
 80176de:	f04f 0a00 	mov.w	sl, #0
 80176e2:	880a      	ldrh	r2, [r1, #0]
 80176e4:	f8be b002 	ldrh.w	fp, [lr, #2]
 80176e8:	fb09 b202 	mla	r2, r9, r2, fp
 80176ec:	4492      	add	sl, r2
 80176ee:	b2a4      	uxth	r4, r4
 80176f0:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80176f4:	f84e 4b04 	str.w	r4, [lr], #4
 80176f8:	f851 4b04 	ldr.w	r4, [r1], #4
 80176fc:	f8be 2000 	ldrh.w	r2, [lr]
 8017700:	0c24      	lsrs	r4, r4, #16
 8017702:	fb09 2404 	mla	r4, r9, r4, r2
 8017706:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801770a:	458c      	cmp	ip, r1
 801770c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8017710:	d8e7      	bhi.n	80176e2 <__multiply+0xfe>
 8017712:	9a01      	ldr	r2, [sp, #4]
 8017714:	50b4      	str	r4, [r6, r2]
 8017716:	3604      	adds	r6, #4
 8017718:	e7a3      	b.n	8017662 <__multiply+0x7e>
 801771a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801771e:	2b00      	cmp	r3, #0
 8017720:	d1a5      	bne.n	801766e <__multiply+0x8a>
 8017722:	3f01      	subs	r7, #1
 8017724:	e7a1      	b.n	801766a <__multiply+0x86>
 8017726:	bf00      	nop
 8017728:	0801929c 	.word	0x0801929c
 801772c:	080192ad 	.word	0x080192ad

08017730 <__pow5mult>:
 8017730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017734:	4615      	mov	r5, r2
 8017736:	f012 0203 	ands.w	r2, r2, #3
 801773a:	4606      	mov	r6, r0
 801773c:	460f      	mov	r7, r1
 801773e:	d007      	beq.n	8017750 <__pow5mult+0x20>
 8017740:	4c25      	ldr	r4, [pc, #148]	; (80177d8 <__pow5mult+0xa8>)
 8017742:	3a01      	subs	r2, #1
 8017744:	2300      	movs	r3, #0
 8017746:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801774a:	f7ff fe9b 	bl	8017484 <__multadd>
 801774e:	4607      	mov	r7, r0
 8017750:	10ad      	asrs	r5, r5, #2
 8017752:	d03d      	beq.n	80177d0 <__pow5mult+0xa0>
 8017754:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017756:	b97c      	cbnz	r4, 8017778 <__pow5mult+0x48>
 8017758:	2010      	movs	r0, #16
 801775a:	f7fe f841 	bl	80157e0 <malloc>
 801775e:	4602      	mov	r2, r0
 8017760:	6270      	str	r0, [r6, #36]	; 0x24
 8017762:	b928      	cbnz	r0, 8017770 <__pow5mult+0x40>
 8017764:	4b1d      	ldr	r3, [pc, #116]	; (80177dc <__pow5mult+0xac>)
 8017766:	481e      	ldr	r0, [pc, #120]	; (80177e0 <__pow5mult+0xb0>)
 8017768:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801776c:	f000 fb22 	bl	8017db4 <__assert_func>
 8017770:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017774:	6004      	str	r4, [r0, #0]
 8017776:	60c4      	str	r4, [r0, #12]
 8017778:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801777c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017780:	b94c      	cbnz	r4, 8017796 <__pow5mult+0x66>
 8017782:	f240 2171 	movw	r1, #625	; 0x271
 8017786:	4630      	mov	r0, r6
 8017788:	f7ff ff16 	bl	80175b8 <__i2b>
 801778c:	2300      	movs	r3, #0
 801778e:	f8c8 0008 	str.w	r0, [r8, #8]
 8017792:	4604      	mov	r4, r0
 8017794:	6003      	str	r3, [r0, #0]
 8017796:	f04f 0900 	mov.w	r9, #0
 801779a:	07eb      	lsls	r3, r5, #31
 801779c:	d50a      	bpl.n	80177b4 <__pow5mult+0x84>
 801779e:	4639      	mov	r1, r7
 80177a0:	4622      	mov	r2, r4
 80177a2:	4630      	mov	r0, r6
 80177a4:	f7ff ff1e 	bl	80175e4 <__multiply>
 80177a8:	4639      	mov	r1, r7
 80177aa:	4680      	mov	r8, r0
 80177ac:	4630      	mov	r0, r6
 80177ae:	f7ff fe47 	bl	8017440 <_Bfree>
 80177b2:	4647      	mov	r7, r8
 80177b4:	106d      	asrs	r5, r5, #1
 80177b6:	d00b      	beq.n	80177d0 <__pow5mult+0xa0>
 80177b8:	6820      	ldr	r0, [r4, #0]
 80177ba:	b938      	cbnz	r0, 80177cc <__pow5mult+0x9c>
 80177bc:	4622      	mov	r2, r4
 80177be:	4621      	mov	r1, r4
 80177c0:	4630      	mov	r0, r6
 80177c2:	f7ff ff0f 	bl	80175e4 <__multiply>
 80177c6:	6020      	str	r0, [r4, #0]
 80177c8:	f8c0 9000 	str.w	r9, [r0]
 80177cc:	4604      	mov	r4, r0
 80177ce:	e7e4      	b.n	801779a <__pow5mult+0x6a>
 80177d0:	4638      	mov	r0, r7
 80177d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80177d6:	bf00      	nop
 80177d8:	08019400 	.word	0x08019400
 80177dc:	08019226 	.word	0x08019226
 80177e0:	080192ad 	.word	0x080192ad

080177e4 <__lshift>:
 80177e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80177e8:	460c      	mov	r4, r1
 80177ea:	6849      	ldr	r1, [r1, #4]
 80177ec:	6923      	ldr	r3, [r4, #16]
 80177ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80177f2:	68a3      	ldr	r3, [r4, #8]
 80177f4:	4607      	mov	r7, r0
 80177f6:	4691      	mov	r9, r2
 80177f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80177fc:	f108 0601 	add.w	r6, r8, #1
 8017800:	42b3      	cmp	r3, r6
 8017802:	db0b      	blt.n	801781c <__lshift+0x38>
 8017804:	4638      	mov	r0, r7
 8017806:	f7ff fddb 	bl	80173c0 <_Balloc>
 801780a:	4605      	mov	r5, r0
 801780c:	b948      	cbnz	r0, 8017822 <__lshift+0x3e>
 801780e:	4602      	mov	r2, r0
 8017810:	4b28      	ldr	r3, [pc, #160]	; (80178b4 <__lshift+0xd0>)
 8017812:	4829      	ldr	r0, [pc, #164]	; (80178b8 <__lshift+0xd4>)
 8017814:	f240 11d9 	movw	r1, #473	; 0x1d9
 8017818:	f000 facc 	bl	8017db4 <__assert_func>
 801781c:	3101      	adds	r1, #1
 801781e:	005b      	lsls	r3, r3, #1
 8017820:	e7ee      	b.n	8017800 <__lshift+0x1c>
 8017822:	2300      	movs	r3, #0
 8017824:	f100 0114 	add.w	r1, r0, #20
 8017828:	f100 0210 	add.w	r2, r0, #16
 801782c:	4618      	mov	r0, r3
 801782e:	4553      	cmp	r3, sl
 8017830:	db33      	blt.n	801789a <__lshift+0xb6>
 8017832:	6920      	ldr	r0, [r4, #16]
 8017834:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017838:	f104 0314 	add.w	r3, r4, #20
 801783c:	f019 091f 	ands.w	r9, r9, #31
 8017840:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017844:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8017848:	d02b      	beq.n	80178a2 <__lshift+0xbe>
 801784a:	f1c9 0e20 	rsb	lr, r9, #32
 801784e:	468a      	mov	sl, r1
 8017850:	2200      	movs	r2, #0
 8017852:	6818      	ldr	r0, [r3, #0]
 8017854:	fa00 f009 	lsl.w	r0, r0, r9
 8017858:	4302      	orrs	r2, r0
 801785a:	f84a 2b04 	str.w	r2, [sl], #4
 801785e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017862:	459c      	cmp	ip, r3
 8017864:	fa22 f20e 	lsr.w	r2, r2, lr
 8017868:	d8f3      	bhi.n	8017852 <__lshift+0x6e>
 801786a:	ebac 0304 	sub.w	r3, ip, r4
 801786e:	3b15      	subs	r3, #21
 8017870:	f023 0303 	bic.w	r3, r3, #3
 8017874:	3304      	adds	r3, #4
 8017876:	f104 0015 	add.w	r0, r4, #21
 801787a:	4584      	cmp	ip, r0
 801787c:	bf38      	it	cc
 801787e:	2304      	movcc	r3, #4
 8017880:	50ca      	str	r2, [r1, r3]
 8017882:	b10a      	cbz	r2, 8017888 <__lshift+0xa4>
 8017884:	f108 0602 	add.w	r6, r8, #2
 8017888:	3e01      	subs	r6, #1
 801788a:	4638      	mov	r0, r7
 801788c:	612e      	str	r6, [r5, #16]
 801788e:	4621      	mov	r1, r4
 8017890:	f7ff fdd6 	bl	8017440 <_Bfree>
 8017894:	4628      	mov	r0, r5
 8017896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801789a:	f842 0f04 	str.w	r0, [r2, #4]!
 801789e:	3301      	adds	r3, #1
 80178a0:	e7c5      	b.n	801782e <__lshift+0x4a>
 80178a2:	3904      	subs	r1, #4
 80178a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80178a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80178ac:	459c      	cmp	ip, r3
 80178ae:	d8f9      	bhi.n	80178a4 <__lshift+0xc0>
 80178b0:	e7ea      	b.n	8017888 <__lshift+0xa4>
 80178b2:	bf00      	nop
 80178b4:	0801929c 	.word	0x0801929c
 80178b8:	080192ad 	.word	0x080192ad

080178bc <__mcmp>:
 80178bc:	b530      	push	{r4, r5, lr}
 80178be:	6902      	ldr	r2, [r0, #16]
 80178c0:	690c      	ldr	r4, [r1, #16]
 80178c2:	1b12      	subs	r2, r2, r4
 80178c4:	d10e      	bne.n	80178e4 <__mcmp+0x28>
 80178c6:	f100 0314 	add.w	r3, r0, #20
 80178ca:	3114      	adds	r1, #20
 80178cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80178d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80178d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80178d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80178dc:	42a5      	cmp	r5, r4
 80178de:	d003      	beq.n	80178e8 <__mcmp+0x2c>
 80178e0:	d305      	bcc.n	80178ee <__mcmp+0x32>
 80178e2:	2201      	movs	r2, #1
 80178e4:	4610      	mov	r0, r2
 80178e6:	bd30      	pop	{r4, r5, pc}
 80178e8:	4283      	cmp	r3, r0
 80178ea:	d3f3      	bcc.n	80178d4 <__mcmp+0x18>
 80178ec:	e7fa      	b.n	80178e4 <__mcmp+0x28>
 80178ee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80178f2:	e7f7      	b.n	80178e4 <__mcmp+0x28>

080178f4 <__mdiff>:
 80178f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80178f8:	460c      	mov	r4, r1
 80178fa:	4606      	mov	r6, r0
 80178fc:	4611      	mov	r1, r2
 80178fe:	4620      	mov	r0, r4
 8017900:	4617      	mov	r7, r2
 8017902:	f7ff ffdb 	bl	80178bc <__mcmp>
 8017906:	1e05      	subs	r5, r0, #0
 8017908:	d110      	bne.n	801792c <__mdiff+0x38>
 801790a:	4629      	mov	r1, r5
 801790c:	4630      	mov	r0, r6
 801790e:	f7ff fd57 	bl	80173c0 <_Balloc>
 8017912:	b930      	cbnz	r0, 8017922 <__mdiff+0x2e>
 8017914:	4b39      	ldr	r3, [pc, #228]	; (80179fc <__mdiff+0x108>)
 8017916:	4602      	mov	r2, r0
 8017918:	f240 2132 	movw	r1, #562	; 0x232
 801791c:	4838      	ldr	r0, [pc, #224]	; (8017a00 <__mdiff+0x10c>)
 801791e:	f000 fa49 	bl	8017db4 <__assert_func>
 8017922:	2301      	movs	r3, #1
 8017924:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017928:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801792c:	bfa4      	itt	ge
 801792e:	463b      	movge	r3, r7
 8017930:	4627      	movge	r7, r4
 8017932:	4630      	mov	r0, r6
 8017934:	6879      	ldr	r1, [r7, #4]
 8017936:	bfa6      	itte	ge
 8017938:	461c      	movge	r4, r3
 801793a:	2500      	movge	r5, #0
 801793c:	2501      	movlt	r5, #1
 801793e:	f7ff fd3f 	bl	80173c0 <_Balloc>
 8017942:	b920      	cbnz	r0, 801794e <__mdiff+0x5a>
 8017944:	4b2d      	ldr	r3, [pc, #180]	; (80179fc <__mdiff+0x108>)
 8017946:	4602      	mov	r2, r0
 8017948:	f44f 7110 	mov.w	r1, #576	; 0x240
 801794c:	e7e6      	b.n	801791c <__mdiff+0x28>
 801794e:	693e      	ldr	r6, [r7, #16]
 8017950:	60c5      	str	r5, [r0, #12]
 8017952:	6925      	ldr	r5, [r4, #16]
 8017954:	f107 0114 	add.w	r1, r7, #20
 8017958:	f104 0914 	add.w	r9, r4, #20
 801795c:	f100 0e14 	add.w	lr, r0, #20
 8017960:	f107 0210 	add.w	r2, r7, #16
 8017964:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8017968:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 801796c:	46f2      	mov	sl, lr
 801796e:	2700      	movs	r7, #0
 8017970:	f859 3b04 	ldr.w	r3, [r9], #4
 8017974:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017978:	fa1f f883 	uxth.w	r8, r3
 801797c:	fa17 f78b 	uxtah	r7, r7, fp
 8017980:	0c1b      	lsrs	r3, r3, #16
 8017982:	eba7 0808 	sub.w	r8, r7, r8
 8017986:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801798a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801798e:	fa1f f888 	uxth.w	r8, r8
 8017992:	141f      	asrs	r7, r3, #16
 8017994:	454d      	cmp	r5, r9
 8017996:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801799a:	f84a 3b04 	str.w	r3, [sl], #4
 801799e:	d8e7      	bhi.n	8017970 <__mdiff+0x7c>
 80179a0:	1b2b      	subs	r3, r5, r4
 80179a2:	3b15      	subs	r3, #21
 80179a4:	f023 0303 	bic.w	r3, r3, #3
 80179a8:	3304      	adds	r3, #4
 80179aa:	3415      	adds	r4, #21
 80179ac:	42a5      	cmp	r5, r4
 80179ae:	bf38      	it	cc
 80179b0:	2304      	movcc	r3, #4
 80179b2:	4419      	add	r1, r3
 80179b4:	4473      	add	r3, lr
 80179b6:	469e      	mov	lr, r3
 80179b8:	460d      	mov	r5, r1
 80179ba:	4565      	cmp	r5, ip
 80179bc:	d30e      	bcc.n	80179dc <__mdiff+0xe8>
 80179be:	f10c 0203 	add.w	r2, ip, #3
 80179c2:	1a52      	subs	r2, r2, r1
 80179c4:	f022 0203 	bic.w	r2, r2, #3
 80179c8:	3903      	subs	r1, #3
 80179ca:	458c      	cmp	ip, r1
 80179cc:	bf38      	it	cc
 80179ce:	2200      	movcc	r2, #0
 80179d0:	441a      	add	r2, r3
 80179d2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80179d6:	b17b      	cbz	r3, 80179f8 <__mdiff+0x104>
 80179d8:	6106      	str	r6, [r0, #16]
 80179da:	e7a5      	b.n	8017928 <__mdiff+0x34>
 80179dc:	f855 8b04 	ldr.w	r8, [r5], #4
 80179e0:	fa17 f488 	uxtah	r4, r7, r8
 80179e4:	1422      	asrs	r2, r4, #16
 80179e6:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80179ea:	b2a4      	uxth	r4, r4
 80179ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80179f0:	f84e 4b04 	str.w	r4, [lr], #4
 80179f4:	1417      	asrs	r7, r2, #16
 80179f6:	e7e0      	b.n	80179ba <__mdiff+0xc6>
 80179f8:	3e01      	subs	r6, #1
 80179fa:	e7ea      	b.n	80179d2 <__mdiff+0xde>
 80179fc:	0801929c 	.word	0x0801929c
 8017a00:	080192ad 	.word	0x080192ad

08017a04 <__d2b>:
 8017a04:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017a08:	4689      	mov	r9, r1
 8017a0a:	2101      	movs	r1, #1
 8017a0c:	ec57 6b10 	vmov	r6, r7, d0
 8017a10:	4690      	mov	r8, r2
 8017a12:	f7ff fcd5 	bl	80173c0 <_Balloc>
 8017a16:	4604      	mov	r4, r0
 8017a18:	b930      	cbnz	r0, 8017a28 <__d2b+0x24>
 8017a1a:	4602      	mov	r2, r0
 8017a1c:	4b25      	ldr	r3, [pc, #148]	; (8017ab4 <__d2b+0xb0>)
 8017a1e:	4826      	ldr	r0, [pc, #152]	; (8017ab8 <__d2b+0xb4>)
 8017a20:	f240 310a 	movw	r1, #778	; 0x30a
 8017a24:	f000 f9c6 	bl	8017db4 <__assert_func>
 8017a28:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8017a2c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017a30:	bb35      	cbnz	r5, 8017a80 <__d2b+0x7c>
 8017a32:	2e00      	cmp	r6, #0
 8017a34:	9301      	str	r3, [sp, #4]
 8017a36:	d028      	beq.n	8017a8a <__d2b+0x86>
 8017a38:	4668      	mov	r0, sp
 8017a3a:	9600      	str	r6, [sp, #0]
 8017a3c:	f7ff fd8c 	bl	8017558 <__lo0bits>
 8017a40:	9900      	ldr	r1, [sp, #0]
 8017a42:	b300      	cbz	r0, 8017a86 <__d2b+0x82>
 8017a44:	9a01      	ldr	r2, [sp, #4]
 8017a46:	f1c0 0320 	rsb	r3, r0, #32
 8017a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8017a4e:	430b      	orrs	r3, r1
 8017a50:	40c2      	lsrs	r2, r0
 8017a52:	6163      	str	r3, [r4, #20]
 8017a54:	9201      	str	r2, [sp, #4]
 8017a56:	9b01      	ldr	r3, [sp, #4]
 8017a58:	61a3      	str	r3, [r4, #24]
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	bf14      	ite	ne
 8017a5e:	2202      	movne	r2, #2
 8017a60:	2201      	moveq	r2, #1
 8017a62:	6122      	str	r2, [r4, #16]
 8017a64:	b1d5      	cbz	r5, 8017a9c <__d2b+0x98>
 8017a66:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8017a6a:	4405      	add	r5, r0
 8017a6c:	f8c9 5000 	str.w	r5, [r9]
 8017a70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017a74:	f8c8 0000 	str.w	r0, [r8]
 8017a78:	4620      	mov	r0, r4
 8017a7a:	b003      	add	sp, #12
 8017a7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017a84:	e7d5      	b.n	8017a32 <__d2b+0x2e>
 8017a86:	6161      	str	r1, [r4, #20]
 8017a88:	e7e5      	b.n	8017a56 <__d2b+0x52>
 8017a8a:	a801      	add	r0, sp, #4
 8017a8c:	f7ff fd64 	bl	8017558 <__lo0bits>
 8017a90:	9b01      	ldr	r3, [sp, #4]
 8017a92:	6163      	str	r3, [r4, #20]
 8017a94:	2201      	movs	r2, #1
 8017a96:	6122      	str	r2, [r4, #16]
 8017a98:	3020      	adds	r0, #32
 8017a9a:	e7e3      	b.n	8017a64 <__d2b+0x60>
 8017a9c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8017aa0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8017aa4:	f8c9 0000 	str.w	r0, [r9]
 8017aa8:	6918      	ldr	r0, [r3, #16]
 8017aaa:	f7ff fd35 	bl	8017518 <__hi0bits>
 8017aae:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8017ab2:	e7df      	b.n	8017a74 <__d2b+0x70>
 8017ab4:	0801929c 	.word	0x0801929c
 8017ab8:	080192ad 	.word	0x080192ad

08017abc <_calloc_r>:
 8017abc:	b513      	push	{r0, r1, r4, lr}
 8017abe:	434a      	muls	r2, r1
 8017ac0:	4611      	mov	r1, r2
 8017ac2:	9201      	str	r2, [sp, #4]
 8017ac4:	f7fd ff02 	bl	80158cc <_malloc_r>
 8017ac8:	4604      	mov	r4, r0
 8017aca:	b118      	cbz	r0, 8017ad4 <_calloc_r+0x18>
 8017acc:	9a01      	ldr	r2, [sp, #4]
 8017ace:	2100      	movs	r1, #0
 8017ad0:	f7fd fea4 	bl	801581c <memset>
 8017ad4:	4620      	mov	r0, r4
 8017ad6:	b002      	add	sp, #8
 8017ad8:	bd10      	pop	{r4, pc}

08017ada <__ssputs_r>:
 8017ada:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017ade:	688e      	ldr	r6, [r1, #8]
 8017ae0:	429e      	cmp	r6, r3
 8017ae2:	4682      	mov	sl, r0
 8017ae4:	460c      	mov	r4, r1
 8017ae6:	4690      	mov	r8, r2
 8017ae8:	461f      	mov	r7, r3
 8017aea:	d838      	bhi.n	8017b5e <__ssputs_r+0x84>
 8017aec:	898a      	ldrh	r2, [r1, #12]
 8017aee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017af2:	d032      	beq.n	8017b5a <__ssputs_r+0x80>
 8017af4:	6825      	ldr	r5, [r4, #0]
 8017af6:	6909      	ldr	r1, [r1, #16]
 8017af8:	eba5 0901 	sub.w	r9, r5, r1
 8017afc:	6965      	ldr	r5, [r4, #20]
 8017afe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017b02:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017b06:	3301      	adds	r3, #1
 8017b08:	444b      	add	r3, r9
 8017b0a:	106d      	asrs	r5, r5, #1
 8017b0c:	429d      	cmp	r5, r3
 8017b0e:	bf38      	it	cc
 8017b10:	461d      	movcc	r5, r3
 8017b12:	0553      	lsls	r3, r2, #21
 8017b14:	d531      	bpl.n	8017b7a <__ssputs_r+0xa0>
 8017b16:	4629      	mov	r1, r5
 8017b18:	f7fd fed8 	bl	80158cc <_malloc_r>
 8017b1c:	4606      	mov	r6, r0
 8017b1e:	b950      	cbnz	r0, 8017b36 <__ssputs_r+0x5c>
 8017b20:	230c      	movs	r3, #12
 8017b22:	f8ca 3000 	str.w	r3, [sl]
 8017b26:	89a3      	ldrh	r3, [r4, #12]
 8017b28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017b2c:	81a3      	strh	r3, [r4, #12]
 8017b2e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b36:	6921      	ldr	r1, [r4, #16]
 8017b38:	464a      	mov	r2, r9
 8017b3a:	f7fd fe61 	bl	8015800 <memcpy>
 8017b3e:	89a3      	ldrh	r3, [r4, #12]
 8017b40:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017b44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017b48:	81a3      	strh	r3, [r4, #12]
 8017b4a:	6126      	str	r6, [r4, #16]
 8017b4c:	6165      	str	r5, [r4, #20]
 8017b4e:	444e      	add	r6, r9
 8017b50:	eba5 0509 	sub.w	r5, r5, r9
 8017b54:	6026      	str	r6, [r4, #0]
 8017b56:	60a5      	str	r5, [r4, #8]
 8017b58:	463e      	mov	r6, r7
 8017b5a:	42be      	cmp	r6, r7
 8017b5c:	d900      	bls.n	8017b60 <__ssputs_r+0x86>
 8017b5e:	463e      	mov	r6, r7
 8017b60:	4632      	mov	r2, r6
 8017b62:	6820      	ldr	r0, [r4, #0]
 8017b64:	4641      	mov	r1, r8
 8017b66:	f000 f967 	bl	8017e38 <memmove>
 8017b6a:	68a3      	ldr	r3, [r4, #8]
 8017b6c:	6822      	ldr	r2, [r4, #0]
 8017b6e:	1b9b      	subs	r3, r3, r6
 8017b70:	4432      	add	r2, r6
 8017b72:	60a3      	str	r3, [r4, #8]
 8017b74:	6022      	str	r2, [r4, #0]
 8017b76:	2000      	movs	r0, #0
 8017b78:	e7db      	b.n	8017b32 <__ssputs_r+0x58>
 8017b7a:	462a      	mov	r2, r5
 8017b7c:	f000 f976 	bl	8017e6c <_realloc_r>
 8017b80:	4606      	mov	r6, r0
 8017b82:	2800      	cmp	r0, #0
 8017b84:	d1e1      	bne.n	8017b4a <__ssputs_r+0x70>
 8017b86:	6921      	ldr	r1, [r4, #16]
 8017b88:	4650      	mov	r0, sl
 8017b8a:	f7fd fe4f 	bl	801582c <_free_r>
 8017b8e:	e7c7      	b.n	8017b20 <__ssputs_r+0x46>

08017b90 <_svfiprintf_r>:
 8017b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b94:	4698      	mov	r8, r3
 8017b96:	898b      	ldrh	r3, [r1, #12]
 8017b98:	061b      	lsls	r3, r3, #24
 8017b9a:	b09d      	sub	sp, #116	; 0x74
 8017b9c:	4607      	mov	r7, r0
 8017b9e:	460d      	mov	r5, r1
 8017ba0:	4614      	mov	r4, r2
 8017ba2:	d50e      	bpl.n	8017bc2 <_svfiprintf_r+0x32>
 8017ba4:	690b      	ldr	r3, [r1, #16]
 8017ba6:	b963      	cbnz	r3, 8017bc2 <_svfiprintf_r+0x32>
 8017ba8:	2140      	movs	r1, #64	; 0x40
 8017baa:	f7fd fe8f 	bl	80158cc <_malloc_r>
 8017bae:	6028      	str	r0, [r5, #0]
 8017bb0:	6128      	str	r0, [r5, #16]
 8017bb2:	b920      	cbnz	r0, 8017bbe <_svfiprintf_r+0x2e>
 8017bb4:	230c      	movs	r3, #12
 8017bb6:	603b      	str	r3, [r7, #0]
 8017bb8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017bbc:	e0d1      	b.n	8017d62 <_svfiprintf_r+0x1d2>
 8017bbe:	2340      	movs	r3, #64	; 0x40
 8017bc0:	616b      	str	r3, [r5, #20]
 8017bc2:	2300      	movs	r3, #0
 8017bc4:	9309      	str	r3, [sp, #36]	; 0x24
 8017bc6:	2320      	movs	r3, #32
 8017bc8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017bcc:	f8cd 800c 	str.w	r8, [sp, #12]
 8017bd0:	2330      	movs	r3, #48	; 0x30
 8017bd2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8017d7c <_svfiprintf_r+0x1ec>
 8017bd6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017bda:	f04f 0901 	mov.w	r9, #1
 8017bde:	4623      	mov	r3, r4
 8017be0:	469a      	mov	sl, r3
 8017be2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017be6:	b10a      	cbz	r2, 8017bec <_svfiprintf_r+0x5c>
 8017be8:	2a25      	cmp	r2, #37	; 0x25
 8017bea:	d1f9      	bne.n	8017be0 <_svfiprintf_r+0x50>
 8017bec:	ebba 0b04 	subs.w	fp, sl, r4
 8017bf0:	d00b      	beq.n	8017c0a <_svfiprintf_r+0x7a>
 8017bf2:	465b      	mov	r3, fp
 8017bf4:	4622      	mov	r2, r4
 8017bf6:	4629      	mov	r1, r5
 8017bf8:	4638      	mov	r0, r7
 8017bfa:	f7ff ff6e 	bl	8017ada <__ssputs_r>
 8017bfe:	3001      	adds	r0, #1
 8017c00:	f000 80aa 	beq.w	8017d58 <_svfiprintf_r+0x1c8>
 8017c04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017c06:	445a      	add	r2, fp
 8017c08:	9209      	str	r2, [sp, #36]	; 0x24
 8017c0a:	f89a 3000 	ldrb.w	r3, [sl]
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	f000 80a2 	beq.w	8017d58 <_svfiprintf_r+0x1c8>
 8017c14:	2300      	movs	r3, #0
 8017c16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017c1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017c1e:	f10a 0a01 	add.w	sl, sl, #1
 8017c22:	9304      	str	r3, [sp, #16]
 8017c24:	9307      	str	r3, [sp, #28]
 8017c26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017c2a:	931a      	str	r3, [sp, #104]	; 0x68
 8017c2c:	4654      	mov	r4, sl
 8017c2e:	2205      	movs	r2, #5
 8017c30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017c34:	4851      	ldr	r0, [pc, #324]	; (8017d7c <_svfiprintf_r+0x1ec>)
 8017c36:	f7e8 fad3 	bl	80001e0 <memchr>
 8017c3a:	9a04      	ldr	r2, [sp, #16]
 8017c3c:	b9d8      	cbnz	r0, 8017c76 <_svfiprintf_r+0xe6>
 8017c3e:	06d0      	lsls	r0, r2, #27
 8017c40:	bf44      	itt	mi
 8017c42:	2320      	movmi	r3, #32
 8017c44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017c48:	0711      	lsls	r1, r2, #28
 8017c4a:	bf44      	itt	mi
 8017c4c:	232b      	movmi	r3, #43	; 0x2b
 8017c4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017c52:	f89a 3000 	ldrb.w	r3, [sl]
 8017c56:	2b2a      	cmp	r3, #42	; 0x2a
 8017c58:	d015      	beq.n	8017c86 <_svfiprintf_r+0xf6>
 8017c5a:	9a07      	ldr	r2, [sp, #28]
 8017c5c:	4654      	mov	r4, sl
 8017c5e:	2000      	movs	r0, #0
 8017c60:	f04f 0c0a 	mov.w	ip, #10
 8017c64:	4621      	mov	r1, r4
 8017c66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017c6a:	3b30      	subs	r3, #48	; 0x30
 8017c6c:	2b09      	cmp	r3, #9
 8017c6e:	d94e      	bls.n	8017d0e <_svfiprintf_r+0x17e>
 8017c70:	b1b0      	cbz	r0, 8017ca0 <_svfiprintf_r+0x110>
 8017c72:	9207      	str	r2, [sp, #28]
 8017c74:	e014      	b.n	8017ca0 <_svfiprintf_r+0x110>
 8017c76:	eba0 0308 	sub.w	r3, r0, r8
 8017c7a:	fa09 f303 	lsl.w	r3, r9, r3
 8017c7e:	4313      	orrs	r3, r2
 8017c80:	9304      	str	r3, [sp, #16]
 8017c82:	46a2      	mov	sl, r4
 8017c84:	e7d2      	b.n	8017c2c <_svfiprintf_r+0x9c>
 8017c86:	9b03      	ldr	r3, [sp, #12]
 8017c88:	1d19      	adds	r1, r3, #4
 8017c8a:	681b      	ldr	r3, [r3, #0]
 8017c8c:	9103      	str	r1, [sp, #12]
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	bfbb      	ittet	lt
 8017c92:	425b      	neglt	r3, r3
 8017c94:	f042 0202 	orrlt.w	r2, r2, #2
 8017c98:	9307      	strge	r3, [sp, #28]
 8017c9a:	9307      	strlt	r3, [sp, #28]
 8017c9c:	bfb8      	it	lt
 8017c9e:	9204      	strlt	r2, [sp, #16]
 8017ca0:	7823      	ldrb	r3, [r4, #0]
 8017ca2:	2b2e      	cmp	r3, #46	; 0x2e
 8017ca4:	d10c      	bne.n	8017cc0 <_svfiprintf_r+0x130>
 8017ca6:	7863      	ldrb	r3, [r4, #1]
 8017ca8:	2b2a      	cmp	r3, #42	; 0x2a
 8017caa:	d135      	bne.n	8017d18 <_svfiprintf_r+0x188>
 8017cac:	9b03      	ldr	r3, [sp, #12]
 8017cae:	1d1a      	adds	r2, r3, #4
 8017cb0:	681b      	ldr	r3, [r3, #0]
 8017cb2:	9203      	str	r2, [sp, #12]
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	bfb8      	it	lt
 8017cb8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8017cbc:	3402      	adds	r4, #2
 8017cbe:	9305      	str	r3, [sp, #20]
 8017cc0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8017d8c <_svfiprintf_r+0x1fc>
 8017cc4:	7821      	ldrb	r1, [r4, #0]
 8017cc6:	2203      	movs	r2, #3
 8017cc8:	4650      	mov	r0, sl
 8017cca:	f7e8 fa89 	bl	80001e0 <memchr>
 8017cce:	b140      	cbz	r0, 8017ce2 <_svfiprintf_r+0x152>
 8017cd0:	2340      	movs	r3, #64	; 0x40
 8017cd2:	eba0 000a 	sub.w	r0, r0, sl
 8017cd6:	fa03 f000 	lsl.w	r0, r3, r0
 8017cda:	9b04      	ldr	r3, [sp, #16]
 8017cdc:	4303      	orrs	r3, r0
 8017cde:	3401      	adds	r4, #1
 8017ce0:	9304      	str	r3, [sp, #16]
 8017ce2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ce6:	4826      	ldr	r0, [pc, #152]	; (8017d80 <_svfiprintf_r+0x1f0>)
 8017ce8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8017cec:	2206      	movs	r2, #6
 8017cee:	f7e8 fa77 	bl	80001e0 <memchr>
 8017cf2:	2800      	cmp	r0, #0
 8017cf4:	d038      	beq.n	8017d68 <_svfiprintf_r+0x1d8>
 8017cf6:	4b23      	ldr	r3, [pc, #140]	; (8017d84 <_svfiprintf_r+0x1f4>)
 8017cf8:	bb1b      	cbnz	r3, 8017d42 <_svfiprintf_r+0x1b2>
 8017cfa:	9b03      	ldr	r3, [sp, #12]
 8017cfc:	3307      	adds	r3, #7
 8017cfe:	f023 0307 	bic.w	r3, r3, #7
 8017d02:	3308      	adds	r3, #8
 8017d04:	9303      	str	r3, [sp, #12]
 8017d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017d08:	4433      	add	r3, r6
 8017d0a:	9309      	str	r3, [sp, #36]	; 0x24
 8017d0c:	e767      	b.n	8017bde <_svfiprintf_r+0x4e>
 8017d0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8017d12:	460c      	mov	r4, r1
 8017d14:	2001      	movs	r0, #1
 8017d16:	e7a5      	b.n	8017c64 <_svfiprintf_r+0xd4>
 8017d18:	2300      	movs	r3, #0
 8017d1a:	3401      	adds	r4, #1
 8017d1c:	9305      	str	r3, [sp, #20]
 8017d1e:	4619      	mov	r1, r3
 8017d20:	f04f 0c0a 	mov.w	ip, #10
 8017d24:	4620      	mov	r0, r4
 8017d26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017d2a:	3a30      	subs	r2, #48	; 0x30
 8017d2c:	2a09      	cmp	r2, #9
 8017d2e:	d903      	bls.n	8017d38 <_svfiprintf_r+0x1a8>
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d0c5      	beq.n	8017cc0 <_svfiprintf_r+0x130>
 8017d34:	9105      	str	r1, [sp, #20]
 8017d36:	e7c3      	b.n	8017cc0 <_svfiprintf_r+0x130>
 8017d38:	fb0c 2101 	mla	r1, ip, r1, r2
 8017d3c:	4604      	mov	r4, r0
 8017d3e:	2301      	movs	r3, #1
 8017d40:	e7f0      	b.n	8017d24 <_svfiprintf_r+0x194>
 8017d42:	ab03      	add	r3, sp, #12
 8017d44:	9300      	str	r3, [sp, #0]
 8017d46:	462a      	mov	r2, r5
 8017d48:	4b0f      	ldr	r3, [pc, #60]	; (8017d88 <_svfiprintf_r+0x1f8>)
 8017d4a:	a904      	add	r1, sp, #16
 8017d4c:	4638      	mov	r0, r7
 8017d4e:	f7fd feb7 	bl	8015ac0 <_printf_float>
 8017d52:	1c42      	adds	r2, r0, #1
 8017d54:	4606      	mov	r6, r0
 8017d56:	d1d6      	bne.n	8017d06 <_svfiprintf_r+0x176>
 8017d58:	89ab      	ldrh	r3, [r5, #12]
 8017d5a:	065b      	lsls	r3, r3, #25
 8017d5c:	f53f af2c 	bmi.w	8017bb8 <_svfiprintf_r+0x28>
 8017d60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017d62:	b01d      	add	sp, #116	; 0x74
 8017d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017d68:	ab03      	add	r3, sp, #12
 8017d6a:	9300      	str	r3, [sp, #0]
 8017d6c:	462a      	mov	r2, r5
 8017d6e:	4b06      	ldr	r3, [pc, #24]	; (8017d88 <_svfiprintf_r+0x1f8>)
 8017d70:	a904      	add	r1, sp, #16
 8017d72:	4638      	mov	r0, r7
 8017d74:	f7fe f948 	bl	8016008 <_printf_i>
 8017d78:	e7eb      	b.n	8017d52 <_svfiprintf_r+0x1c2>
 8017d7a:	bf00      	nop
 8017d7c:	0801940c 	.word	0x0801940c
 8017d80:	08019416 	.word	0x08019416
 8017d84:	08015ac1 	.word	0x08015ac1
 8017d88:	08017adb 	.word	0x08017adb
 8017d8c:	08019412 	.word	0x08019412

08017d90 <_read_r>:
 8017d90:	b538      	push	{r3, r4, r5, lr}
 8017d92:	4d07      	ldr	r5, [pc, #28]	; (8017db0 <_read_r+0x20>)
 8017d94:	4604      	mov	r4, r0
 8017d96:	4608      	mov	r0, r1
 8017d98:	4611      	mov	r1, r2
 8017d9a:	2200      	movs	r2, #0
 8017d9c:	602a      	str	r2, [r5, #0]
 8017d9e:	461a      	mov	r2, r3
 8017da0:	f7ed f886 	bl	8004eb0 <_read>
 8017da4:	1c43      	adds	r3, r0, #1
 8017da6:	d102      	bne.n	8017dae <_read_r+0x1e>
 8017da8:	682b      	ldr	r3, [r5, #0]
 8017daa:	b103      	cbz	r3, 8017dae <_read_r+0x1e>
 8017dac:	6023      	str	r3, [r4, #0]
 8017dae:	bd38      	pop	{r3, r4, r5, pc}
 8017db0:	20014bf8 	.word	0x20014bf8

08017db4 <__assert_func>:
 8017db4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017db6:	4614      	mov	r4, r2
 8017db8:	461a      	mov	r2, r3
 8017dba:	4b09      	ldr	r3, [pc, #36]	; (8017de0 <__assert_func+0x2c>)
 8017dbc:	681b      	ldr	r3, [r3, #0]
 8017dbe:	4605      	mov	r5, r0
 8017dc0:	68d8      	ldr	r0, [r3, #12]
 8017dc2:	b14c      	cbz	r4, 8017dd8 <__assert_func+0x24>
 8017dc4:	4b07      	ldr	r3, [pc, #28]	; (8017de4 <__assert_func+0x30>)
 8017dc6:	9100      	str	r1, [sp, #0]
 8017dc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017dcc:	4906      	ldr	r1, [pc, #24]	; (8017de8 <__assert_func+0x34>)
 8017dce:	462b      	mov	r3, r5
 8017dd0:	f000 f80e 	bl	8017df0 <fiprintf>
 8017dd4:	f000 fa98 	bl	8018308 <abort>
 8017dd8:	4b04      	ldr	r3, [pc, #16]	; (8017dec <__assert_func+0x38>)
 8017dda:	461c      	mov	r4, r3
 8017ddc:	e7f3      	b.n	8017dc6 <__assert_func+0x12>
 8017dde:	bf00      	nop
 8017de0:	2000019c 	.word	0x2000019c
 8017de4:	0801941d 	.word	0x0801941d
 8017de8:	0801942a 	.word	0x0801942a
 8017dec:	08019458 	.word	0x08019458

08017df0 <fiprintf>:
 8017df0:	b40e      	push	{r1, r2, r3}
 8017df2:	b503      	push	{r0, r1, lr}
 8017df4:	4601      	mov	r1, r0
 8017df6:	ab03      	add	r3, sp, #12
 8017df8:	4805      	ldr	r0, [pc, #20]	; (8017e10 <fiprintf+0x20>)
 8017dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8017dfe:	6800      	ldr	r0, [r0, #0]
 8017e00:	9301      	str	r3, [sp, #4]
 8017e02:	f000 f883 	bl	8017f0c <_vfiprintf_r>
 8017e06:	b002      	add	sp, #8
 8017e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8017e0c:	b003      	add	sp, #12
 8017e0e:	4770      	bx	lr
 8017e10:	2000019c 	.word	0x2000019c

08017e14 <__ascii_mbtowc>:
 8017e14:	b082      	sub	sp, #8
 8017e16:	b901      	cbnz	r1, 8017e1a <__ascii_mbtowc+0x6>
 8017e18:	a901      	add	r1, sp, #4
 8017e1a:	b142      	cbz	r2, 8017e2e <__ascii_mbtowc+0x1a>
 8017e1c:	b14b      	cbz	r3, 8017e32 <__ascii_mbtowc+0x1e>
 8017e1e:	7813      	ldrb	r3, [r2, #0]
 8017e20:	600b      	str	r3, [r1, #0]
 8017e22:	7812      	ldrb	r2, [r2, #0]
 8017e24:	1e10      	subs	r0, r2, #0
 8017e26:	bf18      	it	ne
 8017e28:	2001      	movne	r0, #1
 8017e2a:	b002      	add	sp, #8
 8017e2c:	4770      	bx	lr
 8017e2e:	4610      	mov	r0, r2
 8017e30:	e7fb      	b.n	8017e2a <__ascii_mbtowc+0x16>
 8017e32:	f06f 0001 	mvn.w	r0, #1
 8017e36:	e7f8      	b.n	8017e2a <__ascii_mbtowc+0x16>

08017e38 <memmove>:
 8017e38:	4288      	cmp	r0, r1
 8017e3a:	b510      	push	{r4, lr}
 8017e3c:	eb01 0402 	add.w	r4, r1, r2
 8017e40:	d902      	bls.n	8017e48 <memmove+0x10>
 8017e42:	4284      	cmp	r4, r0
 8017e44:	4623      	mov	r3, r4
 8017e46:	d807      	bhi.n	8017e58 <memmove+0x20>
 8017e48:	1e43      	subs	r3, r0, #1
 8017e4a:	42a1      	cmp	r1, r4
 8017e4c:	d008      	beq.n	8017e60 <memmove+0x28>
 8017e4e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017e52:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017e56:	e7f8      	b.n	8017e4a <memmove+0x12>
 8017e58:	4402      	add	r2, r0
 8017e5a:	4601      	mov	r1, r0
 8017e5c:	428a      	cmp	r2, r1
 8017e5e:	d100      	bne.n	8017e62 <memmove+0x2a>
 8017e60:	bd10      	pop	{r4, pc}
 8017e62:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017e66:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017e6a:	e7f7      	b.n	8017e5c <memmove+0x24>

08017e6c <_realloc_r>:
 8017e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e6e:	4607      	mov	r7, r0
 8017e70:	4614      	mov	r4, r2
 8017e72:	460e      	mov	r6, r1
 8017e74:	b921      	cbnz	r1, 8017e80 <_realloc_r+0x14>
 8017e76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8017e7a:	4611      	mov	r1, r2
 8017e7c:	f7fd bd26 	b.w	80158cc <_malloc_r>
 8017e80:	b922      	cbnz	r2, 8017e8c <_realloc_r+0x20>
 8017e82:	f7fd fcd3 	bl	801582c <_free_r>
 8017e86:	4625      	mov	r5, r4
 8017e88:	4628      	mov	r0, r5
 8017e8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e8c:	f000 faa8 	bl	80183e0 <_malloc_usable_size_r>
 8017e90:	42a0      	cmp	r0, r4
 8017e92:	d20f      	bcs.n	8017eb4 <_realloc_r+0x48>
 8017e94:	4621      	mov	r1, r4
 8017e96:	4638      	mov	r0, r7
 8017e98:	f7fd fd18 	bl	80158cc <_malloc_r>
 8017e9c:	4605      	mov	r5, r0
 8017e9e:	2800      	cmp	r0, #0
 8017ea0:	d0f2      	beq.n	8017e88 <_realloc_r+0x1c>
 8017ea2:	4631      	mov	r1, r6
 8017ea4:	4622      	mov	r2, r4
 8017ea6:	f7fd fcab 	bl	8015800 <memcpy>
 8017eaa:	4631      	mov	r1, r6
 8017eac:	4638      	mov	r0, r7
 8017eae:	f7fd fcbd 	bl	801582c <_free_r>
 8017eb2:	e7e9      	b.n	8017e88 <_realloc_r+0x1c>
 8017eb4:	4635      	mov	r5, r6
 8017eb6:	e7e7      	b.n	8017e88 <_realloc_r+0x1c>

08017eb8 <__sfputc_r>:
 8017eb8:	6893      	ldr	r3, [r2, #8]
 8017eba:	3b01      	subs	r3, #1
 8017ebc:	2b00      	cmp	r3, #0
 8017ebe:	b410      	push	{r4}
 8017ec0:	6093      	str	r3, [r2, #8]
 8017ec2:	da08      	bge.n	8017ed6 <__sfputc_r+0x1e>
 8017ec4:	6994      	ldr	r4, [r2, #24]
 8017ec6:	42a3      	cmp	r3, r4
 8017ec8:	db01      	blt.n	8017ece <__sfputc_r+0x16>
 8017eca:	290a      	cmp	r1, #10
 8017ecc:	d103      	bne.n	8017ed6 <__sfputc_r+0x1e>
 8017ece:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ed2:	f000 b94b 	b.w	801816c <__swbuf_r>
 8017ed6:	6813      	ldr	r3, [r2, #0]
 8017ed8:	1c58      	adds	r0, r3, #1
 8017eda:	6010      	str	r0, [r2, #0]
 8017edc:	7019      	strb	r1, [r3, #0]
 8017ede:	4608      	mov	r0, r1
 8017ee0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017ee4:	4770      	bx	lr

08017ee6 <__sfputs_r>:
 8017ee6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ee8:	4606      	mov	r6, r0
 8017eea:	460f      	mov	r7, r1
 8017eec:	4614      	mov	r4, r2
 8017eee:	18d5      	adds	r5, r2, r3
 8017ef0:	42ac      	cmp	r4, r5
 8017ef2:	d101      	bne.n	8017ef8 <__sfputs_r+0x12>
 8017ef4:	2000      	movs	r0, #0
 8017ef6:	e007      	b.n	8017f08 <__sfputs_r+0x22>
 8017ef8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017efc:	463a      	mov	r2, r7
 8017efe:	4630      	mov	r0, r6
 8017f00:	f7ff ffda 	bl	8017eb8 <__sfputc_r>
 8017f04:	1c43      	adds	r3, r0, #1
 8017f06:	d1f3      	bne.n	8017ef0 <__sfputs_r+0xa>
 8017f08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017f0c <_vfiprintf_r>:
 8017f0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f10:	460d      	mov	r5, r1
 8017f12:	b09d      	sub	sp, #116	; 0x74
 8017f14:	4614      	mov	r4, r2
 8017f16:	4698      	mov	r8, r3
 8017f18:	4606      	mov	r6, r0
 8017f1a:	b118      	cbz	r0, 8017f24 <_vfiprintf_r+0x18>
 8017f1c:	6983      	ldr	r3, [r0, #24]
 8017f1e:	b90b      	cbnz	r3, 8017f24 <_vfiprintf_r+0x18>
 8017f20:	f7fd fb7e 	bl	8015620 <__sinit>
 8017f24:	4b89      	ldr	r3, [pc, #548]	; (801814c <_vfiprintf_r+0x240>)
 8017f26:	429d      	cmp	r5, r3
 8017f28:	d11b      	bne.n	8017f62 <_vfiprintf_r+0x56>
 8017f2a:	6875      	ldr	r5, [r6, #4]
 8017f2c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017f2e:	07d9      	lsls	r1, r3, #31
 8017f30:	d405      	bmi.n	8017f3e <_vfiprintf_r+0x32>
 8017f32:	89ab      	ldrh	r3, [r5, #12]
 8017f34:	059a      	lsls	r2, r3, #22
 8017f36:	d402      	bmi.n	8017f3e <_vfiprintf_r+0x32>
 8017f38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017f3a:	f7fd fc4e 	bl	80157da <__retarget_lock_acquire_recursive>
 8017f3e:	89ab      	ldrh	r3, [r5, #12]
 8017f40:	071b      	lsls	r3, r3, #28
 8017f42:	d501      	bpl.n	8017f48 <_vfiprintf_r+0x3c>
 8017f44:	692b      	ldr	r3, [r5, #16]
 8017f46:	b9eb      	cbnz	r3, 8017f84 <_vfiprintf_r+0x78>
 8017f48:	4629      	mov	r1, r5
 8017f4a:	4630      	mov	r0, r6
 8017f4c:	f000 f96e 	bl	801822c <__swsetup_r>
 8017f50:	b1c0      	cbz	r0, 8017f84 <_vfiprintf_r+0x78>
 8017f52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017f54:	07dc      	lsls	r4, r3, #31
 8017f56:	d50e      	bpl.n	8017f76 <_vfiprintf_r+0x6a>
 8017f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017f5c:	b01d      	add	sp, #116	; 0x74
 8017f5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f62:	4b7b      	ldr	r3, [pc, #492]	; (8018150 <_vfiprintf_r+0x244>)
 8017f64:	429d      	cmp	r5, r3
 8017f66:	d101      	bne.n	8017f6c <_vfiprintf_r+0x60>
 8017f68:	68b5      	ldr	r5, [r6, #8]
 8017f6a:	e7df      	b.n	8017f2c <_vfiprintf_r+0x20>
 8017f6c:	4b79      	ldr	r3, [pc, #484]	; (8018154 <_vfiprintf_r+0x248>)
 8017f6e:	429d      	cmp	r5, r3
 8017f70:	bf08      	it	eq
 8017f72:	68f5      	ldreq	r5, [r6, #12]
 8017f74:	e7da      	b.n	8017f2c <_vfiprintf_r+0x20>
 8017f76:	89ab      	ldrh	r3, [r5, #12]
 8017f78:	0598      	lsls	r0, r3, #22
 8017f7a:	d4ed      	bmi.n	8017f58 <_vfiprintf_r+0x4c>
 8017f7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017f7e:	f7fd fc2d 	bl	80157dc <__retarget_lock_release_recursive>
 8017f82:	e7e9      	b.n	8017f58 <_vfiprintf_r+0x4c>
 8017f84:	2300      	movs	r3, #0
 8017f86:	9309      	str	r3, [sp, #36]	; 0x24
 8017f88:	2320      	movs	r3, #32
 8017f8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017f8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017f92:	2330      	movs	r3, #48	; 0x30
 8017f94:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8018158 <_vfiprintf_r+0x24c>
 8017f98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017f9c:	f04f 0901 	mov.w	r9, #1
 8017fa0:	4623      	mov	r3, r4
 8017fa2:	469a      	mov	sl, r3
 8017fa4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017fa8:	b10a      	cbz	r2, 8017fae <_vfiprintf_r+0xa2>
 8017faa:	2a25      	cmp	r2, #37	; 0x25
 8017fac:	d1f9      	bne.n	8017fa2 <_vfiprintf_r+0x96>
 8017fae:	ebba 0b04 	subs.w	fp, sl, r4
 8017fb2:	d00b      	beq.n	8017fcc <_vfiprintf_r+0xc0>
 8017fb4:	465b      	mov	r3, fp
 8017fb6:	4622      	mov	r2, r4
 8017fb8:	4629      	mov	r1, r5
 8017fba:	4630      	mov	r0, r6
 8017fbc:	f7ff ff93 	bl	8017ee6 <__sfputs_r>
 8017fc0:	3001      	adds	r0, #1
 8017fc2:	f000 80aa 	beq.w	801811a <_vfiprintf_r+0x20e>
 8017fc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017fc8:	445a      	add	r2, fp
 8017fca:	9209      	str	r2, [sp, #36]	; 0x24
 8017fcc:	f89a 3000 	ldrb.w	r3, [sl]
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	f000 80a2 	beq.w	801811a <_vfiprintf_r+0x20e>
 8017fd6:	2300      	movs	r3, #0
 8017fd8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017fdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017fe0:	f10a 0a01 	add.w	sl, sl, #1
 8017fe4:	9304      	str	r3, [sp, #16]
 8017fe6:	9307      	str	r3, [sp, #28]
 8017fe8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017fec:	931a      	str	r3, [sp, #104]	; 0x68
 8017fee:	4654      	mov	r4, sl
 8017ff0:	2205      	movs	r2, #5
 8017ff2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017ff6:	4858      	ldr	r0, [pc, #352]	; (8018158 <_vfiprintf_r+0x24c>)
 8017ff8:	f7e8 f8f2 	bl	80001e0 <memchr>
 8017ffc:	9a04      	ldr	r2, [sp, #16]
 8017ffe:	b9d8      	cbnz	r0, 8018038 <_vfiprintf_r+0x12c>
 8018000:	06d1      	lsls	r1, r2, #27
 8018002:	bf44      	itt	mi
 8018004:	2320      	movmi	r3, #32
 8018006:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801800a:	0713      	lsls	r3, r2, #28
 801800c:	bf44      	itt	mi
 801800e:	232b      	movmi	r3, #43	; 0x2b
 8018010:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018014:	f89a 3000 	ldrb.w	r3, [sl]
 8018018:	2b2a      	cmp	r3, #42	; 0x2a
 801801a:	d015      	beq.n	8018048 <_vfiprintf_r+0x13c>
 801801c:	9a07      	ldr	r2, [sp, #28]
 801801e:	4654      	mov	r4, sl
 8018020:	2000      	movs	r0, #0
 8018022:	f04f 0c0a 	mov.w	ip, #10
 8018026:	4621      	mov	r1, r4
 8018028:	f811 3b01 	ldrb.w	r3, [r1], #1
 801802c:	3b30      	subs	r3, #48	; 0x30
 801802e:	2b09      	cmp	r3, #9
 8018030:	d94e      	bls.n	80180d0 <_vfiprintf_r+0x1c4>
 8018032:	b1b0      	cbz	r0, 8018062 <_vfiprintf_r+0x156>
 8018034:	9207      	str	r2, [sp, #28]
 8018036:	e014      	b.n	8018062 <_vfiprintf_r+0x156>
 8018038:	eba0 0308 	sub.w	r3, r0, r8
 801803c:	fa09 f303 	lsl.w	r3, r9, r3
 8018040:	4313      	orrs	r3, r2
 8018042:	9304      	str	r3, [sp, #16]
 8018044:	46a2      	mov	sl, r4
 8018046:	e7d2      	b.n	8017fee <_vfiprintf_r+0xe2>
 8018048:	9b03      	ldr	r3, [sp, #12]
 801804a:	1d19      	adds	r1, r3, #4
 801804c:	681b      	ldr	r3, [r3, #0]
 801804e:	9103      	str	r1, [sp, #12]
 8018050:	2b00      	cmp	r3, #0
 8018052:	bfbb      	ittet	lt
 8018054:	425b      	neglt	r3, r3
 8018056:	f042 0202 	orrlt.w	r2, r2, #2
 801805a:	9307      	strge	r3, [sp, #28]
 801805c:	9307      	strlt	r3, [sp, #28]
 801805e:	bfb8      	it	lt
 8018060:	9204      	strlt	r2, [sp, #16]
 8018062:	7823      	ldrb	r3, [r4, #0]
 8018064:	2b2e      	cmp	r3, #46	; 0x2e
 8018066:	d10c      	bne.n	8018082 <_vfiprintf_r+0x176>
 8018068:	7863      	ldrb	r3, [r4, #1]
 801806a:	2b2a      	cmp	r3, #42	; 0x2a
 801806c:	d135      	bne.n	80180da <_vfiprintf_r+0x1ce>
 801806e:	9b03      	ldr	r3, [sp, #12]
 8018070:	1d1a      	adds	r2, r3, #4
 8018072:	681b      	ldr	r3, [r3, #0]
 8018074:	9203      	str	r2, [sp, #12]
 8018076:	2b00      	cmp	r3, #0
 8018078:	bfb8      	it	lt
 801807a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801807e:	3402      	adds	r4, #2
 8018080:	9305      	str	r3, [sp, #20]
 8018082:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8018168 <_vfiprintf_r+0x25c>
 8018086:	7821      	ldrb	r1, [r4, #0]
 8018088:	2203      	movs	r2, #3
 801808a:	4650      	mov	r0, sl
 801808c:	f7e8 f8a8 	bl	80001e0 <memchr>
 8018090:	b140      	cbz	r0, 80180a4 <_vfiprintf_r+0x198>
 8018092:	2340      	movs	r3, #64	; 0x40
 8018094:	eba0 000a 	sub.w	r0, r0, sl
 8018098:	fa03 f000 	lsl.w	r0, r3, r0
 801809c:	9b04      	ldr	r3, [sp, #16]
 801809e:	4303      	orrs	r3, r0
 80180a0:	3401      	adds	r4, #1
 80180a2:	9304      	str	r3, [sp, #16]
 80180a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80180a8:	482c      	ldr	r0, [pc, #176]	; (801815c <_vfiprintf_r+0x250>)
 80180aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80180ae:	2206      	movs	r2, #6
 80180b0:	f7e8 f896 	bl	80001e0 <memchr>
 80180b4:	2800      	cmp	r0, #0
 80180b6:	d03f      	beq.n	8018138 <_vfiprintf_r+0x22c>
 80180b8:	4b29      	ldr	r3, [pc, #164]	; (8018160 <_vfiprintf_r+0x254>)
 80180ba:	bb1b      	cbnz	r3, 8018104 <_vfiprintf_r+0x1f8>
 80180bc:	9b03      	ldr	r3, [sp, #12]
 80180be:	3307      	adds	r3, #7
 80180c0:	f023 0307 	bic.w	r3, r3, #7
 80180c4:	3308      	adds	r3, #8
 80180c6:	9303      	str	r3, [sp, #12]
 80180c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80180ca:	443b      	add	r3, r7
 80180cc:	9309      	str	r3, [sp, #36]	; 0x24
 80180ce:	e767      	b.n	8017fa0 <_vfiprintf_r+0x94>
 80180d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80180d4:	460c      	mov	r4, r1
 80180d6:	2001      	movs	r0, #1
 80180d8:	e7a5      	b.n	8018026 <_vfiprintf_r+0x11a>
 80180da:	2300      	movs	r3, #0
 80180dc:	3401      	adds	r4, #1
 80180de:	9305      	str	r3, [sp, #20]
 80180e0:	4619      	mov	r1, r3
 80180e2:	f04f 0c0a 	mov.w	ip, #10
 80180e6:	4620      	mov	r0, r4
 80180e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80180ec:	3a30      	subs	r2, #48	; 0x30
 80180ee:	2a09      	cmp	r2, #9
 80180f0:	d903      	bls.n	80180fa <_vfiprintf_r+0x1ee>
 80180f2:	2b00      	cmp	r3, #0
 80180f4:	d0c5      	beq.n	8018082 <_vfiprintf_r+0x176>
 80180f6:	9105      	str	r1, [sp, #20]
 80180f8:	e7c3      	b.n	8018082 <_vfiprintf_r+0x176>
 80180fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80180fe:	4604      	mov	r4, r0
 8018100:	2301      	movs	r3, #1
 8018102:	e7f0      	b.n	80180e6 <_vfiprintf_r+0x1da>
 8018104:	ab03      	add	r3, sp, #12
 8018106:	9300      	str	r3, [sp, #0]
 8018108:	462a      	mov	r2, r5
 801810a:	4b16      	ldr	r3, [pc, #88]	; (8018164 <_vfiprintf_r+0x258>)
 801810c:	a904      	add	r1, sp, #16
 801810e:	4630      	mov	r0, r6
 8018110:	f7fd fcd6 	bl	8015ac0 <_printf_float>
 8018114:	4607      	mov	r7, r0
 8018116:	1c78      	adds	r0, r7, #1
 8018118:	d1d6      	bne.n	80180c8 <_vfiprintf_r+0x1bc>
 801811a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801811c:	07d9      	lsls	r1, r3, #31
 801811e:	d405      	bmi.n	801812c <_vfiprintf_r+0x220>
 8018120:	89ab      	ldrh	r3, [r5, #12]
 8018122:	059a      	lsls	r2, r3, #22
 8018124:	d402      	bmi.n	801812c <_vfiprintf_r+0x220>
 8018126:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018128:	f7fd fb58 	bl	80157dc <__retarget_lock_release_recursive>
 801812c:	89ab      	ldrh	r3, [r5, #12]
 801812e:	065b      	lsls	r3, r3, #25
 8018130:	f53f af12 	bmi.w	8017f58 <_vfiprintf_r+0x4c>
 8018134:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018136:	e711      	b.n	8017f5c <_vfiprintf_r+0x50>
 8018138:	ab03      	add	r3, sp, #12
 801813a:	9300      	str	r3, [sp, #0]
 801813c:	462a      	mov	r2, r5
 801813e:	4b09      	ldr	r3, [pc, #36]	; (8018164 <_vfiprintf_r+0x258>)
 8018140:	a904      	add	r1, sp, #16
 8018142:	4630      	mov	r0, r6
 8018144:	f7fd ff60 	bl	8016008 <_printf_i>
 8018148:	e7e4      	b.n	8018114 <_vfiprintf_r+0x208>
 801814a:	bf00      	nop
 801814c:	0801917c 	.word	0x0801917c
 8018150:	0801919c 	.word	0x0801919c
 8018154:	0801915c 	.word	0x0801915c
 8018158:	0801940c 	.word	0x0801940c
 801815c:	08019416 	.word	0x08019416
 8018160:	08015ac1 	.word	0x08015ac1
 8018164:	08017ee7 	.word	0x08017ee7
 8018168:	08019412 	.word	0x08019412

0801816c <__swbuf_r>:
 801816c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801816e:	460e      	mov	r6, r1
 8018170:	4614      	mov	r4, r2
 8018172:	4605      	mov	r5, r0
 8018174:	b118      	cbz	r0, 801817e <__swbuf_r+0x12>
 8018176:	6983      	ldr	r3, [r0, #24]
 8018178:	b90b      	cbnz	r3, 801817e <__swbuf_r+0x12>
 801817a:	f7fd fa51 	bl	8015620 <__sinit>
 801817e:	4b21      	ldr	r3, [pc, #132]	; (8018204 <__swbuf_r+0x98>)
 8018180:	429c      	cmp	r4, r3
 8018182:	d12b      	bne.n	80181dc <__swbuf_r+0x70>
 8018184:	686c      	ldr	r4, [r5, #4]
 8018186:	69a3      	ldr	r3, [r4, #24]
 8018188:	60a3      	str	r3, [r4, #8]
 801818a:	89a3      	ldrh	r3, [r4, #12]
 801818c:	071a      	lsls	r2, r3, #28
 801818e:	d52f      	bpl.n	80181f0 <__swbuf_r+0x84>
 8018190:	6923      	ldr	r3, [r4, #16]
 8018192:	b36b      	cbz	r3, 80181f0 <__swbuf_r+0x84>
 8018194:	6923      	ldr	r3, [r4, #16]
 8018196:	6820      	ldr	r0, [r4, #0]
 8018198:	1ac0      	subs	r0, r0, r3
 801819a:	6963      	ldr	r3, [r4, #20]
 801819c:	b2f6      	uxtb	r6, r6
 801819e:	4283      	cmp	r3, r0
 80181a0:	4637      	mov	r7, r6
 80181a2:	dc04      	bgt.n	80181ae <__swbuf_r+0x42>
 80181a4:	4621      	mov	r1, r4
 80181a6:	4628      	mov	r0, r5
 80181a8:	f7ff f8ac 	bl	8017304 <_fflush_r>
 80181ac:	bb30      	cbnz	r0, 80181fc <__swbuf_r+0x90>
 80181ae:	68a3      	ldr	r3, [r4, #8]
 80181b0:	3b01      	subs	r3, #1
 80181b2:	60a3      	str	r3, [r4, #8]
 80181b4:	6823      	ldr	r3, [r4, #0]
 80181b6:	1c5a      	adds	r2, r3, #1
 80181b8:	6022      	str	r2, [r4, #0]
 80181ba:	701e      	strb	r6, [r3, #0]
 80181bc:	6963      	ldr	r3, [r4, #20]
 80181be:	3001      	adds	r0, #1
 80181c0:	4283      	cmp	r3, r0
 80181c2:	d004      	beq.n	80181ce <__swbuf_r+0x62>
 80181c4:	89a3      	ldrh	r3, [r4, #12]
 80181c6:	07db      	lsls	r3, r3, #31
 80181c8:	d506      	bpl.n	80181d8 <__swbuf_r+0x6c>
 80181ca:	2e0a      	cmp	r6, #10
 80181cc:	d104      	bne.n	80181d8 <__swbuf_r+0x6c>
 80181ce:	4621      	mov	r1, r4
 80181d0:	4628      	mov	r0, r5
 80181d2:	f7ff f897 	bl	8017304 <_fflush_r>
 80181d6:	b988      	cbnz	r0, 80181fc <__swbuf_r+0x90>
 80181d8:	4638      	mov	r0, r7
 80181da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80181dc:	4b0a      	ldr	r3, [pc, #40]	; (8018208 <__swbuf_r+0x9c>)
 80181de:	429c      	cmp	r4, r3
 80181e0:	d101      	bne.n	80181e6 <__swbuf_r+0x7a>
 80181e2:	68ac      	ldr	r4, [r5, #8]
 80181e4:	e7cf      	b.n	8018186 <__swbuf_r+0x1a>
 80181e6:	4b09      	ldr	r3, [pc, #36]	; (801820c <__swbuf_r+0xa0>)
 80181e8:	429c      	cmp	r4, r3
 80181ea:	bf08      	it	eq
 80181ec:	68ec      	ldreq	r4, [r5, #12]
 80181ee:	e7ca      	b.n	8018186 <__swbuf_r+0x1a>
 80181f0:	4621      	mov	r1, r4
 80181f2:	4628      	mov	r0, r5
 80181f4:	f000 f81a 	bl	801822c <__swsetup_r>
 80181f8:	2800      	cmp	r0, #0
 80181fa:	d0cb      	beq.n	8018194 <__swbuf_r+0x28>
 80181fc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018200:	e7ea      	b.n	80181d8 <__swbuf_r+0x6c>
 8018202:	bf00      	nop
 8018204:	0801917c 	.word	0x0801917c
 8018208:	0801919c 	.word	0x0801919c
 801820c:	0801915c 	.word	0x0801915c

08018210 <__ascii_wctomb>:
 8018210:	b149      	cbz	r1, 8018226 <__ascii_wctomb+0x16>
 8018212:	2aff      	cmp	r2, #255	; 0xff
 8018214:	bf85      	ittet	hi
 8018216:	238a      	movhi	r3, #138	; 0x8a
 8018218:	6003      	strhi	r3, [r0, #0]
 801821a:	700a      	strbls	r2, [r1, #0]
 801821c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8018220:	bf98      	it	ls
 8018222:	2001      	movls	r0, #1
 8018224:	4770      	bx	lr
 8018226:	4608      	mov	r0, r1
 8018228:	4770      	bx	lr
	...

0801822c <__swsetup_r>:
 801822c:	4b32      	ldr	r3, [pc, #200]	; (80182f8 <__swsetup_r+0xcc>)
 801822e:	b570      	push	{r4, r5, r6, lr}
 8018230:	681d      	ldr	r5, [r3, #0]
 8018232:	4606      	mov	r6, r0
 8018234:	460c      	mov	r4, r1
 8018236:	b125      	cbz	r5, 8018242 <__swsetup_r+0x16>
 8018238:	69ab      	ldr	r3, [r5, #24]
 801823a:	b913      	cbnz	r3, 8018242 <__swsetup_r+0x16>
 801823c:	4628      	mov	r0, r5
 801823e:	f7fd f9ef 	bl	8015620 <__sinit>
 8018242:	4b2e      	ldr	r3, [pc, #184]	; (80182fc <__swsetup_r+0xd0>)
 8018244:	429c      	cmp	r4, r3
 8018246:	d10f      	bne.n	8018268 <__swsetup_r+0x3c>
 8018248:	686c      	ldr	r4, [r5, #4]
 801824a:	89a3      	ldrh	r3, [r4, #12]
 801824c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018250:	0719      	lsls	r1, r3, #28
 8018252:	d42c      	bmi.n	80182ae <__swsetup_r+0x82>
 8018254:	06dd      	lsls	r5, r3, #27
 8018256:	d411      	bmi.n	801827c <__swsetup_r+0x50>
 8018258:	2309      	movs	r3, #9
 801825a:	6033      	str	r3, [r6, #0]
 801825c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018260:	81a3      	strh	r3, [r4, #12]
 8018262:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018266:	e03e      	b.n	80182e6 <__swsetup_r+0xba>
 8018268:	4b25      	ldr	r3, [pc, #148]	; (8018300 <__swsetup_r+0xd4>)
 801826a:	429c      	cmp	r4, r3
 801826c:	d101      	bne.n	8018272 <__swsetup_r+0x46>
 801826e:	68ac      	ldr	r4, [r5, #8]
 8018270:	e7eb      	b.n	801824a <__swsetup_r+0x1e>
 8018272:	4b24      	ldr	r3, [pc, #144]	; (8018304 <__swsetup_r+0xd8>)
 8018274:	429c      	cmp	r4, r3
 8018276:	bf08      	it	eq
 8018278:	68ec      	ldreq	r4, [r5, #12]
 801827a:	e7e6      	b.n	801824a <__swsetup_r+0x1e>
 801827c:	0758      	lsls	r0, r3, #29
 801827e:	d512      	bpl.n	80182a6 <__swsetup_r+0x7a>
 8018280:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018282:	b141      	cbz	r1, 8018296 <__swsetup_r+0x6a>
 8018284:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018288:	4299      	cmp	r1, r3
 801828a:	d002      	beq.n	8018292 <__swsetup_r+0x66>
 801828c:	4630      	mov	r0, r6
 801828e:	f7fd facd 	bl	801582c <_free_r>
 8018292:	2300      	movs	r3, #0
 8018294:	6363      	str	r3, [r4, #52]	; 0x34
 8018296:	89a3      	ldrh	r3, [r4, #12]
 8018298:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801829c:	81a3      	strh	r3, [r4, #12]
 801829e:	2300      	movs	r3, #0
 80182a0:	6063      	str	r3, [r4, #4]
 80182a2:	6923      	ldr	r3, [r4, #16]
 80182a4:	6023      	str	r3, [r4, #0]
 80182a6:	89a3      	ldrh	r3, [r4, #12]
 80182a8:	f043 0308 	orr.w	r3, r3, #8
 80182ac:	81a3      	strh	r3, [r4, #12]
 80182ae:	6923      	ldr	r3, [r4, #16]
 80182b0:	b94b      	cbnz	r3, 80182c6 <__swsetup_r+0x9a>
 80182b2:	89a3      	ldrh	r3, [r4, #12]
 80182b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80182b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80182bc:	d003      	beq.n	80182c6 <__swsetup_r+0x9a>
 80182be:	4621      	mov	r1, r4
 80182c0:	4630      	mov	r0, r6
 80182c2:	f000 f84d 	bl	8018360 <__smakebuf_r>
 80182c6:	89a0      	ldrh	r0, [r4, #12]
 80182c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80182cc:	f010 0301 	ands.w	r3, r0, #1
 80182d0:	d00a      	beq.n	80182e8 <__swsetup_r+0xbc>
 80182d2:	2300      	movs	r3, #0
 80182d4:	60a3      	str	r3, [r4, #8]
 80182d6:	6963      	ldr	r3, [r4, #20]
 80182d8:	425b      	negs	r3, r3
 80182da:	61a3      	str	r3, [r4, #24]
 80182dc:	6923      	ldr	r3, [r4, #16]
 80182de:	b943      	cbnz	r3, 80182f2 <__swsetup_r+0xc6>
 80182e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80182e4:	d1ba      	bne.n	801825c <__swsetup_r+0x30>
 80182e6:	bd70      	pop	{r4, r5, r6, pc}
 80182e8:	0781      	lsls	r1, r0, #30
 80182ea:	bf58      	it	pl
 80182ec:	6963      	ldrpl	r3, [r4, #20]
 80182ee:	60a3      	str	r3, [r4, #8]
 80182f0:	e7f4      	b.n	80182dc <__swsetup_r+0xb0>
 80182f2:	2000      	movs	r0, #0
 80182f4:	e7f7      	b.n	80182e6 <__swsetup_r+0xba>
 80182f6:	bf00      	nop
 80182f8:	2000019c 	.word	0x2000019c
 80182fc:	0801917c 	.word	0x0801917c
 8018300:	0801919c 	.word	0x0801919c
 8018304:	0801915c 	.word	0x0801915c

08018308 <abort>:
 8018308:	b508      	push	{r3, lr}
 801830a:	2006      	movs	r0, #6
 801830c:	f000 f898 	bl	8018440 <raise>
 8018310:	2001      	movs	r0, #1
 8018312:	f7ec fdc3 	bl	8004e9c <_exit>

08018316 <__swhatbuf_r>:
 8018316:	b570      	push	{r4, r5, r6, lr}
 8018318:	460e      	mov	r6, r1
 801831a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801831e:	2900      	cmp	r1, #0
 8018320:	b096      	sub	sp, #88	; 0x58
 8018322:	4614      	mov	r4, r2
 8018324:	461d      	mov	r5, r3
 8018326:	da07      	bge.n	8018338 <__swhatbuf_r+0x22>
 8018328:	2300      	movs	r3, #0
 801832a:	602b      	str	r3, [r5, #0]
 801832c:	89b3      	ldrh	r3, [r6, #12]
 801832e:	061a      	lsls	r2, r3, #24
 8018330:	d410      	bmi.n	8018354 <__swhatbuf_r+0x3e>
 8018332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018336:	e00e      	b.n	8018356 <__swhatbuf_r+0x40>
 8018338:	466a      	mov	r2, sp
 801833a:	f000 f89d 	bl	8018478 <_fstat_r>
 801833e:	2800      	cmp	r0, #0
 8018340:	dbf2      	blt.n	8018328 <__swhatbuf_r+0x12>
 8018342:	9a01      	ldr	r2, [sp, #4]
 8018344:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018348:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801834c:	425a      	negs	r2, r3
 801834e:	415a      	adcs	r2, r3
 8018350:	602a      	str	r2, [r5, #0]
 8018352:	e7ee      	b.n	8018332 <__swhatbuf_r+0x1c>
 8018354:	2340      	movs	r3, #64	; 0x40
 8018356:	2000      	movs	r0, #0
 8018358:	6023      	str	r3, [r4, #0]
 801835a:	b016      	add	sp, #88	; 0x58
 801835c:	bd70      	pop	{r4, r5, r6, pc}
	...

08018360 <__smakebuf_r>:
 8018360:	898b      	ldrh	r3, [r1, #12]
 8018362:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018364:	079d      	lsls	r5, r3, #30
 8018366:	4606      	mov	r6, r0
 8018368:	460c      	mov	r4, r1
 801836a:	d507      	bpl.n	801837c <__smakebuf_r+0x1c>
 801836c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018370:	6023      	str	r3, [r4, #0]
 8018372:	6123      	str	r3, [r4, #16]
 8018374:	2301      	movs	r3, #1
 8018376:	6163      	str	r3, [r4, #20]
 8018378:	b002      	add	sp, #8
 801837a:	bd70      	pop	{r4, r5, r6, pc}
 801837c:	ab01      	add	r3, sp, #4
 801837e:	466a      	mov	r2, sp
 8018380:	f7ff ffc9 	bl	8018316 <__swhatbuf_r>
 8018384:	9900      	ldr	r1, [sp, #0]
 8018386:	4605      	mov	r5, r0
 8018388:	4630      	mov	r0, r6
 801838a:	f7fd fa9f 	bl	80158cc <_malloc_r>
 801838e:	b948      	cbnz	r0, 80183a4 <__smakebuf_r+0x44>
 8018390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018394:	059a      	lsls	r2, r3, #22
 8018396:	d4ef      	bmi.n	8018378 <__smakebuf_r+0x18>
 8018398:	f023 0303 	bic.w	r3, r3, #3
 801839c:	f043 0302 	orr.w	r3, r3, #2
 80183a0:	81a3      	strh	r3, [r4, #12]
 80183a2:	e7e3      	b.n	801836c <__smakebuf_r+0xc>
 80183a4:	4b0d      	ldr	r3, [pc, #52]	; (80183dc <__smakebuf_r+0x7c>)
 80183a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80183a8:	89a3      	ldrh	r3, [r4, #12]
 80183aa:	6020      	str	r0, [r4, #0]
 80183ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80183b0:	81a3      	strh	r3, [r4, #12]
 80183b2:	9b00      	ldr	r3, [sp, #0]
 80183b4:	6163      	str	r3, [r4, #20]
 80183b6:	9b01      	ldr	r3, [sp, #4]
 80183b8:	6120      	str	r0, [r4, #16]
 80183ba:	b15b      	cbz	r3, 80183d4 <__smakebuf_r+0x74>
 80183bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80183c0:	4630      	mov	r0, r6
 80183c2:	f000 f86b 	bl	801849c <_isatty_r>
 80183c6:	b128      	cbz	r0, 80183d4 <__smakebuf_r+0x74>
 80183c8:	89a3      	ldrh	r3, [r4, #12]
 80183ca:	f023 0303 	bic.w	r3, r3, #3
 80183ce:	f043 0301 	orr.w	r3, r3, #1
 80183d2:	81a3      	strh	r3, [r4, #12]
 80183d4:	89a0      	ldrh	r0, [r4, #12]
 80183d6:	4305      	orrs	r5, r0
 80183d8:	81a5      	strh	r5, [r4, #12]
 80183da:	e7cd      	b.n	8018378 <__smakebuf_r+0x18>
 80183dc:	080155b9 	.word	0x080155b9

080183e0 <_malloc_usable_size_r>:
 80183e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80183e4:	1f18      	subs	r0, r3, #4
 80183e6:	2b00      	cmp	r3, #0
 80183e8:	bfbc      	itt	lt
 80183ea:	580b      	ldrlt	r3, [r1, r0]
 80183ec:	18c0      	addlt	r0, r0, r3
 80183ee:	4770      	bx	lr

080183f0 <_raise_r>:
 80183f0:	291f      	cmp	r1, #31
 80183f2:	b538      	push	{r3, r4, r5, lr}
 80183f4:	4604      	mov	r4, r0
 80183f6:	460d      	mov	r5, r1
 80183f8:	d904      	bls.n	8018404 <_raise_r+0x14>
 80183fa:	2316      	movs	r3, #22
 80183fc:	6003      	str	r3, [r0, #0]
 80183fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018402:	bd38      	pop	{r3, r4, r5, pc}
 8018404:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018406:	b112      	cbz	r2, 801840e <_raise_r+0x1e>
 8018408:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801840c:	b94b      	cbnz	r3, 8018422 <_raise_r+0x32>
 801840e:	4620      	mov	r0, r4
 8018410:	f000 f830 	bl	8018474 <_getpid_r>
 8018414:	462a      	mov	r2, r5
 8018416:	4601      	mov	r1, r0
 8018418:	4620      	mov	r0, r4
 801841a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801841e:	f000 b817 	b.w	8018450 <_kill_r>
 8018422:	2b01      	cmp	r3, #1
 8018424:	d00a      	beq.n	801843c <_raise_r+0x4c>
 8018426:	1c59      	adds	r1, r3, #1
 8018428:	d103      	bne.n	8018432 <_raise_r+0x42>
 801842a:	2316      	movs	r3, #22
 801842c:	6003      	str	r3, [r0, #0]
 801842e:	2001      	movs	r0, #1
 8018430:	e7e7      	b.n	8018402 <_raise_r+0x12>
 8018432:	2400      	movs	r4, #0
 8018434:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018438:	4628      	mov	r0, r5
 801843a:	4798      	blx	r3
 801843c:	2000      	movs	r0, #0
 801843e:	e7e0      	b.n	8018402 <_raise_r+0x12>

08018440 <raise>:
 8018440:	4b02      	ldr	r3, [pc, #8]	; (801844c <raise+0xc>)
 8018442:	4601      	mov	r1, r0
 8018444:	6818      	ldr	r0, [r3, #0]
 8018446:	f7ff bfd3 	b.w	80183f0 <_raise_r>
 801844a:	bf00      	nop
 801844c:	2000019c 	.word	0x2000019c

08018450 <_kill_r>:
 8018450:	b538      	push	{r3, r4, r5, lr}
 8018452:	4d07      	ldr	r5, [pc, #28]	; (8018470 <_kill_r+0x20>)
 8018454:	2300      	movs	r3, #0
 8018456:	4604      	mov	r4, r0
 8018458:	4608      	mov	r0, r1
 801845a:	4611      	mov	r1, r2
 801845c:	602b      	str	r3, [r5, #0]
 801845e:	f7ec fd0d 	bl	8004e7c <_kill>
 8018462:	1c43      	adds	r3, r0, #1
 8018464:	d102      	bne.n	801846c <_kill_r+0x1c>
 8018466:	682b      	ldr	r3, [r5, #0]
 8018468:	b103      	cbz	r3, 801846c <_kill_r+0x1c>
 801846a:	6023      	str	r3, [r4, #0]
 801846c:	bd38      	pop	{r3, r4, r5, pc}
 801846e:	bf00      	nop
 8018470:	20014bf8 	.word	0x20014bf8

08018474 <_getpid_r>:
 8018474:	f7ec bcfa 	b.w	8004e6c <_getpid>

08018478 <_fstat_r>:
 8018478:	b538      	push	{r3, r4, r5, lr}
 801847a:	4d07      	ldr	r5, [pc, #28]	; (8018498 <_fstat_r+0x20>)
 801847c:	2300      	movs	r3, #0
 801847e:	4604      	mov	r4, r0
 8018480:	4608      	mov	r0, r1
 8018482:	4611      	mov	r1, r2
 8018484:	602b      	str	r3, [r5, #0]
 8018486:	f7ec fd58 	bl	8004f3a <_fstat>
 801848a:	1c43      	adds	r3, r0, #1
 801848c:	d102      	bne.n	8018494 <_fstat_r+0x1c>
 801848e:	682b      	ldr	r3, [r5, #0]
 8018490:	b103      	cbz	r3, 8018494 <_fstat_r+0x1c>
 8018492:	6023      	str	r3, [r4, #0]
 8018494:	bd38      	pop	{r3, r4, r5, pc}
 8018496:	bf00      	nop
 8018498:	20014bf8 	.word	0x20014bf8

0801849c <_isatty_r>:
 801849c:	b538      	push	{r3, r4, r5, lr}
 801849e:	4d06      	ldr	r5, [pc, #24]	; (80184b8 <_isatty_r+0x1c>)
 80184a0:	2300      	movs	r3, #0
 80184a2:	4604      	mov	r4, r0
 80184a4:	4608      	mov	r0, r1
 80184a6:	602b      	str	r3, [r5, #0]
 80184a8:	f7ec fd57 	bl	8004f5a <_isatty>
 80184ac:	1c43      	adds	r3, r0, #1
 80184ae:	d102      	bne.n	80184b6 <_isatty_r+0x1a>
 80184b0:	682b      	ldr	r3, [r5, #0]
 80184b2:	b103      	cbz	r3, 80184b6 <_isatty_r+0x1a>
 80184b4:	6023      	str	r3, [r4, #0]
 80184b6:	bd38      	pop	{r3, r4, r5, pc}
 80184b8:	20014bf8 	.word	0x20014bf8

080184bc <_init>:
 80184bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184be:	bf00      	nop
 80184c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80184c2:	bc08      	pop	{r3}
 80184c4:	469e      	mov	lr, r3
 80184c6:	4770      	bx	lr

080184c8 <_fini>:
 80184c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184ca:	bf00      	nop
 80184cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80184ce:	bc08      	pop	{r3}
 80184d0:	469e      	mov	lr, r3
 80184d2:	4770      	bx	lr
