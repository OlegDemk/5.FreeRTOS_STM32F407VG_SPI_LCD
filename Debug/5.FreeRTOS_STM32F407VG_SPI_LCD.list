
5.FreeRTOS_STM32F407VG_SPI_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a4a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004e24  0801a638  0801a638  0002a638  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f45c  0801f45c  00030398  2**0
                  CONTENTS
  4 .ARM          00000008  0801f45c  0801f45c  0002f45c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f464  0801f464  00030398  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f464  0801f464  0002f464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f468  0801f468  0002f468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000398  20000000  0801f46c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030398  2**0
                  CONTENTS
 10 .bss          00014468  20000398  20000398  00030398  2**3
                  ALLOC
 11 ._user_heap_stack 00000c00  20014800  20014800  00030398  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030398  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003e2aa  00000000  00000000  000303c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007d33  00000000  00000000  0006e672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002850  00000000  00000000  000763a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002520  00000000  00000000  00078bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002cadd  00000000  00000000  0007b118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00039b43  00000000  00000000  000a7bf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e79c8  00000000  00000000  000e1738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001c9100  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b9c4  00000000  00000000  001c9154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000398 	.word	0x20000398
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801a61c 	.word	0x0801a61c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000039c 	.word	0x2000039c
 80001cc:	0801a61c 	.word	0x0801a61c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b96e 	b.w	8000f7c <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468c      	mov	ip, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8083 	bne.w	8000dce <__udivmoddi4+0x116>
 8000cc8:	428a      	cmp	r2, r1
 8000cca:	4617      	mov	r7, r2
 8000ccc:	d947      	bls.n	8000d5e <__udivmoddi4+0xa6>
 8000cce:	fab2 f282 	clz	r2, r2
 8000cd2:	b142      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd4:	f1c2 0020 	rsb	r0, r2, #32
 8000cd8:	fa24 f000 	lsr.w	r0, r4, r0
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	4097      	lsls	r7, r2
 8000ce0:	ea40 0c01 	orr.w	ip, r0, r1
 8000ce4:	4094      	lsls	r4, r2
 8000ce6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cea:	0c23      	lsrs	r3, r4, #16
 8000cec:	fbbc f6f8 	udiv	r6, ip, r8
 8000cf0:	fa1f fe87 	uxth.w	lr, r7
 8000cf4:	fb08 c116 	mls	r1, r8, r6, ip
 8000cf8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfc:	fb06 f10e 	mul.w	r1, r6, lr
 8000d00:	4299      	cmp	r1, r3
 8000d02:	d909      	bls.n	8000d18 <__udivmoddi4+0x60>
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0a:	f080 8119 	bcs.w	8000f40 <__udivmoddi4+0x288>
 8000d0e:	4299      	cmp	r1, r3
 8000d10:	f240 8116 	bls.w	8000f40 <__udivmoddi4+0x288>
 8000d14:	3e02      	subs	r6, #2
 8000d16:	443b      	add	r3, r7
 8000d18:	1a5b      	subs	r3, r3, r1
 8000d1a:	b2a4      	uxth	r4, r4
 8000d1c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d20:	fb08 3310 	mls	r3, r8, r0, r3
 8000d24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d28:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d2c:	45a6      	cmp	lr, r4
 8000d2e:	d909      	bls.n	8000d44 <__udivmoddi4+0x8c>
 8000d30:	193c      	adds	r4, r7, r4
 8000d32:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d36:	f080 8105 	bcs.w	8000f44 <__udivmoddi4+0x28c>
 8000d3a:	45a6      	cmp	lr, r4
 8000d3c:	f240 8102 	bls.w	8000f44 <__udivmoddi4+0x28c>
 8000d40:	3802      	subs	r0, #2
 8000d42:	443c      	add	r4, r7
 8000d44:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d48:	eba4 040e 	sub.w	r4, r4, lr
 8000d4c:	2600      	movs	r6, #0
 8000d4e:	b11d      	cbz	r5, 8000d58 <__udivmoddi4+0xa0>
 8000d50:	40d4      	lsrs	r4, r2
 8000d52:	2300      	movs	r3, #0
 8000d54:	e9c5 4300 	strd	r4, r3, [r5]
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	b902      	cbnz	r2, 8000d62 <__udivmoddi4+0xaa>
 8000d60:	deff      	udf	#255	; 0xff
 8000d62:	fab2 f282 	clz	r2, r2
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d150      	bne.n	8000e0c <__udivmoddi4+0x154>
 8000d6a:	1bcb      	subs	r3, r1, r7
 8000d6c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d70:	fa1f f887 	uxth.w	r8, r7
 8000d74:	2601      	movs	r6, #1
 8000d76:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d7a:	0c21      	lsrs	r1, r4, #16
 8000d7c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d84:	fb08 f30c 	mul.w	r3, r8, ip
 8000d88:	428b      	cmp	r3, r1
 8000d8a:	d907      	bls.n	8000d9c <__udivmoddi4+0xe4>
 8000d8c:	1879      	adds	r1, r7, r1
 8000d8e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0xe2>
 8000d94:	428b      	cmp	r3, r1
 8000d96:	f200 80e9 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000d9a:	4684      	mov	ip, r0
 8000d9c:	1ac9      	subs	r1, r1, r3
 8000d9e:	b2a3      	uxth	r3, r4
 8000da0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da4:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dac:	fb08 f800 	mul.w	r8, r8, r0
 8000db0:	45a0      	cmp	r8, r4
 8000db2:	d907      	bls.n	8000dc4 <__udivmoddi4+0x10c>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dba:	d202      	bcs.n	8000dc2 <__udivmoddi4+0x10a>
 8000dbc:	45a0      	cmp	r8, r4
 8000dbe:	f200 80d9 	bhi.w	8000f74 <__udivmoddi4+0x2bc>
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	eba4 0408 	sub.w	r4, r4, r8
 8000dc8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dcc:	e7bf      	b.n	8000d4e <__udivmoddi4+0x96>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0x12e>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80b1 	beq.w	8000f3a <__udivmoddi4+0x282>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x1cc>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0x140>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80b8 	bhi.w	8000f68 <__udivmoddi4+0x2b0>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0103 	sbc.w	r1, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	468c      	mov	ip, r1
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0a8      	beq.n	8000d58 <__udivmoddi4+0xa0>
 8000e06:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e0a:	e7a5      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f603 	lsr.w	r6, r0, r3
 8000e14:	4097      	lsls	r7, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1e:	40d9      	lsrs	r1, r3
 8000e20:	4330      	orrs	r0, r6
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e28:	fa1f f887 	uxth.w	r8, r7
 8000e2c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e34:	fb06 f108 	mul.w	r1, r6, r8
 8000e38:	4299      	cmp	r1, r3
 8000e3a:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3e:	d909      	bls.n	8000e54 <__udivmoddi4+0x19c>
 8000e40:	18fb      	adds	r3, r7, r3
 8000e42:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000e46:	f080 808d 	bcs.w	8000f64 <__udivmoddi4+0x2ac>
 8000e4a:	4299      	cmp	r1, r3
 8000e4c:	f240 808a 	bls.w	8000f64 <__udivmoddi4+0x2ac>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	443b      	add	r3, r7
 8000e54:	1a5b      	subs	r3, r3, r1
 8000e56:	b281      	uxth	r1, r0
 8000e58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e60:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e64:	fb00 f308 	mul.w	r3, r0, r8
 8000e68:	428b      	cmp	r3, r1
 8000e6a:	d907      	bls.n	8000e7c <__udivmoddi4+0x1c4>
 8000e6c:	1879      	adds	r1, r7, r1
 8000e6e:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e72:	d273      	bcs.n	8000f5c <__udivmoddi4+0x2a4>
 8000e74:	428b      	cmp	r3, r1
 8000e76:	d971      	bls.n	8000f5c <__udivmoddi4+0x2a4>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4439      	add	r1, r7
 8000e7c:	1acb      	subs	r3, r1, r3
 8000e7e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e82:	e778      	b.n	8000d76 <__udivmoddi4+0xbe>
 8000e84:	f1c6 0c20 	rsb	ip, r6, #32
 8000e88:	fa03 f406 	lsl.w	r4, r3, r6
 8000e8c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e90:	431c      	orrs	r4, r3
 8000e92:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e9e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ea2:	431f      	orrs	r7, r3
 8000ea4:	0c3b      	lsrs	r3, r7, #16
 8000ea6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eaa:	fa1f f884 	uxth.w	r8, r4
 8000eae:	fb0e 1119 	mls	r1, lr, r9, r1
 8000eb2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000eb6:	fb09 fa08 	mul.w	sl, r9, r8
 8000eba:	458a      	cmp	sl, r1
 8000ebc:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec0:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x220>
 8000ec6:	1861      	adds	r1, r4, r1
 8000ec8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ecc:	d248      	bcs.n	8000f60 <__udivmoddi4+0x2a8>
 8000ece:	458a      	cmp	sl, r1
 8000ed0:	d946      	bls.n	8000f60 <__udivmoddi4+0x2a8>
 8000ed2:	f1a9 0902 	sub.w	r9, r9, #2
 8000ed6:	4421      	add	r1, r4
 8000ed8:	eba1 010a 	sub.w	r1, r1, sl
 8000edc:	b2bf      	uxth	r7, r7
 8000ede:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ee2:	fb0e 1110 	mls	r1, lr, r0, r1
 8000ee6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eea:	fb00 f808 	mul.w	r8, r0, r8
 8000eee:	45b8      	cmp	r8, r7
 8000ef0:	d907      	bls.n	8000f02 <__udivmoddi4+0x24a>
 8000ef2:	19e7      	adds	r7, r4, r7
 8000ef4:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000ef8:	d22e      	bcs.n	8000f58 <__udivmoddi4+0x2a0>
 8000efa:	45b8      	cmp	r8, r7
 8000efc:	d92c      	bls.n	8000f58 <__udivmoddi4+0x2a0>
 8000efe:	3802      	subs	r0, #2
 8000f00:	4427      	add	r7, r4
 8000f02:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f06:	eba7 0708 	sub.w	r7, r7, r8
 8000f0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000f0e:	454f      	cmp	r7, r9
 8000f10:	46c6      	mov	lr, r8
 8000f12:	4649      	mov	r1, r9
 8000f14:	d31a      	bcc.n	8000f4c <__udivmoddi4+0x294>
 8000f16:	d017      	beq.n	8000f48 <__udivmoddi4+0x290>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x27a>
 8000f1a:	ebb3 020e 	subs.w	r2, r3, lr
 8000f1e:	eb67 0701 	sbc.w	r7, r7, r1
 8000f22:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f26:	40f2      	lsrs	r2, r6
 8000f28:	ea4c 0202 	orr.w	r2, ip, r2
 8000f2c:	40f7      	lsrs	r7, r6
 8000f2e:	e9c5 2700 	strd	r2, r7, [r5]
 8000f32:	2600      	movs	r6, #0
 8000f34:	4631      	mov	r1, r6
 8000f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3a:	462e      	mov	r6, r5
 8000f3c:	4628      	mov	r0, r5
 8000f3e:	e70b      	b.n	8000d58 <__udivmoddi4+0xa0>
 8000f40:	4606      	mov	r6, r0
 8000f42:	e6e9      	b.n	8000d18 <__udivmoddi4+0x60>
 8000f44:	4618      	mov	r0, r3
 8000f46:	e6fd      	b.n	8000d44 <__udivmoddi4+0x8c>
 8000f48:	4543      	cmp	r3, r8
 8000f4a:	d2e5      	bcs.n	8000f18 <__udivmoddi4+0x260>
 8000f4c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f50:	eb69 0104 	sbc.w	r1, r9, r4
 8000f54:	3801      	subs	r0, #1
 8000f56:	e7df      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f58:	4608      	mov	r0, r1
 8000f5a:	e7d2      	b.n	8000f02 <__udivmoddi4+0x24a>
 8000f5c:	4660      	mov	r0, ip
 8000f5e:	e78d      	b.n	8000e7c <__udivmoddi4+0x1c4>
 8000f60:	4681      	mov	r9, r0
 8000f62:	e7b9      	b.n	8000ed8 <__udivmoddi4+0x220>
 8000f64:	4666      	mov	r6, ip
 8000f66:	e775      	b.n	8000e54 <__udivmoddi4+0x19c>
 8000f68:	4630      	mov	r0, r6
 8000f6a:	e74a      	b.n	8000e02 <__udivmoddi4+0x14a>
 8000f6c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f70:	4439      	add	r1, r7
 8000f72:	e713      	b.n	8000d9c <__udivmoddi4+0xe4>
 8000f74:	3802      	subs	r0, #2
 8000f76:	443c      	add	r4, r7
 8000f78:	e724      	b.n	8000dc4 <__udivmoddi4+0x10c>
 8000f7a:	bf00      	nop

08000f7c <__aeabi_idiv0>:
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop

08000f80 <bme280_init>:
/*!
 *  @brief This API is the entry point.
 *  It reads the chip-id and calibration data from the sensor.
 */
int8_t bme280_init(struct bme280_dev *dev)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	/* chip id read try count */
	uint8_t try_count = 5;
 8000f88:	2305      	movs	r3, #5
 8000f8a:	73bb      	strb	r3, [r7, #14]
	uint8_t chip_id = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f001 f9ef 	bl	8002374 <null_ptr_check>
 8000f96:	4603      	mov	r3, r0
 8000f98:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt ==  BME280_OK) {
 8000f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d133      	bne.n	800100a <bme280_init+0x8a>
		while (try_count) {
 8000fa2:	e028      	b.n	8000ff6 <bme280_init+0x76>
			/* Read the chip-id of bme280 sensor */
			rslt = bme280_get_regs(BME280_CHIP_ID_ADDR, &chip_id, 1, dev);
 8000fa4:	f107 010d 	add.w	r1, r7, #13
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2201      	movs	r2, #1
 8000fac:	20d0      	movs	r0, #208	; 0xd0
 8000fae:	f000 f832 	bl	8001016 <bme280_get_regs>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	73fb      	strb	r3, [r7, #15]
			/* Check for chip id validity */
			if ((rslt == BME280_OK) && (chip_id == BME280_CHIP_ID)) {
 8000fb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d114      	bne.n	8000fe8 <bme280_init+0x68>
 8000fbe:	7b7b      	ldrb	r3, [r7, #13]
 8000fc0:	2b60      	cmp	r3, #96	; 0x60
 8000fc2:	d111      	bne.n	8000fe8 <bme280_init+0x68>
				dev->chip_id = chip_id;
 8000fc4:	7b7a      	ldrb	r2, [r7, #13]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	701a      	strb	r2, [r3, #0]
				/* Reset the sensor */
				rslt = bme280_soft_reset(dev);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f976 	bl	80012bc <bme280_soft_reset>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	73fb      	strb	r3, [r7, #15]
				if (rslt == BME280_OK) {
 8000fd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d110      	bne.n	8000ffe <bme280_init+0x7e>
					/* Read the calibration data */
					rslt = get_calib_data(dev);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f001 f83f 	bl	8002060 <get_calib_data>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	73fb      	strb	r3, [r7, #15]
				}
				break;
 8000fe6:	e00a      	b.n	8000ffe <bme280_init+0x7e>
			}
			/* Wait for 1 ms */
			dev->delay_ms(1);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	2001      	movs	r0, #1
 8000fee:	4798      	blx	r3
			--try_count;
 8000ff0:	7bbb      	ldrb	r3, [r7, #14]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	73bb      	strb	r3, [r7, #14]
		while (try_count) {
 8000ff6:	7bbb      	ldrb	r3, [r7, #14]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1d3      	bne.n	8000fa4 <bme280_init+0x24>
 8000ffc:	e000      	b.n	8001000 <bme280_init+0x80>
				break;
 8000ffe:	bf00      	nop
		}
		/* Chip id check failed */
		if (!try_count)
 8001000:	7bbb      	ldrb	r3, [r7, #14]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <bme280_init+0x8a>
			rslt = BME280_E_DEV_NOT_FOUND;
 8001006:	23fe      	movs	r3, #254	; 0xfe
 8001008:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800100a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800100e:	4618      	mov	r0, r3
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <bme280_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme280_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, const struct bme280_dev *dev)
{
 8001016:	b590      	push	{r4, r7, lr}
 8001018:	b087      	sub	sp, #28
 800101a:	af00      	add	r7, sp, #0
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607b      	str	r3, [r7, #4]
 8001020:	4603      	mov	r3, r0
 8001022:	73fb      	strb	r3, [r7, #15]
 8001024:	4613      	mov	r3, r2
 8001026:	81bb      	strh	r3, [r7, #12]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f001 f9a3 	bl	8002374 <null_ptr_check>
 800102e:	4603      	mov	r3, r0
 8001030:	75fb      	strb	r3, [r7, #23]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 8001032:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d117      	bne.n	800106a <bme280_get_regs+0x54>
		/* If interface selected is SPI */
		if (dev->intf != BME280_I2C_INTF)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	789b      	ldrb	r3, [r3, #2]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d003      	beq.n	800104a <bme280_get_regs+0x34>
			reg_addr = reg_addr | 0x80;
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001048:	73fb      	strb	r3, [r7, #15]
		/* Read the data  */
		rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685c      	ldr	r4, [r3, #4]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	7858      	ldrb	r0, [r3, #1]
 8001052:	89bb      	ldrh	r3, [r7, #12]
 8001054:	7bf9      	ldrb	r1, [r7, #15]
 8001056:	68ba      	ldr	r2, [r7, #8]
 8001058:	47a0      	blx	r4
 800105a:	4603      	mov	r3, r0
 800105c:	75fb      	strb	r3, [r7, #23]
		/* Check for communication error */
		if (rslt != BME280_OK)
 800105e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <bme280_get_regs+0x54>
			rslt = BME280_E_COMM_FAIL;
 8001066:	23fc      	movs	r3, #252	; 0xfc
 8001068:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800106a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800106e:	4618      	mov	r0, r3
 8001070:	371c      	adds	r7, #28
 8001072:	46bd      	mov	sp, r7
 8001074:	bd90      	pop	{r4, r7, pc}

08001076 <bme280_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme280_set_regs(uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, const struct bme280_dev *dev)
{
 8001076:	b590      	push	{r4, r7, lr}
 8001078:	b08d      	sub	sp, #52	; 0x34
 800107a:	af00      	add	r7, sp, #0
 800107c:	60f8      	str	r0, [r7, #12]
 800107e:	60b9      	str	r1, [r7, #8]
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	4613      	mov	r3, r2
 8001084:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t temp_buff[20]; /* Typically not to write more than 10 registers */

	if (len > 10)
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	2b0a      	cmp	r3, #10
 800108a:	d901      	bls.n	8001090 <bme280_set_regs+0x1a>
		len = 10;
 800108c:	230a      	movs	r3, #10
 800108e:	71fb      	strb	r3, [r7, #7]

	uint16_t temp_len;
	uint8_t reg_addr_cnt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001090:	6838      	ldr	r0, [r7, #0]
 8001092:	f001 f96f 	bl	8002374 <null_ptr_check>
 8001096:	4603      	mov	r3, r0
 8001098:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	/* Check for arguments validity */
	if ((rslt ==  BME280_OK) && (reg_addr != NULL) && (reg_data != NULL)) {
 800109c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d154      	bne.n	800114e <bme280_set_regs+0xd8>
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d051      	beq.n	800114e <bme280_set_regs+0xd8>
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d04e      	beq.n	800114e <bme280_set_regs+0xd8>
		if (len != 0) {
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d047      	beq.n	8001146 <bme280_set_regs+0xd0>
			temp_buff[0] = reg_data[0];
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	753b      	strb	r3, [r7, #20]
			/* If interface selected is SPI */
			if (dev->intf != BME280_I2C_INTF) {
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	789b      	ldrb	r3, [r3, #2]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d01a      	beq.n	80010fa <bme280_set_regs+0x84>
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80010ca:	e011      	b.n	80010f0 <bme280_set_regs+0x7a>
					reg_addr[reg_addr_cnt] = reg_addr[reg_addr_cnt] & 0x7F;
 80010cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	4413      	add	r3, r2
 80010d4:	781a      	ldrb	r2, [r3, #0]
 80010d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010da:	68f9      	ldr	r1, [r7, #12]
 80010dc:	440b      	add	r3, r1
 80010de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80010e2:	b2d2      	uxtb	r2, r2
 80010e4:	701a      	strb	r2, [r3, #0]
				for (reg_addr_cnt = 0; reg_addr_cnt < len; reg_addr_cnt++)
 80010e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80010ea:	3301      	adds	r3, #1
 80010ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80010f0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d3e8      	bcc.n	80010cc <bme280_set_regs+0x56>
			}
			/* Burst write mode */
			if (len > 1) {
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2b01      	cmp	r3, #1
 80010fe:	d90b      	bls.n	8001118 <bme280_set_regs+0xa2>
				/* Interleave register address w.r.t data for
				burst write*/
				interleave_reg_addr(reg_addr, temp_buff, reg_data, len);
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	f107 0114 	add.w	r1, r7, #20
 8001106:	68ba      	ldr	r2, [r7, #8]
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f000 ffee 	bl	80020ea <interleave_reg_addr>
				temp_len = len * 2;
 800110e:	79fb      	ldrb	r3, [r7, #7]
 8001110:	b29b      	uxth	r3, r3
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8001116:	e001      	b.n	800111c <bme280_set_regs+0xa6>
			} else {
				temp_len = len;
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	85bb      	strh	r3, [r7, #44]	; 0x2c
			}
			rslt = dev->write(dev->dev_id, reg_addr[0], temp_buff, temp_len);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	689c      	ldr	r4, [r3, #8]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	7858      	ldrb	r0, [r3, #1]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	7819      	ldrb	r1, [r3, #0]
 8001128:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800112a:	f107 0214 	add.w	r2, r7, #20
 800112e:	47a0      	blx	r4
 8001130:	4603      	mov	r3, r0
 8001132:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			/* Check for communication error */
			if (rslt != BME280_OK)
 8001136:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800113a:	2b00      	cmp	r3, #0
 800113c:	d00b      	beq.n	8001156 <bme280_set_regs+0xe0>
				rslt = BME280_E_COMM_FAIL;
 800113e:	23fc      	movs	r3, #252	; 0xfc
 8001140:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 8001144:	e007      	b.n	8001156 <bme280_set_regs+0xe0>
		} else {
			rslt = BME280_E_INVALID_LEN;
 8001146:	23fd      	movs	r3, #253	; 0xfd
 8001148:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (len != 0) {
 800114c:	e003      	b.n	8001156 <bme280_set_regs+0xe0>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 800114e:	23ff      	movs	r3, #255	; 0xff
 8001150:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001154:	e000      	b.n	8001158 <bme280_set_regs+0xe2>
		if (len != 0) {
 8001156:	bf00      	nop
	}


	return rslt;
 8001158:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800115c:	4618      	mov	r0, r3
 800115e:	3734      	adds	r7, #52	; 0x34
 8001160:	46bd      	mov	sp, r7
 8001162:	bd90      	pop	{r4, r7, pc}

08001164 <bme280_set_sensor_settings>:
/*!
 * @brief This API sets the oversampling, filter and standby duration
 * (normal mode) settings in the sensor.
 */
int8_t bme280_set_sensor_settings(uint8_t desired_settings, const struct bme280_dev *dev)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t sensor_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001170:	6838      	ldr	r0, [r7, #0]
 8001172:	f001 f8ff 	bl	8002374 <null_ptr_check>
 8001176:	4603      	mov	r3, r0
 8001178:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 800117a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d13f      	bne.n	8001202 <bme280_set_sensor_settings+0x9e>
		rslt = bme280_get_sensor_mode(&sensor_mode, dev);
 8001182:	f107 030e 	add.w	r3, r7, #14
 8001186:	6839      	ldr	r1, [r7, #0]
 8001188:	4618      	mov	r0, r3
 800118a:	f000 f874 	bl	8001276 <bme280_get_sensor_mode>
 800118e:	4603      	mov	r3, r0
 8001190:	73fb      	strb	r3, [r7, #15]
		if ((rslt == BME280_OK) && (sensor_mode != BME280_SLEEP_MODE))
 8001192:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d107      	bne.n	80011aa <bme280_set_sensor_settings+0x46>
 800119a:	7bbb      	ldrb	r3, [r7, #14]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d004      	beq.n	80011aa <bme280_set_sensor_settings+0x46>
			rslt = put_device_to_sleep(dev);
 80011a0:	6838      	ldr	r0, [r7, #0]
 80011a2:	f000 fb4e 	bl	8001842 <put_device_to_sleep>
 80011a6:	4603      	mov	r3, r0
 80011a8:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK) {
 80011aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d127      	bne.n	8001202 <bme280_set_sensor_settings+0x9e>
			/* Check if user wants to change oversampling
			   settings */
			if (are_settings_changed(OVERSAMPLING_SETTINGS, desired_settings))
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	4619      	mov	r1, r3
 80011b6:	2007      	movs	r0, #7
 80011b8:	f001 f8c0 	bl	800233c <are_settings_changed>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d009      	beq.n	80011d6 <bme280_set_sensor_settings+0x72>
				rslt = set_osr_settings(desired_settings, &dev->settings, dev);
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80011c8:	79fb      	ldrb	r3, [r7, #7]
 80011ca:	683a      	ldr	r2, [r7, #0]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f000 f98a 	bl	80014e6 <set_osr_settings>
 80011d2:	4603      	mov	r3, r0
 80011d4:	73fb      	strb	r3, [r7, #15]
			/* Check if user wants to change filter and/or
			   standby settings */
			if ((rslt == BME280_OK) && are_settings_changed(FILTER_STANDBY_SETTINGS, desired_settings))
 80011d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d111      	bne.n	8001202 <bme280_set_sensor_settings+0x9e>
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4619      	mov	r1, r3
 80011e2:	2018      	movs	r0, #24
 80011e4:	f001 f8aa 	bl	800233c <are_settings_changed>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d009      	beq.n	8001202 <bme280_set_sensor_settings+0x9e>
				rslt = set_filter_standby_settings(desired_settings, &dev->settings, dev);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f000 fa11 	bl	8001620 <set_filter_standby_settings>
 80011fe:	4603      	mov	r3, r0
 8001200:	73fb      	strb	r3, [r7, #15]
		}
	}

	return rslt;
 8001202:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <bme280_set_sensor_mode>:

/*!
 * @brief This API sets the power mode of the sensor.
 */
int8_t bme280_set_sensor_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b084      	sub	sp, #16
 8001212:	af00      	add	r7, sp, #0
 8001214:	4603      	mov	r3, r0
 8001216:	6039      	str	r1, [r7, #0]
 8001218:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t last_set_mode;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 800121a:	6838      	ldr	r0, [r7, #0]
 800121c:	f001 f8aa 	bl	8002374 <null_ptr_check>
 8001220:	4603      	mov	r3, r0
 8001222:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 8001224:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d11e      	bne.n	800126a <bme280_set_sensor_mode+0x5c>
		rslt = bme280_get_sensor_mode(&last_set_mode, dev);
 800122c:	f107 030e 	add.w	r3, r7, #14
 8001230:	6839      	ldr	r1, [r7, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f81f 	bl	8001276 <bme280_get_sensor_mode>
 8001238:	4603      	mov	r3, r0
 800123a:	73fb      	strb	r3, [r7, #15]
		/* If the sensor is not in sleep mode put the device to sleep
		   mode */
		if ((rslt == BME280_OK) && (last_set_mode != BME280_SLEEP_MODE))
 800123c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d107      	bne.n	8001254 <bme280_set_sensor_mode+0x46>
 8001244:	7bbb      	ldrb	r3, [r7, #14]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d004      	beq.n	8001254 <bme280_set_sensor_mode+0x46>
			rslt = put_device_to_sleep(dev);
 800124a:	6838      	ldr	r0, [r7, #0]
 800124c:	f000 faf9 	bl	8001842 <put_device_to_sleep>
 8001250:	4603      	mov	r3, r0
 8001252:	73fb      	strb	r3, [r7, #15]
		/* Set the power mode */
		if (rslt == BME280_OK)
 8001254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d106      	bne.n	800126a <bme280_set_sensor_mode+0x5c>
			rslt = write_power_mode(sensor_mode, dev);
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	6839      	ldr	r1, [r7, #0]
 8001260:	4618      	mov	r0, r3
 8001262:	f000 fabb 	bl	80017dc <write_power_mode>
 8001266:	4603      	mov	r3, r0
 8001268:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3710      	adds	r7, #16
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <bme280_get_sensor_mode>:

/*!
 * @brief This API gets the power mode of the sensor.
 */
int8_t bme280_get_sensor_mode(uint8_t *sensor_mode, const struct bme280_dev *dev)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b084      	sub	sp, #16
 800127a:	af00      	add	r7, sp, #0
 800127c:	6078      	str	r0, [r7, #4]
 800127e:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001280:	6838      	ldr	r0, [r7, #0]
 8001282:	f001 f877 	bl	8002374 <null_ptr_check>
 8001286:	4603      	mov	r3, r0
 8001288:	73fb      	strb	r3, [r7, #15]

	if (rslt == BME280_OK) {
 800128a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d10e      	bne.n	80012b0 <bme280_get_sensor_mode+0x3a>
		/* Read the power mode register */
		rslt = bme280_get_regs(BME280_PWR_CTRL_ADDR, sensor_mode, 1, dev);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	2201      	movs	r2, #1
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	20f4      	movs	r0, #244	; 0xf4
 800129a:	f7ff febc 	bl	8001016 <bme280_get_regs>
 800129e:	4603      	mov	r3, r0
 80012a0:	73fb      	strb	r3, [r7, #15]
		/* Assign the power mode in the device structure */
		*sensor_mode = BME280_GET_BITS_POS_0(*sensor_mode, BME280_SENSOR_MODE);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	f003 0303 	and.w	r3, r3, #3
 80012aa:	b2da      	uxtb	r2, r3
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	701a      	strb	r2, [r3, #0]
	}

	return rslt;
 80012b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3710      	adds	r7, #16
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}

080012bc <bme280_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme280_soft_reset(const struct bme280_dev *dev)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_RESET_ADDR;
 80012c4:	23e0      	movs	r3, #224	; 0xe0
 80012c6:	73bb      	strb	r3, [r7, #14]
	/* 0xB6 is the soft reset command */
	uint8_t soft_rst_cmd = 0xB6;
 80012c8:	23b6      	movs	r3, #182	; 0xb6
 80012ca:	737b      	strb	r3, [r7, #13]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f001 f851 	bl	8002374 <null_ptr_check>
 80012d2:	4603      	mov	r3, r0
 80012d4:	73fb      	strb	r3, [r7, #15]
	/* Proceed if null check is fine */
	if (rslt == BME280_OK) {
 80012d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d10d      	bne.n	80012fa <bme280_soft_reset+0x3e>
		/* Write the soft reset command in the sensor */
		rslt = bme280_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 80012de:	f107 010d 	add.w	r1, r7, #13
 80012e2:	f107 000e 	add.w	r0, r7, #14
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2201      	movs	r2, #1
 80012ea:	f7ff fec4 	bl	8001076 <bme280_set_regs>
 80012ee:	4603      	mov	r3, r0
 80012f0:	73fb      	strb	r3, [r7, #15]
		/* As per data sheet, startup time is 2 ms. */
		dev->delay_ms(2);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	2002      	movs	r0, #2
 80012f8:	4798      	blx	r3
	}

	return rslt;
 80012fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3710      	adds	r7, #16
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <bme280_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity data from the
 * sensor, compensates the data and store it in the bme280_data structure
 * instance passed by the user.
 */
int8_t bme280_get_sensor_data(uint8_t sensor_comp, struct bme280_data *comp_data, struct bme280_dev *dev)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b08a      	sub	sp, #40	; 0x28
 800130a:	af00      	add	r7, sp, #0
 800130c:	4603      	mov	r3, r0
 800130e:	60b9      	str	r1, [r7, #8]
 8001310:	607a      	str	r2, [r7, #4]
 8001312:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	/* Array to store the pressure, temperature and humidity data read from
	the sensor */
	uint8_t reg_data[BME280_P_T_H_DATA_LEN] = {0};
 8001314:	2300      	movs	r3, #0
 8001316:	61fb      	str	r3, [r7, #28]
 8001318:	2300      	movs	r3, #0
 800131a:	623b      	str	r3, [r7, #32]
	struct bme280_uncomp_data uncomp_data = {0};
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f001 f823 	bl	8002374 <null_ptr_check>
 800132e:	4603      	mov	r3, r0
 8001330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if ((rslt == BME280_OK) && (comp_data != NULL)) {
 8001334:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8001338:	2b00      	cmp	r3, #0
 800133a:	d124      	bne.n	8001386 <bme280_get_sensor_data+0x80>
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d021      	beq.n	8001386 <bme280_get_sensor_data+0x80>
		/* Read the pressure and temperature data from the sensor */
		rslt = bme280_get_regs(BME280_DATA_ADDR, reg_data, BME280_P_T_H_DATA_LEN, dev);
 8001342:	f107 011c 	add.w	r1, r7, #28
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2208      	movs	r2, #8
 800134a:	20f7      	movs	r0, #247	; 0xf7
 800134c:	f7ff fe63 	bl	8001016 <bme280_get_regs>
 8001350:	4603      	mov	r3, r0
 8001352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

		if (rslt == BME280_OK) {
 8001356:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800135a:	2b00      	cmp	r3, #0
 800135c:	d116      	bne.n	800138c <bme280_get_sensor_data+0x86>
			/* Parse the read data from the sensor */
			bme280_parse_sensor_data(reg_data, &uncomp_data);
 800135e:	f107 0210 	add.w	r2, r7, #16
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	4611      	mov	r1, r2
 8001368:	4618      	mov	r0, r3
 800136a:	f000 f815 	bl	8001398 <bme280_parse_sensor_data>
			/* Compensate the pressure and/or temperature and/or
			   humidity data from the sensor */
			rslt = bme280_compensate_data(sensor_comp, &uncomp_data, comp_data, &dev->calib_data);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	3310      	adds	r3, #16
 8001372:	f107 0110 	add.w	r1, r7, #16
 8001376:	7bf8      	ldrb	r0, [r7, #15]
 8001378:	68ba      	ldr	r2, [r7, #8]
 800137a:	f000 f853 	bl	8001424 <bme280_compensate_data>
 800137e:	4603      	mov	r3, r0
 8001380:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 8001384:	e002      	b.n	800138c <bme280_get_sensor_data+0x86>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 8001386:	23ff      	movs	r3, #255	; 0xff
 8001388:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	return rslt;
 800138c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8001390:	4618      	mov	r0, r3
 8001392:	3728      	adds	r7, #40	; 0x28
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}

08001398 <bme280_parse_sensor_data>:
/*!
 *  @brief This API is used to parse the pressure, temperature and
 *  humidity data and store it in the bme280_uncomp_data structure instance.
 */
void bme280_parse_sensor_data(const uint8_t *reg_data, struct bme280_uncomp_data *uncomp_data)
{
 8001398:	b480      	push	{r7}
 800139a:	b087      	sub	sp, #28
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
	uint32_t data_xlsb;
	uint32_t data_lsb;
	uint32_t data_msb;

	/* Store the parsed register values for pressure data */
	data_msb = (uint32_t)reg_data[0] << 12;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	031b      	lsls	r3, r3, #12
 80013a8:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[1] << 4;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	3301      	adds	r3, #1
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[2] >> 4;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3302      	adds	r3, #2
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	091b      	lsrs	r3, r3, #4
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	60fb      	str	r3, [r7, #12]
	uncomp_data->pressure = data_msb | data_lsb | data_xlsb;
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	431a      	orrs	r2, r3
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	431a      	orrs	r2, r3
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	601a      	str	r2, [r3, #0]

	/* Store the parsed register values for temperature data */
	data_msb = (uint32_t)reg_data[3] << 12;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3303      	adds	r3, #3
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	031b      	lsls	r3, r3, #12
 80013d6:	617b      	str	r3, [r7, #20]
	data_lsb = (uint32_t)reg_data[4] << 4;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	3304      	adds	r3, #4
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	011b      	lsls	r3, r3, #4
 80013e0:	613b      	str	r3, [r7, #16]
	data_xlsb = (uint32_t)reg_data[5] >> 4;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	3305      	adds	r3, #5
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	091b      	lsrs	r3, r3, #4
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	60fb      	str	r3, [r7, #12]
	uncomp_data->temperature = data_msb | data_lsb | data_xlsb;
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	431a      	orrs	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	431a      	orrs	r2, r3
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	605a      	str	r2, [r3, #4]

	/* Store the parsed register values for temperature data */
	data_lsb = (uint32_t)reg_data[6] << 8;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3306      	adds	r3, #6
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	613b      	str	r3, [r7, #16]
	data_msb = (uint32_t)reg_data[7];
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	3307      	adds	r3, #7
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	617b      	str	r3, [r7, #20]
	uncomp_data->humidity = data_msb | data_lsb;
 800140e:	697a      	ldr	r2, [r7, #20]
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	431a      	orrs	r2, r3
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	609a      	str	r2, [r3, #8]
}
 8001418:	bf00      	nop
 800141a:	371c      	adds	r7, #28
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <bme280_compensate_data>:
 * temperature and/or humidity data according to the component selected
 * by the user.
 */
int8_t bme280_compensate_data(uint8_t sensor_comp, const struct bme280_uncomp_data *uncomp_data,
				     struct bme280_data *comp_data, struct bme280_calib_data *calib_data)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
 800142e:	603b      	str	r3, [r7, #0]
 8001430:	4603      	mov	r3, r0
 8001432:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_OK;
 8001434:	2300      	movs	r3, #0
 8001436:	75fb      	strb	r3, [r7, #23]

	if ((uncomp_data != NULL) && (comp_data != NULL) && (calib_data != NULL)) {
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d04b      	beq.n	80014d6 <bme280_compensate_data+0xb2>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d048      	beq.n	80014d6 <bme280_compensate_data+0xb2>
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d045      	beq.n	80014d6 <bme280_compensate_data+0xb2>
		/* Initialize to zero */
		comp_data->temperature = 0;
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	f04f 0300 	mov.w	r3, #0
 8001454:	e9c1 2302 	strd	r2, r3, [r1, #8]
		comp_data->pressure = 0;
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	e9c1 2300 	strd	r2, r3, [r1]
		comp_data->humidity = 0;
 8001466:	6879      	ldr	r1, [r7, #4]
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	e9c1 2304 	strd	r2, r3, [r1, #16]
		/* If pressure or temperature component is selected */
		if (sensor_comp & (BME280_PRESS | BME280_TEMP | BME280_HUM)) {
 8001474:	7bfb      	ldrb	r3, [r7, #15]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00a      	beq.n	8001494 <bme280_compensate_data+0x70>
			/* Compensate the temperature data */
			comp_data->temperature = compensate_temperature(uncomp_data, calib_data);
 800147e:	6839      	ldr	r1, [r7, #0]
 8001480:	68b8      	ldr	r0, [r7, #8]
 8001482:	f000 fa2b 	bl	80018dc <compensate_temperature>
 8001486:	eeb0 7a40 	vmov.f32	s14, s0
 800148a:	eef0 7a60 	vmov.f32	s15, s1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	ed83 7b02 	vstr	d7, [r3, #8]
		}
		if (sensor_comp & BME280_PRESS) {
 8001494:	7bfb      	ldrb	r3, [r7, #15]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	d00a      	beq.n	80014b4 <bme280_compensate_data+0x90>
			/* Compensate the pressure data */
			comp_data->pressure = compensate_pressure(uncomp_data, calib_data);
 800149e:	6839      	ldr	r1, [r7, #0]
 80014a0:	68b8      	ldr	r0, [r7, #8]
 80014a2:	f000 faed 	bl	8001a80 <compensate_pressure>
 80014a6:	eeb0 7a40 	vmov.f32	s14, s0
 80014aa:	eef0 7a60 	vmov.f32	s15, s1
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	ed83 7b00 	vstr	d7, [r3]
		}
		if (sensor_comp & BME280_HUM) {
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00d      	beq.n	80014da <bme280_compensate_data+0xb6>
			/* Compensate the humidity data */
			comp_data->humidity = compensate_humidity(uncomp_data, calib_data);
 80014be:	6839      	ldr	r1, [r7, #0]
 80014c0:	68b8      	ldr	r0, [r7, #8]
 80014c2:	f000 fcad 	bl	8001e20 <compensate_humidity>
 80014c6:	eeb0 7a40 	vmov.f32	s14, s0
 80014ca:	eef0 7a60 	vmov.f32	s15, s1
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	ed83 7b04 	vstr	d7, [r3, #16]
		if (sensor_comp & BME280_HUM) {
 80014d4:	e001      	b.n	80014da <bme280_compensate_data+0xb6>
		}
	} else {
		rslt = BME280_E_NULL_PTR;
 80014d6:	23ff      	movs	r3, #255	; 0xff
 80014d8:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 80014da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <set_osr_settings>:
 * @brief This internal API sets the oversampling settings for pressure,
 * temperature and humidity in the sensor.
 */
static int8_t set_osr_settings(uint8_t desired_settings, const struct bme280_settings *settings,
				const struct bme280_dev *dev)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b086      	sub	sp, #24
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	60b9      	str	r1, [r7, #8]
 80014f0:	607a      	str	r2, [r7, #4]
 80014f2:	73fb      	strb	r3, [r7, #15]
	int8_t rslt = BME280_W_INVALID_OSR_MACRO;
 80014f4:	2301      	movs	r3, #1
 80014f6:	75fb      	strb	r3, [r7, #23]

	if (desired_settings & BME280_OSR_HUM_SEL)
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d005      	beq.n	800150e <set_osr_settings+0x28>
		rslt = set_osr_humidity_settings(settings, dev);
 8001502:	6879      	ldr	r1, [r7, #4]
 8001504:	68b8      	ldr	r0, [r7, #8]
 8001506:	f000 f815 	bl	8001534 <set_osr_humidity_settings>
 800150a:	4603      	mov	r3, r0
 800150c:	75fb      	strb	r3, [r7, #23]
	if (desired_settings & (BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL))
 800150e:	7bfb      	ldrb	r3, [r7, #15]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	2b00      	cmp	r3, #0
 8001516:	d007      	beq.n	8001528 <set_osr_settings+0x42>
		rslt = set_osr_press_temp_settings(desired_settings, settings, dev);
 8001518:	7bfb      	ldrb	r3, [r7, #15]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	68b9      	ldr	r1, [r7, #8]
 800151e:	4618      	mov	r0, r3
 8001520:	f000 f842 	bl	80015a8 <set_osr_press_temp_settings>
 8001524:	4603      	mov	r3, r0
 8001526:	75fb      	strb	r3, [r7, #23]

	return rslt;
 8001528:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3718      	adds	r7, #24
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <set_osr_humidity_settings>:

/*!
 * @brief This API sets the humidity oversampling settings of the sensor.
 */
static int8_t set_osr_humidity_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
	int8_t rslt;
	uint8_t ctrl_hum;
	uint8_t ctrl_meas;
	uint8_t reg_addr = BME280_CTRL_HUM_ADDR;
 800153e:	23f2      	movs	r3, #242	; 0xf2
 8001540:	733b      	strb	r3, [r7, #12]

	ctrl_hum = settings->osr_h & BME280_CTRL_HUM_MSK;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	789b      	ldrb	r3, [r3, #2]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	b2db      	uxtb	r3, r3
 800154c:	73bb      	strb	r3, [r7, #14]
	/* Write the humidity control value in the register */
	rslt = bme280_set_regs(&reg_addr, &ctrl_hum, 1, dev);
 800154e:	f107 010e 	add.w	r1, r7, #14
 8001552:	f107 000c 	add.w	r0, r7, #12
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	2201      	movs	r2, #1
 800155a:	f7ff fd8c 	bl	8001076 <bme280_set_regs>
 800155e:	4603      	mov	r3, r0
 8001560:	73fb      	strb	r3, [r7, #15]
	/* Humidity related changes will be only effective after a
	   write operation to ctrl_meas register */
	if (rslt == BME280_OK) {
 8001562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d118      	bne.n	800159c <set_osr_humidity_settings+0x68>
		reg_addr = BME280_CTRL_MEAS_ADDR;
 800156a:	23f4      	movs	r3, #244	; 0xf4
 800156c:	733b      	strb	r3, [r7, #12]
		rslt = bme280_get_regs(reg_addr, &ctrl_meas, 1, dev);
 800156e:	7b38      	ldrb	r0, [r7, #12]
 8001570:	f107 010d 	add.w	r1, r7, #13
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	2201      	movs	r2, #1
 8001578:	f7ff fd4d 	bl	8001016 <bme280_get_regs>
 800157c:	4603      	mov	r3, r0
 800157e:	73fb      	strb	r3, [r7, #15]
		if (rslt == BME280_OK)
 8001580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d109      	bne.n	800159c <set_osr_humidity_settings+0x68>
			rslt = bme280_set_regs(&reg_addr, &ctrl_meas, 1, dev);
 8001588:	f107 010d 	add.w	r1, r7, #13
 800158c:	f107 000c 	add.w	r0, r7, #12
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	2201      	movs	r2, #1
 8001594:	f7ff fd6f 	bl	8001076 <bme280_set_regs>
 8001598:	4603      	mov	r3, r0
 800159a:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 800159c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3710      	adds	r7, #16
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}

080015a8 <set_osr_press_temp_settings>:
 * @brief This API sets the pressure and/or temperature oversampling settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_osr_press_temp_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	60b9      	str	r1, [r7, #8]
 80015b2:	607a      	str	r2, [r7, #4]
 80015b4:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CTRL_MEAS_ADDR;
 80015b6:	23f4      	movs	r3, #244	; 0xf4
 80015b8:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 80015ba:	7db8      	ldrb	r0, [r7, #22]
 80015bc:	f107 0115 	add.w	r1, r7, #21
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f7ff fd27 	bl	8001016 <bme280_get_regs>
 80015c8:	4603      	mov	r3, r0
 80015ca:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 80015cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d11f      	bne.n	8001614 <set_osr_press_temp_settings+0x6c>
		if (desired_settings & BME280_OSR_PRESS_SEL)
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d005      	beq.n	80015ea <set_osr_press_temp_settings+0x42>
			fill_osr_press_settings(&reg_data, settings);
 80015de:	f107 0315 	add.w	r3, r7, #21
 80015e2:	68b9      	ldr	r1, [r7, #8]
 80015e4:	4618      	mov	r0, r3
 80015e6:	f000 f88e 	bl	8001706 <fill_osr_press_settings>
		if (desired_settings & BME280_OSR_TEMP_SEL)
 80015ea:	7bfb      	ldrb	r3, [r7, #15]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d005      	beq.n	8001600 <set_osr_press_temp_settings+0x58>
			fill_osr_temp_settings(&reg_data, settings);
 80015f4:	f107 0315 	add.w	r3, r7, #21
 80015f8:	68b9      	ldr	r1, [r7, #8]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 f8a0 	bl	8001740 <fill_osr_temp_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001600:	f107 0115 	add.w	r1, r7, #21
 8001604:	f107 0016 	add.w	r0, r7, #22
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f7ff fd33 	bl	8001076 <bme280_set_regs>
 8001610:	4603      	mov	r3, r0
 8001612:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001614:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3718      	adds	r7, #24
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}

08001620 <set_filter_standby_settings>:
 * @brief This internal API sets the filter and/or standby duration settings
 * in the sensor according to the settings selected by the user.
 */
static int8_t set_filter_standby_settings(uint8_t desired_settings, const struct bme280_settings *settings,
						const struct bme280_dev *dev)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
 800162c:	73fb      	strb	r3, [r7, #15]
	int8_t rslt;
	uint8_t reg_addr = BME280_CONFIG_ADDR;
 800162e:	23f5      	movs	r3, #245	; 0xf5
 8001630:	75bb      	strb	r3, [r7, #22]
	uint8_t reg_data;

	rslt = bme280_get_regs(reg_addr, &reg_data, 1, dev);
 8001632:	7db8      	ldrb	r0, [r7, #22]
 8001634:	f107 0115 	add.w	r1, r7, #21
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f7ff fceb 	bl	8001016 <bme280_get_regs>
 8001640:	4603      	mov	r3, r0
 8001642:	75fb      	strb	r3, [r7, #23]

	if (rslt == BME280_OK) {
 8001644:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d11f      	bne.n	800168c <set_filter_standby_settings+0x6c>
		if (desired_settings & BME280_FILTER_SEL)
 800164c:	7bfb      	ldrb	r3, [r7, #15]
 800164e:	f003 0308 	and.w	r3, r3, #8
 8001652:	2b00      	cmp	r3, #0
 8001654:	d005      	beq.n	8001662 <set_filter_standby_settings+0x42>
			fill_filter_settings(&reg_data, settings);
 8001656:	f107 0315 	add.w	r3, r7, #21
 800165a:	68b9      	ldr	r1, [r7, #8]
 800165c:	4618      	mov	r0, r3
 800165e:	f000 f81b 	bl	8001698 <fill_filter_settings>
		if (desired_settings & BME280_STANDBY_SEL)
 8001662:	7bfb      	ldrb	r3, [r7, #15]
 8001664:	f003 0310 	and.w	r3, r3, #16
 8001668:	2b00      	cmp	r3, #0
 800166a:	d005      	beq.n	8001678 <set_filter_standby_settings+0x58>
			fill_standby_settings(&reg_data, settings);
 800166c:	f107 0315 	add.w	r3, r7, #21
 8001670:	68b9      	ldr	r1, [r7, #8]
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f82d 	bl	80016d2 <fill_standby_settings>
		/* Write the oversampling settings in the register */
		rslt = bme280_set_regs(&reg_addr, &reg_data, 1, dev);
 8001678:	f107 0115 	add.w	r1, r7, #21
 800167c:	f107 0016 	add.w	r0, r7, #22
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2201      	movs	r2, #1
 8001684:	f7ff fcf7 	bl	8001076 <bme280_set_regs>
 8001688:	4603      	mov	r3, r0
 800168a:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 800168c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001690:	4618      	mov	r0, r3
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <fill_filter_settings>:
/*!
 * @brief This internal API fills the filter settings provided by the user
 * in the data buffer so as to write in the sensor.
 */
static void fill_filter_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_FILTER, settings->filter);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	b25b      	sxtb	r3, r3
 80016a8:	f023 031c 	bic.w	r3, r3, #28
 80016ac:	b25a      	sxtb	r2, r3
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	78db      	ldrb	r3, [r3, #3]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	f003 031c 	and.w	r3, r3, #28
 80016ba:	b25b      	sxtb	r3, r3
 80016bc:	4313      	orrs	r3, r2
 80016be:	b25b      	sxtb	r3, r3
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	701a      	strb	r2, [r3, #0]
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <fill_standby_settings>:
/*!
 * @brief This internal API fills the standby duration settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_standby_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_STANDBY, settings->standby_time);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	b25b      	sxtb	r3, r3
 80016e2:	f003 031f 	and.w	r3, r3, #31
 80016e6:	b25a      	sxtb	r2, r3
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	791b      	ldrb	r3, [r3, #4]
 80016ec:	015b      	lsls	r3, r3, #5
 80016ee:	b25b      	sxtb	r3, r3
 80016f0:	4313      	orrs	r3, r2
 80016f2:	b25b      	sxtb	r3, r3
 80016f4:	b2da      	uxtb	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	701a      	strb	r2, [r3, #0]
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr

08001706 <fill_osr_press_settings>:
/*!
 * @brief This internal API fills the pressure oversampling settings provided by
 * the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_press_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001706:	b480      	push	{r7}
 8001708:	b083      	sub	sp, #12
 800170a:	af00      	add	r7, sp, #0
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_PRESS, settings->osr_p);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	b25b      	sxtb	r3, r3
 8001716:	f023 031c 	bic.w	r3, r3, #28
 800171a:	b25a      	sxtb	r2, r3
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	b25b      	sxtb	r3, r3
 8001724:	f003 031c 	and.w	r3, r3, #28
 8001728:	b25b      	sxtb	r3, r3
 800172a:	4313      	orrs	r3, r2
 800172c:	b25b      	sxtb	r3, r3
 800172e:	b2da      	uxtb	r2, r3
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	701a      	strb	r2, [r3, #0]
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <fill_osr_temp_settings>:
/*!
 * @brief This internal API fills the temperature oversampling settings
 * provided by the user in the data buffer so as to write in the sensor.
 */
static void fill_osr_temp_settings(uint8_t *reg_data, const struct bme280_settings *settings)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
	*reg_data = BME280_SET_BITS(*reg_data, BME280_CTRL_TEMP, settings->osr_t);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	b25b      	sxtb	r3, r3
 8001750:	f003 031f 	and.w	r3, r3, #31
 8001754:	b25a      	sxtb	r2, r3
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	785b      	ldrb	r3, [r3, #1]
 800175a:	015b      	lsls	r3, r3, #5
 800175c:	b25b      	sxtb	r3, r3
 800175e:	4313      	orrs	r3, r2
 8001760:	b25b      	sxtb	r3, r3
 8001762:	b2da      	uxtb	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	701a      	strb	r2, [r3, #0]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <parse_device_settings>:
 * @brief This internal API parse the oversampling(pressure, temperature
 * and humidity), filter and standby duration settings and store in the
 * device structure.
 */
static void parse_device_settings(const uint8_t *reg_data, struct bme280_settings *settings)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
	settings->osr_h = BME280_GET_BITS_POS_0(reg_data[0], BME280_CTRL_HUM);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	b2da      	uxtb	r2, r3
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	709a      	strb	r2, [r3, #2]
	settings->osr_p = BME280_GET_BITS(reg_data[2], BME280_CTRL_PRESS);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	3302      	adds	r3, #2
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	109b      	asrs	r3, r3, #2
 8001794:	b2db      	uxtb	r3, r3
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	b2da      	uxtb	r2, r3
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	701a      	strb	r2, [r3, #0]
	settings->osr_t = BME280_GET_BITS(reg_data[2], BME280_CTRL_TEMP);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3302      	adds	r3, #2
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	095b      	lsrs	r3, r3, #5
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	705a      	strb	r2, [r3, #1]
	settings->filter = BME280_GET_BITS(reg_data[3], BME280_FILTER);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	3303      	adds	r3, #3
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	109b      	asrs	r3, r3, #2
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	70da      	strb	r2, [r3, #3]
	settings->standby_time = BME280_GET_BITS(reg_data[3], BME280_STANDBY);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3303      	adds	r3, #3
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	095b      	lsrs	r3, r3, #5
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	711a      	strb	r2, [r3, #4]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <write_power_mode>:
/*!
 * @brief This internal API writes the power mode in the sensor.
 */
static int8_t write_power_mode(uint8_t sensor_mode, const struct bme280_dev *dev)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b084      	sub	sp, #16
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	4603      	mov	r3, r0
 80017e4:	6039      	str	r1, [r7, #0]
 80017e6:	71fb      	strb	r3, [r7, #7]
	int8_t rslt;
	uint8_t reg_addr = BME280_PWR_CTRL_ADDR;
 80017e8:	23f4      	movs	r3, #244	; 0xf4
 80017ea:	73bb      	strb	r3, [r7, #14]
	/* Variable to store the value read from power mode register */
	uint8_t sensor_mode_reg_val;

	/* Read the power mode register */
	rslt = bme280_get_regs(reg_addr, &sensor_mode_reg_val, 1, dev);
 80017ec:	7bb8      	ldrb	r0, [r7, #14]
 80017ee:	f107 010d 	add.w	r1, r7, #13
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	2201      	movs	r2, #1
 80017f6:	f7ff fc0e 	bl	8001016 <bme280_get_regs>
 80017fa:	4603      	mov	r3, r0
 80017fc:	73fb      	strb	r3, [r7, #15]
	/* Set the power mode */
	if (rslt == BME280_OK) {
 80017fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001802:	2b00      	cmp	r3, #0
 8001804:	d117      	bne.n	8001836 <write_power_mode+0x5a>
		sensor_mode_reg_val = BME280_SET_BITS_POS_0(sensor_mode_reg_val, BME280_SENSOR_MODE, sensor_mode);
 8001806:	7b7b      	ldrb	r3, [r7, #13]
 8001808:	b25b      	sxtb	r3, r3
 800180a:	f023 0303 	bic.w	r3, r3, #3
 800180e:	b25a      	sxtb	r2, r3
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	f003 0303 	and.w	r3, r3, #3
 8001818:	b25b      	sxtb	r3, r3
 800181a:	4313      	orrs	r3, r2
 800181c:	b25b      	sxtb	r3, r3
 800181e:	b2db      	uxtb	r3, r3
 8001820:	737b      	strb	r3, [r7, #13]
		/* Write the power mode in the register */
		rslt = bme280_set_regs(&reg_addr, &sensor_mode_reg_val, 1, dev);
 8001822:	f107 010d 	add.w	r1, r7, #13
 8001826:	f107 000e 	add.w	r0, r7, #14
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	2201      	movs	r2, #1
 800182e:	f7ff fc22 	bl	8001076 <bme280_set_regs>
 8001832:	4603      	mov	r3, r0
 8001834:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 8001836:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <put_device_to_sleep>:

/*!
 * @brief This internal API puts the device to sleep mode.
 */
static int8_t put_device_to_sleep(const struct bme280_dev *dev)
{
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_data[4];
	struct bme280_settings settings;

	rslt = bme280_get_regs(BME280_CTRL_HUM_ADDR, reg_data, 4, dev);
 800184a:	f107 0110 	add.w	r1, r7, #16
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2204      	movs	r2, #4
 8001852:	20f2      	movs	r0, #242	; 0xf2
 8001854:	f7ff fbdf 	bl	8001016 <bme280_get_regs>
 8001858:	4603      	mov	r3, r0
 800185a:	75fb      	strb	r3, [r7, #23]
	if (rslt == BME280_OK) {
 800185c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d118      	bne.n	8001896 <put_device_to_sleep+0x54>
		parse_device_settings(reg_data, &settings);
 8001864:	f107 0208 	add.w	r2, r7, #8
 8001868:	f107 0310 	add.w	r3, r7, #16
 800186c:	4611      	mov	r1, r2
 800186e:	4618      	mov	r0, r3
 8001870:	f7ff ff80 	bl	8001774 <parse_device_settings>
		rslt = bme280_soft_reset(dev);
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff fd21 	bl	80012bc <bme280_soft_reset>
 800187a:	4603      	mov	r3, r0
 800187c:	75fb      	strb	r3, [r7, #23]
		if (rslt == BME280_OK)
 800187e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d107      	bne.n	8001896 <put_device_to_sleep+0x54>
			rslt = reload_device_settings(&settings, dev);
 8001886:	f107 0308 	add.w	r3, r7, #8
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	4618      	mov	r0, r3
 800188e:	f000 f808 	bl	80018a2 <reload_device_settings>
 8001892:	4603      	mov	r3, r0
 8001894:	75fb      	strb	r3, [r7, #23]
	}

	return rslt;
 8001896:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <reload_device_settings>:
/*!
 * @brief This internal API reloads the already existing device settings in
 * the sensor after soft reset.
 */
static int8_t reload_device_settings(const struct bme280_settings *settings, const struct bme280_dev *dev)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b084      	sub	sp, #16
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	6039      	str	r1, [r7, #0]
	int8_t rslt;

	rslt = set_osr_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	201f      	movs	r0, #31
 80018b2:	f7ff fe18 	bl	80014e6 <set_osr_settings>
 80018b6:	4603      	mov	r3, r0
 80018b8:	73fb      	strb	r3, [r7, #15]
	if (rslt == BME280_OK)
 80018ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d106      	bne.n	80018d0 <reload_device_settings+0x2e>
		rslt = set_filter_standby_settings(BME280_ALL_SETTINGS_SEL, settings, dev);
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	201f      	movs	r0, #31
 80018c8:	f7ff feaa 	bl	8001620 <set_filter_standby_settings>
 80018cc:	4603      	mov	r3, r0
 80018ce:	73fb      	strb	r3, [r7, #15]

	return rslt;
 80018d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3710      	adds	r7, #16
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <compensate_temperature>:
 * @brief This internal API is used to compensate the raw temperature data and
 * return the compensated temperature data in double data type.
 */
static double compensate_temperature(const struct bme280_uncomp_data *uncomp_data,
						struct bme280_calib_data *calib_data)
{
 80018dc:	b5b0      	push	{r4, r5, r7, lr}
 80018de:	b08c      	sub	sp, #48	; 0x30
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double temperature;
	double temperature_min = -40;
 80018e6:	f04f 0200 	mov.w	r2, #0
 80018ea:	4b5f      	ldr	r3, [pc, #380]	; (8001a68 <compensate_temperature+0x18c>)
 80018ec:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double temperature_max = 85;
 80018f0:	f04f 0200 	mov.w	r2, #0
 80018f4:	4b5d      	ldr	r3, [pc, #372]	; (8001a6c <compensate_temperature+0x190>)
 80018f6:	e9c7 2306 	strd	r2, r3, [r7, #24]

	var1 = ((double)uncomp_data->temperature) / 16384.0 - ((double)calib_data->dig_T1) / 1024.0;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fe00 	bl	8000504 <__aeabi_ui2d>
 8001904:	f04f 0200 	mov.w	r2, #0
 8001908:	4b59      	ldr	r3, [pc, #356]	; (8001a70 <compensate_temperature+0x194>)
 800190a:	f7fe ff9f 	bl	800084c <__aeabi_ddiv>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4614      	mov	r4, r2
 8001914:	461d      	mov	r5, r3
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	881b      	ldrh	r3, [r3, #0]
 800191a:	4618      	mov	r0, r3
 800191c:	f7fe fdf2 	bl	8000504 <__aeabi_ui2d>
 8001920:	f04f 0200 	mov.w	r2, #0
 8001924:	4b53      	ldr	r3, [pc, #332]	; (8001a74 <compensate_temperature+0x198>)
 8001926:	f7fe ff91 	bl	800084c <__aeabi_ddiv>
 800192a:	4602      	mov	r2, r0
 800192c:	460b      	mov	r3, r1
 800192e:	4620      	mov	r0, r4
 8001930:	4629      	mov	r1, r5
 8001932:	f7fe fca9 	bl	8000288 <__aeabi_dsub>
 8001936:	4602      	mov	r2, r0
 8001938:	460b      	mov	r3, r1
 800193a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var1 = var1 * ((double)calib_data->dig_T2);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe fded 	bl	8000524 <__aeabi_i2d>
 800194a:	4602      	mov	r2, r0
 800194c:	460b      	mov	r3, r1
 800194e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001952:	f7fe fe51 	bl	80005f8 <__aeabi_dmul>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (((double)uncomp_data->temperature) / 131072.0 - ((double)calib_data->dig_T1) / 8192.0);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fdce 	bl	8000504 <__aeabi_ui2d>
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001970:	f7fe ff6c 	bl	800084c <__aeabi_ddiv>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4614      	mov	r4, r2
 800197a:	461d      	mov	r5, r3
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	4618      	mov	r0, r3
 8001982:	f7fe fdbf 	bl	8000504 <__aeabi_ui2d>
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	4b3b      	ldr	r3, [pc, #236]	; (8001a78 <compensate_temperature+0x19c>)
 800198c:	f7fe ff5e 	bl	800084c <__aeabi_ddiv>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4620      	mov	r0, r4
 8001996:	4629      	mov	r1, r5
 8001998:	f7fe fc76 	bl	8000288 <__aeabi_dsub>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var2 = (var2 * var2) * ((double)calib_data->dig_T3);
 80019a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019a8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80019ac:	f7fe fe24 	bl	80005f8 <__aeabi_dmul>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4614      	mov	r4, r2
 80019b6:	461d      	mov	r5, r3
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fdb0 	bl	8000524 <__aeabi_i2d>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4620      	mov	r0, r4
 80019ca:	4629      	mov	r1, r5
 80019cc:	f7fe fe14 	bl	80005f8 <__aeabi_dmul>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	e9c7 2302 	strd	r2, r3, [r7, #8]
	calib_data->t_fine = (int32_t)(var1 + var2);
 80019d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019dc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019e0:	f7fe fc54 	bl	800028c <__adddf3>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4610      	mov	r0, r2
 80019ea:	4619      	mov	r1, r3
 80019ec:	f7ff f8b4 	bl	8000b58 <__aeabi_d2iz>
 80019f0:	4602      	mov	r2, r0
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24
	temperature = (var1 + var2) / 5120.0;
 80019f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80019fa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80019fe:	f7fe fc45 	bl	800028c <__adddf3>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4610      	mov	r0, r2
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <compensate_temperature+0x1a0>)
 8001a10:	f7fe ff1c 	bl	800084c <__aeabi_ddiv>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	if (temperature < temperature_min)
 8001a1c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a20:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a24:	f7ff f85a 	bl	8000adc <__aeabi_dcmplt>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d004      	beq.n	8001a38 <compensate_temperature+0x15c>
		temperature = temperature_min;
 8001a2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a32:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8001a36:	e00c      	b.n	8001a52 <compensate_temperature+0x176>
	else if (temperature > temperature_max)
 8001a38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a3c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a40:	f7ff f86a 	bl	8000b18 <__aeabi_dcmpgt>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <compensate_temperature+0x176>
		temperature = temperature_max;
 8001a4a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a4e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

	return temperature;
 8001a52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a56:	ec43 2b17 	vmov	d7, r2, r3
}
 8001a5a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a5e:	eef0 0a67 	vmov.f32	s1, s15
 8001a62:	3730      	adds	r7, #48	; 0x30
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bdb0      	pop	{r4, r5, r7, pc}
 8001a68:	c0440000 	.word	0xc0440000
 8001a6c:	40554000 	.word	0x40554000
 8001a70:	40d00000 	.word	0x40d00000
 8001a74:	40900000 	.word	0x40900000
 8001a78:	40c00000 	.word	0x40c00000
 8001a7c:	40b40000 	.word	0x40b40000

08001a80 <compensate_pressure>:
 * @brief This internal API is used to compensate the raw pressure data and
 * return the compensated pressure data in double data type.
 */
static double compensate_pressure(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001a80:	b5b0      	push	{r4, r5, r7, lr}
 8001a82:	b08e      	sub	sp, #56	; 0x38
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
	double var1;
	double var2;
	double var3;
	double pressure;
	double pressure_min = 30000.0;
 8001a8a:	a3d9      	add	r3, pc, #868	; (adr r3, 8001df0 <compensate_pressure+0x370>)
 8001a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a90:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	double pressure_max = 110000.0;
 8001a94:	a3d8      	add	r3, pc, #864	; (adr r3, 8001df8 <compensate_pressure+0x378>)
 8001a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a9a:	e9c7 2308 	strd	r2, r3, [r7, #32]

	var1 = ((double)calib_data->t_fine / 2.0) - 64000.0;
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fd3e 	bl	8000524 <__aeabi_i2d>
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001ab0:	f7fe fecc 	bl	800084c <__aeabi_ddiv>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	f04f 0200 	mov.w	r2, #0
 8001ac0:	4bc1      	ldr	r3, [pc, #772]	; (8001dc8 <compensate_pressure+0x348>)
 8001ac2:	f7fe fbe1 	bl	8000288 <__aeabi_dsub>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	460b      	mov	r3, r1
 8001aca:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var2 = var1 * var1 * ((double)calib_data->dig_P6) / 32768.0;
 8001ace:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ad2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001ad6:	f7fe fd8f 	bl	80005f8 <__aeabi_dmul>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4614      	mov	r4, r2
 8001ae0:	461d      	mov	r5, r3
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7fe fd1b 	bl	8000524 <__aeabi_i2d>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4620      	mov	r0, r4
 8001af4:	4629      	mov	r1, r5
 8001af6:	f7fe fd7f 	bl	80005f8 <__aeabi_dmul>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4610      	mov	r0, r2
 8001b00:	4619      	mov	r1, r3
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	4bb1      	ldr	r3, [pc, #708]	; (8001dcc <compensate_pressure+0x34c>)
 8001b08:	f7fe fea0 	bl	800084c <__aeabi_ddiv>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = var2 + var1 * ((double)calib_data->dig_P5) * 2.0;
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7fe fd02 	bl	8000524 <__aeabi_i2d>
 8001b20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b24:	f7fe fd68 	bl	80005f8 <__aeabi_dmul>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4610      	mov	r0, r2
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4602      	mov	r2, r0
 8001b32:	460b      	mov	r3, r1
 8001b34:	f7fe fbaa 	bl	800028c <__adddf3>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	460b      	mov	r3, r1
 8001b3c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b40:	f7fe fba4 	bl	800028c <__adddf3>
 8001b44:	4602      	mov	r2, r0
 8001b46:	460b      	mov	r3, r1
 8001b48:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var2 = (var2 / 4.0) + (((double)calib_data->dig_P4) * 65536.0);
 8001b4c:	f04f 0200 	mov.w	r2, #0
 8001b50:	4b9f      	ldr	r3, [pc, #636]	; (8001dd0 <compensate_pressure+0x350>)
 8001b52:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b56:	f7fe fe79 	bl	800084c <__aeabi_ddiv>
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4614      	mov	r4, r2
 8001b60:	461d      	mov	r5, r3
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe fcdb 	bl	8000524 <__aeabi_i2d>
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	4b98      	ldr	r3, [pc, #608]	; (8001dd4 <compensate_pressure+0x354>)
 8001b74:	f7fe fd40 	bl	80005f8 <__aeabi_dmul>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	460b      	mov	r3, r1
 8001b7c:	4620      	mov	r0, r4
 8001b7e:	4629      	mov	r1, r5
 8001b80:	f7fe fb84 	bl	800028c <__adddf3>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var3 = ((double)calib_data->dig_P3) * var1 * var1 / 524288.0;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7fe fcc6 	bl	8000524 <__aeabi_i2d>
 8001b98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b9c:	f7fe fd2c 	bl	80005f8 <__aeabi_dmul>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4610      	mov	r0, r2
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bac:	f7fe fd24 	bl	80005f8 <__aeabi_dmul>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	4610      	mov	r0, r2
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	f04f 0200 	mov.w	r2, #0
 8001bbc:	4b86      	ldr	r3, [pc, #536]	; (8001dd8 <compensate_pressure+0x358>)
 8001bbe:	f7fe fe45 	bl	800084c <__aeabi_ddiv>
 8001bc2:	4602      	mov	r2, r0
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var1 = (var3 + ((double)calib_data->dig_P2) * var1) / 524288.0;
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe fca7 	bl	8000524 <__aeabi_i2d>
 8001bd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bda:	f7fe fd0d 	bl	80005f8 <__aeabi_dmul>
 8001bde:	4602      	mov	r2, r0
 8001be0:	460b      	mov	r3, r1
 8001be2:	4610      	mov	r0, r2
 8001be4:	4619      	mov	r1, r3
 8001be6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001bea:	f7fe fb4f 	bl	800028c <__adddf3>
 8001bee:	4602      	mov	r2, r0
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	4610      	mov	r0, r2
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	4b77      	ldr	r3, [pc, #476]	; (8001dd8 <compensate_pressure+0x358>)
 8001bfc:	f7fe fe26 	bl	800084c <__aeabi_ddiv>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var1 = (1.0 + var1 / 32768.0) * ((double)calib_data->dig_P1);
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	4b6f      	ldr	r3, [pc, #444]	; (8001dcc <compensate_pressure+0x34c>)
 8001c0e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c12:	f7fe fe1b 	bl	800084c <__aeabi_ddiv>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f04f 0200 	mov.w	r2, #0
 8001c22:	4b6e      	ldr	r3, [pc, #440]	; (8001ddc <compensate_pressure+0x35c>)
 8001c24:	f7fe fb32 	bl	800028c <__adddf3>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4614      	mov	r4, r2
 8001c2e:	461d      	mov	r5, r3
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	88db      	ldrh	r3, [r3, #6]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fc65 	bl	8000504 <__aeabi_ui2d>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4620      	mov	r0, r4
 8001c40:	4629      	mov	r1, r5
 8001c42:	f7fe fcd9 	bl	80005f8 <__aeabi_dmul>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	e9c7 2306 	strd	r2, r3, [r7, #24]
	/* avoid exception caused by division by zero */
	if (var1) {
 8001c4e:	f04f 0200 	mov.w	r2, #0
 8001c52:	f04f 0300 	mov.w	r3, #0
 8001c56:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001c5a:	f7fe ff35 	bl	8000ac8 <__aeabi_dcmpeq>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f040 80cd 	bne.w	8001e00 <compensate_pressure+0x380>
		pressure = 1048576.0 - (double) uncomp_data->pressure;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7fe fc4a 	bl	8000504 <__aeabi_ui2d>
 8001c70:	4602      	mov	r2, r0
 8001c72:	460b      	mov	r3, r1
 8001c74:	f04f 0000 	mov.w	r0, #0
 8001c78:	4959      	ldr	r1, [pc, #356]	; (8001de0 <compensate_pressure+0x360>)
 8001c7a:	f7fe fb05 	bl	8000288 <__aeabi_dsub>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	460b      	mov	r3, r1
 8001c82:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		pressure = (pressure - (var2 / 4096.0)) * 6250.0 / var1;
 8001c86:	f04f 0200 	mov.w	r2, #0
 8001c8a:	4b56      	ldr	r3, [pc, #344]	; (8001de4 <compensate_pressure+0x364>)
 8001c8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001c90:	f7fe fddc 	bl	800084c <__aeabi_ddiv>
 8001c94:	4602      	mov	r2, r0
 8001c96:	460b      	mov	r3, r1
 8001c98:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c9c:	f7fe faf4 	bl	8000288 <__aeabi_dsub>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	4610      	mov	r0, r2
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	a345      	add	r3, pc, #276	; (adr r3, 8001dc0 <compensate_pressure+0x340>)
 8001caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cae:	f7fe fca3 	bl	80005f8 <__aeabi_dmul>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	4610      	mov	r0, r2
 8001cb8:	4619      	mov	r1, r3
 8001cba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001cbe:	f7fe fdc5 	bl	800084c <__aeabi_ddiv>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	460b      	mov	r3, r1
 8001cc6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		var1 = ((double)calib_data->dig_P9) * pressure * pressure / 2147483648.0;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7fe fc27 	bl	8000524 <__aeabi_i2d>
 8001cd6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cda:	f7fe fc8d 	bl	80005f8 <__aeabi_dmul>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cea:	f7fe fc85 	bl	80005f8 <__aeabi_dmul>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	460b      	mov	r3, r1
 8001cf2:	4610      	mov	r0, r2
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f04f 0200 	mov.w	r2, #0
 8001cfa:	4b3b      	ldr	r3, [pc, #236]	; (8001de8 <compensate_pressure+0x368>)
 8001cfc:	f7fe fda6 	bl	800084c <__aeabi_ddiv>
 8001d00:	4602      	mov	r2, r0
 8001d02:	460b      	mov	r3, r1
 8001d04:	e9c7 2306 	strd	r2, r3, [r7, #24]
		var2 = pressure * ((double)calib_data->dig_P8) / 32768.0;
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7fe fc08 	bl	8000524 <__aeabi_i2d>
 8001d14:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001d18:	f7fe fc6e 	bl	80005f8 <__aeabi_dmul>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	4610      	mov	r0, r2
 8001d22:	4619      	mov	r1, r3
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	4b28      	ldr	r3, [pc, #160]	; (8001dcc <compensate_pressure+0x34c>)
 8001d2a:	f7fe fd8f 	bl	800084c <__aeabi_ddiv>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	e9c7 2304 	strd	r2, r3, [r7, #16]
		pressure = pressure + (var1 + var2 + ((double)calib_data->dig_P7)) / 16.0;
 8001d36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d3a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001d3e:	f7fe faa5 	bl	800028c <__adddf3>
 8001d42:	4602      	mov	r2, r0
 8001d44:	460b      	mov	r3, r1
 8001d46:	4614      	mov	r4, r2
 8001d48:	461d      	mov	r5, r3
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7fe fbe7 	bl	8000524 <__aeabi_i2d>
 8001d56:	4602      	mov	r2, r0
 8001d58:	460b      	mov	r3, r1
 8001d5a:	4620      	mov	r0, r4
 8001d5c:	4629      	mov	r1, r5
 8001d5e:	f7fe fa95 	bl	800028c <__adddf3>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f04f 0200 	mov.w	r2, #0
 8001d6e:	4b1f      	ldr	r3, [pc, #124]	; (8001dec <compensate_pressure+0x36c>)
 8001d70:	f7fe fd6c 	bl	800084c <__aeabi_ddiv>
 8001d74:	4602      	mov	r2, r0
 8001d76:	460b      	mov	r3, r1
 8001d78:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d7c:	f7fe fa86 	bl	800028c <__adddf3>
 8001d80:	4602      	mov	r2, r0
 8001d82:	460b      	mov	r3, r1
 8001d84:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

		if (pressure < pressure_min)
 8001d88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d8c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001d90:	f7fe fea4 	bl	8000adc <__aeabi_dcmplt>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d004      	beq.n	8001da4 <compensate_pressure+0x324>
			pressure = pressure_min;
 8001d9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d9e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001da2:	e031      	b.n	8001e08 <compensate_pressure+0x388>
		else if (pressure > pressure_max)
 8001da4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001da8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001dac:	f7fe feb4 	bl	8000b18 <__aeabi_dcmpgt>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d028      	beq.n	8001e08 <compensate_pressure+0x388>
			pressure = pressure_max;
 8001db6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dba:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 8001dbe:	e023      	b.n	8001e08 <compensate_pressure+0x388>
 8001dc0:	00000000 	.word	0x00000000
 8001dc4:	40b86a00 	.word	0x40b86a00
 8001dc8:	40ef4000 	.word	0x40ef4000
 8001dcc:	40e00000 	.word	0x40e00000
 8001dd0:	40100000 	.word	0x40100000
 8001dd4:	40f00000 	.word	0x40f00000
 8001dd8:	41200000 	.word	0x41200000
 8001ddc:	3ff00000 	.word	0x3ff00000
 8001de0:	41300000 	.word	0x41300000
 8001de4:	40b00000 	.word	0x40b00000
 8001de8:	41e00000 	.word	0x41e00000
 8001dec:	40300000 	.word	0x40300000
 8001df0:	00000000 	.word	0x00000000
 8001df4:	40dd4c00 	.word	0x40dd4c00
 8001df8:	00000000 	.word	0x00000000
 8001dfc:	40fadb00 	.word	0x40fadb00
	} else { /* Invalid case */
		pressure = pressure_min;
 8001e00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e04:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	}

	return pressure;
 8001e08:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e0c:	ec43 2b17 	vmov	d7, r2, r3
}
 8001e10:	eeb0 0a47 	vmov.f32	s0, s14
 8001e14:	eef0 0a67 	vmov.f32	s1, s15
 8001e18:	3738      	adds	r7, #56	; 0x38
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e1e:	bf00      	nop

08001e20 <compensate_humidity>:
 * @brief This internal API is used to compensate the raw humidity data and
 * return the compensated humidity data in double data type.
 */
static double compensate_humidity(const struct bme280_uncomp_data *uncomp_data,
						const struct bme280_calib_data *calib_data)
{
 8001e20:	b5b0      	push	{r4, r5, r7, lr}
 8001e22:	b094      	sub	sp, #80	; 0x50
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
	double humidity;
	double humidity_min = 0.0;
 8001e2a:	f04f 0200 	mov.w	r2, #0
 8001e2e:	f04f 0300 	mov.w	r3, #0
 8001e32:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	double humidity_max = 100.0;
 8001e36:	f04f 0200 	mov.w	r2, #0
 8001e3a:	4b81      	ldr	r3, [pc, #516]	; (8002040 <compensate_humidity+0x220>)
 8001e3c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	double var3;
	double var4;
	double var5;
	double var6;

	var1 = ((double)calib_data->t_fine) - 76800.0;
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fb6d 	bl	8000524 <__aeabi_i2d>
 8001e4a:	f04f 0200 	mov.w	r2, #0
 8001e4e:	4b7d      	ldr	r3, [pc, #500]	; (8002044 <compensate_humidity+0x224>)
 8001e50:	f7fe fa1a 	bl	8000288 <__aeabi_dsub>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	var2 = (((double)calib_data->dig_H4) * 64.0 + (((double)calib_data->dig_H5) / 16384.0) * var1);
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001e62:	4618      	mov	r0, r3
 8001e64:	f7fe fb5e 	bl	8000524 <__aeabi_i2d>
 8001e68:	f04f 0200 	mov.w	r2, #0
 8001e6c:	4b76      	ldr	r3, [pc, #472]	; (8002048 <compensate_humidity+0x228>)
 8001e6e:	f7fe fbc3 	bl	80005f8 <__aeabi_dmul>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4614      	mov	r4, r2
 8001e78:	461d      	mov	r5, r3
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7fe fb4f 	bl	8000524 <__aeabi_i2d>
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	4b70      	ldr	r3, [pc, #448]	; (800204c <compensate_humidity+0x22c>)
 8001e8c:	f7fe fcde 	bl	800084c <__aeabi_ddiv>
 8001e90:	4602      	mov	r2, r0
 8001e92:	460b      	mov	r3, r1
 8001e94:	4610      	mov	r0, r2
 8001e96:	4619      	mov	r1, r3
 8001e98:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e9c:	f7fe fbac 	bl	80005f8 <__aeabi_dmul>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	4629      	mov	r1, r5
 8001ea8:	f7fe f9f0 	bl	800028c <__adddf3>
 8001eac:	4602      	mov	r2, r0
 8001eae:	460b      	mov	r3, r1
 8001eb0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
	var3 = uncomp_data->humidity - var2;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f7fe fb23 	bl	8000504 <__aeabi_ui2d>
 8001ebe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ec2:	f7fe f9e1 	bl	8000288 <__aeabi_dsub>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	460b      	mov	r3, r1
 8001eca:	e9c7 2308 	strd	r2, r3, [r7, #32]
	var4 = ((double)calib_data->dig_H2) / 65536.0;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7fe fb25 	bl	8000524 <__aeabi_i2d>
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	4b5c      	ldr	r3, [pc, #368]	; (8002050 <compensate_humidity+0x230>)
 8001ee0:	f7fe fcb4 	bl	800084c <__aeabi_ddiv>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	e9c7 2306 	strd	r2, r3, [r7, #24]
	var5 = (1.0 + (((double)calib_data->dig_H3) / 67108864.0) * var1);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	7f1b      	ldrb	r3, [r3, #28]
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7fe fb07 	bl	8000504 <__aeabi_ui2d>
 8001ef6:	f04f 0200 	mov.w	r2, #0
 8001efa:	4b56      	ldr	r3, [pc, #344]	; (8002054 <compensate_humidity+0x234>)
 8001efc:	f7fe fca6 	bl	800084c <__aeabi_ddiv>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4610      	mov	r0, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f0c:	f7fe fb74 	bl	80005f8 <__aeabi_dmul>
 8001f10:	4602      	mov	r2, r0
 8001f12:	460b      	mov	r3, r1
 8001f14:	4610      	mov	r0, r2
 8001f16:	4619      	mov	r1, r3
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	4b4e      	ldr	r3, [pc, #312]	; (8002058 <compensate_humidity+0x238>)
 8001f1e:	f7fe f9b5 	bl	800028c <__adddf3>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	e9c7 2304 	strd	r2, r3, [r7, #16]
	var6 = 1.0 + (((double)calib_data->dig_H6) / 67108864.0) * var1 * var5;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	f993 3022 	ldrsb.w	r3, [r3, #34]	; 0x22
 8001f30:	4618      	mov	r0, r3
 8001f32:	f7fe faf7 	bl	8000524 <__aeabi_i2d>
 8001f36:	f04f 0200 	mov.w	r2, #0
 8001f3a:	4b46      	ldr	r3, [pc, #280]	; (8002054 <compensate_humidity+0x234>)
 8001f3c:	f7fe fc86 	bl	800084c <__aeabi_ddiv>
 8001f40:	4602      	mov	r2, r0
 8001f42:	460b      	mov	r3, r1
 8001f44:	4610      	mov	r0, r2
 8001f46:	4619      	mov	r1, r3
 8001f48:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001f4c:	f7fe fb54 	bl	80005f8 <__aeabi_dmul>
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	4610      	mov	r0, r2
 8001f56:	4619      	mov	r1, r3
 8001f58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001f5c:	f7fe fb4c 	bl	80005f8 <__aeabi_dmul>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4610      	mov	r0, r2
 8001f66:	4619      	mov	r1, r3
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	4b3a      	ldr	r3, [pc, #232]	; (8002058 <compensate_humidity+0x238>)
 8001f6e:	f7fe f98d 	bl	800028c <__adddf3>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var6 = var3 * var4 * (var5 * var6);
 8001f7a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f7e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001f82:	f7fe fb39 	bl	80005f8 <__aeabi_dmul>
 8001f86:	4602      	mov	r2, r0
 8001f88:	460b      	mov	r3, r1
 8001f8a:	4614      	mov	r4, r2
 8001f8c:	461d      	mov	r5, r3
 8001f8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f92:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001f96:	f7fe fb2f 	bl	80005f8 <__aeabi_dmul>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	4620      	mov	r0, r4
 8001fa0:	4629      	mov	r1, r5
 8001fa2:	f7fe fb29 	bl	80005f8 <__aeabi_dmul>
 8001fa6:	4602      	mov	r2, r0
 8001fa8:	460b      	mov	r3, r1
 8001faa:	e9c7 2302 	strd	r2, r3, [r7, #8]
	humidity = var6 * (1.0 - ((double)calib_data->dig_H1) * var6 / 524288.0);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	7e1b      	ldrb	r3, [r3, #24]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe faa6 	bl	8000504 <__aeabi_ui2d>
 8001fb8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fbc:	f7fe fb1c 	bl	80005f8 <__aeabi_dmul>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	4610      	mov	r0, r2
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	4b23      	ldr	r3, [pc, #140]	; (800205c <compensate_humidity+0x23c>)
 8001fce:	f7fe fc3d 	bl	800084c <__aeabi_ddiv>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	f04f 0000 	mov.w	r0, #0
 8001fda:	491f      	ldr	r1, [pc, #124]	; (8002058 <compensate_humidity+0x238>)
 8001fdc:	f7fe f954 	bl	8000288 <__aeabi_dsub>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001fe8:	f7fe fb06 	bl	80005f8 <__aeabi_dmul>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	if (humidity > humidity_max)
 8001ff4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001ff8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001ffc:	f7fe fd8c 	bl	8000b18 <__aeabi_dcmpgt>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d004      	beq.n	8002010 <compensate_humidity+0x1f0>
		humidity = humidity_max;
 8002006:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800200a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
 800200e:	e00c      	b.n	800202a <compensate_humidity+0x20a>
	else if (humidity < humidity_min)
 8002010:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002014:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8002018:	f7fe fd60 	bl	8000adc <__aeabi_dcmplt>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <compensate_humidity+0x20a>
		humidity = humidity_min;
 8002022:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002026:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48

	return humidity;
 800202a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800202e:	ec43 2b17 	vmov	d7, r2, r3
}
 8002032:	eeb0 0a47 	vmov.f32	s0, s14
 8002036:	eef0 0a67 	vmov.f32	s1, s15
 800203a:	3750      	adds	r7, #80	; 0x50
 800203c:	46bd      	mov	sp, r7
 800203e:	bdb0      	pop	{r4, r5, r7, pc}
 8002040:	40590000 	.word	0x40590000
 8002044:	40f2c000 	.word	0x40f2c000
 8002048:	40500000 	.word	0x40500000
 800204c:	40d00000 	.word	0x40d00000
 8002050:	40f00000 	.word	0x40f00000
 8002054:	41900000 	.word	0x41900000
 8002058:	3ff00000 	.word	0x3ff00000
 800205c:	41200000 	.word	0x41200000

08002060 <get_calib_data>:
/*!
 * @brief This internal API reads the calibration data from the sensor, parse
 * it and store in the device structure.
 */
static int8_t get_calib_data(struct bme280_dev *dev)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08a      	sub	sp, #40	; 0x28
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
	int8_t rslt;
	uint8_t reg_addr = BME280_TEMP_PRESS_CALIB_DATA_ADDR;
 8002068:	2388      	movs	r3, #136	; 0x88
 800206a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	/* Array to store calibration data */
	uint8_t calib_data[BME280_TEMP_PRESS_CALIB_DATA_LEN] = {0};
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	f107 0310 	add.w	r3, r7, #16
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	60da      	str	r2, [r3, #12]
 8002080:	611a      	str	r2, [r3, #16]
 8002082:	829a      	strh	r2, [r3, #20]

	/* Read the calibration data from the sensor */
	rslt = bme280_get_regs(reg_addr, calib_data, BME280_TEMP_PRESS_CALIB_DATA_LEN, dev);
 8002084:	f107 010c 	add.w	r1, r7, #12
 8002088:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	221a      	movs	r2, #26
 8002090:	f7fe ffc1 	bl	8001016 <bme280_get_regs>
 8002094:	4603      	mov	r3, r0
 8002096:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (rslt == BME280_OK) {
 800209a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d11d      	bne.n	80020de <get_calib_data+0x7e>
		/* Parse temperature and pressure calibration data and store
		   it in device structure */
		parse_temp_press_calib_data(calib_data, dev);
 80020a2:	f107 030c 	add.w	r3, r7, #12
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 f84a 	bl	8002142 <parse_temp_press_calib_data>

		reg_addr = BME280_HUMIDITY_CALIB_DATA_ADDR;
 80020ae:	23e1      	movs	r3, #225	; 0xe1
 80020b0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		/* Read the humidity calibration data from the sensor */
		rslt = bme280_get_regs(reg_addr, calib_data, BME280_HUMIDITY_CALIB_DATA_LEN, dev);
 80020b4:	f107 010c 	add.w	r1, r7, #12
 80020b8:	f897 0026 	ldrb.w	r0, [r7, #38]	; 0x26
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2207      	movs	r2, #7
 80020c0:	f7fe ffa9 	bl	8001016 <bme280_get_regs>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if (rslt == BME280_OK) {
 80020ca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d105      	bne.n	80020de <get_calib_data+0x7e>
			/* Parse humidity calibration data and store it in
			   device structure */
			parse_humidity_calib_data(calib_data, dev);
 80020d2:	f107 030c 	add.w	r3, r7, #12
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4618      	mov	r0, r3
 80020da:	f000 f8e1 	bl	80022a0 <parse_humidity_calib_data>
		}
	}

	return rslt;
 80020de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3728      	adds	r7, #40	; 0x28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <interleave_reg_addr>:
/*!
 * @brief This internal API interleaves the register address between the
 * register data buffer for burst write operation.
 */
static void interleave_reg_addr(const uint8_t *reg_addr, uint8_t *temp_buff, const uint8_t *reg_data, uint8_t len)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b087      	sub	sp, #28
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	60f8      	str	r0, [r7, #12]
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	70fb      	strb	r3, [r7, #3]
	uint8_t index;

	for (index = 1; index < len; index++) {
 80020f8:	2301      	movs	r3, #1
 80020fa:	75fb      	strb	r3, [r7, #23]
 80020fc:	e016      	b.n	800212c <interleave_reg_addr+0x42>
		temp_buff[(index * 2) - 1] = reg_addr[index];
 80020fe:	7dfb      	ldrb	r3, [r7, #23]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	441a      	add	r2, r3
 8002104:	7dfb      	ldrb	r3, [r7, #23]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	3b01      	subs	r3, #1
 800210a:	68b9      	ldr	r1, [r7, #8]
 800210c:	440b      	add	r3, r1
 800210e:	7812      	ldrb	r2, [r2, #0]
 8002110:	701a      	strb	r2, [r3, #0]
		temp_buff[index * 2] = reg_data[index];
 8002112:	7dfb      	ldrb	r3, [r7, #23]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	441a      	add	r2, r3
 8002118:	7dfb      	ldrb	r3, [r7, #23]
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	4619      	mov	r1, r3
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	440b      	add	r3, r1
 8002122:	7812      	ldrb	r2, [r2, #0]
 8002124:	701a      	strb	r2, [r3, #0]
	for (index = 1; index < len; index++) {
 8002126:	7dfb      	ldrb	r3, [r7, #23]
 8002128:	3301      	adds	r3, #1
 800212a:	75fb      	strb	r3, [r7, #23]
 800212c:	7dfa      	ldrb	r2, [r7, #23]
 800212e:	78fb      	ldrb	r3, [r7, #3]
 8002130:	429a      	cmp	r2, r3
 8002132:	d3e4      	bcc.n	80020fe <interleave_reg_addr+0x14>
	}
}
 8002134:	bf00      	nop
 8002136:	bf00      	nop
 8002138:	371c      	adds	r7, #28
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr

08002142 <parse_temp_press_calib_data>:
/*!
 *  @brief This internal API is used to parse the temperature and
 *  pressure calibration data and store it in device structure.
 */
static void parse_temp_press_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 8002142:	b480      	push	{r7}
 8002144:	b085      	sub	sp, #20
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
 800214a:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	3310      	adds	r3, #16
 8002150:	60fb      	str	r3, [r7, #12]

	calib_data->dig_T1 = BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	3301      	adds	r3, #1
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	021b      	lsls	r3, r3, #8
 800215a:	b21a      	sxth	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	b21b      	sxth	r3, r3
 8002162:	4313      	orrs	r3, r2
 8002164:	b21b      	sxth	r3, r3
 8002166:	b29a      	uxth	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	801a      	strh	r2, [r3, #0]
	calib_data->dig_T2 = (int16_t)BME280_CONCAT_BYTES(reg_data[3], reg_data[2]);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3303      	adds	r3, #3
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	021b      	lsls	r3, r3, #8
 8002174:	b21a      	sxth	r2, r3
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3302      	adds	r3, #2
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	b21b      	sxth	r3, r3
 800217e:	4313      	orrs	r3, r2
 8002180:	b21a      	sxth	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	805a      	strh	r2, [r3, #2]
	calib_data->dig_T3 = (int16_t)BME280_CONCAT_BYTES(reg_data[5], reg_data[4]);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	3305      	adds	r3, #5
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	021b      	lsls	r3, r3, #8
 800218e:	b21a      	sxth	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3304      	adds	r3, #4
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	b21b      	sxth	r3, r3
 8002198:	4313      	orrs	r3, r2
 800219a:	b21a      	sxth	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	809a      	strh	r2, [r3, #4]
	calib_data->dig_P1 = BME280_CONCAT_BYTES(reg_data[7], reg_data[6]);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	3307      	adds	r3, #7
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	021b      	lsls	r3, r3, #8
 80021a8:	b21a      	sxth	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3306      	adds	r3, #6
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	b21b      	sxth	r3, r3
 80021b2:	4313      	orrs	r3, r2
 80021b4:	b21b      	sxth	r3, r3
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	80da      	strh	r2, [r3, #6]
	calib_data->dig_P2 = (int16_t)BME280_CONCAT_BYTES(reg_data[9], reg_data[8]);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3309      	adds	r3, #9
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	021b      	lsls	r3, r3, #8
 80021c4:	b21a      	sxth	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	3308      	adds	r3, #8
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	b21b      	sxth	r3, r3
 80021ce:	4313      	orrs	r3, r2
 80021d0:	b21a      	sxth	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	811a      	strh	r2, [r3, #8]
	calib_data->dig_P3 = (int16_t)BME280_CONCAT_BYTES(reg_data[11], reg_data[10]);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	330b      	adds	r3, #11
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	021b      	lsls	r3, r3, #8
 80021de:	b21a      	sxth	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	330a      	adds	r3, #10
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	b21b      	sxth	r3, r3
 80021e8:	4313      	orrs	r3, r2
 80021ea:	b21a      	sxth	r2, r3
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	815a      	strh	r2, [r3, #10]
	calib_data->dig_P4 = (int16_t)BME280_CONCAT_BYTES(reg_data[13], reg_data[12]);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	330d      	adds	r3, #13
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	021b      	lsls	r3, r3, #8
 80021f8:	b21a      	sxth	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	330c      	adds	r3, #12
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	b21b      	sxth	r3, r3
 8002202:	4313      	orrs	r3, r2
 8002204:	b21a      	sxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	819a      	strh	r2, [r3, #12]
	calib_data->dig_P5 = (int16_t)BME280_CONCAT_BYTES(reg_data[15], reg_data[14]);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	330f      	adds	r3, #15
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	021b      	lsls	r3, r3, #8
 8002212:	b21a      	sxth	r2, r3
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	330e      	adds	r3, #14
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	b21b      	sxth	r3, r3
 800221c:	4313      	orrs	r3, r2
 800221e:	b21a      	sxth	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	81da      	strh	r2, [r3, #14]
	calib_data->dig_P6 = (int16_t)BME280_CONCAT_BYTES(reg_data[17], reg_data[16]);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	3311      	adds	r3, #17
 8002228:	781b      	ldrb	r3, [r3, #0]
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	b21a      	sxth	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3310      	adds	r3, #16
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	b21b      	sxth	r3, r3
 8002236:	4313      	orrs	r3, r2
 8002238:	b21a      	sxth	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	821a      	strh	r2, [r3, #16]
	calib_data->dig_P7 = (int16_t)BME280_CONCAT_BYTES(reg_data[19], reg_data[18]);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	3313      	adds	r3, #19
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	021b      	lsls	r3, r3, #8
 8002246:	b21a      	sxth	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3312      	adds	r3, #18
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	b21b      	sxth	r3, r3
 8002250:	4313      	orrs	r3, r2
 8002252:	b21a      	sxth	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	825a      	strh	r2, [r3, #18]
	calib_data->dig_P8 = (int16_t)BME280_CONCAT_BYTES(reg_data[21], reg_data[20]);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3315      	adds	r3, #21
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	021b      	lsls	r3, r3, #8
 8002260:	b21a      	sxth	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3314      	adds	r3, #20
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	b21b      	sxth	r3, r3
 800226a:	4313      	orrs	r3, r2
 800226c:	b21a      	sxth	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	829a      	strh	r2, [r3, #20]
	calib_data->dig_P9 = (int16_t)BME280_CONCAT_BYTES(reg_data[23], reg_data[22]);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3317      	adds	r3, #23
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	021b      	lsls	r3, r3, #8
 800227a:	b21a      	sxth	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	3316      	adds	r3, #22
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	b21b      	sxth	r3, r3
 8002284:	4313      	orrs	r3, r2
 8002286:	b21a      	sxth	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	82da      	strh	r2, [r3, #22]
	calib_data->dig_H1 = reg_data[25];
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	7e5a      	ldrb	r2, [r3, #25]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	761a      	strb	r2, [r3, #24]

}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <parse_humidity_calib_data>:
/*!
 *  @brief This internal API is used to parse the humidity calibration data
 *  and store it in device structure.
 */
static void parse_humidity_calib_data(const uint8_t *reg_data, struct bme280_dev *dev)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b087      	sub	sp, #28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
	struct bme280_calib_data *calib_data = &dev->calib_data;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	3310      	adds	r3, #16
 80022ae:	617b      	str	r3, [r7, #20]
	int16_t dig_H4_lsb;
	int16_t dig_H4_msb;
	int16_t dig_H5_lsb;
	int16_t dig_H5_msb;

	calib_data->dig_H2 = (int16_t)BME280_CONCAT_BYTES(reg_data[1], reg_data[0]);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3301      	adds	r3, #1
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	021b      	lsls	r3, r3, #8
 80022b8:	b21a      	sxth	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	b21b      	sxth	r3, r3
 80022c0:	4313      	orrs	r3, r2
 80022c2:	b21a      	sxth	r2, r3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	835a      	strh	r2, [r3, #26]
	calib_data->dig_H3 = reg_data[2];
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	789a      	ldrb	r2, [r3, #2]
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	771a      	strb	r2, [r3, #28]

	dig_H4_msb = (int16_t)(int8_t)reg_data[3] * 16;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3303      	adds	r3, #3
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	b25b      	sxtb	r3, r3
 80022d8:	b29b      	uxth	r3, r3
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	b29b      	uxth	r3, r3
 80022de:	827b      	strh	r3, [r7, #18]
	dig_H4_lsb = (int16_t)(reg_data[4] & 0x0F);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	3304      	adds	r3, #4
 80022e4:	781b      	ldrb	r3, [r3, #0]
 80022e6:	b21b      	sxth	r3, r3
 80022e8:	f003 030f 	and.w	r3, r3, #15
 80022ec:	823b      	strh	r3, [r7, #16]
	calib_data->dig_H4 = dig_H4_msb | dig_H4_lsb;
 80022ee:	8a7a      	ldrh	r2, [r7, #18]
 80022f0:	8a3b      	ldrh	r3, [r7, #16]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	b21a      	sxth	r2, r3
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	83da      	strh	r2, [r3, #30]

	dig_H5_msb = (int16_t)(int8_t)reg_data[5] * 16;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3305      	adds	r3, #5
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	b25b      	sxtb	r3, r3
 8002302:	b29b      	uxth	r3, r3
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	b29b      	uxth	r3, r3
 8002308:	81fb      	strh	r3, [r7, #14]
	dig_H5_lsb = (int16_t)(reg_data[4] >> 4);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3304      	adds	r3, #4
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	091b      	lsrs	r3, r3, #4
 8002312:	b2db      	uxtb	r3, r3
 8002314:	81bb      	strh	r3, [r7, #12]
	calib_data->dig_H5 = dig_H5_msb | dig_H5_lsb;
 8002316:	89fa      	ldrh	r2, [r7, #14]
 8002318:	89bb      	ldrh	r3, [r7, #12]
 800231a:	4313      	orrs	r3, r2
 800231c:	b21a      	sxth	r2, r3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	841a      	strh	r2, [r3, #32]
	calib_data->dig_H6 = (int8_t)reg_data[6];
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3306      	adds	r3, #6
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	b25a      	sxtb	r2, r3
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8002330:	bf00      	nop
 8002332:	371c      	adds	r7, #28
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <are_settings_changed>:
/*!
 * @brief This internal API is used to identify the settings which the user
 * wants to modify in the sensor.
 */
static uint8_t are_settings_changed(uint8_t sub_settings, uint8_t desired_settings)
{
 800233c:	b480      	push	{r7}
 800233e:	b085      	sub	sp, #20
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	460a      	mov	r2, r1
 8002346:	71fb      	strb	r3, [r7, #7]
 8002348:	4613      	mov	r3, r2
 800234a:	71bb      	strb	r3, [r7, #6]
	uint8_t settings_changed = FALSE;
 800234c:	2300      	movs	r3, #0
 800234e:	73fb      	strb	r3, [r7, #15]

	if (sub_settings & desired_settings) {
 8002350:	79fa      	ldrb	r2, [r7, #7]
 8002352:	79bb      	ldrb	r3, [r7, #6]
 8002354:	4013      	ands	r3, r2
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d002      	beq.n	8002362 <are_settings_changed+0x26>
		/* User wants to modify this particular settings */
		settings_changed = TRUE;
 800235c:	2301      	movs	r3, #1
 800235e:	73fb      	strb	r3, [r7, #15]
 8002360:	e001      	b.n	8002366 <are_settings_changed+0x2a>
	} else {
		/* User don't want to modify this particular settings */
		settings_changed = FALSE;
 8002362:	2300      	movs	r3, #0
 8002364:	73fb      	strb	r3, [r7, #15]
	}

	return settings_changed;
 8002366:	7bfb      	ldrb	r3, [r7, #15]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3714      	adds	r7, #20
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <null_ptr_check>:
/*!
 * @brief This internal API is used to validate the device structure pointer for
 * null conditions.
 */
static int8_t null_ptr_check(const struct bme280_dev *dev)
{
 8002374:	b480      	push	{r7}
 8002376:	b085      	sub	sp, #20
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00b      	beq.n	800239a <null_ptr_check+0x26>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d007      	beq.n	800239a <null_ptr_check+0x26>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <null_ptr_check+0x26>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d102      	bne.n	80023a0 <null_ptr_check+0x2c>
		/* Device structure pointer is not valid */
		rslt = BME280_E_NULL_PTR;
 800239a:	23ff      	movs	r3, #255	; 0xff
 800239c:	73fb      	strb	r3, [r7, #15]
 800239e:	e001      	b.n	80023a4 <null_ptr_check+0x30>
	} else {
		/* Device structure is fine */
		rslt = BME280_OK;
 80023a0:	2300      	movs	r3, #0
 80023a2:	73fb      	strb	r3, [r7, #15]
	}

	return rslt;
 80023a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]

	// Передати в чергу !!!!!!!!!!  <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
	//HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr

080023c8 <Mount_SD>:



void Mount_SD (const TCHAR* path)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b082      	sub	sp, #8
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	fresult = f_mount(&fs, path, 0);   // was 1
 80023d0:	2200      	movs	r2, #0
 80023d2:	6879      	ldr	r1, [r7, #4]
 80023d4:	480a      	ldr	r0, [pc, #40]	; (8002400 <Mount_SD+0x38>)
 80023d6:	f00f fc6b 	bl	8011cb0 <f_mount>
 80023da:	4603      	mov	r3, r0
 80023dc:	461a      	mov	r2, r3
 80023de:	4b09      	ldr	r3, [pc, #36]	; (8002404 <Mount_SD+0x3c>)
 80023e0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80023e2:	4b08      	ldr	r3, [pc, #32]	; (8002404 <Mount_SD+0x3c>)
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <Mount_SD+0x2a>
	{
		Send_Uart ("ERROR!!! in mounting SD CARD...\n\n");
 80023ea:	4807      	ldr	r0, [pc, #28]	; (8002408 <Mount_SD+0x40>)
 80023ec:	f7ff ffe2 	bl	80023b4 <Send_Uart>
	}
	else
	{
		Send_Uart("SD CARD mounted successfully...\n");
	}
}
 80023f0:	e002      	b.n	80023f8 <Mount_SD+0x30>
		Send_Uart("SD CARD mounted successfully...\n");
 80023f2:	4806      	ldr	r0, [pc, #24]	; (800240c <Mount_SD+0x44>)
 80023f4:	f7ff ffde 	bl	80023b4 <Send_Uart>
}
 80023f8:	bf00      	nop
 80023fa:	3708      	adds	r7, #8
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	20007790 	.word	0x20007790
 8002404:	200087dc 	.word	0x200087dc
 8002408:	0801a638 	.word	0x0801a638
 800240c:	0801a65c 	.word	0x0801a65c

08002410 <Unmount_SD>:

void Unmount_SD (const TCHAR* path)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
	fresult = f_mount(NULL, path, 1);
 8002418:	2201      	movs	r2, #1
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	2000      	movs	r0, #0
 800241e:	f00f fc47 	bl	8011cb0 <f_mount>
 8002422:	4603      	mov	r3, r0
 8002424:	461a      	mov	r2, r3
 8002426:	4b08      	ldr	r3, [pc, #32]	; (8002448 <Unmount_SD+0x38>)
 8002428:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("SD CARD UNMOUNTED successfully...\n\n\n");
 800242a:	4b07      	ldr	r3, [pc, #28]	; (8002448 <Unmount_SD+0x38>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d103      	bne.n	800243a <Unmount_SD+0x2a>
 8002432:	4806      	ldr	r0, [pc, #24]	; (800244c <Unmount_SD+0x3c>)
 8002434:	f7ff ffbe 	bl	80023b4 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
}
 8002438:	e002      	b.n	8002440 <Unmount_SD+0x30>
	else Send_Uart("ERROR!!! in UNMOUNTING SD CARD\n\n\n");
 800243a:	4805      	ldr	r0, [pc, #20]	; (8002450 <Unmount_SD+0x40>)
 800243c:	f7ff ffba 	bl	80023b4 <Send_Uart>
}
 8002440:	bf00      	nop
 8002442:	3708      	adds	r7, #8
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	200087dc 	.word	0x200087dc
 800244c:	0801a680 	.word	0x0801a680
 8002450:	0801a6a8 	.word	0x0801a6a8

08002454 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b088      	sub	sp, #32
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &fno);
 800245c:	4940      	ldr	r1, [pc, #256]	; (8002560 <Create_File+0x10c>)
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f010 f968 	bl	8012734 <f_stat>
 8002464:	4603      	mov	r3, r0
 8002466:	461a      	mov	r2, r3
 8002468:	4b3e      	ldr	r3, [pc, #248]	; (8002564 <Create_File+0x110>)
 800246a:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 800246c:	4b3d      	ldr	r3, [pc, #244]	; (8002564 <Create_File+0x110>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d111      	bne.n	8002498 <Create_File+0x44>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 8002474:	2064      	movs	r0, #100	; 0x64
 8002476:	f014 fa07 	bl	8016888 <pvPortMalloc>
 800247a:	60f8      	str	r0, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	493a      	ldr	r1, [pc, #232]	; (8002568 <Create_File+0x114>)
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f016 f811 	bl	80184a8 <siprintf>
		Send_Uart(buf);
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f7ff ff94 	bl	80023b4 <Send_Uart>
		vPortFree(buf);
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f014 fac7 	bl	8016a20 <vPortFree>
	    return fresult;
 8002492:	4b34      	ldr	r3, [pc, #208]	; (8002564 <Create_File+0x110>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	e05f      	b.n	8002558 <Create_File+0x104>
	}
	else
	{
		fresult = f_open(&fil, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 8002498:	220b      	movs	r2, #11
 800249a:	6879      	ldr	r1, [r7, #4]
 800249c:	4833      	ldr	r0, [pc, #204]	; (800256c <Create_File+0x118>)
 800249e:	f00f fc6b 	bl	8011d78 <f_open>
 80024a2:	4603      	mov	r3, r0
 80024a4:	461a      	mov	r2, r3
 80024a6:	4b2f      	ldr	r3, [pc, #188]	; (8002564 <Create_File+0x110>)
 80024a8:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80024aa:	4b2e      	ldr	r3, [pc, #184]	; (8002564 <Create_File+0x110>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d014      	beq.n	80024dc <Create_File+0x88>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80024b2:	2064      	movs	r0, #100	; 0x64
 80024b4:	f014 f9e8 	bl	8016888 <pvPortMalloc>
 80024b8:	6138      	str	r0, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 80024ba:	4b2a      	ldr	r3, [pc, #168]	; (8002564 <Create_File+0x110>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	492b      	ldr	r1, [pc, #172]	; (8002570 <Create_File+0x11c>)
 80024c4:	6938      	ldr	r0, [r7, #16]
 80024c6:	f015 ffef 	bl	80184a8 <siprintf>
			Send_Uart(buf);
 80024ca:	6938      	ldr	r0, [r7, #16]
 80024cc:	f7ff ff72 	bl	80023b4 <Send_Uart>
			vPortFree(buf);
 80024d0:	6938      	ldr	r0, [r7, #16]
 80024d2:	f014 faa5 	bl	8016a20 <vPortFree>
		    return fresult;
 80024d6:	4b23      	ldr	r3, [pc, #140]	; (8002564 <Create_File+0x110>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	e03d      	b.n	8002558 <Create_File+0x104>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 80024dc:	2064      	movs	r0, #100	; 0x64
 80024de:	f014 f9d3 	bl	8016888 <pvPortMalloc>
 80024e2:	61f8      	str	r0, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	4923      	ldr	r1, [pc, #140]	; (8002574 <Create_File+0x120>)
 80024e8:	69f8      	ldr	r0, [r7, #28]
 80024ea:	f015 ffdd 	bl	80184a8 <siprintf>
			Send_Uart(buf);
 80024ee:	69f8      	ldr	r0, [r7, #28]
 80024f0:	f7ff ff60 	bl	80023b4 <Send_Uart>
			vPortFree(buf);
 80024f4:	69f8      	ldr	r0, [r7, #28]
 80024f6:	f014 fa93 	bl	8016a20 <vPortFree>
		}

		fresult = f_close(&fil);
 80024fa:	481c      	ldr	r0, [pc, #112]	; (800256c <Create_File+0x118>)
 80024fc:	f010 f8eb 	bl	80126d6 <f_close>
 8002500:	4603      	mov	r3, r0
 8002502:	461a      	mov	r2, r3
 8002504:	4b17      	ldr	r3, [pc, #92]	; (8002564 <Create_File+0x110>)
 8002506:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8002508:	4b16      	ldr	r3, [pc, #88]	; (8002564 <Create_File+0x110>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d012      	beq.n	8002536 <Create_File+0xe2>
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8002510:	2064      	movs	r0, #100	; 0x64
 8002512:	f014 f9b9 	bl	8016888 <pvPortMalloc>
 8002516:	6178      	str	r0, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 8002518:	4b12      	ldr	r3, [pc, #72]	; (8002564 <Create_File+0x110>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4915      	ldr	r1, [pc, #84]	; (8002578 <Create_File+0x124>)
 8002522:	6978      	ldr	r0, [r7, #20]
 8002524:	f015 ffc0 	bl	80184a8 <siprintf>
			Send_Uart(buf);
 8002528:	6978      	ldr	r0, [r7, #20]
 800252a:	f7ff ff43 	bl	80023b4 <Send_Uart>
			vPortFree(buf);
 800252e:	6978      	ldr	r0, [r7, #20]
 8002530:	f014 fa76 	bl	8016a20 <vPortFree>
 8002534:	e00e      	b.n	8002554 <Create_File+0x100>
		}
		else
		{
			char *buf = pvPortMalloc(100*sizeof(char));
 8002536:	2064      	movs	r0, #100	; 0x64
 8002538:	f014 f9a6 	bl	8016888 <pvPortMalloc>
 800253c:	61b8      	str	r0, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n", name);
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	490e      	ldr	r1, [pc, #56]	; (800257c <Create_File+0x128>)
 8002542:	69b8      	ldr	r0, [r7, #24]
 8002544:	f015 ffb0 	bl	80184a8 <siprintf>
			Send_Uart(buf);
 8002548:	69b8      	ldr	r0, [r7, #24]
 800254a:	f7ff ff33 	bl	80023b4 <Send_Uart>
			vPortFree(buf);
 800254e:	69b8      	ldr	r0, [r7, #24]
 8002550:	f014 fa66 	bl	8016a20 <vPortFree>
		}
	}
    return fresult;
 8002554:	4b03      	ldr	r3, [pc, #12]	; (8002564 <Create_File+0x110>)
 8002556:	781b      	ldrb	r3, [r3, #0]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3720      	adds	r7, #32
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20007678 	.word	0x20007678
 8002564:	200087dc 	.word	0x200087dc
 8002568:	0801a878 	.word	0x0801a878
 800256c:	200087e4 	.word	0x200087e4
 8002570:	0801a8b0 	.word	0x0801a8b0
 8002574:	0801a8d8 	.word	0x0801a8d8
 8002578:	0801a918 	.word	0x0801a918
 800257c:	0801a858 	.word	0x0801a858

08002580 <Update_File>:

FRESULT Update_File (char *name, char *data)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &fno);
 800258a:	4953      	ldr	r1, [pc, #332]	; (80026d8 <Update_File+0x158>)
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f010 f8d1 	bl	8012734 <f_stat>
 8002592:	4603      	mov	r3, r0
 8002594:	461a      	mov	r2, r3
 8002596:	4b51      	ldr	r3, [pc, #324]	; (80026dc <Update_File+0x15c>)
 8002598:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 800259a:	4b50      	ldr	r3, [pc, #320]	; (80026dc <Update_File+0x15c>)
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d011      	beq.n	80025c6 <Update_File+0x46>
	{
		char *buf = pvPortMalloc(100*sizeof(char));
 80025a2:	2064      	movs	r0, #100	; 0x64
 80025a4:	f014 f970 	bl	8016888 <pvPortMalloc>
 80025a8:	60b8      	str	r0, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	494c      	ldr	r1, [pc, #304]	; (80026e0 <Update_File+0x160>)
 80025ae:	68b8      	ldr	r0, [r7, #8]
 80025b0:	f015 ff7a 	bl	80184a8 <siprintf>
		Send_Uart (buf);
 80025b4:	68b8      	ldr	r0, [r7, #8]
 80025b6:	f7ff fefd 	bl	80023b4 <Send_Uart>
		vPortFree(buf);
 80025ba:	68b8      	ldr	r0, [r7, #8]
 80025bc:	f014 fa30 	bl	8016a20 <vPortFree>
	    return fresult;
 80025c0:	4b46      	ldr	r3, [pc, #280]	; (80026dc <Update_File+0x15c>)
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	e083      	b.n	80026ce <Update_File+0x14e>
	}

	else
	{
		 /* Create a file with read write access and open it */
	    fresult = f_open(&fil, name, FA_OPEN_APPEND | FA_WRITE);
 80025c6:	2232      	movs	r2, #50	; 0x32
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4846      	ldr	r0, [pc, #280]	; (80026e4 <Update_File+0x164>)
 80025cc:	f00f fbd4 	bl	8011d78 <f_open>
 80025d0:	4603      	mov	r3, r0
 80025d2:	461a      	mov	r2, r3
 80025d4:	4b41      	ldr	r3, [pc, #260]	; (80026dc <Update_File+0x15c>)
 80025d6:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80025d8:	4b40      	ldr	r3, [pc, #256]	; (80026dc <Update_File+0x15c>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d014      	beq.n	800260a <Update_File+0x8a>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80025e0:	2064      	movs	r0, #100	; 0x64
 80025e2:	f014 f951 	bl	8016888 <pvPortMalloc>
 80025e6:	60f8      	str	r0, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 80025e8:	4b3c      	ldr	r3, [pc, #240]	; (80026dc <Update_File+0x15c>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	461a      	mov	r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	493d      	ldr	r1, [pc, #244]	; (80026e8 <Update_File+0x168>)
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f015 ff58 	bl	80184a8 <siprintf>
	    	Send_Uart(buf);
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f7ff fedb 	bl	80023b4 <Send_Uart>
	        vPortFree(buf);
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f014 fa0e 	bl	8016a20 <vPortFree>
	        return fresult;
 8002604:	4b35      	ldr	r3, [pc, #212]	; (80026dc <Update_File+0x15c>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	e061      	b.n	80026ce <Update_File+0x14e>
	    }

	    /* Writing text */
	    fresult = f_write(&fil, data, strlen (data), &bw);
 800260a:	6838      	ldr	r0, [r7, #0]
 800260c:	f7fd fde0 	bl	80001d0 <strlen>
 8002610:	4602      	mov	r2, r0
 8002612:	4b36      	ldr	r3, [pc, #216]	; (80026ec <Update_File+0x16c>)
 8002614:	6839      	ldr	r1, [r7, #0]
 8002616:	4833      	ldr	r0, [pc, #204]	; (80026e4 <Update_File+0x164>)
 8002618:	f00f fe11 	bl	801223e <f_write>
 800261c:	4603      	mov	r3, r0
 800261e:	461a      	mov	r2, r3
 8002620:	4b2e      	ldr	r3, [pc, #184]	; (80026dc <Update_File+0x15c>)
 8002622:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 8002624:	4b2d      	ldr	r3, [pc, #180]	; (80026dc <Update_File+0x15c>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d012      	beq.n	8002652 <Update_File+0xd2>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 800262c:	2064      	movs	r0, #100	; 0x64
 800262e:	f014 f92b 	bl	8016888 <pvPortMalloc>
 8002632:	61b8      	str	r0, [r7, #24]
	    	sprintf (buf, "ERROR!!! No. %d in writing file *%s*\n\n", fresult, name);
 8002634:	4b29      	ldr	r3, [pc, #164]	; (80026dc <Update_File+0x15c>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	492c      	ldr	r1, [pc, #176]	; (80026f0 <Update_File+0x170>)
 800263e:	69b8      	ldr	r0, [r7, #24]
 8002640:	f015 ff32 	bl	80184a8 <siprintf>
	    	Send_Uart(buf);
 8002644:	69b8      	ldr	r0, [r7, #24]
 8002646:	f7ff feb5 	bl	80023b4 <Send_Uart>
	    	vPortFree(buf);
 800264a:	69b8      	ldr	r0, [r7, #24]
 800264c:	f014 f9e8 	bl	8016a20 <vPortFree>
 8002650:	e00e      	b.n	8002670 <Update_File+0xf0>
	    }

	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8002652:	2064      	movs	r0, #100	; 0x64
 8002654:	f014 f918 	bl	8016888 <pvPortMalloc>
 8002658:	61f8      	str	r0, [r7, #28]
	    	sprintf (buf, "*%s* UPDATED successfully\n", name);
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	4925      	ldr	r1, [pc, #148]	; (80026f4 <Update_File+0x174>)
 800265e:	69f8      	ldr	r0, [r7, #28]
 8002660:	f015 ff22 	bl	80184a8 <siprintf>
	    	Send_Uart(buf);
 8002664:	69f8      	ldr	r0, [r7, #28]
 8002666:	f7ff fea5 	bl	80023b4 <Send_Uart>
	    	vPortFree(buf);
 800266a:	69f8      	ldr	r0, [r7, #28]
 800266c:	f014 f9d8 	bl	8016a20 <vPortFree>
	    }

	    /* Close file */
	    fresult = f_close(&fil);
 8002670:	481c      	ldr	r0, [pc, #112]	; (80026e4 <Update_File+0x164>)
 8002672:	f010 f830 	bl	80126d6 <f_close>
 8002676:	4603      	mov	r3, r0
 8002678:	461a      	mov	r2, r3
 800267a:	4b18      	ldr	r3, [pc, #96]	; (80026dc <Update_File+0x15c>)
 800267c:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 800267e:	4b17      	ldr	r3, [pc, #92]	; (80026dc <Update_File+0x15c>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d012      	beq.n	80026ac <Update_File+0x12c>
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 8002686:	2064      	movs	r0, #100	; 0x64
 8002688:	f014 f8fe 	bl	8016888 <pvPortMalloc>
 800268c:	6138      	str	r0, [r7, #16]
	    	sprintf (buf, "ERROR!!! No. %d in closing file *%s*\n\n", fresult, name);
 800268e:	4b13      	ldr	r3, [pc, #76]	; (80026dc <Update_File+0x15c>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	461a      	mov	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4918      	ldr	r1, [pc, #96]	; (80026f8 <Update_File+0x178>)
 8002698:	6938      	ldr	r0, [r7, #16]
 800269a:	f015 ff05 	bl	80184a8 <siprintf>
	    	Send_Uart(buf);
 800269e:	6938      	ldr	r0, [r7, #16]
 80026a0:	f7ff fe88 	bl	80023b4 <Send_Uart>
	    	vPortFree(buf);
 80026a4:	6938      	ldr	r0, [r7, #16]
 80026a6:	f014 f9bb 	bl	8016a20 <vPortFree>
 80026aa:	e00e      	b.n	80026ca <Update_File+0x14a>
	    }
	    else
	    {
	    	char *buf = pvPortMalloc(100*sizeof(char));
 80026ac:	2064      	movs	r0, #100	; 0x64
 80026ae:	f014 f8eb 	bl	8016888 <pvPortMalloc>
 80026b2:	6178      	str	r0, [r7, #20]
	    	sprintf (buf, "File *%s* CLOSED successfully\n", name);
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	4911      	ldr	r1, [pc, #68]	; (80026fc <Update_File+0x17c>)
 80026b8:	6978      	ldr	r0, [r7, #20]
 80026ba:	f015 fef5 	bl	80184a8 <siprintf>
	    	Send_Uart(buf);
 80026be:	6978      	ldr	r0, [r7, #20]
 80026c0:	f7ff fe78 	bl	80023b4 <Send_Uart>
	    	vPortFree(buf);
 80026c4:	6978      	ldr	r0, [r7, #20]
 80026c6:	f014 f9ab 	bl	8016a20 <vPortFree>
	     }
	}
    return fresult;
 80026ca:	4b04      	ldr	r3, [pc, #16]	; (80026dc <Update_File+0x15c>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3720      	adds	r7, #32
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20007678 	.word	0x20007678
 80026dc:	200087dc 	.word	0x200087dc
 80026e0:	0801a700 	.word	0x0801a700
 80026e4:	200087e4 	.word	0x200087e4
 80026e8:	0801a720 	.word	0x0801a720
 80026ec:	200087d4 	.word	0x200087d4
 80026f0:	0801a93c 	.word	0x0801a93c
 80026f4:	0801a964 	.word	0x0801a964
 80026f8:	0801a830 	.word	0x0801a830
 80026fc:	0801a858 	.word	0x0801a858

08002700 <Create_Dir>:
	}
	return fresult;
}

FRESULT Create_Dir (char *name)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
    fresult = f_mkdir(name);
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f010 f860 	bl	80127ce <f_mkdir>
 800270e:	4603      	mov	r3, r0
 8002710:	461a      	mov	r2, r3
 8002712:	4b17      	ldr	r3, [pc, #92]	; (8002770 <Create_Dir+0x70>)
 8002714:	701a      	strb	r2, [r3, #0]
    if (fresult == FR_OK)
 8002716:	4b16      	ldr	r3, [pc, #88]	; (8002770 <Create_Dir+0x70>)
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10f      	bne.n	800273e <Create_Dir+0x3e>
    {
    	char *buf = pvPortMalloc(100*sizeof(char));
 800271e:	2064      	movs	r0, #100	; 0x64
 8002720:	f014 f8b2 	bl	8016888 <pvPortMalloc>
 8002724:	60b8      	str	r0, [r7, #8]
    	sprintf (buf, "*%s* has been created successfully\n", name);
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	4912      	ldr	r1, [pc, #72]	; (8002774 <Create_Dir+0x74>)
 800272a:	68b8      	ldr	r0, [r7, #8]
 800272c:	f015 febc 	bl	80184a8 <siprintf>
    	Send_Uart (buf);
 8002730:	68b8      	ldr	r0, [r7, #8]
 8002732:	f7ff fe3f 	bl	80023b4 <Send_Uart>
    	vPortFree(buf);
 8002736:	68b8      	ldr	r0, [r7, #8]
 8002738:	f014 f972 	bl	8016a20 <vPortFree>
 800273c:	e011      	b.n	8002762 <Create_Dir+0x62>
    }
    else
    {
    	char *buf = pvPortMalloc(100*sizeof(char));
 800273e:	2064      	movs	r0, #100	; 0x64
 8002740:	f014 f8a2 	bl	8016888 <pvPortMalloc>
 8002744:	60f8      	str	r0, [r7, #12]
    	sprintf (buf, "ERROR No. %d in creating directory *%s*\n\n", fresult,name);
 8002746:	4b0a      	ldr	r3, [pc, #40]	; (8002770 <Create_Dir+0x70>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	461a      	mov	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	490a      	ldr	r1, [pc, #40]	; (8002778 <Create_Dir+0x78>)
 8002750:	68f8      	ldr	r0, [r7, #12]
 8002752:	f015 fea9 	bl	80184a8 <siprintf>
    	Send_Uart(buf);
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f7ff fe2c 	bl	80023b4 <Send_Uart>
    	vPortFree(buf);
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f014 f95f 	bl	8016a20 <vPortFree>
    }
    return fresult;
 8002762:	4b03      	ldr	r3, [pc, #12]	; (8002770 <Create_Dir+0x70>)
 8002764:	781b      	ldrb	r3, [r3, #0]
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	200087dc 	.word	0x200087dc
 8002774:	0801a9c4 	.word	0x0801a9c4
 8002778:	0801a9e8 	.word	0x0801a9e8

0800277c <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8002780:	2200      	movs	r2, #0
 8002782:	2140      	movs	r1, #64	; 0x40
 8002784:	4802      	ldr	r0, [pc, #8]	; (8002790 <SELECT+0x14>)
 8002786:	f004 fd33 	bl	80071f0 <HAL_GPIO_WritePin>
}
 800278a:	bf00      	nop
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40020800 	.word	0x40020800

08002794 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8002798:	2201      	movs	r2, #1
 800279a:	2140      	movs	r1, #64	; 0x40
 800279c:	4802      	ldr	r0, [pc, #8]	; (80027a8 <DESELECT+0x14>)
 800279e:	f004 fd27 	bl	80071f0 <HAL_GPIO_WritePin>
}
 80027a2:	bf00      	nop
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40020800 	.word	0x40020800

080027ac <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	4603      	mov	r3, r0
 80027b4:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80027b6:	bf00      	nop
 80027b8:	4808      	ldr	r0, [pc, #32]	; (80027dc <SPI_TxByte+0x30>)
 80027ba:	f009 f8db 	bl	800b974 <HAL_SPI_GetState>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d1f9      	bne.n	80027b8 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 80027c4:	1df9      	adds	r1, r7, #7
 80027c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027ca:	2201      	movs	r2, #1
 80027cc:	4803      	ldr	r0, [pc, #12]	; (80027dc <SPI_TxByte+0x30>)
 80027ce:	f008 fbe8 	bl	800afa2 <HAL_SPI_Transmit>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	2000f91c 	.word	0x2000f91c

080027e0 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b084      	sub	sp, #16
 80027e4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80027e6:	23ff      	movs	r3, #255	; 0xff
 80027e8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80027ee:	bf00      	nop
 80027f0:	4809      	ldr	r0, [pc, #36]	; (8002818 <SPI_RxByte+0x38>)
 80027f2:	f009 f8bf 	bl	800b974 <HAL_SPI_GetState>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d1f9      	bne.n	80027f0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80027fc:	1dba      	adds	r2, r7, #6
 80027fe:	1df9      	adds	r1, r7, #7
 8002800:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	2301      	movs	r3, #1
 8002808:	4803      	ldr	r0, [pc, #12]	; (8002818 <SPI_RxByte+0x38>)
 800280a:	f008 fd06 	bl	800b21a <HAL_SPI_TransmitReceive>
  
  return data;
 800280e:	79bb      	ldrb	r3, [r7, #6]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3708      	adds	r7, #8
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	2000f91c 	.word	0x2000f91c

0800281c <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8002824:	f7ff ffdc 	bl	80027e0 <SPI_RxByte>
 8002828:	4603      	mov	r3, r0
 800282a:	461a      	mov	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	701a      	strb	r2, [r3, #0]
}
 8002830:	bf00      	nop
 8002832:	3708      	adds	r7, #8
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 800283e:	4b0b      	ldr	r3, [pc, #44]	; (800286c <SD_ReadyWait+0x34>)
 8002840:	2232      	movs	r2, #50	; 0x32
 8002842:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8002844:	f7ff ffcc 	bl	80027e0 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8002848:	f7ff ffca 	bl	80027e0 <SPI_RxByte>
 800284c:	4603      	mov	r3, r0
 800284e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8002850:	79fb      	ldrb	r3, [r7, #7]
 8002852:	2bff      	cmp	r3, #255	; 0xff
 8002854:	d004      	beq.n	8002860 <SD_ReadyWait+0x28>
 8002856:	4b05      	ldr	r3, [pc, #20]	; (800286c <SD_ReadyWait+0x34>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1f3      	bne.n	8002848 <SD_ReadyWait+0x10>
  
  return res;
 8002860:	79fb      	ldrb	r3, [r7, #7]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	2000f914 	.word	0x2000f914

08002870 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8002876:	f641 73ff 	movw	r3, #8191	; 0x1fff
 800287a:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 800287c:	f7ff ff8a 	bl	8002794 <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8002880:	2300      	movs	r3, #0
 8002882:	613b      	str	r3, [r7, #16]
 8002884:	e005      	b.n	8002892 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8002886:	20ff      	movs	r0, #255	; 0xff
 8002888:	f7ff ff90 	bl	80027ac <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	3301      	adds	r3, #1
 8002890:	613b      	str	r3, [r7, #16]
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	2b09      	cmp	r3, #9
 8002896:	ddf6      	ble.n	8002886 <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8002898:	f7ff ff70 	bl	800277c <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 800289c:	2340      	movs	r3, #64	; 0x40
 800289e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80028a4:	2300      	movs	r3, #0
 80028a6:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80028a8:	2300      	movs	r3, #0
 80028aa:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80028b0:	2395      	movs	r3, #149	; 0x95
 80028b2:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	e009      	b.n	80028ce <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 80028ba:	1d3a      	adds	r2, r7, #4
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	4413      	add	r3, r2
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff ff72 	bl	80027ac <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	3301      	adds	r3, #1
 80028cc:	60fb      	str	r3, [r7, #12]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b05      	cmp	r3, #5
 80028d2:	ddf2      	ble.n	80028ba <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 80028d4:	e002      	b.n	80028dc <SD_PowerOn+0x6c>
  {
    Count--;
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	3b01      	subs	r3, #1
 80028da:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80028dc:	f7ff ff80 	bl	80027e0 <SPI_RxByte>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d002      	beq.n	80028ec <SD_PowerOn+0x7c>
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1f4      	bne.n	80028d6 <SD_PowerOn+0x66>
  }
  
  DESELECT();
 80028ec:	f7ff ff52 	bl	8002794 <DESELECT>
  SPI_TxByte(0XFF);
 80028f0:	20ff      	movs	r0, #255	; 0xff
 80028f2:	f7ff ff5b 	bl	80027ac <SPI_TxByte>
  
  PowerFlag = 1;
 80028f6:	4b03      	ldr	r3, [pc, #12]	; (8002904 <SD_PowerOn+0x94>)
 80028f8:	2201      	movs	r2, #1
 80028fa:	701a      	strb	r2, [r3, #0]
}
 80028fc:	bf00      	nop
 80028fe:	3718      	adds	r7, #24
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}
 8002904:	200003b5 	.word	0x200003b5

08002908 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 800290c:	4b03      	ldr	r3, [pc, #12]	; (800291c <SD_PowerOff+0x14>)
 800290e:	2200      	movs	r2, #0
 8002910:	701a      	strb	r2, [r3, #0]
}
 8002912:	bf00      	nop
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	200003b5 	.word	0x200003b5

08002920 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8002920:	b480      	push	{r7}
 8002922:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8002924:	4b03      	ldr	r3, [pc, #12]	; (8002934 <SD_CheckPower+0x14>)
 8002926:	781b      	ldrb	r3, [r3, #0]
}
 8002928:	4618      	mov	r0, r3
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr
 8002932:	bf00      	nop
 8002934:	200003b5 	.word	0x200003b5

08002938 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8002942:	4b17      	ldr	r3, [pc, #92]	; (80029a0 <SD_RxDataBlock+0x68>)
 8002944:	220a      	movs	r2, #10
 8002946:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8002948:	f7ff ff4a 	bl	80027e0 <SPI_RxByte>
 800294c:	4603      	mov	r3, r0
 800294e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8002950:	7bfb      	ldrb	r3, [r7, #15]
 8002952:	2bff      	cmp	r3, #255	; 0xff
 8002954:	d104      	bne.n	8002960 <SD_RxDataBlock+0x28>
 8002956:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <SD_RxDataBlock+0x68>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1f3      	bne.n	8002948 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8002960:	7bfb      	ldrb	r3, [r7, #15]
 8002962:	2bfe      	cmp	r3, #254	; 0xfe
 8002964:	d001      	beq.n	800296a <SD_RxDataBlock+0x32>
    return FALSE;
 8002966:	2300      	movs	r3, #0
 8002968:	e016      	b.n	8002998 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	607a      	str	r2, [r7, #4]
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ff53 	bl	800281c <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	1c5a      	adds	r2, r3, #1
 800297a:	607a      	str	r2, [r7, #4]
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff4d 	bl	800281c <SPI_RxBytePtr>
  } while(btr -= 2);
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	3b02      	subs	r3, #2
 8002986:	603b      	str	r3, [r7, #0]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1ed      	bne.n	800296a <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 800298e:	f7ff ff27 	bl	80027e0 <SPI_RxByte>
  SPI_RxByte();
 8002992:	f7ff ff25 	bl	80027e0 <SPI_RxByte>
  
  return TRUE;
 8002996:	2301      	movs	r3, #1
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	200104ac 	.word	0x200104ac

080029a4 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	460b      	mov	r3, r1
 80029ae:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80029b4:	f7ff ff40 	bl	8002838 <SD_ReadyWait>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2bff      	cmp	r3, #255	; 0xff
 80029bc:	d001      	beq.n	80029c2 <SD_TxDataBlock+0x1e>
    return FALSE;
 80029be:	2300      	movs	r3, #0
 80029c0:	e040      	b.n	8002a44 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	4618      	mov	r0, r3
 80029c6:	f7ff fef1 	bl	80027ac <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 80029ca:	78fb      	ldrb	r3, [r7, #3]
 80029cc:	2bfd      	cmp	r3, #253	; 0xfd
 80029ce:	d031      	beq.n	8002a34 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 80029d0:	2300      	movs	r3, #0
 80029d2:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	1c5a      	adds	r2, r3, #1
 80029d8:	607a      	str	r2, [r7, #4]
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff fee5 	bl	80027ac <SPI_TxByte>
      SPI_TxByte(*buff++);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	607a      	str	r2, [r7, #4]
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7ff fede 	bl	80027ac <SPI_TxByte>
    } while (--wc);
 80029f0:	7bbb      	ldrb	r3, [r7, #14]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	73bb      	strb	r3, [r7, #14]
 80029f6:	7bbb      	ldrb	r3, [r7, #14]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1eb      	bne.n	80029d4 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 80029fc:	f7ff fef0 	bl	80027e0 <SPI_RxByte>
    SPI_RxByte();
 8002a00:	f7ff feee 	bl	80027e0 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8002a04:	e00b      	b.n	8002a1e <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8002a06:	f7ff feeb 	bl	80027e0 <SPI_RxByte>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8002a0e:	7bfb      	ldrb	r3, [r7, #15]
 8002a10:	f003 031f 	and.w	r3, r3, #31
 8002a14:	2b05      	cmp	r3, #5
 8002a16:	d006      	beq.n	8002a26 <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8002a18:	7b7b      	ldrb	r3, [r7, #13]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8002a1e:	7b7b      	ldrb	r3, [r7, #13]
 8002a20:	2b40      	cmp	r3, #64	; 0x40
 8002a22:	d9f0      	bls.n	8002a06 <SD_TxDataBlock+0x62>
 8002a24:	e000      	b.n	8002a28 <SD_TxDataBlock+0x84>
        break;
 8002a26:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8002a28:	bf00      	nop
 8002a2a:	f7ff fed9 	bl	80027e0 <SPI_RxByte>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0fa      	beq.n	8002a2a <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8002a34:	7bfb      	ldrb	r3, [r7, #15]
 8002a36:	f003 031f 	and.w	r3, r3, #31
 8002a3a:	2b05      	cmp	r3, #5
 8002a3c:	d101      	bne.n	8002a42 <SD_TxDataBlock+0x9e>
    return TRUE;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	6039      	str	r1, [r7, #0]
 8002a56:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8002a58:	f7ff feee 	bl	8002838 <SD_ReadyWait>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	2bff      	cmp	r3, #255	; 0xff
 8002a60:	d001      	beq.n	8002a66 <SD_SendCmd+0x1a>
    return 0xFF;
 8002a62:	23ff      	movs	r3, #255	; 0xff
 8002a64:	e040      	b.n	8002ae8 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7ff fe9f 	bl	80027ac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	0e1b      	lsrs	r3, r3, #24
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7ff fe99 	bl	80027ac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	0c1b      	lsrs	r3, r3, #16
 8002a7e:	b2db      	uxtb	r3, r3
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fe93 	bl	80027ac <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	0a1b      	lsrs	r3, r3, #8
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f7ff fe8d 	bl	80027ac <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fe88 	bl	80027ac <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8002aa0:	79fb      	ldrb	r3, [r7, #7]
 8002aa2:	2b40      	cmp	r3, #64	; 0x40
 8002aa4:	d101      	bne.n	8002aaa <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8002aa6:	2395      	movs	r3, #149	; 0x95
 8002aa8:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8002aaa:	79fb      	ldrb	r3, [r7, #7]
 8002aac:	2b48      	cmp	r3, #72	; 0x48
 8002aae:	d101      	bne.n	8002ab4 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8002ab0:	2387      	movs	r3, #135	; 0x87
 8002ab2:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f7ff fe78 	bl	80027ac <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8002abc:	79fb      	ldrb	r3, [r7, #7]
 8002abe:	2b4c      	cmp	r3, #76	; 0x4c
 8002ac0:	d101      	bne.n	8002ac6 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8002ac2:	f7ff fe8d 	bl	80027e0 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8002ac6:	230a      	movs	r3, #10
 8002ac8:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8002aca:	f7ff fe89 	bl	80027e0 <SPI_RxByte>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8002ad2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	da05      	bge.n	8002ae6 <SD_SendCmd+0x9a>
 8002ada:	7bbb      	ldrb	r3, [r7, #14]
 8002adc:	3b01      	subs	r3, #1
 8002ade:	73bb      	strb	r3, [r7, #14]
 8002ae0:	7bbb      	ldrb	r3, [r7, #14]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f1      	bne.n	8002aca <SD_SendCmd+0x7e>
  
  return res;
 8002ae6:	7b7b      	ldrb	r3, [r7, #13]
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8002af0:	b590      	push	{r4, r7, lr}
 8002af2:	b085      	sub	sp, #20
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8002afa:	79fb      	ldrb	r3, [r7, #7]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8002b00:	2301      	movs	r3, #1
 8002b02:	e0d5      	b.n	8002cb0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8002b04:	4b6c      	ldr	r3, [pc, #432]	; (8002cb8 <SD_disk_initialize+0x1c8>)
 8002b06:	781b      	ldrb	r3, [r3, #0]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <SD_disk_initialize+0x2a>
    return Stat;        
 8002b12:	4b69      	ldr	r3, [pc, #420]	; (8002cb8 <SD_disk_initialize+0x1c8>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	e0ca      	b.n	8002cb0 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8002b1a:	f7ff fea9 	bl	8002870 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8002b1e:	f7ff fe2d 	bl	800277c <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8002b22:	2300      	movs	r3, #0
 8002b24:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8002b26:	2100      	movs	r1, #0
 8002b28:	2040      	movs	r0, #64	; 0x40
 8002b2a:	f7ff ff8f 	bl	8002a4c <SD_SendCmd>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	f040 80a5 	bne.w	8002c80 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8002b36:	4b61      	ldr	r3, [pc, #388]	; (8002cbc <SD_disk_initialize+0x1cc>)
 8002b38:	2264      	movs	r2, #100	; 0x64
 8002b3a:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8002b3c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8002b40:	2048      	movs	r0, #72	; 0x48
 8002b42:	f7ff ff83 	bl	8002a4c <SD_SendCmd>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d158      	bne.n	8002bfe <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	73fb      	strb	r3, [r7, #15]
 8002b50:	e00c      	b.n	8002b6c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8002b52:	7bfc      	ldrb	r4, [r7, #15]
 8002b54:	f7ff fe44 	bl	80027e0 <SPI_RxByte>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	f107 0310 	add.w	r3, r7, #16
 8002b60:	4423      	add	r3, r4
 8002b62:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8002b66:	7bfb      	ldrb	r3, [r7, #15]
 8002b68:	3301      	adds	r3, #1
 8002b6a:	73fb      	strb	r3, [r7, #15]
 8002b6c:	7bfb      	ldrb	r3, [r7, #15]
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d9ef      	bls.n	8002b52 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8002b72:	7abb      	ldrb	r3, [r7, #10]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	f040 8083 	bne.w	8002c80 <SD_disk_initialize+0x190>
 8002b7a:	7afb      	ldrb	r3, [r7, #11]
 8002b7c:	2baa      	cmp	r3, #170	; 0xaa
 8002b7e:	d17f      	bne.n	8002c80 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8002b80:	2100      	movs	r1, #0
 8002b82:	2077      	movs	r0, #119	; 0x77
 8002b84:	f7ff ff62 	bl	8002a4c <SD_SendCmd>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d807      	bhi.n	8002b9e <SD_disk_initialize+0xae>
 8002b8e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002b92:	2069      	movs	r0, #105	; 0x69
 8002b94:	f7ff ff5a 	bl	8002a4c <SD_SendCmd>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d005      	beq.n	8002baa <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8002b9e:	4b47      	ldr	r3, [pc, #284]	; (8002cbc <SD_disk_initialize+0x1cc>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1eb      	bne.n	8002b80 <SD_disk_initialize+0x90>
 8002ba8:	e000      	b.n	8002bac <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8002baa:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8002bac:	4b43      	ldr	r3, [pc, #268]	; (8002cbc <SD_disk_initialize+0x1cc>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d064      	beq.n	8002c80 <SD_disk_initialize+0x190>
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	207a      	movs	r0, #122	; 0x7a
 8002bba:	f7ff ff47 	bl	8002a4c <SD_SendCmd>
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d15d      	bne.n	8002c80 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	73fb      	strb	r3, [r7, #15]
 8002bc8:	e00c      	b.n	8002be4 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8002bca:	7bfc      	ldrb	r4, [r7, #15]
 8002bcc:	f7ff fe08 	bl	80027e0 <SPI_RxByte>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	f107 0310 	add.w	r3, r7, #16
 8002bd8:	4423      	add	r3, r4
 8002bda:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8002bde:	7bfb      	ldrb	r3, [r7, #15]
 8002be0:	3301      	adds	r3, #1
 8002be2:	73fb      	strb	r3, [r7, #15]
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	2b03      	cmp	r3, #3
 8002be8:	d9ef      	bls.n	8002bca <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8002bea:	7a3b      	ldrb	r3, [r7, #8]
 8002bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <SD_disk_initialize+0x108>
 8002bf4:	2306      	movs	r3, #6
 8002bf6:	e000      	b.n	8002bfa <SD_disk_initialize+0x10a>
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	73bb      	strb	r3, [r7, #14]
 8002bfc:	e040      	b.n	8002c80 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8002bfe:	2100      	movs	r1, #0
 8002c00:	2077      	movs	r0, #119	; 0x77
 8002c02:	f7ff ff23 	bl	8002a4c <SD_SendCmd>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d808      	bhi.n	8002c1e <SD_disk_initialize+0x12e>
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	2069      	movs	r0, #105	; 0x69
 8002c10:	f7ff ff1c 	bl	8002a4c <SD_SendCmd>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d801      	bhi.n	8002c1e <SD_disk_initialize+0x12e>
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	e000      	b.n	8002c20 <SD_disk_initialize+0x130>
 8002c1e:	2301      	movs	r3, #1
 8002c20:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 8002c22:	7bbb      	ldrb	r3, [r7, #14]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d10e      	bne.n	8002c46 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8002c28:	2100      	movs	r1, #0
 8002c2a:	2077      	movs	r0, #119	; 0x77
 8002c2c:	f7ff ff0e 	bl	8002a4c <SD_SendCmd>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d80e      	bhi.n	8002c54 <SD_disk_initialize+0x164>
 8002c36:	2100      	movs	r1, #0
 8002c38:	2069      	movs	r0, #105	; 0x69
 8002c3a:	f7ff ff07 	bl	8002a4c <SD_SendCmd>
 8002c3e:	4603      	mov	r3, r0
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d107      	bne.n	8002c54 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8002c44:	e00d      	b.n	8002c62 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8002c46:	2100      	movs	r1, #0
 8002c48:	2041      	movs	r0, #65	; 0x41
 8002c4a:	f7ff feff 	bl	8002a4c <SD_SendCmd>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d005      	beq.n	8002c60 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8002c54:	4b19      	ldr	r3, [pc, #100]	; (8002cbc <SD_disk_initialize+0x1cc>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1e1      	bne.n	8002c22 <SD_disk_initialize+0x132>
 8002c5e:	e000      	b.n	8002c62 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8002c60:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 8002c62:	4b16      	ldr	r3, [pc, #88]	; (8002cbc <SD_disk_initialize+0x1cc>)
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d007      	beq.n	8002c7c <SD_disk_initialize+0x18c>
 8002c6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002c70:	2050      	movs	r0, #80	; 0x50
 8002c72:	f7ff feeb 	bl	8002a4c <SD_SendCmd>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8002c80:	4a0f      	ldr	r2, [pc, #60]	; (8002cc0 <SD_disk_initialize+0x1d0>)
 8002c82:	7bbb      	ldrb	r3, [r7, #14]
 8002c84:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 8002c86:	f7ff fd85 	bl	8002794 <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8002c8a:	f7ff fda9 	bl	80027e0 <SPI_RxByte>
  
  if (type) 
 8002c8e:	7bbb      	ldrb	r3, [r7, #14]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8002c94:	4b08      	ldr	r3, [pc, #32]	; (8002cb8 <SD_disk_initialize+0x1c8>)
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	f023 0301 	bic.w	r3, r3, #1
 8002c9e:	b2da      	uxtb	r2, r3
 8002ca0:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <SD_disk_initialize+0x1c8>)
 8002ca2:	701a      	strb	r2, [r3, #0]
 8002ca4:	e001      	b.n	8002caa <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8002ca6:	f7ff fe2f 	bl	8002908 <SD_PowerOff>
  }
  
  return Stat;
 8002caa:	4b03      	ldr	r3, [pc, #12]	; (8002cb8 <SD_disk_initialize+0x1c8>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	b2db      	uxtb	r3, r3
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd90      	pop	{r4, r7, pc}
 8002cb8:	20000000 	.word	0x20000000
 8002cbc:	200104ac 	.word	0x200104ac
 8002cc0:	200003b4 	.word	0x200003b4

08002cc4 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	4603      	mov	r3, r0
 8002ccc:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8002cce:	79fb      	ldrb	r3, [r7, #7]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e002      	b.n	8002cde <SD_disk_status+0x1a>
  
  return Stat;
 8002cd8:	4b04      	ldr	r3, [pc, #16]	; (8002cec <SD_disk_status+0x28>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	b2db      	uxtb	r3, r3
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	20000000 	.word	0x20000000

08002cf0 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b084      	sub	sp, #16
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60b9      	str	r1, [r7, #8]
 8002cf8:	607a      	str	r2, [r7, #4]
 8002cfa:	603b      	str	r3, [r7, #0]
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d102      	bne.n	8002d0c <SD_disk_read+0x1c>
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <SD_disk_read+0x20>
    return RES_PARERR;
 8002d0c:	2304      	movs	r3, #4
 8002d0e:	e051      	b.n	8002db4 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8002d10:	4b2a      	ldr	r3, [pc, #168]	; (8002dbc <SD_disk_read+0xcc>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e048      	b.n	8002db4 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8002d22:	4b27      	ldr	r3, [pc, #156]	; (8002dc0 <SD_disk_read+0xd0>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d102      	bne.n	8002d34 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	025b      	lsls	r3, r3, #9
 8002d32:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8002d34:	f7ff fd22 	bl	800277c <SELECT>
  
  if (count == 1) 
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d111      	bne.n	8002d62 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	2051      	movs	r0, #81	; 0x51
 8002d42:	f7ff fe83 	bl	8002a4c <SD_SendCmd>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d129      	bne.n	8002da0 <SD_disk_read+0xb0>
 8002d4c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d50:	68b8      	ldr	r0, [r7, #8]
 8002d52:	f7ff fdf1 	bl	8002938 <SD_RxDataBlock>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d021      	beq.n	8002da0 <SD_disk_read+0xb0>
      count = 0;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	603b      	str	r3, [r7, #0]
 8002d60:	e01e      	b.n	8002da0 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	2052      	movs	r0, #82	; 0x52
 8002d66:	f7ff fe71 	bl	8002a4c <SD_SendCmd>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d117      	bne.n	8002da0 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8002d70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d74:	68b8      	ldr	r0, [r7, #8]
 8002d76:	f7ff fddf 	bl	8002938 <SD_RxDataBlock>
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00a      	beq.n	8002d96 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002d86:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	603b      	str	r3, [r7, #0]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d1ed      	bne.n	8002d70 <SD_disk_read+0x80>
 8002d94:	e000      	b.n	8002d98 <SD_disk_read+0xa8>
          break;
 8002d96:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8002d98:	2100      	movs	r1, #0
 8002d9a:	204c      	movs	r0, #76	; 0x4c
 8002d9c:	f7ff fe56 	bl	8002a4c <SD_SendCmd>
    }
  }
  
  DESELECT();
 8002da0:	f7ff fcf8 	bl	8002794 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8002da4:	f7ff fd1c 	bl	80027e0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	bf14      	ite	ne
 8002dae:	2301      	movne	r3, #1
 8002db0:	2300      	moveq	r3, #0
 8002db2:	b2db      	uxtb	r3, r3
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	20000000 	.word	0x20000000
 8002dc0:	200003b4 	.word	0x200003b4

08002dc4 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b084      	sub	sp, #16
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	607a      	str	r2, [r7, #4]
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8002dd4:	7bfb      	ldrb	r3, [r7, #15]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d102      	bne.n	8002de0 <SD_disk_write+0x1c>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <SD_disk_write+0x20>
    return RES_PARERR;
 8002de0:	2304      	movs	r3, #4
 8002de2:	e06b      	b.n	8002ebc <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8002de4:	4b37      	ldr	r3, [pc, #220]	; (8002ec4 <SD_disk_write+0x100>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e062      	b.n	8002ebc <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8002df6:	4b33      	ldr	r3, [pc, #204]	; (8002ec4 <SD_disk_write+0x100>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d001      	beq.n	8002e08 <SD_disk_write+0x44>
    return RES_WRPRT;
 8002e04:	2302      	movs	r3, #2
 8002e06:	e059      	b.n	8002ebc <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8002e08:	4b2f      	ldr	r3, [pc, #188]	; (8002ec8 <SD_disk_write+0x104>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	f003 0304 	and.w	r3, r3, #4
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d102      	bne.n	8002e1a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	025b      	lsls	r3, r3, #9
 8002e18:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8002e1a:	f7ff fcaf 	bl	800277c <SELECT>
  
  if (count == 1) 
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d110      	bne.n	8002e46 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	2058      	movs	r0, #88	; 0x58
 8002e28:	f7ff fe10 	bl	8002a4c <SD_SendCmd>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d13a      	bne.n	8002ea8 <SD_disk_write+0xe4>
 8002e32:	21fe      	movs	r1, #254	; 0xfe
 8002e34:	68b8      	ldr	r0, [r7, #8]
 8002e36:	f7ff fdb5 	bl	80029a4 <SD_TxDataBlock>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d033      	beq.n	8002ea8 <SD_disk_write+0xe4>
      count = 0;
 8002e40:	2300      	movs	r3, #0
 8002e42:	603b      	str	r3, [r7, #0]
 8002e44:	e030      	b.n	8002ea8 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8002e46:	4b20      	ldr	r3, [pc, #128]	; (8002ec8 <SD_disk_write+0x104>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	f003 0302 	and.w	r3, r3, #2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d007      	beq.n	8002e62 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8002e52:	2100      	movs	r1, #0
 8002e54:	2077      	movs	r0, #119	; 0x77
 8002e56:	f7ff fdf9 	bl	8002a4c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8002e5a:	6839      	ldr	r1, [r7, #0]
 8002e5c:	2057      	movs	r0, #87	; 0x57
 8002e5e:	f7ff fdf5 	bl	8002a4c <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8002e62:	6879      	ldr	r1, [r7, #4]
 8002e64:	2059      	movs	r0, #89	; 0x59
 8002e66:	f7ff fdf1 	bl	8002a4c <SD_SendCmd>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d11b      	bne.n	8002ea8 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8002e70:	21fc      	movs	r1, #252	; 0xfc
 8002e72:	68b8      	ldr	r0, [r7, #8]
 8002e74:	f7ff fd96 	bl	80029a4 <SD_TxDataBlock>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00a      	beq.n	8002e94 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002e84:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	603b      	str	r3, [r7, #0]
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1ee      	bne.n	8002e70 <SD_disk_write+0xac>
 8002e92:	e000      	b.n	8002e96 <SD_disk_write+0xd2>
          break;
 8002e94:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8002e96:	21fd      	movs	r1, #253	; 0xfd
 8002e98:	2000      	movs	r0, #0
 8002e9a:	f7ff fd83 	bl	80029a4 <SD_TxDataBlock>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <SD_disk_write+0xe4>
      {        
        count = 1;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8002ea8:	f7ff fc74 	bl	8002794 <DESELECT>
  SPI_RxByte();
 8002eac:	f7ff fc98 	bl	80027e0 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	bf14      	ite	ne
 8002eb6:	2301      	movne	r3, #1
 8002eb8:	2300      	moveq	r3, #0
 8002eba:	b2db      	uxtb	r3, r3
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}
 8002ec4:	20000000 	.word	0x20000000
 8002ec8:	200003b4 	.word	0x200003b4

08002ecc <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8002ecc:	b590      	push	{r4, r7, lr}
 8002ece:	b08b      	sub	sp, #44	; 0x2c
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	603a      	str	r2, [r7, #0]
 8002ed6:	71fb      	strb	r3, [r7, #7]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d001      	beq.n	8002eea <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8002ee6:	2304      	movs	r3, #4
 8002ee8:	e11b      	b.n	8003122 <SD_disk_ioctl+0x256>
  
  res = RES_ERROR;
 8002eea:	2301      	movs	r3, #1
 8002eec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8002ef0:	79bb      	ldrb	r3, [r7, #6]
 8002ef2:	2b05      	cmp	r3, #5
 8002ef4:	d129      	bne.n	8002f4a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8002ef6:	6a3b      	ldr	r3, [r7, #32]
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d017      	beq.n	8002f2e <SD_disk_ioctl+0x62>
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	dc1f      	bgt.n	8002f42 <SD_disk_ioctl+0x76>
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d002      	beq.n	8002f0c <SD_disk_ioctl+0x40>
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d00b      	beq.n	8002f22 <SD_disk_ioctl+0x56>
 8002f0a:	e01a      	b.n	8002f42 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8002f0c:	f7ff fd08 	bl	8002920 <SD_CheckPower>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8002f16:	f7ff fcf7 	bl	8002908 <SD_PowerOff>
      res = RES_OK;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002f20:	e0fd      	b.n	800311e <SD_disk_ioctl+0x252>
    case 1:
      SD_PowerOn();             /* Power On */
 8002f22:	f7ff fca5 	bl	8002870 <SD_PowerOn>
      res = RES_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002f2c:	e0f7      	b.n	800311e <SD_disk_ioctl+0x252>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8002f2e:	6a3b      	ldr	r3, [r7, #32]
 8002f30:	1c5c      	adds	r4, r3, #1
 8002f32:	f7ff fcf5 	bl	8002920 <SD_CheckPower>
 8002f36:	4603      	mov	r3, r0
 8002f38:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8002f40:	e0ed      	b.n	800311e <SD_disk_ioctl+0x252>
    default:
      res = RES_PARERR;
 8002f42:	2304      	movs	r3, #4
 8002f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002f48:	e0e9      	b.n	800311e <SD_disk_ioctl+0x252>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8002f4a:	4b78      	ldr	r3, [pc, #480]	; (800312c <SD_disk_ioctl+0x260>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e0e2      	b.n	8003122 <SD_disk_ioctl+0x256>
    
    SELECT();
 8002f5c:	f7ff fc0e 	bl	800277c <SELECT>
    
    switch (ctrl) 
 8002f60:	79bb      	ldrb	r3, [r7, #6]
 8002f62:	2b0d      	cmp	r3, #13
 8002f64:	f200 80cc 	bhi.w	8003100 <SD_disk_ioctl+0x234>
 8002f68:	a201      	add	r2, pc, #4	; (adr r2, 8002f70 <SD_disk_ioctl+0xa4>)
 8002f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6e:	bf00      	nop
 8002f70:	0800306b 	.word	0x0800306b
 8002f74:	08002fa9 	.word	0x08002fa9
 8002f78:	0800305b 	.word	0x0800305b
 8002f7c:	08003101 	.word	0x08003101
 8002f80:	08003101 	.word	0x08003101
 8002f84:	08003101 	.word	0x08003101
 8002f88:	08003101 	.word	0x08003101
 8002f8c:	08003101 	.word	0x08003101
 8002f90:	08003101 	.word	0x08003101
 8002f94:	08003101 	.word	0x08003101
 8002f98:	08003101 	.word	0x08003101
 8002f9c:	0800307d 	.word	0x0800307d
 8002fa0:	080030a1 	.word	0x080030a1
 8002fa4:	080030c5 	.word	0x080030c5
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8002fa8:	2100      	movs	r1, #0
 8002faa:	2049      	movs	r0, #73	; 0x49
 8002fac:	f7ff fd4e 	bl	8002a4c <SD_SendCmd>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	f040 80a8 	bne.w	8003108 <SD_disk_ioctl+0x23c>
 8002fb8:	f107 030c 	add.w	r3, r7, #12
 8002fbc:	2110      	movs	r1, #16
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff fcba 	bl	8002938 <SD_RxDataBlock>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 809e 	beq.w	8003108 <SD_disk_ioctl+0x23c>
      {
        if ((csd[0] >> 6) == 1) 
 8002fcc:	7b3b      	ldrb	r3, [r7, #12]
 8002fce:	099b      	lsrs	r3, r3, #6
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d10e      	bne.n	8002ff4 <SD_disk_ioctl+0x128>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8002fd6:	7d7b      	ldrb	r3, [r7, #21]
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	7d3b      	ldrb	r3, [r7, #20]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	021b      	lsls	r3, r3, #8
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	4413      	add	r3, r2
 8002fe4:	b29b      	uxth	r3, r3
 8002fe6:	3301      	adds	r3, #1
 8002fe8:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8002fea:	8bfb      	ldrh	r3, [r7, #30]
 8002fec:	029a      	lsls	r2, r3, #10
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	601a      	str	r2, [r3, #0]
 8002ff2:	e02e      	b.n	8003052 <SD_disk_ioctl+0x186>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8002ff4:	7c7b      	ldrb	r3, [r7, #17]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	7dbb      	ldrb	r3, [r7, #22]
 8002ffe:	09db      	lsrs	r3, r3, #7
 8003000:	b2db      	uxtb	r3, r3
 8003002:	4413      	add	r3, r2
 8003004:	b2da      	uxtb	r2, r3
 8003006:	7d7b      	ldrb	r3, [r7, #21]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	b2db      	uxtb	r3, r3
 800300c:	f003 0306 	and.w	r3, r3, #6
 8003010:	b2db      	uxtb	r3, r3
 8003012:	4413      	add	r3, r2
 8003014:	b2db      	uxtb	r3, r3
 8003016:	3302      	adds	r3, #2
 8003018:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800301c:	7d3b      	ldrb	r3, [r7, #20]
 800301e:	099b      	lsrs	r3, r3, #6
 8003020:	b2db      	uxtb	r3, r3
 8003022:	b29a      	uxth	r2, r3
 8003024:	7cfb      	ldrb	r3, [r7, #19]
 8003026:	b29b      	uxth	r3, r3
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	b29b      	uxth	r3, r3
 800302c:	4413      	add	r3, r2
 800302e:	b29a      	uxth	r2, r3
 8003030:	7cbb      	ldrb	r3, [r7, #18]
 8003032:	029b      	lsls	r3, r3, #10
 8003034:	b29b      	uxth	r3, r3
 8003036:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800303a:	b29b      	uxth	r3, r3
 800303c:	4413      	add	r3, r2
 800303e:	b29b      	uxth	r3, r3
 8003040:	3301      	adds	r3, #1
 8003042:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8003044:	8bfa      	ldrh	r2, [r7, #30]
 8003046:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800304a:	3b09      	subs	r3, #9
 800304c:	409a      	lsls	r2, r3
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8003058:	e056      	b.n	8003108 <SD_disk_ioctl+0x23c>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003060:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8003062:	2300      	movs	r3, #0
 8003064:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8003068:	e055      	b.n	8003116 <SD_disk_ioctl+0x24a>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 800306a:	f7ff fbe5 	bl	8002838 <SD_ReadyWait>
 800306e:	4603      	mov	r3, r0
 8003070:	2bff      	cmp	r3, #255	; 0xff
 8003072:	d14b      	bne.n	800310c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8003074:	2300      	movs	r3, #0
 8003076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800307a:	e047      	b.n	800310c <SD_disk_ioctl+0x240>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800307c:	2100      	movs	r1, #0
 800307e:	2049      	movs	r0, #73	; 0x49
 8003080:	f7ff fce4 	bl	8002a4c <SD_SendCmd>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d142      	bne.n	8003110 <SD_disk_ioctl+0x244>
 800308a:	2110      	movs	r1, #16
 800308c:	6a38      	ldr	r0, [r7, #32]
 800308e:	f7ff fc53 	bl	8002938 <SD_RxDataBlock>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d03b      	beq.n	8003110 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8003098:	2300      	movs	r3, #0
 800309a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 800309e:	e037      	b.n	8003110 <SD_disk_ioctl+0x244>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80030a0:	2100      	movs	r1, #0
 80030a2:	204a      	movs	r0, #74	; 0x4a
 80030a4:	f7ff fcd2 	bl	8002a4c <SD_SendCmd>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d132      	bne.n	8003114 <SD_disk_ioctl+0x248>
 80030ae:	2110      	movs	r1, #16
 80030b0:	6a38      	ldr	r0, [r7, #32]
 80030b2:	f7ff fc41 	bl	8002938 <SD_RxDataBlock>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d02b      	beq.n	8003114 <SD_disk_ioctl+0x248>
        res = RES_OK;
 80030bc:	2300      	movs	r3, #0
 80030be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 80030c2:	e027      	b.n	8003114 <SD_disk_ioctl+0x248>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 80030c4:	2100      	movs	r1, #0
 80030c6:	207a      	movs	r0, #122	; 0x7a
 80030c8:	f7ff fcc0 	bl	8002a4c <SD_SendCmd>
 80030cc:	4603      	mov	r3, r0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d116      	bne.n	8003100 <SD_disk_ioctl+0x234>
      {         
        for (n = 0; n < 4; n++)
 80030d2:	2300      	movs	r3, #0
 80030d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80030d8:	e00b      	b.n	80030f2 <SD_disk_ioctl+0x226>
        {
          *ptr++ = SPI_RxByte();
 80030da:	6a3c      	ldr	r4, [r7, #32]
 80030dc:	1c63      	adds	r3, r4, #1
 80030de:	623b      	str	r3, [r7, #32]
 80030e0:	f7ff fb7e 	bl	80027e0 <SPI_RxByte>
 80030e4:	4603      	mov	r3, r0
 80030e6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80030e8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030ec:	3301      	adds	r3, #1
 80030ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80030f2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80030f6:	2b03      	cmp	r3, #3
 80030f8:	d9ef      	bls.n	80030da <SD_disk_ioctl+0x20e>
        }
        
        res = RES_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8003100:	2304      	movs	r3, #4
 8003102:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003106:	e006      	b.n	8003116 <SD_disk_ioctl+0x24a>
      break;
 8003108:	bf00      	nop
 800310a:	e004      	b.n	8003116 <SD_disk_ioctl+0x24a>
      break;
 800310c:	bf00      	nop
 800310e:	e002      	b.n	8003116 <SD_disk_ioctl+0x24a>
      break;
 8003110:	bf00      	nop
 8003112:	e000      	b.n	8003116 <SD_disk_ioctl+0x24a>
      break;
 8003114:	bf00      	nop
    }
    
    DESELECT();
 8003116:	f7ff fb3d 	bl	8002794 <DESELECT>
    SPI_RxByte();
 800311a:	f7ff fb61 	bl	80027e0 <SPI_RxByte>
  }
  
  return res;
 800311e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003122:	4618      	mov	r0, r3
 8003124:	372c      	adds	r7, #44	; 0x2c
 8003126:	46bd      	mov	sp, r7
 8003128:	bd90      	pop	{r4, r7, pc}
 800312a:	bf00      	nop
 800312c:	20000000 	.word	0x20000000

08003130 <user_i2c_read>:
int8_t init_bme280(void);
void bme280_measure(void);

//----------------------------------------------------------------------------------------
int8_t user_i2c_read(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af02      	add	r7, sp, #8
 8003136:	603a      	str	r2, [r7, #0]
 8003138:	461a      	mov	r2, r3
 800313a:	4603      	mov	r3, r0
 800313c:	71fb      	strb	r3, [r7, #7]
 800313e:	460b      	mov	r3, r1
 8003140:	71bb      	strb	r3, [r7, #6]
 8003142:	4613      	mov	r3, r2
 8003144:	80bb      	strh	r3, [r7, #4]
  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), &reg_addr, 1, 10) != HAL_OK) return -1;
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	b29b      	uxth	r3, r3
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	b299      	uxth	r1, r3
 800314e:	1dba      	adds	r2, r7, #6
 8003150:	230a      	movs	r3, #10
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	2301      	movs	r3, #1
 8003156:	4811      	ldr	r0, [pc, #68]	; (800319c <user_i2c_read+0x6c>)
 8003158:	f004 f9a8 	bl	80074ac <HAL_I2C_Master_Transmit>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <user_i2c_read+0x38>
 8003162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003166:	e014      	b.n	8003192 <user_i2c_read+0x62>
  if(HAL_I2C_Master_Receive(&hi2c3, (id << 1) | 0x01, data, len, 10) != HAL_OK) return -1;
 8003168:	79fb      	ldrb	r3, [r7, #7]
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	b21b      	sxth	r3, r3
 800316e:	f043 0301 	orr.w	r3, r3, #1
 8003172:	b21b      	sxth	r3, r3
 8003174:	b299      	uxth	r1, r3
 8003176:	88bb      	ldrh	r3, [r7, #4]
 8003178:	220a      	movs	r2, #10
 800317a:	9200      	str	r2, [sp, #0]
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	4807      	ldr	r0, [pc, #28]	; (800319c <user_i2c_read+0x6c>)
 8003180:	f004 fa92 	bl	80076a8 <HAL_I2C_Master_Receive>
 8003184:	4603      	mov	r3, r0
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <user_i2c_read+0x60>
 800318a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800318e:	e000      	b.n	8003192 <user_i2c_read+0x62>

  return 0;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	2000991c 	.word	0x2000991c

080031a0 <user_delay_ms>:
//----------------------------------------------------------------------------------------
void user_delay_ms(uint32_t period)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  HAL_Delay(period);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f002 ffd9 	bl	8006160 <HAL_Delay>
}
 80031ae:	bf00      	nop
 80031b0:	3708      	adds	r7, #8
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
	...

080031b8 <user_i2c_write>:
//----------------------------------------------------------------------------------------
int8_t user_i2c_write(uint8_t id, uint8_t reg_addr, uint8_t *data, uint16_t len)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b086      	sub	sp, #24
 80031bc:	af02      	add	r7, sp, #8
 80031be:	603a      	str	r2, [r7, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	4603      	mov	r3, r0
 80031c4:	71fb      	strb	r3, [r7, #7]
 80031c6:	460b      	mov	r3, r1
 80031c8:	71bb      	strb	r3, [r7, #6]
 80031ca:	4613      	mov	r3, r2
 80031cc:	80bb      	strh	r3, [r7, #4]
  int8_t *buf;
  buf = malloc(len +1);
 80031ce:	88bb      	ldrh	r3, [r7, #4]
 80031d0:	3301      	adds	r3, #1
 80031d2:	4618      	mov	r0, r3
 80031d4:	f014 fbb4 	bl	8017940 <malloc>
 80031d8:	4603      	mov	r3, r0
 80031da:	60fb      	str	r3, [r7, #12]
  buf[0] = reg_addr;
 80031dc:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	701a      	strb	r2, [r3, #0]
  memcpy(buf +1, data, len);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	3301      	adds	r3, #1
 80031e8:	88ba      	ldrh	r2, [r7, #4]
 80031ea:	6839      	ldr	r1, [r7, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f014 fbb7 	bl	8017960 <memcpy>

  if(HAL_I2C_Master_Transmit(&hi2c3, (id << 1), (uint8_t*)buf, len + 1, HAL_MAX_DELAY) != HAL_OK) return -1;
 80031f2:	79fb      	ldrb	r3, [r7, #7]
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	b299      	uxth	r1, r3
 80031fa:	88bb      	ldrh	r3, [r7, #4]
 80031fc:	3301      	adds	r3, #1
 80031fe:	b29b      	uxth	r3, r3
 8003200:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003204:	9200      	str	r2, [sp, #0]
 8003206:	68fa      	ldr	r2, [r7, #12]
 8003208:	4808      	ldr	r0, [pc, #32]	; (800322c <user_i2c_write+0x74>)
 800320a:	f004 f94f 	bl	80074ac <HAL_I2C_Master_Transmit>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d002      	beq.n	800321a <user_i2c_write+0x62>
 8003214:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003218:	e003      	b.n	8003222 <user_i2c_write+0x6a>

  free(buf);
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f014 fb98 	bl	8017950 <free>
  return 0;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}
 800322a:	bf00      	nop
 800322c:	2000991c 	.word	0x2000991c

08003230 <delay_us>:
// End BME280 part/////////////////////////////////////////////////////////////////////////////////////

// ---------------------------------------------------------------------------------
// Function for generate dalay more than 10 us (using for AM2302 T and H sensor)
bool delay_us(uint16_t us)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	4603      	mov	r3, r0
 8003238:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim10, 0);
 800323a:	4b11      	ldr	r3, [pc, #68]	; (8003280 <delay_us+0x50>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	2200      	movs	r2, #0
 8003240:	625a      	str	r2, [r3, #36]	; 0x24
	tim_val = us/10;
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	4a0f      	ldr	r2, [pc, #60]	; (8003284 <delay_us+0x54>)
 8003246:	fba2 2303 	umull	r2, r3, r2, r3
 800324a:	08db      	lsrs	r3, r3, #3
 800324c:	b29b      	uxth	r3, r3
 800324e:	461a      	mov	r2, r3
 8003250:	4b0d      	ldr	r3, [pc, #52]	; (8003288 <delay_us+0x58>)
 8003252:	601a      	str	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim10);
 8003254:	480a      	ldr	r0, [pc, #40]	; (8003280 <delay_us+0x50>)
 8003256:	f008 fd4b 	bl	800bcf0 <HAL_TIM_Base_Start_IT>
	while(tim_val != 0)
 800325a:	bf00      	nop
 800325c:	4b0a      	ldr	r3, [pc, #40]	; (8003288 <delay_us+0x58>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1fb      	bne.n	800325c <delay_us+0x2c>
	{

	}
	HAL_TIM_Base_Stop_IT(&htim10);
 8003264:	4806      	ldr	r0, [pc, #24]	; (8003280 <delay_us+0x50>)
 8003266:	f008 fdb3 	bl	800bdd0 <HAL_TIM_Base_Stop_IT>
	tim_val = 0;
 800326a:	4b07      	ldr	r3, [pc, #28]	; (8003288 <delay_us+0x58>)
 800326c:	2200      	movs	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
	int s = 99;
 8003270:	2363      	movs	r3, #99	; 0x63
 8003272:	60fb      	str	r3, [r7, #12]
	return true;
 8003274:	2301      	movs	r3, #1
}
 8003276:	4618      	mov	r0, r3
 8003278:	3710      	adds	r7, #16
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	2000a258 	.word	0x2000a258
 8003284:	cccccccd 	.word	0xcccccccd
 8003288:	200007a4 	.word	0x200007a4

0800328c <HAL_SPI_TxCpltCallback>:
// ---------------------------------------------------------------------------------
// For DMA SPI2 (LCD)
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
	if(hspi == &hspi2)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a0c      	ldr	r2, [pc, #48]	; (80032c8 <HAL_SPI_TxCpltCallback+0x3c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d111      	bne.n	80032c0 <HAL_SPI_TxCpltCallback+0x34>
	{
	    dma_spi_cnt--;
 800329c:	4b0b      	ldr	r3, [pc, #44]	; (80032cc <HAL_SPI_TxCpltCallback+0x40>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	3b01      	subs	r3, #1
 80032a2:	4a0a      	ldr	r2, [pc, #40]	; (80032cc <HAL_SPI_TxCpltCallback+0x40>)
 80032a4:	6013      	str	r3, [r2, #0]
	    if(dma_spi_cnt==0)
 80032a6:	4b09      	ldr	r3, [pc, #36]	; (80032cc <HAL_SPI_TxCpltCallback+0x40>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d108      	bne.n	80032c0 <HAL_SPI_TxCpltCallback+0x34>
	    {
	    	HAL_SPI_DMAStop(&hspi2);
 80032ae:	4806      	ldr	r0, [pc, #24]	; (80032c8 <HAL_SPI_TxCpltCallback+0x3c>)
 80032b0:	f008 fa0c 	bl	800b6cc <HAL_SPI_DMAStop>
	    	dma_spi_cnt=1;
 80032b4:	4b05      	ldr	r3, [pc, #20]	; (80032cc <HAL_SPI_TxCpltCallback+0x40>)
 80032b6:	2201      	movs	r2, #1
 80032b8:	601a      	str	r2, [r3, #0]
	    	dma_spi_fl=1;
 80032ba:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <HAL_SPI_TxCpltCallback+0x44>)
 80032bc:	2201      	movs	r2, #1
 80032be:	701a      	strb	r2, [r3, #0]
	    }
	}
}
 80032c0:	bf00      	nop
 80032c2:	3708      	adds	r7, #8
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	2000a190 	.word	0x2000a190
 80032cc:	20000004 	.word	0x20000004
 80032d0:	200007a8 	.word	0x200007a8

080032d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80032d8:	f002 ff00 	bl	80060dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80032dc:	f000 f8cc 	bl	8003478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80032e0:	f000 fba0 	bl	8003a24 <MX_GPIO_Init>
  MX_TIM3_Init();
 80032e4:	f000 fb0e 	bl	8003904 <MX_TIM3_Init>
  MX_I2C3_Init();
 80032e8:	f000 f932 	bl	8003550 <MX_I2C3_Init>
  MX_TIM2_Init();
 80032ec:	f000 fabe 	bl	800386c <MX_TIM2_Init>
  MX_TIM10_Init();
 80032f0:	f000 fb56 	bl	80039a0 <MX_TIM10_Init>
  MX_SPI1_Init();
 80032f4:	f000 f9fc 	bl	80036f0 <MX_SPI1_Init>
  MX_FATFS_Init();
 80032f8:	f00a fcd4 	bl	800dca4 <MX_FATFS_Init>
  MX_TIM1_Init();
 80032fc:	f000 fa64 	bl	80037c8 <MX_TIM1_Init>
  MX_RTC_Init();
 8003300:	f000 f968 	bl	80035d4 <MX_RTC_Init>
  MX_SPI2_Init();
 8003304:	f000 fa2a 	bl	800375c <MX_SPI2_Init>
  MX_DMA_Init();
 8003308:	f000 fb6c 	bl	80039e4 <MX_DMA_Init>
  MX_RNG_Init();
 800330c:	f000 f94e 	bl	80035ac <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);		//  This TIM3 using for calculate how many time all tasks was running.
 8003310:	4836      	ldr	r0, [pc, #216]	; (80033ec <main+0x118>)
 8003312:	f008 fced 	bl	800bcf0 <HAL_TIM_Base_Start_IT>

  //HAL_TIM_Base_Start_IT(&htim2);
  //HAL_TIM_Base_Start_IT(&htim10);			// Using for generate us delays
  HAL_TIM_Base_Start_IT(&htim1);			// Blink Green LED
 8003316:	4836      	ldr	r0, [pc, #216]	; (80033f0 <main+0x11c>)
 8003318:	f008 fcea 	bl	800bcf0 <HAL_TIM_Base_Start_IT>
  /* IF LCD DOESN'T WORK !
  RIGHT IN RIGHT ORDER SPI2 AND DMA !!!!
  MX_DMA_Init();
  MX_SPI2_Init();
  */
  HAL_DMA_DeInit(&hdma_spi2_tx);
 800331c:	4835      	ldr	r0, [pc, #212]	; (80033f4 <main+0x120>)
 800331e:	f003 f905 	bl	800652c <HAL_DMA_DeInit>
  HAL_SPI_DeInit(&hspi2);
 8003322:	4835      	ldr	r0, [pc, #212]	; (80033f8 <main+0x124>)
 8003324:	f007 fe15 	bl	800af52 <HAL_SPI_DeInit>
  MX_DMA_Init();
 8003328:	f000 fb5c 	bl	80039e4 <MX_DMA_Init>
  MX_SPI2_Init();
 800332c:	f000 fa16 	bl	800375c <MX_SPI2_Init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003330:	f00f fd58 	bl	8012de4 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UARTQueue */
  UARTQueueHandle = osMessageQueueNew (10, sizeof(QUEUE_t), &UARTQueue_attributes);
 8003334:	4a31      	ldr	r2, [pc, #196]	; (80033fc <main+0x128>)
 8003336:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800333a:	200a      	movs	r0, #10
 800333c:	f00f ff8c 	bl	8013258 <osMessageQueueNew>
 8003340:	4603      	mov	r3, r0
 8003342:	4a2f      	ldr	r2, [pc, #188]	; (8003400 <main+0x12c>)
 8003344:	6013      	str	r3, [r2, #0]

  /* creation of LCDQueue */
  LCDQueueHandle = osMessageQueueNew (1, sizeof(LCDQUEUE), &LCDQueue_attributes);
 8003346:	4a2f      	ldr	r2, [pc, #188]	; (8003404 <main+0x130>)
 8003348:	2164      	movs	r1, #100	; 0x64
 800334a:	2001      	movs	r0, #1
 800334c:	f00f ff84 	bl	8013258 <osMessageQueueNew>
 8003350:	4603      	mov	r3, r0
 8003352:	4a2d      	ldr	r2, [pc, #180]	; (8003408 <main+0x134>)
 8003354:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003356:	4a2d      	ldr	r2, [pc, #180]	; (800340c <main+0x138>)
 8003358:	2100      	movs	r1, #0
 800335a:	482d      	ldr	r0, [pc, #180]	; (8003410 <main+0x13c>)
 800335c:	f00f fd8c 	bl	8012e78 <osThreadNew>
 8003360:	4603      	mov	r3, r0
 8003362:	4a2c      	ldr	r2, [pc, #176]	; (8003414 <main+0x140>)
 8003364:	6013      	str	r3, [r2, #0]

  /* creation of RTC */
  RTCHandle = osThreadNew(Start_RTC, NULL, &RTC_attributes);
 8003366:	4a2c      	ldr	r2, [pc, #176]	; (8003418 <main+0x144>)
 8003368:	2100      	movs	r1, #0
 800336a:	482c      	ldr	r0, [pc, #176]	; (800341c <main+0x148>)
 800336c:	f00f fd84 	bl	8012e78 <osThreadNew>
 8003370:	4603      	mov	r3, r0
 8003372:	4a2b      	ldr	r2, [pc, #172]	; (8003420 <main+0x14c>)
 8003374:	6013      	str	r3, [r2, #0]

  /* creation of Show_Resources */
  Show_ResourcesHandle = osThreadNew(Start_Show_Resources, NULL, &Show_Resources_attributes);
 8003376:	4a2b      	ldr	r2, [pc, #172]	; (8003424 <main+0x150>)
 8003378:	2100      	movs	r1, #0
 800337a:	482b      	ldr	r0, [pc, #172]	; (8003428 <main+0x154>)
 800337c:	f00f fd7c 	bl	8012e78 <osThreadNew>
 8003380:	4603      	mov	r3, r0
 8003382:	4a2a      	ldr	r2, [pc, #168]	; (800342c <main+0x158>)
 8003384:	6013      	str	r3, [r2, #0]

  /* creation of UART_Task */
  UART_TaskHandle = osThreadNew(Start_UART_Task, NULL, &UART_Task_attributes);
 8003386:	4a2a      	ldr	r2, [pc, #168]	; (8003430 <main+0x15c>)
 8003388:	2100      	movs	r1, #0
 800338a:	482a      	ldr	r0, [pc, #168]	; (8003434 <main+0x160>)
 800338c:	f00f fd74 	bl	8012e78 <osThreadNew>
 8003390:	4603      	mov	r3, r0
 8003392:	4a29      	ldr	r2, [pc, #164]	; (8003438 <main+0x164>)
 8003394:	6013      	str	r3, [r2, #0]

  /* creation of bme280 */
  bme280Handle = osThreadNew(Start_bme280, NULL, &bme280_attributes);
 8003396:	4a29      	ldr	r2, [pc, #164]	; (800343c <main+0x168>)
 8003398:	2100      	movs	r1, #0
 800339a:	4829      	ldr	r0, [pc, #164]	; (8003440 <main+0x16c>)
 800339c:	f00f fd6c 	bl	8012e78 <osThreadNew>
 80033a0:	4603      	mov	r3, r0
 80033a2:	4a28      	ldr	r2, [pc, #160]	; (8003444 <main+0x170>)
 80033a4:	6013      	str	r3, [r2, #0]

  /* creation of AM2302 */
  AM2302Handle = osThreadNew(Start_AM2302, NULL, &AM2302_attributes);
 80033a6:	4a28      	ldr	r2, [pc, #160]	; (8003448 <main+0x174>)
 80033a8:	2100      	movs	r1, #0
 80033aa:	4828      	ldr	r0, [pc, #160]	; (800344c <main+0x178>)
 80033ac:	f00f fd64 	bl	8012e78 <osThreadNew>
 80033b0:	4603      	mov	r3, r0
 80033b2:	4a27      	ldr	r2, [pc, #156]	; (8003450 <main+0x17c>)
 80033b4:	6013      	str	r3, [r2, #0]

  /* creation of SD_CARD */
  SD_CARDHandle = osThreadNew(Start_SD_CARD, NULL, &SD_CARD_attributes);
 80033b6:	4a27      	ldr	r2, [pc, #156]	; (8003454 <main+0x180>)
 80033b8:	2100      	movs	r1, #0
 80033ba:	4827      	ldr	r0, [pc, #156]	; (8003458 <main+0x184>)
 80033bc:	f00f fd5c 	bl	8012e78 <osThreadNew>
 80033c0:	4603      	mov	r3, r0
 80033c2:	4a26      	ldr	r2, [pc, #152]	; (800345c <main+0x188>)
 80033c4:	6013      	str	r3, [r2, #0]

  /* creation of LCD */
  LCDHandle = osThreadNew(Start_LCD, NULL, &LCD_attributes);
 80033c6:	4a26      	ldr	r2, [pc, #152]	; (8003460 <main+0x18c>)
 80033c8:	2100      	movs	r1, #0
 80033ca:	4826      	ldr	r0, [pc, #152]	; (8003464 <main+0x190>)
 80033cc:	f00f fd54 	bl	8012e78 <osThreadNew>
 80033d0:	4603      	mov	r3, r0
 80033d2:	4a25      	ldr	r2, [pc, #148]	; (8003468 <main+0x194>)
 80033d4:	6013      	str	r3, [r2, #0]

  /* creation of LCD_touchscreen */
  LCD_touchscreenHandle = osThreadNew(Start_LCD_touchscreen, NULL, &LCD_touchscreen_attributes);
 80033d6:	4a25      	ldr	r2, [pc, #148]	; (800346c <main+0x198>)
 80033d8:	2100      	movs	r1, #0
 80033da:	4825      	ldr	r0, [pc, #148]	; (8003470 <main+0x19c>)
 80033dc:	f00f fd4c 	bl	8012e78 <osThreadNew>
 80033e0:	4603      	mov	r3, r0
 80033e2:	4a24      	ldr	r2, [pc, #144]	; (8003474 <main+0x1a0>)
 80033e4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80033e6:	f00f fd21 	bl	8012e2c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80033ea:	e7fe      	b.n	80033ea <main+0x116>
 80033ec:	2000dc2c 	.word	0x2000dc2c
 80033f0:	2000f6b4 	.word	0x2000f6b4
 80033f4:	2001044c 	.word	0x2001044c
 80033f8:	2000a190 	.word	0x2000a190
 80033fc:	0801aee4 	.word	0x0801aee4
 8003400:	2000ac58 	.word	0x2000ac58
 8003404:	0801aefc 	.word	0x0801aefc
 8003408:	2000ed38 	.word	0x2000ed38
 800340c:	0801ada0 	.word	0x0801ada0
 8003410:	08003d21 	.word	0x08003d21
 8003414:	200098d8 	.word	0x200098d8
 8003418:	0801adc4 	.word	0x0801adc4
 800341c:	08003d35 	.word	0x08003d35
 8003420:	20010e00 	.word	0x20010e00
 8003424:	0801ade8 	.word	0x0801ade8
 8003428:	08003fb1 	.word	0x08003fb1
 800342c:	2000f918 	.word	0x2000f918
 8003430:	0801ae0c 	.word	0x0801ae0c
 8003434:	08004221 	.word	0x08004221
 8003438:	2000dc74 	.word	0x2000dc74
 800343c:	0801ae30 	.word	0x0801ae30
 8003440:	0800427d 	.word	0x0800427d
 8003444:	20010e04 	.word	0x20010e04
 8003448:	0801ae54 	.word	0x0801ae54
 800344c:	080045f5 	.word	0x080045f5
 8003450:	2000f910 	.word	0x2000f910
 8003454:	0801ae78 	.word	0x0801ae78
 8003458:	080049ad 	.word	0x080049ad
 800345c:	2000aad4 	.word	0x2000aad4
 8003460:	0801ae9c 	.word	0x0801ae9c
 8003464:	08004a69 	.word	0x08004a69
 8003468:	2000ed40 	.word	0x2000ed40
 800346c:	0801aec0 	.word	0x0801aec0
 8003470:	08004af1 	.word	0x08004af1
 8003474:	2000ed3c 	.word	0x2000ed3c

08003478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b094      	sub	sp, #80	; 0x50
 800347c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800347e:	f107 0320 	add.w	r3, r7, #32
 8003482:	2230      	movs	r2, #48	; 0x30
 8003484:	2100      	movs	r1, #0
 8003486:	4618      	mov	r0, r3
 8003488:	f014 fa78 	bl	801797c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800348c:	f107 030c 	add.w	r3, r7, #12
 8003490:	2200      	movs	r2, #0
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	605a      	str	r2, [r3, #4]
 8003496:	609a      	str	r2, [r3, #8]
 8003498:	60da      	str	r2, [r3, #12]
 800349a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800349c:	2300      	movs	r3, #0
 800349e:	60bb      	str	r3, [r7, #8]
 80034a0:	4b29      	ldr	r3, [pc, #164]	; (8003548 <SystemClock_Config+0xd0>)
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	4a28      	ldr	r2, [pc, #160]	; (8003548 <SystemClock_Config+0xd0>)
 80034a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034aa:	6413      	str	r3, [r2, #64]	; 0x40
 80034ac:	4b26      	ldr	r3, [pc, #152]	; (8003548 <SystemClock_Config+0xd0>)
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b4:	60bb      	str	r3, [r7, #8]
 80034b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80034b8:	2300      	movs	r3, #0
 80034ba:	607b      	str	r3, [r7, #4]
 80034bc:	4b23      	ldr	r3, [pc, #140]	; (800354c <SystemClock_Config+0xd4>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a22      	ldr	r2, [pc, #136]	; (800354c <SystemClock_Config+0xd4>)
 80034c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034c6:	6013      	str	r3, [r2, #0]
 80034c8:	4b20      	ldr	r3, [pc, #128]	; (800354c <SystemClock_Config+0xd4>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d0:	607b      	str	r3, [r7, #4]
 80034d2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80034d4:	2305      	movs	r3, #5
 80034d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80034d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80034dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80034de:	2301      	movs	r3, #1
 80034e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80034e2:	2302      	movs	r3, #2
 80034e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80034e6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80034ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80034ec:	2308      	movs	r3, #8
 80034ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80034f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80034f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80034f6:	2302      	movs	r3, #2
 80034f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80034fa:	2307      	movs	r3, #7
 80034fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80034fe:	f107 0320 	add.w	r3, r7, #32
 8003502:	4618      	mov	r0, r3
 8003504:	f006 fab4 	bl	8009a70 <HAL_RCC_OscConfig>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800350e:	f001 fc39 	bl	8004d84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003512:	230f      	movs	r3, #15
 8003514:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003516:	2302      	movs	r3, #2
 8003518:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800351a:	2300      	movs	r3, #0
 800351c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800351e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003522:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003524:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003528:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800352a:	f107 030c 	add.w	r3, r7, #12
 800352e:	2105      	movs	r1, #5
 8003530:	4618      	mov	r0, r3
 8003532:	f006 fd15 	bl	8009f60 <HAL_RCC_ClockConfig>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800353c:	f001 fc22 	bl	8004d84 <Error_Handler>
  }
}
 8003540:	bf00      	nop
 8003542:	3750      	adds	r7, #80	; 0x50
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	40023800 	.word	0x40023800
 800354c:	40007000 	.word	0x40007000

08003550 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003554:	4b12      	ldr	r3, [pc, #72]	; (80035a0 <MX_I2C3_Init+0x50>)
 8003556:	4a13      	ldr	r2, [pc, #76]	; (80035a4 <MX_I2C3_Init+0x54>)
 8003558:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800355a:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <MX_I2C3_Init+0x50>)
 800355c:	4a12      	ldr	r2, [pc, #72]	; (80035a8 <MX_I2C3_Init+0x58>)
 800355e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003560:	4b0f      	ldr	r3, [pc, #60]	; (80035a0 <MX_I2C3_Init+0x50>)
 8003562:	2200      	movs	r2, #0
 8003564:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003566:	4b0e      	ldr	r3, [pc, #56]	; (80035a0 <MX_I2C3_Init+0x50>)
 8003568:	2200      	movs	r2, #0
 800356a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800356c:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <MX_I2C3_Init+0x50>)
 800356e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003572:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003574:	4b0a      	ldr	r3, [pc, #40]	; (80035a0 <MX_I2C3_Init+0x50>)
 8003576:	2200      	movs	r2, #0
 8003578:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800357a:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <MX_I2C3_Init+0x50>)
 800357c:	2200      	movs	r2, #0
 800357e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003580:	4b07      	ldr	r3, [pc, #28]	; (80035a0 <MX_I2C3_Init+0x50>)
 8003582:	2200      	movs	r2, #0
 8003584:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003586:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <MX_I2C3_Init+0x50>)
 8003588:	2200      	movs	r2, #0
 800358a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800358c:	4804      	ldr	r0, [pc, #16]	; (80035a0 <MX_I2C3_Init+0x50>)
 800358e:	f003 fe49 	bl	8007224 <HAL_I2C_Init>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003598:	f001 fbf4 	bl	8004d84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800359c:	bf00      	nop
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	2000991c 	.word	0x2000991c
 80035a4:	40005c00 	.word	0x40005c00
 80035a8:	000186a0 	.word	0x000186a0

080035ac <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80035b0:	4b06      	ldr	r3, [pc, #24]	; (80035cc <MX_RNG_Init+0x20>)
 80035b2:	4a07      	ldr	r2, [pc, #28]	; (80035d0 <MX_RNG_Init+0x24>)
 80035b4:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80035b6:	4805      	ldr	r0, [pc, #20]	; (80035cc <MX_RNG_Init+0x20>)
 80035b8:	f006 ffce 	bl	800a558 <HAL_RNG_Init>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d001      	beq.n	80035c6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80035c2:	f001 fbdf 	bl	8004d84 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	2000f900 	.word	0x2000f900
 80035d0:	50060800 	.word	0x50060800

080035d4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b090      	sub	sp, #64	; 0x40
 80035d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80035da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	605a      	str	r2, [r3, #4]
 80035e4:	609a      	str	r2, [r3, #8]
 80035e6:	60da      	str	r2, [r3, #12]
 80035e8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80035ea:	2300      	movs	r3, #0
 80035ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80035ee:	463b      	mov	r3, r7
 80035f0:	2228      	movs	r2, #40	; 0x28
 80035f2:	2100      	movs	r1, #0
 80035f4:	4618      	mov	r0, r3
 80035f6:	f014 f9c1 	bl	801797c <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80035fa:	4b3b      	ldr	r3, [pc, #236]	; (80036e8 <MX_RTC_Init+0x114>)
 80035fc:	4a3b      	ldr	r2, [pc, #236]	; (80036ec <MX_RTC_Init+0x118>)
 80035fe:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003600:	4b39      	ldr	r3, [pc, #228]	; (80036e8 <MX_RTC_Init+0x114>)
 8003602:	2200      	movs	r2, #0
 8003604:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003606:	4b38      	ldr	r3, [pc, #224]	; (80036e8 <MX_RTC_Init+0x114>)
 8003608:	227f      	movs	r2, #127	; 0x7f
 800360a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800360c:	4b36      	ldr	r3, [pc, #216]	; (80036e8 <MX_RTC_Init+0x114>)
 800360e:	22ff      	movs	r2, #255	; 0xff
 8003610:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003612:	4b35      	ldr	r3, [pc, #212]	; (80036e8 <MX_RTC_Init+0x114>)
 8003614:	2200      	movs	r2, #0
 8003616:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003618:	4b33      	ldr	r3, [pc, #204]	; (80036e8 <MX_RTC_Init+0x114>)
 800361a:	2200      	movs	r2, #0
 800361c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800361e:	4b32      	ldr	r3, [pc, #200]	; (80036e8 <MX_RTC_Init+0x114>)
 8003620:	2200      	movs	r2, #0
 8003622:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003624:	4830      	ldr	r0, [pc, #192]	; (80036e8 <MX_RTC_Init+0x114>)
 8003626:	f006 ffc1 	bl	800a5ac <HAL_RTC_Init>
 800362a:	4603      	mov	r3, r0
 800362c:	2b00      	cmp	r3, #0
 800362e:	d001      	beq.n	8003634 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8003630:	f001 fba8 	bl	8004d84 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x23;
 8003634:	2323      	movs	r3, #35	; 0x23
 8003636:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x59;
 800363a:	2359      	movs	r3, #89	; 0x59
 800363c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x45;
 8003640:	2345      	movs	r3, #69	; 0x45
 8003642:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003646:	2300      	movs	r3, #0
 8003648:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800364a:	2300      	movs	r3, #0
 800364c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800364e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003652:	2201      	movs	r2, #1
 8003654:	4619      	mov	r1, r3
 8003656:	4824      	ldr	r0, [pc, #144]	; (80036e8 <MX_RTC_Init+0x114>)
 8003658:	f007 f839 	bl	800a6ce <HAL_RTC_SetTime>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d001      	beq.n	8003666 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8003662:	f001 fb8f 	bl	8004d84 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 8003666:	2302      	movs	r3, #2
 8003668:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_DECEMBER;
 800366c:	2312      	movs	r3, #18
 800366e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x28;
 8003672:	2328      	movs	r3, #40	; 0x28
 8003674:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8003678:	2300      	movs	r3, #0
 800367a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800367e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003682:	2201      	movs	r2, #1
 8003684:	4619      	mov	r1, r3
 8003686:	4818      	ldr	r0, [pc, #96]	; (80036e8 <MX_RTC_Init+0x114>)
 8003688:	f007 f93c 	bl	800a904 <HAL_RTC_SetDate>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8003692:	f001 fb77 	bl	8004d84 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8003696:	2300      	movs	r3, #0
 8003698:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 800369a:	2300      	movs	r3, #0
 800369c:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x10;
 800369e:	2310      	movs	r3, #16
 80036a0:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80036a2:	2300      	movs	r3, #0
 80036a4:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80036aa:	2300      	movs	r3, #0
 80036ac:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80036ae:	2300      	movs	r3, #0
 80036b0:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80036b2:	2300      	movs	r3, #0
 80036b4:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_WEEKDAY;
 80036b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036ba:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = RTC_WEEKDAY_MONDAY;
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80036c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80036c8:	463b      	mov	r3, r7
 80036ca:	2201      	movs	r2, #1
 80036cc:	4619      	mov	r1, r3
 80036ce:	4806      	ldr	r0, [pc, #24]	; (80036e8 <MX_RTC_Init+0x114>)
 80036d0:	f007 fa0e 	bl	800aaf0 <HAL_RTC_SetAlarm>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 80036da:	f001 fb53 	bl	8004d84 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80036de:	bf00      	nop
 80036e0:	3740      	adds	r7, #64	; 0x40
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	2000ed44 	.word	0x2000ed44
 80036ec:	40002800 	.word	0x40002800

080036f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80036f4:	4b17      	ldr	r3, [pc, #92]	; (8003754 <MX_SPI1_Init+0x64>)
 80036f6:	4a18      	ldr	r2, [pc, #96]	; (8003758 <MX_SPI1_Init+0x68>)
 80036f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80036fa:	4b16      	ldr	r3, [pc, #88]	; (8003754 <MX_SPI1_Init+0x64>)
 80036fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003700:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003702:	4b14      	ldr	r3, [pc, #80]	; (8003754 <MX_SPI1_Init+0x64>)
 8003704:	2200      	movs	r2, #0
 8003706:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003708:	4b12      	ldr	r3, [pc, #72]	; (8003754 <MX_SPI1_Init+0x64>)
 800370a:	2200      	movs	r2, #0
 800370c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800370e:	4b11      	ldr	r3, [pc, #68]	; (8003754 <MX_SPI1_Init+0x64>)
 8003710:	2200      	movs	r2, #0
 8003712:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003714:	4b0f      	ldr	r3, [pc, #60]	; (8003754 <MX_SPI1_Init+0x64>)
 8003716:	2200      	movs	r2, #0
 8003718:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800371a:	4b0e      	ldr	r3, [pc, #56]	; (8003754 <MX_SPI1_Init+0x64>)
 800371c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003720:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003722:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <MX_SPI1_Init+0x64>)
 8003724:	2220      	movs	r2, #32
 8003726:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003728:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <MX_SPI1_Init+0x64>)
 800372a:	2200      	movs	r2, #0
 800372c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800372e:	4b09      	ldr	r3, [pc, #36]	; (8003754 <MX_SPI1_Init+0x64>)
 8003730:	2200      	movs	r2, #0
 8003732:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003734:	4b07      	ldr	r3, [pc, #28]	; (8003754 <MX_SPI1_Init+0x64>)
 8003736:	2200      	movs	r2, #0
 8003738:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800373a:	4b06      	ldr	r3, [pc, #24]	; (8003754 <MX_SPI1_Init+0x64>)
 800373c:	220a      	movs	r2, #10
 800373e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003740:	4804      	ldr	r0, [pc, #16]	; (8003754 <MX_SPI1_Init+0x64>)
 8003742:	f007 fb7d 	bl	800ae40 <HAL_SPI_Init>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d001      	beq.n	8003750 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800374c:	f001 fb1a 	bl	8004d84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003750:	bf00      	nop
 8003752:	bd80      	pop	{r7, pc}
 8003754:	2000f91c 	.word	0x2000f91c
 8003758:	40013000 	.word	0x40013000

0800375c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003760:	4b17      	ldr	r3, [pc, #92]	; (80037c0 <MX_SPI2_Init+0x64>)
 8003762:	4a18      	ldr	r2, [pc, #96]	; (80037c4 <MX_SPI2_Init+0x68>)
 8003764:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003766:	4b16      	ldr	r3, [pc, #88]	; (80037c0 <MX_SPI2_Init+0x64>)
 8003768:	f44f 7282 	mov.w	r2, #260	; 0x104
 800376c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800376e:	4b14      	ldr	r3, [pc, #80]	; (80037c0 <MX_SPI2_Init+0x64>)
 8003770:	2200      	movs	r2, #0
 8003772:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003774:	4b12      	ldr	r3, [pc, #72]	; (80037c0 <MX_SPI2_Init+0x64>)
 8003776:	2200      	movs	r2, #0
 8003778:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800377a:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <MX_SPI2_Init+0x64>)
 800377c:	2200      	movs	r2, #0
 800377e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003780:	4b0f      	ldr	r3, [pc, #60]	; (80037c0 <MX_SPI2_Init+0x64>)
 8003782:	2200      	movs	r2, #0
 8003784:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003786:	4b0e      	ldr	r3, [pc, #56]	; (80037c0 <MX_SPI2_Init+0x64>)
 8003788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800378c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800378e:	4b0c      	ldr	r3, [pc, #48]	; (80037c0 <MX_SPI2_Init+0x64>)
 8003790:	2200      	movs	r2, #0
 8003792:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003794:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <MX_SPI2_Init+0x64>)
 8003796:	2200      	movs	r2, #0
 8003798:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800379a:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <MX_SPI2_Init+0x64>)
 800379c:	2200      	movs	r2, #0
 800379e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037a0:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <MX_SPI2_Init+0x64>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80037a6:	4b06      	ldr	r3, [pc, #24]	; (80037c0 <MX_SPI2_Init+0x64>)
 80037a8:	220a      	movs	r2, #10
 80037aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80037ac:	4804      	ldr	r0, [pc, #16]	; (80037c0 <MX_SPI2_Init+0x64>)
 80037ae:	f007 fb47 	bl	800ae40 <HAL_SPI_Init>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80037b8:	f001 fae4 	bl	8004d84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80037bc:	bf00      	nop
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	2000a190 	.word	0x2000a190
 80037c4:	40003800 	.word	0x40003800

080037c8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037ce:	f107 0308 	add.w	r3, r7, #8
 80037d2:	2200      	movs	r2, #0
 80037d4:	601a      	str	r2, [r3, #0]
 80037d6:	605a      	str	r2, [r3, #4]
 80037d8:	609a      	str	r2, [r3, #8]
 80037da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037dc:	463b      	mov	r3, r7
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]
 80037e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80037e4:	4b1f      	ldr	r3, [pc, #124]	; (8003864 <MX_TIM1_Init+0x9c>)
 80037e6:	4a20      	ldr	r2, [pc, #128]	; (8003868 <MX_TIM1_Init+0xa0>)
 80037e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16800-1;
 80037ea:	4b1e      	ldr	r3, [pc, #120]	; (8003864 <MX_TIM1_Init+0x9c>)
 80037ec:	f244 129f 	movw	r2, #16799	; 0x419f
 80037f0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037f2:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <MX_TIM1_Init+0x9c>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 80037f8:	4b1a      	ldr	r3, [pc, #104]	; (8003864 <MX_TIM1_Init+0x9c>)
 80037fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80037fe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003800:	4b18      	ldr	r3, [pc, #96]	; (8003864 <MX_TIM1_Init+0x9c>)
 8003802:	2200      	movs	r2, #0
 8003804:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003806:	4b17      	ldr	r3, [pc, #92]	; (8003864 <MX_TIM1_Init+0x9c>)
 8003808:	2200      	movs	r2, #0
 800380a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800380c:	4b15      	ldr	r3, [pc, #84]	; (8003864 <MX_TIM1_Init+0x9c>)
 800380e:	2200      	movs	r2, #0
 8003810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003812:	4814      	ldr	r0, [pc, #80]	; (8003864 <MX_TIM1_Init+0x9c>)
 8003814:	f008 fa1c 	bl	800bc50 <HAL_TIM_Base_Init>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800381e:	f001 fab1 	bl	8004d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003826:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003828:	f107 0308 	add.w	r3, r7, #8
 800382c:	4619      	mov	r1, r3
 800382e:	480d      	ldr	r0, [pc, #52]	; (8003864 <MX_TIM1_Init+0x9c>)
 8003830:	f008 fc05 	bl	800c03e <HAL_TIM_ConfigClockSource>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800383a:	f001 faa3 	bl	8004d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800383e:	2320      	movs	r3, #32
 8003840:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003842:	2300      	movs	r3, #0
 8003844:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003846:	463b      	mov	r3, r7
 8003848:	4619      	mov	r1, r3
 800384a:	4806      	ldr	r0, [pc, #24]	; (8003864 <MX_TIM1_Init+0x9c>)
 800384c:	f008 fe20 	bl	800c490 <HAL_TIMEx_MasterConfigSynchronization>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	d001      	beq.n	800385a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8003856:	f001 fa95 	bl	8004d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800385a:	bf00      	nop
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	2000f6b4 	.word	0x2000f6b4
 8003868:	40010000 	.word	0x40010000

0800386c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003872:	f107 0308 	add.w	r3, r7, #8
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	605a      	str	r2, [r3, #4]
 800387c:	609a      	str	r2, [r3, #8]
 800387e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003880:	463b      	mov	r3, r7
 8003882:	2200      	movs	r2, #0
 8003884:	601a      	str	r2, [r3, #0]
 8003886:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003888:	4b1d      	ldr	r3, [pc, #116]	; (8003900 <MX_TIM2_Init+0x94>)
 800388a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800388e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8003890:	4b1b      	ldr	r3, [pc, #108]	; (8003900 <MX_TIM2_Init+0x94>)
 8003892:	220a      	movs	r2, #10
 8003894:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003896:	4b1a      	ldr	r3, [pc, #104]	; (8003900 <MX_TIM2_Init+0x94>)
 8003898:	2200      	movs	r2, #0
 800389a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 800389c:	4b18      	ldr	r3, [pc, #96]	; (8003900 <MX_TIM2_Init+0x94>)
 800389e:	220a      	movs	r2, #10
 80038a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038a2:	4b17      	ldr	r3, [pc, #92]	; (8003900 <MX_TIM2_Init+0x94>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038a8:	4b15      	ldr	r3, [pc, #84]	; (8003900 <MX_TIM2_Init+0x94>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80038ae:	4814      	ldr	r0, [pc, #80]	; (8003900 <MX_TIM2_Init+0x94>)
 80038b0:	f008 f9ce 	bl	800bc50 <HAL_TIM_Base_Init>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <MX_TIM2_Init+0x52>
  {
    Error_Handler();
 80038ba:	f001 fa63 	bl	8004d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80038c4:	f107 0308 	add.w	r3, r7, #8
 80038c8:	4619      	mov	r1, r3
 80038ca:	480d      	ldr	r0, [pc, #52]	; (8003900 <MX_TIM2_Init+0x94>)
 80038cc:	f008 fbb7 	bl	800c03e <HAL_TIM_ConfigClockSource>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <MX_TIM2_Init+0x6e>
  {
    Error_Handler();
 80038d6:	f001 fa55 	bl	8004d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038da:	2300      	movs	r3, #0
 80038dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038de:	2300      	movs	r3, #0
 80038e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80038e2:	463b      	mov	r3, r7
 80038e4:	4619      	mov	r1, r3
 80038e6:	4806      	ldr	r0, [pc, #24]	; (8003900 <MX_TIM2_Init+0x94>)
 80038e8:	f008 fdd2 	bl	800c490 <HAL_TIMEx_MasterConfigSynchronization>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d001      	beq.n	80038f6 <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 80038f2:	f001 fa47 	bl	8004d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80038f6:	bf00      	nop
 80038f8:	3718      	adds	r7, #24
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	2000fa34 	.word	0x2000fa34

08003904 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800390a:	f107 0308 	add.w	r3, r7, #8
 800390e:	2200      	movs	r2, #0
 8003910:	601a      	str	r2, [r3, #0]
 8003912:	605a      	str	r2, [r3, #4]
 8003914:	609a      	str	r2, [r3, #8]
 8003916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003918:	463b      	mov	r3, r7
 800391a:	2200      	movs	r2, #0
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003920:	4b1d      	ldr	r3, [pc, #116]	; (8003998 <MX_TIM3_Init+0x94>)
 8003922:	4a1e      	ldr	r2, [pc, #120]	; (800399c <MX_TIM3_Init+0x98>)
 8003924:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 839;
 8003926:	4b1c      	ldr	r3, [pc, #112]	; (8003998 <MX_TIM3_Init+0x94>)
 8003928:	f240 3247 	movw	r2, #839	; 0x347
 800392c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800392e:	4b1a      	ldr	r3, [pc, #104]	; (8003998 <MX_TIM3_Init+0x94>)
 8003930:	2200      	movs	r2, #0
 8003932:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10;
 8003934:	4b18      	ldr	r3, [pc, #96]	; (8003998 <MX_TIM3_Init+0x94>)
 8003936:	220a      	movs	r2, #10
 8003938:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800393a:	4b17      	ldr	r3, [pc, #92]	; (8003998 <MX_TIM3_Init+0x94>)
 800393c:	2200      	movs	r2, #0
 800393e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003940:	4b15      	ldr	r3, [pc, #84]	; (8003998 <MX_TIM3_Init+0x94>)
 8003942:	2280      	movs	r2, #128	; 0x80
 8003944:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003946:	4814      	ldr	r0, [pc, #80]	; (8003998 <MX_TIM3_Init+0x94>)
 8003948:	f008 f982 	bl	800bc50 <HAL_TIM_Base_Init>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d001      	beq.n	8003956 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8003952:	f001 fa17 	bl	8004d84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003956:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800395a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800395c:	f107 0308 	add.w	r3, r7, #8
 8003960:	4619      	mov	r1, r3
 8003962:	480d      	ldr	r0, [pc, #52]	; (8003998 <MX_TIM3_Init+0x94>)
 8003964:	f008 fb6b 	bl	800c03e <HAL_TIM_ConfigClockSource>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d001      	beq.n	8003972 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800396e:	f001 fa09 	bl	8004d84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003972:	2300      	movs	r3, #0
 8003974:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003976:	2300      	movs	r3, #0
 8003978:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800397a:	463b      	mov	r3, r7
 800397c:	4619      	mov	r1, r3
 800397e:	4806      	ldr	r0, [pc, #24]	; (8003998 <MX_TIM3_Init+0x94>)
 8003980:	f008 fd86 	bl	800c490 <HAL_TIMEx_MasterConfigSynchronization>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800398a:	f001 f9fb 	bl	8004d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800398e:	bf00      	nop
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	2000dc2c 	.word	0x2000dc2c
 800399c:	40000400 	.word	0x40000400

080039a0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80039a4:	4b0d      	ldr	r3, [pc, #52]	; (80039dc <MX_TIM10_Init+0x3c>)
 80039a6:	4a0e      	ldr	r2, [pc, #56]	; (80039e0 <MX_TIM10_Init+0x40>)
 80039a8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 168-1;
 80039aa:	4b0c      	ldr	r3, [pc, #48]	; (80039dc <MX_TIM10_Init+0x3c>)
 80039ac:	22a7      	movs	r2, #167	; 0xa7
 80039ae:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039b0:	4b0a      	ldr	r3, [pc, #40]	; (80039dc <MX_TIM10_Init+0x3c>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 10-1;
 80039b6:	4b09      	ldr	r3, [pc, #36]	; (80039dc <MX_TIM10_Init+0x3c>)
 80039b8:	2209      	movs	r2, #9
 80039ba:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039bc:	4b07      	ldr	r3, [pc, #28]	; (80039dc <MX_TIM10_Init+0x3c>)
 80039be:	2200      	movs	r2, #0
 80039c0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80039c2:	4b06      	ldr	r3, [pc, #24]	; (80039dc <MX_TIM10_Init+0x3c>)
 80039c4:	2280      	movs	r2, #128	; 0x80
 80039c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80039c8:	4804      	ldr	r0, [pc, #16]	; (80039dc <MX_TIM10_Init+0x3c>)
 80039ca:	f008 f941 	bl	800bc50 <HAL_TIM_Base_Init>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d001      	beq.n	80039d8 <MX_TIM10_Init+0x38>
  {
    Error_Handler();
 80039d4:	f001 f9d6 	bl	8004d84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80039d8:	bf00      	nop
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	2000a258 	.word	0x2000a258
 80039e0:	40014400 	.word	0x40014400

080039e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80039ea:	2300      	movs	r3, #0
 80039ec:	607b      	str	r3, [r7, #4]
 80039ee:	4b0c      	ldr	r3, [pc, #48]	; (8003a20 <MX_DMA_Init+0x3c>)
 80039f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f2:	4a0b      	ldr	r2, [pc, #44]	; (8003a20 <MX_DMA_Init+0x3c>)
 80039f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039f8:	6313      	str	r3, [r2, #48]	; 0x30
 80039fa:	4b09      	ldr	r3, [pc, #36]	; (8003a20 <MX_DMA_Init+0x3c>)
 80039fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a02:	607b      	str	r3, [r7, #4]
 8003a04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8003a06:	2200      	movs	r2, #0
 8003a08:	2105      	movs	r1, #5
 8003a0a:	200f      	movs	r0, #15
 8003a0c:	f002 fca8 	bl	8006360 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8003a10:	200f      	movs	r0, #15
 8003a12:	f002 fcc1 	bl	8006398 <HAL_NVIC_EnableIRQ>

}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	40023800 	.word	0x40023800

08003a24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b08c      	sub	sp, #48	; 0x30
 8003a28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a2a:	f107 031c 	add.w	r3, r7, #28
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	605a      	str	r2, [r3, #4]
 8003a34:	609a      	str	r2, [r3, #8]
 8003a36:	60da      	str	r2, [r3, #12]
 8003a38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61bb      	str	r3, [r7, #24]
 8003a3e:	4bb2      	ldr	r3, [pc, #712]	; (8003d08 <MX_GPIO_Init+0x2e4>)
 8003a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a42:	4ab1      	ldr	r2, [pc, #708]	; (8003d08 <MX_GPIO_Init+0x2e4>)
 8003a44:	f043 0310 	orr.w	r3, r3, #16
 8003a48:	6313      	str	r3, [r2, #48]	; 0x30
 8003a4a:	4baf      	ldr	r3, [pc, #700]	; (8003d08 <MX_GPIO_Init+0x2e4>)
 8003a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4e:	f003 0310 	and.w	r3, r3, #16
 8003a52:	61bb      	str	r3, [r7, #24]
 8003a54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a56:	2300      	movs	r3, #0
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	4bab      	ldr	r3, [pc, #684]	; (8003d08 <MX_GPIO_Init+0x2e4>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	4aaa      	ldr	r2, [pc, #680]	; (8003d08 <MX_GPIO_Init+0x2e4>)
 8003a60:	f043 0304 	orr.w	r3, r3, #4
 8003a64:	6313      	str	r3, [r2, #48]	; 0x30
 8003a66:	4ba8      	ldr	r3, [pc, #672]	; (8003d08 <MX_GPIO_Init+0x2e4>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a72:	2300      	movs	r3, #0
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	4ba4      	ldr	r3, [pc, #656]	; (8003d08 <MX_GPIO_Init+0x2e4>)
 8003a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7a:	4aa3      	ldr	r2, [pc, #652]	; (8003d08 <MX_GPIO_Init+0x2e4>)
 8003a7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a80:	6313      	str	r3, [r2, #48]	; 0x30
 8003a82:	4ba1      	ldr	r3, [pc, #644]	; (8003d08 <MX_GPIO_Init+0x2e4>)
 8003a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	4b9d      	ldr	r3, [pc, #628]	; (8003d08 <MX_GPIO_Init+0x2e4>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a96:	4a9c      	ldr	r2, [pc, #624]	; (8003d08 <MX_GPIO_Init+0x2e4>)
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a9e:	4b9a      	ldr	r3, [pc, #616]	; (8003d08 <MX_GPIO_Init+0x2e4>)
 8003aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	4b96      	ldr	r3, [pc, #600]	; (8003d08 <MX_GPIO_Init+0x2e4>)
 8003ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab2:	4a95      	ldr	r2, [pc, #596]	; (8003d08 <MX_GPIO_Init+0x2e4>)
 8003ab4:	f043 0302 	orr.w	r3, r3, #2
 8003ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aba:	4b93      	ldr	r3, [pc, #588]	; (8003d08 <MX_GPIO_Init+0x2e4>)
 8003abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	60bb      	str	r3, [r7, #8]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	607b      	str	r3, [r7, #4]
 8003aca:	4b8f      	ldr	r3, [pc, #572]	; (8003d08 <MX_GPIO_Init+0x2e4>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	4a8e      	ldr	r2, [pc, #568]	; (8003d08 <MX_GPIO_Init+0x2e4>)
 8003ad0:	f043 0308 	orr.w	r3, r3, #8
 8003ad4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad6:	4b8c      	ldr	r3, [pc, #560]	; (8003d08 <MX_GPIO_Init+0x2e4>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	607b      	str	r3, [r7, #4]
 8003ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin|RESET_LCD_Pin
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	217c      	movs	r1, #124	; 0x7c
 8003ae6:	4889      	ldr	r0, [pc, #548]	; (8003d0c <MX_GPIO_Init+0x2e8>)
 8003ae8:	f003 fb82 	bl	80071f0 <HAL_GPIO_WritePin>
                          |DC_LCD_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003aec:	2201      	movs	r2, #1
 8003aee:	2101      	movs	r1, #1
 8003af0:	4887      	ldr	r0, [pc, #540]	; (8003d10 <MX_GPIO_Init+0x2ec>)
 8003af2:	f003 fb7d 	bl	80071f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AM2302_Pin|CS_microSD_Pin, GPIO_PIN_RESET);
 8003af6:	2200      	movs	r2, #0
 8003af8:	2142      	movs	r1, #66	; 0x42
 8003afa:	4885      	ldr	r0, [pc, #532]	; (8003d10 <MX_GPIO_Init+0x2ec>)
 8003afc:	f003 fb78 	bl	80071f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003b00:	2200      	movs	r2, #0
 8003b02:	f24f 0110 	movw	r1, #61456	; 0xf010
 8003b06:	4883      	ldr	r0, [pc, #524]	; (8003d14 <MX_GPIO_Init+0x2f0>)
 8003b08:	f003 fb72 	bl	80071f0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, T_CLK_Pin|T_CS_Pin, GPIO_PIN_RESET);
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8003b12:	4881      	ldr	r0, [pc, #516]	; (8003d18 <MX_GPIO_Init+0x2f4>)
 8003b14:	f003 fb6c 	bl	80071f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : T_MOSI_Pin CS_I2C_SPI_Pin CS_LCD_Pin */
  GPIO_InitStruct.Pin = T_MOSI_Pin|CS_I2C_SPI_Pin|CS_LCD_Pin;
 8003b18:	231c      	movs	r3, #28
 8003b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b20:	2300      	movs	r3, #0
 8003b22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b24:	2300      	movs	r3, #0
 8003b26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b28:	f107 031c 	add.w	r3, r7, #28
 8003b2c:	4619      	mov	r1, r3
 8003b2e:	4877      	ldr	r0, [pc, #476]	; (8003d0c <MX_GPIO_Init+0x2e8>)
 8003b30:	f003 f8ae 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : RESET_LCD_Pin DC_LCD_Pin */
  GPIO_InitStruct.Pin = RESET_LCD_Pin|DC_LCD_Pin;
 8003b34:	2360      	movs	r3, #96	; 0x60
 8003b36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b40:	2303      	movs	r3, #3
 8003b42:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003b44:	f107 031c 	add.w	r3, r7, #28
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4870      	ldr	r0, [pc, #448]	; (8003d0c <MX_GPIO_Init+0x2e8>)
 8003b4c:	f003 f8a0 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_IRQ_Pin */
  GPIO_InitStruct.Pin = T_IRQ_Pin;
 8003b50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b56:	2300      	movs	r3, #0
 8003b58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003b5e:	f107 031c 	add.w	r3, r7, #28
 8003b62:	4619      	mov	r1, r3
 8003b64:	486a      	ldr	r0, [pc, #424]	; (8003d10 <MX_GPIO_Init+0x2ec>)
 8003b66:	f003 f893 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin AM2302_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|AM2302_Pin;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b72:	2300      	movs	r3, #0
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b76:	2300      	movs	r3, #0
 8003b78:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b7a:	f107 031c 	add.w	r3, r7, #28
 8003b7e:	4619      	mov	r1, r3
 8003b80:	4863      	ldr	r0, [pc, #396]	; (8003d10 <MX_GPIO_Init+0x2ec>)
 8003b82:	f003 f885 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8003b86:	2308      	movs	r3, #8
 8003b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b92:	2300      	movs	r3, #0
 8003b94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003b96:	2305      	movs	r3, #5
 8003b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003b9a:	f107 031c 	add.w	r3, r7, #28
 8003b9e:	4619      	mov	r1, r3
 8003ba0:	485b      	ldr	r0, [pc, #364]	; (8003d10 <MX_GPIO_Init+0x2ec>)
 8003ba2:	f003 f875 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003baa:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003bb4:	f107 031c 	add.w	r3, r7, #28
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4858      	ldr	r0, [pc, #352]	; (8003d1c <MX_GPIO_Init+0x2f8>)
 8003bbc:	f003 f868 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2S3_WS_Pin */
  GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003bc0:	2310      	movs	r3, #16
 8003bc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003bd0:	2306      	movs	r3, #6
 8003bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003bd4:	f107 031c 	add.w	r3, r7, #28
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4850      	ldr	r0, [pc, #320]	; (8003d1c <MX_GPIO_Init+0x2f8>)
 8003bdc:	f003 f858 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8003be0:	2304      	movs	r3, #4
 8003be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003be4:	2300      	movs	r3, #0
 8003be6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be8:	2300      	movs	r3, #0
 8003bea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8003bec:	f107 031c 	add.w	r3, r7, #28
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4849      	ldr	r0, [pc, #292]	; (8003d18 <MX_GPIO_Init+0x2f4>)
 8003bf4:	f003 f84c 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8003bf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bfe:	2302      	movs	r3, #2
 8003c00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c02:	2300      	movs	r3, #0
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c06:	2300      	movs	r3, #0
 8003c08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c0a:	2305      	movs	r3, #5
 8003c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8003c0e:	f107 031c 	add.w	r3, r7, #28
 8003c12:	4619      	mov	r1, r3
 8003c14:	4840      	ldr	r0, [pc, #256]	; (8003d18 <MX_GPIO_Init+0x2f4>)
 8003c16:	f003 f83b 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8003c1a:	f24f 0310 	movw	r3, #61456	; 0xf010
 8003c1e:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c20:	2301      	movs	r3, #1
 8003c22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c24:	2300      	movs	r3, #0
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c2c:	f107 031c 	add.w	r3, r7, #28
 8003c30:	4619      	mov	r1, r3
 8003c32:	4838      	ldr	r0, [pc, #224]	; (8003d14 <MX_GPIO_Init+0x2f0>)
 8003c34:	f003 f82c 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_microSD_Pin */
  GPIO_InitStruct.Pin = CS_microSD_Pin;
 8003c38:	2340      	movs	r3, #64	; 0x40
 8003c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c40:	2300      	movs	r3, #0
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003c44:	2302      	movs	r3, #2
 8003c46:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_microSD_GPIO_Port, &GPIO_InitStruct);
 8003c48:	f107 031c 	add.w	r3, r7, #28
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	4830      	ldr	r0, [pc, #192]	; (8003d10 <MX_GPIO_Init+0x2ec>)
 8003c50:	f003 f81e 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : I2S3_MCK_Pin I2S3_SCK_Pin I2S3_SD_Pin */
  GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003c54:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8003c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c5a:	2302      	movs	r3, #2
 8003c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c62:	2300      	movs	r3, #0
 8003c64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003c66:	2306      	movs	r3, #6
 8003c68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c6a:	f107 031c 	add.w	r3, r7, #28
 8003c6e:	4619      	mov	r1, r3
 8003c70:	4827      	ldr	r0, [pc, #156]	; (8003d10 <MX_GPIO_Init+0x2ec>)
 8003c72:	f003 f80d 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003c76:	2320      	movs	r3, #32
 8003c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8003c82:	f107 031c 	add.w	r3, r7, #28
 8003c86:	4619      	mov	r1, r3
 8003c88:	4822      	ldr	r0, [pc, #136]	; (8003d14 <MX_GPIO_Init+0x2f0>)
 8003c8a:	f003 f801 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : Audio_SCL_Pin Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8003c8e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8003c92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c94:	2312      	movs	r3, #18
 8003c96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003ca0:	2304      	movs	r3, #4
 8003ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ca4:	f107 031c 	add.w	r3, r7, #28
 8003ca8:	4619      	mov	r1, r3
 8003caa:	481b      	ldr	r0, [pc, #108]	; (8003d18 <MX_GPIO_Init+0x2f4>)
 8003cac:	f002 fff0 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pins : T_CLK_Pin T_CS_Pin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_CS_Pin;
 8003cb0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cb6:	2301      	movs	r3, #1
 8003cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003cc2:	f107 031c 	add.w	r3, r7, #28
 8003cc6:	4619      	mov	r1, r3
 8003cc8:	4813      	ldr	r0, [pc, #76]	; (8003d18 <MX_GPIO_Init+0x2f4>)
 8003cca:	f002 ffe1 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : T_MISO_Pin */
  GPIO_InitStruct.Pin = T_MISO_Pin;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(T_MISO_GPIO_Port, &GPIO_InitStruct);
 8003cda:	f107 031c 	add.w	r3, r7, #28
 8003cde:	4619      	mov	r1, r3
 8003ce0:	480a      	ldr	r0, [pc, #40]	; (8003d0c <MX_GPIO_Init+0x2e8>)
 8003ce2:	f002 ffd5 	bl	8006c90 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8003cea:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8003cee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003cf4:	f107 031c 	add.w	r3, r7, #28
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	4804      	ldr	r0, [pc, #16]	; (8003d0c <MX_GPIO_Init+0x2e8>)
 8003cfc:	f002 ffc8 	bl	8006c90 <HAL_GPIO_Init>

}
 8003d00:	bf00      	nop
 8003d02:	3730      	adds	r7, #48	; 0x30
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40023800 	.word	0x40023800
 8003d0c:	40021000 	.word	0x40021000
 8003d10:	40020800 	.word	0x40020800
 8003d14:	40020c00 	.word	0x40020c00
 8003d18:	40020400 	.word	0x40020400
 8003d1c:	40020000 	.word	0x40020000

08003d20 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8003d28:	f012 ffa4 	bl	8016c74 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(10);
 8003d2c:	200a      	movs	r0, #10
 8003d2e:	f00f f935 	bl	8012f9c <osDelay>
 8003d32:	e7fb      	b.n	8003d2c <StartDefaultTask+0xc>

08003d34 <Start_RTC>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_RTC */
void Start_RTC(void *argument)
{
 8003d34:	b5b0      	push	{r4, r5, r7, lr}
 8003d36:	f5ad 6d8c 	sub.w	sp, sp, #1120	; 0x460
 8003d3a:	af00      	add	r7, sp, #0
 8003d3c:	1d3b      	adds	r3, r7, #4
 8003d3e:	6018      	str	r0, [r3, #0]
		 * For STM32F407 discovery dev board needs remove R26, and connect battery to VBAT (near R26).
		 * Also, need solder the LF Crystal and two capacitors.
		 */

		// 1. Set time
		  RTC_TimeTypeDef sTime = {0};
 8003d40:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	605a      	str	r2, [r3, #4]
 8003d4a:	609a      	str	r2, [r3, #8]
 8003d4c:	60da      	str	r2, [r3, #12]
 8003d4e:	611a      	str	r2, [r3, #16]
	//	  sTime.Minutes = 33;
	//	  sTime.Seconds = 00;
	//	  HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
		  // Set date

		  RTC_DateTypeDef sDate = {0};
 8003d50:	2300      	movs	r3, #0
 8003d52:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
	//	  HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
		  /////////////////////////////////////////////////////////////////////

	QUEUE_t msg;												// Make a queue

	char buff[50] = {0};
 8003d56:	f107 0314 	add.w	r3, r7, #20
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]
 8003d5e:	3304      	adds	r3, #4
 8003d60:	222e      	movs	r2, #46	; 0x2e
 8003d62:	2100      	movs	r1, #0
 8003d64:	4618      	mov	r0, r3
 8003d66:	f013 fe09 	bl	801797c <memset>
	char buf[5] = {0};
 8003d6a:	f107 030c 	add.w	r3, r7, #12
 8003d6e:	2200      	movs	r2, #0
 8003d70:	601a      	str	r2, [r3, #0]
 8003d72:	2200      	movs	r2, #0
 8003d74:	711a      	strb	r2, [r3, #4]
	char str_end_of_line[4] = {'\r','\n','\0'};
 8003d76:	f107 0308 	add.w	r3, r7, #8
 8003d7a:	f640 220d 	movw	r2, #2573	; 0xa0d
 8003d7e:	601a      	str	r2, [r3, #0]

	static uint8_t i = 1;
	for(;;)
	{
		// Blue LED blink//
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 8003d80:	2201      	movs	r2, #1
 8003d82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d86:	4883      	ldr	r0, [pc, #524]	; (8003f94 <Start_RTC+0x260>)
 8003d88:	f003 fa32 	bl	80071f0 <HAL_GPIO_WritePin>
		osDelay(100);
 8003d8c:	2064      	movs	r0, #100	; 0x64
 8003d8e:	f00f f905 	bl	8012f9c <osDelay>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET);
 8003d92:	2200      	movs	r2, #0
 8003d94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d98:	487e      	ldr	r0, [pc, #504]	; (8003f94 <Start_RTC+0x260>)
 8003d9a:	f003 fa29 	bl	80071f0 <HAL_GPIO_WritePin>
		osDelay(900);
 8003d9e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8003da2:	f00f f8fb 	bl	8012f9c <osDelay>

		// RTC part
		HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);						// Get time (write in sDime struct)
 8003da6:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8003daa:	2200      	movs	r2, #0
 8003dac:	4619      	mov	r1, r3
 8003dae:	487a      	ldr	r0, [pc, #488]	; (8003f98 <Start_RTC+0x264>)
 8003db0:	f006 fd4a 	bl	800a848 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);						// Get data (write in sDime struct)
 8003db4:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8003db8:	2200      	movs	r2, #0
 8003dba:	4619      	mov	r1, r3
 8003dbc:	4876      	ldr	r0, [pc, #472]	; (8003f98 <Start_RTC+0x264>)
 8003dbe:	f006 fe48 	bl	800aa52 <HAL_RTC_GetDate>

		memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
 8003dc2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003dc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003dca:	2100      	movs	r1, #0
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f013 fdd5 	bl	801797c <memset>
		memset(buff, 0, sizeof(buff));
 8003dd2:	f107 0314 	add.w	r3, r7, #20
 8003dd6:	2232      	movs	r2, #50	; 0x32
 8003dd8:	2100      	movs	r1, #0
 8003dda:	4618      	mov	r0, r3
 8003ddc:	f013 fdce 	bl	801797c <memset>

		strcat(msg.Buf, "RTC DATA AND TIME >>>>>>>    " );
 8003de0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003de4:	4618      	mov	r0, r3
 8003de6:	f7fc f9f3 	bl	80001d0 <strlen>
 8003dea:	4603      	mov	r3, r0
 8003dec:	461a      	mov	r2, r3
 8003dee:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003df2:	4413      	add	r3, r2
 8003df4:	4a69      	ldr	r2, [pc, #420]	; (8003f9c <Start_RTC+0x268>)
 8003df6:	461d      	mov	r5, r3
 8003df8:	4614      	mov	r4, r2
 8003dfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003dfc:	6028      	str	r0, [r5, #0]
 8003dfe:	6069      	str	r1, [r5, #4]
 8003e00:	60aa      	str	r2, [r5, #8]
 8003e02:	60eb      	str	r3, [r5, #12]
 8003e04:	cc07      	ldmia	r4!, {r0, r1, r2}
 8003e06:	6128      	str	r0, [r5, #16]
 8003e08:	6169      	str	r1, [r5, #20]
 8003e0a:	61aa      	str	r2, [r5, #24]
 8003e0c:	8823      	ldrh	r3, [r4, #0]
 8003e0e:	83ab      	strh	r3, [r5, #28]

		// Date
		itoa(sDate.Year, buf, 10);
 8003e10:	f897 344b 	ldrb.w	r3, [r7, #1099]	; 0x44b
 8003e14:	4618      	mov	r0, r3
 8003e16:	f107 030c 	add.w	r3, r7, #12
 8003e1a:	220a      	movs	r2, #10
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	f013 fd89 	bl	8017934 <itoa>
		strcat(msg.Buf, buf);
 8003e22:	f107 020c 	add.w	r2, r7, #12
 8003e26:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e2a:	4611      	mov	r1, r2
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f014 fb9e 	bl	801856e <strcat>

		itoa(sDate.Month, buf, 10);
 8003e32:	f897 3449 	ldrb.w	r3, [r7, #1097]	; 0x449
 8003e36:	4618      	mov	r0, r3
 8003e38:	f107 030c 	add.w	r3, r7, #12
 8003e3c:	220a      	movs	r2, #10
 8003e3e:	4619      	mov	r1, r3
 8003e40:	f013 fd78 	bl	8017934 <itoa>
		strcat(msg.Buf, "-");
 8003e44:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fc f9c1 	bl	80001d0 <strlen>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	461a      	mov	r2, r3
 8003e52:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e56:	4413      	add	r3, r2
 8003e58:	4951      	ldr	r1, [pc, #324]	; (8003fa0 <Start_RTC+0x26c>)
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003e62:	f107 020c 	add.w	r2, r7, #12
 8003e66:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f014 fb7e 	bl	801856e <strcat>

		itoa(sDate.Date, buf, 10);
 8003e72:	f897 344a 	ldrb.w	r3, [r7, #1098]	; 0x44a
 8003e76:	4618      	mov	r0, r3
 8003e78:	f107 030c 	add.w	r3, r7, #12
 8003e7c:	220a      	movs	r2, #10
 8003e7e:	4619      	mov	r1, r3
 8003e80:	f013 fd58 	bl	8017934 <itoa>
		strcat(msg.Buf, "-");
 8003e84:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f7fc f9a1 	bl	80001d0 <strlen>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	461a      	mov	r2, r3
 8003e92:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003e96:	4413      	add	r3, r2
 8003e98:	4941      	ldr	r1, [pc, #260]	; (8003fa0 <Start_RTC+0x26c>)
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003ea2:	f107 020c 	add.w	r2, r7, #12
 8003ea6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003eaa:	4611      	mov	r1, r2
 8003eac:	4618      	mov	r0, r3
 8003eae:	f014 fb5e 	bl	801856e <strcat>

		strcat(msg.Buf, " | ");
 8003eb2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f7fc f98a 	bl	80001d0 <strlen>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ec4:	4413      	add	r3, r2
 8003ec6:	4a37      	ldr	r2, [pc, #220]	; (8003fa4 <Start_RTC+0x270>)
 8003ec8:	6810      	ldr	r0, [r2, #0]
 8003eca:	6018      	str	r0, [r3, #0]

		// Time
		itoa(sTime.Hours, buf, 10);
 8003ecc:	f897 344c 	ldrb.w	r3, [r7, #1100]	; 0x44c
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f107 030c 	add.w	r3, r7, #12
 8003ed6:	220a      	movs	r2, #10
 8003ed8:	4619      	mov	r1, r3
 8003eda:	f013 fd2b 	bl	8017934 <itoa>
		strcat(msg.Buf, buf);
 8003ede:	f107 020c 	add.w	r2, r7, #12
 8003ee2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003ee6:	4611      	mov	r1, r2
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f014 fb40 	bl	801856e <strcat>

		itoa(sTime.Minutes, buf, 10);
 8003eee:	f897 344d 	ldrb.w	r3, [r7, #1101]	; 0x44d
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f107 030c 	add.w	r3, r7, #12
 8003ef8:	220a      	movs	r2, #10
 8003efa:	4619      	mov	r1, r3
 8003efc:	f013 fd1a 	bl	8017934 <itoa>
		strcat(msg.Buf, ":");
 8003f00:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7fc f963 	bl	80001d0 <strlen>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f12:	4413      	add	r3, r2
 8003f14:	4924      	ldr	r1, [pc, #144]	; (8003fa8 <Start_RTC+0x274>)
 8003f16:	461a      	mov	r2, r3
 8003f18:	460b      	mov	r3, r1
 8003f1a:	881b      	ldrh	r3, [r3, #0]
 8003f1c:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003f1e:	f107 020c 	add.w	r2, r7, #12
 8003f22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f26:	4611      	mov	r1, r2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f014 fb20 	bl	801856e <strcat>

		itoa(sTime.Seconds, buf, 10);
 8003f2e:	f897 344e 	ldrb.w	r3, [r7, #1102]	; 0x44e
 8003f32:	4618      	mov	r0, r3
 8003f34:	f107 030c 	add.w	r3, r7, #12
 8003f38:	220a      	movs	r2, #10
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	f013 fcfa 	bl	8017934 <itoa>
		strcat(msg.Buf, ":");
 8003f40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fc f943 	bl	80001d0 <strlen>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f52:	4413      	add	r3, r2
 8003f54:	4914      	ldr	r1, [pc, #80]	; (8003fa8 <Start_RTC+0x274>)
 8003f56:	461a      	mov	r2, r3
 8003f58:	460b      	mov	r3, r1
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	8013      	strh	r3, [r2, #0]
		strcat(msg.Buf, buf);
 8003f5e:	f107 020c 	add.w	r2, r7, #12
 8003f62:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f66:	4611      	mov	r1, r2
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f014 fb00 	bl	801856e <strcat>

		strcat(msg.Buf, str_end_of_line);
 8003f6e:	f107 0208 	add.w	r2, r7, #8
 8003f72:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003f76:	4611      	mov	r1, r2
 8003f78:	4618      	mov	r0, r3
 8003f7a:	f014 faf8 	bl	801856e <strcat>
		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 8003f7e:	4b0b      	ldr	r3, [pc, #44]	; (8003fac <Start_RTC+0x278>)
 8003f80:	6818      	ldr	r0, [r3, #0]
 8003f82:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8003f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f00f f9d8 	bl	8013340 <osMessageQueuePut>
		HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_SET);
 8003f90:	e6f6      	b.n	8003d80 <Start_RTC+0x4c>
 8003f92:	bf00      	nop
 8003f94:	40020c00 	.word	0x40020c00
 8003f98:	2000ed44 	.word	0x2000ed44
 8003f9c:	0801aac0 	.word	0x0801aac0
 8003fa0:	0801aae0 	.word	0x0801aae0
 8003fa4:	0801aae4 	.word	0x0801aae4
 8003fa8:	0801aae8 	.word	0x0801aae8
 8003fac:	2000ac58 	.word	0x2000ac58

08003fb0 <Start_Show_Resources>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_Show_Resources */
void Start_Show_Resources(void *argument)
{
 8003fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fb2:	f2ad 4d84 	subw	sp, sp, #1156	; 0x484
 8003fb6:	af00      	add	r7, sp, #0
 8003fb8:	1d3b      	adds	r3, r7, #4
 8003fba:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_Show_Resources */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(5000);												// Every 5 second task management will print data
 8003fbc:	f241 3088 	movw	r0, #5000	; 0x1388
 8003fc0:	f00e ffec 	bl	8012f9c <osDelay>

	  char str_end_of_line[3] = {'\r','\n'};
 8003fc4:	4a8d      	ldr	r2, [pc, #564]	; (80041fc <Start_Show_Resources+0x24c>)
 8003fc6:	f207 4374 	addw	r3, r7, #1140	; 0x474
 8003fca:	6812      	ldr	r2, [r2, #0]
 8003fcc:	4611      	mov	r1, r2
 8003fce:	8019      	strh	r1, [r3, #0]
 8003fd0:	3302      	adds	r3, #2
 8003fd2:	0c12      	lsrs	r2, r2, #16
 8003fd4:	701a      	strb	r2, [r3, #0]
	  char str_sig = '-';
 8003fd6:	232d      	movs	r3, #45	; 0x2d
 8003fd8:	f887 3477 	strb.w	r3, [r7, #1143]	; 0x477
	  char buff[10] = {0};
 8003fdc:	2300      	movs	r3, #0
 8003fde:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8003fe2:	f207 436c 	addw	r3, r7, #1132	; 0x46c
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	809a      	strh	r2, [r3, #4]

	  QUEUE_t msg;												// Make a queue
	  memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 8003fec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003ff0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ff4:	2100      	movs	r1, #0
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f013 fcc0 	bl	801797c <memset>
	  strcat(msg.Buf, ">>>>> Free heap memory: ");				// Add string to another (Total heap)
 8003ffc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004000:	4618      	mov	r0, r3
 8004002:	f7fc f8e5 	bl	80001d0 <strlen>
 8004006:	4603      	mov	r3, r0
 8004008:	461a      	mov	r2, r3
 800400a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800400e:	4413      	add	r3, r2
 8004010:	4a7b      	ldr	r2, [pc, #492]	; (8004200 <Start_Show_Resources+0x250>)
 8004012:	461d      	mov	r5, r3
 8004014:	4614      	mov	r4, r2
 8004016:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004018:	6028      	str	r0, [r5, #0]
 800401a:	6069      	str	r1, [r5, #4]
 800401c:	60aa      	str	r2, [r5, #8]
 800401e:	60eb      	str	r3, [r5, #12]
 8004020:	cc03      	ldmia	r4!, {r0, r1}
 8004022:	6128      	str	r0, [r5, #16]
 8004024:	6169      	str	r1, [r5, #20]
 8004026:	7823      	ldrb	r3, [r4, #0]
 8004028:	762b      	strb	r3, [r5, #24]

	  freemem = xPortGetFreeHeapSize();							// Function return how many free memory.
 800402a:	f012 fd5b 	bl	8016ae4 <xPortGetFreeHeapSize>
 800402e:	4603      	mov	r3, r0
 8004030:	461a      	mov	r2, r3
 8004032:	4b74      	ldr	r3, [pc, #464]	; (8004204 <Start_Show_Resources+0x254>)
 8004034:	601a      	str	r2, [r3, #0]
	  itoa(freemem, buff, 10);
 8004036:	4b73      	ldr	r3, [pc, #460]	; (8004204 <Start_Show_Resources+0x254>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f507 618d 	add.w	r1, r7, #1128	; 0x468
 800403e:	220a      	movs	r2, #10
 8004040:	4618      	mov	r0, r3
 8004042:	f013 fc77 	bl	8017934 <itoa>
	  strcat(msg.Buf, buff);
 8004046:	f507 628d 	add.w	r2, r7, #1128	; 0x468
 800404a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800404e:	4611      	mov	r1, r2
 8004050:	4618      	mov	r0, r3
 8004052:	f014 fa8c 	bl	801856e <strcat>
	  strcat(msg.Buf, str_end_of_line);
 8004056:	f207 4274 	addw	r2, r7, #1140	; 0x474
 800405a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800405e:	4611      	mov	r1, r2
 8004060:	4618      	mov	r0, r3
 8004062:	f014 fa84 	bl	801856e <strcat>

	  // add a hat
	  strcat(msg.Buf, "| TASK NAME           | STATUS |   PRIOR	|  STACK  |    NUM  |\n\r\0");
 8004066:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800406a:	4618      	mov	r0, r3
 800406c:	f7fc f8b0 	bl	80001d0 <strlen>
 8004070:	4603      	mov	r3, r0
 8004072:	461a      	mov	r2, r3
 8004074:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004078:	4413      	add	r3, r2
 800407a:	4a63      	ldr	r2, [pc, #396]	; (8004208 <Start_Show_Resources+0x258>)
 800407c:	4618      	mov	r0, r3
 800407e:	4611      	mov	r1, r2
 8004080:	2341      	movs	r3, #65	; 0x41
 8004082:	461a      	mov	r2, r3
 8004084:	f013 fc6c 	bl	8017960 <memcpy>

	  vTaskList(str_management_memory_str);						// Fill in str_management_memory_str array management task information
 8004088:	4860      	ldr	r0, [pc, #384]	; (800420c <Start_Show_Resources+0x25c>)
 800408a:	f011 fce1 	bl	8015a50 <vTaskList>

	  // Finding the  end of string
	  uint16_t buffer_size = 0;
 800408e:	2300      	movs	r3, #0
 8004090:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  while(msg.Buf[buffer_size] != '\0')
 8004094:	e004      	b.n	80040a0 <Start_Show_Resources+0xf0>
	  {
	  	buffer_size ++;
 8004096:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 800409a:	3301      	adds	r3, #1
 800409c:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  while(msg.Buf[buffer_size] != '\0')
 80040a0:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 80040a4:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80040a8:	5cd3      	ldrb	r3, [r2, r3]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f3      	bne.n	8004096 <Start_Show_Resources+0xe6>
	  }

	  // Add str_management_memory_str to queue string
	  int i = 0;
 80040ae:	2300      	movs	r3, #0
 80040b0:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 80040b4:	2300      	movs	r3, #0
 80040b6:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 80040ba:	e011      	b.n	80040e0 <Start_Show_Resources+0x130>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 80040bc:	f8b7 247e 	ldrh.w	r2, [r7, #1150]	; 0x47e
 80040c0:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 80040c4:	4413      	add	r3, r2
 80040c6:	4951      	ldr	r1, [pc, #324]	; (800420c <Start_Show_Resources+0x25c>)
 80040c8:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 80040cc:	440a      	add	r2, r1
 80040ce:	7811      	ldrb	r1, [r2, #0]
 80040d0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 80040d4:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 80040d6:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 80040da:	3301      	adds	r3, #1
 80040dc:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 80040e0:	4a4a      	ldr	r2, [pc, #296]	; (800420c <Start_Show_Resources+0x25c>)
 80040e2:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 80040e6:	4413      	add	r3, r2
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1e6      	bne.n	80040bc <Start_Show_Resources+0x10c>
	  }

	  // add a hat
	  char str_line[] = {"-----------------------\n\r"};
 80040ee:	4b48      	ldr	r3, [pc, #288]	; (8004210 <Start_Show_Resources+0x260>)
 80040f0:	f207 444c 	addw	r4, r7, #1100	; 0x44c
 80040f4:	461d      	mov	r5, r3
 80040f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80040f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80040fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80040fe:	c403      	stmia	r4!, {r0, r1}
 8004100:	8022      	strh	r2, [r4, #0]
	  char str_head_2[] = {"| TASK NAME           | ABS TIME |              TASK TIME% |\n\r"};
 8004102:	f107 030c 	add.w	r3, r7, #12
 8004106:	4a43      	ldr	r2, [pc, #268]	; (8004214 <Start_Show_Resources+0x264>)
 8004108:	461c      	mov	r4, r3
 800410a:	4615      	mov	r5, r2
 800410c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800410e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004112:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004116:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004118:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800411c:	c407      	stmia	r4!, {r0, r1, r2}
 800411e:	8023      	strh	r3, [r4, #0]
 8004120:	3402      	adds	r4, #2
 8004122:	0c1b      	lsrs	r3, r3, #16
 8004124:	7023      	strb	r3, [r4, #0]
	  strcat(msg.Buf, str_line);
 8004126:	f207 424c 	addw	r2, r7, #1100	; 0x44c
 800412a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800412e:	4611      	mov	r1, r2
 8004130:	4618      	mov	r0, r3
 8004132:	f014 fa1c 	bl	801856e <strcat>
	  strcat(msg.Buf, str_head_2);
 8004136:	f107 020c 	add.w	r2, r7, #12
 800413a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800413e:	4611      	mov	r1, r2
 8004140:	4618      	mov	r0, r3
 8004142:	f014 fa14 	bl	801856e <strcat>

	  memset(str_management_memory_str, 0, sizeof(str_management_memory_str));	// Clean buffer
 8004146:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800414a:	2100      	movs	r1, #0
 800414c:	482f      	ldr	r0, [pc, #188]	; (800420c <Start_Show_Resources+0x25c>)
 800414e:	f013 fc15 	bl	801797c <memset>

	  vTaskGetRunTimeStats(str_management_memory_str);							// Function return how much time all functions running.
 8004152:	482e      	ldr	r0, [pc, #184]	; (800420c <Start_Show_Resources+0x25c>)
 8004154:	f011 fd12 	bl	8015b7c <vTaskGetRunTimeStats>

	  buffer_size = buffer_size + i + (sizeof(str_line)-1) + (sizeof(str_head_2)-1);           // НЕ ВИВОДИТЬ СТРОКУ !!!!!!!!!!!!!!!!!! <<<<<<<<<<<<<<<<<<<
 8004158:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800415c:	b29a      	uxth	r2, r3
 800415e:	f8b7 347e 	ldrh.w	r3, [r7, #1150]	; 0x47e
 8004162:	4413      	add	r3, r2
 8004164:	b29b      	uxth	r3, r3
 8004166:	3357      	adds	r3, #87	; 0x57
 8004168:	f8a7 347e 	strh.w	r3, [r7, #1150]	; 0x47e
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 800416c:	2300      	movs	r3, #0
 800416e:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8004172:	e011      	b.n	8004198 <Start_Show_Resources+0x1e8>
	  {
	  	// add data to queue
	  	msg.Buf[buffer_size + i] = str_management_memory_str[i];
 8004174:	f8b7 247e 	ldrh.w	r2, [r7, #1150]	; 0x47e
 8004178:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800417c:	4413      	add	r3, r2
 800417e:	4923      	ldr	r1, [pc, #140]	; (800420c <Start_Show_Resources+0x25c>)
 8004180:	f8d7 2478 	ldr.w	r2, [r7, #1144]	; 0x478
 8004184:	440a      	add	r2, r1
 8004186:	7811      	ldrb	r1, [r2, #0]
 8004188:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800418c:	54d1      	strb	r1, [r2, r3]
	  for(i = 0; str_management_memory_str[i] != '\0'; i++)
 800418e:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 8004192:	3301      	adds	r3, #1
 8004194:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 8004198:	4a1c      	ldr	r2, [pc, #112]	; (800420c <Start_Show_Resources+0x25c>)
 800419a:	f8d7 3478 	ldr.w	r3, [r7, #1144]	; 0x478
 800419e:	4413      	add	r3, r2
 80041a0:	781b      	ldrb	r3, [r3, #0]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1e6      	bne.n	8004174 <Start_Show_Resources+0x1c4>
	  }
	  strcat(msg.Buf, "#########################################\n\r");
 80041a6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fc f810 	bl	80001d0 <strlen>
 80041b0:	4603      	mov	r3, r0
 80041b2:	461a      	mov	r2, r3
 80041b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80041b8:	4413      	add	r3, r2
 80041ba:	4a17      	ldr	r2, [pc, #92]	; (8004218 <Start_Show_Resources+0x268>)
 80041bc:	4614      	mov	r4, r2
 80041be:	469c      	mov	ip, r3
 80041c0:	f104 0e20 	add.w	lr, r4, #32
 80041c4:	4665      	mov	r5, ip
 80041c6:	4626      	mov	r6, r4
 80041c8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80041ca:	6028      	str	r0, [r5, #0]
 80041cc:	6069      	str	r1, [r5, #4]
 80041ce:	60aa      	str	r2, [r5, #8]
 80041d0:	60eb      	str	r3, [r5, #12]
 80041d2:	3410      	adds	r4, #16
 80041d4:	f10c 0c10 	add.w	ip, ip, #16
 80041d8:	4574      	cmp	r4, lr
 80041da:	d1f3      	bne.n	80041c4 <Start_Show_Resources+0x214>
 80041dc:	4665      	mov	r5, ip
 80041de:	4623      	mov	r3, r4
 80041e0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80041e2:	6028      	str	r0, [r5, #0]
 80041e4:	6069      	str	r1, [r5, #4]
 80041e6:	60aa      	str	r2, [r5, #8]

	  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);					// Write data on queue (In will print on StartUART_Task task)
 80041e8:	4b0c      	ldr	r3, [pc, #48]	; (800421c <Start_Show_Resources+0x26c>)
 80041ea:	6818      	ldr	r0, [r3, #0]
 80041ec:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80041f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80041f4:	2200      	movs	r2, #0
 80041f6:	f00f f8a3 	bl	8013340 <osMessageQueuePut>
  {
 80041fa:	e6df      	b.n	8003fbc <Start_Show_Resources+0xc>
 80041fc:	0801ab78 	.word	0x0801ab78
 8004200:	0801aaec 	.word	0x0801aaec
 8004204:	200007a0 	.word	0x200007a0
 8004208:	0801ab08 	.word	0x0801ab08
 800420c:	200003b8 	.word	0x200003b8
 8004210:	0801ab7c 	.word	0x0801ab7c
 8004214:	0801ab98 	.word	0x0801ab98
 8004218:	0801ab4c 	.word	0x0801ab4c
 800421c:	2000ac58 	.word	0x2000ac58

08004220 <Start_UART_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_UART_Task */
void Start_UART_Task(void *argument)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8004226:	af00      	add	r7, sp, #0
 8004228:	1d3b      	adds	r3, r7, #4
 800422a:	6018      	str	r0, [r3, #0]
  /* Infinite loop */
  QUEUE_t msg;
  for(;;)
  {
	// osMessageQueueGet waiting data on a queue (If data are in queue so print it)
	osMessageQueueGet(UARTQueueHandle, &msg, 0, osWaitForever);			// Write for data on queue
 800422c:	4b12      	ldr	r3, [pc, #72]	; (8004278 <Start_UART_Task+0x58>)
 800422e:	6818      	ldr	r0, [r3, #0]
 8004230:	f107 010c 	add.w	r1, r7, #12
 8004234:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004238:	2200      	movs	r2, #0
 800423a:	f00f f8e1 	bl	8013400 <osMessageQueueGet>
	// Counting how many characters will be transmitted
	uint16_t buffer_size = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8004244:	e004      	b.n	8004250 <Start_UART_Task+0x30>
	{
		buffer_size ++;
 8004246:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 800424a:	3301      	adds	r3, #1
 800424c:	f8a7 340e 	strh.w	r3, [r7, #1038]	; 0x40e
	while(msg.Buf[buffer_size] != '\0')
 8004250:	f8b7 340e 	ldrh.w	r3, [r7, #1038]	; 0x40e
 8004254:	f107 020c 	add.w	r2, r7, #12
 8004258:	5cd3      	ldrb	r3, [r2, r3]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f3      	bne.n	8004246 <Start_UART_Task+0x26>
	}
	// Transmit over virtual comport
	CDC_Transmit_FS(msg.Buf, buffer_size);						// Transmit data over virtual comport
 800425e:	f8b7 240e 	ldrh.w	r2, [r7, #1038]	; 0x40e
 8004262:	f107 030c 	add.w	r3, r7, #12
 8004266:	4611      	mov	r1, r2
 8004268:	4618      	mov	r0, r3
 800426a:	f012 fdc1 	bl	8016df0 <CDC_Transmit_FS>
    osDelay(1);
 800426e:	2001      	movs	r0, #1
 8004270:	f00e fe94 	bl	8012f9c <osDelay>
  {
 8004274:	e7da      	b.n	800422c <Start_UART_Task+0xc>
 8004276:	bf00      	nop
 8004278:	2000ac58 	.word	0x2000ac58

0800427c <Start_bme280>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_bme280 */
void Start_bme280(void *argument)
{
 800427c:	b5b0      	push	{r4, r5, r7, lr}
 800427e:	f5ad 6d8f 	sub.w	sp, sp, #1144	; 0x478
 8004282:	af04      	add	r7, sp, #16
 8004284:	1d3b      	adds	r3, r7, #4
 8004286:	6018      	str	r0, [r3, #0]
  /* Infinite loop */

	QUEUE_t msg;												// Make a queue
	//memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'

	uint16_t STATUS=0;
 8004288:	2300      	movs	r3, #0
 800428a:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
	uint16_t addres_device = 0x76;  		 	// BME280
 800428e:	2376      	movs	r3, #118	; 0x76
 8004290:	f8a7 3464 	strh.w	r3, [r7, #1124]	; 0x464
	uint16_t id_addr = 0xD0;
 8004294:	23d0      	movs	r3, #208	; 0xd0
 8004296:	f8a7 3462 	strh.w	r3, [r7, #1122]	; 0x462
	uint8_t id = 96;							// in hex form
 800429a:	2360      	movs	r3, #96	; 0x60
 800429c:	f887 3461 	strb.w	r3, [r7, #1121]	; 0x461
	uint8_t buff=0;        						// Return 0x96 -> Dec 60
 80042a0:	f107 0353 	add.w	r3, r7, #83	; 0x53
 80042a4:	2200      	movs	r2, #0
 80042a6:	701a      	strb	r2, [r3, #0]

	// For debug
	STATUS = HAL_I2C_Mem_Read(&hi2c3, addres_device<<1, id_addr, 1, &buff, 1, 1000);
 80042a8:	f8b7 3464 	ldrh.w	r3, [r7, #1124]	; 0x464
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	b299      	uxth	r1, r3
 80042b0:	f8b7 2462 	ldrh.w	r2, [r7, #1122]	; 0x462
 80042b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042b8:	9302      	str	r3, [sp, #8]
 80042ba:	2301      	movs	r3, #1
 80042bc:	9301      	str	r3, [sp, #4]
 80042be:	f107 0353 	add.w	r3, r7, #83	; 0x53
 80042c2:	9300      	str	r3, [sp, #0]
 80042c4:	2301      	movs	r3, #1
 80042c6:	48bb      	ldr	r0, [pc, #748]	; (80045b4 <Start_bme280+0x338>)
 80042c8:	f003 fc14 	bl	8007af4 <HAL_I2C_Mem_Read>
 80042cc:	4603      	mov	r3, r0
 80042ce:	f8a7 3466 	strh.w	r3, [r7, #1126]	; 0x466
		// Error !!! BME280 didn't found
	}


	// Init BME280
	dev.dev_id = BME280_I2C_ADDR_PRIM;
 80042d2:	4bb9      	ldr	r3, [pc, #740]	; (80045b8 <Start_bme280+0x33c>)
 80042d4:	2276      	movs	r2, #118	; 0x76
 80042d6:	705a      	strb	r2, [r3, #1]
	dev.intf = BME280_I2C_INTF;
 80042d8:	4bb7      	ldr	r3, [pc, #732]	; (80045b8 <Start_bme280+0x33c>)
 80042da:	2201      	movs	r2, #1
 80042dc:	709a      	strb	r2, [r3, #2]
	dev.read = user_i2c_read;
 80042de:	4bb6      	ldr	r3, [pc, #728]	; (80045b8 <Start_bme280+0x33c>)
 80042e0:	4ab6      	ldr	r2, [pc, #728]	; (80045bc <Start_bme280+0x340>)
 80042e2:	605a      	str	r2, [r3, #4]
	dev.write = user_i2c_write;
 80042e4:	4bb4      	ldr	r3, [pc, #720]	; (80045b8 <Start_bme280+0x33c>)
 80042e6:	4ab6      	ldr	r2, [pc, #728]	; (80045c0 <Start_bme280+0x344>)
 80042e8:	609a      	str	r2, [r3, #8]
	dev.delay_ms = user_delay_ms;
 80042ea:	4bb3      	ldr	r3, [pc, #716]	; (80045b8 <Start_bme280+0x33c>)
 80042ec:	4ab5      	ldr	r2, [pc, #724]	; (80045c4 <Start_bme280+0x348>)
 80042ee:	60da      	str	r2, [r3, #12]

	rslt = bme280_init(&dev);
 80042f0:	48b1      	ldr	r0, [pc, #708]	; (80045b8 <Start_bme280+0x33c>)
 80042f2:	f7fc fe45 	bl	8000f80 <bme280_init>
 80042f6:	4603      	mov	r3, r0
 80042f8:	461a      	mov	r2, r3
 80042fa:	4bb3      	ldr	r3, [pc, #716]	; (80045c8 <Start_bme280+0x34c>)
 80042fc:	701a      	strb	r2, [r3, #0]

	dev.settings.osr_h = BME280_OVERSAMPLING_1X;
 80042fe:	4bae      	ldr	r3, [pc, #696]	; (80045b8 <Start_bme280+0x33c>)
 8004300:	2201      	movs	r2, #1
 8004302:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	dev.settings.osr_p = BME280_OVERSAMPLING_16X;
 8004306:	4bac      	ldr	r3, [pc, #688]	; (80045b8 <Start_bme280+0x33c>)
 8004308:	2205      	movs	r2, #5
 800430a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	dev.settings.osr_t = BME280_OVERSAMPLING_2X;
 800430e:	4baa      	ldr	r3, [pc, #680]	; (80045b8 <Start_bme280+0x33c>)
 8004310:	2202      	movs	r2, #2
 8004312:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	dev.settings.filter = BME280_FILTER_COEFF_16;
 8004316:	4ba8      	ldr	r3, [pc, #672]	; (80045b8 <Start_bme280+0x33c>)
 8004318:	2204      	movs	r2, #4
 800431a:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
	rslt = bme280_set_sensor_settings(BME280_OSR_PRESS_SEL | BME280_OSR_TEMP_SEL | BME280_OSR_HUM_SEL | BME280_FILTER_SEL, &dev);
 800431e:	49a6      	ldr	r1, [pc, #664]	; (80045b8 <Start_bme280+0x33c>)
 8004320:	200f      	movs	r0, #15
 8004322:	f7fc ff1f 	bl	8001164 <bme280_set_sensor_settings>
 8004326:	4603      	mov	r3, r0
 8004328:	461a      	mov	r2, r3
 800432a:	4ba7      	ldr	r3, [pc, #668]	; (80045c8 <Start_bme280+0x34c>)
 800432c:	701a      	strb	r2, [r3, #0]

	rslt = bme280_set_sensor_mode(BME280_NORMAL_MODE, &dev);
 800432e:	49a2      	ldr	r1, [pc, #648]	; (80045b8 <Start_bme280+0x33c>)
 8004330:	2003      	movs	r0, #3
 8004332:	f7fc ff6c 	bl	800120e <bme280_set_sensor_mode>
 8004336:	4603      	mov	r3, r0
 8004338:	461a      	mov	r2, r3
 800433a:	4ba3      	ldr	r3, [pc, #652]	; (80045c8 <Start_bme280+0x34c>)
 800433c:	701a      	strb	r2, [r3, #0]

	dev.delay_ms(40);
 800433e:	4b9e      	ldr	r3, [pc, #632]	; (80045b8 <Start_bme280+0x33c>)
 8004340:	68db      	ldr	r3, [r3, #12]
 8004342:	2028      	movs	r0, #40	; 0x28
 8004344:	4798      	blx	r3

  for(;;)
  {
	  osDelay(1000);
 8004346:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800434a:	f00e fe27 	bl	8012f9c <osDelay>

	  char str_t_h_and_p[60] = {0};
 800434e:	f107 0308 	add.w	r3, r7, #8
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
 8004356:	3304      	adds	r3, #4
 8004358:	2238      	movs	r2, #56	; 0x38
 800435a:	2100      	movs	r1, #0
 800435c:	4618      	mov	r0, r3
 800435e:	f013 fb0d 	bl	801797c <memset>
	  char str_thp_buffer[12] = {0};
 8004362:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004366:	2200      	movs	r2, #0
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	3304      	adds	r3, #4
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]
 8004370:	605a      	str	r2, [r3, #4]

	  memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
 8004372:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004376:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800437a:	2100      	movs	r1, #0
 800437c:	4618      	mov	r0, r3
 800437e:	f013 fafd 	bl	801797c <memset>
	  rslt = bme280_get_sensor_data(BME280_ALL, &comp_data, &dev);		// Get data from sensor
 8004382:	4a8d      	ldr	r2, [pc, #564]	; (80045b8 <Start_bme280+0x33c>)
 8004384:	4991      	ldr	r1, [pc, #580]	; (80045cc <Start_bme280+0x350>)
 8004386:	2007      	movs	r0, #7
 8004388:	f7fc ffbd 	bl	8001306 <bme280_get_sensor_data>
 800438c:	4603      	mov	r3, r0
 800438e:	461a      	mov	r2, r3
 8004390:	4b8d      	ldr	r3, [pc, #564]	; (80045c8 <Start_bme280+0x34c>)
 8004392:	701a      	strb	r2, [r3, #0]

	  if(rslt == BME280_OK)
 8004394:	4b8c      	ldr	r3, [pc, #560]	; (80045c8 <Start_bme280+0x34c>)
 8004396:	f993 3000 	ldrsb.w	r3, [r3]
 800439a:	2b00      	cmp	r3, #0
 800439c:	f040 80e5 	bne.w	800456a <Start_bme280+0x2ee>
	  {
	  		// Save data variables
	  		float BME280_temperature = comp_data.temperature;
 80043a0:	4b8a      	ldr	r3, [pc, #552]	; (80045cc <Start_bme280+0x350>)
 80043a2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80043a6:	4610      	mov	r0, r2
 80043a8:	4619      	mov	r1, r3
 80043aa:	f7fc fc1d 	bl	8000be8 <__aeabi_d2f>
 80043ae:	4603      	mov	r3, r0
 80043b0:	f207 425c 	addw	r2, r7, #1116	; 0x45c
 80043b4:	6013      	str	r3, [r2, #0]
	  		float BME280_humidity = comp_data.humidity;
 80043b6:	4b85      	ldr	r3, [pc, #532]	; (80045cc <Start_bme280+0x350>)
 80043b8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80043bc:	4610      	mov	r0, r2
 80043be:	4619      	mov	r1, r3
 80043c0:	f7fc fc12 	bl	8000be8 <__aeabi_d2f>
 80043c4:	4603      	mov	r3, r0
 80043c6:	f507 628b 	add.w	r2, r7, #1112	; 0x458
 80043ca:	6013      	str	r3, [r2, #0]
	  		float BME280_preasure = comp_data.pressure;
 80043cc:	4b7f      	ldr	r3, [pc, #508]	; (80045cc <Start_bme280+0x350>)
 80043ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d2:	4610      	mov	r0, r2
 80043d4:	4619      	mov	r1, r3
 80043d6:	f7fc fc07 	bl	8000be8 <__aeabi_d2f>
 80043da:	4603      	mov	r3, r0
 80043dc:	f207 4254 	addw	r2, r7, #1108	; 0x454
 80043e0:	6013      	str	r3, [r2, #0]

	  		// Write T, H and P in str_t_h_and_p buffer
	  		// Write TEMPERATURE
	  		strcat(str_t_h_and_p, "      BEE280: \n\r");
 80043e2:	f107 0308 	add.w	r3, r7, #8
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7fb fef2 	bl	80001d0 <strlen>
 80043ec:	4603      	mov	r3, r0
 80043ee:	461a      	mov	r2, r3
 80043f0:	f107 0308 	add.w	r3, r7, #8
 80043f4:	4413      	add	r3, r2
 80043f6:	4a76      	ldr	r2, [pc, #472]	; (80045d0 <Start_bme280+0x354>)
 80043f8:	461d      	mov	r5, r3
 80043fa:	4614      	mov	r4, r2
 80043fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043fe:	6028      	str	r0, [r5, #0]
 8004400:	6069      	str	r1, [r5, #4]
 8004402:	60aa      	str	r2, [r5, #8]
 8004404:	60eb      	str	r3, [r5, #12]
 8004406:	7823      	ldrb	r3, [r4, #0]
 8004408:	742b      	strb	r3, [r5, #16]
	  		strcat(str_t_h_and_p, "T: ");
 800440a:	f107 0308 	add.w	r3, r7, #8
 800440e:	4618      	mov	r0, r3
 8004410:	f7fb fede 	bl	80001d0 <strlen>
 8004414:	4603      	mov	r3, r0
 8004416:	461a      	mov	r2, r3
 8004418:	f107 0308 	add.w	r3, r7, #8
 800441c:	4413      	add	r3, r2
 800441e:	4a6d      	ldr	r2, [pc, #436]	; (80045d4 <Start_bme280+0x358>)
 8004420:	6810      	ldr	r0, [r2, #0]
 8004422:	6018      	str	r0, [r3, #0]
	  		sprintf(str_thp_buffer, "%f", BME280_temperature);
 8004424:	f207 435c 	addw	r3, r7, #1116	; 0x45c
 8004428:	6818      	ldr	r0, [r3, #0]
 800442a:	f7fc f88d 	bl	8000548 <__aeabi_f2d>
 800442e:	4602      	mov	r2, r0
 8004430:	460b      	mov	r3, r1
 8004432:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8004436:	4968      	ldr	r1, [pc, #416]	; (80045d8 <Start_bme280+0x35c>)
 8004438:	f014 f836 	bl	80184a8 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 800443c:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8004440:	f107 0308 	add.w	r3, r7, #8
 8004444:	4611      	mov	r1, r2
 8004446:	4618      	mov	r0, r3
 8004448:	f014 f891 	bl	801856e <strcat>
	  		strcat(str_t_h_and_p, " C\n\r");
 800444c:	f107 0308 	add.w	r3, r7, #8
 8004450:	4618      	mov	r0, r3
 8004452:	f7fb febd 	bl	80001d0 <strlen>
 8004456:	4603      	mov	r3, r0
 8004458:	461a      	mov	r2, r3
 800445a:	f107 0308 	add.w	r3, r7, #8
 800445e:	4413      	add	r3, r2
 8004460:	4a5e      	ldr	r2, [pc, #376]	; (80045dc <Start_bme280+0x360>)
 8004462:	6810      	ldr	r0, [r2, #0]
 8004464:	6018      	str	r0, [r3, #0]
 8004466:	7912      	ldrb	r2, [r2, #4]
 8004468:	711a      	strb	r2, [r3, #4]

	  		// Write HUMIDYTY
	  		memset(str_thp_buffer, 0, sizeof(str_thp_buffer));
 800446a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800446e:	220c      	movs	r2, #12
 8004470:	2100      	movs	r1, #0
 8004472:	4618      	mov	r0, r3
 8004474:	f013 fa82 	bl	801797c <memset>
	  		strcat(str_t_h_and_p, "H: ");
 8004478:	f107 0308 	add.w	r3, r7, #8
 800447c:	4618      	mov	r0, r3
 800447e:	f7fb fea7 	bl	80001d0 <strlen>
 8004482:	4603      	mov	r3, r0
 8004484:	461a      	mov	r2, r3
 8004486:	f107 0308 	add.w	r3, r7, #8
 800448a:	4413      	add	r3, r2
 800448c:	4a54      	ldr	r2, [pc, #336]	; (80045e0 <Start_bme280+0x364>)
 800448e:	6810      	ldr	r0, [r2, #0]
 8004490:	6018      	str	r0, [r3, #0]
	  		sprintf(str_thp_buffer, "%f", BME280_humidity);
 8004492:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 8004496:	6818      	ldr	r0, [r3, #0]
 8004498:	f7fc f856 	bl	8000548 <__aeabi_f2d>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80044a4:	494c      	ldr	r1, [pc, #304]	; (80045d8 <Start_bme280+0x35c>)
 80044a6:	f013 ffff 	bl	80184a8 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 80044aa:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80044ae:	f107 0308 	add.w	r3, r7, #8
 80044b2:	4611      	mov	r1, r2
 80044b4:	4618      	mov	r0, r3
 80044b6:	f014 f85a 	bl	801856e <strcat>
	  		strcat(str_t_h_and_p, " C\n\r");
 80044ba:	f107 0308 	add.w	r3, r7, #8
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fb fe86 	bl	80001d0 <strlen>
 80044c4:	4603      	mov	r3, r0
 80044c6:	461a      	mov	r2, r3
 80044c8:	f107 0308 	add.w	r3, r7, #8
 80044cc:	4413      	add	r3, r2
 80044ce:	4a43      	ldr	r2, [pc, #268]	; (80045dc <Start_bme280+0x360>)
 80044d0:	6810      	ldr	r0, [r2, #0]
 80044d2:	6018      	str	r0, [r3, #0]
 80044d4:	7912      	ldrb	r2, [r2, #4]
 80044d6:	711a      	strb	r2, [r3, #4]

	  		// Write PRERASURE
	  		memset(str_thp_buffer, 0, sizeof(str_thp_buffer));
 80044d8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80044dc:	220c      	movs	r2, #12
 80044de:	2100      	movs	r1, #0
 80044e0:	4618      	mov	r0, r3
 80044e2:	f013 fa4b 	bl	801797c <memset>
	  		strcat(str_t_h_and_p, "P: ");
 80044e6:	f107 0308 	add.w	r3, r7, #8
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fb fe70 	bl	80001d0 <strlen>
 80044f0:	4603      	mov	r3, r0
 80044f2:	461a      	mov	r2, r3
 80044f4:	f107 0308 	add.w	r3, r7, #8
 80044f8:	4413      	add	r3, r2
 80044fa:	4a3a      	ldr	r2, [pc, #232]	; (80045e4 <Start_bme280+0x368>)
 80044fc:	6810      	ldr	r0, [r2, #0]
 80044fe:	6018      	str	r0, [r3, #0]
	  		sprintf(str_thp_buffer, "%f", BME280_preasure);
 8004500:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8004504:	6818      	ldr	r0, [r3, #0]
 8004506:	f7fc f81f 	bl	8000548 <__aeabi_f2d>
 800450a:	4602      	mov	r2, r0
 800450c:	460b      	mov	r3, r1
 800450e:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8004512:	4931      	ldr	r1, [pc, #196]	; (80045d8 <Start_bme280+0x35c>)
 8004514:	f013 ffc8 	bl	80184a8 <siprintf>
	  		strcat(str_t_h_and_p, str_thp_buffer);
 8004518:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800451c:	f107 0308 	add.w	r3, r7, #8
 8004520:	4611      	mov	r1, r2
 8004522:	4618      	mov	r0, r3
 8004524:	f014 f823 	bl	801856e <strcat>
	  		strcat(str_t_h_and_p, " mm\n\r\0");
 8004528:	f107 0308 	add.w	r3, r7, #8
 800452c:	4618      	mov	r0, r3
 800452e:	f7fb fe4f 	bl	80001d0 <strlen>
 8004532:	4603      	mov	r3, r0
 8004534:	461a      	mov	r2, r3
 8004536:	f107 0308 	add.w	r3, r7, #8
 800453a:	4413      	add	r3, r2
 800453c:	4a2a      	ldr	r2, [pc, #168]	; (80045e8 <Start_bme280+0x36c>)
 800453e:	6810      	ldr	r0, [r2, #0]
 8004540:	6018      	str	r0, [r3, #0]
 8004542:	8892      	ldrh	r2, [r2, #4]
 8004544:	809a      	strh	r2, [r3, #4]

	  		strcat(msg.Buf, str_t_h_and_p);										//	Write main buffer with data in queue
 8004546:	f107 0208 	add.w	r2, r7, #8
 800454a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800454e:	4611      	mov	r1, r2
 8004550:	4618      	mov	r0, r3
 8004552:	f014 f80c 	bl	801856e <strcat>

	  		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)
 8004556:	4b25      	ldr	r3, [pc, #148]	; (80045ec <Start_bme280+0x370>)
 8004558:	6818      	ldr	r0, [r3, #0]
 800455a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800455e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004562:	2200      	movs	r2, #0
 8004564:	f00e feec 	bl	8013340 <osMessageQueuePut>
 8004568:	e6ed      	b.n	8004346 <Start_bme280+0xca>

	  }
	  else
	  {
		  strcat(str_t_h_and_p, "ERROR!!! BME280 didn't found\n\r");
 800456a:	f107 0308 	add.w	r3, r7, #8
 800456e:	4618      	mov	r0, r3
 8004570:	f7fb fe2e 	bl	80001d0 <strlen>
 8004574:	4603      	mov	r3, r0
 8004576:	461a      	mov	r2, r3
 8004578:	f107 0308 	add.w	r3, r7, #8
 800457c:	4413      	add	r3, r2
 800457e:	4a1c      	ldr	r2, [pc, #112]	; (80045f0 <Start_bme280+0x374>)
 8004580:	461d      	mov	r5, r3
 8004582:	4614      	mov	r4, r2
 8004584:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004586:	6028      	str	r0, [r5, #0]
 8004588:	6069      	str	r1, [r5, #4]
 800458a:	60aa      	str	r2, [r5, #8]
 800458c:	60eb      	str	r3, [r5, #12]
 800458e:	cc07      	ldmia	r4!, {r0, r1, r2}
 8004590:	6128      	str	r0, [r5, #16]
 8004592:	6169      	str	r1, [r5, #20]
 8004594:	61aa      	str	r2, [r5, #24]
 8004596:	8823      	ldrh	r3, [r4, #0]
 8004598:	78a2      	ldrb	r2, [r4, #2]
 800459a:	83ab      	strh	r3, [r5, #28]
 800459c:	4613      	mov	r3, r2
 800459e:	77ab      	strb	r3, [r5, #30]
		  osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)
 80045a0:	4b12      	ldr	r3, [pc, #72]	; (80045ec <Start_bme280+0x370>)
 80045a2:	6818      	ldr	r0, [r3, #0]
 80045a4:	f107 0154 	add.w	r1, r7, #84	; 0x54
 80045a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045ac:	2200      	movs	r2, #0
 80045ae:	f00e fec7 	bl	8013340 <osMessageQueuePut>
  {
 80045b2:	e6c8      	b.n	8004346 <Start_bme280+0xca>
 80045b4:	2000991c 	.word	0x2000991c
 80045b8:	200098dc 	.word	0x200098dc
 80045bc:	08003131 	.word	0x08003131
 80045c0:	080031b9 	.word	0x080031b9
 80045c4:	080031a1 	.word	0x080031a1
 80045c8:	2000a238 	.word	0x2000a238
 80045cc:	2000a240 	.word	0x2000a240
 80045d0:	0801abd8 	.word	0x0801abd8
 80045d4:	0801abec 	.word	0x0801abec
 80045d8:	0801abf0 	.word	0x0801abf0
 80045dc:	0801abf4 	.word	0x0801abf4
 80045e0:	0801abfc 	.word	0x0801abfc
 80045e4:	0801ac00 	.word	0x0801ac00
 80045e8:	0801ac04 	.word	0x0801ac04
 80045ec:	2000ac58 	.word	0x2000ac58
 80045f0:	0801ac0c 	.word	0x0801ac0c

080045f4 <Start_AM2302>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_AM2302 */
void Start_AM2302(void *argument)
{
 80045f4:	b5b0      	push	{r4, r5, r7, lr}
 80045f6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	1d3b      	adds	r3, r7, #4
 80045fe:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN Start_AM2302 */
  /* Infinite loop */
	QUEUE_t msg;												// Make a queue
	memset(msg.Buf, 0, sizeof(msg.Buf));						// Fill in buff '\0'
 8004600:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004604:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004608:	2100      	movs	r1, #0
 800460a:	4618      	mov	r0, r3
 800460c:	f013 f9b6 	bl	801797c <memset>

	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 8004610:	4b48      	ldr	r3, [pc, #288]	; (8004734 <Start_AM2302+0x140>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a47      	ldr	r2, [pc, #284]	; (8004734 <Start_AM2302+0x140>)
 8004616:	f043 0304 	orr.w	r3, r3, #4
 800461a:	6013      	str	r3, [r2, #0]
	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 800461c:	4b45      	ldr	r3, [pc, #276]	; (8004734 <Start_AM2302+0x140>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	4a44      	ldr	r2, [pc, #272]	; (8004734 <Start_AM2302+0x140>)
 8004622:	f023 0302 	bic.w	r3, r3, #2
 8004626:	6053      	str	r3, [r2, #4]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 8004628:	4b42      	ldr	r3, [pc, #264]	; (8004734 <Start_AM2302+0x140>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	4a41      	ldr	r2, [pc, #260]	; (8004734 <Start_AM2302+0x140>)
 800462e:	f043 0302 	orr.w	r3, r3, #2
 8004632:	6093      	str	r3, [r2, #8]
	GPIOC->ODR ^= 0x02; 							// set GPIOC pin 1 on high
 8004634:	4b3f      	ldr	r3, [pc, #252]	; (8004734 <Start_AM2302+0x140>)
 8004636:	695b      	ldr	r3, [r3, #20]
 8004638:	4a3e      	ldr	r2, [pc, #248]	; (8004734 <Start_AM2302+0x140>)
 800463a:	f083 0302 	eor.w	r3, r3, #2
 800463e:	6153      	str	r3, [r2, #20]
	osDelay(2000);									// First init must be 2 seconds delay
 8004640:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004644:	f00e fcaa 	bl	8012f9c <osDelay>

  for(;;)
  {
	  osDelay(3500);			// Measure every 3 seconds
 8004648:	f640 50ac 	movw	r0, #3500	; 0xdac
 800464c:	f00e fca6 	bl	8012f9c <osDelay>
	   * __                ________________________
	   * 	 \			    /				         \
	   * 	  \____________/			              \_
	   */

	  	bool get_data_status = false;
 8004650:	2300      	movs	r3, #0
 8004652:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
	  	int j = 0;   							// Counter bytes
 8004656:	2300      	movs	r3, #0
 8004658:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
	  	int i = 0;								// Counter bits
 800465c:	2300      	movs	r3, #0
 800465e:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
	  	uint8_t data[4] = {0};					// Buffer for incoming data from sensor
 8004662:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004666:	2200      	movs	r2, #0
 8004668:	601a      	str	r2, [r3, #0]
	  	float temper, hum;						// Buffer variables

	  	// Init GPIO like output
	  	GPIOC->MODER |= GPIO_MODER_MODER1_0;            // Output mode GPIOC0
 800466a:	4b32      	ldr	r3, [pc, #200]	; (8004734 <Start_AM2302+0x140>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a31      	ldr	r2, [pc, #196]	; (8004734 <Start_AM2302+0x140>)
 8004670:	f043 0304 	orr.w	r3, r3, #4
 8004674:	6013      	str	r3, [r2, #0]
	  	GPIOC->OTYPER &= ~GPIO_OTYPER_OT_1;             // Push-pull mode
 8004676:	4b2f      	ldr	r3, [pc, #188]	; (8004734 <Start_AM2302+0x140>)
 8004678:	685b      	ldr	r3, [r3, #4]
 800467a:	4a2e      	ldr	r2, [pc, #184]	; (8004734 <Start_AM2302+0x140>)
 800467c:	f023 0302 	bic.w	r3, r3, #2
 8004680:	6053      	str	r3, [r2, #4]
	  	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_1;     // Speed
 8004682:	4b2c      	ldr	r3, [pc, #176]	; (8004734 <Start_AM2302+0x140>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	4a2b      	ldr	r2, [pc, #172]	; (8004734 <Start_AM2302+0x140>)
 8004688:	f043 0302 	orr.w	r3, r3, #2
 800468c:	6093      	str	r3, [r2, #8]

	  	GPIOC->ODR &= ~0x02;		// Low level
 800468e:	4b29      	ldr	r3, [pc, #164]	; (8004734 <Start_AM2302+0x140>)
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	4a28      	ldr	r2, [pc, #160]	; (8004734 <Start_AM2302+0x140>)
 8004694:	f023 0302 	bic.w	r3, r3, #2
 8004698:	6153      	str	r3, [r2, #20]
	  	osDelay(18);
 800469a:	2012      	movs	r0, #18
 800469c:	f00e fc7e 	bl	8012f9c <osDelay>
	  	GPIOC->ODR ^= 0x02;			// High level
 80046a0:	4b24      	ldr	r3, [pc, #144]	; (8004734 <Start_AM2302+0x140>)
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	4a23      	ldr	r2, [pc, #140]	; (8004734 <Start_AM2302+0x140>)
 80046a6:	f083 0302 	eor.w	r3, r3, #2
 80046aa:	6153      	str	r3, [r2, #20]
	  	delay_us(40);
 80046ac:	2028      	movs	r0, #40	; 0x28
 80046ae:	f7fe fdbf 	bl	8003230 <delay_us>

	  	// Make input pin C1
	  	GPIOC->MODER &= ~0x04;  	// Set Pin C1 Input   (MODER GPIOC_1 Must be 00)
 80046b2:	4b20      	ldr	r3, [pc, #128]	; (8004734 <Start_AM2302+0x140>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a1f      	ldr	r2, [pc, #124]	; (8004734 <Start_AM2302+0x140>)
 80046b8:	f023 0304 	bic.w	r3, r3, #4
 80046bc:	6013      	str	r3, [r2, #0]
	  	GPIOC->PUPDR &= ~0x04;		// Set Pin C1 Pull up
 80046be:	4b1d      	ldr	r3, [pc, #116]	; (8004734 <Start_AM2302+0x140>)
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	4a1c      	ldr	r2, [pc, #112]	; (8004734 <Start_AM2302+0x140>)
 80046c4:	f023 0304 	bic.w	r3, r3, #4
 80046c8:	60d3      	str	r3, [r2, #12]

	  	if(GPIOC->IDR & GPIO_IDR_ID1)		// Sensor must pull down
 80046ca:	4b1a      	ldr	r3, [pc, #104]	; (8004734 <Start_AM2302+0x140>)
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <Start_AM2302+0xea>
	  	{
	  		get_data_status = false; 					// Error. Sensor not response
 80046d6:	2300      	movs	r3, #0
 80046d8:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
 80046dc:	e002      	b.n	80046e4 <Start_AM2302+0xf0>
	  	}
	  	else
	  	{
	  		get_data_status = true;
 80046de:	2301      	movs	r3, #1
 80046e0:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
	  	}

	  	delay_us(80);
 80046e4:	2050      	movs	r0, #80	; 0x50
 80046e6:	f7fe fda3 	bl	8003230 <delay_us>

	  	if(!(GPIOC->IDR & GPIO_IDR_ID1))  	// Sensor must pull up
 80046ea:	4b12      	ldr	r3, [pc, #72]	; (8004734 <Start_AM2302+0x140>)
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	f003 0302 	and.w	r3, r3, #2
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d103      	bne.n	80046fe <Start_AM2302+0x10a>
	  	{
	  		get_data_status = false; 					// Error. Sensor not response
 80046f6:	2300      	movs	r3, #0
 80046f8:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
 80046fc:	e002      	b.n	8004704 <Start_AM2302+0x110>
	  	}
	  	else
	  	{
	  		get_data_status = true;
 80046fe:	2301      	movs	r3, #1
 8004700:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
	  	}
	  	delay_us(80);
 8004704:	2050      	movs	r0, #80	; 0x50
 8004706:	f7fe fd93 	bl	8003230 <delay_us>

	  	if(get_data_status == true)
 800470a:	f897 3467 	ldrb.w	r3, [r7, #1127]	; 0x467
 800470e:	2b00      	cmp	r3, #0
 8004710:	d09a      	beq.n	8004648 <Start_AM2302+0x54>
	  	{
	  		for(j = 0; j <5; j++)							// Reading 5 bytes
 8004712:	2300      	movs	r3, #0
 8004714:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 8004718:	e050      	b.n	80047bc <Start_AM2302+0x1c8>
	  		{
	  			data[4-j] = 0;
 800471a:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 800471e:	f1c3 0304 	rsb	r3, r3, #4
 8004722:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004726:	2100      	movs	r1, #0
 8004728:	54d1      	strb	r1, [r2, r3]
	  			for(i = 0; i < 8; i++)						// Reading 8 bits
 800472a:	2300      	movs	r3, #0
 800472c:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 8004730:	e038      	b.n	80047a4 <Start_AM2302+0x1b0>
 8004732:	bf00      	nop
 8004734:	40020800 	.word	0x40020800
	  			{
	  				while(!(GPIOC->IDR & GPIO_IDR_ID1));	// While signal is "0"
 8004738:	bf00      	nop
 800473a:	4b94      	ldr	r3, [pc, #592]	; (800498c <Start_AM2302+0x398>)
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0f9      	beq.n	800473a <Start_AM2302+0x146>
	  				delay_us(30);
 8004746:	201e      	movs	r0, #30
 8004748:	f7fe fd72 	bl	8003230 <delay_us>
	  				if(GPIOC->IDR & GPIO_IDR_ID1)			// If signal is high when wrute "1" in buffer (data[])
 800474c:	4b8f      	ldr	r3, [pc, #572]	; (800498c <Start_AM2302+0x398>)
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b00      	cmp	r3, #0
 8004756:	d019      	beq.n	800478c <Start_AM2302+0x198>
	  				{
	  					data[4-j] |= (1 << (7 - i));        // Shift received bite
 8004758:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 800475c:	f1c3 0304 	rsb	r3, r3, #4
 8004760:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8004764:	5cd3      	ldrb	r3, [r2, r3]
 8004766:	b25a      	sxtb	r2, r3
 8004768:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800476c:	f1c3 0307 	rsb	r3, r3, #7
 8004770:	2101      	movs	r1, #1
 8004772:	fa01 f303 	lsl.w	r3, r1, r3
 8004776:	b25b      	sxtb	r3, r3
 8004778:	4313      	orrs	r3, r2
 800477a:	b25a      	sxtb	r2, r3
 800477c:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 8004780:	f1c3 0304 	rsb	r3, r3, #4
 8004784:	b2d1      	uxtb	r1, r2
 8004786:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800478a:	54d1      	strb	r1, [r2, r3]
	  				}
	  				while(GPIOC->IDR & GPIO_IDR_ID1);		// Wait end of "1" signal
 800478c:	bf00      	nop
 800478e:	4b7f      	ldr	r3, [pc, #508]	; (800498c <Start_AM2302+0x398>)
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0302 	and.w	r3, r3, #2
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1f9      	bne.n	800478e <Start_AM2302+0x19a>
	  			for(i = 0; i < 8; i++)						// Reading 8 bits
 800479a:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 800479e:	3301      	adds	r3, #1
 80047a0:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 80047a4:	f8d7 345c 	ldr.w	r3, [r7, #1116]	; 0x45c
 80047a8:	2b07      	cmp	r3, #7
 80047aa:	ddc5      	ble.n	8004738 <Start_AM2302+0x144>
	  			}
	  			get_data_status = true;										// Data was been written okay
 80047ac:	2301      	movs	r3, #1
 80047ae:	f887 3467 	strb.w	r3, [r7, #1127]	; 0x467
	  		for(j = 0; j <5; j++)							// Reading 5 bytes
 80047b2:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80047b6:	3301      	adds	r3, #1
 80047b8:	f8c7 3460 	str.w	r3, [r7, #1120]	; 0x460
 80047bc:	f8d7 3460 	ldr.w	r3, [r7, #1120]	; 0x460
 80047c0:	2b04      	cmp	r3, #4
 80047c2:	ddaa      	ble.n	800471a <Start_AM2302+0x126>
	  		}

	  		temper = (float)((*(uint16_t*)(data+1)) & 0x3FFF) /10;
 80047c4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80047c8:	3301      	adds	r3, #1
 80047ca:	881b      	ldrh	r3, [r3, #0]
 80047cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80047d0:	ee07 3a90 	vmov	s15, r3
 80047d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80047d8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80047dc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047e0:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80047e4:	edc3 7a00 	vstr	s15, [r3]
	  		if((*(uint16_t*)(data+1)) & 0x8000) temper  *= -1.0;
 80047e8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80047ec:	3301      	adds	r3, #1
 80047ee:	881b      	ldrh	r3, [r3, #0]
 80047f0:	b21b      	sxth	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	da13      	bge.n	800481e <Start_AM2302+0x22a>
 80047f6:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80047fa:	6818      	ldr	r0, [r3, #0]
 80047fc:	f7fb fea4 	bl	8000548 <__aeabi_f2d>
 8004800:	4602      	mov	r2, r0
 8004802:	460b      	mov	r3, r1
 8004804:	4610      	mov	r0, r2
 8004806:	4619      	mov	r1, r3
 8004808:	f7fc f9ee 	bl	8000be8 <__aeabi_d2f>
 800480c:	4603      	mov	r3, r0
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef1 7a67 	vneg.f32	s15, s15
 8004816:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 800481a:	edc3 7a00 	vstr	s15, [r3]
	  		hum = (float)(*(int16_t*)(data+3)) / 10;
 800481e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8004822:	3303      	adds	r3, #3
 8004824:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004828:	ee07 3a90 	vmov	s15, r3
 800482c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004830:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004834:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004838:	f207 4354 	addw	r3, r7, #1108	; 0x454
 800483c:	edc3 7a00 	vstr	s15, [r3]

	  		// Write data in queue
	  		char str_t_and_h[60] = {0};
 8004840:	f107 0308 	add.w	r3, r7, #8
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	3304      	adds	r3, #4
 800484a:	2238      	movs	r2, #56	; 0x38
 800484c:	2100      	movs	r1, #0
 800484e:	4618      	mov	r0, r3
 8004850:	f013 f894 	bl	801797c <memset>
	  		char str_t_and_h_buffer[12] = {0};
 8004854:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]
 800485c:	3304      	adds	r3, #4
 800485e:	2200      	movs	r2, #0
 8004860:	601a      	str	r2, [r3, #0]
 8004862:	605a      	str	r2, [r3, #4]

	  		memset(msg.Buf, 0, sizeof(msg.Buf));								// Fill in buff '\0'
 8004864:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004868:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800486c:	2100      	movs	r1, #0
 800486e:	4618      	mov	r0, r3
 8004870:	f013 f884 	bl	801797c <memset>

	  		// Write T and  H P in str_t_h buffer
	  		// Write TEMPERATURE
	  		strcat(str_t_and_h, "     AM2302: \n\r");
 8004874:	f107 0308 	add.w	r3, r7, #8
 8004878:	4618      	mov	r0, r3
 800487a:	f7fb fca9 	bl	80001d0 <strlen>
 800487e:	4603      	mov	r3, r0
 8004880:	461a      	mov	r2, r3
 8004882:	f107 0308 	add.w	r3, r7, #8
 8004886:	4413      	add	r3, r2
 8004888:	4a41      	ldr	r2, [pc, #260]	; (8004990 <Start_AM2302+0x39c>)
 800488a:	461c      	mov	r4, r3
 800488c:	4615      	mov	r5, r2
 800488e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004890:	6020      	str	r0, [r4, #0]
 8004892:	6061      	str	r1, [r4, #4]
 8004894:	60a2      	str	r2, [r4, #8]
 8004896:	60e3      	str	r3, [r4, #12]
	  		strcat(str_t_and_h, "T: ");
 8004898:	f107 0308 	add.w	r3, r7, #8
 800489c:	4618      	mov	r0, r3
 800489e:	f7fb fc97 	bl	80001d0 <strlen>
 80048a2:	4603      	mov	r3, r0
 80048a4:	461a      	mov	r2, r3
 80048a6:	f107 0308 	add.w	r3, r7, #8
 80048aa:	4413      	add	r3, r2
 80048ac:	4a39      	ldr	r2, [pc, #228]	; (8004994 <Start_AM2302+0x3a0>)
 80048ae:	6810      	ldr	r0, [r2, #0]
 80048b0:	6018      	str	r0, [r3, #0]
	  		sprintf(str_t_and_h_buffer, "%f", temper);
 80048b2:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80048b6:	6818      	ldr	r0, [r3, #0]
 80048b8:	f7fb fe46 	bl	8000548 <__aeabi_f2d>
 80048bc:	4602      	mov	r2, r0
 80048be:	460b      	mov	r3, r1
 80048c0:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80048c4:	4934      	ldr	r1, [pc, #208]	; (8004998 <Start_AM2302+0x3a4>)
 80048c6:	f013 fdef 	bl	80184a8 <siprintf>
	  		strcat(str_t_and_h, str_t_and_h_buffer);
 80048ca:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80048ce:	f107 0308 	add.w	r3, r7, #8
 80048d2:	4611      	mov	r1, r2
 80048d4:	4618      	mov	r0, r3
 80048d6:	f013 fe4a 	bl	801856e <strcat>
	  		strcat(str_t_and_h, " C\n\r");
 80048da:	f107 0308 	add.w	r3, r7, #8
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fb fc76 	bl	80001d0 <strlen>
 80048e4:	4603      	mov	r3, r0
 80048e6:	461a      	mov	r2, r3
 80048e8:	f107 0308 	add.w	r3, r7, #8
 80048ec:	4413      	add	r3, r2
 80048ee:	4a2b      	ldr	r2, [pc, #172]	; (800499c <Start_AM2302+0x3a8>)
 80048f0:	6810      	ldr	r0, [r2, #0]
 80048f2:	6018      	str	r0, [r3, #0]
 80048f4:	7912      	ldrb	r2, [r2, #4]
 80048f6:	711a      	strb	r2, [r3, #4]

	  		// Write HUMIDYTY
	  		memset(str_t_and_h_buffer, 0, sizeof(str_t_and_h_buffer));
 80048f8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80048fc:	220c      	movs	r2, #12
 80048fe:	2100      	movs	r1, #0
 8004900:	4618      	mov	r0, r3
 8004902:	f013 f83b 	bl	801797c <memset>

	  		strcat(str_t_and_h, "H: ");
 8004906:	f107 0308 	add.w	r3, r7, #8
 800490a:	4618      	mov	r0, r3
 800490c:	f7fb fc60 	bl	80001d0 <strlen>
 8004910:	4603      	mov	r3, r0
 8004912:	461a      	mov	r2, r3
 8004914:	f107 0308 	add.w	r3, r7, #8
 8004918:	4413      	add	r3, r2
 800491a:	4a21      	ldr	r2, [pc, #132]	; (80049a0 <Start_AM2302+0x3ac>)
 800491c:	6810      	ldr	r0, [r2, #0]
 800491e:	6018      	str	r0, [r3, #0]
	  		sprintf(str_t_and_h_buffer, "%f", hum);
 8004920:	f207 4354 	addw	r3, r7, #1108	; 0x454
 8004924:	6818      	ldr	r0, [r3, #0]
 8004926:	f7fb fe0f 	bl	8000548 <__aeabi_f2d>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8004932:	4919      	ldr	r1, [pc, #100]	; (8004998 <Start_AM2302+0x3a4>)
 8004934:	f013 fdb8 	bl	80184a8 <siprintf>
	  		strcat(str_t_and_h, str_t_and_h_buffer);
 8004938:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800493c:	f107 0308 	add.w	r3, r7, #8
 8004940:	4611      	mov	r1, r2
 8004942:	4618      	mov	r0, r3
 8004944:	f013 fe13 	bl	801856e <strcat>
	  		strcat(str_t_and_h, " C\n\r\0");
 8004948:	f107 0308 	add.w	r3, r7, #8
 800494c:	4618      	mov	r0, r3
 800494e:	f7fb fc3f 	bl	80001d0 <strlen>
 8004952:	4603      	mov	r3, r0
 8004954:	461a      	mov	r2, r3
 8004956:	f107 0308 	add.w	r3, r7, #8
 800495a:	4413      	add	r3, r2
 800495c:	4a11      	ldr	r2, [pc, #68]	; (80049a4 <Start_AM2302+0x3b0>)
 800495e:	6810      	ldr	r0, [r2, #0]
 8004960:	6018      	str	r0, [r3, #0]
 8004962:	7912      	ldrb	r2, [r2, #4]
 8004964:	711a      	strb	r2, [r3, #4]

	  		strcat(msg.Buf, str_t_and_h);										//	Write main buffer with data in queue
 8004966:	f107 0208 	add.w	r2, r7, #8
 800496a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800496e:	4611      	mov	r1, r2
 8004970:	4618      	mov	r0, r3
 8004972:	f013 fdfc 	bl	801856e <strcat>

	  		osMessageQueuePut(UARTQueueHandle, &msg, 0, osWaitForever);			// Write data on queue (In will print on StartUART_Task task)
 8004976:	4b0c      	ldr	r3, [pc, #48]	; (80049a8 <Start_AM2302+0x3b4>)
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	f107 0154 	add.w	r1, r7, #84	; 0x54
 800497e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004982:	2200      	movs	r2, #0
 8004984:	f00e fcdc 	bl	8013340 <osMessageQueuePut>
  {
 8004988:	e65e      	b.n	8004648 <Start_AM2302+0x54>
 800498a:	bf00      	nop
 800498c:	40020800 	.word	0x40020800
 8004990:	0801ac2c 	.word	0x0801ac2c
 8004994:	0801abec 	.word	0x0801abec
 8004998:	0801abf0 	.word	0x0801abf0
 800499c:	0801abf4 	.word	0x0801abf4
 80049a0:	0801abfc 	.word	0x0801abfc
 80049a4:	0801ac3c 	.word	0x0801ac3c
 80049a8:	2000ac58 	.word	0x2000ac58

080049ac <Start_SD_CARD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_SD_CARD */
void Start_SD_CARD(void *argument)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_SD_CARD */
  /* Infinite loop */

	Mount_SD("/");
 80049b4:	4823      	ldr	r0, [pc, #140]	; (8004a44 <Start_SD_CARD+0x98>)
 80049b6:	f7fd fd07 	bl	80023c8 <Mount_SD>

	Create_File("test_data_1.txt");
 80049ba:	4823      	ldr	r0, [pc, #140]	; (8004a48 <Start_SD_CARD+0x9c>)
 80049bc:	f7fd fd4a 	bl	8002454 <Create_File>
	Update_File("test_data_1.txt","\n\rStart recording\r\n");	// Add data to the end of file
 80049c0:	4922      	ldr	r1, [pc, #136]	; (8004a4c <Start_SD_CARD+0xa0>)
 80049c2:	4821      	ldr	r0, [pc, #132]	; (8004a48 <Start_SD_CARD+0x9c>)
 80049c4:	f7fd fddc 	bl	8002580 <Update_File>

	// Create folders
	Create_Dir("test_folder_1");
 80049c8:	4821      	ldr	r0, [pc, #132]	; (8004a50 <Start_SD_CARD+0xa4>)
 80049ca:	f7fd fe99 	bl	8002700 <Create_Dir>
	Create_Dir("test_folder_2");
 80049ce:	4821      	ldr	r0, [pc, #132]	; (8004a54 <Start_SD_CARD+0xa8>)
 80049d0:	f7fd fe96 	bl	8002700 <Create_Dir>
	Create_Dir("test_folder_3");
 80049d4:	4820      	ldr	r0, [pc, #128]	; (8004a58 <Start_SD_CARD+0xac>)
 80049d6:	f7fd fe93 	bl	8002700 <Create_Dir>

	Unmount_SD("/");
 80049da:	481a      	ldr	r0, [pc, #104]	; (8004a44 <Start_SD_CARD+0x98>)
 80049dc:	f7fd fd18 	bl	8002410 <Unmount_SD>
	static int i = 0;											// Test data for write

  for(;;)
  {
	  // Log data ewery one second
	  osDelay(1000);
 80049e0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80049e4:	f00e fada 	bl	8012f9c <osDelay>
	  HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);			// LED ON
 80049e8:	2201      	movs	r2, #1
 80049ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80049ee:	481b      	ldr	r0, [pc, #108]	; (8004a5c <Start_SD_CARD+0xb0>)
 80049f0:	f002 fbfe 	bl	80071f0 <HAL_GPIO_WritePin>

	  Mount_SD("/");
 80049f4:	4813      	ldr	r0, [pc, #76]	; (8004a44 <Start_SD_CARD+0x98>)
 80049f6:	f7fd fce7 	bl	80023c8 <Mount_SD>

	  char data[10] = {0};
 80049fa:	2300      	movs	r3, #0
 80049fc:	60fb      	str	r3, [r7, #12]
 80049fe:	f107 0310 	add.w	r3, r7, #16
 8004a02:	2200      	movs	r2, #0
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	809a      	strh	r2, [r3, #4]
	  sprintf(data, "%d\n", i);
 8004a08:	4b15      	ldr	r3, [pc, #84]	; (8004a60 <Start_SD_CARD+0xb4>)
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	f107 030c 	add.w	r3, r7, #12
 8004a10:	4914      	ldr	r1, [pc, #80]	; (8004a64 <Start_SD_CARD+0xb8>)
 8004a12:	4618      	mov	r0, r3
 8004a14:	f013 fd48 	bl	80184a8 <siprintf>
	  Update_File("test_data_1.txt", data);						// Add data to the end of file
 8004a18:	f107 030c 	add.w	r3, r7, #12
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	480a      	ldr	r0, [pc, #40]	; (8004a48 <Start_SD_CARD+0x9c>)
 8004a20:	f7fd fdae 	bl	8002580 <Update_File>
	  i++;
 8004a24:	4b0e      	ldr	r3, [pc, #56]	; (8004a60 <Start_SD_CARD+0xb4>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	4a0d      	ldr	r2, [pc, #52]	; (8004a60 <Start_SD_CARD+0xb4>)
 8004a2c:	6013      	str	r3, [r2, #0]

	  Unmount_SD("/");
 8004a2e:	4805      	ldr	r0, [pc, #20]	; (8004a44 <Start_SD_CARD+0x98>)
 8004a30:	f7fd fcee 	bl	8002410 <Unmount_SD>

	  HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_RESET);		// LED OFF
 8004a34:	2200      	movs	r2, #0
 8004a36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004a3a:	4808      	ldr	r0, [pc, #32]	; (8004a5c <Start_SD_CARD+0xb0>)
 8004a3c:	f002 fbd8 	bl	80071f0 <HAL_GPIO_WritePin>
  {
 8004a40:	e7ce      	b.n	80049e0 <Start_SD_CARD+0x34>
 8004a42:	bf00      	nop
 8004a44:	0801ac44 	.word	0x0801ac44
 8004a48:	0801ac48 	.word	0x0801ac48
 8004a4c:	0801ac58 	.word	0x0801ac58
 8004a50:	0801ac6c 	.word	0x0801ac6c
 8004a54:	0801ac7c 	.word	0x0801ac7c
 8004a58:	0801ac8c 	.word	0x0801ac8c
 8004a5c:	40020c00 	.word	0x40020c00
 8004a60:	200007ac 	.word	0x200007ac
 8004a64:	0801ac9c 	.word	0x0801ac9c

08004a68 <Start_LCD>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LCD */
void Start_LCD(void *argument)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b0aa      	sub	sp, #168	; 0xa8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LCD */
  /* Infinite loop */
	LCDQUEUE msg;												// Make QUEUE

	// Init LCD
	TFT9341_ini(240, 320);
 8004a70:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004a74:	20f0      	movs	r0, #240	; 0xf0
 8004a76:	f000 ff6b 	bl	8005950 <TFT9341_ini>
	TFT9341_SetRotation(3);
 8004a7a:	2003      	movs	r0, #3
 8004a7c:	f001 faba 	bl	8005ff4 <TFT9341_SetRotation>
	TFT9341_SetTextColor(TFT9341_WHITE);  // ДОМАЛЮВАТИ СХЕКМУ ПІДКЛЮЧЕННЯ  !!!  І ОПИС ПРОЕКТУ
 8004a80:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8004a84:	f001 f9c4 	bl	8005e10 <TFT9341_SetTextColor>
	TFT9341_SetBackColor(TFT9341_BLUE);
 8004a88:	201f      	movs	r0, #31
 8004a8a:	f001 f9d1 	bl	8005e30 <TFT9341_SetBackColor>
	TFT9341_FillScreen(TFT9341_BLUE);
 8004a8e:	201f      	movs	r0, #31
 8004a90:	f001 f92c 	bl	8005cec <TFT9341_FillScreen>

	for(;;)
	{
		char str_buf[60] = {0};
 8004a94:	2300      	movs	r3, #0
 8004a96:	60bb      	str	r3, [r7, #8]
 8004a98:	f107 030c 	add.w	r3, r7, #12
 8004a9c:	2238      	movs	r2, #56	; 0x38
 8004a9e:	2100      	movs	r1, #0
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	f012 ff6b 	bl	801797c <memset>
		// osMessageQueueGet waiting data on a queue (If data are in queue so print it)
		osMessageQueueGet(LCDQueueHandle, &msg, 0, osWaitForever);			// Write for data on queue
 8004aa6:	4b11      	ldr	r3, [pc, #68]	; (8004aec <Start_LCD+0x84>)
 8004aa8:	6818      	ldr	r0, [r3, #0]
 8004aaa:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8004aae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	f00e fca4 	bl	8013400 <osMessageQueueGet>
		strcat(str_buf, msg.buff);											// Copy data in buffer for print
 8004ab8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 8004abc:	f107 0308 	add.w	r3, r7, #8
 8004ac0:	4611      	mov	r1, r2
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f013 fd53 	bl	801856e <strcat>
		TFT9341_String(30,30,str_buf);										// Print data on LCD
 8004ac8:	f107 0308 	add.w	r3, r7, #8
 8004acc:	461a      	mov	r2, r3
 8004ace:	211e      	movs	r1, #30
 8004ad0:	201e      	movs	r0, #30
 8004ad2:	f001 fa6b 	bl	8005fac <TFT9341_String>
		memset(str_buf, 0, sizeof(str_buf));
 8004ad6:	f107 0308 	add.w	r3, r7, #8
 8004ada:	223c      	movs	r2, #60	; 0x3c
 8004adc:	2100      	movs	r1, #0
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f012 ff4c 	bl	801797c <memset>

		osDelay(200);
 8004ae4:	20c8      	movs	r0, #200	; 0xc8
 8004ae6:	f00e fa59 	bl	8012f9c <osDelay>
	{
 8004aea:	e7d3      	b.n	8004a94 <Start_LCD+0x2c>
 8004aec:	2000ed38 	.word	0x2000ed38

08004af0 <Start_LCD_touchscreen>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Start_LCD_touchscreen */
void Start_LCD_touchscreen(void *argument)
{
 8004af0:	b5b0      	push	{r4, r5, r7, lr}
 8004af2:	b0b2      	sub	sp, #200	; 0xc8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Start_LCD_touchscreen */
  /* Infinite loop */
	LCDQUEUE msg;												// Make QUEUE
	memset(msg.buff, 0, sizeof(msg.buff));						// Fill in buff '\0'
 8004af8:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004afc:	2264      	movs	r2, #100	; 0x64
 8004afe:	2100      	movs	r1, #0
 8004b00:	4618      	mov	r0, r3
 8004b02:	f012 ff3b 	bl	801797c <memset>
	char buffer[50] = {0};
 8004b06:	2300      	movs	r3, #0
 8004b08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004b0e:	222e      	movs	r2, #46	; 0x2e
 8004b10:	2100      	movs	r1, #0
 8004b12:	4618      	mov	r0, r3
 8004b14:	f012 ff32 	bl	801797c <memset>

	for(;;)
  	 {
	  memset(msg.buff, 0, sizeof(msg.buff));						// Fill in buff '\0'
 8004b18:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004b1c:	2264      	movs	r2, #100	; 0x64
 8004b1e:	2100      	movs	r1, #0
 8004b20:	4618      	mov	r0, r3
 8004b22:	f012 ff2b 	bl	801797c <memset>
	  //СЕНСОР ЕКРАНУ
	  if(TP_Touchpad_Pressed() == TOUCHPAD_PRESSED)
 8004b26:	f000 fe7d 	bl	8005824 <TP_Touchpad_Pressed>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	f040 8091 	bne.w	8004c54 <Start_LCD_touchscreen+0x164>
	  {
		  strcat(buffer, "PRESED ");
 8004b32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b36:	4618      	mov	r0, r3
 8004b38:	f7fb fb4a 	bl	80001d0 <strlen>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b44:	4413      	add	r3, r2
 8004b46:	495e      	ldr	r1, [pc, #376]	; (8004cc0 <Start_LCD_touchscreen+0x1d0>)
 8004b48:	461a      	mov	r2, r3
 8004b4a:	460b      	mov	r3, r1
 8004b4c:	cb03      	ldmia	r3!, {r0, r1}
 8004b4e:	6010      	str	r0, [r2, #0]
 8004b50:	6051      	str	r1, [r2, #4]

		  uint16_t x_and_y[2] = {0};
 8004b52:	2300      	movs	r3, #0
 8004b54:	62bb      	str	r3, [r7, #40]	; 0x28
		  uint8_t status_ts = TP_Read_Coordinates(x_and_y);
 8004b56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fd8c 	bl	8005678 <TP_Read_Coordinates>
 8004b60:	4603      	mov	r3, r0
 8004b62:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
		  if(status_ts == TOUCHPAD_DATA_OK)
 8004b66:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	f040 808c 	bne.w	8004c88 <Start_LCD_touchscreen+0x198>
		  {
			  // Convert coordinate from uint16_t format in string format
			  // And save it in main buffer
			  char buff_x_coordinates[6] = {0};
 8004b70:	2300      	movs	r3, #0
 8004b72:	623b      	str	r3, [r7, #32]
 8004b74:	2300      	movs	r3, #0
 8004b76:	84bb      	strh	r3, [r7, #36]	; 0x24
			  char buff_y_coordinates[6] = {0};
 8004b78:	2300      	movs	r3, #0
 8004b7a:	61bb      	str	r3, [r7, #24]
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	83bb      	strh	r3, [r7, #28]
			  char buff_coordinates[15] = {0};
 8004b80:	2300      	movs	r3, #0
 8004b82:	60bb      	str	r3, [r7, #8]
 8004b84:	f107 030c 	add.w	r3, r7, #12
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	605a      	str	r2, [r3, #4]
 8004b8e:	f8c3 2007 	str.w	r2, [r3, #7]

			  strcat(buff_x_coordinates, "x: ");
 8004b92:	f107 0320 	add.w	r3, r7, #32
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fb fb1a 	bl	80001d0 <strlen>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f107 0320 	add.w	r3, r7, #32
 8004ba4:	4413      	add	r3, r2
 8004ba6:	4a47      	ldr	r2, [pc, #284]	; (8004cc4 <Start_LCD_touchscreen+0x1d4>)
 8004ba8:	6810      	ldr	r0, [r2, #0]
 8004baa:	6018      	str	r0, [r3, #0]
			  itoa(x_and_y[0], buff_x_coordinates, 10);
 8004bac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f107 0320 	add.w	r3, r7, #32
 8004bb4:	220a      	movs	r2, #10
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	f012 febc 	bl	8017934 <itoa>
			  strcat(buff_x_coordinates, " ");
 8004bbc:	f107 0320 	add.w	r3, r7, #32
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fb fb05 	bl	80001d0 <strlen>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	461a      	mov	r2, r3
 8004bca:	f107 0320 	add.w	r3, r7, #32
 8004bce:	4413      	add	r3, r2
 8004bd0:	493d      	ldr	r1, [pc, #244]	; (8004cc8 <Start_LCD_touchscreen+0x1d8>)
 8004bd2:	461a      	mov	r2, r3
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	881b      	ldrh	r3, [r3, #0]
 8004bd8:	8013      	strh	r3, [r2, #0]

			  strcat(buff_y_coordinates, "y: ");
 8004bda:	f107 0318 	add.w	r3, r7, #24
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7fb faf6 	bl	80001d0 <strlen>
 8004be4:	4603      	mov	r3, r0
 8004be6:	461a      	mov	r2, r3
 8004be8:	f107 0318 	add.w	r3, r7, #24
 8004bec:	4413      	add	r3, r2
 8004bee:	4a37      	ldr	r2, [pc, #220]	; (8004ccc <Start_LCD_touchscreen+0x1dc>)
 8004bf0:	6810      	ldr	r0, [r2, #0]
 8004bf2:	6018      	str	r0, [r3, #0]
			  itoa(x_and_y[1], buff_y_coordinates, 10);
 8004bf4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f107 0318 	add.w	r3, r7, #24
 8004bfc:	220a      	movs	r2, #10
 8004bfe:	4619      	mov	r1, r3
 8004c00:	f012 fe98 	bl	8017934 <itoa>
			  strcat(buff_y_coordinates, " ");
 8004c04:	f107 0318 	add.w	r3, r7, #24
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fb fae1 	bl	80001d0 <strlen>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	461a      	mov	r2, r3
 8004c12:	f107 0318 	add.w	r3, r7, #24
 8004c16:	4413      	add	r3, r2
 8004c18:	492b      	ldr	r1, [pc, #172]	; (8004cc8 <Start_LCD_touchscreen+0x1d8>)
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	460b      	mov	r3, r1
 8004c1e:	881b      	ldrh	r3, [r3, #0]
 8004c20:	8013      	strh	r3, [r2, #0]

			  strcat(buff_coordinates, buff_x_coordinates);
 8004c22:	f107 0220 	add.w	r2, r7, #32
 8004c26:	f107 0308 	add.w	r3, r7, #8
 8004c2a:	4611      	mov	r1, r2
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f013 fc9e 	bl	801856e <strcat>
			  strcat(buff_coordinates, buff_y_coordinates);
 8004c32:	f107 0218 	add.w	r2, r7, #24
 8004c36:	f107 0308 	add.w	r3, r7, #8
 8004c3a:	4611      	mov	r1, r2
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f013 fc96 	bl	801856e <strcat>
			  strcat(buffer, buff_coordinates);
 8004c42:	f107 0208 	add.w	r2, r7, #8
 8004c46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f013 fc8e 	bl	801856e <strcat>
 8004c52:	e019      	b.n	8004c88 <Start_LCD_touchscreen+0x198>
		  }
	  }
	  else
	  {
		  strcat(buffer, "NO PRESS                  ");
 8004c54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fb fab9 	bl	80001d0 <strlen>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	461a      	mov	r2, r3
 8004c62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c66:	4413      	add	r3, r2
 8004c68:	4a19      	ldr	r2, [pc, #100]	; (8004cd0 <Start_LCD_touchscreen+0x1e0>)
 8004c6a:	461d      	mov	r5, r3
 8004c6c:	4614      	mov	r4, r2
 8004c6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004c70:	6028      	str	r0, [r5, #0]
 8004c72:	6069      	str	r1, [r5, #4]
 8004c74:	60aa      	str	r2, [r5, #8]
 8004c76:	60eb      	str	r3, [r5, #12]
 8004c78:	cc03      	ldmia	r4!, {r0, r1}
 8004c7a:	6128      	str	r0, [r5, #16]
 8004c7c:	6169      	str	r1, [r5, #20]
 8004c7e:	8823      	ldrh	r3, [r4, #0]
 8004c80:	78a2      	ldrb	r2, [r4, #2]
 8004c82:	832b      	strh	r3, [r5, #24]
 8004c84:	4613      	mov	r3, r2
 8004c86:	76ab      	strb	r3, [r5, #26]
	  }

	  strcat(msg.buff, buffer);
 8004c88:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8004c8c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8004c90:	4611      	mov	r1, r2
 8004c92:	4618      	mov	r0, r3
 8004c94:	f013 fc6b 	bl	801856e <strcat>
	  osMessageQueuePut(LCDQueueHandle, &msg, 0, osWaitForever);  	// Write data on queue (In will print on StartUART_Task task)
 8004c98:	4b0e      	ldr	r3, [pc, #56]	; (8004cd4 <Start_LCD_touchscreen+0x1e4>)
 8004c9a:	6818      	ldr	r0, [r3, #0]
 8004c9c:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8004ca0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f00e fb4b 	bl	8013340 <osMessageQueuePut>
	  memset(buffer, 0, sizeof(buffer));
 8004caa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004cae:	2232      	movs	r2, #50	; 0x32
 8004cb0:	2100      	movs	r1, #0
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f012 fe62 	bl	801797c <memset>

	  osDelay(200);
 8004cb8:	20c8      	movs	r0, #200	; 0xc8
 8004cba:	f00e f96f 	bl	8012f9c <osDelay>
	  memset(msg.buff, 0, sizeof(msg.buff));						// Fill in buff '\0'
 8004cbe:	e72b      	b.n	8004b18 <Start_LCD_touchscreen+0x28>
 8004cc0:	0801aca0 	.word	0x0801aca0
 8004cc4:	0801aca8 	.word	0x0801aca8
 8004cc8:	0801acac 	.word	0x0801acac
 8004ccc:	0801acb0 	.word	0x0801acb0
 8004cd0:	0801acb4 	.word	0x0801acb4
 8004cd4:	2000ed38 	.word	0x2000ed38

08004cd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	// Handler for generate us dalay 			( FOR AM2302 )
	if(htim->Instance == TIM10) 				//check if the interrupt comes from TIM10
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a20      	ldr	r2, [pc, #128]	; (8004d68 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d10c      	bne.n	8004d04 <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		if(tim_val > 0)
 8004cea:	4b20      	ldr	r3, [pc, #128]	; (8004d6c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d005      	beq.n	8004cfe <HAL_TIM_PeriodElapsedCallback+0x26>
		{
			tim_val = tim_val - 1;
 8004cf2:	4b1e      	ldr	r3, [pc, #120]	; (8004d6c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	4a1c      	ldr	r2, [pc, #112]	; (8004d6c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	e002      	b.n	8004d04 <HAL_TIM_PeriodElapsedCallback+0x2c>
		}
		else									// For avoid overflow variable
		{
			tim_val = 0;
 8004cfe:	4b1b      	ldr	r3, [pc, #108]	; (8004d6c <HAL_TIM_PeriodElapsedCallback+0x94>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]
	{
		//HAL_GPIO_TogglePin(GPIOD, LD4_Pin);		// Green LED
	}

	// Handler for count how many time works any tasks
	if(htim->Instance == TIM3)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4a19      	ldr	r2, [pc, #100]	; (8004d70 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d104      	bne.n	8004d18 <HAL_TIM_PeriodElapsedCallback+0x40>
	{
		ulHighFreqebcyTimerTicks++;					// Update time tasks counter
 8004d0e:	4b19      	ldr	r3, [pc, #100]	; (8004d74 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	3301      	adds	r3, #1
 8004d14:	4a17      	ldr	r2, [pc, #92]	; (8004d74 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8004d16:	6013      	str	r3, [r2, #0]
	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a16      	ldr	r2, [pc, #88]	; (8004d78 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d101      	bne.n	8004d26 <HAL_TIM_PeriodElapsedCallback+0x4e>
    HAL_IncTick();
 8004d22:	f001 f9fd 	bl	8006120 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

	if (htim->Instance == TIM14)		// For SD works (use in fatfs_sd.c file)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4a13      	ldr	r2, [pc, #76]	; (8004d78 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d117      	bne.n	8004d60 <HAL_TIM_PeriodElapsedCallback+0x88>
	{
		if(Timer1 > 0)
 8004d30:	4b12      	ldr	r3, [pc, #72]	; (8004d7c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d006      	beq.n	8004d48 <HAL_TIM_PeriodElapsedCallback+0x70>
		    Timer1--;
 8004d3a:	4b10      	ldr	r3, [pc, #64]	; (8004d7c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	3b01      	subs	r3, #1
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	4b0d      	ldr	r3, [pc, #52]	; (8004d7c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8004d46:	701a      	strb	r2, [r3, #0]

		  if(Timer2 > 0)
 8004d48:	4b0d      	ldr	r3, [pc, #52]	; (8004d80 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d006      	beq.n	8004d60 <HAL_TIM_PeriodElapsedCallback+0x88>
		    Timer2--;
 8004d52:	4b0b      	ldr	r3, [pc, #44]	; (8004d80 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004d54:	781b      	ldrb	r3, [r3, #0]
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	b2da      	uxtb	r2, r3
 8004d5c:	4b08      	ldr	r3, [pc, #32]	; (8004d80 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004d5e:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END Callback 1 */
}
 8004d60:	bf00      	nop
 8004d62:	3708      	adds	r7, #8
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40014400 	.word	0x40014400
 8004d6c:	200007a4 	.word	0x200007a4
 8004d70:	40000400 	.word	0x40000400
 8004d74:	2000f8fc 	.word	0x2000f8fc
 8004d78:	40002000 	.word	0x40002000
 8004d7c:	200104ac 	.word	0x200104ac
 8004d80:	2000f914 	.word	0x2000f914

08004d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d88:	b672      	cpsid	i
}
 8004d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004d8c:	e7fe      	b.n	8004d8c <Error_Handler+0x8>
	...

08004d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b082      	sub	sp, #8
 8004d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d96:	2300      	movs	r3, #0
 8004d98:	607b      	str	r3, [r7, #4]
 8004d9a:	4b12      	ldr	r3, [pc, #72]	; (8004de4 <HAL_MspInit+0x54>)
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9e:	4a11      	ldr	r2, [pc, #68]	; (8004de4 <HAL_MspInit+0x54>)
 8004da0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004da4:	6453      	str	r3, [r2, #68]	; 0x44
 8004da6:	4b0f      	ldr	r3, [pc, #60]	; (8004de4 <HAL_MspInit+0x54>)
 8004da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dae:	607b      	str	r3, [r7, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004db2:	2300      	movs	r3, #0
 8004db4:	603b      	str	r3, [r7, #0]
 8004db6:	4b0b      	ldr	r3, [pc, #44]	; (8004de4 <HAL_MspInit+0x54>)
 8004db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dba:	4a0a      	ldr	r2, [pc, #40]	; (8004de4 <HAL_MspInit+0x54>)
 8004dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dc0:	6413      	str	r3, [r2, #64]	; 0x40
 8004dc2:	4b08      	ldr	r3, [pc, #32]	; (8004de4 <HAL_MspInit+0x54>)
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dca:	603b      	str	r3, [r7, #0]
 8004dcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004dce:	2200      	movs	r2, #0
 8004dd0:	210f      	movs	r1, #15
 8004dd2:	f06f 0001 	mvn.w	r0, #1
 8004dd6:	f001 fac3 	bl	8006360 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004dda:	bf00      	nop
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	40023800 	.word	0x40023800

08004de8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08a      	sub	sp, #40	; 0x28
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004df0:	f107 0314 	add.w	r3, r7, #20
 8004df4:	2200      	movs	r2, #0
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	605a      	str	r2, [r3, #4]
 8004dfa:	609a      	str	r2, [r3, #8]
 8004dfc:	60da      	str	r2, [r3, #12]
 8004dfe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a29      	ldr	r2, [pc, #164]	; (8004eac <HAL_I2C_MspInit+0xc4>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d14b      	bne.n	8004ea2 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	613b      	str	r3, [r7, #16]
 8004e0e:	4b28      	ldr	r3, [pc, #160]	; (8004eb0 <HAL_I2C_MspInit+0xc8>)
 8004e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e12:	4a27      	ldr	r2, [pc, #156]	; (8004eb0 <HAL_I2C_MspInit+0xc8>)
 8004e14:	f043 0304 	orr.w	r3, r3, #4
 8004e18:	6313      	str	r3, [r2, #48]	; 0x30
 8004e1a:	4b25      	ldr	r3, [pc, #148]	; (8004eb0 <HAL_I2C_MspInit+0xc8>)
 8004e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1e:	f003 0304 	and.w	r3, r3, #4
 8004e22:	613b      	str	r3, [r7, #16]
 8004e24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e26:	2300      	movs	r3, #0
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	4b21      	ldr	r3, [pc, #132]	; (8004eb0 <HAL_I2C_MspInit+0xc8>)
 8004e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e2e:	4a20      	ldr	r2, [pc, #128]	; (8004eb0 <HAL_I2C_MspInit+0xc8>)
 8004e30:	f043 0301 	orr.w	r3, r3, #1
 8004e34:	6313      	str	r3, [r2, #48]	; 0x30
 8004e36:	4b1e      	ldr	r3, [pc, #120]	; (8004eb0 <HAL_I2C_MspInit+0xc8>)
 8004e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	60fb      	str	r3, [r7, #12]
 8004e40:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004e42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e48:	2312      	movs	r3, #18
 8004e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e50:	2303      	movs	r3, #3
 8004e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004e54:	2304      	movs	r3, #4
 8004e56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e58:	f107 0314 	add.w	r3, r7, #20
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4815      	ldr	r0, [pc, #84]	; (8004eb4 <HAL_I2C_MspInit+0xcc>)
 8004e60:	f001 ff16 	bl	8006c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e6a:	2312      	movs	r3, #18
 8004e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e72:	2303      	movs	r3, #3
 8004e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004e76:	2304      	movs	r3, #4
 8004e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e7a:	f107 0314 	add.w	r3, r7, #20
 8004e7e:	4619      	mov	r1, r3
 8004e80:	480d      	ldr	r0, [pc, #52]	; (8004eb8 <HAL_I2C_MspInit+0xd0>)
 8004e82:	f001 ff05 	bl	8006c90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004e86:	2300      	movs	r3, #0
 8004e88:	60bb      	str	r3, [r7, #8]
 8004e8a:	4b09      	ldr	r3, [pc, #36]	; (8004eb0 <HAL_I2C_MspInit+0xc8>)
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	4a08      	ldr	r2, [pc, #32]	; (8004eb0 <HAL_I2C_MspInit+0xc8>)
 8004e90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004e94:	6413      	str	r3, [r2, #64]	; 0x40
 8004e96:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <HAL_I2C_MspInit+0xc8>)
 8004e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004e9e:	60bb      	str	r3, [r7, #8]
 8004ea0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004ea2:	bf00      	nop
 8004ea4:	3728      	adds	r7, #40	; 0x28
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	40005c00 	.word	0x40005c00
 8004eb0:	40023800 	.word	0x40023800
 8004eb4:	40020800 	.word	0x40020800
 8004eb8:	40020000 	.word	0x40020000

08004ebc <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b085      	sub	sp, #20
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a0b      	ldr	r2, [pc, #44]	; (8004ef8 <HAL_RNG_MspInit+0x3c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d10d      	bne.n	8004eea <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]
 8004ed2:	4b0a      	ldr	r3, [pc, #40]	; (8004efc <HAL_RNG_MspInit+0x40>)
 8004ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ed6:	4a09      	ldr	r2, [pc, #36]	; (8004efc <HAL_RNG_MspInit+0x40>)
 8004ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004edc:	6353      	str	r3, [r2, #52]	; 0x34
 8004ede:	4b07      	ldr	r3, [pc, #28]	; (8004efc <HAL_RNG_MspInit+0x40>)
 8004ee0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8004eea:	bf00      	nop
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	50060800 	.word	0x50060800
 8004efc:	40023800 	.word	0x40023800

08004f00 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b086      	sub	sp, #24
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004f08:	f107 0308 	add.w	r3, r7, #8
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	601a      	str	r2, [r3, #0]
 8004f10:	605a      	str	r2, [r3, #4]
 8004f12:	609a      	str	r2, [r3, #8]
 8004f14:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a0c      	ldr	r2, [pc, #48]	; (8004f4c <HAL_RTC_MspInit+0x4c>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d111      	bne.n	8004f44 <HAL_RTC_MspInit+0x44>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004f20:	2302      	movs	r3, #2
 8004f22:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8004f24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f28:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f2a:	f107 0308 	add.w	r3, r7, #8
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f005 fa30 	bl	800a394 <HAL_RCCEx_PeriphCLKConfig>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d001      	beq.n	8004f3e <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8004f3a:	f7ff ff23 	bl	8004d84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004f3e:	4b04      	ldr	r3, [pc, #16]	; (8004f50 <HAL_RTC_MspInit+0x50>)
 8004f40:	2201      	movs	r2, #1
 8004f42:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004f44:	bf00      	nop
 8004f46:	3718      	adds	r7, #24
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd80      	pop	{r7, pc}
 8004f4c:	40002800 	.word	0x40002800
 8004f50:	42470e3c 	.word	0x42470e3c

08004f54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b08c      	sub	sp, #48	; 0x30
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f5c:	f107 031c 	add.w	r3, r7, #28
 8004f60:	2200      	movs	r2, #0
 8004f62:	601a      	str	r2, [r3, #0]
 8004f64:	605a      	str	r2, [r3, #4]
 8004f66:	609a      	str	r2, [r3, #8]
 8004f68:	60da      	str	r2, [r3, #12]
 8004f6a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a5d      	ldr	r2, [pc, #372]	; (80050e8 <HAL_SPI_MspInit+0x194>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d12c      	bne.n	8004fd0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004f76:	2300      	movs	r3, #0
 8004f78:	61bb      	str	r3, [r7, #24]
 8004f7a:	4b5c      	ldr	r3, [pc, #368]	; (80050ec <HAL_SPI_MspInit+0x198>)
 8004f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7e:	4a5b      	ldr	r2, [pc, #364]	; (80050ec <HAL_SPI_MspInit+0x198>)
 8004f80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004f84:	6453      	str	r3, [r2, #68]	; 0x44
 8004f86:	4b59      	ldr	r3, [pc, #356]	; (80050ec <HAL_SPI_MspInit+0x198>)
 8004f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f8e:	61bb      	str	r3, [r7, #24]
 8004f90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f92:	2300      	movs	r3, #0
 8004f94:	617b      	str	r3, [r7, #20]
 8004f96:	4b55      	ldr	r3, [pc, #340]	; (80050ec <HAL_SPI_MspInit+0x198>)
 8004f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9a:	4a54      	ldr	r2, [pc, #336]	; (80050ec <HAL_SPI_MspInit+0x198>)
 8004f9c:	f043 0301 	orr.w	r3, r3, #1
 8004fa0:	6313      	str	r3, [r2, #48]	; 0x30
 8004fa2:	4b52      	ldr	r3, [pc, #328]	; (80050ec <HAL_SPI_MspInit+0x198>)
 8004fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fa6:	f003 0301 	and.w	r3, r3, #1
 8004faa:	617b      	str	r3, [r7, #20]
 8004fac:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8004fae:	23e0      	movs	r3, #224	; 0xe0
 8004fb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004fba:	2302      	movs	r3, #2
 8004fbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004fbe:	2305      	movs	r3, #5
 8004fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fc2:	f107 031c 	add.w	r3, r7, #28
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	4849      	ldr	r0, [pc, #292]	; (80050f0 <HAL_SPI_MspInit+0x19c>)
 8004fca:	f001 fe61 	bl	8006c90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004fce:	e086      	b.n	80050de <HAL_SPI_MspInit+0x18a>
  else if(hspi->Instance==SPI2)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a47      	ldr	r2, [pc, #284]	; (80050f4 <HAL_SPI_MspInit+0x1a0>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	f040 8081 	bne.w	80050de <HAL_SPI_MspInit+0x18a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004fdc:	2300      	movs	r3, #0
 8004fde:	613b      	str	r3, [r7, #16]
 8004fe0:	4b42      	ldr	r3, [pc, #264]	; (80050ec <HAL_SPI_MspInit+0x198>)
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe4:	4a41      	ldr	r2, [pc, #260]	; (80050ec <HAL_SPI_MspInit+0x198>)
 8004fe6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fea:	6413      	str	r3, [r2, #64]	; 0x40
 8004fec:	4b3f      	ldr	r3, [pc, #252]	; (80050ec <HAL_SPI_MspInit+0x198>)
 8004fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ff4:	613b      	str	r3, [r7, #16]
 8004ff6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	4b3b      	ldr	r3, [pc, #236]	; (80050ec <HAL_SPI_MspInit+0x198>)
 8004ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005000:	4a3a      	ldr	r2, [pc, #232]	; (80050ec <HAL_SPI_MspInit+0x198>)
 8005002:	f043 0304 	orr.w	r3, r3, #4
 8005006:	6313      	str	r3, [r2, #48]	; 0x30
 8005008:	4b38      	ldr	r3, [pc, #224]	; (80050ec <HAL_SPI_MspInit+0x198>)
 800500a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800500c:	f003 0304 	and.w	r3, r3, #4
 8005010:	60fb      	str	r3, [r7, #12]
 8005012:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005014:	2300      	movs	r3, #0
 8005016:	60bb      	str	r3, [r7, #8]
 8005018:	4b34      	ldr	r3, [pc, #208]	; (80050ec <HAL_SPI_MspInit+0x198>)
 800501a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800501c:	4a33      	ldr	r2, [pc, #204]	; (80050ec <HAL_SPI_MspInit+0x198>)
 800501e:	f043 0302 	orr.w	r3, r3, #2
 8005022:	6313      	str	r3, [r2, #48]	; 0x30
 8005024:	4b31      	ldr	r3, [pc, #196]	; (80050ec <HAL_SPI_MspInit+0x198>)
 8005026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005028:	f003 0302 	and.w	r3, r3, #2
 800502c:	60bb      	str	r3, [r7, #8]
 800502e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005030:	2304      	movs	r3, #4
 8005032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005034:	2302      	movs	r3, #2
 8005036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005038:	2300      	movs	r3, #0
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800503c:	2303      	movs	r3, #3
 800503e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005040:	2305      	movs	r3, #5
 8005042:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005044:	f107 031c 	add.w	r3, r7, #28
 8005048:	4619      	mov	r1, r3
 800504a:	482b      	ldr	r0, [pc, #172]	; (80050f8 <HAL_SPI_MspInit+0x1a4>)
 800504c:	f001 fe20 	bl	8006c90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8005050:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8005054:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005056:	2302      	movs	r3, #2
 8005058:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800505a:	2300      	movs	r3, #0
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800505e:	2303      	movs	r3, #3
 8005060:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005062:	2305      	movs	r3, #5
 8005064:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005066:	f107 031c 	add.w	r3, r7, #28
 800506a:	4619      	mov	r1, r3
 800506c:	4823      	ldr	r0, [pc, #140]	; (80050fc <HAL_SPI_MspInit+0x1a8>)
 800506e:	f001 fe0f 	bl	8006c90 <HAL_GPIO_Init>
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8005072:	4b23      	ldr	r3, [pc, #140]	; (8005100 <HAL_SPI_MspInit+0x1ac>)
 8005074:	4a23      	ldr	r2, [pc, #140]	; (8005104 <HAL_SPI_MspInit+0x1b0>)
 8005076:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8005078:	4b21      	ldr	r3, [pc, #132]	; (8005100 <HAL_SPI_MspInit+0x1ac>)
 800507a:	2200      	movs	r2, #0
 800507c:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800507e:	4b20      	ldr	r3, [pc, #128]	; (8005100 <HAL_SPI_MspInit+0x1ac>)
 8005080:	2240      	movs	r2, #64	; 0x40
 8005082:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005084:	4b1e      	ldr	r3, [pc, #120]	; (8005100 <HAL_SPI_MspInit+0x1ac>)
 8005086:	2200      	movs	r2, #0
 8005088:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800508a:	4b1d      	ldr	r3, [pc, #116]	; (8005100 <HAL_SPI_MspInit+0x1ac>)
 800508c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005090:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005092:	4b1b      	ldr	r3, [pc, #108]	; (8005100 <HAL_SPI_MspInit+0x1ac>)
 8005094:	2200      	movs	r2, #0
 8005096:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005098:	4b19      	ldr	r3, [pc, #100]	; (8005100 <HAL_SPI_MspInit+0x1ac>)
 800509a:	2200      	movs	r2, #0
 800509c:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800509e:	4b18      	ldr	r3, [pc, #96]	; (8005100 <HAL_SPI_MspInit+0x1ac>)
 80050a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050a4:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80050a6:	4b16      	ldr	r3, [pc, #88]	; (8005100 <HAL_SPI_MspInit+0x1ac>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80050ac:	4b14      	ldr	r3, [pc, #80]	; (8005100 <HAL_SPI_MspInit+0x1ac>)
 80050ae:	2200      	movs	r2, #0
 80050b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80050b2:	4813      	ldr	r0, [pc, #76]	; (8005100 <HAL_SPI_MspInit+0x1ac>)
 80050b4:	f001 f98c 	bl	80063d0 <HAL_DMA_Init>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d001      	beq.n	80050c2 <HAL_SPI_MspInit+0x16e>
      Error_Handler();
 80050be:	f7ff fe61 	bl	8004d84 <Error_Handler>
    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a0e      	ldr	r2, [pc, #56]	; (8005100 <HAL_SPI_MspInit+0x1ac>)
 80050c6:	649a      	str	r2, [r3, #72]	; 0x48
 80050c8:	4a0d      	ldr	r2, [pc, #52]	; (8005100 <HAL_SPI_MspInit+0x1ac>)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 80050ce:	2200      	movs	r2, #0
 80050d0:	2105      	movs	r1, #5
 80050d2:	2024      	movs	r0, #36	; 0x24
 80050d4:	f001 f944 	bl	8006360 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80050d8:	2024      	movs	r0, #36	; 0x24
 80050da:	f001 f95d 	bl	8006398 <HAL_NVIC_EnableIRQ>
}
 80050de:	bf00      	nop
 80050e0:	3730      	adds	r7, #48	; 0x30
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40013000 	.word	0x40013000
 80050ec:	40023800 	.word	0x40023800
 80050f0:	40020000 	.word	0x40020000
 80050f4:	40003800 	.word	0x40003800
 80050f8:	40020800 	.word	0x40020800
 80050fc:	40020400 	.word	0x40020400
 8005100:	2001044c 	.word	0x2001044c
 8005104:	40026070 	.word	0x40026070

08005108 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b082      	sub	sp, #8
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a16      	ldr	r2, [pc, #88]	; (8005170 <HAL_SPI_MspDeInit+0x68>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d10a      	bne.n	8005130 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 800511a:	4b16      	ldr	r3, [pc, #88]	; (8005174 <HAL_SPI_MspDeInit+0x6c>)
 800511c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800511e:	4a15      	ldr	r2, [pc, #84]	; (8005174 <HAL_SPI_MspDeInit+0x6c>)
 8005120:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005124:	6453      	str	r3, [r2, #68]	; 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin);
 8005126:	21e0      	movs	r1, #224	; 0xe0
 8005128:	4813      	ldr	r0, [pc, #76]	; (8005178 <HAL_SPI_MspDeInit+0x70>)
 800512a:	f001 ff4d 	bl	8006fc8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }

}
 800512e:	e01b      	b.n	8005168 <HAL_SPI_MspDeInit+0x60>
  else if(hspi->Instance==SPI2)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a11      	ldr	r2, [pc, #68]	; (800517c <HAL_SPI_MspDeInit+0x74>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d116      	bne.n	8005168 <HAL_SPI_MspDeInit+0x60>
    __HAL_RCC_SPI2_CLK_DISABLE();
 800513a:	4b0e      	ldr	r3, [pc, #56]	; (8005174 <HAL_SPI_MspDeInit+0x6c>)
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	4a0d      	ldr	r2, [pc, #52]	; (8005174 <HAL_SPI_MspDeInit+0x6c>)
 8005140:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005144:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_2);
 8005146:	2104      	movs	r1, #4
 8005148:	480d      	ldr	r0, [pc, #52]	; (8005180 <HAL_SPI_MspDeInit+0x78>)
 800514a:	f001 ff3d 	bl	8006fc8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_13|GPIO_PIN_15);
 800514e:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8005152:	480c      	ldr	r0, [pc, #48]	; (8005184 <HAL_SPI_MspDeInit+0x7c>)
 8005154:	f001 ff38 	bl	8006fc8 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(hspi->hdmatx);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800515c:	4618      	mov	r0, r3
 800515e:	f001 f9e5 	bl	800652c <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(SPI2_IRQn);
 8005162:	2024      	movs	r0, #36	; 0x24
 8005164:	f001 f926 	bl	80063b4 <HAL_NVIC_DisableIRQ>
}
 8005168:	bf00      	nop
 800516a:	3708      	adds	r7, #8
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	40013000 	.word	0x40013000
 8005174:	40023800 	.word	0x40023800
 8005178:	40020000 	.word	0x40020000
 800517c:	40003800 	.word	0x40003800
 8005180:	40020800 	.word	0x40020800
 8005184:	40020400 	.word	0x40020400

08005188 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a38      	ldr	r2, [pc, #224]	; (8005278 <HAL_TIM_Base_MspInit+0xf0>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d116      	bne.n	80051c8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800519a:	2300      	movs	r3, #0
 800519c:	617b      	str	r3, [r7, #20]
 800519e:	4b37      	ldr	r3, [pc, #220]	; (800527c <HAL_TIM_Base_MspInit+0xf4>)
 80051a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a2:	4a36      	ldr	r2, [pc, #216]	; (800527c <HAL_TIM_Base_MspInit+0xf4>)
 80051a4:	f043 0301 	orr.w	r3, r3, #1
 80051a8:	6453      	str	r3, [r2, #68]	; 0x44
 80051aa:	4b34      	ldr	r3, [pc, #208]	; (800527c <HAL_TIM_Base_MspInit+0xf4>)
 80051ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	617b      	str	r3, [r7, #20]
 80051b4:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 80051b6:	2200      	movs	r2, #0
 80051b8:	2105      	movs	r1, #5
 80051ba:	2019      	movs	r0, #25
 80051bc:	f001 f8d0 	bl	8006360 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80051c0:	2019      	movs	r0, #25
 80051c2:	f001 f8e9 	bl	8006398 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80051c6:	e052      	b.n	800526e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM2)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d0:	d116      	bne.n	8005200 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80051d2:	2300      	movs	r3, #0
 80051d4:	613b      	str	r3, [r7, #16]
 80051d6:	4b29      	ldr	r3, [pc, #164]	; (800527c <HAL_TIM_Base_MspInit+0xf4>)
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	4a28      	ldr	r2, [pc, #160]	; (800527c <HAL_TIM_Base_MspInit+0xf4>)
 80051dc:	f043 0301 	orr.w	r3, r3, #1
 80051e0:	6413      	str	r3, [r2, #64]	; 0x40
 80051e2:	4b26      	ldr	r3, [pc, #152]	; (800527c <HAL_TIM_Base_MspInit+0xf4>)
 80051e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e6:	f003 0301 	and.w	r3, r3, #1
 80051ea:	613b      	str	r3, [r7, #16]
 80051ec:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80051ee:	2200      	movs	r2, #0
 80051f0:	2105      	movs	r1, #5
 80051f2:	201c      	movs	r0, #28
 80051f4:	f001 f8b4 	bl	8006360 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80051f8:	201c      	movs	r0, #28
 80051fa:	f001 f8cd 	bl	8006398 <HAL_NVIC_EnableIRQ>
}
 80051fe:	e036      	b.n	800526e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a1e      	ldr	r2, [pc, #120]	; (8005280 <HAL_TIM_Base_MspInit+0xf8>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d116      	bne.n	8005238 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800520a:	2300      	movs	r3, #0
 800520c:	60fb      	str	r3, [r7, #12]
 800520e:	4b1b      	ldr	r3, [pc, #108]	; (800527c <HAL_TIM_Base_MspInit+0xf4>)
 8005210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005212:	4a1a      	ldr	r2, [pc, #104]	; (800527c <HAL_TIM_Base_MspInit+0xf4>)
 8005214:	f043 0302 	orr.w	r3, r3, #2
 8005218:	6413      	str	r3, [r2, #64]	; 0x40
 800521a:	4b18      	ldr	r3, [pc, #96]	; (800527c <HAL_TIM_Base_MspInit+0xf4>)
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8005226:	2200      	movs	r2, #0
 8005228:	2105      	movs	r1, #5
 800522a:	201d      	movs	r0, #29
 800522c:	f001 f898 	bl	8006360 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005230:	201d      	movs	r0, #29
 8005232:	f001 f8b1 	bl	8006398 <HAL_NVIC_EnableIRQ>
}
 8005236:	e01a      	b.n	800526e <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM10)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a11      	ldr	r2, [pc, #68]	; (8005284 <HAL_TIM_Base_MspInit+0xfc>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d115      	bne.n	800526e <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8005242:	2300      	movs	r3, #0
 8005244:	60bb      	str	r3, [r7, #8]
 8005246:	4b0d      	ldr	r3, [pc, #52]	; (800527c <HAL_TIM_Base_MspInit+0xf4>)
 8005248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800524a:	4a0c      	ldr	r2, [pc, #48]	; (800527c <HAL_TIM_Base_MspInit+0xf4>)
 800524c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005250:	6453      	str	r3, [r2, #68]	; 0x44
 8005252:	4b0a      	ldr	r3, [pc, #40]	; (800527c <HAL_TIM_Base_MspInit+0xf4>)
 8005254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800525a:	60bb      	str	r3, [r7, #8]
 800525c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 800525e:	2200      	movs	r2, #0
 8005260:	2105      	movs	r1, #5
 8005262:	2019      	movs	r0, #25
 8005264:	f001 f87c 	bl	8006360 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005268:	2019      	movs	r0, #25
 800526a:	f001 f895 	bl	8006398 <HAL_NVIC_EnableIRQ>
}
 800526e:	bf00      	nop
 8005270:	3718      	adds	r7, #24
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}
 8005276:	bf00      	nop
 8005278:	40010000 	.word	0x40010000
 800527c:	40023800 	.word	0x40023800
 8005280:	40000400 	.word	0x40000400
 8005284:	40014400 	.word	0x40014400

08005288 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005288:	b580      	push	{r7, lr}
 800528a:	b08c      	sub	sp, #48	; 0x30
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8005290:	2300      	movs	r3, #0
 8005292:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005294:	2300      	movs	r3, #0
 8005296:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM14 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority ,0);
 8005298:	2200      	movs	r2, #0
 800529a:	6879      	ldr	r1, [r7, #4]
 800529c:	202d      	movs	r0, #45	; 0x2d
 800529e:	f001 f85f 	bl	8006360 <HAL_NVIC_SetPriority>

  /* Enable the TIM14 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80052a2:	202d      	movs	r0, #45	; 0x2d
 80052a4:	f001 f878 	bl	8006398 <HAL_NVIC_EnableIRQ>

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 80052a8:	2300      	movs	r3, #0
 80052aa:	60fb      	str	r3, [r7, #12]
 80052ac:	4b1f      	ldr	r3, [pc, #124]	; (800532c <HAL_InitTick+0xa4>)
 80052ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b0:	4a1e      	ldr	r2, [pc, #120]	; (800532c <HAL_InitTick+0xa4>)
 80052b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b6:	6413      	str	r3, [r2, #64]	; 0x40
 80052b8:	4b1c      	ldr	r3, [pc, #112]	; (800532c <HAL_InitTick+0xa4>)
 80052ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80052c4:	f107 0210 	add.w	r2, r7, #16
 80052c8:	f107 0314 	add.w	r3, r7, #20
 80052cc:	4611      	mov	r1, r2
 80052ce:	4618      	mov	r0, r3
 80052d0:	f005 f82e 	bl	800a330 <HAL_RCC_GetClockConfig>

  /* Compute TIM14 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80052d4:	f005 f818 	bl	800a308 <HAL_RCC_GetPCLK1Freq>
 80052d8:	4603      	mov	r3, r0
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80052de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e0:	4a13      	ldr	r2, [pc, #76]	; (8005330 <HAL_InitTick+0xa8>)
 80052e2:	fba2 2303 	umull	r2, r3, r2, r3
 80052e6:	0c9b      	lsrs	r3, r3, #18
 80052e8:	3b01      	subs	r3, #1
 80052ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80052ec:	4b11      	ldr	r3, [pc, #68]	; (8005334 <HAL_InitTick+0xac>)
 80052ee:	4a12      	ldr	r2, [pc, #72]	; (8005338 <HAL_InitTick+0xb0>)
 80052f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80052f2:	4b10      	ldr	r3, [pc, #64]	; (8005334 <HAL_InitTick+0xac>)
 80052f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80052f8:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80052fa:	4a0e      	ldr	r2, [pc, #56]	; (8005334 <HAL_InitTick+0xac>)
 80052fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052fe:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8005300:	4b0c      	ldr	r3, [pc, #48]	; (8005334 <HAL_InitTick+0xac>)
 8005302:	2200      	movs	r2, #0
 8005304:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005306:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <HAL_InitTick+0xac>)
 8005308:	2200      	movs	r2, #0
 800530a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim14) == HAL_OK)
 800530c:	4809      	ldr	r0, [pc, #36]	; (8005334 <HAL_InitTick+0xac>)
 800530e:	f006 fc9f 	bl	800bc50 <HAL_TIM_Base_Init>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d104      	bne.n	8005322 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim14);
 8005318:	4806      	ldr	r0, [pc, #24]	; (8005334 <HAL_InitTick+0xac>)
 800531a:	f006 fce9 	bl	800bcf0 <HAL_TIM_Base_Start_IT>
 800531e:	4603      	mov	r3, r0
 8005320:	e000      	b.n	8005324 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
}
 8005324:	4618      	mov	r0, r3
 8005326:	3730      	adds	r7, #48	; 0x30
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}
 800532c:	40023800 	.word	0x40023800
 8005330:	431bde83 	.word	0x431bde83
 8005334:	20010e08 	.word	0x20010e08
 8005338:	40002000 	.word	0x40002000

0800533c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005340:	e7fe      	b.n	8005340 <NMI_Handler+0x4>

08005342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005342:	b480      	push	{r7}
 8005344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005346:	e7fe      	b.n	8005346 <HardFault_Handler+0x4>

08005348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005348:	b480      	push	{r7}
 800534a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800534c:	e7fe      	b.n	800534c <MemManage_Handler+0x4>

0800534e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800534e:	b480      	push	{r7}
 8005350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005352:	e7fe      	b.n	8005352 <BusFault_Handler+0x4>

08005354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005354:	b480      	push	{r7}
 8005356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005358:	e7fe      	b.n	8005358 <UsageFault_Handler+0x4>

0800535a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800535a:	b480      	push	{r7}
 800535c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800535e:	bf00      	nop
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr

08005368 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800536c:	4802      	ldr	r0, [pc, #8]	; (8005378 <DMA1_Stream4_IRQHandler+0x10>)
 800536e:	f001 fa25 	bl	80067bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005372:	bf00      	nop
 8005374:	bd80      	pop	{r7, pc}
 8005376:	bf00      	nop
 8005378:	2001044c 	.word	0x2001044c

0800537c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */


  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005380:	4803      	ldr	r0, [pc, #12]	; (8005390 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8005382:	f006 fd54 	bl	800be2e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8005386:	4803      	ldr	r0, [pc, #12]	; (8005394 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8005388:	f006 fd51 	bl	800be2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800538c:	bf00      	nop
 800538e:	bd80      	pop	{r7, pc}
 8005390:	2000f6b4 	.word	0x2000f6b4
 8005394:	2000a258 	.word	0x2000a258

08005398 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
//	HAL_GPIO_TogglePin(GPIOD, LD3_Pin);
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800539c:	4802      	ldr	r0, [pc, #8]	; (80053a8 <TIM2_IRQHandler+0x10>)
 800539e:	f006 fd46 	bl	800be2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80053a2:	bf00      	nop
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	2000fa34 	.word	0x2000fa34

080053ac <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80053b0:	4802      	ldr	r0, [pc, #8]	; (80053bc <TIM3_IRQHandler+0x10>)
 80053b2:	f006 fd3c 	bl	800be2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80053b6:	bf00      	nop
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	2000dc2c 	.word	0x2000dc2c

080053c0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80053c4:	4802      	ldr	r0, [pc, #8]	; (80053d0 <SPI2_IRQHandler+0x10>)
 80053c6:	f006 f9c1 	bl	800b74c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80053ca:	bf00      	nop
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	2000a190 	.word	0x2000a190

080053d4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80053d8:	4802      	ldr	r0, [pc, #8]	; (80053e4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80053da:	f006 fd28 	bl	800be2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80053de:	bf00      	nop
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	20010e08 	.word	0x20010e08

080053e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80053ec:	4802      	ldr	r0, [pc, #8]	; (80053f8 <OTG_FS_IRQHandler+0x10>)
 80053ee:	f003 fb0c 	bl	8008a0a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80053f2:	bf00      	nop
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	200143e8 	.word	0x200143e8

080053fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80053fc:	b480      	push	{r7}
 80053fe:	af00      	add	r7, sp, #0
	return 1;
 8005400:	2301      	movs	r3, #1
}
 8005402:	4618      	mov	r0, r3
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <_kill>:

int _kill(int pid, int sig)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005416:	f012 f955 	bl	80176c4 <__errno>
 800541a:	4603      	mov	r3, r0
 800541c:	2216      	movs	r2, #22
 800541e:	601a      	str	r2, [r3, #0]
	return -1;
 8005420:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005424:	4618      	mov	r0, r3
 8005426:	3708      	adds	r7, #8
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <_exit>:

void _exit (int status)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005434:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005438:	6878      	ldr	r0, [r7, #4]
 800543a:	f7ff ffe7 	bl	800540c <_kill>
	while (1) {}		/* Make sure we hang here */
 800543e:	e7fe      	b.n	800543e <_exit+0x12>

08005440 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	60f8      	str	r0, [r7, #12]
 8005448:	60b9      	str	r1, [r7, #8]
 800544a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800544c:	2300      	movs	r3, #0
 800544e:	617b      	str	r3, [r7, #20]
 8005450:	e00a      	b.n	8005468 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005452:	f3af 8000 	nop.w
 8005456:	4601      	mov	r1, r0
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	1c5a      	adds	r2, r3, #1
 800545c:	60ba      	str	r2, [r7, #8]
 800545e:	b2ca      	uxtb	r2, r1
 8005460:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	3301      	adds	r3, #1
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	697a      	ldr	r2, [r7, #20]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	429a      	cmp	r2, r3
 800546e:	dbf0      	blt.n	8005452 <_read+0x12>
	}

return len;
 8005470:	687b      	ldr	r3, [r7, #4]
}
 8005472:	4618      	mov	r0, r3
 8005474:	3718      	adds	r7, #24
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b086      	sub	sp, #24
 800547e:	af00      	add	r7, sp, #0
 8005480:	60f8      	str	r0, [r7, #12]
 8005482:	60b9      	str	r1, [r7, #8]
 8005484:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	e009      	b.n	80054a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800548c:	68bb      	ldr	r3, [r7, #8]
 800548e:	1c5a      	adds	r2, r3, #1
 8005490:	60ba      	str	r2, [r7, #8]
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	4618      	mov	r0, r3
 8005496:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	3301      	adds	r3, #1
 800549e:	617b      	str	r3, [r7, #20]
 80054a0:	697a      	ldr	r2, [r7, #20]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	dbf1      	blt.n	800548c <_write+0x12>
	}
	return len;
 80054a8:	687b      	ldr	r3, [r7, #4]
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	3718      	adds	r7, #24
 80054ae:	46bd      	mov	sp, r7
 80054b0:	bd80      	pop	{r7, pc}

080054b2 <_close>:

int _close(int file)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b083      	sub	sp, #12
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	6078      	str	r0, [r7, #4]
	return -1;
 80054ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80054be:	4618      	mov	r0, r3
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
 80054d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80054da:	605a      	str	r2, [r3, #4]
	return 0;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr

080054ea <_isatty>:

int _isatty(int file)
{
 80054ea:	b480      	push	{r7}
 80054ec:	b083      	sub	sp, #12
 80054ee:	af00      	add	r7, sp, #0
 80054f0:	6078      	str	r0, [r7, #4]
	return 1;
 80054f2:	2301      	movs	r3, #1
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
	return 0;
 800550c:	2300      	movs	r3, #0
}
 800550e:	4618      	mov	r0, r3
 8005510:	3714      	adds	r7, #20
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr
	...

0800551c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005524:	4a14      	ldr	r2, [pc, #80]	; (8005578 <_sbrk+0x5c>)
 8005526:	4b15      	ldr	r3, [pc, #84]	; (800557c <_sbrk+0x60>)
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005530:	4b13      	ldr	r3, [pc, #76]	; (8005580 <_sbrk+0x64>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d102      	bne.n	800553e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005538:	4b11      	ldr	r3, [pc, #68]	; (8005580 <_sbrk+0x64>)
 800553a:	4a12      	ldr	r2, [pc, #72]	; (8005584 <_sbrk+0x68>)
 800553c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800553e:	4b10      	ldr	r3, [pc, #64]	; (8005580 <_sbrk+0x64>)
 8005540:	681a      	ldr	r2, [r3, #0]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	4413      	add	r3, r2
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	429a      	cmp	r2, r3
 800554a:	d207      	bcs.n	800555c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800554c:	f012 f8ba 	bl	80176c4 <__errno>
 8005550:	4603      	mov	r3, r0
 8005552:	220c      	movs	r2, #12
 8005554:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005556:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800555a:	e009      	b.n	8005570 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800555c:	4b08      	ldr	r3, [pc, #32]	; (8005580 <_sbrk+0x64>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005562:	4b07      	ldr	r3, [pc, #28]	; (8005580 <_sbrk+0x64>)
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4413      	add	r3, r2
 800556a:	4a05      	ldr	r2, [pc, #20]	; (8005580 <_sbrk+0x64>)
 800556c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800556e:	68fb      	ldr	r3, [r7, #12]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3718      	adds	r7, #24
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	20020000 	.word	0x20020000
 800557c:	00000800 	.word	0x00000800
 8005580:	200007b0 	.word	0x200007b0
 8005584:	20014800 	.word	0x20014800

08005588 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005588:	b480      	push	{r7}
 800558a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800558c:	4b06      	ldr	r3, [pc, #24]	; (80055a8 <SystemInit+0x20>)
 800558e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005592:	4a05      	ldr	r2, [pc, #20]	; (80055a8 <SystemInit+0x20>)
 8005594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800559c:	bf00      	nop
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	e000ed00 	.word	0xe000ed00

080055ac <TP_Read>:
#include "stm32f4xx_hal.h"


//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 80055b2:	2310      	movs	r3, #16
 80055b4:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 80055b6:	2300      	movs	r3, #0
 80055b8:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 80055ba:	e019      	b.n	80055f0 <TP_Read+0x44>
    {
        value <<= 1;
 80055bc:	88bb      	ldrh	r3, [r7, #4]
 80055be:	005b      	lsls	r3, r3, #1
 80055c0:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 80055c2:	2201      	movs	r2, #1
 80055c4:	2180      	movs	r1, #128	; 0x80
 80055c6:	480e      	ldr	r0, [pc, #56]	; (8005600 <TP_Read+0x54>)
 80055c8:	f001 fe12 	bl	80071f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 80055cc:	2200      	movs	r2, #0
 80055ce:	2180      	movs	r1, #128	; 0x80
 80055d0:	480b      	ldr	r0, [pc, #44]	; (8005600 <TP_Read+0x54>)
 80055d2:	f001 fe0d 	bl	80071f0 <HAL_GPIO_WritePin>

        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 80055d6:	2101      	movs	r1, #1
 80055d8:	480a      	ldr	r0, [pc, #40]	; (8005604 <TP_Read+0x58>)
 80055da:	f001 fdf1 	bl	80071c0 <HAL_GPIO_ReadPin>
 80055de:	4603      	mov	r3, r0
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d002      	beq.n	80055ea <TP_Read+0x3e>
        {
            value++;
 80055e4:	88bb      	ldrh	r3, [r7, #4]
 80055e6:	3301      	adds	r3, #1
 80055e8:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 80055ea:	79fb      	ldrb	r3, [r7, #7]
 80055ec:	3b01      	subs	r3, #1
 80055ee:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 80055f0:	79fb      	ldrb	r3, [r7, #7]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d1e2      	bne.n	80055bc <TP_Read+0x10>
    };

    return value;
 80055f6:	88bb      	ldrh	r3, [r7, #4]
}
 80055f8:	4618      	mov	r0, r3
 80055fa:	3708      	adds	r7, #8
 80055fc:	46bd      	mov	sp, r7
 80055fe:	bd80      	pop	{r7, pc}
 8005600:	40020400 	.word	0x40020400
 8005604:	40021000 	.word	0x40021000

08005608 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b084      	sub	sp, #16
 800560c:	af00      	add	r7, sp, #0
 800560e:	4603      	mov	r3, r0
 8005610:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 8005612:	2308      	movs	r3, #8
 8005614:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8005616:	2200      	movs	r2, #0
 8005618:	2180      	movs	r1, #128	; 0x80
 800561a:	4815      	ldr	r0, [pc, #84]	; (8005670 <TP_Write+0x68>)
 800561c:	f001 fde8 	bl	80071f0 <HAL_GPIO_WritePin>

    while(i > 0)
 8005620:	e01e      	b.n	8005660 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 8005622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005626:	2b00      	cmp	r3, #0
 8005628:	da05      	bge.n	8005636 <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 800562a:	2201      	movs	r2, #1
 800562c:	2104      	movs	r1, #4
 800562e:	4811      	ldr	r0, [pc, #68]	; (8005674 <TP_Write+0x6c>)
 8005630:	f001 fdde 	bl	80071f0 <HAL_GPIO_WritePin>
 8005634:	e004      	b.n	8005640 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 8005636:	2200      	movs	r2, #0
 8005638:	2104      	movs	r1, #4
 800563a:	480e      	ldr	r0, [pc, #56]	; (8005674 <TP_Write+0x6c>)
 800563c:	f001 fdd8 	bl	80071f0 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8005640:	79fb      	ldrb	r3, [r7, #7]
 8005642:	005b      	lsls	r3, r3, #1
 8005644:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8005646:	2201      	movs	r2, #1
 8005648:	2180      	movs	r1, #128	; 0x80
 800564a:	4809      	ldr	r0, [pc, #36]	; (8005670 <TP_Write+0x68>)
 800564c:	f001 fdd0 	bl	80071f0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8005650:	2200      	movs	r2, #0
 8005652:	2180      	movs	r1, #128	; 0x80
 8005654:	4806      	ldr	r0, [pc, #24]	; (8005670 <TP_Write+0x68>)
 8005656:	f001 fdcb 	bl	80071f0 <HAL_GPIO_WritePin>
        i--;
 800565a:	7bfb      	ldrb	r3, [r7, #15]
 800565c:	3b01      	subs	r3, #1
 800565e:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8005660:	7bfb      	ldrb	r3, [r7, #15]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d1dd      	bne.n	8005622 <TP_Write+0x1a>
    };
}
 8005666:	bf00      	nop
 8005668:	bf00      	nop
 800566a:	3710      	adds	r7, #16
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}
 8005670:	40020400 	.word	0x40020400
 8005674:	40021000 	.word	0x40021000

08005678 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8005678:	b590      	push	{r4, r7, lr}
 800567a:	b08b      	sub	sp, #44	; 0x2c
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]

	HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8005680:	2201      	movs	r2, #1
 8005682:	2180      	movs	r1, #128	; 0x80
 8005684:	4862      	ldr	r0, [pc, #392]	; (8005810 <TP_Read_Coordinates+0x198>)
 8005686:	f001 fdb3 	bl	80071f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 800568a:	2201      	movs	r2, #1
 800568c:	2104      	movs	r1, #4
 800568e:	4861      	ldr	r0, [pc, #388]	; (8005814 <TP_Read_Coordinates+0x19c>)
 8005690:	f001 fdae 	bl	80071f0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8005694:	2201      	movs	r2, #1
 8005696:	f44f 7180 	mov.w	r1, #256	; 0x100
 800569a:	485d      	ldr	r0, [pc, #372]	; (8005810 <TP_Read_Coordinates+0x198>)
 800569c:	f001 fda8 	bl	80071f0 <HAL_GPIO_WritePin>

    uint32_t avg_x = 0;
 80056a0:	2300      	movs	r3, #0
 80056a2:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t avg_y = 0;
 80056a4:	2300      	movs	r3, #0
 80056a6:	623b      	str	r3, [r7, #32]
	uint16_t rawx = 0;
 80056a8:	2300      	movs	r3, #0
 80056aa:	81fb      	strh	r3, [r7, #14]
	uint16_t rawy = 0;
 80056ac:	2300      	movs	r3, #0
 80056ae:	81bb      	strh	r3, [r7, #12]
	uint32_t calculating_x =0;
 80056b0:	2300      	movs	r3, #0
 80056b2:	61fb      	str	r3, [r7, #28]
	uint32_t calculating_y = 0;
 80056b4:	2300      	movs	r3, #0
 80056b6:	61bb      	str	r3, [r7, #24]

    uint32_t samples = NO_OF_POSITION_SAMPLES;
 80056b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056bc:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 80056be:	2300      	movs	r3, #0
 80056c0:	613b      	str	r3, [r7, #16]

	HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 80056c2:	2200      	movs	r2, #0
 80056c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056c8:	4851      	ldr	r0, [pc, #324]	; (8005810 <TP_Read_Coordinates+0x198>)
 80056ca:	f001 fd91 	bl	80071f0 <HAL_GPIO_WritePin>


    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80056ce:	e023      	b.n	8005718 <TP_Read_Coordinates+0xa0>
    {
        TP_Write(CMD_RDY);
 80056d0:	2090      	movs	r0, #144	; 0x90
 80056d2:	f7ff ff99 	bl	8005608 <TP_Write>

		rawy = TP_Read();
 80056d6:	f7ff ff69 	bl	80055ac <TP_Read>
 80056da:	4603      	mov	r3, r0
 80056dc:	81bb      	strh	r3, [r7, #12]
		avg_y += rawy;
 80056de:	89bb      	ldrh	r3, [r7, #12]
 80056e0:	6a3a      	ldr	r2, [r7, #32]
 80056e2:	4413      	add	r3, r2
 80056e4:	623b      	str	r3, [r7, #32]
		calculating_y += rawy;
 80056e6:	89bb      	ldrh	r3, [r7, #12]
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	4413      	add	r3, r2
 80056ec:	61bb      	str	r3, [r7, #24]


        TP_Write(CMD_RDX);
 80056ee:	20d0      	movs	r0, #208	; 0xd0
 80056f0:	f7ff ff8a 	bl	8005608 <TP_Write>
        rawx = TP_Read();
 80056f4:	f7ff ff5a 	bl	80055ac <TP_Read>
 80056f8:	4603      	mov	r3, r0
 80056fa:	81fb      	strh	r3, [r7, #14]
		avg_x += rawx;
 80056fc:	89fb      	ldrh	r3, [r7, #14]
 80056fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005700:	4413      	add	r3, r2
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
		calculating_x += rawx;
 8005704:	89fb      	ldrh	r3, [r7, #14]
 8005706:	69fa      	ldr	r2, [r7, #28]
 8005708:	4413      	add	r3, r2
 800570a:	61fb      	str	r3, [r7, #28]
        samples--;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	3b01      	subs	r3, #1
 8005710:	617b      	str	r3, [r7, #20]
		counted_samples++;
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	3301      	adds	r3, #1
 8005716:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d007      	beq.n	800572e <TP_Read_Coordinates+0xb6>
 800571e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005722:	483d      	ldr	r0, [pc, #244]	; (8005818 <TP_Read_Coordinates+0x1a0>)
 8005724:	f001 fd4c 	bl	80071c0 <HAL_GPIO_ReadPin>
 8005728:	4603      	mov	r3, r0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d0d0      	beq.n	80056d0 <TP_Read_Coordinates+0x58>
    };

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 800572e:	2201      	movs	r2, #1
 8005730:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005734:	4836      	ldr	r0, [pc, #216]	; (8005810 <TP_Read_Coordinates+0x198>)
 8005736:	f001 fd5b 	bl	80071f0 <HAL_GPIO_WritePin>


		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005740:	d154      	bne.n	80057ec <TP_Read_Coordinates+0x174>
 8005742:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005746:	4834      	ldr	r0, [pc, #208]	; (8005818 <TP_Read_Coordinates+0x1a0>)
 8005748:	f001 fd3a 	bl	80071c0 <HAL_GPIO_ReadPin>
 800574c:	4603      	mov	r3, r0
 800574e:	2b00      	cmp	r3, #0
 8005750:	d14c      	bne.n	80057ec <TP_Read_Coordinates+0x174>
		{

		calculating_x /= counted_samples;
 8005752:	69fa      	ldr	r2, [r7, #28]
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	fbb2 f3f3 	udiv	r3, r2, r3
 800575a:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 800575c:	69ba      	ldr	r2, [r7, #24]
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	fbb2 f3f3 	udiv	r3, r2, r3
 8005764:	61bb      	str	r3, [r7, #24]

		rawx = calculating_x;
 8005766:	69fb      	ldr	r3, [r7, #28]
 8005768:	81fb      	strh	r3, [r7, #14]
		rawy = calculating_y;
 800576a:	69bb      	ldr	r3, [r7, #24]
 800576c:	81bb      	strh	r3, [r7, #12]

		rawx *= -1;
 800576e:	89fb      	ldrh	r3, [r7, #14]
 8005770:	425b      	negs	r3, r3
 8005772:	81fb      	strh	r3, [r7, #14]
		rawy *= -1;
 8005774:	89bb      	ldrh	r3, [r7, #12]
 8005776:	425b      	negs	r3, r3
 8005778:	81bb      	strh	r3, [r7, #12]

		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
        Coordinates[1] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 800577a:	89fa      	ldrh	r2, [r7, #14]
 800577c:	4b27      	ldr	r3, [pc, #156]	; (800581c <TP_Read_Coordinates+0x1a4>)
 800577e:	fba3 1302 	umull	r1, r3, r3, r2
 8005782:	1ad2      	subs	r2, r2, r3
 8005784:	0852      	lsrs	r2, r2, #1
 8005786:	4413      	add	r3, r2
 8005788:	0a1b      	lsrs	r3, r3, #8
 800578a:	b29b      	uxth	r3, r3
 800578c:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 8005790:	4618      	mov	r0, r3
 8005792:	f7fa fec7 	bl	8000524 <__aeabi_i2d>
 8005796:	a31c      	add	r3, pc, #112	; (adr r3, 8005808 <TP_Read_Coordinates+0x190>)
 8005798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579c:	f7fa ff2c 	bl	80005f8 <__aeabi_dmul>
 80057a0:	4602      	mov	r2, r0
 80057a2:	460b      	mov	r3, r1
 80057a4:	4610      	mov	r0, r2
 80057a6:	4619      	mov	r1, r3
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	1c9c      	adds	r4, r3, #2
 80057ac:	f7fb f9fc 	bl	8000ba8 <__aeabi_d2uiz>
 80057b0:	4603      	mov	r3, r0
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	8023      	strh	r3, [r4, #0]
		Coordinates[0] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 80057b6:	89bb      	ldrh	r3, [r7, #12]
 80057b8:	4a19      	ldr	r2, [pc, #100]	; (8005820 <TP_Read_Coordinates+0x1a8>)
 80057ba:	fba2 2303 	umull	r2, r3, r2, r3
 80057be:	09db      	lsrs	r3, r3, #7
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	3b0f      	subs	r3, #15
 80057c4:	4618      	mov	r0, r3
 80057c6:	f7fa fead 	bl	8000524 <__aeabi_i2d>
 80057ca:	a30f      	add	r3, pc, #60	; (adr r3, 8005808 <TP_Read_Coordinates+0x190>)
 80057cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d0:	f7fa ff12 	bl	80005f8 <__aeabi_dmul>
 80057d4:	4602      	mov	r2, r0
 80057d6:	460b      	mov	r3, r1
 80057d8:	4610      	mov	r0, r2
 80057da:	4619      	mov	r1, r3
 80057dc:	f7fb f9e4 	bl	8000ba8 <__aeabi_d2uiz>
 80057e0:	4603      	mov	r3, r0
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	801a      	strh	r2, [r3, #0]

		return TOUCHPAD_DATA_OK;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e007      	b.n	80057fc <TP_Read_Coordinates+0x184>
		}
		else
		{
			Coordinates[0] = 0;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2200      	movs	r2, #0
 80057f0:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	3302      	adds	r3, #2
 80057f6:	2200      	movs	r2, #0
 80057f8:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 80057fa:	2300      	movs	r3, #0
		}
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	372c      	adds	r7, #44	; 0x2c
 8005800:	46bd      	mov	sp, r7
 8005802:	bd90      	pop	{r4, r7, pc}
 8005804:	f3af 8000 	nop.w
 8005808:	28f5c28f 	.word	0x28f5c28f
 800580c:	3ff28f5c 	.word	0x3ff28f5c
 8005810:	40020400 	.word	0x40020400
 8005814:	40021000 	.word	0x40021000
 8005818:	40020800 	.word	0x40020800
 800581c:	e01e01e1 	.word	0xe01e01e1
 8005820:	a0a0a0a1 	.word	0xa0a0a0a1

08005824 <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8005828:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800582c:	4805      	ldr	r0, [pc, #20]	; (8005844 <TP_Touchpad_Pressed+0x20>)
 800582e:	f001 fcc7 	bl	80071c0 <HAL_GPIO_ReadPin>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d101      	bne.n	800583c <TP_Touchpad_Pressed+0x18>
	{
		return TOUCHPAD_PRESSED;
 8005838:	2301      	movs	r3, #1
 800583a:	e000      	b.n	800583e <TP_Touchpad_Pressed+0x1a>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 800583c:	2300      	movs	r3, #0
	}
}
 800583e:	4618      	mov	r0, r3
 8005840:	bd80      	pop	{r7, pc}
 8005842:	bf00      	nop
 8005844:	40020800 	.word	0x40020800

08005848 <TFT9341_FontsIni>:

static void TFT9341_WriteData(uint8_t* buff, size_t buff_size);

// ---------------------------------------------------------------------------------
void TFT9341_FontsIni(void)
{
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0
  Font8.Height = 8;
 800584c:	4b16      	ldr	r3, [pc, #88]	; (80058a8 <TFT9341_FontsIni+0x60>)
 800584e:	2208      	movs	r2, #8
 8005850:	80da      	strh	r2, [r3, #6]
  Font8.Width = 5;
 8005852:	4b15      	ldr	r3, [pc, #84]	; (80058a8 <TFT9341_FontsIni+0x60>)
 8005854:	2205      	movs	r2, #5
 8005856:	809a      	strh	r2, [r3, #4]
  Font12.Height = 12;
 8005858:	4b14      	ldr	r3, [pc, #80]	; (80058ac <TFT9341_FontsIni+0x64>)
 800585a:	220c      	movs	r2, #12
 800585c:	80da      	strh	r2, [r3, #6]
  Font12.Width = 7;
 800585e:	4b13      	ldr	r3, [pc, #76]	; (80058ac <TFT9341_FontsIni+0x64>)
 8005860:	2207      	movs	r2, #7
 8005862:	809a      	strh	r2, [r3, #4]
  Font16.Height = 16;
 8005864:	4b12      	ldr	r3, [pc, #72]	; (80058b0 <TFT9341_FontsIni+0x68>)
 8005866:	2210      	movs	r2, #16
 8005868:	80da      	strh	r2, [r3, #6]
  Font16.Width = 11;
 800586a:	4b11      	ldr	r3, [pc, #68]	; (80058b0 <TFT9341_FontsIni+0x68>)
 800586c:	220b      	movs	r2, #11
 800586e:	809a      	strh	r2, [r3, #4]
  Font20.Height = 20;
 8005870:	4b10      	ldr	r3, [pc, #64]	; (80058b4 <TFT9341_FontsIni+0x6c>)
 8005872:	2214      	movs	r2, #20
 8005874:	80da      	strh	r2, [r3, #6]
  Font20.Width = 14;
 8005876:	4b0f      	ldr	r3, [pc, #60]	; (80058b4 <TFT9341_FontsIni+0x6c>)
 8005878:	220e      	movs	r2, #14
 800587a:	809a      	strh	r2, [r3, #4]
  Font24.Height = 24;
 800587c:	4b0e      	ldr	r3, [pc, #56]	; (80058b8 <TFT9341_FontsIni+0x70>)
 800587e:	2218      	movs	r2, #24
 8005880:	80da      	strh	r2, [r3, #6]
  Font24.Width = 17;
 8005882:	4b0d      	ldr	r3, [pc, #52]	; (80058b8 <TFT9341_FontsIni+0x70>)
 8005884:	2211      	movs	r2, #17
 8005886:	809a      	strh	r2, [r3, #4]
  lcdprop.BackColor=TFT9341_BLACK;
 8005888:	4b0c      	ldr	r3, [pc, #48]	; (80058bc <TFT9341_FontsIni+0x74>)
 800588a:	2200      	movs	r2, #0
 800588c:	805a      	strh	r2, [r3, #2]
  lcdprop.TextColor=TFT9341_GREEN;
 800588e:	4b0b      	ldr	r3, [pc, #44]	; (80058bc <TFT9341_FontsIni+0x74>)
 8005890:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8005894:	801a      	strh	r2, [r3, #0]
  lcdprop.pFont=&Font16;
 8005896:	4b09      	ldr	r3, [pc, #36]	; (80058bc <TFT9341_FontsIni+0x74>)
 8005898:	4a05      	ldr	r2, [pc, #20]	; (80058b0 <TFT9341_FontsIni+0x68>)
 800589a:	605a      	str	r2, [r3, #4]
}
 800589c:	bf00      	nop
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	2000002c 	.word	0x2000002c
 80058ac:	2000000c 	.word	0x2000000c
 80058b0:	20000014 	.word	0x20000014
 80058b4:	2000001c 	.word	0x2000001c
 80058b8:	20000024 	.word	0x20000024
 80058bc:	20010e54 	.word	0x20010e54

080058c0 <TFT9341_SendData>:
// ---------------------------------------------------------------------------------
void TFT9341_SendData(uint8_t dt)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b082      	sub	sp, #8
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	4603      	mov	r3, r0
 80058c8:	71fb      	strb	r3, [r7, #7]
	DC_DATA();
 80058ca:	2201      	movs	r2, #1
 80058cc:	2140      	movs	r1, #64	; 0x40
 80058ce:	4807      	ldr	r0, [pc, #28]	; (80058ec <TFT9341_SendData+0x2c>)
 80058d0:	f001 fc8e 	bl	80071f0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit (&hspi2, &dt, 1, 5000);
 80058d4:	1df9      	adds	r1, r7, #7
 80058d6:	f241 3388 	movw	r3, #5000	; 0x1388
 80058da:	2201      	movs	r2, #1
 80058dc:	4804      	ldr	r0, [pc, #16]	; (80058f0 <TFT9341_SendData+0x30>)
 80058de:	f005 fb60 	bl	800afa2 <HAL_SPI_Transmit>
}
 80058e2:	bf00      	nop
 80058e4:	3708      	adds	r7, #8
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	40021000 	.word	0x40021000
 80058f0:	2000a190 	.word	0x2000a190

080058f4 <TFT9341_SendCommand>:
// ---------------------------------------------------------------------------------
void TFT9341_SendCommand(uint8_t cmd)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	4603      	mov	r3, r0
 80058fc:	71fb      	strb	r3, [r7, #7]
  DC_COMMAND();
 80058fe:	2200      	movs	r2, #0
 8005900:	2140      	movs	r1, #64	; 0x40
 8005902:	4807      	ldr	r0, [pc, #28]	; (8005920 <TFT9341_SendCommand+0x2c>)
 8005904:	f001 fc74 	bl	80071f0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit (&hspi2, &cmd, 1, 5000);
 8005908:	1df9      	adds	r1, r7, #7
 800590a:	f241 3388 	movw	r3, #5000	; 0x1388
 800590e:	2201      	movs	r2, #1
 8005910:	4804      	ldr	r0, [pc, #16]	; (8005924 <TFT9341_SendCommand+0x30>)
 8005912:	f005 fb46 	bl	800afa2 <HAL_SPI_Transmit>
}
 8005916:	bf00      	nop
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
 800591e:	bf00      	nop
 8005920:	40021000 	.word	0x40021000
 8005924:	2000a190 	.word	0x2000a190

08005928 <TFT9341_reset>:
// ---------------------------------------------------------------------------------
void TFT9341_reset(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
	RESET_ACTIVE();
 800592c:	2200      	movs	r2, #0
 800592e:	2120      	movs	r1, #32
 8005930:	4806      	ldr	r0, [pc, #24]	; (800594c <TFT9341_reset+0x24>)
 8005932:	f001 fc5d 	bl	80071f0 <HAL_GPIO_WritePin>
	osDelay(5);
 8005936:	2005      	movs	r0, #5
 8005938:	f00d fb30 	bl	8012f9c <osDelay>
	RESET_IDLE();
 800593c:	2201      	movs	r2, #1
 800593e:	2120      	movs	r1, #32
 8005940:	4802      	ldr	r0, [pc, #8]	; (800594c <TFT9341_reset+0x24>)
 8005942:	f001 fc55 	bl	80071f0 <HAL_GPIO_WritePin>
}
 8005946:	bf00      	nop
 8005948:	bd80      	pop	{r7, pc}
 800594a:	bf00      	nop
 800594c:	40021000 	.word	0x40021000

08005950 <TFT9341_ini>:
// ---------------------------------------------------------------------------------
void TFT9341_ini(uint16_t w_size, uint16_t h_size)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	4603      	mov	r3, r0
 8005958:	460a      	mov	r2, r1
 800595a:	80fb      	strh	r3, [r7, #6]
 800595c:	4613      	mov	r3, r2
 800595e:	80bb      	strh	r3, [r7, #4]
  uint8_t data[15];
  CS_ACTIVE();
 8005960:	2200      	movs	r2, #0
 8005962:	2110      	movs	r1, #16
 8005964:	48a3      	ldr	r0, [pc, #652]	; (8005bf4 <TFT9341_ini+0x2a4>)
 8005966:	f001 fc43 	bl	80071f0 <HAL_GPIO_WritePin>
  TFT9341_reset();
 800596a:	f7ff ffdd 	bl	8005928 <TFT9341_reset>

  //Software Reset
  TFT9341_SendCommand(0x01);
 800596e:	2001      	movs	r0, #1
 8005970:	f7ff ffc0 	bl	80058f4 <TFT9341_SendCommand>
  osDelay(1000);
 8005974:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005978:	f00d fb10 	bl	8012f9c <osDelay>

  //Power Control A
    data[0] = 0x39;
 800597c:	2339      	movs	r3, #57	; 0x39
 800597e:	723b      	strb	r3, [r7, #8]
    data[1] = 0x2C;
 8005980:	232c      	movs	r3, #44	; 0x2c
 8005982:	727b      	strb	r3, [r7, #9]
    data[2] = 0x00;
 8005984:	2300      	movs	r3, #0
 8005986:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x34;
 8005988:	2334      	movs	r3, #52	; 0x34
 800598a:	72fb      	strb	r3, [r7, #11]
    data[4] = 0x02;
 800598c:	2302      	movs	r3, #2
 800598e:	733b      	strb	r3, [r7, #12]
    TFT9341_SendCommand(0xCB);
 8005990:	20cb      	movs	r0, #203	; 0xcb
 8005992:	f7ff ffaf 	bl	80058f4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 5);
 8005996:	f107 0308 	add.w	r3, r7, #8
 800599a:	2105      	movs	r1, #5
 800599c:	4618      	mov	r0, r3
 800599e:	f000 f92f 	bl	8005c00 <TFT9341_WriteData>
    //Power Control B
    data[0] = 0x00;
 80059a2:	2300      	movs	r3, #0
 80059a4:	723b      	strb	r3, [r7, #8]
    data[1] = 0xC1;
 80059a6:	23c1      	movs	r3, #193	; 0xc1
 80059a8:	727b      	strb	r3, [r7, #9]
    data[2] = 0x30;
 80059aa:	2330      	movs	r3, #48	; 0x30
 80059ac:	72bb      	strb	r3, [r7, #10]
    TFT9341_SendCommand(0xCF);
 80059ae:	20cf      	movs	r0, #207	; 0xcf
 80059b0:	f7ff ffa0 	bl	80058f4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 3);
 80059b4:	f107 0308 	add.w	r3, r7, #8
 80059b8:	2103      	movs	r1, #3
 80059ba:	4618      	mov	r0, r3
 80059bc:	f000 f920 	bl	8005c00 <TFT9341_WriteData>
    //Driver timing control A
    data[0] = 0x85;
 80059c0:	2385      	movs	r3, #133	; 0x85
 80059c2:	723b      	strb	r3, [r7, #8]
    data[1] = 0x00;
 80059c4:	2300      	movs	r3, #0
 80059c6:	727b      	strb	r3, [r7, #9]
    data[2] = 0x78;
 80059c8:	2378      	movs	r3, #120	; 0x78
 80059ca:	72bb      	strb	r3, [r7, #10]
    TFT9341_SendCommand(0xE8);
 80059cc:	20e8      	movs	r0, #232	; 0xe8
 80059ce:	f7ff ff91 	bl	80058f4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 3);
 80059d2:	f107 0308 	add.w	r3, r7, #8
 80059d6:	2103      	movs	r1, #3
 80059d8:	4618      	mov	r0, r3
 80059da:	f000 f911 	bl	8005c00 <TFT9341_WriteData>
    //Driver timing control B
    data[0] = 0x00;
 80059de:	2300      	movs	r3, #0
 80059e0:	723b      	strb	r3, [r7, #8]
    data[1] = 0x00;
 80059e2:	2300      	movs	r3, #0
 80059e4:	727b      	strb	r3, [r7, #9]
    TFT9341_SendCommand(0xEA);
 80059e6:	20ea      	movs	r0, #234	; 0xea
 80059e8:	f7ff ff84 	bl	80058f4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 2);
 80059ec:	f107 0308 	add.w	r3, r7, #8
 80059f0:	2102      	movs	r1, #2
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 f904 	bl	8005c00 <TFT9341_WriteData>
    //Power on Sequence control
    data[0] = 0x64;
 80059f8:	2364      	movs	r3, #100	; 0x64
 80059fa:	723b      	strb	r3, [r7, #8]
    data[1] = 0x03;
 80059fc:	2303      	movs	r3, #3
 80059fe:	727b      	strb	r3, [r7, #9]
    data[2] = 0x12;
 8005a00:	2312      	movs	r3, #18
 8005a02:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x81;
 8005a04:	2381      	movs	r3, #129	; 0x81
 8005a06:	72fb      	strb	r3, [r7, #11]
    TFT9341_SendCommand(0xED);
 8005a08:	20ed      	movs	r0, #237	; 0xed
 8005a0a:	f7ff ff73 	bl	80058f4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 4);
 8005a0e:	f107 0308 	add.w	r3, r7, #8
 8005a12:	2104      	movs	r1, #4
 8005a14:	4618      	mov	r0, r3
 8005a16:	f000 f8f3 	bl	8005c00 <TFT9341_WriteData>
    //Pump ratio control
    data[0] = 0x20;
 8005a1a:	2320      	movs	r3, #32
 8005a1c:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xF7);
 8005a1e:	20f7      	movs	r0, #247	; 0xf7
 8005a20:	f7ff ff68 	bl	80058f4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8005a24:	f107 0308 	add.w	r3, r7, #8
 8005a28:	2101      	movs	r1, #1
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 f8e8 	bl	8005c00 <TFT9341_WriteData>
    //Power Control,VRH[5:0]
    data[0] = 0x10;
 8005a30:	2310      	movs	r3, #16
 8005a32:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xC0);
 8005a34:	20c0      	movs	r0, #192	; 0xc0
 8005a36:	f7ff ff5d 	bl	80058f4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8005a3a:	f107 0308 	add.w	r3, r7, #8
 8005a3e:	2101      	movs	r1, #1
 8005a40:	4618      	mov	r0, r3
 8005a42:	f000 f8dd 	bl	8005c00 <TFT9341_WriteData>
    //Power Control,SAP[2:0];BT[3:0]
    data[0] = 0x10;
 8005a46:	2310      	movs	r3, #16
 8005a48:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xC1);
 8005a4a:	20c1      	movs	r0, #193	; 0xc1
 8005a4c:	f7ff ff52 	bl	80058f4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8005a50:	f107 0308 	add.w	r3, r7, #8
 8005a54:	2101      	movs	r1, #1
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 f8d2 	bl	8005c00 <TFT9341_WriteData>
    //VCOM Control 1
    data[0] = 0x3E;
 8005a5c:	233e      	movs	r3, #62	; 0x3e
 8005a5e:	723b      	strb	r3, [r7, #8]
    data[1] = 0x28;
 8005a60:	2328      	movs	r3, #40	; 0x28
 8005a62:	727b      	strb	r3, [r7, #9]
    TFT9341_SendCommand(0xC5);
 8005a64:	20c5      	movs	r0, #197	; 0xc5
 8005a66:	f7ff ff45 	bl	80058f4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 2);
 8005a6a:	f107 0308 	add.w	r3, r7, #8
 8005a6e:	2102      	movs	r1, #2
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 f8c5 	bl	8005c00 <TFT9341_WriteData>
    //VCOM Control 2
    data[0] = 0x86;
 8005a76:	2386      	movs	r3, #134	; 0x86
 8005a78:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xC7);
 8005a7a:	20c7      	movs	r0, #199	; 0xc7
 8005a7c:	f7ff ff3a 	bl	80058f4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8005a80:	f107 0308 	add.w	r3, r7, #8
 8005a84:	2101      	movs	r1, #1
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 f8ba 	bl	8005c00 <TFT9341_WriteData>
    //Memory Acsess Control
    data[0] = 0x48;
 8005a8c:	2348      	movs	r3, #72	; 0x48
 8005a8e:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x36);
 8005a90:	2036      	movs	r0, #54	; 0x36
 8005a92:	f7ff ff2f 	bl	80058f4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8005a96:	f107 0308 	add.w	r3, r7, #8
 8005a9a:	2101      	movs	r1, #1
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 f8af 	bl	8005c00 <TFT9341_WriteData>
    //Pixel Format Set
    data[0] = 0x55;//16bit
 8005aa2:	2355      	movs	r3, #85	; 0x55
 8005aa4:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x3A);
 8005aa6:	203a      	movs	r0, #58	; 0x3a
 8005aa8:	f7ff ff24 	bl	80058f4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8005aac:	f107 0308 	add.w	r3, r7, #8
 8005ab0:	2101      	movs	r1, #1
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	f000 f8a4 	bl	8005c00 <TFT9341_WriteData>
    //Frame Rratio Control, Standard RGB Color
    data[0] = 0x00;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	723b      	strb	r3, [r7, #8]
    data[1] = 0x18;
 8005abc:	2318      	movs	r3, #24
 8005abe:	727b      	strb	r3, [r7, #9]
    TFT9341_SendCommand(0xB1);
 8005ac0:	20b1      	movs	r0, #177	; 0xb1
 8005ac2:	f7ff ff17 	bl	80058f4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 2);
 8005ac6:	f107 0308 	add.w	r3, r7, #8
 8005aca:	2102      	movs	r1, #2
 8005acc:	4618      	mov	r0, r3
 8005ace:	f000 f897 	bl	8005c00 <TFT9341_WriteData>
    //Display Function Control
    data[0] = 0x08;
 8005ad2:	2308      	movs	r3, #8
 8005ad4:	723b      	strb	r3, [r7, #8]
    data[1] = 0x82;
 8005ad6:	2382      	movs	r3, #130	; 0x82
 8005ad8:	727b      	strb	r3, [r7, #9]
    data[2] = 0x27;//320 строк
 8005ada:	2327      	movs	r3, #39	; 0x27
 8005adc:	72bb      	strb	r3, [r7, #10]
    TFT9341_SendCommand(0xB6);
 8005ade:	20b6      	movs	r0, #182	; 0xb6
 8005ae0:	f7ff ff08 	bl	80058f4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 3);
 8005ae4:	f107 0308 	add.w	r3, r7, #8
 8005ae8:	2103      	movs	r1, #3
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 f888 	bl	8005c00 <TFT9341_WriteData>
    //Enable 3G (пока не знаю что это за режим)
    data[0] = 0x00;//не включаем
 8005af0:	2300      	movs	r3, #0
 8005af2:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0xF2);
 8005af4:	20f2      	movs	r0, #242	; 0xf2
 8005af6:	f7ff fefd 	bl	80058f4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8005afa:	f107 0308 	add.w	r3, r7, #8
 8005afe:	2101      	movs	r1, #1
 8005b00:	4618      	mov	r0, r3
 8005b02:	f000 f87d 	bl	8005c00 <TFT9341_WriteData>
    //Gamma set
    data[0] = 0x01;//Gamma Curve (G2.2) (Кривая цветовой гаммы)
 8005b06:	2301      	movs	r3, #1
 8005b08:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x26);
 8005b0a:	2026      	movs	r0, #38	; 0x26
 8005b0c:	f7ff fef2 	bl	80058f4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8005b10:	f107 0308 	add.w	r3, r7, #8
 8005b14:	2101      	movs	r1, #1
 8005b16:	4618      	mov	r0, r3
 8005b18:	f000 f872 	bl	8005c00 <TFT9341_WriteData>
    //Positive Gamma  Correction
    data[0] = 0x0F;
 8005b1c:	230f      	movs	r3, #15
 8005b1e:	723b      	strb	r3, [r7, #8]
    data[1] = 0x31;
 8005b20:	2331      	movs	r3, #49	; 0x31
 8005b22:	727b      	strb	r3, [r7, #9]
    data[2] = 0x2B;
 8005b24:	232b      	movs	r3, #43	; 0x2b
 8005b26:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x0C;
 8005b28:	230c      	movs	r3, #12
 8005b2a:	72fb      	strb	r3, [r7, #11]
    data[4] = 0x0E;
 8005b2c:	230e      	movs	r3, #14
 8005b2e:	733b      	strb	r3, [r7, #12]
    data[5] = 0x08;
 8005b30:	2308      	movs	r3, #8
 8005b32:	737b      	strb	r3, [r7, #13]
    data[6] = 0x4E;
 8005b34:	234e      	movs	r3, #78	; 0x4e
 8005b36:	73bb      	strb	r3, [r7, #14]
    data[7] = 0xF1;
 8005b38:	23f1      	movs	r3, #241	; 0xf1
 8005b3a:	73fb      	strb	r3, [r7, #15]
    data[8] = 0x37;
 8005b3c:	2337      	movs	r3, #55	; 0x37
 8005b3e:	743b      	strb	r3, [r7, #16]
    data[9] = 0x07;
 8005b40:	2307      	movs	r3, #7
 8005b42:	747b      	strb	r3, [r7, #17]
    data[10] = 0x10;
 8005b44:	2310      	movs	r3, #16
 8005b46:	74bb      	strb	r3, [r7, #18]
    data[11] = 0x03;
 8005b48:	2303      	movs	r3, #3
 8005b4a:	74fb      	strb	r3, [r7, #19]
    data[12] = 0x0E;
 8005b4c:	230e      	movs	r3, #14
 8005b4e:	753b      	strb	r3, [r7, #20]
    data[13] = 0x09;
 8005b50:	2309      	movs	r3, #9
 8005b52:	757b      	strb	r3, [r7, #21]
    data[14] = 0x00;
 8005b54:	2300      	movs	r3, #0
 8005b56:	75bb      	strb	r3, [r7, #22]
    TFT9341_SendCommand(0xE0);
 8005b58:	20e0      	movs	r0, #224	; 0xe0
 8005b5a:	f7ff fecb 	bl	80058f4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 15);
 8005b5e:	f107 0308 	add.w	r3, r7, #8
 8005b62:	210f      	movs	r1, #15
 8005b64:	4618      	mov	r0, r3
 8005b66:	f000 f84b 	bl	8005c00 <TFT9341_WriteData>
    //Negative Gamma  Correction
    data[0] = 0x00;
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	723b      	strb	r3, [r7, #8]
    data[1] = 0x0E;
 8005b6e:	230e      	movs	r3, #14
 8005b70:	727b      	strb	r3, [r7, #9]
    data[2] = 0x14;
 8005b72:	2314      	movs	r3, #20
 8005b74:	72bb      	strb	r3, [r7, #10]
    data[3] = 0x03;
 8005b76:	2303      	movs	r3, #3
 8005b78:	72fb      	strb	r3, [r7, #11]
    data[4] = 0x11;
 8005b7a:	2311      	movs	r3, #17
 8005b7c:	733b      	strb	r3, [r7, #12]
    data[5] = 0x07;
 8005b7e:	2307      	movs	r3, #7
 8005b80:	737b      	strb	r3, [r7, #13]
    data[6] = 0x31;
 8005b82:	2331      	movs	r3, #49	; 0x31
 8005b84:	73bb      	strb	r3, [r7, #14]
    data[7] = 0xC1;
 8005b86:	23c1      	movs	r3, #193	; 0xc1
 8005b88:	73fb      	strb	r3, [r7, #15]
    data[8] = 0x48;
 8005b8a:	2348      	movs	r3, #72	; 0x48
 8005b8c:	743b      	strb	r3, [r7, #16]
    data[9] = 0x08;
 8005b8e:	2308      	movs	r3, #8
 8005b90:	747b      	strb	r3, [r7, #17]
    data[10] = 0x0F;
 8005b92:	230f      	movs	r3, #15
 8005b94:	74bb      	strb	r3, [r7, #18]
    data[11] = 0x0C;
 8005b96:	230c      	movs	r3, #12
 8005b98:	74fb      	strb	r3, [r7, #19]
    data[12] = 0x31;
 8005b9a:	2331      	movs	r3, #49	; 0x31
 8005b9c:	753b      	strb	r3, [r7, #20]
    data[13] = 0x36;
 8005b9e:	2336      	movs	r3, #54	; 0x36
 8005ba0:	757b      	strb	r3, [r7, #21]
    data[14] = 0x0F;
 8005ba2:	230f      	movs	r3, #15
 8005ba4:	75bb      	strb	r3, [r7, #22]
    TFT9341_SendCommand(0xE1);
 8005ba6:	20e1      	movs	r0, #225	; 0xe1
 8005ba8:	f7ff fea4 	bl	80058f4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 15);
 8005bac:	f107 0308 	add.w	r3, r7, #8
 8005bb0:	210f      	movs	r1, #15
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 f824 	bl	8005c00 <TFT9341_WriteData>
    TFT9341_SendCommand(0x11);//Выйдем из спящего режима
 8005bb8:	2011      	movs	r0, #17
 8005bba:	f7ff fe9b 	bl	80058f4 <TFT9341_SendCommand>

    osDelay(120);
 8005bbe:	2078      	movs	r0, #120	; 0x78
 8005bc0:	f00d f9ec 	bl	8012f9c <osDelay>

    //Display ON
    data[0] = TFT9341_ROTATION;
 8005bc4:	2348      	movs	r3, #72	; 0x48
 8005bc6:	723b      	strb	r3, [r7, #8]
    TFT9341_SendCommand(0x29);
 8005bc8:	2029      	movs	r0, #41	; 0x29
 8005bca:	f7ff fe93 	bl	80058f4 <TFT9341_SendCommand>
    TFT9341_WriteData(data, 1);
 8005bce:	f107 0308 	add.w	r3, r7, #8
 8005bd2:	2101      	movs	r1, #1
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f000 f813 	bl	8005c00 <TFT9341_WriteData>

    TFT9341_WIDTH = w_size;
 8005bda:	4a07      	ldr	r2, [pc, #28]	; (8005bf8 <TFT9341_ini+0x2a8>)
 8005bdc:	88fb      	ldrh	r3, [r7, #6]
 8005bde:	8013      	strh	r3, [r2, #0]
    TFT9341_HEIGHT = h_size;
 8005be0:	4a06      	ldr	r2, [pc, #24]	; (8005bfc <TFT9341_ini+0x2ac>)
 8005be2:	88bb      	ldrh	r3, [r7, #4]
 8005be4:	8013      	strh	r3, [r2, #0]

    TFT9341_FontsIni();
 8005be6:	f7ff fe2f 	bl	8005848 <TFT9341_FontsIni>
}
 8005bea:	bf00      	nop
 8005bec:	3718      	adds	r7, #24
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	40021000 	.word	0x40021000
 8005bf8:	20010e5c 	.word	0x20010e5c
 8005bfc:	20010e50 	.word	0x20010e50

08005c00 <TFT9341_WriteData>:
// ---------------------------------------------------------------------------------
static void TFT9341_WriteData(uint8_t* buff, size_t buff_size)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b084      	sub	sp, #16
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
	DC_DATA();
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	2140      	movs	r1, #64	; 0x40
 8005c0e:	4811      	ldr	r0, [pc, #68]	; (8005c54 <TFT9341_WriteData+0x54>)
 8005c10:	f001 faee 	bl	80071f0 <HAL_GPIO_WritePin>
	while(buff_size > 0)
 8005c14:	e015      	b.n	8005c42 <TFT9341_WriteData+0x42>
	{
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c1c:	bf28      	it	cs
 8005c1e:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8005c22:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi2, buff, chunk_size, HAL_MAX_DELAY);
 8005c24:	89fa      	ldrh	r2, [r7, #14]
 8005c26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c2a:	6879      	ldr	r1, [r7, #4]
 8005c2c:	480a      	ldr	r0, [pc, #40]	; (8005c58 <TFT9341_WriteData+0x58>)
 8005c2e:	f005 f9b8 	bl	800afa2 <HAL_SPI_Transmit>
		buff += chunk_size;
 8005c32:	89fb      	ldrh	r3, [r7, #14]
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	4413      	add	r3, r2
 8005c38:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 8005c3a:	89fb      	ldrh	r3, [r7, #14]
 8005c3c:	683a      	ldr	r2, [r7, #0]
 8005c3e:	1ad3      	subs	r3, r2, r3
 8005c40:	603b      	str	r3, [r7, #0]
	while(buff_size > 0)
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1e6      	bne.n	8005c16 <TFT9341_WriteData+0x16>
	}
}
 8005c48:	bf00      	nop
 8005c4a:	bf00      	nop
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	40021000 	.word	0x40021000
 8005c58:	2000a190 	.word	0x2000a190

08005c5c <TFT9341_SetAddrWindow>:
// ---------------------------------------------------------------------------------
static void TFT9341_SetAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8005c5c:	b590      	push	{r4, r7, lr}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	4604      	mov	r4, r0
 8005c64:	4608      	mov	r0, r1
 8005c66:	4611      	mov	r1, r2
 8005c68:	461a      	mov	r2, r3
 8005c6a:	4623      	mov	r3, r4
 8005c6c:	80fb      	strh	r3, [r7, #6]
 8005c6e:	4603      	mov	r3, r0
 8005c70:	80bb      	strh	r3, [r7, #4]
 8005c72:	460b      	mov	r3, r1
 8005c74:	807b      	strh	r3, [r7, #2]
 8005c76:	4613      	mov	r3, r2
 8005c78:	803b      	strh	r3, [r7, #0]
  // column address set
  TFT9341_SendCommand(0x2A); // CASET
 8005c7a:	202a      	movs	r0, #42	; 0x2a
 8005c7c:	f7ff fe3a 	bl	80058f4 <TFT9341_SendCommand>
  {
    uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8005c80:	88fb      	ldrh	r3, [r7, #6]
 8005c82:	0a1b      	lsrs	r3, r3, #8
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	733b      	strb	r3, [r7, #12]
 8005c8a:	88fb      	ldrh	r3, [r7, #6]
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	737b      	strb	r3, [r7, #13]
 8005c90:	887b      	ldrh	r3, [r7, #2]
 8005c92:	0a1b      	lsrs	r3, r3, #8
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	73bb      	strb	r3, [r7, #14]
 8005c9a:	887b      	ldrh	r3, [r7, #2]
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	73fb      	strb	r3, [r7, #15]
    TFT9341_WriteData(data, sizeof(data));
 8005ca0:	f107 030c 	add.w	r3, r7, #12
 8005ca4:	2104      	movs	r1, #4
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f7ff ffaa 	bl	8005c00 <TFT9341_WriteData>
  }

  // row address set
  TFT9341_SendCommand(0x2B); // RASET
 8005cac:	202b      	movs	r0, #43	; 0x2b
 8005cae:	f7ff fe21 	bl	80058f4 <TFT9341_SendCommand>
  {
    uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8005cb2:	88bb      	ldrh	r3, [r7, #4]
 8005cb4:	0a1b      	lsrs	r3, r3, #8
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	723b      	strb	r3, [r7, #8]
 8005cbc:	88bb      	ldrh	r3, [r7, #4]
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	727b      	strb	r3, [r7, #9]
 8005cc2:	883b      	ldrh	r3, [r7, #0]
 8005cc4:	0a1b      	lsrs	r3, r3, #8
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	72bb      	strb	r3, [r7, #10]
 8005ccc:	883b      	ldrh	r3, [r7, #0]
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	72fb      	strb	r3, [r7, #11]
    TFT9341_WriteData(data, sizeof(data));
 8005cd2:	f107 0308 	add.w	r3, r7, #8
 8005cd6:	2104      	movs	r1, #4
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7ff ff91 	bl	8005c00 <TFT9341_WriteData>
  }

  // write to RAM
  TFT9341_SendCommand(0x2C); // RAMWR
 8005cde:	202c      	movs	r0, #44	; 0x2c
 8005ce0:	f7ff fe08 	bl	80058f4 <TFT9341_SendCommand>
}
 8005ce4:	bf00      	nop
 8005ce6:	3714      	adds	r7, #20
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	bd90      	pop	{r4, r7, pc}

08005cec <TFT9341_FillScreen>:
//      HAL_SPI_Transmit(&hspi2, data, 2, HAL_MAX_DELAY);
//  }
}
// ---------------------------------------------------------------------------------
void TFT9341_FillScreen(uint16_t color)
{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	80fb      	strh	r3, [r7, #6]
	// With DMA
	uint32_t i, n;
	  TFT9341_SetAddrWindow(0, 0, TFT9341_WIDTH-1, TFT9341_HEIGHT-1);
 8005cf6:	4b21      	ldr	r3, [pc, #132]	; (8005d7c <TFT9341_FillScreen+0x90>)
 8005cf8:	881b      	ldrh	r3, [r3, #0]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	4b20      	ldr	r3, [pc, #128]	; (8005d80 <TFT9341_FillScreen+0x94>)
 8005d00:	881b      	ldrh	r3, [r3, #0]
 8005d02:	3b01      	subs	r3, #1
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	2100      	movs	r1, #0
 8005d08:	2000      	movs	r0, #0
 8005d0a:	f7ff ffa7 	bl	8005c5c <TFT9341_SetAddrWindow>
	  for(i=0;i<3200;i++)
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60fb      	str	r3, [r7, #12]
 8005d12:	e011      	b.n	8005d38 <TFT9341_FillScreen+0x4c>
	  {
	    frm_buf[i*2] = color >> 8;
 8005d14:	88fb      	ldrh	r3, [r7, #6]
 8005d16:	0a1b      	lsrs	r3, r3, #8
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	b2d1      	uxtb	r1, r2
 8005d20:	4a18      	ldr	r2, [pc, #96]	; (8005d84 <TFT9341_FillScreen+0x98>)
 8005d22:	54d1      	strb	r1, [r2, r3]
	    frm_buf[i*2+1] = color & 0xFF;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	3301      	adds	r3, #1
 8005d2a:	88fa      	ldrh	r2, [r7, #6]
 8005d2c:	b2d1      	uxtb	r1, r2
 8005d2e:	4a15      	ldr	r2, [pc, #84]	; (8005d84 <TFT9341_FillScreen+0x98>)
 8005d30:	54d1      	strb	r1, [r2, r3]
	  for(i=0;i<3200;i++)
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	3301      	adds	r3, #1
 8005d36:	60fb      	str	r3, [r7, #12]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
 8005d3e:	d3e9      	bcc.n	8005d14 <TFT9341_FillScreen+0x28>
	  }
	  n = 6400;
 8005d40:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8005d44:	60bb      	str	r3, [r7, #8]
	  DC_DATA();
 8005d46:	2201      	movs	r2, #1
 8005d48:	2140      	movs	r1, #64	; 0x40
 8005d4a:	480f      	ldr	r0, [pc, #60]	; (8005d88 <TFT9341_FillScreen+0x9c>)
 8005d4c:	f001 fa50 	bl	80071f0 <HAL_GPIO_WritePin>
	  dma_spi_cnt = 24;
 8005d50:	4b0e      	ldr	r3, [pc, #56]	; (8005d8c <TFT9341_FillScreen+0xa0>)
 8005d52:	2218      	movs	r2, #24
 8005d54:	601a      	str	r2, [r3, #0]
	  HAL_SPI_Transmit_DMA(&hspi2, frm_buf, n);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	b29b      	uxth	r3, r3
 8005d5a:	461a      	mov	r2, r3
 8005d5c:	4909      	ldr	r1, [pc, #36]	; (8005d84 <TFT9341_FillScreen+0x98>)
 8005d5e:	480c      	ldr	r0, [pc, #48]	; (8005d90 <TFT9341_FillScreen+0xa4>)
 8005d60:	f005 fbfe 	bl	800b560 <HAL_SPI_Transmit_DMA>
	  while(!dma_spi_fl) {}
 8005d64:	bf00      	nop
 8005d66:	4b0b      	ldr	r3, [pc, #44]	; (8005d94 <TFT9341_FillScreen+0xa8>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d0fb      	beq.n	8005d66 <TFT9341_FillScreen+0x7a>
	  dma_spi_fl=0;
 8005d6e:	4b09      	ldr	r3, [pc, #36]	; (8005d94 <TFT9341_FillScreen+0xa8>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	701a      	strb	r2, [r3, #0]

	///////////////////////////////////////////////////////////////////////////
	//   Without DMA
//  TFT9341_FillRect(0, 0, TFT9341_WIDTH-1, TFT9341_HEIGHT-1, color);
}
 8005d74:	bf00      	nop
 8005d76:	3710      	adds	r7, #16
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	20010e5c 	.word	0x20010e5c
 8005d80:	20010e50 	.word	0x20010e50
 8005d84:	200007b4 	.word	0x200007b4
 8005d88:	40021000 	.word	0x40021000
 8005d8c:	20000004 	.word	0x20000004
 8005d90:	2000a190 	.word	0x2000a190
 8005d94:	200007a8 	.word	0x200007a8

08005d98 <TFT9341_DrawPixel>:
{
	return HAL_RNG_GetRandomNumber(&hrng)&0x0000FFFF;
}
// ---------------------------------------------------------------------------------
void TFT9341_DrawPixel(int x, int y, uint16_t color)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	4613      	mov	r3, r2
 8005da4:	80fb      	strh	r3, [r7, #6]
	if((x<0)||(y<0)||(x>=TFT9341_WIDTH)||(y>=TFT9341_HEIGHT)) return;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	db28      	blt.n	8005dfe <TFT9341_DrawPixel+0x66>
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	db25      	blt.n	8005dfe <TFT9341_DrawPixel+0x66>
 8005db2:	4b15      	ldr	r3, [pc, #84]	; (8005e08 <TFT9341_DrawPixel+0x70>)
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	461a      	mov	r2, r3
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	da1f      	bge.n	8005dfe <TFT9341_DrawPixel+0x66>
 8005dbe:	4b13      	ldr	r3, [pc, #76]	; (8005e0c <TFT9341_DrawPixel+0x74>)
 8005dc0:	881b      	ldrh	r3, [r3, #0]
 8005dc2:	461a      	mov	r2, r3
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	da19      	bge.n	8005dfe <TFT9341_DrawPixel+0x66>
	TFT9341_SetAddrWindow(x,y,x,y);
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	b298      	uxth	r0, r3
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	b299      	uxth	r1, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	b29a      	uxth	r2, r3
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	b29b      	uxth	r3, r3
 8005dda:	f7ff ff3f 	bl	8005c5c <TFT9341_SetAddrWindow>
	TFT9341_SendCommand(0x2C);
 8005dde:	202c      	movs	r0, #44	; 0x2c
 8005de0:	f7ff fd88 	bl	80058f4 <TFT9341_SendCommand>
	TFT9341_SendData(color>>8);
 8005de4:	88fb      	ldrh	r3, [r7, #6]
 8005de6:	0a1b      	lsrs	r3, r3, #8
 8005de8:	b29b      	uxth	r3, r3
 8005dea:	b2db      	uxtb	r3, r3
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7ff fd67 	bl	80058c0 <TFT9341_SendData>
	TFT9341_SendData(color & 0xFF);
 8005df2:	88fb      	ldrh	r3, [r7, #6]
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7ff fd62 	bl	80058c0 <TFT9341_SendData>
 8005dfc:	e000      	b.n	8005e00 <TFT9341_DrawPixel+0x68>
	if((x<0)||(y<0)||(x>=TFT9341_WIDTH)||(y>=TFT9341_HEIGHT)) return;
 8005dfe:	bf00      	nop
}
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	20010e5c 	.word	0x20010e5c
 8005e0c:	20010e50 	.word	0x20010e50

08005e10 <TFT9341_SetTextColor>:
		TFT9341_DrawPixel(x0-y,y0-x,color);
	}
}
// ---------------------------------------------------------------------------------
void TFT9341_SetTextColor(uint16_t color)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	4603      	mov	r3, r0
 8005e18:	80fb      	strh	r3, [r7, #6]
  lcdprop.TextColor=color;
 8005e1a:	4a04      	ldr	r2, [pc, #16]	; (8005e2c <TFT9341_SetTextColor+0x1c>)
 8005e1c:	88fb      	ldrh	r3, [r7, #6]
 8005e1e:	8013      	strh	r3, [r2, #0]
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	20010e54 	.word	0x20010e54

08005e30 <TFT9341_SetBackColor>:
// ---------------------------------------------------------------------------------
void TFT9341_SetBackColor(uint16_t color)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	4603      	mov	r3, r0
 8005e38:	80fb      	strh	r3, [r7, #6]
  lcdprop.BackColor=color;
 8005e3a:	4a04      	ldr	r2, [pc, #16]	; (8005e4c <TFT9341_SetBackColor+0x1c>)
 8005e3c:	88fb      	ldrh	r3, [r7, #6]
 8005e3e:	8053      	strh	r3, [r2, #2]
}
 8005e40:	bf00      	nop
 8005e42:	370c      	adds	r7, #12
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	20010e54 	.word	0x20010e54

08005e50 <TFT9341_DrawChar>:
{
  lcdprop.pFont=pFonts;
}
// ---------------------------------------------------------------------------------
void TFT9341_DrawChar(uint16_t x, uint16_t y, uint8_t c)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b08a      	sub	sp, #40	; 0x28
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	4603      	mov	r3, r0
 8005e58:	80fb      	strh	r3, [r7, #6]
 8005e5a:	460b      	mov	r3, r1
 8005e5c:	80bb      	strh	r3, [r7, #4]
 8005e5e:	4613      	mov	r3, r2
 8005e60:	70fb      	strb	r3, [r7, #3]
  uint32_t i = 0, j = 0;
 8005e62:	2300      	movs	r3, #0
 8005e64:	627b      	str	r3, [r7, #36]	; 0x24
 8005e66:	2300      	movs	r3, #0
 8005e68:	623b      	str	r3, [r7, #32]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *c_t;
  uint8_t *pchar;
  uint32_t line=0;
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	61fb      	str	r3, [r7, #28]
  height = lcdprop.pFont->Height;
 8005e6e:	4b4e      	ldr	r3, [pc, #312]	; (8005fa8 <TFT9341_DrawChar+0x158>)
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	88db      	ldrh	r3, [r3, #6]
 8005e74:	837b      	strh	r3, [r7, #26]
  width  = lcdprop.pFont->Width;
 8005e76:	4b4c      	ldr	r3, [pc, #304]	; (8005fa8 <TFT9341_DrawChar+0x158>)
 8005e78:	685b      	ldr	r3, [r3, #4]
 8005e7a:	889b      	ldrh	r3, [r3, #4]
 8005e7c:	833b      	strh	r3, [r7, #24]
  offset = 8 *((width + 7)/8) -  width ;
 8005e7e:	8b3b      	ldrh	r3, [r7, #24]
 8005e80:	3307      	adds	r3, #7
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	da00      	bge.n	8005e88 <TFT9341_DrawChar+0x38>
 8005e86:	3307      	adds	r3, #7
 8005e88:	10db      	asrs	r3, r3, #3
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	b2da      	uxtb	r2, r3
 8005e90:	8b3b      	ldrh	r3, [r7, #24]
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	1ad3      	subs	r3, r2, r3
 8005e96:	75fb      	strb	r3, [r7, #23]
  c_t = (uint8_t*) &(lcdprop.pFont->table[(c-' ') * lcdprop.pFont->Height * ((lcdprop.pFont->Width + 7) / 8)]);
 8005e98:	4b43      	ldr	r3, [pc, #268]	; (8005fa8 <TFT9341_DrawChar+0x158>)
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	78fb      	ldrb	r3, [r7, #3]
 8005ea0:	3b20      	subs	r3, #32
 8005ea2:	4941      	ldr	r1, [pc, #260]	; (8005fa8 <TFT9341_DrawChar+0x158>)
 8005ea4:	6849      	ldr	r1, [r1, #4]
 8005ea6:	88c9      	ldrh	r1, [r1, #6]
 8005ea8:	fb01 f103 	mul.w	r1, r1, r3
 8005eac:	4b3e      	ldr	r3, [pc, #248]	; (8005fa8 <TFT9341_DrawChar+0x158>)
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	889b      	ldrh	r3, [r3, #4]
 8005eb2:	3307      	adds	r3, #7
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	da00      	bge.n	8005eba <TFT9341_DrawChar+0x6a>
 8005eb8:	3307      	adds	r3, #7
 8005eba:	10db      	asrs	r3, r3, #3
 8005ebc:	fb03 f301 	mul.w	r3, r3, r1
 8005ec0:	4413      	add	r3, r2
 8005ec2:	613b      	str	r3, [r7, #16]
  for(i = 0; i < height; i++)
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ec8:	e065      	b.n	8005f96 <TFT9341_DrawChar+0x146>
  {
    pchar = ((uint8_t *)c_t + (width + 7)/8 * i);
 8005eca:	8b3b      	ldrh	r3, [r7, #24]
 8005ecc:	3307      	adds	r3, #7
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	da00      	bge.n	8005ed4 <TFT9341_DrawChar+0x84>
 8005ed2:	3307      	adds	r3, #7
 8005ed4:	10db      	asrs	r3, r3, #3
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	fb03 f302 	mul.w	r3, r3, r2
 8005ede:	693a      	ldr	r2, [r7, #16]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	60fb      	str	r3, [r7, #12]
    switch(((width + 7)/8))
 8005ee4:	8b3b      	ldrh	r3, [r7, #24]
 8005ee6:	3307      	adds	r3, #7
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	da00      	bge.n	8005eee <TFT9341_DrawChar+0x9e>
 8005eec:	3307      	adds	r3, #7
 8005eee:	10db      	asrs	r3, r3, #3
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d002      	beq.n	8005efa <TFT9341_DrawChar+0xaa>
 8005ef4:	2b02      	cmp	r3, #2
 8005ef6:	d004      	beq.n	8005f02 <TFT9341_DrawChar+0xb2>
 8005ef8:	e00c      	b.n	8005f14 <TFT9341_DrawChar+0xc4>
    {
      case 1:
          line =  pchar[0];
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	781b      	ldrb	r3, [r3, #0]
 8005efe:	61fb      	str	r3, [r7, #28]
          break;
 8005f00:	e016      	b.n	8005f30 <TFT9341_DrawChar+0xe0>
      case 2:
          line =  (pchar[0]<< 8) | pchar[1];
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	021b      	lsls	r3, r3, #8
 8005f08:	68fa      	ldr	r2, [r7, #12]
 8005f0a:	3201      	adds	r2, #1
 8005f0c:	7812      	ldrb	r2, [r2, #0]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	61fb      	str	r3, [r7, #28]
          break;
 8005f12:	e00d      	b.n	8005f30 <TFT9341_DrawChar+0xe0>
      case 3:
      default:
        line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	781b      	ldrb	r3, [r3, #0]
 8005f18:	041a      	lsls	r2, r3, #16
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	3301      	adds	r3, #1
 8005f1e:	781b      	ldrb	r3, [r3, #0]
 8005f20:	021b      	lsls	r3, r3, #8
 8005f22:	4313      	orrs	r3, r2
 8005f24:	68fa      	ldr	r2, [r7, #12]
 8005f26:	3202      	adds	r2, #2
 8005f28:	7812      	ldrb	r2, [r2, #0]
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	61fb      	str	r3, [r7, #28]
        break;
 8005f2e:	bf00      	nop
    }
    for (j = 0; j < width; j++)
 8005f30:	2300      	movs	r3, #0
 8005f32:	623b      	str	r3, [r7, #32]
 8005f34:	e025      	b.n	8005f82 <TFT9341_DrawChar+0x132>
    {
      if(line & (1 << (width- j + offset- 1)))
 8005f36:	8b3a      	ldrh	r2, [r7, #24]
 8005f38:	6a3b      	ldr	r3, [r7, #32]
 8005f3a:	1ad2      	subs	r2, r2, r3
 8005f3c:	7dfb      	ldrb	r3, [r7, #23]
 8005f3e:	4413      	add	r3, r2
 8005f40:	3b01      	subs	r3, #1
 8005f42:	2201      	movs	r2, #1
 8005f44:	fa02 f303 	lsl.w	r3, r2, r3
 8005f48:	461a      	mov	r2, r3
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00a      	beq.n	8005f68 <TFT9341_DrawChar+0x118>
      {
        TFT9341_DrawPixel((x + j), y, lcdprop.TextColor);
 8005f52:	88fa      	ldrh	r2, [r7, #6]
 8005f54:	6a3b      	ldr	r3, [r7, #32]
 8005f56:	4413      	add	r3, r2
 8005f58:	4618      	mov	r0, r3
 8005f5a:	88bb      	ldrh	r3, [r7, #4]
 8005f5c:	4a12      	ldr	r2, [pc, #72]	; (8005fa8 <TFT9341_DrawChar+0x158>)
 8005f5e:	8812      	ldrh	r2, [r2, #0]
 8005f60:	4619      	mov	r1, r3
 8005f62:	f7ff ff19 	bl	8005d98 <TFT9341_DrawPixel>
 8005f66:	e009      	b.n	8005f7c <TFT9341_DrawChar+0x12c>
      }
      else
      {
        TFT9341_DrawPixel((x + j), y, lcdprop.BackColor);
 8005f68:	88fa      	ldrh	r2, [r7, #6]
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	4618      	mov	r0, r3
 8005f70:	88bb      	ldrh	r3, [r7, #4]
 8005f72:	4a0d      	ldr	r2, [pc, #52]	; (8005fa8 <TFT9341_DrawChar+0x158>)
 8005f74:	8852      	ldrh	r2, [r2, #2]
 8005f76:	4619      	mov	r1, r3
 8005f78:	f7ff ff0e 	bl	8005d98 <TFT9341_DrawPixel>
    for (j = 0; j < width; j++)
 8005f7c:	6a3b      	ldr	r3, [r7, #32]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	623b      	str	r3, [r7, #32]
 8005f82:	8b3b      	ldrh	r3, [r7, #24]
 8005f84:	6a3a      	ldr	r2, [r7, #32]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d3d5      	bcc.n	8005f36 <TFT9341_DrawChar+0xe6>
      }
    }
    y++;
 8005f8a:	88bb      	ldrh	r3, [r7, #4]
 8005f8c:	3301      	adds	r3, #1
 8005f8e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8005f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f92:	3301      	adds	r3, #1
 8005f94:	627b      	str	r3, [r7, #36]	; 0x24
 8005f96:	8b7b      	ldrh	r3, [r7, #26]
 8005f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d395      	bcc.n	8005eca <TFT9341_DrawChar+0x7a>
  }
}
 8005f9e:	bf00      	nop
 8005fa0:	bf00      	nop
 8005fa2:	3728      	adds	r7, #40	; 0x28
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	20010e54 	.word	0x20010e54

08005fac <TFT9341_String>:
// ---------------------------------------------------------------------------------
void TFT9341_String(uint16_t x,uint16_t y, char *str)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	603a      	str	r2, [r7, #0]
 8005fb6:	80fb      	strh	r3, [r7, #6]
 8005fb8:	460b      	mov	r3, r1
 8005fba:	80bb      	strh	r3, [r7, #4]
  while(*str)
 8005fbc:	e00f      	b.n	8005fde <TFT9341_String+0x32>
  {
    TFT9341_DrawChar(x,y,str[0]);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	781a      	ldrb	r2, [r3, #0]
 8005fc2:	88b9      	ldrh	r1, [r7, #4]
 8005fc4:	88fb      	ldrh	r3, [r7, #6]
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f7ff ff42 	bl	8005e50 <TFT9341_DrawChar>
    x+=lcdprop.pFont->Width;
 8005fcc:	4b08      	ldr	r3, [pc, #32]	; (8005ff0 <TFT9341_String+0x44>)
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	889a      	ldrh	r2, [r3, #4]
 8005fd2:	88fb      	ldrh	r3, [r7, #6]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	80fb      	strh	r3, [r7, #6]
    (void)*str++;
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	3301      	adds	r3, #1
 8005fdc:	603b      	str	r3, [r7, #0]
  while(*str)
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	781b      	ldrb	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1eb      	bne.n	8005fbe <TFT9341_String+0x12>
  }
}
 8005fe6:	bf00      	nop
 8005fe8:	bf00      	nop
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}
 8005ff0:	20010e54 	.word	0x20010e54

08005ff4 <TFT9341_SetRotation>:
// ---------------------------------------------------------------------------------
void TFT9341_SetRotation(uint8_t r)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b082      	sub	sp, #8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	71fb      	strb	r3, [r7, #7]
  TFT9341_SendCommand(0x36);
 8005ffe:	2036      	movs	r0, #54	; 0x36
 8006000:	f7ff fc78 	bl	80058f4 <TFT9341_SendCommand>
  switch(r)
 8006004:	79fb      	ldrb	r3, [r7, #7]
 8006006:	2b03      	cmp	r3, #3
 8006008:	d836      	bhi.n	8006078 <TFT9341_SetRotation+0x84>
 800600a:	a201      	add	r2, pc, #4	; (adr r2, 8006010 <TFT9341_SetRotation+0x1c>)
 800600c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006010:	08006021 	.word	0x08006021
 8006014:	08006037 	.word	0x08006037
 8006018:	0800604d 	.word	0x0800604d
 800601c:	08006063 	.word	0x08006063
  {
    case 0:
      TFT9341_SendData(0x48);
 8006020:	2048      	movs	r0, #72	; 0x48
 8006022:	f7ff fc4d 	bl	80058c0 <TFT9341_SendData>
      TFT9341_WIDTH = 240;
 8006026:	4b16      	ldr	r3, [pc, #88]	; (8006080 <TFT9341_SetRotation+0x8c>)
 8006028:	22f0      	movs	r2, #240	; 0xf0
 800602a:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 320;
 800602c:	4b15      	ldr	r3, [pc, #84]	; (8006084 <TFT9341_SetRotation+0x90>)
 800602e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006032:	801a      	strh	r2, [r3, #0]
      break;
 8006034:	e020      	b.n	8006078 <TFT9341_SetRotation+0x84>
    case 1:
      TFT9341_SendData(0x28);
 8006036:	2028      	movs	r0, #40	; 0x28
 8006038:	f7ff fc42 	bl	80058c0 <TFT9341_SendData>
      TFT9341_WIDTH = 320;
 800603c:	4b10      	ldr	r3, [pc, #64]	; (8006080 <TFT9341_SetRotation+0x8c>)
 800603e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006042:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 240;
 8006044:	4b0f      	ldr	r3, [pc, #60]	; (8006084 <TFT9341_SetRotation+0x90>)
 8006046:	22f0      	movs	r2, #240	; 0xf0
 8006048:	801a      	strh	r2, [r3, #0]
      break;
 800604a:	e015      	b.n	8006078 <TFT9341_SetRotation+0x84>
    case 2:
      TFT9341_SendData(0x88);
 800604c:	2088      	movs	r0, #136	; 0x88
 800604e:	f7ff fc37 	bl	80058c0 <TFT9341_SendData>
      TFT9341_WIDTH = 240;
 8006052:	4b0b      	ldr	r3, [pc, #44]	; (8006080 <TFT9341_SetRotation+0x8c>)
 8006054:	22f0      	movs	r2, #240	; 0xf0
 8006056:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 320;
 8006058:	4b0a      	ldr	r3, [pc, #40]	; (8006084 <TFT9341_SetRotation+0x90>)
 800605a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800605e:	801a      	strh	r2, [r3, #0]
      break;
 8006060:	e00a      	b.n	8006078 <TFT9341_SetRotation+0x84>
    case 3:
      TFT9341_SendData(0xE8);
 8006062:	20e8      	movs	r0, #232	; 0xe8
 8006064:	f7ff fc2c 	bl	80058c0 <TFT9341_SendData>
      TFT9341_WIDTH = 320;
 8006068:	4b05      	ldr	r3, [pc, #20]	; (8006080 <TFT9341_SetRotation+0x8c>)
 800606a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800606e:	801a      	strh	r2, [r3, #0]
      TFT9341_HEIGHT = 240;
 8006070:	4b04      	ldr	r3, [pc, #16]	; (8006084 <TFT9341_SetRotation+0x90>)
 8006072:	22f0      	movs	r2, #240	; 0xf0
 8006074:	801a      	strh	r2, [r3, #0]
      break;
 8006076:	bf00      	nop
  }
}
 8006078:	bf00      	nop
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	20010e5c 	.word	0x20010e5c
 8006084:	20010e50 	.word	0x20010e50

08006088 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006088:	f8df d034 	ldr.w	sp, [pc, #52]	; 80060c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800608c:	480d      	ldr	r0, [pc, #52]	; (80060c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800608e:	490e      	ldr	r1, [pc, #56]	; (80060c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006090:	4a0e      	ldr	r2, [pc, #56]	; (80060cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006092:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006094:	e002      	b.n	800609c <LoopCopyDataInit>

08006096 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006096:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006098:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800609a:	3304      	adds	r3, #4

0800609c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800609c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800609e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80060a0:	d3f9      	bcc.n	8006096 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80060a2:	4a0b      	ldr	r2, [pc, #44]	; (80060d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80060a4:	4c0b      	ldr	r4, [pc, #44]	; (80060d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80060a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80060a8:	e001      	b.n	80060ae <LoopFillZerobss>

080060aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80060aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80060ac:	3204      	adds	r2, #4

080060ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80060ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80060b0:	d3fb      	bcc.n	80060aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80060b2:	f7ff fa69 	bl	8005588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80060b6:	f011 fc01 	bl	80178bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80060ba:	f7fd f90b 	bl	80032d4 <main>
  bx  lr    
 80060be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80060c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80060c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80060c8:	20000398 	.word	0x20000398
  ldr r2, =_sidata
 80060cc:	0801f46c 	.word	0x0801f46c
  ldr r2, =_sbss
 80060d0:	20000398 	.word	0x20000398
  ldr r4, =_ebss
 80060d4:	20014800 	.word	0x20014800

080060d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80060d8:	e7fe      	b.n	80060d8 <ADC_IRQHandler>
	...

080060dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80060e0:	4b0e      	ldr	r3, [pc, #56]	; (800611c <HAL_Init+0x40>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4a0d      	ldr	r2, [pc, #52]	; (800611c <HAL_Init+0x40>)
 80060e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80060ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80060ec:	4b0b      	ldr	r3, [pc, #44]	; (800611c <HAL_Init+0x40>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a0a      	ldr	r2, [pc, #40]	; (800611c <HAL_Init+0x40>)
 80060f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80060f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80060f8:	4b08      	ldr	r3, [pc, #32]	; (800611c <HAL_Init+0x40>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a07      	ldr	r2, [pc, #28]	; (800611c <HAL_Init+0x40>)
 80060fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006102:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006104:	2003      	movs	r0, #3
 8006106:	f000 f920 	bl	800634a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800610a:	200f      	movs	r0, #15
 800610c:	f7ff f8bc 	bl	8005288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006110:	f7fe fe3e 	bl	8004d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006114:	2300      	movs	r3, #0
}
 8006116:	4618      	mov	r0, r3
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	40023c00 	.word	0x40023c00

08006120 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006120:	b480      	push	{r7}
 8006122:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006124:	4b06      	ldr	r3, [pc, #24]	; (8006140 <HAL_IncTick+0x20>)
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	461a      	mov	r2, r3
 800612a:	4b06      	ldr	r3, [pc, #24]	; (8006144 <HAL_IncTick+0x24>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4413      	add	r3, r2
 8006130:	4a04      	ldr	r2, [pc, #16]	; (8006144 <HAL_IncTick+0x24>)
 8006132:	6013      	str	r3, [r2, #0]
}
 8006134:	bf00      	nop
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	20000038 	.word	0x20000038
 8006144:	20010e60 	.word	0x20010e60

08006148 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006148:	b480      	push	{r7}
 800614a:	af00      	add	r7, sp, #0
  return uwTick;
 800614c:	4b03      	ldr	r3, [pc, #12]	; (800615c <HAL_GetTick+0x14>)
 800614e:	681b      	ldr	r3, [r3, #0]
}
 8006150:	4618      	mov	r0, r3
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	20010e60 	.word	0x20010e60

08006160 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006168:	f7ff ffee 	bl	8006148 <HAL_GetTick>
 800616c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006178:	d005      	beq.n	8006186 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800617a:	4b0a      	ldr	r3, [pc, #40]	; (80061a4 <HAL_Delay+0x44>)
 800617c:	781b      	ldrb	r3, [r3, #0]
 800617e:	461a      	mov	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4413      	add	r3, r2
 8006184:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006186:	bf00      	nop
 8006188:	f7ff ffde 	bl	8006148 <HAL_GetTick>
 800618c:	4602      	mov	r2, r0
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	429a      	cmp	r2, r3
 8006196:	d8f7      	bhi.n	8006188 <HAL_Delay+0x28>
  {
  }
}
 8006198:	bf00      	nop
 800619a:	bf00      	nop
 800619c:	3710      	adds	r7, #16
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}
 80061a2:	bf00      	nop
 80061a4:	20000038 	.word	0x20000038

080061a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f003 0307 	and.w	r3, r3, #7
 80061b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061b8:	4b0c      	ldr	r3, [pc, #48]	; (80061ec <__NVIC_SetPriorityGrouping+0x44>)
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80061c4:	4013      	ands	r3, r2
 80061c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80061d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80061d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80061da:	4a04      	ldr	r2, [pc, #16]	; (80061ec <__NVIC_SetPriorityGrouping+0x44>)
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	60d3      	str	r3, [r2, #12]
}
 80061e0:	bf00      	nop
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr
 80061ec:	e000ed00 	.word	0xe000ed00

080061f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80061f0:	b480      	push	{r7}
 80061f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80061f4:	4b04      	ldr	r3, [pc, #16]	; (8006208 <__NVIC_GetPriorityGrouping+0x18>)
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	0a1b      	lsrs	r3, r3, #8
 80061fa:	f003 0307 	and.w	r3, r3, #7
}
 80061fe:	4618      	mov	r0, r3
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr
 8006208:	e000ed00 	.word	0xe000ed00

0800620c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	4603      	mov	r3, r0
 8006214:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800621a:	2b00      	cmp	r3, #0
 800621c:	db0b      	blt.n	8006236 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800621e:	79fb      	ldrb	r3, [r7, #7]
 8006220:	f003 021f 	and.w	r2, r3, #31
 8006224:	4907      	ldr	r1, [pc, #28]	; (8006244 <__NVIC_EnableIRQ+0x38>)
 8006226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800622a:	095b      	lsrs	r3, r3, #5
 800622c:	2001      	movs	r0, #1
 800622e:	fa00 f202 	lsl.w	r2, r0, r2
 8006232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006236:	bf00      	nop
 8006238:	370c      	adds	r7, #12
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	e000e100 	.word	0xe000e100

08006248 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	4603      	mov	r3, r0
 8006250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006256:	2b00      	cmp	r3, #0
 8006258:	db12      	blt.n	8006280 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800625a:	79fb      	ldrb	r3, [r7, #7]
 800625c:	f003 021f 	and.w	r2, r3, #31
 8006260:	490a      	ldr	r1, [pc, #40]	; (800628c <__NVIC_DisableIRQ+0x44>)
 8006262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006266:	095b      	lsrs	r3, r3, #5
 8006268:	2001      	movs	r0, #1
 800626a:	fa00 f202 	lsl.w	r2, r0, r2
 800626e:	3320      	adds	r3, #32
 8006270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006274:	f3bf 8f4f 	dsb	sy
}
 8006278:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800627a:	f3bf 8f6f 	isb	sy
}
 800627e:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8006280:	bf00      	nop
 8006282:	370c      	adds	r7, #12
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr
 800628c:	e000e100 	.word	0xe000e100

08006290 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	4603      	mov	r3, r0
 8006298:	6039      	str	r1, [r7, #0]
 800629a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800629c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	db0a      	blt.n	80062ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	b2da      	uxtb	r2, r3
 80062a8:	490c      	ldr	r1, [pc, #48]	; (80062dc <__NVIC_SetPriority+0x4c>)
 80062aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062ae:	0112      	lsls	r2, r2, #4
 80062b0:	b2d2      	uxtb	r2, r2
 80062b2:	440b      	add	r3, r1
 80062b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80062b8:	e00a      	b.n	80062d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	b2da      	uxtb	r2, r3
 80062be:	4908      	ldr	r1, [pc, #32]	; (80062e0 <__NVIC_SetPriority+0x50>)
 80062c0:	79fb      	ldrb	r3, [r7, #7]
 80062c2:	f003 030f 	and.w	r3, r3, #15
 80062c6:	3b04      	subs	r3, #4
 80062c8:	0112      	lsls	r2, r2, #4
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	440b      	add	r3, r1
 80062ce:	761a      	strb	r2, [r3, #24]
}
 80062d0:	bf00      	nop
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	e000e100 	.word	0xe000e100
 80062e0:	e000ed00 	.word	0xe000ed00

080062e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b089      	sub	sp, #36	; 0x24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	60f8      	str	r0, [r7, #12]
 80062ec:	60b9      	str	r1, [r7, #8]
 80062ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f003 0307 	and.w	r3, r3, #7
 80062f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	f1c3 0307 	rsb	r3, r3, #7
 80062fe:	2b04      	cmp	r3, #4
 8006300:	bf28      	it	cs
 8006302:	2304      	movcs	r3, #4
 8006304:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	3304      	adds	r3, #4
 800630a:	2b06      	cmp	r3, #6
 800630c:	d902      	bls.n	8006314 <NVIC_EncodePriority+0x30>
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	3b03      	subs	r3, #3
 8006312:	e000      	b.n	8006316 <NVIC_EncodePriority+0x32>
 8006314:	2300      	movs	r3, #0
 8006316:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006318:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	fa02 f303 	lsl.w	r3, r2, r3
 8006322:	43da      	mvns	r2, r3
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	401a      	ands	r2, r3
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800632c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	fa01 f303 	lsl.w	r3, r1, r3
 8006336:	43d9      	mvns	r1, r3
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800633c:	4313      	orrs	r3, r2
         );
}
 800633e:	4618      	mov	r0, r3
 8006340:	3724      	adds	r7, #36	; 0x24
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800634a:	b580      	push	{r7, lr}
 800634c:	b082      	sub	sp, #8
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f7ff ff28 	bl	80061a8 <__NVIC_SetPriorityGrouping>
}
 8006358:	bf00      	nop
 800635a:	3708      	adds	r7, #8
 800635c:	46bd      	mov	sp, r7
 800635e:	bd80      	pop	{r7, pc}

08006360 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006360:	b580      	push	{r7, lr}
 8006362:	b086      	sub	sp, #24
 8006364:	af00      	add	r7, sp, #0
 8006366:	4603      	mov	r3, r0
 8006368:	60b9      	str	r1, [r7, #8]
 800636a:	607a      	str	r2, [r7, #4]
 800636c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800636e:	2300      	movs	r3, #0
 8006370:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006372:	f7ff ff3d 	bl	80061f0 <__NVIC_GetPriorityGrouping>
 8006376:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006378:	687a      	ldr	r2, [r7, #4]
 800637a:	68b9      	ldr	r1, [r7, #8]
 800637c:	6978      	ldr	r0, [r7, #20]
 800637e:	f7ff ffb1 	bl	80062e4 <NVIC_EncodePriority>
 8006382:	4602      	mov	r2, r0
 8006384:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006388:	4611      	mov	r1, r2
 800638a:	4618      	mov	r0, r3
 800638c:	f7ff ff80 	bl	8006290 <__NVIC_SetPriority>
}
 8006390:	bf00      	nop
 8006392:	3718      	adds	r7, #24
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	4603      	mov	r3, r0
 80063a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80063a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7ff ff30 	bl	800620c <__NVIC_EnableIRQ>
}
 80063ac:	bf00      	nop
 80063ae:	3708      	adds	r7, #8
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	4603      	mov	r3, r0
 80063bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80063be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7ff ff40 	bl	8006248 <__NVIC_DisableIRQ>
}
 80063c8:	bf00      	nop
 80063ca:	3708      	adds	r7, #8
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b086      	sub	sp, #24
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80063d8:	2300      	movs	r3, #0
 80063da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80063dc:	f7ff feb4 	bl	8006148 <HAL_GetTick>
 80063e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d101      	bne.n	80063ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80063e8:	2301      	movs	r3, #1
 80063ea:	e099      	b.n	8006520 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2202      	movs	r2, #2
 80063f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f022 0201 	bic.w	r2, r2, #1
 800640a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800640c:	e00f      	b.n	800642e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800640e:	f7ff fe9b 	bl	8006148 <HAL_GetTick>
 8006412:	4602      	mov	r2, r0
 8006414:	693b      	ldr	r3, [r7, #16]
 8006416:	1ad3      	subs	r3, r2, r3
 8006418:	2b05      	cmp	r3, #5
 800641a:	d908      	bls.n	800642e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2220      	movs	r2, #32
 8006420:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2203      	movs	r2, #3
 8006426:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e078      	b.n	8006520 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0301 	and.w	r3, r3, #1
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1e8      	bne.n	800640e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	4b38      	ldr	r3, [pc, #224]	; (8006528 <HAL_DMA_Init+0x158>)
 8006448:	4013      	ands	r3, r2
 800644a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	689b      	ldr	r3, [r3, #8]
 8006454:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800645a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006466:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	699b      	ldr	r3, [r3, #24]
 800646c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006472:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800647a:	697a      	ldr	r2, [r7, #20]
 800647c:	4313      	orrs	r3, r2
 800647e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	2b04      	cmp	r3, #4
 8006486:	d107      	bne.n	8006498 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006490:	4313      	orrs	r3, r2
 8006492:	697a      	ldr	r2, [r7, #20]
 8006494:	4313      	orrs	r3, r2
 8006496:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	697a      	ldr	r2, [r7, #20]
 800649e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	f023 0307 	bic.w	r3, r3, #7
 80064ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	697a      	ldr	r2, [r7, #20]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064be:	2b04      	cmp	r3, #4
 80064c0:	d117      	bne.n	80064f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064c6:	697a      	ldr	r2, [r7, #20]
 80064c8:	4313      	orrs	r3, r2
 80064ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00e      	beq.n	80064f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 fb5f 	bl	8006b98 <DMA_CheckFifoParam>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d008      	beq.n	80064f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2240      	movs	r2, #64	; 0x40
 80064e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80064ee:	2301      	movs	r3, #1
 80064f0:	e016      	b.n	8006520 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	697a      	ldr	r2, [r7, #20]
 80064f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fb16 	bl	8006b2c <DMA_CalcBaseAndBitshift>
 8006500:	4603      	mov	r3, r0
 8006502:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006508:	223f      	movs	r2, #63	; 0x3f
 800650a:	409a      	lsls	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3718      	adds	r7, #24
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	f010803f 	.word	0xf010803f

0800652c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b084      	sub	sp, #16
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d101      	bne.n	800653e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800653a:	2301      	movs	r3, #1
 800653c:	e050      	b.n	80065e0 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b02      	cmp	r3, #2
 8006548:	d101      	bne.n	800654e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800654a:	2302      	movs	r3, #2
 800654c:	e048      	b.n	80065e0 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f022 0201 	bic.w	r2, r2, #1
 800655c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2200      	movs	r2, #0
 8006564:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	2200      	movs	r2, #0
 800656c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2200      	movs	r2, #0
 8006574:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2200      	movs	r2, #0
 800657c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2200      	movs	r2, #0
 8006584:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2221      	movs	r2, #33	; 0x21
 800658c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 facc 	bl	8006b2c <DMA_CalcBaseAndBitshift>
 8006594:	4603      	mov	r3, r0
 8006596:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2200      	movs	r2, #0
 800659c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2200      	movs	r2, #0
 80065b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c0:	223f      	movs	r2, #63	; 0x3f
 80065c2:	409a      	lsls	r2, r3
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80065de:	2300      	movs	r3, #0
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3710      	adds	r7, #16
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b086      	sub	sp, #24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
 80065f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006606:	2b01      	cmp	r3, #1
 8006608:	d101      	bne.n	800660e <HAL_DMA_Start_IT+0x26>
 800660a:	2302      	movs	r3, #2
 800660c:	e040      	b.n	8006690 <HAL_DMA_Start_IT+0xa8>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2201      	movs	r2, #1
 8006612:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800661c:	b2db      	uxtb	r3, r3
 800661e:	2b01      	cmp	r3, #1
 8006620:	d12f      	bne.n	8006682 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2202      	movs	r2, #2
 8006626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2200      	movs	r2, #0
 800662e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	687a      	ldr	r2, [r7, #4]
 8006634:	68b9      	ldr	r1, [r7, #8]
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f000 fa4a 	bl	8006ad0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006640:	223f      	movs	r2, #63	; 0x3f
 8006642:	409a      	lsls	r2, r3
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f042 0216 	orr.w	r2, r2, #22
 8006656:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665c:	2b00      	cmp	r3, #0
 800665e:	d007      	beq.n	8006670 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f042 0208 	orr.w	r2, r2, #8
 800666e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f042 0201 	orr.w	r2, r2, #1
 800667e:	601a      	str	r2, [r3, #0]
 8006680:	e005      	b.n	800668e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800668a:	2302      	movs	r3, #2
 800668c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800668e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006690:	4618      	mov	r0, r3
 8006692:	3718      	adds	r7, #24
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066a4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80066a6:	f7ff fd4f 	bl	8006148 <HAL_GetTick>
 80066aa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066b2:	b2db      	uxtb	r3, r3
 80066b4:	2b02      	cmp	r3, #2
 80066b6:	d008      	beq.n	80066ca <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2280      	movs	r2, #128	; 0x80
 80066bc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2200      	movs	r2, #0
 80066c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e052      	b.n	8006770 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f022 0216 	bic.w	r2, r2, #22
 80066d8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	695a      	ldr	r2, [r3, #20]
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066e8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d103      	bne.n	80066fa <HAL_DMA_Abort+0x62>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d007      	beq.n	800670a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f022 0208 	bic.w	r2, r2, #8
 8006708:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f022 0201 	bic.w	r2, r2, #1
 8006718:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800671a:	e013      	b.n	8006744 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800671c:	f7ff fd14 	bl	8006148 <HAL_GetTick>
 8006720:	4602      	mov	r2, r0
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	1ad3      	subs	r3, r2, r3
 8006726:	2b05      	cmp	r3, #5
 8006728:	d90c      	bls.n	8006744 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2220      	movs	r2, #32
 800672e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2203      	movs	r2, #3
 8006734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006740:	2303      	movs	r3, #3
 8006742:	e015      	b.n	8006770 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f003 0301 	and.w	r3, r3, #1
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1e4      	bne.n	800671c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006756:	223f      	movs	r2, #63	; 0x3f
 8006758:	409a      	lsls	r2, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2201      	movs	r2, #1
 8006762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006778:	b480      	push	{r7}
 800677a:	b083      	sub	sp, #12
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006786:	b2db      	uxtb	r3, r3
 8006788:	2b02      	cmp	r3, #2
 800678a:	d004      	beq.n	8006796 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2280      	movs	r2, #128	; 0x80
 8006790:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	e00c      	b.n	80067b0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2205      	movs	r2, #5
 800679a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681a      	ldr	r2, [r3, #0]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f022 0201 	bic.w	r2, r2, #1
 80067ac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80067ae:	2300      	movs	r3, #0
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ba:	4770      	bx	lr

080067bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b086      	sub	sp, #24
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80067c4:	2300      	movs	r3, #0
 80067c6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80067c8:	4b92      	ldr	r3, [pc, #584]	; (8006a14 <HAL_DMA_IRQHandler+0x258>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a92      	ldr	r2, [pc, #584]	; (8006a18 <HAL_DMA_IRQHandler+0x25c>)
 80067ce:	fba2 2303 	umull	r2, r3, r2, r3
 80067d2:	0a9b      	lsrs	r3, r3, #10
 80067d4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067da:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e6:	2208      	movs	r2, #8
 80067e8:	409a      	lsls	r2, r3
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	4013      	ands	r3, r2
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d01a      	beq.n	8006828 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	f003 0304 	and.w	r3, r3, #4
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d013      	beq.n	8006828 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f022 0204 	bic.w	r2, r2, #4
 800680e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006814:	2208      	movs	r2, #8
 8006816:	409a      	lsls	r2, r3
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006820:	f043 0201 	orr.w	r2, r3, #1
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800682c:	2201      	movs	r2, #1
 800682e:	409a      	lsls	r2, r3
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4013      	ands	r3, r2
 8006834:	2b00      	cmp	r3, #0
 8006836:	d012      	beq.n	800685e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	695b      	ldr	r3, [r3, #20]
 800683e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00b      	beq.n	800685e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800684a:	2201      	movs	r2, #1
 800684c:	409a      	lsls	r2, r3
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006856:	f043 0202 	orr.w	r2, r3, #2
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006862:	2204      	movs	r2, #4
 8006864:	409a      	lsls	r2, r3
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	4013      	ands	r3, r2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d012      	beq.n	8006894 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0302 	and.w	r3, r3, #2
 8006878:	2b00      	cmp	r3, #0
 800687a:	d00b      	beq.n	8006894 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006880:	2204      	movs	r2, #4
 8006882:	409a      	lsls	r2, r3
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800688c:	f043 0204 	orr.w	r2, r3, #4
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006898:	2210      	movs	r2, #16
 800689a:	409a      	lsls	r2, r3
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4013      	ands	r3, r2
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d043      	beq.n	800692c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0308 	and.w	r3, r3, #8
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d03c      	beq.n	800692c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068b6:	2210      	movs	r2, #16
 80068b8:	409a      	lsls	r2, r3
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d018      	beq.n	80068fe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d108      	bne.n	80068ec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d024      	beq.n	800692c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	4798      	blx	r3
 80068ea:	e01f      	b.n	800692c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d01b      	beq.n	800692c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	4798      	blx	r3
 80068fc:	e016      	b.n	800692c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006908:	2b00      	cmp	r3, #0
 800690a:	d107      	bne.n	800691c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f022 0208 	bic.w	r2, r2, #8
 800691a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006920:	2b00      	cmp	r3, #0
 8006922:	d003      	beq.n	800692c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006930:	2220      	movs	r2, #32
 8006932:	409a      	lsls	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	4013      	ands	r3, r2
 8006938:	2b00      	cmp	r3, #0
 800693a:	f000 808e 	beq.w	8006a5a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0310 	and.w	r3, r3, #16
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 8086 	beq.w	8006a5a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006952:	2220      	movs	r2, #32
 8006954:	409a      	lsls	r2, r3
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006960:	b2db      	uxtb	r3, r3
 8006962:	2b05      	cmp	r3, #5
 8006964:	d136      	bne.n	80069d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f022 0216 	bic.w	r2, r2, #22
 8006974:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	695a      	ldr	r2, [r3, #20]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006984:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800698a:	2b00      	cmp	r3, #0
 800698c:	d103      	bne.n	8006996 <HAL_DMA_IRQHandler+0x1da>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006992:	2b00      	cmp	r3, #0
 8006994:	d007      	beq.n	80069a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f022 0208 	bic.w	r2, r2, #8
 80069a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069aa:	223f      	movs	r2, #63	; 0x3f
 80069ac:	409a      	lsls	r2, r3
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2201      	movs	r2, #1
 80069b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d07d      	beq.n	8006ac6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	4798      	blx	r3
        }
        return;
 80069d2:	e078      	b.n	8006ac6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d01c      	beq.n	8006a1c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d108      	bne.n	8006a02 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d030      	beq.n	8006a5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	4798      	blx	r3
 8006a00:	e02b      	b.n	8006a5a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d027      	beq.n	8006a5a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	4798      	blx	r3
 8006a12:	e022      	b.n	8006a5a <HAL_DMA_IRQHandler+0x29e>
 8006a14:	20000008 	.word	0x20000008
 8006a18:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10f      	bne.n	8006a4a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f022 0210 	bic.w	r2, r2, #16
 8006a38:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d003      	beq.n	8006a5a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a56:	6878      	ldr	r0, [r7, #4]
 8006a58:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d032      	beq.n	8006ac8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a66:	f003 0301 	and.w	r3, r3, #1
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d022      	beq.n	8006ab4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2205      	movs	r2, #5
 8006a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	681a      	ldr	r2, [r3, #0]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0201 	bic.w	r2, r2, #1
 8006a84:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006a86:	68bb      	ldr	r3, [r7, #8]
 8006a88:	3301      	adds	r3, #1
 8006a8a:	60bb      	str	r3, [r7, #8]
 8006a8c:	697a      	ldr	r2, [r7, #20]
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d307      	bcc.n	8006aa2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1f2      	bne.n	8006a86 <HAL_DMA_IRQHandler+0x2ca>
 8006aa0:	e000      	b.n	8006aa4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006aa2:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d005      	beq.n	8006ac8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	4798      	blx	r3
 8006ac4:	e000      	b.n	8006ac8 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006ac6:	bf00      	nop
    }
  }
}
 8006ac8:	3718      	adds	r7, #24
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop

08006ad0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b085      	sub	sp, #20
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
 8006adc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006aec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	683a      	ldr	r2, [r7, #0]
 8006af4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	689b      	ldr	r3, [r3, #8]
 8006afa:	2b40      	cmp	r3, #64	; 0x40
 8006afc:	d108      	bne.n	8006b10 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	687a      	ldr	r2, [r7, #4]
 8006b04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006b0e:	e007      	b.n	8006b20 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68ba      	ldr	r2, [r7, #8]
 8006b16:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	60da      	str	r2, [r3, #12]
}
 8006b20:	bf00      	nop
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	3b10      	subs	r3, #16
 8006b3c:	4a14      	ldr	r2, [pc, #80]	; (8006b90 <DMA_CalcBaseAndBitshift+0x64>)
 8006b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b42:	091b      	lsrs	r3, r3, #4
 8006b44:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006b46:	4a13      	ldr	r2, [pc, #76]	; (8006b94 <DMA_CalcBaseAndBitshift+0x68>)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	461a      	mov	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2b03      	cmp	r3, #3
 8006b58:	d909      	bls.n	8006b6e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006b62:	f023 0303 	bic.w	r3, r3, #3
 8006b66:	1d1a      	adds	r2, r3, #4
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	659a      	str	r2, [r3, #88]	; 0x58
 8006b6c:	e007      	b.n	8006b7e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006b76:	f023 0303 	bic.w	r3, r3, #3
 8006b7a:	687a      	ldr	r2, [r7, #4]
 8006b7c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	aaaaaaab 	.word	0xaaaaaaab
 8006b94:	0801ec08 	.word	0x0801ec08

08006b98 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ba0:	2300      	movs	r3, #0
 8006ba2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d11f      	bne.n	8006bf2 <DMA_CheckFifoParam+0x5a>
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	2b03      	cmp	r3, #3
 8006bb6:	d856      	bhi.n	8006c66 <DMA_CheckFifoParam+0xce>
 8006bb8:	a201      	add	r2, pc, #4	; (adr r2, 8006bc0 <DMA_CheckFifoParam+0x28>)
 8006bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bbe:	bf00      	nop
 8006bc0:	08006bd1 	.word	0x08006bd1
 8006bc4:	08006be3 	.word	0x08006be3
 8006bc8:	08006bd1 	.word	0x08006bd1
 8006bcc:	08006c67 	.word	0x08006c67
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d046      	beq.n	8006c6a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006be0:	e043      	b.n	8006c6a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006bea:	d140      	bne.n	8006c6e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006bec:	2301      	movs	r3, #1
 8006bee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006bf0:	e03d      	b.n	8006c6e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	699b      	ldr	r3, [r3, #24]
 8006bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bfa:	d121      	bne.n	8006c40 <DMA_CheckFifoParam+0xa8>
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	2b03      	cmp	r3, #3
 8006c00:	d837      	bhi.n	8006c72 <DMA_CheckFifoParam+0xda>
 8006c02:	a201      	add	r2, pc, #4	; (adr r2, 8006c08 <DMA_CheckFifoParam+0x70>)
 8006c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c08:	08006c19 	.word	0x08006c19
 8006c0c:	08006c1f 	.word	0x08006c1f
 8006c10:	08006c19 	.word	0x08006c19
 8006c14:	08006c31 	.word	0x08006c31
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c1c:	e030      	b.n	8006c80 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c22:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d025      	beq.n	8006c76 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c2e:	e022      	b.n	8006c76 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c34:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006c38:	d11f      	bne.n	8006c7a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006c3e:	e01c      	b.n	8006c7a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d903      	bls.n	8006c4e <DMA_CheckFifoParam+0xb6>
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	2b03      	cmp	r3, #3
 8006c4a:	d003      	beq.n	8006c54 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006c4c:	e018      	b.n	8006c80 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006c4e:	2301      	movs	r3, #1
 8006c50:	73fb      	strb	r3, [r7, #15]
      break;
 8006c52:	e015      	b.n	8006c80 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c58:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00e      	beq.n	8006c7e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006c60:	2301      	movs	r3, #1
 8006c62:	73fb      	strb	r3, [r7, #15]
      break;
 8006c64:	e00b      	b.n	8006c7e <DMA_CheckFifoParam+0xe6>
      break;
 8006c66:	bf00      	nop
 8006c68:	e00a      	b.n	8006c80 <DMA_CheckFifoParam+0xe8>
      break;
 8006c6a:	bf00      	nop
 8006c6c:	e008      	b.n	8006c80 <DMA_CheckFifoParam+0xe8>
      break;
 8006c6e:	bf00      	nop
 8006c70:	e006      	b.n	8006c80 <DMA_CheckFifoParam+0xe8>
      break;
 8006c72:	bf00      	nop
 8006c74:	e004      	b.n	8006c80 <DMA_CheckFifoParam+0xe8>
      break;
 8006c76:	bf00      	nop
 8006c78:	e002      	b.n	8006c80 <DMA_CheckFifoParam+0xe8>
      break;   
 8006c7a:	bf00      	nop
 8006c7c:	e000      	b.n	8006c80 <DMA_CheckFifoParam+0xe8>
      break;
 8006c7e:	bf00      	nop
    }
  } 
  
  return status; 
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3714      	adds	r7, #20
 8006c86:	46bd      	mov	sp, r7
 8006c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8c:	4770      	bx	lr
 8006c8e:	bf00      	nop

08006c90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b089      	sub	sp, #36	; 0x24
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	61fb      	str	r3, [r7, #28]
 8006caa:	e16b      	b.n	8006f84 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006cac:	2201      	movs	r2, #1
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006cc0:	693a      	ldr	r2, [r7, #16]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	f040 815a 	bne.w	8006f7e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	f003 0303 	and.w	r3, r3, #3
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d005      	beq.n	8006ce2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	685b      	ldr	r3, [r3, #4]
 8006cda:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006cde:	2b02      	cmp	r3, #2
 8006ce0:	d130      	bne.n	8006d44 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	689b      	ldr	r3, [r3, #8]
 8006ce6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	005b      	lsls	r3, r3, #1
 8006cec:	2203      	movs	r2, #3
 8006cee:	fa02 f303 	lsl.w	r3, r2, r3
 8006cf2:	43db      	mvns	r3, r3
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	68da      	ldr	r2, [r3, #12]
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	005b      	lsls	r3, r3, #1
 8006d02:	fa02 f303 	lsl.w	r3, r2, r3
 8006d06:	69ba      	ldr	r2, [r7, #24]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	69ba      	ldr	r2, [r7, #24]
 8006d10:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006d18:	2201      	movs	r2, #1
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d20:	43db      	mvns	r3, r3
 8006d22:	69ba      	ldr	r2, [r7, #24]
 8006d24:	4013      	ands	r3, r2
 8006d26:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d28:	683b      	ldr	r3, [r7, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	091b      	lsrs	r3, r3, #4
 8006d2e:	f003 0201 	and.w	r2, r3, #1
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	fa02 f303 	lsl.w	r3, r2, r3
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	4313      	orrs	r3, r2
 8006d3c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	f003 0303 	and.w	r3, r3, #3
 8006d4c:	2b03      	cmp	r3, #3
 8006d4e:	d017      	beq.n	8006d80 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	68db      	ldr	r3, [r3, #12]
 8006d54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	2203      	movs	r2, #3
 8006d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d60:	43db      	mvns	r3, r3
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	4013      	ands	r3, r2
 8006d66:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	689a      	ldr	r2, [r3, #8]
 8006d6c:	69fb      	ldr	r3, [r7, #28]
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	fa02 f303 	lsl.w	r3, r2, r3
 8006d74:	69ba      	ldr	r2, [r7, #24]
 8006d76:	4313      	orrs	r3, r2
 8006d78:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	69ba      	ldr	r2, [r7, #24]
 8006d7e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	f003 0303 	and.w	r3, r3, #3
 8006d88:	2b02      	cmp	r3, #2
 8006d8a:	d123      	bne.n	8006dd4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	08da      	lsrs	r2, r3, #3
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3208      	adds	r2, #8
 8006d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	f003 0307 	and.w	r3, r3, #7
 8006da0:	009b      	lsls	r3, r3, #2
 8006da2:	220f      	movs	r2, #15
 8006da4:	fa02 f303 	lsl.w	r3, r2, r3
 8006da8:	43db      	mvns	r3, r3
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	4013      	ands	r3, r2
 8006dae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	691a      	ldr	r2, [r3, #16]
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	08da      	lsrs	r2, r3, #3
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	3208      	adds	r2, #8
 8006dce:	69b9      	ldr	r1, [r7, #24]
 8006dd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006dda:	69fb      	ldr	r3, [r7, #28]
 8006ddc:	005b      	lsls	r3, r3, #1
 8006dde:	2203      	movs	r2, #3
 8006de0:	fa02 f303 	lsl.w	r3, r2, r3
 8006de4:	43db      	mvns	r3, r3
 8006de6:	69ba      	ldr	r2, [r7, #24]
 8006de8:	4013      	ands	r3, r2
 8006dea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f003 0203 	and.w	r2, r3, #3
 8006df4:	69fb      	ldr	r3, [r7, #28]
 8006df6:	005b      	lsls	r3, r3, #1
 8006df8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dfc:	69ba      	ldr	r2, [r7, #24]
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	69ba      	ldr	r2, [r7, #24]
 8006e06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	f000 80b4 	beq.w	8006f7e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e16:	2300      	movs	r3, #0
 8006e18:	60fb      	str	r3, [r7, #12]
 8006e1a:	4b60      	ldr	r3, [pc, #384]	; (8006f9c <HAL_GPIO_Init+0x30c>)
 8006e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1e:	4a5f      	ldr	r2, [pc, #380]	; (8006f9c <HAL_GPIO_Init+0x30c>)
 8006e20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e24:	6453      	str	r3, [r2, #68]	; 0x44
 8006e26:	4b5d      	ldr	r3, [pc, #372]	; (8006f9c <HAL_GPIO_Init+0x30c>)
 8006e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e2e:	60fb      	str	r3, [r7, #12]
 8006e30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e32:	4a5b      	ldr	r2, [pc, #364]	; (8006fa0 <HAL_GPIO_Init+0x310>)
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	089b      	lsrs	r3, r3, #2
 8006e38:	3302      	adds	r3, #2
 8006e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	f003 0303 	and.w	r3, r3, #3
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	220f      	movs	r2, #15
 8006e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e4e:	43db      	mvns	r3, r3
 8006e50:	69ba      	ldr	r2, [r7, #24]
 8006e52:	4013      	ands	r3, r2
 8006e54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a52      	ldr	r2, [pc, #328]	; (8006fa4 <HAL_GPIO_Init+0x314>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d02b      	beq.n	8006eb6 <HAL_GPIO_Init+0x226>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a51      	ldr	r2, [pc, #324]	; (8006fa8 <HAL_GPIO_Init+0x318>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d025      	beq.n	8006eb2 <HAL_GPIO_Init+0x222>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a50      	ldr	r2, [pc, #320]	; (8006fac <HAL_GPIO_Init+0x31c>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d01f      	beq.n	8006eae <HAL_GPIO_Init+0x21e>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a4f      	ldr	r2, [pc, #316]	; (8006fb0 <HAL_GPIO_Init+0x320>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d019      	beq.n	8006eaa <HAL_GPIO_Init+0x21a>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a4e      	ldr	r2, [pc, #312]	; (8006fb4 <HAL_GPIO_Init+0x324>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d013      	beq.n	8006ea6 <HAL_GPIO_Init+0x216>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a4d      	ldr	r2, [pc, #308]	; (8006fb8 <HAL_GPIO_Init+0x328>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d00d      	beq.n	8006ea2 <HAL_GPIO_Init+0x212>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a4c      	ldr	r2, [pc, #304]	; (8006fbc <HAL_GPIO_Init+0x32c>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d007      	beq.n	8006e9e <HAL_GPIO_Init+0x20e>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a4b      	ldr	r2, [pc, #300]	; (8006fc0 <HAL_GPIO_Init+0x330>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d101      	bne.n	8006e9a <HAL_GPIO_Init+0x20a>
 8006e96:	2307      	movs	r3, #7
 8006e98:	e00e      	b.n	8006eb8 <HAL_GPIO_Init+0x228>
 8006e9a:	2308      	movs	r3, #8
 8006e9c:	e00c      	b.n	8006eb8 <HAL_GPIO_Init+0x228>
 8006e9e:	2306      	movs	r3, #6
 8006ea0:	e00a      	b.n	8006eb8 <HAL_GPIO_Init+0x228>
 8006ea2:	2305      	movs	r3, #5
 8006ea4:	e008      	b.n	8006eb8 <HAL_GPIO_Init+0x228>
 8006ea6:	2304      	movs	r3, #4
 8006ea8:	e006      	b.n	8006eb8 <HAL_GPIO_Init+0x228>
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e004      	b.n	8006eb8 <HAL_GPIO_Init+0x228>
 8006eae:	2302      	movs	r3, #2
 8006eb0:	e002      	b.n	8006eb8 <HAL_GPIO_Init+0x228>
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e000      	b.n	8006eb8 <HAL_GPIO_Init+0x228>
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	69fa      	ldr	r2, [r7, #28]
 8006eba:	f002 0203 	and.w	r2, r2, #3
 8006ebe:	0092      	lsls	r2, r2, #2
 8006ec0:	4093      	lsls	r3, r2
 8006ec2:	69ba      	ldr	r2, [r7, #24]
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006ec8:	4935      	ldr	r1, [pc, #212]	; (8006fa0 <HAL_GPIO_Init+0x310>)
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	089b      	lsrs	r3, r3, #2
 8006ece:	3302      	adds	r3, #2
 8006ed0:	69ba      	ldr	r2, [r7, #24]
 8006ed2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006ed6:	4b3b      	ldr	r3, [pc, #236]	; (8006fc4 <HAL_GPIO_Init+0x334>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	43db      	mvns	r3, r3
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d003      	beq.n	8006efa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006ef2:	69ba      	ldr	r2, [r7, #24]
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	4313      	orrs	r3, r2
 8006ef8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006efa:	4a32      	ldr	r2, [pc, #200]	; (8006fc4 <HAL_GPIO_Init+0x334>)
 8006efc:	69bb      	ldr	r3, [r7, #24]
 8006efe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006f00:	4b30      	ldr	r3, [pc, #192]	; (8006fc4 <HAL_GPIO_Init+0x334>)
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	43db      	mvns	r3, r3
 8006f0a:	69ba      	ldr	r2, [r7, #24]
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d003      	beq.n	8006f24 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006f1c:	69ba      	ldr	r2, [r7, #24]
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	4313      	orrs	r3, r2
 8006f22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006f24:	4a27      	ldr	r2, [pc, #156]	; (8006fc4 <HAL_GPIO_Init+0x334>)
 8006f26:	69bb      	ldr	r3, [r7, #24]
 8006f28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006f2a:	4b26      	ldr	r3, [pc, #152]	; (8006fc4 <HAL_GPIO_Init+0x334>)
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	43db      	mvns	r3, r3
 8006f34:	69ba      	ldr	r2, [r7, #24]
 8006f36:	4013      	ands	r3, r2
 8006f38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d003      	beq.n	8006f4e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006f46:	69ba      	ldr	r2, [r7, #24]
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006f4e:	4a1d      	ldr	r2, [pc, #116]	; (8006fc4 <HAL_GPIO_Init+0x334>)
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006f54:	4b1b      	ldr	r3, [pc, #108]	; (8006fc4 <HAL_GPIO_Init+0x334>)
 8006f56:	68db      	ldr	r3, [r3, #12]
 8006f58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	43db      	mvns	r3, r3
 8006f5e:	69ba      	ldr	r2, [r7, #24]
 8006f60:	4013      	ands	r3, r2
 8006f62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d003      	beq.n	8006f78 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006f70:	69ba      	ldr	r2, [r7, #24]
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	4313      	orrs	r3, r2
 8006f76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006f78:	4a12      	ldr	r2, [pc, #72]	; (8006fc4 <HAL_GPIO_Init+0x334>)
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f7e:	69fb      	ldr	r3, [r7, #28]
 8006f80:	3301      	adds	r3, #1
 8006f82:	61fb      	str	r3, [r7, #28]
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	2b0f      	cmp	r3, #15
 8006f88:	f67f ae90 	bls.w	8006cac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006f8c:	bf00      	nop
 8006f8e:	bf00      	nop
 8006f90:	3724      	adds	r7, #36	; 0x24
 8006f92:	46bd      	mov	sp, r7
 8006f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f98:	4770      	bx	lr
 8006f9a:	bf00      	nop
 8006f9c:	40023800 	.word	0x40023800
 8006fa0:	40013800 	.word	0x40013800
 8006fa4:	40020000 	.word	0x40020000
 8006fa8:	40020400 	.word	0x40020400
 8006fac:	40020800 	.word	0x40020800
 8006fb0:	40020c00 	.word	0x40020c00
 8006fb4:	40021000 	.word	0x40021000
 8006fb8:	40021400 	.word	0x40021400
 8006fbc:	40021800 	.word	0x40021800
 8006fc0:	40021c00 	.word	0x40021c00
 8006fc4:	40013c00 	.word	0x40013c00

08006fc8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b087      	sub	sp, #28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
 8006fd0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8006fd6:	2300      	movs	r3, #0
 8006fd8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006fde:	2300      	movs	r3, #0
 8006fe0:	617b      	str	r3, [r7, #20]
 8006fe2:	e0cd      	b.n	8007180 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fec:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006fee:	683a      	ldr	r2, [r7, #0]
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	4013      	ands	r3, r2
 8006ff4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006ff6:	68fa      	ldr	r2, [r7, #12]
 8006ff8:	693b      	ldr	r3, [r7, #16]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	f040 80bd 	bne.w	800717a <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007000:	4a65      	ldr	r2, [pc, #404]	; (8007198 <HAL_GPIO_DeInit+0x1d0>)
 8007002:	697b      	ldr	r3, [r7, #20]
 8007004:	089b      	lsrs	r3, r3, #2
 8007006:	3302      	adds	r3, #2
 8007008:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800700c:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800700e:	697b      	ldr	r3, [r7, #20]
 8007010:	f003 0303 	and.w	r3, r3, #3
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	220f      	movs	r2, #15
 8007018:	fa02 f303 	lsl.w	r3, r2, r3
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	4013      	ands	r3, r2
 8007020:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a5d      	ldr	r2, [pc, #372]	; (800719c <HAL_GPIO_DeInit+0x1d4>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d02b      	beq.n	8007082 <HAL_GPIO_DeInit+0xba>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a5c      	ldr	r2, [pc, #368]	; (80071a0 <HAL_GPIO_DeInit+0x1d8>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d025      	beq.n	800707e <HAL_GPIO_DeInit+0xb6>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a5b      	ldr	r2, [pc, #364]	; (80071a4 <HAL_GPIO_DeInit+0x1dc>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d01f      	beq.n	800707a <HAL_GPIO_DeInit+0xb2>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a5a      	ldr	r2, [pc, #360]	; (80071a8 <HAL_GPIO_DeInit+0x1e0>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d019      	beq.n	8007076 <HAL_GPIO_DeInit+0xae>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a59      	ldr	r2, [pc, #356]	; (80071ac <HAL_GPIO_DeInit+0x1e4>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d013      	beq.n	8007072 <HAL_GPIO_DeInit+0xaa>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a58      	ldr	r2, [pc, #352]	; (80071b0 <HAL_GPIO_DeInit+0x1e8>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d00d      	beq.n	800706e <HAL_GPIO_DeInit+0xa6>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a57      	ldr	r2, [pc, #348]	; (80071b4 <HAL_GPIO_DeInit+0x1ec>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d007      	beq.n	800706a <HAL_GPIO_DeInit+0xa2>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a56      	ldr	r2, [pc, #344]	; (80071b8 <HAL_GPIO_DeInit+0x1f0>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d101      	bne.n	8007066 <HAL_GPIO_DeInit+0x9e>
 8007062:	2307      	movs	r3, #7
 8007064:	e00e      	b.n	8007084 <HAL_GPIO_DeInit+0xbc>
 8007066:	2308      	movs	r3, #8
 8007068:	e00c      	b.n	8007084 <HAL_GPIO_DeInit+0xbc>
 800706a:	2306      	movs	r3, #6
 800706c:	e00a      	b.n	8007084 <HAL_GPIO_DeInit+0xbc>
 800706e:	2305      	movs	r3, #5
 8007070:	e008      	b.n	8007084 <HAL_GPIO_DeInit+0xbc>
 8007072:	2304      	movs	r3, #4
 8007074:	e006      	b.n	8007084 <HAL_GPIO_DeInit+0xbc>
 8007076:	2303      	movs	r3, #3
 8007078:	e004      	b.n	8007084 <HAL_GPIO_DeInit+0xbc>
 800707a:	2302      	movs	r3, #2
 800707c:	e002      	b.n	8007084 <HAL_GPIO_DeInit+0xbc>
 800707e:	2301      	movs	r3, #1
 8007080:	e000      	b.n	8007084 <HAL_GPIO_DeInit+0xbc>
 8007082:	2300      	movs	r3, #0
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	f002 0203 	and.w	r2, r2, #3
 800708a:	0092      	lsls	r2, r2, #2
 800708c:	4093      	lsls	r3, r2
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	429a      	cmp	r2, r3
 8007092:	d132      	bne.n	80070fa <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007094:	4b49      	ldr	r3, [pc, #292]	; (80071bc <HAL_GPIO_DeInit+0x1f4>)
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	43db      	mvns	r3, r3
 800709c:	4947      	ldr	r1, [pc, #284]	; (80071bc <HAL_GPIO_DeInit+0x1f4>)
 800709e:	4013      	ands	r3, r2
 80070a0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80070a2:	4b46      	ldr	r3, [pc, #280]	; (80071bc <HAL_GPIO_DeInit+0x1f4>)
 80070a4:	685a      	ldr	r2, [r3, #4]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	43db      	mvns	r3, r3
 80070aa:	4944      	ldr	r1, [pc, #272]	; (80071bc <HAL_GPIO_DeInit+0x1f4>)
 80070ac:	4013      	ands	r3, r2
 80070ae:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80070b0:	4b42      	ldr	r3, [pc, #264]	; (80071bc <HAL_GPIO_DeInit+0x1f4>)
 80070b2:	689a      	ldr	r2, [r3, #8]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	43db      	mvns	r3, r3
 80070b8:	4940      	ldr	r1, [pc, #256]	; (80071bc <HAL_GPIO_DeInit+0x1f4>)
 80070ba:	4013      	ands	r3, r2
 80070bc:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80070be:	4b3f      	ldr	r3, [pc, #252]	; (80071bc <HAL_GPIO_DeInit+0x1f4>)
 80070c0:	68da      	ldr	r2, [r3, #12]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	43db      	mvns	r3, r3
 80070c6:	493d      	ldr	r1, [pc, #244]	; (80071bc <HAL_GPIO_DeInit+0x1f4>)
 80070c8:	4013      	ands	r3, r2
 80070ca:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80070cc:	697b      	ldr	r3, [r7, #20]
 80070ce:	f003 0303 	and.w	r3, r3, #3
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	220f      	movs	r2, #15
 80070d6:	fa02 f303 	lsl.w	r3, r2, r3
 80070da:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80070dc:	4a2e      	ldr	r2, [pc, #184]	; (8007198 <HAL_GPIO_DeInit+0x1d0>)
 80070de:	697b      	ldr	r3, [r7, #20]
 80070e0:	089b      	lsrs	r3, r3, #2
 80070e2:	3302      	adds	r3, #2
 80070e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	43da      	mvns	r2, r3
 80070ec:	482a      	ldr	r0, [pc, #168]	; (8007198 <HAL_GPIO_DeInit+0x1d0>)
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	089b      	lsrs	r3, r3, #2
 80070f2:	400a      	ands	r2, r1
 80070f4:	3302      	adds	r3, #2
 80070f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	005b      	lsls	r3, r3, #1
 8007102:	2103      	movs	r1, #3
 8007104:	fa01 f303 	lsl.w	r3, r1, r3
 8007108:	43db      	mvns	r3, r3
 800710a:	401a      	ands	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007110:	697b      	ldr	r3, [r7, #20]
 8007112:	08da      	lsrs	r2, r3, #3
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	3208      	adds	r2, #8
 8007118:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800711c:	697b      	ldr	r3, [r7, #20]
 800711e:	f003 0307 	and.w	r3, r3, #7
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	220f      	movs	r2, #15
 8007126:	fa02 f303 	lsl.w	r3, r2, r3
 800712a:	43db      	mvns	r3, r3
 800712c:	697a      	ldr	r2, [r7, #20]
 800712e:	08d2      	lsrs	r2, r2, #3
 8007130:	4019      	ands	r1, r3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	3208      	adds	r2, #8
 8007136:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	68da      	ldr	r2, [r3, #12]
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	005b      	lsls	r3, r3, #1
 8007142:	2103      	movs	r1, #3
 8007144:	fa01 f303 	lsl.w	r3, r1, r3
 8007148:	43db      	mvns	r3, r3
 800714a:	401a      	ands	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	685a      	ldr	r2, [r3, #4]
 8007154:	2101      	movs	r1, #1
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	fa01 f303 	lsl.w	r3, r1, r3
 800715c:	43db      	mvns	r3, r3
 800715e:	401a      	ands	r2, r3
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	689a      	ldr	r2, [r3, #8]
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	005b      	lsls	r3, r3, #1
 800716c:	2103      	movs	r1, #3
 800716e:	fa01 f303 	lsl.w	r3, r1, r3
 8007172:	43db      	mvns	r3, r3
 8007174:	401a      	ands	r2, r3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800717a:	697b      	ldr	r3, [r7, #20]
 800717c:	3301      	adds	r3, #1
 800717e:	617b      	str	r3, [r7, #20]
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	2b0f      	cmp	r3, #15
 8007184:	f67f af2e 	bls.w	8006fe4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007188:	bf00      	nop
 800718a:	bf00      	nop
 800718c:	371c      	adds	r7, #28
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	40013800 	.word	0x40013800
 800719c:	40020000 	.word	0x40020000
 80071a0:	40020400 	.word	0x40020400
 80071a4:	40020800 	.word	0x40020800
 80071a8:	40020c00 	.word	0x40020c00
 80071ac:	40021000 	.word	0x40021000
 80071b0:	40021400 	.word	0x40021400
 80071b4:	40021800 	.word	0x40021800
 80071b8:	40021c00 	.word	0x40021c00
 80071bc:	40013c00 	.word	0x40013c00

080071c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80071c0:	b480      	push	{r7}
 80071c2:	b085      	sub	sp, #20
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	460b      	mov	r3, r1
 80071ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	691a      	ldr	r2, [r3, #16]
 80071d0:	887b      	ldrh	r3, [r7, #2]
 80071d2:	4013      	ands	r3, r2
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d002      	beq.n	80071de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80071d8:	2301      	movs	r3, #1
 80071da:	73fb      	strb	r3, [r7, #15]
 80071dc:	e001      	b.n	80071e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80071de:	2300      	movs	r3, #0
 80071e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80071e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3714      	adds	r7, #20
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
 80071f8:	460b      	mov	r3, r1
 80071fa:	807b      	strh	r3, [r7, #2]
 80071fc:	4613      	mov	r3, r2
 80071fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007200:	787b      	ldrb	r3, [r7, #1]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d003      	beq.n	800720e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007206:	887a      	ldrh	r2, [r7, #2]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800720c:	e003      	b.n	8007216 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800720e:	887b      	ldrh	r3, [r7, #2]
 8007210:	041a      	lsls	r2, r3, #16
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	619a      	str	r2, [r3, #24]
}
 8007216:	bf00      	nop
 8007218:	370c      	adds	r7, #12
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
	...

08007224 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007224:	b580      	push	{r7, lr}
 8007226:	b084      	sub	sp, #16
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d101      	bne.n	8007236 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007232:	2301      	movs	r3, #1
 8007234:	e12b      	b.n	800748e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d106      	bne.n	8007250 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7fd fdcc 	bl	8004de8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2224      	movs	r2, #36	; 0x24
 8007254:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f022 0201 	bic.w	r2, r2, #1
 8007266:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007276:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	681a      	ldr	r2, [r3, #0]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007286:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007288:	f003 f83e 	bl	800a308 <HAL_RCC_GetPCLK1Freq>
 800728c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	4a81      	ldr	r2, [pc, #516]	; (8007498 <HAL_I2C_Init+0x274>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d807      	bhi.n	80072a8 <HAL_I2C_Init+0x84>
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	4a80      	ldr	r2, [pc, #512]	; (800749c <HAL_I2C_Init+0x278>)
 800729c:	4293      	cmp	r3, r2
 800729e:	bf94      	ite	ls
 80072a0:	2301      	movls	r3, #1
 80072a2:	2300      	movhi	r3, #0
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	e006      	b.n	80072b6 <HAL_I2C_Init+0x92>
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	4a7d      	ldr	r2, [pc, #500]	; (80074a0 <HAL_I2C_Init+0x27c>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	bf94      	ite	ls
 80072b0:	2301      	movls	r3, #1
 80072b2:	2300      	movhi	r3, #0
 80072b4:	b2db      	uxtb	r3, r3
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d001      	beq.n	80072be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e0e7      	b.n	800748e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	4a78      	ldr	r2, [pc, #480]	; (80074a4 <HAL_I2C_Init+0x280>)
 80072c2:	fba2 2303 	umull	r2, r3, r2, r3
 80072c6:	0c9b      	lsrs	r3, r3, #18
 80072c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	68ba      	ldr	r2, [r7, #8]
 80072da:	430a      	orrs	r2, r1
 80072dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	6a1b      	ldr	r3, [r3, #32]
 80072e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	4a6a      	ldr	r2, [pc, #424]	; (8007498 <HAL_I2C_Init+0x274>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d802      	bhi.n	80072f8 <HAL_I2C_Init+0xd4>
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	3301      	adds	r3, #1
 80072f6:	e009      	b.n	800730c <HAL_I2C_Init+0xe8>
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80072fe:	fb02 f303 	mul.w	r3, r2, r3
 8007302:	4a69      	ldr	r2, [pc, #420]	; (80074a8 <HAL_I2C_Init+0x284>)
 8007304:	fba2 2303 	umull	r2, r3, r2, r3
 8007308:	099b      	lsrs	r3, r3, #6
 800730a:	3301      	adds	r3, #1
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	6812      	ldr	r2, [r2, #0]
 8007310:	430b      	orrs	r3, r1
 8007312:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800731e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	685b      	ldr	r3, [r3, #4]
 8007326:	495c      	ldr	r1, [pc, #368]	; (8007498 <HAL_I2C_Init+0x274>)
 8007328:	428b      	cmp	r3, r1
 800732a:	d819      	bhi.n	8007360 <HAL_I2C_Init+0x13c>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	1e59      	subs	r1, r3, #1
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	005b      	lsls	r3, r3, #1
 8007336:	fbb1 f3f3 	udiv	r3, r1, r3
 800733a:	1c59      	adds	r1, r3, #1
 800733c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007340:	400b      	ands	r3, r1
 8007342:	2b00      	cmp	r3, #0
 8007344:	d00a      	beq.n	800735c <HAL_I2C_Init+0x138>
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	1e59      	subs	r1, r3, #1
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	005b      	lsls	r3, r3, #1
 8007350:	fbb1 f3f3 	udiv	r3, r1, r3
 8007354:	3301      	adds	r3, #1
 8007356:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800735a:	e051      	b.n	8007400 <HAL_I2C_Init+0x1dc>
 800735c:	2304      	movs	r3, #4
 800735e:	e04f      	b.n	8007400 <HAL_I2C_Init+0x1dc>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	689b      	ldr	r3, [r3, #8]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d111      	bne.n	800738c <HAL_I2C_Init+0x168>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	1e58      	subs	r0, r3, #1
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	6859      	ldr	r1, [r3, #4]
 8007370:	460b      	mov	r3, r1
 8007372:	005b      	lsls	r3, r3, #1
 8007374:	440b      	add	r3, r1
 8007376:	fbb0 f3f3 	udiv	r3, r0, r3
 800737a:	3301      	adds	r3, #1
 800737c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007380:	2b00      	cmp	r3, #0
 8007382:	bf0c      	ite	eq
 8007384:	2301      	moveq	r3, #1
 8007386:	2300      	movne	r3, #0
 8007388:	b2db      	uxtb	r3, r3
 800738a:	e012      	b.n	80073b2 <HAL_I2C_Init+0x18e>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	1e58      	subs	r0, r3, #1
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6859      	ldr	r1, [r3, #4]
 8007394:	460b      	mov	r3, r1
 8007396:	009b      	lsls	r3, r3, #2
 8007398:	440b      	add	r3, r1
 800739a:	0099      	lsls	r1, r3, #2
 800739c:	440b      	add	r3, r1
 800739e:	fbb0 f3f3 	udiv	r3, r0, r3
 80073a2:	3301      	adds	r3, #1
 80073a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	bf0c      	ite	eq
 80073ac:	2301      	moveq	r3, #1
 80073ae:	2300      	movne	r3, #0
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d001      	beq.n	80073ba <HAL_I2C_Init+0x196>
 80073b6:	2301      	movs	r3, #1
 80073b8:	e022      	b.n	8007400 <HAL_I2C_Init+0x1dc>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10e      	bne.n	80073e0 <HAL_I2C_Init+0x1bc>
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	1e58      	subs	r0, r3, #1
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6859      	ldr	r1, [r3, #4]
 80073ca:	460b      	mov	r3, r1
 80073cc:	005b      	lsls	r3, r3, #1
 80073ce:	440b      	add	r3, r1
 80073d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80073d4:	3301      	adds	r3, #1
 80073d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073de:	e00f      	b.n	8007400 <HAL_I2C_Init+0x1dc>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	1e58      	subs	r0, r3, #1
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6859      	ldr	r1, [r3, #4]
 80073e8:	460b      	mov	r3, r1
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	440b      	add	r3, r1
 80073ee:	0099      	lsls	r1, r3, #2
 80073f0:	440b      	add	r3, r1
 80073f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80073f6:	3301      	adds	r3, #1
 80073f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80073fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007400:	6879      	ldr	r1, [r7, #4]
 8007402:	6809      	ldr	r1, [r1, #0]
 8007404:	4313      	orrs	r3, r2
 8007406:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	69da      	ldr	r2, [r3, #28]
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	431a      	orrs	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	430a      	orrs	r2, r1
 8007422:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800742e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	6911      	ldr	r1, [r2, #16]
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	68d2      	ldr	r2, [r2, #12]
 800743a:	4311      	orrs	r1, r2
 800743c:	687a      	ldr	r2, [r7, #4]
 800743e:	6812      	ldr	r2, [r2, #0]
 8007440:	430b      	orrs	r3, r1
 8007442:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	695a      	ldr	r2, [r3, #20]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	431a      	orrs	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	430a      	orrs	r2, r1
 800745e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f042 0201 	orr.w	r2, r2, #1
 800746e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2220      	movs	r2, #32
 800747a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800748c:	2300      	movs	r3, #0
}
 800748e:	4618      	mov	r0, r3
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	000186a0 	.word	0x000186a0
 800749c:	001e847f 	.word	0x001e847f
 80074a0:	003d08ff 	.word	0x003d08ff
 80074a4:	431bde83 	.word	0x431bde83
 80074a8:	10624dd3 	.word	0x10624dd3

080074ac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b088      	sub	sp, #32
 80074b0:	af02      	add	r7, sp, #8
 80074b2:	60f8      	str	r0, [r7, #12]
 80074b4:	607a      	str	r2, [r7, #4]
 80074b6:	461a      	mov	r2, r3
 80074b8:	460b      	mov	r3, r1
 80074ba:	817b      	strh	r3, [r7, #10]
 80074bc:	4613      	mov	r3, r2
 80074be:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80074c0:	f7fe fe42 	bl	8006148 <HAL_GetTick>
 80074c4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	2b20      	cmp	r3, #32
 80074d0:	f040 80e0 	bne.w	8007694 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	2319      	movs	r3, #25
 80074da:	2201      	movs	r2, #1
 80074dc:	4970      	ldr	r1, [pc, #448]	; (80076a0 <HAL_I2C_Master_Transmit+0x1f4>)
 80074de:	68f8      	ldr	r0, [r7, #12]
 80074e0:	f000 ff66 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d001      	beq.n	80074ee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80074ea:	2302      	movs	r3, #2
 80074ec:	e0d3      	b.n	8007696 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074f4:	2b01      	cmp	r3, #1
 80074f6:	d101      	bne.n	80074fc <HAL_I2C_Master_Transmit+0x50>
 80074f8:	2302      	movs	r3, #2
 80074fa:	e0cc      	b.n	8007696 <HAL_I2C_Master_Transmit+0x1ea>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2201      	movs	r2, #1
 8007500:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b01      	cmp	r3, #1
 8007510:	d007      	beq.n	8007522 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	681a      	ldr	r2, [r3, #0]
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f042 0201 	orr.w	r2, r2, #1
 8007520:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007530:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2221      	movs	r2, #33	; 0x21
 8007536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	2210      	movs	r2, #16
 800753e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	2200      	movs	r2, #0
 8007546:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	687a      	ldr	r2, [r7, #4]
 800754c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	893a      	ldrh	r2, [r7, #8]
 8007552:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007558:	b29a      	uxth	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	4a50      	ldr	r2, [pc, #320]	; (80076a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8007562:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007564:	8979      	ldrh	r1, [r7, #10]
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	6a3a      	ldr	r2, [r7, #32]
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f000 fce8 	bl	8007f40 <I2C_MasterRequestWrite>
 8007570:	4603      	mov	r3, r0
 8007572:	2b00      	cmp	r3, #0
 8007574:	d001      	beq.n	800757a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e08d      	b.n	8007696 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800757a:	2300      	movs	r3, #0
 800757c:	613b      	str	r3, [r7, #16]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	695b      	ldr	r3, [r3, #20]
 8007584:	613b      	str	r3, [r7, #16]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	699b      	ldr	r3, [r3, #24]
 800758c:	613b      	str	r3, [r7, #16]
 800758e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8007590:	e066      	b.n	8007660 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	6a39      	ldr	r1, [r7, #32]
 8007596:	68f8      	ldr	r0, [r7, #12]
 8007598:	f000 ffe0 	bl	800855c <I2C_WaitOnTXEFlagUntilTimeout>
 800759c:	4603      	mov	r3, r0
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00d      	beq.n	80075be <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075a6:	2b04      	cmp	r3, #4
 80075a8:	d107      	bne.n	80075ba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e06b      	b.n	8007696 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c2:	781a      	ldrb	r2, [r3, #0]
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ce:	1c5a      	adds	r2, r3, #1
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d8:	b29b      	uxth	r3, r3
 80075da:	3b01      	subs	r3, #1
 80075dc:	b29a      	uxth	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075e6:	3b01      	subs	r3, #1
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	695b      	ldr	r3, [r3, #20]
 80075f4:	f003 0304 	and.w	r3, r3, #4
 80075f8:	2b04      	cmp	r3, #4
 80075fa:	d11b      	bne.n	8007634 <HAL_I2C_Master_Transmit+0x188>
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007600:	2b00      	cmp	r3, #0
 8007602:	d017      	beq.n	8007634 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007608:	781a      	ldrb	r2, [r3, #0]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007614:	1c5a      	adds	r2, r3, #1
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800761e:	b29b      	uxth	r3, r3
 8007620:	3b01      	subs	r3, #1
 8007622:	b29a      	uxth	r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800762c:	3b01      	subs	r3, #1
 800762e:	b29a      	uxth	r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007634:	697a      	ldr	r2, [r7, #20]
 8007636:	6a39      	ldr	r1, [r7, #32]
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f000 ffd0 	bl	80085de <I2C_WaitOnBTFFlagUntilTimeout>
 800763e:	4603      	mov	r3, r0
 8007640:	2b00      	cmp	r3, #0
 8007642:	d00d      	beq.n	8007660 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007648:	2b04      	cmp	r3, #4
 800764a:	d107      	bne.n	800765c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	681a      	ldr	r2, [r3, #0]
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800765a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e01a      	b.n	8007696 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007664:	2b00      	cmp	r3, #0
 8007666:	d194      	bne.n	8007592 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	681a      	ldr	r2, [r3, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007676:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2220      	movs	r2, #32
 800767c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007690:	2300      	movs	r3, #0
 8007692:	e000      	b.n	8007696 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007694:	2302      	movs	r3, #2
  }
}
 8007696:	4618      	mov	r0, r3
 8007698:	3718      	adds	r7, #24
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	00100002 	.word	0x00100002
 80076a4:	ffff0000 	.word	0xffff0000

080076a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b08c      	sub	sp, #48	; 0x30
 80076ac:	af02      	add	r7, sp, #8
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	607a      	str	r2, [r7, #4]
 80076b2:	461a      	mov	r2, r3
 80076b4:	460b      	mov	r3, r1
 80076b6:	817b      	strh	r3, [r7, #10]
 80076b8:	4613      	mov	r3, r2
 80076ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80076bc:	f7fe fd44 	bl	8006148 <HAL_GetTick>
 80076c0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b20      	cmp	r3, #32
 80076cc:	f040 820b 	bne.w	8007ae6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80076d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d2:	9300      	str	r3, [sp, #0]
 80076d4:	2319      	movs	r3, #25
 80076d6:	2201      	movs	r2, #1
 80076d8:	497c      	ldr	r1, [pc, #496]	; (80078cc <HAL_I2C_Master_Receive+0x224>)
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 fe68 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d001      	beq.n	80076ea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80076e6:	2302      	movs	r3, #2
 80076e8:	e1fe      	b.n	8007ae8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d101      	bne.n	80076f8 <HAL_I2C_Master_Receive+0x50>
 80076f4:	2302      	movs	r3, #2
 80076f6:	e1f7      	b.n	8007ae8 <HAL_I2C_Master_Receive+0x440>
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b01      	cmp	r3, #1
 800770c:	d007      	beq.n	800771e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f042 0201 	orr.w	r2, r2, #1
 800771c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800772c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2222      	movs	r2, #34	; 0x22
 8007732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	2210      	movs	r2, #16
 800773a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	687a      	ldr	r2, [r7, #4]
 8007748:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	893a      	ldrh	r2, [r7, #8]
 800774e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007754:	b29a      	uxth	r2, r3
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	4a5c      	ldr	r2, [pc, #368]	; (80078d0 <HAL_I2C_Master_Receive+0x228>)
 800775e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8007760:	8979      	ldrh	r1, [r7, #10]
 8007762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007764:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f000 fc6c 	bl	8008044 <I2C_MasterRequestRead>
 800776c:	4603      	mov	r3, r0
 800776e:	2b00      	cmp	r3, #0
 8007770:	d001      	beq.n	8007776 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e1b8      	b.n	8007ae8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800777a:	2b00      	cmp	r3, #0
 800777c:	d113      	bne.n	80077a6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800777e:	2300      	movs	r3, #0
 8007780:	623b      	str	r3, [r7, #32]
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	695b      	ldr	r3, [r3, #20]
 8007788:	623b      	str	r3, [r7, #32]
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	623b      	str	r3, [r7, #32]
 8007792:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077a2:	601a      	str	r2, [r3, #0]
 80077a4:	e18c      	b.n	8007ac0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d11b      	bne.n	80077e6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80077be:	2300      	movs	r3, #0
 80077c0:	61fb      	str	r3, [r7, #28]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	695b      	ldr	r3, [r3, #20]
 80077c8:	61fb      	str	r3, [r7, #28]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	61fb      	str	r3, [r7, #28]
 80077d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	681a      	ldr	r2, [r3, #0]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80077e2:	601a      	str	r2, [r3, #0]
 80077e4:	e16c      	b.n	8007ac0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d11b      	bne.n	8007826 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681a      	ldr	r2, [r3, #0]
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800780c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800780e:	2300      	movs	r3, #0
 8007810:	61bb      	str	r3, [r7, #24]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	695b      	ldr	r3, [r3, #20]
 8007818:	61bb      	str	r3, [r7, #24]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	61bb      	str	r3, [r7, #24]
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	e14c      	b.n	8007ac0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007834:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007836:	2300      	movs	r3, #0
 8007838:	617b      	str	r3, [r7, #20]
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	695b      	ldr	r3, [r3, #20]
 8007840:	617b      	str	r3, [r7, #20]
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	699b      	ldr	r3, [r3, #24]
 8007848:	617b      	str	r3, [r7, #20]
 800784a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800784c:	e138      	b.n	8007ac0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007852:	2b03      	cmp	r3, #3
 8007854:	f200 80f1 	bhi.w	8007a3a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800785c:	2b01      	cmp	r3, #1
 800785e:	d123      	bne.n	80078a8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007862:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f000 fefb 	bl	8008660 <I2C_WaitOnRXNEFlagUntilTimeout>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d001      	beq.n	8007874 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8007870:	2301      	movs	r3, #1
 8007872:	e139      	b.n	8007ae8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	691a      	ldr	r2, [r3, #16]
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787e:	b2d2      	uxtb	r2, r2
 8007880:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007886:	1c5a      	adds	r2, r3, #1
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007890:	3b01      	subs	r3, #1
 8007892:	b29a      	uxth	r2, r3
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800789c:	b29b      	uxth	r3, r3
 800789e:	3b01      	subs	r3, #1
 80078a0:	b29a      	uxth	r2, r3
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80078a6:	e10b      	b.n	8007ac0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078ac:	2b02      	cmp	r3, #2
 80078ae:	d14e      	bne.n	800794e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	9300      	str	r3, [sp, #0]
 80078b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078b6:	2200      	movs	r2, #0
 80078b8:	4906      	ldr	r1, [pc, #24]	; (80078d4 <HAL_I2C_Master_Receive+0x22c>)
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 fd78 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d008      	beq.n	80078d8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e10e      	b.n	8007ae8 <HAL_I2C_Master_Receive+0x440>
 80078ca:	bf00      	nop
 80078cc:	00100002 	.word	0x00100002
 80078d0:	ffff0000 	.word	0xffff0000
 80078d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	691a      	ldr	r2, [r3, #16]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f2:	b2d2      	uxtb	r2, r2
 80078f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fa:	1c5a      	adds	r2, r3, #1
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007904:	3b01      	subs	r3, #1
 8007906:	b29a      	uxth	r2, r3
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007910:	b29b      	uxth	r3, r3
 8007912:	3b01      	subs	r3, #1
 8007914:	b29a      	uxth	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	691a      	ldr	r2, [r3, #16]
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007924:	b2d2      	uxtb	r2, r2
 8007926:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800792c:	1c5a      	adds	r2, r3, #1
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007936:	3b01      	subs	r3, #1
 8007938:	b29a      	uxth	r2, r3
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007942:	b29b      	uxth	r3, r3
 8007944:	3b01      	subs	r3, #1
 8007946:	b29a      	uxth	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800794c:	e0b8      	b.n	8007ac0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800794e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007950:	9300      	str	r3, [sp, #0]
 8007952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007954:	2200      	movs	r2, #0
 8007956:	4966      	ldr	r1, [pc, #408]	; (8007af0 <HAL_I2C_Master_Receive+0x448>)
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f000 fd29 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d001      	beq.n	8007968 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8007964:	2301      	movs	r3, #1
 8007966:	e0bf      	b.n	8007ae8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	681a      	ldr	r2, [r3, #0]
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007976:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	691a      	ldr	r2, [r3, #16]
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007982:	b2d2      	uxtb	r2, r2
 8007984:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798a:	1c5a      	adds	r2, r3, #1
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007994:	3b01      	subs	r3, #1
 8007996:	b29a      	uxth	r2, r3
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	3b01      	subs	r3, #1
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	9300      	str	r3, [sp, #0]
 80079ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079b0:	2200      	movs	r2, #0
 80079b2:	494f      	ldr	r1, [pc, #316]	; (8007af0 <HAL_I2C_Master_Receive+0x448>)
 80079b4:	68f8      	ldr	r0, [r7, #12]
 80079b6:	f000 fcfb 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 80079ba:	4603      	mov	r3, r0
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d001      	beq.n	80079c4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80079c0:	2301      	movs	r3, #1
 80079c2:	e091      	b.n	8007ae8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	681a      	ldr	r2, [r3, #0]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80079d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	691a      	ldr	r2, [r3, #16]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079de:	b2d2      	uxtb	r2, r2
 80079e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e6:	1c5a      	adds	r2, r3, #1
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079f0:	3b01      	subs	r3, #1
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	3b01      	subs	r3, #1
 8007a00:	b29a      	uxth	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	691a      	ldr	r2, [r3, #16]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a10:	b2d2      	uxtb	r2, r2
 8007a12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a18:	1c5a      	adds	r2, r3, #1
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a22:	3b01      	subs	r3, #1
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	3b01      	subs	r3, #1
 8007a32:	b29a      	uxth	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a38:	e042      	b.n	8007ac0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a3c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f000 fe0e 	bl	8008660 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d001      	beq.n	8007a4e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	e04c      	b.n	8007ae8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	691a      	ldr	r2, [r3, #16]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a58:	b2d2      	uxtb	r2, r2
 8007a5a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a60:	1c5a      	adds	r2, r3, #1
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a6a:	3b01      	subs	r3, #1
 8007a6c:	b29a      	uxth	r2, r3
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	3b01      	subs	r3, #1
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	695b      	ldr	r3, [r3, #20]
 8007a86:	f003 0304 	and.w	r3, r3, #4
 8007a8a:	2b04      	cmp	r3, #4
 8007a8c:	d118      	bne.n	8007ac0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	691a      	ldr	r2, [r3, #16]
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a98:	b2d2      	uxtb	r2, r2
 8007a9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aa0:	1c5a      	adds	r2, r3, #1
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f47f aec2 	bne.w	800784e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2220      	movs	r2, #32
 8007ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	2200      	movs	r2, #0
 8007ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	e000      	b.n	8007ae8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007ae6:	2302      	movs	r3, #2
  }
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3728      	adds	r7, #40	; 0x28
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	00010004 	.word	0x00010004

08007af4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b08c      	sub	sp, #48	; 0x30
 8007af8:	af02      	add	r7, sp, #8
 8007afa:	60f8      	str	r0, [r7, #12]
 8007afc:	4608      	mov	r0, r1
 8007afe:	4611      	mov	r1, r2
 8007b00:	461a      	mov	r2, r3
 8007b02:	4603      	mov	r3, r0
 8007b04:	817b      	strh	r3, [r7, #10]
 8007b06:	460b      	mov	r3, r1
 8007b08:	813b      	strh	r3, [r7, #8]
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8007b0e:	f7fe fb1b 	bl	8006148 <HAL_GetTick>
 8007b12:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b1a:	b2db      	uxtb	r3, r3
 8007b1c:	2b20      	cmp	r3, #32
 8007b1e:	f040 8208 	bne.w	8007f32 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8007b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	2319      	movs	r3, #25
 8007b28:	2201      	movs	r2, #1
 8007b2a:	497b      	ldr	r1, [pc, #492]	; (8007d18 <HAL_I2C_Mem_Read+0x224>)
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f000 fc3f 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 8007b32:	4603      	mov	r3, r0
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d001      	beq.n	8007b3c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8007b38:	2302      	movs	r3, #2
 8007b3a:	e1fb      	b.n	8007f34 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b42:	2b01      	cmp	r3, #1
 8007b44:	d101      	bne.n	8007b4a <HAL_I2C_Mem_Read+0x56>
 8007b46:	2302      	movs	r3, #2
 8007b48:	e1f4      	b.n	8007f34 <HAL_I2C_Mem_Read+0x440>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2201      	movs	r2, #1
 8007b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0301 	and.w	r3, r3, #1
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	d007      	beq.n	8007b70 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f042 0201 	orr.w	r2, r2, #1
 8007b6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	681a      	ldr	r2, [r3, #0]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2222      	movs	r2, #34	; 0x22
 8007b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2240      	movs	r2, #64	; 0x40
 8007b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8007ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	4a5b      	ldr	r2, [pc, #364]	; (8007d1c <HAL_I2C_Mem_Read+0x228>)
 8007bb0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007bb2:	88f8      	ldrh	r0, [r7, #6]
 8007bb4:	893a      	ldrh	r2, [r7, #8]
 8007bb6:	8979      	ldrh	r1, [r7, #10]
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	9301      	str	r3, [sp, #4]
 8007bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bbe:	9300      	str	r3, [sp, #0]
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f000 fb0c 	bl	80081e0 <I2C_RequestMemoryRead>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d001      	beq.n	8007bd2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	e1b0      	b.n	8007f34 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d113      	bne.n	8007c02 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bda:	2300      	movs	r3, #0
 8007bdc:	623b      	str	r3, [r7, #32]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	623b      	str	r3, [r7, #32]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	699b      	ldr	r3, [r3, #24]
 8007bec:	623b      	str	r3, [r7, #32]
 8007bee:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bfe:	601a      	str	r2, [r3, #0]
 8007c00:	e184      	b.n	8007f0c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d11b      	bne.n	8007c42 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c18:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	61fb      	str	r3, [r7, #28]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	695b      	ldr	r3, [r3, #20]
 8007c24:	61fb      	str	r3, [r7, #28]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	699b      	ldr	r3, [r3, #24]
 8007c2c:	61fb      	str	r3, [r7, #28]
 8007c2e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	681a      	ldr	r2, [r3, #0]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c3e:	601a      	str	r2, [r3, #0]
 8007c40:	e164      	b.n	8007f0c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d11b      	bne.n	8007c82 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	681a      	ldr	r2, [r3, #0]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c58:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	681a      	ldr	r2, [r3, #0]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c68:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	61bb      	str	r3, [r7, #24]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	695b      	ldr	r3, [r3, #20]
 8007c74:	61bb      	str	r3, [r7, #24]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	699b      	ldr	r3, [r3, #24]
 8007c7c:	61bb      	str	r3, [r7, #24]
 8007c7e:	69bb      	ldr	r3, [r7, #24]
 8007c80:	e144      	b.n	8007f0c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c82:	2300      	movs	r3, #0
 8007c84:	617b      	str	r3, [r7, #20]
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	695b      	ldr	r3, [r3, #20]
 8007c8c:	617b      	str	r3, [r7, #20]
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	699b      	ldr	r3, [r3, #24]
 8007c94:	617b      	str	r3, [r7, #20]
 8007c96:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8007c98:	e138      	b.n	8007f0c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007c9e:	2b03      	cmp	r3, #3
 8007ca0:	f200 80f1 	bhi.w	8007e86 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ca8:	2b01      	cmp	r3, #1
 8007caa:	d123      	bne.n	8007cf4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f000 fcd5 	bl	8008660 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007cb6:	4603      	mov	r3, r0
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d001      	beq.n	8007cc0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e139      	b.n	8007f34 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	691a      	ldr	r2, [r3, #16]
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cca:	b2d2      	uxtb	r2, r2
 8007ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd2:	1c5a      	adds	r2, r3, #1
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	3b01      	subs	r3, #1
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007cf2:	e10b      	b.n	8007f0c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cf8:	2b02      	cmp	r3, #2
 8007cfa:	d14e      	bne.n	8007d9a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	9300      	str	r3, [sp, #0]
 8007d00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d02:	2200      	movs	r2, #0
 8007d04:	4906      	ldr	r1, [pc, #24]	; (8007d20 <HAL_I2C_Mem_Read+0x22c>)
 8007d06:	68f8      	ldr	r0, [r7, #12]
 8007d08:	f000 fb52 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d008      	beq.n	8007d24 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e10e      	b.n	8007f34 <HAL_I2C_Mem_Read+0x440>
 8007d16:	bf00      	nop
 8007d18:	00100002 	.word	0x00100002
 8007d1c:	ffff0000 	.word	0xffff0000
 8007d20:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681a      	ldr	r2, [r3, #0]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007d32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	691a      	ldr	r2, [r3, #16]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d3e:	b2d2      	uxtb	r2, r2
 8007d40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d50:	3b01      	subs	r3, #1
 8007d52:	b29a      	uxth	r2, r3
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	b29a      	uxth	r2, r3
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	691a      	ldr	r2, [r3, #16]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d70:	b2d2      	uxtb	r2, r2
 8007d72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d78:	1c5a      	adds	r2, r3, #1
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007d82:	3b01      	subs	r3, #1
 8007d84:	b29a      	uxth	r2, r3
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	3b01      	subs	r3, #1
 8007d92:	b29a      	uxth	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007d98:	e0b8      	b.n	8007f0c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da0:	2200      	movs	r2, #0
 8007da2:	4966      	ldr	r1, [pc, #408]	; (8007f3c <HAL_I2C_Mem_Read+0x448>)
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f000 fb03 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d001      	beq.n	8007db4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e0bf      	b.n	8007f34 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007dc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	691a      	ldr	r2, [r3, #16]
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dce:	b2d2      	uxtb	r2, r2
 8007dd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd6:	1c5a      	adds	r2, r3, #1
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007de0:	3b01      	subs	r3, #1
 8007de2:	b29a      	uxth	r2, r3
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	3b01      	subs	r3, #1
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8007df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df8:	9300      	str	r3, [sp, #0]
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	494f      	ldr	r1, [pc, #316]	; (8007f3c <HAL_I2C_Mem_Read+0x448>)
 8007e00:	68f8      	ldr	r0, [r7, #12]
 8007e02:	f000 fad5 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 8007e06:	4603      	mov	r3, r0
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d001      	beq.n	8007e10 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	e091      	b.n	8007f34 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681a      	ldr	r2, [r3, #0]
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007e1e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	691a      	ldr	r2, [r3, #16]
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2a:	b2d2      	uxtb	r2, r2
 8007e2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e32:	1c5a      	adds	r2, r3, #1
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e3c:	3b01      	subs	r3, #1
 8007e3e:	b29a      	uxth	r2, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	3b01      	subs	r3, #1
 8007e4c:	b29a      	uxth	r2, r3
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	691a      	ldr	r2, [r3, #16]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5c:	b2d2      	uxtb	r2, r2
 8007e5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e64:	1c5a      	adds	r2, r3, #1
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	b29a      	uxth	r2, r3
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e7a:	b29b      	uxth	r3, r3
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007e84:	e042      	b.n	8007f0c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e88:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007e8a:	68f8      	ldr	r0, [r7, #12]
 8007e8c:	f000 fbe8 	bl	8008660 <I2C_WaitOnRXNEFlagUntilTimeout>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d001      	beq.n	8007e9a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8007e96:	2301      	movs	r3, #1
 8007e98:	e04c      	b.n	8007f34 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	691a      	ldr	r2, [r3, #16]
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea4:	b2d2      	uxtb	r2, r2
 8007ea6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eac:	1c5a      	adds	r2, r3, #1
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007eb6:	3b01      	subs	r3, #1
 8007eb8:	b29a      	uxth	r2, r3
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ec2:	b29b      	uxth	r3, r3
 8007ec4:	3b01      	subs	r3, #1
 8007ec6:	b29a      	uxth	r2, r3
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	695b      	ldr	r3, [r3, #20]
 8007ed2:	f003 0304 	and.w	r3, r3, #4
 8007ed6:	2b04      	cmp	r3, #4
 8007ed8:	d118      	bne.n	8007f0c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	691a      	ldr	r2, [r3, #16]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ee4:	b2d2      	uxtb	r2, r2
 8007ee6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eec:	1c5a      	adds	r2, r3, #1
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	b29a      	uxth	r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	3b01      	subs	r3, #1
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	f47f aec2 	bne.w	8007c9a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	2220      	movs	r2, #32
 8007f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	e000      	b.n	8007f34 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8007f32:	2302      	movs	r3, #2
  }
}
 8007f34:	4618      	mov	r0, r3
 8007f36:	3728      	adds	r7, #40	; 0x28
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	00010004 	.word	0x00010004

08007f40 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b088      	sub	sp, #32
 8007f44:	af02      	add	r7, sp, #8
 8007f46:	60f8      	str	r0, [r7, #12]
 8007f48:	607a      	str	r2, [r7, #4]
 8007f4a:	603b      	str	r3, [r7, #0]
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f54:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	2b08      	cmp	r3, #8
 8007f5a:	d006      	beq.n	8007f6a <I2C_MasterRequestWrite+0x2a>
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d003      	beq.n	8007f6a <I2C_MasterRequestWrite+0x2a>
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007f68:	d108      	bne.n	8007f7c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f78:	601a      	str	r2, [r3, #0]
 8007f7a:	e00b      	b.n	8007f94 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f80:	2b12      	cmp	r3, #18
 8007f82:	d107      	bne.n	8007f94 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	9300      	str	r3, [sp, #0]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007fa0:	68f8      	ldr	r0, [r7, #12]
 8007fa2:	f000 fa05 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 8007fa6:	4603      	mov	r3, r0
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00d      	beq.n	8007fc8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fba:	d103      	bne.n	8007fc4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007fc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007fc4:	2303      	movs	r3, #3
 8007fc6:	e035      	b.n	8008034 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	691b      	ldr	r3, [r3, #16]
 8007fcc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007fd0:	d108      	bne.n	8007fe4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007fd2:	897b      	ldrh	r3, [r7, #10]
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007fe0:	611a      	str	r2, [r3, #16]
 8007fe2:	e01b      	b.n	800801c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007fe4:	897b      	ldrh	r3, [r7, #10]
 8007fe6:	11db      	asrs	r3, r3, #7
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	f003 0306 	and.w	r3, r3, #6
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	f063 030f 	orn	r3, r3, #15
 8007ff4:	b2da      	uxtb	r2, r3
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007ffc:	683b      	ldr	r3, [r7, #0]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	490e      	ldr	r1, [pc, #56]	; (800803c <I2C_MasterRequestWrite+0xfc>)
 8008002:	68f8      	ldr	r0, [r7, #12]
 8008004:	f000 fa2b 	bl	800845e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e010      	b.n	8008034 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008012:	897b      	ldrh	r3, [r7, #10]
 8008014:	b2da      	uxtb	r2, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	687a      	ldr	r2, [r7, #4]
 8008020:	4907      	ldr	r1, [pc, #28]	; (8008040 <I2C_MasterRequestWrite+0x100>)
 8008022:	68f8      	ldr	r0, [r7, #12]
 8008024:	f000 fa1b 	bl	800845e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008028:	4603      	mov	r3, r0
 800802a:	2b00      	cmp	r3, #0
 800802c:	d001      	beq.n	8008032 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e000      	b.n	8008034 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3718      	adds	r7, #24
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}
 800803c:	00010008 	.word	0x00010008
 8008040:	00010002 	.word	0x00010002

08008044 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b088      	sub	sp, #32
 8008048:	af02      	add	r7, sp, #8
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	607a      	str	r2, [r7, #4]
 800804e:	603b      	str	r3, [r7, #0]
 8008050:	460b      	mov	r3, r1
 8008052:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008058:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008068:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800806a:	697b      	ldr	r3, [r7, #20]
 800806c:	2b08      	cmp	r3, #8
 800806e:	d006      	beq.n	800807e <I2C_MasterRequestRead+0x3a>
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d003      	beq.n	800807e <I2C_MasterRequestRead+0x3a>
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800807c:	d108      	bne.n	8008090 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	e00b      	b.n	80080a8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008094:	2b11      	cmp	r3, #17
 8008096:	d107      	bne.n	80080a8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080a6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	9300      	str	r3, [sp, #0]
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80080b4:	68f8      	ldr	r0, [r7, #12]
 80080b6:	f000 f97b 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00d      	beq.n	80080dc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080ce:	d103      	bne.n	80080d8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080d6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80080d8:	2303      	movs	r3, #3
 80080da:	e079      	b.n	80081d0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	691b      	ldr	r3, [r3, #16]
 80080e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080e4:	d108      	bne.n	80080f8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80080e6:	897b      	ldrh	r3, [r7, #10]
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	f043 0301 	orr.w	r3, r3, #1
 80080ee:	b2da      	uxtb	r2, r3
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	611a      	str	r2, [r3, #16]
 80080f6:	e05f      	b.n	80081b8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80080f8:	897b      	ldrh	r3, [r7, #10]
 80080fa:	11db      	asrs	r3, r3, #7
 80080fc:	b2db      	uxtb	r3, r3
 80080fe:	f003 0306 	and.w	r3, r3, #6
 8008102:	b2db      	uxtb	r3, r3
 8008104:	f063 030f 	orn	r3, r3, #15
 8008108:	b2da      	uxtb	r2, r3
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	4930      	ldr	r1, [pc, #192]	; (80081d8 <I2C_MasterRequestRead+0x194>)
 8008116:	68f8      	ldr	r0, [r7, #12]
 8008118:	f000 f9a1 	bl	800845e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d001      	beq.n	8008126 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e054      	b.n	80081d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008126:	897b      	ldrh	r3, [r7, #10]
 8008128:	b2da      	uxtb	r2, r3
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	687a      	ldr	r2, [r7, #4]
 8008134:	4929      	ldr	r1, [pc, #164]	; (80081dc <I2C_MasterRequestRead+0x198>)
 8008136:	68f8      	ldr	r0, [r7, #12]
 8008138:	f000 f991 	bl	800845e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800813c:	4603      	mov	r3, r0
 800813e:	2b00      	cmp	r3, #0
 8008140:	d001      	beq.n	8008146 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	e044      	b.n	80081d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008146:	2300      	movs	r3, #0
 8008148:	613b      	str	r3, [r7, #16]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	695b      	ldr	r3, [r3, #20]
 8008150:	613b      	str	r3, [r7, #16]
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	613b      	str	r3, [r7, #16]
 800815a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	681a      	ldr	r2, [r3, #0]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800816a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	9300      	str	r3, [sp, #0]
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2200      	movs	r2, #0
 8008174:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	f000 f919 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d00d      	beq.n	80081a0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800818e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008192:	d103      	bne.n	800819c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	f44f 7200 	mov.w	r2, #512	; 0x200
 800819a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800819c:	2303      	movs	r3, #3
 800819e:	e017      	b.n	80081d0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80081a0:	897b      	ldrh	r3, [r7, #10]
 80081a2:	11db      	asrs	r3, r3, #7
 80081a4:	b2db      	uxtb	r3, r3
 80081a6:	f003 0306 	and.w	r3, r3, #6
 80081aa:	b2db      	uxtb	r3, r3
 80081ac:	f063 030e 	orn	r3, r3, #14
 80081b0:	b2da      	uxtb	r2, r3
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	4907      	ldr	r1, [pc, #28]	; (80081dc <I2C_MasterRequestRead+0x198>)
 80081be:	68f8      	ldr	r0, [r7, #12]
 80081c0:	f000 f94d 	bl	800845e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d001      	beq.n	80081ce <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80081ca:	2301      	movs	r3, #1
 80081cc:	e000      	b.n	80081d0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80081ce:	2300      	movs	r3, #0
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	3718      	adds	r7, #24
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}
 80081d8:	00010008 	.word	0x00010008
 80081dc:	00010002 	.word	0x00010002

080081e0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b088      	sub	sp, #32
 80081e4:	af02      	add	r7, sp, #8
 80081e6:	60f8      	str	r0, [r7, #12]
 80081e8:	4608      	mov	r0, r1
 80081ea:	4611      	mov	r1, r2
 80081ec:	461a      	mov	r2, r3
 80081ee:	4603      	mov	r3, r0
 80081f0:	817b      	strh	r3, [r7, #10]
 80081f2:	460b      	mov	r3, r1
 80081f4:	813b      	strh	r3, [r7, #8]
 80081f6:	4613      	mov	r3, r2
 80081f8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008208:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	681a      	ldr	r2, [r3, #0]
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008218:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800821a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821c:	9300      	str	r3, [sp, #0]
 800821e:	6a3b      	ldr	r3, [r7, #32]
 8008220:	2200      	movs	r2, #0
 8008222:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008226:	68f8      	ldr	r0, [r7, #12]
 8008228:	f000 f8c2 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	d00d      	beq.n	800824e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800823c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008240:	d103      	bne.n	800824a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008248:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800824a:	2303      	movs	r3, #3
 800824c:	e0aa      	b.n	80083a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800824e:	897b      	ldrh	r3, [r7, #10]
 8008250:	b2db      	uxtb	r3, r3
 8008252:	461a      	mov	r2, r3
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800825c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800825e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008260:	6a3a      	ldr	r2, [r7, #32]
 8008262:	4952      	ldr	r1, [pc, #328]	; (80083ac <I2C_RequestMemoryRead+0x1cc>)
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f000 f8fa 	bl	800845e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800826a:	4603      	mov	r3, r0
 800826c:	2b00      	cmp	r3, #0
 800826e:	d001      	beq.n	8008274 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	e097      	b.n	80083a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008274:	2300      	movs	r3, #0
 8008276:	617b      	str	r3, [r7, #20]
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	695b      	ldr	r3, [r3, #20]
 800827e:	617b      	str	r3, [r7, #20]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	699b      	ldr	r3, [r3, #24]
 8008286:	617b      	str	r3, [r7, #20]
 8008288:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800828a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800828c:	6a39      	ldr	r1, [r7, #32]
 800828e:	68f8      	ldr	r0, [r7, #12]
 8008290:	f000 f964 	bl	800855c <I2C_WaitOnTXEFlagUntilTimeout>
 8008294:	4603      	mov	r3, r0
 8008296:	2b00      	cmp	r3, #0
 8008298:	d00d      	beq.n	80082b6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800829e:	2b04      	cmp	r3, #4
 80082a0:	d107      	bne.n	80082b2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681a      	ldr	r2, [r3, #0]
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	e076      	b.n	80083a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80082b6:	88fb      	ldrh	r3, [r7, #6]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	d105      	bne.n	80082c8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80082bc:	893b      	ldrh	r3, [r7, #8]
 80082be:	b2da      	uxtb	r2, r3
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	611a      	str	r2, [r3, #16]
 80082c6:	e021      	b.n	800830c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80082c8:	893b      	ldrh	r3, [r7, #8]
 80082ca:	0a1b      	lsrs	r3, r3, #8
 80082cc:	b29b      	uxth	r3, r3
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80082d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082d8:	6a39      	ldr	r1, [r7, #32]
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f000 f93e 	bl	800855c <I2C_WaitOnTXEFlagUntilTimeout>
 80082e0:	4603      	mov	r3, r0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00d      	beq.n	8008302 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ea:	2b04      	cmp	r3, #4
 80082ec:	d107      	bne.n	80082fe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	e050      	b.n	80083a4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8008302:	893b      	ldrh	r3, [r7, #8]
 8008304:	b2da      	uxtb	r2, r3
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800830c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800830e:	6a39      	ldr	r1, [r7, #32]
 8008310:	68f8      	ldr	r0, [r7, #12]
 8008312:	f000 f923 	bl	800855c <I2C_WaitOnTXEFlagUntilTimeout>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00d      	beq.n	8008338 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008320:	2b04      	cmp	r3, #4
 8008322:	d107      	bne.n	8008334 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008332:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	e035      	b.n	80083a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	681a      	ldr	r2, [r3, #0]
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008346:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	6a3b      	ldr	r3, [r7, #32]
 800834e:	2200      	movs	r2, #0
 8008350:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008354:	68f8      	ldr	r0, [r7, #12]
 8008356:	f000 f82b 	bl	80083b0 <I2C_WaitOnFlagUntilTimeout>
 800835a:	4603      	mov	r3, r0
 800835c:	2b00      	cmp	r3, #0
 800835e:	d00d      	beq.n	800837c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800836a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800836e:	d103      	bne.n	8008378 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008376:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008378:	2303      	movs	r3, #3
 800837a:	e013      	b.n	80083a4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800837c:	897b      	ldrh	r3, [r7, #10]
 800837e:	b2db      	uxtb	r3, r3
 8008380:	f043 0301 	orr.w	r3, r3, #1
 8008384:	b2da      	uxtb	r2, r3
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800838c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838e:	6a3a      	ldr	r2, [r7, #32]
 8008390:	4906      	ldr	r1, [pc, #24]	; (80083ac <I2C_RequestMemoryRead+0x1cc>)
 8008392:	68f8      	ldr	r0, [r7, #12]
 8008394:	f000 f863 	bl	800845e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008398:	4603      	mov	r3, r0
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800839e:	2301      	movs	r3, #1
 80083a0:	e000      	b.n	80083a4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3718      	adds	r7, #24
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}
 80083ac:	00010002 	.word	0x00010002

080083b0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	603b      	str	r3, [r7, #0]
 80083bc:	4613      	mov	r3, r2
 80083be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80083c0:	e025      	b.n	800840e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80083c8:	d021      	beq.n	800840e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083ca:	f7fd febd 	bl	8006148 <HAL_GetTick>
 80083ce:	4602      	mov	r2, r0
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	683a      	ldr	r2, [r7, #0]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d302      	bcc.n	80083e0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d116      	bne.n	800840e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2200      	movs	r2, #0
 80083e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2220      	movs	r2, #32
 80083ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fa:	f043 0220 	orr.w	r2, r3, #32
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e023      	b.n	8008456 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	0c1b      	lsrs	r3, r3, #16
 8008412:	b2db      	uxtb	r3, r3
 8008414:	2b01      	cmp	r3, #1
 8008416:	d10d      	bne.n	8008434 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	695b      	ldr	r3, [r3, #20]
 800841e:	43da      	mvns	r2, r3
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	4013      	ands	r3, r2
 8008424:	b29b      	uxth	r3, r3
 8008426:	2b00      	cmp	r3, #0
 8008428:	bf0c      	ite	eq
 800842a:	2301      	moveq	r3, #1
 800842c:	2300      	movne	r3, #0
 800842e:	b2db      	uxtb	r3, r3
 8008430:	461a      	mov	r2, r3
 8008432:	e00c      	b.n	800844e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	699b      	ldr	r3, [r3, #24]
 800843a:	43da      	mvns	r2, r3
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	4013      	ands	r3, r2
 8008440:	b29b      	uxth	r3, r3
 8008442:	2b00      	cmp	r3, #0
 8008444:	bf0c      	ite	eq
 8008446:	2301      	moveq	r3, #1
 8008448:	2300      	movne	r3, #0
 800844a:	b2db      	uxtb	r3, r3
 800844c:	461a      	mov	r2, r3
 800844e:	79fb      	ldrb	r3, [r7, #7]
 8008450:	429a      	cmp	r2, r3
 8008452:	d0b6      	beq.n	80083c2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800845e:	b580      	push	{r7, lr}
 8008460:	b084      	sub	sp, #16
 8008462:	af00      	add	r7, sp, #0
 8008464:	60f8      	str	r0, [r7, #12]
 8008466:	60b9      	str	r1, [r7, #8]
 8008468:	607a      	str	r2, [r7, #4]
 800846a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800846c:	e051      	b.n	8008512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	695b      	ldr	r3, [r3, #20]
 8008474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800847c:	d123      	bne.n	80084c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	681a      	ldr	r2, [r3, #0]
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800848c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008496:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2200      	movs	r2, #0
 800849c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2220      	movs	r2, #32
 80084a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2200      	movs	r2, #0
 80084aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b2:	f043 0204 	orr.w	r2, r3, #4
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80084c2:	2301      	movs	r3, #1
 80084c4:	e046      	b.n	8008554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084cc:	d021      	beq.n	8008512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084ce:	f7fd fe3b 	bl	8006148 <HAL_GetTick>
 80084d2:	4602      	mov	r2, r0
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	1ad3      	subs	r3, r2, r3
 80084d8:	687a      	ldr	r2, [r7, #4]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d302      	bcc.n	80084e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d116      	bne.n	8008512 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2200      	movs	r2, #0
 80084e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2220      	movs	r2, #32
 80084ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2200      	movs	r2, #0
 80084f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fe:	f043 0220 	orr.w	r2, r3, #32
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e020      	b.n	8008554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	0c1b      	lsrs	r3, r3, #16
 8008516:	b2db      	uxtb	r3, r3
 8008518:	2b01      	cmp	r3, #1
 800851a:	d10c      	bne.n	8008536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	695b      	ldr	r3, [r3, #20]
 8008522:	43da      	mvns	r2, r3
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	4013      	ands	r3, r2
 8008528:	b29b      	uxth	r3, r3
 800852a:	2b00      	cmp	r3, #0
 800852c:	bf14      	ite	ne
 800852e:	2301      	movne	r3, #1
 8008530:	2300      	moveq	r3, #0
 8008532:	b2db      	uxtb	r3, r3
 8008534:	e00b      	b.n	800854e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	699b      	ldr	r3, [r3, #24]
 800853c:	43da      	mvns	r2, r3
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	4013      	ands	r3, r2
 8008542:	b29b      	uxth	r3, r3
 8008544:	2b00      	cmp	r3, #0
 8008546:	bf14      	ite	ne
 8008548:	2301      	movne	r3, #1
 800854a:	2300      	moveq	r3, #0
 800854c:	b2db      	uxtb	r3, r3
 800854e:	2b00      	cmp	r3, #0
 8008550:	d18d      	bne.n	800846e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008568:	e02d      	b.n	80085c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f000 f8ce 	bl	800870c <I2C_IsAcknowledgeFailed>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d001      	beq.n	800857a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008576:	2301      	movs	r3, #1
 8008578:	e02d      	b.n	80085d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008580:	d021      	beq.n	80085c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008582:	f7fd fde1 	bl	8006148 <HAL_GetTick>
 8008586:	4602      	mov	r2, r0
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	1ad3      	subs	r3, r2, r3
 800858c:	68ba      	ldr	r2, [r7, #8]
 800858e:	429a      	cmp	r2, r3
 8008590:	d302      	bcc.n	8008598 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d116      	bne.n	80085c6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2200      	movs	r2, #0
 800859c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2220      	movs	r2, #32
 80085a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b2:	f043 0220 	orr.w	r2, r3, #32
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e007      	b.n	80085d6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	695b      	ldr	r3, [r3, #20]
 80085cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085d0:	2b80      	cmp	r3, #128	; 0x80
 80085d2:	d1ca      	bne.n	800856a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	60f8      	str	r0, [r7, #12]
 80085e6:	60b9      	str	r1, [r7, #8]
 80085e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80085ea:	e02d      	b.n	8008648 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f000 f88d 	bl	800870c <I2C_IsAcknowledgeFailed>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d001      	beq.n	80085fc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e02d      	b.n	8008658 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008602:	d021      	beq.n	8008648 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008604:	f7fd fda0 	bl	8006148 <HAL_GetTick>
 8008608:	4602      	mov	r2, r0
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	1ad3      	subs	r3, r2, r3
 800860e:	68ba      	ldr	r2, [r7, #8]
 8008610:	429a      	cmp	r2, r3
 8008612:	d302      	bcc.n	800861a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d116      	bne.n	8008648 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	2200      	movs	r2, #0
 800861e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2220      	movs	r2, #32
 8008624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	2200      	movs	r2, #0
 800862c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008634:	f043 0220 	orr.w	r2, r3, #32
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	2200      	movs	r2, #0
 8008640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008644:	2301      	movs	r3, #1
 8008646:	e007      	b.n	8008658 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	f003 0304 	and.w	r3, r3, #4
 8008652:	2b04      	cmp	r3, #4
 8008654:	d1ca      	bne.n	80085ec <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008656:	2300      	movs	r3, #0
}
 8008658:	4618      	mov	r0, r3
 800865a:	3710      	adds	r7, #16
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}

08008660 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	60f8      	str	r0, [r7, #12]
 8008668:	60b9      	str	r1, [r7, #8]
 800866a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800866c:	e042      	b.n	80086f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	695b      	ldr	r3, [r3, #20]
 8008674:	f003 0310 	and.w	r3, r3, #16
 8008678:	2b10      	cmp	r3, #16
 800867a:	d119      	bne.n	80086b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f06f 0210 	mvn.w	r2, #16
 8008684:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2200      	movs	r2, #0
 800868a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2220      	movs	r2, #32
 8008690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2200      	movs	r2, #0
 8008698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2200      	movs	r2, #0
 80086a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e029      	b.n	8008704 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086b0:	f7fd fd4a 	bl	8006148 <HAL_GetTick>
 80086b4:	4602      	mov	r2, r0
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	429a      	cmp	r2, r3
 80086be:	d302      	bcc.n	80086c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d116      	bne.n	80086f4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2200      	movs	r2, #0
 80086ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2220      	movs	r2, #32
 80086d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086e0:	f043 0220 	orr.w	r2, r3, #32
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	e007      	b.n	8008704 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	695b      	ldr	r3, [r3, #20]
 80086fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086fe:	2b40      	cmp	r3, #64	; 0x40
 8008700:	d1b5      	bne.n	800866e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	695b      	ldr	r3, [r3, #20]
 800871a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800871e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008722:	d11b      	bne.n	800875c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800872c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2220      	movs	r2, #32
 8008738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2200      	movs	r2, #0
 8008740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008748:	f043 0204 	orr.w	r2, r3, #4
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e000      	b.n	800875e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	370c      	adds	r7, #12
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr

0800876a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800876a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800876c:	b08f      	sub	sp, #60	; 0x3c
 800876e:	af0a      	add	r7, sp, #40	; 0x28
 8008770:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d101      	bne.n	800877c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e10f      	b.n	800899c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008788:	b2db      	uxtb	r3, r3
 800878a:	2b00      	cmp	r3, #0
 800878c:	d106      	bne.n	800879c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2200      	movs	r2, #0
 8008792:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f00e fc72 	bl	8017080 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2203      	movs	r2, #3
 80087a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d102      	bne.n	80087b6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4618      	mov	r0, r3
 80087bc:	f004 f80d 	bl	800c7da <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	603b      	str	r3, [r7, #0]
 80087c6:	687e      	ldr	r6, [r7, #4]
 80087c8:	466d      	mov	r5, sp
 80087ca:	f106 0410 	add.w	r4, r6, #16
 80087ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80087d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80087d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80087d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80087d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80087da:	e885 0003 	stmia.w	r5, {r0, r1}
 80087de:	1d33      	adds	r3, r6, #4
 80087e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80087e2:	6838      	ldr	r0, [r7, #0]
 80087e4:	f003 fee4 	bl	800c5b0 <USB_CoreInit>
 80087e8:	4603      	mov	r3, r0
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d005      	beq.n	80087fa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2202      	movs	r2, #2
 80087f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80087f6:	2301      	movs	r3, #1
 80087f8:	e0d0      	b.n	800899c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2100      	movs	r1, #0
 8008800:	4618      	mov	r0, r3
 8008802:	f003 fffb 	bl	800c7fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008806:	2300      	movs	r3, #0
 8008808:	73fb      	strb	r3, [r7, #15]
 800880a:	e04a      	b.n	80088a2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800880c:	7bfa      	ldrb	r2, [r7, #15]
 800880e:	6879      	ldr	r1, [r7, #4]
 8008810:	4613      	mov	r3, r2
 8008812:	00db      	lsls	r3, r3, #3
 8008814:	1a9b      	subs	r3, r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	440b      	add	r3, r1
 800881a:	333d      	adds	r3, #61	; 0x3d
 800881c:	2201      	movs	r2, #1
 800881e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008820:	7bfa      	ldrb	r2, [r7, #15]
 8008822:	6879      	ldr	r1, [r7, #4]
 8008824:	4613      	mov	r3, r2
 8008826:	00db      	lsls	r3, r3, #3
 8008828:	1a9b      	subs	r3, r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	440b      	add	r3, r1
 800882e:	333c      	adds	r3, #60	; 0x3c
 8008830:	7bfa      	ldrb	r2, [r7, #15]
 8008832:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8008834:	7bfa      	ldrb	r2, [r7, #15]
 8008836:	7bfb      	ldrb	r3, [r7, #15]
 8008838:	b298      	uxth	r0, r3
 800883a:	6879      	ldr	r1, [r7, #4]
 800883c:	4613      	mov	r3, r2
 800883e:	00db      	lsls	r3, r3, #3
 8008840:	1a9b      	subs	r3, r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	440b      	add	r3, r1
 8008846:	3342      	adds	r3, #66	; 0x42
 8008848:	4602      	mov	r2, r0
 800884a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800884c:	7bfa      	ldrb	r2, [r7, #15]
 800884e:	6879      	ldr	r1, [r7, #4]
 8008850:	4613      	mov	r3, r2
 8008852:	00db      	lsls	r3, r3, #3
 8008854:	1a9b      	subs	r3, r3, r2
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	440b      	add	r3, r1
 800885a:	333f      	adds	r3, #63	; 0x3f
 800885c:	2200      	movs	r2, #0
 800885e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008860:	7bfa      	ldrb	r2, [r7, #15]
 8008862:	6879      	ldr	r1, [r7, #4]
 8008864:	4613      	mov	r3, r2
 8008866:	00db      	lsls	r3, r3, #3
 8008868:	1a9b      	subs	r3, r3, r2
 800886a:	009b      	lsls	r3, r3, #2
 800886c:	440b      	add	r3, r1
 800886e:	3344      	adds	r3, #68	; 0x44
 8008870:	2200      	movs	r2, #0
 8008872:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008874:	7bfa      	ldrb	r2, [r7, #15]
 8008876:	6879      	ldr	r1, [r7, #4]
 8008878:	4613      	mov	r3, r2
 800887a:	00db      	lsls	r3, r3, #3
 800887c:	1a9b      	subs	r3, r3, r2
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	440b      	add	r3, r1
 8008882:	3348      	adds	r3, #72	; 0x48
 8008884:	2200      	movs	r2, #0
 8008886:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008888:	7bfa      	ldrb	r2, [r7, #15]
 800888a:	6879      	ldr	r1, [r7, #4]
 800888c:	4613      	mov	r3, r2
 800888e:	00db      	lsls	r3, r3, #3
 8008890:	1a9b      	subs	r3, r3, r2
 8008892:	009b      	lsls	r3, r3, #2
 8008894:	440b      	add	r3, r1
 8008896:	3350      	adds	r3, #80	; 0x50
 8008898:	2200      	movs	r2, #0
 800889a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800889c:	7bfb      	ldrb	r3, [r7, #15]
 800889e:	3301      	adds	r3, #1
 80088a0:	73fb      	strb	r3, [r7, #15]
 80088a2:	7bfa      	ldrb	r2, [r7, #15]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685b      	ldr	r3, [r3, #4]
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d3af      	bcc.n	800880c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088ac:	2300      	movs	r3, #0
 80088ae:	73fb      	strb	r3, [r7, #15]
 80088b0:	e044      	b.n	800893c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80088b2:	7bfa      	ldrb	r2, [r7, #15]
 80088b4:	6879      	ldr	r1, [r7, #4]
 80088b6:	4613      	mov	r3, r2
 80088b8:	00db      	lsls	r3, r3, #3
 80088ba:	1a9b      	subs	r3, r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	440b      	add	r3, r1
 80088c0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80088c4:	2200      	movs	r2, #0
 80088c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80088c8:	7bfa      	ldrb	r2, [r7, #15]
 80088ca:	6879      	ldr	r1, [r7, #4]
 80088cc:	4613      	mov	r3, r2
 80088ce:	00db      	lsls	r3, r3, #3
 80088d0:	1a9b      	subs	r3, r3, r2
 80088d2:	009b      	lsls	r3, r3, #2
 80088d4:	440b      	add	r3, r1
 80088d6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80088da:	7bfa      	ldrb	r2, [r7, #15]
 80088dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80088de:	7bfa      	ldrb	r2, [r7, #15]
 80088e0:	6879      	ldr	r1, [r7, #4]
 80088e2:	4613      	mov	r3, r2
 80088e4:	00db      	lsls	r3, r3, #3
 80088e6:	1a9b      	subs	r3, r3, r2
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	440b      	add	r3, r1
 80088ec:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80088f0:	2200      	movs	r2, #0
 80088f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80088f4:	7bfa      	ldrb	r2, [r7, #15]
 80088f6:	6879      	ldr	r1, [r7, #4]
 80088f8:	4613      	mov	r3, r2
 80088fa:	00db      	lsls	r3, r3, #3
 80088fc:	1a9b      	subs	r3, r3, r2
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	440b      	add	r3, r1
 8008902:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008906:	2200      	movs	r2, #0
 8008908:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800890a:	7bfa      	ldrb	r2, [r7, #15]
 800890c:	6879      	ldr	r1, [r7, #4]
 800890e:	4613      	mov	r3, r2
 8008910:	00db      	lsls	r3, r3, #3
 8008912:	1a9b      	subs	r3, r3, r2
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	440b      	add	r3, r1
 8008918:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800891c:	2200      	movs	r2, #0
 800891e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008920:	7bfa      	ldrb	r2, [r7, #15]
 8008922:	6879      	ldr	r1, [r7, #4]
 8008924:	4613      	mov	r3, r2
 8008926:	00db      	lsls	r3, r3, #3
 8008928:	1a9b      	subs	r3, r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	440b      	add	r3, r1
 800892e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008932:	2200      	movs	r2, #0
 8008934:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008936:	7bfb      	ldrb	r3, [r7, #15]
 8008938:	3301      	adds	r3, #1
 800893a:	73fb      	strb	r3, [r7, #15]
 800893c:	7bfa      	ldrb	r2, [r7, #15]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	685b      	ldr	r3, [r3, #4]
 8008942:	429a      	cmp	r2, r3
 8008944:	d3b5      	bcc.n	80088b2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	603b      	str	r3, [r7, #0]
 800894c:	687e      	ldr	r6, [r7, #4]
 800894e:	466d      	mov	r5, sp
 8008950:	f106 0410 	add.w	r4, r6, #16
 8008954:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008956:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008958:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800895a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800895c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008960:	e885 0003 	stmia.w	r5, {r0, r1}
 8008964:	1d33      	adds	r3, r6, #4
 8008966:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008968:	6838      	ldr	r0, [r7, #0]
 800896a:	f003 ff93 	bl	800c894 <USB_DevInit>
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d005      	beq.n	8008980 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2202      	movs	r2, #2
 8008978:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	e00d      	b.n	800899c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2201      	movs	r2, #1
 800898c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	4618      	mov	r0, r3
 8008996:	f005 f80f 	bl	800d9b8 <USB_DevDisconnect>

  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3714      	adds	r7, #20
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080089a4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d101      	bne.n	80089c0 <HAL_PCD_Start+0x1c>
 80089bc:	2302      	movs	r3, #2
 80089be:	e020      	b.n	8008a02 <HAL_PCD_Start+0x5e>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2201      	movs	r2, #1
 80089c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089cc:	2b01      	cmp	r3, #1
 80089ce:	d109      	bne.n	80089e4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d005      	beq.n	80089e4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4618      	mov	r0, r3
 80089ea:	f003 fee5 	bl	800c7b8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4618      	mov	r0, r3
 80089f4:	f004 ffbf 	bl	800d976 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008a00:	2300      	movs	r3, #0
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}

08008a0a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008a0a:	b590      	push	{r4, r7, lr}
 8008a0c:	b08d      	sub	sp, #52	; 0x34
 8008a0e:	af00      	add	r7, sp, #0
 8008a10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a18:	6a3b      	ldr	r3, [r7, #32]
 8008a1a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	4618      	mov	r0, r3
 8008a22:	f005 f87d 	bl	800db20 <USB_GetMode>
 8008a26:	4603      	mov	r3, r0
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	f040 839d 	bne.w	8009168 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4618      	mov	r0, r3
 8008a34:	f004 ffe1 	bl	800d9fa <USB_ReadInterrupts>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f000 8393 	beq.w	8009166 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4618      	mov	r0, r3
 8008a46:	f004 ffd8 	bl	800d9fa <USB_ReadInterrupts>
 8008a4a:	4603      	mov	r3, r0
 8008a4c:	f003 0302 	and.w	r3, r3, #2
 8008a50:	2b02      	cmp	r3, #2
 8008a52:	d107      	bne.n	8008a64 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	695a      	ldr	r2, [r3, #20]
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f002 0202 	and.w	r2, r2, #2
 8008a62:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f004 ffc6 	bl	800d9fa <USB_ReadInterrupts>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	f003 0310 	and.w	r3, r3, #16
 8008a74:	2b10      	cmp	r3, #16
 8008a76:	d161      	bne.n	8008b3c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	699a      	ldr	r2, [r3, #24]
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f022 0210 	bic.w	r2, r2, #16
 8008a86:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008a88:	6a3b      	ldr	r3, [r7, #32]
 8008a8a:	6a1b      	ldr	r3, [r3, #32]
 8008a8c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	f003 020f 	and.w	r2, r3, #15
 8008a94:	4613      	mov	r3, r2
 8008a96:	00db      	lsls	r3, r3, #3
 8008a98:	1a9b      	subs	r3, r3, r2
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008aa8:	69bb      	ldr	r3, [r7, #24]
 8008aaa:	0c5b      	lsrs	r3, r3, #17
 8008aac:	f003 030f 	and.w	r3, r3, #15
 8008ab0:	2b02      	cmp	r3, #2
 8008ab2:	d124      	bne.n	8008afe <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008ab4:	69ba      	ldr	r2, [r7, #24]
 8008ab6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008aba:	4013      	ands	r3, r2
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d035      	beq.n	8008b2c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008ac4:	69bb      	ldr	r3, [r7, #24]
 8008ac6:	091b      	lsrs	r3, r3, #4
 8008ac8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008aca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ace:	b29b      	uxth	r3, r3
 8008ad0:	461a      	mov	r2, r3
 8008ad2:	6a38      	ldr	r0, [r7, #32]
 8008ad4:	f004 fdfd 	bl	800d6d2 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008ad8:	697b      	ldr	r3, [r7, #20]
 8008ada:	68da      	ldr	r2, [r3, #12]
 8008adc:	69bb      	ldr	r3, [r7, #24]
 8008ade:	091b      	lsrs	r3, r3, #4
 8008ae0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008ae4:	441a      	add	r2, r3
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	699a      	ldr	r2, [r3, #24]
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	091b      	lsrs	r3, r3, #4
 8008af2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008af6:	441a      	add	r2, r3
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	619a      	str	r2, [r3, #24]
 8008afc:	e016      	b.n	8008b2c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008afe:	69bb      	ldr	r3, [r7, #24]
 8008b00:	0c5b      	lsrs	r3, r3, #17
 8008b02:	f003 030f 	and.w	r3, r3, #15
 8008b06:	2b06      	cmp	r3, #6
 8008b08:	d110      	bne.n	8008b2c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008b10:	2208      	movs	r2, #8
 8008b12:	4619      	mov	r1, r3
 8008b14:	6a38      	ldr	r0, [r7, #32]
 8008b16:	f004 fddc 	bl	800d6d2 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	699a      	ldr	r2, [r3, #24]
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	091b      	lsrs	r3, r3, #4
 8008b22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008b26:	441a      	add	r2, r3
 8008b28:	697b      	ldr	r3, [r7, #20]
 8008b2a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	699a      	ldr	r2, [r3, #24]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	f042 0210 	orr.w	r2, r2, #16
 8008b3a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4618      	mov	r0, r3
 8008b42:	f004 ff5a 	bl	800d9fa <USB_ReadInterrupts>
 8008b46:	4603      	mov	r3, r0
 8008b48:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008b4c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008b50:	d16e      	bne.n	8008c30 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8008b52:	2300      	movs	r3, #0
 8008b54:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f004 ff60 	bl	800da20 <USB_ReadDevAllOutEpInterrupt>
 8008b60:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008b62:	e062      	b.n	8008c2a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b66:	f003 0301 	and.w	r3, r3, #1
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d057      	beq.n	8008c1e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b74:	b2d2      	uxtb	r2, r2
 8008b76:	4611      	mov	r1, r2
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f004 ff85 	bl	800da88 <USB_ReadDevOutEPInterrupt>
 8008b7e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	f003 0301 	and.w	r3, r3, #1
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d00c      	beq.n	8008ba4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8c:	015a      	lsls	r2, r3, #5
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	4413      	add	r3, r2
 8008b92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b96:	461a      	mov	r2, r3
 8008b98:	2301      	movs	r3, #1
 8008b9a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008b9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f000 fdb0 	bl	8009704 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	f003 0308 	and.w	r3, r3, #8
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d00c      	beq.n	8008bc8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bb0:	015a      	lsls	r2, r3, #5
 8008bb2:	69fb      	ldr	r3, [r7, #28]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bba:	461a      	mov	r2, r3
 8008bbc:	2308      	movs	r3, #8
 8008bbe:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008bc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008bc2:	6878      	ldr	r0, [r7, #4]
 8008bc4:	f000 feaa 	bl	800991c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	f003 0310 	and.w	r3, r3, #16
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d008      	beq.n	8008be4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bd4:	015a      	lsls	r2, r3, #5
 8008bd6:	69fb      	ldr	r3, [r7, #28]
 8008bd8:	4413      	add	r3, r2
 8008bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bde:	461a      	mov	r2, r3
 8008be0:	2310      	movs	r3, #16
 8008be2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008be4:	693b      	ldr	r3, [r7, #16]
 8008be6:	f003 0320 	and.w	r3, r3, #32
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d008      	beq.n	8008c00 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf0:	015a      	lsls	r2, r3, #5
 8008bf2:	69fb      	ldr	r3, [r7, #28]
 8008bf4:	4413      	add	r3, r2
 8008bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	2320      	movs	r3, #32
 8008bfe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d009      	beq.n	8008c1e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c0c:	015a      	lsls	r2, r3, #5
 8008c0e:	69fb      	ldr	r3, [r7, #28]
 8008c10:	4413      	add	r3, r2
 8008c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c16:	461a      	mov	r2, r3
 8008c18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008c1c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c20:	3301      	adds	r3, #1
 8008c22:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c26:	085b      	lsrs	r3, r3, #1
 8008c28:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008c2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d199      	bne.n	8008b64 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f004 fee0 	bl	800d9fa <USB_ReadInterrupts>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008c44:	f040 80c0 	bne.w	8008dc8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f004 ff01 	bl	800da54 <USB_ReadDevAllInEpInterrupt>
 8008c52:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008c54:	2300      	movs	r3, #0
 8008c56:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008c58:	e0b2      	b.n	8008dc0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c5c:	f003 0301 	and.w	r3, r3, #1
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f000 80a7 	beq.w	8008db4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c6c:	b2d2      	uxtb	r2, r2
 8008c6e:	4611      	mov	r1, r2
 8008c70:	4618      	mov	r0, r3
 8008c72:	f004 ff27 	bl	800dac4 <USB_ReadDevInEPInterrupt>
 8008c76:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	f003 0301 	and.w	r3, r3, #1
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d057      	beq.n	8008d32 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c84:	f003 030f 	and.w	r3, r3, #15
 8008c88:	2201      	movs	r2, #1
 8008c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c8e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008c90:	69fb      	ldr	r3, [r7, #28]
 8008c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	43db      	mvns	r3, r3
 8008c9c:	69f9      	ldr	r1, [r7, #28]
 8008c9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008ca2:	4013      	ands	r3, r2
 8008ca4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca8:	015a      	lsls	r2, r3, #5
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	4413      	add	r3, r2
 8008cae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cb2:	461a      	mov	r2, r3
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	691b      	ldr	r3, [r3, #16]
 8008cbc:	2b01      	cmp	r3, #1
 8008cbe:	d132      	bne.n	8008d26 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008cc0:	6879      	ldr	r1, [r7, #4]
 8008cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	00db      	lsls	r3, r3, #3
 8008cc8:	1a9b      	subs	r3, r3, r2
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	440b      	add	r3, r1
 8008cce:	3348      	adds	r3, #72	; 0x48
 8008cd0:	6819      	ldr	r1, [r3, #0]
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cd6:	4613      	mov	r3, r2
 8008cd8:	00db      	lsls	r3, r3, #3
 8008cda:	1a9b      	subs	r3, r3, r2
 8008cdc:	009b      	lsls	r3, r3, #2
 8008cde:	4403      	add	r3, r0
 8008ce0:	3344      	adds	r3, #68	; 0x44
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4419      	add	r1, r3
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cea:	4613      	mov	r3, r2
 8008cec:	00db      	lsls	r3, r3, #3
 8008cee:	1a9b      	subs	r3, r3, r2
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	4403      	add	r3, r0
 8008cf4:	3348      	adds	r3, #72	; 0x48
 8008cf6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d113      	bne.n	8008d26 <HAL_PCD_IRQHandler+0x31c>
 8008cfe:	6879      	ldr	r1, [r7, #4]
 8008d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d02:	4613      	mov	r3, r2
 8008d04:	00db      	lsls	r3, r3, #3
 8008d06:	1a9b      	subs	r3, r3, r2
 8008d08:	009b      	lsls	r3, r3, #2
 8008d0a:	440b      	add	r3, r1
 8008d0c:	3350      	adds	r3, #80	; 0x50
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d108      	bne.n	8008d26 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	6818      	ldr	r0, [r3, #0]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008d1e:	461a      	mov	r2, r3
 8008d20:	2101      	movs	r1, #1
 8008d22:	f004 ff2f 	bl	800db84 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f00e fa36 	bl	801719e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	f003 0308 	and.w	r3, r3, #8
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d008      	beq.n	8008d4e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3e:	015a      	lsls	r2, r3, #5
 8008d40:	69fb      	ldr	r3, [r7, #28]
 8008d42:	4413      	add	r3, r2
 8008d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d48:	461a      	mov	r2, r3
 8008d4a:	2308      	movs	r3, #8
 8008d4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	f003 0310 	and.w	r3, r3, #16
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d008      	beq.n	8008d6a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d5a:	015a      	lsls	r2, r3, #5
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	4413      	add	r3, r2
 8008d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d64:	461a      	mov	r2, r3
 8008d66:	2310      	movs	r3, #16
 8008d68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d008      	beq.n	8008d86 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d76:	015a      	lsls	r2, r3, #5
 8008d78:	69fb      	ldr	r3, [r7, #28]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d80:	461a      	mov	r2, r3
 8008d82:	2340      	movs	r3, #64	; 0x40
 8008d84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	f003 0302 	and.w	r3, r3, #2
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d008      	beq.n	8008da2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d92:	015a      	lsls	r2, r3, #5
 8008d94:	69fb      	ldr	r3, [r7, #28]
 8008d96:	4413      	add	r3, r2
 8008d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008d9c:	461a      	mov	r2, r3
 8008d9e:	2302      	movs	r3, #2
 8008da0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008da2:	693b      	ldr	r3, [r7, #16]
 8008da4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d003      	beq.n	8008db4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008dac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fc1b 	bl	80095ea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db6:	3301      	adds	r3, #1
 8008db8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dbc:	085b      	lsrs	r3, r3, #1
 8008dbe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	f47f af49 	bne.w	8008c5a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4618      	mov	r0, r3
 8008dce:	f004 fe14 	bl	800d9fa <USB_ReadInterrupts>
 8008dd2:	4603      	mov	r3, r0
 8008dd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008dd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ddc:	d122      	bne.n	8008e24 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008dde:	69fb      	ldr	r3, [r7, #28]
 8008de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008de4:	685b      	ldr	r3, [r3, #4]
 8008de6:	69fa      	ldr	r2, [r7, #28]
 8008de8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008dec:	f023 0301 	bic.w	r3, r3, #1
 8008df0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008df8:	2b01      	cmp	r3, #1
 8008dfa:	d108      	bne.n	8008e0e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2200      	movs	r2, #0
 8008e00:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008e04:	2100      	movs	r1, #0
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 fe26 	bl	8009a58 <HAL_PCDEx_LPM_Callback>
 8008e0c:	e002      	b.n	8008e14 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f00e fa3c 	bl	801728c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	695a      	ldr	r2, [r3, #20]
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008e22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4618      	mov	r0, r3
 8008e2a:	f004 fde6 	bl	800d9fa <USB_ReadInterrupts>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e38:	d112      	bne.n	8008e60 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008e3a:	69fb      	ldr	r3, [r7, #28]
 8008e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	f003 0301 	and.w	r3, r3, #1
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d102      	bne.n	8008e50 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f00e f9f8 	bl	8017240 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	695a      	ldr	r2, [r3, #20]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008e5e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4618      	mov	r0, r3
 8008e66:	f004 fdc8 	bl	800d9fa <USB_ReadInterrupts>
 8008e6a:	4603      	mov	r3, r0
 8008e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008e70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e74:	f040 80c7 	bne.w	8009006 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e7e:	685b      	ldr	r3, [r3, #4]
 8008e80:	69fa      	ldr	r2, [r7, #28]
 8008e82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e86:	f023 0301 	bic.w	r3, r3, #1
 8008e8a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2110      	movs	r1, #16
 8008e92:	4618      	mov	r0, r3
 8008e94:	f003 fe62 	bl	800cb5c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008e98:	2300      	movs	r3, #0
 8008e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e9c:	e056      	b.n	8008f4c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ea0:	015a      	lsls	r2, r3, #5
 8008ea2:	69fb      	ldr	r3, [r7, #28]
 8008ea4:	4413      	add	r3, r2
 8008ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eaa:	461a      	mov	r2, r3
 8008eac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008eb0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb4:	015a      	lsls	r2, r3, #5
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	4413      	add	r3, r2
 8008eba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ec2:	0151      	lsls	r1, r2, #5
 8008ec4:	69fa      	ldr	r2, [r7, #28]
 8008ec6:	440a      	add	r2, r1
 8008ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ecc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008ed0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed4:	015a      	lsls	r2, r3, #5
 8008ed6:	69fb      	ldr	r3, [r7, #28]
 8008ed8:	4413      	add	r3, r2
 8008eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ee2:	0151      	lsls	r1, r2, #5
 8008ee4:	69fa      	ldr	r2, [r7, #28]
 8008ee6:	440a      	add	r2, r1
 8008ee8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008ef0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ef4:	015a      	lsls	r2, r3, #5
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	4413      	add	r3, r2
 8008efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008efe:	461a      	mov	r2, r3
 8008f00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f04:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f08:	015a      	lsls	r2, r3, #5
 8008f0a:	69fb      	ldr	r3, [r7, #28]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f16:	0151      	lsls	r1, r2, #5
 8008f18:	69fa      	ldr	r2, [r7, #28]
 8008f1a:	440a      	add	r2, r1
 8008f1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f24:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f28:	015a      	lsls	r2, r3, #5
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f36:	0151      	lsls	r1, r2, #5
 8008f38:	69fa      	ldr	r2, [r7, #28]
 8008f3a:	440a      	add	r2, r1
 8008f3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008f44:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f48:	3301      	adds	r3, #1
 8008f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d3a3      	bcc.n	8008e9e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8008f56:	69fb      	ldr	r3, [r7, #28]
 8008f58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f5c:	69db      	ldr	r3, [r3, #28]
 8008f5e:	69fa      	ldr	r2, [r7, #28]
 8008f60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f64:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8008f68:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d016      	beq.n	8008fa0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008f72:	69fb      	ldr	r3, [r7, #28]
 8008f74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008f7c:	69fa      	ldr	r2, [r7, #28]
 8008f7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f82:	f043 030b 	orr.w	r3, r3, #11
 8008f86:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8008f8a:	69fb      	ldr	r3, [r7, #28]
 8008f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f92:	69fa      	ldr	r2, [r7, #28]
 8008f94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008f98:	f043 030b 	orr.w	r3, r3, #11
 8008f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8008f9e:	e015      	b.n	8008fcc <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008fa0:	69fb      	ldr	r3, [r7, #28]
 8008fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa6:	695b      	ldr	r3, [r3, #20]
 8008fa8:	69fa      	ldr	r2, [r7, #28]
 8008faa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008fb2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8008fb6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8008fb8:	69fb      	ldr	r3, [r7, #28]
 8008fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fbe:	691b      	ldr	r3, [r3, #16]
 8008fc0:	69fa      	ldr	r2, [r7, #28]
 8008fc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fc6:	f043 030b 	orr.w	r3, r3, #11
 8008fca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8008fcc:	69fb      	ldr	r3, [r7, #28]
 8008fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	69fa      	ldr	r2, [r7, #28]
 8008fd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fda:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008fde:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	6818      	ldr	r0, [r3, #0]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008ff0:	461a      	mov	r2, r3
 8008ff2:	f004 fdc7 	bl	800db84 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	695a      	ldr	r2, [r3, #20]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8009004:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	4618      	mov	r0, r3
 800900c:	f004 fcf5 	bl	800d9fa <USB_ReadInterrupts>
 8009010:	4603      	mov	r3, r0
 8009012:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009016:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800901a:	d124      	bne.n	8009066 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	4618      	mov	r0, r3
 8009022:	f004 fd8b 	bl	800db3c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	4618      	mov	r0, r3
 800902c:	f003 fdf3 	bl	800cc16 <USB_GetDevSpeed>
 8009030:	4603      	mov	r3, r0
 8009032:	461a      	mov	r2, r3
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681c      	ldr	r4, [r3, #0]
 800903c:	f001 f958 	bl	800a2f0 <HAL_RCC_GetHCLKFreq>
 8009040:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8009046:	b2db      	uxtb	r3, r3
 8009048:	461a      	mov	r2, r3
 800904a:	4620      	mov	r0, r4
 800904c:	f003 fb12 	bl	800c674 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f00e f8cc 	bl	80171ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	695a      	ldr	r2, [r3, #20]
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8009064:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	4618      	mov	r0, r3
 800906c:	f004 fcc5 	bl	800d9fa <USB_ReadInterrupts>
 8009070:	4603      	mov	r3, r0
 8009072:	f003 0308 	and.w	r3, r3, #8
 8009076:	2b08      	cmp	r3, #8
 8009078:	d10a      	bne.n	8009090 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f00e f8a9 	bl	80171d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	695a      	ldr	r2, [r3, #20]
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	f002 0208 	and.w	r2, r2, #8
 800908e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4618      	mov	r0, r3
 8009096:	f004 fcb0 	bl	800d9fa <USB_ReadInterrupts>
 800909a:	4603      	mov	r3, r0
 800909c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090a4:	d10f      	bne.n	80090c6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80090a6:	2300      	movs	r3, #0
 80090a8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80090aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090ac:	b2db      	uxtb	r3, r3
 80090ae:	4619      	mov	r1, r3
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f00e f90b 	bl	80172cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	695a      	ldr	r2, [r3, #20]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80090c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	4618      	mov	r0, r3
 80090cc:	f004 fc95 	bl	800d9fa <USB_ReadInterrupts>
 80090d0:	4603      	mov	r3, r0
 80090d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80090d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80090da:	d10f      	bne.n	80090fc <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80090dc:	2300      	movs	r3, #0
 80090de:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80090e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	4619      	mov	r1, r3
 80090e6:	6878      	ldr	r0, [r7, #4]
 80090e8:	f00e f8de 	bl	80172a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	695a      	ldr	r2, [r3, #20]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80090fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4618      	mov	r0, r3
 8009102:	f004 fc7a 	bl	800d9fa <USB_ReadInterrupts>
 8009106:	4603      	mov	r3, r0
 8009108:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800910c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009110:	d10a      	bne.n	8009128 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f00e f8ec 	bl	80172f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	695a      	ldr	r2, [r3, #20]
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8009126:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	4618      	mov	r0, r3
 800912e:	f004 fc64 	bl	800d9fa <USB_ReadInterrupts>
 8009132:	4603      	mov	r3, r0
 8009134:	f003 0304 	and.w	r3, r3, #4
 8009138:	2b04      	cmp	r3, #4
 800913a:	d115      	bne.n	8009168 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8009144:	69bb      	ldr	r3, [r7, #24]
 8009146:	f003 0304 	and.w	r3, r3, #4
 800914a:	2b00      	cmp	r3, #0
 800914c:	d002      	beq.n	8009154 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f00e f8dc 	bl	801730c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	6859      	ldr	r1, [r3, #4]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	69ba      	ldr	r2, [r7, #24]
 8009160:	430a      	orrs	r2, r1
 8009162:	605a      	str	r2, [r3, #4]
 8009164:	e000      	b.n	8009168 <HAL_PCD_IRQHandler+0x75e>
      return;
 8009166:	bf00      	nop
    }
  }
}
 8009168:	3734      	adds	r7, #52	; 0x34
 800916a:	46bd      	mov	sp, r7
 800916c:	bd90      	pop	{r4, r7, pc}

0800916e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800916e:	b580      	push	{r7, lr}
 8009170:	b082      	sub	sp, #8
 8009172:	af00      	add	r7, sp, #0
 8009174:	6078      	str	r0, [r7, #4]
 8009176:	460b      	mov	r3, r1
 8009178:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009180:	2b01      	cmp	r3, #1
 8009182:	d101      	bne.n	8009188 <HAL_PCD_SetAddress+0x1a>
 8009184:	2302      	movs	r3, #2
 8009186:	e013      	b.n	80091b0 <HAL_PCD_SetAddress+0x42>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	2201      	movs	r2, #1
 800918c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	78fa      	ldrb	r2, [r7, #3]
 8009194:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	78fa      	ldrb	r2, [r7, #3]
 800919e:	4611      	mov	r1, r2
 80091a0:	4618      	mov	r0, r3
 80091a2:	f004 fbc2 	bl	800d92a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2200      	movs	r2, #0
 80091aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80091ae:	2300      	movs	r3, #0
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3708      	adds	r7, #8
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}

080091b8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b084      	sub	sp, #16
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	4608      	mov	r0, r1
 80091c2:	4611      	mov	r1, r2
 80091c4:	461a      	mov	r2, r3
 80091c6:	4603      	mov	r3, r0
 80091c8:	70fb      	strb	r3, [r7, #3]
 80091ca:	460b      	mov	r3, r1
 80091cc:	803b      	strh	r3, [r7, #0]
 80091ce:	4613      	mov	r3, r2
 80091d0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80091d2:	2300      	movs	r3, #0
 80091d4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80091d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	da0f      	bge.n	80091fe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80091de:	78fb      	ldrb	r3, [r7, #3]
 80091e0:	f003 020f 	and.w	r2, r3, #15
 80091e4:	4613      	mov	r3, r2
 80091e6:	00db      	lsls	r3, r3, #3
 80091e8:	1a9b      	subs	r3, r3, r2
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	3338      	adds	r3, #56	; 0x38
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	4413      	add	r3, r2
 80091f2:	3304      	adds	r3, #4
 80091f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2201      	movs	r2, #1
 80091fa:	705a      	strb	r2, [r3, #1]
 80091fc:	e00f      	b.n	800921e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80091fe:	78fb      	ldrb	r3, [r7, #3]
 8009200:	f003 020f 	and.w	r2, r3, #15
 8009204:	4613      	mov	r3, r2
 8009206:	00db      	lsls	r3, r3, #3
 8009208:	1a9b      	subs	r3, r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	4413      	add	r3, r2
 8009214:	3304      	adds	r3, #4
 8009216:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	2200      	movs	r2, #0
 800921c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800921e:	78fb      	ldrb	r3, [r7, #3]
 8009220:	f003 030f 	and.w	r3, r3, #15
 8009224:	b2da      	uxtb	r2, r3
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800922a:	883a      	ldrh	r2, [r7, #0]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	78ba      	ldrb	r2, [r7, #2]
 8009234:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	785b      	ldrb	r3, [r3, #1]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d004      	beq.n	8009248 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	b29a      	uxth	r2, r3
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8009248:	78bb      	ldrb	r3, [r7, #2]
 800924a:	2b02      	cmp	r3, #2
 800924c:	d102      	bne.n	8009254 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	2200      	movs	r2, #0
 8009252:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800925a:	2b01      	cmp	r3, #1
 800925c:	d101      	bne.n	8009262 <HAL_PCD_EP_Open+0xaa>
 800925e:	2302      	movs	r3, #2
 8009260:	e00e      	b.n	8009280 <HAL_PCD_EP_Open+0xc8>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2201      	movs	r2, #1
 8009266:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68f9      	ldr	r1, [r7, #12]
 8009270:	4618      	mov	r0, r3
 8009272:	f003 fcf5 	bl	800cc60 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800927e:	7afb      	ldrb	r3, [r7, #11]
}
 8009280:	4618      	mov	r0, r3
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	460b      	mov	r3, r1
 8009292:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8009294:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009298:	2b00      	cmp	r3, #0
 800929a:	da0f      	bge.n	80092bc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800929c:	78fb      	ldrb	r3, [r7, #3]
 800929e:	f003 020f 	and.w	r2, r3, #15
 80092a2:	4613      	mov	r3, r2
 80092a4:	00db      	lsls	r3, r3, #3
 80092a6:	1a9b      	subs	r3, r3, r2
 80092a8:	009b      	lsls	r3, r3, #2
 80092aa:	3338      	adds	r3, #56	; 0x38
 80092ac:	687a      	ldr	r2, [r7, #4]
 80092ae:	4413      	add	r3, r2
 80092b0:	3304      	adds	r3, #4
 80092b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2201      	movs	r2, #1
 80092b8:	705a      	strb	r2, [r3, #1]
 80092ba:	e00f      	b.n	80092dc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80092bc:	78fb      	ldrb	r3, [r7, #3]
 80092be:	f003 020f 	and.w	r2, r3, #15
 80092c2:	4613      	mov	r3, r2
 80092c4:	00db      	lsls	r3, r3, #3
 80092c6:	1a9b      	subs	r3, r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	4413      	add	r3, r2
 80092d2:	3304      	adds	r3, #4
 80092d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2200      	movs	r2, #0
 80092da:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80092dc:	78fb      	ldrb	r3, [r7, #3]
 80092de:	f003 030f 	and.w	r3, r3, #15
 80092e2:	b2da      	uxtb	r2, r3
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d101      	bne.n	80092f6 <HAL_PCD_EP_Close+0x6e>
 80092f2:	2302      	movs	r3, #2
 80092f4:	e00e      	b.n	8009314 <HAL_PCD_EP_Close+0x8c>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2201      	movs	r2, #1
 80092fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	68f9      	ldr	r1, [r7, #12]
 8009304:	4618      	mov	r0, r3
 8009306:	f003 fd33 	bl	800cd70 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2200      	movs	r2, #0
 800930e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009312:	2300      	movs	r3, #0
}
 8009314:	4618      	mov	r0, r3
 8009316:	3710      	adds	r7, #16
 8009318:	46bd      	mov	sp, r7
 800931a:	bd80      	pop	{r7, pc}

0800931c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b086      	sub	sp, #24
 8009320:	af00      	add	r7, sp, #0
 8009322:	60f8      	str	r0, [r7, #12]
 8009324:	607a      	str	r2, [r7, #4]
 8009326:	603b      	str	r3, [r7, #0]
 8009328:	460b      	mov	r3, r1
 800932a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800932c:	7afb      	ldrb	r3, [r7, #11]
 800932e:	f003 020f 	and.w	r2, r3, #15
 8009332:	4613      	mov	r3, r2
 8009334:	00db      	lsls	r3, r3, #3
 8009336:	1a9b      	subs	r3, r3, r2
 8009338:	009b      	lsls	r3, r3, #2
 800933a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800933e:	68fa      	ldr	r2, [r7, #12]
 8009340:	4413      	add	r3, r2
 8009342:	3304      	adds	r3, #4
 8009344:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	687a      	ldr	r2, [r7, #4]
 800934a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	683a      	ldr	r2, [r7, #0]
 8009350:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009352:	697b      	ldr	r3, [r7, #20]
 8009354:	2200      	movs	r2, #0
 8009356:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8009358:	697b      	ldr	r3, [r7, #20]
 800935a:	2200      	movs	r2, #0
 800935c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800935e:	7afb      	ldrb	r3, [r7, #11]
 8009360:	f003 030f 	and.w	r3, r3, #15
 8009364:	b2da      	uxtb	r2, r3
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d102      	bne.n	8009378 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009372:	687a      	ldr	r2, [r7, #4]
 8009374:	697b      	ldr	r3, [r7, #20]
 8009376:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009378:	7afb      	ldrb	r3, [r7, #11]
 800937a:	f003 030f 	and.w	r3, r3, #15
 800937e:	2b00      	cmp	r3, #0
 8009380:	d109      	bne.n	8009396 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	6818      	ldr	r0, [r3, #0]
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	b2db      	uxtb	r3, r3
 800938c:	461a      	mov	r2, r3
 800938e:	6979      	ldr	r1, [r7, #20]
 8009390:	f004 f80e 	bl	800d3b0 <USB_EP0StartXfer>
 8009394:	e008      	b.n	80093a8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6818      	ldr	r0, [r3, #0]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	691b      	ldr	r3, [r3, #16]
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	461a      	mov	r2, r3
 80093a2:	6979      	ldr	r1, [r7, #20]
 80093a4:	f003 fdc0 	bl	800cf28 <USB_EPStartXfer>
  }

  return HAL_OK;
 80093a8:	2300      	movs	r3, #0
}
 80093aa:	4618      	mov	r0, r3
 80093ac:	3718      	adds	r7, #24
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}

080093b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80093b2:	b480      	push	{r7}
 80093b4:	b083      	sub	sp, #12
 80093b6:	af00      	add	r7, sp, #0
 80093b8:	6078      	str	r0, [r7, #4]
 80093ba:	460b      	mov	r3, r1
 80093bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80093be:	78fb      	ldrb	r3, [r7, #3]
 80093c0:	f003 020f 	and.w	r2, r3, #15
 80093c4:	6879      	ldr	r1, [r7, #4]
 80093c6:	4613      	mov	r3, r2
 80093c8:	00db      	lsls	r3, r3, #3
 80093ca:	1a9b      	subs	r3, r3, r2
 80093cc:	009b      	lsls	r3, r3, #2
 80093ce:	440b      	add	r3, r1
 80093d0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80093d4:	681b      	ldr	r3, [r3, #0]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	370c      	adds	r7, #12
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b086      	sub	sp, #24
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	60f8      	str	r0, [r7, #12]
 80093ea:	607a      	str	r2, [r7, #4]
 80093ec:	603b      	str	r3, [r7, #0]
 80093ee:	460b      	mov	r3, r1
 80093f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80093f2:	7afb      	ldrb	r3, [r7, #11]
 80093f4:	f003 020f 	and.w	r2, r3, #15
 80093f8:	4613      	mov	r3, r2
 80093fa:	00db      	lsls	r3, r3, #3
 80093fc:	1a9b      	subs	r3, r3, r2
 80093fe:	009b      	lsls	r3, r3, #2
 8009400:	3338      	adds	r3, #56	; 0x38
 8009402:	68fa      	ldr	r2, [r7, #12]
 8009404:	4413      	add	r3, r2
 8009406:	3304      	adds	r3, #4
 8009408:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009410:	697b      	ldr	r3, [r7, #20]
 8009412:	683a      	ldr	r2, [r7, #0]
 8009414:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009416:	697b      	ldr	r3, [r7, #20]
 8009418:	2200      	movs	r2, #0
 800941a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800941c:	697b      	ldr	r3, [r7, #20]
 800941e:	2201      	movs	r2, #1
 8009420:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009422:	7afb      	ldrb	r3, [r7, #11]
 8009424:	f003 030f 	and.w	r3, r3, #15
 8009428:	b2da      	uxtb	r2, r3
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	691b      	ldr	r3, [r3, #16]
 8009432:	2b01      	cmp	r3, #1
 8009434:	d102      	bne.n	800943c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800943c:	7afb      	ldrb	r3, [r7, #11]
 800943e:	f003 030f 	and.w	r3, r3, #15
 8009442:	2b00      	cmp	r3, #0
 8009444:	d109      	bne.n	800945a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	6818      	ldr	r0, [r3, #0]
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	691b      	ldr	r3, [r3, #16]
 800944e:	b2db      	uxtb	r3, r3
 8009450:	461a      	mov	r2, r3
 8009452:	6979      	ldr	r1, [r7, #20]
 8009454:	f003 ffac 	bl	800d3b0 <USB_EP0StartXfer>
 8009458:	e008      	b.n	800946c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	6818      	ldr	r0, [r3, #0]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	b2db      	uxtb	r3, r3
 8009464:	461a      	mov	r2, r3
 8009466:	6979      	ldr	r1, [r7, #20]
 8009468:	f003 fd5e 	bl	800cf28 <USB_EPStartXfer>
  }

  return HAL_OK;
 800946c:	2300      	movs	r3, #0
}
 800946e:	4618      	mov	r0, r3
 8009470:	3718      	adds	r7, #24
 8009472:	46bd      	mov	sp, r7
 8009474:	bd80      	pop	{r7, pc}

08009476 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009476:	b580      	push	{r7, lr}
 8009478:	b084      	sub	sp, #16
 800947a:	af00      	add	r7, sp, #0
 800947c:	6078      	str	r0, [r7, #4]
 800947e:	460b      	mov	r3, r1
 8009480:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8009482:	78fb      	ldrb	r3, [r7, #3]
 8009484:	f003 020f 	and.w	r2, r3, #15
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	429a      	cmp	r2, r3
 800948e:	d901      	bls.n	8009494 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	e050      	b.n	8009536 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009494:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009498:	2b00      	cmp	r3, #0
 800949a:	da0f      	bge.n	80094bc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800949c:	78fb      	ldrb	r3, [r7, #3]
 800949e:	f003 020f 	and.w	r2, r3, #15
 80094a2:	4613      	mov	r3, r2
 80094a4:	00db      	lsls	r3, r3, #3
 80094a6:	1a9b      	subs	r3, r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	3338      	adds	r3, #56	; 0x38
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	4413      	add	r3, r2
 80094b0:	3304      	adds	r3, #4
 80094b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2201      	movs	r2, #1
 80094b8:	705a      	strb	r2, [r3, #1]
 80094ba:	e00d      	b.n	80094d8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80094bc:	78fa      	ldrb	r2, [r7, #3]
 80094be:	4613      	mov	r3, r2
 80094c0:	00db      	lsls	r3, r3, #3
 80094c2:	1a9b      	subs	r3, r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	4413      	add	r3, r2
 80094ce:	3304      	adds	r3, #4
 80094d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2200      	movs	r2, #0
 80094d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	2201      	movs	r2, #1
 80094dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80094de:	78fb      	ldrb	r3, [r7, #3]
 80094e0:	f003 030f 	and.w	r3, r3, #15
 80094e4:	b2da      	uxtb	r2, r3
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d101      	bne.n	80094f8 <HAL_PCD_EP_SetStall+0x82>
 80094f4:	2302      	movs	r3, #2
 80094f6:	e01e      	b.n	8009536 <HAL_PCD_EP_SetStall+0xc0>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2201      	movs	r2, #1
 80094fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	68f9      	ldr	r1, [r7, #12]
 8009506:	4618      	mov	r0, r3
 8009508:	f004 f93b 	bl	800d782 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800950c:	78fb      	ldrb	r3, [r7, #3]
 800950e:	f003 030f 	and.w	r3, r3, #15
 8009512:	2b00      	cmp	r3, #0
 8009514:	d10a      	bne.n	800952c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	6818      	ldr	r0, [r3, #0]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	691b      	ldr	r3, [r3, #16]
 800951e:	b2d9      	uxtb	r1, r3
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009526:	461a      	mov	r2, r3
 8009528:	f004 fb2c 	bl	800db84 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2200      	movs	r2, #0
 8009530:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009534:	2300      	movs	r3, #0
}
 8009536:	4618      	mov	r0, r3
 8009538:	3710      	adds	r7, #16
 800953a:	46bd      	mov	sp, r7
 800953c:	bd80      	pop	{r7, pc}

0800953e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800953e:	b580      	push	{r7, lr}
 8009540:	b084      	sub	sp, #16
 8009542:	af00      	add	r7, sp, #0
 8009544:	6078      	str	r0, [r7, #4]
 8009546:	460b      	mov	r3, r1
 8009548:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800954a:	78fb      	ldrb	r3, [r7, #3]
 800954c:	f003 020f 	and.w	r2, r3, #15
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	429a      	cmp	r2, r3
 8009556:	d901      	bls.n	800955c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8009558:	2301      	movs	r3, #1
 800955a:	e042      	b.n	80095e2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800955c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009560:	2b00      	cmp	r3, #0
 8009562:	da0f      	bge.n	8009584 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009564:	78fb      	ldrb	r3, [r7, #3]
 8009566:	f003 020f 	and.w	r2, r3, #15
 800956a:	4613      	mov	r3, r2
 800956c:	00db      	lsls	r3, r3, #3
 800956e:	1a9b      	subs	r3, r3, r2
 8009570:	009b      	lsls	r3, r3, #2
 8009572:	3338      	adds	r3, #56	; 0x38
 8009574:	687a      	ldr	r2, [r7, #4]
 8009576:	4413      	add	r3, r2
 8009578:	3304      	adds	r3, #4
 800957a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2201      	movs	r2, #1
 8009580:	705a      	strb	r2, [r3, #1]
 8009582:	e00f      	b.n	80095a4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009584:	78fb      	ldrb	r3, [r7, #3]
 8009586:	f003 020f 	and.w	r2, r3, #15
 800958a:	4613      	mov	r3, r2
 800958c:	00db      	lsls	r3, r3, #3
 800958e:	1a9b      	subs	r3, r3, r2
 8009590:	009b      	lsls	r3, r3, #2
 8009592:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	4413      	add	r3, r2
 800959a:	3304      	adds	r3, #4
 800959c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	2200      	movs	r2, #0
 80095a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2200      	movs	r2, #0
 80095a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80095aa:	78fb      	ldrb	r3, [r7, #3]
 80095ac:	f003 030f 	and.w	r3, r3, #15
 80095b0:	b2da      	uxtb	r2, r3
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d101      	bne.n	80095c4 <HAL_PCD_EP_ClrStall+0x86>
 80095c0:	2302      	movs	r3, #2
 80095c2:	e00e      	b.n	80095e2 <HAL_PCD_EP_ClrStall+0xa4>
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	2201      	movs	r2, #1
 80095c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	68f9      	ldr	r1, [r7, #12]
 80095d2:	4618      	mov	r0, r3
 80095d4:	f004 f943 	bl	800d85e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2200      	movs	r2, #0
 80095dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}

080095ea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b08a      	sub	sp, #40	; 0x28
 80095ee:	af02      	add	r7, sp, #8
 80095f0:	6078      	str	r0, [r7, #4]
 80095f2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095fa:	697b      	ldr	r3, [r7, #20]
 80095fc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80095fe:	683a      	ldr	r2, [r7, #0]
 8009600:	4613      	mov	r3, r2
 8009602:	00db      	lsls	r3, r3, #3
 8009604:	1a9b      	subs	r3, r3, r2
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	3338      	adds	r3, #56	; 0x38
 800960a:	687a      	ldr	r2, [r7, #4]
 800960c:	4413      	add	r3, r2
 800960e:	3304      	adds	r3, #4
 8009610:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	699a      	ldr	r2, [r3, #24]
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	695b      	ldr	r3, [r3, #20]
 800961a:	429a      	cmp	r2, r3
 800961c:	d901      	bls.n	8009622 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	e06c      	b.n	80096fc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	695a      	ldr	r2, [r3, #20]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	699b      	ldr	r3, [r3, #24]
 800962a:	1ad3      	subs	r3, r2, r3
 800962c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	689b      	ldr	r3, [r3, #8]
 8009632:	69fa      	ldr	r2, [r7, #28]
 8009634:	429a      	cmp	r2, r3
 8009636:	d902      	bls.n	800963e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	3303      	adds	r3, #3
 8009642:	089b      	lsrs	r3, r3, #2
 8009644:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009646:	e02b      	b.n	80096a0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	695a      	ldr	r2, [r3, #20]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	699b      	ldr	r3, [r3, #24]
 8009650:	1ad3      	subs	r3, r2, r3
 8009652:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	69fa      	ldr	r2, [r7, #28]
 800965a:	429a      	cmp	r2, r3
 800965c:	d902      	bls.n	8009664 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009664:	69fb      	ldr	r3, [r7, #28]
 8009666:	3303      	adds	r3, #3
 8009668:	089b      	lsrs	r3, r3, #2
 800966a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	68d9      	ldr	r1, [r3, #12]
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	b2da      	uxtb	r2, r3
 8009674:	69fb      	ldr	r3, [r7, #28]
 8009676:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800967c:	b2db      	uxtb	r3, r3
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	4603      	mov	r3, r0
 8009682:	6978      	ldr	r0, [r7, #20]
 8009684:	f003 ffe7 	bl	800d656 <USB_WritePacket>

    ep->xfer_buff  += len;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	68da      	ldr	r2, [r3, #12]
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	441a      	add	r2, r3
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	699a      	ldr	r2, [r3, #24]
 8009698:	69fb      	ldr	r3, [r7, #28]
 800969a:	441a      	add	r2, r3
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	015a      	lsls	r2, r3, #5
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	4413      	add	r3, r2
 80096a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096ac:	699b      	ldr	r3, [r3, #24]
 80096ae:	b29b      	uxth	r3, r3
 80096b0:	69ba      	ldr	r2, [r7, #24]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d809      	bhi.n	80096ca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	699a      	ldr	r2, [r3, #24]
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80096be:	429a      	cmp	r2, r3
 80096c0:	d203      	bcs.n	80096ca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	695b      	ldr	r3, [r3, #20]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d1be      	bne.n	8009648 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	695a      	ldr	r2, [r3, #20]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	699b      	ldr	r3, [r3, #24]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d811      	bhi.n	80096fa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	f003 030f 	and.w	r3, r3, #15
 80096dc:	2201      	movs	r2, #1
 80096de:	fa02 f303 	lsl.w	r3, r2, r3
 80096e2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80096e4:	693b      	ldr	r3, [r7, #16]
 80096e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	43db      	mvns	r3, r3
 80096f0:	6939      	ldr	r1, [r7, #16]
 80096f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80096f6:	4013      	ands	r3, r2
 80096f8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80096fa:	2300      	movs	r3, #0
}
 80096fc:	4618      	mov	r0, r3
 80096fe:	3720      	adds	r7, #32
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}

08009704 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b086      	sub	sp, #24
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	333c      	adds	r3, #60	; 0x3c
 800971c:	3304      	adds	r3, #4
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	015a      	lsls	r2, r3, #5
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	4413      	add	r3, r2
 800972a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800972e:	689b      	ldr	r3, [r3, #8]
 8009730:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	691b      	ldr	r3, [r3, #16]
 8009736:	2b01      	cmp	r3, #1
 8009738:	f040 80a0 	bne.w	800987c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800973c:	68bb      	ldr	r3, [r7, #8]
 800973e:	f003 0308 	and.w	r3, r3, #8
 8009742:	2b00      	cmp	r3, #0
 8009744:	d015      	beq.n	8009772 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	4a72      	ldr	r2, [pc, #456]	; (8009914 <PCD_EP_OutXfrComplete_int+0x210>)
 800974a:	4293      	cmp	r3, r2
 800974c:	f240 80dd 	bls.w	800990a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009756:	2b00      	cmp	r3, #0
 8009758:	f000 80d7 	beq.w	800990a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	015a      	lsls	r2, r3, #5
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	4413      	add	r3, r2
 8009764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009768:	461a      	mov	r2, r3
 800976a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800976e:	6093      	str	r3, [r2, #8]
 8009770:	e0cb      	b.n	800990a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	f003 0320 	and.w	r3, r3, #32
 8009778:	2b00      	cmp	r3, #0
 800977a:	d009      	beq.n	8009790 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	015a      	lsls	r2, r3, #5
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	4413      	add	r3, r2
 8009784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009788:	461a      	mov	r2, r3
 800978a:	2320      	movs	r3, #32
 800978c:	6093      	str	r3, [r2, #8]
 800978e:	e0bc      	b.n	800990a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009796:	2b00      	cmp	r3, #0
 8009798:	f040 80b7 	bne.w	800990a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	4a5d      	ldr	r2, [pc, #372]	; (8009914 <PCD_EP_OutXfrComplete_int+0x210>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d90f      	bls.n	80097c4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d00a      	beq.n	80097c4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	015a      	lsls	r2, r3, #5
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	4413      	add	r3, r2
 80097b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ba:	461a      	mov	r2, r3
 80097bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097c0:	6093      	str	r3, [r2, #8]
 80097c2:	e0a2      	b.n	800990a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80097c4:	6879      	ldr	r1, [r7, #4]
 80097c6:	683a      	ldr	r2, [r7, #0]
 80097c8:	4613      	mov	r3, r2
 80097ca:	00db      	lsls	r3, r3, #3
 80097cc:	1a9b      	subs	r3, r3, r2
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	440b      	add	r3, r1
 80097d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80097d6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	0159      	lsls	r1, r3, #5
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	440b      	add	r3, r1
 80097e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097e4:	691b      	ldr	r3, [r3, #16]
 80097e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80097ea:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	683a      	ldr	r2, [r7, #0]
 80097f0:	4613      	mov	r3, r2
 80097f2:	00db      	lsls	r3, r3, #3
 80097f4:	1a9b      	subs	r3, r3, r2
 80097f6:	009b      	lsls	r3, r3, #2
 80097f8:	4403      	add	r3, r0
 80097fa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80097fe:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009800:	6879      	ldr	r1, [r7, #4]
 8009802:	683a      	ldr	r2, [r7, #0]
 8009804:	4613      	mov	r3, r2
 8009806:	00db      	lsls	r3, r3, #3
 8009808:	1a9b      	subs	r3, r3, r2
 800980a:	009b      	lsls	r3, r3, #2
 800980c:	440b      	add	r3, r1
 800980e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009812:	6819      	ldr	r1, [r3, #0]
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	683a      	ldr	r2, [r7, #0]
 8009818:	4613      	mov	r3, r2
 800981a:	00db      	lsls	r3, r3, #3
 800981c:	1a9b      	subs	r3, r3, r2
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	4403      	add	r3, r0
 8009822:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4419      	add	r1, r3
 800982a:	6878      	ldr	r0, [r7, #4]
 800982c:	683a      	ldr	r2, [r7, #0]
 800982e:	4613      	mov	r3, r2
 8009830:	00db      	lsls	r3, r3, #3
 8009832:	1a9b      	subs	r3, r3, r2
 8009834:	009b      	lsls	r3, r3, #2
 8009836:	4403      	add	r3, r0
 8009838:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800983c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d114      	bne.n	800986e <PCD_EP_OutXfrComplete_int+0x16a>
 8009844:	6879      	ldr	r1, [r7, #4]
 8009846:	683a      	ldr	r2, [r7, #0]
 8009848:	4613      	mov	r3, r2
 800984a:	00db      	lsls	r3, r3, #3
 800984c:	1a9b      	subs	r3, r3, r2
 800984e:	009b      	lsls	r3, r3, #2
 8009850:	440b      	add	r3, r1
 8009852:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2b00      	cmp	r3, #0
 800985a:	d108      	bne.n	800986e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	6818      	ldr	r0, [r3, #0]
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009866:	461a      	mov	r2, r3
 8009868:	2101      	movs	r1, #1
 800986a:	f004 f98b 	bl	800db84 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	b2db      	uxtb	r3, r3
 8009872:	4619      	mov	r1, r3
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f00d fc77 	bl	8017168 <HAL_PCD_DataOutStageCallback>
 800987a:	e046      	b.n	800990a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	4a26      	ldr	r2, [pc, #152]	; (8009918 <PCD_EP_OutXfrComplete_int+0x214>)
 8009880:	4293      	cmp	r3, r2
 8009882:	d124      	bne.n	80098ce <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800988a:	2b00      	cmp	r3, #0
 800988c:	d00a      	beq.n	80098a4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	015a      	lsls	r2, r3, #5
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	4413      	add	r3, r2
 8009896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800989a:	461a      	mov	r2, r3
 800989c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098a0:	6093      	str	r3, [r2, #8]
 80098a2:	e032      	b.n	800990a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	f003 0320 	and.w	r3, r3, #32
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d008      	beq.n	80098c0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80098ae:	683b      	ldr	r3, [r7, #0]
 80098b0:	015a      	lsls	r2, r3, #5
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	4413      	add	r3, r2
 80098b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098ba:	461a      	mov	r2, r3
 80098bc:	2320      	movs	r3, #32
 80098be:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	4619      	mov	r1, r3
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f00d fc4e 	bl	8017168 <HAL_PCD_DataOutStageCallback>
 80098cc:	e01d      	b.n	800990a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80098ce:	683b      	ldr	r3, [r7, #0]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d114      	bne.n	80098fe <PCD_EP_OutXfrComplete_int+0x1fa>
 80098d4:	6879      	ldr	r1, [r7, #4]
 80098d6:	683a      	ldr	r2, [r7, #0]
 80098d8:	4613      	mov	r3, r2
 80098da:	00db      	lsls	r3, r3, #3
 80098dc:	1a9b      	subs	r3, r3, r2
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	440b      	add	r3, r1
 80098e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d108      	bne.n	80098fe <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	6818      	ldr	r0, [r3, #0]
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80098f6:	461a      	mov	r2, r3
 80098f8:	2100      	movs	r1, #0
 80098fa:	f004 f943 	bl	800db84 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	b2db      	uxtb	r3, r3
 8009902:	4619      	mov	r1, r3
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	f00d fc2f 	bl	8017168 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800990a:	2300      	movs	r3, #0
}
 800990c:	4618      	mov	r0, r3
 800990e:	3718      	adds	r7, #24
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}
 8009914:	4f54300a 	.word	0x4f54300a
 8009918:	4f54310a 	.word	0x4f54310a

0800991c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800991c:	b580      	push	{r7, lr}
 800991e:	b086      	sub	sp, #24
 8009920:	af00      	add	r7, sp, #0
 8009922:	6078      	str	r0, [r7, #4]
 8009924:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800992c:	697b      	ldr	r3, [r7, #20]
 800992e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009930:	697b      	ldr	r3, [r7, #20]
 8009932:	333c      	adds	r3, #60	; 0x3c
 8009934:	3304      	adds	r3, #4
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	015a      	lsls	r2, r3, #5
 800993e:	693b      	ldr	r3, [r7, #16]
 8009940:	4413      	add	r3, r2
 8009942:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	4a15      	ldr	r2, [pc, #84]	; (80099a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d90e      	bls.n	8009970 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009958:	2b00      	cmp	r3, #0
 800995a:	d009      	beq.n	8009970 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	015a      	lsls	r2, r3, #5
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	4413      	add	r3, r2
 8009964:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009968:	461a      	mov	r2, r3
 800996a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800996e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f00d fbe7 	bl	8017144 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	4a0a      	ldr	r2, [pc, #40]	; (80099a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d90c      	bls.n	8009998 <PCD_EP_OutSetupPacket_int+0x7c>
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	691b      	ldr	r3, [r3, #16]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d108      	bne.n	8009998 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	6818      	ldr	r0, [r3, #0]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009990:	461a      	mov	r2, r3
 8009992:	2101      	movs	r1, #1
 8009994:	f004 f8f6 	bl	800db84 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009998:	2300      	movs	r3, #0
}
 800999a:	4618      	mov	r0, r3
 800999c:	3718      	adds	r7, #24
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
 80099a2:	bf00      	nop
 80099a4:	4f54300a 	.word	0x4f54300a

080099a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b085      	sub	sp, #20
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	460b      	mov	r3, r1
 80099b2:	70fb      	strb	r3, [r7, #3]
 80099b4:	4613      	mov	r3, r2
 80099b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80099c0:	78fb      	ldrb	r3, [r7, #3]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d107      	bne.n	80099d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80099c6:	883b      	ldrh	r3, [r7, #0]
 80099c8:	0419      	lsls	r1, r3, #16
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	68ba      	ldr	r2, [r7, #8]
 80099d0:	430a      	orrs	r2, r1
 80099d2:	629a      	str	r2, [r3, #40]	; 0x28
 80099d4:	e028      	b.n	8009a28 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099dc:	0c1b      	lsrs	r3, r3, #16
 80099de:	68ba      	ldr	r2, [r7, #8]
 80099e0:	4413      	add	r3, r2
 80099e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80099e4:	2300      	movs	r3, #0
 80099e6:	73fb      	strb	r3, [r7, #15]
 80099e8:	e00d      	b.n	8009a06 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681a      	ldr	r2, [r3, #0]
 80099ee:	7bfb      	ldrb	r3, [r7, #15]
 80099f0:	3340      	adds	r3, #64	; 0x40
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	4413      	add	r3, r2
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	0c1b      	lsrs	r3, r3, #16
 80099fa:	68ba      	ldr	r2, [r7, #8]
 80099fc:	4413      	add	r3, r2
 80099fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009a00:	7bfb      	ldrb	r3, [r7, #15]
 8009a02:	3301      	adds	r3, #1
 8009a04:	73fb      	strb	r3, [r7, #15]
 8009a06:	7bfa      	ldrb	r2, [r7, #15]
 8009a08:	78fb      	ldrb	r3, [r7, #3]
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	429a      	cmp	r2, r3
 8009a0e:	d3ec      	bcc.n	80099ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009a10:	883b      	ldrh	r3, [r7, #0]
 8009a12:	0418      	lsls	r0, r3, #16
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6819      	ldr	r1, [r3, #0]
 8009a18:	78fb      	ldrb	r3, [r7, #3]
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	68ba      	ldr	r2, [r7, #8]
 8009a1e:	4302      	orrs	r2, r0
 8009a20:	3340      	adds	r3, #64	; 0x40
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	440b      	add	r3, r1
 8009a26:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009a28:	2300      	movs	r3, #0
}
 8009a2a:	4618      	mov	r0, r3
 8009a2c:	3714      	adds	r7, #20
 8009a2e:	46bd      	mov	sp, r7
 8009a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a34:	4770      	bx	lr

08009a36 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009a36:	b480      	push	{r7}
 8009a38:	b083      	sub	sp, #12
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
 8009a3e:	460b      	mov	r3, r1
 8009a40:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	887a      	ldrh	r2, [r7, #2]
 8009a48:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009a4a:	2300      	movs	r3, #0
}
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
 8009a60:	460b      	mov	r3, r1
 8009a62:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009a64:	bf00      	nop
 8009a66:	370c      	adds	r7, #12
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b086      	sub	sp, #24
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d101      	bne.n	8009a82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e264      	b.n	8009f4c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f003 0301 	and.w	r3, r3, #1
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d075      	beq.n	8009b7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009a8e:	4ba3      	ldr	r3, [pc, #652]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	f003 030c 	and.w	r3, r3, #12
 8009a96:	2b04      	cmp	r3, #4
 8009a98:	d00c      	beq.n	8009ab4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009a9a:	4ba0      	ldr	r3, [pc, #640]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009a9c:	689b      	ldr	r3, [r3, #8]
 8009a9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009aa2:	2b08      	cmp	r3, #8
 8009aa4:	d112      	bne.n	8009acc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009aa6:	4b9d      	ldr	r3, [pc, #628]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009aa8:	685b      	ldr	r3, [r3, #4]
 8009aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009aae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ab2:	d10b      	bne.n	8009acc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ab4:	4b99      	ldr	r3, [pc, #612]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d05b      	beq.n	8009b78 <HAL_RCC_OscConfig+0x108>
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	685b      	ldr	r3, [r3, #4]
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d157      	bne.n	8009b78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	e23f      	b.n	8009f4c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	685b      	ldr	r3, [r3, #4]
 8009ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ad4:	d106      	bne.n	8009ae4 <HAL_RCC_OscConfig+0x74>
 8009ad6:	4b91      	ldr	r3, [pc, #580]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a90      	ldr	r2, [pc, #576]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ae0:	6013      	str	r3, [r2, #0]
 8009ae2:	e01d      	b.n	8009b20 <HAL_RCC_OscConfig+0xb0>
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	685b      	ldr	r3, [r3, #4]
 8009ae8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009aec:	d10c      	bne.n	8009b08 <HAL_RCC_OscConfig+0x98>
 8009aee:	4b8b      	ldr	r3, [pc, #556]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	4a8a      	ldr	r2, [pc, #552]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009af4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009af8:	6013      	str	r3, [r2, #0]
 8009afa:	4b88      	ldr	r3, [pc, #544]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a87      	ldr	r2, [pc, #540]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009b00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b04:	6013      	str	r3, [r2, #0]
 8009b06:	e00b      	b.n	8009b20 <HAL_RCC_OscConfig+0xb0>
 8009b08:	4b84      	ldr	r3, [pc, #528]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a83      	ldr	r2, [pc, #524]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009b0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b12:	6013      	str	r3, [r2, #0]
 8009b14:	4b81      	ldr	r3, [pc, #516]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a80      	ldr	r2, [pc, #512]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009b1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	685b      	ldr	r3, [r3, #4]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d013      	beq.n	8009b50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b28:	f7fc fb0e 	bl	8006148 <HAL_GetTick>
 8009b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b2e:	e008      	b.n	8009b42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b30:	f7fc fb0a 	bl	8006148 <HAL_GetTick>
 8009b34:	4602      	mov	r2, r0
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	1ad3      	subs	r3, r2, r3
 8009b3a:	2b64      	cmp	r3, #100	; 0x64
 8009b3c:	d901      	bls.n	8009b42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009b3e:	2303      	movs	r3, #3
 8009b40:	e204      	b.n	8009f4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009b42:	4b76      	ldr	r3, [pc, #472]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d0f0      	beq.n	8009b30 <HAL_RCC_OscConfig+0xc0>
 8009b4e:	e014      	b.n	8009b7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009b50:	f7fc fafa 	bl	8006148 <HAL_GetTick>
 8009b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b56:	e008      	b.n	8009b6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009b58:	f7fc faf6 	bl	8006148 <HAL_GetTick>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	693b      	ldr	r3, [r7, #16]
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	2b64      	cmp	r3, #100	; 0x64
 8009b64:	d901      	bls.n	8009b6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009b66:	2303      	movs	r3, #3
 8009b68:	e1f0      	b.n	8009f4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009b6a:	4b6c      	ldr	r3, [pc, #432]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d1f0      	bne.n	8009b58 <HAL_RCC_OscConfig+0xe8>
 8009b76:	e000      	b.n	8009b7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f003 0302 	and.w	r3, r3, #2
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d063      	beq.n	8009c4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009b86:	4b65      	ldr	r3, [pc, #404]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009b88:	689b      	ldr	r3, [r3, #8]
 8009b8a:	f003 030c 	and.w	r3, r3, #12
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00b      	beq.n	8009baa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009b92:	4b62      	ldr	r3, [pc, #392]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009b9a:	2b08      	cmp	r3, #8
 8009b9c:	d11c      	bne.n	8009bd8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009b9e:	4b5f      	ldr	r3, [pc, #380]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d116      	bne.n	8009bd8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009baa:	4b5c      	ldr	r3, [pc, #368]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f003 0302 	and.w	r3, r3, #2
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d005      	beq.n	8009bc2 <HAL_RCC_OscConfig+0x152>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d001      	beq.n	8009bc2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e1c4      	b.n	8009f4c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bc2:	4b56      	ldr	r3, [pc, #344]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	691b      	ldr	r3, [r3, #16]
 8009bce:	00db      	lsls	r3, r3, #3
 8009bd0:	4952      	ldr	r1, [pc, #328]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009bd6:	e03a      	b.n	8009c4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d020      	beq.n	8009c22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009be0:	4b4f      	ldr	r3, [pc, #316]	; (8009d20 <HAL_RCC_OscConfig+0x2b0>)
 8009be2:	2201      	movs	r2, #1
 8009be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009be6:	f7fc faaf 	bl	8006148 <HAL_GetTick>
 8009bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009bec:	e008      	b.n	8009c00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009bee:	f7fc faab 	bl	8006148 <HAL_GetTick>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	693b      	ldr	r3, [r7, #16]
 8009bf6:	1ad3      	subs	r3, r2, r3
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	d901      	bls.n	8009c00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009bfc:	2303      	movs	r3, #3
 8009bfe:	e1a5      	b.n	8009f4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009c00:	4b46      	ldr	r3, [pc, #280]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f003 0302 	and.w	r3, r3, #2
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d0f0      	beq.n	8009bee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c0c:	4b43      	ldr	r3, [pc, #268]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	691b      	ldr	r3, [r3, #16]
 8009c18:	00db      	lsls	r3, r3, #3
 8009c1a:	4940      	ldr	r1, [pc, #256]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009c1c:	4313      	orrs	r3, r2
 8009c1e:	600b      	str	r3, [r1, #0]
 8009c20:	e015      	b.n	8009c4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c22:	4b3f      	ldr	r3, [pc, #252]	; (8009d20 <HAL_RCC_OscConfig+0x2b0>)
 8009c24:	2200      	movs	r2, #0
 8009c26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c28:	f7fc fa8e 	bl	8006148 <HAL_GetTick>
 8009c2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c2e:	e008      	b.n	8009c42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009c30:	f7fc fa8a 	bl	8006148 <HAL_GetTick>
 8009c34:	4602      	mov	r2, r0
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	1ad3      	subs	r3, r2, r3
 8009c3a:	2b02      	cmp	r3, #2
 8009c3c:	d901      	bls.n	8009c42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009c3e:	2303      	movs	r3, #3
 8009c40:	e184      	b.n	8009f4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009c42:	4b36      	ldr	r3, [pc, #216]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	f003 0302 	and.w	r3, r3, #2
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1f0      	bne.n	8009c30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f003 0308 	and.w	r3, r3, #8
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d030      	beq.n	8009cbc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	695b      	ldr	r3, [r3, #20]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d016      	beq.n	8009c90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009c62:	4b30      	ldr	r3, [pc, #192]	; (8009d24 <HAL_RCC_OscConfig+0x2b4>)
 8009c64:	2201      	movs	r2, #1
 8009c66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c68:	f7fc fa6e 	bl	8006148 <HAL_GetTick>
 8009c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c6e:	e008      	b.n	8009c82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c70:	f7fc fa6a 	bl	8006148 <HAL_GetTick>
 8009c74:	4602      	mov	r2, r0
 8009c76:	693b      	ldr	r3, [r7, #16]
 8009c78:	1ad3      	subs	r3, r2, r3
 8009c7a:	2b02      	cmp	r3, #2
 8009c7c:	d901      	bls.n	8009c82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009c7e:	2303      	movs	r3, #3
 8009c80:	e164      	b.n	8009f4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009c82:	4b26      	ldr	r3, [pc, #152]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c86:	f003 0302 	and.w	r3, r3, #2
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d0f0      	beq.n	8009c70 <HAL_RCC_OscConfig+0x200>
 8009c8e:	e015      	b.n	8009cbc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c90:	4b24      	ldr	r3, [pc, #144]	; (8009d24 <HAL_RCC_OscConfig+0x2b4>)
 8009c92:	2200      	movs	r2, #0
 8009c94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c96:	f7fc fa57 	bl	8006148 <HAL_GetTick>
 8009c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009c9c:	e008      	b.n	8009cb0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c9e:	f7fc fa53 	bl	8006148 <HAL_GetTick>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	1ad3      	subs	r3, r2, r3
 8009ca8:	2b02      	cmp	r3, #2
 8009caa:	d901      	bls.n	8009cb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009cac:	2303      	movs	r3, #3
 8009cae:	e14d      	b.n	8009f4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009cb0:	4b1a      	ldr	r3, [pc, #104]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009cb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009cb4:	f003 0302 	and.w	r3, r3, #2
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1f0      	bne.n	8009c9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f003 0304 	and.w	r3, r3, #4
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	f000 80a0 	beq.w	8009e0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009cce:	4b13      	ldr	r3, [pc, #76]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d10f      	bne.n	8009cfa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009cda:	2300      	movs	r3, #0
 8009cdc:	60bb      	str	r3, [r7, #8]
 8009cde:	4b0f      	ldr	r3, [pc, #60]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ce2:	4a0e      	ldr	r2, [pc, #56]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8009cea:	4b0c      	ldr	r3, [pc, #48]	; (8009d1c <HAL_RCC_OscConfig+0x2ac>)
 8009cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cf2:	60bb      	str	r3, [r7, #8]
 8009cf4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009cfa:	4b0b      	ldr	r3, [pc, #44]	; (8009d28 <HAL_RCC_OscConfig+0x2b8>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d121      	bne.n	8009d4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009d06:	4b08      	ldr	r3, [pc, #32]	; (8009d28 <HAL_RCC_OscConfig+0x2b8>)
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	4a07      	ldr	r2, [pc, #28]	; (8009d28 <HAL_RCC_OscConfig+0x2b8>)
 8009d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009d12:	f7fc fa19 	bl	8006148 <HAL_GetTick>
 8009d16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d18:	e011      	b.n	8009d3e <HAL_RCC_OscConfig+0x2ce>
 8009d1a:	bf00      	nop
 8009d1c:	40023800 	.word	0x40023800
 8009d20:	42470000 	.word	0x42470000
 8009d24:	42470e80 	.word	0x42470e80
 8009d28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d2c:	f7fc fa0c 	bl	8006148 <HAL_GetTick>
 8009d30:	4602      	mov	r2, r0
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	1ad3      	subs	r3, r2, r3
 8009d36:	2b02      	cmp	r3, #2
 8009d38:	d901      	bls.n	8009d3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	e106      	b.n	8009f4c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009d3e:	4b85      	ldr	r3, [pc, #532]	; (8009f54 <HAL_RCC_OscConfig+0x4e4>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d0f0      	beq.n	8009d2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	d106      	bne.n	8009d60 <HAL_RCC_OscConfig+0x2f0>
 8009d52:	4b81      	ldr	r3, [pc, #516]	; (8009f58 <HAL_RCC_OscConfig+0x4e8>)
 8009d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d56:	4a80      	ldr	r2, [pc, #512]	; (8009f58 <HAL_RCC_OscConfig+0x4e8>)
 8009d58:	f043 0301 	orr.w	r3, r3, #1
 8009d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8009d5e:	e01c      	b.n	8009d9a <HAL_RCC_OscConfig+0x32a>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	689b      	ldr	r3, [r3, #8]
 8009d64:	2b05      	cmp	r3, #5
 8009d66:	d10c      	bne.n	8009d82 <HAL_RCC_OscConfig+0x312>
 8009d68:	4b7b      	ldr	r3, [pc, #492]	; (8009f58 <HAL_RCC_OscConfig+0x4e8>)
 8009d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d6c:	4a7a      	ldr	r2, [pc, #488]	; (8009f58 <HAL_RCC_OscConfig+0x4e8>)
 8009d6e:	f043 0304 	orr.w	r3, r3, #4
 8009d72:	6713      	str	r3, [r2, #112]	; 0x70
 8009d74:	4b78      	ldr	r3, [pc, #480]	; (8009f58 <HAL_RCC_OscConfig+0x4e8>)
 8009d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d78:	4a77      	ldr	r2, [pc, #476]	; (8009f58 <HAL_RCC_OscConfig+0x4e8>)
 8009d7a:	f043 0301 	orr.w	r3, r3, #1
 8009d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8009d80:	e00b      	b.n	8009d9a <HAL_RCC_OscConfig+0x32a>
 8009d82:	4b75      	ldr	r3, [pc, #468]	; (8009f58 <HAL_RCC_OscConfig+0x4e8>)
 8009d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d86:	4a74      	ldr	r2, [pc, #464]	; (8009f58 <HAL_RCC_OscConfig+0x4e8>)
 8009d88:	f023 0301 	bic.w	r3, r3, #1
 8009d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8009d8e:	4b72      	ldr	r3, [pc, #456]	; (8009f58 <HAL_RCC_OscConfig+0x4e8>)
 8009d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d92:	4a71      	ldr	r2, [pc, #452]	; (8009f58 <HAL_RCC_OscConfig+0x4e8>)
 8009d94:	f023 0304 	bic.w	r3, r3, #4
 8009d98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	689b      	ldr	r3, [r3, #8]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d015      	beq.n	8009dce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009da2:	f7fc f9d1 	bl	8006148 <HAL_GetTick>
 8009da6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009da8:	e00a      	b.n	8009dc0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009daa:	f7fc f9cd 	bl	8006148 <HAL_GetTick>
 8009dae:	4602      	mov	r2, r0
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	1ad3      	subs	r3, r2, r3
 8009db4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d901      	bls.n	8009dc0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009dbc:	2303      	movs	r3, #3
 8009dbe:	e0c5      	b.n	8009f4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009dc0:	4b65      	ldr	r3, [pc, #404]	; (8009f58 <HAL_RCC_OscConfig+0x4e8>)
 8009dc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dc4:	f003 0302 	and.w	r3, r3, #2
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d0ee      	beq.n	8009daa <HAL_RCC_OscConfig+0x33a>
 8009dcc:	e014      	b.n	8009df8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009dce:	f7fc f9bb 	bl	8006148 <HAL_GetTick>
 8009dd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009dd4:	e00a      	b.n	8009dec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009dd6:	f7fc f9b7 	bl	8006148 <HAL_GetTick>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	1ad3      	subs	r3, r2, r3
 8009de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d901      	bls.n	8009dec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009de8:	2303      	movs	r3, #3
 8009dea:	e0af      	b.n	8009f4c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009dec:	4b5a      	ldr	r3, [pc, #360]	; (8009f58 <HAL_RCC_OscConfig+0x4e8>)
 8009dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009df0:	f003 0302 	and.w	r3, r3, #2
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d1ee      	bne.n	8009dd6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009df8:	7dfb      	ldrb	r3, [r7, #23]
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	d105      	bne.n	8009e0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009dfe:	4b56      	ldr	r3, [pc, #344]	; (8009f58 <HAL_RCC_OscConfig+0x4e8>)
 8009e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e02:	4a55      	ldr	r2, [pc, #340]	; (8009f58 <HAL_RCC_OscConfig+0x4e8>)
 8009e04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009e08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	699b      	ldr	r3, [r3, #24]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	f000 809b 	beq.w	8009f4a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009e14:	4b50      	ldr	r3, [pc, #320]	; (8009f58 <HAL_RCC_OscConfig+0x4e8>)
 8009e16:	689b      	ldr	r3, [r3, #8]
 8009e18:	f003 030c 	and.w	r3, r3, #12
 8009e1c:	2b08      	cmp	r3, #8
 8009e1e:	d05c      	beq.n	8009eda <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	699b      	ldr	r3, [r3, #24]
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	d141      	bne.n	8009eac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e28:	4b4c      	ldr	r3, [pc, #304]	; (8009f5c <HAL_RCC_OscConfig+0x4ec>)
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e2e:	f7fc f98b 	bl	8006148 <HAL_GetTick>
 8009e32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e34:	e008      	b.n	8009e48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e36:	f7fc f987 	bl	8006148 <HAL_GetTick>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	693b      	ldr	r3, [r7, #16]
 8009e3e:	1ad3      	subs	r3, r2, r3
 8009e40:	2b02      	cmp	r3, #2
 8009e42:	d901      	bls.n	8009e48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009e44:	2303      	movs	r3, #3
 8009e46:	e081      	b.n	8009f4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009e48:	4b43      	ldr	r3, [pc, #268]	; (8009f58 <HAL_RCC_OscConfig+0x4e8>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d1f0      	bne.n	8009e36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	69da      	ldr	r2, [r3, #28]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6a1b      	ldr	r3, [r3, #32]
 8009e5c:	431a      	orrs	r2, r3
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e62:	019b      	lsls	r3, r3, #6
 8009e64:	431a      	orrs	r2, r3
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e6a:	085b      	lsrs	r3, r3, #1
 8009e6c:	3b01      	subs	r3, #1
 8009e6e:	041b      	lsls	r3, r3, #16
 8009e70:	431a      	orrs	r2, r3
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e76:	061b      	lsls	r3, r3, #24
 8009e78:	4937      	ldr	r1, [pc, #220]	; (8009f58 <HAL_RCC_OscConfig+0x4e8>)
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e7e:	4b37      	ldr	r3, [pc, #220]	; (8009f5c <HAL_RCC_OscConfig+0x4ec>)
 8009e80:	2201      	movs	r2, #1
 8009e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009e84:	f7fc f960 	bl	8006148 <HAL_GetTick>
 8009e88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e8a:	e008      	b.n	8009e9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e8c:	f7fc f95c 	bl	8006148 <HAL_GetTick>
 8009e90:	4602      	mov	r2, r0
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	1ad3      	subs	r3, r2, r3
 8009e96:	2b02      	cmp	r3, #2
 8009e98:	d901      	bls.n	8009e9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8009e9a:	2303      	movs	r3, #3
 8009e9c:	e056      	b.n	8009f4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009e9e:	4b2e      	ldr	r3, [pc, #184]	; (8009f58 <HAL_RCC_OscConfig+0x4e8>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d0f0      	beq.n	8009e8c <HAL_RCC_OscConfig+0x41c>
 8009eaa:	e04e      	b.n	8009f4a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009eac:	4b2b      	ldr	r3, [pc, #172]	; (8009f5c <HAL_RCC_OscConfig+0x4ec>)
 8009eae:	2200      	movs	r2, #0
 8009eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009eb2:	f7fc f949 	bl	8006148 <HAL_GetTick>
 8009eb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009eb8:	e008      	b.n	8009ecc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009eba:	f7fc f945 	bl	8006148 <HAL_GetTick>
 8009ebe:	4602      	mov	r2, r0
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	1ad3      	subs	r3, r2, r3
 8009ec4:	2b02      	cmp	r3, #2
 8009ec6:	d901      	bls.n	8009ecc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8009ec8:	2303      	movs	r3, #3
 8009eca:	e03f      	b.n	8009f4c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009ecc:	4b22      	ldr	r3, [pc, #136]	; (8009f58 <HAL_RCC_OscConfig+0x4e8>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d1f0      	bne.n	8009eba <HAL_RCC_OscConfig+0x44a>
 8009ed8:	e037      	b.n	8009f4a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	699b      	ldr	r3, [r3, #24]
 8009ede:	2b01      	cmp	r3, #1
 8009ee0:	d101      	bne.n	8009ee6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	e032      	b.n	8009f4c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009ee6:	4b1c      	ldr	r3, [pc, #112]	; (8009f58 <HAL_RCC_OscConfig+0x4e8>)
 8009ee8:	685b      	ldr	r3, [r3, #4]
 8009eea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	699b      	ldr	r3, [r3, #24]
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d028      	beq.n	8009f46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009efe:	429a      	cmp	r2, r3
 8009f00:	d121      	bne.n	8009f46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f0c:	429a      	cmp	r2, r3
 8009f0e:	d11a      	bne.n	8009f46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009f16:	4013      	ands	r3, r2
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009f1c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009f1e:	4293      	cmp	r3, r2
 8009f20:	d111      	bne.n	8009f46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f2c:	085b      	lsrs	r3, r3, #1
 8009f2e:	3b01      	subs	r3, #1
 8009f30:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d107      	bne.n	8009f46 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f40:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d001      	beq.n	8009f4a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8009f46:	2301      	movs	r3, #1
 8009f48:	e000      	b.n	8009f4c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8009f4a:	2300      	movs	r3, #0
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	3718      	adds	r7, #24
 8009f50:	46bd      	mov	sp, r7
 8009f52:	bd80      	pop	{r7, pc}
 8009f54:	40007000 	.word	0x40007000
 8009f58:	40023800 	.word	0x40023800
 8009f5c:	42470060 	.word	0x42470060

08009f60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b084      	sub	sp, #16
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d101      	bne.n	8009f74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f70:	2301      	movs	r3, #1
 8009f72:	e0cc      	b.n	800a10e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009f74:	4b68      	ldr	r3, [pc, #416]	; (800a118 <HAL_RCC_ClockConfig+0x1b8>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	f003 0307 	and.w	r3, r3, #7
 8009f7c:	683a      	ldr	r2, [r7, #0]
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d90c      	bls.n	8009f9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f82:	4b65      	ldr	r3, [pc, #404]	; (800a118 <HAL_RCC_ClockConfig+0x1b8>)
 8009f84:	683a      	ldr	r2, [r7, #0]
 8009f86:	b2d2      	uxtb	r2, r2
 8009f88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f8a:	4b63      	ldr	r3, [pc, #396]	; (800a118 <HAL_RCC_ClockConfig+0x1b8>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f003 0307 	and.w	r3, r3, #7
 8009f92:	683a      	ldr	r2, [r7, #0]
 8009f94:	429a      	cmp	r2, r3
 8009f96:	d001      	beq.n	8009f9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e0b8      	b.n	800a10e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	f003 0302 	and.w	r3, r3, #2
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d020      	beq.n	8009fea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 0304 	and.w	r3, r3, #4
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d005      	beq.n	8009fc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009fb4:	4b59      	ldr	r3, [pc, #356]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 8009fb6:	689b      	ldr	r3, [r3, #8]
 8009fb8:	4a58      	ldr	r2, [pc, #352]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 8009fba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009fbe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	f003 0308 	and.w	r3, r3, #8
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d005      	beq.n	8009fd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009fcc:	4b53      	ldr	r3, [pc, #332]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	4a52      	ldr	r2, [pc, #328]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 8009fd2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009fd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009fd8:	4b50      	ldr	r3, [pc, #320]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	689b      	ldr	r3, [r3, #8]
 8009fe4:	494d      	ldr	r1, [pc, #308]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 8009fe6:	4313      	orrs	r3, r2
 8009fe8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f003 0301 	and.w	r3, r3, #1
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d044      	beq.n	800a080 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	2b01      	cmp	r3, #1
 8009ffc:	d107      	bne.n	800a00e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009ffe:	4b47      	ldr	r3, [pc, #284]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a006:	2b00      	cmp	r3, #0
 800a008:	d119      	bne.n	800a03e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a00a:	2301      	movs	r3, #1
 800a00c:	e07f      	b.n	800a10e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	2b02      	cmp	r3, #2
 800a014:	d003      	beq.n	800a01e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a01a:	2b03      	cmp	r3, #3
 800a01c:	d107      	bne.n	800a02e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a01e:	4b3f      	ldr	r3, [pc, #252]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a026:	2b00      	cmp	r3, #0
 800a028:	d109      	bne.n	800a03e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a02a:	2301      	movs	r3, #1
 800a02c:	e06f      	b.n	800a10e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a02e:	4b3b      	ldr	r3, [pc, #236]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	f003 0302 	and.w	r3, r3, #2
 800a036:	2b00      	cmp	r3, #0
 800a038:	d101      	bne.n	800a03e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a03a:	2301      	movs	r3, #1
 800a03c:	e067      	b.n	800a10e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a03e:	4b37      	ldr	r3, [pc, #220]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 800a040:	689b      	ldr	r3, [r3, #8]
 800a042:	f023 0203 	bic.w	r2, r3, #3
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	685b      	ldr	r3, [r3, #4]
 800a04a:	4934      	ldr	r1, [pc, #208]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 800a04c:	4313      	orrs	r3, r2
 800a04e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a050:	f7fc f87a 	bl	8006148 <HAL_GetTick>
 800a054:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a056:	e00a      	b.n	800a06e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a058:	f7fc f876 	bl	8006148 <HAL_GetTick>
 800a05c:	4602      	mov	r2, r0
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	1ad3      	subs	r3, r2, r3
 800a062:	f241 3288 	movw	r2, #5000	; 0x1388
 800a066:	4293      	cmp	r3, r2
 800a068:	d901      	bls.n	800a06e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a06a:	2303      	movs	r3, #3
 800a06c:	e04f      	b.n	800a10e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a06e:	4b2b      	ldr	r3, [pc, #172]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 800a070:	689b      	ldr	r3, [r3, #8]
 800a072:	f003 020c 	and.w	r2, r3, #12
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	685b      	ldr	r3, [r3, #4]
 800a07a:	009b      	lsls	r3, r3, #2
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d1eb      	bne.n	800a058 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a080:	4b25      	ldr	r3, [pc, #148]	; (800a118 <HAL_RCC_ClockConfig+0x1b8>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f003 0307 	and.w	r3, r3, #7
 800a088:	683a      	ldr	r2, [r7, #0]
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d20c      	bcs.n	800a0a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a08e:	4b22      	ldr	r3, [pc, #136]	; (800a118 <HAL_RCC_ClockConfig+0x1b8>)
 800a090:	683a      	ldr	r2, [r7, #0]
 800a092:	b2d2      	uxtb	r2, r2
 800a094:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a096:	4b20      	ldr	r3, [pc, #128]	; (800a118 <HAL_RCC_ClockConfig+0x1b8>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f003 0307 	and.w	r3, r3, #7
 800a09e:	683a      	ldr	r2, [r7, #0]
 800a0a0:	429a      	cmp	r2, r3
 800a0a2:	d001      	beq.n	800a0a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	e032      	b.n	800a10e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f003 0304 	and.w	r3, r3, #4
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d008      	beq.n	800a0c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a0b4:	4b19      	ldr	r3, [pc, #100]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 800a0b6:	689b      	ldr	r3, [r3, #8]
 800a0b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	68db      	ldr	r3, [r3, #12]
 800a0c0:	4916      	ldr	r1, [pc, #88]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f003 0308 	and.w	r3, r3, #8
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d009      	beq.n	800a0e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a0d2:	4b12      	ldr	r3, [pc, #72]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 800a0d4:	689b      	ldr	r3, [r3, #8]
 800a0d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	691b      	ldr	r3, [r3, #16]
 800a0de:	00db      	lsls	r3, r3, #3
 800a0e0:	490e      	ldr	r1, [pc, #56]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a0e6:	f000 f821 	bl	800a12c <HAL_RCC_GetSysClockFreq>
 800a0ea:	4602      	mov	r2, r0
 800a0ec:	4b0b      	ldr	r3, [pc, #44]	; (800a11c <HAL_RCC_ClockConfig+0x1bc>)
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	091b      	lsrs	r3, r3, #4
 800a0f2:	f003 030f 	and.w	r3, r3, #15
 800a0f6:	490a      	ldr	r1, [pc, #40]	; (800a120 <HAL_RCC_ClockConfig+0x1c0>)
 800a0f8:	5ccb      	ldrb	r3, [r1, r3]
 800a0fa:	fa22 f303 	lsr.w	r3, r2, r3
 800a0fe:	4a09      	ldr	r2, [pc, #36]	; (800a124 <HAL_RCC_ClockConfig+0x1c4>)
 800a100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a102:	4b09      	ldr	r3, [pc, #36]	; (800a128 <HAL_RCC_ClockConfig+0x1c8>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	4618      	mov	r0, r3
 800a108:	f7fb f8be 	bl	8005288 <HAL_InitTick>

  return HAL_OK;
 800a10c:	2300      	movs	r3, #0
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3710      	adds	r7, #16
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	40023c00 	.word	0x40023c00
 800a11c:	40023800 	.word	0x40023800
 800a120:	0801af14 	.word	0x0801af14
 800a124:	20000008 	.word	0x20000008
 800a128:	20000034 	.word	0x20000034

0800a12c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a12c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800a130:	b084      	sub	sp, #16
 800a132:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a134:	2300      	movs	r3, #0
 800a136:	607b      	str	r3, [r7, #4]
 800a138:	2300      	movs	r3, #0
 800a13a:	60fb      	str	r3, [r7, #12]
 800a13c:	2300      	movs	r3, #0
 800a13e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a140:	2300      	movs	r3, #0
 800a142:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a144:	4b67      	ldr	r3, [pc, #412]	; (800a2e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	f003 030c 	and.w	r3, r3, #12
 800a14c:	2b08      	cmp	r3, #8
 800a14e:	d00d      	beq.n	800a16c <HAL_RCC_GetSysClockFreq+0x40>
 800a150:	2b08      	cmp	r3, #8
 800a152:	f200 80bd 	bhi.w	800a2d0 <HAL_RCC_GetSysClockFreq+0x1a4>
 800a156:	2b00      	cmp	r3, #0
 800a158:	d002      	beq.n	800a160 <HAL_RCC_GetSysClockFreq+0x34>
 800a15a:	2b04      	cmp	r3, #4
 800a15c:	d003      	beq.n	800a166 <HAL_RCC_GetSysClockFreq+0x3a>
 800a15e:	e0b7      	b.n	800a2d0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a160:	4b61      	ldr	r3, [pc, #388]	; (800a2e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a162:	60bb      	str	r3, [r7, #8]
       break;
 800a164:	e0b7      	b.n	800a2d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a166:	4b61      	ldr	r3, [pc, #388]	; (800a2ec <HAL_RCC_GetSysClockFreq+0x1c0>)
 800a168:	60bb      	str	r3, [r7, #8]
      break;
 800a16a:	e0b4      	b.n	800a2d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a16c:	4b5d      	ldr	r3, [pc, #372]	; (800a2e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a174:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a176:	4b5b      	ldr	r3, [pc, #364]	; (800a2e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d04d      	beq.n	800a21e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a182:	4b58      	ldr	r3, [pc, #352]	; (800a2e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	099b      	lsrs	r3, r3, #6
 800a188:	461a      	mov	r2, r3
 800a18a:	f04f 0300 	mov.w	r3, #0
 800a18e:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a192:	f04f 0100 	mov.w	r1, #0
 800a196:	ea02 0800 	and.w	r8, r2, r0
 800a19a:	ea03 0901 	and.w	r9, r3, r1
 800a19e:	4640      	mov	r0, r8
 800a1a0:	4649      	mov	r1, r9
 800a1a2:	f04f 0200 	mov.w	r2, #0
 800a1a6:	f04f 0300 	mov.w	r3, #0
 800a1aa:	014b      	lsls	r3, r1, #5
 800a1ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a1b0:	0142      	lsls	r2, r0, #5
 800a1b2:	4610      	mov	r0, r2
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	ebb0 0008 	subs.w	r0, r0, r8
 800a1ba:	eb61 0109 	sbc.w	r1, r1, r9
 800a1be:	f04f 0200 	mov.w	r2, #0
 800a1c2:	f04f 0300 	mov.w	r3, #0
 800a1c6:	018b      	lsls	r3, r1, #6
 800a1c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a1cc:	0182      	lsls	r2, r0, #6
 800a1ce:	1a12      	subs	r2, r2, r0
 800a1d0:	eb63 0301 	sbc.w	r3, r3, r1
 800a1d4:	f04f 0000 	mov.w	r0, #0
 800a1d8:	f04f 0100 	mov.w	r1, #0
 800a1dc:	00d9      	lsls	r1, r3, #3
 800a1de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a1e2:	00d0      	lsls	r0, r2, #3
 800a1e4:	4602      	mov	r2, r0
 800a1e6:	460b      	mov	r3, r1
 800a1e8:	eb12 0208 	adds.w	r2, r2, r8
 800a1ec:	eb43 0309 	adc.w	r3, r3, r9
 800a1f0:	f04f 0000 	mov.w	r0, #0
 800a1f4:	f04f 0100 	mov.w	r1, #0
 800a1f8:	0259      	lsls	r1, r3, #9
 800a1fa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800a1fe:	0250      	lsls	r0, r2, #9
 800a200:	4602      	mov	r2, r0
 800a202:	460b      	mov	r3, r1
 800a204:	4610      	mov	r0, r2
 800a206:	4619      	mov	r1, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	461a      	mov	r2, r3
 800a20c:	f04f 0300 	mov.w	r3, #0
 800a210:	f7f6 fd3a 	bl	8000c88 <__aeabi_uldivmod>
 800a214:	4602      	mov	r2, r0
 800a216:	460b      	mov	r3, r1
 800a218:	4613      	mov	r3, r2
 800a21a:	60fb      	str	r3, [r7, #12]
 800a21c:	e04a      	b.n	800a2b4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a21e:	4b31      	ldr	r3, [pc, #196]	; (800a2e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	099b      	lsrs	r3, r3, #6
 800a224:	461a      	mov	r2, r3
 800a226:	f04f 0300 	mov.w	r3, #0
 800a22a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a22e:	f04f 0100 	mov.w	r1, #0
 800a232:	ea02 0400 	and.w	r4, r2, r0
 800a236:	ea03 0501 	and.w	r5, r3, r1
 800a23a:	4620      	mov	r0, r4
 800a23c:	4629      	mov	r1, r5
 800a23e:	f04f 0200 	mov.w	r2, #0
 800a242:	f04f 0300 	mov.w	r3, #0
 800a246:	014b      	lsls	r3, r1, #5
 800a248:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a24c:	0142      	lsls	r2, r0, #5
 800a24e:	4610      	mov	r0, r2
 800a250:	4619      	mov	r1, r3
 800a252:	1b00      	subs	r0, r0, r4
 800a254:	eb61 0105 	sbc.w	r1, r1, r5
 800a258:	f04f 0200 	mov.w	r2, #0
 800a25c:	f04f 0300 	mov.w	r3, #0
 800a260:	018b      	lsls	r3, r1, #6
 800a262:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a266:	0182      	lsls	r2, r0, #6
 800a268:	1a12      	subs	r2, r2, r0
 800a26a:	eb63 0301 	sbc.w	r3, r3, r1
 800a26e:	f04f 0000 	mov.w	r0, #0
 800a272:	f04f 0100 	mov.w	r1, #0
 800a276:	00d9      	lsls	r1, r3, #3
 800a278:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a27c:	00d0      	lsls	r0, r2, #3
 800a27e:	4602      	mov	r2, r0
 800a280:	460b      	mov	r3, r1
 800a282:	1912      	adds	r2, r2, r4
 800a284:	eb45 0303 	adc.w	r3, r5, r3
 800a288:	f04f 0000 	mov.w	r0, #0
 800a28c:	f04f 0100 	mov.w	r1, #0
 800a290:	0299      	lsls	r1, r3, #10
 800a292:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a296:	0290      	lsls	r0, r2, #10
 800a298:	4602      	mov	r2, r0
 800a29a:	460b      	mov	r3, r1
 800a29c:	4610      	mov	r0, r2
 800a29e:	4619      	mov	r1, r3
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	461a      	mov	r2, r3
 800a2a4:	f04f 0300 	mov.w	r3, #0
 800a2a8:	f7f6 fcee 	bl	8000c88 <__aeabi_uldivmod>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	460b      	mov	r3, r1
 800a2b0:	4613      	mov	r3, r2
 800a2b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a2b4:	4b0b      	ldr	r3, [pc, #44]	; (800a2e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800a2b6:	685b      	ldr	r3, [r3, #4]
 800a2b8:	0c1b      	lsrs	r3, r3, #16
 800a2ba:	f003 0303 	and.w	r3, r3, #3
 800a2be:	3301      	adds	r3, #1
 800a2c0:	005b      	lsls	r3, r3, #1
 800a2c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2cc:	60bb      	str	r3, [r7, #8]
      break;
 800a2ce:	e002      	b.n	800a2d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a2d0:	4b05      	ldr	r3, [pc, #20]	; (800a2e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800a2d2:	60bb      	str	r3, [r7, #8]
      break;
 800a2d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a2d6:	68bb      	ldr	r3, [r7, #8]
}
 800a2d8:	4618      	mov	r0, r3
 800a2da:	3710      	adds	r7, #16
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800a2e2:	bf00      	nop
 800a2e4:	40023800 	.word	0x40023800
 800a2e8:	00f42400 	.word	0x00f42400
 800a2ec:	007a1200 	.word	0x007a1200

0800a2f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a2f4:	4b03      	ldr	r3, [pc, #12]	; (800a304 <HAL_RCC_GetHCLKFreq+0x14>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr
 800a302:	bf00      	nop
 800a304:	20000008 	.word	0x20000008

0800a308 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a30c:	f7ff fff0 	bl	800a2f0 <HAL_RCC_GetHCLKFreq>
 800a310:	4602      	mov	r2, r0
 800a312:	4b05      	ldr	r3, [pc, #20]	; (800a328 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a314:	689b      	ldr	r3, [r3, #8]
 800a316:	0a9b      	lsrs	r3, r3, #10
 800a318:	f003 0307 	and.w	r3, r3, #7
 800a31c:	4903      	ldr	r1, [pc, #12]	; (800a32c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a31e:	5ccb      	ldrb	r3, [r1, r3]
 800a320:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a324:	4618      	mov	r0, r3
 800a326:	bd80      	pop	{r7, pc}
 800a328:	40023800 	.word	0x40023800
 800a32c:	0801af24 	.word	0x0801af24

0800a330 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a330:	b480      	push	{r7}
 800a332:	b083      	sub	sp, #12
 800a334:	af00      	add	r7, sp, #0
 800a336:	6078      	str	r0, [r7, #4]
 800a338:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	220f      	movs	r2, #15
 800a33e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a340:	4b12      	ldr	r3, [pc, #72]	; (800a38c <HAL_RCC_GetClockConfig+0x5c>)
 800a342:	689b      	ldr	r3, [r3, #8]
 800a344:	f003 0203 	and.w	r2, r3, #3
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a34c:	4b0f      	ldr	r3, [pc, #60]	; (800a38c <HAL_RCC_GetClockConfig+0x5c>)
 800a34e:	689b      	ldr	r3, [r3, #8]
 800a350:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a358:	4b0c      	ldr	r3, [pc, #48]	; (800a38c <HAL_RCC_GetClockConfig+0x5c>)
 800a35a:	689b      	ldr	r3, [r3, #8]
 800a35c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a364:	4b09      	ldr	r3, [pc, #36]	; (800a38c <HAL_RCC_GetClockConfig+0x5c>)
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	08db      	lsrs	r3, r3, #3
 800a36a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a372:	4b07      	ldr	r3, [pc, #28]	; (800a390 <HAL_RCC_GetClockConfig+0x60>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f003 0207 	and.w	r2, r3, #7
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	601a      	str	r2, [r3, #0]
}
 800a37e:	bf00      	nop
 800a380:	370c      	adds	r7, #12
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr
 800a38a:	bf00      	nop
 800a38c:	40023800 	.word	0x40023800
 800a390:	40023c00 	.word	0x40023c00

0800a394 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b086      	sub	sp, #24
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a39c:	2300      	movs	r3, #0
 800a39e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f003 0301 	and.w	r3, r3, #1
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d105      	bne.n	800a3bc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800a3b8:	2b00      	cmp	r3, #0
 800a3ba:	d035      	beq.n	800a428 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800a3bc:	4b62      	ldr	r3, [pc, #392]	; (800a548 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a3be:	2200      	movs	r2, #0
 800a3c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a3c2:	f7fb fec1 	bl	8006148 <HAL_GetTick>
 800a3c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a3c8:	e008      	b.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a3ca:	f7fb febd 	bl	8006148 <HAL_GetTick>
 800a3ce:	4602      	mov	r2, r0
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	1ad3      	subs	r3, r2, r3
 800a3d4:	2b02      	cmp	r3, #2
 800a3d6:	d901      	bls.n	800a3dc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a3d8:	2303      	movs	r3, #3
 800a3da:	e0b0      	b.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800a3dc:	4b5b      	ldr	r3, [pc, #364]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3e4:	2b00      	cmp	r3, #0
 800a3e6:	d1f0      	bne.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	685b      	ldr	r3, [r3, #4]
 800a3ec:	019a      	lsls	r2, r3, #6
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	689b      	ldr	r3, [r3, #8]
 800a3f2:	071b      	lsls	r3, r3, #28
 800a3f4:	4955      	ldr	r1, [pc, #340]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a3f6:	4313      	orrs	r3, r2
 800a3f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800a3fc:	4b52      	ldr	r3, [pc, #328]	; (800a548 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800a3fe:	2201      	movs	r2, #1
 800a400:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800a402:	f7fb fea1 	bl	8006148 <HAL_GetTick>
 800a406:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a408:	e008      	b.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800a40a:	f7fb fe9d 	bl	8006148 <HAL_GetTick>
 800a40e:	4602      	mov	r2, r0
 800a410:	697b      	ldr	r3, [r7, #20]
 800a412:	1ad3      	subs	r3, r2, r3
 800a414:	2b02      	cmp	r3, #2
 800a416:	d901      	bls.n	800a41c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800a418:	2303      	movs	r3, #3
 800a41a:	e090      	b.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800a41c:	4b4b      	ldr	r3, [pc, #300]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a424:	2b00      	cmp	r3, #0
 800a426:	d0f0      	beq.n	800a40a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	f003 0302 	and.w	r3, r3, #2
 800a430:	2b00      	cmp	r3, #0
 800a432:	f000 8083 	beq.w	800a53c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800a436:	2300      	movs	r3, #0
 800a438:	60fb      	str	r3, [r7, #12]
 800a43a:	4b44      	ldr	r3, [pc, #272]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a43c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a43e:	4a43      	ldr	r2, [pc, #268]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a444:	6413      	str	r3, [r2, #64]	; 0x40
 800a446:	4b41      	ldr	r3, [pc, #260]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a44a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a44e:	60fb      	str	r3, [r7, #12]
 800a450:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800a452:	4b3f      	ldr	r3, [pc, #252]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4a3e      	ldr	r2, [pc, #248]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a45c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a45e:	f7fb fe73 	bl	8006148 <HAL_GetTick>
 800a462:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a464:	e008      	b.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a466:	f7fb fe6f 	bl	8006148 <HAL_GetTick>
 800a46a:	4602      	mov	r2, r0
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	1ad3      	subs	r3, r2, r3
 800a470:	2b02      	cmp	r3, #2
 800a472:	d901      	bls.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800a474:	2303      	movs	r3, #3
 800a476:	e062      	b.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800a478:	4b35      	ldr	r3, [pc, #212]	; (800a550 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a480:	2b00      	cmp	r3, #0
 800a482:	d0f0      	beq.n	800a466 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a484:	4b31      	ldr	r3, [pc, #196]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a488:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a48c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a48e:	693b      	ldr	r3, [r7, #16]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d02f      	beq.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	68db      	ldr	r3, [r3, #12]
 800a498:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a49c:	693a      	ldr	r2, [r7, #16]
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d028      	beq.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a4a2:	4b2a      	ldr	r3, [pc, #168]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a4a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a4ac:	4b29      	ldr	r3, [pc, #164]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a4ae:	2201      	movs	r2, #1
 800a4b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a4b2:	4b28      	ldr	r3, [pc, #160]	; (800a554 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800a4b8:	4a24      	ldr	r2, [pc, #144]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800a4be:	4b23      	ldr	r3, [pc, #140]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a4c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4c2:	f003 0301 	and.w	r3, r3, #1
 800a4c6:	2b01      	cmp	r3, #1
 800a4c8:	d114      	bne.n	800a4f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800a4ca:	f7fb fe3d 	bl	8006148 <HAL_GetTick>
 800a4ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4d0:	e00a      	b.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a4d2:	f7fb fe39 	bl	8006148 <HAL_GetTick>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	697b      	ldr	r3, [r7, #20]
 800a4da:	1ad3      	subs	r3, r2, r3
 800a4dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4e0:	4293      	cmp	r3, r2
 800a4e2:	d901      	bls.n	800a4e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800a4e4:	2303      	movs	r3, #3
 800a4e6:	e02a      	b.n	800a53e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a4e8:	4b18      	ldr	r3, [pc, #96]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a4ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ec:	f003 0302 	and.w	r3, r3, #2
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d0ee      	beq.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	68db      	ldr	r3, [r3, #12]
 800a4f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a4fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a500:	d10d      	bne.n	800a51e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a502:	4b12      	ldr	r3, [pc, #72]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a504:	689b      	ldr	r3, [r3, #8]
 800a506:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800a512:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a516:	490d      	ldr	r1, [pc, #52]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a518:	4313      	orrs	r3, r2
 800a51a:	608b      	str	r3, [r1, #8]
 800a51c:	e005      	b.n	800a52a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a51e:	4b0b      	ldr	r3, [pc, #44]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	4a0a      	ldr	r2, [pc, #40]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a524:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800a528:	6093      	str	r3, [r2, #8]
 800a52a:	4b08      	ldr	r3, [pc, #32]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a52c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a536:	4905      	ldr	r1, [pc, #20]	; (800a54c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800a538:	4313      	orrs	r3, r2
 800a53a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800a53c:	2300      	movs	r3, #0
}
 800a53e:	4618      	mov	r0, r3
 800a540:	3718      	adds	r7, #24
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	42470068 	.word	0x42470068
 800a54c:	40023800 	.word	0x40023800
 800a550:	40007000 	.word	0x40007000
 800a554:	42470e40 	.word	0x42470e40

0800a558 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d101      	bne.n	800a56a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800a566:	2301      	movs	r3, #1
 800a568:	e01c      	b.n	800a5a4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	795b      	ldrb	r3, [r3, #5]
 800a56e:	b2db      	uxtb	r3, r3
 800a570:	2b00      	cmp	r3, #0
 800a572:	d105      	bne.n	800a580 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	2200      	movs	r2, #0
 800a578:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800a57a:	6878      	ldr	r0, [r7, #4]
 800a57c:	f7fa fc9e 	bl	8004ebc <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2202      	movs	r2, #2
 800a584:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f042 0204 	orr.w	r2, r2, #4
 800a594:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2201      	movs	r2, #1
 800a59a:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 800a5a2:	2300      	movs	r3, #0
}
 800a5a4:	4618      	mov	r0, r3
 800a5a6:	3708      	adds	r7, #8
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	bd80      	pop	{r7, pc}

0800a5ac <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d101      	bne.n	800a5be <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e083      	b.n	800a6c6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	7f5b      	ldrb	r3, [r3, #29]
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d105      	bne.n	800a5d4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f7fa fc96 	bl	8004f00 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2202      	movs	r2, #2
 800a5d8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	22ca      	movs	r2, #202	; 0xca
 800a5e0:	625a      	str	r2, [r3, #36]	; 0x24
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	2253      	movs	r2, #83	; 0x53
 800a5e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 fbc0 	bl	800ad70 <RTC_EnterInitMode>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d008      	beq.n	800a608 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	22ff      	movs	r2, #255	; 0xff
 800a5fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2204      	movs	r2, #4
 800a602:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800a604:	2301      	movs	r3, #1
 800a606:	e05e      	b.n	800a6c6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	6812      	ldr	r2, [r2, #0]
 800a612:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a616:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a61a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	6899      	ldr	r1, [r3, #8]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	685a      	ldr	r2, [r3, #4]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	691b      	ldr	r3, [r3, #16]
 800a62a:	431a      	orrs	r2, r3
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	695b      	ldr	r3, [r3, #20]
 800a630:	431a      	orrs	r2, r3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	430a      	orrs	r2, r1
 800a638:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	68d2      	ldr	r2, [r2, #12]
 800a642:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	6919      	ldr	r1, [r3, #16]
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	689b      	ldr	r3, [r3, #8]
 800a64e:	041a      	lsls	r2, r3, #16
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	430a      	orrs	r2, r1
 800a656:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	68da      	ldr	r2, [r3, #12]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a666:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	689b      	ldr	r3, [r3, #8]
 800a66e:	f003 0320 	and.w	r3, r3, #32
 800a672:	2b00      	cmp	r3, #0
 800a674:	d10e      	bne.n	800a694 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a676:	6878      	ldr	r0, [r7, #4]
 800a678:	f000 fb52 	bl	800ad20 <HAL_RTC_WaitForSynchro>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d008      	beq.n	800a694 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	22ff      	movs	r2, #255	; 0xff
 800a688:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2204      	movs	r2, #4
 800a68e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	e018      	b.n	800a6c6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a6a2:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	699a      	ldr	r2, [r3, #24]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	430a      	orrs	r2, r1
 800a6b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	22ff      	movs	r2, #255	; 0xff
 800a6bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800a6c4:	2300      	movs	r3, #0
  }
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3708      	adds	r7, #8
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}

0800a6ce <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a6ce:	b590      	push	{r4, r7, lr}
 800a6d0:	b087      	sub	sp, #28
 800a6d2:	af00      	add	r7, sp, #0
 800a6d4:	60f8      	str	r0, [r7, #12]
 800a6d6:	60b9      	str	r1, [r7, #8]
 800a6d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	7f1b      	ldrb	r3, [r3, #28]
 800a6e2:	2b01      	cmp	r3, #1
 800a6e4:	d101      	bne.n	800a6ea <HAL_RTC_SetTime+0x1c>
 800a6e6:	2302      	movs	r3, #2
 800a6e8:	e0aa      	b.n	800a840 <HAL_RTC_SetTime+0x172>
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2201      	movs	r2, #1
 800a6ee:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	2202      	movs	r2, #2
 800a6f4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d126      	bne.n	800a74a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	689b      	ldr	r3, [r3, #8]
 800a702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a706:	2b00      	cmp	r3, #0
 800a708:	d102      	bne.n	800a710 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	2200      	movs	r2, #0
 800a70e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	781b      	ldrb	r3, [r3, #0]
 800a714:	4618      	mov	r0, r3
 800a716:	f000 fb57 	bl	800adc8 <RTC_ByteToBcd2>
 800a71a:	4603      	mov	r3, r0
 800a71c:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	785b      	ldrb	r3, [r3, #1]
 800a722:	4618      	mov	r0, r3
 800a724:	f000 fb50 	bl	800adc8 <RTC_ByteToBcd2>
 800a728:	4603      	mov	r3, r0
 800a72a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a72c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	789b      	ldrb	r3, [r3, #2]
 800a732:	4618      	mov	r0, r3
 800a734:	f000 fb48 	bl	800adc8 <RTC_ByteToBcd2>
 800a738:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800a73a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	78db      	ldrb	r3, [r3, #3]
 800a742:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800a744:	4313      	orrs	r3, r2
 800a746:	617b      	str	r3, [r7, #20]
 800a748:	e018      	b.n	800a77c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	689b      	ldr	r3, [r3, #8]
 800a750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a754:	2b00      	cmp	r3, #0
 800a756:	d102      	bne.n	800a75e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	2200      	movs	r2, #0
 800a75c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800a764:	68bb      	ldr	r3, [r7, #8]
 800a766:	785b      	ldrb	r3, [r3, #1]
 800a768:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a76a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800a76c:	68ba      	ldr	r2, [r7, #8]
 800a76e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800a770:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	78db      	ldrb	r3, [r3, #3]
 800a776:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800a778:	4313      	orrs	r3, r2
 800a77a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	22ca      	movs	r2, #202	; 0xca
 800a782:	625a      	str	r2, [r3, #36]	; 0x24
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2253      	movs	r2, #83	; 0x53
 800a78a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a78c:	68f8      	ldr	r0, [r7, #12]
 800a78e:	f000 faef 	bl	800ad70 <RTC_EnterInitMode>
 800a792:	4603      	mov	r3, r0
 800a794:	2b00      	cmp	r3, #0
 800a796:	d00b      	beq.n	800a7b0 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	22ff      	movs	r2, #255	; 0xff
 800a79e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	2204      	movs	r2, #4
 800a7a4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	e047      	b.n	800a840 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a7ba:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a7be:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	689a      	ldr	r2, [r3, #8]
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800a7ce:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	6899      	ldr	r1, [r3, #8]
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	68da      	ldr	r2, [r3, #12]
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	691b      	ldr	r3, [r3, #16]
 800a7de:	431a      	orrs	r2, r3
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	430a      	orrs	r2, r1
 800a7e6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	68da      	ldr	r2, [r3, #12]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a7f6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	689b      	ldr	r3, [r3, #8]
 800a7fe:	f003 0320 	and.w	r3, r3, #32
 800a802:	2b00      	cmp	r3, #0
 800a804:	d111      	bne.n	800a82a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a806:	68f8      	ldr	r0, [r7, #12]
 800a808:	f000 fa8a 	bl	800ad20 <HAL_RTC_WaitForSynchro>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00b      	beq.n	800a82a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	22ff      	movs	r2, #255	; 0xff
 800a818:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2204      	movs	r2, #4
 800a81e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2200      	movs	r2, #0
 800a824:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800a826:	2301      	movs	r3, #1
 800a828:	e00a      	b.n	800a840 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	22ff      	movs	r2, #255	; 0xff
 800a830:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2201      	movs	r2, #1
 800a836:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	2200      	movs	r2, #0
 800a83c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800a83e:	2300      	movs	r3, #0
  }
}
 800a840:	4618      	mov	r0, r3
 800a842:	371c      	adds	r7, #28
 800a844:	46bd      	mov	sp, r7
 800a846:	bd90      	pop	{r4, r7, pc}

0800a848 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b086      	sub	sp, #24
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800a854:	2300      	movs	r3, #0
 800a856:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a85e:	68bb      	ldr	r3, [r7, #8]
 800a860:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	691b      	ldr	r3, [r3, #16]
 800a868:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800a86c:	68bb      	ldr	r3, [r7, #8]
 800a86e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800a87a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800a87e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	0c1b      	lsrs	r3, r3, #16
 800a884:	b2db      	uxtb	r3, r3
 800a886:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a88a:	b2da      	uxtb	r2, r3
 800a88c:	68bb      	ldr	r3, [r7, #8]
 800a88e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	0a1b      	lsrs	r3, r3, #8
 800a894:	b2db      	uxtb	r3, r3
 800a896:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a89a:	b2da      	uxtb	r2, r3
 800a89c:	68bb      	ldr	r3, [r7, #8]
 800a89e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a8a8:	b2da      	uxtb	r2, r3
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	0c1b      	lsrs	r3, r3, #16
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8b8:	b2da      	uxtb	r2, r3
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d11a      	bne.n	800a8fa <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800a8c4:	68bb      	ldr	r3, [r7, #8]
 800a8c6:	781b      	ldrb	r3, [r3, #0]
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f000 fa9b 	bl	800ae04 <RTC_Bcd2ToByte>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	461a      	mov	r2, r3
 800a8d2:	68bb      	ldr	r3, [r7, #8]
 800a8d4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800a8d6:	68bb      	ldr	r3, [r7, #8]
 800a8d8:	785b      	ldrb	r3, [r3, #1]
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f000 fa92 	bl	800ae04 <RTC_Bcd2ToByte>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800a8e8:	68bb      	ldr	r3, [r7, #8]
 800a8ea:	789b      	ldrb	r3, [r3, #2]
 800a8ec:	4618      	mov	r0, r3
 800a8ee:	f000 fa89 	bl	800ae04 <RTC_Bcd2ToByte>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	461a      	mov	r2, r3
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800a8fa:	2300      	movs	r3, #0
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3718      	adds	r7, #24
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}

0800a904 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800a904:	b590      	push	{r4, r7, lr}
 800a906:	b087      	sub	sp, #28
 800a908:	af00      	add	r7, sp, #0
 800a90a:	60f8      	str	r0, [r7, #12]
 800a90c:	60b9      	str	r1, [r7, #8]
 800a90e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800a910:	2300      	movs	r3, #0
 800a912:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	7f1b      	ldrb	r3, [r3, #28]
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d101      	bne.n	800a920 <HAL_RTC_SetDate+0x1c>
 800a91c:	2302      	movs	r3, #2
 800a91e:	e094      	b.n	800aa4a <HAL_RTC_SetDate+0x146>
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2201      	movs	r2, #1
 800a924:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2202      	movs	r2, #2
 800a92a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d10e      	bne.n	800a950 <HAL_RTC_SetDate+0x4c>
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	785b      	ldrb	r3, [r3, #1]
 800a936:	f003 0310 	and.w	r3, r3, #16
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d008      	beq.n	800a950 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800a93e:	68bb      	ldr	r3, [r7, #8]
 800a940:	785b      	ldrb	r3, [r3, #1]
 800a942:	f023 0310 	bic.w	r3, r3, #16
 800a946:	b2db      	uxtb	r3, r3
 800a948:	330a      	adds	r3, #10
 800a94a:	b2da      	uxtb	r2, r3
 800a94c:	68bb      	ldr	r3, [r7, #8]
 800a94e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d11c      	bne.n	800a990 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	78db      	ldrb	r3, [r3, #3]
 800a95a:	4618      	mov	r0, r3
 800a95c:	f000 fa34 	bl	800adc8 <RTC_ByteToBcd2>
 800a960:	4603      	mov	r3, r0
 800a962:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	785b      	ldrb	r3, [r3, #1]
 800a968:	4618      	mov	r0, r3
 800a96a:	f000 fa2d 	bl	800adc8 <RTC_ByteToBcd2>
 800a96e:	4603      	mov	r3, r0
 800a970:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a972:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	789b      	ldrb	r3, [r3, #2]
 800a978:	4618      	mov	r0, r3
 800a97a:	f000 fa25 	bl	800adc8 <RTC_ByteToBcd2>
 800a97e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800a980:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	781b      	ldrb	r3, [r3, #0]
 800a988:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800a98a:	4313      	orrs	r3, r2
 800a98c:	617b      	str	r3, [r7, #20]
 800a98e:	e00e      	b.n	800a9ae <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	78db      	ldrb	r3, [r3, #3]
 800a994:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	785b      	ldrb	r3, [r3, #1]
 800a99a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a99c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800a99e:	68ba      	ldr	r2, [r7, #8]
 800a9a0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800a9a2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800a9aa:	4313      	orrs	r3, r2
 800a9ac:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	22ca      	movs	r2, #202	; 0xca
 800a9b4:	625a      	str	r2, [r3, #36]	; 0x24
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	2253      	movs	r2, #83	; 0x53
 800a9bc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800a9be:	68f8      	ldr	r0, [r7, #12]
 800a9c0:	f000 f9d6 	bl	800ad70 <RTC_EnterInitMode>
 800a9c4:	4603      	mov	r3, r0
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d00b      	beq.n	800a9e2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	22ff      	movs	r2, #255	; 0xff
 800a9d0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2204      	movs	r2, #4
 800a9d6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800a9de:	2301      	movs	r3, #1
 800a9e0:	e033      	b.n	800aa4a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681a      	ldr	r2, [r3, #0]
 800a9e6:	697b      	ldr	r3, [r7, #20]
 800a9e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a9ec:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a9f0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	68da      	ldr	r2, [r3, #12]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800aa00:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	f003 0320 	and.w	r3, r3, #32
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d111      	bne.n	800aa34 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800aa10:	68f8      	ldr	r0, [r7, #12]
 800aa12:	f000 f985 	bl	800ad20 <HAL_RTC_WaitForSynchro>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00b      	beq.n	800aa34 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	22ff      	movs	r2, #255	; 0xff
 800aa22:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	2204      	movs	r2, #4
 800aa28:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800aa30:	2301      	movs	r3, #1
 800aa32:	e00a      	b.n	800aa4a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	22ff      	movs	r2, #255	; 0xff
 800aa3a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	2201      	movs	r2, #1
 800aa40:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2200      	movs	r2, #0
 800aa46:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 800aa48:	2300      	movs	r3, #0
  }
}
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	371c      	adds	r7, #28
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd90      	pop	{r4, r7, pc}

0800aa52 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800aa52:	b580      	push	{r7, lr}
 800aa54:	b086      	sub	sp, #24
 800aa56:	af00      	add	r7, sp, #0
 800aa58:	60f8      	str	r0, [r7, #12]
 800aa5a:	60b9      	str	r1, [r7, #8]
 800aa5c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	685b      	ldr	r3, [r3, #4]
 800aa68:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800aa6c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800aa70:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	0c1b      	lsrs	r3, r3, #16
 800aa76:	b2da      	uxtb	r2, r3
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	0a1b      	lsrs	r3, r3, #8
 800aa80:	b2db      	uxtb	r3, r3
 800aa82:	f003 031f 	and.w	r3, r3, #31
 800aa86:	b2da      	uxtb	r2, r3
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800aa8c:	697b      	ldr	r3, [r7, #20]
 800aa8e:	b2db      	uxtb	r3, r3
 800aa90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800aa94:	b2da      	uxtb	r2, r3
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	0b5b      	lsrs	r3, r3, #13
 800aa9e:	b2db      	uxtb	r3, r3
 800aaa0:	f003 0307 	and.w	r3, r3, #7
 800aaa4:	b2da      	uxtb	r2, r3
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d11a      	bne.n	800aae6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	78db      	ldrb	r3, [r3, #3]
 800aab4:	4618      	mov	r0, r3
 800aab6:	f000 f9a5 	bl	800ae04 <RTC_Bcd2ToByte>
 800aaba:	4603      	mov	r3, r0
 800aabc:	461a      	mov	r2, r3
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	785b      	ldrb	r3, [r3, #1]
 800aac6:	4618      	mov	r0, r3
 800aac8:	f000 f99c 	bl	800ae04 <RTC_Bcd2ToByte>
 800aacc:	4603      	mov	r3, r0
 800aace:	461a      	mov	r2, r3
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	789b      	ldrb	r3, [r3, #2]
 800aad8:	4618      	mov	r0, r3
 800aada:	f000 f993 	bl	800ae04 <RTC_Bcd2ToByte>
 800aade:	4603      	mov	r3, r0
 800aae0:	461a      	mov	r2, r3
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800aae6:	2300      	movs	r3, #0
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3718      	adds	r7, #24
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <HAL_RTC_SetAlarm>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800aaf0:	b590      	push	{r4, r7, lr}
 800aaf2:	b089      	sub	sp, #36	; 0x24
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	60f8      	str	r0, [r7, #12]
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800aafc:	2300      	movs	r3, #0
 800aafe:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 800ab00:	2300      	movs	r3, #0
 800ab02:	61fb      	str	r3, [r7, #28]
 800ab04:	2300      	movs	r3, #0
 800ab06:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	7f1b      	ldrb	r3, [r3, #28]
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d101      	bne.n	800ab14 <HAL_RTC_SetAlarm+0x24>
 800ab10:	2302      	movs	r3, #2
 800ab12:	e101      	b.n	800ad18 <HAL_RTC_SetAlarm+0x228>
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	2201      	movs	r2, #1
 800ab18:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	2202      	movs	r2, #2
 800ab1e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d137      	bne.n	800ab96 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	689b      	ldr	r3, [r3, #8]
 800ab2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d102      	bne.n	800ab3a <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	2200      	movs	r2, #0
 800ab38:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	781b      	ldrb	r3, [r3, #0]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f000 f942 	bl	800adc8 <RTC_ByteToBcd2>
 800ab44:	4603      	mov	r3, r0
 800ab46:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	785b      	ldrb	r3, [r3, #1]
 800ab4c:	4618      	mov	r0, r3
 800ab4e:	f000 f93b 	bl	800adc8 <RTC_ByteToBcd2>
 800ab52:	4603      	mov	r3, r0
 800ab54:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800ab56:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	789b      	ldrb	r3, [r3, #2]
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	f000 f933 	bl	800adc8 <RTC_ByteToBcd2>
 800ab62:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800ab64:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800ab68:	68bb      	ldr	r3, [r7, #8]
 800ab6a:	78db      	ldrb	r3, [r3, #3]
 800ab6c:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800ab6e:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	f893 3020 	ldrb.w	r3, [r3, #32]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f000 f925 	bl	800adc8 <RTC_ByteToBcd2>
 800ab7e:	4603      	mov	r3, r0
 800ab80:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800ab82:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 800ab8a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800ab90:	4313      	orrs	r3, r2
 800ab92:	61fb      	str	r3, [r7, #28]
 800ab94:	e023      	b.n	800abde <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	689b      	ldr	r3, [r3, #8]
 800ab9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d102      	bne.n	800abaa <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800aba4:	68bb      	ldr	r3, [r7, #8]
 800aba6:	2200      	movs	r2, #0
 800aba8:	70da      	strb	r2, [r3, #3]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	781b      	ldrb	r3, [r3, #0]
 800abae:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	785b      	ldrb	r3, [r3, #1]
 800abb4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800abb6:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800abb8:	68ba      	ldr	r2, [r7, #8]
 800abba:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800abbc:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	78db      	ldrb	r3, [r3, #3]
 800abc2:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800abc4:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800abc6:	68bb      	ldr	r3, [r7, #8]
 800abc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800abcc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800abce:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800abd0:	68bb      	ldr	r3, [r7, #8]
 800abd2:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 800abd4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800abd6:	68bb      	ldr	r3, [r7, #8]
 800abd8:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 800abda:	4313      	orrs	r3, r2
 800abdc:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	685a      	ldr	r2, [r3, #4]
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	699b      	ldr	r3, [r3, #24]
 800abe6:	4313      	orrs	r3, r2
 800abe8:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	22ca      	movs	r2, #202	; 0xca
 800abf0:	625a      	str	r2, [r3, #36]	; 0x24
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	2253      	movs	r2, #83	; 0x53
 800abf8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800abfa:	68bb      	ldr	r3, [r7, #8]
 800abfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac02:	d13f      	bne.n	800ac84 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	689a      	ldr	r2, [r3, #8]
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ac12:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	689a      	ldr	r2, [r3, #8]
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ac22:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ac24:	f7fb fa90 	bl	8006148 <HAL_GetTick>
 800ac28:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800ac2a:	e013      	b.n	800ac54 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ac2c:	f7fb fa8c 	bl	8006148 <HAL_GetTick>
 800ac30:	4602      	mov	r2, r0
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	1ad3      	subs	r3, r2, r3
 800ac36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ac3a:	d90b      	bls.n	800ac54 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	22ff      	movs	r2, #255	; 0xff
 800ac42:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	2203      	movs	r2, #3
 800ac48:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800ac50:	2303      	movs	r3, #3
 800ac52:	e061      	b.n	800ad18 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	68db      	ldr	r3, [r3, #12]
 800ac5a:	f003 0301 	and.w	r3, r3, #1
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d0e4      	beq.n	800ac2c <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	69fa      	ldr	r2, [r7, #28]
 800ac68:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	697a      	ldr	r2, [r7, #20]
 800ac70:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	689a      	ldr	r2, [r3, #8]
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac80:	609a      	str	r2, [r3, #8]
 800ac82:	e03e      	b.n	800ad02 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	689a      	ldr	r2, [r3, #8]
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800ac92:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	689a      	ldr	r2, [r3, #8]
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800aca2:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800aca4:	f7fb fa50 	bl	8006148 <HAL_GetTick>
 800aca8:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800acaa:	e013      	b.n	800acd4 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800acac:	f7fb fa4c 	bl	8006148 <HAL_GetTick>
 800acb0:	4602      	mov	r2, r0
 800acb2:	69bb      	ldr	r3, [r7, #24]
 800acb4:	1ad3      	subs	r3, r2, r3
 800acb6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800acba:	d90b      	bls.n	800acd4 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	22ff      	movs	r2, #255	; 0xff
 800acc2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	2203      	movs	r2, #3
 800acc8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	2200      	movs	r2, #0
 800acce:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800acd0:	2303      	movs	r3, #3
 800acd2:	e021      	b.n	800ad18 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	68db      	ldr	r3, [r3, #12]
 800acda:	f003 0302 	and.w	r3, r3, #2
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d0e4      	beq.n	800acac <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	69fa      	ldr	r2, [r7, #28]
 800ace8:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	697a      	ldr	r2, [r7, #20]
 800acf0:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	689a      	ldr	r2, [r3, #8]
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ad00:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	22ff      	movs	r2, #255	; 0xff
 800ad08:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2201      	movs	r2, #1
 800ad0e:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2200      	movs	r2, #0
 800ad14:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800ad16:	2300      	movs	r3, #0
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3724      	adds	r7, #36	; 0x24
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd90      	pop	{r4, r7, pc}

0800ad20 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b084      	sub	sp, #16
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	68da      	ldr	r2, [r3, #12]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800ad3a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ad3c:	f7fb fa04 	bl	8006148 <HAL_GetTick>
 800ad40:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800ad42:	e009      	b.n	800ad58 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ad44:	f7fb fa00 	bl	8006148 <HAL_GetTick>
 800ad48:	4602      	mov	r2, r0
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	1ad3      	subs	r3, r2, r3
 800ad4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ad52:	d901      	bls.n	800ad58 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800ad54:	2303      	movs	r3, #3
 800ad56:	e007      	b.n	800ad68 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	68db      	ldr	r3, [r3, #12]
 800ad5e:	f003 0320 	and.w	r3, r3, #32
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d0ee      	beq.n	800ad44 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800ad66:	2300      	movs	r3, #0
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b084      	sub	sp, #16
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	68db      	ldr	r3, [r3, #12]
 800ad82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d119      	bne.n	800adbe <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ad92:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800ad94:	f7fb f9d8 	bl	8006148 <HAL_GetTick>
 800ad98:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800ad9a:	e009      	b.n	800adb0 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800ad9c:	f7fb f9d4 	bl	8006148 <HAL_GetTick>
 800ada0:	4602      	mov	r2, r0
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	1ad3      	subs	r3, r2, r3
 800ada6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800adaa:	d901      	bls.n	800adb0 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800adac:	2303      	movs	r3, #3
 800adae:	e007      	b.n	800adc0 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d0ee      	beq.n	800ad9c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800adbe:	2300      	movs	r3, #0
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3710      	adds	r7, #16
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800adc8:	b480      	push	{r7}
 800adca:	b085      	sub	sp, #20
 800adcc:	af00      	add	r7, sp, #0
 800adce:	4603      	mov	r3, r0
 800add0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800add2:	2300      	movs	r3, #0
 800add4:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800add6:	e005      	b.n	800ade4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	3301      	adds	r3, #1
 800addc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 800adde:	79fb      	ldrb	r3, [r7, #7]
 800ade0:	3b0a      	subs	r3, #10
 800ade2:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800ade4:	79fb      	ldrb	r3, [r7, #7]
 800ade6:	2b09      	cmp	r3, #9
 800ade8:	d8f6      	bhi.n	800add8 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	b2db      	uxtb	r3, r3
 800adee:	011b      	lsls	r3, r3, #4
 800adf0:	b2da      	uxtb	r2, r3
 800adf2:	79fb      	ldrb	r3, [r7, #7]
 800adf4:	4313      	orrs	r3, r2
 800adf6:	b2db      	uxtb	r3, r3
}
 800adf8:	4618      	mov	r0, r3
 800adfa:	3714      	adds	r7, #20
 800adfc:	46bd      	mov	sp, r7
 800adfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae02:	4770      	bx	lr

0800ae04 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800ae04:	b480      	push	{r7}
 800ae06:	b085      	sub	sp, #20
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 800ae0e:	2300      	movs	r3, #0
 800ae10:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800ae12:	79fb      	ldrb	r3, [r7, #7]
 800ae14:	091b      	lsrs	r3, r3, #4
 800ae16:	b2db      	uxtb	r3, r3
 800ae18:	461a      	mov	r2, r3
 800ae1a:	4613      	mov	r3, r2
 800ae1c:	009b      	lsls	r3, r3, #2
 800ae1e:	4413      	add	r3, r2
 800ae20:	005b      	lsls	r3, r3, #1
 800ae22:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800ae24:	79fb      	ldrb	r3, [r7, #7]
 800ae26:	f003 030f 	and.w	r3, r3, #15
 800ae2a:	b2da      	uxtb	r2, r3
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	4413      	add	r3, r2
 800ae32:	b2db      	uxtb	r3, r3
}
 800ae34:	4618      	mov	r0, r3
 800ae36:	3714      	adds	r7, #20
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr

0800ae40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d101      	bne.n	800ae52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	e07b      	b.n	800af4a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d108      	bne.n	800ae6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800ae62:	d009      	beq.n	800ae78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2200      	movs	r2, #0
 800ae68:	61da      	str	r2, [r3, #28]
 800ae6a:	e005      	b.n	800ae78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2200      	movs	r2, #0
 800ae76:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d106      	bne.n	800ae98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f7fa f85e 	bl	8004f54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	2202      	movs	r2, #2
 800ae9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	681a      	ldr	r2, [r3, #0]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aeae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	689b      	ldr	r3, [r3, #8]
 800aebc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800aec0:	431a      	orrs	r2, r3
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	68db      	ldr	r3, [r3, #12]
 800aec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aeca:	431a      	orrs	r2, r3
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	691b      	ldr	r3, [r3, #16]
 800aed0:	f003 0302 	and.w	r3, r3, #2
 800aed4:	431a      	orrs	r2, r3
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	695b      	ldr	r3, [r3, #20]
 800aeda:	f003 0301 	and.w	r3, r3, #1
 800aede:	431a      	orrs	r2, r3
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	699b      	ldr	r3, [r3, #24]
 800aee4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800aee8:	431a      	orrs	r2, r3
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	69db      	ldr	r3, [r3, #28]
 800aeee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aef2:	431a      	orrs	r2, r3
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6a1b      	ldr	r3, [r3, #32]
 800aef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aefc:	ea42 0103 	orr.w	r1, r2, r3
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af04:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	430a      	orrs	r2, r1
 800af0e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	699b      	ldr	r3, [r3, #24]
 800af14:	0c1b      	lsrs	r3, r3, #16
 800af16:	f003 0104 	and.w	r1, r3, #4
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af1e:	f003 0210 	and.w	r2, r3, #16
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	430a      	orrs	r2, r1
 800af28:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	69da      	ldr	r2, [r3, #28]
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800af38:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2200      	movs	r2, #0
 800af3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2201      	movs	r2, #1
 800af44:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800af48:	2300      	movs	r3, #0
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3708      	adds	r7, #8
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}

0800af52 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800af52:	b580      	push	{r7, lr}
 800af54:	b082      	sub	sp, #8
 800af56:	af00      	add	r7, sp, #0
 800af58:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d101      	bne.n	800af64 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800af60:	2301      	movs	r3, #1
 800af62:	e01a      	b.n	800af9a <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2202      	movs	r2, #2
 800af68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	681a      	ldr	r2, [r3, #0]
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af7a:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f7fa f8c3 	bl	8005108 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	2200      	movs	r2, #0
 800af86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	2200      	movs	r2, #0
 800af8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	2200      	movs	r2, #0
 800af94:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800af98:	2300      	movs	r3, #0
}
 800af9a:	4618      	mov	r0, r3
 800af9c:	3708      	adds	r7, #8
 800af9e:	46bd      	mov	sp, r7
 800afa0:	bd80      	pop	{r7, pc}

0800afa2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800afa2:	b580      	push	{r7, lr}
 800afa4:	b088      	sub	sp, #32
 800afa6:	af00      	add	r7, sp, #0
 800afa8:	60f8      	str	r0, [r7, #12]
 800afaa:	60b9      	str	r1, [r7, #8]
 800afac:	603b      	str	r3, [r7, #0]
 800afae:	4613      	mov	r3, r2
 800afb0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800afb2:	2300      	movs	r3, #0
 800afb4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d101      	bne.n	800afc4 <HAL_SPI_Transmit+0x22>
 800afc0:	2302      	movs	r3, #2
 800afc2:	e126      	b.n	800b212 <HAL_SPI_Transmit+0x270>
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	2201      	movs	r2, #1
 800afc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800afcc:	f7fb f8bc 	bl	8006148 <HAL_GetTick>
 800afd0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800afd2:	88fb      	ldrh	r3, [r7, #6]
 800afd4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800afdc:	b2db      	uxtb	r3, r3
 800afde:	2b01      	cmp	r3, #1
 800afe0:	d002      	beq.n	800afe8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800afe2:	2302      	movs	r3, #2
 800afe4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800afe6:	e10b      	b.n	800b200 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d002      	beq.n	800aff4 <HAL_SPI_Transmit+0x52>
 800afee:	88fb      	ldrh	r3, [r7, #6]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d102      	bne.n	800affa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800aff4:	2301      	movs	r3, #1
 800aff6:	77fb      	strb	r3, [r7, #31]
    goto error;
 800aff8:	e102      	b.n	800b200 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	2203      	movs	r2, #3
 800affe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	2200      	movs	r2, #0
 800b006:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	68ba      	ldr	r2, [r7, #8]
 800b00c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	88fa      	ldrh	r2, [r7, #6]
 800b012:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	88fa      	ldrh	r2, [r7, #6]
 800b018:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2200      	movs	r2, #0
 800b01e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	2200      	movs	r2, #0
 800b024:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2200      	movs	r2, #0
 800b02a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2200      	movs	r2, #0
 800b030:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2200      	movs	r2, #0
 800b036:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	689b      	ldr	r3, [r3, #8]
 800b03c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b040:	d10f      	bne.n	800b062 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b050:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	681a      	ldr	r2, [r3, #0]
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b060:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b06c:	2b40      	cmp	r3, #64	; 0x40
 800b06e:	d007      	beq.n	800b080 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	681a      	ldr	r2, [r3, #0]
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b07e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	68db      	ldr	r3, [r3, #12]
 800b084:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b088:	d14b      	bne.n	800b122 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d002      	beq.n	800b098 <HAL_SPI_Transmit+0xf6>
 800b092:	8afb      	ldrh	r3, [r7, #22]
 800b094:	2b01      	cmp	r3, #1
 800b096:	d13e      	bne.n	800b116 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b09c:	881a      	ldrh	r2, [r3, #0]
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0a8:	1c9a      	adds	r2, r3, #2
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b0b2:	b29b      	uxth	r3, r3
 800b0b4:	3b01      	subs	r3, #1
 800b0b6:	b29a      	uxth	r2, r3
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800b0bc:	e02b      	b.n	800b116 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	689b      	ldr	r3, [r3, #8]
 800b0c4:	f003 0302 	and.w	r3, r3, #2
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	d112      	bne.n	800b0f2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0d0:	881a      	ldrh	r2, [r3, #0]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b0dc:	1c9a      	adds	r2, r3, #2
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	3b01      	subs	r3, #1
 800b0ea:	b29a      	uxth	r2, r3
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	86da      	strh	r2, [r3, #54]	; 0x36
 800b0f0:	e011      	b.n	800b116 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b0f2:	f7fb f829 	bl	8006148 <HAL_GetTick>
 800b0f6:	4602      	mov	r2, r0
 800b0f8:	69bb      	ldr	r3, [r7, #24]
 800b0fa:	1ad3      	subs	r3, r2, r3
 800b0fc:	683a      	ldr	r2, [r7, #0]
 800b0fe:	429a      	cmp	r2, r3
 800b100:	d803      	bhi.n	800b10a <HAL_SPI_Transmit+0x168>
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b108:	d102      	bne.n	800b110 <HAL_SPI_Transmit+0x16e>
 800b10a:	683b      	ldr	r3, [r7, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d102      	bne.n	800b116 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800b110:	2303      	movs	r3, #3
 800b112:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b114:	e074      	b.n	800b200 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b11a:	b29b      	uxth	r3, r3
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d1ce      	bne.n	800b0be <HAL_SPI_Transmit+0x11c>
 800b120:	e04c      	b.n	800b1bc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	2b00      	cmp	r3, #0
 800b128:	d002      	beq.n	800b130 <HAL_SPI_Transmit+0x18e>
 800b12a:	8afb      	ldrh	r3, [r7, #22]
 800b12c:	2b01      	cmp	r3, #1
 800b12e:	d140      	bne.n	800b1b2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	330c      	adds	r3, #12
 800b13a:	7812      	ldrb	r2, [r2, #0]
 800b13c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b142:	1c5a      	adds	r2, r3, #1
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b14c:	b29b      	uxth	r3, r3
 800b14e:	3b01      	subs	r3, #1
 800b150:	b29a      	uxth	r2, r3
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800b156:	e02c      	b.n	800b1b2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	689b      	ldr	r3, [r3, #8]
 800b15e:	f003 0302 	and.w	r3, r3, #2
 800b162:	2b02      	cmp	r3, #2
 800b164:	d113      	bne.n	800b18e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	330c      	adds	r3, #12
 800b170:	7812      	ldrb	r2, [r2, #0]
 800b172:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b178:	1c5a      	adds	r2, r3, #1
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b182:	b29b      	uxth	r3, r3
 800b184:	3b01      	subs	r3, #1
 800b186:	b29a      	uxth	r2, r3
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	86da      	strh	r2, [r3, #54]	; 0x36
 800b18c:	e011      	b.n	800b1b2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b18e:	f7fa ffdb 	bl	8006148 <HAL_GetTick>
 800b192:	4602      	mov	r2, r0
 800b194:	69bb      	ldr	r3, [r7, #24]
 800b196:	1ad3      	subs	r3, r2, r3
 800b198:	683a      	ldr	r2, [r7, #0]
 800b19a:	429a      	cmp	r2, r3
 800b19c:	d803      	bhi.n	800b1a6 <HAL_SPI_Transmit+0x204>
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1a4:	d102      	bne.n	800b1ac <HAL_SPI_Transmit+0x20a>
 800b1a6:	683b      	ldr	r3, [r7, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d102      	bne.n	800b1b2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800b1ac:	2303      	movs	r3, #3
 800b1ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b1b0:	e026      	b.n	800b200 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b1b6:	b29b      	uxth	r3, r3
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d1cd      	bne.n	800b158 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b1bc:	69ba      	ldr	r2, [r7, #24]
 800b1be:	6839      	ldr	r1, [r7, #0]
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f000 fd03 	bl	800bbcc <SPI_EndRxTxTransaction>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d002      	beq.n	800b1d2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2220      	movs	r2, #32
 800b1d0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	689b      	ldr	r3, [r3, #8]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d10a      	bne.n	800b1f0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b1da:	2300      	movs	r3, #0
 800b1dc:	613b      	str	r3, [r7, #16]
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	68db      	ldr	r3, [r3, #12]
 800b1e4:	613b      	str	r3, [r7, #16]
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	689b      	ldr	r3, [r3, #8]
 800b1ec:	613b      	str	r3, [r7, #16]
 800b1ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d002      	beq.n	800b1fe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800b1f8:	2301      	movs	r3, #1
 800b1fa:	77fb      	strb	r3, [r7, #31]
 800b1fc:	e000      	b.n	800b200 <HAL_SPI_Transmit+0x25e>
  }

error:
 800b1fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2201      	movs	r2, #1
 800b204:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	2200      	movs	r2, #0
 800b20c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b210:	7ffb      	ldrb	r3, [r7, #31]
}
 800b212:	4618      	mov	r0, r3
 800b214:	3720      	adds	r7, #32
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}

0800b21a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b21a:	b580      	push	{r7, lr}
 800b21c:	b08c      	sub	sp, #48	; 0x30
 800b21e:	af00      	add	r7, sp, #0
 800b220:	60f8      	str	r0, [r7, #12]
 800b222:	60b9      	str	r1, [r7, #8]
 800b224:	607a      	str	r2, [r7, #4]
 800b226:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b228:	2301      	movs	r3, #1
 800b22a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b22c:	2300      	movs	r3, #0
 800b22e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b238:	2b01      	cmp	r3, #1
 800b23a:	d101      	bne.n	800b240 <HAL_SPI_TransmitReceive+0x26>
 800b23c:	2302      	movs	r3, #2
 800b23e:	e18a      	b.n	800b556 <HAL_SPI_TransmitReceive+0x33c>
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2201      	movs	r2, #1
 800b244:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b248:	f7fa ff7e 	bl	8006148 <HAL_GetTick>
 800b24c:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b254:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	685b      	ldr	r3, [r3, #4]
 800b25c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b25e:	887b      	ldrh	r3, [r7, #2]
 800b260:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b262:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b266:	2b01      	cmp	r3, #1
 800b268:	d00f      	beq.n	800b28a <HAL_SPI_TransmitReceive+0x70>
 800b26a:	69fb      	ldr	r3, [r7, #28]
 800b26c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b270:	d107      	bne.n	800b282 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	689b      	ldr	r3, [r3, #8]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d103      	bne.n	800b282 <HAL_SPI_TransmitReceive+0x68>
 800b27a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b27e:	2b04      	cmp	r3, #4
 800b280:	d003      	beq.n	800b28a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b282:	2302      	movs	r3, #2
 800b284:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b288:	e15b      	b.n	800b542 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d005      	beq.n	800b29c <HAL_SPI_TransmitReceive+0x82>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d002      	beq.n	800b29c <HAL_SPI_TransmitReceive+0x82>
 800b296:	887b      	ldrh	r3, [r7, #2]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d103      	bne.n	800b2a4 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b29c:	2301      	movs	r3, #1
 800b29e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b2a2:	e14e      	b.n	800b542 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	2b04      	cmp	r3, #4
 800b2ae:	d003      	beq.n	800b2b8 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2205      	movs	r2, #5
 800b2b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	687a      	ldr	r2, [r7, #4]
 800b2c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	887a      	ldrh	r2, [r7, #2]
 800b2c8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	887a      	ldrh	r2, [r7, #2]
 800b2ce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	68ba      	ldr	r2, [r7, #8]
 800b2d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	887a      	ldrh	r2, [r7, #2]
 800b2da:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	887a      	ldrh	r2, [r7, #2]
 800b2e0:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b2f8:	2b40      	cmp	r3, #64	; 0x40
 800b2fa:	d007      	beq.n	800b30c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	681a      	ldr	r2, [r3, #0]
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b30a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	68db      	ldr	r3, [r3, #12]
 800b310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b314:	d178      	bne.n	800b408 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d002      	beq.n	800b324 <HAL_SPI_TransmitReceive+0x10a>
 800b31e:	8b7b      	ldrh	r3, [r7, #26]
 800b320:	2b01      	cmp	r3, #1
 800b322:	d166      	bne.n	800b3f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b328:	881a      	ldrh	r2, [r3, #0]
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b334:	1c9a      	adds	r2, r3, #2
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b33e:	b29b      	uxth	r3, r3
 800b340:	3b01      	subs	r3, #1
 800b342:	b29a      	uxth	r2, r3
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b348:	e053      	b.n	800b3f2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	f003 0302 	and.w	r3, r3, #2
 800b354:	2b02      	cmp	r3, #2
 800b356:	d11b      	bne.n	800b390 <HAL_SPI_TransmitReceive+0x176>
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b35c:	b29b      	uxth	r3, r3
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d016      	beq.n	800b390 <HAL_SPI_TransmitReceive+0x176>
 800b362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b364:	2b01      	cmp	r3, #1
 800b366:	d113      	bne.n	800b390 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b36c:	881a      	ldrh	r2, [r3, #0]
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b378:	1c9a      	adds	r2, r3, #2
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b382:	b29b      	uxth	r3, r3
 800b384:	3b01      	subs	r3, #1
 800b386:	b29a      	uxth	r2, r3
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b38c:	2300      	movs	r3, #0
 800b38e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	689b      	ldr	r3, [r3, #8]
 800b396:	f003 0301 	and.w	r3, r3, #1
 800b39a:	2b01      	cmp	r3, #1
 800b39c:	d119      	bne.n	800b3d2 <HAL_SPI_TransmitReceive+0x1b8>
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3a2:	b29b      	uxth	r3, r3
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d014      	beq.n	800b3d2 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	68da      	ldr	r2, [r3, #12]
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3b2:	b292      	uxth	r2, r2
 800b3b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ba:	1c9a      	adds	r2, r3, #2
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b3c4:	b29b      	uxth	r3, r3
 800b3c6:	3b01      	subs	r3, #1
 800b3c8:	b29a      	uxth	r2, r3
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b3ce:	2301      	movs	r3, #1
 800b3d0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b3d2:	f7fa feb9 	bl	8006148 <HAL_GetTick>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3da:	1ad3      	subs	r3, r2, r3
 800b3dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b3de:	429a      	cmp	r2, r3
 800b3e0:	d807      	bhi.n	800b3f2 <HAL_SPI_TransmitReceive+0x1d8>
 800b3e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b3e8:	d003      	beq.n	800b3f2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b3ea:	2303      	movs	r3, #3
 800b3ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b3f0:	e0a7      	b.n	800b542 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3f6:	b29b      	uxth	r3, r3
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d1a6      	bne.n	800b34a <HAL_SPI_TransmitReceive+0x130>
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b400:	b29b      	uxth	r3, r3
 800b402:	2b00      	cmp	r3, #0
 800b404:	d1a1      	bne.n	800b34a <HAL_SPI_TransmitReceive+0x130>
 800b406:	e07c      	b.n	800b502 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d002      	beq.n	800b416 <HAL_SPI_TransmitReceive+0x1fc>
 800b410:	8b7b      	ldrh	r3, [r7, #26]
 800b412:	2b01      	cmp	r3, #1
 800b414:	d16b      	bne.n	800b4ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b41a:	68fb      	ldr	r3, [r7, #12]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	330c      	adds	r3, #12
 800b420:	7812      	ldrb	r2, [r2, #0]
 800b422:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b428:	1c5a      	adds	r2, r3, #1
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b432:	b29b      	uxth	r3, r3
 800b434:	3b01      	subs	r3, #1
 800b436:	b29a      	uxth	r2, r3
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b43c:	e057      	b.n	800b4ee <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	f003 0302 	and.w	r3, r3, #2
 800b448:	2b02      	cmp	r3, #2
 800b44a:	d11c      	bne.n	800b486 <HAL_SPI_TransmitReceive+0x26c>
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b450:	b29b      	uxth	r3, r3
 800b452:	2b00      	cmp	r3, #0
 800b454:	d017      	beq.n	800b486 <HAL_SPI_TransmitReceive+0x26c>
 800b456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d114      	bne.n	800b486 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	330c      	adds	r3, #12
 800b466:	7812      	ldrb	r2, [r2, #0]
 800b468:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b46e:	1c5a      	adds	r2, r3, #1
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b478:	b29b      	uxth	r3, r3
 800b47a:	3b01      	subs	r3, #1
 800b47c:	b29a      	uxth	r2, r3
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b482:	2300      	movs	r3, #0
 800b484:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	681b      	ldr	r3, [r3, #0]
 800b48a:	689b      	ldr	r3, [r3, #8]
 800b48c:	f003 0301 	and.w	r3, r3, #1
 800b490:	2b01      	cmp	r3, #1
 800b492:	d119      	bne.n	800b4c8 <HAL_SPI_TransmitReceive+0x2ae>
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b498:	b29b      	uxth	r3, r3
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d014      	beq.n	800b4c8 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	68da      	ldr	r2, [r3, #12]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a8:	b2d2      	uxtb	r2, r2
 800b4aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b0:	1c5a      	adds	r2, r3, #1
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	3b01      	subs	r3, #1
 800b4be:	b29a      	uxth	r2, r3
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b4c8:	f7fa fe3e 	bl	8006148 <HAL_GetTick>
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d0:	1ad3      	subs	r3, r2, r3
 800b4d2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b4d4:	429a      	cmp	r2, r3
 800b4d6:	d803      	bhi.n	800b4e0 <HAL_SPI_TransmitReceive+0x2c6>
 800b4d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b4de:	d102      	bne.n	800b4e6 <HAL_SPI_TransmitReceive+0x2cc>
 800b4e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d103      	bne.n	800b4ee <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b4e6:	2303      	movs	r3, #3
 800b4e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b4ec:	e029      	b.n	800b542 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d1a2      	bne.n	800b43e <HAL_SPI_TransmitReceive+0x224>
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4fc:	b29b      	uxth	r3, r3
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d19d      	bne.n	800b43e <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b504:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b506:	68f8      	ldr	r0, [r7, #12]
 800b508:	f000 fb60 	bl	800bbcc <SPI_EndRxTxTransaction>
 800b50c:	4603      	mov	r3, r0
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d006      	beq.n	800b520 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b512:	2301      	movs	r3, #1
 800b514:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	2220      	movs	r2, #32
 800b51c:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b51e:	e010      	b.n	800b542 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	689b      	ldr	r3, [r3, #8]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d10b      	bne.n	800b540 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b528:	2300      	movs	r3, #0
 800b52a:	617b      	str	r3, [r7, #20]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	68db      	ldr	r3, [r3, #12]
 800b532:	617b      	str	r3, [r7, #20]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	617b      	str	r3, [r7, #20]
 800b53c:	697b      	ldr	r3, [r7, #20]
 800b53e:	e000      	b.n	800b542 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b540:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	2201      	movs	r2, #1
 800b546:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2200      	movs	r2, #0
 800b54e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b552:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b556:	4618      	mov	r0, r3
 800b558:	3730      	adds	r7, #48	; 0x30
 800b55a:	46bd      	mov	sp, r7
 800b55c:	bd80      	pop	{r7, pc}
	...

0800b560 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b086      	sub	sp, #24
 800b564:	af00      	add	r7, sp, #0
 800b566:	60f8      	str	r0, [r7, #12]
 800b568:	60b9      	str	r1, [r7, #8]
 800b56a:	4613      	mov	r3, r2
 800b56c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b56e:	2300      	movs	r3, #0
 800b570:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b572:	68fb      	ldr	r3, [r7, #12]
 800b574:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b578:	2b01      	cmp	r3, #1
 800b57a:	d101      	bne.n	800b580 <HAL_SPI_Transmit_DMA+0x20>
 800b57c:	2302      	movs	r3, #2
 800b57e:	e09b      	b.n	800b6b8 <HAL_SPI_Transmit_DMA+0x158>
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2201      	movs	r2, #1
 800b584:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b58e:	b2db      	uxtb	r3, r3
 800b590:	2b01      	cmp	r3, #1
 800b592:	d002      	beq.n	800b59a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800b594:	2302      	movs	r3, #2
 800b596:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b598:	e089      	b.n	800b6ae <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800b59a:	68bb      	ldr	r3, [r7, #8]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d002      	beq.n	800b5a6 <HAL_SPI_Transmit_DMA+0x46>
 800b5a0:	88fb      	ldrh	r3, [r7, #6]
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d102      	bne.n	800b5ac <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800b5a6:	2301      	movs	r3, #1
 800b5a8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b5aa:	e080      	b.n	800b6ae <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2203      	movs	r2, #3
 800b5b0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	68ba      	ldr	r2, [r7, #8]
 800b5be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	88fa      	ldrh	r2, [r7, #6]
 800b5c4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	88fa      	ldrh	r2, [r7, #6]
 800b5ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2200      	movs	r2, #0
 800b5d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	2200      	movs	r2, #0
 800b5dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	2200      	movs	r2, #0
 800b5e2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	2200      	movs	r2, #0
 800b5e8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	689b      	ldr	r3, [r3, #8]
 800b5ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b5f2:	d10f      	bne.n	800b614 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	681b      	ldr	r3, [r3, #0]
 800b5f8:	681a      	ldr	r2, [r3, #0]
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b602:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	681a      	ldr	r2, [r3, #0]
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b612:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b618:	4a29      	ldr	r2, [pc, #164]	; (800b6c0 <HAL_SPI_Transmit_DMA+0x160>)
 800b61a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800b61c:	68fb      	ldr	r3, [r7, #12]
 800b61e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b620:	4a28      	ldr	r2, [pc, #160]	; (800b6c4 <HAL_SPI_Transmit_DMA+0x164>)
 800b622:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b628:	4a27      	ldr	r2, [pc, #156]	; (800b6c8 <HAL_SPI_Transmit_DMA+0x168>)
 800b62a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b630:	2200      	movs	r2, #0
 800b632:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b634:	68fb      	ldr	r3, [r7, #12]
 800b636:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b63c:	4619      	mov	r1, r3
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	681b      	ldr	r3, [r3, #0]
 800b642:	330c      	adds	r3, #12
 800b644:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b64a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800b64c:	f7fa ffcc 	bl	80065e8 <HAL_DMA_Start_IT>
 800b650:	4603      	mov	r3, r0
 800b652:	2b00      	cmp	r3, #0
 800b654:	d00c      	beq.n	800b670 <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b65a:	f043 0210 	orr.w	r2, r3, #16
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800b662:	2301      	movs	r3, #1
 800b664:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	2201      	movs	r2, #1
 800b66a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800b66e:	e01e      	b.n	800b6ae <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b67a:	2b40      	cmp	r3, #64	; 0x40
 800b67c:	d007      	beq.n	800b68e <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b68c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	685a      	ldr	r2, [r3, #4]
 800b694:	68fb      	ldr	r3, [r7, #12]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	f042 0220 	orr.w	r2, r2, #32
 800b69c:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	685a      	ldr	r2, [r3, #4]
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f042 0202 	orr.w	r2, r2, #2
 800b6ac:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b6b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3718      	adds	r7, #24
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}
 800b6c0:	0800ba39 	.word	0x0800ba39
 800b6c4:	0800b991 	.word	0x0800b991
 800b6c8:	0800ba55 	.word	0x0800ba55

0800b6cc <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 800b6cc:	b580      	push	{r7, lr}
 800b6ce:	b084      	sub	sp, #16
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d00f      	beq.n	800b700 <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f7fa ffd7 	bl	8006698 <HAL_DMA_Abort>
 800b6ea:	4603      	mov	r3, r0
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d007      	beq.n	800b700 <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6f4:	f043 0210 	orr.w	r2, r3, #16
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b704:	2b00      	cmp	r3, #0
 800b706:	d00f      	beq.n	800b728 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7fa ffc3 	bl	8006698 <HAL_DMA_Abort>
 800b712:	4603      	mov	r3, r0
 800b714:	2b00      	cmp	r3, #0
 800b716:	d007      	beq.n	800b728 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b71c:	f043 0210 	orr.w	r2, r3, #16
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	655a      	str	r2, [r3, #84]	; 0x54
      errorcode = HAL_ERROR;
 800b724:	2301      	movs	r3, #1
 800b726:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	685a      	ldr	r2, [r3, #4]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f022 0203 	bic.w	r2, r2, #3
 800b736:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	2201      	movs	r2, #1
 800b73c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  return errorcode;
 800b740:	7bfb      	ldrb	r3, [r7, #15]
}
 800b742:	4618      	mov	r0, r3
 800b744:	3710      	adds	r7, #16
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
	...

0800b74c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b088      	sub	sp, #32
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	689b      	ldr	r3, [r3, #8]
 800b762:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b764:	69bb      	ldr	r3, [r7, #24]
 800b766:	099b      	lsrs	r3, r3, #6
 800b768:	f003 0301 	and.w	r3, r3, #1
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d10f      	bne.n	800b790 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b770:	69bb      	ldr	r3, [r7, #24]
 800b772:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800b776:	2b00      	cmp	r3, #0
 800b778:	d00a      	beq.n	800b790 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800b77a:	69fb      	ldr	r3, [r7, #28]
 800b77c:	099b      	lsrs	r3, r3, #6
 800b77e:	f003 0301 	and.w	r3, r3, #1
 800b782:	2b00      	cmp	r3, #0
 800b784:	d004      	beq.n	800b790 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	4798      	blx	r3
    return;
 800b78e:	e0d7      	b.n	800b940 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800b790:	69bb      	ldr	r3, [r7, #24]
 800b792:	085b      	lsrs	r3, r3, #1
 800b794:	f003 0301 	and.w	r3, r3, #1
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d00a      	beq.n	800b7b2 <HAL_SPI_IRQHandler+0x66>
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	09db      	lsrs	r3, r3, #7
 800b7a0:	f003 0301 	and.w	r3, r3, #1
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d004      	beq.n	800b7b2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	4798      	blx	r3
    return;
 800b7b0:	e0c6      	b.n	800b940 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	095b      	lsrs	r3, r3, #5
 800b7b6:	f003 0301 	and.w	r3, r3, #1
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d10c      	bne.n	800b7d8 <HAL_SPI_IRQHandler+0x8c>
 800b7be:	69bb      	ldr	r3, [r7, #24]
 800b7c0:	099b      	lsrs	r3, r3, #6
 800b7c2:	f003 0301 	and.w	r3, r3, #1
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d106      	bne.n	800b7d8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800b7ca:	69bb      	ldr	r3, [r7, #24]
 800b7cc:	0a1b      	lsrs	r3, r3, #8
 800b7ce:	f003 0301 	and.w	r3, r3, #1
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	f000 80b4 	beq.w	800b940 <HAL_SPI_IRQHandler+0x1f4>
 800b7d8:	69fb      	ldr	r3, [r7, #28]
 800b7da:	095b      	lsrs	r3, r3, #5
 800b7dc:	f003 0301 	and.w	r3, r3, #1
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	f000 80ad 	beq.w	800b940 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800b7e6:	69bb      	ldr	r3, [r7, #24]
 800b7e8:	099b      	lsrs	r3, r3, #6
 800b7ea:	f003 0301 	and.w	r3, r3, #1
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d023      	beq.n	800b83a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b7f8:	b2db      	uxtb	r3, r3
 800b7fa:	2b03      	cmp	r3, #3
 800b7fc:	d011      	beq.n	800b822 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b802:	f043 0204 	orr.w	r2, r3, #4
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b80a:	2300      	movs	r3, #0
 800b80c:	617b      	str	r3, [r7, #20]
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	617b      	str	r3, [r7, #20]
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	689b      	ldr	r3, [r3, #8]
 800b81c:	617b      	str	r3, [r7, #20]
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	e00b      	b.n	800b83a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b822:	2300      	movs	r3, #0
 800b824:	613b      	str	r3, [r7, #16]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	613b      	str	r3, [r7, #16]
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	689b      	ldr	r3, [r3, #8]
 800b834:	613b      	str	r3, [r7, #16]
 800b836:	693b      	ldr	r3, [r7, #16]
        return;
 800b838:	e082      	b.n	800b940 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800b83a:	69bb      	ldr	r3, [r7, #24]
 800b83c:	095b      	lsrs	r3, r3, #5
 800b83e:	f003 0301 	and.w	r3, r3, #1
 800b842:	2b00      	cmp	r3, #0
 800b844:	d014      	beq.n	800b870 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b84a:	f043 0201 	orr.w	r2, r3, #1
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800b852:	2300      	movs	r3, #0
 800b854:	60fb      	str	r3, [r7, #12]
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	60fb      	str	r3, [r7, #12]
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	681a      	ldr	r2, [r3, #0]
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b86c:	601a      	str	r2, [r3, #0]
 800b86e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800b870:	69bb      	ldr	r3, [r7, #24]
 800b872:	0a1b      	lsrs	r3, r3, #8
 800b874:	f003 0301 	and.w	r3, r3, #1
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d00c      	beq.n	800b896 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b880:	f043 0208 	orr.w	r2, r3, #8
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b888:	2300      	movs	r3, #0
 800b88a:	60bb      	str	r3, [r7, #8]
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	689b      	ldr	r3, [r3, #8]
 800b892:	60bb      	str	r3, [r7, #8]
 800b894:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d04f      	beq.n	800b93e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	685a      	ldr	r2, [r3, #4]
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b8ac:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800b8b6:	69fb      	ldr	r3, [r7, #28]
 800b8b8:	f003 0302 	and.w	r3, r3, #2
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d104      	bne.n	800b8ca <HAL_SPI_IRQHandler+0x17e>
 800b8c0:	69fb      	ldr	r3, [r7, #28]
 800b8c2:	f003 0301 	and.w	r3, r3, #1
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d034      	beq.n	800b934 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	685a      	ldr	r2, [r3, #4]
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	f022 0203 	bic.w	r2, r2, #3
 800b8d8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d011      	beq.n	800b906 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8e6:	4a18      	ldr	r2, [pc, #96]	; (800b948 <HAL_SPI_IRQHandler+0x1fc>)
 800b8e8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	f7fa ff42 	bl	8006778 <HAL_DMA_Abort_IT>
 800b8f4:	4603      	mov	r3, r0
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d005      	beq.n	800b906 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b8fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d016      	beq.n	800b93c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b912:	4a0d      	ldr	r2, [pc, #52]	; (800b948 <HAL_SPI_IRQHandler+0x1fc>)
 800b914:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7fa ff2c 	bl	8006778 <HAL_DMA_Abort_IT>
 800b920:	4603      	mov	r3, r0
 800b922:	2b00      	cmp	r3, #0
 800b924:	d00a      	beq.n	800b93c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b92a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800b932:	e003      	b.n	800b93c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 f813 	bl	800b960 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800b93a:	e000      	b.n	800b93e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800b93c:	bf00      	nop
    return;
 800b93e:	bf00      	nop
  }
}
 800b940:	3720      	adds	r7, #32
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	0800ba95 	.word	0x0800ba95

0800b94c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800b94c:	b480      	push	{r7}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800b954:	bf00      	nop
 800b956:	370c      	adds	r7, #12
 800b958:	46bd      	mov	sp, r7
 800b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95e:	4770      	bx	lr

0800b960 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800b960:	b480      	push	{r7}
 800b962:	b083      	sub	sp, #12
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800b968:	bf00      	nop
 800b96a:	370c      	adds	r7, #12
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800b974:	b480      	push	{r7}
 800b976:	b083      	sub	sp, #12
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b982:	b2db      	uxtb	r3, r3
}
 800b984:	4618      	mov	r0, r3
 800b986:	370c      	adds	r7, #12
 800b988:	46bd      	mov	sp, r7
 800b98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98e:	4770      	bx	lr

0800b990 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b086      	sub	sp, #24
 800b994:	af00      	add	r7, sp, #0
 800b996:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b99c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b99e:	f7fa fbd3 	bl	8006148 <HAL_GetTick>
 800b9a2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b9b2:	d03b      	beq.n	800ba2c <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	685a      	ldr	r2, [r3, #4]
 800b9ba:	697b      	ldr	r3, [r7, #20]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f022 0220 	bic.w	r2, r2, #32
 800b9c2:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	681b      	ldr	r3, [r3, #0]
 800b9c8:	685a      	ldr	r2, [r3, #4]
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f022 0202 	bic.w	r2, r2, #2
 800b9d2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b9d4:	693a      	ldr	r2, [r7, #16]
 800b9d6:	2164      	movs	r1, #100	; 0x64
 800b9d8:	6978      	ldr	r0, [r7, #20]
 800b9da:	f000 f8f7 	bl	800bbcc <SPI_EndRxTxTransaction>
 800b9de:	4603      	mov	r3, r0
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d005      	beq.n	800b9f0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9e8:	f043 0220 	orr.w	r2, r3, #32
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b9f0:	697b      	ldr	r3, [r7, #20]
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d10a      	bne.n	800ba0e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	60fb      	str	r3, [r7, #12]
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	68db      	ldr	r3, [r3, #12]
 800ba02:	60fb      	str	r3, [r7, #12]
 800ba04:	697b      	ldr	r3, [r7, #20]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	60fb      	str	r3, [r7, #12]
 800ba0c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800ba0e:	697b      	ldr	r3, [r7, #20]
 800ba10:	2200      	movs	r2, #0
 800ba12:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	2201      	movs	r2, #1
 800ba18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d003      	beq.n	800ba2c <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800ba24:	6978      	ldr	r0, [r7, #20]
 800ba26:	f7ff ff9b 	bl	800b960 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800ba2a:	e002      	b.n	800ba32 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800ba2c:	6978      	ldr	r0, [r7, #20]
 800ba2e:	f7f7 fc2d 	bl	800328c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ba32:	3718      	adds	r7, #24
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba44:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800ba46:	68f8      	ldr	r0, [r7, #12]
 800ba48:	f7ff ff80 	bl	800b94c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ba4c:	bf00      	nop
 800ba4e:	3710      	adds	r7, #16
 800ba50:	46bd      	mov	sp, r7
 800ba52:	bd80      	pop	{r7, pc}

0800ba54 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800ba54:	b580      	push	{r7, lr}
 800ba56:	b084      	sub	sp, #16
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba60:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	685a      	ldr	r2, [r3, #4]
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	f022 0203 	bic.w	r2, r2, #3
 800ba70:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba76:	f043 0210 	orr.w	r2, r3, #16
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	2201      	movs	r2, #1
 800ba82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800ba86:	68f8      	ldr	r0, [r7, #12]
 800ba88:	f7ff ff6a 	bl	800b960 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800ba8c:	bf00      	nop
 800ba8e:	3710      	adds	r7, #16
 800ba90:	46bd      	mov	sp, r7
 800ba92:	bd80      	pop	{r7, pc}

0800ba94 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	b084      	sub	sp, #16
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800baa0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800baa2:	68fb      	ldr	r3, [r7, #12]
 800baa4:	2200      	movs	r2, #0
 800baa6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2200      	movs	r2, #0
 800baac:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800baae:	68f8      	ldr	r0, [r7, #12]
 800bab0:	f7ff ff56 	bl	800b960 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800bab4:	bf00      	nop
 800bab6:	3710      	adds	r7, #16
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}

0800babc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b088      	sub	sp, #32
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	60f8      	str	r0, [r7, #12]
 800bac4:	60b9      	str	r1, [r7, #8]
 800bac6:	603b      	str	r3, [r7, #0]
 800bac8:	4613      	mov	r3, r2
 800baca:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800bacc:	f7fa fb3c 	bl	8006148 <HAL_GetTick>
 800bad0:	4602      	mov	r2, r0
 800bad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bad4:	1a9b      	subs	r3, r3, r2
 800bad6:	683a      	ldr	r2, [r7, #0]
 800bad8:	4413      	add	r3, r2
 800bada:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800badc:	f7fa fb34 	bl	8006148 <HAL_GetTick>
 800bae0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800bae2:	4b39      	ldr	r3, [pc, #228]	; (800bbc8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	015b      	lsls	r3, r3, #5
 800bae8:	0d1b      	lsrs	r3, r3, #20
 800baea:	69fa      	ldr	r2, [r7, #28]
 800baec:	fb02 f303 	mul.w	r3, r2, r3
 800baf0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800baf2:	e054      	b.n	800bb9e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bafa:	d050      	beq.n	800bb9e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800bafc:	f7fa fb24 	bl	8006148 <HAL_GetTick>
 800bb00:	4602      	mov	r2, r0
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	1ad3      	subs	r3, r2, r3
 800bb06:	69fa      	ldr	r2, [r7, #28]
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d902      	bls.n	800bb12 <SPI_WaitFlagStateUntilTimeout+0x56>
 800bb0c:	69fb      	ldr	r3, [r7, #28]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d13d      	bne.n	800bb8e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	685a      	ldr	r2, [r3, #4]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800bb20:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	685b      	ldr	r3, [r3, #4]
 800bb26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bb2a:	d111      	bne.n	800bb50 <SPI_WaitFlagStateUntilTimeout+0x94>
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bb34:	d004      	beq.n	800bb40 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	689b      	ldr	r3, [r3, #8]
 800bb3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb3e:	d107      	bne.n	800bb50 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	681a      	ldr	r2, [r3, #0]
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bb4e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800bb50:	68fb      	ldr	r3, [r7, #12]
 800bb52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb58:	d10f      	bne.n	800bb7a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	681a      	ldr	r2, [r3, #0]
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bb68:	601a      	str	r2, [r3, #0]
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	681a      	ldr	r2, [r3, #0]
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bb78:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	2201      	movs	r2, #1
 800bb7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	2200      	movs	r2, #0
 800bb86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800bb8a:	2303      	movs	r3, #3
 800bb8c:	e017      	b.n	800bbbe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800bb8e:	697b      	ldr	r3, [r7, #20]
 800bb90:	2b00      	cmp	r3, #0
 800bb92:	d101      	bne.n	800bb98 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800bb94:	2300      	movs	r3, #0
 800bb96:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	3b01      	subs	r3, #1
 800bb9c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	689a      	ldr	r2, [r3, #8]
 800bba4:	68bb      	ldr	r3, [r7, #8]
 800bba6:	4013      	ands	r3, r2
 800bba8:	68ba      	ldr	r2, [r7, #8]
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	bf0c      	ite	eq
 800bbae:	2301      	moveq	r3, #1
 800bbb0:	2300      	movne	r3, #0
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	79fb      	ldrb	r3, [r7, #7]
 800bbb8:	429a      	cmp	r2, r3
 800bbba:	d19b      	bne.n	800baf4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800bbbc:	2300      	movs	r3, #0
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3720      	adds	r7, #32
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}
 800bbc6:	bf00      	nop
 800bbc8:	20000008 	.word	0x20000008

0800bbcc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b088      	sub	sp, #32
 800bbd0:	af02      	add	r7, sp, #8
 800bbd2:	60f8      	str	r0, [r7, #12]
 800bbd4:	60b9      	str	r1, [r7, #8]
 800bbd6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800bbd8:	4b1b      	ldr	r3, [pc, #108]	; (800bc48 <SPI_EndRxTxTransaction+0x7c>)
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	4a1b      	ldr	r2, [pc, #108]	; (800bc4c <SPI_EndRxTxTransaction+0x80>)
 800bbde:	fba2 2303 	umull	r2, r3, r2, r3
 800bbe2:	0d5b      	lsrs	r3, r3, #21
 800bbe4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bbe8:	fb02 f303 	mul.w	r3, r2, r3
 800bbec:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	685b      	ldr	r3, [r3, #4]
 800bbf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800bbf6:	d112      	bne.n	800bc1e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	9300      	str	r3, [sp, #0]
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	2180      	movs	r1, #128	; 0x80
 800bc02:	68f8      	ldr	r0, [r7, #12]
 800bc04:	f7ff ff5a 	bl	800babc <SPI_WaitFlagStateUntilTimeout>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d016      	beq.n	800bc3c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc12:	f043 0220 	orr.w	r2, r3, #32
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800bc1a:	2303      	movs	r3, #3
 800bc1c:	e00f      	b.n	800bc3e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d00a      	beq.n	800bc3a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	3b01      	subs	r3, #1
 800bc28:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bc2a:	68fb      	ldr	r3, [r7, #12]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	689b      	ldr	r3, [r3, #8]
 800bc30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc34:	2b80      	cmp	r3, #128	; 0x80
 800bc36:	d0f2      	beq.n	800bc1e <SPI_EndRxTxTransaction+0x52>
 800bc38:	e000      	b.n	800bc3c <SPI_EndRxTxTransaction+0x70>
        break;
 800bc3a:	bf00      	nop
  }

  return HAL_OK;
 800bc3c:	2300      	movs	r3, #0
}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3718      	adds	r7, #24
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}
 800bc46:	bf00      	nop
 800bc48:	20000008 	.word	0x20000008
 800bc4c:	165e9f81 	.word	0x165e9f81

0800bc50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b082      	sub	sp, #8
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d101      	bne.n	800bc62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	e041      	b.n	800bce6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc68:	b2db      	uxtb	r3, r3
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d106      	bne.n	800bc7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	2200      	movs	r2, #0
 800bc72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f7f9 fa86 	bl	8005188 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2202      	movs	r2, #2
 800bc80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681a      	ldr	r2, [r3, #0]
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	3304      	adds	r3, #4
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	4610      	mov	r0, r2
 800bc90:	f000 fac4 	bl	800c21c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	2201      	movs	r2, #1
 800bc98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	2201      	movs	r2, #1
 800bca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2201      	movs	r2, #1
 800bca8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2201      	movs	r2, #1
 800bcb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2201      	movs	r2, #1
 800bcb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	2201      	movs	r2, #1
 800bcc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2201      	movs	r2, #1
 800bcd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	2201      	movs	r2, #1
 800bcd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	2201      	movs	r2, #1
 800bce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bce4:	2300      	movs	r3, #0
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3708      	adds	r7, #8
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}
	...

0800bcf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bcf0:	b480      	push	{r7}
 800bcf2:	b085      	sub	sp, #20
 800bcf4:	af00      	add	r7, sp, #0
 800bcf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bcfe:	b2db      	uxtb	r3, r3
 800bd00:	2b01      	cmp	r3, #1
 800bd02:	d001      	beq.n	800bd08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bd04:	2301      	movs	r3, #1
 800bd06:	e04e      	b.n	800bda6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	2202      	movs	r2, #2
 800bd0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	68da      	ldr	r2, [r3, #12]
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	f042 0201 	orr.w	r2, r2, #1
 800bd1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a23      	ldr	r2, [pc, #140]	; (800bdb4 <HAL_TIM_Base_Start_IT+0xc4>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d022      	beq.n	800bd70 <HAL_TIM_Base_Start_IT+0x80>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd32:	d01d      	beq.n	800bd70 <HAL_TIM_Base_Start_IT+0x80>
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	4a1f      	ldr	r2, [pc, #124]	; (800bdb8 <HAL_TIM_Base_Start_IT+0xc8>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d018      	beq.n	800bd70 <HAL_TIM_Base_Start_IT+0x80>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	4a1e      	ldr	r2, [pc, #120]	; (800bdbc <HAL_TIM_Base_Start_IT+0xcc>)
 800bd44:	4293      	cmp	r3, r2
 800bd46:	d013      	beq.n	800bd70 <HAL_TIM_Base_Start_IT+0x80>
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	4a1c      	ldr	r2, [pc, #112]	; (800bdc0 <HAL_TIM_Base_Start_IT+0xd0>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d00e      	beq.n	800bd70 <HAL_TIM_Base_Start_IT+0x80>
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	4a1b      	ldr	r2, [pc, #108]	; (800bdc4 <HAL_TIM_Base_Start_IT+0xd4>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d009      	beq.n	800bd70 <HAL_TIM_Base_Start_IT+0x80>
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4a19      	ldr	r2, [pc, #100]	; (800bdc8 <HAL_TIM_Base_Start_IT+0xd8>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d004      	beq.n	800bd70 <HAL_TIM_Base_Start_IT+0x80>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	4a18      	ldr	r2, [pc, #96]	; (800bdcc <HAL_TIM_Base_Start_IT+0xdc>)
 800bd6c:	4293      	cmp	r3, r2
 800bd6e:	d111      	bne.n	800bd94 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	689b      	ldr	r3, [r3, #8]
 800bd76:	f003 0307 	and.w	r3, r3, #7
 800bd7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	2b06      	cmp	r3, #6
 800bd80:	d010      	beq.n	800bda4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	681b      	ldr	r3, [r3, #0]
 800bd86:	681a      	ldr	r2, [r3, #0]
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	f042 0201 	orr.w	r2, r2, #1
 800bd90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bd92:	e007      	b.n	800bda4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	687b      	ldr	r3, [r7, #4]
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	f042 0201 	orr.w	r2, r2, #1
 800bda2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bda4:	2300      	movs	r3, #0
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	3714      	adds	r7, #20
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr
 800bdb2:	bf00      	nop
 800bdb4:	40010000 	.word	0x40010000
 800bdb8:	40000400 	.word	0x40000400
 800bdbc:	40000800 	.word	0x40000800
 800bdc0:	40000c00 	.word	0x40000c00
 800bdc4:	40010400 	.word	0x40010400
 800bdc8:	40014000 	.word	0x40014000
 800bdcc:	40001800 	.word	0x40001800

0800bdd0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b083      	sub	sp, #12
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	68da      	ldr	r2, [r3, #12]
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	f022 0201 	bic.w	r2, r2, #1
 800bde6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	6a1a      	ldr	r2, [r3, #32]
 800bdee:	f241 1311 	movw	r3, #4369	; 0x1111
 800bdf2:	4013      	ands	r3, r2
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d10f      	bne.n	800be18 <HAL_TIM_Base_Stop_IT+0x48>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	6a1a      	ldr	r2, [r3, #32]
 800bdfe:	f240 4344 	movw	r3, #1092	; 0x444
 800be02:	4013      	ands	r3, r2
 800be04:	2b00      	cmp	r3, #0
 800be06:	d107      	bne.n	800be18 <HAL_TIM_Base_Stop_IT+0x48>
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	681a      	ldr	r2, [r3, #0]
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	f022 0201 	bic.w	r2, r2, #1
 800be16:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	2201      	movs	r2, #1
 800be1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800be20:	2300      	movs	r3, #0
}
 800be22:	4618      	mov	r0, r3
 800be24:	370c      	adds	r7, #12
 800be26:	46bd      	mov	sp, r7
 800be28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be2c:	4770      	bx	lr

0800be2e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800be2e:	b580      	push	{r7, lr}
 800be30:	b082      	sub	sp, #8
 800be32:	af00      	add	r7, sp, #0
 800be34:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	691b      	ldr	r3, [r3, #16]
 800be3c:	f003 0302 	and.w	r3, r3, #2
 800be40:	2b02      	cmp	r3, #2
 800be42:	d122      	bne.n	800be8a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	68db      	ldr	r3, [r3, #12]
 800be4a:	f003 0302 	and.w	r3, r3, #2
 800be4e:	2b02      	cmp	r3, #2
 800be50:	d11b      	bne.n	800be8a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f06f 0202 	mvn.w	r2, #2
 800be5a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2201      	movs	r2, #1
 800be60:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	699b      	ldr	r3, [r3, #24]
 800be68:	f003 0303 	and.w	r3, r3, #3
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d003      	beq.n	800be78 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800be70:	6878      	ldr	r0, [r7, #4]
 800be72:	f000 f9b5 	bl	800c1e0 <HAL_TIM_IC_CaptureCallback>
 800be76:	e005      	b.n	800be84 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800be78:	6878      	ldr	r0, [r7, #4]
 800be7a:	f000 f9a7 	bl	800c1cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f000 f9b8 	bl	800c1f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2200      	movs	r2, #0
 800be88:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	691b      	ldr	r3, [r3, #16]
 800be90:	f003 0304 	and.w	r3, r3, #4
 800be94:	2b04      	cmp	r3, #4
 800be96:	d122      	bne.n	800bede <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	68db      	ldr	r3, [r3, #12]
 800be9e:	f003 0304 	and.w	r3, r3, #4
 800bea2:	2b04      	cmp	r3, #4
 800bea4:	d11b      	bne.n	800bede <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	f06f 0204 	mvn.w	r2, #4
 800beae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	2202      	movs	r2, #2
 800beb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	699b      	ldr	r3, [r3, #24]
 800bebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d003      	beq.n	800becc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 f98b 	bl	800c1e0 <HAL_TIM_IC_CaptureCallback>
 800beca:	e005      	b.n	800bed8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f000 f97d 	bl	800c1cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f000 f98e 	bl	800c1f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2200      	movs	r2, #0
 800bedc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	691b      	ldr	r3, [r3, #16]
 800bee4:	f003 0308 	and.w	r3, r3, #8
 800bee8:	2b08      	cmp	r3, #8
 800beea:	d122      	bne.n	800bf32 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	68db      	ldr	r3, [r3, #12]
 800bef2:	f003 0308 	and.w	r3, r3, #8
 800bef6:	2b08      	cmp	r3, #8
 800bef8:	d11b      	bne.n	800bf32 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f06f 0208 	mvn.w	r2, #8
 800bf02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2204      	movs	r2, #4
 800bf08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	69db      	ldr	r3, [r3, #28]
 800bf10:	f003 0303 	and.w	r3, r3, #3
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d003      	beq.n	800bf20 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f000 f961 	bl	800c1e0 <HAL_TIM_IC_CaptureCallback>
 800bf1e:	e005      	b.n	800bf2c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f000 f953 	bl	800c1cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 f964 	bl	800c1f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2200      	movs	r2, #0
 800bf30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	691b      	ldr	r3, [r3, #16]
 800bf38:	f003 0310 	and.w	r3, r3, #16
 800bf3c:	2b10      	cmp	r3, #16
 800bf3e:	d122      	bne.n	800bf86 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	68db      	ldr	r3, [r3, #12]
 800bf46:	f003 0310 	and.w	r3, r3, #16
 800bf4a:	2b10      	cmp	r3, #16
 800bf4c:	d11b      	bne.n	800bf86 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	f06f 0210 	mvn.w	r2, #16
 800bf56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2208      	movs	r2, #8
 800bf5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	69db      	ldr	r3, [r3, #28]
 800bf64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d003      	beq.n	800bf74 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 f937 	bl	800c1e0 <HAL_TIM_IC_CaptureCallback>
 800bf72:	e005      	b.n	800bf80 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 f929 	bl	800c1cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf7a:	6878      	ldr	r0, [r7, #4]
 800bf7c:	f000 f93a 	bl	800c1f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	2200      	movs	r2, #0
 800bf84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	691b      	ldr	r3, [r3, #16]
 800bf8c:	f003 0301 	and.w	r3, r3, #1
 800bf90:	2b01      	cmp	r3, #1
 800bf92:	d10e      	bne.n	800bfb2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	68db      	ldr	r3, [r3, #12]
 800bf9a:	f003 0301 	and.w	r3, r3, #1
 800bf9e:	2b01      	cmp	r3, #1
 800bfa0:	d107      	bne.n	800bfb2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	f06f 0201 	mvn.w	r2, #1
 800bfaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bfac:	6878      	ldr	r0, [r7, #4]
 800bfae:	f7f8 fe93 	bl	8004cd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	691b      	ldr	r3, [r3, #16]
 800bfb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfbc:	2b80      	cmp	r3, #128	; 0x80
 800bfbe:	d10e      	bne.n	800bfde <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	68db      	ldr	r3, [r3, #12]
 800bfc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bfca:	2b80      	cmp	r3, #128	; 0x80
 800bfcc:	d107      	bne.n	800bfde <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bfd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bfd8:	6878      	ldr	r0, [r7, #4]
 800bfda:	f000 fadf 	bl	800c59c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	691b      	ldr	r3, [r3, #16]
 800bfe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bfe8:	2b40      	cmp	r3, #64	; 0x40
 800bfea:	d10e      	bne.n	800c00a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	68db      	ldr	r3, [r3, #12]
 800bff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bff6:	2b40      	cmp	r3, #64	; 0x40
 800bff8:	d107      	bne.n	800c00a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c004:	6878      	ldr	r0, [r7, #4]
 800c006:	f000 f8ff 	bl	800c208 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	691b      	ldr	r3, [r3, #16]
 800c010:	f003 0320 	and.w	r3, r3, #32
 800c014:	2b20      	cmp	r3, #32
 800c016:	d10e      	bne.n	800c036 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	68db      	ldr	r3, [r3, #12]
 800c01e:	f003 0320 	and.w	r3, r3, #32
 800c022:	2b20      	cmp	r3, #32
 800c024:	d107      	bne.n	800c036 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f06f 0220 	mvn.w	r2, #32
 800c02e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 faa9 	bl	800c588 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c036:	bf00      	nop
 800c038:	3708      	adds	r7, #8
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}

0800c03e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c03e:	b580      	push	{r7, lr}
 800c040:	b084      	sub	sp, #16
 800c042:	af00      	add	r7, sp, #0
 800c044:	6078      	str	r0, [r7, #4]
 800c046:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c048:	2300      	movs	r3, #0
 800c04a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c052:	2b01      	cmp	r3, #1
 800c054:	d101      	bne.n	800c05a <HAL_TIM_ConfigClockSource+0x1c>
 800c056:	2302      	movs	r3, #2
 800c058:	e0b4      	b.n	800c1c4 <HAL_TIM_ConfigClockSource+0x186>
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	2201      	movs	r2, #1
 800c05e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2202      	movs	r2, #2
 800c066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	689b      	ldr	r3, [r3, #8]
 800c070:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c078:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c080:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	681b      	ldr	r3, [r3, #0]
 800c086:	68ba      	ldr	r2, [r7, #8]
 800c088:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c08a:	683b      	ldr	r3, [r7, #0]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c092:	d03e      	beq.n	800c112 <HAL_TIM_ConfigClockSource+0xd4>
 800c094:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c098:	f200 8087 	bhi.w	800c1aa <HAL_TIM_ConfigClockSource+0x16c>
 800c09c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0a0:	f000 8086 	beq.w	800c1b0 <HAL_TIM_ConfigClockSource+0x172>
 800c0a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0a8:	d87f      	bhi.n	800c1aa <HAL_TIM_ConfigClockSource+0x16c>
 800c0aa:	2b70      	cmp	r3, #112	; 0x70
 800c0ac:	d01a      	beq.n	800c0e4 <HAL_TIM_ConfigClockSource+0xa6>
 800c0ae:	2b70      	cmp	r3, #112	; 0x70
 800c0b0:	d87b      	bhi.n	800c1aa <HAL_TIM_ConfigClockSource+0x16c>
 800c0b2:	2b60      	cmp	r3, #96	; 0x60
 800c0b4:	d050      	beq.n	800c158 <HAL_TIM_ConfigClockSource+0x11a>
 800c0b6:	2b60      	cmp	r3, #96	; 0x60
 800c0b8:	d877      	bhi.n	800c1aa <HAL_TIM_ConfigClockSource+0x16c>
 800c0ba:	2b50      	cmp	r3, #80	; 0x50
 800c0bc:	d03c      	beq.n	800c138 <HAL_TIM_ConfigClockSource+0xfa>
 800c0be:	2b50      	cmp	r3, #80	; 0x50
 800c0c0:	d873      	bhi.n	800c1aa <HAL_TIM_ConfigClockSource+0x16c>
 800c0c2:	2b40      	cmp	r3, #64	; 0x40
 800c0c4:	d058      	beq.n	800c178 <HAL_TIM_ConfigClockSource+0x13a>
 800c0c6:	2b40      	cmp	r3, #64	; 0x40
 800c0c8:	d86f      	bhi.n	800c1aa <HAL_TIM_ConfigClockSource+0x16c>
 800c0ca:	2b30      	cmp	r3, #48	; 0x30
 800c0cc:	d064      	beq.n	800c198 <HAL_TIM_ConfigClockSource+0x15a>
 800c0ce:	2b30      	cmp	r3, #48	; 0x30
 800c0d0:	d86b      	bhi.n	800c1aa <HAL_TIM_ConfigClockSource+0x16c>
 800c0d2:	2b20      	cmp	r3, #32
 800c0d4:	d060      	beq.n	800c198 <HAL_TIM_ConfigClockSource+0x15a>
 800c0d6:	2b20      	cmp	r3, #32
 800c0d8:	d867      	bhi.n	800c1aa <HAL_TIM_ConfigClockSource+0x16c>
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d05c      	beq.n	800c198 <HAL_TIM_ConfigClockSource+0x15a>
 800c0de:	2b10      	cmp	r3, #16
 800c0e0:	d05a      	beq.n	800c198 <HAL_TIM_ConfigClockSource+0x15a>
 800c0e2:	e062      	b.n	800c1aa <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	6818      	ldr	r0, [r3, #0]
 800c0e8:	683b      	ldr	r3, [r7, #0]
 800c0ea:	6899      	ldr	r1, [r3, #8]
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	685a      	ldr	r2, [r3, #4]
 800c0f0:	683b      	ldr	r3, [r7, #0]
 800c0f2:	68db      	ldr	r3, [r3, #12]
 800c0f4:	f000 f9ac 	bl	800c450 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	689b      	ldr	r3, [r3, #8]
 800c0fe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c106:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	68ba      	ldr	r2, [r7, #8]
 800c10e:	609a      	str	r2, [r3, #8]
      break;
 800c110:	e04f      	b.n	800c1b2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6818      	ldr	r0, [r3, #0]
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	6899      	ldr	r1, [r3, #8]
 800c11a:	683b      	ldr	r3, [r7, #0]
 800c11c:	685a      	ldr	r2, [r3, #4]
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	68db      	ldr	r3, [r3, #12]
 800c122:	f000 f995 	bl	800c450 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	689a      	ldr	r2, [r3, #8]
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c134:	609a      	str	r2, [r3, #8]
      break;
 800c136:	e03c      	b.n	800c1b2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	6818      	ldr	r0, [r3, #0]
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	6859      	ldr	r1, [r3, #4]
 800c140:	683b      	ldr	r3, [r7, #0]
 800c142:	68db      	ldr	r3, [r3, #12]
 800c144:	461a      	mov	r2, r3
 800c146:	f000 f909 	bl	800c35c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	2150      	movs	r1, #80	; 0x50
 800c150:	4618      	mov	r0, r3
 800c152:	f000 f962 	bl	800c41a <TIM_ITRx_SetConfig>
      break;
 800c156:	e02c      	b.n	800c1b2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6818      	ldr	r0, [r3, #0]
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	6859      	ldr	r1, [r3, #4]
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	68db      	ldr	r3, [r3, #12]
 800c164:	461a      	mov	r2, r3
 800c166:	f000 f928 	bl	800c3ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	2160      	movs	r1, #96	; 0x60
 800c170:	4618      	mov	r0, r3
 800c172:	f000 f952 	bl	800c41a <TIM_ITRx_SetConfig>
      break;
 800c176:	e01c      	b.n	800c1b2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6818      	ldr	r0, [r3, #0]
 800c17c:	683b      	ldr	r3, [r7, #0]
 800c17e:	6859      	ldr	r1, [r3, #4]
 800c180:	683b      	ldr	r3, [r7, #0]
 800c182:	68db      	ldr	r3, [r3, #12]
 800c184:	461a      	mov	r2, r3
 800c186:	f000 f8e9 	bl	800c35c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	2140      	movs	r1, #64	; 0x40
 800c190:	4618      	mov	r0, r3
 800c192:	f000 f942 	bl	800c41a <TIM_ITRx_SetConfig>
      break;
 800c196:	e00c      	b.n	800c1b2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681a      	ldr	r2, [r3, #0]
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	4619      	mov	r1, r3
 800c1a2:	4610      	mov	r0, r2
 800c1a4:	f000 f939 	bl	800c41a <TIM_ITRx_SetConfig>
      break;
 800c1a8:	e003      	b.n	800c1b2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	73fb      	strb	r3, [r7, #15]
      break;
 800c1ae:	e000      	b.n	800c1b2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c1b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	2201      	movs	r2, #1
 800c1b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2200      	movs	r2, #0
 800c1be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c1c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1c4:	4618      	mov	r0, r3
 800c1c6:	3710      	adds	r7, #16
 800c1c8:	46bd      	mov	sp, r7
 800c1ca:	bd80      	pop	{r7, pc}

0800c1cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c1cc:	b480      	push	{r7}
 800c1ce:	b083      	sub	sp, #12
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c1d4:	bf00      	nop
 800c1d6:	370c      	adds	r7, #12
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr

0800c1e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c1e0:	b480      	push	{r7}
 800c1e2:	b083      	sub	sp, #12
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c1e8:	bf00      	nop
 800c1ea:	370c      	adds	r7, #12
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr

0800c1f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c1f4:	b480      	push	{r7}
 800c1f6:	b083      	sub	sp, #12
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c1fc:	bf00      	nop
 800c1fe:	370c      	adds	r7, #12
 800c200:	46bd      	mov	sp, r7
 800c202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c206:	4770      	bx	lr

0800c208 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c208:	b480      	push	{r7}
 800c20a:	b083      	sub	sp, #12
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c210:	bf00      	nop
 800c212:	370c      	adds	r7, #12
 800c214:	46bd      	mov	sp, r7
 800c216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21a:	4770      	bx	lr

0800c21c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c21c:	b480      	push	{r7}
 800c21e:	b085      	sub	sp, #20
 800c220:	af00      	add	r7, sp, #0
 800c222:	6078      	str	r0, [r7, #4]
 800c224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	4a40      	ldr	r2, [pc, #256]	; (800c330 <TIM_Base_SetConfig+0x114>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d013      	beq.n	800c25c <TIM_Base_SetConfig+0x40>
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c23a:	d00f      	beq.n	800c25c <TIM_Base_SetConfig+0x40>
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	4a3d      	ldr	r2, [pc, #244]	; (800c334 <TIM_Base_SetConfig+0x118>)
 800c240:	4293      	cmp	r3, r2
 800c242:	d00b      	beq.n	800c25c <TIM_Base_SetConfig+0x40>
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	4a3c      	ldr	r2, [pc, #240]	; (800c338 <TIM_Base_SetConfig+0x11c>)
 800c248:	4293      	cmp	r3, r2
 800c24a:	d007      	beq.n	800c25c <TIM_Base_SetConfig+0x40>
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	4a3b      	ldr	r2, [pc, #236]	; (800c33c <TIM_Base_SetConfig+0x120>)
 800c250:	4293      	cmp	r3, r2
 800c252:	d003      	beq.n	800c25c <TIM_Base_SetConfig+0x40>
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	4a3a      	ldr	r2, [pc, #232]	; (800c340 <TIM_Base_SetConfig+0x124>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d108      	bne.n	800c26e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	685b      	ldr	r3, [r3, #4]
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	4313      	orrs	r3, r2
 800c26c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	4a2f      	ldr	r2, [pc, #188]	; (800c330 <TIM_Base_SetConfig+0x114>)
 800c272:	4293      	cmp	r3, r2
 800c274:	d02b      	beq.n	800c2ce <TIM_Base_SetConfig+0xb2>
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c27c:	d027      	beq.n	800c2ce <TIM_Base_SetConfig+0xb2>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	4a2c      	ldr	r2, [pc, #176]	; (800c334 <TIM_Base_SetConfig+0x118>)
 800c282:	4293      	cmp	r3, r2
 800c284:	d023      	beq.n	800c2ce <TIM_Base_SetConfig+0xb2>
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	4a2b      	ldr	r2, [pc, #172]	; (800c338 <TIM_Base_SetConfig+0x11c>)
 800c28a:	4293      	cmp	r3, r2
 800c28c:	d01f      	beq.n	800c2ce <TIM_Base_SetConfig+0xb2>
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	4a2a      	ldr	r2, [pc, #168]	; (800c33c <TIM_Base_SetConfig+0x120>)
 800c292:	4293      	cmp	r3, r2
 800c294:	d01b      	beq.n	800c2ce <TIM_Base_SetConfig+0xb2>
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	4a29      	ldr	r2, [pc, #164]	; (800c340 <TIM_Base_SetConfig+0x124>)
 800c29a:	4293      	cmp	r3, r2
 800c29c:	d017      	beq.n	800c2ce <TIM_Base_SetConfig+0xb2>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	4a28      	ldr	r2, [pc, #160]	; (800c344 <TIM_Base_SetConfig+0x128>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d013      	beq.n	800c2ce <TIM_Base_SetConfig+0xb2>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	4a27      	ldr	r2, [pc, #156]	; (800c348 <TIM_Base_SetConfig+0x12c>)
 800c2aa:	4293      	cmp	r3, r2
 800c2ac:	d00f      	beq.n	800c2ce <TIM_Base_SetConfig+0xb2>
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	4a26      	ldr	r2, [pc, #152]	; (800c34c <TIM_Base_SetConfig+0x130>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d00b      	beq.n	800c2ce <TIM_Base_SetConfig+0xb2>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	4a25      	ldr	r2, [pc, #148]	; (800c350 <TIM_Base_SetConfig+0x134>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d007      	beq.n	800c2ce <TIM_Base_SetConfig+0xb2>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	4a24      	ldr	r2, [pc, #144]	; (800c354 <TIM_Base_SetConfig+0x138>)
 800c2c2:	4293      	cmp	r3, r2
 800c2c4:	d003      	beq.n	800c2ce <TIM_Base_SetConfig+0xb2>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	4a23      	ldr	r2, [pc, #140]	; (800c358 <TIM_Base_SetConfig+0x13c>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d108      	bne.n	800c2e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	68db      	ldr	r3, [r3, #12]
 800c2da:	68fa      	ldr	r2, [r7, #12]
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	695b      	ldr	r3, [r3, #20]
 800c2ea:	4313      	orrs	r3, r2
 800c2ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	68fa      	ldr	r2, [r7, #12]
 800c2f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	689a      	ldr	r2, [r3, #8]
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c2fc:	683b      	ldr	r3, [r7, #0]
 800c2fe:	681a      	ldr	r2, [r3, #0]
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	4a0a      	ldr	r2, [pc, #40]	; (800c330 <TIM_Base_SetConfig+0x114>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d003      	beq.n	800c314 <TIM_Base_SetConfig+0xf8>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	4a0c      	ldr	r2, [pc, #48]	; (800c340 <TIM_Base_SetConfig+0x124>)
 800c310:	4293      	cmp	r3, r2
 800c312:	d103      	bne.n	800c31c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c314:	683b      	ldr	r3, [r7, #0]
 800c316:	691a      	ldr	r2, [r3, #16]
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2201      	movs	r2, #1
 800c320:	615a      	str	r2, [r3, #20]
}
 800c322:	bf00      	nop
 800c324:	3714      	adds	r7, #20
 800c326:	46bd      	mov	sp, r7
 800c328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32c:	4770      	bx	lr
 800c32e:	bf00      	nop
 800c330:	40010000 	.word	0x40010000
 800c334:	40000400 	.word	0x40000400
 800c338:	40000800 	.word	0x40000800
 800c33c:	40000c00 	.word	0x40000c00
 800c340:	40010400 	.word	0x40010400
 800c344:	40014000 	.word	0x40014000
 800c348:	40014400 	.word	0x40014400
 800c34c:	40014800 	.word	0x40014800
 800c350:	40001800 	.word	0x40001800
 800c354:	40001c00 	.word	0x40001c00
 800c358:	40002000 	.word	0x40002000

0800c35c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c35c:	b480      	push	{r7}
 800c35e:	b087      	sub	sp, #28
 800c360:	af00      	add	r7, sp, #0
 800c362:	60f8      	str	r0, [r7, #12]
 800c364:	60b9      	str	r1, [r7, #8]
 800c366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	6a1b      	ldr	r3, [r3, #32]
 800c36c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	6a1b      	ldr	r3, [r3, #32]
 800c372:	f023 0201 	bic.w	r2, r3, #1
 800c376:	68fb      	ldr	r3, [r7, #12]
 800c378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	699b      	ldr	r3, [r3, #24]
 800c37e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c380:	693b      	ldr	r3, [r7, #16]
 800c382:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	011b      	lsls	r3, r3, #4
 800c38c:	693a      	ldr	r2, [r7, #16]
 800c38e:	4313      	orrs	r3, r2
 800c390:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	f023 030a 	bic.w	r3, r3, #10
 800c398:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c39a:	697a      	ldr	r2, [r7, #20]
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	693a      	ldr	r2, [r7, #16]
 800c3a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	697a      	ldr	r2, [r7, #20]
 800c3ac:	621a      	str	r2, [r3, #32]
}
 800c3ae:	bf00      	nop
 800c3b0:	371c      	adds	r7, #28
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b8:	4770      	bx	lr

0800c3ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c3ba:	b480      	push	{r7}
 800c3bc:	b087      	sub	sp, #28
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	60f8      	str	r0, [r7, #12]
 800c3c2:	60b9      	str	r1, [r7, #8]
 800c3c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	6a1b      	ldr	r3, [r3, #32]
 800c3ca:	f023 0210 	bic.w	r2, r3, #16
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	699b      	ldr	r3, [r3, #24]
 800c3d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	6a1b      	ldr	r3, [r3, #32]
 800c3dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c3de:	697b      	ldr	r3, [r7, #20]
 800c3e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c3e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	031b      	lsls	r3, r3, #12
 800c3ea:	697a      	ldr	r2, [r7, #20]
 800c3ec:	4313      	orrs	r3, r2
 800c3ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c3f0:	693b      	ldr	r3, [r7, #16]
 800c3f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c3f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	011b      	lsls	r3, r3, #4
 800c3fc:	693a      	ldr	r2, [r7, #16]
 800c3fe:	4313      	orrs	r3, r2
 800c400:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	697a      	ldr	r2, [r7, #20]
 800c406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	693a      	ldr	r2, [r7, #16]
 800c40c:	621a      	str	r2, [r3, #32]
}
 800c40e:	bf00      	nop
 800c410:	371c      	adds	r7, #28
 800c412:	46bd      	mov	sp, r7
 800c414:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c418:	4770      	bx	lr

0800c41a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c41a:	b480      	push	{r7}
 800c41c:	b085      	sub	sp, #20
 800c41e:	af00      	add	r7, sp, #0
 800c420:	6078      	str	r0, [r7, #4]
 800c422:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	689b      	ldr	r3, [r3, #8]
 800c428:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c430:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c432:	683a      	ldr	r2, [r7, #0]
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	4313      	orrs	r3, r2
 800c438:	f043 0307 	orr.w	r3, r3, #7
 800c43c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	68fa      	ldr	r2, [r7, #12]
 800c442:	609a      	str	r2, [r3, #8]
}
 800c444:	bf00      	nop
 800c446:	3714      	adds	r7, #20
 800c448:	46bd      	mov	sp, r7
 800c44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44e:	4770      	bx	lr

0800c450 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c450:	b480      	push	{r7}
 800c452:	b087      	sub	sp, #28
 800c454:	af00      	add	r7, sp, #0
 800c456:	60f8      	str	r0, [r7, #12]
 800c458:	60b9      	str	r1, [r7, #8]
 800c45a:	607a      	str	r2, [r7, #4]
 800c45c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	689b      	ldr	r3, [r3, #8]
 800c462:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c464:	697b      	ldr	r3, [r7, #20]
 800c466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c46a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c46c:	683b      	ldr	r3, [r7, #0]
 800c46e:	021a      	lsls	r2, r3, #8
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	431a      	orrs	r2, r3
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	4313      	orrs	r3, r2
 800c478:	697a      	ldr	r2, [r7, #20]
 800c47a:	4313      	orrs	r3, r2
 800c47c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	697a      	ldr	r2, [r7, #20]
 800c482:	609a      	str	r2, [r3, #8]
}
 800c484:	bf00      	nop
 800c486:	371c      	adds	r7, #28
 800c488:	46bd      	mov	sp, r7
 800c48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c48e:	4770      	bx	lr

0800c490 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c490:	b480      	push	{r7}
 800c492:	b085      	sub	sp, #20
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c4a0:	2b01      	cmp	r3, #1
 800c4a2:	d101      	bne.n	800c4a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c4a4:	2302      	movs	r3, #2
 800c4a6:	e05a      	b.n	800c55e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	2201      	movs	r2, #1
 800c4ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2202      	movs	r2, #2
 800c4b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	685b      	ldr	r3, [r3, #4]
 800c4be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	689b      	ldr	r3, [r3, #8]
 800c4c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c4d0:	683b      	ldr	r3, [r7, #0]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	68fa      	ldr	r2, [r7, #12]
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	68fa      	ldr	r2, [r7, #12]
 800c4e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	4a21      	ldr	r2, [pc, #132]	; (800c56c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d022      	beq.n	800c532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4f4:	d01d      	beq.n	800c532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4a1d      	ldr	r2, [pc, #116]	; (800c570 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d018      	beq.n	800c532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a1b      	ldr	r2, [pc, #108]	; (800c574 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d013      	beq.n	800c532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	4a1a      	ldr	r2, [pc, #104]	; (800c578 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800c510:	4293      	cmp	r3, r2
 800c512:	d00e      	beq.n	800c532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4a18      	ldr	r2, [pc, #96]	; (800c57c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d009      	beq.n	800c532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	4a17      	ldr	r2, [pc, #92]	; (800c580 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c524:	4293      	cmp	r3, r2
 800c526:	d004      	beq.n	800c532 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4a15      	ldr	r2, [pc, #84]	; (800c584 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d10c      	bne.n	800c54c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c538:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c53a:	683b      	ldr	r3, [r7, #0]
 800c53c:	685b      	ldr	r3, [r3, #4]
 800c53e:	68ba      	ldr	r2, [r7, #8]
 800c540:	4313      	orrs	r3, r2
 800c542:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	68ba      	ldr	r2, [r7, #8]
 800c54a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	2201      	movs	r2, #1
 800c550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	2200      	movs	r2, #0
 800c558:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3714      	adds	r7, #20
 800c562:	46bd      	mov	sp, r7
 800c564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c568:	4770      	bx	lr
 800c56a:	bf00      	nop
 800c56c:	40010000 	.word	0x40010000
 800c570:	40000400 	.word	0x40000400
 800c574:	40000800 	.word	0x40000800
 800c578:	40000c00 	.word	0x40000c00
 800c57c:	40010400 	.word	0x40010400
 800c580:	40014000 	.word	0x40014000
 800c584:	40001800 	.word	0x40001800

0800c588 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c588:	b480      	push	{r7}
 800c58a:	b083      	sub	sp, #12
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c590:	bf00      	nop
 800c592:	370c      	adds	r7, #12
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr

0800c59c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b083      	sub	sp, #12
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c5a4:	bf00      	nop
 800c5a6:	370c      	adds	r7, #12
 800c5a8:	46bd      	mov	sp, r7
 800c5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ae:	4770      	bx	lr

0800c5b0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c5b0:	b084      	sub	sp, #16
 800c5b2:	b580      	push	{r7, lr}
 800c5b4:	b084      	sub	sp, #16
 800c5b6:	af00      	add	r7, sp, #0
 800c5b8:	6078      	str	r0, [r7, #4]
 800c5ba:	f107 001c 	add.w	r0, r7, #28
 800c5be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	d122      	bne.n	800c60e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	68db      	ldr	r3, [r3, #12]
 800c5d8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800c5dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c5e0:	687a      	ldr	r2, [r7, #4]
 800c5e2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	68db      	ldr	r3, [r3, #12]
 800c5e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c5f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5f2:	2b01      	cmp	r3, #1
 800c5f4:	d105      	bne.n	800c602 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	68db      	ldr	r3, [r3, #12]
 800c5fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c602:	6878      	ldr	r0, [r7, #4]
 800c604:	f001 fb1c 	bl	800dc40 <USB_CoreReset>
 800c608:	4603      	mov	r3, r0
 800c60a:	73fb      	strb	r3, [r7, #15]
 800c60c:	e01a      	b.n	800c644 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f001 fb10 	bl	800dc40 <USB_CoreReset>
 800c620:	4603      	mov	r3, r0
 800c622:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c624:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c626:	2b00      	cmp	r3, #0
 800c628:	d106      	bne.n	800c638 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c62e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	639a      	str	r2, [r3, #56]	; 0x38
 800c636:	e005      	b.n	800c644 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c63c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c646:	2b01      	cmp	r3, #1
 800c648:	d10b      	bne.n	800c662 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	689b      	ldr	r3, [r3, #8]
 800c64e:	f043 0206 	orr.w	r2, r3, #6
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	689b      	ldr	r3, [r3, #8]
 800c65a:	f043 0220 	orr.w	r2, r3, #32
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c662:	7bfb      	ldrb	r3, [r7, #15]
}
 800c664:	4618      	mov	r0, r3
 800c666:	3710      	adds	r7, #16
 800c668:	46bd      	mov	sp, r7
 800c66a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c66e:	b004      	add	sp, #16
 800c670:	4770      	bx	lr
	...

0800c674 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800c674:	b480      	push	{r7}
 800c676:	b087      	sub	sp, #28
 800c678:	af00      	add	r7, sp, #0
 800c67a:	60f8      	str	r0, [r7, #12]
 800c67c:	60b9      	str	r1, [r7, #8]
 800c67e:	4613      	mov	r3, r2
 800c680:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800c682:	79fb      	ldrb	r3, [r7, #7]
 800c684:	2b02      	cmp	r3, #2
 800c686:	d165      	bne.n	800c754 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800c688:	68bb      	ldr	r3, [r7, #8]
 800c68a:	4a41      	ldr	r2, [pc, #260]	; (800c790 <USB_SetTurnaroundTime+0x11c>)
 800c68c:	4293      	cmp	r3, r2
 800c68e:	d906      	bls.n	800c69e <USB_SetTurnaroundTime+0x2a>
 800c690:	68bb      	ldr	r3, [r7, #8]
 800c692:	4a40      	ldr	r2, [pc, #256]	; (800c794 <USB_SetTurnaroundTime+0x120>)
 800c694:	4293      	cmp	r3, r2
 800c696:	d202      	bcs.n	800c69e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800c698:	230f      	movs	r3, #15
 800c69a:	617b      	str	r3, [r7, #20]
 800c69c:	e062      	b.n	800c764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	4a3c      	ldr	r2, [pc, #240]	; (800c794 <USB_SetTurnaroundTime+0x120>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d306      	bcc.n	800c6b4 <USB_SetTurnaroundTime+0x40>
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	4a3b      	ldr	r2, [pc, #236]	; (800c798 <USB_SetTurnaroundTime+0x124>)
 800c6aa:	4293      	cmp	r3, r2
 800c6ac:	d202      	bcs.n	800c6b4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800c6ae:	230e      	movs	r3, #14
 800c6b0:	617b      	str	r3, [r7, #20]
 800c6b2:	e057      	b.n	800c764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	4a38      	ldr	r2, [pc, #224]	; (800c798 <USB_SetTurnaroundTime+0x124>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d306      	bcc.n	800c6ca <USB_SetTurnaroundTime+0x56>
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	4a37      	ldr	r2, [pc, #220]	; (800c79c <USB_SetTurnaroundTime+0x128>)
 800c6c0:	4293      	cmp	r3, r2
 800c6c2:	d202      	bcs.n	800c6ca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800c6c4:	230d      	movs	r3, #13
 800c6c6:	617b      	str	r3, [r7, #20]
 800c6c8:	e04c      	b.n	800c764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800c6ca:	68bb      	ldr	r3, [r7, #8]
 800c6cc:	4a33      	ldr	r2, [pc, #204]	; (800c79c <USB_SetTurnaroundTime+0x128>)
 800c6ce:	4293      	cmp	r3, r2
 800c6d0:	d306      	bcc.n	800c6e0 <USB_SetTurnaroundTime+0x6c>
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	4a32      	ldr	r2, [pc, #200]	; (800c7a0 <USB_SetTurnaroundTime+0x12c>)
 800c6d6:	4293      	cmp	r3, r2
 800c6d8:	d802      	bhi.n	800c6e0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800c6da:	230c      	movs	r3, #12
 800c6dc:	617b      	str	r3, [r7, #20]
 800c6de:	e041      	b.n	800c764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	4a2f      	ldr	r2, [pc, #188]	; (800c7a0 <USB_SetTurnaroundTime+0x12c>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d906      	bls.n	800c6f6 <USB_SetTurnaroundTime+0x82>
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	4a2e      	ldr	r2, [pc, #184]	; (800c7a4 <USB_SetTurnaroundTime+0x130>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d802      	bhi.n	800c6f6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800c6f0:	230b      	movs	r3, #11
 800c6f2:	617b      	str	r3, [r7, #20]
 800c6f4:	e036      	b.n	800c764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	4a2a      	ldr	r2, [pc, #168]	; (800c7a4 <USB_SetTurnaroundTime+0x130>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d906      	bls.n	800c70c <USB_SetTurnaroundTime+0x98>
 800c6fe:	68bb      	ldr	r3, [r7, #8]
 800c700:	4a29      	ldr	r2, [pc, #164]	; (800c7a8 <USB_SetTurnaroundTime+0x134>)
 800c702:	4293      	cmp	r3, r2
 800c704:	d802      	bhi.n	800c70c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800c706:	230a      	movs	r3, #10
 800c708:	617b      	str	r3, [r7, #20]
 800c70a:	e02b      	b.n	800c764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	4a26      	ldr	r2, [pc, #152]	; (800c7a8 <USB_SetTurnaroundTime+0x134>)
 800c710:	4293      	cmp	r3, r2
 800c712:	d906      	bls.n	800c722 <USB_SetTurnaroundTime+0xae>
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	4a25      	ldr	r2, [pc, #148]	; (800c7ac <USB_SetTurnaroundTime+0x138>)
 800c718:	4293      	cmp	r3, r2
 800c71a:	d202      	bcs.n	800c722 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800c71c:	2309      	movs	r3, #9
 800c71e:	617b      	str	r3, [r7, #20]
 800c720:	e020      	b.n	800c764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	4a21      	ldr	r2, [pc, #132]	; (800c7ac <USB_SetTurnaroundTime+0x138>)
 800c726:	4293      	cmp	r3, r2
 800c728:	d306      	bcc.n	800c738 <USB_SetTurnaroundTime+0xc4>
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	4a20      	ldr	r2, [pc, #128]	; (800c7b0 <USB_SetTurnaroundTime+0x13c>)
 800c72e:	4293      	cmp	r3, r2
 800c730:	d802      	bhi.n	800c738 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c732:	2308      	movs	r3, #8
 800c734:	617b      	str	r3, [r7, #20]
 800c736:	e015      	b.n	800c764 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c738:	68bb      	ldr	r3, [r7, #8]
 800c73a:	4a1d      	ldr	r2, [pc, #116]	; (800c7b0 <USB_SetTurnaroundTime+0x13c>)
 800c73c:	4293      	cmp	r3, r2
 800c73e:	d906      	bls.n	800c74e <USB_SetTurnaroundTime+0xda>
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	4a1c      	ldr	r2, [pc, #112]	; (800c7b4 <USB_SetTurnaroundTime+0x140>)
 800c744:	4293      	cmp	r3, r2
 800c746:	d202      	bcs.n	800c74e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c748:	2307      	movs	r3, #7
 800c74a:	617b      	str	r3, [r7, #20]
 800c74c:	e00a      	b.n	800c764 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c74e:	2306      	movs	r3, #6
 800c750:	617b      	str	r3, [r7, #20]
 800c752:	e007      	b.n	800c764 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c754:	79fb      	ldrb	r3, [r7, #7]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d102      	bne.n	800c760 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c75a:	2309      	movs	r3, #9
 800c75c:	617b      	str	r3, [r7, #20]
 800c75e:	e001      	b.n	800c764 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c760:	2309      	movs	r3, #9
 800c762:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	68db      	ldr	r3, [r3, #12]
 800c768:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	68da      	ldr	r2, [r3, #12]
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	029b      	lsls	r3, r3, #10
 800c778:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c77c:	431a      	orrs	r2, r3
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c782:	2300      	movs	r3, #0
}
 800c784:	4618      	mov	r0, r3
 800c786:	371c      	adds	r7, #28
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr
 800c790:	00d8acbf 	.word	0x00d8acbf
 800c794:	00e4e1c0 	.word	0x00e4e1c0
 800c798:	00f42400 	.word	0x00f42400
 800c79c:	01067380 	.word	0x01067380
 800c7a0:	011a499f 	.word	0x011a499f
 800c7a4:	01312cff 	.word	0x01312cff
 800c7a8:	014ca43f 	.word	0x014ca43f
 800c7ac:	016e3600 	.word	0x016e3600
 800c7b0:	01a6ab1f 	.word	0x01a6ab1f
 800c7b4:	01e84800 	.word	0x01e84800

0800c7b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b083      	sub	sp, #12
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	689b      	ldr	r3, [r3, #8]
 800c7c4:	f043 0201 	orr.w	r2, r3, #1
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c7cc:	2300      	movs	r3, #0
}
 800c7ce:	4618      	mov	r0, r3
 800c7d0:	370c      	adds	r7, #12
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7d8:	4770      	bx	lr

0800c7da <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7da:	b480      	push	{r7}
 800c7dc:	b083      	sub	sp, #12
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	689b      	ldr	r3, [r3, #8]
 800c7e6:	f023 0201 	bic.w	r2, r3, #1
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c7ee:	2300      	movs	r3, #0
}
 800c7f0:	4618      	mov	r0, r3
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr

0800c7fc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b084      	sub	sp, #16
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
 800c804:	460b      	mov	r3, r1
 800c806:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c808:	2300      	movs	r3, #0
 800c80a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	68db      	ldr	r3, [r3, #12]
 800c810:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c818:	78fb      	ldrb	r3, [r7, #3]
 800c81a:	2b01      	cmp	r3, #1
 800c81c:	d115      	bne.n	800c84a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	68db      	ldr	r3, [r3, #12]
 800c822:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c82a:	2001      	movs	r0, #1
 800c82c:	f7f9 fc98 	bl	8006160 <HAL_Delay>
      ms++;
 800c830:	68fb      	ldr	r3, [r7, #12]
 800c832:	3301      	adds	r3, #1
 800c834:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f001 f972 	bl	800db20 <USB_GetMode>
 800c83c:	4603      	mov	r3, r0
 800c83e:	2b01      	cmp	r3, #1
 800c840:	d01e      	beq.n	800c880 <USB_SetCurrentMode+0x84>
 800c842:	68fb      	ldr	r3, [r7, #12]
 800c844:	2b31      	cmp	r3, #49	; 0x31
 800c846:	d9f0      	bls.n	800c82a <USB_SetCurrentMode+0x2e>
 800c848:	e01a      	b.n	800c880 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c84a:	78fb      	ldrb	r3, [r7, #3]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d115      	bne.n	800c87c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	68db      	ldr	r3, [r3, #12]
 800c854:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c85c:	2001      	movs	r0, #1
 800c85e:	f7f9 fc7f 	bl	8006160 <HAL_Delay>
      ms++;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	3301      	adds	r3, #1
 800c866:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c868:	6878      	ldr	r0, [r7, #4]
 800c86a:	f001 f959 	bl	800db20 <USB_GetMode>
 800c86e:	4603      	mov	r3, r0
 800c870:	2b00      	cmp	r3, #0
 800c872:	d005      	beq.n	800c880 <USB_SetCurrentMode+0x84>
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	2b31      	cmp	r3, #49	; 0x31
 800c878:	d9f0      	bls.n	800c85c <USB_SetCurrentMode+0x60>
 800c87a:	e001      	b.n	800c880 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c87c:	2301      	movs	r3, #1
 800c87e:	e005      	b.n	800c88c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	2b32      	cmp	r3, #50	; 0x32
 800c884:	d101      	bne.n	800c88a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c886:	2301      	movs	r3, #1
 800c888:	e000      	b.n	800c88c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c88a:	2300      	movs	r3, #0
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3710      	adds	r7, #16
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c894:	b084      	sub	sp, #16
 800c896:	b580      	push	{r7, lr}
 800c898:	b086      	sub	sp, #24
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
 800c89e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c8a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c8ae:	2300      	movs	r3, #0
 800c8b0:	613b      	str	r3, [r7, #16]
 800c8b2:	e009      	b.n	800c8c8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	3340      	adds	r3, #64	; 0x40
 800c8ba:	009b      	lsls	r3, r3, #2
 800c8bc:	4413      	add	r3, r2
 800c8be:	2200      	movs	r2, #0
 800c8c0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c8c2:	693b      	ldr	r3, [r7, #16]
 800c8c4:	3301      	adds	r3, #1
 800c8c6:	613b      	str	r3, [r7, #16]
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	2b0e      	cmp	r3, #14
 800c8cc:	d9f2      	bls.n	800c8b4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c8ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d11c      	bne.n	800c90e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8da:	685b      	ldr	r3, [r3, #4]
 800c8dc:	68fa      	ldr	r2, [r7, #12]
 800c8de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8e2:	f043 0302 	orr.w	r3, r3, #2
 800c8e6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8f8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c904:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	639a      	str	r2, [r3, #56]	; 0x38
 800c90c:	e00b      	b.n	800c926 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c912:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c91e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c92c:	461a      	mov	r2, r3
 800c92e:	2300      	movs	r3, #0
 800c930:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c938:	4619      	mov	r1, r3
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c940:	461a      	mov	r2, r3
 800c942:	680b      	ldr	r3, [r1, #0]
 800c944:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d10c      	bne.n	800c966 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c94c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d104      	bne.n	800c95c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c952:	2100      	movs	r1, #0
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f000 f945 	bl	800cbe4 <USB_SetDevSpeed>
 800c95a:	e008      	b.n	800c96e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c95c:	2101      	movs	r1, #1
 800c95e:	6878      	ldr	r0, [r7, #4]
 800c960:	f000 f940 	bl	800cbe4 <USB_SetDevSpeed>
 800c964:	e003      	b.n	800c96e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c966:	2103      	movs	r1, #3
 800c968:	6878      	ldr	r0, [r7, #4]
 800c96a:	f000 f93b 	bl	800cbe4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c96e:	2110      	movs	r1, #16
 800c970:	6878      	ldr	r0, [r7, #4]
 800c972:	f000 f8f3 	bl	800cb5c <USB_FlushTxFifo>
 800c976:	4603      	mov	r3, r0
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d001      	beq.n	800c980 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800c97c:	2301      	movs	r3, #1
 800c97e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f000 f90f 	bl	800cba4 <USB_FlushRxFifo>
 800c986:	4603      	mov	r3, r0
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d001      	beq.n	800c990 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800c98c:	2301      	movs	r3, #1
 800c98e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c996:	461a      	mov	r2, r3
 800c998:	2300      	movs	r3, #0
 800c99a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	2300      	movs	r3, #0
 800c9a6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c9ae:	461a      	mov	r2, r3
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	613b      	str	r3, [r7, #16]
 800c9b8:	e043      	b.n	800ca42 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	015a      	lsls	r2, r3, #5
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	4413      	add	r3, r2
 800c9c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c9cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c9d0:	d118      	bne.n	800ca04 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800c9d2:	693b      	ldr	r3, [r7, #16]
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d10a      	bne.n	800c9ee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c9d8:	693b      	ldr	r3, [r7, #16]
 800c9da:	015a      	lsls	r2, r3, #5
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	4413      	add	r3, r2
 800c9e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9e4:	461a      	mov	r2, r3
 800c9e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c9ea:	6013      	str	r3, [r2, #0]
 800c9ec:	e013      	b.n	800ca16 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	015a      	lsls	r2, r3, #5
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	4413      	add	r3, r2
 800c9f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9fa:	461a      	mov	r2, r3
 800c9fc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ca00:	6013      	str	r3, [r2, #0]
 800ca02:	e008      	b.n	800ca16 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ca04:	693b      	ldr	r3, [r7, #16]
 800ca06:	015a      	lsls	r2, r3, #5
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	4413      	add	r3, r2
 800ca0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca10:	461a      	mov	r2, r3
 800ca12:	2300      	movs	r3, #0
 800ca14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ca16:	693b      	ldr	r3, [r7, #16]
 800ca18:	015a      	lsls	r2, r3, #5
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	4413      	add	r3, r2
 800ca1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca22:	461a      	mov	r2, r3
 800ca24:	2300      	movs	r3, #0
 800ca26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	015a      	lsls	r2, r3, #5
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	4413      	add	r3, r2
 800ca30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca34:	461a      	mov	r2, r3
 800ca36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ca3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca3c:	693b      	ldr	r3, [r7, #16]
 800ca3e:	3301      	adds	r3, #1
 800ca40:	613b      	str	r3, [r7, #16]
 800ca42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca44:	693a      	ldr	r2, [r7, #16]
 800ca46:	429a      	cmp	r2, r3
 800ca48:	d3b7      	bcc.n	800c9ba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	613b      	str	r3, [r7, #16]
 800ca4e:	e043      	b.n	800cad8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	015a      	lsls	r2, r3, #5
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	4413      	add	r3, r2
 800ca58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca66:	d118      	bne.n	800ca9a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	2b00      	cmp	r3, #0
 800ca6c:	d10a      	bne.n	800ca84 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ca6e:	693b      	ldr	r3, [r7, #16]
 800ca70:	015a      	lsls	r2, r3, #5
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	4413      	add	r3, r2
 800ca76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca7a:	461a      	mov	r2, r3
 800ca7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ca80:	6013      	str	r3, [r2, #0]
 800ca82:	e013      	b.n	800caac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ca84:	693b      	ldr	r3, [r7, #16]
 800ca86:	015a      	lsls	r2, r3, #5
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	4413      	add	r3, r2
 800ca8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca90:	461a      	mov	r2, r3
 800ca92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ca96:	6013      	str	r3, [r2, #0]
 800ca98:	e008      	b.n	800caac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ca9a:	693b      	ldr	r3, [r7, #16]
 800ca9c:	015a      	lsls	r2, r3, #5
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	4413      	add	r3, r2
 800caa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caa6:	461a      	mov	r2, r3
 800caa8:	2300      	movs	r3, #0
 800caaa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800caac:	693b      	ldr	r3, [r7, #16]
 800caae:	015a      	lsls	r2, r3, #5
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	4413      	add	r3, r2
 800cab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cab8:	461a      	mov	r2, r3
 800caba:	2300      	movs	r3, #0
 800cabc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800cabe:	693b      	ldr	r3, [r7, #16]
 800cac0:	015a      	lsls	r2, r3, #5
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	4413      	add	r3, r2
 800cac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caca:	461a      	mov	r2, r3
 800cacc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800cad0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800cad2:	693b      	ldr	r3, [r7, #16]
 800cad4:	3301      	adds	r3, #1
 800cad6:	613b      	str	r3, [r7, #16]
 800cad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cada:	693a      	ldr	r2, [r7, #16]
 800cadc:	429a      	cmp	r2, r3
 800cade:	d3b7      	bcc.n	800ca50 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cae6:	691b      	ldr	r3, [r3, #16]
 800cae8:	68fa      	ldr	r2, [r7, #12]
 800caea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800caee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800caf2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	2200      	movs	r2, #0
 800caf8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800cb00:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cb02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d105      	bne.n	800cb14 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	699b      	ldr	r3, [r3, #24]
 800cb0c:	f043 0210 	orr.w	r2, r3, #16
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	699a      	ldr	r2, [r3, #24]
 800cb18:	4b0f      	ldr	r3, [pc, #60]	; (800cb58 <USB_DevInit+0x2c4>)
 800cb1a:	4313      	orrs	r3, r2
 800cb1c:	687a      	ldr	r2, [r7, #4]
 800cb1e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cb20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d005      	beq.n	800cb32 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	699b      	ldr	r3, [r3, #24]
 800cb2a:	f043 0208 	orr.w	r2, r3, #8
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cb32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cb34:	2b01      	cmp	r3, #1
 800cb36:	d107      	bne.n	800cb48 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	699b      	ldr	r3, [r3, #24]
 800cb3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb40:	f043 0304 	orr.w	r3, r3, #4
 800cb44:	687a      	ldr	r2, [r7, #4]
 800cb46:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cb48:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	3718      	adds	r7, #24
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800cb54:	b004      	add	sp, #16
 800cb56:	4770      	bx	lr
 800cb58:	803c3800 	.word	0x803c3800

0800cb5c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b085      	sub	sp, #20
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cb66:	2300      	movs	r3, #0
 800cb68:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cb6a:	683b      	ldr	r3, [r7, #0]
 800cb6c:	019b      	lsls	r3, r3, #6
 800cb6e:	f043 0220 	orr.w	r2, r3, #32
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	3301      	adds	r3, #1
 800cb7a:	60fb      	str	r3, [r7, #12]
 800cb7c:	4a08      	ldr	r2, [pc, #32]	; (800cba0 <USB_FlushTxFifo+0x44>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d901      	bls.n	800cb86 <USB_FlushTxFifo+0x2a>
    {
      return HAL_TIMEOUT;
 800cb82:	2303      	movs	r3, #3
 800cb84:	e006      	b.n	800cb94 <USB_FlushTxFifo+0x38>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	691b      	ldr	r3, [r3, #16]
 800cb8a:	f003 0320 	and.w	r3, r3, #32
 800cb8e:	2b20      	cmp	r3, #32
 800cb90:	d0f1      	beq.n	800cb76 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800cb92:	2300      	movs	r3, #0
}
 800cb94:	4618      	mov	r0, r3
 800cb96:	3714      	adds	r7, #20
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb9e:	4770      	bx	lr
 800cba0:	00030d40 	.word	0x00030d40

0800cba4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b085      	sub	sp, #20
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cbac:	2300      	movs	r3, #0
 800cbae:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	2210      	movs	r2, #16
 800cbb4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	3301      	adds	r3, #1
 800cbba:	60fb      	str	r3, [r7, #12]
 800cbbc:	4a08      	ldr	r2, [pc, #32]	; (800cbe0 <USB_FlushRxFifo+0x3c>)
 800cbbe:	4293      	cmp	r3, r2
 800cbc0:	d901      	bls.n	800cbc6 <USB_FlushRxFifo+0x22>
    {
      return HAL_TIMEOUT;
 800cbc2:	2303      	movs	r3, #3
 800cbc4:	e006      	b.n	800cbd4 <USB_FlushRxFifo+0x30>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	691b      	ldr	r3, [r3, #16]
 800cbca:	f003 0310 	and.w	r3, r3, #16
 800cbce:	2b10      	cmp	r3, #16
 800cbd0:	d0f1      	beq.n	800cbb6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800cbd2:	2300      	movs	r3, #0
}
 800cbd4:	4618      	mov	r0, r3
 800cbd6:	3714      	adds	r7, #20
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbde:	4770      	bx	lr
 800cbe0:	00030d40 	.word	0x00030d40

0800cbe4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cbe4:	b480      	push	{r7}
 800cbe6:	b085      	sub	sp, #20
 800cbe8:	af00      	add	r7, sp, #0
 800cbea:	6078      	str	r0, [r7, #4]
 800cbec:	460b      	mov	r3, r1
 800cbee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbfa:	681a      	ldr	r2, [r3, #0]
 800cbfc:	78fb      	ldrb	r3, [r7, #3]
 800cbfe:	68f9      	ldr	r1, [r7, #12]
 800cc00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc04:	4313      	orrs	r3, r2
 800cc06:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cc08:	2300      	movs	r3, #0
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3714      	adds	r7, #20
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc14:	4770      	bx	lr

0800cc16 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800cc16:	b480      	push	{r7}
 800cc18:	b087      	sub	sp, #28
 800cc1a:	af00      	add	r7, sp, #0
 800cc1c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800cc22:	693b      	ldr	r3, [r7, #16]
 800cc24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc28:	689b      	ldr	r3, [r3, #8]
 800cc2a:	f003 0306 	and.w	r3, r3, #6
 800cc2e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d102      	bne.n	800cc3c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800cc36:	2300      	movs	r3, #0
 800cc38:	75fb      	strb	r3, [r7, #23]
 800cc3a:	e00a      	b.n	800cc52 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	2b02      	cmp	r3, #2
 800cc40:	d002      	beq.n	800cc48 <USB_GetDevSpeed+0x32>
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	2b06      	cmp	r3, #6
 800cc46:	d102      	bne.n	800cc4e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800cc48:	2302      	movs	r3, #2
 800cc4a:	75fb      	strb	r3, [r7, #23]
 800cc4c:	e001      	b.n	800cc52 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800cc4e:	230f      	movs	r3, #15
 800cc50:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800cc52:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc54:	4618      	mov	r0, r3
 800cc56:	371c      	adds	r7, #28
 800cc58:	46bd      	mov	sp, r7
 800cc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5e:	4770      	bx	lr

0800cc60 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cc60:	b480      	push	{r7}
 800cc62:	b085      	sub	sp, #20
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
 800cc68:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	781b      	ldrb	r3, [r3, #0]
 800cc72:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cc74:	683b      	ldr	r3, [r7, #0]
 800cc76:	785b      	ldrb	r3, [r3, #1]
 800cc78:	2b01      	cmp	r3, #1
 800cc7a:	d13a      	bne.n	800ccf2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc82:	69da      	ldr	r2, [r3, #28]
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	781b      	ldrb	r3, [r3, #0]
 800cc88:	f003 030f 	and.w	r3, r3, #15
 800cc8c:	2101      	movs	r1, #1
 800cc8e:	fa01 f303 	lsl.w	r3, r1, r3
 800cc92:	b29b      	uxth	r3, r3
 800cc94:	68f9      	ldr	r1, [r7, #12]
 800cc96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cc9a:	4313      	orrs	r3, r2
 800cc9c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800cc9e:	68bb      	ldr	r3, [r7, #8]
 800cca0:	015a      	lsls	r2, r3, #5
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	4413      	add	r3, r2
 800cca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d155      	bne.n	800cd60 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	015a      	lsls	r2, r3, #5
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	4413      	add	r3, r2
 800ccbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccc0:	681a      	ldr	r2, [r3, #0]
 800ccc2:	683b      	ldr	r3, [r7, #0]
 800ccc4:	689b      	ldr	r3, [r3, #8]
 800ccc6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	78db      	ldrb	r3, [r3, #3]
 800ccce:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ccd0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	059b      	lsls	r3, r3, #22
 800ccd6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ccd8:	4313      	orrs	r3, r2
 800ccda:	68ba      	ldr	r2, [r7, #8]
 800ccdc:	0151      	lsls	r1, r2, #5
 800ccde:	68fa      	ldr	r2, [r7, #12]
 800cce0:	440a      	add	r2, r1
 800cce2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ccea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ccee:	6013      	str	r3, [r2, #0]
 800ccf0:	e036      	b.n	800cd60 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccf8:	69da      	ldr	r2, [r3, #28]
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	781b      	ldrb	r3, [r3, #0]
 800ccfe:	f003 030f 	and.w	r3, r3, #15
 800cd02:	2101      	movs	r1, #1
 800cd04:	fa01 f303 	lsl.w	r3, r1, r3
 800cd08:	041b      	lsls	r3, r3, #16
 800cd0a:	68f9      	ldr	r1, [r7, #12]
 800cd0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cd10:	4313      	orrs	r3, r2
 800cd12:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800cd14:	68bb      	ldr	r3, [r7, #8]
 800cd16:	015a      	lsls	r2, r3, #5
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	4413      	add	r3, r2
 800cd1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d11a      	bne.n	800cd60 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	015a      	lsls	r2, r3, #5
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	4413      	add	r3, r2
 800cd32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cd36:	681a      	ldr	r2, [r3, #0]
 800cd38:	683b      	ldr	r3, [r7, #0]
 800cd3a:	689b      	ldr	r3, [r3, #8]
 800cd3c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800cd40:	683b      	ldr	r3, [r7, #0]
 800cd42:	78db      	ldrb	r3, [r3, #3]
 800cd44:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800cd46:	430b      	orrs	r3, r1
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	68ba      	ldr	r2, [r7, #8]
 800cd4c:	0151      	lsls	r1, r2, #5
 800cd4e:	68fa      	ldr	r2, [r7, #12]
 800cd50:	440a      	add	r2, r1
 800cd52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cd56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cd5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800cd5e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800cd60:	2300      	movs	r3, #0
}
 800cd62:	4618      	mov	r0, r3
 800cd64:	3714      	adds	r7, #20
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr
	...

0800cd70 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cd70:	b480      	push	{r7}
 800cd72:	b085      	sub	sp, #20
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
 800cd78:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	781b      	ldrb	r3, [r3, #0]
 800cd82:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800cd84:	683b      	ldr	r3, [r7, #0]
 800cd86:	785b      	ldrb	r3, [r3, #1]
 800cd88:	2b01      	cmp	r3, #1
 800cd8a:	d161      	bne.n	800ce50 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800cd8c:	68bb      	ldr	r3, [r7, #8]
 800cd8e:	015a      	lsls	r2, r3, #5
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	4413      	add	r3, r2
 800cd94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cd9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cda2:	d11f      	bne.n	800cde4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	015a      	lsls	r2, r3, #5
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	4413      	add	r3, r2
 800cdac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdb0:	681b      	ldr	r3, [r3, #0]
 800cdb2:	68ba      	ldr	r2, [r7, #8]
 800cdb4:	0151      	lsls	r1, r2, #5
 800cdb6:	68fa      	ldr	r2, [r7, #12]
 800cdb8:	440a      	add	r2, r1
 800cdba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdbe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800cdc2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	015a      	lsls	r2, r3, #5
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	4413      	add	r3, r2
 800cdcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	68ba      	ldr	r2, [r7, #8]
 800cdd4:	0151      	lsls	r1, r2, #5
 800cdd6:	68fa      	ldr	r2, [r7, #12]
 800cdd8:	440a      	add	r2, r1
 800cdda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdde:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cde2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	781b      	ldrb	r3, [r3, #0]
 800cdf0:	f003 030f 	and.w	r3, r3, #15
 800cdf4:	2101      	movs	r1, #1
 800cdf6:	fa01 f303 	lsl.w	r3, r1, r3
 800cdfa:	b29b      	uxth	r3, r3
 800cdfc:	43db      	mvns	r3, r3
 800cdfe:	68f9      	ldr	r1, [r7, #12]
 800ce00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce04:	4013      	ands	r3, r2
 800ce06:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ce0e:	69da      	ldr	r2, [r3, #28]
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	781b      	ldrb	r3, [r3, #0]
 800ce14:	f003 030f 	and.w	r3, r3, #15
 800ce18:	2101      	movs	r1, #1
 800ce1a:	fa01 f303 	lsl.w	r3, r1, r3
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	43db      	mvns	r3, r3
 800ce22:	68f9      	ldr	r1, [r7, #12]
 800ce24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce28:	4013      	ands	r3, r2
 800ce2a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	015a      	lsls	r2, r3, #5
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	4413      	add	r3, r2
 800ce34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce38:	681a      	ldr	r2, [r3, #0]
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	0159      	lsls	r1, r3, #5
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	440b      	add	r3, r1
 800ce42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ce46:	4619      	mov	r1, r3
 800ce48:	4b35      	ldr	r3, [pc, #212]	; (800cf20 <USB_DeactivateEndpoint+0x1b0>)
 800ce4a:	4013      	ands	r3, r2
 800ce4c:	600b      	str	r3, [r1, #0]
 800ce4e:	e060      	b.n	800cf12 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ce50:	68bb      	ldr	r3, [r7, #8]
 800ce52:	015a      	lsls	r2, r3, #5
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	4413      	add	r3, r2
 800ce58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce5c:	681b      	ldr	r3, [r3, #0]
 800ce5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ce62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ce66:	d11f      	bne.n	800cea8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ce68:	68bb      	ldr	r3, [r7, #8]
 800ce6a:	015a      	lsls	r2, r3, #5
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	4413      	add	r3, r2
 800ce70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce74:	681b      	ldr	r3, [r3, #0]
 800ce76:	68ba      	ldr	r2, [r7, #8]
 800ce78:	0151      	lsls	r1, r2, #5
 800ce7a:	68fa      	ldr	r2, [r7, #12]
 800ce7c:	440a      	add	r2, r1
 800ce7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ce86:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	015a      	lsls	r2, r3, #5
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	4413      	add	r3, r2
 800ce90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce94:	681b      	ldr	r3, [r3, #0]
 800ce96:	68ba      	ldr	r2, [r7, #8]
 800ce98:	0151      	lsls	r1, r2, #5
 800ce9a:	68fa      	ldr	r2, [r7, #12]
 800ce9c:	440a      	add	r2, r1
 800ce9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cea2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cea6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ceae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	781b      	ldrb	r3, [r3, #0]
 800ceb4:	f003 030f 	and.w	r3, r3, #15
 800ceb8:	2101      	movs	r1, #1
 800ceba:	fa01 f303 	lsl.w	r3, r1, r3
 800cebe:	041b      	lsls	r3, r3, #16
 800cec0:	43db      	mvns	r3, r3
 800cec2:	68f9      	ldr	r1, [r7, #12]
 800cec4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cec8:	4013      	ands	r3, r2
 800ceca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800cecc:	68fb      	ldr	r3, [r7, #12]
 800cece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ced2:	69da      	ldr	r2, [r3, #28]
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	f003 030f 	and.w	r3, r3, #15
 800cedc:	2101      	movs	r1, #1
 800cede:	fa01 f303 	lsl.w	r3, r1, r3
 800cee2:	041b      	lsls	r3, r3, #16
 800cee4:	43db      	mvns	r3, r3
 800cee6:	68f9      	ldr	r1, [r7, #12]
 800cee8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ceec:	4013      	ands	r3, r2
 800ceee:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	015a      	lsls	r2, r3, #5
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	4413      	add	r3, r2
 800cef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cefc:	681a      	ldr	r2, [r3, #0]
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	0159      	lsls	r1, r3, #5
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	440b      	add	r3, r1
 800cf06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cf0a:	4619      	mov	r1, r3
 800cf0c:	4b05      	ldr	r3, [pc, #20]	; (800cf24 <USB_DeactivateEndpoint+0x1b4>)
 800cf0e:	4013      	ands	r3, r2
 800cf10:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800cf12:	2300      	movs	r3, #0
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3714      	adds	r7, #20
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1e:	4770      	bx	lr
 800cf20:	ec337800 	.word	0xec337800
 800cf24:	eff37800 	.word	0xeff37800

0800cf28 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cf28:	b580      	push	{r7, lr}
 800cf2a:	b08a      	sub	sp, #40	; 0x28
 800cf2c:	af02      	add	r7, sp, #8
 800cf2e:	60f8      	str	r0, [r7, #12]
 800cf30:	60b9      	str	r1, [r7, #8]
 800cf32:	4613      	mov	r3, r2
 800cf34:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800cf3a:	68bb      	ldr	r3, [r7, #8]
 800cf3c:	781b      	ldrb	r3, [r3, #0]
 800cf3e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cf40:	68bb      	ldr	r3, [r7, #8]
 800cf42:	785b      	ldrb	r3, [r3, #1]
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	f040 815c 	bne.w	800d202 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cf4a:	68bb      	ldr	r3, [r7, #8]
 800cf4c:	695b      	ldr	r3, [r3, #20]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d132      	bne.n	800cfb8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cf52:	69bb      	ldr	r3, [r7, #24]
 800cf54:	015a      	lsls	r2, r3, #5
 800cf56:	69fb      	ldr	r3, [r7, #28]
 800cf58:	4413      	add	r3, r2
 800cf5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf5e:	691b      	ldr	r3, [r3, #16]
 800cf60:	69ba      	ldr	r2, [r7, #24]
 800cf62:	0151      	lsls	r1, r2, #5
 800cf64:	69fa      	ldr	r2, [r7, #28]
 800cf66:	440a      	add	r2, r1
 800cf68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cf70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cf74:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cf76:	69bb      	ldr	r3, [r7, #24]
 800cf78:	015a      	lsls	r2, r3, #5
 800cf7a:	69fb      	ldr	r3, [r7, #28]
 800cf7c:	4413      	add	r3, r2
 800cf7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cf82:	691b      	ldr	r3, [r3, #16]
 800cf84:	69ba      	ldr	r2, [r7, #24]
 800cf86:	0151      	lsls	r1, r2, #5
 800cf88:	69fa      	ldr	r2, [r7, #28]
 800cf8a:	440a      	add	r2, r1
 800cf8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cf90:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cf94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cf96:	69bb      	ldr	r3, [r7, #24]
 800cf98:	015a      	lsls	r2, r3, #5
 800cf9a:	69fb      	ldr	r3, [r7, #28]
 800cf9c:	4413      	add	r3, r2
 800cf9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfa2:	691b      	ldr	r3, [r3, #16]
 800cfa4:	69ba      	ldr	r2, [r7, #24]
 800cfa6:	0151      	lsls	r1, r2, #5
 800cfa8:	69fa      	ldr	r2, [r7, #28]
 800cfaa:	440a      	add	r2, r1
 800cfac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfb0:	0cdb      	lsrs	r3, r3, #19
 800cfb2:	04db      	lsls	r3, r3, #19
 800cfb4:	6113      	str	r3, [r2, #16]
 800cfb6:	e074      	b.n	800d0a2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800cfb8:	69bb      	ldr	r3, [r7, #24]
 800cfba:	015a      	lsls	r2, r3, #5
 800cfbc:	69fb      	ldr	r3, [r7, #28]
 800cfbe:	4413      	add	r3, r2
 800cfc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfc4:	691b      	ldr	r3, [r3, #16]
 800cfc6:	69ba      	ldr	r2, [r7, #24]
 800cfc8:	0151      	lsls	r1, r2, #5
 800cfca:	69fa      	ldr	r2, [r7, #28]
 800cfcc:	440a      	add	r2, r1
 800cfce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cfd2:	0cdb      	lsrs	r3, r3, #19
 800cfd4:	04db      	lsls	r3, r3, #19
 800cfd6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cfd8:	69bb      	ldr	r3, [r7, #24]
 800cfda:	015a      	lsls	r2, r3, #5
 800cfdc:	69fb      	ldr	r3, [r7, #28]
 800cfde:	4413      	add	r3, r2
 800cfe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfe4:	691b      	ldr	r3, [r3, #16]
 800cfe6:	69ba      	ldr	r2, [r7, #24]
 800cfe8:	0151      	lsls	r1, r2, #5
 800cfea:	69fa      	ldr	r2, [r7, #28]
 800cfec:	440a      	add	r2, r1
 800cfee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cff2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800cff6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800cffa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800cffc:	69bb      	ldr	r3, [r7, #24]
 800cffe:	015a      	lsls	r2, r3, #5
 800d000:	69fb      	ldr	r3, [r7, #28]
 800d002:	4413      	add	r3, r2
 800d004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d008:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	6959      	ldr	r1, [r3, #20]
 800d00e:	68bb      	ldr	r3, [r7, #8]
 800d010:	689b      	ldr	r3, [r3, #8]
 800d012:	440b      	add	r3, r1
 800d014:	1e59      	subs	r1, r3, #1
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	689b      	ldr	r3, [r3, #8]
 800d01a:	fbb1 f3f3 	udiv	r3, r1, r3
 800d01e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800d020:	4b9d      	ldr	r3, [pc, #628]	; (800d298 <USB_EPStartXfer+0x370>)
 800d022:	400b      	ands	r3, r1
 800d024:	69b9      	ldr	r1, [r7, #24]
 800d026:	0148      	lsls	r0, r1, #5
 800d028:	69f9      	ldr	r1, [r7, #28]
 800d02a:	4401      	add	r1, r0
 800d02c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d030:	4313      	orrs	r3, r2
 800d032:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d034:	69bb      	ldr	r3, [r7, #24]
 800d036:	015a      	lsls	r2, r3, #5
 800d038:	69fb      	ldr	r3, [r7, #28]
 800d03a:	4413      	add	r3, r2
 800d03c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d040:	691a      	ldr	r2, [r3, #16]
 800d042:	68bb      	ldr	r3, [r7, #8]
 800d044:	695b      	ldr	r3, [r3, #20]
 800d046:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d04a:	69b9      	ldr	r1, [r7, #24]
 800d04c:	0148      	lsls	r0, r1, #5
 800d04e:	69f9      	ldr	r1, [r7, #28]
 800d050:	4401      	add	r1, r0
 800d052:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d056:	4313      	orrs	r3, r2
 800d058:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	78db      	ldrb	r3, [r3, #3]
 800d05e:	2b01      	cmp	r3, #1
 800d060:	d11f      	bne.n	800d0a2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800d062:	69bb      	ldr	r3, [r7, #24]
 800d064:	015a      	lsls	r2, r3, #5
 800d066:	69fb      	ldr	r3, [r7, #28]
 800d068:	4413      	add	r3, r2
 800d06a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d06e:	691b      	ldr	r3, [r3, #16]
 800d070:	69ba      	ldr	r2, [r7, #24]
 800d072:	0151      	lsls	r1, r2, #5
 800d074:	69fa      	ldr	r2, [r7, #28]
 800d076:	440a      	add	r2, r1
 800d078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d07c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800d080:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800d082:	69bb      	ldr	r3, [r7, #24]
 800d084:	015a      	lsls	r2, r3, #5
 800d086:	69fb      	ldr	r3, [r7, #28]
 800d088:	4413      	add	r3, r2
 800d08a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d08e:	691b      	ldr	r3, [r3, #16]
 800d090:	69ba      	ldr	r2, [r7, #24]
 800d092:	0151      	lsls	r1, r2, #5
 800d094:	69fa      	ldr	r2, [r7, #28]
 800d096:	440a      	add	r2, r1
 800d098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d09c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d0a0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800d0a2:	79fb      	ldrb	r3, [r7, #7]
 800d0a4:	2b01      	cmp	r3, #1
 800d0a6:	d14b      	bne.n	800d140 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	691b      	ldr	r3, [r3, #16]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d009      	beq.n	800d0c4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d0b0:	69bb      	ldr	r3, [r7, #24]
 800d0b2:	015a      	lsls	r2, r3, #5
 800d0b4:	69fb      	ldr	r3, [r7, #28]
 800d0b6:	4413      	add	r3, r2
 800d0b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0bc:	461a      	mov	r2, r3
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	691b      	ldr	r3, [r3, #16]
 800d0c2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800d0c4:	68bb      	ldr	r3, [r7, #8]
 800d0c6:	78db      	ldrb	r3, [r3, #3]
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	d128      	bne.n	800d11e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d0cc:	69fb      	ldr	r3, [r7, #28]
 800d0ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d0d2:	689b      	ldr	r3, [r3, #8]
 800d0d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d110      	bne.n	800d0fe <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d0dc:	69bb      	ldr	r3, [r7, #24]
 800d0de:	015a      	lsls	r2, r3, #5
 800d0e0:	69fb      	ldr	r3, [r7, #28]
 800d0e2:	4413      	add	r3, r2
 800d0e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	69ba      	ldr	r2, [r7, #24]
 800d0ec:	0151      	lsls	r1, r2, #5
 800d0ee:	69fa      	ldr	r2, [r7, #28]
 800d0f0:	440a      	add	r2, r1
 800d0f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d0fa:	6013      	str	r3, [r2, #0]
 800d0fc:	e00f      	b.n	800d11e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d0fe:	69bb      	ldr	r3, [r7, #24]
 800d100:	015a      	lsls	r2, r3, #5
 800d102:	69fb      	ldr	r3, [r7, #28]
 800d104:	4413      	add	r3, r2
 800d106:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	69ba      	ldr	r2, [r7, #24]
 800d10e:	0151      	lsls	r1, r2, #5
 800d110:	69fa      	ldr	r2, [r7, #28]
 800d112:	440a      	add	r2, r1
 800d114:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d11c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d11e:	69bb      	ldr	r3, [r7, #24]
 800d120:	015a      	lsls	r2, r3, #5
 800d122:	69fb      	ldr	r3, [r7, #28]
 800d124:	4413      	add	r3, r2
 800d126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	69ba      	ldr	r2, [r7, #24]
 800d12e:	0151      	lsls	r1, r2, #5
 800d130:	69fa      	ldr	r2, [r7, #28]
 800d132:	440a      	add	r2, r1
 800d134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d138:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d13c:	6013      	str	r3, [r2, #0]
 800d13e:	e12f      	b.n	800d3a0 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d140:	69bb      	ldr	r3, [r7, #24]
 800d142:	015a      	lsls	r2, r3, #5
 800d144:	69fb      	ldr	r3, [r7, #28]
 800d146:	4413      	add	r3, r2
 800d148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	69ba      	ldr	r2, [r7, #24]
 800d150:	0151      	lsls	r1, r2, #5
 800d152:	69fa      	ldr	r2, [r7, #28]
 800d154:	440a      	add	r2, r1
 800d156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d15a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d15e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d160:	68bb      	ldr	r3, [r7, #8]
 800d162:	78db      	ldrb	r3, [r3, #3]
 800d164:	2b01      	cmp	r3, #1
 800d166:	d015      	beq.n	800d194 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800d168:	68bb      	ldr	r3, [r7, #8]
 800d16a:	695b      	ldr	r3, [r3, #20]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	f000 8117 	beq.w	800d3a0 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d172:	69fb      	ldr	r3, [r7, #28]
 800d174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	781b      	ldrb	r3, [r3, #0]
 800d17e:	f003 030f 	and.w	r3, r3, #15
 800d182:	2101      	movs	r1, #1
 800d184:	fa01 f303 	lsl.w	r3, r1, r3
 800d188:	69f9      	ldr	r1, [r7, #28]
 800d18a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d18e:	4313      	orrs	r3, r2
 800d190:	634b      	str	r3, [r1, #52]	; 0x34
 800d192:	e105      	b.n	800d3a0 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d194:	69fb      	ldr	r3, [r7, #28]
 800d196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d19a:	689b      	ldr	r3, [r3, #8]
 800d19c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d110      	bne.n	800d1c6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800d1a4:	69bb      	ldr	r3, [r7, #24]
 800d1a6:	015a      	lsls	r2, r3, #5
 800d1a8:	69fb      	ldr	r3, [r7, #28]
 800d1aa:	4413      	add	r3, r2
 800d1ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1b0:	681b      	ldr	r3, [r3, #0]
 800d1b2:	69ba      	ldr	r2, [r7, #24]
 800d1b4:	0151      	lsls	r1, r2, #5
 800d1b6:	69fa      	ldr	r2, [r7, #28]
 800d1b8:	440a      	add	r2, r1
 800d1ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d1c2:	6013      	str	r3, [r2, #0]
 800d1c4:	e00f      	b.n	800d1e6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800d1c6:	69bb      	ldr	r3, [r7, #24]
 800d1c8:	015a      	lsls	r2, r3, #5
 800d1ca:	69fb      	ldr	r3, [r7, #28]
 800d1cc:	4413      	add	r3, r2
 800d1ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	69ba      	ldr	r2, [r7, #24]
 800d1d6:	0151      	lsls	r1, r2, #5
 800d1d8:	69fa      	ldr	r2, [r7, #28]
 800d1da:	440a      	add	r2, r1
 800d1dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d1e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d1e4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800d1e6:	68bb      	ldr	r3, [r7, #8]
 800d1e8:	68d9      	ldr	r1, [r3, #12]
 800d1ea:	68bb      	ldr	r3, [r7, #8]
 800d1ec:	781a      	ldrb	r2, [r3, #0]
 800d1ee:	68bb      	ldr	r3, [r7, #8]
 800d1f0:	695b      	ldr	r3, [r3, #20]
 800d1f2:	b298      	uxth	r0, r3
 800d1f4:	79fb      	ldrb	r3, [r7, #7]
 800d1f6:	9300      	str	r3, [sp, #0]
 800d1f8:	4603      	mov	r3, r0
 800d1fa:	68f8      	ldr	r0, [r7, #12]
 800d1fc:	f000 fa2b 	bl	800d656 <USB_WritePacket>
 800d200:	e0ce      	b.n	800d3a0 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d202:	69bb      	ldr	r3, [r7, #24]
 800d204:	015a      	lsls	r2, r3, #5
 800d206:	69fb      	ldr	r3, [r7, #28]
 800d208:	4413      	add	r3, r2
 800d20a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d20e:	691b      	ldr	r3, [r3, #16]
 800d210:	69ba      	ldr	r2, [r7, #24]
 800d212:	0151      	lsls	r1, r2, #5
 800d214:	69fa      	ldr	r2, [r7, #28]
 800d216:	440a      	add	r2, r1
 800d218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d21c:	0cdb      	lsrs	r3, r3, #19
 800d21e:	04db      	lsls	r3, r3, #19
 800d220:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d222:	69bb      	ldr	r3, [r7, #24]
 800d224:	015a      	lsls	r2, r3, #5
 800d226:	69fb      	ldr	r3, [r7, #28]
 800d228:	4413      	add	r3, r2
 800d22a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d22e:	691b      	ldr	r3, [r3, #16]
 800d230:	69ba      	ldr	r2, [r7, #24]
 800d232:	0151      	lsls	r1, r2, #5
 800d234:	69fa      	ldr	r2, [r7, #28]
 800d236:	440a      	add	r2, r1
 800d238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d23c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d240:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d244:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800d246:	68bb      	ldr	r3, [r7, #8]
 800d248:	695b      	ldr	r3, [r3, #20]
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d126      	bne.n	800d29c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800d24e:	69bb      	ldr	r3, [r7, #24]
 800d250:	015a      	lsls	r2, r3, #5
 800d252:	69fb      	ldr	r3, [r7, #28]
 800d254:	4413      	add	r3, r2
 800d256:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d25a:	691a      	ldr	r2, [r3, #16]
 800d25c:	68bb      	ldr	r3, [r7, #8]
 800d25e:	689b      	ldr	r3, [r3, #8]
 800d260:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d264:	69b9      	ldr	r1, [r7, #24]
 800d266:	0148      	lsls	r0, r1, #5
 800d268:	69f9      	ldr	r1, [r7, #28]
 800d26a:	4401      	add	r1, r0
 800d26c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d270:	4313      	orrs	r3, r2
 800d272:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d274:	69bb      	ldr	r3, [r7, #24]
 800d276:	015a      	lsls	r2, r3, #5
 800d278:	69fb      	ldr	r3, [r7, #28]
 800d27a:	4413      	add	r3, r2
 800d27c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d280:	691b      	ldr	r3, [r3, #16]
 800d282:	69ba      	ldr	r2, [r7, #24]
 800d284:	0151      	lsls	r1, r2, #5
 800d286:	69fa      	ldr	r2, [r7, #28]
 800d288:	440a      	add	r2, r1
 800d28a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d28e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d292:	6113      	str	r3, [r2, #16]
 800d294:	e036      	b.n	800d304 <USB_EPStartXfer+0x3dc>
 800d296:	bf00      	nop
 800d298:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800d29c:	68bb      	ldr	r3, [r7, #8]
 800d29e:	695a      	ldr	r2, [r3, #20]
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	689b      	ldr	r3, [r3, #8]
 800d2a4:	4413      	add	r3, r2
 800d2a6:	1e5a      	subs	r2, r3, #1
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	689b      	ldr	r3, [r3, #8]
 800d2ac:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2b0:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800d2b2:	69bb      	ldr	r3, [r7, #24]
 800d2b4:	015a      	lsls	r2, r3, #5
 800d2b6:	69fb      	ldr	r3, [r7, #28]
 800d2b8:	4413      	add	r3, r2
 800d2ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2be:	691a      	ldr	r2, [r3, #16]
 800d2c0:	8afb      	ldrh	r3, [r7, #22]
 800d2c2:	04d9      	lsls	r1, r3, #19
 800d2c4:	4b39      	ldr	r3, [pc, #228]	; (800d3ac <USB_EPStartXfer+0x484>)
 800d2c6:	400b      	ands	r3, r1
 800d2c8:	69b9      	ldr	r1, [r7, #24]
 800d2ca:	0148      	lsls	r0, r1, #5
 800d2cc:	69f9      	ldr	r1, [r7, #28]
 800d2ce:	4401      	add	r1, r0
 800d2d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d2d4:	4313      	orrs	r3, r2
 800d2d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	015a      	lsls	r2, r3, #5
 800d2dc:	69fb      	ldr	r3, [r7, #28]
 800d2de:	4413      	add	r3, r2
 800d2e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2e4:	691a      	ldr	r2, [r3, #16]
 800d2e6:	68bb      	ldr	r3, [r7, #8]
 800d2e8:	689b      	ldr	r3, [r3, #8]
 800d2ea:	8af9      	ldrh	r1, [r7, #22]
 800d2ec:	fb01 f303 	mul.w	r3, r1, r3
 800d2f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d2f4:	69b9      	ldr	r1, [r7, #24]
 800d2f6:	0148      	lsls	r0, r1, #5
 800d2f8:	69f9      	ldr	r1, [r7, #28]
 800d2fa:	4401      	add	r1, r0
 800d2fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d300:	4313      	orrs	r3, r2
 800d302:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d304:	79fb      	ldrb	r3, [r7, #7]
 800d306:	2b01      	cmp	r3, #1
 800d308:	d10d      	bne.n	800d326 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d30a:	68bb      	ldr	r3, [r7, #8]
 800d30c:	68db      	ldr	r3, [r3, #12]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	d009      	beq.n	800d326 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	68d9      	ldr	r1, [r3, #12]
 800d316:	69bb      	ldr	r3, [r7, #24]
 800d318:	015a      	lsls	r2, r3, #5
 800d31a:	69fb      	ldr	r3, [r7, #28]
 800d31c:	4413      	add	r3, r2
 800d31e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d322:	460a      	mov	r2, r1
 800d324:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	78db      	ldrb	r3, [r3, #3]
 800d32a:	2b01      	cmp	r3, #1
 800d32c:	d128      	bne.n	800d380 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800d32e:	69fb      	ldr	r3, [r7, #28]
 800d330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d334:	689b      	ldr	r3, [r3, #8]
 800d336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d110      	bne.n	800d360 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800d33e:	69bb      	ldr	r3, [r7, #24]
 800d340:	015a      	lsls	r2, r3, #5
 800d342:	69fb      	ldr	r3, [r7, #28]
 800d344:	4413      	add	r3, r2
 800d346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	69ba      	ldr	r2, [r7, #24]
 800d34e:	0151      	lsls	r1, r2, #5
 800d350:	69fa      	ldr	r2, [r7, #28]
 800d352:	440a      	add	r2, r1
 800d354:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d358:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d35c:	6013      	str	r3, [r2, #0]
 800d35e:	e00f      	b.n	800d380 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800d360:	69bb      	ldr	r3, [r7, #24]
 800d362:	015a      	lsls	r2, r3, #5
 800d364:	69fb      	ldr	r3, [r7, #28]
 800d366:	4413      	add	r3, r2
 800d368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	69ba      	ldr	r2, [r7, #24]
 800d370:	0151      	lsls	r1, r2, #5
 800d372:	69fa      	ldr	r2, [r7, #28]
 800d374:	440a      	add	r2, r1
 800d376:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d37a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d37e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d380:	69bb      	ldr	r3, [r7, #24]
 800d382:	015a      	lsls	r2, r3, #5
 800d384:	69fb      	ldr	r3, [r7, #28]
 800d386:	4413      	add	r3, r2
 800d388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	69ba      	ldr	r2, [r7, #24]
 800d390:	0151      	lsls	r1, r2, #5
 800d392:	69fa      	ldr	r2, [r7, #28]
 800d394:	440a      	add	r2, r1
 800d396:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d39a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d39e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d3a0:	2300      	movs	r3, #0
}
 800d3a2:	4618      	mov	r0, r3
 800d3a4:	3720      	adds	r7, #32
 800d3a6:	46bd      	mov	sp, r7
 800d3a8:	bd80      	pop	{r7, pc}
 800d3aa:	bf00      	nop
 800d3ac:	1ff80000 	.word	0x1ff80000

0800d3b0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800d3b0:	b480      	push	{r7}
 800d3b2:	b087      	sub	sp, #28
 800d3b4:	af00      	add	r7, sp, #0
 800d3b6:	60f8      	str	r0, [r7, #12]
 800d3b8:	60b9      	str	r1, [r7, #8]
 800d3ba:	4613      	mov	r3, r2
 800d3bc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800d3c2:	68bb      	ldr	r3, [r7, #8]
 800d3c4:	781b      	ldrb	r3, [r3, #0]
 800d3c6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800d3c8:	68bb      	ldr	r3, [r7, #8]
 800d3ca:	785b      	ldrb	r3, [r3, #1]
 800d3cc:	2b01      	cmp	r3, #1
 800d3ce:	f040 80cd 	bne.w	800d56c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	695b      	ldr	r3, [r3, #20]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d132      	bne.n	800d440 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d3da:	693b      	ldr	r3, [r7, #16]
 800d3dc:	015a      	lsls	r2, r3, #5
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	4413      	add	r3, r2
 800d3e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d3e6:	691b      	ldr	r3, [r3, #16]
 800d3e8:	693a      	ldr	r2, [r7, #16]
 800d3ea:	0151      	lsls	r1, r2, #5
 800d3ec:	697a      	ldr	r2, [r7, #20]
 800d3ee:	440a      	add	r2, r1
 800d3f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d3f4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d3f8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d3fc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	015a      	lsls	r2, r3, #5
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	4413      	add	r3, r2
 800d406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d40a:	691b      	ldr	r3, [r3, #16]
 800d40c:	693a      	ldr	r2, [r7, #16]
 800d40e:	0151      	lsls	r1, r2, #5
 800d410:	697a      	ldr	r2, [r7, #20]
 800d412:	440a      	add	r2, r1
 800d414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d418:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d41c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	015a      	lsls	r2, r3, #5
 800d422:	697b      	ldr	r3, [r7, #20]
 800d424:	4413      	add	r3, r2
 800d426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d42a:	691b      	ldr	r3, [r3, #16]
 800d42c:	693a      	ldr	r2, [r7, #16]
 800d42e:	0151      	lsls	r1, r2, #5
 800d430:	697a      	ldr	r2, [r7, #20]
 800d432:	440a      	add	r2, r1
 800d434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d438:	0cdb      	lsrs	r3, r3, #19
 800d43a:	04db      	lsls	r3, r3, #19
 800d43c:	6113      	str	r3, [r2, #16]
 800d43e:	e04e      	b.n	800d4de <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	015a      	lsls	r2, r3, #5
 800d444:	697b      	ldr	r3, [r7, #20]
 800d446:	4413      	add	r3, r2
 800d448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d44c:	691b      	ldr	r3, [r3, #16]
 800d44e:	693a      	ldr	r2, [r7, #16]
 800d450:	0151      	lsls	r1, r2, #5
 800d452:	697a      	ldr	r2, [r7, #20]
 800d454:	440a      	add	r2, r1
 800d456:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d45a:	0cdb      	lsrs	r3, r3, #19
 800d45c:	04db      	lsls	r3, r3, #19
 800d45e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	015a      	lsls	r2, r3, #5
 800d464:	697b      	ldr	r3, [r7, #20]
 800d466:	4413      	add	r3, r2
 800d468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d46c:	691b      	ldr	r3, [r3, #16]
 800d46e:	693a      	ldr	r2, [r7, #16]
 800d470:	0151      	lsls	r1, r2, #5
 800d472:	697a      	ldr	r2, [r7, #20]
 800d474:	440a      	add	r2, r1
 800d476:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d47a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d47e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d482:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800d484:	68bb      	ldr	r3, [r7, #8]
 800d486:	695a      	ldr	r2, [r3, #20]
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	689b      	ldr	r3, [r3, #8]
 800d48c:	429a      	cmp	r2, r3
 800d48e:	d903      	bls.n	800d498 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800d490:	68bb      	ldr	r3, [r7, #8]
 800d492:	689a      	ldr	r2, [r3, #8]
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	015a      	lsls	r2, r3, #5
 800d49c:	697b      	ldr	r3, [r7, #20]
 800d49e:	4413      	add	r3, r2
 800d4a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4a4:	691b      	ldr	r3, [r3, #16]
 800d4a6:	693a      	ldr	r2, [r7, #16]
 800d4a8:	0151      	lsls	r1, r2, #5
 800d4aa:	697a      	ldr	r2, [r7, #20]
 800d4ac:	440a      	add	r2, r1
 800d4ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d4b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d4b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	015a      	lsls	r2, r3, #5
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	4413      	add	r3, r2
 800d4c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4c4:	691a      	ldr	r2, [r3, #16]
 800d4c6:	68bb      	ldr	r3, [r7, #8]
 800d4c8:	695b      	ldr	r3, [r3, #20]
 800d4ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d4ce:	6939      	ldr	r1, [r7, #16]
 800d4d0:	0148      	lsls	r0, r1, #5
 800d4d2:	6979      	ldr	r1, [r7, #20]
 800d4d4:	4401      	add	r1, r0
 800d4d6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800d4da:	4313      	orrs	r3, r2
 800d4dc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800d4de:	79fb      	ldrb	r3, [r7, #7]
 800d4e0:	2b01      	cmp	r3, #1
 800d4e2:	d11e      	bne.n	800d522 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	691b      	ldr	r3, [r3, #16]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d009      	beq.n	800d500 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800d4ec:	693b      	ldr	r3, [r7, #16]
 800d4ee:	015a      	lsls	r2, r3, #5
 800d4f0:	697b      	ldr	r3, [r7, #20]
 800d4f2:	4413      	add	r3, r2
 800d4f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	691b      	ldr	r3, [r3, #16]
 800d4fe:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d500:	693b      	ldr	r3, [r7, #16]
 800d502:	015a      	lsls	r2, r3, #5
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	4413      	add	r3, r2
 800d508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	693a      	ldr	r2, [r7, #16]
 800d510:	0151      	lsls	r1, r2, #5
 800d512:	697a      	ldr	r2, [r7, #20]
 800d514:	440a      	add	r2, r1
 800d516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d51a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d51e:	6013      	str	r3, [r2, #0]
 800d520:	e092      	b.n	800d648 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800d522:	693b      	ldr	r3, [r7, #16]
 800d524:	015a      	lsls	r2, r3, #5
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	4413      	add	r3, r2
 800d52a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	693a      	ldr	r2, [r7, #16]
 800d532:	0151      	lsls	r1, r2, #5
 800d534:	697a      	ldr	r2, [r7, #20]
 800d536:	440a      	add	r2, r1
 800d538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d53c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d540:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800d542:	68bb      	ldr	r3, [r7, #8]
 800d544:	695b      	ldr	r3, [r3, #20]
 800d546:	2b00      	cmp	r3, #0
 800d548:	d07e      	beq.n	800d648 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d550:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d552:	68bb      	ldr	r3, [r7, #8]
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	f003 030f 	and.w	r3, r3, #15
 800d55a:	2101      	movs	r1, #1
 800d55c:	fa01 f303 	lsl.w	r3, r1, r3
 800d560:	6979      	ldr	r1, [r7, #20]
 800d562:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d566:	4313      	orrs	r3, r2
 800d568:	634b      	str	r3, [r1, #52]	; 0x34
 800d56a:	e06d      	b.n	800d648 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800d56c:	693b      	ldr	r3, [r7, #16]
 800d56e:	015a      	lsls	r2, r3, #5
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	4413      	add	r3, r2
 800d574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d578:	691b      	ldr	r3, [r3, #16]
 800d57a:	693a      	ldr	r2, [r7, #16]
 800d57c:	0151      	lsls	r1, r2, #5
 800d57e:	697a      	ldr	r2, [r7, #20]
 800d580:	440a      	add	r2, r1
 800d582:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d586:	0cdb      	lsrs	r3, r3, #19
 800d588:	04db      	lsls	r3, r3, #19
 800d58a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800d58c:	693b      	ldr	r3, [r7, #16]
 800d58e:	015a      	lsls	r2, r3, #5
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	4413      	add	r3, r2
 800d594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d598:	691b      	ldr	r3, [r3, #16]
 800d59a:	693a      	ldr	r2, [r7, #16]
 800d59c:	0151      	lsls	r1, r2, #5
 800d59e:	697a      	ldr	r2, [r7, #20]
 800d5a0:	440a      	add	r2, r1
 800d5a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800d5aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800d5ae:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800d5b0:	68bb      	ldr	r3, [r7, #8]
 800d5b2:	695b      	ldr	r3, [r3, #20]
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d003      	beq.n	800d5c0 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800d5b8:	68bb      	ldr	r3, [r7, #8]
 800d5ba:	689a      	ldr	r2, [r3, #8]
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d5c0:	693b      	ldr	r3, [r7, #16]
 800d5c2:	015a      	lsls	r2, r3, #5
 800d5c4:	697b      	ldr	r3, [r7, #20]
 800d5c6:	4413      	add	r3, r2
 800d5c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5cc:	691b      	ldr	r3, [r3, #16]
 800d5ce:	693a      	ldr	r2, [r7, #16]
 800d5d0:	0151      	lsls	r1, r2, #5
 800d5d2:	697a      	ldr	r2, [r7, #20]
 800d5d4:	440a      	add	r2, r1
 800d5d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d5da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d5de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	015a      	lsls	r2, r3, #5
 800d5e4:	697b      	ldr	r3, [r7, #20]
 800d5e6:	4413      	add	r3, r2
 800d5e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d5ec:	691a      	ldr	r2, [r3, #16]
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	689b      	ldr	r3, [r3, #8]
 800d5f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800d5f6:	6939      	ldr	r1, [r7, #16]
 800d5f8:	0148      	lsls	r0, r1, #5
 800d5fa:	6979      	ldr	r1, [r7, #20]
 800d5fc:	4401      	add	r1, r0
 800d5fe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800d602:	4313      	orrs	r3, r2
 800d604:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800d606:	79fb      	ldrb	r3, [r7, #7]
 800d608:	2b01      	cmp	r3, #1
 800d60a:	d10d      	bne.n	800d628 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	68db      	ldr	r3, [r3, #12]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d009      	beq.n	800d628 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	68d9      	ldr	r1, [r3, #12]
 800d618:	693b      	ldr	r3, [r7, #16]
 800d61a:	015a      	lsls	r2, r3, #5
 800d61c:	697b      	ldr	r3, [r7, #20]
 800d61e:	4413      	add	r3, r2
 800d620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d624:	460a      	mov	r2, r1
 800d626:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	015a      	lsls	r2, r3, #5
 800d62c:	697b      	ldr	r3, [r7, #20]
 800d62e:	4413      	add	r3, r2
 800d630:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	693a      	ldr	r2, [r7, #16]
 800d638:	0151      	lsls	r1, r2, #5
 800d63a:	697a      	ldr	r2, [r7, #20]
 800d63c:	440a      	add	r2, r1
 800d63e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d642:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800d646:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d648:	2300      	movs	r3, #0
}
 800d64a:	4618      	mov	r0, r3
 800d64c:	371c      	adds	r7, #28
 800d64e:	46bd      	mov	sp, r7
 800d650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d654:	4770      	bx	lr

0800d656 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800d656:	b480      	push	{r7}
 800d658:	b089      	sub	sp, #36	; 0x24
 800d65a:	af00      	add	r7, sp, #0
 800d65c:	60f8      	str	r0, [r7, #12]
 800d65e:	60b9      	str	r1, [r7, #8]
 800d660:	4611      	mov	r1, r2
 800d662:	461a      	mov	r2, r3
 800d664:	460b      	mov	r3, r1
 800d666:	71fb      	strb	r3, [r7, #7]
 800d668:	4613      	mov	r3, r2
 800d66a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800d674:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d123      	bne.n	800d6c4 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800d67c:	88bb      	ldrh	r3, [r7, #4]
 800d67e:	3303      	adds	r3, #3
 800d680:	089b      	lsrs	r3, r3, #2
 800d682:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800d684:	2300      	movs	r3, #0
 800d686:	61bb      	str	r3, [r7, #24]
 800d688:	e018      	b.n	800d6bc <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800d68a:	79fb      	ldrb	r3, [r7, #7]
 800d68c:	031a      	lsls	r2, r3, #12
 800d68e:	697b      	ldr	r3, [r7, #20]
 800d690:	4413      	add	r3, r2
 800d692:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d696:	461a      	mov	r2, r3
 800d698:	69fb      	ldr	r3, [r7, #28]
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800d69e:	69fb      	ldr	r3, [r7, #28]
 800d6a0:	3301      	adds	r3, #1
 800d6a2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d6a4:	69fb      	ldr	r3, [r7, #28]
 800d6a6:	3301      	adds	r3, #1
 800d6a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d6aa:	69fb      	ldr	r3, [r7, #28]
 800d6ac:	3301      	adds	r3, #1
 800d6ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800d6b0:	69fb      	ldr	r3, [r7, #28]
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800d6b6:	69bb      	ldr	r3, [r7, #24]
 800d6b8:	3301      	adds	r3, #1
 800d6ba:	61bb      	str	r3, [r7, #24]
 800d6bc:	69ba      	ldr	r2, [r7, #24]
 800d6be:	693b      	ldr	r3, [r7, #16]
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d3e2      	bcc.n	800d68a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800d6c4:	2300      	movs	r3, #0
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3724      	adds	r7, #36	; 0x24
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d0:	4770      	bx	lr

0800d6d2 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800d6d2:	b480      	push	{r7}
 800d6d4:	b08b      	sub	sp, #44	; 0x2c
 800d6d6:	af00      	add	r7, sp, #0
 800d6d8:	60f8      	str	r0, [r7, #12]
 800d6da:	60b9      	str	r1, [r7, #8]
 800d6dc:	4613      	mov	r3, r2
 800d6de:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800d6e4:	68bb      	ldr	r3, [r7, #8]
 800d6e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800d6e8:	88fb      	ldrh	r3, [r7, #6]
 800d6ea:	089b      	lsrs	r3, r3, #2
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800d6f0:	88fb      	ldrh	r3, [r7, #6]
 800d6f2:	f003 0303 	and.w	r3, r3, #3
 800d6f6:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	623b      	str	r3, [r7, #32]
 800d6fc:	e014      	b.n	800d728 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800d6fe:	69bb      	ldr	r3, [r7, #24]
 800d700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d704:	681a      	ldr	r2, [r3, #0]
 800d706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d708:	601a      	str	r2, [r3, #0]
    pDest++;
 800d70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70c:	3301      	adds	r3, #1
 800d70e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d712:	3301      	adds	r3, #1
 800d714:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d718:	3301      	adds	r3, #1
 800d71a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800d71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71e:	3301      	adds	r3, #1
 800d720:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800d722:	6a3b      	ldr	r3, [r7, #32]
 800d724:	3301      	adds	r3, #1
 800d726:	623b      	str	r3, [r7, #32]
 800d728:	6a3a      	ldr	r2, [r7, #32]
 800d72a:	697b      	ldr	r3, [r7, #20]
 800d72c:	429a      	cmp	r2, r3
 800d72e:	d3e6      	bcc.n	800d6fe <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800d730:	8bfb      	ldrh	r3, [r7, #30]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d01e      	beq.n	800d774 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800d736:	2300      	movs	r3, #0
 800d738:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800d73a:	69bb      	ldr	r3, [r7, #24]
 800d73c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d740:	461a      	mov	r2, r3
 800d742:	f107 0310 	add.w	r3, r7, #16
 800d746:	6812      	ldr	r2, [r2, #0]
 800d748:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800d74a:	693a      	ldr	r2, [r7, #16]
 800d74c:	6a3b      	ldr	r3, [r7, #32]
 800d74e:	b2db      	uxtb	r3, r3
 800d750:	00db      	lsls	r3, r3, #3
 800d752:	fa22 f303 	lsr.w	r3, r2, r3
 800d756:	b2da      	uxtb	r2, r3
 800d758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d75a:	701a      	strb	r2, [r3, #0]
      i++;
 800d75c:	6a3b      	ldr	r3, [r7, #32]
 800d75e:	3301      	adds	r3, #1
 800d760:	623b      	str	r3, [r7, #32]
      pDest++;
 800d762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d764:	3301      	adds	r3, #1
 800d766:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800d768:	8bfb      	ldrh	r3, [r7, #30]
 800d76a:	3b01      	subs	r3, #1
 800d76c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800d76e:	8bfb      	ldrh	r3, [r7, #30]
 800d770:	2b00      	cmp	r3, #0
 800d772:	d1ea      	bne.n	800d74a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800d774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d776:	4618      	mov	r0, r3
 800d778:	372c      	adds	r7, #44	; 0x2c
 800d77a:	46bd      	mov	sp, r7
 800d77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d780:	4770      	bx	lr

0800d782 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d782:	b480      	push	{r7}
 800d784:	b085      	sub	sp, #20
 800d786:	af00      	add	r7, sp, #0
 800d788:	6078      	str	r0, [r7, #4]
 800d78a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d790:	683b      	ldr	r3, [r7, #0]
 800d792:	781b      	ldrb	r3, [r3, #0]
 800d794:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	785b      	ldrb	r3, [r3, #1]
 800d79a:	2b01      	cmp	r3, #1
 800d79c:	d12c      	bne.n	800d7f8 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	015a      	lsls	r2, r3, #5
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	4413      	add	r3, r2
 800d7a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7aa:	681b      	ldr	r3, [r3, #0]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	db12      	blt.n	800d7d6 <USB_EPSetStall+0x54>
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d00f      	beq.n	800d7d6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	015a      	lsls	r2, r3, #5
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	4413      	add	r3, r2
 800d7be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	68ba      	ldr	r2, [r7, #8]
 800d7c6:	0151      	lsls	r1, r2, #5
 800d7c8:	68fa      	ldr	r2, [r7, #12]
 800d7ca:	440a      	add	r2, r1
 800d7cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7d0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d7d4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	015a      	lsls	r2, r3, #5
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	4413      	add	r3, r2
 800d7de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	68ba      	ldr	r2, [r7, #8]
 800d7e6:	0151      	lsls	r1, r2, #5
 800d7e8:	68fa      	ldr	r2, [r7, #12]
 800d7ea:	440a      	add	r2, r1
 800d7ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d7f0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d7f4:	6013      	str	r3, [r2, #0]
 800d7f6:	e02b      	b.n	800d850 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	015a      	lsls	r2, r3, #5
 800d7fc:	68fb      	ldr	r3, [r7, #12]
 800d7fe:	4413      	add	r3, r2
 800d800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	2b00      	cmp	r3, #0
 800d808:	db12      	blt.n	800d830 <USB_EPSetStall+0xae>
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d00f      	beq.n	800d830 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d810:	68bb      	ldr	r3, [r7, #8]
 800d812:	015a      	lsls	r2, r3, #5
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	4413      	add	r3, r2
 800d818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	68ba      	ldr	r2, [r7, #8]
 800d820:	0151      	lsls	r1, r2, #5
 800d822:	68fa      	ldr	r2, [r7, #12]
 800d824:	440a      	add	r2, r1
 800d826:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d82a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d82e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d830:	68bb      	ldr	r3, [r7, #8]
 800d832:	015a      	lsls	r2, r3, #5
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	4413      	add	r3, r2
 800d838:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	68ba      	ldr	r2, [r7, #8]
 800d840:	0151      	lsls	r1, r2, #5
 800d842:	68fa      	ldr	r2, [r7, #12]
 800d844:	440a      	add	r2, r1
 800d846:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d84a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d84e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d850:	2300      	movs	r3, #0
}
 800d852:	4618      	mov	r0, r3
 800d854:	3714      	adds	r7, #20
 800d856:	46bd      	mov	sp, r7
 800d858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85c:	4770      	bx	lr

0800d85e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d85e:	b480      	push	{r7}
 800d860:	b085      	sub	sp, #20
 800d862:	af00      	add	r7, sp, #0
 800d864:	6078      	str	r0, [r7, #4]
 800d866:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d86c:	683b      	ldr	r3, [r7, #0]
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	785b      	ldrb	r3, [r3, #1]
 800d876:	2b01      	cmp	r3, #1
 800d878:	d128      	bne.n	800d8cc <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	015a      	lsls	r2, r3, #5
 800d87e:	68fb      	ldr	r3, [r7, #12]
 800d880:	4413      	add	r3, r2
 800d882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	68ba      	ldr	r2, [r7, #8]
 800d88a:	0151      	lsls	r1, r2, #5
 800d88c:	68fa      	ldr	r2, [r7, #12]
 800d88e:	440a      	add	r2, r1
 800d890:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d894:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d898:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d89a:	683b      	ldr	r3, [r7, #0]
 800d89c:	78db      	ldrb	r3, [r3, #3]
 800d89e:	2b03      	cmp	r3, #3
 800d8a0:	d003      	beq.n	800d8aa <USB_EPClearStall+0x4c>
 800d8a2:	683b      	ldr	r3, [r7, #0]
 800d8a4:	78db      	ldrb	r3, [r3, #3]
 800d8a6:	2b02      	cmp	r3, #2
 800d8a8:	d138      	bne.n	800d91c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	015a      	lsls	r2, r3, #5
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	4413      	add	r3, r2
 800d8b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	68ba      	ldr	r2, [r7, #8]
 800d8ba:	0151      	lsls	r1, r2, #5
 800d8bc:	68fa      	ldr	r2, [r7, #12]
 800d8be:	440a      	add	r2, r1
 800d8c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d8c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d8c8:	6013      	str	r3, [r2, #0]
 800d8ca:	e027      	b.n	800d91c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d8cc:	68bb      	ldr	r3, [r7, #8]
 800d8ce:	015a      	lsls	r2, r3, #5
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	4413      	add	r3, r2
 800d8d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	68ba      	ldr	r2, [r7, #8]
 800d8dc:	0151      	lsls	r1, r2, #5
 800d8de:	68fa      	ldr	r2, [r7, #12]
 800d8e0:	440a      	add	r2, r1
 800d8e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d8e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d8ea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	78db      	ldrb	r3, [r3, #3]
 800d8f0:	2b03      	cmp	r3, #3
 800d8f2:	d003      	beq.n	800d8fc <USB_EPClearStall+0x9e>
 800d8f4:	683b      	ldr	r3, [r7, #0]
 800d8f6:	78db      	ldrb	r3, [r3, #3]
 800d8f8:	2b02      	cmp	r3, #2
 800d8fa:	d10f      	bne.n	800d91c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	015a      	lsls	r2, r3, #5
 800d900:	68fb      	ldr	r3, [r7, #12]
 800d902:	4413      	add	r3, r2
 800d904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	68ba      	ldr	r2, [r7, #8]
 800d90c:	0151      	lsls	r1, r2, #5
 800d90e:	68fa      	ldr	r2, [r7, #12]
 800d910:	440a      	add	r2, r1
 800d912:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d916:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d91a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d91c:	2300      	movs	r3, #0
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3714      	adds	r7, #20
 800d922:	46bd      	mov	sp, r7
 800d924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d928:	4770      	bx	lr

0800d92a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d92a:	b480      	push	{r7}
 800d92c:	b085      	sub	sp, #20
 800d92e:	af00      	add	r7, sp, #0
 800d930:	6078      	str	r0, [r7, #4]
 800d932:	460b      	mov	r3, r1
 800d934:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	68fa      	ldr	r2, [r7, #12]
 800d944:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d948:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d94c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d954:	681a      	ldr	r2, [r3, #0]
 800d956:	78fb      	ldrb	r3, [r7, #3]
 800d958:	011b      	lsls	r3, r3, #4
 800d95a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d95e:	68f9      	ldr	r1, [r7, #12]
 800d960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d964:	4313      	orrs	r3, r2
 800d966:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d968:	2300      	movs	r3, #0
}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3714      	adds	r7, #20
 800d96e:	46bd      	mov	sp, r7
 800d970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d974:	4770      	bx	lr

0800d976 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d976:	b480      	push	{r7}
 800d978:	b085      	sub	sp, #20
 800d97a:	af00      	add	r7, sp, #0
 800d97c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	68fa      	ldr	r2, [r7, #12]
 800d98c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d990:	f023 0303 	bic.w	r3, r3, #3
 800d994:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d99c:	685b      	ldr	r3, [r3, #4]
 800d99e:	68fa      	ldr	r2, [r7, #12]
 800d9a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d9a4:	f023 0302 	bic.w	r3, r3, #2
 800d9a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d9aa:	2300      	movs	r3, #0
}
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	3714      	adds	r7, #20
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b6:	4770      	bx	lr

0800d9b8 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b085      	sub	sp, #20
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	68fa      	ldr	r2, [r7, #12]
 800d9ce:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800d9d2:	f023 0303 	bic.w	r3, r3, #3
 800d9d6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d9de:	685b      	ldr	r3, [r3, #4]
 800d9e0:	68fa      	ldr	r2, [r7, #12]
 800d9e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d9e6:	f043 0302 	orr.w	r3, r3, #2
 800d9ea:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d9ec:	2300      	movs	r3, #0
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3714      	adds	r7, #20
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9f8:	4770      	bx	lr

0800d9fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d9fa:	b480      	push	{r7}
 800d9fc:	b085      	sub	sp, #20
 800d9fe:	af00      	add	r7, sp, #0
 800da00:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	695b      	ldr	r3, [r3, #20]
 800da06:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	699b      	ldr	r3, [r3, #24]
 800da0c:	68fa      	ldr	r2, [r7, #12]
 800da0e:	4013      	ands	r3, r2
 800da10:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800da12:	68fb      	ldr	r3, [r7, #12]
}
 800da14:	4618      	mov	r0, r3
 800da16:	3714      	adds	r7, #20
 800da18:	46bd      	mov	sp, r7
 800da1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1e:	4770      	bx	lr

0800da20 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800da20:	b480      	push	{r7}
 800da22:	b085      	sub	sp, #20
 800da24:	af00      	add	r7, sp, #0
 800da26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da32:	699b      	ldr	r3, [r3, #24]
 800da34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800da36:	68fb      	ldr	r3, [r7, #12]
 800da38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da3c:	69db      	ldr	r3, [r3, #28]
 800da3e:	68ba      	ldr	r2, [r7, #8]
 800da40:	4013      	ands	r3, r2
 800da42:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	0c1b      	lsrs	r3, r3, #16
}
 800da48:	4618      	mov	r0, r3
 800da4a:	3714      	adds	r7, #20
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr

0800da54 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800da54:	b480      	push	{r7}
 800da56:	b085      	sub	sp, #20
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da66:	699b      	ldr	r3, [r3, #24]
 800da68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800da70:	69db      	ldr	r3, [r3, #28]
 800da72:	68ba      	ldr	r2, [r7, #8]
 800da74:	4013      	ands	r3, r2
 800da76:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	b29b      	uxth	r3, r3
}
 800da7c:	4618      	mov	r0, r3
 800da7e:	3714      	adds	r7, #20
 800da80:	46bd      	mov	sp, r7
 800da82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da86:	4770      	bx	lr

0800da88 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800da88:	b480      	push	{r7}
 800da8a:	b085      	sub	sp, #20
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	6078      	str	r0, [r7, #4]
 800da90:	460b      	mov	r3, r1
 800da92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800da98:	78fb      	ldrb	r3, [r7, #3]
 800da9a:	015a      	lsls	r2, r3, #5
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	4413      	add	r3, r2
 800daa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800daa4:	689b      	ldr	r3, [r3, #8]
 800daa6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800daae:	695b      	ldr	r3, [r3, #20]
 800dab0:	68ba      	ldr	r2, [r7, #8]
 800dab2:	4013      	ands	r3, r2
 800dab4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800dab6:	68bb      	ldr	r3, [r7, #8]
}
 800dab8:	4618      	mov	r0, r3
 800daba:	3714      	adds	r7, #20
 800dabc:	46bd      	mov	sp, r7
 800dabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac2:	4770      	bx	lr

0800dac4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800dac4:	b480      	push	{r7}
 800dac6:	b087      	sub	sp, #28
 800dac8:	af00      	add	r7, sp, #0
 800daca:	6078      	str	r0, [r7, #4]
 800dacc:	460b      	mov	r3, r1
 800dace:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dada:	691b      	ldr	r3, [r3, #16]
 800dadc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800dade:	697b      	ldr	r3, [r7, #20]
 800dae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800dae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dae6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800dae8:	78fb      	ldrb	r3, [r7, #3]
 800daea:	f003 030f 	and.w	r3, r3, #15
 800daee:	68fa      	ldr	r2, [r7, #12]
 800daf0:	fa22 f303 	lsr.w	r3, r2, r3
 800daf4:	01db      	lsls	r3, r3, #7
 800daf6:	b2db      	uxtb	r3, r3
 800daf8:	693a      	ldr	r2, [r7, #16]
 800dafa:	4313      	orrs	r3, r2
 800dafc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800dafe:	78fb      	ldrb	r3, [r7, #3]
 800db00:	015a      	lsls	r2, r3, #5
 800db02:	697b      	ldr	r3, [r7, #20]
 800db04:	4413      	add	r3, r2
 800db06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db0a:	689b      	ldr	r3, [r3, #8]
 800db0c:	693a      	ldr	r2, [r7, #16]
 800db0e:	4013      	ands	r3, r2
 800db10:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800db12:	68bb      	ldr	r3, [r7, #8]
}
 800db14:	4618      	mov	r0, r3
 800db16:	371c      	adds	r7, #28
 800db18:	46bd      	mov	sp, r7
 800db1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1e:	4770      	bx	lr

0800db20 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800db20:	b480      	push	{r7}
 800db22:	b083      	sub	sp, #12
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	695b      	ldr	r3, [r3, #20]
 800db2c:	f003 0301 	and.w	r3, r3, #1
}
 800db30:	4618      	mov	r0, r3
 800db32:	370c      	adds	r7, #12
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr

0800db3c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800db3c:	b480      	push	{r7}
 800db3e:	b085      	sub	sp, #20
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	68fa      	ldr	r2, [r7, #12]
 800db52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800db56:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800db5a:	f023 0307 	bic.w	r3, r3, #7
 800db5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800db66:	685b      	ldr	r3, [r3, #4]
 800db68:	68fa      	ldr	r2, [r7, #12]
 800db6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800db6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800db72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800db74:	2300      	movs	r3, #0
}
 800db76:	4618      	mov	r0, r3
 800db78:	3714      	adds	r7, #20
 800db7a:	46bd      	mov	sp, r7
 800db7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db80:	4770      	bx	lr
	...

0800db84 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800db84:	b480      	push	{r7}
 800db86:	b087      	sub	sp, #28
 800db88:	af00      	add	r7, sp, #0
 800db8a:	60f8      	str	r0, [r7, #12]
 800db8c:	460b      	mov	r3, r1
 800db8e:	607a      	str	r2, [r7, #4]
 800db90:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	333c      	adds	r3, #60	; 0x3c
 800db9a:	3304      	adds	r3, #4
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800dba0:	693b      	ldr	r3, [r7, #16]
 800dba2:	4a26      	ldr	r2, [pc, #152]	; (800dc3c <USB_EP0_OutStart+0xb8>)
 800dba4:	4293      	cmp	r3, r2
 800dba6:	d90a      	bls.n	800dbbe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800dba8:	697b      	ldr	r3, [r7, #20]
 800dbaa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800dbb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800dbb8:	d101      	bne.n	800dbbe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800dbba:	2300      	movs	r3, #0
 800dbbc:	e037      	b.n	800dc2e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbc4:	461a      	mov	r2, r3
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800dbca:	697b      	ldr	r3, [r7, #20]
 800dbcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbd0:	691b      	ldr	r3, [r3, #16]
 800dbd2:	697a      	ldr	r2, [r7, #20]
 800dbd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbd8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800dbdc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbe4:	691b      	ldr	r3, [r3, #16]
 800dbe6:	697a      	ldr	r2, [r7, #20]
 800dbe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dbec:	f043 0318 	orr.w	r3, r3, #24
 800dbf0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dbf8:	691b      	ldr	r3, [r3, #16]
 800dbfa:	697a      	ldr	r2, [r7, #20]
 800dbfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc00:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800dc04:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800dc06:	7afb      	ldrb	r3, [r7, #11]
 800dc08:	2b01      	cmp	r3, #1
 800dc0a:	d10f      	bne.n	800dc2c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc12:	461a      	mov	r2, r3
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800dc18:	697b      	ldr	r3, [r7, #20]
 800dc1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800dc1e:	681b      	ldr	r3, [r3, #0]
 800dc20:	697a      	ldr	r2, [r7, #20]
 800dc22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800dc26:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800dc2a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800dc2c:	2300      	movs	r3, #0
}
 800dc2e:	4618      	mov	r0, r3
 800dc30:	371c      	adds	r7, #28
 800dc32:	46bd      	mov	sp, r7
 800dc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc38:	4770      	bx	lr
 800dc3a:	bf00      	nop
 800dc3c:	4f54300a 	.word	0x4f54300a

0800dc40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800dc40:	b480      	push	{r7}
 800dc42:	b085      	sub	sp, #20
 800dc44:	af00      	add	r7, sp, #0
 800dc46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800dc48:	2300      	movs	r3, #0
 800dc4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	3301      	adds	r3, #1
 800dc50:	60fb      	str	r3, [r7, #12]
 800dc52:	4a13      	ldr	r2, [pc, #76]	; (800dca0 <USB_CoreReset+0x60>)
 800dc54:	4293      	cmp	r3, r2
 800dc56:	d901      	bls.n	800dc5c <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 800dc58:	2303      	movs	r3, #3
 800dc5a:	e01a      	b.n	800dc92 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	691b      	ldr	r3, [r3, #16]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	daf3      	bge.n	800dc4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800dc64:	2300      	movs	r3, #0
 800dc66:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	691b      	ldr	r3, [r3, #16]
 800dc6c:	f043 0201 	orr.w	r2, r3, #1
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	3301      	adds	r3, #1
 800dc78:	60fb      	str	r3, [r7, #12]
 800dc7a:	4a09      	ldr	r2, [pc, #36]	; (800dca0 <USB_CoreReset+0x60>)
 800dc7c:	4293      	cmp	r3, r2
 800dc7e:	d901      	bls.n	800dc84 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 800dc80:	2303      	movs	r3, #3
 800dc82:	e006      	b.n	800dc92 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	691b      	ldr	r3, [r3, #16]
 800dc88:	f003 0301 	and.w	r3, r3, #1
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d0f1      	beq.n	800dc74 <USB_CoreReset+0x34>

  return HAL_OK;
 800dc90:	2300      	movs	r3, #0
}
 800dc92:	4618      	mov	r0, r3
 800dc94:	3714      	adds	r7, #20
 800dc96:	46bd      	mov	sp, r7
 800dc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9c:	4770      	bx	lr
 800dc9e:	bf00      	nop
 800dca0:	00030d40 	.word	0x00030d40

0800dca4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800dca8:	4904      	ldr	r1, [pc, #16]	; (800dcbc <MX_FATFS_Init+0x18>)
 800dcaa:	4805      	ldr	r0, [pc, #20]	; (800dcc0 <MX_FATFS_Init+0x1c>)
 800dcac:	f004 ff38 	bl	8012b20 <FATFS_LinkDriver>
 800dcb0:	4603      	mov	r3, r0
 800dcb2:	461a      	mov	r2, r3
 800dcb4:	4b03      	ldr	r3, [pc, #12]	; (800dcc4 <MX_FATFS_Init+0x20>)
 800dcb6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800dcb8:	bf00      	nop
 800dcba:	bd80      	pop	{r7, pc}
 800dcbc:	20010e64 	.word	0x20010e64
 800dcc0:	2000003c 	.word	0x2000003c
 800dcc4:	20010e68 	.word	0x20010e68

0800dcc8 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800dcc8:	b480      	push	{r7}
 800dcca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800dccc:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800dcce:	4618      	mov	r0, r3
 800dcd0:	46bd      	mov	sp, r7
 800dcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd6:	4770      	bx	lr

0800dcd8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800dcd8:	b580      	push	{r7, lr}
 800dcda:	b082      	sub	sp, #8
 800dcdc:	af00      	add	r7, sp, #0
 800dcde:	4603      	mov	r3, r0
 800dce0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_initialize (pdrv);
 800dce2:	79fb      	ldrb	r3, [r7, #7]
 800dce4:	4618      	mov	r0, r3
 800dce6:	f7f4 ff03 	bl	8002af0 <SD_disk_initialize>
 800dcea:	4603      	mov	r3, r0
 800dcec:	b2db      	uxtb	r3, r3

  /* USER CODE END INIT */
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3708      	adds	r7, #8
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}

0800dcf6 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800dcf6:	b580      	push	{r7, lr}
 800dcf8:	b082      	sub	sp, #8
 800dcfa:	af00      	add	r7, sp, #0
 800dcfc:	4603      	mov	r3, r0
 800dcfe:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return SD_disk_status (pdrv);
 800dd00:	79fb      	ldrb	r3, [r7, #7]
 800dd02:	4618      	mov	r0, r3
 800dd04:	f7f4 ffde 	bl	8002cc4 <SD_disk_status>
 800dd08:	4603      	mov	r3, r0
 800dd0a:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 800dd0c:	4618      	mov	r0, r3
 800dd0e:	3708      	adds	r7, #8
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}

0800dd14 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800dd14:	b580      	push	{r7, lr}
 800dd16:	b084      	sub	sp, #16
 800dd18:	af00      	add	r7, sp, #0
 800dd1a:	60b9      	str	r1, [r7, #8]
 800dd1c:	607a      	str	r2, [r7, #4]
 800dd1e:	603b      	str	r3, [r7, #0]
 800dd20:	4603      	mov	r3, r0
 800dd22:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read (pdrv, buff, sector, count);
 800dd24:	7bf8      	ldrb	r0, [r7, #15]
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	687a      	ldr	r2, [r7, #4]
 800dd2a:	68b9      	ldr	r1, [r7, #8]
 800dd2c:	f7f4 ffe0 	bl	8002cf0 <SD_disk_read>
 800dd30:	4603      	mov	r3, r0
 800dd32:	b2db      	uxtb	r3, r3
   // return RES_OK;
  /* USER CODE END READ */
}
 800dd34:	4618      	mov	r0, r3
 800dd36:	3710      	adds	r7, #16
 800dd38:	46bd      	mov	sp, r7
 800dd3a:	bd80      	pop	{r7, pc}

0800dd3c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b084      	sub	sp, #16
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	60b9      	str	r1, [r7, #8]
 800dd44:	607a      	str	r2, [r7, #4]
 800dd46:	603b      	str	r3, [r7, #0]
 800dd48:	4603      	mov	r3, r0
 800dd4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
   // return RES_OK;
	return SD_disk_write (pdrv, buff, sector, count);
 800dd4c:	7bf8      	ldrb	r0, [r7, #15]
 800dd4e:	683b      	ldr	r3, [r7, #0]
 800dd50:	687a      	ldr	r2, [r7, #4]
 800dd52:	68b9      	ldr	r1, [r7, #8]
 800dd54:	f7f5 f836 	bl	8002dc4 <SD_disk_write>
 800dd58:	4603      	mov	r3, r0
 800dd5a:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	3710      	adds	r7, #16
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}

0800dd64 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b082      	sub	sp, #8
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	4603      	mov	r3, r0
 800dd6c:	603a      	str	r2, [r7, #0]
 800dd6e:	71fb      	strb	r3, [r7, #7]
 800dd70:	460b      	mov	r3, r1
 800dd72:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return SD_disk_ioctl (pdrv,cmd, buff);
 800dd74:	79fb      	ldrb	r3, [r7, #7]
 800dd76:	79b9      	ldrb	r1, [r7, #6]
 800dd78:	683a      	ldr	r2, [r7, #0]
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f7f5 f8a6 	bl	8002ecc <SD_disk_ioctl>
 800dd80:	4603      	mov	r3, r0
 800dd82:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 800dd84:	4618      	mov	r0, r3
 800dd86:	3708      	adds	r7, #8
 800dd88:	46bd      	mov	sp, r7
 800dd8a:	bd80      	pop	{r7, pc}

0800dd8c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b084      	sub	sp, #16
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	460b      	mov	r3, r1
 800dd96:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800dd98:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800dd9c:	f009 fc4e 	bl	801763c <USBD_static_malloc>
 800dda0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d105      	bne.n	800ddb4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800ddb0:	2302      	movs	r3, #2
 800ddb2:	e066      	b.n	800de82 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	68fa      	ldr	r2, [r7, #12]
 800ddb8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	7c1b      	ldrb	r3, [r3, #16]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d119      	bne.n	800ddf8 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ddc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ddc8:	2202      	movs	r2, #2
 800ddca:	2181      	movs	r1, #129	; 0x81
 800ddcc:	6878      	ldr	r0, [r7, #4]
 800ddce:	f009 fb12 	bl	80173f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2201      	movs	r2, #1
 800ddd6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800ddd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dddc:	2202      	movs	r2, #2
 800ddde:	2101      	movs	r1, #1
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f009 fb08 	bl	80173f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2201      	movs	r2, #1
 800ddea:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	2210      	movs	r2, #16
 800ddf2:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 800ddf6:	e016      	b.n	800de26 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800ddf8:	2340      	movs	r3, #64	; 0x40
 800ddfa:	2202      	movs	r2, #2
 800ddfc:	2181      	movs	r1, #129	; 0x81
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f009 faf9 	bl	80173f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	2201      	movs	r2, #1
 800de08:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800de0a:	2340      	movs	r3, #64	; 0x40
 800de0c:	2202      	movs	r2, #2
 800de0e:	2101      	movs	r1, #1
 800de10:	6878      	ldr	r0, [r7, #4]
 800de12:	f009 faf0 	bl	80173f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2201      	movs	r2, #1
 800de1a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2210      	movs	r2, #16
 800de22:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800de26:	2308      	movs	r3, #8
 800de28:	2203      	movs	r2, #3
 800de2a:	2182      	movs	r1, #130	; 0x82
 800de2c:	6878      	ldr	r0, [r7, #4]
 800de2e:	f009 fae2 	bl	80173f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2201      	movs	r2, #1
 800de36:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	2200      	movs	r2, #0
 800de48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	2200      	movs	r2, #0
 800de50:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	7c1b      	ldrb	r3, [r3, #16]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d109      	bne.n	800de70 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800de62:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de66:	2101      	movs	r1, #1
 800de68:	6878      	ldr	r0, [r7, #4]
 800de6a:	f009 fbb3 	bl	80175d4 <USBD_LL_PrepareReceive>
 800de6e:	e007      	b.n	800de80 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800de76:	2340      	movs	r3, #64	; 0x40
 800de78:	2101      	movs	r1, #1
 800de7a:	6878      	ldr	r0, [r7, #4]
 800de7c:	f009 fbaa 	bl	80175d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800de80:	2300      	movs	r3, #0
}
 800de82:	4618      	mov	r0, r3
 800de84:	3710      	adds	r7, #16
 800de86:	46bd      	mov	sp, r7
 800de88:	bd80      	pop	{r7, pc}

0800de8a <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800de8a:	b580      	push	{r7, lr}
 800de8c:	b082      	sub	sp, #8
 800de8e:	af00      	add	r7, sp, #0
 800de90:	6078      	str	r0, [r7, #4]
 800de92:	460b      	mov	r3, r1
 800de94:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800de96:	2181      	movs	r1, #129	; 0x81
 800de98:	6878      	ldr	r0, [r7, #4]
 800de9a:	f009 fad2 	bl	8017442 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2200      	movs	r2, #0
 800dea2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800dea4:	2101      	movs	r1, #1
 800dea6:	6878      	ldr	r0, [r7, #4]
 800dea8:	f009 facb 	bl	8017442 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	2200      	movs	r2, #0
 800deb0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800deb4:	2182      	movs	r1, #130	; 0x82
 800deb6:	6878      	ldr	r0, [r7, #4]
 800deb8:	f009 fac3 	bl	8017442 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2200      	movs	r2, #0
 800dec0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2200      	movs	r2, #0
 800dec8:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d00e      	beq.n	800def4 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dedc:	685b      	ldr	r3, [r3, #4]
 800dede:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dee6:	4618      	mov	r0, r3
 800dee8:	f009 fbb6 	bl	8017658 <USBD_static_free>
    pdev->pClassData = NULL;
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2200      	movs	r2, #0
 800def0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800def4:	2300      	movs	r3, #0
}
 800def6:	4618      	mov	r0, r3
 800def8:	3708      	adds	r7, #8
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
	...

0800df00 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b086      	sub	sp, #24
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df10:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800df12:	2300      	movs	r3, #0
 800df14:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800df16:	2300      	movs	r3, #0
 800df18:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800df1a:	2300      	movs	r3, #0
 800df1c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800df1e:	693b      	ldr	r3, [r7, #16]
 800df20:	2b00      	cmp	r3, #0
 800df22:	d101      	bne.n	800df28 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800df24:	2303      	movs	r3, #3
 800df26:	e0af      	b.n	800e088 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	781b      	ldrb	r3, [r3, #0]
 800df2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800df30:	2b00      	cmp	r3, #0
 800df32:	d03f      	beq.n	800dfb4 <USBD_CDC_Setup+0xb4>
 800df34:	2b20      	cmp	r3, #32
 800df36:	f040 809f 	bne.w	800e078 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800df3a:	683b      	ldr	r3, [r7, #0]
 800df3c:	88db      	ldrh	r3, [r3, #6]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	d02e      	beq.n	800dfa0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800df42:	683b      	ldr	r3, [r7, #0]
 800df44:	781b      	ldrb	r3, [r3, #0]
 800df46:	b25b      	sxtb	r3, r3
 800df48:	2b00      	cmp	r3, #0
 800df4a:	da16      	bge.n	800df7a <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800df52:	689b      	ldr	r3, [r3, #8]
 800df54:	683a      	ldr	r2, [r7, #0]
 800df56:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 800df58:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800df5a:	683a      	ldr	r2, [r7, #0]
 800df5c:	88d2      	ldrh	r2, [r2, #6]
 800df5e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	88db      	ldrh	r3, [r3, #6]
 800df64:	2b07      	cmp	r3, #7
 800df66:	bf28      	it	cs
 800df68:	2307      	movcs	r3, #7
 800df6a:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	89fa      	ldrh	r2, [r7, #14]
 800df70:	4619      	mov	r1, r3
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f001 fb19 	bl	800f5aa <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 800df78:	e085      	b.n	800e086 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	785a      	ldrb	r2, [r3, #1]
 800df7e:	693b      	ldr	r3, [r7, #16]
 800df80:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800df84:	683b      	ldr	r3, [r7, #0]
 800df86:	88db      	ldrh	r3, [r3, #6]
 800df88:	b2da      	uxtb	r2, r3
 800df8a:	693b      	ldr	r3, [r7, #16]
 800df8c:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800df90:	6939      	ldr	r1, [r7, #16]
 800df92:	683b      	ldr	r3, [r7, #0]
 800df94:	88db      	ldrh	r3, [r3, #6]
 800df96:	461a      	mov	r2, r3
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f001 fb32 	bl	800f602 <USBD_CtlPrepareRx>
      break;
 800df9e:	e072      	b.n	800e086 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dfa6:	689b      	ldr	r3, [r3, #8]
 800dfa8:	683a      	ldr	r2, [r7, #0]
 800dfaa:	7850      	ldrb	r0, [r2, #1]
 800dfac:	2200      	movs	r2, #0
 800dfae:	6839      	ldr	r1, [r7, #0]
 800dfb0:	4798      	blx	r3
      break;
 800dfb2:	e068      	b.n	800e086 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dfb4:	683b      	ldr	r3, [r7, #0]
 800dfb6:	785b      	ldrb	r3, [r3, #1]
 800dfb8:	2b0b      	cmp	r3, #11
 800dfba:	d852      	bhi.n	800e062 <USBD_CDC_Setup+0x162>
 800dfbc:	a201      	add	r2, pc, #4	; (adr r2, 800dfc4 <USBD_CDC_Setup+0xc4>)
 800dfbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dfc2:	bf00      	nop
 800dfc4:	0800dff5 	.word	0x0800dff5
 800dfc8:	0800e071 	.word	0x0800e071
 800dfcc:	0800e063 	.word	0x0800e063
 800dfd0:	0800e063 	.word	0x0800e063
 800dfd4:	0800e063 	.word	0x0800e063
 800dfd8:	0800e063 	.word	0x0800e063
 800dfdc:	0800e063 	.word	0x0800e063
 800dfe0:	0800e063 	.word	0x0800e063
 800dfe4:	0800e063 	.word	0x0800e063
 800dfe8:	0800e063 	.word	0x0800e063
 800dfec:	0800e01f 	.word	0x0800e01f
 800dff0:	0800e049 	.word	0x0800e049
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dffa:	b2db      	uxtb	r3, r3
 800dffc:	2b03      	cmp	r3, #3
 800dffe:	d107      	bne.n	800e010 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e000:	f107 030a 	add.w	r3, r7, #10
 800e004:	2202      	movs	r2, #2
 800e006:	4619      	mov	r1, r3
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f001 face 	bl	800f5aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e00e:	e032      	b.n	800e076 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e010:	6839      	ldr	r1, [r7, #0]
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f001 fa58 	bl	800f4c8 <USBD_CtlError>
            ret = USBD_FAIL;
 800e018:	2303      	movs	r3, #3
 800e01a:	75fb      	strb	r3, [r7, #23]
          break;
 800e01c:	e02b      	b.n	800e076 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e024:	b2db      	uxtb	r3, r3
 800e026:	2b03      	cmp	r3, #3
 800e028:	d107      	bne.n	800e03a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e02a:	f107 030d 	add.w	r3, r7, #13
 800e02e:	2201      	movs	r2, #1
 800e030:	4619      	mov	r1, r3
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f001 fab9 	bl	800f5aa <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e038:	e01d      	b.n	800e076 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800e03a:	6839      	ldr	r1, [r7, #0]
 800e03c:	6878      	ldr	r0, [r7, #4]
 800e03e:	f001 fa43 	bl	800f4c8 <USBD_CtlError>
            ret = USBD_FAIL;
 800e042:	2303      	movs	r3, #3
 800e044:	75fb      	strb	r3, [r7, #23]
          break;
 800e046:	e016      	b.n	800e076 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e04e:	b2db      	uxtb	r3, r3
 800e050:	2b03      	cmp	r3, #3
 800e052:	d00f      	beq.n	800e074 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 800e054:	6839      	ldr	r1, [r7, #0]
 800e056:	6878      	ldr	r0, [r7, #4]
 800e058:	f001 fa36 	bl	800f4c8 <USBD_CtlError>
            ret = USBD_FAIL;
 800e05c:	2303      	movs	r3, #3
 800e05e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e060:	e008      	b.n	800e074 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e062:	6839      	ldr	r1, [r7, #0]
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f001 fa2f 	bl	800f4c8 <USBD_CtlError>
          ret = USBD_FAIL;
 800e06a:	2303      	movs	r3, #3
 800e06c:	75fb      	strb	r3, [r7, #23]
          break;
 800e06e:	e002      	b.n	800e076 <USBD_CDC_Setup+0x176>
          break;
 800e070:	bf00      	nop
 800e072:	e008      	b.n	800e086 <USBD_CDC_Setup+0x186>
          break;
 800e074:	bf00      	nop
      }
      break;
 800e076:	e006      	b.n	800e086 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 800e078:	6839      	ldr	r1, [r7, #0]
 800e07a:	6878      	ldr	r0, [r7, #4]
 800e07c:	f001 fa24 	bl	800f4c8 <USBD_CtlError>
      ret = USBD_FAIL;
 800e080:	2303      	movs	r3, #3
 800e082:	75fb      	strb	r3, [r7, #23]
      break;
 800e084:	bf00      	nop
  }

  return (uint8_t)ret;
 800e086:	7dfb      	ldrb	r3, [r7, #23]
}
 800e088:	4618      	mov	r0, r3
 800e08a:	3718      	adds	r7, #24
 800e08c:	46bd      	mov	sp, r7
 800e08e:	bd80      	pop	{r7, pc}

0800e090 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e090:	b580      	push	{r7, lr}
 800e092:	b084      	sub	sp, #16
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	460b      	mov	r3, r1
 800e09a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800e0a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d101      	bne.n	800e0b2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e0ae:	2303      	movs	r3, #3
 800e0b0:	e04f      	b.n	800e152 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0b8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e0ba:	78fa      	ldrb	r2, [r7, #3]
 800e0bc:	6879      	ldr	r1, [r7, #4]
 800e0be:	4613      	mov	r3, r2
 800e0c0:	009b      	lsls	r3, r3, #2
 800e0c2:	4413      	add	r3, r2
 800e0c4:	009b      	lsls	r3, r3, #2
 800e0c6:	440b      	add	r3, r1
 800e0c8:	3318      	adds	r3, #24
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d029      	beq.n	800e124 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800e0d0:	78fa      	ldrb	r2, [r7, #3]
 800e0d2:	6879      	ldr	r1, [r7, #4]
 800e0d4:	4613      	mov	r3, r2
 800e0d6:	009b      	lsls	r3, r3, #2
 800e0d8:	4413      	add	r3, r2
 800e0da:	009b      	lsls	r3, r3, #2
 800e0dc:	440b      	add	r3, r1
 800e0de:	3318      	adds	r3, #24
 800e0e0:	681a      	ldr	r2, [r3, #0]
 800e0e2:	78f9      	ldrb	r1, [r7, #3]
 800e0e4:	68f8      	ldr	r0, [r7, #12]
 800e0e6:	460b      	mov	r3, r1
 800e0e8:	00db      	lsls	r3, r3, #3
 800e0ea:	1a5b      	subs	r3, r3, r1
 800e0ec:	009b      	lsls	r3, r3, #2
 800e0ee:	4403      	add	r3, r0
 800e0f0:	3344      	adds	r3, #68	; 0x44
 800e0f2:	681b      	ldr	r3, [r3, #0]
 800e0f4:	fbb2 f1f3 	udiv	r1, r2, r3
 800e0f8:	fb03 f301 	mul.w	r3, r3, r1
 800e0fc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d110      	bne.n	800e124 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 800e102:	78fa      	ldrb	r2, [r7, #3]
 800e104:	6879      	ldr	r1, [r7, #4]
 800e106:	4613      	mov	r3, r2
 800e108:	009b      	lsls	r3, r3, #2
 800e10a:	4413      	add	r3, r2
 800e10c:	009b      	lsls	r3, r3, #2
 800e10e:	440b      	add	r3, r1
 800e110:	3318      	adds	r3, #24
 800e112:	2200      	movs	r2, #0
 800e114:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e116:	78f9      	ldrb	r1, [r7, #3]
 800e118:	2300      	movs	r3, #0
 800e11a:	2200      	movs	r2, #0
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f009 fa38 	bl	8017592 <USBD_LL_Transmit>
 800e122:	e015      	b.n	800e150 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 800e124:	68bb      	ldr	r3, [r7, #8]
 800e126:	2200      	movs	r2, #0
 800e128:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e132:	691b      	ldr	r3, [r3, #16]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d00b      	beq.n	800e150 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e13e:	691b      	ldr	r3, [r3, #16]
 800e140:	68ba      	ldr	r2, [r7, #8]
 800e142:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e146:	68ba      	ldr	r2, [r7, #8]
 800e148:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e14c:	78fa      	ldrb	r2, [r7, #3]
 800e14e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e150:	2300      	movs	r3, #0
}
 800e152:	4618      	mov	r0, r3
 800e154:	3710      	adds	r7, #16
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}

0800e15a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e15a:	b580      	push	{r7, lr}
 800e15c:	b084      	sub	sp, #16
 800e15e:	af00      	add	r7, sp, #0
 800e160:	6078      	str	r0, [r7, #4]
 800e162:	460b      	mov	r3, r1
 800e164:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e16c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e174:	2b00      	cmp	r3, #0
 800e176:	d101      	bne.n	800e17c <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e178:	2303      	movs	r3, #3
 800e17a:	e015      	b.n	800e1a8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e17c:	78fb      	ldrb	r3, [r7, #3]
 800e17e:	4619      	mov	r1, r3
 800e180:	6878      	ldr	r0, [r7, #4]
 800e182:	f009 fa48 	bl	8017616 <USBD_LL_GetRxDataSize>
 800e186:	4602      	mov	r2, r0
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e194:	68db      	ldr	r3, [r3, #12]
 800e196:	68fa      	ldr	r2, [r7, #12]
 800e198:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e19c:	68fa      	ldr	r2, [r7, #12]
 800e19e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e1a2:	4611      	mov	r1, r2
 800e1a4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e1a6:	2300      	movs	r3, #0
}
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	3710      	adds	r7, #16
 800e1ac:	46bd      	mov	sp, r7
 800e1ae:	bd80      	pop	{r7, pc}

0800e1b0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e1b0:	b580      	push	{r7, lr}
 800e1b2:	b084      	sub	sp, #16
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1be:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d101      	bne.n	800e1ca <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800e1c6:	2303      	movs	r3, #3
 800e1c8:	e01b      	b.n	800e202 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d015      	beq.n	800e200 <USBD_CDC_EP0_RxReady+0x50>
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e1da:	2bff      	cmp	r3, #255	; 0xff
 800e1dc:	d010      	beq.n	800e200 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e1e4:	689b      	ldr	r3, [r3, #8]
 800e1e6:	68fa      	ldr	r2, [r7, #12]
 800e1e8:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800e1ec:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e1ee:	68fa      	ldr	r2, [r7, #12]
 800e1f0:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e1f4:	b292      	uxth	r2, r2
 800e1f6:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	22ff      	movs	r2, #255	; 0xff
 800e1fc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e200:	2300      	movs	r3, #0
}
 800e202:	4618      	mov	r0, r3
 800e204:	3710      	adds	r7, #16
 800e206:	46bd      	mov	sp, r7
 800e208:	bd80      	pop	{r7, pc}
	...

0800e20c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e20c:	b480      	push	{r7}
 800e20e:	b083      	sub	sp, #12
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	2243      	movs	r2, #67	; 0x43
 800e218:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800e21a:	4b03      	ldr	r3, [pc, #12]	; (800e228 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	370c      	adds	r7, #12
 800e220:	46bd      	mov	sp, r7
 800e222:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e226:	4770      	bx	lr
 800e228:	200000d8 	.word	0x200000d8

0800e22c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e22c:	b480      	push	{r7}
 800e22e:	b083      	sub	sp, #12
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	2243      	movs	r2, #67	; 0x43
 800e238:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800e23a:	4b03      	ldr	r3, [pc, #12]	; (800e248 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800e23c:	4618      	mov	r0, r3
 800e23e:	370c      	adds	r7, #12
 800e240:	46bd      	mov	sp, r7
 800e242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e246:	4770      	bx	lr
 800e248:	20000094 	.word	0x20000094

0800e24c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e24c:	b480      	push	{r7}
 800e24e:	b083      	sub	sp, #12
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	2243      	movs	r2, #67	; 0x43
 800e258:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800e25a:	4b03      	ldr	r3, [pc, #12]	; (800e268 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800e25c:	4618      	mov	r0, r3
 800e25e:	370c      	adds	r7, #12
 800e260:	46bd      	mov	sp, r7
 800e262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e266:	4770      	bx	lr
 800e268:	2000011c 	.word	0x2000011c

0800e26c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e26c:	b480      	push	{r7}
 800e26e:	b083      	sub	sp, #12
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	220a      	movs	r2, #10
 800e278:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e27a:	4b03      	ldr	r3, [pc, #12]	; (800e288 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	370c      	adds	r7, #12
 800e280:	46bd      	mov	sp, r7
 800e282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e286:	4770      	bx	lr
 800e288:	20000050 	.word	0x20000050

0800e28c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e28c:	b480      	push	{r7}
 800e28e:	b083      	sub	sp, #12
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e296:	683b      	ldr	r3, [r7, #0]
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d101      	bne.n	800e2a0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e29c:	2303      	movs	r3, #3
 800e29e:	e004      	b.n	800e2aa <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	683a      	ldr	r2, [r7, #0]
 800e2a4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800e2a8:	2300      	movs	r3, #0
}
 800e2aa:	4618      	mov	r0, r3
 800e2ac:	370c      	adds	r7, #12
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b4:	4770      	bx	lr

0800e2b6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e2b6:	b480      	push	{r7}
 800e2b8:	b087      	sub	sp, #28
 800e2ba:	af00      	add	r7, sp, #0
 800e2bc:	60f8      	str	r0, [r7, #12]
 800e2be:	60b9      	str	r1, [r7, #8]
 800e2c0:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2c8:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800e2ca:	697b      	ldr	r3, [r7, #20]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d101      	bne.n	800e2d4 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e2d0:	2303      	movs	r3, #3
 800e2d2:	e008      	b.n	800e2e6 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 800e2d4:	697b      	ldr	r3, [r7, #20]
 800e2d6:	68ba      	ldr	r2, [r7, #8]
 800e2d8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e2dc:	697b      	ldr	r3, [r7, #20]
 800e2de:	687a      	ldr	r2, [r7, #4]
 800e2e0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e2e4:	2300      	movs	r3, #0
}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	371c      	adds	r7, #28
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f0:	4770      	bx	lr

0800e2f2 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e2f2:	b480      	push	{r7}
 800e2f4:	b085      	sub	sp, #20
 800e2f6:	af00      	add	r7, sp, #0
 800e2f8:	6078      	str	r0, [r7, #4]
 800e2fa:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e302:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	2b00      	cmp	r3, #0
 800e308:	d101      	bne.n	800e30e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800e30a:	2303      	movs	r3, #3
 800e30c:	e004      	b.n	800e318 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	683a      	ldr	r2, [r7, #0]
 800e312:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e316:	2300      	movs	r3, #0
}
 800e318:	4618      	mov	r0, r3
 800e31a:	3714      	adds	r7, #20
 800e31c:	46bd      	mov	sp, r7
 800e31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e322:	4770      	bx	lr

0800e324 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b084      	sub	sp, #16
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e332:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800e334:	2301      	movs	r3, #1
 800e336:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 800e338:	687b      	ldr	r3, [r7, #4]
 800e33a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d101      	bne.n	800e346 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e342:	2303      	movs	r3, #3
 800e344:	e01a      	b.n	800e37c <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 800e346:	68bb      	ldr	r3, [r7, #8]
 800e348:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d114      	bne.n	800e37a <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	2201      	movs	r2, #1
 800e354:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800e358:	68bb      	ldr	r3, [r7, #8]
 800e35a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800e362:	68bb      	ldr	r3, [r7, #8]
 800e364:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e36e:	2181      	movs	r1, #129	; 0x81
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f009 f90e 	bl	8017592 <USBD_LL_Transmit>

    ret = USBD_OK;
 800e376:	2300      	movs	r3, #0
 800e378:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e37a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e37c:	4618      	mov	r0, r3
 800e37e:	3710      	adds	r7, #16
 800e380:	46bd      	mov	sp, r7
 800e382:	bd80      	pop	{r7, pc}

0800e384 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b084      	sub	sp, #16
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e392:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800e394:	687b      	ldr	r3, [r7, #4]
 800e396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d101      	bne.n	800e3a2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800e39e:	2303      	movs	r3, #3
 800e3a0:	e016      	b.n	800e3d0 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	7c1b      	ldrb	r3, [r3, #16]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d109      	bne.n	800e3be <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e3b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e3b4:	2101      	movs	r1, #1
 800e3b6:	6878      	ldr	r0, [r7, #4]
 800e3b8:	f009 f90c 	bl	80175d4 <USBD_LL_PrepareReceive>
 800e3bc:	e007      	b.n	800e3ce <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e3c4:	2340      	movs	r3, #64	; 0x40
 800e3c6:	2101      	movs	r1, #1
 800e3c8:	6878      	ldr	r0, [r7, #4]
 800e3ca:	f009 f903 	bl	80175d4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e3ce:	2300      	movs	r3, #0
}
 800e3d0:	4618      	mov	r0, r3
 800e3d2:	3710      	adds	r7, #16
 800e3d4:	46bd      	mov	sp, r7
 800e3d6:	bd80      	pop	{r7, pc}

0800e3d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	b086      	sub	sp, #24
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	60f8      	str	r0, [r7, #12]
 800e3e0:	60b9      	str	r1, [r7, #8]
 800e3e2:	4613      	mov	r3, r2
 800e3e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d101      	bne.n	800e3f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e3ec:	2303      	movs	r3, #3
 800e3ee:	e01f      	b.n	800e430 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800e3f8:	68fb      	ldr	r3, [r7, #12]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	2200      	movs	r2, #0
 800e404:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d003      	beq.n	800e416 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	68ba      	ldr	r2, [r7, #8]
 800e412:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	2201      	movs	r2, #1
 800e41a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	79fa      	ldrb	r2, [r7, #7]
 800e422:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e424:	68f8      	ldr	r0, [r7, #12]
 800e426:	f008 ff7f 	bl	8017328 <USBD_LL_Init>
 800e42a:	4603      	mov	r3, r0
 800e42c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e42e:	7dfb      	ldrb	r3, [r7, #23]
}
 800e430:	4618      	mov	r0, r3
 800e432:	3718      	adds	r7, #24
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}

0800e438 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b084      	sub	sp, #16
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e442:	2300      	movs	r3, #0
 800e444:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d101      	bne.n	800e450 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e44c:	2303      	movs	r3, #3
 800e44e:	e016      	b.n	800e47e <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	683a      	ldr	r2, [r7, #0]
 800e454:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e460:	2b00      	cmp	r3, #0
 800e462:	d00b      	beq.n	800e47c <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e46c:	f107 020e 	add.w	r2, r7, #14
 800e470:	4610      	mov	r0, r2
 800e472:	4798      	blx	r3
 800e474:	4602      	mov	r2, r0
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 800e47c:	2300      	movs	r3, #0
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3710      	adds	r7, #16
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}

0800e486 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e486:	b580      	push	{r7, lr}
 800e488:	b082      	sub	sp, #8
 800e48a:	af00      	add	r7, sp, #0
 800e48c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f008 ff96 	bl	80173c0 <USBD_LL_Start>
 800e494:	4603      	mov	r3, r0
}
 800e496:	4618      	mov	r0, r3
 800e498:	3708      	adds	r7, #8
 800e49a:	46bd      	mov	sp, r7
 800e49c:	bd80      	pop	{r7, pc}

0800e49e <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e49e:	b480      	push	{r7}
 800e4a0:	b083      	sub	sp, #12
 800e4a2:	af00      	add	r7, sp, #0
 800e4a4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e4a6:	2300      	movs	r3, #0
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	370c      	adds	r7, #12
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b2:	4770      	bx	lr

0800e4b4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b084      	sub	sp, #16
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
 800e4bc:	460b      	mov	r3, r1
 800e4be:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e4c0:	2303      	movs	r3, #3
 800e4c2:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4ca:	2b00      	cmp	r3, #0
 800e4cc:	d009      	beq.n	800e4e2 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	78fa      	ldrb	r2, [r7, #3]
 800e4d8:	4611      	mov	r1, r2
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	4798      	blx	r3
 800e4de:	4603      	mov	r3, r0
 800e4e0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e4e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3710      	adds	r7, #16
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b082      	sub	sp, #8
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
 800e4f4:	460b      	mov	r3, r1
 800e4f6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d007      	beq.n	800e512 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e508:	685b      	ldr	r3, [r3, #4]
 800e50a:	78fa      	ldrb	r2, [r7, #3]
 800e50c:	4611      	mov	r1, r2
 800e50e:	6878      	ldr	r0, [r7, #4]
 800e510:	4798      	blx	r3
  }

  return USBD_OK;
 800e512:	2300      	movs	r3, #0
}
 800e514:	4618      	mov	r0, r3
 800e516:	3708      	adds	r7, #8
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}

0800e51c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b084      	sub	sp, #16
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e52c:	6839      	ldr	r1, [r7, #0]
 800e52e:	4618      	mov	r0, r3
 800e530:	f000 ff90 	bl	800f454 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	2201      	movs	r2, #1
 800e538:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e542:	461a      	mov	r2, r3
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e550:	f003 031f 	and.w	r3, r3, #31
 800e554:	2b02      	cmp	r3, #2
 800e556:	d01a      	beq.n	800e58e <USBD_LL_SetupStage+0x72>
 800e558:	2b02      	cmp	r3, #2
 800e55a:	d822      	bhi.n	800e5a2 <USBD_LL_SetupStage+0x86>
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d002      	beq.n	800e566 <USBD_LL_SetupStage+0x4a>
 800e560:	2b01      	cmp	r3, #1
 800e562:	d00a      	beq.n	800e57a <USBD_LL_SetupStage+0x5e>
 800e564:	e01d      	b.n	800e5a2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e566:	687b      	ldr	r3, [r7, #4]
 800e568:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e56c:	4619      	mov	r1, r3
 800e56e:	6878      	ldr	r0, [r7, #4]
 800e570:	f000 fa62 	bl	800ea38 <USBD_StdDevReq>
 800e574:	4603      	mov	r3, r0
 800e576:	73fb      	strb	r3, [r7, #15]
      break;
 800e578:	e020      	b.n	800e5bc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e580:	4619      	mov	r1, r3
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	f000 fac6 	bl	800eb14 <USBD_StdItfReq>
 800e588:	4603      	mov	r3, r0
 800e58a:	73fb      	strb	r3, [r7, #15]
      break;
 800e58c:	e016      	b.n	800e5bc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e594:	4619      	mov	r1, r3
 800e596:	6878      	ldr	r0, [r7, #4]
 800e598:	f000 fb05 	bl	800eba6 <USBD_StdEPReq>
 800e59c:	4603      	mov	r3, r0
 800e59e:	73fb      	strb	r3, [r7, #15]
      break;
 800e5a0:	e00c      	b.n	800e5bc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e5a8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e5ac:	b2db      	uxtb	r3, r3
 800e5ae:	4619      	mov	r1, r3
 800e5b0:	6878      	ldr	r0, [r7, #4]
 800e5b2:	f008 ff65 	bl	8017480 <USBD_LL_StallEP>
 800e5b6:	4603      	mov	r3, r0
 800e5b8:	73fb      	strb	r3, [r7, #15]
      break;
 800e5ba:	bf00      	nop
  }

  return ret;
 800e5bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3710      	adds	r7, #16
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}

0800e5c6 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e5c6:	b580      	push	{r7, lr}
 800e5c8:	b086      	sub	sp, #24
 800e5ca:	af00      	add	r7, sp, #0
 800e5cc:	60f8      	str	r0, [r7, #12]
 800e5ce:	460b      	mov	r3, r1
 800e5d0:	607a      	str	r2, [r7, #4]
 800e5d2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e5d4:	7afb      	ldrb	r3, [r7, #11]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d138      	bne.n	800e64c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e5e0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e5e8:	2b03      	cmp	r3, #3
 800e5ea:	d14a      	bne.n	800e682 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e5ec:	693b      	ldr	r3, [r7, #16]
 800e5ee:	689a      	ldr	r2, [r3, #8]
 800e5f0:	693b      	ldr	r3, [r7, #16]
 800e5f2:	68db      	ldr	r3, [r3, #12]
 800e5f4:	429a      	cmp	r2, r3
 800e5f6:	d913      	bls.n	800e620 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e5f8:	693b      	ldr	r3, [r7, #16]
 800e5fa:	689a      	ldr	r2, [r3, #8]
 800e5fc:	693b      	ldr	r3, [r7, #16]
 800e5fe:	68db      	ldr	r3, [r3, #12]
 800e600:	1ad2      	subs	r2, r2, r3
 800e602:	693b      	ldr	r3, [r7, #16]
 800e604:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e606:	693b      	ldr	r3, [r7, #16]
 800e608:	68da      	ldr	r2, [r3, #12]
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	689b      	ldr	r3, [r3, #8]
 800e60e:	4293      	cmp	r3, r2
 800e610:	bf28      	it	cs
 800e612:	4613      	movcs	r3, r2
 800e614:	461a      	mov	r2, r3
 800e616:	6879      	ldr	r1, [r7, #4]
 800e618:	68f8      	ldr	r0, [r7, #12]
 800e61a:	f001 f80f 	bl	800f63c <USBD_CtlContinueRx>
 800e61e:	e030      	b.n	800e682 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e626:	b2db      	uxtb	r3, r3
 800e628:	2b03      	cmp	r3, #3
 800e62a:	d10b      	bne.n	800e644 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e632:	691b      	ldr	r3, [r3, #16]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d005      	beq.n	800e644 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e63e:	691b      	ldr	r3, [r3, #16]
 800e640:	68f8      	ldr	r0, [r7, #12]
 800e642:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800e644:	68f8      	ldr	r0, [r7, #12]
 800e646:	f001 f80a 	bl	800f65e <USBD_CtlSendStatus>
 800e64a:	e01a      	b.n	800e682 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e652:	b2db      	uxtb	r3, r3
 800e654:	2b03      	cmp	r3, #3
 800e656:	d114      	bne.n	800e682 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e65e:	699b      	ldr	r3, [r3, #24]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d00e      	beq.n	800e682 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e66a:	699b      	ldr	r3, [r3, #24]
 800e66c:	7afa      	ldrb	r2, [r7, #11]
 800e66e:	4611      	mov	r1, r2
 800e670:	68f8      	ldr	r0, [r7, #12]
 800e672:	4798      	blx	r3
 800e674:	4603      	mov	r3, r0
 800e676:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e678:	7dfb      	ldrb	r3, [r7, #23]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d001      	beq.n	800e682 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800e67e:	7dfb      	ldrb	r3, [r7, #23]
 800e680:	e000      	b.n	800e684 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800e682:	2300      	movs	r3, #0
}
 800e684:	4618      	mov	r0, r3
 800e686:	3718      	adds	r7, #24
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b086      	sub	sp, #24
 800e690:	af00      	add	r7, sp, #0
 800e692:	60f8      	str	r0, [r7, #12]
 800e694:	460b      	mov	r3, r1
 800e696:	607a      	str	r2, [r7, #4]
 800e698:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e69a:	7afb      	ldrb	r3, [r7, #11]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d16b      	bne.n	800e778 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	3314      	adds	r3, #20
 800e6a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e6ac:	2b02      	cmp	r3, #2
 800e6ae:	d156      	bne.n	800e75e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800e6b0:	693b      	ldr	r3, [r7, #16]
 800e6b2:	689a      	ldr	r2, [r3, #8]
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	68db      	ldr	r3, [r3, #12]
 800e6b8:	429a      	cmp	r2, r3
 800e6ba:	d914      	bls.n	800e6e6 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e6bc:	693b      	ldr	r3, [r7, #16]
 800e6be:	689a      	ldr	r2, [r3, #8]
 800e6c0:	693b      	ldr	r3, [r7, #16]
 800e6c2:	68db      	ldr	r3, [r3, #12]
 800e6c4:	1ad2      	subs	r2, r2, r3
 800e6c6:	693b      	ldr	r3, [r7, #16]
 800e6c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	689b      	ldr	r3, [r3, #8]
 800e6ce:	461a      	mov	r2, r3
 800e6d0:	6879      	ldr	r1, [r7, #4]
 800e6d2:	68f8      	ldr	r0, [r7, #12]
 800e6d4:	f000 ff84 	bl	800f5e0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e6d8:	2300      	movs	r3, #0
 800e6da:	2200      	movs	r2, #0
 800e6dc:	2100      	movs	r1, #0
 800e6de:	68f8      	ldr	r0, [r7, #12]
 800e6e0:	f008 ff78 	bl	80175d4 <USBD_LL_PrepareReceive>
 800e6e4:	e03b      	b.n	800e75e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e6e6:	693b      	ldr	r3, [r7, #16]
 800e6e8:	68da      	ldr	r2, [r3, #12]
 800e6ea:	693b      	ldr	r3, [r7, #16]
 800e6ec:	689b      	ldr	r3, [r3, #8]
 800e6ee:	429a      	cmp	r2, r3
 800e6f0:	d11c      	bne.n	800e72c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e6f2:	693b      	ldr	r3, [r7, #16]
 800e6f4:	685a      	ldr	r2, [r3, #4]
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d316      	bcc.n	800e72c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e6fe:	693b      	ldr	r3, [r7, #16]
 800e700:	685a      	ldr	r2, [r3, #4]
 800e702:	68fb      	ldr	r3, [r7, #12]
 800e704:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e708:	429a      	cmp	r2, r3
 800e70a:	d20f      	bcs.n	800e72c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e70c:	2200      	movs	r2, #0
 800e70e:	2100      	movs	r1, #0
 800e710:	68f8      	ldr	r0, [r7, #12]
 800e712:	f000 ff65 	bl	800f5e0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e716:	68fb      	ldr	r3, [r7, #12]
 800e718:	2200      	movs	r2, #0
 800e71a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e71e:	2300      	movs	r3, #0
 800e720:	2200      	movs	r2, #0
 800e722:	2100      	movs	r1, #0
 800e724:	68f8      	ldr	r0, [r7, #12]
 800e726:	f008 ff55 	bl	80175d4 <USBD_LL_PrepareReceive>
 800e72a:	e018      	b.n	800e75e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e732:	b2db      	uxtb	r3, r3
 800e734:	2b03      	cmp	r3, #3
 800e736:	d10b      	bne.n	800e750 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e73e:	68db      	ldr	r3, [r3, #12]
 800e740:	2b00      	cmp	r3, #0
 800e742:	d005      	beq.n	800e750 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 800e744:	68fb      	ldr	r3, [r7, #12]
 800e746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e74a:	68db      	ldr	r3, [r3, #12]
 800e74c:	68f8      	ldr	r0, [r7, #12]
 800e74e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e750:	2180      	movs	r1, #128	; 0x80
 800e752:	68f8      	ldr	r0, [r7, #12]
 800e754:	f008 fe94 	bl	8017480 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e758:	68f8      	ldr	r0, [r7, #12]
 800e75a:	f000 ff93 	bl	800f684 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e764:	2b01      	cmp	r3, #1
 800e766:	d122      	bne.n	800e7ae <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e768:	68f8      	ldr	r0, [r7, #12]
 800e76a:	f7ff fe98 	bl	800e49e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	2200      	movs	r2, #0
 800e772:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e776:	e01a      	b.n	800e7ae <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e77e:	b2db      	uxtb	r3, r3
 800e780:	2b03      	cmp	r3, #3
 800e782:	d114      	bne.n	800e7ae <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e78a:	695b      	ldr	r3, [r3, #20]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d00e      	beq.n	800e7ae <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800e790:	68fb      	ldr	r3, [r7, #12]
 800e792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e796:	695b      	ldr	r3, [r3, #20]
 800e798:	7afa      	ldrb	r2, [r7, #11]
 800e79a:	4611      	mov	r1, r2
 800e79c:	68f8      	ldr	r0, [r7, #12]
 800e79e:	4798      	blx	r3
 800e7a0:	4603      	mov	r3, r0
 800e7a2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 800e7a4:	7dfb      	ldrb	r3, [r7, #23]
 800e7a6:	2b00      	cmp	r3, #0
 800e7a8:	d001      	beq.n	800e7ae <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800e7aa:	7dfb      	ldrb	r3, [r7, #23]
 800e7ac:	e000      	b.n	800e7b0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 800e7ae:	2300      	movs	r3, #0
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3718      	adds	r7, #24
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	bd80      	pop	{r7, pc}

0800e7b8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b082      	sub	sp, #8
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	2201      	movs	r2, #1
 800e7c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d101      	bne.n	800e7ec <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800e7e8:	2303      	movs	r3, #3
 800e7ea:	e02f      	b.n	800e84c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d00f      	beq.n	800e816 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e7fc:	685b      	ldr	r3, [r3, #4]
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d009      	beq.n	800e816 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e808:	685b      	ldr	r3, [r3, #4]
 800e80a:	687a      	ldr	r2, [r7, #4]
 800e80c:	6852      	ldr	r2, [r2, #4]
 800e80e:	b2d2      	uxtb	r2, r2
 800e810:	4611      	mov	r1, r2
 800e812:	6878      	ldr	r0, [r7, #4]
 800e814:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e816:	2340      	movs	r3, #64	; 0x40
 800e818:	2200      	movs	r2, #0
 800e81a:	2100      	movs	r1, #0
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f008 fdea 	bl	80173f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	2201      	movs	r2, #1
 800e826:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	2240      	movs	r2, #64	; 0x40
 800e82e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e832:	2340      	movs	r3, #64	; 0x40
 800e834:	2200      	movs	r2, #0
 800e836:	2180      	movs	r1, #128	; 0x80
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f008 fddc 	bl	80173f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2201      	movs	r2, #1
 800e842:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2240      	movs	r2, #64	; 0x40
 800e848:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800e84a:	2300      	movs	r3, #0
}
 800e84c:	4618      	mov	r0, r3
 800e84e:	3708      	adds	r7, #8
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}

0800e854 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e854:	b480      	push	{r7}
 800e856:	b083      	sub	sp, #12
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
 800e85c:	460b      	mov	r3, r1
 800e85e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	78fa      	ldrb	r2, [r7, #3]
 800e864:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e866:	2300      	movs	r3, #0
}
 800e868:	4618      	mov	r0, r3
 800e86a:	370c      	adds	r7, #12
 800e86c:	46bd      	mov	sp, r7
 800e86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e872:	4770      	bx	lr

0800e874 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e874:	b480      	push	{r7}
 800e876:	b083      	sub	sp, #12
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e882:	b2da      	uxtb	r2, r3
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2204      	movs	r2, #4
 800e88e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e892:	2300      	movs	r3, #0
}
 800e894:	4618      	mov	r0, r3
 800e896:	370c      	adds	r7, #12
 800e898:	46bd      	mov	sp, r7
 800e89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e89e:	4770      	bx	lr

0800e8a0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b083      	sub	sp, #12
 800e8a4:	af00      	add	r7, sp, #0
 800e8a6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8ae:	b2db      	uxtb	r3, r3
 800e8b0:	2b04      	cmp	r3, #4
 800e8b2:	d106      	bne.n	800e8c2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e8ba:	b2da      	uxtb	r2, r3
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e8c2:	2300      	movs	r3, #0
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	370c      	adds	r7, #12
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ce:	4770      	bx	lr

0800e8d0 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e8d0:	b580      	push	{r7, lr}
 800e8d2:	b082      	sub	sp, #8
 800e8d4:	af00      	add	r7, sp, #0
 800e8d6:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d101      	bne.n	800e8e6 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 800e8e2:	2303      	movs	r3, #3
 800e8e4:	e012      	b.n	800e90c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e8ec:	b2db      	uxtb	r3, r3
 800e8ee:	2b03      	cmp	r3, #3
 800e8f0:	d10b      	bne.n	800e90a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8f8:	69db      	ldr	r3, [r3, #28]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d005      	beq.n	800e90a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e904:	69db      	ldr	r3, [r3, #28]
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e90a:	2300      	movs	r3, #0
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	3708      	adds	r7, #8
 800e910:	46bd      	mov	sp, r7
 800e912:	bd80      	pop	{r7, pc}

0800e914 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e914:	b580      	push	{r7, lr}
 800e916:	b082      	sub	sp, #8
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
 800e91c:	460b      	mov	r3, r1
 800e91e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e926:	2b00      	cmp	r3, #0
 800e928:	d101      	bne.n	800e92e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e92a:	2303      	movs	r3, #3
 800e92c:	e014      	b.n	800e958 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e934:	b2db      	uxtb	r3, r3
 800e936:	2b03      	cmp	r3, #3
 800e938:	d10d      	bne.n	800e956 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e940:	6a1b      	ldr	r3, [r3, #32]
 800e942:	2b00      	cmp	r3, #0
 800e944:	d007      	beq.n	800e956 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e94c:	6a1b      	ldr	r3, [r3, #32]
 800e94e:	78fa      	ldrb	r2, [r7, #3]
 800e950:	4611      	mov	r1, r2
 800e952:	6878      	ldr	r0, [r7, #4]
 800e954:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e956:	2300      	movs	r3, #0
}
 800e958:	4618      	mov	r0, r3
 800e95a:	3708      	adds	r7, #8
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd80      	pop	{r7, pc}

0800e960 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e960:	b580      	push	{r7, lr}
 800e962:	b082      	sub	sp, #8
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	460b      	mov	r3, r1
 800e96a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e972:	2b00      	cmp	r3, #0
 800e974:	d101      	bne.n	800e97a <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 800e976:	2303      	movs	r3, #3
 800e978:	e014      	b.n	800e9a4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e980:	b2db      	uxtb	r3, r3
 800e982:	2b03      	cmp	r3, #3
 800e984:	d10d      	bne.n	800e9a2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e98c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d007      	beq.n	800e9a2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e99a:	78fa      	ldrb	r2, [r7, #3]
 800e99c:	4611      	mov	r1, r2
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e9a2:	2300      	movs	r3, #0
}
 800e9a4:	4618      	mov	r0, r3
 800e9a6:	3708      	adds	r7, #8
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	bd80      	pop	{r7, pc}

0800e9ac <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e9ac:	b480      	push	{r7}
 800e9ae:	b083      	sub	sp, #12
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e9b4:	2300      	movs	r3, #0
}
 800e9b6:	4618      	mov	r0, r3
 800e9b8:	370c      	adds	r7, #12
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c0:	4770      	bx	lr

0800e9c2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e9c2:	b580      	push	{r7, lr}
 800e9c4:	b082      	sub	sp, #8
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2201      	movs	r2, #1
 800e9ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d009      	beq.n	800e9f0 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9e2:	685b      	ldr	r3, [r3, #4]
 800e9e4:	687a      	ldr	r2, [r7, #4]
 800e9e6:	6852      	ldr	r2, [r2, #4]
 800e9e8:	b2d2      	uxtb	r2, r2
 800e9ea:	4611      	mov	r1, r2
 800e9ec:	6878      	ldr	r0, [r7, #4]
 800e9ee:	4798      	blx	r3
  }

  return USBD_OK;
 800e9f0:	2300      	movs	r3, #0
}
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	3708      	adds	r7, #8
 800e9f6:	46bd      	mov	sp, r7
 800e9f8:	bd80      	pop	{r7, pc}

0800e9fa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e9fa:	b480      	push	{r7}
 800e9fc:	b087      	sub	sp, #28
 800e9fe:	af00      	add	r7, sp, #0
 800ea00:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ea06:	697b      	ldr	r3, [r7, #20]
 800ea08:	781b      	ldrb	r3, [r3, #0]
 800ea0a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	3301      	adds	r3, #1
 800ea10:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ea12:	697b      	ldr	r3, [r7, #20]
 800ea14:	781b      	ldrb	r3, [r3, #0]
 800ea16:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ea18:	8a3b      	ldrh	r3, [r7, #16]
 800ea1a:	021b      	lsls	r3, r3, #8
 800ea1c:	b21a      	sxth	r2, r3
 800ea1e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ea22:	4313      	orrs	r3, r2
 800ea24:	b21b      	sxth	r3, r3
 800ea26:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ea28:	89fb      	ldrh	r3, [r7, #14]
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	371c      	adds	r7, #28
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea34:	4770      	bx	lr
	...

0800ea38 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b084      	sub	sp, #16
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
 800ea40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ea42:	2300      	movs	r3, #0
 800ea44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ea46:	683b      	ldr	r3, [r7, #0]
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ea4e:	2b40      	cmp	r3, #64	; 0x40
 800ea50:	d005      	beq.n	800ea5e <USBD_StdDevReq+0x26>
 800ea52:	2b40      	cmp	r3, #64	; 0x40
 800ea54:	d853      	bhi.n	800eafe <USBD_StdDevReq+0xc6>
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d00b      	beq.n	800ea72 <USBD_StdDevReq+0x3a>
 800ea5a:	2b20      	cmp	r3, #32
 800ea5c:	d14f      	bne.n	800eafe <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea64:	689b      	ldr	r3, [r3, #8]
 800ea66:	6839      	ldr	r1, [r7, #0]
 800ea68:	6878      	ldr	r0, [r7, #4]
 800ea6a:	4798      	blx	r3
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	73fb      	strb	r3, [r7, #15]
      break;
 800ea70:	e04a      	b.n	800eb08 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	785b      	ldrb	r3, [r3, #1]
 800ea76:	2b09      	cmp	r3, #9
 800ea78:	d83b      	bhi.n	800eaf2 <USBD_StdDevReq+0xba>
 800ea7a:	a201      	add	r2, pc, #4	; (adr r2, 800ea80 <USBD_StdDevReq+0x48>)
 800ea7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ea80:	0800ead5 	.word	0x0800ead5
 800ea84:	0800eae9 	.word	0x0800eae9
 800ea88:	0800eaf3 	.word	0x0800eaf3
 800ea8c:	0800eadf 	.word	0x0800eadf
 800ea90:	0800eaf3 	.word	0x0800eaf3
 800ea94:	0800eab3 	.word	0x0800eab3
 800ea98:	0800eaa9 	.word	0x0800eaa9
 800ea9c:	0800eaf3 	.word	0x0800eaf3
 800eaa0:	0800eacb 	.word	0x0800eacb
 800eaa4:	0800eabd 	.word	0x0800eabd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800eaa8:	6839      	ldr	r1, [r7, #0]
 800eaaa:	6878      	ldr	r0, [r7, #4]
 800eaac:	f000 f9de 	bl	800ee6c <USBD_GetDescriptor>
          break;
 800eab0:	e024      	b.n	800eafc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800eab2:	6839      	ldr	r1, [r7, #0]
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f000 fb43 	bl	800f140 <USBD_SetAddress>
          break;
 800eaba:	e01f      	b.n	800eafc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800eabc:	6839      	ldr	r1, [r7, #0]
 800eabe:	6878      	ldr	r0, [r7, #4]
 800eac0:	f000 fb82 	bl	800f1c8 <USBD_SetConfig>
 800eac4:	4603      	mov	r3, r0
 800eac6:	73fb      	strb	r3, [r7, #15]
          break;
 800eac8:	e018      	b.n	800eafc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800eaca:	6839      	ldr	r1, [r7, #0]
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f000 fc21 	bl	800f314 <USBD_GetConfig>
          break;
 800ead2:	e013      	b.n	800eafc <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ead4:	6839      	ldr	r1, [r7, #0]
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f000 fc52 	bl	800f380 <USBD_GetStatus>
          break;
 800eadc:	e00e      	b.n	800eafc <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800eade:	6839      	ldr	r1, [r7, #0]
 800eae0:	6878      	ldr	r0, [r7, #4]
 800eae2:	f000 fc81 	bl	800f3e8 <USBD_SetFeature>
          break;
 800eae6:	e009      	b.n	800eafc <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800eae8:	6839      	ldr	r1, [r7, #0]
 800eaea:	6878      	ldr	r0, [r7, #4]
 800eaec:	f000 fc90 	bl	800f410 <USBD_ClrFeature>
          break;
 800eaf0:	e004      	b.n	800eafc <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800eaf2:	6839      	ldr	r1, [r7, #0]
 800eaf4:	6878      	ldr	r0, [r7, #4]
 800eaf6:	f000 fce7 	bl	800f4c8 <USBD_CtlError>
          break;
 800eafa:	bf00      	nop
      }
      break;
 800eafc:	e004      	b.n	800eb08 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800eafe:	6839      	ldr	r1, [r7, #0]
 800eb00:	6878      	ldr	r0, [r7, #4]
 800eb02:	f000 fce1 	bl	800f4c8 <USBD_CtlError>
      break;
 800eb06:	bf00      	nop
  }

  return ret;
 800eb08:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb0a:	4618      	mov	r0, r3
 800eb0c:	3710      	adds	r7, #16
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}
 800eb12:	bf00      	nop

0800eb14 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb14:	b580      	push	{r7, lr}
 800eb16:	b084      	sub	sp, #16
 800eb18:	af00      	add	r7, sp, #0
 800eb1a:	6078      	str	r0, [r7, #4]
 800eb1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800eb1e:	2300      	movs	r3, #0
 800eb20:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800eb22:	683b      	ldr	r3, [r7, #0]
 800eb24:	781b      	ldrb	r3, [r3, #0]
 800eb26:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eb2a:	2b40      	cmp	r3, #64	; 0x40
 800eb2c:	d005      	beq.n	800eb3a <USBD_StdItfReq+0x26>
 800eb2e:	2b40      	cmp	r3, #64	; 0x40
 800eb30:	d82f      	bhi.n	800eb92 <USBD_StdItfReq+0x7e>
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d001      	beq.n	800eb3a <USBD_StdItfReq+0x26>
 800eb36:	2b20      	cmp	r3, #32
 800eb38:	d12b      	bne.n	800eb92 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb40:	b2db      	uxtb	r3, r3
 800eb42:	3b01      	subs	r3, #1
 800eb44:	2b02      	cmp	r3, #2
 800eb46:	d81d      	bhi.n	800eb84 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800eb48:	683b      	ldr	r3, [r7, #0]
 800eb4a:	889b      	ldrh	r3, [r3, #4]
 800eb4c:	b2db      	uxtb	r3, r3
 800eb4e:	2b01      	cmp	r3, #1
 800eb50:	d813      	bhi.n	800eb7a <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb58:	689b      	ldr	r3, [r3, #8]
 800eb5a:	6839      	ldr	r1, [r7, #0]
 800eb5c:	6878      	ldr	r0, [r7, #4]
 800eb5e:	4798      	blx	r3
 800eb60:	4603      	mov	r3, r0
 800eb62:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	88db      	ldrh	r3, [r3, #6]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d110      	bne.n	800eb8e <USBD_StdItfReq+0x7a>
 800eb6c:	7bfb      	ldrb	r3, [r7, #15]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d10d      	bne.n	800eb8e <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f000 fd73 	bl	800f65e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800eb78:	e009      	b.n	800eb8e <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 800eb7a:	6839      	ldr	r1, [r7, #0]
 800eb7c:	6878      	ldr	r0, [r7, #4]
 800eb7e:	f000 fca3 	bl	800f4c8 <USBD_CtlError>
          break;
 800eb82:	e004      	b.n	800eb8e <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 800eb84:	6839      	ldr	r1, [r7, #0]
 800eb86:	6878      	ldr	r0, [r7, #4]
 800eb88:	f000 fc9e 	bl	800f4c8 <USBD_CtlError>
          break;
 800eb8c:	e000      	b.n	800eb90 <USBD_StdItfReq+0x7c>
          break;
 800eb8e:	bf00      	nop
      }
      break;
 800eb90:	e004      	b.n	800eb9c <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 800eb92:	6839      	ldr	r1, [r7, #0]
 800eb94:	6878      	ldr	r0, [r7, #4]
 800eb96:	f000 fc97 	bl	800f4c8 <USBD_CtlError>
      break;
 800eb9a:	bf00      	nop
  }

  return ret;
 800eb9c:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3710      	adds	r7, #16
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}

0800eba6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eba6:	b580      	push	{r7, lr}
 800eba8:	b084      	sub	sp, #16
 800ebaa:	af00      	add	r7, sp, #0
 800ebac:	6078      	str	r0, [r7, #4]
 800ebae:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	889b      	ldrh	r3, [r3, #4]
 800ebb8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	781b      	ldrb	r3, [r3, #0]
 800ebbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ebc2:	2b40      	cmp	r3, #64	; 0x40
 800ebc4:	d007      	beq.n	800ebd6 <USBD_StdEPReq+0x30>
 800ebc6:	2b40      	cmp	r3, #64	; 0x40
 800ebc8:	f200 8145 	bhi.w	800ee56 <USBD_StdEPReq+0x2b0>
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d00c      	beq.n	800ebea <USBD_StdEPReq+0x44>
 800ebd0:	2b20      	cmp	r3, #32
 800ebd2:	f040 8140 	bne.w	800ee56 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebdc:	689b      	ldr	r3, [r3, #8]
 800ebde:	6839      	ldr	r1, [r7, #0]
 800ebe0:	6878      	ldr	r0, [r7, #4]
 800ebe2:	4798      	blx	r3
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	73fb      	strb	r3, [r7, #15]
      break;
 800ebe8:	e13a      	b.n	800ee60 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	785b      	ldrb	r3, [r3, #1]
 800ebee:	2b03      	cmp	r3, #3
 800ebf0:	d007      	beq.n	800ec02 <USBD_StdEPReq+0x5c>
 800ebf2:	2b03      	cmp	r3, #3
 800ebf4:	f300 8129 	bgt.w	800ee4a <USBD_StdEPReq+0x2a4>
 800ebf8:	2b00      	cmp	r3, #0
 800ebfa:	d07f      	beq.n	800ecfc <USBD_StdEPReq+0x156>
 800ebfc:	2b01      	cmp	r3, #1
 800ebfe:	d03c      	beq.n	800ec7a <USBD_StdEPReq+0xd4>
 800ec00:	e123      	b.n	800ee4a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec08:	b2db      	uxtb	r3, r3
 800ec0a:	2b02      	cmp	r3, #2
 800ec0c:	d002      	beq.n	800ec14 <USBD_StdEPReq+0x6e>
 800ec0e:	2b03      	cmp	r3, #3
 800ec10:	d016      	beq.n	800ec40 <USBD_StdEPReq+0x9a>
 800ec12:	e02c      	b.n	800ec6e <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec14:	7bbb      	ldrb	r3, [r7, #14]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d00d      	beq.n	800ec36 <USBD_StdEPReq+0x90>
 800ec1a:	7bbb      	ldrb	r3, [r7, #14]
 800ec1c:	2b80      	cmp	r3, #128	; 0x80
 800ec1e:	d00a      	beq.n	800ec36 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ec20:	7bbb      	ldrb	r3, [r7, #14]
 800ec22:	4619      	mov	r1, r3
 800ec24:	6878      	ldr	r0, [r7, #4]
 800ec26:	f008 fc2b 	bl	8017480 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ec2a:	2180      	movs	r1, #128	; 0x80
 800ec2c:	6878      	ldr	r0, [r7, #4]
 800ec2e:	f008 fc27 	bl	8017480 <USBD_LL_StallEP>
 800ec32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ec34:	e020      	b.n	800ec78 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 800ec36:	6839      	ldr	r1, [r7, #0]
 800ec38:	6878      	ldr	r0, [r7, #4]
 800ec3a:	f000 fc45 	bl	800f4c8 <USBD_CtlError>
              break;
 800ec3e:	e01b      	b.n	800ec78 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	885b      	ldrh	r3, [r3, #2]
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d10e      	bne.n	800ec66 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ec48:	7bbb      	ldrb	r3, [r7, #14]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d00b      	beq.n	800ec66 <USBD_StdEPReq+0xc0>
 800ec4e:	7bbb      	ldrb	r3, [r7, #14]
 800ec50:	2b80      	cmp	r3, #128	; 0x80
 800ec52:	d008      	beq.n	800ec66 <USBD_StdEPReq+0xc0>
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	88db      	ldrh	r3, [r3, #6]
 800ec58:	2b00      	cmp	r3, #0
 800ec5a:	d104      	bne.n	800ec66 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ec5c:	7bbb      	ldrb	r3, [r7, #14]
 800ec5e:	4619      	mov	r1, r3
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f008 fc0d 	bl	8017480 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	f000 fcf9 	bl	800f65e <USBD_CtlSendStatus>

              break;
 800ec6c:	e004      	b.n	800ec78 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 800ec6e:	6839      	ldr	r1, [r7, #0]
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f000 fc29 	bl	800f4c8 <USBD_CtlError>
              break;
 800ec76:	bf00      	nop
          }
          break;
 800ec78:	e0ec      	b.n	800ee54 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec80:	b2db      	uxtb	r3, r3
 800ec82:	2b02      	cmp	r3, #2
 800ec84:	d002      	beq.n	800ec8c <USBD_StdEPReq+0xe6>
 800ec86:	2b03      	cmp	r3, #3
 800ec88:	d016      	beq.n	800ecb8 <USBD_StdEPReq+0x112>
 800ec8a:	e030      	b.n	800ecee <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ec8c:	7bbb      	ldrb	r3, [r7, #14]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d00d      	beq.n	800ecae <USBD_StdEPReq+0x108>
 800ec92:	7bbb      	ldrb	r3, [r7, #14]
 800ec94:	2b80      	cmp	r3, #128	; 0x80
 800ec96:	d00a      	beq.n	800ecae <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ec98:	7bbb      	ldrb	r3, [r7, #14]
 800ec9a:	4619      	mov	r1, r3
 800ec9c:	6878      	ldr	r0, [r7, #4]
 800ec9e:	f008 fbef 	bl	8017480 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800eca2:	2180      	movs	r1, #128	; 0x80
 800eca4:	6878      	ldr	r0, [r7, #4]
 800eca6:	f008 fbeb 	bl	8017480 <USBD_LL_StallEP>
 800ecaa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ecac:	e025      	b.n	800ecfa <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 800ecae:	6839      	ldr	r1, [r7, #0]
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f000 fc09 	bl	800f4c8 <USBD_CtlError>
              break;
 800ecb6:	e020      	b.n	800ecfa <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	885b      	ldrh	r3, [r3, #2]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d11b      	bne.n	800ecf8 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ecc0:	7bbb      	ldrb	r3, [r7, #14]
 800ecc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d004      	beq.n	800ecd4 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ecca:	7bbb      	ldrb	r3, [r7, #14]
 800eccc:	4619      	mov	r1, r3
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f008 fbf5 	bl	80174be <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ecd4:	6878      	ldr	r0, [r7, #4]
 800ecd6:	f000 fcc2 	bl	800f65e <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ece0:	689b      	ldr	r3, [r3, #8]
 800ece2:	6839      	ldr	r1, [r7, #0]
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	4798      	blx	r3
 800ece8:	4603      	mov	r3, r0
 800ecea:	73fb      	strb	r3, [r7, #15]
              }
              break;
 800ecec:	e004      	b.n	800ecf8 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 800ecee:	6839      	ldr	r1, [r7, #0]
 800ecf0:	6878      	ldr	r0, [r7, #4]
 800ecf2:	f000 fbe9 	bl	800f4c8 <USBD_CtlError>
              break;
 800ecf6:	e000      	b.n	800ecfa <USBD_StdEPReq+0x154>
              break;
 800ecf8:	bf00      	nop
          }
          break;
 800ecfa:	e0ab      	b.n	800ee54 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed02:	b2db      	uxtb	r3, r3
 800ed04:	2b02      	cmp	r3, #2
 800ed06:	d002      	beq.n	800ed0e <USBD_StdEPReq+0x168>
 800ed08:	2b03      	cmp	r3, #3
 800ed0a:	d032      	beq.n	800ed72 <USBD_StdEPReq+0x1cc>
 800ed0c:	e097      	b.n	800ee3e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ed0e:	7bbb      	ldrb	r3, [r7, #14]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d007      	beq.n	800ed24 <USBD_StdEPReq+0x17e>
 800ed14:	7bbb      	ldrb	r3, [r7, #14]
 800ed16:	2b80      	cmp	r3, #128	; 0x80
 800ed18:	d004      	beq.n	800ed24 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 800ed1a:	6839      	ldr	r1, [r7, #0]
 800ed1c:	6878      	ldr	r0, [r7, #4]
 800ed1e:	f000 fbd3 	bl	800f4c8 <USBD_CtlError>
                break;
 800ed22:	e091      	b.n	800ee48 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	da0b      	bge.n	800ed44 <USBD_StdEPReq+0x19e>
 800ed2c:	7bbb      	ldrb	r3, [r7, #14]
 800ed2e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ed32:	4613      	mov	r3, r2
 800ed34:	009b      	lsls	r3, r3, #2
 800ed36:	4413      	add	r3, r2
 800ed38:	009b      	lsls	r3, r3, #2
 800ed3a:	3310      	adds	r3, #16
 800ed3c:	687a      	ldr	r2, [r7, #4]
 800ed3e:	4413      	add	r3, r2
 800ed40:	3304      	adds	r3, #4
 800ed42:	e00b      	b.n	800ed5c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ed44:	7bbb      	ldrb	r3, [r7, #14]
 800ed46:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ed4a:	4613      	mov	r3, r2
 800ed4c:	009b      	lsls	r3, r3, #2
 800ed4e:	4413      	add	r3, r2
 800ed50:	009b      	lsls	r3, r3, #2
 800ed52:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ed56:	687a      	ldr	r2, [r7, #4]
 800ed58:	4413      	add	r3, r2
 800ed5a:	3304      	adds	r3, #4
 800ed5c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	2200      	movs	r2, #0
 800ed62:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	2202      	movs	r2, #2
 800ed68:	4619      	mov	r1, r3
 800ed6a:	6878      	ldr	r0, [r7, #4]
 800ed6c:	f000 fc1d 	bl	800f5aa <USBD_CtlSendData>
              break;
 800ed70:	e06a      	b.n	800ee48 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ed72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	da11      	bge.n	800ed9e <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ed7a:	7bbb      	ldrb	r3, [r7, #14]
 800ed7c:	f003 020f 	and.w	r2, r3, #15
 800ed80:	6879      	ldr	r1, [r7, #4]
 800ed82:	4613      	mov	r3, r2
 800ed84:	009b      	lsls	r3, r3, #2
 800ed86:	4413      	add	r3, r2
 800ed88:	009b      	lsls	r3, r3, #2
 800ed8a:	440b      	add	r3, r1
 800ed8c:	3324      	adds	r3, #36	; 0x24
 800ed8e:	881b      	ldrh	r3, [r3, #0]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d117      	bne.n	800edc4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800ed94:	6839      	ldr	r1, [r7, #0]
 800ed96:	6878      	ldr	r0, [r7, #4]
 800ed98:	f000 fb96 	bl	800f4c8 <USBD_CtlError>
                  break;
 800ed9c:	e054      	b.n	800ee48 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ed9e:	7bbb      	ldrb	r3, [r7, #14]
 800eda0:	f003 020f 	and.w	r2, r3, #15
 800eda4:	6879      	ldr	r1, [r7, #4]
 800eda6:	4613      	mov	r3, r2
 800eda8:	009b      	lsls	r3, r3, #2
 800edaa:	4413      	add	r3, r2
 800edac:	009b      	lsls	r3, r3, #2
 800edae:	440b      	add	r3, r1
 800edb0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800edb4:	881b      	ldrh	r3, [r3, #0]
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d104      	bne.n	800edc4 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800edba:	6839      	ldr	r1, [r7, #0]
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f000 fb83 	bl	800f4c8 <USBD_CtlError>
                  break;
 800edc2:	e041      	b.n	800ee48 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800edc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	da0b      	bge.n	800ede4 <USBD_StdEPReq+0x23e>
 800edcc:	7bbb      	ldrb	r3, [r7, #14]
 800edce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800edd2:	4613      	mov	r3, r2
 800edd4:	009b      	lsls	r3, r3, #2
 800edd6:	4413      	add	r3, r2
 800edd8:	009b      	lsls	r3, r3, #2
 800edda:	3310      	adds	r3, #16
 800eddc:	687a      	ldr	r2, [r7, #4]
 800edde:	4413      	add	r3, r2
 800ede0:	3304      	adds	r3, #4
 800ede2:	e00b      	b.n	800edfc <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ede4:	7bbb      	ldrb	r3, [r7, #14]
 800ede6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800edea:	4613      	mov	r3, r2
 800edec:	009b      	lsls	r3, r3, #2
 800edee:	4413      	add	r3, r2
 800edf0:	009b      	lsls	r3, r3, #2
 800edf2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800edf6:	687a      	ldr	r2, [r7, #4]
 800edf8:	4413      	add	r3, r2
 800edfa:	3304      	adds	r3, #4
 800edfc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800edfe:	7bbb      	ldrb	r3, [r7, #14]
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d002      	beq.n	800ee0a <USBD_StdEPReq+0x264>
 800ee04:	7bbb      	ldrb	r3, [r7, #14]
 800ee06:	2b80      	cmp	r3, #128	; 0x80
 800ee08:	d103      	bne.n	800ee12 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	601a      	str	r2, [r3, #0]
 800ee10:	e00e      	b.n	800ee30 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800ee12:	7bbb      	ldrb	r3, [r7, #14]
 800ee14:	4619      	mov	r1, r3
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f008 fb70 	bl	80174fc <USBD_LL_IsStallEP>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d003      	beq.n	800ee2a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 800ee22:	68bb      	ldr	r3, [r7, #8]
 800ee24:	2201      	movs	r2, #1
 800ee26:	601a      	str	r2, [r3, #0]
 800ee28:	e002      	b.n	800ee30 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ee30:	68bb      	ldr	r3, [r7, #8]
 800ee32:	2202      	movs	r2, #2
 800ee34:	4619      	mov	r1, r3
 800ee36:	6878      	ldr	r0, [r7, #4]
 800ee38:	f000 fbb7 	bl	800f5aa <USBD_CtlSendData>
              break;
 800ee3c:	e004      	b.n	800ee48 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800ee3e:	6839      	ldr	r1, [r7, #0]
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f000 fb41 	bl	800f4c8 <USBD_CtlError>
              break;
 800ee46:	bf00      	nop
          }
          break;
 800ee48:	e004      	b.n	800ee54 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800ee4a:	6839      	ldr	r1, [r7, #0]
 800ee4c:	6878      	ldr	r0, [r7, #4]
 800ee4e:	f000 fb3b 	bl	800f4c8 <USBD_CtlError>
          break;
 800ee52:	bf00      	nop
      }
      break;
 800ee54:	e004      	b.n	800ee60 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800ee56:	6839      	ldr	r1, [r7, #0]
 800ee58:	6878      	ldr	r0, [r7, #4]
 800ee5a:	f000 fb35 	bl	800f4c8 <USBD_CtlError>
      break;
 800ee5e:	bf00      	nop
  }

  return ret;
 800ee60:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee62:	4618      	mov	r0, r3
 800ee64:	3710      	adds	r7, #16
 800ee66:	46bd      	mov	sp, r7
 800ee68:	bd80      	pop	{r7, pc}
	...

0800ee6c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee6c:	b580      	push	{r7, lr}
 800ee6e:	b084      	sub	sp, #16
 800ee70:	af00      	add	r7, sp, #0
 800ee72:	6078      	str	r0, [r7, #4]
 800ee74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ee76:	2300      	movs	r3, #0
 800ee78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ee7e:	2300      	movs	r3, #0
 800ee80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	885b      	ldrh	r3, [r3, #2]
 800ee86:	0a1b      	lsrs	r3, r3, #8
 800ee88:	b29b      	uxth	r3, r3
 800ee8a:	3b01      	subs	r3, #1
 800ee8c:	2b06      	cmp	r3, #6
 800ee8e:	f200 8128 	bhi.w	800f0e2 <USBD_GetDescriptor+0x276>
 800ee92:	a201      	add	r2, pc, #4	; (adr r2, 800ee98 <USBD_GetDescriptor+0x2c>)
 800ee94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee98:	0800eeb5 	.word	0x0800eeb5
 800ee9c:	0800eecd 	.word	0x0800eecd
 800eea0:	0800ef0d 	.word	0x0800ef0d
 800eea4:	0800f0e3 	.word	0x0800f0e3
 800eea8:	0800f0e3 	.word	0x0800f0e3
 800eeac:	0800f083 	.word	0x0800f083
 800eeb0:	0800f0af 	.word	0x0800f0af
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800eeba:	681b      	ldr	r3, [r3, #0]
 800eebc:	687a      	ldr	r2, [r7, #4]
 800eebe:	7c12      	ldrb	r2, [r2, #16]
 800eec0:	f107 0108 	add.w	r1, r7, #8
 800eec4:	4610      	mov	r0, r2
 800eec6:	4798      	blx	r3
 800eec8:	60f8      	str	r0, [r7, #12]
      break;
 800eeca:	e112      	b.n	800f0f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	7c1b      	ldrb	r3, [r3, #16]
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d10d      	bne.n	800eef0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eeda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eedc:	f107 0208 	add.w	r2, r7, #8
 800eee0:	4610      	mov	r0, r2
 800eee2:	4798      	blx	r3
 800eee4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	3301      	adds	r3, #1
 800eeea:	2202      	movs	r2, #2
 800eeec:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800eeee:	e100      	b.n	800f0f2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eef8:	f107 0208 	add.w	r2, r7, #8
 800eefc:	4610      	mov	r0, r2
 800eefe:	4798      	blx	r3
 800ef00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ef02:	68fb      	ldr	r3, [r7, #12]
 800ef04:	3301      	adds	r3, #1
 800ef06:	2202      	movs	r2, #2
 800ef08:	701a      	strb	r2, [r3, #0]
      break;
 800ef0a:	e0f2      	b.n	800f0f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ef0c:	683b      	ldr	r3, [r7, #0]
 800ef0e:	885b      	ldrh	r3, [r3, #2]
 800ef10:	b2db      	uxtb	r3, r3
 800ef12:	2b05      	cmp	r3, #5
 800ef14:	f200 80ac 	bhi.w	800f070 <USBD_GetDescriptor+0x204>
 800ef18:	a201      	add	r2, pc, #4	; (adr r2, 800ef20 <USBD_GetDescriptor+0xb4>)
 800ef1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef1e:	bf00      	nop
 800ef20:	0800ef39 	.word	0x0800ef39
 800ef24:	0800ef6d 	.word	0x0800ef6d
 800ef28:	0800efa1 	.word	0x0800efa1
 800ef2c:	0800efd5 	.word	0x0800efd5
 800ef30:	0800f009 	.word	0x0800f009
 800ef34:	0800f03d 	.word	0x0800f03d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef3e:	685b      	ldr	r3, [r3, #4]
 800ef40:	2b00      	cmp	r3, #0
 800ef42:	d00b      	beq.n	800ef5c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef4a:	685b      	ldr	r3, [r3, #4]
 800ef4c:	687a      	ldr	r2, [r7, #4]
 800ef4e:	7c12      	ldrb	r2, [r2, #16]
 800ef50:	f107 0108 	add.w	r1, r7, #8
 800ef54:	4610      	mov	r0, r2
 800ef56:	4798      	blx	r3
 800ef58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef5a:	e091      	b.n	800f080 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ef5c:	6839      	ldr	r1, [r7, #0]
 800ef5e:	6878      	ldr	r0, [r7, #4]
 800ef60:	f000 fab2 	bl	800f4c8 <USBD_CtlError>
            err++;
 800ef64:	7afb      	ldrb	r3, [r7, #11]
 800ef66:	3301      	adds	r3, #1
 800ef68:	72fb      	strb	r3, [r7, #11]
          break;
 800ef6a:	e089      	b.n	800f080 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef72:	689b      	ldr	r3, [r3, #8]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d00b      	beq.n	800ef90 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ef7e:	689b      	ldr	r3, [r3, #8]
 800ef80:	687a      	ldr	r2, [r7, #4]
 800ef82:	7c12      	ldrb	r2, [r2, #16]
 800ef84:	f107 0108 	add.w	r1, r7, #8
 800ef88:	4610      	mov	r0, r2
 800ef8a:	4798      	blx	r3
 800ef8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef8e:	e077      	b.n	800f080 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ef90:	6839      	ldr	r1, [r7, #0]
 800ef92:	6878      	ldr	r0, [r7, #4]
 800ef94:	f000 fa98 	bl	800f4c8 <USBD_CtlError>
            err++;
 800ef98:	7afb      	ldrb	r3, [r7, #11]
 800ef9a:	3301      	adds	r3, #1
 800ef9c:	72fb      	strb	r3, [r7, #11]
          break;
 800ef9e:	e06f      	b.n	800f080 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800efa0:	687b      	ldr	r3, [r7, #4]
 800efa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efa6:	68db      	ldr	r3, [r3, #12]
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d00b      	beq.n	800efc4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efb2:	68db      	ldr	r3, [r3, #12]
 800efb4:	687a      	ldr	r2, [r7, #4]
 800efb6:	7c12      	ldrb	r2, [r2, #16]
 800efb8:	f107 0108 	add.w	r1, r7, #8
 800efbc:	4610      	mov	r0, r2
 800efbe:	4798      	blx	r3
 800efc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800efc2:	e05d      	b.n	800f080 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800efc4:	6839      	ldr	r1, [r7, #0]
 800efc6:	6878      	ldr	r0, [r7, #4]
 800efc8:	f000 fa7e 	bl	800f4c8 <USBD_CtlError>
            err++;
 800efcc:	7afb      	ldrb	r3, [r7, #11]
 800efce:	3301      	adds	r3, #1
 800efd0:	72fb      	strb	r3, [r7, #11]
          break;
 800efd2:	e055      	b.n	800f080 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efda:	691b      	ldr	r3, [r3, #16]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d00b      	beq.n	800eff8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800efe6:	691b      	ldr	r3, [r3, #16]
 800efe8:	687a      	ldr	r2, [r7, #4]
 800efea:	7c12      	ldrb	r2, [r2, #16]
 800efec:	f107 0108 	add.w	r1, r7, #8
 800eff0:	4610      	mov	r0, r2
 800eff2:	4798      	blx	r3
 800eff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eff6:	e043      	b.n	800f080 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800eff8:	6839      	ldr	r1, [r7, #0]
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f000 fa64 	bl	800f4c8 <USBD_CtlError>
            err++;
 800f000:	7afb      	ldrb	r3, [r7, #11]
 800f002:	3301      	adds	r3, #1
 800f004:	72fb      	strb	r3, [r7, #11]
          break;
 800f006:	e03b      	b.n	800f080 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f00e:	695b      	ldr	r3, [r3, #20]
 800f010:	2b00      	cmp	r3, #0
 800f012:	d00b      	beq.n	800f02c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f01a:	695b      	ldr	r3, [r3, #20]
 800f01c:	687a      	ldr	r2, [r7, #4]
 800f01e:	7c12      	ldrb	r2, [r2, #16]
 800f020:	f107 0108 	add.w	r1, r7, #8
 800f024:	4610      	mov	r0, r2
 800f026:	4798      	blx	r3
 800f028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f02a:	e029      	b.n	800f080 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f02c:	6839      	ldr	r1, [r7, #0]
 800f02e:	6878      	ldr	r0, [r7, #4]
 800f030:	f000 fa4a 	bl	800f4c8 <USBD_CtlError>
            err++;
 800f034:	7afb      	ldrb	r3, [r7, #11]
 800f036:	3301      	adds	r3, #1
 800f038:	72fb      	strb	r3, [r7, #11]
          break;
 800f03a:	e021      	b.n	800f080 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f042:	699b      	ldr	r3, [r3, #24]
 800f044:	2b00      	cmp	r3, #0
 800f046:	d00b      	beq.n	800f060 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f04e:	699b      	ldr	r3, [r3, #24]
 800f050:	687a      	ldr	r2, [r7, #4]
 800f052:	7c12      	ldrb	r2, [r2, #16]
 800f054:	f107 0108 	add.w	r1, r7, #8
 800f058:	4610      	mov	r0, r2
 800f05a:	4798      	blx	r3
 800f05c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f05e:	e00f      	b.n	800f080 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800f060:	6839      	ldr	r1, [r7, #0]
 800f062:	6878      	ldr	r0, [r7, #4]
 800f064:	f000 fa30 	bl	800f4c8 <USBD_CtlError>
            err++;
 800f068:	7afb      	ldrb	r3, [r7, #11]
 800f06a:	3301      	adds	r3, #1
 800f06c:	72fb      	strb	r3, [r7, #11]
          break;
 800f06e:	e007      	b.n	800f080 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f070:	6839      	ldr	r1, [r7, #0]
 800f072:	6878      	ldr	r0, [r7, #4]
 800f074:	f000 fa28 	bl	800f4c8 <USBD_CtlError>
          err++;
 800f078:	7afb      	ldrb	r3, [r7, #11]
 800f07a:	3301      	adds	r3, #1
 800f07c:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 800f07e:	bf00      	nop
      }
      break;
 800f080:	e037      	b.n	800f0f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	7c1b      	ldrb	r3, [r3, #16]
 800f086:	2b00      	cmp	r3, #0
 800f088:	d109      	bne.n	800f09e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f092:	f107 0208 	add.w	r2, r7, #8
 800f096:	4610      	mov	r0, r2
 800f098:	4798      	blx	r3
 800f09a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f09c:	e029      	b.n	800f0f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f09e:	6839      	ldr	r1, [r7, #0]
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f000 fa11 	bl	800f4c8 <USBD_CtlError>
        err++;
 800f0a6:	7afb      	ldrb	r3, [r7, #11]
 800f0a8:	3301      	adds	r3, #1
 800f0aa:	72fb      	strb	r3, [r7, #11]
      break;
 800f0ac:	e021      	b.n	800f0f2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	7c1b      	ldrb	r3, [r3, #16]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d10d      	bne.n	800f0d2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f0be:	f107 0208 	add.w	r2, r7, #8
 800f0c2:	4610      	mov	r0, r2
 800f0c4:	4798      	blx	r3
 800f0c6:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	3301      	adds	r3, #1
 800f0cc:	2207      	movs	r2, #7
 800f0ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f0d0:	e00f      	b.n	800f0f2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800f0d2:	6839      	ldr	r1, [r7, #0]
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f000 f9f7 	bl	800f4c8 <USBD_CtlError>
        err++;
 800f0da:	7afb      	ldrb	r3, [r7, #11]
 800f0dc:	3301      	adds	r3, #1
 800f0de:	72fb      	strb	r3, [r7, #11]
      break;
 800f0e0:	e007      	b.n	800f0f2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800f0e2:	6839      	ldr	r1, [r7, #0]
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f000 f9ef 	bl	800f4c8 <USBD_CtlError>
      err++;
 800f0ea:	7afb      	ldrb	r3, [r7, #11]
 800f0ec:	3301      	adds	r3, #1
 800f0ee:	72fb      	strb	r3, [r7, #11]
      break;
 800f0f0:	bf00      	nop
  }

  if (err != 0U)
 800f0f2:	7afb      	ldrb	r3, [r7, #11]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d11e      	bne.n	800f136 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800f0f8:	683b      	ldr	r3, [r7, #0]
 800f0fa:	88db      	ldrh	r3, [r3, #6]
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d016      	beq.n	800f12e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800f100:	893b      	ldrh	r3, [r7, #8]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d00e      	beq.n	800f124 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	88da      	ldrh	r2, [r3, #6]
 800f10a:	893b      	ldrh	r3, [r7, #8]
 800f10c:	4293      	cmp	r3, r2
 800f10e:	bf28      	it	cs
 800f110:	4613      	movcs	r3, r2
 800f112:	b29b      	uxth	r3, r3
 800f114:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f116:	893b      	ldrh	r3, [r7, #8]
 800f118:	461a      	mov	r2, r3
 800f11a:	68f9      	ldr	r1, [r7, #12]
 800f11c:	6878      	ldr	r0, [r7, #4]
 800f11e:	f000 fa44 	bl	800f5aa <USBD_CtlSendData>
 800f122:	e009      	b.n	800f138 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f124:	6839      	ldr	r1, [r7, #0]
 800f126:	6878      	ldr	r0, [r7, #4]
 800f128:	f000 f9ce 	bl	800f4c8 <USBD_CtlError>
 800f12c:	e004      	b.n	800f138 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f12e:	6878      	ldr	r0, [r7, #4]
 800f130:	f000 fa95 	bl	800f65e <USBD_CtlSendStatus>
 800f134:	e000      	b.n	800f138 <USBD_GetDescriptor+0x2cc>
    return;
 800f136:	bf00      	nop
  }
}
 800f138:	3710      	adds	r7, #16
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
 800f13e:	bf00      	nop

0800f140 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f140:	b580      	push	{r7, lr}
 800f142:	b084      	sub	sp, #16
 800f144:	af00      	add	r7, sp, #0
 800f146:	6078      	str	r0, [r7, #4]
 800f148:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	889b      	ldrh	r3, [r3, #4]
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d131      	bne.n	800f1b6 <USBD_SetAddress+0x76>
 800f152:	683b      	ldr	r3, [r7, #0]
 800f154:	88db      	ldrh	r3, [r3, #6]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d12d      	bne.n	800f1b6 <USBD_SetAddress+0x76>
 800f15a:	683b      	ldr	r3, [r7, #0]
 800f15c:	885b      	ldrh	r3, [r3, #2]
 800f15e:	2b7f      	cmp	r3, #127	; 0x7f
 800f160:	d829      	bhi.n	800f1b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f162:	683b      	ldr	r3, [r7, #0]
 800f164:	885b      	ldrh	r3, [r3, #2]
 800f166:	b2db      	uxtb	r3, r3
 800f168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f16c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f174:	b2db      	uxtb	r3, r3
 800f176:	2b03      	cmp	r3, #3
 800f178:	d104      	bne.n	800f184 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f17a:	6839      	ldr	r1, [r7, #0]
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f000 f9a3 	bl	800f4c8 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f182:	e01d      	b.n	800f1c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	7bfa      	ldrb	r2, [r7, #15]
 800f188:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f18c:	7bfb      	ldrb	r3, [r7, #15]
 800f18e:	4619      	mov	r1, r3
 800f190:	6878      	ldr	r0, [r7, #4]
 800f192:	f008 f9df 	bl	8017554 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f196:	6878      	ldr	r0, [r7, #4]
 800f198:	f000 fa61 	bl	800f65e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f19c:	7bfb      	ldrb	r3, [r7, #15]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d004      	beq.n	800f1ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2202      	movs	r2, #2
 800f1a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1aa:	e009      	b.n	800f1c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2201      	movs	r2, #1
 800f1b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f1b4:	e004      	b.n	800f1c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f1b6:	6839      	ldr	r1, [r7, #0]
 800f1b8:	6878      	ldr	r0, [r7, #4]
 800f1ba:	f000 f985 	bl	800f4c8 <USBD_CtlError>
  }
}
 800f1be:	bf00      	nop
 800f1c0:	bf00      	nop
 800f1c2:	3710      	adds	r7, #16
 800f1c4:	46bd      	mov	sp, r7
 800f1c6:	bd80      	pop	{r7, pc}

0800f1c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b084      	sub	sp, #16
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
 800f1d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f1d6:	683b      	ldr	r3, [r7, #0]
 800f1d8:	885b      	ldrh	r3, [r3, #2]
 800f1da:	b2da      	uxtb	r2, r3
 800f1dc:	4b4c      	ldr	r3, [pc, #304]	; (800f310 <USBD_SetConfig+0x148>)
 800f1de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f1e0:	4b4b      	ldr	r3, [pc, #300]	; (800f310 <USBD_SetConfig+0x148>)
 800f1e2:	781b      	ldrb	r3, [r3, #0]
 800f1e4:	2b01      	cmp	r3, #1
 800f1e6:	d905      	bls.n	800f1f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f1e8:	6839      	ldr	r1, [r7, #0]
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f000 f96c 	bl	800f4c8 <USBD_CtlError>
    return USBD_FAIL;
 800f1f0:	2303      	movs	r3, #3
 800f1f2:	e088      	b.n	800f306 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1fa:	b2db      	uxtb	r3, r3
 800f1fc:	2b02      	cmp	r3, #2
 800f1fe:	d002      	beq.n	800f206 <USBD_SetConfig+0x3e>
 800f200:	2b03      	cmp	r3, #3
 800f202:	d025      	beq.n	800f250 <USBD_SetConfig+0x88>
 800f204:	e071      	b.n	800f2ea <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f206:	4b42      	ldr	r3, [pc, #264]	; (800f310 <USBD_SetConfig+0x148>)
 800f208:	781b      	ldrb	r3, [r3, #0]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d01c      	beq.n	800f248 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800f20e:	4b40      	ldr	r3, [pc, #256]	; (800f310 <USBD_SetConfig+0x148>)
 800f210:	781b      	ldrb	r3, [r3, #0]
 800f212:	461a      	mov	r2, r3
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f218:	4b3d      	ldr	r3, [pc, #244]	; (800f310 <USBD_SetConfig+0x148>)
 800f21a:	781b      	ldrb	r3, [r3, #0]
 800f21c:	4619      	mov	r1, r3
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f7ff f948 	bl	800e4b4 <USBD_SetClassConfig>
 800f224:	4603      	mov	r3, r0
 800f226:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f228:	7bfb      	ldrb	r3, [r7, #15]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d004      	beq.n	800f238 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800f22e:	6839      	ldr	r1, [r7, #0]
 800f230:	6878      	ldr	r0, [r7, #4]
 800f232:	f000 f949 	bl	800f4c8 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f236:	e065      	b.n	800f304 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f238:	6878      	ldr	r0, [r7, #4]
 800f23a:	f000 fa10 	bl	800f65e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2203      	movs	r2, #3
 800f242:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f246:	e05d      	b.n	800f304 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f248:	6878      	ldr	r0, [r7, #4]
 800f24a:	f000 fa08 	bl	800f65e <USBD_CtlSendStatus>
      break;
 800f24e:	e059      	b.n	800f304 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f250:	4b2f      	ldr	r3, [pc, #188]	; (800f310 <USBD_SetConfig+0x148>)
 800f252:	781b      	ldrb	r3, [r3, #0]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d112      	bne.n	800f27e <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	2202      	movs	r2, #2
 800f25c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f260:	4b2b      	ldr	r3, [pc, #172]	; (800f310 <USBD_SetConfig+0x148>)
 800f262:	781b      	ldrb	r3, [r3, #0]
 800f264:	461a      	mov	r2, r3
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f26a:	4b29      	ldr	r3, [pc, #164]	; (800f310 <USBD_SetConfig+0x148>)
 800f26c:	781b      	ldrb	r3, [r3, #0]
 800f26e:	4619      	mov	r1, r3
 800f270:	6878      	ldr	r0, [r7, #4]
 800f272:	f7ff f93b 	bl	800e4ec <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f276:	6878      	ldr	r0, [r7, #4]
 800f278:	f000 f9f1 	bl	800f65e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f27c:	e042      	b.n	800f304 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 800f27e:	4b24      	ldr	r3, [pc, #144]	; (800f310 <USBD_SetConfig+0x148>)
 800f280:	781b      	ldrb	r3, [r3, #0]
 800f282:	461a      	mov	r2, r3
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	685b      	ldr	r3, [r3, #4]
 800f288:	429a      	cmp	r2, r3
 800f28a:	d02a      	beq.n	800f2e2 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f28c:	687b      	ldr	r3, [r7, #4]
 800f28e:	685b      	ldr	r3, [r3, #4]
 800f290:	b2db      	uxtb	r3, r3
 800f292:	4619      	mov	r1, r3
 800f294:	6878      	ldr	r0, [r7, #4]
 800f296:	f7ff f929 	bl	800e4ec <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f29a:	4b1d      	ldr	r3, [pc, #116]	; (800f310 <USBD_SetConfig+0x148>)
 800f29c:	781b      	ldrb	r3, [r3, #0]
 800f29e:	461a      	mov	r2, r3
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f2a4:	4b1a      	ldr	r3, [pc, #104]	; (800f310 <USBD_SetConfig+0x148>)
 800f2a6:	781b      	ldrb	r3, [r3, #0]
 800f2a8:	4619      	mov	r1, r3
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f7ff f902 	bl	800e4b4 <USBD_SetClassConfig>
 800f2b0:	4603      	mov	r3, r0
 800f2b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f2b4:	7bfb      	ldrb	r3, [r7, #15]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d00f      	beq.n	800f2da <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800f2ba:	6839      	ldr	r1, [r7, #0]
 800f2bc:	6878      	ldr	r0, [r7, #4]
 800f2be:	f000 f903 	bl	800f4c8 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	685b      	ldr	r3, [r3, #4]
 800f2c6:	b2db      	uxtb	r3, r3
 800f2c8:	4619      	mov	r1, r3
 800f2ca:	6878      	ldr	r0, [r7, #4]
 800f2cc:	f7ff f90e 	bl	800e4ec <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	2202      	movs	r2, #2
 800f2d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f2d8:	e014      	b.n	800f304 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800f2da:	6878      	ldr	r0, [r7, #4]
 800f2dc:	f000 f9bf 	bl	800f65e <USBD_CtlSendStatus>
      break;
 800f2e0:	e010      	b.n	800f304 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f000 f9bb 	bl	800f65e <USBD_CtlSendStatus>
      break;
 800f2e8:	e00c      	b.n	800f304 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800f2ea:	6839      	ldr	r1, [r7, #0]
 800f2ec:	6878      	ldr	r0, [r7, #4]
 800f2ee:	f000 f8eb 	bl	800f4c8 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f2f2:	4b07      	ldr	r3, [pc, #28]	; (800f310 <USBD_SetConfig+0x148>)
 800f2f4:	781b      	ldrb	r3, [r3, #0]
 800f2f6:	4619      	mov	r1, r3
 800f2f8:	6878      	ldr	r0, [r7, #4]
 800f2fa:	f7ff f8f7 	bl	800e4ec <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f2fe:	2303      	movs	r3, #3
 800f300:	73fb      	strb	r3, [r7, #15]
      break;
 800f302:	bf00      	nop
  }

  return ret;
 800f304:	7bfb      	ldrb	r3, [r7, #15]
}
 800f306:	4618      	mov	r0, r3
 800f308:	3710      	adds	r7, #16
 800f30a:	46bd      	mov	sp, r7
 800f30c:	bd80      	pop	{r7, pc}
 800f30e:	bf00      	nop
 800f310:	200027b4 	.word	0x200027b4

0800f314 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f314:	b580      	push	{r7, lr}
 800f316:	b082      	sub	sp, #8
 800f318:	af00      	add	r7, sp, #0
 800f31a:	6078      	str	r0, [r7, #4]
 800f31c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	88db      	ldrh	r3, [r3, #6]
 800f322:	2b01      	cmp	r3, #1
 800f324:	d004      	beq.n	800f330 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f326:	6839      	ldr	r1, [r7, #0]
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f000 f8cd 	bl	800f4c8 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f32e:	e023      	b.n	800f378 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f336:	b2db      	uxtb	r3, r3
 800f338:	2b02      	cmp	r3, #2
 800f33a:	dc02      	bgt.n	800f342 <USBD_GetConfig+0x2e>
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	dc03      	bgt.n	800f348 <USBD_GetConfig+0x34>
 800f340:	e015      	b.n	800f36e <USBD_GetConfig+0x5a>
 800f342:	2b03      	cmp	r3, #3
 800f344:	d00b      	beq.n	800f35e <USBD_GetConfig+0x4a>
 800f346:	e012      	b.n	800f36e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	2200      	movs	r2, #0
 800f34c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	3308      	adds	r3, #8
 800f352:	2201      	movs	r2, #1
 800f354:	4619      	mov	r1, r3
 800f356:	6878      	ldr	r0, [r7, #4]
 800f358:	f000 f927 	bl	800f5aa <USBD_CtlSendData>
        break;
 800f35c:	e00c      	b.n	800f378 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	3304      	adds	r3, #4
 800f362:	2201      	movs	r2, #1
 800f364:	4619      	mov	r1, r3
 800f366:	6878      	ldr	r0, [r7, #4]
 800f368:	f000 f91f 	bl	800f5aa <USBD_CtlSendData>
        break;
 800f36c:	e004      	b.n	800f378 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f36e:	6839      	ldr	r1, [r7, #0]
 800f370:	6878      	ldr	r0, [r7, #4]
 800f372:	f000 f8a9 	bl	800f4c8 <USBD_CtlError>
        break;
 800f376:	bf00      	nop
}
 800f378:	bf00      	nop
 800f37a:	3708      	adds	r7, #8
 800f37c:	46bd      	mov	sp, r7
 800f37e:	bd80      	pop	{r7, pc}

0800f380 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f380:	b580      	push	{r7, lr}
 800f382:	b082      	sub	sp, #8
 800f384:	af00      	add	r7, sp, #0
 800f386:	6078      	str	r0, [r7, #4]
 800f388:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f390:	b2db      	uxtb	r3, r3
 800f392:	3b01      	subs	r3, #1
 800f394:	2b02      	cmp	r3, #2
 800f396:	d81e      	bhi.n	800f3d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f398:	683b      	ldr	r3, [r7, #0]
 800f39a:	88db      	ldrh	r3, [r3, #6]
 800f39c:	2b02      	cmp	r3, #2
 800f39e:	d004      	beq.n	800f3aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800f3a0:	6839      	ldr	r1, [r7, #0]
 800f3a2:	6878      	ldr	r0, [r7, #4]
 800f3a4:	f000 f890 	bl	800f4c8 <USBD_CtlError>
        break;
 800f3a8:	e01a      	b.n	800f3e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2201      	movs	r2, #1
 800f3ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	d005      	beq.n	800f3c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	68db      	ldr	r3, [r3, #12]
 800f3be:	f043 0202 	orr.w	r2, r3, #2
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	330c      	adds	r3, #12
 800f3ca:	2202      	movs	r2, #2
 800f3cc:	4619      	mov	r1, r3
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	f000 f8eb 	bl	800f5aa <USBD_CtlSendData>
      break;
 800f3d4:	e004      	b.n	800f3e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800f3d6:	6839      	ldr	r1, [r7, #0]
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f000 f875 	bl	800f4c8 <USBD_CtlError>
      break;
 800f3de:	bf00      	nop
  }
}
 800f3e0:	bf00      	nop
 800f3e2:	3708      	adds	r7, #8
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}

0800f3e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b082      	sub	sp, #8
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
 800f3f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f3f2:	683b      	ldr	r3, [r7, #0]
 800f3f4:	885b      	ldrh	r3, [r3, #2]
 800f3f6:	2b01      	cmp	r3, #1
 800f3f8:	d106      	bne.n	800f408 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	2201      	movs	r2, #1
 800f3fe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f402:	6878      	ldr	r0, [r7, #4]
 800f404:	f000 f92b 	bl	800f65e <USBD_CtlSendStatus>
  }
}
 800f408:	bf00      	nop
 800f40a:	3708      	adds	r7, #8
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}

0800f410 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b082      	sub	sp, #8
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
 800f418:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f420:	b2db      	uxtb	r3, r3
 800f422:	3b01      	subs	r3, #1
 800f424:	2b02      	cmp	r3, #2
 800f426:	d80b      	bhi.n	800f440 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f428:	683b      	ldr	r3, [r7, #0]
 800f42a:	885b      	ldrh	r3, [r3, #2]
 800f42c:	2b01      	cmp	r3, #1
 800f42e:	d10c      	bne.n	800f44a <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	2200      	movs	r2, #0
 800f434:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f438:	6878      	ldr	r0, [r7, #4]
 800f43a:	f000 f910 	bl	800f65e <USBD_CtlSendStatus>
      }
      break;
 800f43e:	e004      	b.n	800f44a <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800f440:	6839      	ldr	r1, [r7, #0]
 800f442:	6878      	ldr	r0, [r7, #4]
 800f444:	f000 f840 	bl	800f4c8 <USBD_CtlError>
      break;
 800f448:	e000      	b.n	800f44c <USBD_ClrFeature+0x3c>
      break;
 800f44a:	bf00      	nop
  }
}
 800f44c:	bf00      	nop
 800f44e:	3708      	adds	r7, #8
 800f450:	46bd      	mov	sp, r7
 800f452:	bd80      	pop	{r7, pc}

0800f454 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f454:	b580      	push	{r7, lr}
 800f456:	b084      	sub	sp, #16
 800f458:	af00      	add	r7, sp, #0
 800f45a:	6078      	str	r0, [r7, #4]
 800f45c:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	781a      	ldrb	r2, [r3, #0]
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	3301      	adds	r3, #1
 800f46e:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f470:	68fb      	ldr	r3, [r7, #12]
 800f472:	781a      	ldrb	r2, [r3, #0]
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f478:	68fb      	ldr	r3, [r7, #12]
 800f47a:	3301      	adds	r3, #1
 800f47c:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f47e:	68f8      	ldr	r0, [r7, #12]
 800f480:	f7ff fabb 	bl	800e9fa <SWAPBYTE>
 800f484:	4603      	mov	r3, r0
 800f486:	461a      	mov	r2, r3
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f48c:	68fb      	ldr	r3, [r7, #12]
 800f48e:	3301      	adds	r3, #1
 800f490:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f492:	68fb      	ldr	r3, [r7, #12]
 800f494:	3301      	adds	r3, #1
 800f496:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f498:	68f8      	ldr	r0, [r7, #12]
 800f49a:	f7ff faae 	bl	800e9fa <SWAPBYTE>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	461a      	mov	r2, r3
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f4a6:	68fb      	ldr	r3, [r7, #12]
 800f4a8:	3301      	adds	r3, #1
 800f4aa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	3301      	adds	r3, #1
 800f4b0:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f4b2:	68f8      	ldr	r0, [r7, #12]
 800f4b4:	f7ff faa1 	bl	800e9fa <SWAPBYTE>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	461a      	mov	r2, r3
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	80da      	strh	r2, [r3, #6]
}
 800f4c0:	bf00      	nop
 800f4c2:	3710      	adds	r7, #16
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	bd80      	pop	{r7, pc}

0800f4c8 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4c8:	b580      	push	{r7, lr}
 800f4ca:	b082      	sub	sp, #8
 800f4cc:	af00      	add	r7, sp, #0
 800f4ce:	6078      	str	r0, [r7, #4]
 800f4d0:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f4d2:	2180      	movs	r1, #128	; 0x80
 800f4d4:	6878      	ldr	r0, [r7, #4]
 800f4d6:	f007 ffd3 	bl	8017480 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f4da:	2100      	movs	r1, #0
 800f4dc:	6878      	ldr	r0, [r7, #4]
 800f4de:	f007 ffcf 	bl	8017480 <USBD_LL_StallEP>
}
 800f4e2:	bf00      	nop
 800f4e4:	3708      	adds	r7, #8
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}

0800f4ea <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f4ea:	b580      	push	{r7, lr}
 800f4ec:	b086      	sub	sp, #24
 800f4ee:	af00      	add	r7, sp, #0
 800f4f0:	60f8      	str	r0, [r7, #12]
 800f4f2:	60b9      	str	r1, [r7, #8]
 800f4f4:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f4fa:	68fb      	ldr	r3, [r7, #12]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d036      	beq.n	800f56e <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f504:	6938      	ldr	r0, [r7, #16]
 800f506:	f000 f836 	bl	800f576 <USBD_GetLen>
 800f50a:	4603      	mov	r3, r0
 800f50c:	3301      	adds	r3, #1
 800f50e:	b29b      	uxth	r3, r3
 800f510:	005b      	lsls	r3, r3, #1
 800f512:	b29a      	uxth	r2, r3
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f518:	7dfb      	ldrb	r3, [r7, #23]
 800f51a:	68ba      	ldr	r2, [r7, #8]
 800f51c:	4413      	add	r3, r2
 800f51e:	687a      	ldr	r2, [r7, #4]
 800f520:	7812      	ldrb	r2, [r2, #0]
 800f522:	701a      	strb	r2, [r3, #0]
  idx++;
 800f524:	7dfb      	ldrb	r3, [r7, #23]
 800f526:	3301      	adds	r3, #1
 800f528:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f52a:	7dfb      	ldrb	r3, [r7, #23]
 800f52c:	68ba      	ldr	r2, [r7, #8]
 800f52e:	4413      	add	r3, r2
 800f530:	2203      	movs	r2, #3
 800f532:	701a      	strb	r2, [r3, #0]
  idx++;
 800f534:	7dfb      	ldrb	r3, [r7, #23]
 800f536:	3301      	adds	r3, #1
 800f538:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f53a:	e013      	b.n	800f564 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f53c:	7dfb      	ldrb	r3, [r7, #23]
 800f53e:	68ba      	ldr	r2, [r7, #8]
 800f540:	4413      	add	r3, r2
 800f542:	693a      	ldr	r2, [r7, #16]
 800f544:	7812      	ldrb	r2, [r2, #0]
 800f546:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f548:	693b      	ldr	r3, [r7, #16]
 800f54a:	3301      	adds	r3, #1
 800f54c:	613b      	str	r3, [r7, #16]
    idx++;
 800f54e:	7dfb      	ldrb	r3, [r7, #23]
 800f550:	3301      	adds	r3, #1
 800f552:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f554:	7dfb      	ldrb	r3, [r7, #23]
 800f556:	68ba      	ldr	r2, [r7, #8]
 800f558:	4413      	add	r3, r2
 800f55a:	2200      	movs	r2, #0
 800f55c:	701a      	strb	r2, [r3, #0]
    idx++;
 800f55e:	7dfb      	ldrb	r3, [r7, #23]
 800f560:	3301      	adds	r3, #1
 800f562:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f564:	693b      	ldr	r3, [r7, #16]
 800f566:	781b      	ldrb	r3, [r3, #0]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d1e7      	bne.n	800f53c <USBD_GetString+0x52>
 800f56c:	e000      	b.n	800f570 <USBD_GetString+0x86>
    return;
 800f56e:	bf00      	nop
  }
}
 800f570:	3718      	adds	r7, #24
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}

0800f576 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f576:	b480      	push	{r7}
 800f578:	b085      	sub	sp, #20
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f57e:	2300      	movs	r3, #0
 800f580:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f586:	e005      	b.n	800f594 <USBD_GetLen+0x1e>
  {
    len++;
 800f588:	7bfb      	ldrb	r3, [r7, #15]
 800f58a:	3301      	adds	r3, #1
 800f58c:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f58e:	68bb      	ldr	r3, [r7, #8]
 800f590:	3301      	adds	r3, #1
 800f592:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f594:	68bb      	ldr	r3, [r7, #8]
 800f596:	781b      	ldrb	r3, [r3, #0]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d1f5      	bne.n	800f588 <USBD_GetLen+0x12>
  }

  return len;
 800f59c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	3714      	adds	r7, #20
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a8:	4770      	bx	lr

0800f5aa <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f5aa:	b580      	push	{r7, lr}
 800f5ac:	b084      	sub	sp, #16
 800f5ae:	af00      	add	r7, sp, #0
 800f5b0:	60f8      	str	r0, [r7, #12]
 800f5b2:	60b9      	str	r1, [r7, #8]
 800f5b4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	2202      	movs	r2, #2
 800f5ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	687a      	ldr	r2, [r7, #4]
 800f5c2:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	687a      	ldr	r2, [r7, #4]
 800f5c8:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	68ba      	ldr	r2, [r7, #8]
 800f5ce:	2100      	movs	r1, #0
 800f5d0:	68f8      	ldr	r0, [r7, #12]
 800f5d2:	f007 ffde 	bl	8017592 <USBD_LL_Transmit>

  return USBD_OK;
 800f5d6:	2300      	movs	r3, #0
}
 800f5d8:	4618      	mov	r0, r3
 800f5da:	3710      	adds	r7, #16
 800f5dc:	46bd      	mov	sp, r7
 800f5de:	bd80      	pop	{r7, pc}

0800f5e0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b084      	sub	sp, #16
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	60f8      	str	r0, [r7, #12]
 800f5e8:	60b9      	str	r1, [r7, #8]
 800f5ea:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	68ba      	ldr	r2, [r7, #8]
 800f5f0:	2100      	movs	r1, #0
 800f5f2:	68f8      	ldr	r0, [r7, #12]
 800f5f4:	f007 ffcd 	bl	8017592 <USBD_LL_Transmit>

  return USBD_OK;
 800f5f8:	2300      	movs	r3, #0
}
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	3710      	adds	r7, #16
 800f5fe:	46bd      	mov	sp, r7
 800f600:	bd80      	pop	{r7, pc}

0800f602 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f602:	b580      	push	{r7, lr}
 800f604:	b084      	sub	sp, #16
 800f606:	af00      	add	r7, sp, #0
 800f608:	60f8      	str	r0, [r7, #12]
 800f60a:	60b9      	str	r1, [r7, #8]
 800f60c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	2203      	movs	r2, #3
 800f612:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	687a      	ldr	r2, [r7, #4]
 800f61a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	687a      	ldr	r2, [r7, #4]
 800f622:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	68ba      	ldr	r2, [r7, #8]
 800f62a:	2100      	movs	r1, #0
 800f62c:	68f8      	ldr	r0, [r7, #12]
 800f62e:	f007 ffd1 	bl	80175d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f632:	2300      	movs	r3, #0
}
 800f634:	4618      	mov	r0, r3
 800f636:	3710      	adds	r7, #16
 800f638:	46bd      	mov	sp, r7
 800f63a:	bd80      	pop	{r7, pc}

0800f63c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f63c:	b580      	push	{r7, lr}
 800f63e:	b084      	sub	sp, #16
 800f640:	af00      	add	r7, sp, #0
 800f642:	60f8      	str	r0, [r7, #12]
 800f644:	60b9      	str	r1, [r7, #8]
 800f646:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	68ba      	ldr	r2, [r7, #8]
 800f64c:	2100      	movs	r1, #0
 800f64e:	68f8      	ldr	r0, [r7, #12]
 800f650:	f007 ffc0 	bl	80175d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f654:	2300      	movs	r3, #0
}
 800f656:	4618      	mov	r0, r3
 800f658:	3710      	adds	r7, #16
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}

0800f65e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f65e:	b580      	push	{r7, lr}
 800f660:	b082      	sub	sp, #8
 800f662:	af00      	add	r7, sp, #0
 800f664:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	2204      	movs	r2, #4
 800f66a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f66e:	2300      	movs	r3, #0
 800f670:	2200      	movs	r2, #0
 800f672:	2100      	movs	r1, #0
 800f674:	6878      	ldr	r0, [r7, #4]
 800f676:	f007 ff8c 	bl	8017592 <USBD_LL_Transmit>

  return USBD_OK;
 800f67a:	2300      	movs	r3, #0
}
 800f67c:	4618      	mov	r0, r3
 800f67e:	3708      	adds	r7, #8
 800f680:	46bd      	mov	sp, r7
 800f682:	bd80      	pop	{r7, pc}

0800f684 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f684:	b580      	push	{r7, lr}
 800f686:	b082      	sub	sp, #8
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	2205      	movs	r2, #5
 800f690:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f694:	2300      	movs	r3, #0
 800f696:	2200      	movs	r2, #0
 800f698:	2100      	movs	r1, #0
 800f69a:	6878      	ldr	r0, [r7, #4]
 800f69c:	f007 ff9a 	bl	80175d4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f6a0:	2300      	movs	r3, #0
}
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	3708      	adds	r7, #8
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	bd80      	pop	{r7, pc}
	...

0800f6ac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b084      	sub	sp, #16
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	4603      	mov	r3, r0
 800f6b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800f6b6:	79fb      	ldrb	r3, [r7, #7]
 800f6b8:	4a08      	ldr	r2, [pc, #32]	; (800f6dc <disk_status+0x30>)
 800f6ba:	009b      	lsls	r3, r3, #2
 800f6bc:	4413      	add	r3, r2
 800f6be:	685b      	ldr	r3, [r3, #4]
 800f6c0:	685b      	ldr	r3, [r3, #4]
 800f6c2:	79fa      	ldrb	r2, [r7, #7]
 800f6c4:	4905      	ldr	r1, [pc, #20]	; (800f6dc <disk_status+0x30>)
 800f6c6:	440a      	add	r2, r1
 800f6c8:	7a12      	ldrb	r2, [r2, #8]
 800f6ca:	4610      	mov	r0, r2
 800f6cc:	4798      	blx	r3
 800f6ce:	4603      	mov	r3, r0
 800f6d0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800f6d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	3710      	adds	r7, #16
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bd80      	pop	{r7, pc}
 800f6dc:	200027e0 	.word	0x200027e0

0800f6e0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800f6e0:	b580      	push	{r7, lr}
 800f6e2:	b084      	sub	sp, #16
 800f6e4:	af00      	add	r7, sp, #0
 800f6e6:	4603      	mov	r3, r0
 800f6e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800f6ea:	2300      	movs	r3, #0
 800f6ec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800f6ee:	79fb      	ldrb	r3, [r7, #7]
 800f6f0:	4a0d      	ldr	r2, [pc, #52]	; (800f728 <disk_initialize+0x48>)
 800f6f2:	5cd3      	ldrb	r3, [r2, r3]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d111      	bne.n	800f71c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800f6f8:	79fb      	ldrb	r3, [r7, #7]
 800f6fa:	4a0b      	ldr	r2, [pc, #44]	; (800f728 <disk_initialize+0x48>)
 800f6fc:	2101      	movs	r1, #1
 800f6fe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800f700:	79fb      	ldrb	r3, [r7, #7]
 800f702:	4a09      	ldr	r2, [pc, #36]	; (800f728 <disk_initialize+0x48>)
 800f704:	009b      	lsls	r3, r3, #2
 800f706:	4413      	add	r3, r2
 800f708:	685b      	ldr	r3, [r3, #4]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	79fa      	ldrb	r2, [r7, #7]
 800f70e:	4906      	ldr	r1, [pc, #24]	; (800f728 <disk_initialize+0x48>)
 800f710:	440a      	add	r2, r1
 800f712:	7a12      	ldrb	r2, [r2, #8]
 800f714:	4610      	mov	r0, r2
 800f716:	4798      	blx	r3
 800f718:	4603      	mov	r3, r0
 800f71a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800f71c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f71e:	4618      	mov	r0, r3
 800f720:	3710      	adds	r7, #16
 800f722:	46bd      	mov	sp, r7
 800f724:	bd80      	pop	{r7, pc}
 800f726:	bf00      	nop
 800f728:	200027e0 	.word	0x200027e0

0800f72c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800f72c:	b590      	push	{r4, r7, lr}
 800f72e:	b087      	sub	sp, #28
 800f730:	af00      	add	r7, sp, #0
 800f732:	60b9      	str	r1, [r7, #8]
 800f734:	607a      	str	r2, [r7, #4]
 800f736:	603b      	str	r3, [r7, #0]
 800f738:	4603      	mov	r3, r0
 800f73a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800f73c:	7bfb      	ldrb	r3, [r7, #15]
 800f73e:	4a0a      	ldr	r2, [pc, #40]	; (800f768 <disk_read+0x3c>)
 800f740:	009b      	lsls	r3, r3, #2
 800f742:	4413      	add	r3, r2
 800f744:	685b      	ldr	r3, [r3, #4]
 800f746:	689c      	ldr	r4, [r3, #8]
 800f748:	7bfb      	ldrb	r3, [r7, #15]
 800f74a:	4a07      	ldr	r2, [pc, #28]	; (800f768 <disk_read+0x3c>)
 800f74c:	4413      	add	r3, r2
 800f74e:	7a18      	ldrb	r0, [r3, #8]
 800f750:	683b      	ldr	r3, [r7, #0]
 800f752:	687a      	ldr	r2, [r7, #4]
 800f754:	68b9      	ldr	r1, [r7, #8]
 800f756:	47a0      	blx	r4
 800f758:	4603      	mov	r3, r0
 800f75a:	75fb      	strb	r3, [r7, #23]
  return res;
 800f75c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f75e:	4618      	mov	r0, r3
 800f760:	371c      	adds	r7, #28
 800f762:	46bd      	mov	sp, r7
 800f764:	bd90      	pop	{r4, r7, pc}
 800f766:	bf00      	nop
 800f768:	200027e0 	.word	0x200027e0

0800f76c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800f76c:	b590      	push	{r4, r7, lr}
 800f76e:	b087      	sub	sp, #28
 800f770:	af00      	add	r7, sp, #0
 800f772:	60b9      	str	r1, [r7, #8]
 800f774:	607a      	str	r2, [r7, #4]
 800f776:	603b      	str	r3, [r7, #0]
 800f778:	4603      	mov	r3, r0
 800f77a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800f77c:	7bfb      	ldrb	r3, [r7, #15]
 800f77e:	4a0a      	ldr	r2, [pc, #40]	; (800f7a8 <disk_write+0x3c>)
 800f780:	009b      	lsls	r3, r3, #2
 800f782:	4413      	add	r3, r2
 800f784:	685b      	ldr	r3, [r3, #4]
 800f786:	68dc      	ldr	r4, [r3, #12]
 800f788:	7bfb      	ldrb	r3, [r7, #15]
 800f78a:	4a07      	ldr	r2, [pc, #28]	; (800f7a8 <disk_write+0x3c>)
 800f78c:	4413      	add	r3, r2
 800f78e:	7a18      	ldrb	r0, [r3, #8]
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	687a      	ldr	r2, [r7, #4]
 800f794:	68b9      	ldr	r1, [r7, #8]
 800f796:	47a0      	blx	r4
 800f798:	4603      	mov	r3, r0
 800f79a:	75fb      	strb	r3, [r7, #23]
  return res;
 800f79c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f79e:	4618      	mov	r0, r3
 800f7a0:	371c      	adds	r7, #28
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd90      	pop	{r4, r7, pc}
 800f7a6:	bf00      	nop
 800f7a8:	200027e0 	.word	0x200027e0

0800f7ac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b084      	sub	sp, #16
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	4603      	mov	r3, r0
 800f7b4:	603a      	str	r2, [r7, #0]
 800f7b6:	71fb      	strb	r3, [r7, #7]
 800f7b8:	460b      	mov	r3, r1
 800f7ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800f7bc:	79fb      	ldrb	r3, [r7, #7]
 800f7be:	4a09      	ldr	r2, [pc, #36]	; (800f7e4 <disk_ioctl+0x38>)
 800f7c0:	009b      	lsls	r3, r3, #2
 800f7c2:	4413      	add	r3, r2
 800f7c4:	685b      	ldr	r3, [r3, #4]
 800f7c6:	691b      	ldr	r3, [r3, #16]
 800f7c8:	79fa      	ldrb	r2, [r7, #7]
 800f7ca:	4906      	ldr	r1, [pc, #24]	; (800f7e4 <disk_ioctl+0x38>)
 800f7cc:	440a      	add	r2, r1
 800f7ce:	7a10      	ldrb	r0, [r2, #8]
 800f7d0:	79b9      	ldrb	r1, [r7, #6]
 800f7d2:	683a      	ldr	r2, [r7, #0]
 800f7d4:	4798      	blx	r3
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	73fb      	strb	r3, [r7, #15]
  return res;
 800f7da:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3710      	adds	r7, #16
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}
 800f7e4:	200027e0 	.word	0x200027e0

0800f7e8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b085      	sub	sp, #20
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	3301      	adds	r3, #1
 800f7f4:	781b      	ldrb	r3, [r3, #0]
 800f7f6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800f7f8:	89fb      	ldrh	r3, [r7, #14]
 800f7fa:	021b      	lsls	r3, r3, #8
 800f7fc:	b21a      	sxth	r2, r3
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	781b      	ldrb	r3, [r3, #0]
 800f802:	b21b      	sxth	r3, r3
 800f804:	4313      	orrs	r3, r2
 800f806:	b21b      	sxth	r3, r3
 800f808:	81fb      	strh	r3, [r7, #14]
	return rv;
 800f80a:	89fb      	ldrh	r3, [r7, #14]
}
 800f80c:	4618      	mov	r0, r3
 800f80e:	3714      	adds	r7, #20
 800f810:	46bd      	mov	sp, r7
 800f812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f816:	4770      	bx	lr

0800f818 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800f818:	b480      	push	{r7}
 800f81a:	b085      	sub	sp, #20
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	3303      	adds	r3, #3
 800f824:	781b      	ldrb	r3, [r3, #0]
 800f826:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	021b      	lsls	r3, r3, #8
 800f82c:	687a      	ldr	r2, [r7, #4]
 800f82e:	3202      	adds	r2, #2
 800f830:	7812      	ldrb	r2, [r2, #0]
 800f832:	4313      	orrs	r3, r2
 800f834:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	021b      	lsls	r3, r3, #8
 800f83a:	687a      	ldr	r2, [r7, #4]
 800f83c:	3201      	adds	r2, #1
 800f83e:	7812      	ldrb	r2, [r2, #0]
 800f840:	4313      	orrs	r3, r2
 800f842:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	021b      	lsls	r3, r3, #8
 800f848:	687a      	ldr	r2, [r7, #4]
 800f84a:	7812      	ldrb	r2, [r2, #0]
 800f84c:	4313      	orrs	r3, r2
 800f84e:	60fb      	str	r3, [r7, #12]
	return rv;
 800f850:	68fb      	ldr	r3, [r7, #12]
}
 800f852:	4618      	mov	r0, r3
 800f854:	3714      	adds	r7, #20
 800f856:	46bd      	mov	sp, r7
 800f858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f85c:	4770      	bx	lr

0800f85e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800f85e:	b480      	push	{r7}
 800f860:	b083      	sub	sp, #12
 800f862:	af00      	add	r7, sp, #0
 800f864:	6078      	str	r0, [r7, #4]
 800f866:	460b      	mov	r3, r1
 800f868:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	1c5a      	adds	r2, r3, #1
 800f86e:	607a      	str	r2, [r7, #4]
 800f870:	887a      	ldrh	r2, [r7, #2]
 800f872:	b2d2      	uxtb	r2, r2
 800f874:	701a      	strb	r2, [r3, #0]
 800f876:	887b      	ldrh	r3, [r7, #2]
 800f878:	0a1b      	lsrs	r3, r3, #8
 800f87a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	1c5a      	adds	r2, r3, #1
 800f880:	607a      	str	r2, [r7, #4]
 800f882:	887a      	ldrh	r2, [r7, #2]
 800f884:	b2d2      	uxtb	r2, r2
 800f886:	701a      	strb	r2, [r3, #0]
}
 800f888:	bf00      	nop
 800f88a:	370c      	adds	r7, #12
 800f88c:	46bd      	mov	sp, r7
 800f88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f892:	4770      	bx	lr

0800f894 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800f894:	b480      	push	{r7}
 800f896:	b083      	sub	sp, #12
 800f898:	af00      	add	r7, sp, #0
 800f89a:	6078      	str	r0, [r7, #4]
 800f89c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	1c5a      	adds	r2, r3, #1
 800f8a2:	607a      	str	r2, [r7, #4]
 800f8a4:	683a      	ldr	r2, [r7, #0]
 800f8a6:	b2d2      	uxtb	r2, r2
 800f8a8:	701a      	strb	r2, [r3, #0]
 800f8aa:	683b      	ldr	r3, [r7, #0]
 800f8ac:	0a1b      	lsrs	r3, r3, #8
 800f8ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	1c5a      	adds	r2, r3, #1
 800f8b4:	607a      	str	r2, [r7, #4]
 800f8b6:	683a      	ldr	r2, [r7, #0]
 800f8b8:	b2d2      	uxtb	r2, r2
 800f8ba:	701a      	strb	r2, [r3, #0]
 800f8bc:	683b      	ldr	r3, [r7, #0]
 800f8be:	0a1b      	lsrs	r3, r3, #8
 800f8c0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	1c5a      	adds	r2, r3, #1
 800f8c6:	607a      	str	r2, [r7, #4]
 800f8c8:	683a      	ldr	r2, [r7, #0]
 800f8ca:	b2d2      	uxtb	r2, r2
 800f8cc:	701a      	strb	r2, [r3, #0]
 800f8ce:	683b      	ldr	r3, [r7, #0]
 800f8d0:	0a1b      	lsrs	r3, r3, #8
 800f8d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	1c5a      	adds	r2, r3, #1
 800f8d8:	607a      	str	r2, [r7, #4]
 800f8da:	683a      	ldr	r2, [r7, #0]
 800f8dc:	b2d2      	uxtb	r2, r2
 800f8de:	701a      	strb	r2, [r3, #0]
}
 800f8e0:	bf00      	nop
 800f8e2:	370c      	adds	r7, #12
 800f8e4:	46bd      	mov	sp, r7
 800f8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8ea:	4770      	bx	lr

0800f8ec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800f8ec:	b480      	push	{r7}
 800f8ee:	b087      	sub	sp, #28
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	60f8      	str	r0, [r7, #12]
 800f8f4:	60b9      	str	r1, [r7, #8]
 800f8f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d00d      	beq.n	800f922 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800f906:	693a      	ldr	r2, [r7, #16]
 800f908:	1c53      	adds	r3, r2, #1
 800f90a:	613b      	str	r3, [r7, #16]
 800f90c:	697b      	ldr	r3, [r7, #20]
 800f90e:	1c59      	adds	r1, r3, #1
 800f910:	6179      	str	r1, [r7, #20]
 800f912:	7812      	ldrb	r2, [r2, #0]
 800f914:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	3b01      	subs	r3, #1
 800f91a:	607b      	str	r3, [r7, #4]
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	2b00      	cmp	r3, #0
 800f920:	d1f1      	bne.n	800f906 <mem_cpy+0x1a>
	}
}
 800f922:	bf00      	nop
 800f924:	371c      	adds	r7, #28
 800f926:	46bd      	mov	sp, r7
 800f928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f92c:	4770      	bx	lr

0800f92e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800f92e:	b480      	push	{r7}
 800f930:	b087      	sub	sp, #28
 800f932:	af00      	add	r7, sp, #0
 800f934:	60f8      	str	r0, [r7, #12]
 800f936:	60b9      	str	r1, [r7, #8]
 800f938:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800f93e:	697b      	ldr	r3, [r7, #20]
 800f940:	1c5a      	adds	r2, r3, #1
 800f942:	617a      	str	r2, [r7, #20]
 800f944:	68ba      	ldr	r2, [r7, #8]
 800f946:	b2d2      	uxtb	r2, r2
 800f948:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	3b01      	subs	r3, #1
 800f94e:	607b      	str	r3, [r7, #4]
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d1f3      	bne.n	800f93e <mem_set+0x10>
}
 800f956:	bf00      	nop
 800f958:	bf00      	nop
 800f95a:	371c      	adds	r7, #28
 800f95c:	46bd      	mov	sp, r7
 800f95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f962:	4770      	bx	lr

0800f964 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800f964:	b480      	push	{r7}
 800f966:	b089      	sub	sp, #36	; 0x24
 800f968:	af00      	add	r7, sp, #0
 800f96a:	60f8      	str	r0, [r7, #12]
 800f96c:	60b9      	str	r1, [r7, #8]
 800f96e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	61fb      	str	r3, [r7, #28]
 800f974:	68bb      	ldr	r3, [r7, #8]
 800f976:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800f978:	2300      	movs	r3, #0
 800f97a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800f97c:	69fb      	ldr	r3, [r7, #28]
 800f97e:	1c5a      	adds	r2, r3, #1
 800f980:	61fa      	str	r2, [r7, #28]
 800f982:	781b      	ldrb	r3, [r3, #0]
 800f984:	4619      	mov	r1, r3
 800f986:	69bb      	ldr	r3, [r7, #24]
 800f988:	1c5a      	adds	r2, r3, #1
 800f98a:	61ba      	str	r2, [r7, #24]
 800f98c:	781b      	ldrb	r3, [r3, #0]
 800f98e:	1acb      	subs	r3, r1, r3
 800f990:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	3b01      	subs	r3, #1
 800f996:	607b      	str	r3, [r7, #4]
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d002      	beq.n	800f9a4 <mem_cmp+0x40>
 800f99e:	697b      	ldr	r3, [r7, #20]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d0eb      	beq.n	800f97c <mem_cmp+0x18>

	return r;
 800f9a4:	697b      	ldr	r3, [r7, #20]
}
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	3724      	adds	r7, #36	; 0x24
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9b0:	4770      	bx	lr

0800f9b2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800f9b2:	b480      	push	{r7}
 800f9b4:	b083      	sub	sp, #12
 800f9b6:	af00      	add	r7, sp, #0
 800f9b8:	6078      	str	r0, [r7, #4]
 800f9ba:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800f9bc:	e002      	b.n	800f9c4 <chk_chr+0x12>
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	3301      	adds	r3, #1
 800f9c2:	607b      	str	r3, [r7, #4]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	781b      	ldrb	r3, [r3, #0]
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d005      	beq.n	800f9d8 <chk_chr+0x26>
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	781b      	ldrb	r3, [r3, #0]
 800f9d0:	461a      	mov	r2, r3
 800f9d2:	683b      	ldr	r3, [r7, #0]
 800f9d4:	4293      	cmp	r3, r2
 800f9d6:	d1f2      	bne.n	800f9be <chk_chr+0xc>
	return *str;
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	781b      	ldrb	r3, [r3, #0]
}
 800f9dc:	4618      	mov	r0, r3
 800f9de:	370c      	adds	r7, #12
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e6:	4770      	bx	lr

0800f9e8 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b082      	sub	sp, #8
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d009      	beq.n	800fa0a <lock_fs+0x22>
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	695b      	ldr	r3, [r3, #20]
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f003 f98d 	bl	8012d1a <ff_req_grant>
 800fa00:	4603      	mov	r3, r0
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	d001      	beq.n	800fa0a <lock_fs+0x22>
 800fa06:	2301      	movs	r3, #1
 800fa08:	e000      	b.n	800fa0c <lock_fs+0x24>
 800fa0a:	2300      	movs	r3, #0
}
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	3708      	adds	r7, #8
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}

0800fa14 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800fa14:	b580      	push	{r7, lr}
 800fa16:	b082      	sub	sp, #8
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
 800fa1c:	460b      	mov	r3, r1
 800fa1e:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d00d      	beq.n	800fa42 <unlock_fs+0x2e>
 800fa26:	78fb      	ldrb	r3, [r7, #3]
 800fa28:	2b0c      	cmp	r3, #12
 800fa2a:	d00a      	beq.n	800fa42 <unlock_fs+0x2e>
 800fa2c:	78fb      	ldrb	r3, [r7, #3]
 800fa2e:	2b0b      	cmp	r3, #11
 800fa30:	d007      	beq.n	800fa42 <unlock_fs+0x2e>
 800fa32:	78fb      	ldrb	r3, [r7, #3]
 800fa34:	2b0f      	cmp	r3, #15
 800fa36:	d004      	beq.n	800fa42 <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	695b      	ldr	r3, [r3, #20]
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f003 f981 	bl	8012d44 <ff_rel_grant>
	}
}
 800fa42:	bf00      	nop
 800fa44:	3708      	adds	r7, #8
 800fa46:	46bd      	mov	sp, r7
 800fa48:	bd80      	pop	{r7, pc}
	...

0800fa4c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fa4c:	b480      	push	{r7}
 800fa4e:	b085      	sub	sp, #20
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
 800fa54:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800fa56:	2300      	movs	r3, #0
 800fa58:	60bb      	str	r3, [r7, #8]
 800fa5a:	68bb      	ldr	r3, [r7, #8]
 800fa5c:	60fb      	str	r3, [r7, #12]
 800fa5e:	e029      	b.n	800fab4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800fa60:	4a27      	ldr	r2, [pc, #156]	; (800fb00 <chk_lock+0xb4>)
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	011b      	lsls	r3, r3, #4
 800fa66:	4413      	add	r3, r2
 800fa68:	681b      	ldr	r3, [r3, #0]
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d01d      	beq.n	800faaa <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fa6e:	4a24      	ldr	r2, [pc, #144]	; (800fb00 <chk_lock+0xb4>)
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	011b      	lsls	r3, r3, #4
 800fa74:	4413      	add	r3, r2
 800fa76:	681a      	ldr	r2, [r3, #0]
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	429a      	cmp	r2, r3
 800fa7e:	d116      	bne.n	800faae <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800fa80:	4a1f      	ldr	r2, [pc, #124]	; (800fb00 <chk_lock+0xb4>)
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	011b      	lsls	r3, r3, #4
 800fa86:	4413      	add	r3, r2
 800fa88:	3304      	adds	r3, #4
 800fa8a:	681a      	ldr	r2, [r3, #0]
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800fa90:	429a      	cmp	r2, r3
 800fa92:	d10c      	bne.n	800faae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800fa94:	4a1a      	ldr	r2, [pc, #104]	; (800fb00 <chk_lock+0xb4>)
 800fa96:	68fb      	ldr	r3, [r7, #12]
 800fa98:	011b      	lsls	r3, r3, #4
 800fa9a:	4413      	add	r3, r2
 800fa9c:	3308      	adds	r3, #8
 800fa9e:	681a      	ldr	r2, [r3, #0]
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800faa4:	429a      	cmp	r2, r3
 800faa6:	d102      	bne.n	800faae <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800faa8:	e007      	b.n	800faba <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800faaa:	2301      	movs	r3, #1
 800faac:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	3301      	adds	r3, #1
 800fab2:	60fb      	str	r3, [r7, #12]
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	2b01      	cmp	r3, #1
 800fab8:	d9d2      	bls.n	800fa60 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	2b02      	cmp	r3, #2
 800fabe:	d109      	bne.n	800fad4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	2b00      	cmp	r3, #0
 800fac4:	d102      	bne.n	800facc <chk_lock+0x80>
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	2b02      	cmp	r3, #2
 800faca:	d101      	bne.n	800fad0 <chk_lock+0x84>
 800facc:	2300      	movs	r3, #0
 800face:	e010      	b.n	800faf2 <chk_lock+0xa6>
 800fad0:	2312      	movs	r3, #18
 800fad2:	e00e      	b.n	800faf2 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d108      	bne.n	800faec <chk_lock+0xa0>
 800fada:	4a09      	ldr	r2, [pc, #36]	; (800fb00 <chk_lock+0xb4>)
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	011b      	lsls	r3, r3, #4
 800fae0:	4413      	add	r3, r2
 800fae2:	330c      	adds	r3, #12
 800fae4:	881b      	ldrh	r3, [r3, #0]
 800fae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800faea:	d101      	bne.n	800faf0 <chk_lock+0xa4>
 800faec:	2310      	movs	r3, #16
 800faee:	e000      	b.n	800faf2 <chk_lock+0xa6>
 800faf0:	2300      	movs	r3, #0
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	3714      	adds	r7, #20
 800faf6:	46bd      	mov	sp, r7
 800faf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fafc:	4770      	bx	lr
 800fafe:	bf00      	nop
 800fb00:	200027c0 	.word	0x200027c0

0800fb04 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800fb04:	b480      	push	{r7}
 800fb06:	b083      	sub	sp, #12
 800fb08:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	607b      	str	r3, [r7, #4]
 800fb0e:	e002      	b.n	800fb16 <enq_lock+0x12>
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	3301      	adds	r3, #1
 800fb14:	607b      	str	r3, [r7, #4]
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	2b01      	cmp	r3, #1
 800fb1a:	d806      	bhi.n	800fb2a <enq_lock+0x26>
 800fb1c:	4a09      	ldr	r2, [pc, #36]	; (800fb44 <enq_lock+0x40>)
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	011b      	lsls	r3, r3, #4
 800fb22:	4413      	add	r3, r2
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d1f2      	bne.n	800fb10 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	2b02      	cmp	r3, #2
 800fb2e:	bf14      	ite	ne
 800fb30:	2301      	movne	r3, #1
 800fb32:	2300      	moveq	r3, #0
 800fb34:	b2db      	uxtb	r3, r3
}
 800fb36:	4618      	mov	r0, r3
 800fb38:	370c      	adds	r7, #12
 800fb3a:	46bd      	mov	sp, r7
 800fb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb40:	4770      	bx	lr
 800fb42:	bf00      	nop
 800fb44:	200027c0 	.word	0x200027c0

0800fb48 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800fb48:	b480      	push	{r7}
 800fb4a:	b085      	sub	sp, #20
 800fb4c:	af00      	add	r7, sp, #0
 800fb4e:	6078      	str	r0, [r7, #4]
 800fb50:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fb52:	2300      	movs	r3, #0
 800fb54:	60fb      	str	r3, [r7, #12]
 800fb56:	e01f      	b.n	800fb98 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800fb58:	4a41      	ldr	r2, [pc, #260]	; (800fc60 <inc_lock+0x118>)
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	011b      	lsls	r3, r3, #4
 800fb5e:	4413      	add	r3, r2
 800fb60:	681a      	ldr	r2, [r3, #0]
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d113      	bne.n	800fb92 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800fb6a:	4a3d      	ldr	r2, [pc, #244]	; (800fc60 <inc_lock+0x118>)
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	011b      	lsls	r3, r3, #4
 800fb70:	4413      	add	r3, r2
 800fb72:	3304      	adds	r3, #4
 800fb74:	681a      	ldr	r2, [r3, #0]
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800fb7a:	429a      	cmp	r2, r3
 800fb7c:	d109      	bne.n	800fb92 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800fb7e:	4a38      	ldr	r2, [pc, #224]	; (800fc60 <inc_lock+0x118>)
 800fb80:	68fb      	ldr	r3, [r7, #12]
 800fb82:	011b      	lsls	r3, r3, #4
 800fb84:	4413      	add	r3, r2
 800fb86:	3308      	adds	r3, #8
 800fb88:	681a      	ldr	r2, [r3, #0]
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800fb8e:	429a      	cmp	r2, r3
 800fb90:	d006      	beq.n	800fba0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	3301      	adds	r3, #1
 800fb96:	60fb      	str	r3, [r7, #12]
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	2b01      	cmp	r3, #1
 800fb9c:	d9dc      	bls.n	800fb58 <inc_lock+0x10>
 800fb9e:	e000      	b.n	800fba2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800fba0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800fba2:	68fb      	ldr	r3, [r7, #12]
 800fba4:	2b02      	cmp	r3, #2
 800fba6:	d132      	bne.n	800fc0e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800fba8:	2300      	movs	r3, #0
 800fbaa:	60fb      	str	r3, [r7, #12]
 800fbac:	e002      	b.n	800fbb4 <inc_lock+0x6c>
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	3301      	adds	r3, #1
 800fbb2:	60fb      	str	r3, [r7, #12]
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	2b01      	cmp	r3, #1
 800fbb8:	d806      	bhi.n	800fbc8 <inc_lock+0x80>
 800fbba:	4a29      	ldr	r2, [pc, #164]	; (800fc60 <inc_lock+0x118>)
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	011b      	lsls	r3, r3, #4
 800fbc0:	4413      	add	r3, r2
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d1f2      	bne.n	800fbae <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	2b02      	cmp	r3, #2
 800fbcc:	d101      	bne.n	800fbd2 <inc_lock+0x8a>
 800fbce:	2300      	movs	r3, #0
 800fbd0:	e040      	b.n	800fc54 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	681a      	ldr	r2, [r3, #0]
 800fbd6:	4922      	ldr	r1, [pc, #136]	; (800fc60 <inc_lock+0x118>)
 800fbd8:	68fb      	ldr	r3, [r7, #12]
 800fbda:	011b      	lsls	r3, r3, #4
 800fbdc:	440b      	add	r3, r1
 800fbde:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	689a      	ldr	r2, [r3, #8]
 800fbe4:	491e      	ldr	r1, [pc, #120]	; (800fc60 <inc_lock+0x118>)
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	011b      	lsls	r3, r3, #4
 800fbea:	440b      	add	r3, r1
 800fbec:	3304      	adds	r3, #4
 800fbee:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	695a      	ldr	r2, [r3, #20]
 800fbf4:	491a      	ldr	r1, [pc, #104]	; (800fc60 <inc_lock+0x118>)
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	011b      	lsls	r3, r3, #4
 800fbfa:	440b      	add	r3, r1
 800fbfc:	3308      	adds	r3, #8
 800fbfe:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800fc00:	4a17      	ldr	r2, [pc, #92]	; (800fc60 <inc_lock+0x118>)
 800fc02:	68fb      	ldr	r3, [r7, #12]
 800fc04:	011b      	lsls	r3, r3, #4
 800fc06:	4413      	add	r3, r2
 800fc08:	330c      	adds	r3, #12
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d009      	beq.n	800fc28 <inc_lock+0xe0>
 800fc14:	4a12      	ldr	r2, [pc, #72]	; (800fc60 <inc_lock+0x118>)
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	011b      	lsls	r3, r3, #4
 800fc1a:	4413      	add	r3, r2
 800fc1c:	330c      	adds	r3, #12
 800fc1e:	881b      	ldrh	r3, [r3, #0]
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d001      	beq.n	800fc28 <inc_lock+0xe0>
 800fc24:	2300      	movs	r3, #0
 800fc26:	e015      	b.n	800fc54 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800fc28:	683b      	ldr	r3, [r7, #0]
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d108      	bne.n	800fc40 <inc_lock+0xf8>
 800fc2e:	4a0c      	ldr	r2, [pc, #48]	; (800fc60 <inc_lock+0x118>)
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	011b      	lsls	r3, r3, #4
 800fc34:	4413      	add	r3, r2
 800fc36:	330c      	adds	r3, #12
 800fc38:	881b      	ldrh	r3, [r3, #0]
 800fc3a:	3301      	adds	r3, #1
 800fc3c:	b29a      	uxth	r2, r3
 800fc3e:	e001      	b.n	800fc44 <inc_lock+0xfc>
 800fc40:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fc44:	4906      	ldr	r1, [pc, #24]	; (800fc60 <inc_lock+0x118>)
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	011b      	lsls	r3, r3, #4
 800fc4a:	440b      	add	r3, r1
 800fc4c:	330c      	adds	r3, #12
 800fc4e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	3301      	adds	r3, #1
}
 800fc54:	4618      	mov	r0, r3
 800fc56:	3714      	adds	r7, #20
 800fc58:	46bd      	mov	sp, r7
 800fc5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc5e:	4770      	bx	lr
 800fc60:	200027c0 	.word	0x200027c0

0800fc64 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800fc64:	b480      	push	{r7}
 800fc66:	b085      	sub	sp, #20
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	3b01      	subs	r3, #1
 800fc70:	607b      	str	r3, [r7, #4]
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2b01      	cmp	r3, #1
 800fc76:	d825      	bhi.n	800fcc4 <dec_lock+0x60>
		n = Files[i].ctr;
 800fc78:	4a17      	ldr	r2, [pc, #92]	; (800fcd8 <dec_lock+0x74>)
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	011b      	lsls	r3, r3, #4
 800fc7e:	4413      	add	r3, r2
 800fc80:	330c      	adds	r3, #12
 800fc82:	881b      	ldrh	r3, [r3, #0]
 800fc84:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800fc86:	89fb      	ldrh	r3, [r7, #14]
 800fc88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc8c:	d101      	bne.n	800fc92 <dec_lock+0x2e>
 800fc8e:	2300      	movs	r3, #0
 800fc90:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800fc92:	89fb      	ldrh	r3, [r7, #14]
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d002      	beq.n	800fc9e <dec_lock+0x3a>
 800fc98:	89fb      	ldrh	r3, [r7, #14]
 800fc9a:	3b01      	subs	r3, #1
 800fc9c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800fc9e:	4a0e      	ldr	r2, [pc, #56]	; (800fcd8 <dec_lock+0x74>)
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	011b      	lsls	r3, r3, #4
 800fca4:	4413      	add	r3, r2
 800fca6:	330c      	adds	r3, #12
 800fca8:	89fa      	ldrh	r2, [r7, #14]
 800fcaa:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800fcac:	89fb      	ldrh	r3, [r7, #14]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d105      	bne.n	800fcbe <dec_lock+0x5a>
 800fcb2:	4a09      	ldr	r2, [pc, #36]	; (800fcd8 <dec_lock+0x74>)
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	011b      	lsls	r3, r3, #4
 800fcb8:	4413      	add	r3, r2
 800fcba:	2200      	movs	r2, #0
 800fcbc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	737b      	strb	r3, [r7, #13]
 800fcc2:	e001      	b.n	800fcc8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800fcc4:	2302      	movs	r3, #2
 800fcc6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800fcc8:	7b7b      	ldrb	r3, [r7, #13]
}
 800fcca:	4618      	mov	r0, r3
 800fccc:	3714      	adds	r7, #20
 800fcce:	46bd      	mov	sp, r7
 800fcd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcd4:	4770      	bx	lr
 800fcd6:	bf00      	nop
 800fcd8:	200027c0 	.word	0x200027c0

0800fcdc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800fcdc:	b480      	push	{r7}
 800fcde:	b085      	sub	sp, #20
 800fce0:	af00      	add	r7, sp, #0
 800fce2:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800fce4:	2300      	movs	r3, #0
 800fce6:	60fb      	str	r3, [r7, #12]
 800fce8:	e010      	b.n	800fd0c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800fcea:	4a0d      	ldr	r2, [pc, #52]	; (800fd20 <clear_lock+0x44>)
 800fcec:	68fb      	ldr	r3, [r7, #12]
 800fcee:	011b      	lsls	r3, r3, #4
 800fcf0:	4413      	add	r3, r2
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	687a      	ldr	r2, [r7, #4]
 800fcf6:	429a      	cmp	r2, r3
 800fcf8:	d105      	bne.n	800fd06 <clear_lock+0x2a>
 800fcfa:	4a09      	ldr	r2, [pc, #36]	; (800fd20 <clear_lock+0x44>)
 800fcfc:	68fb      	ldr	r3, [r7, #12]
 800fcfe:	011b      	lsls	r3, r3, #4
 800fd00:	4413      	add	r3, r2
 800fd02:	2200      	movs	r2, #0
 800fd04:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800fd06:	68fb      	ldr	r3, [r7, #12]
 800fd08:	3301      	adds	r3, #1
 800fd0a:	60fb      	str	r3, [r7, #12]
 800fd0c:	68fb      	ldr	r3, [r7, #12]
 800fd0e:	2b01      	cmp	r3, #1
 800fd10:	d9eb      	bls.n	800fcea <clear_lock+0xe>
	}
}
 800fd12:	bf00      	nop
 800fd14:	bf00      	nop
 800fd16:	3714      	adds	r7, #20
 800fd18:	46bd      	mov	sp, r7
 800fd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd1e:	4770      	bx	lr
 800fd20:	200027c0 	.word	0x200027c0

0800fd24 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800fd24:	b580      	push	{r7, lr}
 800fd26:	b086      	sub	sp, #24
 800fd28:	af00      	add	r7, sp, #0
 800fd2a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	78db      	ldrb	r3, [r3, #3]
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d034      	beq.n	800fda2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd3c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	7858      	ldrb	r0, [r3, #1]
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800fd48:	2301      	movs	r3, #1
 800fd4a:	697a      	ldr	r2, [r7, #20]
 800fd4c:	f7ff fd0e 	bl	800f76c <disk_write>
 800fd50:	4603      	mov	r3, r0
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d002      	beq.n	800fd5c <sync_window+0x38>
			res = FR_DISK_ERR;
 800fd56:	2301      	movs	r3, #1
 800fd58:	73fb      	strb	r3, [r7, #15]
 800fd5a:	e022      	b.n	800fda2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	2200      	movs	r2, #0
 800fd60:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd66:	697a      	ldr	r2, [r7, #20]
 800fd68:	1ad2      	subs	r2, r2, r3
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd6e:	429a      	cmp	r2, r3
 800fd70:	d217      	bcs.n	800fda2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	789b      	ldrb	r3, [r3, #2]
 800fd76:	613b      	str	r3, [r7, #16]
 800fd78:	e010      	b.n	800fd9c <sync_window+0x78>
					wsect += fs->fsize;
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd7e:	697a      	ldr	r2, [r7, #20]
 800fd80:	4413      	add	r3, r2
 800fd82:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	7858      	ldrb	r0, [r3, #1]
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800fd8e:	2301      	movs	r3, #1
 800fd90:	697a      	ldr	r2, [r7, #20]
 800fd92:	f7ff fceb 	bl	800f76c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800fd96:	693b      	ldr	r3, [r7, #16]
 800fd98:	3b01      	subs	r3, #1
 800fd9a:	613b      	str	r3, [r7, #16]
 800fd9c:	693b      	ldr	r3, [r7, #16]
 800fd9e:	2b01      	cmp	r3, #1
 800fda0:	d8eb      	bhi.n	800fd7a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800fda2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fda4:	4618      	mov	r0, r3
 800fda6:	3718      	adds	r7, #24
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}

0800fdac <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800fdac:	b580      	push	{r7, lr}
 800fdae:	b084      	sub	sp, #16
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
 800fdb4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdbe:	683a      	ldr	r2, [r7, #0]
 800fdc0:	429a      	cmp	r2, r3
 800fdc2:	d01b      	beq.n	800fdfc <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f7ff ffad 	bl	800fd24 <sync_window>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800fdce:	7bfb      	ldrb	r3, [r7, #15]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d113      	bne.n	800fdfc <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	7858      	ldrb	r0, [r3, #1]
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800fdde:	2301      	movs	r3, #1
 800fde0:	683a      	ldr	r2, [r7, #0]
 800fde2:	f7ff fca3 	bl	800f72c <disk_read>
 800fde6:	4603      	mov	r3, r0
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d004      	beq.n	800fdf6 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800fdec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fdf0:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800fdf2:	2301      	movs	r3, #1
 800fdf4:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	683a      	ldr	r2, [r7, #0]
 800fdfa:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
	return res;
 800fdfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800fdfe:	4618      	mov	r0, r3
 800fe00:	3710      	adds	r7, #16
 800fe02:	46bd      	mov	sp, r7
 800fe04:	bd80      	pop	{r7, pc}
	...

0800fe08 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800fe08:	b580      	push	{r7, lr}
 800fe0a:	b084      	sub	sp, #16
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800fe10:	6878      	ldr	r0, [r7, #4]
 800fe12:	f7ff ff87 	bl	800fd24 <sync_window>
 800fe16:	4603      	mov	r3, r0
 800fe18:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800fe1a:	7bfb      	ldrb	r3, [r7, #15]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d159      	bne.n	800fed4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	781b      	ldrb	r3, [r3, #0]
 800fe24:	2b03      	cmp	r3, #3
 800fe26:	d149      	bne.n	800febc <sync_fs+0xb4>
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	791b      	ldrb	r3, [r3, #4]
 800fe2c:	2b01      	cmp	r3, #1
 800fe2e:	d145      	bne.n	800febc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	899b      	ldrh	r3, [r3, #12]
 800fe3a:	461a      	mov	r2, r3
 800fe3c:	2100      	movs	r1, #0
 800fe3e:	f7ff fd76 	bl	800f92e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	333c      	adds	r3, #60	; 0x3c
 800fe46:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fe4a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800fe4e:	4618      	mov	r0, r3
 800fe50:	f7ff fd05 	bl	800f85e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	333c      	adds	r3, #60	; 0x3c
 800fe58:	4921      	ldr	r1, [pc, #132]	; (800fee0 <sync_fs+0xd8>)
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f7ff fd1a 	bl	800f894 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	333c      	adds	r3, #60	; 0x3c
 800fe64:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800fe68:	491e      	ldr	r1, [pc, #120]	; (800fee4 <sync_fs+0xdc>)
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7ff fd12 	bl	800f894 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	333c      	adds	r3, #60	; 0x3c
 800fe74:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800fe78:	687b      	ldr	r3, [r7, #4]
 800fe7a:	69db      	ldr	r3, [r3, #28]
 800fe7c:	4619      	mov	r1, r3
 800fe7e:	4610      	mov	r0, r2
 800fe80:	f7ff fd08 	bl	800f894 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	333c      	adds	r3, #60	; 0x3c
 800fe88:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	699b      	ldr	r3, [r3, #24]
 800fe90:	4619      	mov	r1, r3
 800fe92:	4610      	mov	r0, r2
 800fe94:	f7ff fcfe 	bl	800f894 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fe9c:	1c5a      	adds	r2, r3, #1
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	639a      	str	r2, [r3, #56]	; 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800fea2:	687b      	ldr	r3, [r7, #4]
 800fea4:	7858      	ldrb	r0, [r3, #1]
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800feb0:	2301      	movs	r3, #1
 800feb2:	f7ff fc5b 	bl	800f76c <disk_write>
			fs->fsi_flag = 0;
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	2200      	movs	r2, #0
 800feba:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	785b      	ldrb	r3, [r3, #1]
 800fec0:	2200      	movs	r2, #0
 800fec2:	2100      	movs	r1, #0
 800fec4:	4618      	mov	r0, r3
 800fec6:	f7ff fc71 	bl	800f7ac <disk_ioctl>
 800feca:	4603      	mov	r3, r0
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d001      	beq.n	800fed4 <sync_fs+0xcc>
 800fed0:	2301      	movs	r3, #1
 800fed2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800fed4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fed6:	4618      	mov	r0, r3
 800fed8:	3710      	adds	r7, #16
 800feda:	46bd      	mov	sp, r7
 800fedc:	bd80      	pop	{r7, pc}
 800fede:	bf00      	nop
 800fee0:	41615252 	.word	0x41615252
 800fee4:	61417272 	.word	0x61417272

0800fee8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800fee8:	b480      	push	{r7}
 800feea:	b083      	sub	sp, #12
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
 800fef0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800fef2:	683b      	ldr	r3, [r7, #0]
 800fef4:	3b02      	subs	r3, #2
 800fef6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	6a1b      	ldr	r3, [r3, #32]
 800fefc:	3b02      	subs	r3, #2
 800fefe:	683a      	ldr	r2, [r7, #0]
 800ff00:	429a      	cmp	r2, r3
 800ff02:	d301      	bcc.n	800ff08 <clust2sect+0x20>
 800ff04:	2300      	movs	r3, #0
 800ff06:	e008      	b.n	800ff1a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	895b      	ldrh	r3, [r3, #10]
 800ff0c:	461a      	mov	r2, r3
 800ff0e:	683b      	ldr	r3, [r7, #0]
 800ff10:	fb03 f202 	mul.w	r2, r3, r2
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ff18:	4413      	add	r3, r2
}
 800ff1a:	4618      	mov	r0, r3
 800ff1c:	370c      	adds	r7, #12
 800ff1e:	46bd      	mov	sp, r7
 800ff20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff24:	4770      	bx	lr

0800ff26 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ff26:	b580      	push	{r7, lr}
 800ff28:	b086      	sub	sp, #24
 800ff2a:	af00      	add	r7, sp, #0
 800ff2c:	6078      	str	r0, [r7, #4]
 800ff2e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ff36:	683b      	ldr	r3, [r7, #0]
 800ff38:	2b01      	cmp	r3, #1
 800ff3a:	d904      	bls.n	800ff46 <get_fat+0x20>
 800ff3c:	693b      	ldr	r3, [r7, #16]
 800ff3e:	6a1b      	ldr	r3, [r3, #32]
 800ff40:	683a      	ldr	r2, [r7, #0]
 800ff42:	429a      	cmp	r2, r3
 800ff44:	d302      	bcc.n	800ff4c <get_fat+0x26>
		val = 1;	/* Internal error */
 800ff46:	2301      	movs	r3, #1
 800ff48:	617b      	str	r3, [r7, #20]
 800ff4a:	e0bb      	b.n	80100c4 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ff4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ff50:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ff52:	693b      	ldr	r3, [r7, #16]
 800ff54:	781b      	ldrb	r3, [r3, #0]
 800ff56:	2b03      	cmp	r3, #3
 800ff58:	f000 8083 	beq.w	8010062 <get_fat+0x13c>
 800ff5c:	2b03      	cmp	r3, #3
 800ff5e:	f300 80a7 	bgt.w	80100b0 <get_fat+0x18a>
 800ff62:	2b01      	cmp	r3, #1
 800ff64:	d002      	beq.n	800ff6c <get_fat+0x46>
 800ff66:	2b02      	cmp	r3, #2
 800ff68:	d056      	beq.n	8010018 <get_fat+0xf2>
 800ff6a:	e0a1      	b.n	80100b0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ff6c:	683b      	ldr	r3, [r7, #0]
 800ff6e:	60fb      	str	r3, [r7, #12]
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	085b      	lsrs	r3, r3, #1
 800ff74:	68fa      	ldr	r2, [r7, #12]
 800ff76:	4413      	add	r3, r2
 800ff78:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ff7a:	693b      	ldr	r3, [r7, #16]
 800ff7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff7e:	693b      	ldr	r3, [r7, #16]
 800ff80:	899b      	ldrh	r3, [r3, #12]
 800ff82:	4619      	mov	r1, r3
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	fbb3 f3f1 	udiv	r3, r3, r1
 800ff8a:	4413      	add	r3, r2
 800ff8c:	4619      	mov	r1, r3
 800ff8e:	6938      	ldr	r0, [r7, #16]
 800ff90:	f7ff ff0c 	bl	800fdac <move_window>
 800ff94:	4603      	mov	r3, r0
 800ff96:	2b00      	cmp	r3, #0
 800ff98:	f040 808d 	bne.w	80100b6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	1c5a      	adds	r2, r3, #1
 800ffa0:	60fa      	str	r2, [r7, #12]
 800ffa2:	693a      	ldr	r2, [r7, #16]
 800ffa4:	8992      	ldrh	r2, [r2, #12]
 800ffa6:	fbb3 f1f2 	udiv	r1, r3, r2
 800ffaa:	fb02 f201 	mul.w	r2, r2, r1
 800ffae:	1a9b      	subs	r3, r3, r2
 800ffb0:	693a      	ldr	r2, [r7, #16]
 800ffb2:	4413      	add	r3, r2
 800ffb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ffb8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ffba:	693b      	ldr	r3, [r7, #16]
 800ffbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffbe:	693b      	ldr	r3, [r7, #16]
 800ffc0:	899b      	ldrh	r3, [r3, #12]
 800ffc2:	4619      	mov	r1, r3
 800ffc4:	68fb      	ldr	r3, [r7, #12]
 800ffc6:	fbb3 f3f1 	udiv	r3, r3, r1
 800ffca:	4413      	add	r3, r2
 800ffcc:	4619      	mov	r1, r3
 800ffce:	6938      	ldr	r0, [r7, #16]
 800ffd0:	f7ff feec 	bl	800fdac <move_window>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d16f      	bne.n	80100ba <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ffda:	693b      	ldr	r3, [r7, #16]
 800ffdc:	899b      	ldrh	r3, [r3, #12]
 800ffde:	461a      	mov	r2, r3
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	fbb3 f1f2 	udiv	r1, r3, r2
 800ffe6:	fb02 f201 	mul.w	r2, r2, r1
 800ffea:	1a9b      	subs	r3, r3, r2
 800ffec:	693a      	ldr	r2, [r7, #16]
 800ffee:	4413      	add	r3, r2
 800fff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fff4:	021b      	lsls	r3, r3, #8
 800fff6:	461a      	mov	r2, r3
 800fff8:	68bb      	ldr	r3, [r7, #8]
 800fffa:	4313      	orrs	r3, r2
 800fffc:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	f003 0301 	and.w	r3, r3, #1
 8010004:	2b00      	cmp	r3, #0
 8010006:	d002      	beq.n	801000e <get_fat+0xe8>
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	091b      	lsrs	r3, r3, #4
 801000c:	e002      	b.n	8010014 <get_fat+0xee>
 801000e:	68bb      	ldr	r3, [r7, #8]
 8010010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010014:	617b      	str	r3, [r7, #20]
			break;
 8010016:	e055      	b.n	80100c4 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010018:	693b      	ldr	r3, [r7, #16]
 801001a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801001c:	693b      	ldr	r3, [r7, #16]
 801001e:	899b      	ldrh	r3, [r3, #12]
 8010020:	085b      	lsrs	r3, r3, #1
 8010022:	b29b      	uxth	r3, r3
 8010024:	4619      	mov	r1, r3
 8010026:	683b      	ldr	r3, [r7, #0]
 8010028:	fbb3 f3f1 	udiv	r3, r3, r1
 801002c:	4413      	add	r3, r2
 801002e:	4619      	mov	r1, r3
 8010030:	6938      	ldr	r0, [r7, #16]
 8010032:	f7ff febb 	bl	800fdac <move_window>
 8010036:	4603      	mov	r3, r0
 8010038:	2b00      	cmp	r3, #0
 801003a:	d140      	bne.n	80100be <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 801003c:	693b      	ldr	r3, [r7, #16]
 801003e:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010042:	683b      	ldr	r3, [r7, #0]
 8010044:	005b      	lsls	r3, r3, #1
 8010046:	693a      	ldr	r2, [r7, #16]
 8010048:	8992      	ldrh	r2, [r2, #12]
 801004a:	fbb3 f0f2 	udiv	r0, r3, r2
 801004e:	fb02 f200 	mul.w	r2, r2, r0
 8010052:	1a9b      	subs	r3, r3, r2
 8010054:	440b      	add	r3, r1
 8010056:	4618      	mov	r0, r3
 8010058:	f7ff fbc6 	bl	800f7e8 <ld_word>
 801005c:	4603      	mov	r3, r0
 801005e:	617b      	str	r3, [r7, #20]
			break;
 8010060:	e030      	b.n	80100c4 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010062:	693b      	ldr	r3, [r7, #16]
 8010064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010066:	693b      	ldr	r3, [r7, #16]
 8010068:	899b      	ldrh	r3, [r3, #12]
 801006a:	089b      	lsrs	r3, r3, #2
 801006c:	b29b      	uxth	r3, r3
 801006e:	4619      	mov	r1, r3
 8010070:	683b      	ldr	r3, [r7, #0]
 8010072:	fbb3 f3f1 	udiv	r3, r3, r1
 8010076:	4413      	add	r3, r2
 8010078:	4619      	mov	r1, r3
 801007a:	6938      	ldr	r0, [r7, #16]
 801007c:	f7ff fe96 	bl	800fdac <move_window>
 8010080:	4603      	mov	r3, r0
 8010082:	2b00      	cmp	r3, #0
 8010084:	d11d      	bne.n	80100c2 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010086:	693b      	ldr	r3, [r7, #16]
 8010088:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801008c:	683b      	ldr	r3, [r7, #0]
 801008e:	009b      	lsls	r3, r3, #2
 8010090:	693a      	ldr	r2, [r7, #16]
 8010092:	8992      	ldrh	r2, [r2, #12]
 8010094:	fbb3 f0f2 	udiv	r0, r3, r2
 8010098:	fb02 f200 	mul.w	r2, r2, r0
 801009c:	1a9b      	subs	r3, r3, r2
 801009e:	440b      	add	r3, r1
 80100a0:	4618      	mov	r0, r3
 80100a2:	f7ff fbb9 	bl	800f818 <ld_dword>
 80100a6:	4603      	mov	r3, r0
 80100a8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80100ac:	617b      	str	r3, [r7, #20]
			break;
 80100ae:	e009      	b.n	80100c4 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80100b0:	2301      	movs	r3, #1
 80100b2:	617b      	str	r3, [r7, #20]
 80100b4:	e006      	b.n	80100c4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80100b6:	bf00      	nop
 80100b8:	e004      	b.n	80100c4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80100ba:	bf00      	nop
 80100bc:	e002      	b.n	80100c4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80100be:	bf00      	nop
 80100c0:	e000      	b.n	80100c4 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80100c2:	bf00      	nop
		}
	}

	return val;
 80100c4:	697b      	ldr	r3, [r7, #20]
}
 80100c6:	4618      	mov	r0, r3
 80100c8:	3718      	adds	r7, #24
 80100ca:	46bd      	mov	sp, r7
 80100cc:	bd80      	pop	{r7, pc}

080100ce <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80100ce:	b590      	push	{r4, r7, lr}
 80100d0:	b089      	sub	sp, #36	; 0x24
 80100d2:	af00      	add	r7, sp, #0
 80100d4:	60f8      	str	r0, [r7, #12]
 80100d6:	60b9      	str	r1, [r7, #8]
 80100d8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80100da:	2302      	movs	r3, #2
 80100dc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80100de:	68bb      	ldr	r3, [r7, #8]
 80100e0:	2b01      	cmp	r3, #1
 80100e2:	f240 8102 	bls.w	80102ea <put_fat+0x21c>
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	6a1b      	ldr	r3, [r3, #32]
 80100ea:	68ba      	ldr	r2, [r7, #8]
 80100ec:	429a      	cmp	r2, r3
 80100ee:	f080 80fc 	bcs.w	80102ea <put_fat+0x21c>
		switch (fs->fs_type) {
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	781b      	ldrb	r3, [r3, #0]
 80100f6:	2b03      	cmp	r3, #3
 80100f8:	f000 80b6 	beq.w	8010268 <put_fat+0x19a>
 80100fc:	2b03      	cmp	r3, #3
 80100fe:	f300 80fd 	bgt.w	80102fc <put_fat+0x22e>
 8010102:	2b01      	cmp	r3, #1
 8010104:	d003      	beq.n	801010e <put_fat+0x40>
 8010106:	2b02      	cmp	r3, #2
 8010108:	f000 8083 	beq.w	8010212 <put_fat+0x144>
 801010c:	e0f6      	b.n	80102fc <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 801010e:	68bb      	ldr	r3, [r7, #8]
 8010110:	61bb      	str	r3, [r7, #24]
 8010112:	69bb      	ldr	r3, [r7, #24]
 8010114:	085b      	lsrs	r3, r3, #1
 8010116:	69ba      	ldr	r2, [r7, #24]
 8010118:	4413      	add	r3, r2
 801011a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010120:	68fb      	ldr	r3, [r7, #12]
 8010122:	899b      	ldrh	r3, [r3, #12]
 8010124:	4619      	mov	r1, r3
 8010126:	69bb      	ldr	r3, [r7, #24]
 8010128:	fbb3 f3f1 	udiv	r3, r3, r1
 801012c:	4413      	add	r3, r2
 801012e:	4619      	mov	r1, r3
 8010130:	68f8      	ldr	r0, [r7, #12]
 8010132:	f7ff fe3b 	bl	800fdac <move_window>
 8010136:	4603      	mov	r3, r0
 8010138:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801013a:	7ffb      	ldrb	r3, [r7, #31]
 801013c:	2b00      	cmp	r3, #0
 801013e:	f040 80d6 	bne.w	80102ee <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010148:	69bb      	ldr	r3, [r7, #24]
 801014a:	1c5a      	adds	r2, r3, #1
 801014c:	61ba      	str	r2, [r7, #24]
 801014e:	68fa      	ldr	r2, [r7, #12]
 8010150:	8992      	ldrh	r2, [r2, #12]
 8010152:	fbb3 f0f2 	udiv	r0, r3, r2
 8010156:	fb02 f200 	mul.w	r2, r2, r0
 801015a:	1a9b      	subs	r3, r3, r2
 801015c:	440b      	add	r3, r1
 801015e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8010160:	68bb      	ldr	r3, [r7, #8]
 8010162:	f003 0301 	and.w	r3, r3, #1
 8010166:	2b00      	cmp	r3, #0
 8010168:	d00d      	beq.n	8010186 <put_fat+0xb8>
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	781b      	ldrb	r3, [r3, #0]
 801016e:	b25b      	sxtb	r3, r3
 8010170:	f003 030f 	and.w	r3, r3, #15
 8010174:	b25a      	sxtb	r2, r3
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	b2db      	uxtb	r3, r3
 801017a:	011b      	lsls	r3, r3, #4
 801017c:	b25b      	sxtb	r3, r3
 801017e:	4313      	orrs	r3, r2
 8010180:	b25b      	sxtb	r3, r3
 8010182:	b2db      	uxtb	r3, r3
 8010184:	e001      	b.n	801018a <put_fat+0xbc>
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	b2db      	uxtb	r3, r3
 801018a:	697a      	ldr	r2, [r7, #20]
 801018c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	2201      	movs	r2, #1
 8010192:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8010194:	68fb      	ldr	r3, [r7, #12]
 8010196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	899b      	ldrh	r3, [r3, #12]
 801019c:	4619      	mov	r1, r3
 801019e:	69bb      	ldr	r3, [r7, #24]
 80101a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80101a4:	4413      	add	r3, r2
 80101a6:	4619      	mov	r1, r3
 80101a8:	68f8      	ldr	r0, [r7, #12]
 80101aa:	f7ff fdff 	bl	800fdac <move_window>
 80101ae:	4603      	mov	r3, r0
 80101b0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80101b2:	7ffb      	ldrb	r3, [r7, #31]
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	f040 809c 	bne.w	80102f2 <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	899b      	ldrh	r3, [r3, #12]
 80101c4:	461a      	mov	r2, r3
 80101c6:	69bb      	ldr	r3, [r7, #24]
 80101c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80101cc:	fb02 f200 	mul.w	r2, r2, r0
 80101d0:	1a9b      	subs	r3, r3, r2
 80101d2:	440b      	add	r3, r1
 80101d4:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	f003 0301 	and.w	r3, r3, #1
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d003      	beq.n	80101e8 <put_fat+0x11a>
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	091b      	lsrs	r3, r3, #4
 80101e4:	b2db      	uxtb	r3, r3
 80101e6:	e00e      	b.n	8010206 <put_fat+0x138>
 80101e8:	697b      	ldr	r3, [r7, #20]
 80101ea:	781b      	ldrb	r3, [r3, #0]
 80101ec:	b25b      	sxtb	r3, r3
 80101ee:	f023 030f 	bic.w	r3, r3, #15
 80101f2:	b25a      	sxtb	r2, r3
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	0a1b      	lsrs	r3, r3, #8
 80101f8:	b25b      	sxtb	r3, r3
 80101fa:	f003 030f 	and.w	r3, r3, #15
 80101fe:	b25b      	sxtb	r3, r3
 8010200:	4313      	orrs	r3, r2
 8010202:	b25b      	sxtb	r3, r3
 8010204:	b2db      	uxtb	r3, r3
 8010206:	697a      	ldr	r2, [r7, #20]
 8010208:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	2201      	movs	r2, #1
 801020e:	70da      	strb	r2, [r3, #3]
			break;
 8010210:	e074      	b.n	80102fc <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010216:	68fb      	ldr	r3, [r7, #12]
 8010218:	899b      	ldrh	r3, [r3, #12]
 801021a:	085b      	lsrs	r3, r3, #1
 801021c:	b29b      	uxth	r3, r3
 801021e:	4619      	mov	r1, r3
 8010220:	68bb      	ldr	r3, [r7, #8]
 8010222:	fbb3 f3f1 	udiv	r3, r3, r1
 8010226:	4413      	add	r3, r2
 8010228:	4619      	mov	r1, r3
 801022a:	68f8      	ldr	r0, [r7, #12]
 801022c:	f7ff fdbe 	bl	800fdac <move_window>
 8010230:	4603      	mov	r3, r0
 8010232:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8010234:	7ffb      	ldrb	r3, [r7, #31]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d15d      	bne.n	80102f6 <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010240:	68bb      	ldr	r3, [r7, #8]
 8010242:	005b      	lsls	r3, r3, #1
 8010244:	68fa      	ldr	r2, [r7, #12]
 8010246:	8992      	ldrh	r2, [r2, #12]
 8010248:	fbb3 f0f2 	udiv	r0, r3, r2
 801024c:	fb02 f200 	mul.w	r2, r2, r0
 8010250:	1a9b      	subs	r3, r3, r2
 8010252:	440b      	add	r3, r1
 8010254:	687a      	ldr	r2, [r7, #4]
 8010256:	b292      	uxth	r2, r2
 8010258:	4611      	mov	r1, r2
 801025a:	4618      	mov	r0, r3
 801025c:	f7ff faff 	bl	800f85e <st_word>
			fs->wflag = 1;
 8010260:	68fb      	ldr	r3, [r7, #12]
 8010262:	2201      	movs	r2, #1
 8010264:	70da      	strb	r2, [r3, #3]
			break;
 8010266:	e049      	b.n	80102fc <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	899b      	ldrh	r3, [r3, #12]
 8010270:	089b      	lsrs	r3, r3, #2
 8010272:	b29b      	uxth	r3, r3
 8010274:	4619      	mov	r1, r3
 8010276:	68bb      	ldr	r3, [r7, #8]
 8010278:	fbb3 f3f1 	udiv	r3, r3, r1
 801027c:	4413      	add	r3, r2
 801027e:	4619      	mov	r1, r3
 8010280:	68f8      	ldr	r0, [r7, #12]
 8010282:	f7ff fd93 	bl	800fdac <move_window>
 8010286:	4603      	mov	r3, r0
 8010288:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801028a:	7ffb      	ldrb	r3, [r7, #31]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d134      	bne.n	80102fa <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8010296:	68fb      	ldr	r3, [r7, #12]
 8010298:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	009b      	lsls	r3, r3, #2
 80102a0:	68fa      	ldr	r2, [r7, #12]
 80102a2:	8992      	ldrh	r2, [r2, #12]
 80102a4:	fbb3 f0f2 	udiv	r0, r3, r2
 80102a8:	fb02 f200 	mul.w	r2, r2, r0
 80102ac:	1a9b      	subs	r3, r3, r2
 80102ae:	440b      	add	r3, r1
 80102b0:	4618      	mov	r0, r3
 80102b2:	f7ff fab1 	bl	800f818 <ld_dword>
 80102b6:	4603      	mov	r3, r0
 80102b8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80102bc:	4323      	orrs	r3, r4
 80102be:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80102c0:	68fb      	ldr	r3, [r7, #12]
 80102c2:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80102c6:	68bb      	ldr	r3, [r7, #8]
 80102c8:	009b      	lsls	r3, r3, #2
 80102ca:	68fa      	ldr	r2, [r7, #12]
 80102cc:	8992      	ldrh	r2, [r2, #12]
 80102ce:	fbb3 f0f2 	udiv	r0, r3, r2
 80102d2:	fb02 f200 	mul.w	r2, r2, r0
 80102d6:	1a9b      	subs	r3, r3, r2
 80102d8:	440b      	add	r3, r1
 80102da:	6879      	ldr	r1, [r7, #4]
 80102dc:	4618      	mov	r0, r3
 80102de:	f7ff fad9 	bl	800f894 <st_dword>
			fs->wflag = 1;
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	2201      	movs	r2, #1
 80102e6:	70da      	strb	r2, [r3, #3]
			break;
 80102e8:	e008      	b.n	80102fc <put_fat+0x22e>
		}
	}
 80102ea:	bf00      	nop
 80102ec:	e006      	b.n	80102fc <put_fat+0x22e>
			if (res != FR_OK) break;
 80102ee:	bf00      	nop
 80102f0:	e004      	b.n	80102fc <put_fat+0x22e>
			if (res != FR_OK) break;
 80102f2:	bf00      	nop
 80102f4:	e002      	b.n	80102fc <put_fat+0x22e>
			if (res != FR_OK) break;
 80102f6:	bf00      	nop
 80102f8:	e000      	b.n	80102fc <put_fat+0x22e>
			if (res != FR_OK) break;
 80102fa:	bf00      	nop
	return res;
 80102fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80102fe:	4618      	mov	r0, r3
 8010300:	3724      	adds	r7, #36	; 0x24
 8010302:	46bd      	mov	sp, r7
 8010304:	bd90      	pop	{r4, r7, pc}

08010306 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8010306:	b580      	push	{r7, lr}
 8010308:	b088      	sub	sp, #32
 801030a:	af00      	add	r7, sp, #0
 801030c:	60f8      	str	r0, [r7, #12]
 801030e:	60b9      	str	r1, [r7, #8]
 8010310:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8010312:	2300      	movs	r3, #0
 8010314:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801031c:	68bb      	ldr	r3, [r7, #8]
 801031e:	2b01      	cmp	r3, #1
 8010320:	d904      	bls.n	801032c <remove_chain+0x26>
 8010322:	69bb      	ldr	r3, [r7, #24]
 8010324:	6a1b      	ldr	r3, [r3, #32]
 8010326:	68ba      	ldr	r2, [r7, #8]
 8010328:	429a      	cmp	r2, r3
 801032a:	d301      	bcc.n	8010330 <remove_chain+0x2a>
 801032c:	2302      	movs	r3, #2
 801032e:	e04b      	b.n	80103c8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	2b00      	cmp	r3, #0
 8010334:	d00c      	beq.n	8010350 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8010336:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801033a:	6879      	ldr	r1, [r7, #4]
 801033c:	69b8      	ldr	r0, [r7, #24]
 801033e:	f7ff fec6 	bl	80100ce <put_fat>
 8010342:	4603      	mov	r3, r0
 8010344:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8010346:	7ffb      	ldrb	r3, [r7, #31]
 8010348:	2b00      	cmp	r3, #0
 801034a:	d001      	beq.n	8010350 <remove_chain+0x4a>
 801034c:	7ffb      	ldrb	r3, [r7, #31]
 801034e:	e03b      	b.n	80103c8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8010350:	68b9      	ldr	r1, [r7, #8]
 8010352:	68f8      	ldr	r0, [r7, #12]
 8010354:	f7ff fde7 	bl	800ff26 <get_fat>
 8010358:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 801035a:	697b      	ldr	r3, [r7, #20]
 801035c:	2b00      	cmp	r3, #0
 801035e:	d031      	beq.n	80103c4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8010360:	697b      	ldr	r3, [r7, #20]
 8010362:	2b01      	cmp	r3, #1
 8010364:	d101      	bne.n	801036a <remove_chain+0x64>
 8010366:	2302      	movs	r3, #2
 8010368:	e02e      	b.n	80103c8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 801036a:	697b      	ldr	r3, [r7, #20]
 801036c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010370:	d101      	bne.n	8010376 <remove_chain+0x70>
 8010372:	2301      	movs	r3, #1
 8010374:	e028      	b.n	80103c8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8010376:	2200      	movs	r2, #0
 8010378:	68b9      	ldr	r1, [r7, #8]
 801037a:	69b8      	ldr	r0, [r7, #24]
 801037c:	f7ff fea7 	bl	80100ce <put_fat>
 8010380:	4603      	mov	r3, r0
 8010382:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8010384:	7ffb      	ldrb	r3, [r7, #31]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d001      	beq.n	801038e <remove_chain+0x88>
 801038a:	7ffb      	ldrb	r3, [r7, #31]
 801038c:	e01c      	b.n	80103c8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 801038e:	69bb      	ldr	r3, [r7, #24]
 8010390:	69da      	ldr	r2, [r3, #28]
 8010392:	69bb      	ldr	r3, [r7, #24]
 8010394:	6a1b      	ldr	r3, [r3, #32]
 8010396:	3b02      	subs	r3, #2
 8010398:	429a      	cmp	r2, r3
 801039a:	d20b      	bcs.n	80103b4 <remove_chain+0xae>
			fs->free_clst++;
 801039c:	69bb      	ldr	r3, [r7, #24]
 801039e:	69db      	ldr	r3, [r3, #28]
 80103a0:	1c5a      	adds	r2, r3, #1
 80103a2:	69bb      	ldr	r3, [r7, #24]
 80103a4:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 80103a6:	69bb      	ldr	r3, [r7, #24]
 80103a8:	791b      	ldrb	r3, [r3, #4]
 80103aa:	f043 0301 	orr.w	r3, r3, #1
 80103ae:	b2da      	uxtb	r2, r3
 80103b0:	69bb      	ldr	r3, [r7, #24]
 80103b2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80103b4:	697b      	ldr	r3, [r7, #20]
 80103b6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80103b8:	69bb      	ldr	r3, [r7, #24]
 80103ba:	6a1b      	ldr	r3, [r3, #32]
 80103bc:	68ba      	ldr	r2, [r7, #8]
 80103be:	429a      	cmp	r2, r3
 80103c0:	d3c6      	bcc.n	8010350 <remove_chain+0x4a>
 80103c2:	e000      	b.n	80103c6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80103c4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80103c6:	2300      	movs	r3, #0
}
 80103c8:	4618      	mov	r0, r3
 80103ca:	3720      	adds	r7, #32
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}

080103d0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b088      	sub	sp, #32
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
 80103d8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80103da:	687b      	ldr	r3, [r7, #4]
 80103dc:	681b      	ldr	r3, [r3, #0]
 80103de:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d10d      	bne.n	8010402 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80103e6:	693b      	ldr	r3, [r7, #16]
 80103e8:	699b      	ldr	r3, [r3, #24]
 80103ea:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80103ec:	69bb      	ldr	r3, [r7, #24]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d004      	beq.n	80103fc <create_chain+0x2c>
 80103f2:	693b      	ldr	r3, [r7, #16]
 80103f4:	6a1b      	ldr	r3, [r3, #32]
 80103f6:	69ba      	ldr	r2, [r7, #24]
 80103f8:	429a      	cmp	r2, r3
 80103fa:	d31b      	bcc.n	8010434 <create_chain+0x64>
 80103fc:	2301      	movs	r3, #1
 80103fe:	61bb      	str	r3, [r7, #24]
 8010400:	e018      	b.n	8010434 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8010402:	6839      	ldr	r1, [r7, #0]
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f7ff fd8e 	bl	800ff26 <get_fat>
 801040a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801040c:	68fb      	ldr	r3, [r7, #12]
 801040e:	2b01      	cmp	r3, #1
 8010410:	d801      	bhi.n	8010416 <create_chain+0x46>
 8010412:	2301      	movs	r3, #1
 8010414:	e070      	b.n	80104f8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8010416:	68fb      	ldr	r3, [r7, #12]
 8010418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801041c:	d101      	bne.n	8010422 <create_chain+0x52>
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	e06a      	b.n	80104f8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8010422:	693b      	ldr	r3, [r7, #16]
 8010424:	6a1b      	ldr	r3, [r3, #32]
 8010426:	68fa      	ldr	r2, [r7, #12]
 8010428:	429a      	cmp	r2, r3
 801042a:	d201      	bcs.n	8010430 <create_chain+0x60>
 801042c:	68fb      	ldr	r3, [r7, #12]
 801042e:	e063      	b.n	80104f8 <create_chain+0x128>
		scl = clst;
 8010430:	683b      	ldr	r3, [r7, #0]
 8010432:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8010434:	69bb      	ldr	r3, [r7, #24]
 8010436:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8010438:	69fb      	ldr	r3, [r7, #28]
 801043a:	3301      	adds	r3, #1
 801043c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	6a1b      	ldr	r3, [r3, #32]
 8010442:	69fa      	ldr	r2, [r7, #28]
 8010444:	429a      	cmp	r2, r3
 8010446:	d307      	bcc.n	8010458 <create_chain+0x88>
				ncl = 2;
 8010448:	2302      	movs	r3, #2
 801044a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801044c:	69fa      	ldr	r2, [r7, #28]
 801044e:	69bb      	ldr	r3, [r7, #24]
 8010450:	429a      	cmp	r2, r3
 8010452:	d901      	bls.n	8010458 <create_chain+0x88>
 8010454:	2300      	movs	r3, #0
 8010456:	e04f      	b.n	80104f8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8010458:	69f9      	ldr	r1, [r7, #28]
 801045a:	6878      	ldr	r0, [r7, #4]
 801045c:	f7ff fd63 	bl	800ff26 <get_fat>
 8010460:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8010462:	68fb      	ldr	r3, [r7, #12]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d00e      	beq.n	8010486 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8010468:	68fb      	ldr	r3, [r7, #12]
 801046a:	2b01      	cmp	r3, #1
 801046c:	d003      	beq.n	8010476 <create_chain+0xa6>
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010474:	d101      	bne.n	801047a <create_chain+0xaa>
 8010476:	68fb      	ldr	r3, [r7, #12]
 8010478:	e03e      	b.n	80104f8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801047a:	69fa      	ldr	r2, [r7, #28]
 801047c:	69bb      	ldr	r3, [r7, #24]
 801047e:	429a      	cmp	r2, r3
 8010480:	d1da      	bne.n	8010438 <create_chain+0x68>
 8010482:	2300      	movs	r3, #0
 8010484:	e038      	b.n	80104f8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8010486:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8010488:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801048c:	69f9      	ldr	r1, [r7, #28]
 801048e:	6938      	ldr	r0, [r7, #16]
 8010490:	f7ff fe1d 	bl	80100ce <put_fat>
 8010494:	4603      	mov	r3, r0
 8010496:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8010498:	7dfb      	ldrb	r3, [r7, #23]
 801049a:	2b00      	cmp	r3, #0
 801049c:	d109      	bne.n	80104b2 <create_chain+0xe2>
 801049e:	683b      	ldr	r3, [r7, #0]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d006      	beq.n	80104b2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80104a4:	69fa      	ldr	r2, [r7, #28]
 80104a6:	6839      	ldr	r1, [r7, #0]
 80104a8:	6938      	ldr	r0, [r7, #16]
 80104aa:	f7ff fe10 	bl	80100ce <put_fat>
 80104ae:	4603      	mov	r3, r0
 80104b0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80104b2:	7dfb      	ldrb	r3, [r7, #23]
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d116      	bne.n	80104e6 <create_chain+0x116>
		fs->last_clst = ncl;
 80104b8:	693b      	ldr	r3, [r7, #16]
 80104ba:	69fa      	ldr	r2, [r7, #28]
 80104bc:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80104be:	693b      	ldr	r3, [r7, #16]
 80104c0:	69da      	ldr	r2, [r3, #28]
 80104c2:	693b      	ldr	r3, [r7, #16]
 80104c4:	6a1b      	ldr	r3, [r3, #32]
 80104c6:	3b02      	subs	r3, #2
 80104c8:	429a      	cmp	r2, r3
 80104ca:	d804      	bhi.n	80104d6 <create_chain+0x106>
 80104cc:	693b      	ldr	r3, [r7, #16]
 80104ce:	69db      	ldr	r3, [r3, #28]
 80104d0:	1e5a      	subs	r2, r3, #1
 80104d2:	693b      	ldr	r3, [r7, #16]
 80104d4:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 80104d6:	693b      	ldr	r3, [r7, #16]
 80104d8:	791b      	ldrb	r3, [r3, #4]
 80104da:	f043 0301 	orr.w	r3, r3, #1
 80104de:	b2da      	uxtb	r2, r3
 80104e0:	693b      	ldr	r3, [r7, #16]
 80104e2:	711a      	strb	r2, [r3, #4]
 80104e4:	e007      	b.n	80104f6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80104e6:	7dfb      	ldrb	r3, [r7, #23]
 80104e8:	2b01      	cmp	r3, #1
 80104ea:	d102      	bne.n	80104f2 <create_chain+0x122>
 80104ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80104f0:	e000      	b.n	80104f4 <create_chain+0x124>
 80104f2:	2301      	movs	r3, #1
 80104f4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80104f6:	69fb      	ldr	r3, [r7, #28]
}
 80104f8:	4618      	mov	r0, r3
 80104fa:	3720      	adds	r7, #32
 80104fc:	46bd      	mov	sp, r7
 80104fe:	bd80      	pop	{r7, pc}

08010500 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8010500:	b480      	push	{r7}
 8010502:	b087      	sub	sp, #28
 8010504:	af00      	add	r7, sp, #0
 8010506:	6078      	str	r0, [r7, #4]
 8010508:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	681b      	ldr	r3, [r3, #0]
 801050e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010514:	3304      	adds	r3, #4
 8010516:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	899b      	ldrh	r3, [r3, #12]
 801051c:	461a      	mov	r2, r3
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	fbb3 f3f2 	udiv	r3, r3, r2
 8010524:	68fa      	ldr	r2, [r7, #12]
 8010526:	8952      	ldrh	r2, [r2, #10]
 8010528:	fbb3 f3f2 	udiv	r3, r3, r2
 801052c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 801052e:	693b      	ldr	r3, [r7, #16]
 8010530:	1d1a      	adds	r2, r3, #4
 8010532:	613a      	str	r2, [r7, #16]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8010538:	68bb      	ldr	r3, [r7, #8]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d101      	bne.n	8010542 <clmt_clust+0x42>
 801053e:	2300      	movs	r3, #0
 8010540:	e010      	b.n	8010564 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8010542:	697a      	ldr	r2, [r7, #20]
 8010544:	68bb      	ldr	r3, [r7, #8]
 8010546:	429a      	cmp	r2, r3
 8010548:	d307      	bcc.n	801055a <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 801054a:	697a      	ldr	r2, [r7, #20]
 801054c:	68bb      	ldr	r3, [r7, #8]
 801054e:	1ad3      	subs	r3, r2, r3
 8010550:	617b      	str	r3, [r7, #20]
 8010552:	693b      	ldr	r3, [r7, #16]
 8010554:	3304      	adds	r3, #4
 8010556:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8010558:	e7e9      	b.n	801052e <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 801055a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801055c:	693b      	ldr	r3, [r7, #16]
 801055e:	681a      	ldr	r2, [r3, #0]
 8010560:	697b      	ldr	r3, [r7, #20]
 8010562:	4413      	add	r3, r2
}
 8010564:	4618      	mov	r0, r3
 8010566:	371c      	adds	r7, #28
 8010568:	46bd      	mov	sp, r7
 801056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801056e:	4770      	bx	lr

08010570 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8010570:	b580      	push	{r7, lr}
 8010572:	b086      	sub	sp, #24
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
 8010578:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8010580:	683b      	ldr	r3, [r7, #0]
 8010582:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010586:	d204      	bcs.n	8010592 <dir_sdi+0x22>
 8010588:	683b      	ldr	r3, [r7, #0]
 801058a:	f003 031f 	and.w	r3, r3, #31
 801058e:	2b00      	cmp	r3, #0
 8010590:	d001      	beq.n	8010596 <dir_sdi+0x26>
		return FR_INT_ERR;
 8010592:	2302      	movs	r3, #2
 8010594:	e071      	b.n	801067a <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8010596:	687b      	ldr	r3, [r7, #4]
 8010598:	683a      	ldr	r2, [r7, #0]
 801059a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	689b      	ldr	r3, [r3, #8]
 80105a0:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80105a2:	697b      	ldr	r3, [r7, #20]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d106      	bne.n	80105b6 <dir_sdi+0x46>
 80105a8:	693b      	ldr	r3, [r7, #16]
 80105aa:	781b      	ldrb	r3, [r3, #0]
 80105ac:	2b02      	cmp	r3, #2
 80105ae:	d902      	bls.n	80105b6 <dir_sdi+0x46>
		clst = fs->dirbase;
 80105b0:	693b      	ldr	r3, [r7, #16]
 80105b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80105b4:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80105b6:	697b      	ldr	r3, [r7, #20]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	d10c      	bne.n	80105d6 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80105bc:	683b      	ldr	r3, [r7, #0]
 80105be:	095b      	lsrs	r3, r3, #5
 80105c0:	693a      	ldr	r2, [r7, #16]
 80105c2:	8912      	ldrh	r2, [r2, #8]
 80105c4:	4293      	cmp	r3, r2
 80105c6:	d301      	bcc.n	80105cc <dir_sdi+0x5c>
 80105c8:	2302      	movs	r3, #2
 80105ca:	e056      	b.n	801067a <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80105cc:	693b      	ldr	r3, [r7, #16]
 80105ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	61da      	str	r2, [r3, #28]
 80105d4:	e02d      	b.n	8010632 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80105d6:	693b      	ldr	r3, [r7, #16]
 80105d8:	895b      	ldrh	r3, [r3, #10]
 80105da:	461a      	mov	r2, r3
 80105dc:	693b      	ldr	r3, [r7, #16]
 80105de:	899b      	ldrh	r3, [r3, #12]
 80105e0:	fb03 f302 	mul.w	r3, r3, r2
 80105e4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80105e6:	e019      	b.n	801061c <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6979      	ldr	r1, [r7, #20]
 80105ec:	4618      	mov	r0, r3
 80105ee:	f7ff fc9a 	bl	800ff26 <get_fat>
 80105f2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80105f4:	697b      	ldr	r3, [r7, #20]
 80105f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80105fa:	d101      	bne.n	8010600 <dir_sdi+0x90>
 80105fc:	2301      	movs	r3, #1
 80105fe:	e03c      	b.n	801067a <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8010600:	697b      	ldr	r3, [r7, #20]
 8010602:	2b01      	cmp	r3, #1
 8010604:	d904      	bls.n	8010610 <dir_sdi+0xa0>
 8010606:	693b      	ldr	r3, [r7, #16]
 8010608:	6a1b      	ldr	r3, [r3, #32]
 801060a:	697a      	ldr	r2, [r7, #20]
 801060c:	429a      	cmp	r2, r3
 801060e:	d301      	bcc.n	8010614 <dir_sdi+0xa4>
 8010610:	2302      	movs	r3, #2
 8010612:	e032      	b.n	801067a <dir_sdi+0x10a>
			ofs -= csz;
 8010614:	683a      	ldr	r2, [r7, #0]
 8010616:	68fb      	ldr	r3, [r7, #12]
 8010618:	1ad3      	subs	r3, r2, r3
 801061a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 801061c:	683a      	ldr	r2, [r7, #0]
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	429a      	cmp	r2, r3
 8010622:	d2e1      	bcs.n	80105e8 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8010624:	6979      	ldr	r1, [r7, #20]
 8010626:	6938      	ldr	r0, [r7, #16]
 8010628:	f7ff fc5e 	bl	800fee8 <clust2sect>
 801062c:	4602      	mov	r2, r0
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	697a      	ldr	r2, [r7, #20]
 8010636:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	69db      	ldr	r3, [r3, #28]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d101      	bne.n	8010644 <dir_sdi+0xd4>
 8010640:	2302      	movs	r3, #2
 8010642:	e01a      	b.n	801067a <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	69da      	ldr	r2, [r3, #28]
 8010648:	693b      	ldr	r3, [r7, #16]
 801064a:	899b      	ldrh	r3, [r3, #12]
 801064c:	4619      	mov	r1, r3
 801064e:	683b      	ldr	r3, [r7, #0]
 8010650:	fbb3 f3f1 	udiv	r3, r3, r1
 8010654:	441a      	add	r2, r3
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801065a:	693b      	ldr	r3, [r7, #16]
 801065c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8010660:	693b      	ldr	r3, [r7, #16]
 8010662:	899b      	ldrh	r3, [r3, #12]
 8010664:	461a      	mov	r2, r3
 8010666:	683b      	ldr	r3, [r7, #0]
 8010668:	fbb3 f0f2 	udiv	r0, r3, r2
 801066c:	fb02 f200 	mul.w	r2, r2, r0
 8010670:	1a9b      	subs	r3, r3, r2
 8010672:	18ca      	adds	r2, r1, r3
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010678:	2300      	movs	r3, #0
}
 801067a:	4618      	mov	r0, r3
 801067c:	3718      	adds	r7, #24
 801067e:	46bd      	mov	sp, r7
 8010680:	bd80      	pop	{r7, pc}

08010682 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8010682:	b580      	push	{r7, lr}
 8010684:	b086      	sub	sp, #24
 8010686:	af00      	add	r7, sp, #0
 8010688:	6078      	str	r0, [r7, #4]
 801068a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8010692:	687b      	ldr	r3, [r7, #4]
 8010694:	695b      	ldr	r3, [r3, #20]
 8010696:	3320      	adds	r3, #32
 8010698:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	69db      	ldr	r3, [r3, #28]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d003      	beq.n	80106aa <dir_next+0x28>
 80106a2:	68bb      	ldr	r3, [r7, #8]
 80106a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80106a8:	d301      	bcc.n	80106ae <dir_next+0x2c>
 80106aa:	2304      	movs	r3, #4
 80106ac:	e0bb      	b.n	8010826 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	899b      	ldrh	r3, [r3, #12]
 80106b2:	461a      	mov	r2, r3
 80106b4:	68bb      	ldr	r3, [r7, #8]
 80106b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80106ba:	fb02 f201 	mul.w	r2, r2, r1
 80106be:	1a9b      	subs	r3, r3, r2
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	f040 809d 	bne.w	8010800 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	69db      	ldr	r3, [r3, #28]
 80106ca:	1c5a      	adds	r2, r3, #1
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	699b      	ldr	r3, [r3, #24]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d10b      	bne.n	80106f0 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80106d8:	68bb      	ldr	r3, [r7, #8]
 80106da:	095b      	lsrs	r3, r3, #5
 80106dc:	68fa      	ldr	r2, [r7, #12]
 80106de:	8912      	ldrh	r2, [r2, #8]
 80106e0:	4293      	cmp	r3, r2
 80106e2:	f0c0 808d 	bcc.w	8010800 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	2200      	movs	r2, #0
 80106ea:	61da      	str	r2, [r3, #28]
 80106ec:	2304      	movs	r3, #4
 80106ee:	e09a      	b.n	8010826 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	899b      	ldrh	r3, [r3, #12]
 80106f4:	461a      	mov	r2, r3
 80106f6:	68bb      	ldr	r3, [r7, #8]
 80106f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80106fc:	68fa      	ldr	r2, [r7, #12]
 80106fe:	8952      	ldrh	r2, [r2, #10]
 8010700:	3a01      	subs	r2, #1
 8010702:	4013      	ands	r3, r2
 8010704:	2b00      	cmp	r3, #0
 8010706:	d17b      	bne.n	8010800 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8010708:	687a      	ldr	r2, [r7, #4]
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	699b      	ldr	r3, [r3, #24]
 801070e:	4619      	mov	r1, r3
 8010710:	4610      	mov	r0, r2
 8010712:	f7ff fc08 	bl	800ff26 <get_fat>
 8010716:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8010718:	697b      	ldr	r3, [r7, #20]
 801071a:	2b01      	cmp	r3, #1
 801071c:	d801      	bhi.n	8010722 <dir_next+0xa0>
 801071e:	2302      	movs	r3, #2
 8010720:	e081      	b.n	8010826 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8010722:	697b      	ldr	r3, [r7, #20]
 8010724:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010728:	d101      	bne.n	801072e <dir_next+0xac>
 801072a:	2301      	movs	r3, #1
 801072c:	e07b      	b.n	8010826 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	6a1b      	ldr	r3, [r3, #32]
 8010732:	697a      	ldr	r2, [r7, #20]
 8010734:	429a      	cmp	r2, r3
 8010736:	d359      	bcc.n	80107ec <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d104      	bne.n	8010748 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2200      	movs	r2, #0
 8010742:	61da      	str	r2, [r3, #28]
 8010744:	2304      	movs	r3, #4
 8010746:	e06e      	b.n	8010826 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8010748:	687a      	ldr	r2, [r7, #4]
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	699b      	ldr	r3, [r3, #24]
 801074e:	4619      	mov	r1, r3
 8010750:	4610      	mov	r0, r2
 8010752:	f7ff fe3d 	bl	80103d0 <create_chain>
 8010756:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	2b00      	cmp	r3, #0
 801075c:	d101      	bne.n	8010762 <dir_next+0xe0>
 801075e:	2307      	movs	r3, #7
 8010760:	e061      	b.n	8010826 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8010762:	697b      	ldr	r3, [r7, #20]
 8010764:	2b01      	cmp	r3, #1
 8010766:	d101      	bne.n	801076c <dir_next+0xea>
 8010768:	2302      	movs	r3, #2
 801076a:	e05c      	b.n	8010826 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 801076c:	697b      	ldr	r3, [r7, #20]
 801076e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010772:	d101      	bne.n	8010778 <dir_next+0xf6>
 8010774:	2301      	movs	r3, #1
 8010776:	e056      	b.n	8010826 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8010778:	68f8      	ldr	r0, [r7, #12]
 801077a:	f7ff fad3 	bl	800fd24 <sync_window>
 801077e:	4603      	mov	r3, r0
 8010780:	2b00      	cmp	r3, #0
 8010782:	d001      	beq.n	8010788 <dir_next+0x106>
 8010784:	2301      	movs	r3, #1
 8010786:	e04e      	b.n	8010826 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	899b      	ldrh	r3, [r3, #12]
 8010792:	461a      	mov	r2, r3
 8010794:	2100      	movs	r1, #0
 8010796:	f7ff f8ca 	bl	800f92e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801079a:	2300      	movs	r3, #0
 801079c:	613b      	str	r3, [r7, #16]
 801079e:	6979      	ldr	r1, [r7, #20]
 80107a0:	68f8      	ldr	r0, [r7, #12]
 80107a2:	f7ff fba1 	bl	800fee8 <clust2sect>
 80107a6:	4602      	mov	r2, r0
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	639a      	str	r2, [r3, #56]	; 0x38
 80107ac:	e012      	b.n	80107d4 <dir_next+0x152>
						fs->wflag = 1;
 80107ae:	68fb      	ldr	r3, [r7, #12]
 80107b0:	2201      	movs	r2, #1
 80107b2:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80107b4:	68f8      	ldr	r0, [r7, #12]
 80107b6:	f7ff fab5 	bl	800fd24 <sync_window>
 80107ba:	4603      	mov	r3, r0
 80107bc:	2b00      	cmp	r3, #0
 80107be:	d001      	beq.n	80107c4 <dir_next+0x142>
 80107c0:	2301      	movs	r3, #1
 80107c2:	e030      	b.n	8010826 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80107c4:	693b      	ldr	r3, [r7, #16]
 80107c6:	3301      	adds	r3, #1
 80107c8:	613b      	str	r3, [r7, #16]
 80107ca:	68fb      	ldr	r3, [r7, #12]
 80107cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107ce:	1c5a      	adds	r2, r3, #1
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	639a      	str	r2, [r3, #56]	; 0x38
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	895b      	ldrh	r3, [r3, #10]
 80107d8:	461a      	mov	r2, r3
 80107da:	693b      	ldr	r3, [r7, #16]
 80107dc:	4293      	cmp	r3, r2
 80107de:	d3e6      	bcc.n	80107ae <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80107e4:	693b      	ldr	r3, [r7, #16]
 80107e6:	1ad2      	subs	r2, r2, r3
 80107e8:	68fb      	ldr	r3, [r7, #12]
 80107ea:	639a      	str	r2, [r3, #56]	; 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	697a      	ldr	r2, [r7, #20]
 80107f0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80107f2:	6979      	ldr	r1, [r7, #20]
 80107f4:	68f8      	ldr	r0, [r7, #12]
 80107f6:	f7ff fb77 	bl	800fee8 <clust2sect>
 80107fa:	4602      	mov	r2, r0
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	68ba      	ldr	r2, [r7, #8]
 8010804:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 801080c:	68fb      	ldr	r3, [r7, #12]
 801080e:	899b      	ldrh	r3, [r3, #12]
 8010810:	461a      	mov	r2, r3
 8010812:	68bb      	ldr	r3, [r7, #8]
 8010814:	fbb3 f0f2 	udiv	r0, r3, r2
 8010818:	fb02 f200 	mul.w	r2, r2, r0
 801081c:	1a9b      	subs	r3, r3, r2
 801081e:	18ca      	adds	r2, r1, r3
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8010824:	2300      	movs	r3, #0
}
 8010826:	4618      	mov	r0, r3
 8010828:	3718      	adds	r7, #24
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}

0801082e <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 801082e:	b580      	push	{r7, lr}
 8010830:	b086      	sub	sp, #24
 8010832:	af00      	add	r7, sp, #0
 8010834:	6078      	str	r0, [r7, #4]
 8010836:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 801083e:	2100      	movs	r1, #0
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f7ff fe95 	bl	8010570 <dir_sdi>
 8010846:	4603      	mov	r3, r0
 8010848:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801084a:	7dfb      	ldrb	r3, [r7, #23]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d12b      	bne.n	80108a8 <dir_alloc+0x7a>
		n = 0;
 8010850:	2300      	movs	r3, #0
 8010852:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	69db      	ldr	r3, [r3, #28]
 8010858:	4619      	mov	r1, r3
 801085a:	68f8      	ldr	r0, [r7, #12]
 801085c:	f7ff faa6 	bl	800fdac <move_window>
 8010860:	4603      	mov	r3, r0
 8010862:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8010864:	7dfb      	ldrb	r3, [r7, #23]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d11d      	bne.n	80108a6 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	6a1b      	ldr	r3, [r3, #32]
 801086e:	781b      	ldrb	r3, [r3, #0]
 8010870:	2be5      	cmp	r3, #229	; 0xe5
 8010872:	d004      	beq.n	801087e <dir_alloc+0x50>
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	6a1b      	ldr	r3, [r3, #32]
 8010878:	781b      	ldrb	r3, [r3, #0]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d107      	bne.n	801088e <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 801087e:	693b      	ldr	r3, [r7, #16]
 8010880:	3301      	adds	r3, #1
 8010882:	613b      	str	r3, [r7, #16]
 8010884:	693a      	ldr	r2, [r7, #16]
 8010886:	683b      	ldr	r3, [r7, #0]
 8010888:	429a      	cmp	r2, r3
 801088a:	d102      	bne.n	8010892 <dir_alloc+0x64>
 801088c:	e00c      	b.n	80108a8 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 801088e:	2300      	movs	r3, #0
 8010890:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8010892:	2101      	movs	r1, #1
 8010894:	6878      	ldr	r0, [r7, #4]
 8010896:	f7ff fef4 	bl	8010682 <dir_next>
 801089a:	4603      	mov	r3, r0
 801089c:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 801089e:	7dfb      	ldrb	r3, [r7, #23]
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d0d7      	beq.n	8010854 <dir_alloc+0x26>
 80108a4:	e000      	b.n	80108a8 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80108a6:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80108a8:	7dfb      	ldrb	r3, [r7, #23]
 80108aa:	2b04      	cmp	r3, #4
 80108ac:	d101      	bne.n	80108b2 <dir_alloc+0x84>
 80108ae:	2307      	movs	r3, #7
 80108b0:	75fb      	strb	r3, [r7, #23]
	return res;
 80108b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80108b4:	4618      	mov	r0, r3
 80108b6:	3718      	adds	r7, #24
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}

080108bc <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80108bc:	b580      	push	{r7, lr}
 80108be:	b084      	sub	sp, #16
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
 80108c4:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80108c6:	683b      	ldr	r3, [r7, #0]
 80108c8:	331a      	adds	r3, #26
 80108ca:	4618      	mov	r0, r3
 80108cc:	f7fe ff8c 	bl	800f7e8 <ld_word>
 80108d0:	4603      	mov	r3, r0
 80108d2:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	781b      	ldrb	r3, [r3, #0]
 80108d8:	2b03      	cmp	r3, #3
 80108da:	d109      	bne.n	80108f0 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80108dc:	683b      	ldr	r3, [r7, #0]
 80108de:	3314      	adds	r3, #20
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7fe ff81 	bl	800f7e8 <ld_word>
 80108e6:	4603      	mov	r3, r0
 80108e8:	041b      	lsls	r3, r3, #16
 80108ea:	68fa      	ldr	r2, [r7, #12]
 80108ec:	4313      	orrs	r3, r2
 80108ee:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80108f0:	68fb      	ldr	r3, [r7, #12]
}
 80108f2:	4618      	mov	r0, r3
 80108f4:	3710      	adds	r7, #16
 80108f6:	46bd      	mov	sp, r7
 80108f8:	bd80      	pop	{r7, pc}

080108fa <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80108fa:	b580      	push	{r7, lr}
 80108fc:	b084      	sub	sp, #16
 80108fe:	af00      	add	r7, sp, #0
 8010900:	60f8      	str	r0, [r7, #12]
 8010902:	60b9      	str	r1, [r7, #8]
 8010904:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8010906:	68bb      	ldr	r3, [r7, #8]
 8010908:	331a      	adds	r3, #26
 801090a:	687a      	ldr	r2, [r7, #4]
 801090c:	b292      	uxth	r2, r2
 801090e:	4611      	mov	r1, r2
 8010910:	4618      	mov	r0, r3
 8010912:	f7fe ffa4 	bl	800f85e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	781b      	ldrb	r3, [r3, #0]
 801091a:	2b03      	cmp	r3, #3
 801091c:	d109      	bne.n	8010932 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 801091e:	68bb      	ldr	r3, [r7, #8]
 8010920:	f103 0214 	add.w	r2, r3, #20
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	0c1b      	lsrs	r3, r3, #16
 8010928:	b29b      	uxth	r3, r3
 801092a:	4619      	mov	r1, r3
 801092c:	4610      	mov	r0, r2
 801092e:	f7fe ff96 	bl	800f85e <st_word>
	}
}
 8010932:	bf00      	nop
 8010934:	3710      	adds	r7, #16
 8010936:	46bd      	mov	sp, r7
 8010938:	bd80      	pop	{r7, pc}
	...

0801093c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 801093c:	b590      	push	{r4, r7, lr}
 801093e:	b087      	sub	sp, #28
 8010940:	af00      	add	r7, sp, #0
 8010942:	6078      	str	r0, [r7, #4]
 8010944:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8010946:	683b      	ldr	r3, [r7, #0]
 8010948:	331a      	adds	r3, #26
 801094a:	4618      	mov	r0, r3
 801094c:	f7fe ff4c 	bl	800f7e8 <ld_word>
 8010950:	4603      	mov	r3, r0
 8010952:	2b00      	cmp	r3, #0
 8010954:	d001      	beq.n	801095a <cmp_lfn+0x1e>
 8010956:	2300      	movs	r3, #0
 8010958:	e059      	b.n	8010a0e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 801095a:	683b      	ldr	r3, [r7, #0]
 801095c:	781b      	ldrb	r3, [r3, #0]
 801095e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010962:	1e5a      	subs	r2, r3, #1
 8010964:	4613      	mov	r3, r2
 8010966:	005b      	lsls	r3, r3, #1
 8010968:	4413      	add	r3, r2
 801096a:	009b      	lsls	r3, r3, #2
 801096c:	4413      	add	r3, r2
 801096e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8010970:	2301      	movs	r3, #1
 8010972:	81fb      	strh	r3, [r7, #14]
 8010974:	2300      	movs	r3, #0
 8010976:	613b      	str	r3, [r7, #16]
 8010978:	e033      	b.n	80109e2 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 801097a:	4a27      	ldr	r2, [pc, #156]	; (8010a18 <cmp_lfn+0xdc>)
 801097c:	693b      	ldr	r3, [r7, #16]
 801097e:	4413      	add	r3, r2
 8010980:	781b      	ldrb	r3, [r3, #0]
 8010982:	461a      	mov	r2, r3
 8010984:	683b      	ldr	r3, [r7, #0]
 8010986:	4413      	add	r3, r2
 8010988:	4618      	mov	r0, r3
 801098a:	f7fe ff2d 	bl	800f7e8 <ld_word>
 801098e:	4603      	mov	r3, r0
 8010990:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8010992:	89fb      	ldrh	r3, [r7, #14]
 8010994:	2b00      	cmp	r3, #0
 8010996:	d01a      	beq.n	80109ce <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8010998:	697b      	ldr	r3, [r7, #20]
 801099a:	2bfe      	cmp	r3, #254	; 0xfe
 801099c:	d812      	bhi.n	80109c4 <cmp_lfn+0x88>
 801099e:	89bb      	ldrh	r3, [r7, #12]
 80109a0:	4618      	mov	r0, r3
 80109a2:	f002 f909 	bl	8012bb8 <ff_wtoupper>
 80109a6:	4603      	mov	r3, r0
 80109a8:	461c      	mov	r4, r3
 80109aa:	697b      	ldr	r3, [r7, #20]
 80109ac:	1c5a      	adds	r2, r3, #1
 80109ae:	617a      	str	r2, [r7, #20]
 80109b0:	005b      	lsls	r3, r3, #1
 80109b2:	687a      	ldr	r2, [r7, #4]
 80109b4:	4413      	add	r3, r2
 80109b6:	881b      	ldrh	r3, [r3, #0]
 80109b8:	4618      	mov	r0, r3
 80109ba:	f002 f8fd 	bl	8012bb8 <ff_wtoupper>
 80109be:	4603      	mov	r3, r0
 80109c0:	429c      	cmp	r4, r3
 80109c2:	d001      	beq.n	80109c8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80109c4:	2300      	movs	r3, #0
 80109c6:	e022      	b.n	8010a0e <cmp_lfn+0xd2>
			}
			wc = uc;
 80109c8:	89bb      	ldrh	r3, [r7, #12]
 80109ca:	81fb      	strh	r3, [r7, #14]
 80109cc:	e006      	b.n	80109dc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80109ce:	89bb      	ldrh	r3, [r7, #12]
 80109d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80109d4:	4293      	cmp	r3, r2
 80109d6:	d001      	beq.n	80109dc <cmp_lfn+0xa0>
 80109d8:	2300      	movs	r3, #0
 80109da:	e018      	b.n	8010a0e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80109dc:	693b      	ldr	r3, [r7, #16]
 80109de:	3301      	adds	r3, #1
 80109e0:	613b      	str	r3, [r7, #16]
 80109e2:	693b      	ldr	r3, [r7, #16]
 80109e4:	2b0c      	cmp	r3, #12
 80109e6:	d9c8      	bls.n	801097a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80109e8:	683b      	ldr	r3, [r7, #0]
 80109ea:	781b      	ldrb	r3, [r3, #0]
 80109ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	d00b      	beq.n	8010a0c <cmp_lfn+0xd0>
 80109f4:	89fb      	ldrh	r3, [r7, #14]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d008      	beq.n	8010a0c <cmp_lfn+0xd0>
 80109fa:	697b      	ldr	r3, [r7, #20]
 80109fc:	005b      	lsls	r3, r3, #1
 80109fe:	687a      	ldr	r2, [r7, #4]
 8010a00:	4413      	add	r3, r2
 8010a02:	881b      	ldrh	r3, [r3, #0]
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d001      	beq.n	8010a0c <cmp_lfn+0xd0>
 8010a08:	2300      	movs	r3, #0
 8010a0a:	e000      	b.n	8010a0e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8010a0c:	2301      	movs	r3, #1
}
 8010a0e:	4618      	mov	r0, r3
 8010a10:	371c      	adds	r7, #28
 8010a12:	46bd      	mov	sp, r7
 8010a14:	bd90      	pop	{r4, r7, pc}
 8010a16:	bf00      	nop
 8010a18:	0801ec90 	.word	0x0801ec90

08010a1c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b088      	sub	sp, #32
 8010a20:	af00      	add	r7, sp, #0
 8010a22:	60f8      	str	r0, [r7, #12]
 8010a24:	60b9      	str	r1, [r7, #8]
 8010a26:	4611      	mov	r1, r2
 8010a28:	461a      	mov	r2, r3
 8010a2a:	460b      	mov	r3, r1
 8010a2c:	71fb      	strb	r3, [r7, #7]
 8010a2e:	4613      	mov	r3, r2
 8010a30:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8010a32:	68bb      	ldr	r3, [r7, #8]
 8010a34:	330d      	adds	r3, #13
 8010a36:	79ba      	ldrb	r2, [r7, #6]
 8010a38:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8010a3a:	68bb      	ldr	r3, [r7, #8]
 8010a3c:	330b      	adds	r3, #11
 8010a3e:	220f      	movs	r2, #15
 8010a40:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8010a42:	68bb      	ldr	r3, [r7, #8]
 8010a44:	330c      	adds	r3, #12
 8010a46:	2200      	movs	r2, #0
 8010a48:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8010a4a:	68bb      	ldr	r3, [r7, #8]
 8010a4c:	331a      	adds	r3, #26
 8010a4e:	2100      	movs	r1, #0
 8010a50:	4618      	mov	r0, r3
 8010a52:	f7fe ff04 	bl	800f85e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8010a56:	79fb      	ldrb	r3, [r7, #7]
 8010a58:	1e5a      	subs	r2, r3, #1
 8010a5a:	4613      	mov	r3, r2
 8010a5c:	005b      	lsls	r3, r3, #1
 8010a5e:	4413      	add	r3, r2
 8010a60:	009b      	lsls	r3, r3, #2
 8010a62:	4413      	add	r3, r2
 8010a64:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8010a66:	2300      	movs	r3, #0
 8010a68:	82fb      	strh	r3, [r7, #22]
 8010a6a:	2300      	movs	r3, #0
 8010a6c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8010a6e:	8afb      	ldrh	r3, [r7, #22]
 8010a70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010a74:	4293      	cmp	r3, r2
 8010a76:	d007      	beq.n	8010a88 <put_lfn+0x6c>
 8010a78:	69fb      	ldr	r3, [r7, #28]
 8010a7a:	1c5a      	adds	r2, r3, #1
 8010a7c:	61fa      	str	r2, [r7, #28]
 8010a7e:	005b      	lsls	r3, r3, #1
 8010a80:	68fa      	ldr	r2, [r7, #12]
 8010a82:	4413      	add	r3, r2
 8010a84:	881b      	ldrh	r3, [r3, #0]
 8010a86:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8010a88:	4a17      	ldr	r2, [pc, #92]	; (8010ae8 <put_lfn+0xcc>)
 8010a8a:	69bb      	ldr	r3, [r7, #24]
 8010a8c:	4413      	add	r3, r2
 8010a8e:	781b      	ldrb	r3, [r3, #0]
 8010a90:	461a      	mov	r2, r3
 8010a92:	68bb      	ldr	r3, [r7, #8]
 8010a94:	4413      	add	r3, r2
 8010a96:	8afa      	ldrh	r2, [r7, #22]
 8010a98:	4611      	mov	r1, r2
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f7fe fedf 	bl	800f85e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8010aa0:	8afb      	ldrh	r3, [r7, #22]
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d102      	bne.n	8010aac <put_lfn+0x90>
 8010aa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010aaa:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8010aac:	69bb      	ldr	r3, [r7, #24]
 8010aae:	3301      	adds	r3, #1
 8010ab0:	61bb      	str	r3, [r7, #24]
 8010ab2:	69bb      	ldr	r3, [r7, #24]
 8010ab4:	2b0c      	cmp	r3, #12
 8010ab6:	d9da      	bls.n	8010a6e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8010ab8:	8afb      	ldrh	r3, [r7, #22]
 8010aba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010abe:	4293      	cmp	r3, r2
 8010ac0:	d006      	beq.n	8010ad0 <put_lfn+0xb4>
 8010ac2:	69fb      	ldr	r3, [r7, #28]
 8010ac4:	005b      	lsls	r3, r3, #1
 8010ac6:	68fa      	ldr	r2, [r7, #12]
 8010ac8:	4413      	add	r3, r2
 8010aca:	881b      	ldrh	r3, [r3, #0]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d103      	bne.n	8010ad8 <put_lfn+0xbc>
 8010ad0:	79fb      	ldrb	r3, [r7, #7]
 8010ad2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ad6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8010ad8:	68bb      	ldr	r3, [r7, #8]
 8010ada:	79fa      	ldrb	r2, [r7, #7]
 8010adc:	701a      	strb	r2, [r3, #0]
}
 8010ade:	bf00      	nop
 8010ae0:	3720      	adds	r7, #32
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	bd80      	pop	{r7, pc}
 8010ae6:	bf00      	nop
 8010ae8:	0801ec90 	.word	0x0801ec90

08010aec <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b08c      	sub	sp, #48	; 0x30
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	60f8      	str	r0, [r7, #12]
 8010af4:	60b9      	str	r1, [r7, #8]
 8010af6:	607a      	str	r2, [r7, #4]
 8010af8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8010afa:	220b      	movs	r2, #11
 8010afc:	68b9      	ldr	r1, [r7, #8]
 8010afe:	68f8      	ldr	r0, [r7, #12]
 8010b00:	f7fe fef4 	bl	800f8ec <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8010b04:	683b      	ldr	r3, [r7, #0]
 8010b06:	2b05      	cmp	r3, #5
 8010b08:	d92b      	bls.n	8010b62 <gen_numname+0x76>
		sr = seq;
 8010b0a:	683b      	ldr	r3, [r7, #0]
 8010b0c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8010b0e:	e022      	b.n	8010b56 <gen_numname+0x6a>
			wc = *lfn++;
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	1c9a      	adds	r2, r3, #2
 8010b14:	607a      	str	r2, [r7, #4]
 8010b16:	881b      	ldrh	r3, [r3, #0]
 8010b18:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8010b1a:	2300      	movs	r3, #0
 8010b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8010b1e:	e017      	b.n	8010b50 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8010b20:	69fb      	ldr	r3, [r7, #28]
 8010b22:	005a      	lsls	r2, r3, #1
 8010b24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010b26:	f003 0301 	and.w	r3, r3, #1
 8010b2a:	4413      	add	r3, r2
 8010b2c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8010b2e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010b30:	085b      	lsrs	r3, r3, #1
 8010b32:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8010b34:	69fb      	ldr	r3, [r7, #28]
 8010b36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d005      	beq.n	8010b4a <gen_numname+0x5e>
 8010b3e:	69fb      	ldr	r3, [r7, #28]
 8010b40:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8010b44:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8010b48:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8010b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b4c:	3301      	adds	r3, #1
 8010b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b52:	2b0f      	cmp	r3, #15
 8010b54:	d9e4      	bls.n	8010b20 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8010b56:	687b      	ldr	r3, [r7, #4]
 8010b58:	881b      	ldrh	r3, [r3, #0]
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d1d8      	bne.n	8010b10 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8010b5e:	69fb      	ldr	r3, [r7, #28]
 8010b60:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8010b62:	2307      	movs	r3, #7
 8010b64:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8010b66:	683b      	ldr	r3, [r7, #0]
 8010b68:	b2db      	uxtb	r3, r3
 8010b6a:	f003 030f 	and.w	r3, r3, #15
 8010b6e:	b2db      	uxtb	r3, r3
 8010b70:	3330      	adds	r3, #48	; 0x30
 8010b72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8010b76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b7a:	2b39      	cmp	r3, #57	; 0x39
 8010b7c:	d904      	bls.n	8010b88 <gen_numname+0x9c>
 8010b7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b82:	3307      	adds	r3, #7
 8010b84:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8010b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b8a:	1e5a      	subs	r2, r3, #1
 8010b8c:	62ba      	str	r2, [r7, #40]	; 0x28
 8010b8e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010b92:	4413      	add	r3, r2
 8010b94:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8010b98:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8010b9c:	683b      	ldr	r3, [r7, #0]
 8010b9e:	091b      	lsrs	r3, r3, #4
 8010ba0:	603b      	str	r3, [r7, #0]
	} while (seq);
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d1de      	bne.n	8010b66 <gen_numname+0x7a>
	ns[i] = '~';
 8010ba8:	f107 0214 	add.w	r2, r7, #20
 8010bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bae:	4413      	add	r3, r2
 8010bb0:	227e      	movs	r2, #126	; 0x7e
 8010bb2:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8010bb4:	2300      	movs	r3, #0
 8010bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8010bb8:	e002      	b.n	8010bc0 <gen_numname+0xd4>
 8010bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bbc:	3301      	adds	r3, #1
 8010bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8010bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bc4:	429a      	cmp	r2, r3
 8010bc6:	d205      	bcs.n	8010bd4 <gen_numname+0xe8>
 8010bc8:	68fa      	ldr	r2, [r7, #12]
 8010bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bcc:	4413      	add	r3, r2
 8010bce:	781b      	ldrb	r3, [r3, #0]
 8010bd0:	2b20      	cmp	r3, #32
 8010bd2:	d1f2      	bne.n	8010bba <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8010bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bd6:	2b07      	cmp	r3, #7
 8010bd8:	d808      	bhi.n	8010bec <gen_numname+0x100>
 8010bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bdc:	1c5a      	adds	r2, r3, #1
 8010bde:	62ba      	str	r2, [r7, #40]	; 0x28
 8010be0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010be4:	4413      	add	r3, r2
 8010be6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8010bea:	e000      	b.n	8010bee <gen_numname+0x102>
 8010bec:	2120      	movs	r1, #32
 8010bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf0:	1c5a      	adds	r2, r3, #1
 8010bf2:	627a      	str	r2, [r7, #36]	; 0x24
 8010bf4:	68fa      	ldr	r2, [r7, #12]
 8010bf6:	4413      	add	r3, r2
 8010bf8:	460a      	mov	r2, r1
 8010bfa:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8010bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bfe:	2b07      	cmp	r3, #7
 8010c00:	d9e8      	bls.n	8010bd4 <gen_numname+0xe8>
}
 8010c02:	bf00      	nop
 8010c04:	bf00      	nop
 8010c06:	3730      	adds	r7, #48	; 0x30
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	bd80      	pop	{r7, pc}

08010c0c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8010c0c:	b480      	push	{r7}
 8010c0e:	b085      	sub	sp, #20
 8010c10:	af00      	add	r7, sp, #0
 8010c12:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8010c14:	2300      	movs	r3, #0
 8010c16:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8010c18:	230b      	movs	r3, #11
 8010c1a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8010c1c:	7bfb      	ldrb	r3, [r7, #15]
 8010c1e:	b2da      	uxtb	r2, r3
 8010c20:	0852      	lsrs	r2, r2, #1
 8010c22:	01db      	lsls	r3, r3, #7
 8010c24:	4313      	orrs	r3, r2
 8010c26:	b2da      	uxtb	r2, r3
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	1c59      	adds	r1, r3, #1
 8010c2c:	6079      	str	r1, [r7, #4]
 8010c2e:	781b      	ldrb	r3, [r3, #0]
 8010c30:	4413      	add	r3, r2
 8010c32:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8010c34:	68bb      	ldr	r3, [r7, #8]
 8010c36:	3b01      	subs	r3, #1
 8010c38:	60bb      	str	r3, [r7, #8]
 8010c3a:	68bb      	ldr	r3, [r7, #8]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d1ed      	bne.n	8010c1c <sum_sfn+0x10>
	return sum;
 8010c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8010c42:	4618      	mov	r0, r3
 8010c44:	3714      	adds	r7, #20
 8010c46:	46bd      	mov	sp, r7
 8010c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c4c:	4770      	bx	lr

08010c4e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8010c4e:	b580      	push	{r7, lr}
 8010c50:	b086      	sub	sp, #24
 8010c52:	af00      	add	r7, sp, #0
 8010c54:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8010c5c:	2100      	movs	r1, #0
 8010c5e:	6878      	ldr	r0, [r7, #4]
 8010c60:	f7ff fc86 	bl	8010570 <dir_sdi>
 8010c64:	4603      	mov	r3, r0
 8010c66:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8010c68:	7dfb      	ldrb	r3, [r7, #23]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	d001      	beq.n	8010c72 <dir_find+0x24>
 8010c6e:	7dfb      	ldrb	r3, [r7, #23]
 8010c70:	e0a9      	b.n	8010dc6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010c72:	23ff      	movs	r3, #255	; 0xff
 8010c74:	753b      	strb	r3, [r7, #20]
 8010c76:	7d3b      	ldrb	r3, [r7, #20]
 8010c78:	757b      	strb	r3, [r7, #21]
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010c80:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	69db      	ldr	r3, [r3, #28]
 8010c86:	4619      	mov	r1, r3
 8010c88:	6938      	ldr	r0, [r7, #16]
 8010c8a:	f7ff f88f 	bl	800fdac <move_window>
 8010c8e:	4603      	mov	r3, r0
 8010c90:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8010c92:	7dfb      	ldrb	r3, [r7, #23]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	f040 8090 	bne.w	8010dba <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	6a1b      	ldr	r3, [r3, #32]
 8010c9e:	781b      	ldrb	r3, [r3, #0]
 8010ca0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8010ca2:	7dbb      	ldrb	r3, [r7, #22]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d102      	bne.n	8010cae <dir_find+0x60>
 8010ca8:	2304      	movs	r3, #4
 8010caa:	75fb      	strb	r3, [r7, #23]
 8010cac:	e08a      	b.n	8010dc4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	6a1b      	ldr	r3, [r3, #32]
 8010cb2:	330b      	adds	r3, #11
 8010cb4:	781b      	ldrb	r3, [r3, #0]
 8010cb6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010cba:	73fb      	strb	r3, [r7, #15]
 8010cbc:	687b      	ldr	r3, [r7, #4]
 8010cbe:	7bfa      	ldrb	r2, [r7, #15]
 8010cc0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8010cc2:	7dbb      	ldrb	r3, [r7, #22]
 8010cc4:	2be5      	cmp	r3, #229	; 0xe5
 8010cc6:	d007      	beq.n	8010cd8 <dir_find+0x8a>
 8010cc8:	7bfb      	ldrb	r3, [r7, #15]
 8010cca:	f003 0308 	and.w	r3, r3, #8
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d009      	beq.n	8010ce6 <dir_find+0x98>
 8010cd2:	7bfb      	ldrb	r3, [r7, #15]
 8010cd4:	2b0f      	cmp	r3, #15
 8010cd6:	d006      	beq.n	8010ce6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010cd8:	23ff      	movs	r3, #255	; 0xff
 8010cda:	757b      	strb	r3, [r7, #21]
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010ce2:	631a      	str	r2, [r3, #48]	; 0x30
 8010ce4:	e05e      	b.n	8010da4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8010ce6:	7bfb      	ldrb	r3, [r7, #15]
 8010ce8:	2b0f      	cmp	r3, #15
 8010cea:	d136      	bne.n	8010d5a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d154      	bne.n	8010da4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8010cfa:	7dbb      	ldrb	r3, [r7, #22]
 8010cfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d00d      	beq.n	8010d20 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	6a1b      	ldr	r3, [r3, #32]
 8010d08:	7b5b      	ldrb	r3, [r3, #13]
 8010d0a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8010d0c:	7dbb      	ldrb	r3, [r7, #22]
 8010d0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d12:	75bb      	strb	r3, [r7, #22]
 8010d14:	7dbb      	ldrb	r3, [r7, #22]
 8010d16:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	695a      	ldr	r2, [r3, #20]
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8010d20:	7dba      	ldrb	r2, [r7, #22]
 8010d22:	7d7b      	ldrb	r3, [r7, #21]
 8010d24:	429a      	cmp	r2, r3
 8010d26:	d115      	bne.n	8010d54 <dir_find+0x106>
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	6a1b      	ldr	r3, [r3, #32]
 8010d2c:	330d      	adds	r3, #13
 8010d2e:	781b      	ldrb	r3, [r3, #0]
 8010d30:	7d3a      	ldrb	r2, [r7, #20]
 8010d32:	429a      	cmp	r2, r3
 8010d34:	d10e      	bne.n	8010d54 <dir_find+0x106>
 8010d36:	693b      	ldr	r3, [r7, #16]
 8010d38:	691a      	ldr	r2, [r3, #16]
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	6a1b      	ldr	r3, [r3, #32]
 8010d3e:	4619      	mov	r1, r3
 8010d40:	4610      	mov	r0, r2
 8010d42:	f7ff fdfb 	bl	801093c <cmp_lfn>
 8010d46:	4603      	mov	r3, r0
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d003      	beq.n	8010d54 <dir_find+0x106>
 8010d4c:	7d7b      	ldrb	r3, [r7, #21]
 8010d4e:	3b01      	subs	r3, #1
 8010d50:	b2db      	uxtb	r3, r3
 8010d52:	e000      	b.n	8010d56 <dir_find+0x108>
 8010d54:	23ff      	movs	r3, #255	; 0xff
 8010d56:	757b      	strb	r3, [r7, #21]
 8010d58:	e024      	b.n	8010da4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010d5a:	7d7b      	ldrb	r3, [r7, #21]
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d109      	bne.n	8010d74 <dir_find+0x126>
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	6a1b      	ldr	r3, [r3, #32]
 8010d64:	4618      	mov	r0, r3
 8010d66:	f7ff ff51 	bl	8010c0c <sum_sfn>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	461a      	mov	r2, r3
 8010d6e:	7d3b      	ldrb	r3, [r7, #20]
 8010d70:	4293      	cmp	r3, r2
 8010d72:	d024      	beq.n	8010dbe <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010d7a:	f003 0301 	and.w	r3, r3, #1
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d10a      	bne.n	8010d98 <dir_find+0x14a>
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	6a18      	ldr	r0, [r3, #32]
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	3324      	adds	r3, #36	; 0x24
 8010d8a:	220b      	movs	r2, #11
 8010d8c:	4619      	mov	r1, r3
 8010d8e:	f7fe fde9 	bl	800f964 <mem_cmp>
 8010d92:	4603      	mov	r3, r0
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d014      	beq.n	8010dc2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8010d98:	23ff      	movs	r3, #255	; 0xff
 8010d9a:	757b      	strb	r3, [r7, #21]
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010da2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8010da4:	2100      	movs	r1, #0
 8010da6:	6878      	ldr	r0, [r7, #4]
 8010da8:	f7ff fc6b 	bl	8010682 <dir_next>
 8010dac:	4603      	mov	r3, r0
 8010dae:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8010db0:	7dfb      	ldrb	r3, [r7, #23]
 8010db2:	2b00      	cmp	r3, #0
 8010db4:	f43f af65 	beq.w	8010c82 <dir_find+0x34>
 8010db8:	e004      	b.n	8010dc4 <dir_find+0x176>
		if (res != FR_OK) break;
 8010dba:	bf00      	nop
 8010dbc:	e002      	b.n	8010dc4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8010dbe:	bf00      	nop
 8010dc0:	e000      	b.n	8010dc4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8010dc2:	bf00      	nop

	return res;
 8010dc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	3718      	adds	r7, #24
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	bd80      	pop	{r7, pc}
	...

08010dd0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8010dd0:	b580      	push	{r7, lr}
 8010dd2:	b08c      	sub	sp, #48	; 0x30
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010de4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d001      	beq.n	8010df0 <dir_register+0x20>
 8010dec:	2306      	movs	r3, #6
 8010dee:	e0e0      	b.n	8010fb2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8010df0:	2300      	movs	r3, #0
 8010df2:	627b      	str	r3, [r7, #36]	; 0x24
 8010df4:	e002      	b.n	8010dfc <dir_register+0x2c>
 8010df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df8:	3301      	adds	r3, #1
 8010dfa:	627b      	str	r3, [r7, #36]	; 0x24
 8010dfc:	69fb      	ldr	r3, [r7, #28]
 8010dfe:	691a      	ldr	r2, [r3, #16]
 8010e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e02:	005b      	lsls	r3, r3, #1
 8010e04:	4413      	add	r3, r2
 8010e06:	881b      	ldrh	r3, [r3, #0]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d1f4      	bne.n	8010df6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8010e12:	f107 030c 	add.w	r3, r7, #12
 8010e16:	220c      	movs	r2, #12
 8010e18:	4618      	mov	r0, r3
 8010e1a:	f7fe fd67 	bl	800f8ec <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8010e1e:	7dfb      	ldrb	r3, [r7, #23]
 8010e20:	f003 0301 	and.w	r3, r3, #1
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d032      	beq.n	8010e8e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	2240      	movs	r2, #64	; 0x40
 8010e2c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8010e30:	2301      	movs	r3, #1
 8010e32:	62bb      	str	r3, [r7, #40]	; 0x28
 8010e34:	e016      	b.n	8010e64 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8010e3c:	69fb      	ldr	r3, [r7, #28]
 8010e3e:	691a      	ldr	r2, [r3, #16]
 8010e40:	f107 010c 	add.w	r1, r7, #12
 8010e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e46:	f7ff fe51 	bl	8010aec <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8010e4a:	6878      	ldr	r0, [r7, #4]
 8010e4c:	f7ff feff 	bl	8010c4e <dir_find>
 8010e50:	4603      	mov	r3, r0
 8010e52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8010e56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d106      	bne.n	8010e6c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8010e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e60:	3301      	adds	r3, #1
 8010e62:	62bb      	str	r3, [r7, #40]	; 0x28
 8010e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e66:	2b63      	cmp	r3, #99	; 0x63
 8010e68:	d9e5      	bls.n	8010e36 <dir_register+0x66>
 8010e6a:	e000      	b.n	8010e6e <dir_register+0x9e>
			if (res != FR_OK) break;
 8010e6c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8010e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e70:	2b64      	cmp	r3, #100	; 0x64
 8010e72:	d101      	bne.n	8010e78 <dir_register+0xa8>
 8010e74:	2307      	movs	r3, #7
 8010e76:	e09c      	b.n	8010fb2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8010e78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e7c:	2b04      	cmp	r3, #4
 8010e7e:	d002      	beq.n	8010e86 <dir_register+0xb6>
 8010e80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e84:	e095      	b.n	8010fb2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8010e86:	7dfa      	ldrb	r2, [r7, #23]
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8010e8e:	7dfb      	ldrb	r3, [r7, #23]
 8010e90:	f003 0302 	and.w	r3, r3, #2
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d007      	beq.n	8010ea8 <dir_register+0xd8>
 8010e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e9a:	330c      	adds	r3, #12
 8010e9c:	4a47      	ldr	r2, [pc, #284]	; (8010fbc <dir_register+0x1ec>)
 8010e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8010ea2:	089b      	lsrs	r3, r3, #2
 8010ea4:	3301      	adds	r3, #1
 8010ea6:	e000      	b.n	8010eaa <dir_register+0xda>
 8010ea8:	2301      	movs	r3, #1
 8010eaa:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8010eac:	6a39      	ldr	r1, [r7, #32]
 8010eae:	6878      	ldr	r0, [r7, #4]
 8010eb0:	f7ff fcbd 	bl	801082e <dir_alloc>
 8010eb4:	4603      	mov	r3, r0
 8010eb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8010eba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d148      	bne.n	8010f54 <dir_register+0x184>
 8010ec2:	6a3b      	ldr	r3, [r7, #32]
 8010ec4:	3b01      	subs	r3, #1
 8010ec6:	623b      	str	r3, [r7, #32]
 8010ec8:	6a3b      	ldr	r3, [r7, #32]
 8010eca:	2b00      	cmp	r3, #0
 8010ecc:	d042      	beq.n	8010f54 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	695a      	ldr	r2, [r3, #20]
 8010ed2:	6a3b      	ldr	r3, [r7, #32]
 8010ed4:	015b      	lsls	r3, r3, #5
 8010ed6:	1ad3      	subs	r3, r2, r3
 8010ed8:	4619      	mov	r1, r3
 8010eda:	6878      	ldr	r0, [r7, #4]
 8010edc:	f7ff fb48 	bl	8010570 <dir_sdi>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8010ee6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d132      	bne.n	8010f54 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	3324      	adds	r3, #36	; 0x24
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f7ff fe8a 	bl	8010c0c <sum_sfn>
 8010ef8:	4603      	mov	r3, r0
 8010efa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	69db      	ldr	r3, [r3, #28]
 8010f00:	4619      	mov	r1, r3
 8010f02:	69f8      	ldr	r0, [r7, #28]
 8010f04:	f7fe ff52 	bl	800fdac <move_window>
 8010f08:	4603      	mov	r3, r0
 8010f0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8010f0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f12:	2b00      	cmp	r3, #0
 8010f14:	d11d      	bne.n	8010f52 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8010f16:	69fb      	ldr	r3, [r7, #28]
 8010f18:	6918      	ldr	r0, [r3, #16]
 8010f1a:	687b      	ldr	r3, [r7, #4]
 8010f1c:	6a19      	ldr	r1, [r3, #32]
 8010f1e:	6a3b      	ldr	r3, [r7, #32]
 8010f20:	b2da      	uxtb	r2, r3
 8010f22:	7efb      	ldrb	r3, [r7, #27]
 8010f24:	f7ff fd7a 	bl	8010a1c <put_lfn>
				fs->wflag = 1;
 8010f28:	69fb      	ldr	r3, [r7, #28]
 8010f2a:	2201      	movs	r2, #1
 8010f2c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8010f2e:	2100      	movs	r1, #0
 8010f30:	6878      	ldr	r0, [r7, #4]
 8010f32:	f7ff fba6 	bl	8010682 <dir_next>
 8010f36:	4603      	mov	r3, r0
 8010f38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8010f3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d107      	bne.n	8010f54 <dir_register+0x184>
 8010f44:	6a3b      	ldr	r3, [r7, #32]
 8010f46:	3b01      	subs	r3, #1
 8010f48:	623b      	str	r3, [r7, #32]
 8010f4a:	6a3b      	ldr	r3, [r7, #32]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d1d5      	bne.n	8010efc <dir_register+0x12c>
 8010f50:	e000      	b.n	8010f54 <dir_register+0x184>
				if (res != FR_OK) break;
 8010f52:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8010f54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f58:	2b00      	cmp	r3, #0
 8010f5a:	d128      	bne.n	8010fae <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	69db      	ldr	r3, [r3, #28]
 8010f60:	4619      	mov	r1, r3
 8010f62:	69f8      	ldr	r0, [r7, #28]
 8010f64:	f7fe ff22 	bl	800fdac <move_window>
 8010f68:	4603      	mov	r3, r0
 8010f6a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8010f6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f72:	2b00      	cmp	r3, #0
 8010f74:	d11b      	bne.n	8010fae <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	6a1b      	ldr	r3, [r3, #32]
 8010f7a:	2220      	movs	r2, #32
 8010f7c:	2100      	movs	r1, #0
 8010f7e:	4618      	mov	r0, r3
 8010f80:	f7fe fcd5 	bl	800f92e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	6a18      	ldr	r0, [r3, #32]
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	3324      	adds	r3, #36	; 0x24
 8010f8c:	220b      	movs	r2, #11
 8010f8e:	4619      	mov	r1, r3
 8010f90:	f7fe fcac 	bl	800f8ec <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6a1b      	ldr	r3, [r3, #32]
 8010f9e:	330c      	adds	r3, #12
 8010fa0:	f002 0218 	and.w	r2, r2, #24
 8010fa4:	b2d2      	uxtb	r2, r2
 8010fa6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8010fa8:	69fb      	ldr	r3, [r7, #28]
 8010faa:	2201      	movs	r2, #1
 8010fac:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8010fae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	3730      	adds	r7, #48	; 0x30
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd80      	pop	{r7, pc}
 8010fba:	bf00      	nop
 8010fbc:	4ec4ec4f 	.word	0x4ec4ec4f

08010fc0 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b088      	sub	sp, #32
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	6078      	str	r0, [r7, #4]
 8010fc8:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8010fd0:	683b      	ldr	r3, [r7, #0]
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8010fd6:	687b      	ldr	r3, [r7, #4]
 8010fd8:	69db      	ldr	r3, [r3, #28]
 8010fda:	2b00      	cmp	r3, #0
 8010fdc:	f000 80c9 	beq.w	8011172 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fe4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8010fe8:	d032      	beq.n	8011050 <get_fileinfo+0x90>
			i = j = 0;
 8010fea:	2300      	movs	r3, #0
 8010fec:	61bb      	str	r3, [r7, #24]
 8010fee:	69bb      	ldr	r3, [r7, #24]
 8010ff0:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8010ff2:	e01b      	b.n	801102c <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 8010ff4:	89fb      	ldrh	r3, [r7, #14]
 8010ff6:	2100      	movs	r1, #0
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	f001 fda1 	bl	8012b40 <ff_convert>
 8010ffe:	4603      	mov	r3, r0
 8011000:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8011002:	89fb      	ldrh	r3, [r7, #14]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d102      	bne.n	801100e <get_fileinfo+0x4e>
 8011008:	2300      	movs	r3, #0
 801100a:	61fb      	str	r3, [r7, #28]
 801100c:	e01a      	b.n	8011044 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 801100e:	69fb      	ldr	r3, [r7, #28]
 8011010:	2bfe      	cmp	r3, #254	; 0xfe
 8011012:	d902      	bls.n	801101a <get_fileinfo+0x5a>
 8011014:	2300      	movs	r3, #0
 8011016:	61fb      	str	r3, [r7, #28]
 8011018:	e014      	b.n	8011044 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 801101a:	69fb      	ldr	r3, [r7, #28]
 801101c:	1c5a      	adds	r2, r3, #1
 801101e:	61fa      	str	r2, [r7, #28]
 8011020:	89fa      	ldrh	r2, [r7, #14]
 8011022:	b2d1      	uxtb	r1, r2
 8011024:	683a      	ldr	r2, [r7, #0]
 8011026:	4413      	add	r3, r2
 8011028:	460a      	mov	r2, r1
 801102a:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 801102c:	693b      	ldr	r3, [r7, #16]
 801102e:	691a      	ldr	r2, [r3, #16]
 8011030:	69bb      	ldr	r3, [r7, #24]
 8011032:	1c59      	adds	r1, r3, #1
 8011034:	61b9      	str	r1, [r7, #24]
 8011036:	005b      	lsls	r3, r3, #1
 8011038:	4413      	add	r3, r2
 801103a:	881b      	ldrh	r3, [r3, #0]
 801103c:	81fb      	strh	r3, [r7, #14]
 801103e:	89fb      	ldrh	r3, [r7, #14]
 8011040:	2b00      	cmp	r3, #0
 8011042:	d1d7      	bne.n	8010ff4 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8011044:	683a      	ldr	r2, [r7, #0]
 8011046:	69fb      	ldr	r3, [r7, #28]
 8011048:	4413      	add	r3, r2
 801104a:	3316      	adds	r3, #22
 801104c:	2200      	movs	r2, #0
 801104e:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8011050:	2300      	movs	r3, #0
 8011052:	61bb      	str	r3, [r7, #24]
 8011054:	69bb      	ldr	r3, [r7, #24]
 8011056:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 8011058:	683a      	ldr	r2, [r7, #0]
 801105a:	69fb      	ldr	r3, [r7, #28]
 801105c:	4413      	add	r3, r2
 801105e:	3316      	adds	r3, #22
 8011060:	781b      	ldrb	r3, [r3, #0]
 8011062:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8011064:	e04c      	b.n	8011100 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	6a1a      	ldr	r2, [r3, #32]
 801106a:	69fb      	ldr	r3, [r7, #28]
 801106c:	1c59      	adds	r1, r3, #1
 801106e:	61f9      	str	r1, [r7, #28]
 8011070:	4413      	add	r3, r2
 8011072:	781b      	ldrb	r3, [r3, #0]
 8011074:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 8011076:	7dfb      	ldrb	r3, [r7, #23]
 8011078:	2b20      	cmp	r3, #32
 801107a:	d100      	bne.n	801107e <get_fileinfo+0xbe>
 801107c:	e040      	b.n	8011100 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 801107e:	7dfb      	ldrb	r3, [r7, #23]
 8011080:	2b05      	cmp	r3, #5
 8011082:	d101      	bne.n	8011088 <get_fileinfo+0xc8>
 8011084:	23e5      	movs	r3, #229	; 0xe5
 8011086:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 8011088:	69fb      	ldr	r3, [r7, #28]
 801108a:	2b09      	cmp	r3, #9
 801108c:	d10f      	bne.n	80110ae <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 801108e:	89bb      	ldrh	r3, [r7, #12]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d105      	bne.n	80110a0 <get_fileinfo+0xe0>
 8011094:	683a      	ldr	r2, [r7, #0]
 8011096:	69bb      	ldr	r3, [r7, #24]
 8011098:	4413      	add	r3, r2
 801109a:	3316      	adds	r3, #22
 801109c:	222e      	movs	r2, #46	; 0x2e
 801109e:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80110a0:	69bb      	ldr	r3, [r7, #24]
 80110a2:	1c5a      	adds	r2, r3, #1
 80110a4:	61ba      	str	r2, [r7, #24]
 80110a6:	683a      	ldr	r2, [r7, #0]
 80110a8:	4413      	add	r3, r2
 80110aa:	222e      	movs	r2, #46	; 0x2e
 80110ac:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80110ae:	683a      	ldr	r2, [r7, #0]
 80110b0:	69bb      	ldr	r3, [r7, #24]
 80110b2:	4413      	add	r3, r2
 80110b4:	3309      	adds	r3, #9
 80110b6:	7dfa      	ldrb	r2, [r7, #23]
 80110b8:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80110ba:	89bb      	ldrh	r3, [r7, #12]
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d11c      	bne.n	80110fa <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80110c0:	7dfb      	ldrb	r3, [r7, #23]
 80110c2:	2b40      	cmp	r3, #64	; 0x40
 80110c4:	d913      	bls.n	80110ee <get_fileinfo+0x12e>
 80110c6:	7dfb      	ldrb	r3, [r7, #23]
 80110c8:	2b5a      	cmp	r3, #90	; 0x5a
 80110ca:	d810      	bhi.n	80110ee <get_fileinfo+0x12e>
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	6a1b      	ldr	r3, [r3, #32]
 80110d0:	330c      	adds	r3, #12
 80110d2:	781b      	ldrb	r3, [r3, #0]
 80110d4:	461a      	mov	r2, r3
 80110d6:	69fb      	ldr	r3, [r7, #28]
 80110d8:	2b08      	cmp	r3, #8
 80110da:	d901      	bls.n	80110e0 <get_fileinfo+0x120>
 80110dc:	2310      	movs	r3, #16
 80110de:	e000      	b.n	80110e2 <get_fileinfo+0x122>
 80110e0:	2308      	movs	r3, #8
 80110e2:	4013      	ands	r3, r2
 80110e4:	2b00      	cmp	r3, #0
 80110e6:	d002      	beq.n	80110ee <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 80110e8:	7dfb      	ldrb	r3, [r7, #23]
 80110ea:	3320      	adds	r3, #32
 80110ec:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80110ee:	683a      	ldr	r2, [r7, #0]
 80110f0:	69bb      	ldr	r3, [r7, #24]
 80110f2:	4413      	add	r3, r2
 80110f4:	3316      	adds	r3, #22
 80110f6:	7dfa      	ldrb	r2, [r7, #23]
 80110f8:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80110fa:	69bb      	ldr	r3, [r7, #24]
 80110fc:	3301      	adds	r3, #1
 80110fe:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8011100:	69fb      	ldr	r3, [r7, #28]
 8011102:	2b0a      	cmp	r3, #10
 8011104:	d9af      	bls.n	8011066 <get_fileinfo+0xa6>
	}
	if (!lfv) {
 8011106:	89bb      	ldrh	r3, [r7, #12]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d10d      	bne.n	8011128 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 801110c:	683a      	ldr	r2, [r7, #0]
 801110e:	69bb      	ldr	r3, [r7, #24]
 8011110:	4413      	add	r3, r2
 8011112:	3316      	adds	r3, #22
 8011114:	2200      	movs	r2, #0
 8011116:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 8011118:	687b      	ldr	r3, [r7, #4]
 801111a:	6a1b      	ldr	r3, [r3, #32]
 801111c:	330c      	adds	r3, #12
 801111e:	781b      	ldrb	r3, [r3, #0]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d101      	bne.n	8011128 <get_fileinfo+0x168>
 8011124:	2300      	movs	r3, #0
 8011126:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 8011128:	683a      	ldr	r2, [r7, #0]
 801112a:	69bb      	ldr	r3, [r7, #24]
 801112c:	4413      	add	r3, r2
 801112e:	3309      	adds	r3, #9
 8011130:	2200      	movs	r2, #0
 8011132:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	6a1b      	ldr	r3, [r3, #32]
 8011138:	7ada      	ldrb	r2, [r3, #11]
 801113a:	683b      	ldr	r3, [r7, #0]
 801113c:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	6a1b      	ldr	r3, [r3, #32]
 8011142:	331c      	adds	r3, #28
 8011144:	4618      	mov	r0, r3
 8011146:	f7fe fb67 	bl	800f818 <ld_dword>
 801114a:	4602      	mov	r2, r0
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	6a1b      	ldr	r3, [r3, #32]
 8011154:	3316      	adds	r3, #22
 8011156:	4618      	mov	r0, r3
 8011158:	f7fe fb5e 	bl	800f818 <ld_dword>
 801115c:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 801115e:	68bb      	ldr	r3, [r7, #8]
 8011160:	b29a      	uxth	r2, r3
 8011162:	683b      	ldr	r3, [r7, #0]
 8011164:	80da      	strh	r2, [r3, #6]
 8011166:	68bb      	ldr	r3, [r7, #8]
 8011168:	0c1b      	lsrs	r3, r3, #16
 801116a:	b29a      	uxth	r2, r3
 801116c:	683b      	ldr	r3, [r7, #0]
 801116e:	809a      	strh	r2, [r3, #4]
 8011170:	e000      	b.n	8011174 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8011172:	bf00      	nop
}
 8011174:	3720      	adds	r7, #32
 8011176:	46bd      	mov	sp, r7
 8011178:	bd80      	pop	{r7, pc}
	...

0801117c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b08a      	sub	sp, #40	; 0x28
 8011180:	af00      	add	r7, sp, #0
 8011182:	6078      	str	r0, [r7, #4]
 8011184:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8011186:	683b      	ldr	r3, [r7, #0]
 8011188:	681b      	ldr	r3, [r3, #0]
 801118a:	613b      	str	r3, [r7, #16]
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	691b      	ldr	r3, [r3, #16]
 8011192:	60fb      	str	r3, [r7, #12]
 8011194:	2300      	movs	r3, #0
 8011196:	617b      	str	r3, [r7, #20]
 8011198:	697b      	ldr	r3, [r7, #20]
 801119a:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 801119c:	69bb      	ldr	r3, [r7, #24]
 801119e:	1c5a      	adds	r2, r3, #1
 80111a0:	61ba      	str	r2, [r7, #24]
 80111a2:	693a      	ldr	r2, [r7, #16]
 80111a4:	4413      	add	r3, r2
 80111a6:	781b      	ldrb	r3, [r3, #0]
 80111a8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80111aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80111ac:	2b1f      	cmp	r3, #31
 80111ae:	d940      	bls.n	8011232 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80111b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80111b2:	2b2f      	cmp	r3, #47	; 0x2f
 80111b4:	d006      	beq.n	80111c4 <create_name+0x48>
 80111b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80111b8:	2b5c      	cmp	r3, #92	; 0x5c
 80111ba:	d110      	bne.n	80111de <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80111bc:	e002      	b.n	80111c4 <create_name+0x48>
 80111be:	69bb      	ldr	r3, [r7, #24]
 80111c0:	3301      	adds	r3, #1
 80111c2:	61bb      	str	r3, [r7, #24]
 80111c4:	693a      	ldr	r2, [r7, #16]
 80111c6:	69bb      	ldr	r3, [r7, #24]
 80111c8:	4413      	add	r3, r2
 80111ca:	781b      	ldrb	r3, [r3, #0]
 80111cc:	2b2f      	cmp	r3, #47	; 0x2f
 80111ce:	d0f6      	beq.n	80111be <create_name+0x42>
 80111d0:	693a      	ldr	r2, [r7, #16]
 80111d2:	69bb      	ldr	r3, [r7, #24]
 80111d4:	4413      	add	r3, r2
 80111d6:	781b      	ldrb	r3, [r3, #0]
 80111d8:	2b5c      	cmp	r3, #92	; 0x5c
 80111da:	d0f0      	beq.n	80111be <create_name+0x42>
			break;
 80111dc:	e02a      	b.n	8011234 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80111de:	697b      	ldr	r3, [r7, #20]
 80111e0:	2bfe      	cmp	r3, #254	; 0xfe
 80111e2:	d901      	bls.n	80111e8 <create_name+0x6c>
 80111e4:	2306      	movs	r3, #6
 80111e6:	e177      	b.n	80114d8 <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 80111e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80111ea:	b2db      	uxtb	r3, r3
 80111ec:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80111ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80111f0:	2101      	movs	r1, #1
 80111f2:	4618      	mov	r0, r3
 80111f4:	f001 fca4 	bl	8012b40 <ff_convert>
 80111f8:	4603      	mov	r3, r0
 80111fa:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80111fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d101      	bne.n	8011206 <create_name+0x8a>
 8011202:	2306      	movs	r3, #6
 8011204:	e168      	b.n	80114d8 <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8011206:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011208:	2b7f      	cmp	r3, #127	; 0x7f
 801120a:	d809      	bhi.n	8011220 <create_name+0xa4>
 801120c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801120e:	4619      	mov	r1, r3
 8011210:	48b3      	ldr	r0, [pc, #716]	; (80114e0 <create_name+0x364>)
 8011212:	f7fe fbce 	bl	800f9b2 <chk_chr>
 8011216:	4603      	mov	r3, r0
 8011218:	2b00      	cmp	r3, #0
 801121a:	d001      	beq.n	8011220 <create_name+0xa4>
 801121c:	2306      	movs	r3, #6
 801121e:	e15b      	b.n	80114d8 <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8011220:	697b      	ldr	r3, [r7, #20]
 8011222:	1c5a      	adds	r2, r3, #1
 8011224:	617a      	str	r2, [r7, #20]
 8011226:	005b      	lsls	r3, r3, #1
 8011228:	68fa      	ldr	r2, [r7, #12]
 801122a:	4413      	add	r3, r2
 801122c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801122e:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8011230:	e7b4      	b.n	801119c <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8011232:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8011234:	693a      	ldr	r2, [r7, #16]
 8011236:	69bb      	ldr	r3, [r7, #24]
 8011238:	441a      	add	r2, r3
 801123a:	683b      	ldr	r3, [r7, #0]
 801123c:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 801123e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011240:	2b1f      	cmp	r3, #31
 8011242:	d801      	bhi.n	8011248 <create_name+0xcc>
 8011244:	2304      	movs	r3, #4
 8011246:	e000      	b.n	801124a <create_name+0xce>
 8011248:	2300      	movs	r3, #0
 801124a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 801124e:	e011      	b.n	8011274 <create_name+0xf8>
		w = lfn[di - 1];
 8011250:	697b      	ldr	r3, [r7, #20]
 8011252:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8011256:	3b01      	subs	r3, #1
 8011258:	005b      	lsls	r3, r3, #1
 801125a:	68fa      	ldr	r2, [r7, #12]
 801125c:	4413      	add	r3, r2
 801125e:	881b      	ldrh	r3, [r3, #0]
 8011260:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8011262:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011264:	2b20      	cmp	r3, #32
 8011266:	d002      	beq.n	801126e <create_name+0xf2>
 8011268:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801126a:	2b2e      	cmp	r3, #46	; 0x2e
 801126c:	d106      	bne.n	801127c <create_name+0x100>
		di--;
 801126e:	697b      	ldr	r3, [r7, #20]
 8011270:	3b01      	subs	r3, #1
 8011272:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8011274:	697b      	ldr	r3, [r7, #20]
 8011276:	2b00      	cmp	r3, #0
 8011278:	d1ea      	bne.n	8011250 <create_name+0xd4>
 801127a:	e000      	b.n	801127e <create_name+0x102>
		if (w != ' ' && w != '.') break;
 801127c:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 801127e:	697b      	ldr	r3, [r7, #20]
 8011280:	005b      	lsls	r3, r3, #1
 8011282:	68fa      	ldr	r2, [r7, #12]
 8011284:	4413      	add	r3, r2
 8011286:	2200      	movs	r2, #0
 8011288:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801128a:	697b      	ldr	r3, [r7, #20]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d101      	bne.n	8011294 <create_name+0x118>
 8011290:	2306      	movs	r3, #6
 8011292:	e121      	b.n	80114d8 <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	3324      	adds	r3, #36	; 0x24
 8011298:	220b      	movs	r2, #11
 801129a:	2120      	movs	r1, #32
 801129c:	4618      	mov	r0, r3
 801129e:	f7fe fb46 	bl	800f92e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80112a2:	2300      	movs	r3, #0
 80112a4:	61bb      	str	r3, [r7, #24]
 80112a6:	e002      	b.n	80112ae <create_name+0x132>
 80112a8:	69bb      	ldr	r3, [r7, #24]
 80112aa:	3301      	adds	r3, #1
 80112ac:	61bb      	str	r3, [r7, #24]
 80112ae:	69bb      	ldr	r3, [r7, #24]
 80112b0:	005b      	lsls	r3, r3, #1
 80112b2:	68fa      	ldr	r2, [r7, #12]
 80112b4:	4413      	add	r3, r2
 80112b6:	881b      	ldrh	r3, [r3, #0]
 80112b8:	2b20      	cmp	r3, #32
 80112ba:	d0f5      	beq.n	80112a8 <create_name+0x12c>
 80112bc:	69bb      	ldr	r3, [r7, #24]
 80112be:	005b      	lsls	r3, r3, #1
 80112c0:	68fa      	ldr	r2, [r7, #12]
 80112c2:	4413      	add	r3, r2
 80112c4:	881b      	ldrh	r3, [r3, #0]
 80112c6:	2b2e      	cmp	r3, #46	; 0x2e
 80112c8:	d0ee      	beq.n	80112a8 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80112ca:	69bb      	ldr	r3, [r7, #24]
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d009      	beq.n	80112e4 <create_name+0x168>
 80112d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80112d4:	f043 0303 	orr.w	r3, r3, #3
 80112d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80112dc:	e002      	b.n	80112e4 <create_name+0x168>
 80112de:	697b      	ldr	r3, [r7, #20]
 80112e0:	3b01      	subs	r3, #1
 80112e2:	617b      	str	r3, [r7, #20]
 80112e4:	697b      	ldr	r3, [r7, #20]
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d009      	beq.n	80112fe <create_name+0x182>
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80112f0:	3b01      	subs	r3, #1
 80112f2:	005b      	lsls	r3, r3, #1
 80112f4:	68fa      	ldr	r2, [r7, #12]
 80112f6:	4413      	add	r3, r2
 80112f8:	881b      	ldrh	r3, [r3, #0]
 80112fa:	2b2e      	cmp	r3, #46	; 0x2e
 80112fc:	d1ef      	bne.n	80112de <create_name+0x162>

	i = b = 0; ni = 8;
 80112fe:	2300      	movs	r3, #0
 8011300:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011304:	2300      	movs	r3, #0
 8011306:	623b      	str	r3, [r7, #32]
 8011308:	2308      	movs	r3, #8
 801130a:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 801130c:	69bb      	ldr	r3, [r7, #24]
 801130e:	1c5a      	adds	r2, r3, #1
 8011310:	61ba      	str	r2, [r7, #24]
 8011312:	005b      	lsls	r3, r3, #1
 8011314:	68fa      	ldr	r2, [r7, #12]
 8011316:	4413      	add	r3, r2
 8011318:	881b      	ldrh	r3, [r3, #0]
 801131a:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 801131c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801131e:	2b00      	cmp	r3, #0
 8011320:	f000 8090 	beq.w	8011444 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8011324:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011326:	2b20      	cmp	r3, #32
 8011328:	d006      	beq.n	8011338 <create_name+0x1bc>
 801132a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801132c:	2b2e      	cmp	r3, #46	; 0x2e
 801132e:	d10a      	bne.n	8011346 <create_name+0x1ca>
 8011330:	69ba      	ldr	r2, [r7, #24]
 8011332:	697b      	ldr	r3, [r7, #20]
 8011334:	429a      	cmp	r2, r3
 8011336:	d006      	beq.n	8011346 <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8011338:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801133c:	f043 0303 	orr.w	r3, r3, #3
 8011340:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011344:	e07d      	b.n	8011442 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8011346:	6a3a      	ldr	r2, [r7, #32]
 8011348:	69fb      	ldr	r3, [r7, #28]
 801134a:	429a      	cmp	r2, r3
 801134c:	d203      	bcs.n	8011356 <create_name+0x1da>
 801134e:	69ba      	ldr	r2, [r7, #24]
 8011350:	697b      	ldr	r3, [r7, #20]
 8011352:	429a      	cmp	r2, r3
 8011354:	d123      	bne.n	801139e <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8011356:	69fb      	ldr	r3, [r7, #28]
 8011358:	2b0b      	cmp	r3, #11
 801135a:	d106      	bne.n	801136a <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 801135c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011360:	f043 0303 	orr.w	r3, r3, #3
 8011364:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011368:	e06f      	b.n	801144a <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801136a:	69ba      	ldr	r2, [r7, #24]
 801136c:	697b      	ldr	r3, [r7, #20]
 801136e:	429a      	cmp	r2, r3
 8011370:	d005      	beq.n	801137e <create_name+0x202>
 8011372:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011376:	f043 0303 	orr.w	r3, r3, #3
 801137a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 801137e:	69ba      	ldr	r2, [r7, #24]
 8011380:	697b      	ldr	r3, [r7, #20]
 8011382:	429a      	cmp	r2, r3
 8011384:	d860      	bhi.n	8011448 <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8011386:	697b      	ldr	r3, [r7, #20]
 8011388:	61bb      	str	r3, [r7, #24]
 801138a:	2308      	movs	r3, #8
 801138c:	623b      	str	r3, [r7, #32]
 801138e:	230b      	movs	r3, #11
 8011390:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8011392:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011396:	009b      	lsls	r3, r3, #2
 8011398:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801139c:	e051      	b.n	8011442 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 801139e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80113a0:	2b7f      	cmp	r3, #127	; 0x7f
 80113a2:	d914      	bls.n	80113ce <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80113a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80113a6:	2100      	movs	r1, #0
 80113a8:	4618      	mov	r0, r3
 80113aa:	f001 fbc9 	bl	8012b40 <ff_convert>
 80113ae:	4603      	mov	r3, r0
 80113b0:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80113b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d004      	beq.n	80113c2 <create_name+0x246>
 80113b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80113ba:	3b80      	subs	r3, #128	; 0x80
 80113bc:	4a49      	ldr	r2, [pc, #292]	; (80114e4 <create_name+0x368>)
 80113be:	5cd3      	ldrb	r3, [r2, r3]
 80113c0:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80113c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80113c6:	f043 0302 	orr.w	r3, r3, #2
 80113ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80113ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80113d0:	2b00      	cmp	r3, #0
 80113d2:	d007      	beq.n	80113e4 <create_name+0x268>
 80113d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80113d6:	4619      	mov	r1, r3
 80113d8:	4843      	ldr	r0, [pc, #268]	; (80114e8 <create_name+0x36c>)
 80113da:	f7fe faea 	bl	800f9b2 <chk_chr>
 80113de:	4603      	mov	r3, r0
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d008      	beq.n	80113f6 <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80113e4:	235f      	movs	r3, #95	; 0x5f
 80113e6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80113e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80113ec:	f043 0303 	orr.w	r3, r3, #3
 80113f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80113f4:	e01b      	b.n	801142e <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80113f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80113f8:	2b40      	cmp	r3, #64	; 0x40
 80113fa:	d909      	bls.n	8011410 <create_name+0x294>
 80113fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80113fe:	2b5a      	cmp	r3, #90	; 0x5a
 8011400:	d806      	bhi.n	8011410 <create_name+0x294>
					b |= 2;
 8011402:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011406:	f043 0302 	orr.w	r3, r3, #2
 801140a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801140e:	e00e      	b.n	801142e <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8011410:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011412:	2b60      	cmp	r3, #96	; 0x60
 8011414:	d90b      	bls.n	801142e <create_name+0x2b2>
 8011416:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011418:	2b7a      	cmp	r3, #122	; 0x7a
 801141a:	d808      	bhi.n	801142e <create_name+0x2b2>
						b |= 1; w -= 0x20;
 801141c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011420:	f043 0301 	orr.w	r3, r3, #1
 8011424:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011428:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801142a:	3b20      	subs	r3, #32
 801142c:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 801142e:	6a3b      	ldr	r3, [r7, #32]
 8011430:	1c5a      	adds	r2, r3, #1
 8011432:	623a      	str	r2, [r7, #32]
 8011434:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011436:	b2d1      	uxtb	r1, r2
 8011438:	687a      	ldr	r2, [r7, #4]
 801143a:	4413      	add	r3, r2
 801143c:	460a      	mov	r2, r1
 801143e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8011442:	e763      	b.n	801130c <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8011444:	bf00      	nop
 8011446:	e000      	b.n	801144a <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 8011448:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011450:	2be5      	cmp	r3, #229	; 0xe5
 8011452:	d103      	bne.n	801145c <create_name+0x2e0>
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	2205      	movs	r2, #5
 8011458:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 801145c:	69fb      	ldr	r3, [r7, #28]
 801145e:	2b08      	cmp	r3, #8
 8011460:	d104      	bne.n	801146c <create_name+0x2f0>
 8011462:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011466:	009b      	lsls	r3, r3, #2
 8011468:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 801146c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011470:	f003 030c 	and.w	r3, r3, #12
 8011474:	2b0c      	cmp	r3, #12
 8011476:	d005      	beq.n	8011484 <create_name+0x308>
 8011478:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801147c:	f003 0303 	and.w	r3, r3, #3
 8011480:	2b03      	cmp	r3, #3
 8011482:	d105      	bne.n	8011490 <create_name+0x314>
 8011484:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011488:	f043 0302 	orr.w	r3, r3, #2
 801148c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8011490:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011494:	f003 0302 	and.w	r3, r3, #2
 8011498:	2b00      	cmp	r3, #0
 801149a:	d117      	bne.n	80114cc <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 801149c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80114a0:	f003 0303 	and.w	r3, r3, #3
 80114a4:	2b01      	cmp	r3, #1
 80114a6:	d105      	bne.n	80114b4 <create_name+0x338>
 80114a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114ac:	f043 0310 	orr.w	r3, r3, #16
 80114b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80114b4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80114b8:	f003 030c 	and.w	r3, r3, #12
 80114bc:	2b04      	cmp	r3, #4
 80114be:	d105      	bne.n	80114cc <create_name+0x350>
 80114c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114c4:	f043 0308 	orr.w	r3, r3, #8
 80114c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80114d2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 80114d6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80114d8:	4618      	mov	r0, r3
 80114da:	3728      	adds	r7, #40	; 0x28
 80114dc:	46bd      	mov	sp, r7
 80114de:	bd80      	pop	{r7, pc}
 80114e0:	0801acd0 	.word	0x0801acd0
 80114e4:	0801ec10 	.word	0x0801ec10
 80114e8:	0801acdc 	.word	0x0801acdc

080114ec <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b086      	sub	sp, #24
 80114f0:	af00      	add	r7, sp, #0
 80114f2:	6078      	str	r0, [r7, #4]
 80114f4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80114fa:	693b      	ldr	r3, [r7, #16]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011500:	e002      	b.n	8011508 <follow_path+0x1c>
 8011502:	683b      	ldr	r3, [r7, #0]
 8011504:	3301      	adds	r3, #1
 8011506:	603b      	str	r3, [r7, #0]
 8011508:	683b      	ldr	r3, [r7, #0]
 801150a:	781b      	ldrb	r3, [r3, #0]
 801150c:	2b2f      	cmp	r3, #47	; 0x2f
 801150e:	d0f8      	beq.n	8011502 <follow_path+0x16>
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	781b      	ldrb	r3, [r3, #0]
 8011514:	2b5c      	cmp	r3, #92	; 0x5c
 8011516:	d0f4      	beq.n	8011502 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011518:	693b      	ldr	r3, [r7, #16]
 801151a:	2200      	movs	r2, #0
 801151c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801151e:	683b      	ldr	r3, [r7, #0]
 8011520:	781b      	ldrb	r3, [r3, #0]
 8011522:	2b1f      	cmp	r3, #31
 8011524:	d80a      	bhi.n	801153c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8011526:	687b      	ldr	r3, [r7, #4]
 8011528:	2280      	movs	r2, #128	; 0x80
 801152a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801152e:	2100      	movs	r1, #0
 8011530:	6878      	ldr	r0, [r7, #4]
 8011532:	f7ff f81d 	bl	8010570 <dir_sdi>
 8011536:	4603      	mov	r3, r0
 8011538:	75fb      	strb	r3, [r7, #23]
 801153a:	e048      	b.n	80115ce <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801153c:	463b      	mov	r3, r7
 801153e:	4619      	mov	r1, r3
 8011540:	6878      	ldr	r0, [r7, #4]
 8011542:	f7ff fe1b 	bl	801117c <create_name>
 8011546:	4603      	mov	r3, r0
 8011548:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801154a:	7dfb      	ldrb	r3, [r7, #23]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d139      	bne.n	80115c4 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011550:	6878      	ldr	r0, [r7, #4]
 8011552:	f7ff fb7c 	bl	8010c4e <dir_find>
 8011556:	4603      	mov	r3, r0
 8011558:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011560:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011562:	7dfb      	ldrb	r3, [r7, #23]
 8011564:	2b00      	cmp	r3, #0
 8011566:	d00a      	beq.n	801157e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011568:	7dfb      	ldrb	r3, [r7, #23]
 801156a:	2b04      	cmp	r3, #4
 801156c:	d12c      	bne.n	80115c8 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801156e:	7afb      	ldrb	r3, [r7, #11]
 8011570:	f003 0304 	and.w	r3, r3, #4
 8011574:	2b00      	cmp	r3, #0
 8011576:	d127      	bne.n	80115c8 <follow_path+0xdc>
 8011578:	2305      	movs	r3, #5
 801157a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801157c:	e024      	b.n	80115c8 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801157e:	7afb      	ldrb	r3, [r7, #11]
 8011580:	f003 0304 	and.w	r3, r3, #4
 8011584:	2b00      	cmp	r3, #0
 8011586:	d121      	bne.n	80115cc <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011588:	693b      	ldr	r3, [r7, #16]
 801158a:	799b      	ldrb	r3, [r3, #6]
 801158c:	f003 0310 	and.w	r3, r3, #16
 8011590:	2b00      	cmp	r3, #0
 8011592:	d102      	bne.n	801159a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011594:	2305      	movs	r3, #5
 8011596:	75fb      	strb	r3, [r7, #23]
 8011598:	e019      	b.n	80115ce <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801159a:	68fb      	ldr	r3, [r7, #12]
 801159c:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	695b      	ldr	r3, [r3, #20]
 80115a4:	68fa      	ldr	r2, [r7, #12]
 80115a6:	8992      	ldrh	r2, [r2, #12]
 80115a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80115ac:	fb02 f200 	mul.w	r2, r2, r0
 80115b0:	1a9b      	subs	r3, r3, r2
 80115b2:	440b      	add	r3, r1
 80115b4:	4619      	mov	r1, r3
 80115b6:	68f8      	ldr	r0, [r7, #12]
 80115b8:	f7ff f980 	bl	80108bc <ld_clust>
 80115bc:	4602      	mov	r2, r0
 80115be:	693b      	ldr	r3, [r7, #16]
 80115c0:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80115c2:	e7bb      	b.n	801153c <follow_path+0x50>
			if (res != FR_OK) break;
 80115c4:	bf00      	nop
 80115c6:	e002      	b.n	80115ce <follow_path+0xe2>
				break;
 80115c8:	bf00      	nop
 80115ca:	e000      	b.n	80115ce <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80115cc:	bf00      	nop
			}
		}
	}

	return res;
 80115ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80115d0:	4618      	mov	r0, r3
 80115d2:	3718      	adds	r7, #24
 80115d4:	46bd      	mov	sp, r7
 80115d6:	bd80      	pop	{r7, pc}

080115d8 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80115d8:	b480      	push	{r7}
 80115da:	b087      	sub	sp, #28
 80115dc:	af00      	add	r7, sp, #0
 80115de:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80115e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80115e4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d031      	beq.n	8011652 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	617b      	str	r3, [r7, #20]
 80115f4:	e002      	b.n	80115fc <get_ldnumber+0x24>
 80115f6:	697b      	ldr	r3, [r7, #20]
 80115f8:	3301      	adds	r3, #1
 80115fa:	617b      	str	r3, [r7, #20]
 80115fc:	697b      	ldr	r3, [r7, #20]
 80115fe:	781b      	ldrb	r3, [r3, #0]
 8011600:	2b1f      	cmp	r3, #31
 8011602:	d903      	bls.n	801160c <get_ldnumber+0x34>
 8011604:	697b      	ldr	r3, [r7, #20]
 8011606:	781b      	ldrb	r3, [r3, #0]
 8011608:	2b3a      	cmp	r3, #58	; 0x3a
 801160a:	d1f4      	bne.n	80115f6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801160c:	697b      	ldr	r3, [r7, #20]
 801160e:	781b      	ldrb	r3, [r3, #0]
 8011610:	2b3a      	cmp	r3, #58	; 0x3a
 8011612:	d11c      	bne.n	801164e <get_ldnumber+0x76>
			tp = *path;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	1c5a      	adds	r2, r3, #1
 801161e:	60fa      	str	r2, [r7, #12]
 8011620:	781b      	ldrb	r3, [r3, #0]
 8011622:	3b30      	subs	r3, #48	; 0x30
 8011624:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011626:	68bb      	ldr	r3, [r7, #8]
 8011628:	2b09      	cmp	r3, #9
 801162a:	d80e      	bhi.n	801164a <get_ldnumber+0x72>
 801162c:	68fa      	ldr	r2, [r7, #12]
 801162e:	697b      	ldr	r3, [r7, #20]
 8011630:	429a      	cmp	r2, r3
 8011632:	d10a      	bne.n	801164a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011634:	68bb      	ldr	r3, [r7, #8]
 8011636:	2b00      	cmp	r3, #0
 8011638:	d107      	bne.n	801164a <get_ldnumber+0x72>
					vol = (int)i;
 801163a:	68bb      	ldr	r3, [r7, #8]
 801163c:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 801163e:	697b      	ldr	r3, [r7, #20]
 8011640:	3301      	adds	r3, #1
 8011642:	617b      	str	r3, [r7, #20]
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	697a      	ldr	r2, [r7, #20]
 8011648:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 801164a:	693b      	ldr	r3, [r7, #16]
 801164c:	e002      	b.n	8011654 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 801164e:	2300      	movs	r3, #0
 8011650:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011652:	693b      	ldr	r3, [r7, #16]
}
 8011654:	4618      	mov	r0, r3
 8011656:	371c      	adds	r7, #28
 8011658:	46bd      	mov	sp, r7
 801165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801165e:	4770      	bx	lr

08011660 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011660:	b580      	push	{r7, lr}
 8011662:	b082      	sub	sp, #8
 8011664:	af00      	add	r7, sp, #0
 8011666:	6078      	str	r0, [r7, #4]
 8011668:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 801166a:	687b      	ldr	r3, [r7, #4]
 801166c:	2200      	movs	r2, #0
 801166e:	70da      	strb	r2, [r3, #3]
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011676:	639a      	str	r2, [r3, #56]	; 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011678:	6839      	ldr	r1, [r7, #0]
 801167a:	6878      	ldr	r0, [r7, #4]
 801167c:	f7fe fb96 	bl	800fdac <move_window>
 8011680:	4603      	mov	r3, r0
 8011682:	2b00      	cmp	r3, #0
 8011684:	d001      	beq.n	801168a <check_fs+0x2a>
 8011686:	2304      	movs	r3, #4
 8011688:	e038      	b.n	80116fc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	333c      	adds	r3, #60	; 0x3c
 801168e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011692:	4618      	mov	r0, r3
 8011694:	f7fe f8a8 	bl	800f7e8 <ld_word>
 8011698:	4603      	mov	r3, r0
 801169a:	461a      	mov	r2, r3
 801169c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80116a0:	429a      	cmp	r2, r3
 80116a2:	d001      	beq.n	80116a8 <check_fs+0x48>
 80116a4:	2303      	movs	r3, #3
 80116a6:	e029      	b.n	80116fc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80116ae:	2be9      	cmp	r3, #233	; 0xe9
 80116b0:	d009      	beq.n	80116c6 <check_fs+0x66>
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80116b8:	2beb      	cmp	r3, #235	; 0xeb
 80116ba:	d11e      	bne.n	80116fa <check_fs+0x9a>
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80116c2:	2b90      	cmp	r3, #144	; 0x90
 80116c4:	d119      	bne.n	80116fa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80116c6:	687b      	ldr	r3, [r7, #4]
 80116c8:	333c      	adds	r3, #60	; 0x3c
 80116ca:	3336      	adds	r3, #54	; 0x36
 80116cc:	4618      	mov	r0, r3
 80116ce:	f7fe f8a3 	bl	800f818 <ld_dword>
 80116d2:	4603      	mov	r3, r0
 80116d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80116d8:	4a0a      	ldr	r2, [pc, #40]	; (8011704 <check_fs+0xa4>)
 80116da:	4293      	cmp	r3, r2
 80116dc:	d101      	bne.n	80116e2 <check_fs+0x82>
 80116de:	2300      	movs	r3, #0
 80116e0:	e00c      	b.n	80116fc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	333c      	adds	r3, #60	; 0x3c
 80116e6:	3352      	adds	r3, #82	; 0x52
 80116e8:	4618      	mov	r0, r3
 80116ea:	f7fe f895 	bl	800f818 <ld_dword>
 80116ee:	4603      	mov	r3, r0
 80116f0:	4a05      	ldr	r2, [pc, #20]	; (8011708 <check_fs+0xa8>)
 80116f2:	4293      	cmp	r3, r2
 80116f4:	d101      	bne.n	80116fa <check_fs+0x9a>
 80116f6:	2300      	movs	r3, #0
 80116f8:	e000      	b.n	80116fc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80116fa:	2302      	movs	r3, #2
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	3708      	adds	r7, #8
 8011700:	46bd      	mov	sp, r7
 8011702:	bd80      	pop	{r7, pc}
 8011704:	00544146 	.word	0x00544146
 8011708:	33544146 	.word	0x33544146

0801170c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 801170c:	b580      	push	{r7, lr}
 801170e:	b096      	sub	sp, #88	; 0x58
 8011710:	af00      	add	r7, sp, #0
 8011712:	60f8      	str	r0, [r7, #12]
 8011714:	60b9      	str	r1, [r7, #8]
 8011716:	4613      	mov	r3, r2
 8011718:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 801171a:	68bb      	ldr	r3, [r7, #8]
 801171c:	2200      	movs	r2, #0
 801171e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011720:	68f8      	ldr	r0, [r7, #12]
 8011722:	f7ff ff59 	bl	80115d8 <get_ldnumber>
 8011726:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011728:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801172a:	2b00      	cmp	r3, #0
 801172c:	da01      	bge.n	8011732 <find_volume+0x26>
 801172e:	230b      	movs	r3, #11
 8011730:	e26c      	b.n	8011c0c <find_volume+0x500>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011732:	4aa4      	ldr	r2, [pc, #656]	; (80119c4 <find_volume+0x2b8>)
 8011734:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801173a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 801173c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801173e:	2b00      	cmp	r3, #0
 8011740:	d101      	bne.n	8011746 <find_volume+0x3a>
 8011742:	230c      	movs	r3, #12
 8011744:	e262      	b.n	8011c0c <find_volume+0x500>

	ENTER_FF(fs);						/* Lock the volume */
 8011746:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011748:	f7fe f94e 	bl	800f9e8 <lock_fs>
 801174c:	4603      	mov	r3, r0
 801174e:	2b00      	cmp	r3, #0
 8011750:	d101      	bne.n	8011756 <find_volume+0x4a>
 8011752:	230f      	movs	r3, #15
 8011754:	e25a      	b.n	8011c0c <find_volume+0x500>
	*rfs = fs;							/* Return pointer to the file system object */
 8011756:	68bb      	ldr	r3, [r7, #8]
 8011758:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801175a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 801175c:	79fb      	ldrb	r3, [r7, #7]
 801175e:	f023 0301 	bic.w	r3, r3, #1
 8011762:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011766:	781b      	ldrb	r3, [r3, #0]
 8011768:	2b00      	cmp	r3, #0
 801176a:	d01a      	beq.n	80117a2 <find_volume+0x96>
		stat = disk_status(fs->drv);
 801176c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801176e:	785b      	ldrb	r3, [r3, #1]
 8011770:	4618      	mov	r0, r3
 8011772:	f7fd ff9b 	bl	800f6ac <disk_status>
 8011776:	4603      	mov	r3, r0
 8011778:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 801177c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011780:	f003 0301 	and.w	r3, r3, #1
 8011784:	2b00      	cmp	r3, #0
 8011786:	d10c      	bne.n	80117a2 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011788:	79fb      	ldrb	r3, [r7, #7]
 801178a:	2b00      	cmp	r3, #0
 801178c:	d007      	beq.n	801179e <find_volume+0x92>
 801178e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011792:	f003 0304 	and.w	r3, r3, #4
 8011796:	2b00      	cmp	r3, #0
 8011798:	d001      	beq.n	801179e <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 801179a:	230a      	movs	r3, #10
 801179c:	e236      	b.n	8011c0c <find_volume+0x500>
			}
			return FR_OK;				/* The file system object is valid */
 801179e:	2300      	movs	r3, #0
 80117a0:	e234      	b.n	8011c0c <find_volume+0x500>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80117a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117a4:	2200      	movs	r2, #0
 80117a6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80117a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117aa:	b2da      	uxtb	r2, r3
 80117ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80117b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117b2:	785b      	ldrb	r3, [r3, #1]
 80117b4:	4618      	mov	r0, r3
 80117b6:	f7fd ff93 	bl	800f6e0 <disk_initialize>
 80117ba:	4603      	mov	r3, r0
 80117bc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80117c0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80117c4:	f003 0301 	and.w	r3, r3, #1
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d001      	beq.n	80117d0 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80117cc:	2303      	movs	r3, #3
 80117ce:	e21d      	b.n	8011c0c <find_volume+0x500>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80117d0:	79fb      	ldrb	r3, [r7, #7]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d007      	beq.n	80117e6 <find_volume+0xda>
 80117d6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80117da:	f003 0304 	and.w	r3, r3, #4
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d001      	beq.n	80117e6 <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 80117e2:	230a      	movs	r3, #10
 80117e4:	e212      	b.n	8011c0c <find_volume+0x500>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80117e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117e8:	7858      	ldrb	r0, [r3, #1]
 80117ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117ec:	330c      	adds	r3, #12
 80117ee:	461a      	mov	r2, r3
 80117f0:	2102      	movs	r1, #2
 80117f2:	f7fd ffdb 	bl	800f7ac <disk_ioctl>
 80117f6:	4603      	mov	r3, r0
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d001      	beq.n	8011800 <find_volume+0xf4>
 80117fc:	2301      	movs	r3, #1
 80117fe:	e205      	b.n	8011c0c <find_volume+0x500>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8011800:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011802:	899b      	ldrh	r3, [r3, #12]
 8011804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011808:	d80d      	bhi.n	8011826 <find_volume+0x11a>
 801180a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801180c:	899b      	ldrh	r3, [r3, #12]
 801180e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011812:	d308      	bcc.n	8011826 <find_volume+0x11a>
 8011814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011816:	899b      	ldrh	r3, [r3, #12]
 8011818:	461a      	mov	r2, r3
 801181a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801181c:	899b      	ldrh	r3, [r3, #12]
 801181e:	3b01      	subs	r3, #1
 8011820:	4013      	ands	r3, r2
 8011822:	2b00      	cmp	r3, #0
 8011824:	d001      	beq.n	801182a <find_volume+0x11e>
 8011826:	2301      	movs	r3, #1
 8011828:	e1f0      	b.n	8011c0c <find_volume+0x500>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801182a:	2300      	movs	r3, #0
 801182c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 801182e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011830:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011832:	f7ff ff15 	bl	8011660 <check_fs>
 8011836:	4603      	mov	r3, r0
 8011838:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 801183c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011840:	2b02      	cmp	r3, #2
 8011842:	d14b      	bne.n	80118dc <find_volume+0x1d0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011844:	2300      	movs	r3, #0
 8011846:	643b      	str	r3, [r7, #64]	; 0x40
 8011848:	e01f      	b.n	801188a <find_volume+0x17e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801184a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801184c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8011850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011852:	011b      	lsls	r3, r3, #4
 8011854:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011858:	4413      	add	r3, r2
 801185a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 801185c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801185e:	3304      	adds	r3, #4
 8011860:	781b      	ldrb	r3, [r3, #0]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d006      	beq.n	8011874 <find_volume+0x168>
 8011866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011868:	3308      	adds	r3, #8
 801186a:	4618      	mov	r0, r3
 801186c:	f7fd ffd4 	bl	800f818 <ld_dword>
 8011870:	4602      	mov	r2, r0
 8011872:	e000      	b.n	8011876 <find_volume+0x16a>
 8011874:	2200      	movs	r2, #0
 8011876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011878:	009b      	lsls	r3, r3, #2
 801187a:	f107 0158 	add.w	r1, r7, #88	; 0x58
 801187e:	440b      	add	r3, r1
 8011880:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011884:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011886:	3301      	adds	r3, #1
 8011888:	643b      	str	r3, [r7, #64]	; 0x40
 801188a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801188c:	2b03      	cmp	r3, #3
 801188e:	d9dc      	bls.n	801184a <find_volume+0x13e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011890:	2300      	movs	r3, #0
 8011892:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011894:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011896:	2b00      	cmp	r3, #0
 8011898:	d002      	beq.n	80118a0 <find_volume+0x194>
 801189a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801189c:	3b01      	subs	r3, #1
 801189e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80118a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118a2:	009b      	lsls	r3, r3, #2
 80118a4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80118a8:	4413      	add	r3, r2
 80118aa:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80118ae:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80118b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d005      	beq.n	80118c2 <find_volume+0x1b6>
 80118b6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80118b8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80118ba:	f7ff fed1 	bl	8011660 <check_fs>
 80118be:	4603      	mov	r3, r0
 80118c0:	e000      	b.n	80118c4 <find_volume+0x1b8>
 80118c2:	2303      	movs	r3, #3
 80118c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80118c8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80118cc:	2b01      	cmp	r3, #1
 80118ce:	d905      	bls.n	80118dc <find_volume+0x1d0>
 80118d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118d2:	3301      	adds	r3, #1
 80118d4:	643b      	str	r3, [r7, #64]	; 0x40
 80118d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80118d8:	2b03      	cmp	r3, #3
 80118da:	d9e1      	bls.n	80118a0 <find_volume+0x194>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80118dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80118e0:	2b04      	cmp	r3, #4
 80118e2:	d101      	bne.n	80118e8 <find_volume+0x1dc>
 80118e4:	2301      	movs	r3, #1
 80118e6:	e191      	b.n	8011c0c <find_volume+0x500>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80118e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80118ec:	2b01      	cmp	r3, #1
 80118ee:	d901      	bls.n	80118f4 <find_volume+0x1e8>
 80118f0:	230d      	movs	r3, #13
 80118f2:	e18b      	b.n	8011c0c <find_volume+0x500>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80118f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118f6:	333c      	adds	r3, #60	; 0x3c
 80118f8:	330b      	adds	r3, #11
 80118fa:	4618      	mov	r0, r3
 80118fc:	f7fd ff74 	bl	800f7e8 <ld_word>
 8011900:	4603      	mov	r3, r0
 8011902:	461a      	mov	r2, r3
 8011904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011906:	899b      	ldrh	r3, [r3, #12]
 8011908:	429a      	cmp	r2, r3
 801190a:	d001      	beq.n	8011910 <find_volume+0x204>
 801190c:	230d      	movs	r3, #13
 801190e:	e17d      	b.n	8011c0c <find_volume+0x500>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011912:	333c      	adds	r3, #60	; 0x3c
 8011914:	3316      	adds	r3, #22
 8011916:	4618      	mov	r0, r3
 8011918:	f7fd ff66 	bl	800f7e8 <ld_word>
 801191c:	4603      	mov	r3, r0
 801191e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011922:	2b00      	cmp	r3, #0
 8011924:	d106      	bne.n	8011934 <find_volume+0x228>
 8011926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011928:	333c      	adds	r3, #60	; 0x3c
 801192a:	3324      	adds	r3, #36	; 0x24
 801192c:	4618      	mov	r0, r3
 801192e:	f7fd ff73 	bl	800f818 <ld_dword>
 8011932:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011936:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011938:	625a      	str	r2, [r3, #36]	; 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801193a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801193c:	f893 204c 	ldrb.w	r2, [r3, #76]	; 0x4c
 8011940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011942:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011946:	789b      	ldrb	r3, [r3, #2]
 8011948:	2b01      	cmp	r3, #1
 801194a:	d005      	beq.n	8011958 <find_volume+0x24c>
 801194c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801194e:	789b      	ldrb	r3, [r3, #2]
 8011950:	2b02      	cmp	r3, #2
 8011952:	d001      	beq.n	8011958 <find_volume+0x24c>
 8011954:	230d      	movs	r3, #13
 8011956:	e159      	b.n	8011c0c <find_volume+0x500>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801195a:	789b      	ldrb	r3, [r3, #2]
 801195c:	461a      	mov	r2, r3
 801195e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011960:	fb02 f303 	mul.w	r3, r2, r3
 8011964:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011968:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 801196c:	b29a      	uxth	r2, r3
 801196e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011970:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011974:	895b      	ldrh	r3, [r3, #10]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d008      	beq.n	801198c <find_volume+0x280>
 801197a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801197c:	895b      	ldrh	r3, [r3, #10]
 801197e:	461a      	mov	r2, r3
 8011980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011982:	895b      	ldrh	r3, [r3, #10]
 8011984:	3b01      	subs	r3, #1
 8011986:	4013      	ands	r3, r2
 8011988:	2b00      	cmp	r3, #0
 801198a:	d001      	beq.n	8011990 <find_volume+0x284>
 801198c:	230d      	movs	r3, #13
 801198e:	e13d      	b.n	8011c0c <find_volume+0x500>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011992:	333c      	adds	r3, #60	; 0x3c
 8011994:	3311      	adds	r3, #17
 8011996:	4618      	mov	r0, r3
 8011998:	f7fd ff26 	bl	800f7e8 <ld_word>
 801199c:	4603      	mov	r3, r0
 801199e:	461a      	mov	r2, r3
 80119a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119a2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80119a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119a6:	891b      	ldrh	r3, [r3, #8]
 80119a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80119aa:	8992      	ldrh	r2, [r2, #12]
 80119ac:	0952      	lsrs	r2, r2, #5
 80119ae:	b292      	uxth	r2, r2
 80119b0:	fbb3 f1f2 	udiv	r1, r3, r2
 80119b4:	fb02 f201 	mul.w	r2, r2, r1
 80119b8:	1a9b      	subs	r3, r3, r2
 80119ba:	b29b      	uxth	r3, r3
 80119bc:	2b00      	cmp	r3, #0
 80119be:	d003      	beq.n	80119c8 <find_volume+0x2bc>
 80119c0:	230d      	movs	r3, #13
 80119c2:	e123      	b.n	8011c0c <find_volume+0x500>
 80119c4:	200027b8 	.word	0x200027b8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80119c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ca:	333c      	adds	r3, #60	; 0x3c
 80119cc:	3313      	adds	r3, #19
 80119ce:	4618      	mov	r0, r3
 80119d0:	f7fd ff0a 	bl	800f7e8 <ld_word>
 80119d4:	4603      	mov	r3, r0
 80119d6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80119d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d106      	bne.n	80119ec <find_volume+0x2e0>
 80119de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119e0:	333c      	adds	r3, #60	; 0x3c
 80119e2:	3320      	adds	r3, #32
 80119e4:	4618      	mov	r0, r3
 80119e6:	f7fd ff17 	bl	800f818 <ld_dword>
 80119ea:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80119ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80119ee:	333c      	adds	r3, #60	; 0x3c
 80119f0:	330e      	adds	r3, #14
 80119f2:	4618      	mov	r0, r3
 80119f4:	f7fd fef8 	bl	800f7e8 <ld_word>
 80119f8:	4603      	mov	r3, r0
 80119fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80119fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d101      	bne.n	8011a06 <find_volume+0x2fa>
 8011a02:	230d      	movs	r3, #13
 8011a04:	e102      	b.n	8011c0c <find_volume+0x500>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011a06:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011a08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a0a:	4413      	add	r3, r2
 8011a0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a0e:	8911      	ldrh	r1, [r2, #8]
 8011a10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a12:	8992      	ldrh	r2, [r2, #12]
 8011a14:	0952      	lsrs	r2, r2, #5
 8011a16:	b292      	uxth	r2, r2
 8011a18:	fbb1 f2f2 	udiv	r2, r1, r2
 8011a1c:	b292      	uxth	r2, r2
 8011a1e:	4413      	add	r3, r2
 8011a20:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011a22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a26:	429a      	cmp	r2, r3
 8011a28:	d201      	bcs.n	8011a2e <find_volume+0x322>
 8011a2a:	230d      	movs	r3, #13
 8011a2c:	e0ee      	b.n	8011c0c <find_volume+0x500>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011a2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a32:	1ad3      	subs	r3, r2, r3
 8011a34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a36:	8952      	ldrh	r2, [r2, #10]
 8011a38:	fbb3 f3f2 	udiv	r3, r3, r2
 8011a3c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d101      	bne.n	8011a48 <find_volume+0x33c>
 8011a44:	230d      	movs	r3, #13
 8011a46:	e0e1      	b.n	8011c0c <find_volume+0x500>
		fmt = FS_FAT32;
 8011a48:	2303      	movs	r3, #3
 8011a4a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a50:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011a54:	4293      	cmp	r3, r2
 8011a56:	d802      	bhi.n	8011a5e <find_volume+0x352>
 8011a58:	2302      	movs	r3, #2
 8011a5a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a60:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011a64:	4293      	cmp	r3, r2
 8011a66:	d802      	bhi.n	8011a6e <find_volume+0x362>
 8011a68:	2301      	movs	r3, #1
 8011a6a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a70:	1c9a      	adds	r2, r3, #2
 8011a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a74:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 8011a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a78:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011a7a:	629a      	str	r2, [r3, #40]	; 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011a7c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a80:	441a      	add	r2, r3
 8011a82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a84:	62da      	str	r2, [r3, #44]	; 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 8011a86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a8a:	441a      	add	r2, r3
 8011a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a8e:	635a      	str	r2, [r3, #52]	; 0x34
		if (fmt == FS_FAT32) {
 8011a90:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011a94:	2b03      	cmp	r3, #3
 8011a96:	d11e      	bne.n	8011ad6 <find_volume+0x3ca>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011a98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a9a:	333c      	adds	r3, #60	; 0x3c
 8011a9c:	332a      	adds	r3, #42	; 0x2a
 8011a9e:	4618      	mov	r0, r3
 8011aa0:	f7fd fea2 	bl	800f7e8 <ld_word>
 8011aa4:	4603      	mov	r3, r0
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d001      	beq.n	8011aae <find_volume+0x3a2>
 8011aaa:	230d      	movs	r3, #13
 8011aac:	e0ae      	b.n	8011c0c <find_volume+0x500>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ab0:	891b      	ldrh	r3, [r3, #8]
 8011ab2:	2b00      	cmp	r3, #0
 8011ab4:	d001      	beq.n	8011aba <find_volume+0x3ae>
 8011ab6:	230d      	movs	r3, #13
 8011ab8:	e0a8      	b.n	8011c0c <find_volume+0x500>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011abc:	333c      	adds	r3, #60	; 0x3c
 8011abe:	332c      	adds	r3, #44	; 0x2c
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f7fd fea9 	bl	800f818 <ld_dword>
 8011ac6:	4602      	mov	r2, r0
 8011ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aca:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ace:	6a1b      	ldr	r3, [r3, #32]
 8011ad0:	009b      	lsls	r3, r3, #2
 8011ad2:	647b      	str	r3, [r7, #68]	; 0x44
 8011ad4:	e01f      	b.n	8011b16 <find_volume+0x40a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ad8:	891b      	ldrh	r3, [r3, #8]
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d101      	bne.n	8011ae2 <find_volume+0x3d6>
 8011ade:	230d      	movs	r3, #13
 8011ae0:	e094      	b.n	8011c0c <find_volume+0x500>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ae4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ae8:	441a      	add	r2, r3
 8011aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aec:	631a      	str	r2, [r3, #48]	; 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011aee:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011af2:	2b02      	cmp	r3, #2
 8011af4:	d103      	bne.n	8011afe <find_volume+0x3f2>
 8011af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011af8:	6a1b      	ldr	r3, [r3, #32]
 8011afa:	005b      	lsls	r3, r3, #1
 8011afc:	e00a      	b.n	8011b14 <find_volume+0x408>
 8011afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b00:	6a1a      	ldr	r2, [r3, #32]
 8011b02:	4613      	mov	r3, r2
 8011b04:	005b      	lsls	r3, r3, #1
 8011b06:	4413      	add	r3, r2
 8011b08:	085a      	lsrs	r2, r3, #1
 8011b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b0c:	6a1b      	ldr	r3, [r3, #32]
 8011b0e:	f003 0301 	and.w	r3, r3, #1
 8011b12:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011b14:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b1c:	899b      	ldrh	r3, [r3, #12]
 8011b1e:	4619      	mov	r1, r3
 8011b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011b22:	440b      	add	r3, r1
 8011b24:	3b01      	subs	r3, #1
 8011b26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011b28:	8989      	ldrh	r1, [r1, #12]
 8011b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8011b2e:	429a      	cmp	r2, r3
 8011b30:	d201      	bcs.n	8011b36 <find_volume+0x42a>
 8011b32:	230d      	movs	r3, #13
 8011b34:	e06a      	b.n	8011c0c <find_volume+0x500>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011b3c:	61da      	str	r2, [r3, #28]
 8011b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b40:	69da      	ldr	r2, [r3, #28]
 8011b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b44:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8011b46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b48:	2280      	movs	r2, #128	; 0x80
 8011b4a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011b4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011b50:	2b03      	cmp	r3, #3
 8011b52:	d149      	bne.n	8011be8 <find_volume+0x4dc>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b56:	333c      	adds	r3, #60	; 0x3c
 8011b58:	3330      	adds	r3, #48	; 0x30
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f7fd fe44 	bl	800f7e8 <ld_word>
 8011b60:	4603      	mov	r3, r0
 8011b62:	2b01      	cmp	r3, #1
 8011b64:	d140      	bne.n	8011be8 <find_volume+0x4dc>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011b66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b68:	3301      	adds	r3, #1
 8011b6a:	4619      	mov	r1, r3
 8011b6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011b6e:	f7fe f91d 	bl	800fdac <move_window>
 8011b72:	4603      	mov	r3, r0
 8011b74:	2b00      	cmp	r3, #0
 8011b76:	d137      	bne.n	8011be8 <find_volume+0x4dc>
		{
			fs->fsi_flag = 0;
 8011b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b80:	333c      	adds	r3, #60	; 0x3c
 8011b82:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011b86:	4618      	mov	r0, r3
 8011b88:	f7fd fe2e 	bl	800f7e8 <ld_word>
 8011b8c:	4603      	mov	r3, r0
 8011b8e:	461a      	mov	r2, r3
 8011b90:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011b94:	429a      	cmp	r2, r3
 8011b96:	d127      	bne.n	8011be8 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b9a:	333c      	adds	r3, #60	; 0x3c
 8011b9c:	4618      	mov	r0, r3
 8011b9e:	f7fd fe3b 	bl	800f818 <ld_dword>
 8011ba2:	4603      	mov	r3, r0
 8011ba4:	4a1b      	ldr	r2, [pc, #108]	; (8011c14 <find_volume+0x508>)
 8011ba6:	4293      	cmp	r3, r2
 8011ba8:	d11e      	bne.n	8011be8 <find_volume+0x4dc>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bac:	333c      	adds	r3, #60	; 0x3c
 8011bae:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	f7fd fe30 	bl	800f818 <ld_dword>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	4a17      	ldr	r2, [pc, #92]	; (8011c18 <find_volume+0x50c>)
 8011bbc:	4293      	cmp	r3, r2
 8011bbe:	d113      	bne.n	8011be8 <find_volume+0x4dc>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bc2:	333c      	adds	r3, #60	; 0x3c
 8011bc4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011bc8:	4618      	mov	r0, r3
 8011bca:	f7fd fe25 	bl	800f818 <ld_dword>
 8011bce:	4602      	mov	r2, r0
 8011bd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bd2:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8011bd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bd6:	333c      	adds	r3, #60	; 0x3c
 8011bd8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011bdc:	4618      	mov	r0, r3
 8011bde:	f7fd fe1b 	bl	800f818 <ld_dword>
 8011be2:	4602      	mov	r2, r0
 8011be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011be6:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8011be8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bea:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8011bee:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8011bf0:	4b0a      	ldr	r3, [pc, #40]	; (8011c1c <find_volume+0x510>)
 8011bf2:	881b      	ldrh	r3, [r3, #0]
 8011bf4:	3301      	adds	r3, #1
 8011bf6:	b29a      	uxth	r2, r3
 8011bf8:	4b08      	ldr	r3, [pc, #32]	; (8011c1c <find_volume+0x510>)
 8011bfa:	801a      	strh	r2, [r3, #0]
 8011bfc:	4b07      	ldr	r3, [pc, #28]	; (8011c1c <find_volume+0x510>)
 8011bfe:	881a      	ldrh	r2, [r3, #0]
 8011c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c02:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8011c04:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011c06:	f7fe f869 	bl	800fcdc <clear_lock>
#endif
	return FR_OK;
 8011c0a:	2300      	movs	r3, #0
}
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	3758      	adds	r7, #88	; 0x58
 8011c10:	46bd      	mov	sp, r7
 8011c12:	bd80      	pop	{r7, pc}
 8011c14:	41615252 	.word	0x41615252
 8011c18:	61417272 	.word	0x61417272
 8011c1c:	200027bc 	.word	0x200027bc

08011c20 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8011c20:	b580      	push	{r7, lr}
 8011c22:	b084      	sub	sp, #16
 8011c24:	af00      	add	r7, sp, #0
 8011c26:	6078      	str	r0, [r7, #4]
 8011c28:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8011c2a:	2309      	movs	r3, #9
 8011c2c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	2b00      	cmp	r3, #0
 8011c32:	d02e      	beq.n	8011c92 <validate+0x72>
 8011c34:	687b      	ldr	r3, [r7, #4]
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	2b00      	cmp	r3, #0
 8011c3a:	d02a      	beq.n	8011c92 <validate+0x72>
 8011c3c:	687b      	ldr	r3, [r7, #4]
 8011c3e:	681b      	ldr	r3, [r3, #0]
 8011c40:	781b      	ldrb	r3, [r3, #0]
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d025      	beq.n	8011c92 <validate+0x72>
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	889a      	ldrh	r2, [r3, #4]
 8011c4a:	687b      	ldr	r3, [r7, #4]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	88db      	ldrh	r3, [r3, #6]
 8011c50:	429a      	cmp	r2, r3
 8011c52:	d11e      	bne.n	8011c92 <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	681b      	ldr	r3, [r3, #0]
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f7fd fec5 	bl	800f9e8 <lock_fs>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	2b00      	cmp	r3, #0
 8011c62:	d014      	beq.n	8011c8e <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	785b      	ldrb	r3, [r3, #1]
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f7fd fd1e 	bl	800f6ac <disk_status>
 8011c70:	4603      	mov	r3, r0
 8011c72:	f003 0301 	and.w	r3, r3, #1
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d102      	bne.n	8011c80 <validate+0x60>
				res = FR_OK;
 8011c7a:	2300      	movs	r3, #0
 8011c7c:	73fb      	strb	r3, [r7, #15]
 8011c7e:	e008      	b.n	8011c92 <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	2100      	movs	r1, #0
 8011c86:	4618      	mov	r0, r3
 8011c88:	f7fd fec4 	bl	800fa14 <unlock_fs>
 8011c8c:	e001      	b.n	8011c92 <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 8011c8e:	230f      	movs	r3, #15
 8011c90:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8011c92:	7bfb      	ldrb	r3, [r7, #15]
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d102      	bne.n	8011c9e <validate+0x7e>
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	681b      	ldr	r3, [r3, #0]
 8011c9c:	e000      	b.n	8011ca0 <validate+0x80>
 8011c9e:	2300      	movs	r3, #0
 8011ca0:	683a      	ldr	r2, [r7, #0]
 8011ca2:	6013      	str	r3, [r2, #0]
	return res;
 8011ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011ca6:	4618      	mov	r0, r3
 8011ca8:	3710      	adds	r7, #16
 8011caa:	46bd      	mov	sp, r7
 8011cac:	bd80      	pop	{r7, pc}
	...

08011cb0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8011cb0:	b580      	push	{r7, lr}
 8011cb2:	b088      	sub	sp, #32
 8011cb4:	af00      	add	r7, sp, #0
 8011cb6:	60f8      	str	r0, [r7, #12]
 8011cb8:	60b9      	str	r1, [r7, #8]
 8011cba:	4613      	mov	r3, r2
 8011cbc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8011cbe:	68bb      	ldr	r3, [r7, #8]
 8011cc0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8011cc2:	f107 0310 	add.w	r3, r7, #16
 8011cc6:	4618      	mov	r0, r3
 8011cc8:	f7ff fc86 	bl	80115d8 <get_ldnumber>
 8011ccc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011cce:	69fb      	ldr	r3, [r7, #28]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	da01      	bge.n	8011cd8 <f_mount+0x28>
 8011cd4:	230b      	movs	r3, #11
 8011cd6:	e048      	b.n	8011d6a <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8011cd8:	4a26      	ldr	r2, [pc, #152]	; (8011d74 <f_mount+0xc4>)
 8011cda:	69fb      	ldr	r3, [r7, #28]
 8011cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011ce0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011ce2:	69bb      	ldr	r3, [r7, #24]
 8011ce4:	2b00      	cmp	r3, #0
 8011ce6:	d00f      	beq.n	8011d08 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8011ce8:	69b8      	ldr	r0, [r7, #24]
 8011cea:	f7fd fff7 	bl	800fcdc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 8011cee:	69bb      	ldr	r3, [r7, #24]
 8011cf0:	695b      	ldr	r3, [r3, #20]
 8011cf2:	4618      	mov	r0, r3
 8011cf4:	f001 f805 	bl	8012d02 <ff_del_syncobj>
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d101      	bne.n	8011d02 <f_mount+0x52>
 8011cfe:	2302      	movs	r3, #2
 8011d00:	e033      	b.n	8011d6a <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011d02:	69bb      	ldr	r3, [r7, #24]
 8011d04:	2200      	movs	r2, #0
 8011d06:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011d08:	68fb      	ldr	r3, [r7, #12]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d00f      	beq.n	8011d2e <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 8011d0e:	68fb      	ldr	r3, [r7, #12]
 8011d10:	2200      	movs	r2, #0
 8011d12:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 8011d14:	69fb      	ldr	r3, [r7, #28]
 8011d16:	b2da      	uxtb	r2, r3
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	3314      	adds	r3, #20
 8011d1c:	4619      	mov	r1, r3
 8011d1e:	4610      	mov	r0, r2
 8011d20:	f000 ffd4 	bl	8012ccc <ff_cre_syncobj>
 8011d24:	4603      	mov	r3, r0
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d101      	bne.n	8011d2e <f_mount+0x7e>
 8011d2a:	2302      	movs	r3, #2
 8011d2c:	e01d      	b.n	8011d6a <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011d2e:	68fa      	ldr	r2, [r7, #12]
 8011d30:	4910      	ldr	r1, [pc, #64]	; (8011d74 <f_mount+0xc4>)
 8011d32:	69fb      	ldr	r3, [r7, #28]
 8011d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8011d38:	68fb      	ldr	r3, [r7, #12]
 8011d3a:	2b00      	cmp	r3, #0
 8011d3c:	d002      	beq.n	8011d44 <f_mount+0x94>
 8011d3e:	79fb      	ldrb	r3, [r7, #7]
 8011d40:	2b01      	cmp	r3, #1
 8011d42:	d001      	beq.n	8011d48 <f_mount+0x98>
 8011d44:	2300      	movs	r3, #0
 8011d46:	e010      	b.n	8011d6a <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8011d48:	f107 010c 	add.w	r1, r7, #12
 8011d4c:	f107 0308 	add.w	r3, r7, #8
 8011d50:	2200      	movs	r2, #0
 8011d52:	4618      	mov	r0, r3
 8011d54:	f7ff fcda 	bl	801170c <find_volume>
 8011d58:	4603      	mov	r3, r0
 8011d5a:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	7dfa      	ldrb	r2, [r7, #23]
 8011d60:	4611      	mov	r1, r2
 8011d62:	4618      	mov	r0, r3
 8011d64:	f7fd fe56 	bl	800fa14 <unlock_fs>
 8011d68:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d6a:	4618      	mov	r0, r3
 8011d6c:	3720      	adds	r7, #32
 8011d6e:	46bd      	mov	sp, r7
 8011d70:	bd80      	pop	{r7, pc}
 8011d72:	bf00      	nop
 8011d74:	200027b8 	.word	0x200027b8

08011d78 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	f5ad 7d1a 	sub.w	sp, sp, #616	; 0x268
 8011d7e:	af00      	add	r7, sp, #0
 8011d80:	f107 030c 	add.w	r3, r7, #12
 8011d84:	6018      	str	r0, [r3, #0]
 8011d86:	f107 0308 	add.w	r3, r7, #8
 8011d8a:	6019      	str	r1, [r3, #0]
 8011d8c:	1dfb      	adds	r3, r7, #7
 8011d8e:	701a      	strb	r2, [r3, #0]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8011d90:	f107 030c 	add.w	r3, r7, #12
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	2b00      	cmp	r3, #0
 8011d98:	d101      	bne.n	8011d9e <f_open+0x26>
 8011d9a:	2309      	movs	r3, #9
 8011d9c:	e24a      	b.n	8012234 <f_open+0x4bc>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8011d9e:	1dfb      	adds	r3, r7, #7
 8011da0:	1dfa      	adds	r2, r7, #7
 8011da2:	7812      	ldrb	r2, [r2, #0]
 8011da4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8011da8:	701a      	strb	r2, [r3, #0]
	res = find_volume(&path, &fs, mode);
 8011daa:	1dfb      	adds	r3, r7, #7
 8011dac:	781a      	ldrb	r2, [r3, #0]
 8011dae:	f507 7105 	add.w	r1, r7, #532	; 0x214
 8011db2:	f107 0308 	add.w	r3, r7, #8
 8011db6:	4618      	mov	r0, r3
 8011db8:	f7ff fca8 	bl	801170c <find_volume>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
	if (res == FR_OK) {
 8011dc2:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	f040 8221 	bne.w	801220e <f_open+0x496>
		dj.obj.fs = fs;
 8011dcc:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8011dd0:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
		INIT_NAMBUF(fs);
 8011dd4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8011dd8:	f107 0214 	add.w	r2, r7, #20
 8011ddc:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 8011dde:	f107 0308 	add.w	r3, r7, #8
 8011de2:	681a      	ldr	r2, [r3, #0]
 8011de4:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8011de8:	4611      	mov	r1, r2
 8011dea:	4618      	mov	r0, r3
 8011dec:	f7ff fb7e 	bl	80114ec <follow_path>
 8011df0:	4603      	mov	r3, r0
 8011df2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8011df6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d11b      	bne.n	8011e36 <f_open+0xbe>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8011dfe:	f897 3247 	ldrb.w	r3, [r7, #583]	; 0x247
 8011e02:	b25b      	sxtb	r3, r3
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	da03      	bge.n	8011e10 <f_open+0x98>
				res = FR_INVALID_NAME;
 8011e08:	2306      	movs	r3, #6
 8011e0a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8011e0e:	e012      	b.n	8011e36 <f_open+0xbe>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011e10:	1dfb      	adds	r3, r7, #7
 8011e12:	781b      	ldrb	r3, [r3, #0]
 8011e14:	f023 0301 	bic.w	r3, r3, #1
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	bf14      	ite	ne
 8011e1c:	2301      	movne	r3, #1
 8011e1e:	2300      	moveq	r3, #0
 8011e20:	b2db      	uxtb	r3, r3
 8011e22:	461a      	mov	r2, r3
 8011e24:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8011e28:	4611      	mov	r1, r2
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	f7fd fe0e 	bl	800fa4c <chk_lock>
 8011e30:	4603      	mov	r3, r0
 8011e32:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8011e36:	1dfb      	adds	r3, r7, #7
 8011e38:	781b      	ldrb	r3, [r3, #0]
 8011e3a:	f003 031c 	and.w	r3, r3, #28
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	f000 809b 	beq.w	8011f7a <f_open+0x202>
			if (res != FR_OK) {					/* No file, create new */
 8011e44:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d019      	beq.n	8011e80 <f_open+0x108>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8011e4c:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8011e50:	2b04      	cmp	r3, #4
 8011e52:	d10e      	bne.n	8011e72 <f_open+0xfa>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8011e54:	f7fd fe56 	bl	800fb04 <enq_lock>
 8011e58:	4603      	mov	r3, r0
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d006      	beq.n	8011e6c <f_open+0xf4>
 8011e5e:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8011e62:	4618      	mov	r0, r3
 8011e64:	f7fe ffb4 	bl	8010dd0 <dir_register>
 8011e68:	4603      	mov	r3, r0
 8011e6a:	e000      	b.n	8011e6e <f_open+0xf6>
 8011e6c:	2312      	movs	r3, #18
 8011e6e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8011e72:	1dfb      	adds	r3, r7, #7
 8011e74:	1dfa      	adds	r2, r7, #7
 8011e76:	7812      	ldrb	r2, [r2, #0]
 8011e78:	f042 0208 	orr.w	r2, r2, #8
 8011e7c:	701a      	strb	r2, [r3, #0]
 8011e7e:	e012      	b.n	8011ea6 <f_open+0x12e>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8011e80:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8011e84:	f003 0311 	and.w	r3, r3, #17
 8011e88:	2b00      	cmp	r3, #0
 8011e8a:	d003      	beq.n	8011e94 <f_open+0x11c>
					res = FR_DENIED;
 8011e8c:	2307      	movs	r3, #7
 8011e8e:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8011e92:	e008      	b.n	8011ea6 <f_open+0x12e>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8011e94:	1dfb      	adds	r3, r7, #7
 8011e96:	781b      	ldrb	r3, [r3, #0]
 8011e98:	f003 0304 	and.w	r3, r3, #4
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d002      	beq.n	8011ea6 <f_open+0x12e>
 8011ea0:	2308      	movs	r3, #8
 8011ea2:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8011ea6:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	f040 8082 	bne.w	8011fb4 <f_open+0x23c>
 8011eb0:	1dfb      	adds	r3, r7, #7
 8011eb2:	781b      	ldrb	r3, [r3, #0]
 8011eb4:	f003 0308 	and.w	r3, r3, #8
 8011eb8:	2b00      	cmp	r3, #0
 8011eba:	d07b      	beq.n	8011fb4 <f_open+0x23c>
				dw = GET_FATTIME();
 8011ebc:	f7fb ff04 	bl	800dcc8 <get_fattime>
 8011ec0:	f8c7 0258 	str.w	r0, [r7, #600]	; 0x258
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8011ec4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8011ec8:	330e      	adds	r3, #14
 8011eca:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8011ece:	4618      	mov	r0, r3
 8011ed0:	f7fd fce0 	bl	800f894 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8011ed4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8011ed8:	3316      	adds	r3, #22
 8011eda:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8011ede:	4618      	mov	r0, r3
 8011ee0:	f7fd fcd8 	bl	800f894 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8011ee4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8011ee8:	330b      	adds	r3, #11
 8011eea:	2220      	movs	r2, #32
 8011eec:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8011eee:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8011ef2:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8011ef6:	4611      	mov	r1, r2
 8011ef8:	4618      	mov	r0, r3
 8011efa:	f7fe fcdf 	bl	80108bc <ld_clust>
 8011efe:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8011f02:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8011f06:	f8d7 1238 	ldr.w	r1, [r7, #568]	; 0x238
 8011f0a:	2200      	movs	r2, #0
 8011f0c:	4618      	mov	r0, r3
 8011f0e:	f7fe fcf4 	bl	80108fa <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8011f12:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8011f16:	331c      	adds	r3, #28
 8011f18:	2100      	movs	r1, #0
 8011f1a:	4618      	mov	r0, r3
 8011f1c:	f7fd fcba 	bl	800f894 <st_dword>
					fs->wflag = 1;
 8011f20:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8011f24:	2201      	movs	r2, #1
 8011f26:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8011f28:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d041      	beq.n	8011fb4 <f_open+0x23c>
						dw = fs->winsect;
 8011f30:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8011f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f36:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
						res = remove_chain(&dj.obj, cl, 0);
 8011f3a:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8011f3e:	2200      	movs	r2, #0
 8011f40:	f8d7 1254 	ldr.w	r1, [r7, #596]	; 0x254
 8011f44:	4618      	mov	r0, r3
 8011f46:	f7fe f9de 	bl	8010306 <remove_chain>
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
						if (res == FR_OK) {
 8011f50:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8011f54:	2b00      	cmp	r3, #0
 8011f56:	d12d      	bne.n	8011fb4 <f_open+0x23c>
							res = move_window(fs, dw);
 8011f58:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8011f5c:	f8d7 1258 	ldr.w	r1, [r7, #600]	; 0x258
 8011f60:	4618      	mov	r0, r3
 8011f62:	f7fd ff23 	bl	800fdac <move_window>
 8011f66:	4603      	mov	r3, r0
 8011f68:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8011f6c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8011f70:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8011f74:	3a01      	subs	r2, #1
 8011f76:	619a      	str	r2, [r3, #24]
 8011f78:	e01c      	b.n	8011fb4 <f_open+0x23c>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8011f7a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d118      	bne.n	8011fb4 <f_open+0x23c>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8011f82:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8011f86:	f003 0310 	and.w	r3, r3, #16
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d003      	beq.n	8011f96 <f_open+0x21e>
					res = FR_NO_FILE;
 8011f8e:	2304      	movs	r3, #4
 8011f90:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 8011f94:	e00e      	b.n	8011fb4 <f_open+0x23c>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8011f96:	1dfb      	adds	r3, r7, #7
 8011f98:	781b      	ldrb	r3, [r3, #0]
 8011f9a:	f003 0302 	and.w	r3, r3, #2
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d008      	beq.n	8011fb4 <f_open+0x23c>
 8011fa2:	f897 321e 	ldrb.w	r3, [r7, #542]	; 0x21e
 8011fa6:	f003 0301 	and.w	r3, r3, #1
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d002      	beq.n	8011fb4 <f_open+0x23c>
						res = FR_DENIED;
 8011fae:	2307      	movs	r3, #7
 8011fb0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					}
				}
			}
		}
		if (res == FR_OK) {
 8011fb4:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	d136      	bne.n	801202a <f_open+0x2b2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8011fbc:	1dfb      	adds	r3, r7, #7
 8011fbe:	781b      	ldrb	r3, [r3, #0]
 8011fc0:	f003 0308 	and.w	r3, r3, #8
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d005      	beq.n	8011fd4 <f_open+0x25c>
				mode |= FA_MODIFIED;
 8011fc8:	1dfb      	adds	r3, r7, #7
 8011fca:	1dfa      	adds	r2, r7, #7
 8011fcc:	7812      	ldrb	r2, [r2, #0]
 8011fce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011fd2:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8011fd4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8011fd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011fda:	f107 030c 	add.w	r3, r7, #12
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8011fe2:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8011fe6:	f107 030c 	add.w	r3, r7, #12
 8011fea:	681b      	ldr	r3, [r3, #0]
 8011fec:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8011fee:	1dfb      	adds	r3, r7, #7
 8011ff0:	781b      	ldrb	r3, [r3, #0]
 8011ff2:	f023 0301 	bic.w	r3, r3, #1
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	bf14      	ite	ne
 8011ffa:	2301      	movne	r3, #1
 8011ffc:	2300      	moveq	r3, #0
 8011ffe:	b2db      	uxtb	r3, r3
 8012000:	461a      	mov	r2, r3
 8012002:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8012006:	4611      	mov	r1, r2
 8012008:	4618      	mov	r0, r3
 801200a:	f7fd fd9d 	bl	800fb48 <inc_lock>
 801200e:	4602      	mov	r2, r0
 8012010:	f107 030c 	add.w	r3, r7, #12
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8012018:	f107 030c 	add.w	r3, r7, #12
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	691b      	ldr	r3, [r3, #16]
 8012020:	2b00      	cmp	r3, #0
 8012022:	d102      	bne.n	801202a <f_open+0x2b2>
 8012024:	2302      	movs	r3, #2
 8012026:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				}
			}
		}
#endif

		if (res == FR_OK) {
 801202a:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 801202e:	2b00      	cmp	r3, #0
 8012030:	f040 80ed 	bne.w	801220e <f_open+0x496>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8012034:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012038:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801203c:	4611      	mov	r1, r2
 801203e:	4618      	mov	r0, r3
 8012040:	f7fe fc3c 	bl	80108bc <ld_clust>
 8012044:	4602      	mov	r2, r0
 8012046:	f107 030c 	add.w	r3, r7, #12
 801204a:	681b      	ldr	r3, [r3, #0]
 801204c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801204e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8012052:	331c      	adds	r3, #28
 8012054:	4618      	mov	r0, r3
 8012056:	f7fd fbdf 	bl	800f818 <ld_dword>
 801205a:	4602      	mov	r2, r0
 801205c:	f107 030c 	add.w	r3, r7, #12
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8012064:	f107 030c 	add.w	r3, r7, #12
 8012068:	681b      	ldr	r3, [r3, #0]
 801206a:	2200      	movs	r2, #0
 801206c:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 801206e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8012072:	f107 030c 	add.w	r3, r7, #12
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801207a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801207e:	88da      	ldrh	r2, [r3, #6]
 8012080:	f107 030c 	add.w	r3, r7, #12
 8012084:	681b      	ldr	r3, [r3, #0]
 8012086:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8012088:	f107 030c 	add.w	r3, r7, #12
 801208c:	681b      	ldr	r3, [r3, #0]
 801208e:	1dfa      	adds	r2, r7, #7
 8012090:	7812      	ldrb	r2, [r2, #0]
 8012092:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012094:	f107 030c 	add.w	r3, r7, #12
 8012098:	681b      	ldr	r3, [r3, #0]
 801209a:	2200      	movs	r2, #0
 801209c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801209e:	f107 030c 	add.w	r3, r7, #12
 80120a2:	681b      	ldr	r3, [r3, #0]
 80120a4:	2200      	movs	r2, #0
 80120a6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80120a8:	f107 030c 	add.w	r3, r7, #12
 80120ac:	681b      	ldr	r3, [r3, #0]
 80120ae:	2200      	movs	r2, #0
 80120b0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80120b2:	f107 030c 	add.w	r3, r7, #12
 80120b6:	681b      	ldr	r3, [r3, #0]
 80120b8:	3330      	adds	r3, #48	; 0x30
 80120ba:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80120be:	2100      	movs	r1, #0
 80120c0:	4618      	mov	r0, r3
 80120c2:	f7fd fc34 	bl	800f92e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80120c6:	1dfb      	adds	r3, r7, #7
 80120c8:	781b      	ldrb	r3, [r3, #0]
 80120ca:	f003 0320 	and.w	r3, r3, #32
 80120ce:	2b00      	cmp	r3, #0
 80120d0:	f000 809d 	beq.w	801220e <f_open+0x496>
 80120d4:	f107 030c 	add.w	r3, r7, #12
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	68db      	ldr	r3, [r3, #12]
 80120dc:	2b00      	cmp	r3, #0
 80120de:	f000 8096 	beq.w	801220e <f_open+0x496>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80120e2:	f107 030c 	add.w	r3, r7, #12
 80120e6:	681b      	ldr	r3, [r3, #0]
 80120e8:	68da      	ldr	r2, [r3, #12]
 80120ea:	f107 030c 	add.w	r3, r7, #12
 80120ee:	681b      	ldr	r3, [r3, #0]
 80120f0:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80120f2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80120f6:	895b      	ldrh	r3, [r3, #10]
 80120f8:	461a      	mov	r2, r3
 80120fa:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80120fe:	899b      	ldrh	r3, [r3, #12]
 8012100:	fb03 f302 	mul.w	r3, r3, r2
 8012104:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012108:	f107 030c 	add.w	r3, r7, #12
 801210c:	681b      	ldr	r3, [r3, #0]
 801210e:	689b      	ldr	r3, [r3, #8]
 8012110:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012114:	f107 030c 	add.w	r3, r7, #12
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	68db      	ldr	r3, [r3, #12]
 801211c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8012120:	e01f      	b.n	8012162 <f_open+0x3ea>
					clst = get_fat(&fp->obj, clst);
 8012122:	f107 030c 	add.w	r3, r7, #12
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 801212c:	4618      	mov	r0, r3
 801212e:	f7fd fefa 	bl	800ff26 <get_fat>
 8012132:	f8c7 0260 	str.w	r0, [r7, #608]	; 0x260
					if (clst <= 1) res = FR_INT_ERR;
 8012136:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801213a:	2b01      	cmp	r3, #1
 801213c:	d802      	bhi.n	8012144 <f_open+0x3cc>
 801213e:	2302      	movs	r3, #2
 8012140:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012144:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8012148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801214c:	d102      	bne.n	8012154 <f_open+0x3dc>
 801214e:	2301      	movs	r3, #1
 8012150:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012154:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8012158:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801215c:	1ad3      	subs	r3, r2, r3
 801215e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 8012162:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012166:	2b00      	cmp	r3, #0
 8012168:	d105      	bne.n	8012176 <f_open+0x3fe>
 801216a:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801216e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8012172:	429a      	cmp	r2, r3
 8012174:	d8d5      	bhi.n	8012122 <f_open+0x3aa>
				}
				fp->clust = clst;
 8012176:	f107 030c 	add.w	r3, r7, #12
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8012180:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8012182:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012186:	2b00      	cmp	r3, #0
 8012188:	d141      	bne.n	801220e <f_open+0x496>
 801218a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801218e:	899b      	ldrh	r3, [r3, #12]
 8012190:	461a      	mov	r2, r3
 8012192:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8012196:	fbb3 f1f2 	udiv	r1, r3, r2
 801219a:	fb02 f201 	mul.w	r2, r2, r1
 801219e:	1a9b      	subs	r3, r3, r2
 80121a0:	2b00      	cmp	r3, #0
 80121a2:	d034      	beq.n	801220e <f_open+0x496>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80121a4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80121a8:	f8d7 1260 	ldr.w	r1, [r7, #608]	; 0x260
 80121ac:	4618      	mov	r0, r3
 80121ae:	f7fd fe9b 	bl	800fee8 <clust2sect>
 80121b2:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
 80121b6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80121ba:	2b00      	cmp	r3, #0
 80121bc:	d103      	bne.n	80121c6 <f_open+0x44e>
						res = FR_INT_ERR;
 80121be:	2302      	movs	r3, #2
 80121c0:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
 80121c4:	e023      	b.n	801220e <f_open+0x496>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80121c6:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80121ca:	899b      	ldrh	r3, [r3, #12]
 80121cc:	461a      	mov	r2, r3
 80121ce:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80121d2:	fbb3 f2f2 	udiv	r2, r3, r2
 80121d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80121da:	441a      	add	r2, r3
 80121dc:	f107 030c 	add.w	r3, r7, #12
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80121e4:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80121e8:	7858      	ldrb	r0, [r3, #1]
 80121ea:	f107 030c 	add.w	r3, r7, #12
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80121f4:	f107 030c 	add.w	r3, r7, #12
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	6a1a      	ldr	r2, [r3, #32]
 80121fc:	2301      	movs	r3, #1
 80121fe:	f7fd fa95 	bl	800f72c <disk_read>
 8012202:	4603      	mov	r3, r0
 8012204:	2b00      	cmp	r3, #0
 8012206:	d002      	beq.n	801220e <f_open+0x496>
 8012208:	2301      	movs	r3, #1
 801220a:	f887 3267 	strb.w	r3, [r7, #615]	; 0x267
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801220e:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
 8012212:	2b00      	cmp	r3, #0
 8012214:	d004      	beq.n	8012220 <f_open+0x4a8>
 8012216:	f107 030c 	add.w	r3, r7, #12
 801221a:	681b      	ldr	r3, [r3, #0]
 801221c:	2200      	movs	r2, #0
 801221e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8012220:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8012224:	f897 2267 	ldrb.w	r2, [r7, #615]	; 0x267
 8012228:	4611      	mov	r1, r2
 801222a:	4618      	mov	r0, r3
 801222c:	f7fd fbf2 	bl	800fa14 <unlock_fs>
 8012230:	f897 3267 	ldrb.w	r3, [r7, #615]	; 0x267
}
 8012234:	4618      	mov	r0, r3
 8012236:	f507 771a 	add.w	r7, r7, #616	; 0x268
 801223a:	46bd      	mov	sp, r7
 801223c:	bd80      	pop	{r7, pc}

0801223e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801223e:	b580      	push	{r7, lr}
 8012240:	b08c      	sub	sp, #48	; 0x30
 8012242:	af00      	add	r7, sp, #0
 8012244:	60f8      	str	r0, [r7, #12]
 8012246:	60b9      	str	r1, [r7, #8]
 8012248:	607a      	str	r2, [r7, #4]
 801224a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801224c:	68bb      	ldr	r3, [r7, #8]
 801224e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8012250:	683b      	ldr	r3, [r7, #0]
 8012252:	2200      	movs	r2, #0
 8012254:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8012256:	68fb      	ldr	r3, [r7, #12]
 8012258:	f107 0210 	add.w	r2, r7, #16
 801225c:	4611      	mov	r1, r2
 801225e:	4618      	mov	r0, r3
 8012260:	f7ff fcde 	bl	8011c20 <validate>
 8012264:	4603      	mov	r3, r0
 8012266:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801226a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801226e:	2b00      	cmp	r3, #0
 8012270:	d107      	bne.n	8012282 <f_write+0x44>
 8012272:	68fb      	ldr	r3, [r7, #12]
 8012274:	7d5b      	ldrb	r3, [r3, #21]
 8012276:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801227a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801227e:	2b00      	cmp	r3, #0
 8012280:	d009      	beq.n	8012296 <f_write+0x58>
 8012282:	693b      	ldr	r3, [r7, #16]
 8012284:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8012288:	4611      	mov	r1, r2
 801228a:	4618      	mov	r0, r3
 801228c:	f7fd fbc2 	bl	800fa14 <unlock_fs>
 8012290:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012294:	e192      	b.n	80125bc <f_write+0x37e>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8012296:	68fb      	ldr	r3, [r7, #12]
 8012298:	7d1b      	ldrb	r3, [r3, #20]
 801229a:	f003 0302 	and.w	r3, r3, #2
 801229e:	2b00      	cmp	r3, #0
 80122a0:	d106      	bne.n	80122b0 <f_write+0x72>
 80122a2:	693b      	ldr	r3, [r7, #16]
 80122a4:	2107      	movs	r1, #7
 80122a6:	4618      	mov	r0, r3
 80122a8:	f7fd fbb4 	bl	800fa14 <unlock_fs>
 80122ac:	2307      	movs	r3, #7
 80122ae:	e185      	b.n	80125bc <f_write+0x37e>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	699a      	ldr	r2, [r3, #24]
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	441a      	add	r2, r3
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	699b      	ldr	r3, [r3, #24]
 80122bc:	429a      	cmp	r2, r3
 80122be:	f080 816a 	bcs.w	8012596 <f_write+0x358>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80122c2:	68fb      	ldr	r3, [r7, #12]
 80122c4:	699b      	ldr	r3, [r3, #24]
 80122c6:	43db      	mvns	r3, r3
 80122c8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80122ca:	e164      	b.n	8012596 <f_write+0x358>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80122cc:	68fb      	ldr	r3, [r7, #12]
 80122ce:	699b      	ldr	r3, [r3, #24]
 80122d0:	693a      	ldr	r2, [r7, #16]
 80122d2:	8992      	ldrh	r2, [r2, #12]
 80122d4:	fbb3 f1f2 	udiv	r1, r3, r2
 80122d8:	fb02 f201 	mul.w	r2, r2, r1
 80122dc:	1a9b      	subs	r3, r3, r2
 80122de:	2b00      	cmp	r3, #0
 80122e0:	f040 810f 	bne.w	8012502 <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	699b      	ldr	r3, [r3, #24]
 80122e8:	693a      	ldr	r2, [r7, #16]
 80122ea:	8992      	ldrh	r2, [r2, #12]
 80122ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80122f0:	693a      	ldr	r2, [r7, #16]
 80122f2:	8952      	ldrh	r2, [r2, #10]
 80122f4:	3a01      	subs	r2, #1
 80122f6:	4013      	ands	r3, r2
 80122f8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80122fa:	69bb      	ldr	r3, [r7, #24]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d14d      	bne.n	801239c <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	699b      	ldr	r3, [r3, #24]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d10c      	bne.n	8012322 <f_write+0xe4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012308:	68fb      	ldr	r3, [r7, #12]
 801230a:	689b      	ldr	r3, [r3, #8]
 801230c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801230e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012310:	2b00      	cmp	r3, #0
 8012312:	d11a      	bne.n	801234a <f_write+0x10c>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	2100      	movs	r1, #0
 8012318:	4618      	mov	r0, r3
 801231a:	f7fe f859 	bl	80103d0 <create_chain>
 801231e:	62b8      	str	r0, [r7, #40]	; 0x28
 8012320:	e013      	b.n	801234a <f_write+0x10c>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012322:	68fb      	ldr	r3, [r7, #12]
 8012324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012326:	2b00      	cmp	r3, #0
 8012328:	d007      	beq.n	801233a <f_write+0xfc>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	699b      	ldr	r3, [r3, #24]
 801232e:	4619      	mov	r1, r3
 8012330:	68f8      	ldr	r0, [r7, #12]
 8012332:	f7fe f8e5 	bl	8010500 <clmt_clust>
 8012336:	62b8      	str	r0, [r7, #40]	; 0x28
 8012338:	e007      	b.n	801234a <f_write+0x10c>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801233a:	68fa      	ldr	r2, [r7, #12]
 801233c:	68fb      	ldr	r3, [r7, #12]
 801233e:	69db      	ldr	r3, [r3, #28]
 8012340:	4619      	mov	r1, r3
 8012342:	4610      	mov	r0, r2
 8012344:	f7fe f844 	bl	80103d0 <create_chain>
 8012348:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801234a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801234c:	2b00      	cmp	r3, #0
 801234e:	f000 8127 	beq.w	80125a0 <f_write+0x362>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012354:	2b01      	cmp	r3, #1
 8012356:	d109      	bne.n	801236c <f_write+0x12e>
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	2202      	movs	r2, #2
 801235c:	755a      	strb	r2, [r3, #21]
 801235e:	693b      	ldr	r3, [r7, #16]
 8012360:	2102      	movs	r1, #2
 8012362:	4618      	mov	r0, r3
 8012364:	f7fd fb56 	bl	800fa14 <unlock_fs>
 8012368:	2302      	movs	r3, #2
 801236a:	e127      	b.n	80125bc <f_write+0x37e>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801236c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801236e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012372:	d109      	bne.n	8012388 <f_write+0x14a>
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	2201      	movs	r2, #1
 8012378:	755a      	strb	r2, [r3, #21]
 801237a:	693b      	ldr	r3, [r7, #16]
 801237c:	2101      	movs	r1, #1
 801237e:	4618      	mov	r0, r3
 8012380:	f7fd fb48 	bl	800fa14 <unlock_fs>
 8012384:	2301      	movs	r3, #1
 8012386:	e119      	b.n	80125bc <f_write+0x37e>
				fp->clust = clst;			/* Update current cluster */
 8012388:	68fb      	ldr	r3, [r7, #12]
 801238a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801238c:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	689b      	ldr	r3, [r3, #8]
 8012392:	2b00      	cmp	r3, #0
 8012394:	d102      	bne.n	801239c <f_write+0x15e>
 8012396:	68fb      	ldr	r3, [r7, #12]
 8012398:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801239a:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	7d1b      	ldrb	r3, [r3, #20]
 80123a0:	b25b      	sxtb	r3, r3
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	da1d      	bge.n	80123e2 <f_write+0x1a4>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80123a6:	693b      	ldr	r3, [r7, #16]
 80123a8:	7858      	ldrb	r0, [r3, #1]
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	6a1a      	ldr	r2, [r3, #32]
 80123b4:	2301      	movs	r3, #1
 80123b6:	f7fd f9d9 	bl	800f76c <disk_write>
 80123ba:	4603      	mov	r3, r0
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d009      	beq.n	80123d4 <f_write+0x196>
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	2201      	movs	r2, #1
 80123c4:	755a      	strb	r2, [r3, #21]
 80123c6:	693b      	ldr	r3, [r7, #16]
 80123c8:	2101      	movs	r1, #1
 80123ca:	4618      	mov	r0, r3
 80123cc:	f7fd fb22 	bl	800fa14 <unlock_fs>
 80123d0:	2301      	movs	r3, #1
 80123d2:	e0f3      	b.n	80125bc <f_write+0x37e>
				fp->flag &= (BYTE)~FA_DIRTY;
 80123d4:	68fb      	ldr	r3, [r7, #12]
 80123d6:	7d1b      	ldrb	r3, [r3, #20]
 80123d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80123dc:	b2da      	uxtb	r2, r3
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80123e2:	693a      	ldr	r2, [r7, #16]
 80123e4:	68fb      	ldr	r3, [r7, #12]
 80123e6:	69db      	ldr	r3, [r3, #28]
 80123e8:	4619      	mov	r1, r3
 80123ea:	4610      	mov	r0, r2
 80123ec:	f7fd fd7c 	bl	800fee8 <clust2sect>
 80123f0:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80123f2:	697b      	ldr	r3, [r7, #20]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d109      	bne.n	801240c <f_write+0x1ce>
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	2202      	movs	r2, #2
 80123fc:	755a      	strb	r2, [r3, #21]
 80123fe:	693b      	ldr	r3, [r7, #16]
 8012400:	2102      	movs	r1, #2
 8012402:	4618      	mov	r0, r3
 8012404:	f7fd fb06 	bl	800fa14 <unlock_fs>
 8012408:	2302      	movs	r3, #2
 801240a:	e0d7      	b.n	80125bc <f_write+0x37e>
			sect += csect;
 801240c:	697a      	ldr	r2, [r7, #20]
 801240e:	69bb      	ldr	r3, [r7, #24]
 8012410:	4413      	add	r3, r2
 8012412:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8012414:	693b      	ldr	r3, [r7, #16]
 8012416:	899b      	ldrh	r3, [r3, #12]
 8012418:	461a      	mov	r2, r3
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	fbb3 f3f2 	udiv	r3, r3, r2
 8012420:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012422:	6a3b      	ldr	r3, [r7, #32]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d048      	beq.n	80124ba <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012428:	69ba      	ldr	r2, [r7, #24]
 801242a:	6a3b      	ldr	r3, [r7, #32]
 801242c:	4413      	add	r3, r2
 801242e:	693a      	ldr	r2, [r7, #16]
 8012430:	8952      	ldrh	r2, [r2, #10]
 8012432:	4293      	cmp	r3, r2
 8012434:	d905      	bls.n	8012442 <f_write+0x204>
					cc = fs->csize - csect;
 8012436:	693b      	ldr	r3, [r7, #16]
 8012438:	895b      	ldrh	r3, [r3, #10]
 801243a:	461a      	mov	r2, r3
 801243c:	69bb      	ldr	r3, [r7, #24]
 801243e:	1ad3      	subs	r3, r2, r3
 8012440:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012442:	693b      	ldr	r3, [r7, #16]
 8012444:	7858      	ldrb	r0, [r3, #1]
 8012446:	6a3b      	ldr	r3, [r7, #32]
 8012448:	697a      	ldr	r2, [r7, #20]
 801244a:	69f9      	ldr	r1, [r7, #28]
 801244c:	f7fd f98e 	bl	800f76c <disk_write>
 8012450:	4603      	mov	r3, r0
 8012452:	2b00      	cmp	r3, #0
 8012454:	d009      	beq.n	801246a <f_write+0x22c>
 8012456:	68fb      	ldr	r3, [r7, #12]
 8012458:	2201      	movs	r2, #1
 801245a:	755a      	strb	r2, [r3, #21]
 801245c:	693b      	ldr	r3, [r7, #16]
 801245e:	2101      	movs	r1, #1
 8012460:	4618      	mov	r0, r3
 8012462:	f7fd fad7 	bl	800fa14 <unlock_fs>
 8012466:	2301      	movs	r3, #1
 8012468:	e0a8      	b.n	80125bc <f_write+0x37e>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	6a1a      	ldr	r2, [r3, #32]
 801246e:	697b      	ldr	r3, [r7, #20]
 8012470:	1ad3      	subs	r3, r2, r3
 8012472:	6a3a      	ldr	r2, [r7, #32]
 8012474:	429a      	cmp	r2, r3
 8012476:	d918      	bls.n	80124aa <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801247e:	68fb      	ldr	r3, [r7, #12]
 8012480:	6a1a      	ldr	r2, [r3, #32]
 8012482:	697b      	ldr	r3, [r7, #20]
 8012484:	1ad3      	subs	r3, r2, r3
 8012486:	693a      	ldr	r2, [r7, #16]
 8012488:	8992      	ldrh	r2, [r2, #12]
 801248a:	fb02 f303 	mul.w	r3, r2, r3
 801248e:	69fa      	ldr	r2, [r7, #28]
 8012490:	18d1      	adds	r1, r2, r3
 8012492:	693b      	ldr	r3, [r7, #16]
 8012494:	899b      	ldrh	r3, [r3, #12]
 8012496:	461a      	mov	r2, r3
 8012498:	f7fd fa28 	bl	800f8ec <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	7d1b      	ldrb	r3, [r3, #20]
 80124a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80124a4:	b2da      	uxtb	r2, r3
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80124aa:	693b      	ldr	r3, [r7, #16]
 80124ac:	899b      	ldrh	r3, [r3, #12]
 80124ae:	461a      	mov	r2, r3
 80124b0:	6a3b      	ldr	r3, [r7, #32]
 80124b2:	fb02 f303 	mul.w	r3, r2, r3
 80124b6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80124b8:	e050      	b.n	801255c <f_write+0x31e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80124ba:	68fb      	ldr	r3, [r7, #12]
 80124bc:	6a1b      	ldr	r3, [r3, #32]
 80124be:	697a      	ldr	r2, [r7, #20]
 80124c0:	429a      	cmp	r2, r3
 80124c2:	d01b      	beq.n	80124fc <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 80124c4:	68fb      	ldr	r3, [r7, #12]
 80124c6:	699a      	ldr	r2, [r3, #24]
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80124cc:	429a      	cmp	r2, r3
 80124ce:	d215      	bcs.n	80124fc <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80124d0:	693b      	ldr	r3, [r7, #16]
 80124d2:	7858      	ldrb	r0, [r3, #1]
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80124da:	2301      	movs	r3, #1
 80124dc:	697a      	ldr	r2, [r7, #20]
 80124de:	f7fd f925 	bl	800f72c <disk_read>
 80124e2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80124e4:	2b00      	cmp	r3, #0
 80124e6:	d009      	beq.n	80124fc <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	2201      	movs	r2, #1
 80124ec:	755a      	strb	r2, [r3, #21]
 80124ee:	693b      	ldr	r3, [r7, #16]
 80124f0:	2101      	movs	r1, #1
 80124f2:	4618      	mov	r0, r3
 80124f4:	f7fd fa8e 	bl	800fa14 <unlock_fs>
 80124f8:	2301      	movs	r3, #1
 80124fa:	e05f      	b.n	80125bc <f_write+0x37e>
			}
#endif
			fp->sect = sect;
 80124fc:	68fb      	ldr	r3, [r7, #12]
 80124fe:	697a      	ldr	r2, [r7, #20]
 8012500:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012502:	693b      	ldr	r3, [r7, #16]
 8012504:	899b      	ldrh	r3, [r3, #12]
 8012506:	4618      	mov	r0, r3
 8012508:	68fb      	ldr	r3, [r7, #12]
 801250a:	699b      	ldr	r3, [r3, #24]
 801250c:	693a      	ldr	r2, [r7, #16]
 801250e:	8992      	ldrh	r2, [r2, #12]
 8012510:	fbb3 f1f2 	udiv	r1, r3, r2
 8012514:	fb02 f201 	mul.w	r2, r2, r1
 8012518:	1a9b      	subs	r3, r3, r2
 801251a:	1ac3      	subs	r3, r0, r3
 801251c:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 801251e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	429a      	cmp	r2, r3
 8012524:	d901      	bls.n	801252a <f_write+0x2ec>
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	699b      	ldr	r3, [r3, #24]
 8012534:	693a      	ldr	r2, [r7, #16]
 8012536:	8992      	ldrh	r2, [r2, #12]
 8012538:	fbb3 f0f2 	udiv	r0, r3, r2
 801253c:	fb02 f200 	mul.w	r2, r2, r0
 8012540:	1a9b      	subs	r3, r3, r2
 8012542:	440b      	add	r3, r1
 8012544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012546:	69f9      	ldr	r1, [r7, #28]
 8012548:	4618      	mov	r0, r3
 801254a:	f7fd f9cf 	bl	800f8ec <mem_cpy>
		fp->flag |= FA_DIRTY;
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	7d1b      	ldrb	r3, [r3, #20]
 8012552:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012556:	b2da      	uxtb	r2, r3
 8012558:	68fb      	ldr	r3, [r7, #12]
 801255a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801255c:	69fa      	ldr	r2, [r7, #28]
 801255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012560:	4413      	add	r3, r2
 8012562:	61fb      	str	r3, [r7, #28]
 8012564:	68fb      	ldr	r3, [r7, #12]
 8012566:	699a      	ldr	r2, [r3, #24]
 8012568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801256a:	441a      	add	r2, r3
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	619a      	str	r2, [r3, #24]
 8012570:	68fb      	ldr	r3, [r7, #12]
 8012572:	68da      	ldr	r2, [r3, #12]
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	699b      	ldr	r3, [r3, #24]
 8012578:	429a      	cmp	r2, r3
 801257a:	bf38      	it	cc
 801257c:	461a      	movcc	r2, r3
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	60da      	str	r2, [r3, #12]
 8012582:	683b      	ldr	r3, [r7, #0]
 8012584:	681a      	ldr	r2, [r3, #0]
 8012586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012588:	441a      	add	r2, r3
 801258a:	683b      	ldr	r3, [r7, #0]
 801258c:	601a      	str	r2, [r3, #0]
 801258e:	687a      	ldr	r2, [r7, #4]
 8012590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012592:	1ad3      	subs	r3, r2, r3
 8012594:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	2b00      	cmp	r3, #0
 801259a:	f47f ae97 	bne.w	80122cc <f_write+0x8e>
 801259e:	e000      	b.n	80125a2 <f_write+0x364>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80125a0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	7d1b      	ldrb	r3, [r3, #20]
 80125a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80125aa:	b2da      	uxtb	r2, r3
 80125ac:	68fb      	ldr	r3, [r7, #12]
 80125ae:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80125b0:	693b      	ldr	r3, [r7, #16]
 80125b2:	2100      	movs	r1, #0
 80125b4:	4618      	mov	r0, r3
 80125b6:	f7fd fa2d 	bl	800fa14 <unlock_fs>
 80125ba:	2300      	movs	r3, #0
}
 80125bc:	4618      	mov	r0, r3
 80125be:	3730      	adds	r7, #48	; 0x30
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}

080125c4 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80125c4:	b580      	push	{r7, lr}
 80125c6:	b086      	sub	sp, #24
 80125c8:	af00      	add	r7, sp, #0
 80125ca:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	f107 0208 	add.w	r2, r7, #8
 80125d2:	4611      	mov	r1, r2
 80125d4:	4618      	mov	r0, r3
 80125d6:	f7ff fb23 	bl	8011c20 <validate>
 80125da:	4603      	mov	r3, r0
 80125dc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80125de:	7dfb      	ldrb	r3, [r7, #23]
 80125e0:	2b00      	cmp	r3, #0
 80125e2:	d16d      	bne.n	80126c0 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	7d1b      	ldrb	r3, [r3, #20]
 80125e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80125ec:	2b00      	cmp	r3, #0
 80125ee:	d067      	beq.n	80126c0 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	7d1b      	ldrb	r3, [r3, #20]
 80125f4:	b25b      	sxtb	r3, r3
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	da1a      	bge.n	8012630 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80125fa:	68bb      	ldr	r3, [r7, #8]
 80125fc:	7858      	ldrb	r0, [r3, #1]
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012604:	687b      	ldr	r3, [r7, #4]
 8012606:	6a1a      	ldr	r2, [r3, #32]
 8012608:	2301      	movs	r3, #1
 801260a:	f7fd f8af 	bl	800f76c <disk_write>
 801260e:	4603      	mov	r3, r0
 8012610:	2b00      	cmp	r3, #0
 8012612:	d006      	beq.n	8012622 <f_sync+0x5e>
 8012614:	68bb      	ldr	r3, [r7, #8]
 8012616:	2101      	movs	r1, #1
 8012618:	4618      	mov	r0, r3
 801261a:	f7fd f9fb 	bl	800fa14 <unlock_fs>
 801261e:	2301      	movs	r3, #1
 8012620:	e055      	b.n	80126ce <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	7d1b      	ldrb	r3, [r3, #20]
 8012626:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801262a:	b2da      	uxtb	r2, r3
 801262c:	687b      	ldr	r3, [r7, #4]
 801262e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012630:	f7fb fb4a 	bl	800dcc8 <get_fattime>
 8012634:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012636:	68ba      	ldr	r2, [r7, #8]
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801263c:	4619      	mov	r1, r3
 801263e:	4610      	mov	r0, r2
 8012640:	f7fd fbb4 	bl	800fdac <move_window>
 8012644:	4603      	mov	r3, r0
 8012646:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012648:	7dfb      	ldrb	r3, [r7, #23]
 801264a:	2b00      	cmp	r3, #0
 801264c:	d138      	bne.n	80126c0 <f_sync+0xfc>
					dir = fp->dir_ptr;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012652:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	330b      	adds	r3, #11
 8012658:	781a      	ldrb	r2, [r3, #0]
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	330b      	adds	r3, #11
 801265e:	f042 0220 	orr.w	r2, r2, #32
 8012662:	b2d2      	uxtb	r2, r2
 8012664:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	6818      	ldr	r0, [r3, #0]
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	689b      	ldr	r3, [r3, #8]
 801266e:	461a      	mov	r2, r3
 8012670:	68f9      	ldr	r1, [r7, #12]
 8012672:	f7fe f942 	bl	80108fa <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	f103 021c 	add.w	r2, r3, #28
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	68db      	ldr	r3, [r3, #12]
 8012680:	4619      	mov	r1, r3
 8012682:	4610      	mov	r0, r2
 8012684:	f7fd f906 	bl	800f894 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	3316      	adds	r3, #22
 801268c:	6939      	ldr	r1, [r7, #16]
 801268e:	4618      	mov	r0, r3
 8012690:	f7fd f900 	bl	800f894 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	3312      	adds	r3, #18
 8012698:	2100      	movs	r1, #0
 801269a:	4618      	mov	r0, r3
 801269c:	f7fd f8df 	bl	800f85e <st_word>
					fs->wflag = 1;
 80126a0:	68bb      	ldr	r3, [r7, #8]
 80126a2:	2201      	movs	r2, #1
 80126a4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80126a6:	68bb      	ldr	r3, [r7, #8]
 80126a8:	4618      	mov	r0, r3
 80126aa:	f7fd fbad 	bl	800fe08 <sync_fs>
 80126ae:	4603      	mov	r3, r0
 80126b0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	7d1b      	ldrb	r3, [r3, #20]
 80126b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80126ba:	b2da      	uxtb	r2, r3
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80126c0:	68bb      	ldr	r3, [r7, #8]
 80126c2:	7dfa      	ldrb	r2, [r7, #23]
 80126c4:	4611      	mov	r1, r2
 80126c6:	4618      	mov	r0, r3
 80126c8:	f7fd f9a4 	bl	800fa14 <unlock_fs>
 80126cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80126ce:	4618      	mov	r0, r3
 80126d0:	3718      	adds	r7, #24
 80126d2:	46bd      	mov	sp, r7
 80126d4:	bd80      	pop	{r7, pc}

080126d6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80126d6:	b580      	push	{r7, lr}
 80126d8:	b084      	sub	sp, #16
 80126da:	af00      	add	r7, sp, #0
 80126dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80126de:	6878      	ldr	r0, [r7, #4]
 80126e0:	f7ff ff70 	bl	80125c4 <f_sync>
 80126e4:	4603      	mov	r3, r0
 80126e6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80126e8:	7bfb      	ldrb	r3, [r7, #15]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d11d      	bne.n	801272a <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	f107 0208 	add.w	r2, r7, #8
 80126f4:	4611      	mov	r1, r2
 80126f6:	4618      	mov	r0, r3
 80126f8:	f7ff fa92 	bl	8011c20 <validate>
 80126fc:	4603      	mov	r3, r0
 80126fe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012700:	7bfb      	ldrb	r3, [r7, #15]
 8012702:	2b00      	cmp	r3, #0
 8012704:	d111      	bne.n	801272a <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	691b      	ldr	r3, [r3, #16]
 801270a:	4618      	mov	r0, r3
 801270c:	f7fd faaa 	bl	800fc64 <dec_lock>
 8012710:	4603      	mov	r3, r0
 8012712:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012714:	7bfb      	ldrb	r3, [r7, #15]
 8012716:	2b00      	cmp	r3, #0
 8012718:	d102      	bne.n	8012720 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	2200      	movs	r2, #0
 801271e:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 8012720:	68bb      	ldr	r3, [r7, #8]
 8012722:	2100      	movs	r1, #0
 8012724:	4618      	mov	r0, r3
 8012726:	f7fd f975 	bl	800fa14 <unlock_fs>
#endif
		}
	}
	return res;
 801272a:	7bfb      	ldrb	r3, [r7, #15]
}
 801272c:	4618      	mov	r0, r3
 801272e:	3710      	adds	r7, #16
 8012730:	46bd      	mov	sp, r7
 8012732:	bd80      	pop	{r7, pc}

08012734 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8012734:	b580      	push	{r7, lr}
 8012736:	f5ad 7d10 	sub.w	sp, sp, #576	; 0x240
 801273a:	af00      	add	r7, sp, #0
 801273c:	1d3b      	adds	r3, r7, #4
 801273e:	6018      	str	r0, [r3, #0]
 8012740:	463b      	mov	r3, r7
 8012742:	6019      	str	r1, [r3, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8012744:	f507 7102 	add.w	r1, r7, #520	; 0x208
 8012748:	1d3b      	adds	r3, r7, #4
 801274a:	2200      	movs	r2, #0
 801274c:	4618      	mov	r0, r3
 801274e:	f7fe ffdd 	bl	801170c <find_volume>
 8012752:	4603      	mov	r3, r0
 8012754:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
	if (res == FR_OK) {
 8012758:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 801275c:	2b00      	cmp	r3, #0
 801275e:	d127      	bne.n	80127b0 <f_stat+0x7c>
		INIT_NAMBUF(dj.obj.fs);
 8012760:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8012764:	f107 0208 	add.w	r2, r7, #8
 8012768:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);	/* Follow the file path */
 801276a:	1d3b      	adds	r3, r7, #4
 801276c:	681a      	ldr	r2, [r3, #0]
 801276e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8012772:	4611      	mov	r1, r2
 8012774:	4618      	mov	r0, r3
 8012776:	f7fe feb9 	bl	80114ec <follow_path>
 801277a:	4603      	mov	r3, r0
 801277c:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
		if (res == FR_OK) {				/* Follow completed */
 8012780:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
 8012784:	2b00      	cmp	r3, #0
 8012786:	d113      	bne.n	80127b0 <f_stat+0x7c>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8012788:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 801278c:	b25b      	sxtb	r3, r3
 801278e:	2b00      	cmp	r3, #0
 8012790:	da03      	bge.n	801279a <f_stat+0x66>
				res = FR_INVALID_NAME;
 8012792:	2306      	movs	r3, #6
 8012794:	f887 323f 	strb.w	r3, [r7, #575]	; 0x23f
 8012798:	e00a      	b.n	80127b0 <f_stat+0x7c>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 801279a:	463b      	mov	r3, r7
 801279c:	681b      	ldr	r3, [r3, #0]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d006      	beq.n	80127b0 <f_stat+0x7c>
 80127a2:	463b      	mov	r3, r7
 80127a4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80127a8:	6819      	ldr	r1, [r3, #0]
 80127aa:	4610      	mov	r0, r2
 80127ac:	f7fe fc08 	bl	8010fc0 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 80127b0:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80127b4:	f897 223f 	ldrb.w	r2, [r7, #575]	; 0x23f
 80127b8:	4611      	mov	r1, r2
 80127ba:	4618      	mov	r0, r3
 80127bc:	f7fd f92a 	bl	800fa14 <unlock_fs>
 80127c0:	f897 323f 	ldrb.w	r3, [r7, #575]	; 0x23f
}
 80127c4:	4618      	mov	r0, r3
 80127c6:	f507 7710 	add.w	r7, r7, #576	; 0x240
 80127ca:	46bd      	mov	sp, r7
 80127cc:	bd80      	pop	{r7, pc}

080127ce <f_mkdir>:
/*-----------------------------------------------------------------------*/

FRESULT f_mkdir (
	const TCHAR* path		/* Pointer to the directory path */
)
{
 80127ce:	b580      	push	{r7, lr}
 80127d0:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 80127d4:	af00      	add	r7, sp, #0
 80127d6:	1d3b      	adds	r3, r7, #4
 80127d8:	6018      	str	r0, [r3, #0]
	DWORD dsc, dcl, pcl, tm;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &fs, FA_WRITE);
 80127da:	f507 7103 	add.w	r1, r7, #524	; 0x20c
 80127de:	1d3b      	adds	r3, r7, #4
 80127e0:	2202      	movs	r2, #2
 80127e2:	4618      	mov	r0, r3
 80127e4:	f7fe ff92 	bl	801170c <find_volume>
 80127e8:	4603      	mov	r3, r0
 80127ea:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
	dj.obj.fs = fs;
 80127ee:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80127f2:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
	if (res == FR_OK) {
 80127f6:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	f040 8134 	bne.w	8012a68 <f_mkdir+0x29a>
		INIT_NAMBUF(fs);
 8012800:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012804:	f107 020c 	add.w	r2, r7, #12
 8012808:	611a      	str	r2, [r3, #16]
		res = follow_path(&dj, path);			/* Follow the file path */
 801280a:	1d3b      	adds	r3, r7, #4
 801280c:	681a      	ldr	r2, [r3, #0]
 801280e:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8012812:	4611      	mov	r1, r2
 8012814:	4618      	mov	r0, r3
 8012816:	f7fe fe69 	bl	80114ec <follow_path>
 801281a:	4603      	mov	r3, r0
 801281c:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		if (res == FR_OK) res = FR_EXIST;		/* Any object with same name is already existing */
 8012820:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8012824:	2b00      	cmp	r3, #0
 8012826:	d102      	bne.n	801282e <f_mkdir+0x60>
 8012828:	2308      	movs	r3, #8
 801282a:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
		if (_FS_RPATH && res == FR_NO_FILE && (dj.fn[NSFLAG] & NS_DOT)) {
			res = FR_INVALID_NAME;
		}
		if (res == FR_NO_FILE) {				/* Can create a new directory */
 801282e:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8012832:	2b04      	cmp	r3, #4
 8012834:	f040 8118 	bne.w	8012a68 <f_mkdir+0x29a>
			dcl = create_chain(&dj.obj, 0);		/* Allocate a cluster for the new directory table */
 8012838:	f507 7304 	add.w	r3, r7, #528	; 0x210
 801283c:	2100      	movs	r1, #0
 801283e:	4618      	mov	r0, r3
 8012840:	f7fd fdc6 	bl	80103d0 <create_chain>
 8012844:	f8c7 024c 	str.w	r0, [r7, #588]	; 0x24c
			dj.obj.objsize = (DWORD)fs->csize * SS(fs);
 8012848:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801284c:	895b      	ldrh	r3, [r3, #10]
 801284e:	461a      	mov	r2, r3
 8012850:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012854:	899b      	ldrh	r3, [r3, #12]
 8012856:	fb03 f302 	mul.w	r3, r3, r2
 801285a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
			res = FR_OK;
 801285e:	2300      	movs	r3, #0
 8012860:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 0) res = FR_DENIED;		/* No space to allocate a new cluster */
 8012864:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8012868:	2b00      	cmp	r3, #0
 801286a:	d102      	bne.n	8012872 <f_mkdir+0xa4>
 801286c:	2307      	movs	r3, #7
 801286e:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 1) res = FR_INT_ERR;
 8012872:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8012876:	2b01      	cmp	r3, #1
 8012878:	d102      	bne.n	8012880 <f_mkdir+0xb2>
 801287a:	2302      	movs	r3, #2
 801287c:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (dcl == 0xFFFFFFFF) res = FR_DISK_ERR;
 8012880:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8012884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012888:	d102      	bne.n	8012890 <f_mkdir+0xc2>
 801288a:	2301      	movs	r3, #1
 801288c:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			if (res == FR_OK) res = sync_window(fs);	/* Flush FAT */
 8012890:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8012894:	2b00      	cmp	r3, #0
 8012896:	d107      	bne.n	80128a8 <f_mkdir+0xda>
 8012898:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801289c:	4618      	mov	r0, r3
 801289e:	f7fd fa41 	bl	800fd24 <sync_window>
 80128a2:	4603      	mov	r3, r0
 80128a4:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			tm = GET_FATTIME();
 80128a8:	f7fb fa0e 	bl	800dcc8 <get_fattime>
 80128ac:	f8c7 0248 	str.w	r0, [r7, #584]	; 0x248
			if (res == FR_OK) {					/* Initialize the new directory table */
 80128b0:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	f040 8094 	bne.w	80129e2 <f_mkdir+0x214>
				dsc = clust2sect(fs, dcl);
 80128ba:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80128be:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 80128c2:	4618      	mov	r0, r3
 80128c4:	f7fd fb10 	bl	800fee8 <clust2sect>
 80128c8:	f8c7 0254 	str.w	r0, [r7, #596]	; 0x254
				dir = fs->win;
 80128cc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80128d0:	333c      	adds	r3, #60	; 0x3c
 80128d2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				mem_set(dir, 0, SS(fs));
 80128d6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80128da:	899b      	ldrh	r3, [r3, #12]
 80128dc:	461a      	mov	r2, r3
 80128de:	2100      	movs	r1, #0
 80128e0:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 80128e4:	f7fd f823 	bl	800f92e <mem_set>
				if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
					mem_set(dir + DIR_Name, ' ', 11);	/* Create "." entry */
 80128e8:	220b      	movs	r2, #11
 80128ea:	2120      	movs	r1, #32
 80128ec:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 80128f0:	f7fd f81d 	bl	800f92e <mem_set>
					dir[DIR_Name] = '.';
 80128f4:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80128f8:	222e      	movs	r2, #46	; 0x2e
 80128fa:	701a      	strb	r2, [r3, #0]
					dir[DIR_Attr] = AM_DIR;
 80128fc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012900:	330b      	adds	r3, #11
 8012902:	2210      	movs	r2, #16
 8012904:	701a      	strb	r2, [r3, #0]
					st_dword(dir + DIR_ModTime, tm);
 8012906:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801290a:	3316      	adds	r3, #22
 801290c:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8012910:	4618      	mov	r0, r3
 8012912:	f7fc ffbf 	bl	800f894 <st_dword>
					st_clust(fs, dir, dcl);
 8012916:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801291a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 801291e:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8012922:	4618      	mov	r0, r3
 8012924:	f7fd ffe9 	bl	80108fa <st_clust>
					mem_cpy(dir + SZDIRE, dir, SZDIRE); 	/* Create ".." entry */
 8012928:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801292c:	3320      	adds	r3, #32
 801292e:	2220      	movs	r2, #32
 8012930:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8012934:	4618      	mov	r0, r3
 8012936:	f7fc ffd9 	bl	800f8ec <mem_cpy>
					dir[SZDIRE + 1] = '.'; pcl = dj.obj.sclust;
 801293a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801293e:	3321      	adds	r3, #33	; 0x21
 8012940:	222e      	movs	r2, #46	; 0x2e
 8012942:	701a      	strb	r2, [r3, #0]
 8012944:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8012948:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
					if (fs->fs_type == FS_FAT32 && pcl == fs->dirbase) pcl = 0;
 801294c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012950:	781b      	ldrb	r3, [r3, #0]
 8012952:	2b03      	cmp	r3, #3
 8012954:	d109      	bne.n	801296a <f_mkdir+0x19c>
 8012956:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801295c:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8012960:	429a      	cmp	r2, r3
 8012962:	d102      	bne.n	801296a <f_mkdir+0x19c>
 8012964:	2300      	movs	r3, #0
 8012966:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
					st_clust(fs, dir + SZDIRE, pcl);
 801296a:	f8d7 020c 	ldr.w	r0, [r7, #524]	; 0x20c
 801296e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012972:	3320      	adds	r3, #32
 8012974:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8012978:	4619      	mov	r1, r3
 801297a:	f7fd ffbe 	bl	80108fa <st_clust>
				}
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 801297e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012982:	895b      	ldrh	r3, [r3, #10]
 8012984:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 8012988:	e025      	b.n	80129d6 <f_mkdir+0x208>
					fs->winsect = dsc++;
 801298a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801298e:	1c5a      	adds	r2, r3, #1
 8012990:	f8c7 2254 	str.w	r2, [r7, #596]	; 0x254
 8012994:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8012998:	6393      	str	r3, [r2, #56]	; 0x38
					fs->wflag = 1;
 801299a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801299e:	2201      	movs	r2, #1
 80129a0:	70da      	strb	r2, [r3, #3]
					res = sync_window(fs);
 80129a2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80129a6:	4618      	mov	r0, r3
 80129a8:	f7fd f9bc 	bl	800fd24 <sync_window>
 80129ac:	4603      	mov	r3, r0
 80129ae:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
					if (res != FR_OK) break;
 80129b2:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d112      	bne.n	80129e0 <f_mkdir+0x212>
					mem_set(dir, 0, SS(fs));
 80129ba:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80129be:	899b      	ldrh	r3, [r3, #12]
 80129c0:	461a      	mov	r2, r3
 80129c2:	2100      	movs	r1, #0
 80129c4:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 80129c8:	f7fc ffb1 	bl	800f92e <mem_set>
				for (n = fs->csize; n; n--) {	/* Write dot entries and clear following sectors */
 80129cc:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80129d0:	3b01      	subs	r3, #1
 80129d2:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
 80129d6:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80129da:	2b00      	cmp	r3, #0
 80129dc:	d1d5      	bne.n	801298a <f_mkdir+0x1bc>
 80129de:	e000      	b.n	80129e2 <f_mkdir+0x214>
					if (res != FR_OK) break;
 80129e0:	bf00      	nop
				}
			}
			if (res == FR_OK) {
 80129e2:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80129e6:	2b00      	cmp	r3, #0
 80129e8:	d107      	bne.n	80129fa <f_mkdir+0x22c>
				res = dir_register(&dj);	/* Register the object to the directoy */
 80129ea:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80129ee:	4618      	mov	r0, r3
 80129f0:	f7fe f9ee 	bl	8010dd0 <dir_register>
 80129f4:	4603      	mov	r3, r0
 80129f6:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
			}
			if (res == FR_OK) {
 80129fa:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d12a      	bne.n	8012a58 <f_mkdir+0x28a>
					fs->dirbuf[XDIR_Attr] = AM_DIR;				/* Attribute */
					res = store_xdir(&dj);
				} else
#endif
				{
					dir = dj.dir;
 8012a02:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8012a06:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					st_dword(dir + DIR_ModTime, tm);	/* Created time */
 8012a0a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012a0e:	3316      	adds	r3, #22
 8012a10:	f8d7 1248 	ldr.w	r1, [r7, #584]	; 0x248
 8012a14:	4618      	mov	r0, r3
 8012a16:	f7fc ff3d 	bl	800f894 <st_dword>
					st_clust(fs, dir, dcl);				/* Table start cluster */
 8012a1a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012a1e:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8012a22:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8012a26:	4618      	mov	r0, r3
 8012a28:	f7fd ff67 	bl	80108fa <st_clust>
					dir[DIR_Attr] = AM_DIR;				/* Attribute */
 8012a2c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8012a30:	330b      	adds	r3, #11
 8012a32:	2210      	movs	r2, #16
 8012a34:	701a      	strb	r2, [r3, #0]
					fs->wflag = 1;
 8012a36:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012a3a:	2201      	movs	r2, #1
 8012a3c:	70da      	strb	r2, [r3, #3]
				}
				if (res == FR_OK) {
 8012a3e:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d110      	bne.n	8012a68 <f_mkdir+0x29a>
					res = sync_fs(fs);
 8012a46:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012a4a:	4618      	mov	r0, r3
 8012a4c:	f7fd f9dc 	bl	800fe08 <sync_fs>
 8012a50:	4603      	mov	r3, r0
 8012a52:	f887 325f 	strb.w	r3, [r7, #607]	; 0x25f
 8012a56:	e007      	b.n	8012a68 <f_mkdir+0x29a>
				}
			} else {
				remove_chain(&dj.obj, dcl, 0);		/* Could not register, remove cluster chain */
 8012a58:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8012a5c:	2200      	movs	r2, #0
 8012a5e:	f8d7 124c 	ldr.w	r1, [r7, #588]	; 0x24c
 8012a62:	4618      	mov	r0, r3
 8012a64:	f7fd fc4f 	bl	8010306 <remove_chain>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(fs, res);
 8012a68:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8012a6c:	f897 225f 	ldrb.w	r2, [r7, #607]	; 0x25f
 8012a70:	4611      	mov	r1, r2
 8012a72:	4618      	mov	r0, r3
 8012a74:	f7fc ffce 	bl	800fa14 <unlock_fs>
 8012a78:	f897 325f 	ldrb.w	r3, [r7, #607]	; 0x25f
}
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f507 7718 	add.w	r7, r7, #608	; 0x260
 8012a82:	46bd      	mov	sp, r7
 8012a84:	bd80      	pop	{r7, pc}
	...

08012a88 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012a88:	b480      	push	{r7}
 8012a8a:	b087      	sub	sp, #28
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	60f8      	str	r0, [r7, #12]
 8012a90:	60b9      	str	r1, [r7, #8]
 8012a92:	4613      	mov	r3, r2
 8012a94:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012a96:	2301      	movs	r3, #1
 8012a98:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012a9a:	2300      	movs	r3, #0
 8012a9c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012a9e:	4b1f      	ldr	r3, [pc, #124]	; (8012b1c <FATFS_LinkDriverEx+0x94>)
 8012aa0:	7a5b      	ldrb	r3, [r3, #9]
 8012aa2:	b2db      	uxtb	r3, r3
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	d131      	bne.n	8012b0c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012aa8:	4b1c      	ldr	r3, [pc, #112]	; (8012b1c <FATFS_LinkDriverEx+0x94>)
 8012aaa:	7a5b      	ldrb	r3, [r3, #9]
 8012aac:	b2db      	uxtb	r3, r3
 8012aae:	461a      	mov	r2, r3
 8012ab0:	4b1a      	ldr	r3, [pc, #104]	; (8012b1c <FATFS_LinkDriverEx+0x94>)
 8012ab2:	2100      	movs	r1, #0
 8012ab4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012ab6:	4b19      	ldr	r3, [pc, #100]	; (8012b1c <FATFS_LinkDriverEx+0x94>)
 8012ab8:	7a5b      	ldrb	r3, [r3, #9]
 8012aba:	b2db      	uxtb	r3, r3
 8012abc:	4a17      	ldr	r2, [pc, #92]	; (8012b1c <FATFS_LinkDriverEx+0x94>)
 8012abe:	009b      	lsls	r3, r3, #2
 8012ac0:	4413      	add	r3, r2
 8012ac2:	68fa      	ldr	r2, [r7, #12]
 8012ac4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012ac6:	4b15      	ldr	r3, [pc, #84]	; (8012b1c <FATFS_LinkDriverEx+0x94>)
 8012ac8:	7a5b      	ldrb	r3, [r3, #9]
 8012aca:	b2db      	uxtb	r3, r3
 8012acc:	461a      	mov	r2, r3
 8012ace:	4b13      	ldr	r3, [pc, #76]	; (8012b1c <FATFS_LinkDriverEx+0x94>)
 8012ad0:	4413      	add	r3, r2
 8012ad2:	79fa      	ldrb	r2, [r7, #7]
 8012ad4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012ad6:	4b11      	ldr	r3, [pc, #68]	; (8012b1c <FATFS_LinkDriverEx+0x94>)
 8012ad8:	7a5b      	ldrb	r3, [r3, #9]
 8012ada:	b2db      	uxtb	r3, r3
 8012adc:	1c5a      	adds	r2, r3, #1
 8012ade:	b2d1      	uxtb	r1, r2
 8012ae0:	4a0e      	ldr	r2, [pc, #56]	; (8012b1c <FATFS_LinkDriverEx+0x94>)
 8012ae2:	7251      	strb	r1, [r2, #9]
 8012ae4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012ae6:	7dbb      	ldrb	r3, [r7, #22]
 8012ae8:	3330      	adds	r3, #48	; 0x30
 8012aea:	b2da      	uxtb	r2, r3
 8012aec:	68bb      	ldr	r3, [r7, #8]
 8012aee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012af0:	68bb      	ldr	r3, [r7, #8]
 8012af2:	3301      	adds	r3, #1
 8012af4:	223a      	movs	r2, #58	; 0x3a
 8012af6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012af8:	68bb      	ldr	r3, [r7, #8]
 8012afa:	3302      	adds	r3, #2
 8012afc:	222f      	movs	r2, #47	; 0x2f
 8012afe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012b00:	68bb      	ldr	r3, [r7, #8]
 8012b02:	3303      	adds	r3, #3
 8012b04:	2200      	movs	r2, #0
 8012b06:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012b08:	2300      	movs	r3, #0
 8012b0a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012b0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b0e:	4618      	mov	r0, r3
 8012b10:	371c      	adds	r7, #28
 8012b12:	46bd      	mov	sp, r7
 8012b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b18:	4770      	bx	lr
 8012b1a:	bf00      	nop
 8012b1c:	200027e0 	.word	0x200027e0

08012b20 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012b20:	b580      	push	{r7, lr}
 8012b22:	b082      	sub	sp, #8
 8012b24:	af00      	add	r7, sp, #0
 8012b26:	6078      	str	r0, [r7, #4]
 8012b28:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	6839      	ldr	r1, [r7, #0]
 8012b2e:	6878      	ldr	r0, [r7, #4]
 8012b30:	f7ff ffaa 	bl	8012a88 <FATFS_LinkDriverEx>
 8012b34:	4603      	mov	r3, r0
}
 8012b36:	4618      	mov	r0, r3
 8012b38:	3708      	adds	r7, #8
 8012b3a:	46bd      	mov	sp, r7
 8012b3c:	bd80      	pop	{r7, pc}
	...

08012b40 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8012b40:	b480      	push	{r7}
 8012b42:	b085      	sub	sp, #20
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	4603      	mov	r3, r0
 8012b48:	6039      	str	r1, [r7, #0]
 8012b4a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8012b4c:	88fb      	ldrh	r3, [r7, #6]
 8012b4e:	2b7f      	cmp	r3, #127	; 0x7f
 8012b50:	d802      	bhi.n	8012b58 <ff_convert+0x18>
		c = chr;
 8012b52:	88fb      	ldrh	r3, [r7, #6]
 8012b54:	81fb      	strh	r3, [r7, #14]
 8012b56:	e025      	b.n	8012ba4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8012b58:	683b      	ldr	r3, [r7, #0]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d00b      	beq.n	8012b76 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8012b5e:	88fb      	ldrh	r3, [r7, #6]
 8012b60:	2bff      	cmp	r3, #255	; 0xff
 8012b62:	d805      	bhi.n	8012b70 <ff_convert+0x30>
 8012b64:	88fb      	ldrh	r3, [r7, #6]
 8012b66:	3b80      	subs	r3, #128	; 0x80
 8012b68:	4a12      	ldr	r2, [pc, #72]	; (8012bb4 <ff_convert+0x74>)
 8012b6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012b6e:	e000      	b.n	8012b72 <ff_convert+0x32>
 8012b70:	2300      	movs	r3, #0
 8012b72:	81fb      	strh	r3, [r7, #14]
 8012b74:	e016      	b.n	8012ba4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8012b76:	2300      	movs	r3, #0
 8012b78:	81fb      	strh	r3, [r7, #14]
 8012b7a:	e009      	b.n	8012b90 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8012b7c:	89fb      	ldrh	r3, [r7, #14]
 8012b7e:	4a0d      	ldr	r2, [pc, #52]	; (8012bb4 <ff_convert+0x74>)
 8012b80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012b84:	88fa      	ldrh	r2, [r7, #6]
 8012b86:	429a      	cmp	r2, r3
 8012b88:	d006      	beq.n	8012b98 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8012b8a:	89fb      	ldrh	r3, [r7, #14]
 8012b8c:	3301      	adds	r3, #1
 8012b8e:	81fb      	strh	r3, [r7, #14]
 8012b90:	89fb      	ldrh	r3, [r7, #14]
 8012b92:	2b7f      	cmp	r3, #127	; 0x7f
 8012b94:	d9f2      	bls.n	8012b7c <ff_convert+0x3c>
 8012b96:	e000      	b.n	8012b9a <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8012b98:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8012b9a:	89fb      	ldrh	r3, [r7, #14]
 8012b9c:	3380      	adds	r3, #128	; 0x80
 8012b9e:	b29b      	uxth	r3, r3
 8012ba0:	b2db      	uxtb	r3, r3
 8012ba2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8012ba4:	89fb      	ldrh	r3, [r7, #14]
}
 8012ba6:	4618      	mov	r0, r3
 8012ba8:	3714      	adds	r7, #20
 8012baa:	46bd      	mov	sp, r7
 8012bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bb0:	4770      	bx	lr
 8012bb2:	bf00      	nop
 8012bb4:	0801eca0 	.word	0x0801eca0

08012bb8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8012bb8:	b480      	push	{r7}
 8012bba:	b087      	sub	sp, #28
 8012bbc:	af00      	add	r7, sp, #0
 8012bbe:	4603      	mov	r3, r0
 8012bc0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8012bc2:	88fb      	ldrh	r3, [r7, #6]
 8012bc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012bc8:	d201      	bcs.n	8012bce <ff_wtoupper+0x16>
 8012bca:	4b3e      	ldr	r3, [pc, #248]	; (8012cc4 <ff_wtoupper+0x10c>)
 8012bcc:	e000      	b.n	8012bd0 <ff_wtoupper+0x18>
 8012bce:	4b3e      	ldr	r3, [pc, #248]	; (8012cc8 <ff_wtoupper+0x110>)
 8012bd0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8012bd2:	697b      	ldr	r3, [r7, #20]
 8012bd4:	1c9a      	adds	r2, r3, #2
 8012bd6:	617a      	str	r2, [r7, #20]
 8012bd8:	881b      	ldrh	r3, [r3, #0]
 8012bda:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8012bdc:	8a7b      	ldrh	r3, [r7, #18]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d068      	beq.n	8012cb4 <ff_wtoupper+0xfc>
 8012be2:	88fa      	ldrh	r2, [r7, #6]
 8012be4:	8a7b      	ldrh	r3, [r7, #18]
 8012be6:	429a      	cmp	r2, r3
 8012be8:	d364      	bcc.n	8012cb4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8012bea:	697b      	ldr	r3, [r7, #20]
 8012bec:	1c9a      	adds	r2, r3, #2
 8012bee:	617a      	str	r2, [r7, #20]
 8012bf0:	881b      	ldrh	r3, [r3, #0]
 8012bf2:	823b      	strh	r3, [r7, #16]
 8012bf4:	8a3b      	ldrh	r3, [r7, #16]
 8012bf6:	0a1b      	lsrs	r3, r3, #8
 8012bf8:	81fb      	strh	r3, [r7, #14]
 8012bfa:	8a3b      	ldrh	r3, [r7, #16]
 8012bfc:	b2db      	uxtb	r3, r3
 8012bfe:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8012c00:	88fa      	ldrh	r2, [r7, #6]
 8012c02:	8a79      	ldrh	r1, [r7, #18]
 8012c04:	8a3b      	ldrh	r3, [r7, #16]
 8012c06:	440b      	add	r3, r1
 8012c08:	429a      	cmp	r2, r3
 8012c0a:	da49      	bge.n	8012ca0 <ff_wtoupper+0xe8>
			switch (cmd) {
 8012c0c:	89fb      	ldrh	r3, [r7, #14]
 8012c0e:	2b08      	cmp	r3, #8
 8012c10:	d84f      	bhi.n	8012cb2 <ff_wtoupper+0xfa>
 8012c12:	a201      	add	r2, pc, #4	; (adr r2, 8012c18 <ff_wtoupper+0x60>)
 8012c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c18:	08012c3d 	.word	0x08012c3d
 8012c1c:	08012c4f 	.word	0x08012c4f
 8012c20:	08012c65 	.word	0x08012c65
 8012c24:	08012c6d 	.word	0x08012c6d
 8012c28:	08012c75 	.word	0x08012c75
 8012c2c:	08012c7d 	.word	0x08012c7d
 8012c30:	08012c85 	.word	0x08012c85
 8012c34:	08012c8d 	.word	0x08012c8d
 8012c38:	08012c95 	.word	0x08012c95
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8012c3c:	88fa      	ldrh	r2, [r7, #6]
 8012c3e:	8a7b      	ldrh	r3, [r7, #18]
 8012c40:	1ad3      	subs	r3, r2, r3
 8012c42:	005b      	lsls	r3, r3, #1
 8012c44:	697a      	ldr	r2, [r7, #20]
 8012c46:	4413      	add	r3, r2
 8012c48:	881b      	ldrh	r3, [r3, #0]
 8012c4a:	80fb      	strh	r3, [r7, #6]
 8012c4c:	e027      	b.n	8012c9e <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8012c4e:	88fa      	ldrh	r2, [r7, #6]
 8012c50:	8a7b      	ldrh	r3, [r7, #18]
 8012c52:	1ad3      	subs	r3, r2, r3
 8012c54:	b29b      	uxth	r3, r3
 8012c56:	f003 0301 	and.w	r3, r3, #1
 8012c5a:	b29b      	uxth	r3, r3
 8012c5c:	88fa      	ldrh	r2, [r7, #6]
 8012c5e:	1ad3      	subs	r3, r2, r3
 8012c60:	80fb      	strh	r3, [r7, #6]
 8012c62:	e01c      	b.n	8012c9e <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8012c64:	88fb      	ldrh	r3, [r7, #6]
 8012c66:	3b10      	subs	r3, #16
 8012c68:	80fb      	strh	r3, [r7, #6]
 8012c6a:	e018      	b.n	8012c9e <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8012c6c:	88fb      	ldrh	r3, [r7, #6]
 8012c6e:	3b20      	subs	r3, #32
 8012c70:	80fb      	strh	r3, [r7, #6]
 8012c72:	e014      	b.n	8012c9e <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8012c74:	88fb      	ldrh	r3, [r7, #6]
 8012c76:	3b30      	subs	r3, #48	; 0x30
 8012c78:	80fb      	strh	r3, [r7, #6]
 8012c7a:	e010      	b.n	8012c9e <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8012c7c:	88fb      	ldrh	r3, [r7, #6]
 8012c7e:	3b1a      	subs	r3, #26
 8012c80:	80fb      	strh	r3, [r7, #6]
 8012c82:	e00c      	b.n	8012c9e <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8012c84:	88fb      	ldrh	r3, [r7, #6]
 8012c86:	3308      	adds	r3, #8
 8012c88:	80fb      	strh	r3, [r7, #6]
 8012c8a:	e008      	b.n	8012c9e <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8012c8c:	88fb      	ldrh	r3, [r7, #6]
 8012c8e:	3b50      	subs	r3, #80	; 0x50
 8012c90:	80fb      	strh	r3, [r7, #6]
 8012c92:	e004      	b.n	8012c9e <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8012c94:	88fb      	ldrh	r3, [r7, #6]
 8012c96:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8012c9a:	80fb      	strh	r3, [r7, #6]
 8012c9c:	bf00      	nop
			}
			break;
 8012c9e:	e008      	b.n	8012cb2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8012ca0:	89fb      	ldrh	r3, [r7, #14]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d195      	bne.n	8012bd2 <ff_wtoupper+0x1a>
 8012ca6:	8a3b      	ldrh	r3, [r7, #16]
 8012ca8:	005b      	lsls	r3, r3, #1
 8012caa:	697a      	ldr	r2, [r7, #20]
 8012cac:	4413      	add	r3, r2
 8012cae:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8012cb0:	e78f      	b.n	8012bd2 <ff_wtoupper+0x1a>
			break;
 8012cb2:	bf00      	nop
	}

	return chr;
 8012cb4:	88fb      	ldrh	r3, [r7, #6]
}
 8012cb6:	4618      	mov	r0, r3
 8012cb8:	371c      	adds	r7, #28
 8012cba:	46bd      	mov	sp, r7
 8012cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cc0:	4770      	bx	lr
 8012cc2:	bf00      	nop
 8012cc4:	0801eda0 	.word	0x0801eda0
 8012cc8:	0801ef94 	.word	0x0801ef94

08012ccc <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 8012ccc:	b580      	push	{r7, lr}
 8012cce:	b084      	sub	sp, #16
 8012cd0:	af00      	add	r7, sp, #0
 8012cd2:	4603      	mov	r3, r0
 8012cd4:	6039      	str	r1, [r7, #0]
 8012cd6:	71fb      	strb	r3, [r7, #7]

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
 8012cd8:	2200      	movs	r2, #0
 8012cda:	2101      	movs	r1, #1
 8012cdc:	2001      	movs	r0, #1
 8012cde:	f000 f978 	bl	8012fd2 <osSemaphoreNew>
 8012ce2:	4602      	mov	r2, r0
 8012ce4:	683b      	ldr	r3, [r7, #0]
 8012ce6:	601a      	str	r2, [r3, #0]
#endif

#endif
    ret = (*sobj != NULL);
 8012ce8:	683b      	ldr	r3, [r7, #0]
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	bf14      	ite	ne
 8012cf0:	2301      	movne	r3, #1
 8012cf2:	2300      	moveq	r3, #0
 8012cf4:	b2db      	uxtb	r3, r3
 8012cf6:	60fb      	str	r3, [r7, #12]

    return ret;
 8012cf8:	68fb      	ldr	r3, [r7, #12]
}
 8012cfa:	4618      	mov	r0, r3
 8012cfc:	3710      	adds	r7, #16
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	bd80      	pop	{r7, pc}

08012d02 <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 8012d02:	b580      	push	{r7, lr}
 8012d04:	b082      	sub	sp, #8
 8012d06:	af00      	add	r7, sp, #0
 8012d08:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8012d0a:	6878      	ldr	r0, [r7, #4]
 8012d0c:	f000 fa80 	bl	8013210 <osSemaphoreDelete>
#endif
    return 1;
 8012d10:	2301      	movs	r3, #1
}
 8012d12:	4618      	mov	r0, r3
 8012d14:	3708      	adds	r7, #8
 8012d16:	46bd      	mov	sp, r7
 8012d18:	bd80      	pop	{r7, pc}

08012d1a <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8012d1a:	b580      	push	{r7, lr}
 8012d1c:	b084      	sub	sp, #16
 8012d1e:	af00      	add	r7, sp, #0
 8012d20:	6078      	str	r0, [r7, #4]
  int ret = 0;
 8012d22:	2300      	movs	r3, #0
 8012d24:	60fb      	str	r3, [r7, #12]
#else

#if _USE_MUTEX
   if(osMutexAcquire(sobj, _FS_TIMEOUT) == osOK)
#else
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
 8012d26:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8012d2a:	6878      	ldr	r0, [r7, #4]
 8012d2c:	f000 f9da 	bl	80130e4 <osSemaphoreAcquire>
 8012d30:	4603      	mov	r3, r0
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d101      	bne.n	8012d3a <ff_req_grant+0x20>
#endif

#endif
  {
    ret = 1;
 8012d36:	2301      	movs	r3, #1
 8012d38:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8012d3a:	68fb      	ldr	r3, [r7, #12]
}
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	3710      	adds	r7, #16
 8012d40:	46bd      	mov	sp, r7
 8012d42:	bd80      	pop	{r7, pc}

08012d44 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8012d44:	b580      	push	{r7, lr}
 8012d46:	b082      	sub	sp, #8
 8012d48:	af00      	add	r7, sp, #0
 8012d4a:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8012d4c:	6878      	ldr	r0, [r7, #4]
 8012d4e:	f000 fa1b 	bl	8013188 <osSemaphoreRelease>
#endif
}
 8012d52:	bf00      	nop
 8012d54:	3708      	adds	r7, #8
 8012d56:	46bd      	mov	sp, r7
 8012d58:	bd80      	pop	{r7, pc}
	...

08012d5c <__NVIC_SetPriority>:
{
 8012d5c:	b480      	push	{r7}
 8012d5e:	b083      	sub	sp, #12
 8012d60:	af00      	add	r7, sp, #0
 8012d62:	4603      	mov	r3, r0
 8012d64:	6039      	str	r1, [r7, #0]
 8012d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	db0a      	blt.n	8012d86 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012d70:	683b      	ldr	r3, [r7, #0]
 8012d72:	b2da      	uxtb	r2, r3
 8012d74:	490c      	ldr	r1, [pc, #48]	; (8012da8 <__NVIC_SetPriority+0x4c>)
 8012d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012d7a:	0112      	lsls	r2, r2, #4
 8012d7c:	b2d2      	uxtb	r2, r2
 8012d7e:	440b      	add	r3, r1
 8012d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012d84:	e00a      	b.n	8012d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012d86:	683b      	ldr	r3, [r7, #0]
 8012d88:	b2da      	uxtb	r2, r3
 8012d8a:	4908      	ldr	r1, [pc, #32]	; (8012dac <__NVIC_SetPriority+0x50>)
 8012d8c:	79fb      	ldrb	r3, [r7, #7]
 8012d8e:	f003 030f 	and.w	r3, r3, #15
 8012d92:	3b04      	subs	r3, #4
 8012d94:	0112      	lsls	r2, r2, #4
 8012d96:	b2d2      	uxtb	r2, r2
 8012d98:	440b      	add	r3, r1
 8012d9a:	761a      	strb	r2, [r3, #24]
}
 8012d9c:	bf00      	nop
 8012d9e:	370c      	adds	r7, #12
 8012da0:	46bd      	mov	sp, r7
 8012da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da6:	4770      	bx	lr
 8012da8:	e000e100 	.word	0xe000e100
 8012dac:	e000ed00 	.word	0xe000ed00

08012db0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8012db0:	b580      	push	{r7, lr}
 8012db2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012db4:	4b05      	ldr	r3, [pc, #20]	; (8012dcc <SysTick_Handler+0x1c>)
 8012db6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012db8:	f002 fcae 	bl	8015718 <xTaskGetSchedulerState>
 8012dbc:	4603      	mov	r3, r0
 8012dbe:	2b01      	cmp	r3, #1
 8012dc0:	d001      	beq.n	8012dc6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8012dc2:	f003 fcd1 	bl	8016768 <xPortSysTickHandler>
  }
}
 8012dc6:	bf00      	nop
 8012dc8:	bd80      	pop	{r7, pc}
 8012dca:	bf00      	nop
 8012dcc:	e000e010 	.word	0xe000e010

08012dd0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8012dd4:	2100      	movs	r1, #0
 8012dd6:	f06f 0004 	mvn.w	r0, #4
 8012dda:	f7ff ffbf 	bl	8012d5c <__NVIC_SetPriority>
#endif
}
 8012dde:	bf00      	nop
 8012de0:	bd80      	pop	{r7, pc}
	...

08012de4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8012de4:	b480      	push	{r7}
 8012de6:	b083      	sub	sp, #12
 8012de8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012dea:	f3ef 8305 	mrs	r3, IPSR
 8012dee:	603b      	str	r3, [r7, #0]
  return(result);
 8012df0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d003      	beq.n	8012dfe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8012df6:	f06f 0305 	mvn.w	r3, #5
 8012dfa:	607b      	str	r3, [r7, #4]
 8012dfc:	e00c      	b.n	8012e18 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8012dfe:	4b0a      	ldr	r3, [pc, #40]	; (8012e28 <osKernelInitialize+0x44>)
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d105      	bne.n	8012e12 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012e06:	4b08      	ldr	r3, [pc, #32]	; (8012e28 <osKernelInitialize+0x44>)
 8012e08:	2201      	movs	r2, #1
 8012e0a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012e0c:	2300      	movs	r3, #0
 8012e0e:	607b      	str	r3, [r7, #4]
 8012e10:	e002      	b.n	8012e18 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012e12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e16:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012e18:	687b      	ldr	r3, [r7, #4]
}
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	370c      	adds	r7, #12
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e24:	4770      	bx	lr
 8012e26:	bf00      	nop
 8012e28:	200027ec 	.word	0x200027ec

08012e2c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b082      	sub	sp, #8
 8012e30:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012e32:	f3ef 8305 	mrs	r3, IPSR
 8012e36:	603b      	str	r3, [r7, #0]
  return(result);
 8012e38:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d003      	beq.n	8012e46 <osKernelStart+0x1a>
    stat = osErrorISR;
 8012e3e:	f06f 0305 	mvn.w	r3, #5
 8012e42:	607b      	str	r3, [r7, #4]
 8012e44:	e010      	b.n	8012e68 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012e46:	4b0b      	ldr	r3, [pc, #44]	; (8012e74 <osKernelStart+0x48>)
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	2b01      	cmp	r3, #1
 8012e4c:	d109      	bne.n	8012e62 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012e4e:	f7ff ffbf 	bl	8012dd0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012e52:	4b08      	ldr	r3, [pc, #32]	; (8012e74 <osKernelStart+0x48>)
 8012e54:	2202      	movs	r2, #2
 8012e56:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012e58:	f001 fe7c 	bl	8014b54 <vTaskStartScheduler>
      stat = osOK;
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	607b      	str	r3, [r7, #4]
 8012e60:	e002      	b.n	8012e68 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8012e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e66:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012e68:	687b      	ldr	r3, [r7, #4]
}
 8012e6a:	4618      	mov	r0, r3
 8012e6c:	3708      	adds	r7, #8
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	bd80      	pop	{r7, pc}
 8012e72:	bf00      	nop
 8012e74:	200027ec 	.word	0x200027ec

08012e78 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012e78:	b580      	push	{r7, lr}
 8012e7a:	b08e      	sub	sp, #56	; 0x38
 8012e7c:	af04      	add	r7, sp, #16
 8012e7e:	60f8      	str	r0, [r7, #12]
 8012e80:	60b9      	str	r1, [r7, #8]
 8012e82:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012e84:	2300      	movs	r3, #0
 8012e86:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012e88:	f3ef 8305 	mrs	r3, IPSR
 8012e8c:	617b      	str	r3, [r7, #20]
  return(result);
 8012e8e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012e90:	2b00      	cmp	r3, #0
 8012e92:	d17e      	bne.n	8012f92 <osThreadNew+0x11a>
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d07b      	beq.n	8012f92 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012e9a:	2380      	movs	r3, #128	; 0x80
 8012e9c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012e9e:	2318      	movs	r3, #24
 8012ea0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8012ea6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012eaa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012eac:	687b      	ldr	r3, [r7, #4]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d045      	beq.n	8012f3e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8012eb2:	687b      	ldr	r3, [r7, #4]
 8012eb4:	681b      	ldr	r3, [r3, #0]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d002      	beq.n	8012ec0 <osThreadNew+0x48>
        name = attr->name;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	681b      	ldr	r3, [r3, #0]
 8012ebe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	699b      	ldr	r3, [r3, #24]
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d002      	beq.n	8012ece <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	699b      	ldr	r3, [r3, #24]
 8012ecc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012ece:	69fb      	ldr	r3, [r7, #28]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d008      	beq.n	8012ee6 <osThreadNew+0x6e>
 8012ed4:	69fb      	ldr	r3, [r7, #28]
 8012ed6:	2b38      	cmp	r3, #56	; 0x38
 8012ed8:	d805      	bhi.n	8012ee6 <osThreadNew+0x6e>
 8012eda:	687b      	ldr	r3, [r7, #4]
 8012edc:	685b      	ldr	r3, [r3, #4]
 8012ede:	f003 0301 	and.w	r3, r3, #1
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d001      	beq.n	8012eea <osThreadNew+0x72>
        return (NULL);
 8012ee6:	2300      	movs	r3, #0
 8012ee8:	e054      	b.n	8012f94 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	695b      	ldr	r3, [r3, #20]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d003      	beq.n	8012efa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012ef2:	687b      	ldr	r3, [r7, #4]
 8012ef4:	695b      	ldr	r3, [r3, #20]
 8012ef6:	089b      	lsrs	r3, r3, #2
 8012ef8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	689b      	ldr	r3, [r3, #8]
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d00e      	beq.n	8012f20 <osThreadNew+0xa8>
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	68db      	ldr	r3, [r3, #12]
 8012f06:	2bbf      	cmp	r3, #191	; 0xbf
 8012f08:	d90a      	bls.n	8012f20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012f0a:	687b      	ldr	r3, [r7, #4]
 8012f0c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012f0e:	2b00      	cmp	r3, #0
 8012f10:	d006      	beq.n	8012f20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	695b      	ldr	r3, [r3, #20]
 8012f16:	2b00      	cmp	r3, #0
 8012f18:	d002      	beq.n	8012f20 <osThreadNew+0xa8>
        mem = 1;
 8012f1a:	2301      	movs	r3, #1
 8012f1c:	61bb      	str	r3, [r7, #24]
 8012f1e:	e010      	b.n	8012f42 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	689b      	ldr	r3, [r3, #8]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d10c      	bne.n	8012f42 <osThreadNew+0xca>
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	68db      	ldr	r3, [r3, #12]
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d108      	bne.n	8012f42 <osThreadNew+0xca>
 8012f30:	687b      	ldr	r3, [r7, #4]
 8012f32:	691b      	ldr	r3, [r3, #16]
 8012f34:	2b00      	cmp	r3, #0
 8012f36:	d104      	bne.n	8012f42 <osThreadNew+0xca>
          mem = 0;
 8012f38:	2300      	movs	r3, #0
 8012f3a:	61bb      	str	r3, [r7, #24]
 8012f3c:	e001      	b.n	8012f42 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8012f3e:	2300      	movs	r3, #0
 8012f40:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012f42:	69bb      	ldr	r3, [r7, #24]
 8012f44:	2b01      	cmp	r3, #1
 8012f46:	d110      	bne.n	8012f6a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012f4c:	687a      	ldr	r2, [r7, #4]
 8012f4e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012f50:	9202      	str	r2, [sp, #8]
 8012f52:	9301      	str	r3, [sp, #4]
 8012f54:	69fb      	ldr	r3, [r7, #28]
 8012f56:	9300      	str	r3, [sp, #0]
 8012f58:	68bb      	ldr	r3, [r7, #8]
 8012f5a:	6a3a      	ldr	r2, [r7, #32]
 8012f5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012f5e:	68f8      	ldr	r0, [r7, #12]
 8012f60:	f001 fba2 	bl	80146a8 <xTaskCreateStatic>
 8012f64:	4603      	mov	r3, r0
 8012f66:	613b      	str	r3, [r7, #16]
 8012f68:	e013      	b.n	8012f92 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8012f6a:	69bb      	ldr	r3, [r7, #24]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d110      	bne.n	8012f92 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012f70:	6a3b      	ldr	r3, [r7, #32]
 8012f72:	b29a      	uxth	r2, r3
 8012f74:	f107 0310 	add.w	r3, r7, #16
 8012f78:	9301      	str	r3, [sp, #4]
 8012f7a:	69fb      	ldr	r3, [r7, #28]
 8012f7c:	9300      	str	r3, [sp, #0]
 8012f7e:	68bb      	ldr	r3, [r7, #8]
 8012f80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012f82:	68f8      	ldr	r0, [r7, #12]
 8012f84:	f001 fbed 	bl	8014762 <xTaskCreate>
 8012f88:	4603      	mov	r3, r0
 8012f8a:	2b01      	cmp	r3, #1
 8012f8c:	d001      	beq.n	8012f92 <osThreadNew+0x11a>
            hTask = NULL;
 8012f8e:	2300      	movs	r3, #0
 8012f90:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012f92:	693b      	ldr	r3, [r7, #16]
}
 8012f94:	4618      	mov	r0, r3
 8012f96:	3728      	adds	r7, #40	; 0x28
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	bd80      	pop	{r7, pc}

08012f9c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8012f9c:	b580      	push	{r7, lr}
 8012f9e:	b084      	sub	sp, #16
 8012fa0:	af00      	add	r7, sp, #0
 8012fa2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012fa4:	f3ef 8305 	mrs	r3, IPSR
 8012fa8:	60bb      	str	r3, [r7, #8]
  return(result);
 8012faa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012fac:	2b00      	cmp	r3, #0
 8012fae:	d003      	beq.n	8012fb8 <osDelay+0x1c>
    stat = osErrorISR;
 8012fb0:	f06f 0305 	mvn.w	r3, #5
 8012fb4:	60fb      	str	r3, [r7, #12]
 8012fb6:	e007      	b.n	8012fc8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8012fb8:	2300      	movs	r3, #0
 8012fba:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	d002      	beq.n	8012fc8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8012fc2:	6878      	ldr	r0, [r7, #4]
 8012fc4:	f001 fd2c 	bl	8014a20 <vTaskDelay>
    }
  }

  return (stat);
 8012fc8:	68fb      	ldr	r3, [r7, #12]
}
 8012fca:	4618      	mov	r0, r3
 8012fcc:	3710      	adds	r7, #16
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	bd80      	pop	{r7, pc}

08012fd2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8012fd2:	b580      	push	{r7, lr}
 8012fd4:	b08a      	sub	sp, #40	; 0x28
 8012fd6:	af02      	add	r7, sp, #8
 8012fd8:	60f8      	str	r0, [r7, #12]
 8012fda:	60b9      	str	r1, [r7, #8]
 8012fdc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8012fde:	2300      	movs	r3, #0
 8012fe0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012fe2:	f3ef 8305 	mrs	r3, IPSR
 8012fe6:	613b      	str	r3, [r7, #16]
  return(result);
 8012fe8:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d175      	bne.n	80130da <osSemaphoreNew+0x108>
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d072      	beq.n	80130da <osSemaphoreNew+0x108>
 8012ff4:	68ba      	ldr	r2, [r7, #8]
 8012ff6:	68fb      	ldr	r3, [r7, #12]
 8012ff8:	429a      	cmp	r2, r3
 8012ffa:	d86e      	bhi.n	80130da <osSemaphoreNew+0x108>
    mem = -1;
 8012ffc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013000:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013002:	687b      	ldr	r3, [r7, #4]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d015      	beq.n	8013034 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	689b      	ldr	r3, [r3, #8]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d006      	beq.n	801301e <osSemaphoreNew+0x4c>
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	68db      	ldr	r3, [r3, #12]
 8013014:	2b4f      	cmp	r3, #79	; 0x4f
 8013016:	d902      	bls.n	801301e <osSemaphoreNew+0x4c>
        mem = 1;
 8013018:	2301      	movs	r3, #1
 801301a:	61bb      	str	r3, [r7, #24]
 801301c:	e00c      	b.n	8013038 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801301e:	687b      	ldr	r3, [r7, #4]
 8013020:	689b      	ldr	r3, [r3, #8]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d108      	bne.n	8013038 <osSemaphoreNew+0x66>
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	68db      	ldr	r3, [r3, #12]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d104      	bne.n	8013038 <osSemaphoreNew+0x66>
          mem = 0;
 801302e:	2300      	movs	r3, #0
 8013030:	61bb      	str	r3, [r7, #24]
 8013032:	e001      	b.n	8013038 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8013034:	2300      	movs	r3, #0
 8013036:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8013038:	69bb      	ldr	r3, [r7, #24]
 801303a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801303e:	d04c      	beq.n	80130da <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8013040:	68fb      	ldr	r3, [r7, #12]
 8013042:	2b01      	cmp	r3, #1
 8013044:	d128      	bne.n	8013098 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8013046:	69bb      	ldr	r3, [r7, #24]
 8013048:	2b01      	cmp	r3, #1
 801304a:	d10a      	bne.n	8013062 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	689b      	ldr	r3, [r3, #8]
 8013050:	2203      	movs	r2, #3
 8013052:	9200      	str	r2, [sp, #0]
 8013054:	2200      	movs	r2, #0
 8013056:	2100      	movs	r1, #0
 8013058:	2001      	movs	r0, #1
 801305a:	f000 fb7f 	bl	801375c <xQueueGenericCreateStatic>
 801305e:	61f8      	str	r0, [r7, #28]
 8013060:	e005      	b.n	801306e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8013062:	2203      	movs	r2, #3
 8013064:	2100      	movs	r1, #0
 8013066:	2001      	movs	r0, #1
 8013068:	f000 fbf0 	bl	801384c <xQueueGenericCreate>
 801306c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 801306e:	69fb      	ldr	r3, [r7, #28]
 8013070:	2b00      	cmp	r3, #0
 8013072:	d022      	beq.n	80130ba <osSemaphoreNew+0xe8>
 8013074:	68bb      	ldr	r3, [r7, #8]
 8013076:	2b00      	cmp	r3, #0
 8013078:	d01f      	beq.n	80130ba <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 801307a:	2300      	movs	r3, #0
 801307c:	2200      	movs	r2, #0
 801307e:	2100      	movs	r1, #0
 8013080:	69f8      	ldr	r0, [r7, #28]
 8013082:	f000 fcab 	bl	80139dc <xQueueGenericSend>
 8013086:	4603      	mov	r3, r0
 8013088:	2b01      	cmp	r3, #1
 801308a:	d016      	beq.n	80130ba <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 801308c:	69f8      	ldr	r0, [r7, #28]
 801308e:	f001 f937 	bl	8014300 <vQueueDelete>
            hSemaphore = NULL;
 8013092:	2300      	movs	r3, #0
 8013094:	61fb      	str	r3, [r7, #28]
 8013096:	e010      	b.n	80130ba <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8013098:	69bb      	ldr	r3, [r7, #24]
 801309a:	2b01      	cmp	r3, #1
 801309c:	d108      	bne.n	80130b0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	689b      	ldr	r3, [r3, #8]
 80130a2:	461a      	mov	r2, r3
 80130a4:	68b9      	ldr	r1, [r7, #8]
 80130a6:	68f8      	ldr	r0, [r7, #12]
 80130a8:	f000 fc2d 	bl	8013906 <xQueueCreateCountingSemaphoreStatic>
 80130ac:	61f8      	str	r0, [r7, #28]
 80130ae:	e004      	b.n	80130ba <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80130b0:	68b9      	ldr	r1, [r7, #8]
 80130b2:	68f8      	ldr	r0, [r7, #12]
 80130b4:	f000 fc5e 	bl	8013974 <xQueueCreateCountingSemaphore>
 80130b8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80130ba:	69fb      	ldr	r3, [r7, #28]
 80130bc:	2b00      	cmp	r3, #0
 80130be:	d00c      	beq.n	80130da <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80130c0:	687b      	ldr	r3, [r7, #4]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d003      	beq.n	80130ce <osSemaphoreNew+0xfc>
          name = attr->name;
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	617b      	str	r3, [r7, #20]
 80130cc:	e001      	b.n	80130d2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80130ce:	2300      	movs	r3, #0
 80130d0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80130d2:	6979      	ldr	r1, [r7, #20]
 80130d4:	69f8      	ldr	r0, [r7, #28]
 80130d6:	f001 fa5f 	bl	8014598 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80130da:	69fb      	ldr	r3, [r7, #28]
}
 80130dc:	4618      	mov	r0, r3
 80130de:	3720      	adds	r7, #32
 80130e0:	46bd      	mov	sp, r7
 80130e2:	bd80      	pop	{r7, pc}

080130e4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b086      	sub	sp, #24
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
 80130ec:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80130f2:	2300      	movs	r3, #0
 80130f4:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80130f6:	693b      	ldr	r3, [r7, #16]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	d103      	bne.n	8013104 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80130fc:	f06f 0303 	mvn.w	r3, #3
 8013100:	617b      	str	r3, [r7, #20]
 8013102:	e039      	b.n	8013178 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013104:	f3ef 8305 	mrs	r3, IPSR
 8013108:	60fb      	str	r3, [r7, #12]
  return(result);
 801310a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 801310c:	2b00      	cmp	r3, #0
 801310e:	d022      	beq.n	8013156 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8013110:	683b      	ldr	r3, [r7, #0]
 8013112:	2b00      	cmp	r3, #0
 8013114:	d003      	beq.n	801311e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8013116:	f06f 0303 	mvn.w	r3, #3
 801311a:	617b      	str	r3, [r7, #20]
 801311c:	e02c      	b.n	8013178 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 801311e:	2300      	movs	r3, #0
 8013120:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8013122:	f107 0308 	add.w	r3, r7, #8
 8013126:	461a      	mov	r2, r3
 8013128:	2100      	movs	r1, #0
 801312a:	6938      	ldr	r0, [r7, #16]
 801312c:	f001 f868 	bl	8014200 <xQueueReceiveFromISR>
 8013130:	4603      	mov	r3, r0
 8013132:	2b01      	cmp	r3, #1
 8013134:	d003      	beq.n	801313e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8013136:	f06f 0302 	mvn.w	r3, #2
 801313a:	617b      	str	r3, [r7, #20]
 801313c:	e01c      	b.n	8013178 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 801313e:	68bb      	ldr	r3, [r7, #8]
 8013140:	2b00      	cmp	r3, #0
 8013142:	d019      	beq.n	8013178 <osSemaphoreAcquire+0x94>
 8013144:	4b0f      	ldr	r3, [pc, #60]	; (8013184 <osSemaphoreAcquire+0xa0>)
 8013146:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801314a:	601a      	str	r2, [r3, #0]
 801314c:	f3bf 8f4f 	dsb	sy
 8013150:	f3bf 8f6f 	isb	sy
 8013154:	e010      	b.n	8013178 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8013156:	6839      	ldr	r1, [r7, #0]
 8013158:	6938      	ldr	r0, [r7, #16]
 801315a:	f000 ff45 	bl	8013fe8 <xQueueSemaphoreTake>
 801315e:	4603      	mov	r3, r0
 8013160:	2b01      	cmp	r3, #1
 8013162:	d009      	beq.n	8013178 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8013164:	683b      	ldr	r3, [r7, #0]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d003      	beq.n	8013172 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 801316a:	f06f 0301 	mvn.w	r3, #1
 801316e:	617b      	str	r3, [r7, #20]
 8013170:	e002      	b.n	8013178 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8013172:	f06f 0302 	mvn.w	r3, #2
 8013176:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8013178:	697b      	ldr	r3, [r7, #20]
}
 801317a:	4618      	mov	r0, r3
 801317c:	3718      	adds	r7, #24
 801317e:	46bd      	mov	sp, r7
 8013180:	bd80      	pop	{r7, pc}
 8013182:	bf00      	nop
 8013184:	e000ed04 	.word	0xe000ed04

08013188 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8013188:	b580      	push	{r7, lr}
 801318a:	b086      	sub	sp, #24
 801318c:	af00      	add	r7, sp, #0
 801318e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8013194:	2300      	movs	r3, #0
 8013196:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8013198:	693b      	ldr	r3, [r7, #16]
 801319a:	2b00      	cmp	r3, #0
 801319c:	d103      	bne.n	80131a6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 801319e:	f06f 0303 	mvn.w	r3, #3
 80131a2:	617b      	str	r3, [r7, #20]
 80131a4:	e02c      	b.n	8013200 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80131a6:	f3ef 8305 	mrs	r3, IPSR
 80131aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80131ac:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d01a      	beq.n	80131e8 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80131b2:	2300      	movs	r3, #0
 80131b4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80131b6:	f107 0308 	add.w	r3, r7, #8
 80131ba:	4619      	mov	r1, r3
 80131bc:	6938      	ldr	r0, [r7, #16]
 80131be:	f000 fda6 	bl	8013d0e <xQueueGiveFromISR>
 80131c2:	4603      	mov	r3, r0
 80131c4:	2b01      	cmp	r3, #1
 80131c6:	d003      	beq.n	80131d0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80131c8:	f06f 0302 	mvn.w	r3, #2
 80131cc:	617b      	str	r3, [r7, #20]
 80131ce:	e017      	b.n	8013200 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80131d0:	68bb      	ldr	r3, [r7, #8]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d014      	beq.n	8013200 <osSemaphoreRelease+0x78>
 80131d6:	4b0d      	ldr	r3, [pc, #52]	; (801320c <osSemaphoreRelease+0x84>)
 80131d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80131dc:	601a      	str	r2, [r3, #0]
 80131de:	f3bf 8f4f 	dsb	sy
 80131e2:	f3bf 8f6f 	isb	sy
 80131e6:	e00b      	b.n	8013200 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80131e8:	2300      	movs	r3, #0
 80131ea:	2200      	movs	r2, #0
 80131ec:	2100      	movs	r1, #0
 80131ee:	6938      	ldr	r0, [r7, #16]
 80131f0:	f000 fbf4 	bl	80139dc <xQueueGenericSend>
 80131f4:	4603      	mov	r3, r0
 80131f6:	2b01      	cmp	r3, #1
 80131f8:	d002      	beq.n	8013200 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80131fa:	f06f 0302 	mvn.w	r3, #2
 80131fe:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8013200:	697b      	ldr	r3, [r7, #20]
}
 8013202:	4618      	mov	r0, r3
 8013204:	3718      	adds	r7, #24
 8013206:	46bd      	mov	sp, r7
 8013208:	bd80      	pop	{r7, pc}
 801320a:	bf00      	nop
 801320c:	e000ed04 	.word	0xe000ed04

08013210 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8013210:	b580      	push	{r7, lr}
 8013212:	b086      	sub	sp, #24
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801321c:	f3ef 8305 	mrs	r3, IPSR
 8013220:	60fb      	str	r3, [r7, #12]
  return(result);
 8013222:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8013224:	2b00      	cmp	r3, #0
 8013226:	d003      	beq.n	8013230 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8013228:	f06f 0305 	mvn.w	r3, #5
 801322c:	617b      	str	r3, [r7, #20]
 801322e:	e00e      	b.n	801324e <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8013230:	693b      	ldr	r3, [r7, #16]
 8013232:	2b00      	cmp	r3, #0
 8013234:	d103      	bne.n	801323e <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8013236:	f06f 0303 	mvn.w	r3, #3
 801323a:	617b      	str	r3, [r7, #20]
 801323c:	e007      	b.n	801324e <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 801323e:	6938      	ldr	r0, [r7, #16]
 8013240:	f001 f9d4 	bl	80145ec <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8013244:	2300      	movs	r3, #0
 8013246:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8013248:	6938      	ldr	r0, [r7, #16]
 801324a:	f001 f859 	bl	8014300 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 801324e:	697b      	ldr	r3, [r7, #20]
}
 8013250:	4618      	mov	r0, r3
 8013252:	3718      	adds	r7, #24
 8013254:	46bd      	mov	sp, r7
 8013256:	bd80      	pop	{r7, pc}

08013258 <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8013258:	b580      	push	{r7, lr}
 801325a:	b08a      	sub	sp, #40	; 0x28
 801325c:	af02      	add	r7, sp, #8
 801325e:	60f8      	str	r0, [r7, #12]
 8013260:	60b9      	str	r1, [r7, #8]
 8013262:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8013264:	2300      	movs	r3, #0
 8013266:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013268:	f3ef 8305 	mrs	r3, IPSR
 801326c:	613b      	str	r3, [r7, #16]
  return(result);
 801326e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8013270:	2b00      	cmp	r3, #0
 8013272:	d15f      	bne.n	8013334 <osMessageQueueNew+0xdc>
 8013274:	68fb      	ldr	r3, [r7, #12]
 8013276:	2b00      	cmp	r3, #0
 8013278:	d05c      	beq.n	8013334 <osMessageQueueNew+0xdc>
 801327a:	68bb      	ldr	r3, [r7, #8]
 801327c:	2b00      	cmp	r3, #0
 801327e:	d059      	beq.n	8013334 <osMessageQueueNew+0xdc>
    mem = -1;
 8013280:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013284:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	2b00      	cmp	r3, #0
 801328a:	d029      	beq.n	80132e0 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	689b      	ldr	r3, [r3, #8]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d012      	beq.n	80132ba <osMessageQueueNew+0x62>
 8013294:	687b      	ldr	r3, [r7, #4]
 8013296:	68db      	ldr	r3, [r3, #12]
 8013298:	2b4f      	cmp	r3, #79	; 0x4f
 801329a:	d90e      	bls.n	80132ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d00a      	beq.n	80132ba <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	695a      	ldr	r2, [r3, #20]
 80132a8:	68fb      	ldr	r3, [r7, #12]
 80132aa:	68b9      	ldr	r1, [r7, #8]
 80132ac:	fb01 f303 	mul.w	r3, r1, r3
 80132b0:	429a      	cmp	r2, r3
 80132b2:	d302      	bcc.n	80132ba <osMessageQueueNew+0x62>
        mem = 1;
 80132b4:	2301      	movs	r3, #1
 80132b6:	61bb      	str	r3, [r7, #24]
 80132b8:	e014      	b.n	80132e4 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	689b      	ldr	r3, [r3, #8]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d110      	bne.n	80132e4 <osMessageQueueNew+0x8c>
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	68db      	ldr	r3, [r3, #12]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	d10c      	bne.n	80132e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d108      	bne.n	80132e4 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	695b      	ldr	r3, [r3, #20]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d104      	bne.n	80132e4 <osMessageQueueNew+0x8c>
          mem = 0;
 80132da:	2300      	movs	r3, #0
 80132dc:	61bb      	str	r3, [r7, #24]
 80132de:	e001      	b.n	80132e4 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80132e0:	2300      	movs	r3, #0
 80132e2:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80132e4:	69bb      	ldr	r3, [r7, #24]
 80132e6:	2b01      	cmp	r3, #1
 80132e8:	d10b      	bne.n	8013302 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	691a      	ldr	r2, [r3, #16]
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	689b      	ldr	r3, [r3, #8]
 80132f2:	2100      	movs	r1, #0
 80132f4:	9100      	str	r1, [sp, #0]
 80132f6:	68b9      	ldr	r1, [r7, #8]
 80132f8:	68f8      	ldr	r0, [r7, #12]
 80132fa:	f000 fa2f 	bl	801375c <xQueueGenericCreateStatic>
 80132fe:	61f8      	str	r0, [r7, #28]
 8013300:	e008      	b.n	8013314 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8013302:	69bb      	ldr	r3, [r7, #24]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d105      	bne.n	8013314 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8013308:	2200      	movs	r2, #0
 801330a:	68b9      	ldr	r1, [r7, #8]
 801330c:	68f8      	ldr	r0, [r7, #12]
 801330e:	f000 fa9d 	bl	801384c <xQueueGenericCreate>
 8013312:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8013314:	69fb      	ldr	r3, [r7, #28]
 8013316:	2b00      	cmp	r3, #0
 8013318:	d00c      	beq.n	8013334 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	2b00      	cmp	r3, #0
 801331e:	d003      	beq.n	8013328 <osMessageQueueNew+0xd0>
        name = attr->name;
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	681b      	ldr	r3, [r3, #0]
 8013324:	617b      	str	r3, [r7, #20]
 8013326:	e001      	b.n	801332c <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8013328:	2300      	movs	r3, #0
 801332a:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 801332c:	6979      	ldr	r1, [r7, #20]
 801332e:	69f8      	ldr	r0, [r7, #28]
 8013330:	f001 f932 	bl	8014598 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8013334:	69fb      	ldr	r3, [r7, #28]
}
 8013336:	4618      	mov	r0, r3
 8013338:	3720      	adds	r7, #32
 801333a:	46bd      	mov	sp, r7
 801333c:	bd80      	pop	{r7, pc}
	...

08013340 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8013340:	b580      	push	{r7, lr}
 8013342:	b088      	sub	sp, #32
 8013344:	af00      	add	r7, sp, #0
 8013346:	60f8      	str	r0, [r7, #12]
 8013348:	60b9      	str	r1, [r7, #8]
 801334a:	603b      	str	r3, [r7, #0]
 801334c:	4613      	mov	r3, r2
 801334e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013354:	2300      	movs	r3, #0
 8013356:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013358:	f3ef 8305 	mrs	r3, IPSR
 801335c:	617b      	str	r3, [r7, #20]
  return(result);
 801335e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8013360:	2b00      	cmp	r3, #0
 8013362:	d028      	beq.n	80133b6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013364:	69bb      	ldr	r3, [r7, #24]
 8013366:	2b00      	cmp	r3, #0
 8013368:	d005      	beq.n	8013376 <osMessageQueuePut+0x36>
 801336a:	68bb      	ldr	r3, [r7, #8]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d002      	beq.n	8013376 <osMessageQueuePut+0x36>
 8013370:	683b      	ldr	r3, [r7, #0]
 8013372:	2b00      	cmp	r3, #0
 8013374:	d003      	beq.n	801337e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8013376:	f06f 0303 	mvn.w	r3, #3
 801337a:	61fb      	str	r3, [r7, #28]
 801337c:	e038      	b.n	80133f0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 801337e:	2300      	movs	r3, #0
 8013380:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8013382:	f107 0210 	add.w	r2, r7, #16
 8013386:	2300      	movs	r3, #0
 8013388:	68b9      	ldr	r1, [r7, #8]
 801338a:	69b8      	ldr	r0, [r7, #24]
 801338c:	f000 fc24 	bl	8013bd8 <xQueueGenericSendFromISR>
 8013390:	4603      	mov	r3, r0
 8013392:	2b01      	cmp	r3, #1
 8013394:	d003      	beq.n	801339e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8013396:	f06f 0302 	mvn.w	r3, #2
 801339a:	61fb      	str	r3, [r7, #28]
 801339c:	e028      	b.n	80133f0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 801339e:	693b      	ldr	r3, [r7, #16]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d025      	beq.n	80133f0 <osMessageQueuePut+0xb0>
 80133a4:	4b15      	ldr	r3, [pc, #84]	; (80133fc <osMessageQueuePut+0xbc>)
 80133a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80133aa:	601a      	str	r2, [r3, #0]
 80133ac:	f3bf 8f4f 	dsb	sy
 80133b0:	f3bf 8f6f 	isb	sy
 80133b4:	e01c      	b.n	80133f0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80133b6:	69bb      	ldr	r3, [r7, #24]
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	d002      	beq.n	80133c2 <osMessageQueuePut+0x82>
 80133bc:	68bb      	ldr	r3, [r7, #8]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	d103      	bne.n	80133ca <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80133c2:	f06f 0303 	mvn.w	r3, #3
 80133c6:	61fb      	str	r3, [r7, #28]
 80133c8:	e012      	b.n	80133f0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80133ca:	2300      	movs	r3, #0
 80133cc:	683a      	ldr	r2, [r7, #0]
 80133ce:	68b9      	ldr	r1, [r7, #8]
 80133d0:	69b8      	ldr	r0, [r7, #24]
 80133d2:	f000 fb03 	bl	80139dc <xQueueGenericSend>
 80133d6:	4603      	mov	r3, r0
 80133d8:	2b01      	cmp	r3, #1
 80133da:	d009      	beq.n	80133f0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80133dc:	683b      	ldr	r3, [r7, #0]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d003      	beq.n	80133ea <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80133e2:	f06f 0301 	mvn.w	r3, #1
 80133e6:	61fb      	str	r3, [r7, #28]
 80133e8:	e002      	b.n	80133f0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80133ea:	f06f 0302 	mvn.w	r3, #2
 80133ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80133f0:	69fb      	ldr	r3, [r7, #28]
}
 80133f2:	4618      	mov	r0, r3
 80133f4:	3720      	adds	r7, #32
 80133f6:	46bd      	mov	sp, r7
 80133f8:	bd80      	pop	{r7, pc}
 80133fa:	bf00      	nop
 80133fc:	e000ed04 	.word	0xe000ed04

08013400 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8013400:	b580      	push	{r7, lr}
 8013402:	b088      	sub	sp, #32
 8013404:	af00      	add	r7, sp, #0
 8013406:	60f8      	str	r0, [r7, #12]
 8013408:	60b9      	str	r1, [r7, #8]
 801340a:	607a      	str	r2, [r7, #4]
 801340c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8013412:	2300      	movs	r3, #0
 8013414:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8013416:	f3ef 8305 	mrs	r3, IPSR
 801341a:	617b      	str	r3, [r7, #20]
  return(result);
 801341c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 801341e:	2b00      	cmp	r3, #0
 8013420:	d028      	beq.n	8013474 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8013422:	69bb      	ldr	r3, [r7, #24]
 8013424:	2b00      	cmp	r3, #0
 8013426:	d005      	beq.n	8013434 <osMessageQueueGet+0x34>
 8013428:	68bb      	ldr	r3, [r7, #8]
 801342a:	2b00      	cmp	r3, #0
 801342c:	d002      	beq.n	8013434 <osMessageQueueGet+0x34>
 801342e:	683b      	ldr	r3, [r7, #0]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d003      	beq.n	801343c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8013434:	f06f 0303 	mvn.w	r3, #3
 8013438:	61fb      	str	r3, [r7, #28]
 801343a:	e037      	b.n	80134ac <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 801343c:	2300      	movs	r3, #0
 801343e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8013440:	f107 0310 	add.w	r3, r7, #16
 8013444:	461a      	mov	r2, r3
 8013446:	68b9      	ldr	r1, [r7, #8]
 8013448:	69b8      	ldr	r0, [r7, #24]
 801344a:	f000 fed9 	bl	8014200 <xQueueReceiveFromISR>
 801344e:	4603      	mov	r3, r0
 8013450:	2b01      	cmp	r3, #1
 8013452:	d003      	beq.n	801345c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8013454:	f06f 0302 	mvn.w	r3, #2
 8013458:	61fb      	str	r3, [r7, #28]
 801345a:	e027      	b.n	80134ac <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 801345c:	693b      	ldr	r3, [r7, #16]
 801345e:	2b00      	cmp	r3, #0
 8013460:	d024      	beq.n	80134ac <osMessageQueueGet+0xac>
 8013462:	4b15      	ldr	r3, [pc, #84]	; (80134b8 <osMessageQueueGet+0xb8>)
 8013464:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013468:	601a      	str	r2, [r3, #0]
 801346a:	f3bf 8f4f 	dsb	sy
 801346e:	f3bf 8f6f 	isb	sy
 8013472:	e01b      	b.n	80134ac <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013474:	69bb      	ldr	r3, [r7, #24]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d002      	beq.n	8013480 <osMessageQueueGet+0x80>
 801347a:	68bb      	ldr	r3, [r7, #8]
 801347c:	2b00      	cmp	r3, #0
 801347e:	d103      	bne.n	8013488 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8013480:	f06f 0303 	mvn.w	r3, #3
 8013484:	61fb      	str	r3, [r7, #28]
 8013486:	e011      	b.n	80134ac <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013488:	683a      	ldr	r2, [r7, #0]
 801348a:	68b9      	ldr	r1, [r7, #8]
 801348c:	69b8      	ldr	r0, [r7, #24]
 801348e:	f000 fccb 	bl	8013e28 <xQueueReceive>
 8013492:	4603      	mov	r3, r0
 8013494:	2b01      	cmp	r3, #1
 8013496:	d009      	beq.n	80134ac <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8013498:	683b      	ldr	r3, [r7, #0]
 801349a:	2b00      	cmp	r3, #0
 801349c:	d003      	beq.n	80134a6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801349e:	f06f 0301 	mvn.w	r3, #1
 80134a2:	61fb      	str	r3, [r7, #28]
 80134a4:	e002      	b.n	80134ac <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80134a6:	f06f 0302 	mvn.w	r3, #2
 80134aa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80134ac:	69fb      	ldr	r3, [r7, #28]
}
 80134ae:	4618      	mov	r0, r3
 80134b0:	3720      	adds	r7, #32
 80134b2:	46bd      	mov	sp, r7
 80134b4:	bd80      	pop	{r7, pc}
 80134b6:	bf00      	nop
 80134b8:	e000ed04 	.word	0xe000ed04

080134bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80134bc:	b480      	push	{r7}
 80134be:	b085      	sub	sp, #20
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	60f8      	str	r0, [r7, #12]
 80134c4:	60b9      	str	r1, [r7, #8]
 80134c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80134c8:	68fb      	ldr	r3, [r7, #12]
 80134ca:	4a07      	ldr	r2, [pc, #28]	; (80134e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80134cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80134ce:	68bb      	ldr	r3, [r7, #8]
 80134d0:	4a06      	ldr	r2, [pc, #24]	; (80134ec <vApplicationGetIdleTaskMemory+0x30>)
 80134d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	2280      	movs	r2, #128	; 0x80
 80134d8:	601a      	str	r2, [r3, #0]
}
 80134da:	bf00      	nop
 80134dc:	3714      	adds	r7, #20
 80134de:	46bd      	mov	sp, r7
 80134e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e4:	4770      	bx	lr
 80134e6:	bf00      	nop
 80134e8:	200027f0 	.word	0x200027f0
 80134ec:	200028b0 	.word	0x200028b0

080134f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80134f0:	b480      	push	{r7}
 80134f2:	b085      	sub	sp, #20
 80134f4:	af00      	add	r7, sp, #0
 80134f6:	60f8      	str	r0, [r7, #12]
 80134f8:	60b9      	str	r1, [r7, #8]
 80134fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	4a07      	ldr	r2, [pc, #28]	; (801351c <vApplicationGetTimerTaskMemory+0x2c>)
 8013500:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8013502:	68bb      	ldr	r3, [r7, #8]
 8013504:	4a06      	ldr	r2, [pc, #24]	; (8013520 <vApplicationGetTimerTaskMemory+0x30>)
 8013506:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8013508:	687b      	ldr	r3, [r7, #4]
 801350a:	f44f 7280 	mov.w	r2, #256	; 0x100
 801350e:	601a      	str	r2, [r3, #0]
}
 8013510:	bf00      	nop
 8013512:	3714      	adds	r7, #20
 8013514:	46bd      	mov	sp, r7
 8013516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801351a:	4770      	bx	lr
 801351c:	20002ab0 	.word	0x20002ab0
 8013520:	20002b70 	.word	0x20002b70

08013524 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8013524:	b480      	push	{r7}
 8013526:	b083      	sub	sp, #12
 8013528:	af00      	add	r7, sp, #0
 801352a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801352c:	687b      	ldr	r3, [r7, #4]
 801352e:	f103 0208 	add.w	r2, r3, #8
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8013536:	687b      	ldr	r3, [r7, #4]
 8013538:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801353c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	f103 0208 	add.w	r2, r3, #8
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	f103 0208 	add.w	r2, r3, #8
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8013552:	687b      	ldr	r3, [r7, #4]
 8013554:	2200      	movs	r2, #0
 8013556:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013558:	bf00      	nop
 801355a:	370c      	adds	r7, #12
 801355c:	46bd      	mov	sp, r7
 801355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013562:	4770      	bx	lr

08013564 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8013564:	b480      	push	{r7}
 8013566:	b083      	sub	sp, #12
 8013568:	af00      	add	r7, sp, #0
 801356a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	2200      	movs	r2, #0
 8013570:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8013572:	bf00      	nop
 8013574:	370c      	adds	r7, #12
 8013576:	46bd      	mov	sp, r7
 8013578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801357c:	4770      	bx	lr

0801357e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801357e:	b480      	push	{r7}
 8013580:	b085      	sub	sp, #20
 8013582:	af00      	add	r7, sp, #0
 8013584:	6078      	str	r0, [r7, #4]
 8013586:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	685b      	ldr	r3, [r3, #4]
 801358c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801358e:	683b      	ldr	r3, [r7, #0]
 8013590:	68fa      	ldr	r2, [r7, #12]
 8013592:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8013594:	68fb      	ldr	r3, [r7, #12]
 8013596:	689a      	ldr	r2, [r3, #8]
 8013598:	683b      	ldr	r3, [r7, #0]
 801359a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	689b      	ldr	r3, [r3, #8]
 80135a0:	683a      	ldr	r2, [r7, #0]
 80135a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	683a      	ldr	r2, [r7, #0]
 80135a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80135aa:	683b      	ldr	r3, [r7, #0]
 80135ac:	687a      	ldr	r2, [r7, #4]
 80135ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	1c5a      	adds	r2, r3, #1
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	601a      	str	r2, [r3, #0]
}
 80135ba:	bf00      	nop
 80135bc:	3714      	adds	r7, #20
 80135be:	46bd      	mov	sp, r7
 80135c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c4:	4770      	bx	lr

080135c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80135c6:	b480      	push	{r7}
 80135c8:	b085      	sub	sp, #20
 80135ca:	af00      	add	r7, sp, #0
 80135cc:	6078      	str	r0, [r7, #4]
 80135ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80135d0:	683b      	ldr	r3, [r7, #0]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80135d6:	68bb      	ldr	r3, [r7, #8]
 80135d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80135dc:	d103      	bne.n	80135e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80135de:	687b      	ldr	r3, [r7, #4]
 80135e0:	691b      	ldr	r3, [r3, #16]
 80135e2:	60fb      	str	r3, [r7, #12]
 80135e4:	e00c      	b.n	8013600 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80135e6:	687b      	ldr	r3, [r7, #4]
 80135e8:	3308      	adds	r3, #8
 80135ea:	60fb      	str	r3, [r7, #12]
 80135ec:	e002      	b.n	80135f4 <vListInsert+0x2e>
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	685b      	ldr	r3, [r3, #4]
 80135f2:	60fb      	str	r3, [r7, #12]
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	685b      	ldr	r3, [r3, #4]
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	68ba      	ldr	r2, [r7, #8]
 80135fc:	429a      	cmp	r2, r3
 80135fe:	d2f6      	bcs.n	80135ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013600:	68fb      	ldr	r3, [r7, #12]
 8013602:	685a      	ldr	r2, [r3, #4]
 8013604:	683b      	ldr	r3, [r7, #0]
 8013606:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013608:	683b      	ldr	r3, [r7, #0]
 801360a:	685b      	ldr	r3, [r3, #4]
 801360c:	683a      	ldr	r2, [r7, #0]
 801360e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013610:	683b      	ldr	r3, [r7, #0]
 8013612:	68fa      	ldr	r2, [r7, #12]
 8013614:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	683a      	ldr	r2, [r7, #0]
 801361a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801361c:	683b      	ldr	r3, [r7, #0]
 801361e:	687a      	ldr	r2, [r7, #4]
 8013620:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013622:	687b      	ldr	r3, [r7, #4]
 8013624:	681b      	ldr	r3, [r3, #0]
 8013626:	1c5a      	adds	r2, r3, #1
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	601a      	str	r2, [r3, #0]
}
 801362c:	bf00      	nop
 801362e:	3714      	adds	r7, #20
 8013630:	46bd      	mov	sp, r7
 8013632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013636:	4770      	bx	lr

08013638 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013638:	b480      	push	{r7}
 801363a:	b085      	sub	sp, #20
 801363c:	af00      	add	r7, sp, #0
 801363e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	691b      	ldr	r3, [r3, #16]
 8013644:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8013646:	687b      	ldr	r3, [r7, #4]
 8013648:	685b      	ldr	r3, [r3, #4]
 801364a:	687a      	ldr	r2, [r7, #4]
 801364c:	6892      	ldr	r2, [r2, #8]
 801364e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	689b      	ldr	r3, [r3, #8]
 8013654:	687a      	ldr	r2, [r7, #4]
 8013656:	6852      	ldr	r2, [r2, #4]
 8013658:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	685b      	ldr	r3, [r3, #4]
 801365e:	687a      	ldr	r2, [r7, #4]
 8013660:	429a      	cmp	r2, r3
 8013662:	d103      	bne.n	801366c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	689a      	ldr	r2, [r3, #8]
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	2200      	movs	r2, #0
 8013670:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	681b      	ldr	r3, [r3, #0]
 8013676:	1e5a      	subs	r2, r3, #1
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801367c:	68fb      	ldr	r3, [r7, #12]
 801367e:	681b      	ldr	r3, [r3, #0]
}
 8013680:	4618      	mov	r0, r3
 8013682:	3714      	adds	r7, #20
 8013684:	46bd      	mov	sp, r7
 8013686:	f85d 7b04 	ldr.w	r7, [sp], #4
 801368a:	4770      	bx	lr

0801368c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 801368c:	b580      	push	{r7, lr}
 801368e:	b084      	sub	sp, #16
 8013690:	af00      	add	r7, sp, #0
 8013692:	6078      	str	r0, [r7, #4]
 8013694:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d10a      	bne.n	80136b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80136a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136a4:	f383 8811 	msr	BASEPRI, r3
 80136a8:	f3bf 8f6f 	isb	sy
 80136ac:	f3bf 8f4f 	dsb	sy
 80136b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80136b2:	bf00      	nop
 80136b4:	e7fe      	b.n	80136b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80136b6:	f002 ffc5 	bl	8016644 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	681a      	ldr	r2, [r3, #0]
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136c2:	68f9      	ldr	r1, [r7, #12]
 80136c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80136c6:	fb01 f303 	mul.w	r3, r1, r3
 80136ca:	441a      	add	r2, r3
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	2200      	movs	r2, #0
 80136d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	681a      	ldr	r2, [r3, #0]
 80136da:	68fb      	ldr	r3, [r7, #12]
 80136dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	681a      	ldr	r2, [r3, #0]
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136e6:	3b01      	subs	r3, #1
 80136e8:	68f9      	ldr	r1, [r7, #12]
 80136ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80136ec:	fb01 f303 	mul.w	r3, r1, r3
 80136f0:	441a      	add	r2, r3
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	22ff      	movs	r2, #255	; 0xff
 80136fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	22ff      	movs	r2, #255	; 0xff
 8013702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8013706:	683b      	ldr	r3, [r7, #0]
 8013708:	2b00      	cmp	r3, #0
 801370a:	d114      	bne.n	8013736 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801370c:	68fb      	ldr	r3, [r7, #12]
 801370e:	691b      	ldr	r3, [r3, #16]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d01a      	beq.n	801374a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	3310      	adds	r3, #16
 8013718:	4618      	mov	r0, r3
 801371a:	f001 fd67 	bl	80151ec <xTaskRemoveFromEventList>
 801371e:	4603      	mov	r3, r0
 8013720:	2b00      	cmp	r3, #0
 8013722:	d012      	beq.n	801374a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8013724:	4b0c      	ldr	r3, [pc, #48]	; (8013758 <xQueueGenericReset+0xcc>)
 8013726:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801372a:	601a      	str	r2, [r3, #0]
 801372c:	f3bf 8f4f 	dsb	sy
 8013730:	f3bf 8f6f 	isb	sy
 8013734:	e009      	b.n	801374a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8013736:	68fb      	ldr	r3, [r7, #12]
 8013738:	3310      	adds	r3, #16
 801373a:	4618      	mov	r0, r3
 801373c:	f7ff fef2 	bl	8013524 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	3324      	adds	r3, #36	; 0x24
 8013744:	4618      	mov	r0, r3
 8013746:	f7ff feed 	bl	8013524 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801374a:	f002 ffab 	bl	80166a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801374e:	2301      	movs	r3, #1
}
 8013750:	4618      	mov	r0, r3
 8013752:	3710      	adds	r7, #16
 8013754:	46bd      	mov	sp, r7
 8013756:	bd80      	pop	{r7, pc}
 8013758:	e000ed04 	.word	0xe000ed04

0801375c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801375c:	b580      	push	{r7, lr}
 801375e:	b08e      	sub	sp, #56	; 0x38
 8013760:	af02      	add	r7, sp, #8
 8013762:	60f8      	str	r0, [r7, #12]
 8013764:	60b9      	str	r1, [r7, #8]
 8013766:	607a      	str	r2, [r7, #4]
 8013768:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801376a:	68fb      	ldr	r3, [r7, #12]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d10a      	bne.n	8013786 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013774:	f383 8811 	msr	BASEPRI, r3
 8013778:	f3bf 8f6f 	isb	sy
 801377c:	f3bf 8f4f 	dsb	sy
 8013780:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013782:	bf00      	nop
 8013784:	e7fe      	b.n	8013784 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8013786:	683b      	ldr	r3, [r7, #0]
 8013788:	2b00      	cmp	r3, #0
 801378a:	d10a      	bne.n	80137a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 801378c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013790:	f383 8811 	msr	BASEPRI, r3
 8013794:	f3bf 8f6f 	isb	sy
 8013798:	f3bf 8f4f 	dsb	sy
 801379c:	627b      	str	r3, [r7, #36]	; 0x24
}
 801379e:	bf00      	nop
 80137a0:	e7fe      	b.n	80137a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d002      	beq.n	80137ae <xQueueGenericCreateStatic+0x52>
 80137a8:	68bb      	ldr	r3, [r7, #8]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d001      	beq.n	80137b2 <xQueueGenericCreateStatic+0x56>
 80137ae:	2301      	movs	r3, #1
 80137b0:	e000      	b.n	80137b4 <xQueueGenericCreateStatic+0x58>
 80137b2:	2300      	movs	r3, #0
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d10a      	bne.n	80137ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80137b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137bc:	f383 8811 	msr	BASEPRI, r3
 80137c0:	f3bf 8f6f 	isb	sy
 80137c4:	f3bf 8f4f 	dsb	sy
 80137c8:	623b      	str	r3, [r7, #32]
}
 80137ca:	bf00      	nop
 80137cc:	e7fe      	b.n	80137cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d102      	bne.n	80137da <xQueueGenericCreateStatic+0x7e>
 80137d4:	68bb      	ldr	r3, [r7, #8]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d101      	bne.n	80137de <xQueueGenericCreateStatic+0x82>
 80137da:	2301      	movs	r3, #1
 80137dc:	e000      	b.n	80137e0 <xQueueGenericCreateStatic+0x84>
 80137de:	2300      	movs	r3, #0
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d10a      	bne.n	80137fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80137e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137e8:	f383 8811 	msr	BASEPRI, r3
 80137ec:	f3bf 8f6f 	isb	sy
 80137f0:	f3bf 8f4f 	dsb	sy
 80137f4:	61fb      	str	r3, [r7, #28]
}
 80137f6:	bf00      	nop
 80137f8:	e7fe      	b.n	80137f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80137fa:	2350      	movs	r3, #80	; 0x50
 80137fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80137fe:	697b      	ldr	r3, [r7, #20]
 8013800:	2b50      	cmp	r3, #80	; 0x50
 8013802:	d00a      	beq.n	801381a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8013804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013808:	f383 8811 	msr	BASEPRI, r3
 801380c:	f3bf 8f6f 	isb	sy
 8013810:	f3bf 8f4f 	dsb	sy
 8013814:	61bb      	str	r3, [r7, #24]
}
 8013816:	bf00      	nop
 8013818:	e7fe      	b.n	8013818 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 801381a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801381c:	683b      	ldr	r3, [r7, #0]
 801381e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013822:	2b00      	cmp	r3, #0
 8013824:	d00d      	beq.n	8013842 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8013826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013828:	2201      	movs	r2, #1
 801382a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801382e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8013832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013834:	9300      	str	r3, [sp, #0]
 8013836:	4613      	mov	r3, r2
 8013838:	687a      	ldr	r2, [r7, #4]
 801383a:	68b9      	ldr	r1, [r7, #8]
 801383c:	68f8      	ldr	r0, [r7, #12]
 801383e:	f000 f83f 	bl	80138c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8013842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8013844:	4618      	mov	r0, r3
 8013846:	3730      	adds	r7, #48	; 0x30
 8013848:	46bd      	mov	sp, r7
 801384a:	bd80      	pop	{r7, pc}

0801384c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801384c:	b580      	push	{r7, lr}
 801384e:	b08a      	sub	sp, #40	; 0x28
 8013850:	af02      	add	r7, sp, #8
 8013852:	60f8      	str	r0, [r7, #12]
 8013854:	60b9      	str	r1, [r7, #8]
 8013856:	4613      	mov	r3, r2
 8013858:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801385a:	68fb      	ldr	r3, [r7, #12]
 801385c:	2b00      	cmp	r3, #0
 801385e:	d10a      	bne.n	8013876 <xQueueGenericCreate+0x2a>
	__asm volatile
 8013860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013864:	f383 8811 	msr	BASEPRI, r3
 8013868:	f3bf 8f6f 	isb	sy
 801386c:	f3bf 8f4f 	dsb	sy
 8013870:	613b      	str	r3, [r7, #16]
}
 8013872:	bf00      	nop
 8013874:	e7fe      	b.n	8013874 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013876:	68fb      	ldr	r3, [r7, #12]
 8013878:	68ba      	ldr	r2, [r7, #8]
 801387a:	fb02 f303 	mul.w	r3, r2, r3
 801387e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013880:	69fb      	ldr	r3, [r7, #28]
 8013882:	3350      	adds	r3, #80	; 0x50
 8013884:	4618      	mov	r0, r3
 8013886:	f002 ffff 	bl	8016888 <pvPortMalloc>
 801388a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801388c:	69bb      	ldr	r3, [r7, #24]
 801388e:	2b00      	cmp	r3, #0
 8013890:	d011      	beq.n	80138b6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8013892:	69bb      	ldr	r3, [r7, #24]
 8013894:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013896:	697b      	ldr	r3, [r7, #20]
 8013898:	3350      	adds	r3, #80	; 0x50
 801389a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 801389c:	69bb      	ldr	r3, [r7, #24]
 801389e:	2200      	movs	r2, #0
 80138a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80138a4:	79fa      	ldrb	r2, [r7, #7]
 80138a6:	69bb      	ldr	r3, [r7, #24]
 80138a8:	9300      	str	r3, [sp, #0]
 80138aa:	4613      	mov	r3, r2
 80138ac:	697a      	ldr	r2, [r7, #20]
 80138ae:	68b9      	ldr	r1, [r7, #8]
 80138b0:	68f8      	ldr	r0, [r7, #12]
 80138b2:	f000 f805 	bl	80138c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80138b6:	69bb      	ldr	r3, [r7, #24]
	}
 80138b8:	4618      	mov	r0, r3
 80138ba:	3720      	adds	r7, #32
 80138bc:	46bd      	mov	sp, r7
 80138be:	bd80      	pop	{r7, pc}

080138c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80138c0:	b580      	push	{r7, lr}
 80138c2:	b084      	sub	sp, #16
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	60f8      	str	r0, [r7, #12]
 80138c8:	60b9      	str	r1, [r7, #8]
 80138ca:	607a      	str	r2, [r7, #4]
 80138cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80138ce:	68bb      	ldr	r3, [r7, #8]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d103      	bne.n	80138dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80138d4:	69bb      	ldr	r3, [r7, #24]
 80138d6:	69ba      	ldr	r2, [r7, #24]
 80138d8:	601a      	str	r2, [r3, #0]
 80138da:	e002      	b.n	80138e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80138dc:	69bb      	ldr	r3, [r7, #24]
 80138de:	687a      	ldr	r2, [r7, #4]
 80138e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80138e2:	69bb      	ldr	r3, [r7, #24]
 80138e4:	68fa      	ldr	r2, [r7, #12]
 80138e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80138e8:	69bb      	ldr	r3, [r7, #24]
 80138ea:	68ba      	ldr	r2, [r7, #8]
 80138ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80138ee:	2101      	movs	r1, #1
 80138f0:	69b8      	ldr	r0, [r7, #24]
 80138f2:	f7ff fecb 	bl	801368c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80138f6:	69bb      	ldr	r3, [r7, #24]
 80138f8:	78fa      	ldrb	r2, [r7, #3]
 80138fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80138fe:	bf00      	nop
 8013900:	3710      	adds	r7, #16
 8013902:	46bd      	mov	sp, r7
 8013904:	bd80      	pop	{r7, pc}

08013906 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8013906:	b580      	push	{r7, lr}
 8013908:	b08a      	sub	sp, #40	; 0x28
 801390a:	af02      	add	r7, sp, #8
 801390c:	60f8      	str	r0, [r7, #12]
 801390e:	60b9      	str	r1, [r7, #8]
 8013910:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d10a      	bne.n	801392e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8013918:	f04f 0350 	mov.w	r3, #80	; 0x50
 801391c:	f383 8811 	msr	BASEPRI, r3
 8013920:	f3bf 8f6f 	isb	sy
 8013924:	f3bf 8f4f 	dsb	sy
 8013928:	61bb      	str	r3, [r7, #24]
}
 801392a:	bf00      	nop
 801392c:	e7fe      	b.n	801392c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 801392e:	68ba      	ldr	r2, [r7, #8]
 8013930:	68fb      	ldr	r3, [r7, #12]
 8013932:	429a      	cmp	r2, r3
 8013934:	d90a      	bls.n	801394c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8013936:	f04f 0350 	mov.w	r3, #80	; 0x50
 801393a:	f383 8811 	msr	BASEPRI, r3
 801393e:	f3bf 8f6f 	isb	sy
 8013942:	f3bf 8f4f 	dsb	sy
 8013946:	617b      	str	r3, [r7, #20]
}
 8013948:	bf00      	nop
 801394a:	e7fe      	b.n	801394a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801394c:	2302      	movs	r3, #2
 801394e:	9300      	str	r3, [sp, #0]
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	2200      	movs	r2, #0
 8013954:	2100      	movs	r1, #0
 8013956:	68f8      	ldr	r0, [r7, #12]
 8013958:	f7ff ff00 	bl	801375c <xQueueGenericCreateStatic>
 801395c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 801395e:	69fb      	ldr	r3, [r7, #28]
 8013960:	2b00      	cmp	r3, #0
 8013962:	d002      	beq.n	801396a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8013964:	69fb      	ldr	r3, [r7, #28]
 8013966:	68ba      	ldr	r2, [r7, #8]
 8013968:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801396a:	69fb      	ldr	r3, [r7, #28]
	}
 801396c:	4618      	mov	r0, r3
 801396e:	3720      	adds	r7, #32
 8013970:	46bd      	mov	sp, r7
 8013972:	bd80      	pop	{r7, pc}

08013974 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8013974:	b580      	push	{r7, lr}
 8013976:	b086      	sub	sp, #24
 8013978:	af00      	add	r7, sp, #0
 801397a:	6078      	str	r0, [r7, #4]
 801397c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	2b00      	cmp	r3, #0
 8013982:	d10a      	bne.n	801399a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8013984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013988:	f383 8811 	msr	BASEPRI, r3
 801398c:	f3bf 8f6f 	isb	sy
 8013990:	f3bf 8f4f 	dsb	sy
 8013994:	613b      	str	r3, [r7, #16]
}
 8013996:	bf00      	nop
 8013998:	e7fe      	b.n	8013998 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 801399a:	683a      	ldr	r2, [r7, #0]
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	429a      	cmp	r2, r3
 80139a0:	d90a      	bls.n	80139b8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80139a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139a6:	f383 8811 	msr	BASEPRI, r3
 80139aa:	f3bf 8f6f 	isb	sy
 80139ae:	f3bf 8f4f 	dsb	sy
 80139b2:	60fb      	str	r3, [r7, #12]
}
 80139b4:	bf00      	nop
 80139b6:	e7fe      	b.n	80139b6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80139b8:	2202      	movs	r2, #2
 80139ba:	2100      	movs	r1, #0
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	f7ff ff45 	bl	801384c <xQueueGenericCreate>
 80139c2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80139c4:	697b      	ldr	r3, [r7, #20]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d002      	beq.n	80139d0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80139ca:	697b      	ldr	r3, [r7, #20]
 80139cc:	683a      	ldr	r2, [r7, #0]
 80139ce:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80139d0:	697b      	ldr	r3, [r7, #20]
	}
 80139d2:	4618      	mov	r0, r3
 80139d4:	3718      	adds	r7, #24
 80139d6:	46bd      	mov	sp, r7
 80139d8:	bd80      	pop	{r7, pc}
	...

080139dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80139dc:	b580      	push	{r7, lr}
 80139de:	b08e      	sub	sp, #56	; 0x38
 80139e0:	af00      	add	r7, sp, #0
 80139e2:	60f8      	str	r0, [r7, #12]
 80139e4:	60b9      	str	r1, [r7, #8]
 80139e6:	607a      	str	r2, [r7, #4]
 80139e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80139ea:	2300      	movs	r3, #0
 80139ec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80139ee:	68fb      	ldr	r3, [r7, #12]
 80139f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80139f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139f4:	2b00      	cmp	r3, #0
 80139f6:	d10a      	bne.n	8013a0e <xQueueGenericSend+0x32>
	__asm volatile
 80139f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139fc:	f383 8811 	msr	BASEPRI, r3
 8013a00:	f3bf 8f6f 	isb	sy
 8013a04:	f3bf 8f4f 	dsb	sy
 8013a08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013a0a:	bf00      	nop
 8013a0c:	e7fe      	b.n	8013a0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013a0e:	68bb      	ldr	r3, [r7, #8]
 8013a10:	2b00      	cmp	r3, #0
 8013a12:	d103      	bne.n	8013a1c <xQueueGenericSend+0x40>
 8013a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d101      	bne.n	8013a20 <xQueueGenericSend+0x44>
 8013a1c:	2301      	movs	r3, #1
 8013a1e:	e000      	b.n	8013a22 <xQueueGenericSend+0x46>
 8013a20:	2300      	movs	r3, #0
 8013a22:	2b00      	cmp	r3, #0
 8013a24:	d10a      	bne.n	8013a3c <xQueueGenericSend+0x60>
	__asm volatile
 8013a26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a2a:	f383 8811 	msr	BASEPRI, r3
 8013a2e:	f3bf 8f6f 	isb	sy
 8013a32:	f3bf 8f4f 	dsb	sy
 8013a36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013a38:	bf00      	nop
 8013a3a:	e7fe      	b.n	8013a3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013a3c:	683b      	ldr	r3, [r7, #0]
 8013a3e:	2b02      	cmp	r3, #2
 8013a40:	d103      	bne.n	8013a4a <xQueueGenericSend+0x6e>
 8013a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013a46:	2b01      	cmp	r3, #1
 8013a48:	d101      	bne.n	8013a4e <xQueueGenericSend+0x72>
 8013a4a:	2301      	movs	r3, #1
 8013a4c:	e000      	b.n	8013a50 <xQueueGenericSend+0x74>
 8013a4e:	2300      	movs	r3, #0
 8013a50:	2b00      	cmp	r3, #0
 8013a52:	d10a      	bne.n	8013a6a <xQueueGenericSend+0x8e>
	__asm volatile
 8013a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a58:	f383 8811 	msr	BASEPRI, r3
 8013a5c:	f3bf 8f6f 	isb	sy
 8013a60:	f3bf 8f4f 	dsb	sy
 8013a64:	623b      	str	r3, [r7, #32]
}
 8013a66:	bf00      	nop
 8013a68:	e7fe      	b.n	8013a68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013a6a:	f001 fe55 	bl	8015718 <xTaskGetSchedulerState>
 8013a6e:	4603      	mov	r3, r0
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d102      	bne.n	8013a7a <xQueueGenericSend+0x9e>
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d101      	bne.n	8013a7e <xQueueGenericSend+0xa2>
 8013a7a:	2301      	movs	r3, #1
 8013a7c:	e000      	b.n	8013a80 <xQueueGenericSend+0xa4>
 8013a7e:	2300      	movs	r3, #0
 8013a80:	2b00      	cmp	r3, #0
 8013a82:	d10a      	bne.n	8013a9a <xQueueGenericSend+0xbe>
	__asm volatile
 8013a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a88:	f383 8811 	msr	BASEPRI, r3
 8013a8c:	f3bf 8f6f 	isb	sy
 8013a90:	f3bf 8f4f 	dsb	sy
 8013a94:	61fb      	str	r3, [r7, #28]
}
 8013a96:	bf00      	nop
 8013a98:	e7fe      	b.n	8013a98 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013a9a:	f002 fdd3 	bl	8016644 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013aa6:	429a      	cmp	r2, r3
 8013aa8:	d302      	bcc.n	8013ab0 <xQueueGenericSend+0xd4>
 8013aaa:	683b      	ldr	r3, [r7, #0]
 8013aac:	2b02      	cmp	r3, #2
 8013aae:	d129      	bne.n	8013b04 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013ab0:	683a      	ldr	r2, [r7, #0]
 8013ab2:	68b9      	ldr	r1, [r7, #8]
 8013ab4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013ab6:	f000 fc5e 	bl	8014376 <prvCopyDataToQueue>
 8013aba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d010      	beq.n	8013ae6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ac6:	3324      	adds	r3, #36	; 0x24
 8013ac8:	4618      	mov	r0, r3
 8013aca:	f001 fb8f 	bl	80151ec <xTaskRemoveFromEventList>
 8013ace:	4603      	mov	r3, r0
 8013ad0:	2b00      	cmp	r3, #0
 8013ad2:	d013      	beq.n	8013afc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013ad4:	4b3f      	ldr	r3, [pc, #252]	; (8013bd4 <xQueueGenericSend+0x1f8>)
 8013ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ada:	601a      	str	r2, [r3, #0]
 8013adc:	f3bf 8f4f 	dsb	sy
 8013ae0:	f3bf 8f6f 	isb	sy
 8013ae4:	e00a      	b.n	8013afc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8013ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d007      	beq.n	8013afc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013aec:	4b39      	ldr	r3, [pc, #228]	; (8013bd4 <xQueueGenericSend+0x1f8>)
 8013aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013af2:	601a      	str	r2, [r3, #0]
 8013af4:	f3bf 8f4f 	dsb	sy
 8013af8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8013afc:	f002 fdd2 	bl	80166a4 <vPortExitCritical>
				return pdPASS;
 8013b00:	2301      	movs	r3, #1
 8013b02:	e063      	b.n	8013bcc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d103      	bne.n	8013b12 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013b0a:	f002 fdcb 	bl	80166a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013b0e:	2300      	movs	r3, #0
 8013b10:	e05c      	b.n	8013bcc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d106      	bne.n	8013b26 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013b18:	f107 0314 	add.w	r3, r7, #20
 8013b1c:	4618      	mov	r0, r3
 8013b1e:	f001 fbc9 	bl	80152b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013b22:	2301      	movs	r3, #1
 8013b24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013b26:	f002 fdbd 	bl	80166a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013b2a:	f001 f887 	bl	8014c3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013b2e:	f002 fd89 	bl	8016644 <vPortEnterCritical>
 8013b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013b38:	b25b      	sxtb	r3, r3
 8013b3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b3e:	d103      	bne.n	8013b48 <xQueueGenericSend+0x16c>
 8013b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b42:	2200      	movs	r2, #0
 8013b44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013b4e:	b25b      	sxtb	r3, r3
 8013b50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b54:	d103      	bne.n	8013b5e <xQueueGenericSend+0x182>
 8013b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b58:	2200      	movs	r2, #0
 8013b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013b5e:	f002 fda1 	bl	80166a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013b62:	1d3a      	adds	r2, r7, #4
 8013b64:	f107 0314 	add.w	r3, r7, #20
 8013b68:	4611      	mov	r1, r2
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	f001 fbb8 	bl	80152e0 <xTaskCheckForTimeOut>
 8013b70:	4603      	mov	r3, r0
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	d124      	bne.n	8013bc0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013b76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013b78:	f000 fcf5 	bl	8014566 <prvIsQueueFull>
 8013b7c:	4603      	mov	r3, r0
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d018      	beq.n	8013bb4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b84:	3310      	adds	r3, #16
 8013b86:	687a      	ldr	r2, [r7, #4]
 8013b88:	4611      	mov	r1, r2
 8013b8a:	4618      	mov	r0, r3
 8013b8c:	f001 fade 	bl	801514c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013b90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013b92:	f000 fc80 	bl	8014496 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013b96:	f001 f85f 	bl	8014c58 <xTaskResumeAll>
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	f47f af7c 	bne.w	8013a9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8013ba2:	4b0c      	ldr	r3, [pc, #48]	; (8013bd4 <xQueueGenericSend+0x1f8>)
 8013ba4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ba8:	601a      	str	r2, [r3, #0]
 8013baa:	f3bf 8f4f 	dsb	sy
 8013bae:	f3bf 8f6f 	isb	sy
 8013bb2:	e772      	b.n	8013a9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013bb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013bb6:	f000 fc6e 	bl	8014496 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013bba:	f001 f84d 	bl	8014c58 <xTaskResumeAll>
 8013bbe:	e76c      	b.n	8013a9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013bc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013bc2:	f000 fc68 	bl	8014496 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013bc6:	f001 f847 	bl	8014c58 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013bca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013bcc:	4618      	mov	r0, r3
 8013bce:	3738      	adds	r7, #56	; 0x38
 8013bd0:	46bd      	mov	sp, r7
 8013bd2:	bd80      	pop	{r7, pc}
 8013bd4:	e000ed04 	.word	0xe000ed04

08013bd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013bd8:	b580      	push	{r7, lr}
 8013bda:	b090      	sub	sp, #64	; 0x40
 8013bdc:	af00      	add	r7, sp, #0
 8013bde:	60f8      	str	r0, [r7, #12]
 8013be0:	60b9      	str	r1, [r7, #8]
 8013be2:	607a      	str	r2, [r7, #4]
 8013be4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8013bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d10a      	bne.n	8013c06 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8013bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bf4:	f383 8811 	msr	BASEPRI, r3
 8013bf8:	f3bf 8f6f 	isb	sy
 8013bfc:	f3bf 8f4f 	dsb	sy
 8013c00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013c02:	bf00      	nop
 8013c04:	e7fe      	b.n	8013c04 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013c06:	68bb      	ldr	r3, [r7, #8]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d103      	bne.n	8013c14 <xQueueGenericSendFromISR+0x3c>
 8013c0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c10:	2b00      	cmp	r3, #0
 8013c12:	d101      	bne.n	8013c18 <xQueueGenericSendFromISR+0x40>
 8013c14:	2301      	movs	r3, #1
 8013c16:	e000      	b.n	8013c1a <xQueueGenericSendFromISR+0x42>
 8013c18:	2300      	movs	r3, #0
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d10a      	bne.n	8013c34 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c22:	f383 8811 	msr	BASEPRI, r3
 8013c26:	f3bf 8f6f 	isb	sy
 8013c2a:	f3bf 8f4f 	dsb	sy
 8013c2e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013c30:	bf00      	nop
 8013c32:	e7fe      	b.n	8013c32 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013c34:	683b      	ldr	r3, [r7, #0]
 8013c36:	2b02      	cmp	r3, #2
 8013c38:	d103      	bne.n	8013c42 <xQueueGenericSendFromISR+0x6a>
 8013c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c3e:	2b01      	cmp	r3, #1
 8013c40:	d101      	bne.n	8013c46 <xQueueGenericSendFromISR+0x6e>
 8013c42:	2301      	movs	r3, #1
 8013c44:	e000      	b.n	8013c48 <xQueueGenericSendFromISR+0x70>
 8013c46:	2300      	movs	r3, #0
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d10a      	bne.n	8013c62 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c50:	f383 8811 	msr	BASEPRI, r3
 8013c54:	f3bf 8f6f 	isb	sy
 8013c58:	f3bf 8f4f 	dsb	sy
 8013c5c:	623b      	str	r3, [r7, #32]
}
 8013c5e:	bf00      	nop
 8013c60:	e7fe      	b.n	8013c60 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013c62:	f002 fdd1 	bl	8016808 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013c66:	f3ef 8211 	mrs	r2, BASEPRI
 8013c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c6e:	f383 8811 	msr	BASEPRI, r3
 8013c72:	f3bf 8f6f 	isb	sy
 8013c76:	f3bf 8f4f 	dsb	sy
 8013c7a:	61fa      	str	r2, [r7, #28]
 8013c7c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013c7e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013c80:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c8a:	429a      	cmp	r2, r3
 8013c8c:	d302      	bcc.n	8013c94 <xQueueGenericSendFromISR+0xbc>
 8013c8e:	683b      	ldr	r3, [r7, #0]
 8013c90:	2b02      	cmp	r3, #2
 8013c92:	d12f      	bne.n	8013cf4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013ca4:	683a      	ldr	r2, [r7, #0]
 8013ca6:	68b9      	ldr	r1, [r7, #8]
 8013ca8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013caa:	f000 fb64 	bl	8014376 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013cae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8013cb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013cb6:	d112      	bne.n	8013cde <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d016      	beq.n	8013cee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cc2:	3324      	adds	r3, #36	; 0x24
 8013cc4:	4618      	mov	r0, r3
 8013cc6:	f001 fa91 	bl	80151ec <xTaskRemoveFromEventList>
 8013cca:	4603      	mov	r3, r0
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d00e      	beq.n	8013cee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d00b      	beq.n	8013cee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	2201      	movs	r2, #1
 8013cda:	601a      	str	r2, [r3, #0]
 8013cdc:	e007      	b.n	8013cee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013cde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013ce2:	3301      	adds	r3, #1
 8013ce4:	b2db      	uxtb	r3, r3
 8013ce6:	b25a      	sxtb	r2, r3
 8013ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013cee:	2301      	movs	r3, #1
 8013cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8013cf2:	e001      	b.n	8013cf8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013cf4:	2300      	movs	r3, #0
 8013cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cfa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013cfc:	697b      	ldr	r3, [r7, #20]
 8013cfe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013d02:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013d04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013d06:	4618      	mov	r0, r3
 8013d08:	3740      	adds	r7, #64	; 0x40
 8013d0a:	46bd      	mov	sp, r7
 8013d0c:	bd80      	pop	{r7, pc}

08013d0e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013d0e:	b580      	push	{r7, lr}
 8013d10:	b08e      	sub	sp, #56	; 0x38
 8013d12:	af00      	add	r7, sp, #0
 8013d14:	6078      	str	r0, [r7, #4]
 8013d16:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8013d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d1e:	2b00      	cmp	r3, #0
 8013d20:	d10a      	bne.n	8013d38 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8013d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d26:	f383 8811 	msr	BASEPRI, r3
 8013d2a:	f3bf 8f6f 	isb	sy
 8013d2e:	f3bf 8f4f 	dsb	sy
 8013d32:	623b      	str	r3, [r7, #32]
}
 8013d34:	bf00      	nop
 8013d36:	e7fe      	b.n	8013d36 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8013d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d00a      	beq.n	8013d56 <xQueueGiveFromISR+0x48>
	__asm volatile
 8013d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d44:	f383 8811 	msr	BASEPRI, r3
 8013d48:	f3bf 8f6f 	isb	sy
 8013d4c:	f3bf 8f4f 	dsb	sy
 8013d50:	61fb      	str	r3, [r7, #28]
}
 8013d52:	bf00      	nop
 8013d54:	e7fe      	b.n	8013d54 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8013d56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d103      	bne.n	8013d66 <xQueueGiveFromISR+0x58>
 8013d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d60:	689b      	ldr	r3, [r3, #8]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d101      	bne.n	8013d6a <xQueueGiveFromISR+0x5c>
 8013d66:	2301      	movs	r3, #1
 8013d68:	e000      	b.n	8013d6c <xQueueGiveFromISR+0x5e>
 8013d6a:	2300      	movs	r3, #0
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d10a      	bne.n	8013d86 <xQueueGiveFromISR+0x78>
	__asm volatile
 8013d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d74:	f383 8811 	msr	BASEPRI, r3
 8013d78:	f3bf 8f6f 	isb	sy
 8013d7c:	f3bf 8f4f 	dsb	sy
 8013d80:	61bb      	str	r3, [r7, #24]
}
 8013d82:	bf00      	nop
 8013d84:	e7fe      	b.n	8013d84 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013d86:	f002 fd3f 	bl	8016808 <vPortValidateInterruptPriority>
	__asm volatile
 8013d8a:	f3ef 8211 	mrs	r2, BASEPRI
 8013d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d92:	f383 8811 	msr	BASEPRI, r3
 8013d96:	f3bf 8f6f 	isb	sy
 8013d9a:	f3bf 8f4f 	dsb	sy
 8013d9e:	617a      	str	r2, [r7, #20]
 8013da0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8013da2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013da4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013daa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8013dac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013db0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013db2:	429a      	cmp	r2, r3
 8013db4:	d22b      	bcs.n	8013e0e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013db8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013dbc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013dc2:	1c5a      	adds	r2, r3, #1
 8013dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dc6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013dc8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013dcc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013dd0:	d112      	bne.n	8013df8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d016      	beq.n	8013e08 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ddc:	3324      	adds	r3, #36	; 0x24
 8013dde:	4618      	mov	r0, r3
 8013de0:	f001 fa04 	bl	80151ec <xTaskRemoveFromEventList>
 8013de4:	4603      	mov	r3, r0
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d00e      	beq.n	8013e08 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013dea:	683b      	ldr	r3, [r7, #0]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d00b      	beq.n	8013e08 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013df0:	683b      	ldr	r3, [r7, #0]
 8013df2:	2201      	movs	r2, #1
 8013df4:	601a      	str	r2, [r3, #0]
 8013df6:	e007      	b.n	8013e08 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013df8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013dfc:	3301      	adds	r3, #1
 8013dfe:	b2db      	uxtb	r3, r3
 8013e00:	b25a      	sxtb	r2, r3
 8013e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013e08:	2301      	movs	r3, #1
 8013e0a:	637b      	str	r3, [r7, #52]	; 0x34
 8013e0c:	e001      	b.n	8013e12 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013e0e:	2300      	movs	r3, #0
 8013e10:	637b      	str	r3, [r7, #52]	; 0x34
 8013e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e14:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8013e16:	68fb      	ldr	r3, [r7, #12]
 8013e18:	f383 8811 	msr	BASEPRI, r3
}
 8013e1c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013e20:	4618      	mov	r0, r3
 8013e22:	3738      	adds	r7, #56	; 0x38
 8013e24:	46bd      	mov	sp, r7
 8013e26:	bd80      	pop	{r7, pc}

08013e28 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013e28:	b580      	push	{r7, lr}
 8013e2a:	b08c      	sub	sp, #48	; 0x30
 8013e2c:	af00      	add	r7, sp, #0
 8013e2e:	60f8      	str	r0, [r7, #12]
 8013e30:	60b9      	str	r1, [r7, #8]
 8013e32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013e34:	2300      	movs	r3, #0
 8013e36:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013e38:	68fb      	ldr	r3, [r7, #12]
 8013e3a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d10a      	bne.n	8013e58 <xQueueReceive+0x30>
	__asm volatile
 8013e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e46:	f383 8811 	msr	BASEPRI, r3
 8013e4a:	f3bf 8f6f 	isb	sy
 8013e4e:	f3bf 8f4f 	dsb	sy
 8013e52:	623b      	str	r3, [r7, #32]
}
 8013e54:	bf00      	nop
 8013e56:	e7fe      	b.n	8013e56 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013e58:	68bb      	ldr	r3, [r7, #8]
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d103      	bne.n	8013e66 <xQueueReceive+0x3e>
 8013e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d101      	bne.n	8013e6a <xQueueReceive+0x42>
 8013e66:	2301      	movs	r3, #1
 8013e68:	e000      	b.n	8013e6c <xQueueReceive+0x44>
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d10a      	bne.n	8013e86 <xQueueReceive+0x5e>
	__asm volatile
 8013e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e74:	f383 8811 	msr	BASEPRI, r3
 8013e78:	f3bf 8f6f 	isb	sy
 8013e7c:	f3bf 8f4f 	dsb	sy
 8013e80:	61fb      	str	r3, [r7, #28]
}
 8013e82:	bf00      	nop
 8013e84:	e7fe      	b.n	8013e84 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013e86:	f001 fc47 	bl	8015718 <xTaskGetSchedulerState>
 8013e8a:	4603      	mov	r3, r0
 8013e8c:	2b00      	cmp	r3, #0
 8013e8e:	d102      	bne.n	8013e96 <xQueueReceive+0x6e>
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	2b00      	cmp	r3, #0
 8013e94:	d101      	bne.n	8013e9a <xQueueReceive+0x72>
 8013e96:	2301      	movs	r3, #1
 8013e98:	e000      	b.n	8013e9c <xQueueReceive+0x74>
 8013e9a:	2300      	movs	r3, #0
 8013e9c:	2b00      	cmp	r3, #0
 8013e9e:	d10a      	bne.n	8013eb6 <xQueueReceive+0x8e>
	__asm volatile
 8013ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ea4:	f383 8811 	msr	BASEPRI, r3
 8013ea8:	f3bf 8f6f 	isb	sy
 8013eac:	f3bf 8f4f 	dsb	sy
 8013eb0:	61bb      	str	r3, [r7, #24]
}
 8013eb2:	bf00      	nop
 8013eb4:	e7fe      	b.n	8013eb4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013eb6:	f002 fbc5 	bl	8016644 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ebe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d01f      	beq.n	8013f06 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013ec6:	68b9      	ldr	r1, [r7, #8]
 8013ec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013eca:	f000 fabe 	bl	801444a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ed0:	1e5a      	subs	r2, r3, #1
 8013ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ed4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ed8:	691b      	ldr	r3, [r3, #16]
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d00f      	beq.n	8013efe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ee0:	3310      	adds	r3, #16
 8013ee2:	4618      	mov	r0, r3
 8013ee4:	f001 f982 	bl	80151ec <xTaskRemoveFromEventList>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d007      	beq.n	8013efe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013eee:	4b3d      	ldr	r3, [pc, #244]	; (8013fe4 <xQueueReceive+0x1bc>)
 8013ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ef4:	601a      	str	r2, [r3, #0]
 8013ef6:	f3bf 8f4f 	dsb	sy
 8013efa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013efe:	f002 fbd1 	bl	80166a4 <vPortExitCritical>
				return pdPASS;
 8013f02:	2301      	movs	r3, #1
 8013f04:	e069      	b.n	8013fda <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d103      	bne.n	8013f14 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013f0c:	f002 fbca 	bl	80166a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013f10:	2300      	movs	r3, #0
 8013f12:	e062      	b.n	8013fda <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013f16:	2b00      	cmp	r3, #0
 8013f18:	d106      	bne.n	8013f28 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013f1a:	f107 0310 	add.w	r3, r7, #16
 8013f1e:	4618      	mov	r0, r3
 8013f20:	f001 f9c8 	bl	80152b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013f24:	2301      	movs	r3, #1
 8013f26:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013f28:	f002 fbbc 	bl	80166a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013f2c:	f000 fe86 	bl	8014c3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013f30:	f002 fb88 	bl	8016644 <vPortEnterCritical>
 8013f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013f3a:	b25b      	sxtb	r3, r3
 8013f3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013f40:	d103      	bne.n	8013f4a <xQueueReceive+0x122>
 8013f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f44:	2200      	movs	r2, #0
 8013f46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013f50:	b25b      	sxtb	r3, r3
 8013f52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013f56:	d103      	bne.n	8013f60 <xQueueReceive+0x138>
 8013f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f5a:	2200      	movs	r2, #0
 8013f5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013f60:	f002 fba0 	bl	80166a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013f64:	1d3a      	adds	r2, r7, #4
 8013f66:	f107 0310 	add.w	r3, r7, #16
 8013f6a:	4611      	mov	r1, r2
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	f001 f9b7 	bl	80152e0 <xTaskCheckForTimeOut>
 8013f72:	4603      	mov	r3, r0
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d123      	bne.n	8013fc0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013f78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f7a:	f000 fade 	bl	801453a <prvIsQueueEmpty>
 8013f7e:	4603      	mov	r3, r0
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d017      	beq.n	8013fb4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013f86:	3324      	adds	r3, #36	; 0x24
 8013f88:	687a      	ldr	r2, [r7, #4]
 8013f8a:	4611      	mov	r1, r2
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	f001 f8dd 	bl	801514c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013f92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013f94:	f000 fa7f 	bl	8014496 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013f98:	f000 fe5e 	bl	8014c58 <xTaskResumeAll>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	d189      	bne.n	8013eb6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013fa2:	4b10      	ldr	r3, [pc, #64]	; (8013fe4 <xQueueReceive+0x1bc>)
 8013fa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013fa8:	601a      	str	r2, [r3, #0]
 8013faa:	f3bf 8f4f 	dsb	sy
 8013fae:	f3bf 8f6f 	isb	sy
 8013fb2:	e780      	b.n	8013eb6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013fb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013fb6:	f000 fa6e 	bl	8014496 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013fba:	f000 fe4d 	bl	8014c58 <xTaskResumeAll>
 8013fbe:	e77a      	b.n	8013eb6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013fc0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013fc2:	f000 fa68 	bl	8014496 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013fc6:	f000 fe47 	bl	8014c58 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013fca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013fcc:	f000 fab5 	bl	801453a <prvIsQueueEmpty>
 8013fd0:	4603      	mov	r3, r0
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	f43f af6f 	beq.w	8013eb6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013fd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013fda:	4618      	mov	r0, r3
 8013fdc:	3730      	adds	r7, #48	; 0x30
 8013fde:	46bd      	mov	sp, r7
 8013fe0:	bd80      	pop	{r7, pc}
 8013fe2:	bf00      	nop
 8013fe4:	e000ed04 	.word	0xe000ed04

08013fe8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b08e      	sub	sp, #56	; 0x38
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
 8013ff0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8013ff2:	2300      	movs	r3, #0
 8013ff4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8013ffa:	2300      	movs	r3, #0
 8013ffc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014000:	2b00      	cmp	r3, #0
 8014002:	d10a      	bne.n	801401a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8014004:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014008:	f383 8811 	msr	BASEPRI, r3
 801400c:	f3bf 8f6f 	isb	sy
 8014010:	f3bf 8f4f 	dsb	sy
 8014014:	623b      	str	r3, [r7, #32]
}
 8014016:	bf00      	nop
 8014018:	e7fe      	b.n	8014018 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801401a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801401c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801401e:	2b00      	cmp	r3, #0
 8014020:	d00a      	beq.n	8014038 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8014022:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014026:	f383 8811 	msr	BASEPRI, r3
 801402a:	f3bf 8f6f 	isb	sy
 801402e:	f3bf 8f4f 	dsb	sy
 8014032:	61fb      	str	r3, [r7, #28]
}
 8014034:	bf00      	nop
 8014036:	e7fe      	b.n	8014036 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8014038:	f001 fb6e 	bl	8015718 <xTaskGetSchedulerState>
 801403c:	4603      	mov	r3, r0
 801403e:	2b00      	cmp	r3, #0
 8014040:	d102      	bne.n	8014048 <xQueueSemaphoreTake+0x60>
 8014042:	683b      	ldr	r3, [r7, #0]
 8014044:	2b00      	cmp	r3, #0
 8014046:	d101      	bne.n	801404c <xQueueSemaphoreTake+0x64>
 8014048:	2301      	movs	r3, #1
 801404a:	e000      	b.n	801404e <xQueueSemaphoreTake+0x66>
 801404c:	2300      	movs	r3, #0
 801404e:	2b00      	cmp	r3, #0
 8014050:	d10a      	bne.n	8014068 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8014052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014056:	f383 8811 	msr	BASEPRI, r3
 801405a:	f3bf 8f6f 	isb	sy
 801405e:	f3bf 8f4f 	dsb	sy
 8014062:	61bb      	str	r3, [r7, #24]
}
 8014064:	bf00      	nop
 8014066:	e7fe      	b.n	8014066 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8014068:	f002 faec 	bl	8016644 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 801406c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801406e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014070:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8014072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014074:	2b00      	cmp	r3, #0
 8014076:	d024      	beq.n	80140c2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8014078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801407a:	1e5a      	subs	r2, r3, #1
 801407c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801407e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	2b00      	cmp	r3, #0
 8014086:	d104      	bne.n	8014092 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8014088:	f001 fdfc 	bl	8015c84 <pvTaskIncrementMutexHeldCount>
 801408c:	4602      	mov	r2, r0
 801408e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014090:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014094:	691b      	ldr	r3, [r3, #16]
 8014096:	2b00      	cmp	r3, #0
 8014098:	d00f      	beq.n	80140ba <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801409a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801409c:	3310      	adds	r3, #16
 801409e:	4618      	mov	r0, r3
 80140a0:	f001 f8a4 	bl	80151ec <xTaskRemoveFromEventList>
 80140a4:	4603      	mov	r3, r0
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d007      	beq.n	80140ba <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80140aa:	4b54      	ldr	r3, [pc, #336]	; (80141fc <xQueueSemaphoreTake+0x214>)
 80140ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80140b0:	601a      	str	r2, [r3, #0]
 80140b2:	f3bf 8f4f 	dsb	sy
 80140b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80140ba:	f002 faf3 	bl	80166a4 <vPortExitCritical>
				return pdPASS;
 80140be:	2301      	movs	r3, #1
 80140c0:	e097      	b.n	80141f2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80140c2:	683b      	ldr	r3, [r7, #0]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d111      	bne.n	80140ec <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80140c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d00a      	beq.n	80140e4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80140ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140d2:	f383 8811 	msr	BASEPRI, r3
 80140d6:	f3bf 8f6f 	isb	sy
 80140da:	f3bf 8f4f 	dsb	sy
 80140de:	617b      	str	r3, [r7, #20]
}
 80140e0:	bf00      	nop
 80140e2:	e7fe      	b.n	80140e2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80140e4:	f002 fade 	bl	80166a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80140e8:	2300      	movs	r3, #0
 80140ea:	e082      	b.n	80141f2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80140ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d106      	bne.n	8014100 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80140f2:	f107 030c 	add.w	r3, r7, #12
 80140f6:	4618      	mov	r0, r3
 80140f8:	f001 f8dc 	bl	80152b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80140fc:	2301      	movs	r3, #1
 80140fe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8014100:	f002 fad0 	bl	80166a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8014104:	f000 fd9a 	bl	8014c3c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8014108:	f002 fa9c 	bl	8016644 <vPortEnterCritical>
 801410c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801410e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014112:	b25b      	sxtb	r3, r3
 8014114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014118:	d103      	bne.n	8014122 <xQueueSemaphoreTake+0x13a>
 801411a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801411c:	2200      	movs	r2, #0
 801411e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014124:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014128:	b25b      	sxtb	r3, r3
 801412a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801412e:	d103      	bne.n	8014138 <xQueueSemaphoreTake+0x150>
 8014130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014132:	2200      	movs	r2, #0
 8014134:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014138:	f002 fab4 	bl	80166a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801413c:	463a      	mov	r2, r7
 801413e:	f107 030c 	add.w	r3, r7, #12
 8014142:	4611      	mov	r1, r2
 8014144:	4618      	mov	r0, r3
 8014146:	f001 f8cb 	bl	80152e0 <xTaskCheckForTimeOut>
 801414a:	4603      	mov	r3, r0
 801414c:	2b00      	cmp	r3, #0
 801414e:	d132      	bne.n	80141b6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8014150:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014152:	f000 f9f2 	bl	801453a <prvIsQueueEmpty>
 8014156:	4603      	mov	r3, r0
 8014158:	2b00      	cmp	r3, #0
 801415a:	d026      	beq.n	80141aa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801415c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801415e:	681b      	ldr	r3, [r3, #0]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d109      	bne.n	8014178 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8014164:	f002 fa6e 	bl	8016644 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8014168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801416a:	689b      	ldr	r3, [r3, #8]
 801416c:	4618      	mov	r0, r3
 801416e:	f001 faf1 	bl	8015754 <xTaskPriorityInherit>
 8014172:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8014174:	f002 fa96 	bl	80166a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8014178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801417a:	3324      	adds	r3, #36	; 0x24
 801417c:	683a      	ldr	r2, [r7, #0]
 801417e:	4611      	mov	r1, r2
 8014180:	4618      	mov	r0, r3
 8014182:	f000 ffe3 	bl	801514c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8014186:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014188:	f000 f985 	bl	8014496 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 801418c:	f000 fd64 	bl	8014c58 <xTaskResumeAll>
 8014190:	4603      	mov	r3, r0
 8014192:	2b00      	cmp	r3, #0
 8014194:	f47f af68 	bne.w	8014068 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8014198:	4b18      	ldr	r3, [pc, #96]	; (80141fc <xQueueSemaphoreTake+0x214>)
 801419a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801419e:	601a      	str	r2, [r3, #0]
 80141a0:	f3bf 8f4f 	dsb	sy
 80141a4:	f3bf 8f6f 	isb	sy
 80141a8:	e75e      	b.n	8014068 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80141aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80141ac:	f000 f973 	bl	8014496 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80141b0:	f000 fd52 	bl	8014c58 <xTaskResumeAll>
 80141b4:	e758      	b.n	8014068 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80141b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80141b8:	f000 f96d 	bl	8014496 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80141bc:	f000 fd4c 	bl	8014c58 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80141c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80141c2:	f000 f9ba 	bl	801453a <prvIsQueueEmpty>
 80141c6:	4603      	mov	r3, r0
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	f43f af4d 	beq.w	8014068 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80141ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d00d      	beq.n	80141f0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80141d4:	f002 fa36 	bl	8016644 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80141d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80141da:	f000 f8b4 	bl	8014346 <prvGetDisinheritPriorityAfterTimeout>
 80141de:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80141e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141e2:	689b      	ldr	r3, [r3, #8]
 80141e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80141e6:	4618      	mov	r0, r3
 80141e8:	f001 fb8a 	bl	8015900 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80141ec:	f002 fa5a 	bl	80166a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80141f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80141f2:	4618      	mov	r0, r3
 80141f4:	3738      	adds	r7, #56	; 0x38
 80141f6:	46bd      	mov	sp, r7
 80141f8:	bd80      	pop	{r7, pc}
 80141fa:	bf00      	nop
 80141fc:	e000ed04 	.word	0xe000ed04

08014200 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8014200:	b580      	push	{r7, lr}
 8014202:	b08e      	sub	sp, #56	; 0x38
 8014204:	af00      	add	r7, sp, #0
 8014206:	60f8      	str	r0, [r7, #12]
 8014208:	60b9      	str	r1, [r7, #8]
 801420a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801420c:	68fb      	ldr	r3, [r7, #12]
 801420e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8014210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014212:	2b00      	cmp	r3, #0
 8014214:	d10a      	bne.n	801422c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8014216:	f04f 0350 	mov.w	r3, #80	; 0x50
 801421a:	f383 8811 	msr	BASEPRI, r3
 801421e:	f3bf 8f6f 	isb	sy
 8014222:	f3bf 8f4f 	dsb	sy
 8014226:	623b      	str	r3, [r7, #32]
}
 8014228:	bf00      	nop
 801422a:	e7fe      	b.n	801422a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801422c:	68bb      	ldr	r3, [r7, #8]
 801422e:	2b00      	cmp	r3, #0
 8014230:	d103      	bne.n	801423a <xQueueReceiveFromISR+0x3a>
 8014232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014236:	2b00      	cmp	r3, #0
 8014238:	d101      	bne.n	801423e <xQueueReceiveFromISR+0x3e>
 801423a:	2301      	movs	r3, #1
 801423c:	e000      	b.n	8014240 <xQueueReceiveFromISR+0x40>
 801423e:	2300      	movs	r3, #0
 8014240:	2b00      	cmp	r3, #0
 8014242:	d10a      	bne.n	801425a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8014244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014248:	f383 8811 	msr	BASEPRI, r3
 801424c:	f3bf 8f6f 	isb	sy
 8014250:	f3bf 8f4f 	dsb	sy
 8014254:	61fb      	str	r3, [r7, #28]
}
 8014256:	bf00      	nop
 8014258:	e7fe      	b.n	8014258 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801425a:	f002 fad5 	bl	8016808 <vPortValidateInterruptPriority>
	__asm volatile
 801425e:	f3ef 8211 	mrs	r2, BASEPRI
 8014262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014266:	f383 8811 	msr	BASEPRI, r3
 801426a:	f3bf 8f6f 	isb	sy
 801426e:	f3bf 8f4f 	dsb	sy
 8014272:	61ba      	str	r2, [r7, #24]
 8014274:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8014276:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014278:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801427a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801427c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801427e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8014280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014282:	2b00      	cmp	r3, #0
 8014284:	d02f      	beq.n	80142e6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8014286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014288:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801428c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8014290:	68b9      	ldr	r1, [r7, #8]
 8014292:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014294:	f000 f8d9 	bl	801444a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8014298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801429a:	1e5a      	subs	r2, r3, #1
 801429c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801429e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80142a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80142a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80142a8:	d112      	bne.n	80142d0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80142aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142ac:	691b      	ldr	r3, [r3, #16]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d016      	beq.n	80142e0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80142b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142b4:	3310      	adds	r3, #16
 80142b6:	4618      	mov	r0, r3
 80142b8:	f000 ff98 	bl	80151ec <xTaskRemoveFromEventList>
 80142bc:	4603      	mov	r3, r0
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d00e      	beq.n	80142e0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d00b      	beq.n	80142e0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	2201      	movs	r2, #1
 80142cc:	601a      	str	r2, [r3, #0]
 80142ce:	e007      	b.n	80142e0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80142d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80142d4:	3301      	adds	r3, #1
 80142d6:	b2db      	uxtb	r3, r3
 80142d8:	b25a      	sxtb	r2, r3
 80142da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80142e0:	2301      	movs	r3, #1
 80142e2:	637b      	str	r3, [r7, #52]	; 0x34
 80142e4:	e001      	b.n	80142ea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80142e6:	2300      	movs	r3, #0
 80142e8:	637b      	str	r3, [r7, #52]	; 0x34
 80142ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 80142ee:	693b      	ldr	r3, [r7, #16]
 80142f0:	f383 8811 	msr	BASEPRI, r3
}
 80142f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80142f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80142f8:	4618      	mov	r0, r3
 80142fa:	3738      	adds	r7, #56	; 0x38
 80142fc:	46bd      	mov	sp, r7
 80142fe:	bd80      	pop	{r7, pc}

08014300 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8014300:	b580      	push	{r7, lr}
 8014302:	b084      	sub	sp, #16
 8014304:	af00      	add	r7, sp, #0
 8014306:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d10a      	bne.n	8014328 <vQueueDelete+0x28>
	__asm volatile
 8014312:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014316:	f383 8811 	msr	BASEPRI, r3
 801431a:	f3bf 8f6f 	isb	sy
 801431e:	f3bf 8f4f 	dsb	sy
 8014322:	60bb      	str	r3, [r7, #8]
}
 8014324:	bf00      	nop
 8014326:	e7fe      	b.n	8014326 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8014328:	68f8      	ldr	r0, [r7, #12]
 801432a:	f000 f95f 	bl	80145ec <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801432e:	68fb      	ldr	r3, [r7, #12]
 8014330:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8014334:	2b00      	cmp	r3, #0
 8014336:	d102      	bne.n	801433e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8014338:	68f8      	ldr	r0, [r7, #12]
 801433a:	f002 fb71 	bl	8016a20 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801433e:	bf00      	nop
 8014340:	3710      	adds	r7, #16
 8014342:	46bd      	mov	sp, r7
 8014344:	bd80      	pop	{r7, pc}

08014346 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8014346:	b480      	push	{r7}
 8014348:	b085      	sub	sp, #20
 801434a:	af00      	add	r7, sp, #0
 801434c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014352:	2b00      	cmp	r3, #0
 8014354:	d006      	beq.n	8014364 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8014356:	687b      	ldr	r3, [r7, #4]
 8014358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8014360:	60fb      	str	r3, [r7, #12]
 8014362:	e001      	b.n	8014368 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8014364:	2300      	movs	r3, #0
 8014366:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8014368:	68fb      	ldr	r3, [r7, #12]
	}
 801436a:	4618      	mov	r0, r3
 801436c:	3714      	adds	r7, #20
 801436e:	46bd      	mov	sp, r7
 8014370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014374:	4770      	bx	lr

08014376 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8014376:	b580      	push	{r7, lr}
 8014378:	b086      	sub	sp, #24
 801437a:	af00      	add	r7, sp, #0
 801437c:	60f8      	str	r0, [r7, #12]
 801437e:	60b9      	str	r1, [r7, #8]
 8014380:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8014382:	2300      	movs	r3, #0
 8014384:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8014386:	68fb      	ldr	r3, [r7, #12]
 8014388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801438a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801438c:	68fb      	ldr	r3, [r7, #12]
 801438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014390:	2b00      	cmp	r3, #0
 8014392:	d10d      	bne.n	80143b0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	2b00      	cmp	r3, #0
 801439a:	d14d      	bne.n	8014438 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	689b      	ldr	r3, [r3, #8]
 80143a0:	4618      	mov	r0, r3
 80143a2:	f001 fa3f 	bl	8015824 <xTaskPriorityDisinherit>
 80143a6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	2200      	movs	r2, #0
 80143ac:	609a      	str	r2, [r3, #8]
 80143ae:	e043      	b.n	8014438 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	2b00      	cmp	r3, #0
 80143b4:	d119      	bne.n	80143ea <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80143b6:	68fb      	ldr	r3, [r7, #12]
 80143b8:	6858      	ldr	r0, [r3, #4]
 80143ba:	68fb      	ldr	r3, [r7, #12]
 80143bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143be:	461a      	mov	r2, r3
 80143c0:	68b9      	ldr	r1, [r7, #8]
 80143c2:	f003 facd 	bl	8017960 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	685a      	ldr	r2, [r3, #4]
 80143ca:	68fb      	ldr	r3, [r7, #12]
 80143cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143ce:	441a      	add	r2, r3
 80143d0:	68fb      	ldr	r3, [r7, #12]
 80143d2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80143d4:	68fb      	ldr	r3, [r7, #12]
 80143d6:	685a      	ldr	r2, [r3, #4]
 80143d8:	68fb      	ldr	r3, [r7, #12]
 80143da:	689b      	ldr	r3, [r3, #8]
 80143dc:	429a      	cmp	r2, r3
 80143de:	d32b      	bcc.n	8014438 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80143e0:	68fb      	ldr	r3, [r7, #12]
 80143e2:	681a      	ldr	r2, [r3, #0]
 80143e4:	68fb      	ldr	r3, [r7, #12]
 80143e6:	605a      	str	r2, [r3, #4]
 80143e8:	e026      	b.n	8014438 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80143ea:	68fb      	ldr	r3, [r7, #12]
 80143ec:	68d8      	ldr	r0, [r3, #12]
 80143ee:	68fb      	ldr	r3, [r7, #12]
 80143f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80143f2:	461a      	mov	r2, r3
 80143f4:	68b9      	ldr	r1, [r7, #8]
 80143f6:	f003 fab3 	bl	8017960 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	68da      	ldr	r2, [r3, #12]
 80143fe:	68fb      	ldr	r3, [r7, #12]
 8014400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014402:	425b      	negs	r3, r3
 8014404:	441a      	add	r2, r3
 8014406:	68fb      	ldr	r3, [r7, #12]
 8014408:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	68da      	ldr	r2, [r3, #12]
 801440e:	68fb      	ldr	r3, [r7, #12]
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	429a      	cmp	r2, r3
 8014414:	d207      	bcs.n	8014426 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8014416:	68fb      	ldr	r3, [r7, #12]
 8014418:	689a      	ldr	r2, [r3, #8]
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801441e:	425b      	negs	r3, r3
 8014420:	441a      	add	r2, r3
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	2b02      	cmp	r3, #2
 801442a:	d105      	bne.n	8014438 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 801442c:	693b      	ldr	r3, [r7, #16]
 801442e:	2b00      	cmp	r3, #0
 8014430:	d002      	beq.n	8014438 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8014432:	693b      	ldr	r3, [r7, #16]
 8014434:	3b01      	subs	r3, #1
 8014436:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8014438:	693b      	ldr	r3, [r7, #16]
 801443a:	1c5a      	adds	r2, r3, #1
 801443c:	68fb      	ldr	r3, [r7, #12]
 801443e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8014440:	697b      	ldr	r3, [r7, #20]
}
 8014442:	4618      	mov	r0, r3
 8014444:	3718      	adds	r7, #24
 8014446:	46bd      	mov	sp, r7
 8014448:	bd80      	pop	{r7, pc}

0801444a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 801444a:	b580      	push	{r7, lr}
 801444c:	b082      	sub	sp, #8
 801444e:	af00      	add	r7, sp, #0
 8014450:	6078      	str	r0, [r7, #4]
 8014452:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014458:	2b00      	cmp	r3, #0
 801445a:	d018      	beq.n	801448e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	68da      	ldr	r2, [r3, #12]
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014464:	441a      	add	r2, r3
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801446a:	687b      	ldr	r3, [r7, #4]
 801446c:	68da      	ldr	r2, [r3, #12]
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	689b      	ldr	r3, [r3, #8]
 8014472:	429a      	cmp	r2, r3
 8014474:	d303      	bcc.n	801447e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	681a      	ldr	r2, [r3, #0]
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801447e:	687b      	ldr	r3, [r7, #4]
 8014480:	68d9      	ldr	r1, [r3, #12]
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014486:	461a      	mov	r2, r3
 8014488:	6838      	ldr	r0, [r7, #0]
 801448a:	f003 fa69 	bl	8017960 <memcpy>
	}
}
 801448e:	bf00      	nop
 8014490:	3708      	adds	r7, #8
 8014492:	46bd      	mov	sp, r7
 8014494:	bd80      	pop	{r7, pc}

08014496 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8014496:	b580      	push	{r7, lr}
 8014498:	b084      	sub	sp, #16
 801449a:	af00      	add	r7, sp, #0
 801449c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801449e:	f002 f8d1 	bl	8016644 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80144a2:	687b      	ldr	r3, [r7, #4]
 80144a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80144a8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80144aa:	e011      	b.n	80144d0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80144b0:	2b00      	cmp	r3, #0
 80144b2:	d012      	beq.n	80144da <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	3324      	adds	r3, #36	; 0x24
 80144b8:	4618      	mov	r0, r3
 80144ba:	f000 fe97 	bl	80151ec <xTaskRemoveFromEventList>
 80144be:	4603      	mov	r3, r0
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d001      	beq.n	80144c8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80144c4:	f000 ff6e 	bl	80153a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80144c8:	7bfb      	ldrb	r3, [r7, #15]
 80144ca:	3b01      	subs	r3, #1
 80144cc:	b2db      	uxtb	r3, r3
 80144ce:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80144d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	dce9      	bgt.n	80144ac <prvUnlockQueue+0x16>
 80144d8:	e000      	b.n	80144dc <prvUnlockQueue+0x46>
					break;
 80144da:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	22ff      	movs	r2, #255	; 0xff
 80144e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80144e4:	f002 f8de 	bl	80166a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80144e8:	f002 f8ac 	bl	8016644 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80144f2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80144f4:	e011      	b.n	801451a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80144f6:	687b      	ldr	r3, [r7, #4]
 80144f8:	691b      	ldr	r3, [r3, #16]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d012      	beq.n	8014524 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	3310      	adds	r3, #16
 8014502:	4618      	mov	r0, r3
 8014504:	f000 fe72 	bl	80151ec <xTaskRemoveFromEventList>
 8014508:	4603      	mov	r3, r0
 801450a:	2b00      	cmp	r3, #0
 801450c:	d001      	beq.n	8014512 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801450e:	f000 ff49 	bl	80153a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014512:	7bbb      	ldrb	r3, [r7, #14]
 8014514:	3b01      	subs	r3, #1
 8014516:	b2db      	uxtb	r3, r3
 8014518:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 801451a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801451e:	2b00      	cmp	r3, #0
 8014520:	dce9      	bgt.n	80144f6 <prvUnlockQueue+0x60>
 8014522:	e000      	b.n	8014526 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014524:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	22ff      	movs	r2, #255	; 0xff
 801452a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801452e:	f002 f8b9 	bl	80166a4 <vPortExitCritical>
}
 8014532:	bf00      	nop
 8014534:	3710      	adds	r7, #16
 8014536:	46bd      	mov	sp, r7
 8014538:	bd80      	pop	{r7, pc}

0801453a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 801453a:	b580      	push	{r7, lr}
 801453c:	b084      	sub	sp, #16
 801453e:	af00      	add	r7, sp, #0
 8014540:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014542:	f002 f87f 	bl	8016644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014546:	687b      	ldr	r3, [r7, #4]
 8014548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801454a:	2b00      	cmp	r3, #0
 801454c:	d102      	bne.n	8014554 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801454e:	2301      	movs	r3, #1
 8014550:	60fb      	str	r3, [r7, #12]
 8014552:	e001      	b.n	8014558 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014554:	2300      	movs	r3, #0
 8014556:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014558:	f002 f8a4 	bl	80166a4 <vPortExitCritical>

	return xReturn;
 801455c:	68fb      	ldr	r3, [r7, #12]
}
 801455e:	4618      	mov	r0, r3
 8014560:	3710      	adds	r7, #16
 8014562:	46bd      	mov	sp, r7
 8014564:	bd80      	pop	{r7, pc}

08014566 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014566:	b580      	push	{r7, lr}
 8014568:	b084      	sub	sp, #16
 801456a:	af00      	add	r7, sp, #0
 801456c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801456e:	f002 f869 	bl	8016644 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801457a:	429a      	cmp	r2, r3
 801457c:	d102      	bne.n	8014584 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801457e:	2301      	movs	r3, #1
 8014580:	60fb      	str	r3, [r7, #12]
 8014582:	e001      	b.n	8014588 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8014584:	2300      	movs	r3, #0
 8014586:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014588:	f002 f88c 	bl	80166a4 <vPortExitCritical>

	return xReturn;
 801458c:	68fb      	ldr	r3, [r7, #12]
}
 801458e:	4618      	mov	r0, r3
 8014590:	3710      	adds	r7, #16
 8014592:	46bd      	mov	sp, r7
 8014594:	bd80      	pop	{r7, pc}
	...

08014598 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8014598:	b480      	push	{r7}
 801459a:	b085      	sub	sp, #20
 801459c:	af00      	add	r7, sp, #0
 801459e:	6078      	str	r0, [r7, #4]
 80145a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80145a2:	2300      	movs	r3, #0
 80145a4:	60fb      	str	r3, [r7, #12]
 80145a6:	e014      	b.n	80145d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80145a8:	4a0f      	ldr	r2, [pc, #60]	; (80145e8 <vQueueAddToRegistry+0x50>)
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d10b      	bne.n	80145cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80145b4:	490c      	ldr	r1, [pc, #48]	; (80145e8 <vQueueAddToRegistry+0x50>)
 80145b6:	68fb      	ldr	r3, [r7, #12]
 80145b8:	683a      	ldr	r2, [r7, #0]
 80145ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80145be:	4a0a      	ldr	r2, [pc, #40]	; (80145e8 <vQueueAddToRegistry+0x50>)
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	00db      	lsls	r3, r3, #3
 80145c4:	4413      	add	r3, r2
 80145c6:	687a      	ldr	r2, [r7, #4]
 80145c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80145ca:	e006      	b.n	80145da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80145cc:	68fb      	ldr	r3, [r7, #12]
 80145ce:	3301      	adds	r3, #1
 80145d0:	60fb      	str	r3, [r7, #12]
 80145d2:	68fb      	ldr	r3, [r7, #12]
 80145d4:	2b07      	cmp	r3, #7
 80145d6:	d9e7      	bls.n	80145a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80145d8:	bf00      	nop
 80145da:	bf00      	nop
 80145dc:	3714      	adds	r7, #20
 80145de:	46bd      	mov	sp, r7
 80145e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145e4:	4770      	bx	lr
 80145e6:	bf00      	nop
 80145e8:	20012ed8 	.word	0x20012ed8

080145ec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80145ec:	b480      	push	{r7}
 80145ee:	b085      	sub	sp, #20
 80145f0:	af00      	add	r7, sp, #0
 80145f2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80145f4:	2300      	movs	r3, #0
 80145f6:	60fb      	str	r3, [r7, #12]
 80145f8:	e016      	b.n	8014628 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80145fa:	4a10      	ldr	r2, [pc, #64]	; (801463c <vQueueUnregisterQueue+0x50>)
 80145fc:	68fb      	ldr	r3, [r7, #12]
 80145fe:	00db      	lsls	r3, r3, #3
 8014600:	4413      	add	r3, r2
 8014602:	685b      	ldr	r3, [r3, #4]
 8014604:	687a      	ldr	r2, [r7, #4]
 8014606:	429a      	cmp	r2, r3
 8014608:	d10b      	bne.n	8014622 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801460a:	4a0c      	ldr	r2, [pc, #48]	; (801463c <vQueueUnregisterQueue+0x50>)
 801460c:	68fb      	ldr	r3, [r7, #12]
 801460e:	2100      	movs	r1, #0
 8014610:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8014614:	4a09      	ldr	r2, [pc, #36]	; (801463c <vQueueUnregisterQueue+0x50>)
 8014616:	68fb      	ldr	r3, [r7, #12]
 8014618:	00db      	lsls	r3, r3, #3
 801461a:	4413      	add	r3, r2
 801461c:	2200      	movs	r2, #0
 801461e:	605a      	str	r2, [r3, #4]
				break;
 8014620:	e006      	b.n	8014630 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	3301      	adds	r3, #1
 8014626:	60fb      	str	r3, [r7, #12]
 8014628:	68fb      	ldr	r3, [r7, #12]
 801462a:	2b07      	cmp	r3, #7
 801462c:	d9e5      	bls.n	80145fa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 801462e:	bf00      	nop
 8014630:	bf00      	nop
 8014632:	3714      	adds	r7, #20
 8014634:	46bd      	mov	sp, r7
 8014636:	f85d 7b04 	ldr.w	r7, [sp], #4
 801463a:	4770      	bx	lr
 801463c:	20012ed8 	.word	0x20012ed8

08014640 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014640:	b580      	push	{r7, lr}
 8014642:	b086      	sub	sp, #24
 8014644:	af00      	add	r7, sp, #0
 8014646:	60f8      	str	r0, [r7, #12]
 8014648:	60b9      	str	r1, [r7, #8]
 801464a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014650:	f001 fff8 	bl	8016644 <vPortEnterCritical>
 8014654:	697b      	ldr	r3, [r7, #20]
 8014656:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801465a:	b25b      	sxtb	r3, r3
 801465c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014660:	d103      	bne.n	801466a <vQueueWaitForMessageRestricted+0x2a>
 8014662:	697b      	ldr	r3, [r7, #20]
 8014664:	2200      	movs	r2, #0
 8014666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801466a:	697b      	ldr	r3, [r7, #20]
 801466c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014670:	b25b      	sxtb	r3, r3
 8014672:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014676:	d103      	bne.n	8014680 <vQueueWaitForMessageRestricted+0x40>
 8014678:	697b      	ldr	r3, [r7, #20]
 801467a:	2200      	movs	r2, #0
 801467c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014680:	f002 f810 	bl	80166a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8014684:	697b      	ldr	r3, [r7, #20]
 8014686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014688:	2b00      	cmp	r3, #0
 801468a:	d106      	bne.n	801469a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 801468c:	697b      	ldr	r3, [r7, #20]
 801468e:	3324      	adds	r3, #36	; 0x24
 8014690:	687a      	ldr	r2, [r7, #4]
 8014692:	68b9      	ldr	r1, [r7, #8]
 8014694:	4618      	mov	r0, r3
 8014696:	f000 fd7d 	bl	8015194 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 801469a:	6978      	ldr	r0, [r7, #20]
 801469c:	f7ff fefb 	bl	8014496 <prvUnlockQueue>
	}
 80146a0:	bf00      	nop
 80146a2:	3718      	adds	r7, #24
 80146a4:	46bd      	mov	sp, r7
 80146a6:	bd80      	pop	{r7, pc}

080146a8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80146a8:	b580      	push	{r7, lr}
 80146aa:	b08e      	sub	sp, #56	; 0x38
 80146ac:	af04      	add	r7, sp, #16
 80146ae:	60f8      	str	r0, [r7, #12]
 80146b0:	60b9      	str	r1, [r7, #8]
 80146b2:	607a      	str	r2, [r7, #4]
 80146b4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80146b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146b8:	2b00      	cmp	r3, #0
 80146ba:	d10a      	bne.n	80146d2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80146bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146c0:	f383 8811 	msr	BASEPRI, r3
 80146c4:	f3bf 8f6f 	isb	sy
 80146c8:	f3bf 8f4f 	dsb	sy
 80146cc:	623b      	str	r3, [r7, #32]
}
 80146ce:	bf00      	nop
 80146d0:	e7fe      	b.n	80146d0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80146d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	d10a      	bne.n	80146ee <xTaskCreateStatic+0x46>
	__asm volatile
 80146d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146dc:	f383 8811 	msr	BASEPRI, r3
 80146e0:	f3bf 8f6f 	isb	sy
 80146e4:	f3bf 8f4f 	dsb	sy
 80146e8:	61fb      	str	r3, [r7, #28]
}
 80146ea:	bf00      	nop
 80146ec:	e7fe      	b.n	80146ec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80146ee:	23c0      	movs	r3, #192	; 0xc0
 80146f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80146f2:	693b      	ldr	r3, [r7, #16]
 80146f4:	2bc0      	cmp	r3, #192	; 0xc0
 80146f6:	d00a      	beq.n	801470e <xTaskCreateStatic+0x66>
	__asm volatile
 80146f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146fc:	f383 8811 	msr	BASEPRI, r3
 8014700:	f3bf 8f6f 	isb	sy
 8014704:	f3bf 8f4f 	dsb	sy
 8014708:	61bb      	str	r3, [r7, #24]
}
 801470a:	bf00      	nop
 801470c:	e7fe      	b.n	801470c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801470e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014710:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014712:	2b00      	cmp	r3, #0
 8014714:	d01e      	beq.n	8014754 <xTaskCreateStatic+0xac>
 8014716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014718:	2b00      	cmp	r3, #0
 801471a:	d01b      	beq.n	8014754 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801471c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801471e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014722:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014724:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8014726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014728:	2202      	movs	r2, #2
 801472a:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801472e:	2300      	movs	r3, #0
 8014730:	9303      	str	r3, [sp, #12]
 8014732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014734:	9302      	str	r3, [sp, #8]
 8014736:	f107 0314 	add.w	r3, r7, #20
 801473a:	9301      	str	r3, [sp, #4]
 801473c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801473e:	9300      	str	r3, [sp, #0]
 8014740:	683b      	ldr	r3, [r7, #0]
 8014742:	687a      	ldr	r2, [r7, #4]
 8014744:	68b9      	ldr	r1, [r7, #8]
 8014746:	68f8      	ldr	r0, [r7, #12]
 8014748:	f000 f850 	bl	80147ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801474c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801474e:	f000 f8f7 	bl	8014940 <prvAddNewTaskToReadyList>
 8014752:	e001      	b.n	8014758 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8014754:	2300      	movs	r3, #0
 8014756:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014758:	697b      	ldr	r3, [r7, #20]
	}
 801475a:	4618      	mov	r0, r3
 801475c:	3728      	adds	r7, #40	; 0x28
 801475e:	46bd      	mov	sp, r7
 8014760:	bd80      	pop	{r7, pc}

08014762 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8014762:	b580      	push	{r7, lr}
 8014764:	b08c      	sub	sp, #48	; 0x30
 8014766:	af04      	add	r7, sp, #16
 8014768:	60f8      	str	r0, [r7, #12]
 801476a:	60b9      	str	r1, [r7, #8]
 801476c:	603b      	str	r3, [r7, #0]
 801476e:	4613      	mov	r3, r2
 8014770:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8014772:	88fb      	ldrh	r3, [r7, #6]
 8014774:	009b      	lsls	r3, r3, #2
 8014776:	4618      	mov	r0, r3
 8014778:	f002 f886 	bl	8016888 <pvPortMalloc>
 801477c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801477e:	697b      	ldr	r3, [r7, #20]
 8014780:	2b00      	cmp	r3, #0
 8014782:	d00e      	beq.n	80147a2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8014784:	20c0      	movs	r0, #192	; 0xc0
 8014786:	f002 f87f 	bl	8016888 <pvPortMalloc>
 801478a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801478c:	69fb      	ldr	r3, [r7, #28]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d003      	beq.n	801479a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8014792:	69fb      	ldr	r3, [r7, #28]
 8014794:	697a      	ldr	r2, [r7, #20]
 8014796:	631a      	str	r2, [r3, #48]	; 0x30
 8014798:	e005      	b.n	80147a6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801479a:	6978      	ldr	r0, [r7, #20]
 801479c:	f002 f940 	bl	8016a20 <vPortFree>
 80147a0:	e001      	b.n	80147a6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80147a2:	2300      	movs	r3, #0
 80147a4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80147a6:	69fb      	ldr	r3, [r7, #28]
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	d017      	beq.n	80147dc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80147ac:	69fb      	ldr	r3, [r7, #28]
 80147ae:	2200      	movs	r2, #0
 80147b0:	f883 20bd 	strb.w	r2, [r3, #189]	; 0xbd
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80147b4:	88fa      	ldrh	r2, [r7, #6]
 80147b6:	2300      	movs	r3, #0
 80147b8:	9303      	str	r3, [sp, #12]
 80147ba:	69fb      	ldr	r3, [r7, #28]
 80147bc:	9302      	str	r3, [sp, #8]
 80147be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147c0:	9301      	str	r3, [sp, #4]
 80147c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147c4:	9300      	str	r3, [sp, #0]
 80147c6:	683b      	ldr	r3, [r7, #0]
 80147c8:	68b9      	ldr	r1, [r7, #8]
 80147ca:	68f8      	ldr	r0, [r7, #12]
 80147cc:	f000 f80e 	bl	80147ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80147d0:	69f8      	ldr	r0, [r7, #28]
 80147d2:	f000 f8b5 	bl	8014940 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80147d6:	2301      	movs	r3, #1
 80147d8:	61bb      	str	r3, [r7, #24]
 80147da:	e002      	b.n	80147e2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80147dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80147e0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80147e2:	69bb      	ldr	r3, [r7, #24]
	}
 80147e4:	4618      	mov	r0, r3
 80147e6:	3720      	adds	r7, #32
 80147e8:	46bd      	mov	sp, r7
 80147ea:	bd80      	pop	{r7, pc}

080147ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80147ec:	b580      	push	{r7, lr}
 80147ee:	b088      	sub	sp, #32
 80147f0:	af00      	add	r7, sp, #0
 80147f2:	60f8      	str	r0, [r7, #12]
 80147f4:	60b9      	str	r1, [r7, #8]
 80147f6:	607a      	str	r2, [r7, #4]
 80147f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80147fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80147fe:	687b      	ldr	r3, [r7, #4]
 8014800:	009b      	lsls	r3, r3, #2
 8014802:	461a      	mov	r2, r3
 8014804:	21a5      	movs	r1, #165	; 0xa5
 8014806:	f003 f8b9 	bl	801797c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801480a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801480c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8014814:	3b01      	subs	r3, #1
 8014816:	009b      	lsls	r3, r3, #2
 8014818:	4413      	add	r3, r2
 801481a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801481c:	69bb      	ldr	r3, [r7, #24]
 801481e:	f023 0307 	bic.w	r3, r3, #7
 8014822:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8014824:	69bb      	ldr	r3, [r7, #24]
 8014826:	f003 0307 	and.w	r3, r3, #7
 801482a:	2b00      	cmp	r3, #0
 801482c:	d00a      	beq.n	8014844 <prvInitialiseNewTask+0x58>
	__asm volatile
 801482e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014832:	f383 8811 	msr	BASEPRI, r3
 8014836:	f3bf 8f6f 	isb	sy
 801483a:	f3bf 8f4f 	dsb	sy
 801483e:	617b      	str	r3, [r7, #20]
}
 8014840:	bf00      	nop
 8014842:	e7fe      	b.n	8014842 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8014844:	68bb      	ldr	r3, [r7, #8]
 8014846:	2b00      	cmp	r3, #0
 8014848:	d01f      	beq.n	801488a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801484a:	2300      	movs	r3, #0
 801484c:	61fb      	str	r3, [r7, #28]
 801484e:	e012      	b.n	8014876 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014850:	68ba      	ldr	r2, [r7, #8]
 8014852:	69fb      	ldr	r3, [r7, #28]
 8014854:	4413      	add	r3, r2
 8014856:	7819      	ldrb	r1, [r3, #0]
 8014858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801485a:	69fb      	ldr	r3, [r7, #28]
 801485c:	4413      	add	r3, r2
 801485e:	3334      	adds	r3, #52	; 0x34
 8014860:	460a      	mov	r2, r1
 8014862:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8014864:	68ba      	ldr	r2, [r7, #8]
 8014866:	69fb      	ldr	r3, [r7, #28]
 8014868:	4413      	add	r3, r2
 801486a:	781b      	ldrb	r3, [r3, #0]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d006      	beq.n	801487e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014870:	69fb      	ldr	r3, [r7, #28]
 8014872:	3301      	adds	r3, #1
 8014874:	61fb      	str	r3, [r7, #28]
 8014876:	69fb      	ldr	r3, [r7, #28]
 8014878:	2b0f      	cmp	r3, #15
 801487a:	d9e9      	bls.n	8014850 <prvInitialiseNewTask+0x64>
 801487c:	e000      	b.n	8014880 <prvInitialiseNewTask+0x94>
			{
				break;
 801487e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014882:	2200      	movs	r2, #0
 8014884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014888:	e003      	b.n	8014892 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801488c:	2200      	movs	r2, #0
 801488e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8014892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014894:	2b37      	cmp	r3, #55	; 0x37
 8014896:	d901      	bls.n	801489c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014898:	2337      	movs	r3, #55	; 0x37
 801489a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801489c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801489e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80148a0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80148a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80148a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80148a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148aa:	2200      	movs	r2, #0
 80148ac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80148ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148b0:	3304      	adds	r3, #4
 80148b2:	4618      	mov	r0, r3
 80148b4:	f7fe fe56 	bl	8013564 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80148b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148ba:	3318      	adds	r3, #24
 80148bc:	4618      	mov	r0, r3
 80148be:	f7fe fe51 	bl	8013564 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80148c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80148c6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80148c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148ca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80148ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148d0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80148d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80148d6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80148d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148da:	2200      	movs	r2, #0
 80148dc:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80148de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148e0:	2200      	movs	r2, #0
 80148e2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80148e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148e8:	2200      	movs	r2, #0
 80148ea:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80148ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148f0:	3358      	adds	r3, #88	; 0x58
 80148f2:	2260      	movs	r2, #96	; 0x60
 80148f4:	2100      	movs	r1, #0
 80148f6:	4618      	mov	r0, r3
 80148f8:	f003 f840 	bl	801797c <memset>
 80148fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80148fe:	4a0d      	ldr	r2, [pc, #52]	; (8014934 <prvInitialiseNewTask+0x148>)
 8014900:	65da      	str	r2, [r3, #92]	; 0x5c
 8014902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014904:	4a0c      	ldr	r2, [pc, #48]	; (8014938 <prvInitialiseNewTask+0x14c>)
 8014906:	661a      	str	r2, [r3, #96]	; 0x60
 8014908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801490a:	4a0c      	ldr	r2, [pc, #48]	; (801493c <prvInitialiseNewTask+0x150>)
 801490c:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801490e:	683a      	ldr	r2, [r7, #0]
 8014910:	68f9      	ldr	r1, [r7, #12]
 8014912:	69b8      	ldr	r0, [r7, #24]
 8014914:	f001 fd6c 	bl	80163f0 <pxPortInitialiseStack>
 8014918:	4602      	mov	r2, r0
 801491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801491c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801491e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014920:	2b00      	cmp	r3, #0
 8014922:	d002      	beq.n	801492a <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8014924:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014928:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801492a:	bf00      	nop
 801492c:	3720      	adds	r7, #32
 801492e:	46bd      	mov	sp, r7
 8014930:	bd80      	pop	{r7, pc}
 8014932:	bf00      	nop
 8014934:	0801f070 	.word	0x0801f070
 8014938:	0801f090 	.word	0x0801f090
 801493c:	0801f050 	.word	0x0801f050

08014940 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014940:	b580      	push	{r7, lr}
 8014942:	b082      	sub	sp, #8
 8014944:	af00      	add	r7, sp, #0
 8014946:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8014948:	f001 fe7c 	bl	8016644 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801494c:	4b2d      	ldr	r3, [pc, #180]	; (8014a04 <prvAddNewTaskToReadyList+0xc4>)
 801494e:	681b      	ldr	r3, [r3, #0]
 8014950:	3301      	adds	r3, #1
 8014952:	4a2c      	ldr	r2, [pc, #176]	; (8014a04 <prvAddNewTaskToReadyList+0xc4>)
 8014954:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8014956:	4b2c      	ldr	r3, [pc, #176]	; (8014a08 <prvAddNewTaskToReadyList+0xc8>)
 8014958:	681b      	ldr	r3, [r3, #0]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d109      	bne.n	8014972 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801495e:	4a2a      	ldr	r2, [pc, #168]	; (8014a08 <prvAddNewTaskToReadyList+0xc8>)
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014964:	4b27      	ldr	r3, [pc, #156]	; (8014a04 <prvAddNewTaskToReadyList+0xc4>)
 8014966:	681b      	ldr	r3, [r3, #0]
 8014968:	2b01      	cmp	r3, #1
 801496a:	d110      	bne.n	801498e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801496c:	f000 fd3e 	bl	80153ec <prvInitialiseTaskLists>
 8014970:	e00d      	b.n	801498e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014972:	4b26      	ldr	r3, [pc, #152]	; (8014a0c <prvAddNewTaskToReadyList+0xcc>)
 8014974:	681b      	ldr	r3, [r3, #0]
 8014976:	2b00      	cmp	r3, #0
 8014978:	d109      	bne.n	801498e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801497a:	4b23      	ldr	r3, [pc, #140]	; (8014a08 <prvAddNewTaskToReadyList+0xc8>)
 801497c:	681b      	ldr	r3, [r3, #0]
 801497e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014984:	429a      	cmp	r2, r3
 8014986:	d802      	bhi.n	801498e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8014988:	4a1f      	ldr	r2, [pc, #124]	; (8014a08 <prvAddNewTaskToReadyList+0xc8>)
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801498e:	4b20      	ldr	r3, [pc, #128]	; (8014a10 <prvAddNewTaskToReadyList+0xd0>)
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	3301      	adds	r3, #1
 8014994:	4a1e      	ldr	r2, [pc, #120]	; (8014a10 <prvAddNewTaskToReadyList+0xd0>)
 8014996:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8014998:	4b1d      	ldr	r3, [pc, #116]	; (8014a10 <prvAddNewTaskToReadyList+0xd0>)
 801499a:	681a      	ldr	r2, [r3, #0]
 801499c:	687b      	ldr	r3, [r7, #4]
 801499e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149a4:	4b1b      	ldr	r3, [pc, #108]	; (8014a14 <prvAddNewTaskToReadyList+0xd4>)
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	429a      	cmp	r2, r3
 80149aa:	d903      	bls.n	80149b4 <prvAddNewTaskToReadyList+0x74>
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149b0:	4a18      	ldr	r2, [pc, #96]	; (8014a14 <prvAddNewTaskToReadyList+0xd4>)
 80149b2:	6013      	str	r3, [r2, #0]
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149b8:	4613      	mov	r3, r2
 80149ba:	009b      	lsls	r3, r3, #2
 80149bc:	4413      	add	r3, r2
 80149be:	009b      	lsls	r3, r3, #2
 80149c0:	4a15      	ldr	r2, [pc, #84]	; (8014a18 <prvAddNewTaskToReadyList+0xd8>)
 80149c2:	441a      	add	r2, r3
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	3304      	adds	r3, #4
 80149c8:	4619      	mov	r1, r3
 80149ca:	4610      	mov	r0, r2
 80149cc:	f7fe fdd7 	bl	801357e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80149d0:	f001 fe68 	bl	80166a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80149d4:	4b0d      	ldr	r3, [pc, #52]	; (8014a0c <prvAddNewTaskToReadyList+0xcc>)
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d00e      	beq.n	80149fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80149dc:	4b0a      	ldr	r3, [pc, #40]	; (8014a08 <prvAddNewTaskToReadyList+0xc8>)
 80149de:	681b      	ldr	r3, [r3, #0]
 80149e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149e6:	429a      	cmp	r2, r3
 80149e8:	d207      	bcs.n	80149fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80149ea:	4b0c      	ldr	r3, [pc, #48]	; (8014a1c <prvAddNewTaskToReadyList+0xdc>)
 80149ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80149f0:	601a      	str	r2, [r3, #0]
 80149f2:	f3bf 8f4f 	dsb	sy
 80149f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80149fa:	bf00      	nop
 80149fc:	3708      	adds	r7, #8
 80149fe:	46bd      	mov	sp, r7
 8014a00:	bd80      	pop	{r7, pc}
 8014a02:	bf00      	nop
 8014a04:	20003444 	.word	0x20003444
 8014a08:	20002f70 	.word	0x20002f70
 8014a0c:	20003450 	.word	0x20003450
 8014a10:	20003460 	.word	0x20003460
 8014a14:	2000344c 	.word	0x2000344c
 8014a18:	20002f74 	.word	0x20002f74
 8014a1c:	e000ed04 	.word	0xe000ed04

08014a20 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014a20:	b580      	push	{r7, lr}
 8014a22:	b084      	sub	sp, #16
 8014a24:	af00      	add	r7, sp, #0
 8014a26:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8014a28:	2300      	movs	r3, #0
 8014a2a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d017      	beq.n	8014a62 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8014a32:	4b13      	ldr	r3, [pc, #76]	; (8014a80 <vTaskDelay+0x60>)
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d00a      	beq.n	8014a50 <vTaskDelay+0x30>
	__asm volatile
 8014a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a3e:	f383 8811 	msr	BASEPRI, r3
 8014a42:	f3bf 8f6f 	isb	sy
 8014a46:	f3bf 8f4f 	dsb	sy
 8014a4a:	60bb      	str	r3, [r7, #8]
}
 8014a4c:	bf00      	nop
 8014a4e:	e7fe      	b.n	8014a4e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8014a50:	f000 f8f4 	bl	8014c3c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8014a54:	2100      	movs	r1, #0
 8014a56:	6878      	ldr	r0, [r7, #4]
 8014a58:	f001 f928 	bl	8015cac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014a5c:	f000 f8fc 	bl	8014c58 <xTaskResumeAll>
 8014a60:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014a62:	68fb      	ldr	r3, [r7, #12]
 8014a64:	2b00      	cmp	r3, #0
 8014a66:	d107      	bne.n	8014a78 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014a68:	4b06      	ldr	r3, [pc, #24]	; (8014a84 <vTaskDelay+0x64>)
 8014a6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014a6e:	601a      	str	r2, [r3, #0]
 8014a70:	f3bf 8f4f 	dsb	sy
 8014a74:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014a78:	bf00      	nop
 8014a7a:	3710      	adds	r7, #16
 8014a7c:	46bd      	mov	sp, r7
 8014a7e:	bd80      	pop	{r7, pc}
 8014a80:	2000346c 	.word	0x2000346c
 8014a84:	e000ed04 	.word	0xe000ed04

08014a88 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8014a88:	b580      	push	{r7, lr}
 8014a8a:	b088      	sub	sp, #32
 8014a8c:	af00      	add	r7, sp, #0
 8014a8e:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8014a94:	69bb      	ldr	r3, [r7, #24]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d10a      	bne.n	8014ab0 <eTaskGetState+0x28>
	__asm volatile
 8014a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a9e:	f383 8811 	msr	BASEPRI, r3
 8014aa2:	f3bf 8f6f 	isb	sy
 8014aa6:	f3bf 8f4f 	dsb	sy
 8014aaa:	60bb      	str	r3, [r7, #8]
}
 8014aac:	bf00      	nop
 8014aae:	e7fe      	b.n	8014aae <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 8014ab0:	4b23      	ldr	r3, [pc, #140]	; (8014b40 <eTaskGetState+0xb8>)
 8014ab2:	681b      	ldr	r3, [r3, #0]
 8014ab4:	69ba      	ldr	r2, [r7, #24]
 8014ab6:	429a      	cmp	r2, r3
 8014ab8:	d102      	bne.n	8014ac0 <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8014aba:	2300      	movs	r3, #0
 8014abc:	77fb      	strb	r3, [r7, #31]
 8014abe:	e03a      	b.n	8014b36 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 8014ac0:	f001 fdc0 	bl	8016644 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8014ac4:	69bb      	ldr	r3, [r7, #24]
 8014ac6:	695b      	ldr	r3, [r3, #20]
 8014ac8:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8014aca:	4b1e      	ldr	r3, [pc, #120]	; (8014b44 <eTaskGetState+0xbc>)
 8014acc:	681b      	ldr	r3, [r3, #0]
 8014ace:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 8014ad0:	4b1d      	ldr	r3, [pc, #116]	; (8014b48 <eTaskGetState+0xc0>)
 8014ad2:	681b      	ldr	r3, [r3, #0]
 8014ad4:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8014ad6:	f001 fde5 	bl	80166a4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8014ada:	697a      	ldr	r2, [r7, #20]
 8014adc:	693b      	ldr	r3, [r7, #16]
 8014ade:	429a      	cmp	r2, r3
 8014ae0:	d003      	beq.n	8014aea <eTaskGetState+0x62>
 8014ae2:	697a      	ldr	r2, [r7, #20]
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	429a      	cmp	r2, r3
 8014ae8:	d102      	bne.n	8014af0 <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8014aea:	2302      	movs	r3, #2
 8014aec:	77fb      	strb	r3, [r7, #31]
 8014aee:	e022      	b.n	8014b36 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 8014af0:	697b      	ldr	r3, [r7, #20]
 8014af2:	4a16      	ldr	r2, [pc, #88]	; (8014b4c <eTaskGetState+0xc4>)
 8014af4:	4293      	cmp	r3, r2
 8014af6:	d112      	bne.n	8014b1e <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8014af8:	69bb      	ldr	r3, [r7, #24]
 8014afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014afc:	2b00      	cmp	r3, #0
 8014afe:	d10b      	bne.n	8014b18 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014b00:	69bb      	ldr	r3, [r7, #24]
 8014b02:	f893 30bc 	ldrb.w	r3, [r3, #188]	; 0xbc
 8014b06:	b2db      	uxtb	r3, r3
 8014b08:	2b01      	cmp	r3, #1
 8014b0a:	d102      	bne.n	8014b12 <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8014b0c:	2302      	movs	r3, #2
 8014b0e:	77fb      	strb	r3, [r7, #31]
 8014b10:	e011      	b.n	8014b36 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 8014b12:	2303      	movs	r3, #3
 8014b14:	77fb      	strb	r3, [r7, #31]
 8014b16:	e00e      	b.n	8014b36 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8014b18:	2302      	movs	r3, #2
 8014b1a:	77fb      	strb	r3, [r7, #31]
 8014b1c:	e00b      	b.n	8014b36 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 8014b1e:	697b      	ldr	r3, [r7, #20]
 8014b20:	4a0b      	ldr	r2, [pc, #44]	; (8014b50 <eTaskGetState+0xc8>)
 8014b22:	4293      	cmp	r3, r2
 8014b24:	d002      	beq.n	8014b2c <eTaskGetState+0xa4>
 8014b26:	697b      	ldr	r3, [r7, #20]
 8014b28:	2b00      	cmp	r3, #0
 8014b2a:	d102      	bne.n	8014b32 <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8014b2c:	2304      	movs	r3, #4
 8014b2e:	77fb      	strb	r3, [r7, #31]
 8014b30:	e001      	b.n	8014b36 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8014b32:	2301      	movs	r3, #1
 8014b34:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8014b36:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8014b38:	4618      	mov	r0, r3
 8014b3a:	3720      	adds	r7, #32
 8014b3c:	46bd      	mov	sp, r7
 8014b3e:	bd80      	pop	{r7, pc}
 8014b40:	20002f70 	.word	0x20002f70
 8014b44:	200033fc 	.word	0x200033fc
 8014b48:	20003400 	.word	0x20003400
 8014b4c:	20003430 	.word	0x20003430
 8014b50:	20003418 	.word	0x20003418

08014b54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014b54:	b580      	push	{r7, lr}
 8014b56:	b08a      	sub	sp, #40	; 0x28
 8014b58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014b5a:	2300      	movs	r3, #0
 8014b5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8014b5e:	2300      	movs	r3, #0
 8014b60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014b62:	463a      	mov	r2, r7
 8014b64:	1d39      	adds	r1, r7, #4
 8014b66:	f107 0308 	add.w	r3, r7, #8
 8014b6a:	4618      	mov	r0, r3
 8014b6c:	f7fe fca6 	bl	80134bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014b70:	6839      	ldr	r1, [r7, #0]
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	68ba      	ldr	r2, [r7, #8]
 8014b76:	9202      	str	r2, [sp, #8]
 8014b78:	9301      	str	r3, [sp, #4]
 8014b7a:	2300      	movs	r3, #0
 8014b7c:	9300      	str	r3, [sp, #0]
 8014b7e:	2300      	movs	r3, #0
 8014b80:	460a      	mov	r2, r1
 8014b82:	4925      	ldr	r1, [pc, #148]	; (8014c18 <vTaskStartScheduler+0xc4>)
 8014b84:	4825      	ldr	r0, [pc, #148]	; (8014c1c <vTaskStartScheduler+0xc8>)
 8014b86:	f7ff fd8f 	bl	80146a8 <xTaskCreateStatic>
 8014b8a:	4603      	mov	r3, r0
 8014b8c:	4a24      	ldr	r2, [pc, #144]	; (8014c20 <vTaskStartScheduler+0xcc>)
 8014b8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8014b90:	4b23      	ldr	r3, [pc, #140]	; (8014c20 <vTaskStartScheduler+0xcc>)
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d002      	beq.n	8014b9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014b98:	2301      	movs	r3, #1
 8014b9a:	617b      	str	r3, [r7, #20]
 8014b9c:	e001      	b.n	8014ba2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8014b9e:	2300      	movs	r3, #0
 8014ba0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8014ba2:	697b      	ldr	r3, [r7, #20]
 8014ba4:	2b01      	cmp	r3, #1
 8014ba6:	d102      	bne.n	8014bae <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014ba8:	f001 f8d4 	bl	8015d54 <xTimerCreateTimerTask>
 8014bac:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8014bae:	697b      	ldr	r3, [r7, #20]
 8014bb0:	2b01      	cmp	r3, #1
 8014bb2:	d11e      	bne.n	8014bf2 <vTaskStartScheduler+0x9e>
	__asm volatile
 8014bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bb8:	f383 8811 	msr	BASEPRI, r3
 8014bbc:	f3bf 8f6f 	isb	sy
 8014bc0:	f3bf 8f4f 	dsb	sy
 8014bc4:	613b      	str	r3, [r7, #16]
}
 8014bc6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8014bc8:	4b16      	ldr	r3, [pc, #88]	; (8014c24 <vTaskStartScheduler+0xd0>)
 8014bca:	681b      	ldr	r3, [r3, #0]
 8014bcc:	3358      	adds	r3, #88	; 0x58
 8014bce:	4a16      	ldr	r2, [pc, #88]	; (8014c28 <vTaskStartScheduler+0xd4>)
 8014bd0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8014bd2:	4b16      	ldr	r3, [pc, #88]	; (8014c2c <vTaskStartScheduler+0xd8>)
 8014bd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014bd8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8014bda:	4b15      	ldr	r3, [pc, #84]	; (8014c30 <vTaskStartScheduler+0xdc>)
 8014bdc:	2201      	movs	r2, #1
 8014bde:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8014be0:	4b14      	ldr	r3, [pc, #80]	; (8014c34 <vTaskStartScheduler+0xe0>)
 8014be2:	2200      	movs	r2, #0
 8014be4:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8014be6:	4b14      	ldr	r3, [pc, #80]	; (8014c38 <vTaskStartScheduler+0xe4>)
 8014be8:	2200      	movs	r2, #0
 8014bea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8014bec:	f001 fc88 	bl	8016500 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8014bf0:	e00e      	b.n	8014c10 <vTaskStartScheduler+0xbc>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8014bf2:	697b      	ldr	r3, [r7, #20]
 8014bf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014bf8:	d10a      	bne.n	8014c10 <vTaskStartScheduler+0xbc>
	__asm volatile
 8014bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bfe:	f383 8811 	msr	BASEPRI, r3
 8014c02:	f3bf 8f6f 	isb	sy
 8014c06:	f3bf 8f4f 	dsb	sy
 8014c0a:	60fb      	str	r3, [r7, #12]
}
 8014c0c:	bf00      	nop
 8014c0e:	e7fe      	b.n	8014c0e <vTaskStartScheduler+0xba>
}
 8014c10:	bf00      	nop
 8014c12:	3718      	adds	r7, #24
 8014c14:	46bd      	mov	sp, r7
 8014c16:	bd80      	pop	{r7, pc}
 8014c18:	0801ad18 	.word	0x0801ad18
 8014c1c:	080153bd 	.word	0x080153bd
 8014c20:	20003468 	.word	0x20003468
 8014c24:	20002f70 	.word	0x20002f70
 8014c28:	200001c8 	.word	0x200001c8
 8014c2c:	20003464 	.word	0x20003464
 8014c30:	20003450 	.word	0x20003450
 8014c34:	20003448 	.word	0x20003448
 8014c38:	2000f8fc 	.word	0x2000f8fc

08014c3c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014c3c:	b480      	push	{r7}
 8014c3e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014c40:	4b04      	ldr	r3, [pc, #16]	; (8014c54 <vTaskSuspendAll+0x18>)
 8014c42:	681b      	ldr	r3, [r3, #0]
 8014c44:	3301      	adds	r3, #1
 8014c46:	4a03      	ldr	r2, [pc, #12]	; (8014c54 <vTaskSuspendAll+0x18>)
 8014c48:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8014c4a:	bf00      	nop
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c52:	4770      	bx	lr
 8014c54:	2000346c 	.word	0x2000346c

08014c58 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014c58:	b580      	push	{r7, lr}
 8014c5a:	b084      	sub	sp, #16
 8014c5c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014c5e:	2300      	movs	r3, #0
 8014c60:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014c62:	2300      	movs	r3, #0
 8014c64:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014c66:	4b42      	ldr	r3, [pc, #264]	; (8014d70 <xTaskResumeAll+0x118>)
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d10a      	bne.n	8014c84 <xTaskResumeAll+0x2c>
	__asm volatile
 8014c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c72:	f383 8811 	msr	BASEPRI, r3
 8014c76:	f3bf 8f6f 	isb	sy
 8014c7a:	f3bf 8f4f 	dsb	sy
 8014c7e:	603b      	str	r3, [r7, #0]
}
 8014c80:	bf00      	nop
 8014c82:	e7fe      	b.n	8014c82 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014c84:	f001 fcde 	bl	8016644 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014c88:	4b39      	ldr	r3, [pc, #228]	; (8014d70 <xTaskResumeAll+0x118>)
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	3b01      	subs	r3, #1
 8014c8e:	4a38      	ldr	r2, [pc, #224]	; (8014d70 <xTaskResumeAll+0x118>)
 8014c90:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014c92:	4b37      	ldr	r3, [pc, #220]	; (8014d70 <xTaskResumeAll+0x118>)
 8014c94:	681b      	ldr	r3, [r3, #0]
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	d162      	bne.n	8014d60 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8014c9a:	4b36      	ldr	r3, [pc, #216]	; (8014d74 <xTaskResumeAll+0x11c>)
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d05e      	beq.n	8014d60 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014ca2:	e02f      	b.n	8014d04 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ca4:	4b34      	ldr	r3, [pc, #208]	; (8014d78 <xTaskResumeAll+0x120>)
 8014ca6:	68db      	ldr	r3, [r3, #12]
 8014ca8:	68db      	ldr	r3, [r3, #12]
 8014caa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	3318      	adds	r3, #24
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f7fe fcc1 	bl	8013638 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014cb6:	68fb      	ldr	r3, [r7, #12]
 8014cb8:	3304      	adds	r3, #4
 8014cba:	4618      	mov	r0, r3
 8014cbc:	f7fe fcbc 	bl	8013638 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014cc0:	68fb      	ldr	r3, [r7, #12]
 8014cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cc4:	4b2d      	ldr	r3, [pc, #180]	; (8014d7c <xTaskResumeAll+0x124>)
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	429a      	cmp	r2, r3
 8014cca:	d903      	bls.n	8014cd4 <xTaskResumeAll+0x7c>
 8014ccc:	68fb      	ldr	r3, [r7, #12]
 8014cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cd0:	4a2a      	ldr	r2, [pc, #168]	; (8014d7c <xTaskResumeAll+0x124>)
 8014cd2:	6013      	str	r3, [r2, #0]
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cd8:	4613      	mov	r3, r2
 8014cda:	009b      	lsls	r3, r3, #2
 8014cdc:	4413      	add	r3, r2
 8014cde:	009b      	lsls	r3, r3, #2
 8014ce0:	4a27      	ldr	r2, [pc, #156]	; (8014d80 <xTaskResumeAll+0x128>)
 8014ce2:	441a      	add	r2, r3
 8014ce4:	68fb      	ldr	r3, [r7, #12]
 8014ce6:	3304      	adds	r3, #4
 8014ce8:	4619      	mov	r1, r3
 8014cea:	4610      	mov	r0, r2
 8014cec:	f7fe fc47 	bl	801357e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014cf4:	4b23      	ldr	r3, [pc, #140]	; (8014d84 <xTaskResumeAll+0x12c>)
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014cfa:	429a      	cmp	r2, r3
 8014cfc:	d302      	bcc.n	8014d04 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8014cfe:	4b22      	ldr	r3, [pc, #136]	; (8014d88 <xTaskResumeAll+0x130>)
 8014d00:	2201      	movs	r2, #1
 8014d02:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014d04:	4b1c      	ldr	r3, [pc, #112]	; (8014d78 <xTaskResumeAll+0x120>)
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d1cb      	bne.n	8014ca4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d001      	beq.n	8014d16 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014d12:	f000 fce1 	bl	80156d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014d16:	4b1d      	ldr	r3, [pc, #116]	; (8014d8c <xTaskResumeAll+0x134>)
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	2b00      	cmp	r3, #0
 8014d20:	d010      	beq.n	8014d44 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014d22:	f000 f8d7 	bl	8014ed4 <xTaskIncrementTick>
 8014d26:	4603      	mov	r3, r0
 8014d28:	2b00      	cmp	r3, #0
 8014d2a:	d002      	beq.n	8014d32 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8014d2c:	4b16      	ldr	r3, [pc, #88]	; (8014d88 <xTaskResumeAll+0x130>)
 8014d2e:	2201      	movs	r2, #1
 8014d30:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	3b01      	subs	r3, #1
 8014d36:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d1f1      	bne.n	8014d22 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8014d3e:	4b13      	ldr	r3, [pc, #76]	; (8014d8c <xTaskResumeAll+0x134>)
 8014d40:	2200      	movs	r2, #0
 8014d42:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014d44:	4b10      	ldr	r3, [pc, #64]	; (8014d88 <xTaskResumeAll+0x130>)
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d009      	beq.n	8014d60 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014d4c:	2301      	movs	r3, #1
 8014d4e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014d50:	4b0f      	ldr	r3, [pc, #60]	; (8014d90 <xTaskResumeAll+0x138>)
 8014d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d56:	601a      	str	r2, [r3, #0]
 8014d58:	f3bf 8f4f 	dsb	sy
 8014d5c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014d60:	f001 fca0 	bl	80166a4 <vPortExitCritical>

	return xAlreadyYielded;
 8014d64:	68bb      	ldr	r3, [r7, #8]
}
 8014d66:	4618      	mov	r0, r3
 8014d68:	3710      	adds	r7, #16
 8014d6a:	46bd      	mov	sp, r7
 8014d6c:	bd80      	pop	{r7, pc}
 8014d6e:	bf00      	nop
 8014d70:	2000346c 	.word	0x2000346c
 8014d74:	20003444 	.word	0x20003444
 8014d78:	20003404 	.word	0x20003404
 8014d7c:	2000344c 	.word	0x2000344c
 8014d80:	20002f74 	.word	0x20002f74
 8014d84:	20002f70 	.word	0x20002f70
 8014d88:	20003458 	.word	0x20003458
 8014d8c:	20003454 	.word	0x20003454
 8014d90:	e000ed04 	.word	0xe000ed04

08014d94 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014d94:	b480      	push	{r7}
 8014d96:	b083      	sub	sp, #12
 8014d98:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8014d9a:	4b05      	ldr	r3, [pc, #20]	; (8014db0 <xTaskGetTickCount+0x1c>)
 8014d9c:	681b      	ldr	r3, [r3, #0]
 8014d9e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014da0:	687b      	ldr	r3, [r7, #4]
}
 8014da2:	4618      	mov	r0, r3
 8014da4:	370c      	adds	r7, #12
 8014da6:	46bd      	mov	sp, r7
 8014da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014dac:	4770      	bx	lr
 8014dae:	bf00      	nop
 8014db0:	20003448 	.word	0x20003448

08014db4 <uxTaskGetSystemState>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	UBaseType_t uxTaskGetSystemState( TaskStatus_t * const pxTaskStatusArray, const UBaseType_t uxArraySize, uint32_t * const pulTotalRunTime )
	{
 8014db4:	b580      	push	{r7, lr}
 8014db6:	b086      	sub	sp, #24
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	60f8      	str	r0, [r7, #12]
 8014dbc:	60b9      	str	r1, [r7, #8]
 8014dbe:	607a      	str	r2, [r7, #4]
	UBaseType_t uxTask = 0, uxQueue = configMAX_PRIORITIES;
 8014dc0:	2300      	movs	r3, #0
 8014dc2:	617b      	str	r3, [r7, #20]
 8014dc4:	2338      	movs	r3, #56	; 0x38
 8014dc6:	613b      	str	r3, [r7, #16]

		vTaskSuspendAll();
 8014dc8:	f7ff ff38 	bl	8014c3c <vTaskSuspendAll>
		{
			/* Is there a space in the array for each task in the system? */
			if( uxArraySize >= uxCurrentNumberOfTasks )
 8014dcc:	4b3a      	ldr	r3, [pc, #232]	; (8014eb8 <uxTaskGetSystemState+0x104>)
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	68ba      	ldr	r2, [r7, #8]
 8014dd2:	429a      	cmp	r2, r3
 8014dd4:	d369      	bcc.n	8014eaa <uxTaskGetSystemState+0xf6>
			{
				/* Fill in an TaskStatus_t structure with information on each
				task in the Ready state. */
				do
				{
					uxQueue--;
 8014dd6:	693b      	ldr	r3, [r7, #16]
 8014dd8:	3b01      	subs	r3, #1
 8014dda:	613b      	str	r3, [r7, #16]
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &( pxReadyTasksLists[ uxQueue ] ), eReady );
 8014ddc:	697a      	ldr	r2, [r7, #20]
 8014dde:	4613      	mov	r3, r2
 8014de0:	00db      	lsls	r3, r3, #3
 8014de2:	4413      	add	r3, r2
 8014de4:	009b      	lsls	r3, r3, #2
 8014de6:	461a      	mov	r2, r3
 8014de8:	68fb      	ldr	r3, [r7, #12]
 8014dea:	1898      	adds	r0, r3, r2
 8014dec:	693a      	ldr	r2, [r7, #16]
 8014dee:	4613      	mov	r3, r2
 8014df0:	009b      	lsls	r3, r3, #2
 8014df2:	4413      	add	r3, r2
 8014df4:	009b      	lsls	r3, r3, #2
 8014df6:	4a31      	ldr	r2, [pc, #196]	; (8014ebc <uxTaskGetSystemState+0x108>)
 8014df8:	4413      	add	r3, r2
 8014dfa:	2201      	movs	r2, #1
 8014dfc:	4619      	mov	r1, r3
 8014dfe:	f000 fbc9 	bl	8015594 <prvListTasksWithinSingleList>
 8014e02:	4602      	mov	r2, r0
 8014e04:	697b      	ldr	r3, [r7, #20]
 8014e06:	4413      	add	r3, r2
 8014e08:	617b      	str	r3, [r7, #20]

				} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014e0a:	693b      	ldr	r3, [r7, #16]
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d1e2      	bne.n	8014dd6 <uxTaskGetSystemState+0x22>

				/* Fill in an TaskStatus_t structure with information on each
				task in the Blocked state. */
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxDelayedTaskList, eBlocked );
 8014e10:	697a      	ldr	r2, [r7, #20]
 8014e12:	4613      	mov	r3, r2
 8014e14:	00db      	lsls	r3, r3, #3
 8014e16:	4413      	add	r3, r2
 8014e18:	009b      	lsls	r3, r3, #2
 8014e1a:	461a      	mov	r2, r3
 8014e1c:	68fb      	ldr	r3, [r7, #12]
 8014e1e:	4413      	add	r3, r2
 8014e20:	4a27      	ldr	r2, [pc, #156]	; (8014ec0 <uxTaskGetSystemState+0x10c>)
 8014e22:	6811      	ldr	r1, [r2, #0]
 8014e24:	2202      	movs	r2, #2
 8014e26:	4618      	mov	r0, r3
 8014e28:	f000 fbb4 	bl	8015594 <prvListTasksWithinSingleList>
 8014e2c:	4602      	mov	r2, r0
 8014e2e:	697b      	ldr	r3, [r7, #20]
 8014e30:	4413      	add	r3, r2
 8014e32:	617b      	str	r3, [r7, #20]
				uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), ( List_t * ) pxOverflowDelayedTaskList, eBlocked );
 8014e34:	697a      	ldr	r2, [r7, #20]
 8014e36:	4613      	mov	r3, r2
 8014e38:	00db      	lsls	r3, r3, #3
 8014e3a:	4413      	add	r3, r2
 8014e3c:	009b      	lsls	r3, r3, #2
 8014e3e:	461a      	mov	r2, r3
 8014e40:	68fb      	ldr	r3, [r7, #12]
 8014e42:	4413      	add	r3, r2
 8014e44:	4a1f      	ldr	r2, [pc, #124]	; (8014ec4 <uxTaskGetSystemState+0x110>)
 8014e46:	6811      	ldr	r1, [r2, #0]
 8014e48:	2202      	movs	r2, #2
 8014e4a:	4618      	mov	r0, r3
 8014e4c:	f000 fba2 	bl	8015594 <prvListTasksWithinSingleList>
 8014e50:	4602      	mov	r2, r0
 8014e52:	697b      	ldr	r3, [r7, #20]
 8014e54:	4413      	add	r3, r2
 8014e56:	617b      	str	r3, [r7, #20]

				#if( INCLUDE_vTaskDelete == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task that has been deleted but not yet cleaned up. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xTasksWaitingTermination, eDeleted );
 8014e58:	697a      	ldr	r2, [r7, #20]
 8014e5a:	4613      	mov	r3, r2
 8014e5c:	00db      	lsls	r3, r3, #3
 8014e5e:	4413      	add	r3, r2
 8014e60:	009b      	lsls	r3, r3, #2
 8014e62:	461a      	mov	r2, r3
 8014e64:	68fb      	ldr	r3, [r7, #12]
 8014e66:	4413      	add	r3, r2
 8014e68:	2204      	movs	r2, #4
 8014e6a:	4917      	ldr	r1, [pc, #92]	; (8014ec8 <uxTaskGetSystemState+0x114>)
 8014e6c:	4618      	mov	r0, r3
 8014e6e:	f000 fb91 	bl	8015594 <prvListTasksWithinSingleList>
 8014e72:	4602      	mov	r2, r0
 8014e74:	697b      	ldr	r3, [r7, #20]
 8014e76:	4413      	add	r3, r2
 8014e78:	617b      	str	r3, [r7, #20]

				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* Fill in an TaskStatus_t structure with information on
					each task in the Suspended state. */
					uxTask += prvListTasksWithinSingleList( &( pxTaskStatusArray[ uxTask ] ), &xSuspendedTaskList, eSuspended );
 8014e7a:	697a      	ldr	r2, [r7, #20]
 8014e7c:	4613      	mov	r3, r2
 8014e7e:	00db      	lsls	r3, r3, #3
 8014e80:	4413      	add	r3, r2
 8014e82:	009b      	lsls	r3, r3, #2
 8014e84:	461a      	mov	r2, r3
 8014e86:	68fb      	ldr	r3, [r7, #12]
 8014e88:	4413      	add	r3, r2
 8014e8a:	2203      	movs	r2, #3
 8014e8c:	490f      	ldr	r1, [pc, #60]	; (8014ecc <uxTaskGetSystemState+0x118>)
 8014e8e:	4618      	mov	r0, r3
 8014e90:	f000 fb80 	bl	8015594 <prvListTasksWithinSingleList>
 8014e94:	4602      	mov	r2, r0
 8014e96:	697b      	ldr	r3, [r7, #20]
 8014e98:	4413      	add	r3, r2
 8014e9a:	617b      	str	r3, [r7, #20]
				}
				#endif

				#if ( configGENERATE_RUN_TIME_STATS == 1)
				{
					if( pulTotalRunTime != NULL )
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d003      	beq.n	8014eaa <uxTaskGetSystemState+0xf6>
					{
						#ifdef portALT_GET_RUN_TIME_COUNTER_VALUE
							portALT_GET_RUN_TIME_COUNTER_VALUE( ( *pulTotalRunTime ) );
						#else
							*pulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8014ea2:	4b0b      	ldr	r3, [pc, #44]	; (8014ed0 <uxTaskGetSystemState+0x11c>)
 8014ea4:	681a      	ldr	r2, [r3, #0]
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	601a      	str	r2, [r3, #0]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		( void ) xTaskResumeAll();
 8014eaa:	f7ff fed5 	bl	8014c58 <xTaskResumeAll>

		return uxTask;
 8014eae:	697b      	ldr	r3, [r7, #20]
	}
 8014eb0:	4618      	mov	r0, r3
 8014eb2:	3718      	adds	r7, #24
 8014eb4:	46bd      	mov	sp, r7
 8014eb6:	bd80      	pop	{r7, pc}
 8014eb8:	20003444 	.word	0x20003444
 8014ebc:	20002f74 	.word	0x20002f74
 8014ec0:	200033fc 	.word	0x200033fc
 8014ec4:	20003400 	.word	0x20003400
 8014ec8:	20003418 	.word	0x20003418
 8014ecc:	20003430 	.word	0x20003430
 8014ed0:	2000f8fc 	.word	0x2000f8fc

08014ed4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014ed4:	b580      	push	{r7, lr}
 8014ed6:	b086      	sub	sp, #24
 8014ed8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8014eda:	2300      	movs	r3, #0
 8014edc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014ede:	4b4f      	ldr	r3, [pc, #316]	; (801501c <xTaskIncrementTick+0x148>)
 8014ee0:	681b      	ldr	r3, [r3, #0]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	f040 808f 	bne.w	8015006 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014ee8:	4b4d      	ldr	r3, [pc, #308]	; (8015020 <xTaskIncrementTick+0x14c>)
 8014eea:	681b      	ldr	r3, [r3, #0]
 8014eec:	3301      	adds	r3, #1
 8014eee:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014ef0:	4a4b      	ldr	r2, [pc, #300]	; (8015020 <xTaskIncrementTick+0x14c>)
 8014ef2:	693b      	ldr	r3, [r7, #16]
 8014ef4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014ef6:	693b      	ldr	r3, [r7, #16]
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	d120      	bne.n	8014f3e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8014efc:	4b49      	ldr	r3, [pc, #292]	; (8015024 <xTaskIncrementTick+0x150>)
 8014efe:	681b      	ldr	r3, [r3, #0]
 8014f00:	681b      	ldr	r3, [r3, #0]
 8014f02:	2b00      	cmp	r3, #0
 8014f04:	d00a      	beq.n	8014f1c <xTaskIncrementTick+0x48>
	__asm volatile
 8014f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f0a:	f383 8811 	msr	BASEPRI, r3
 8014f0e:	f3bf 8f6f 	isb	sy
 8014f12:	f3bf 8f4f 	dsb	sy
 8014f16:	603b      	str	r3, [r7, #0]
}
 8014f18:	bf00      	nop
 8014f1a:	e7fe      	b.n	8014f1a <xTaskIncrementTick+0x46>
 8014f1c:	4b41      	ldr	r3, [pc, #260]	; (8015024 <xTaskIncrementTick+0x150>)
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	60fb      	str	r3, [r7, #12]
 8014f22:	4b41      	ldr	r3, [pc, #260]	; (8015028 <xTaskIncrementTick+0x154>)
 8014f24:	681b      	ldr	r3, [r3, #0]
 8014f26:	4a3f      	ldr	r2, [pc, #252]	; (8015024 <xTaskIncrementTick+0x150>)
 8014f28:	6013      	str	r3, [r2, #0]
 8014f2a:	4a3f      	ldr	r2, [pc, #252]	; (8015028 <xTaskIncrementTick+0x154>)
 8014f2c:	68fb      	ldr	r3, [r7, #12]
 8014f2e:	6013      	str	r3, [r2, #0]
 8014f30:	4b3e      	ldr	r3, [pc, #248]	; (801502c <xTaskIncrementTick+0x158>)
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	3301      	adds	r3, #1
 8014f36:	4a3d      	ldr	r2, [pc, #244]	; (801502c <xTaskIncrementTick+0x158>)
 8014f38:	6013      	str	r3, [r2, #0]
 8014f3a:	f000 fbcd 	bl	80156d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014f3e:	4b3c      	ldr	r3, [pc, #240]	; (8015030 <xTaskIncrementTick+0x15c>)
 8014f40:	681b      	ldr	r3, [r3, #0]
 8014f42:	693a      	ldr	r2, [r7, #16]
 8014f44:	429a      	cmp	r2, r3
 8014f46:	d349      	bcc.n	8014fdc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014f48:	4b36      	ldr	r3, [pc, #216]	; (8015024 <xTaskIncrementTick+0x150>)
 8014f4a:	681b      	ldr	r3, [r3, #0]
 8014f4c:	681b      	ldr	r3, [r3, #0]
 8014f4e:	2b00      	cmp	r3, #0
 8014f50:	d104      	bne.n	8014f5c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014f52:	4b37      	ldr	r3, [pc, #220]	; (8015030 <xTaskIncrementTick+0x15c>)
 8014f54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014f58:	601a      	str	r2, [r3, #0]
					break;
 8014f5a:	e03f      	b.n	8014fdc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f5c:	4b31      	ldr	r3, [pc, #196]	; (8015024 <xTaskIncrementTick+0x150>)
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	68db      	ldr	r3, [r3, #12]
 8014f62:	68db      	ldr	r3, [r3, #12]
 8014f64:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014f66:	68bb      	ldr	r3, [r7, #8]
 8014f68:	685b      	ldr	r3, [r3, #4]
 8014f6a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014f6c:	693a      	ldr	r2, [r7, #16]
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	429a      	cmp	r2, r3
 8014f72:	d203      	bcs.n	8014f7c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014f74:	4a2e      	ldr	r2, [pc, #184]	; (8015030 <xTaskIncrementTick+0x15c>)
 8014f76:	687b      	ldr	r3, [r7, #4]
 8014f78:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014f7a:	e02f      	b.n	8014fdc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014f7c:	68bb      	ldr	r3, [r7, #8]
 8014f7e:	3304      	adds	r3, #4
 8014f80:	4618      	mov	r0, r3
 8014f82:	f7fe fb59 	bl	8013638 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014f86:	68bb      	ldr	r3, [r7, #8]
 8014f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014f8a:	2b00      	cmp	r3, #0
 8014f8c:	d004      	beq.n	8014f98 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014f8e:	68bb      	ldr	r3, [r7, #8]
 8014f90:	3318      	adds	r3, #24
 8014f92:	4618      	mov	r0, r3
 8014f94:	f7fe fb50 	bl	8013638 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014f98:	68bb      	ldr	r3, [r7, #8]
 8014f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f9c:	4b25      	ldr	r3, [pc, #148]	; (8015034 <xTaskIncrementTick+0x160>)
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	429a      	cmp	r2, r3
 8014fa2:	d903      	bls.n	8014fac <xTaskIncrementTick+0xd8>
 8014fa4:	68bb      	ldr	r3, [r7, #8]
 8014fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fa8:	4a22      	ldr	r2, [pc, #136]	; (8015034 <xTaskIncrementTick+0x160>)
 8014faa:	6013      	str	r3, [r2, #0]
 8014fac:	68bb      	ldr	r3, [r7, #8]
 8014fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fb0:	4613      	mov	r3, r2
 8014fb2:	009b      	lsls	r3, r3, #2
 8014fb4:	4413      	add	r3, r2
 8014fb6:	009b      	lsls	r3, r3, #2
 8014fb8:	4a1f      	ldr	r2, [pc, #124]	; (8015038 <xTaskIncrementTick+0x164>)
 8014fba:	441a      	add	r2, r3
 8014fbc:	68bb      	ldr	r3, [r7, #8]
 8014fbe:	3304      	adds	r3, #4
 8014fc0:	4619      	mov	r1, r3
 8014fc2:	4610      	mov	r0, r2
 8014fc4:	f7fe fadb 	bl	801357e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014fc8:	68bb      	ldr	r3, [r7, #8]
 8014fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fcc:	4b1b      	ldr	r3, [pc, #108]	; (801503c <xTaskIncrementTick+0x168>)
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fd2:	429a      	cmp	r2, r3
 8014fd4:	d3b8      	bcc.n	8014f48 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014fd6:	2301      	movs	r3, #1
 8014fd8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014fda:	e7b5      	b.n	8014f48 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014fdc:	4b17      	ldr	r3, [pc, #92]	; (801503c <xTaskIncrementTick+0x168>)
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fe2:	4915      	ldr	r1, [pc, #84]	; (8015038 <xTaskIncrementTick+0x164>)
 8014fe4:	4613      	mov	r3, r2
 8014fe6:	009b      	lsls	r3, r3, #2
 8014fe8:	4413      	add	r3, r2
 8014fea:	009b      	lsls	r3, r3, #2
 8014fec:	440b      	add	r3, r1
 8014fee:	681b      	ldr	r3, [r3, #0]
 8014ff0:	2b01      	cmp	r3, #1
 8014ff2:	d901      	bls.n	8014ff8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8014ff4:	2301      	movs	r3, #1
 8014ff6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014ff8:	4b11      	ldr	r3, [pc, #68]	; (8015040 <xTaskIncrementTick+0x16c>)
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d007      	beq.n	8015010 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8015000:	2301      	movs	r3, #1
 8015002:	617b      	str	r3, [r7, #20]
 8015004:	e004      	b.n	8015010 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8015006:	4b0f      	ldr	r3, [pc, #60]	; (8015044 <xTaskIncrementTick+0x170>)
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	3301      	adds	r3, #1
 801500c:	4a0d      	ldr	r2, [pc, #52]	; (8015044 <xTaskIncrementTick+0x170>)
 801500e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8015010:	697b      	ldr	r3, [r7, #20]
}
 8015012:	4618      	mov	r0, r3
 8015014:	3718      	adds	r7, #24
 8015016:	46bd      	mov	sp, r7
 8015018:	bd80      	pop	{r7, pc}
 801501a:	bf00      	nop
 801501c:	2000346c 	.word	0x2000346c
 8015020:	20003448 	.word	0x20003448
 8015024:	200033fc 	.word	0x200033fc
 8015028:	20003400 	.word	0x20003400
 801502c:	2000345c 	.word	0x2000345c
 8015030:	20003464 	.word	0x20003464
 8015034:	2000344c 	.word	0x2000344c
 8015038:	20002f74 	.word	0x20002f74
 801503c:	20002f70 	.word	0x20002f70
 8015040:	20003458 	.word	0x20003458
 8015044:	20003454 	.word	0x20003454

08015048 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8015048:	b480      	push	{r7}
 801504a:	b085      	sub	sp, #20
 801504c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801504e:	4b36      	ldr	r3, [pc, #216]	; (8015128 <vTaskSwitchContext+0xe0>)
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	2b00      	cmp	r3, #0
 8015054:	d003      	beq.n	801505e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8015056:	4b35      	ldr	r3, [pc, #212]	; (801512c <vTaskSwitchContext+0xe4>)
 8015058:	2201      	movs	r2, #1
 801505a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801505c:	e05e      	b.n	801511c <vTaskSwitchContext+0xd4>
		xYieldPending = pdFALSE;
 801505e:	4b33      	ldr	r3, [pc, #204]	; (801512c <vTaskSwitchContext+0xe4>)
 8015060:	2200      	movs	r2, #0
 8015062:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8015064:	4b32      	ldr	r3, [pc, #200]	; (8015130 <vTaskSwitchContext+0xe8>)
 8015066:	681b      	ldr	r3, [r3, #0]
 8015068:	4a32      	ldr	r2, [pc, #200]	; (8015134 <vTaskSwitchContext+0xec>)
 801506a:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 801506c:	4b31      	ldr	r3, [pc, #196]	; (8015134 <vTaskSwitchContext+0xec>)
 801506e:	681a      	ldr	r2, [r3, #0]
 8015070:	4b31      	ldr	r3, [pc, #196]	; (8015138 <vTaskSwitchContext+0xf0>)
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	429a      	cmp	r2, r3
 8015076:	d909      	bls.n	801508c <vTaskSwitchContext+0x44>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8015078:	4b30      	ldr	r3, [pc, #192]	; (801513c <vTaskSwitchContext+0xf4>)
 801507a:	681b      	ldr	r3, [r3, #0]
 801507c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801507e:	4a2d      	ldr	r2, [pc, #180]	; (8015134 <vTaskSwitchContext+0xec>)
 8015080:	6810      	ldr	r0, [r2, #0]
 8015082:	4a2d      	ldr	r2, [pc, #180]	; (8015138 <vTaskSwitchContext+0xf0>)
 8015084:	6812      	ldr	r2, [r2, #0]
 8015086:	1a82      	subs	r2, r0, r2
 8015088:	440a      	add	r2, r1
 801508a:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 801508c:	4b29      	ldr	r3, [pc, #164]	; (8015134 <vTaskSwitchContext+0xec>)
 801508e:	681b      	ldr	r3, [r3, #0]
 8015090:	4a29      	ldr	r2, [pc, #164]	; (8015138 <vTaskSwitchContext+0xf0>)
 8015092:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015094:	4b2a      	ldr	r3, [pc, #168]	; (8015140 <vTaskSwitchContext+0xf8>)
 8015096:	681b      	ldr	r3, [r3, #0]
 8015098:	60fb      	str	r3, [r7, #12]
 801509a:	e010      	b.n	80150be <vTaskSwitchContext+0x76>
 801509c:	68fb      	ldr	r3, [r7, #12]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d10a      	bne.n	80150b8 <vTaskSwitchContext+0x70>
	__asm volatile
 80150a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150a6:	f383 8811 	msr	BASEPRI, r3
 80150aa:	f3bf 8f6f 	isb	sy
 80150ae:	f3bf 8f4f 	dsb	sy
 80150b2:	607b      	str	r3, [r7, #4]
}
 80150b4:	bf00      	nop
 80150b6:	e7fe      	b.n	80150b6 <vTaskSwitchContext+0x6e>
 80150b8:	68fb      	ldr	r3, [r7, #12]
 80150ba:	3b01      	subs	r3, #1
 80150bc:	60fb      	str	r3, [r7, #12]
 80150be:	4921      	ldr	r1, [pc, #132]	; (8015144 <vTaskSwitchContext+0xfc>)
 80150c0:	68fa      	ldr	r2, [r7, #12]
 80150c2:	4613      	mov	r3, r2
 80150c4:	009b      	lsls	r3, r3, #2
 80150c6:	4413      	add	r3, r2
 80150c8:	009b      	lsls	r3, r3, #2
 80150ca:	440b      	add	r3, r1
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	d0e4      	beq.n	801509c <vTaskSwitchContext+0x54>
 80150d2:	68fa      	ldr	r2, [r7, #12]
 80150d4:	4613      	mov	r3, r2
 80150d6:	009b      	lsls	r3, r3, #2
 80150d8:	4413      	add	r3, r2
 80150da:	009b      	lsls	r3, r3, #2
 80150dc:	4a19      	ldr	r2, [pc, #100]	; (8015144 <vTaskSwitchContext+0xfc>)
 80150de:	4413      	add	r3, r2
 80150e0:	60bb      	str	r3, [r7, #8]
 80150e2:	68bb      	ldr	r3, [r7, #8]
 80150e4:	685b      	ldr	r3, [r3, #4]
 80150e6:	685a      	ldr	r2, [r3, #4]
 80150e8:	68bb      	ldr	r3, [r7, #8]
 80150ea:	605a      	str	r2, [r3, #4]
 80150ec:	68bb      	ldr	r3, [r7, #8]
 80150ee:	685a      	ldr	r2, [r3, #4]
 80150f0:	68bb      	ldr	r3, [r7, #8]
 80150f2:	3308      	adds	r3, #8
 80150f4:	429a      	cmp	r2, r3
 80150f6:	d104      	bne.n	8015102 <vTaskSwitchContext+0xba>
 80150f8:	68bb      	ldr	r3, [r7, #8]
 80150fa:	685b      	ldr	r3, [r3, #4]
 80150fc:	685a      	ldr	r2, [r3, #4]
 80150fe:	68bb      	ldr	r3, [r7, #8]
 8015100:	605a      	str	r2, [r3, #4]
 8015102:	68bb      	ldr	r3, [r7, #8]
 8015104:	685b      	ldr	r3, [r3, #4]
 8015106:	68db      	ldr	r3, [r3, #12]
 8015108:	4a0c      	ldr	r2, [pc, #48]	; (801513c <vTaskSwitchContext+0xf4>)
 801510a:	6013      	str	r3, [r2, #0]
 801510c:	4a0c      	ldr	r2, [pc, #48]	; (8015140 <vTaskSwitchContext+0xf8>)
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8015112:	4b0a      	ldr	r3, [pc, #40]	; (801513c <vTaskSwitchContext+0xf4>)
 8015114:	681b      	ldr	r3, [r3, #0]
 8015116:	3358      	adds	r3, #88	; 0x58
 8015118:	4a0b      	ldr	r2, [pc, #44]	; (8015148 <vTaskSwitchContext+0x100>)
 801511a:	6013      	str	r3, [r2, #0]
}
 801511c:	bf00      	nop
 801511e:	3714      	adds	r7, #20
 8015120:	46bd      	mov	sp, r7
 8015122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015126:	4770      	bx	lr
 8015128:	2000346c 	.word	0x2000346c
 801512c:	20003458 	.word	0x20003458
 8015130:	2000f8fc 	.word	0x2000f8fc
 8015134:	20003474 	.word	0x20003474
 8015138:	20003470 	.word	0x20003470
 801513c:	20002f70 	.word	0x20002f70
 8015140:	2000344c 	.word	0x2000344c
 8015144:	20002f74 	.word	0x20002f74
 8015148:	200001c8 	.word	0x200001c8

0801514c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801514c:	b580      	push	{r7, lr}
 801514e:	b084      	sub	sp, #16
 8015150:	af00      	add	r7, sp, #0
 8015152:	6078      	str	r0, [r7, #4]
 8015154:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	2b00      	cmp	r3, #0
 801515a:	d10a      	bne.n	8015172 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801515c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015160:	f383 8811 	msr	BASEPRI, r3
 8015164:	f3bf 8f6f 	isb	sy
 8015168:	f3bf 8f4f 	dsb	sy
 801516c:	60fb      	str	r3, [r7, #12]
}
 801516e:	bf00      	nop
 8015170:	e7fe      	b.n	8015170 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8015172:	4b07      	ldr	r3, [pc, #28]	; (8015190 <vTaskPlaceOnEventList+0x44>)
 8015174:	681b      	ldr	r3, [r3, #0]
 8015176:	3318      	adds	r3, #24
 8015178:	4619      	mov	r1, r3
 801517a:	6878      	ldr	r0, [r7, #4]
 801517c:	f7fe fa23 	bl	80135c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8015180:	2101      	movs	r1, #1
 8015182:	6838      	ldr	r0, [r7, #0]
 8015184:	f000 fd92 	bl	8015cac <prvAddCurrentTaskToDelayedList>
}
 8015188:	bf00      	nop
 801518a:	3710      	adds	r7, #16
 801518c:	46bd      	mov	sp, r7
 801518e:	bd80      	pop	{r7, pc}
 8015190:	20002f70 	.word	0x20002f70

08015194 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8015194:	b580      	push	{r7, lr}
 8015196:	b086      	sub	sp, #24
 8015198:	af00      	add	r7, sp, #0
 801519a:	60f8      	str	r0, [r7, #12]
 801519c:	60b9      	str	r1, [r7, #8]
 801519e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d10a      	bne.n	80151bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80151a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151aa:	f383 8811 	msr	BASEPRI, r3
 80151ae:	f3bf 8f6f 	isb	sy
 80151b2:	f3bf 8f4f 	dsb	sy
 80151b6:	617b      	str	r3, [r7, #20]
}
 80151b8:	bf00      	nop
 80151ba:	e7fe      	b.n	80151ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80151bc:	4b0a      	ldr	r3, [pc, #40]	; (80151e8 <vTaskPlaceOnEventListRestricted+0x54>)
 80151be:	681b      	ldr	r3, [r3, #0]
 80151c0:	3318      	adds	r3, #24
 80151c2:	4619      	mov	r1, r3
 80151c4:	68f8      	ldr	r0, [r7, #12]
 80151c6:	f7fe f9da 	bl	801357e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d002      	beq.n	80151d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80151d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80151d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80151d6:	6879      	ldr	r1, [r7, #4]
 80151d8:	68b8      	ldr	r0, [r7, #8]
 80151da:	f000 fd67 	bl	8015cac <prvAddCurrentTaskToDelayedList>
	}
 80151de:	bf00      	nop
 80151e0:	3718      	adds	r7, #24
 80151e2:	46bd      	mov	sp, r7
 80151e4:	bd80      	pop	{r7, pc}
 80151e6:	bf00      	nop
 80151e8:	20002f70 	.word	0x20002f70

080151ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b086      	sub	sp, #24
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	68db      	ldr	r3, [r3, #12]
 80151f8:	68db      	ldr	r3, [r3, #12]
 80151fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80151fc:	693b      	ldr	r3, [r7, #16]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d10a      	bne.n	8015218 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8015202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015206:	f383 8811 	msr	BASEPRI, r3
 801520a:	f3bf 8f6f 	isb	sy
 801520e:	f3bf 8f4f 	dsb	sy
 8015212:	60fb      	str	r3, [r7, #12]
}
 8015214:	bf00      	nop
 8015216:	e7fe      	b.n	8015216 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8015218:	693b      	ldr	r3, [r7, #16]
 801521a:	3318      	adds	r3, #24
 801521c:	4618      	mov	r0, r3
 801521e:	f7fe fa0b 	bl	8013638 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015222:	4b1e      	ldr	r3, [pc, #120]	; (801529c <xTaskRemoveFromEventList+0xb0>)
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d11d      	bne.n	8015266 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801522a:	693b      	ldr	r3, [r7, #16]
 801522c:	3304      	adds	r3, #4
 801522e:	4618      	mov	r0, r3
 8015230:	f7fe fa02 	bl	8013638 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8015234:	693b      	ldr	r3, [r7, #16]
 8015236:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015238:	4b19      	ldr	r3, [pc, #100]	; (80152a0 <xTaskRemoveFromEventList+0xb4>)
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	429a      	cmp	r2, r3
 801523e:	d903      	bls.n	8015248 <xTaskRemoveFromEventList+0x5c>
 8015240:	693b      	ldr	r3, [r7, #16]
 8015242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015244:	4a16      	ldr	r2, [pc, #88]	; (80152a0 <xTaskRemoveFromEventList+0xb4>)
 8015246:	6013      	str	r3, [r2, #0]
 8015248:	693b      	ldr	r3, [r7, #16]
 801524a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801524c:	4613      	mov	r3, r2
 801524e:	009b      	lsls	r3, r3, #2
 8015250:	4413      	add	r3, r2
 8015252:	009b      	lsls	r3, r3, #2
 8015254:	4a13      	ldr	r2, [pc, #76]	; (80152a4 <xTaskRemoveFromEventList+0xb8>)
 8015256:	441a      	add	r2, r3
 8015258:	693b      	ldr	r3, [r7, #16]
 801525a:	3304      	adds	r3, #4
 801525c:	4619      	mov	r1, r3
 801525e:	4610      	mov	r0, r2
 8015260:	f7fe f98d 	bl	801357e <vListInsertEnd>
 8015264:	e005      	b.n	8015272 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8015266:	693b      	ldr	r3, [r7, #16]
 8015268:	3318      	adds	r3, #24
 801526a:	4619      	mov	r1, r3
 801526c:	480e      	ldr	r0, [pc, #56]	; (80152a8 <xTaskRemoveFromEventList+0xbc>)
 801526e:	f7fe f986 	bl	801357e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8015272:	693b      	ldr	r3, [r7, #16]
 8015274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015276:	4b0d      	ldr	r3, [pc, #52]	; (80152ac <xTaskRemoveFromEventList+0xc0>)
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801527c:	429a      	cmp	r2, r3
 801527e:	d905      	bls.n	801528c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8015280:	2301      	movs	r3, #1
 8015282:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8015284:	4b0a      	ldr	r3, [pc, #40]	; (80152b0 <xTaskRemoveFromEventList+0xc4>)
 8015286:	2201      	movs	r2, #1
 8015288:	601a      	str	r2, [r3, #0]
 801528a:	e001      	b.n	8015290 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801528c:	2300      	movs	r3, #0
 801528e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8015290:	697b      	ldr	r3, [r7, #20]
}
 8015292:	4618      	mov	r0, r3
 8015294:	3718      	adds	r7, #24
 8015296:	46bd      	mov	sp, r7
 8015298:	bd80      	pop	{r7, pc}
 801529a:	bf00      	nop
 801529c:	2000346c 	.word	0x2000346c
 80152a0:	2000344c 	.word	0x2000344c
 80152a4:	20002f74 	.word	0x20002f74
 80152a8:	20003404 	.word	0x20003404
 80152ac:	20002f70 	.word	0x20002f70
 80152b0:	20003458 	.word	0x20003458

080152b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80152b4:	b480      	push	{r7}
 80152b6:	b083      	sub	sp, #12
 80152b8:	af00      	add	r7, sp, #0
 80152ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80152bc:	4b06      	ldr	r3, [pc, #24]	; (80152d8 <vTaskInternalSetTimeOutState+0x24>)
 80152be:	681a      	ldr	r2, [r3, #0]
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80152c4:	4b05      	ldr	r3, [pc, #20]	; (80152dc <vTaskInternalSetTimeOutState+0x28>)
 80152c6:	681a      	ldr	r2, [r3, #0]
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	605a      	str	r2, [r3, #4]
}
 80152cc:	bf00      	nop
 80152ce:	370c      	adds	r7, #12
 80152d0:	46bd      	mov	sp, r7
 80152d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152d6:	4770      	bx	lr
 80152d8:	2000345c 	.word	0x2000345c
 80152dc:	20003448 	.word	0x20003448

080152e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80152e0:	b580      	push	{r7, lr}
 80152e2:	b088      	sub	sp, #32
 80152e4:	af00      	add	r7, sp, #0
 80152e6:	6078      	str	r0, [r7, #4]
 80152e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d10a      	bne.n	8015306 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80152f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152f4:	f383 8811 	msr	BASEPRI, r3
 80152f8:	f3bf 8f6f 	isb	sy
 80152fc:	f3bf 8f4f 	dsb	sy
 8015300:	613b      	str	r3, [r7, #16]
}
 8015302:	bf00      	nop
 8015304:	e7fe      	b.n	8015304 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8015306:	683b      	ldr	r3, [r7, #0]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d10a      	bne.n	8015322 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801530c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015310:	f383 8811 	msr	BASEPRI, r3
 8015314:	f3bf 8f6f 	isb	sy
 8015318:	f3bf 8f4f 	dsb	sy
 801531c:	60fb      	str	r3, [r7, #12]
}
 801531e:	bf00      	nop
 8015320:	e7fe      	b.n	8015320 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8015322:	f001 f98f 	bl	8016644 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8015326:	4b1d      	ldr	r3, [pc, #116]	; (801539c <xTaskCheckForTimeOut+0xbc>)
 8015328:	681b      	ldr	r3, [r3, #0]
 801532a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	685b      	ldr	r3, [r3, #4]
 8015330:	69ba      	ldr	r2, [r7, #24]
 8015332:	1ad3      	subs	r3, r2, r3
 8015334:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8015336:	683b      	ldr	r3, [r7, #0]
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801533e:	d102      	bne.n	8015346 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8015340:	2300      	movs	r3, #0
 8015342:	61fb      	str	r3, [r7, #28]
 8015344:	e023      	b.n	801538e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	681a      	ldr	r2, [r3, #0]
 801534a:	4b15      	ldr	r3, [pc, #84]	; (80153a0 <xTaskCheckForTimeOut+0xc0>)
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	429a      	cmp	r2, r3
 8015350:	d007      	beq.n	8015362 <xTaskCheckForTimeOut+0x82>
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	685b      	ldr	r3, [r3, #4]
 8015356:	69ba      	ldr	r2, [r7, #24]
 8015358:	429a      	cmp	r2, r3
 801535a:	d302      	bcc.n	8015362 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801535c:	2301      	movs	r3, #1
 801535e:	61fb      	str	r3, [r7, #28]
 8015360:	e015      	b.n	801538e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8015362:	683b      	ldr	r3, [r7, #0]
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	697a      	ldr	r2, [r7, #20]
 8015368:	429a      	cmp	r2, r3
 801536a:	d20b      	bcs.n	8015384 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801536c:	683b      	ldr	r3, [r7, #0]
 801536e:	681a      	ldr	r2, [r3, #0]
 8015370:	697b      	ldr	r3, [r7, #20]
 8015372:	1ad2      	subs	r2, r2, r3
 8015374:	683b      	ldr	r3, [r7, #0]
 8015376:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8015378:	6878      	ldr	r0, [r7, #4]
 801537a:	f7ff ff9b 	bl	80152b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801537e:	2300      	movs	r3, #0
 8015380:	61fb      	str	r3, [r7, #28]
 8015382:	e004      	b.n	801538e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8015384:	683b      	ldr	r3, [r7, #0]
 8015386:	2200      	movs	r2, #0
 8015388:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801538a:	2301      	movs	r3, #1
 801538c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801538e:	f001 f989 	bl	80166a4 <vPortExitCritical>

	return xReturn;
 8015392:	69fb      	ldr	r3, [r7, #28]
}
 8015394:	4618      	mov	r0, r3
 8015396:	3720      	adds	r7, #32
 8015398:	46bd      	mov	sp, r7
 801539a:	bd80      	pop	{r7, pc}
 801539c:	20003448 	.word	0x20003448
 80153a0:	2000345c 	.word	0x2000345c

080153a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80153a4:	b480      	push	{r7}
 80153a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80153a8:	4b03      	ldr	r3, [pc, #12]	; (80153b8 <vTaskMissedYield+0x14>)
 80153aa:	2201      	movs	r2, #1
 80153ac:	601a      	str	r2, [r3, #0]
}
 80153ae:	bf00      	nop
 80153b0:	46bd      	mov	sp, r7
 80153b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b6:	4770      	bx	lr
 80153b8:	20003458 	.word	0x20003458

080153bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80153bc:	b580      	push	{r7, lr}
 80153be:	b082      	sub	sp, #8
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80153c4:	f000 f852 	bl	801546c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80153c8:	4b06      	ldr	r3, [pc, #24]	; (80153e4 <prvIdleTask+0x28>)
 80153ca:	681b      	ldr	r3, [r3, #0]
 80153cc:	2b01      	cmp	r3, #1
 80153ce:	d9f9      	bls.n	80153c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80153d0:	4b05      	ldr	r3, [pc, #20]	; (80153e8 <prvIdleTask+0x2c>)
 80153d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80153d6:	601a      	str	r2, [r3, #0]
 80153d8:	f3bf 8f4f 	dsb	sy
 80153dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80153e0:	e7f0      	b.n	80153c4 <prvIdleTask+0x8>
 80153e2:	bf00      	nop
 80153e4:	20002f74 	.word	0x20002f74
 80153e8:	e000ed04 	.word	0xe000ed04

080153ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b082      	sub	sp, #8
 80153f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80153f2:	2300      	movs	r3, #0
 80153f4:	607b      	str	r3, [r7, #4]
 80153f6:	e00c      	b.n	8015412 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80153f8:	687a      	ldr	r2, [r7, #4]
 80153fa:	4613      	mov	r3, r2
 80153fc:	009b      	lsls	r3, r3, #2
 80153fe:	4413      	add	r3, r2
 8015400:	009b      	lsls	r3, r3, #2
 8015402:	4a12      	ldr	r2, [pc, #72]	; (801544c <prvInitialiseTaskLists+0x60>)
 8015404:	4413      	add	r3, r2
 8015406:	4618      	mov	r0, r3
 8015408:	f7fe f88c 	bl	8013524 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	3301      	adds	r3, #1
 8015410:	607b      	str	r3, [r7, #4]
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	2b37      	cmp	r3, #55	; 0x37
 8015416:	d9ef      	bls.n	80153f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8015418:	480d      	ldr	r0, [pc, #52]	; (8015450 <prvInitialiseTaskLists+0x64>)
 801541a:	f7fe f883 	bl	8013524 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801541e:	480d      	ldr	r0, [pc, #52]	; (8015454 <prvInitialiseTaskLists+0x68>)
 8015420:	f7fe f880 	bl	8013524 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8015424:	480c      	ldr	r0, [pc, #48]	; (8015458 <prvInitialiseTaskLists+0x6c>)
 8015426:	f7fe f87d 	bl	8013524 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801542a:	480c      	ldr	r0, [pc, #48]	; (801545c <prvInitialiseTaskLists+0x70>)
 801542c:	f7fe f87a 	bl	8013524 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015430:	480b      	ldr	r0, [pc, #44]	; (8015460 <prvInitialiseTaskLists+0x74>)
 8015432:	f7fe f877 	bl	8013524 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8015436:	4b0b      	ldr	r3, [pc, #44]	; (8015464 <prvInitialiseTaskLists+0x78>)
 8015438:	4a05      	ldr	r2, [pc, #20]	; (8015450 <prvInitialiseTaskLists+0x64>)
 801543a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801543c:	4b0a      	ldr	r3, [pc, #40]	; (8015468 <prvInitialiseTaskLists+0x7c>)
 801543e:	4a05      	ldr	r2, [pc, #20]	; (8015454 <prvInitialiseTaskLists+0x68>)
 8015440:	601a      	str	r2, [r3, #0]
}
 8015442:	bf00      	nop
 8015444:	3708      	adds	r7, #8
 8015446:	46bd      	mov	sp, r7
 8015448:	bd80      	pop	{r7, pc}
 801544a:	bf00      	nop
 801544c:	20002f74 	.word	0x20002f74
 8015450:	200033d4 	.word	0x200033d4
 8015454:	200033e8 	.word	0x200033e8
 8015458:	20003404 	.word	0x20003404
 801545c:	20003418 	.word	0x20003418
 8015460:	20003430 	.word	0x20003430
 8015464:	200033fc 	.word	0x200033fc
 8015468:	20003400 	.word	0x20003400

0801546c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801546c:	b580      	push	{r7, lr}
 801546e:	b082      	sub	sp, #8
 8015470:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015472:	e019      	b.n	80154a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015474:	f001 f8e6 	bl	8016644 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015478:	4b10      	ldr	r3, [pc, #64]	; (80154bc <prvCheckTasksWaitingTermination+0x50>)
 801547a:	68db      	ldr	r3, [r3, #12]
 801547c:	68db      	ldr	r3, [r3, #12]
 801547e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	3304      	adds	r3, #4
 8015484:	4618      	mov	r0, r3
 8015486:	f7fe f8d7 	bl	8013638 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801548a:	4b0d      	ldr	r3, [pc, #52]	; (80154c0 <prvCheckTasksWaitingTermination+0x54>)
 801548c:	681b      	ldr	r3, [r3, #0]
 801548e:	3b01      	subs	r3, #1
 8015490:	4a0b      	ldr	r2, [pc, #44]	; (80154c0 <prvCheckTasksWaitingTermination+0x54>)
 8015492:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015494:	4b0b      	ldr	r3, [pc, #44]	; (80154c4 <prvCheckTasksWaitingTermination+0x58>)
 8015496:	681b      	ldr	r3, [r3, #0]
 8015498:	3b01      	subs	r3, #1
 801549a:	4a0a      	ldr	r2, [pc, #40]	; (80154c4 <prvCheckTasksWaitingTermination+0x58>)
 801549c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801549e:	f001 f901 	bl	80166a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80154a2:	6878      	ldr	r0, [r7, #4]
 80154a4:	f000 f8e4 	bl	8015670 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80154a8:	4b06      	ldr	r3, [pc, #24]	; (80154c4 <prvCheckTasksWaitingTermination+0x58>)
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	2b00      	cmp	r3, #0
 80154ae:	d1e1      	bne.n	8015474 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80154b0:	bf00      	nop
 80154b2:	bf00      	nop
 80154b4:	3708      	adds	r7, #8
 80154b6:	46bd      	mov	sp, r7
 80154b8:	bd80      	pop	{r7, pc}
 80154ba:	bf00      	nop
 80154bc:	20003418 	.word	0x20003418
 80154c0:	20003444 	.word	0x20003444
 80154c4:	2000342c 	.word	0x2000342c

080154c8 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b086      	sub	sp, #24
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	60f8      	str	r0, [r7, #12]
 80154d0:	60b9      	str	r1, [r7, #8]
 80154d2:	607a      	str	r2, [r7, #4]
 80154d4:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 80154d6:	68fb      	ldr	r3, [r7, #12]
 80154d8:	2b00      	cmp	r3, #0
 80154da:	d102      	bne.n	80154e2 <vTaskGetInfo+0x1a>
 80154dc:	4b2c      	ldr	r3, [pc, #176]	; (8015590 <vTaskGetInfo+0xc8>)
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	e000      	b.n	80154e4 <vTaskGetInfo+0x1c>
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 80154e6:	68bb      	ldr	r3, [r7, #8]
 80154e8:	697a      	ldr	r2, [r7, #20]
 80154ea:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 80154ec:	697b      	ldr	r3, [r7, #20]
 80154ee:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80154f2:	68bb      	ldr	r3, [r7, #8]
 80154f4:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 80154f6:	697b      	ldr	r3, [r7, #20]
 80154f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 80154fe:	697b      	ldr	r3, [r7, #20]
 8015500:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8015502:	68bb      	ldr	r3, [r7, #8]
 8015504:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8015506:	697b      	ldr	r3, [r7, #20]
 8015508:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801550a:	68bb      	ldr	r3, [r7, #8]
 801550c:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 801550e:	697b      	ldr	r3, [r7, #20]
 8015510:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015512:	68bb      	ldr	r3, [r7, #8]
 8015514:	615a      	str	r2, [r3, #20]
		}
		#endif

		#if ( configGENERATE_RUN_TIME_STATS == 1 )
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
 8015516:	697b      	ldr	r3, [r7, #20]
 8015518:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801551a:	68bb      	ldr	r3, [r7, #8]
 801551c:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 801551e:	78fb      	ldrb	r3, [r7, #3]
 8015520:	2b05      	cmp	r3, #5
 8015522:	d01a      	beq.n	801555a <vTaskGetInfo+0x92>
		{
			if( pxTCB == pxCurrentTCB )
 8015524:	4b1a      	ldr	r3, [pc, #104]	; (8015590 <vTaskGetInfo+0xc8>)
 8015526:	681b      	ldr	r3, [r3, #0]
 8015528:	697a      	ldr	r2, [r7, #20]
 801552a:	429a      	cmp	r2, r3
 801552c:	d103      	bne.n	8015536 <vTaskGetInfo+0x6e>
			{
				pxTaskStatus->eCurrentState = eRunning;
 801552e:	68bb      	ldr	r3, [r7, #8]
 8015530:	2200      	movs	r2, #0
 8015532:	731a      	strb	r2, [r3, #12]
 8015534:	e018      	b.n	8015568 <vTaskGetInfo+0xa0>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8015536:	68bb      	ldr	r3, [r7, #8]
 8015538:	78fa      	ldrb	r2, [r7, #3]
 801553a:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 801553c:	78fb      	ldrb	r3, [r7, #3]
 801553e:	2b03      	cmp	r3, #3
 8015540:	d112      	bne.n	8015568 <vTaskGetInfo+0xa0>
					{
						vTaskSuspendAll();
 8015542:	f7ff fb7b 	bl	8014c3c <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8015546:	697b      	ldr	r3, [r7, #20]
 8015548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801554a:	2b00      	cmp	r3, #0
 801554c:	d002      	beq.n	8015554 <vTaskGetInfo+0x8c>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 801554e:	68bb      	ldr	r3, [r7, #8]
 8015550:	2202      	movs	r2, #2
 8015552:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8015554:	f7ff fb80 	bl	8014c58 <xTaskResumeAll>
 8015558:	e006      	b.n	8015568 <vTaskGetInfo+0xa0>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 801555a:	6978      	ldr	r0, [r7, #20]
 801555c:	f7ff fa94 	bl	8014a88 <eTaskGetState>
 8015560:	4603      	mov	r3, r0
 8015562:	461a      	mov	r2, r3
 8015564:	68bb      	ldr	r3, [r7, #8]
 8015566:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d009      	beq.n	8015582 <vTaskGetInfo+0xba>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 801556e:	697b      	ldr	r3, [r7, #20]
 8015570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015572:	4618      	mov	r0, r3
 8015574:	f000 f860 	bl	8015638 <prvTaskCheckFreeStackSpace>
 8015578:	4603      	mov	r3, r0
 801557a:	461a      	mov	r2, r3
 801557c:	68bb      	ldr	r3, [r7, #8]
 801557e:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8015580:	e002      	b.n	8015588 <vTaskGetInfo+0xc0>
			pxTaskStatus->usStackHighWaterMark = 0;
 8015582:	68bb      	ldr	r3, [r7, #8]
 8015584:	2200      	movs	r2, #0
 8015586:	841a      	strh	r2, [r3, #32]
	}
 8015588:	bf00      	nop
 801558a:	3718      	adds	r7, #24
 801558c:	46bd      	mov	sp, r7
 801558e:	bd80      	pop	{r7, pc}
 8015590:	20002f70 	.word	0x20002f70

08015594 <prvListTasksWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( configUSE_TRACE_FACILITY == 1 )

	static UBaseType_t prvListTasksWithinSingleList( TaskStatus_t *pxTaskStatusArray, List_t *pxList, eTaskState eState )
	{
 8015594:	b580      	push	{r7, lr}
 8015596:	b08a      	sub	sp, #40	; 0x28
 8015598:	af00      	add	r7, sp, #0
 801559a:	60f8      	str	r0, [r7, #12]
 801559c:	60b9      	str	r1, [r7, #8]
 801559e:	4613      	mov	r3, r2
 80155a0:	71fb      	strb	r3, [r7, #7]
	configLIST_VOLATILE TCB_t *pxNextTCB, *pxFirstTCB;
	UBaseType_t uxTask = 0;
 80155a2:	2300      	movs	r3, #0
 80155a4:	627b      	str	r3, [r7, #36]	; 0x24

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 80155a6:	68bb      	ldr	r3, [r7, #8]
 80155a8:	681b      	ldr	r3, [r3, #0]
 80155aa:	2b00      	cmp	r3, #0
 80155ac:	d03f      	beq.n	801562e <prvListTasksWithinSingleList+0x9a>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80155ae:	68bb      	ldr	r3, [r7, #8]
 80155b0:	623b      	str	r3, [r7, #32]
 80155b2:	6a3b      	ldr	r3, [r7, #32]
 80155b4:	685b      	ldr	r3, [r3, #4]
 80155b6:	685a      	ldr	r2, [r3, #4]
 80155b8:	6a3b      	ldr	r3, [r7, #32]
 80155ba:	605a      	str	r2, [r3, #4]
 80155bc:	6a3b      	ldr	r3, [r7, #32]
 80155be:	685a      	ldr	r2, [r3, #4]
 80155c0:	6a3b      	ldr	r3, [r7, #32]
 80155c2:	3308      	adds	r3, #8
 80155c4:	429a      	cmp	r2, r3
 80155c6:	d104      	bne.n	80155d2 <prvListTasksWithinSingleList+0x3e>
 80155c8:	6a3b      	ldr	r3, [r7, #32]
 80155ca:	685b      	ldr	r3, [r3, #4]
 80155cc:	685a      	ldr	r2, [r3, #4]
 80155ce:	6a3b      	ldr	r3, [r7, #32]
 80155d0:	605a      	str	r2, [r3, #4]
 80155d2:	6a3b      	ldr	r3, [r7, #32]
 80155d4:	685b      	ldr	r3, [r3, #4]
 80155d6:	68db      	ldr	r3, [r3, #12]
 80155d8:	61fb      	str	r3, [r7, #28]
			pxTaskStatusArray array for each task that is referenced from
			pxList.  See the definition of TaskStatus_t in task.h for the
			meaning of each TaskStatus_t structure member. */
			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80155da:	68bb      	ldr	r3, [r7, #8]
 80155dc:	61bb      	str	r3, [r7, #24]
 80155de:	69bb      	ldr	r3, [r7, #24]
 80155e0:	685b      	ldr	r3, [r3, #4]
 80155e2:	685a      	ldr	r2, [r3, #4]
 80155e4:	69bb      	ldr	r3, [r7, #24]
 80155e6:	605a      	str	r2, [r3, #4]
 80155e8:	69bb      	ldr	r3, [r7, #24]
 80155ea:	685a      	ldr	r2, [r3, #4]
 80155ec:	69bb      	ldr	r3, [r7, #24]
 80155ee:	3308      	adds	r3, #8
 80155f0:	429a      	cmp	r2, r3
 80155f2:	d104      	bne.n	80155fe <prvListTasksWithinSingleList+0x6a>
 80155f4:	69bb      	ldr	r3, [r7, #24]
 80155f6:	685b      	ldr	r3, [r3, #4]
 80155f8:	685a      	ldr	r2, [r3, #4]
 80155fa:	69bb      	ldr	r3, [r7, #24]
 80155fc:	605a      	str	r2, [r3, #4]
 80155fe:	69bb      	ldr	r3, [r7, #24]
 8015600:	685b      	ldr	r3, [r3, #4]
 8015602:	68db      	ldr	r3, [r3, #12]
 8015604:	617b      	str	r3, [r7, #20]
				vTaskGetInfo( ( TaskHandle_t ) pxNextTCB, &( pxTaskStatusArray[ uxTask ] ), pdTRUE, eState );
 8015606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015608:	4613      	mov	r3, r2
 801560a:	00db      	lsls	r3, r3, #3
 801560c:	4413      	add	r3, r2
 801560e:	009b      	lsls	r3, r3, #2
 8015610:	461a      	mov	r2, r3
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	1899      	adds	r1, r3, r2
 8015616:	79fb      	ldrb	r3, [r7, #7]
 8015618:	2201      	movs	r2, #1
 801561a:	6978      	ldr	r0, [r7, #20]
 801561c:	f7ff ff54 	bl	80154c8 <vTaskGetInfo>
				uxTask++;
 8015620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015622:	3301      	adds	r3, #1
 8015624:	627b      	str	r3, [r7, #36]	; 0x24
			} while( pxNextTCB != pxFirstTCB );
 8015626:	697a      	ldr	r2, [r7, #20]
 8015628:	69fb      	ldr	r3, [r7, #28]
 801562a:	429a      	cmp	r2, r3
 801562c:	d1d5      	bne.n	80155da <prvListTasksWithinSingleList+0x46>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return uxTask;
 801562e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8015630:	4618      	mov	r0, r3
 8015632:	3728      	adds	r7, #40	; 0x28
 8015634:	46bd      	mov	sp, r7
 8015636:	bd80      	pop	{r7, pc}

08015638 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8015638:	b480      	push	{r7}
 801563a:	b085      	sub	sp, #20
 801563c:	af00      	add	r7, sp, #0
 801563e:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8015640:	2300      	movs	r3, #0
 8015642:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8015644:	e005      	b.n	8015652 <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	3301      	adds	r3, #1
 801564a:	607b      	str	r3, [r7, #4]
			ulCount++;
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	3301      	adds	r3, #1
 8015650:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	781b      	ldrb	r3, [r3, #0]
 8015656:	2ba5      	cmp	r3, #165	; 0xa5
 8015658:	d0f5      	beq.n	8015646 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 801565a:	68fb      	ldr	r3, [r7, #12]
 801565c:	089b      	lsrs	r3, r3, #2
 801565e:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8015660:	68fb      	ldr	r3, [r7, #12]
 8015662:	b29b      	uxth	r3, r3
	}
 8015664:	4618      	mov	r0, r3
 8015666:	3714      	adds	r7, #20
 8015668:	46bd      	mov	sp, r7
 801566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801566e:	4770      	bx	lr

08015670 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8015670:	b580      	push	{r7, lr}
 8015672:	b084      	sub	sp, #16
 8015674:	af00      	add	r7, sp, #0
 8015676:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	3358      	adds	r3, #88	; 0x58
 801567c:	4618      	mov	r0, r3
 801567e:	f002 fea7 	bl	80183d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 8015688:	2b00      	cmp	r3, #0
 801568a:	d108      	bne.n	801569e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801568c:	687b      	ldr	r3, [r7, #4]
 801568e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015690:	4618      	mov	r0, r3
 8015692:	f001 f9c5 	bl	8016a20 <vPortFree>
				vPortFree( pxTCB );
 8015696:	6878      	ldr	r0, [r7, #4]
 8015698:	f001 f9c2 	bl	8016a20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801569c:	e018      	b.n	80156d0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80156a4:	2b01      	cmp	r3, #1
 80156a6:	d103      	bne.n	80156b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80156a8:	6878      	ldr	r0, [r7, #4]
 80156aa:	f001 f9b9 	bl	8016a20 <vPortFree>
	}
 80156ae:	e00f      	b.n	80156d0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	f893 30bd 	ldrb.w	r3, [r3, #189]	; 0xbd
 80156b6:	2b02      	cmp	r3, #2
 80156b8:	d00a      	beq.n	80156d0 <prvDeleteTCB+0x60>
	__asm volatile
 80156ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156be:	f383 8811 	msr	BASEPRI, r3
 80156c2:	f3bf 8f6f 	isb	sy
 80156c6:	f3bf 8f4f 	dsb	sy
 80156ca:	60fb      	str	r3, [r7, #12]
}
 80156cc:	bf00      	nop
 80156ce:	e7fe      	b.n	80156ce <prvDeleteTCB+0x5e>
	}
 80156d0:	bf00      	nop
 80156d2:	3710      	adds	r7, #16
 80156d4:	46bd      	mov	sp, r7
 80156d6:	bd80      	pop	{r7, pc}

080156d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80156d8:	b480      	push	{r7}
 80156da:	b083      	sub	sp, #12
 80156dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80156de:	4b0c      	ldr	r3, [pc, #48]	; (8015710 <prvResetNextTaskUnblockTime+0x38>)
 80156e0:	681b      	ldr	r3, [r3, #0]
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d104      	bne.n	80156f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80156e8:	4b0a      	ldr	r3, [pc, #40]	; (8015714 <prvResetNextTaskUnblockTime+0x3c>)
 80156ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80156ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80156f0:	e008      	b.n	8015704 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80156f2:	4b07      	ldr	r3, [pc, #28]	; (8015710 <prvResetNextTaskUnblockTime+0x38>)
 80156f4:	681b      	ldr	r3, [r3, #0]
 80156f6:	68db      	ldr	r3, [r3, #12]
 80156f8:	68db      	ldr	r3, [r3, #12]
 80156fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	685b      	ldr	r3, [r3, #4]
 8015700:	4a04      	ldr	r2, [pc, #16]	; (8015714 <prvResetNextTaskUnblockTime+0x3c>)
 8015702:	6013      	str	r3, [r2, #0]
}
 8015704:	bf00      	nop
 8015706:	370c      	adds	r7, #12
 8015708:	46bd      	mov	sp, r7
 801570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801570e:	4770      	bx	lr
 8015710:	200033fc 	.word	0x200033fc
 8015714:	20003464 	.word	0x20003464

08015718 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015718:	b480      	push	{r7}
 801571a:	b083      	sub	sp, #12
 801571c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801571e:	4b0b      	ldr	r3, [pc, #44]	; (801574c <xTaskGetSchedulerState+0x34>)
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	2b00      	cmp	r3, #0
 8015724:	d102      	bne.n	801572c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8015726:	2301      	movs	r3, #1
 8015728:	607b      	str	r3, [r7, #4]
 801572a:	e008      	b.n	801573e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801572c:	4b08      	ldr	r3, [pc, #32]	; (8015750 <xTaskGetSchedulerState+0x38>)
 801572e:	681b      	ldr	r3, [r3, #0]
 8015730:	2b00      	cmp	r3, #0
 8015732:	d102      	bne.n	801573a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015734:	2302      	movs	r3, #2
 8015736:	607b      	str	r3, [r7, #4]
 8015738:	e001      	b.n	801573e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801573a:	2300      	movs	r3, #0
 801573c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801573e:	687b      	ldr	r3, [r7, #4]
	}
 8015740:	4618      	mov	r0, r3
 8015742:	370c      	adds	r7, #12
 8015744:	46bd      	mov	sp, r7
 8015746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801574a:	4770      	bx	lr
 801574c:	20003450 	.word	0x20003450
 8015750:	2000346c 	.word	0x2000346c

08015754 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8015754:	b580      	push	{r7, lr}
 8015756:	b084      	sub	sp, #16
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8015760:	2300      	movs	r3, #0
 8015762:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	2b00      	cmp	r3, #0
 8015768:	d051      	beq.n	801580e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801576a:	68bb      	ldr	r3, [r7, #8]
 801576c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801576e:	4b2a      	ldr	r3, [pc, #168]	; (8015818 <xTaskPriorityInherit+0xc4>)
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015774:	429a      	cmp	r2, r3
 8015776:	d241      	bcs.n	80157fc <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8015778:	68bb      	ldr	r3, [r7, #8]
 801577a:	699b      	ldr	r3, [r3, #24]
 801577c:	2b00      	cmp	r3, #0
 801577e:	db06      	blt.n	801578e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015780:	4b25      	ldr	r3, [pc, #148]	; (8015818 <xTaskPriorityInherit+0xc4>)
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015786:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801578a:	68bb      	ldr	r3, [r7, #8]
 801578c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801578e:	68bb      	ldr	r3, [r7, #8]
 8015790:	6959      	ldr	r1, [r3, #20]
 8015792:	68bb      	ldr	r3, [r7, #8]
 8015794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015796:	4613      	mov	r3, r2
 8015798:	009b      	lsls	r3, r3, #2
 801579a:	4413      	add	r3, r2
 801579c:	009b      	lsls	r3, r3, #2
 801579e:	4a1f      	ldr	r2, [pc, #124]	; (801581c <xTaskPriorityInherit+0xc8>)
 80157a0:	4413      	add	r3, r2
 80157a2:	4299      	cmp	r1, r3
 80157a4:	d122      	bne.n	80157ec <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80157a6:	68bb      	ldr	r3, [r7, #8]
 80157a8:	3304      	adds	r3, #4
 80157aa:	4618      	mov	r0, r3
 80157ac:	f7fd ff44 	bl	8013638 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80157b0:	4b19      	ldr	r3, [pc, #100]	; (8015818 <xTaskPriorityInherit+0xc4>)
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157b6:	68bb      	ldr	r3, [r7, #8]
 80157b8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80157ba:	68bb      	ldr	r3, [r7, #8]
 80157bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157be:	4b18      	ldr	r3, [pc, #96]	; (8015820 <xTaskPriorityInherit+0xcc>)
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	429a      	cmp	r2, r3
 80157c4:	d903      	bls.n	80157ce <xTaskPriorityInherit+0x7a>
 80157c6:	68bb      	ldr	r3, [r7, #8]
 80157c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80157ca:	4a15      	ldr	r2, [pc, #84]	; (8015820 <xTaskPriorityInherit+0xcc>)
 80157cc:	6013      	str	r3, [r2, #0]
 80157ce:	68bb      	ldr	r3, [r7, #8]
 80157d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157d2:	4613      	mov	r3, r2
 80157d4:	009b      	lsls	r3, r3, #2
 80157d6:	4413      	add	r3, r2
 80157d8:	009b      	lsls	r3, r3, #2
 80157da:	4a10      	ldr	r2, [pc, #64]	; (801581c <xTaskPriorityInherit+0xc8>)
 80157dc:	441a      	add	r2, r3
 80157de:	68bb      	ldr	r3, [r7, #8]
 80157e0:	3304      	adds	r3, #4
 80157e2:	4619      	mov	r1, r3
 80157e4:	4610      	mov	r0, r2
 80157e6:	f7fd feca 	bl	801357e <vListInsertEnd>
 80157ea:	e004      	b.n	80157f6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80157ec:	4b0a      	ldr	r3, [pc, #40]	; (8015818 <xTaskPriorityInherit+0xc4>)
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80157f2:	68bb      	ldr	r3, [r7, #8]
 80157f4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80157f6:	2301      	movs	r3, #1
 80157f8:	60fb      	str	r3, [r7, #12]
 80157fa:	e008      	b.n	801580e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80157fc:	68bb      	ldr	r3, [r7, #8]
 80157fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8015800:	4b05      	ldr	r3, [pc, #20]	; (8015818 <xTaskPriorityInherit+0xc4>)
 8015802:	681b      	ldr	r3, [r3, #0]
 8015804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015806:	429a      	cmp	r2, r3
 8015808:	d201      	bcs.n	801580e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801580a:	2301      	movs	r3, #1
 801580c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801580e:	68fb      	ldr	r3, [r7, #12]
	}
 8015810:	4618      	mov	r0, r3
 8015812:	3710      	adds	r7, #16
 8015814:	46bd      	mov	sp, r7
 8015816:	bd80      	pop	{r7, pc}
 8015818:	20002f70 	.word	0x20002f70
 801581c:	20002f74 	.word	0x20002f74
 8015820:	2000344c 	.word	0x2000344c

08015824 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015824:	b580      	push	{r7, lr}
 8015826:	b086      	sub	sp, #24
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801582c:	687b      	ldr	r3, [r7, #4]
 801582e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015830:	2300      	movs	r3, #0
 8015832:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015834:	687b      	ldr	r3, [r7, #4]
 8015836:	2b00      	cmp	r3, #0
 8015838:	d056      	beq.n	80158e8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801583a:	4b2e      	ldr	r3, [pc, #184]	; (80158f4 <xTaskPriorityDisinherit+0xd0>)
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	693a      	ldr	r2, [r7, #16]
 8015840:	429a      	cmp	r2, r3
 8015842:	d00a      	beq.n	801585a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8015844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015848:	f383 8811 	msr	BASEPRI, r3
 801584c:	f3bf 8f6f 	isb	sy
 8015850:	f3bf 8f4f 	dsb	sy
 8015854:	60fb      	str	r3, [r7, #12]
}
 8015856:	bf00      	nop
 8015858:	e7fe      	b.n	8015858 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801585a:	693b      	ldr	r3, [r7, #16]
 801585c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801585e:	2b00      	cmp	r3, #0
 8015860:	d10a      	bne.n	8015878 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8015862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015866:	f383 8811 	msr	BASEPRI, r3
 801586a:	f3bf 8f6f 	isb	sy
 801586e:	f3bf 8f4f 	dsb	sy
 8015872:	60bb      	str	r3, [r7, #8]
}
 8015874:	bf00      	nop
 8015876:	e7fe      	b.n	8015876 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8015878:	693b      	ldr	r3, [r7, #16]
 801587a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801587c:	1e5a      	subs	r2, r3, #1
 801587e:	693b      	ldr	r3, [r7, #16]
 8015880:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8015882:	693b      	ldr	r3, [r7, #16]
 8015884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015886:	693b      	ldr	r3, [r7, #16]
 8015888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801588a:	429a      	cmp	r2, r3
 801588c:	d02c      	beq.n	80158e8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801588e:	693b      	ldr	r3, [r7, #16]
 8015890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015892:	2b00      	cmp	r3, #0
 8015894:	d128      	bne.n	80158e8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015896:	693b      	ldr	r3, [r7, #16]
 8015898:	3304      	adds	r3, #4
 801589a:	4618      	mov	r0, r3
 801589c:	f7fd fecc 	bl	8013638 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80158a0:	693b      	ldr	r3, [r7, #16]
 80158a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80158a4:	693b      	ldr	r3, [r7, #16]
 80158a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80158a8:	693b      	ldr	r3, [r7, #16]
 80158aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80158b0:	693b      	ldr	r3, [r7, #16]
 80158b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80158b4:	693b      	ldr	r3, [r7, #16]
 80158b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80158b8:	4b0f      	ldr	r3, [pc, #60]	; (80158f8 <xTaskPriorityDisinherit+0xd4>)
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	429a      	cmp	r2, r3
 80158be:	d903      	bls.n	80158c8 <xTaskPriorityDisinherit+0xa4>
 80158c0:	693b      	ldr	r3, [r7, #16]
 80158c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80158c4:	4a0c      	ldr	r2, [pc, #48]	; (80158f8 <xTaskPriorityDisinherit+0xd4>)
 80158c6:	6013      	str	r3, [r2, #0]
 80158c8:	693b      	ldr	r3, [r7, #16]
 80158ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80158cc:	4613      	mov	r3, r2
 80158ce:	009b      	lsls	r3, r3, #2
 80158d0:	4413      	add	r3, r2
 80158d2:	009b      	lsls	r3, r3, #2
 80158d4:	4a09      	ldr	r2, [pc, #36]	; (80158fc <xTaskPriorityDisinherit+0xd8>)
 80158d6:	441a      	add	r2, r3
 80158d8:	693b      	ldr	r3, [r7, #16]
 80158da:	3304      	adds	r3, #4
 80158dc:	4619      	mov	r1, r3
 80158de:	4610      	mov	r0, r2
 80158e0:	f7fd fe4d 	bl	801357e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80158e4:	2301      	movs	r3, #1
 80158e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80158e8:	697b      	ldr	r3, [r7, #20]
	}
 80158ea:	4618      	mov	r0, r3
 80158ec:	3718      	adds	r7, #24
 80158ee:	46bd      	mov	sp, r7
 80158f0:	bd80      	pop	{r7, pc}
 80158f2:	bf00      	nop
 80158f4:	20002f70 	.word	0x20002f70
 80158f8:	2000344c 	.word	0x2000344c
 80158fc:	20002f74 	.word	0x20002f74

08015900 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8015900:	b580      	push	{r7, lr}
 8015902:	b088      	sub	sp, #32
 8015904:	af00      	add	r7, sp, #0
 8015906:	6078      	str	r0, [r7, #4]
 8015908:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801590e:	2301      	movs	r3, #1
 8015910:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	2b00      	cmp	r3, #0
 8015916:	d06a      	beq.n	80159ee <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8015918:	69bb      	ldr	r3, [r7, #24]
 801591a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801591c:	2b00      	cmp	r3, #0
 801591e:	d10a      	bne.n	8015936 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8015920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015924:	f383 8811 	msr	BASEPRI, r3
 8015928:	f3bf 8f6f 	isb	sy
 801592c:	f3bf 8f4f 	dsb	sy
 8015930:	60fb      	str	r3, [r7, #12]
}
 8015932:	bf00      	nop
 8015934:	e7fe      	b.n	8015934 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8015936:	69bb      	ldr	r3, [r7, #24]
 8015938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801593a:	683a      	ldr	r2, [r7, #0]
 801593c:	429a      	cmp	r2, r3
 801593e:	d902      	bls.n	8015946 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8015940:	683b      	ldr	r3, [r7, #0]
 8015942:	61fb      	str	r3, [r7, #28]
 8015944:	e002      	b.n	801594c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8015946:	69bb      	ldr	r3, [r7, #24]
 8015948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801594a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801594c:	69bb      	ldr	r3, [r7, #24]
 801594e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015950:	69fa      	ldr	r2, [r7, #28]
 8015952:	429a      	cmp	r2, r3
 8015954:	d04b      	beq.n	80159ee <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8015956:	69bb      	ldr	r3, [r7, #24]
 8015958:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801595a:	697a      	ldr	r2, [r7, #20]
 801595c:	429a      	cmp	r2, r3
 801595e:	d146      	bne.n	80159ee <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8015960:	4b25      	ldr	r3, [pc, #148]	; (80159f8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	69ba      	ldr	r2, [r7, #24]
 8015966:	429a      	cmp	r2, r3
 8015968:	d10a      	bne.n	8015980 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801596a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801596e:	f383 8811 	msr	BASEPRI, r3
 8015972:	f3bf 8f6f 	isb	sy
 8015976:	f3bf 8f4f 	dsb	sy
 801597a:	60bb      	str	r3, [r7, #8]
}
 801597c:	bf00      	nop
 801597e:	e7fe      	b.n	801597e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8015980:	69bb      	ldr	r3, [r7, #24]
 8015982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015984:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8015986:	69bb      	ldr	r3, [r7, #24]
 8015988:	69fa      	ldr	r2, [r7, #28]
 801598a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801598c:	69bb      	ldr	r3, [r7, #24]
 801598e:	699b      	ldr	r3, [r3, #24]
 8015990:	2b00      	cmp	r3, #0
 8015992:	db04      	blt.n	801599e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015994:	69fb      	ldr	r3, [r7, #28]
 8015996:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801599a:	69bb      	ldr	r3, [r7, #24]
 801599c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801599e:	69bb      	ldr	r3, [r7, #24]
 80159a0:	6959      	ldr	r1, [r3, #20]
 80159a2:	693a      	ldr	r2, [r7, #16]
 80159a4:	4613      	mov	r3, r2
 80159a6:	009b      	lsls	r3, r3, #2
 80159a8:	4413      	add	r3, r2
 80159aa:	009b      	lsls	r3, r3, #2
 80159ac:	4a13      	ldr	r2, [pc, #76]	; (80159fc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80159ae:	4413      	add	r3, r2
 80159b0:	4299      	cmp	r1, r3
 80159b2:	d11c      	bne.n	80159ee <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80159b4:	69bb      	ldr	r3, [r7, #24]
 80159b6:	3304      	adds	r3, #4
 80159b8:	4618      	mov	r0, r3
 80159ba:	f7fd fe3d 	bl	8013638 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80159be:	69bb      	ldr	r3, [r7, #24]
 80159c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159c2:	4b0f      	ldr	r3, [pc, #60]	; (8015a00 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	429a      	cmp	r2, r3
 80159c8:	d903      	bls.n	80159d2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80159ca:	69bb      	ldr	r3, [r7, #24]
 80159cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80159ce:	4a0c      	ldr	r2, [pc, #48]	; (8015a00 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80159d0:	6013      	str	r3, [r2, #0]
 80159d2:	69bb      	ldr	r3, [r7, #24]
 80159d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80159d6:	4613      	mov	r3, r2
 80159d8:	009b      	lsls	r3, r3, #2
 80159da:	4413      	add	r3, r2
 80159dc:	009b      	lsls	r3, r3, #2
 80159de:	4a07      	ldr	r2, [pc, #28]	; (80159fc <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80159e0:	441a      	add	r2, r3
 80159e2:	69bb      	ldr	r3, [r7, #24]
 80159e4:	3304      	adds	r3, #4
 80159e6:	4619      	mov	r1, r3
 80159e8:	4610      	mov	r0, r2
 80159ea:	f7fd fdc8 	bl	801357e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80159ee:	bf00      	nop
 80159f0:	3720      	adds	r7, #32
 80159f2:	46bd      	mov	sp, r7
 80159f4:	bd80      	pop	{r7, pc}
 80159f6:	bf00      	nop
 80159f8:	20002f70 	.word	0x20002f70
 80159fc:	20002f74 	.word	0x20002f74
 8015a00:	2000344c 	.word	0x2000344c

08015a04 <prvWriteNameToBuffer>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) )

	static char *prvWriteNameToBuffer( char *pcBuffer, const char *pcTaskName )
	{
 8015a04:	b580      	push	{r7, lr}
 8015a06:	b084      	sub	sp, #16
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	6078      	str	r0, [r7, #4]
 8015a0c:	6039      	str	r1, [r7, #0]
	size_t x;

		/* Start by copying the entire string. */
		strcpy( pcBuffer, pcTaskName );
 8015a0e:	6839      	ldr	r1, [r7, #0]
 8015a10:	6878      	ldr	r0, [r7, #4]
 8015a12:	f002 fdbb 	bl	801858c <strcpy>

		/* Pad the end of the string with spaces to ensure columns line up when
		printed out. */
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8015a16:	6878      	ldr	r0, [r7, #4]
 8015a18:	f7ea fbda 	bl	80001d0 <strlen>
 8015a1c:	60f8      	str	r0, [r7, #12]
 8015a1e:	e007      	b.n	8015a30 <prvWriteNameToBuffer+0x2c>
		{
			pcBuffer[ x ] = ' ';
 8015a20:	687a      	ldr	r2, [r7, #4]
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	4413      	add	r3, r2
 8015a26:	2220      	movs	r2, #32
 8015a28:	701a      	strb	r2, [r3, #0]
		for( x = strlen( pcBuffer ); x < ( size_t ) ( configMAX_TASK_NAME_LEN - 1 ); x++ )
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	3301      	adds	r3, #1
 8015a2e:	60fb      	str	r3, [r7, #12]
 8015a30:	68fb      	ldr	r3, [r7, #12]
 8015a32:	2b0e      	cmp	r3, #14
 8015a34:	d9f4      	bls.n	8015a20 <prvWriteNameToBuffer+0x1c>
		}

		/* Terminate. */
		pcBuffer[ x ] = ( char ) 0x00;
 8015a36:	687a      	ldr	r2, [r7, #4]
 8015a38:	68fb      	ldr	r3, [r7, #12]
 8015a3a:	4413      	add	r3, r2
 8015a3c:	2200      	movs	r2, #0
 8015a3e:	701a      	strb	r2, [r3, #0]

		/* Return the new end of string. */
		return &( pcBuffer[ x ] );
 8015a40:	687a      	ldr	r2, [r7, #4]
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	4413      	add	r3, r2
	}
 8015a46:	4618      	mov	r0, r3
 8015a48:	3710      	adds	r7, #16
 8015a4a:	46bd      	mov	sp, r7
 8015a4c:	bd80      	pop	{r7, pc}
	...

08015a50 <vTaskList>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskList( char * pcWriteBuffer )
	{
 8015a50:	b590      	push	{r4, r7, lr}
 8015a52:	b089      	sub	sp, #36	; 0x24
 8015a54:	af02      	add	r7, sp, #8
 8015a56:	6078      	str	r0, [r7, #4]
		 * through a call to vTaskList().
		 */


		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	2200      	movs	r2, #0
 8015a5c:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8015a5e:	4b45      	ldr	r3, [pc, #276]	; (8015b74 <vTaskList+0x124>)
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	60fb      	str	r3, [r7, #12]

		/* Allocate an array index for each task.  NOTE!  if
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8015a64:	4b43      	ldr	r3, [pc, #268]	; (8015b74 <vTaskList+0x124>)
 8015a66:	681a      	ldr	r2, [r3, #0]
 8015a68:	4613      	mov	r3, r2
 8015a6a:	00db      	lsls	r3, r3, #3
 8015a6c:	4413      	add	r3, r2
 8015a6e:	009b      	lsls	r3, r3, #2
 8015a70:	4618      	mov	r0, r3
 8015a72:	f000 ff09 	bl	8016888 <pvPortMalloc>
 8015a76:	60b8      	str	r0, [r7, #8]

		if( pxTaskStatusArray != NULL )
 8015a78:	68bb      	ldr	r3, [r7, #8]
 8015a7a:	2b00      	cmp	r3, #0
 8015a7c:	d076      	beq.n	8015b6c <vTaskList+0x11c>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, NULL );
 8015a7e:	2200      	movs	r2, #0
 8015a80:	68f9      	ldr	r1, [r7, #12]
 8015a82:	68b8      	ldr	r0, [r7, #8]
 8015a84:	f7ff f996 	bl	8014db4 <uxTaskGetSystemState>
 8015a88:	60f8      	str	r0, [r7, #12]

			/* Create a human readable table from the binary data. */
			for( x = 0; x < uxArraySize; x++ )
 8015a8a:	2300      	movs	r3, #0
 8015a8c:	617b      	str	r3, [r7, #20]
 8015a8e:	e066      	b.n	8015b5e <vTaskList+0x10e>
			{
				switch( pxTaskStatusArray[ x ].eCurrentState )
 8015a90:	697a      	ldr	r2, [r7, #20]
 8015a92:	4613      	mov	r3, r2
 8015a94:	00db      	lsls	r3, r3, #3
 8015a96:	4413      	add	r3, r2
 8015a98:	009b      	lsls	r3, r3, #2
 8015a9a:	461a      	mov	r2, r3
 8015a9c:	68bb      	ldr	r3, [r7, #8]
 8015a9e:	4413      	add	r3, r2
 8015aa0:	7b1b      	ldrb	r3, [r3, #12]
 8015aa2:	2b04      	cmp	r3, #4
 8015aa4:	d81b      	bhi.n	8015ade <vTaskList+0x8e>
 8015aa6:	a201      	add	r2, pc, #4	; (adr r2, 8015aac <vTaskList+0x5c>)
 8015aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015aac:	08015ac1 	.word	0x08015ac1
 8015ab0:	08015ac7 	.word	0x08015ac7
 8015ab4:	08015acd 	.word	0x08015acd
 8015ab8:	08015ad3 	.word	0x08015ad3
 8015abc:	08015ad9 	.word	0x08015ad9
				{
					case eRunning:		cStatus = tskRUNNING_CHAR;
 8015ac0:	2358      	movs	r3, #88	; 0x58
 8015ac2:	74fb      	strb	r3, [r7, #19]
										break;
 8015ac4:	e00e      	b.n	8015ae4 <vTaskList+0x94>

					case eReady:		cStatus = tskREADY_CHAR;
 8015ac6:	2352      	movs	r3, #82	; 0x52
 8015ac8:	74fb      	strb	r3, [r7, #19]
										break;
 8015aca:	e00b      	b.n	8015ae4 <vTaskList+0x94>

					case eBlocked:		cStatus = tskBLOCKED_CHAR;
 8015acc:	2342      	movs	r3, #66	; 0x42
 8015ace:	74fb      	strb	r3, [r7, #19]
										break;
 8015ad0:	e008      	b.n	8015ae4 <vTaskList+0x94>

					case eSuspended:	cStatus = tskSUSPENDED_CHAR;
 8015ad2:	2353      	movs	r3, #83	; 0x53
 8015ad4:	74fb      	strb	r3, [r7, #19]
										break;
 8015ad6:	e005      	b.n	8015ae4 <vTaskList+0x94>

					case eDeleted:		cStatus = tskDELETED_CHAR;
 8015ad8:	2344      	movs	r3, #68	; 0x44
 8015ada:	74fb      	strb	r3, [r7, #19]
										break;
 8015adc:	e002      	b.n	8015ae4 <vTaskList+0x94>

					case eInvalid:		/* Fall through. */
					default:			/* Should not get here, but it is included
										to prevent static checking errors. */
										cStatus = ( char ) 0x00;
 8015ade:	2300      	movs	r3, #0
 8015ae0:	74fb      	strb	r3, [r7, #19]
										break;
 8015ae2:	bf00      	nop
				}

				/* Write the task name to the string, padding with spaces so it
				can be printed in tabular form more easily. */
				pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8015ae4:	697a      	ldr	r2, [r7, #20]
 8015ae6:	4613      	mov	r3, r2
 8015ae8:	00db      	lsls	r3, r3, #3
 8015aea:	4413      	add	r3, r2
 8015aec:	009b      	lsls	r3, r3, #2
 8015aee:	461a      	mov	r2, r3
 8015af0:	68bb      	ldr	r3, [r7, #8]
 8015af2:	4413      	add	r3, r2
 8015af4:	685b      	ldr	r3, [r3, #4]
 8015af6:	4619      	mov	r1, r3
 8015af8:	6878      	ldr	r0, [r7, #4]
 8015afa:	f7ff ff83 	bl	8015a04 <prvWriteNameToBuffer>
 8015afe:	6078      	str	r0, [r7, #4]

				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, "\t%c\t%u\t%u\t%u\r\n", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8015b00:	7cf9      	ldrb	r1, [r7, #19]
 8015b02:	697a      	ldr	r2, [r7, #20]
 8015b04:	4613      	mov	r3, r2
 8015b06:	00db      	lsls	r3, r3, #3
 8015b08:	4413      	add	r3, r2
 8015b0a:	009b      	lsls	r3, r3, #2
 8015b0c:	461a      	mov	r2, r3
 8015b0e:	68bb      	ldr	r3, [r7, #8]
 8015b10:	4413      	add	r3, r2
 8015b12:	6918      	ldr	r0, [r3, #16]
 8015b14:	697a      	ldr	r2, [r7, #20]
 8015b16:	4613      	mov	r3, r2
 8015b18:	00db      	lsls	r3, r3, #3
 8015b1a:	4413      	add	r3, r2
 8015b1c:	009b      	lsls	r3, r3, #2
 8015b1e:	461a      	mov	r2, r3
 8015b20:	68bb      	ldr	r3, [r7, #8]
 8015b22:	4413      	add	r3, r2
 8015b24:	8c1b      	ldrh	r3, [r3, #32]
 8015b26:	461c      	mov	r4, r3
 8015b28:	697a      	ldr	r2, [r7, #20]
 8015b2a:	4613      	mov	r3, r2
 8015b2c:	00db      	lsls	r3, r3, #3
 8015b2e:	4413      	add	r3, r2
 8015b30:	009b      	lsls	r3, r3, #2
 8015b32:	461a      	mov	r2, r3
 8015b34:	68bb      	ldr	r3, [r7, #8]
 8015b36:	4413      	add	r3, r2
 8015b38:	689b      	ldr	r3, [r3, #8]
 8015b3a:	9301      	str	r3, [sp, #4]
 8015b3c:	9400      	str	r4, [sp, #0]
 8015b3e:	4603      	mov	r3, r0
 8015b40:	460a      	mov	r2, r1
 8015b42:	490d      	ldr	r1, [pc, #52]	; (8015b78 <vTaskList+0x128>)
 8015b44:	6878      	ldr	r0, [r7, #4]
 8015b46:	f002 fcaf 	bl	80184a8 <siprintf>
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8015b4a:	6878      	ldr	r0, [r7, #4]
 8015b4c:	f7ea fb40 	bl	80001d0 <strlen>
 8015b50:	4602      	mov	r2, r0
 8015b52:	687b      	ldr	r3, [r7, #4]
 8015b54:	4413      	add	r3, r2
 8015b56:	607b      	str	r3, [r7, #4]
			for( x = 0; x < uxArraySize; x++ )
 8015b58:	697b      	ldr	r3, [r7, #20]
 8015b5a:	3301      	adds	r3, #1
 8015b5c:	617b      	str	r3, [r7, #20]
 8015b5e:	697a      	ldr	r2, [r7, #20]
 8015b60:	68fb      	ldr	r3, [r7, #12]
 8015b62:	429a      	cmp	r2, r3
 8015b64:	d394      	bcc.n	8015a90 <vTaskList+0x40>
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8015b66:	68b8      	ldr	r0, [r7, #8]
 8015b68:	f000 ff5a 	bl	8016a20 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015b6c:	bf00      	nop
 8015b6e:	371c      	adds	r7, #28
 8015b70:	46bd      	mov	sp, r7
 8015b72:	bd90      	pop	{r4, r7, pc}
 8015b74:	20003444 	.word	0x20003444
 8015b78:	0801ad20 	.word	0x0801ad20

08015b7c <vTaskGetRunTimeStats>:
/*----------------------------------------------------------*/

#if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	void vTaskGetRunTimeStats( char *pcWriteBuffer )
	{
 8015b7c:	b580      	push	{r7, lr}
 8015b7e:	b088      	sub	sp, #32
 8015b80:	af00      	add	r7, sp, #0
 8015b82:	6078      	str	r0, [r7, #4]
		 * directly to get access to raw stats data, rather than indirectly
		 * through a call to vTaskGetRunTimeStats().
		 */

		/* Make sure the write buffer does not contain a string. */
		*pcWriteBuffer = ( char ) 0x00;
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	2200      	movs	r2, #0
 8015b88:	701a      	strb	r2, [r3, #0]

		/* Take a snapshot of the number of tasks in case it changes while this
		function is executing. */
		uxArraySize = uxCurrentNumberOfTasks;
 8015b8a:	4b3a      	ldr	r3, [pc, #232]	; (8015c74 <vTaskGetRunTimeStats+0xf8>)
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	61bb      	str	r3, [r7, #24]

		/* Allocate an array index for each task.  NOTE!  If
		configSUPPORT_DYNAMIC_ALLOCATION is set to 0 then pvPortMalloc() will
		equate to NULL. */
		pxTaskStatusArray = pvPortMalloc( uxCurrentNumberOfTasks * sizeof( TaskStatus_t ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation allocates a struct that has the alignment requirements of a pointer. */
 8015b90:	4b38      	ldr	r3, [pc, #224]	; (8015c74 <vTaskGetRunTimeStats+0xf8>)
 8015b92:	681a      	ldr	r2, [r3, #0]
 8015b94:	4613      	mov	r3, r2
 8015b96:	00db      	lsls	r3, r3, #3
 8015b98:	4413      	add	r3, r2
 8015b9a:	009b      	lsls	r3, r3, #2
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	f000 fe73 	bl	8016888 <pvPortMalloc>
 8015ba2:	6178      	str	r0, [r7, #20]

		if( pxTaskStatusArray != NULL )
 8015ba4:	697b      	ldr	r3, [r7, #20]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d05f      	beq.n	8015c6a <vTaskGetRunTimeStats+0xee>
		{
			/* Generate the (binary) data. */
			uxArraySize = uxTaskGetSystemState( pxTaskStatusArray, uxArraySize, &ulTotalTime );
 8015baa:	f107 030c 	add.w	r3, r7, #12
 8015bae:	461a      	mov	r2, r3
 8015bb0:	69b9      	ldr	r1, [r7, #24]
 8015bb2:	6978      	ldr	r0, [r7, #20]
 8015bb4:	f7ff f8fe 	bl	8014db4 <uxTaskGetSystemState>
 8015bb8:	61b8      	str	r0, [r7, #24]

			/* For percentage calculations. */
			ulTotalTime /= 100UL;
 8015bba:	68fb      	ldr	r3, [r7, #12]
 8015bbc:	4a2e      	ldr	r2, [pc, #184]	; (8015c78 <vTaskGetRunTimeStats+0xfc>)
 8015bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8015bc2:	095b      	lsrs	r3, r3, #5
 8015bc4:	60fb      	str	r3, [r7, #12]

			/* Avoid divide by zero errors. */
			if( ulTotalTime > 0UL )
 8015bc6:	68fb      	ldr	r3, [r7, #12]
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d04b      	beq.n	8015c64 <vTaskGetRunTimeStats+0xe8>
			{
				/* Create a human readable table from the binary data. */
				for( x = 0; x < uxArraySize; x++ )
 8015bcc:	2300      	movs	r3, #0
 8015bce:	61fb      	str	r3, [r7, #28]
 8015bd0:	e044      	b.n	8015c5c <vTaskGetRunTimeStats+0xe0>
				{
					/* What percentage of the total run time has the task used?
					This will always be rounded down to the nearest integer.
					ulTotalRunTimeDiv100 has already been divided by 100. */
					ulStatsAsPercentage = pxTaskStatusArray[ x ].ulRunTimeCounter / ulTotalTime;
 8015bd2:	69fa      	ldr	r2, [r7, #28]
 8015bd4:	4613      	mov	r3, r2
 8015bd6:	00db      	lsls	r3, r3, #3
 8015bd8:	4413      	add	r3, r2
 8015bda:	009b      	lsls	r3, r3, #2
 8015bdc:	461a      	mov	r2, r3
 8015bde:	697b      	ldr	r3, [r7, #20]
 8015be0:	4413      	add	r3, r2
 8015be2:	699a      	ldr	r2, [r3, #24]
 8015be4:	68fb      	ldr	r3, [r7, #12]
 8015be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8015bea:	613b      	str	r3, [r7, #16]

					/* Write the task name to the string, padding with
					spaces so it can be printed in tabular form more
					easily. */
					pcWriteBuffer = prvWriteNameToBuffer( pcWriteBuffer, pxTaskStatusArray[ x ].pcTaskName );
 8015bec:	69fa      	ldr	r2, [r7, #28]
 8015bee:	4613      	mov	r3, r2
 8015bf0:	00db      	lsls	r3, r3, #3
 8015bf2:	4413      	add	r3, r2
 8015bf4:	009b      	lsls	r3, r3, #2
 8015bf6:	461a      	mov	r2, r3
 8015bf8:	697b      	ldr	r3, [r7, #20]
 8015bfa:	4413      	add	r3, r2
 8015bfc:	685b      	ldr	r3, [r3, #4]
 8015bfe:	4619      	mov	r1, r3
 8015c00:	6878      	ldr	r0, [r7, #4]
 8015c02:	f7ff feff 	bl	8015a04 <prvWriteNameToBuffer>
 8015c06:	6078      	str	r0, [r7, #4]

					if( ulStatsAsPercentage > 0UL )
 8015c08:	693b      	ldr	r3, [r7, #16]
 8015c0a:	2b00      	cmp	r3, #0
 8015c0c:	d00e      	beq.n	8015c2c <vTaskGetRunTimeStats+0xb0>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t%u%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8015c0e:	69fa      	ldr	r2, [r7, #28]
 8015c10:	4613      	mov	r3, r2
 8015c12:	00db      	lsls	r3, r3, #3
 8015c14:	4413      	add	r3, r2
 8015c16:	009b      	lsls	r3, r3, #2
 8015c18:	461a      	mov	r2, r3
 8015c1a:	697b      	ldr	r3, [r7, #20]
 8015c1c:	4413      	add	r3, r2
 8015c1e:	699a      	ldr	r2, [r3, #24]
 8015c20:	693b      	ldr	r3, [r7, #16]
 8015c22:	4916      	ldr	r1, [pc, #88]	; (8015c7c <vTaskGetRunTimeStats+0x100>)
 8015c24:	6878      	ldr	r0, [r7, #4]
 8015c26:	f002 fc3f 	bl	80184a8 <siprintf>
 8015c2a:	e00d      	b.n	8015c48 <vTaskGetRunTimeStats+0xcc>
						}
						#else
						{
							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, "\t%u\t\t<1%%\r\n", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
 8015c2c:	69fa      	ldr	r2, [r7, #28]
 8015c2e:	4613      	mov	r3, r2
 8015c30:	00db      	lsls	r3, r3, #3
 8015c32:	4413      	add	r3, r2
 8015c34:	009b      	lsls	r3, r3, #2
 8015c36:	461a      	mov	r2, r3
 8015c38:	697b      	ldr	r3, [r7, #20]
 8015c3a:	4413      	add	r3, r2
 8015c3c:	699b      	ldr	r3, [r3, #24]
 8015c3e:	461a      	mov	r2, r3
 8015c40:	490f      	ldr	r1, [pc, #60]	; (8015c80 <vTaskGetRunTimeStats+0x104>)
 8015c42:	6878      	ldr	r0, [r7, #4]
 8015c44:	f002 fc30 	bl	80184a8 <siprintf>
						}
						#endif
					}

					pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
 8015c48:	6878      	ldr	r0, [r7, #4]
 8015c4a:	f7ea fac1 	bl	80001d0 <strlen>
 8015c4e:	4602      	mov	r2, r0
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	4413      	add	r3, r2
 8015c54:	607b      	str	r3, [r7, #4]
				for( x = 0; x < uxArraySize; x++ )
 8015c56:	69fb      	ldr	r3, [r7, #28]
 8015c58:	3301      	adds	r3, #1
 8015c5a:	61fb      	str	r3, [r7, #28]
 8015c5c:	69fa      	ldr	r2, [r7, #28]
 8015c5e:	69bb      	ldr	r3, [r7, #24]
 8015c60:	429a      	cmp	r2, r3
 8015c62:	d3b6      	bcc.n	8015bd2 <vTaskGetRunTimeStats+0x56>
				mtCOVERAGE_TEST_MARKER();
			}

			/* Free the array again.  NOTE!  If configSUPPORT_DYNAMIC_ALLOCATION
			is 0 then vPortFree() will be #defined to nothing. */
			vPortFree( pxTaskStatusArray );
 8015c64:	6978      	ldr	r0, [r7, #20]
 8015c66:	f000 fedb 	bl	8016a20 <vPortFree>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8015c6a:	bf00      	nop
 8015c6c:	3720      	adds	r7, #32
 8015c6e:	46bd      	mov	sp, r7
 8015c70:	bd80      	pop	{r7, pc}
 8015c72:	bf00      	nop
 8015c74:	20003444 	.word	0x20003444
 8015c78:	51eb851f 	.word	0x51eb851f
 8015c7c:	0801ad30 	.word	0x0801ad30
 8015c80:	0801ad3c 	.word	0x0801ad3c

08015c84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8015c84:	b480      	push	{r7}
 8015c86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8015c88:	4b07      	ldr	r3, [pc, #28]	; (8015ca8 <pvTaskIncrementMutexHeldCount+0x24>)
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	d004      	beq.n	8015c9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8015c90:	4b05      	ldr	r3, [pc, #20]	; (8015ca8 <pvTaskIncrementMutexHeldCount+0x24>)
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015c96:	3201      	adds	r2, #1
 8015c98:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8015c9a:	4b03      	ldr	r3, [pc, #12]	; (8015ca8 <pvTaskIncrementMutexHeldCount+0x24>)
 8015c9c:	681b      	ldr	r3, [r3, #0]
	}
 8015c9e:	4618      	mov	r0, r3
 8015ca0:	46bd      	mov	sp, r7
 8015ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca6:	4770      	bx	lr
 8015ca8:	20002f70 	.word	0x20002f70

08015cac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015cac:	b580      	push	{r7, lr}
 8015cae:	b084      	sub	sp, #16
 8015cb0:	af00      	add	r7, sp, #0
 8015cb2:	6078      	str	r0, [r7, #4]
 8015cb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015cb6:	4b21      	ldr	r3, [pc, #132]	; (8015d3c <prvAddCurrentTaskToDelayedList+0x90>)
 8015cb8:	681b      	ldr	r3, [r3, #0]
 8015cba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015cbc:	4b20      	ldr	r3, [pc, #128]	; (8015d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	3304      	adds	r3, #4
 8015cc2:	4618      	mov	r0, r3
 8015cc4:	f7fd fcb8 	bl	8013638 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015cce:	d10a      	bne.n	8015ce6 <prvAddCurrentTaskToDelayedList+0x3a>
 8015cd0:	683b      	ldr	r3, [r7, #0]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d007      	beq.n	8015ce6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015cd6:	4b1a      	ldr	r3, [pc, #104]	; (8015d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	3304      	adds	r3, #4
 8015cdc:	4619      	mov	r1, r3
 8015cde:	4819      	ldr	r0, [pc, #100]	; (8015d44 <prvAddCurrentTaskToDelayedList+0x98>)
 8015ce0:	f7fd fc4d 	bl	801357e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8015ce4:	e026      	b.n	8015d34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8015ce6:	68fa      	ldr	r2, [r7, #12]
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	4413      	add	r3, r2
 8015cec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015cee:	4b14      	ldr	r3, [pc, #80]	; (8015d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	68ba      	ldr	r2, [r7, #8]
 8015cf4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8015cf6:	68ba      	ldr	r2, [r7, #8]
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	429a      	cmp	r2, r3
 8015cfc:	d209      	bcs.n	8015d12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015cfe:	4b12      	ldr	r3, [pc, #72]	; (8015d48 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015d00:	681a      	ldr	r2, [r3, #0]
 8015d02:	4b0f      	ldr	r3, [pc, #60]	; (8015d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8015d04:	681b      	ldr	r3, [r3, #0]
 8015d06:	3304      	adds	r3, #4
 8015d08:	4619      	mov	r1, r3
 8015d0a:	4610      	mov	r0, r2
 8015d0c:	f7fd fc5b 	bl	80135c6 <vListInsert>
}
 8015d10:	e010      	b.n	8015d34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015d12:	4b0e      	ldr	r3, [pc, #56]	; (8015d4c <prvAddCurrentTaskToDelayedList+0xa0>)
 8015d14:	681a      	ldr	r2, [r3, #0]
 8015d16:	4b0a      	ldr	r3, [pc, #40]	; (8015d40 <prvAddCurrentTaskToDelayedList+0x94>)
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	3304      	adds	r3, #4
 8015d1c:	4619      	mov	r1, r3
 8015d1e:	4610      	mov	r0, r2
 8015d20:	f7fd fc51 	bl	80135c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8015d24:	4b0a      	ldr	r3, [pc, #40]	; (8015d50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	68ba      	ldr	r2, [r7, #8]
 8015d2a:	429a      	cmp	r2, r3
 8015d2c:	d202      	bcs.n	8015d34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015d2e:	4a08      	ldr	r2, [pc, #32]	; (8015d50 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015d30:	68bb      	ldr	r3, [r7, #8]
 8015d32:	6013      	str	r3, [r2, #0]
}
 8015d34:	bf00      	nop
 8015d36:	3710      	adds	r7, #16
 8015d38:	46bd      	mov	sp, r7
 8015d3a:	bd80      	pop	{r7, pc}
 8015d3c:	20003448 	.word	0x20003448
 8015d40:	20002f70 	.word	0x20002f70
 8015d44:	20003430 	.word	0x20003430
 8015d48:	20003400 	.word	0x20003400
 8015d4c:	200033fc 	.word	0x200033fc
 8015d50:	20003464 	.word	0x20003464

08015d54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015d54:	b580      	push	{r7, lr}
 8015d56:	b08a      	sub	sp, #40	; 0x28
 8015d58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015d5a:	2300      	movs	r3, #0
 8015d5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015d5e:	f000 fb07 	bl	8016370 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8015d62:	4b1c      	ldr	r3, [pc, #112]	; (8015dd4 <xTimerCreateTimerTask+0x80>)
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d021      	beq.n	8015dae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015d6e:	2300      	movs	r3, #0
 8015d70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8015d72:	1d3a      	adds	r2, r7, #4
 8015d74:	f107 0108 	add.w	r1, r7, #8
 8015d78:	f107 030c 	add.w	r3, r7, #12
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	f7fd fbb7 	bl	80134f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8015d82:	6879      	ldr	r1, [r7, #4]
 8015d84:	68bb      	ldr	r3, [r7, #8]
 8015d86:	68fa      	ldr	r2, [r7, #12]
 8015d88:	9202      	str	r2, [sp, #8]
 8015d8a:	9301      	str	r3, [sp, #4]
 8015d8c:	2302      	movs	r3, #2
 8015d8e:	9300      	str	r3, [sp, #0]
 8015d90:	2300      	movs	r3, #0
 8015d92:	460a      	mov	r2, r1
 8015d94:	4910      	ldr	r1, [pc, #64]	; (8015dd8 <xTimerCreateTimerTask+0x84>)
 8015d96:	4811      	ldr	r0, [pc, #68]	; (8015ddc <xTimerCreateTimerTask+0x88>)
 8015d98:	f7fe fc86 	bl	80146a8 <xTaskCreateStatic>
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	4a10      	ldr	r2, [pc, #64]	; (8015de0 <xTimerCreateTimerTask+0x8c>)
 8015da0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8015da2:	4b0f      	ldr	r3, [pc, #60]	; (8015de0 <xTimerCreateTimerTask+0x8c>)
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d001      	beq.n	8015dae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015daa:	2301      	movs	r3, #1
 8015dac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015dae:	697b      	ldr	r3, [r7, #20]
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d10a      	bne.n	8015dca <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015db8:	f383 8811 	msr	BASEPRI, r3
 8015dbc:	f3bf 8f6f 	isb	sy
 8015dc0:	f3bf 8f4f 	dsb	sy
 8015dc4:	613b      	str	r3, [r7, #16]
}
 8015dc6:	bf00      	nop
 8015dc8:	e7fe      	b.n	8015dc8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015dca:	697b      	ldr	r3, [r7, #20]
}
 8015dcc:	4618      	mov	r0, r3
 8015dce:	3718      	adds	r7, #24
 8015dd0:	46bd      	mov	sp, r7
 8015dd2:	bd80      	pop	{r7, pc}
 8015dd4:	200034a8 	.word	0x200034a8
 8015dd8:	0801ad48 	.word	0x0801ad48
 8015ddc:	08015f19 	.word	0x08015f19
 8015de0:	200034ac 	.word	0x200034ac

08015de4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8015de4:	b580      	push	{r7, lr}
 8015de6:	b08a      	sub	sp, #40	; 0x28
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	60f8      	str	r0, [r7, #12]
 8015dec:	60b9      	str	r1, [r7, #8]
 8015dee:	607a      	str	r2, [r7, #4]
 8015df0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8015df2:	2300      	movs	r3, #0
 8015df4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d10a      	bne.n	8015e12 <xTimerGenericCommand+0x2e>
	__asm volatile
 8015dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e00:	f383 8811 	msr	BASEPRI, r3
 8015e04:	f3bf 8f6f 	isb	sy
 8015e08:	f3bf 8f4f 	dsb	sy
 8015e0c:	623b      	str	r3, [r7, #32]
}
 8015e0e:	bf00      	nop
 8015e10:	e7fe      	b.n	8015e10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8015e12:	4b1a      	ldr	r3, [pc, #104]	; (8015e7c <xTimerGenericCommand+0x98>)
 8015e14:	681b      	ldr	r3, [r3, #0]
 8015e16:	2b00      	cmp	r3, #0
 8015e18:	d02a      	beq.n	8015e70 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8015e1a:	68bb      	ldr	r3, [r7, #8]
 8015e1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8015e22:	68fb      	ldr	r3, [r7, #12]
 8015e24:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8015e26:	68bb      	ldr	r3, [r7, #8]
 8015e28:	2b05      	cmp	r3, #5
 8015e2a:	dc18      	bgt.n	8015e5e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015e2c:	f7ff fc74 	bl	8015718 <xTaskGetSchedulerState>
 8015e30:	4603      	mov	r3, r0
 8015e32:	2b02      	cmp	r3, #2
 8015e34:	d109      	bne.n	8015e4a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015e36:	4b11      	ldr	r3, [pc, #68]	; (8015e7c <xTimerGenericCommand+0x98>)
 8015e38:	6818      	ldr	r0, [r3, #0]
 8015e3a:	f107 0110 	add.w	r1, r7, #16
 8015e3e:	2300      	movs	r3, #0
 8015e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015e42:	f7fd fdcb 	bl	80139dc <xQueueGenericSend>
 8015e46:	6278      	str	r0, [r7, #36]	; 0x24
 8015e48:	e012      	b.n	8015e70 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015e4a:	4b0c      	ldr	r3, [pc, #48]	; (8015e7c <xTimerGenericCommand+0x98>)
 8015e4c:	6818      	ldr	r0, [r3, #0]
 8015e4e:	f107 0110 	add.w	r1, r7, #16
 8015e52:	2300      	movs	r3, #0
 8015e54:	2200      	movs	r2, #0
 8015e56:	f7fd fdc1 	bl	80139dc <xQueueGenericSend>
 8015e5a:	6278      	str	r0, [r7, #36]	; 0x24
 8015e5c:	e008      	b.n	8015e70 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015e5e:	4b07      	ldr	r3, [pc, #28]	; (8015e7c <xTimerGenericCommand+0x98>)
 8015e60:	6818      	ldr	r0, [r3, #0]
 8015e62:	f107 0110 	add.w	r1, r7, #16
 8015e66:	2300      	movs	r3, #0
 8015e68:	683a      	ldr	r2, [r7, #0]
 8015e6a:	f7fd feb5 	bl	8013bd8 <xQueueGenericSendFromISR>
 8015e6e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8015e72:	4618      	mov	r0, r3
 8015e74:	3728      	adds	r7, #40	; 0x28
 8015e76:	46bd      	mov	sp, r7
 8015e78:	bd80      	pop	{r7, pc}
 8015e7a:	bf00      	nop
 8015e7c:	200034a8 	.word	0x200034a8

08015e80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015e80:	b580      	push	{r7, lr}
 8015e82:	b088      	sub	sp, #32
 8015e84:	af02      	add	r7, sp, #8
 8015e86:	6078      	str	r0, [r7, #4]
 8015e88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015e8a:	4b22      	ldr	r3, [pc, #136]	; (8015f14 <prvProcessExpiredTimer+0x94>)
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	68db      	ldr	r3, [r3, #12]
 8015e90:	68db      	ldr	r3, [r3, #12]
 8015e92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015e94:	697b      	ldr	r3, [r7, #20]
 8015e96:	3304      	adds	r3, #4
 8015e98:	4618      	mov	r0, r3
 8015e9a:	f7fd fbcd 	bl	8013638 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015e9e:	697b      	ldr	r3, [r7, #20]
 8015ea0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015ea4:	f003 0304 	and.w	r3, r3, #4
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d022      	beq.n	8015ef2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015eac:	697b      	ldr	r3, [r7, #20]
 8015eae:	699a      	ldr	r2, [r3, #24]
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	18d1      	adds	r1, r2, r3
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	683a      	ldr	r2, [r7, #0]
 8015eb8:	6978      	ldr	r0, [r7, #20]
 8015eba:	f000 f8d1 	bl	8016060 <prvInsertTimerInActiveList>
 8015ebe:	4603      	mov	r3, r0
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d01f      	beq.n	8015f04 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	9300      	str	r3, [sp, #0]
 8015ec8:	2300      	movs	r3, #0
 8015eca:	687a      	ldr	r2, [r7, #4]
 8015ecc:	2100      	movs	r1, #0
 8015ece:	6978      	ldr	r0, [r7, #20]
 8015ed0:	f7ff ff88 	bl	8015de4 <xTimerGenericCommand>
 8015ed4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8015ed6:	693b      	ldr	r3, [r7, #16]
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d113      	bne.n	8015f04 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015edc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ee0:	f383 8811 	msr	BASEPRI, r3
 8015ee4:	f3bf 8f6f 	isb	sy
 8015ee8:	f3bf 8f4f 	dsb	sy
 8015eec:	60fb      	str	r3, [r7, #12]
}
 8015eee:	bf00      	nop
 8015ef0:	e7fe      	b.n	8015ef0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015ef2:	697b      	ldr	r3, [r7, #20]
 8015ef4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015ef8:	f023 0301 	bic.w	r3, r3, #1
 8015efc:	b2da      	uxtb	r2, r3
 8015efe:	697b      	ldr	r3, [r7, #20]
 8015f00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015f04:	697b      	ldr	r3, [r7, #20]
 8015f06:	6a1b      	ldr	r3, [r3, #32]
 8015f08:	6978      	ldr	r0, [r7, #20]
 8015f0a:	4798      	blx	r3
}
 8015f0c:	bf00      	nop
 8015f0e:	3718      	adds	r7, #24
 8015f10:	46bd      	mov	sp, r7
 8015f12:	bd80      	pop	{r7, pc}
 8015f14:	200034a0 	.word	0x200034a0

08015f18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8015f18:	b580      	push	{r7, lr}
 8015f1a:	b084      	sub	sp, #16
 8015f1c:	af00      	add	r7, sp, #0
 8015f1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015f20:	f107 0308 	add.w	r3, r7, #8
 8015f24:	4618      	mov	r0, r3
 8015f26:	f000 f857 	bl	8015fd8 <prvGetNextExpireTime>
 8015f2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015f2c:	68bb      	ldr	r3, [r7, #8]
 8015f2e:	4619      	mov	r1, r3
 8015f30:	68f8      	ldr	r0, [r7, #12]
 8015f32:	f000 f803 	bl	8015f3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015f36:	f000 f8d5 	bl	80160e4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015f3a:	e7f1      	b.n	8015f20 <prvTimerTask+0x8>

08015f3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015f3c:	b580      	push	{r7, lr}
 8015f3e:	b084      	sub	sp, #16
 8015f40:	af00      	add	r7, sp, #0
 8015f42:	6078      	str	r0, [r7, #4]
 8015f44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015f46:	f7fe fe79 	bl	8014c3c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015f4a:	f107 0308 	add.w	r3, r7, #8
 8015f4e:	4618      	mov	r0, r3
 8015f50:	f000 f866 	bl	8016020 <prvSampleTimeNow>
 8015f54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015f56:	68bb      	ldr	r3, [r7, #8]
 8015f58:	2b00      	cmp	r3, #0
 8015f5a:	d130      	bne.n	8015fbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015f5c:	683b      	ldr	r3, [r7, #0]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d10a      	bne.n	8015f78 <prvProcessTimerOrBlockTask+0x3c>
 8015f62:	687a      	ldr	r2, [r7, #4]
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	429a      	cmp	r2, r3
 8015f68:	d806      	bhi.n	8015f78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015f6a:	f7fe fe75 	bl	8014c58 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015f6e:	68f9      	ldr	r1, [r7, #12]
 8015f70:	6878      	ldr	r0, [r7, #4]
 8015f72:	f7ff ff85 	bl	8015e80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015f76:	e024      	b.n	8015fc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015f78:	683b      	ldr	r3, [r7, #0]
 8015f7a:	2b00      	cmp	r3, #0
 8015f7c:	d008      	beq.n	8015f90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015f7e:	4b13      	ldr	r3, [pc, #76]	; (8015fcc <prvProcessTimerOrBlockTask+0x90>)
 8015f80:	681b      	ldr	r3, [r3, #0]
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d101      	bne.n	8015f8c <prvProcessTimerOrBlockTask+0x50>
 8015f88:	2301      	movs	r3, #1
 8015f8a:	e000      	b.n	8015f8e <prvProcessTimerOrBlockTask+0x52>
 8015f8c:	2300      	movs	r3, #0
 8015f8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015f90:	4b0f      	ldr	r3, [pc, #60]	; (8015fd0 <prvProcessTimerOrBlockTask+0x94>)
 8015f92:	6818      	ldr	r0, [r3, #0]
 8015f94:	687a      	ldr	r2, [r7, #4]
 8015f96:	68fb      	ldr	r3, [r7, #12]
 8015f98:	1ad3      	subs	r3, r2, r3
 8015f9a:	683a      	ldr	r2, [r7, #0]
 8015f9c:	4619      	mov	r1, r3
 8015f9e:	f7fe fb4f 	bl	8014640 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8015fa2:	f7fe fe59 	bl	8014c58 <xTaskResumeAll>
 8015fa6:	4603      	mov	r3, r0
 8015fa8:	2b00      	cmp	r3, #0
 8015faa:	d10a      	bne.n	8015fc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015fac:	4b09      	ldr	r3, [pc, #36]	; (8015fd4 <prvProcessTimerOrBlockTask+0x98>)
 8015fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015fb2:	601a      	str	r2, [r3, #0]
 8015fb4:	f3bf 8f4f 	dsb	sy
 8015fb8:	f3bf 8f6f 	isb	sy
}
 8015fbc:	e001      	b.n	8015fc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015fbe:	f7fe fe4b 	bl	8014c58 <xTaskResumeAll>
}
 8015fc2:	bf00      	nop
 8015fc4:	3710      	adds	r7, #16
 8015fc6:	46bd      	mov	sp, r7
 8015fc8:	bd80      	pop	{r7, pc}
 8015fca:	bf00      	nop
 8015fcc:	200034a4 	.word	0x200034a4
 8015fd0:	200034a8 	.word	0x200034a8
 8015fd4:	e000ed04 	.word	0xe000ed04

08015fd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015fd8:	b480      	push	{r7}
 8015fda:	b085      	sub	sp, #20
 8015fdc:	af00      	add	r7, sp, #0
 8015fde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015fe0:	4b0e      	ldr	r3, [pc, #56]	; (801601c <prvGetNextExpireTime+0x44>)
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	2b00      	cmp	r3, #0
 8015fe8:	d101      	bne.n	8015fee <prvGetNextExpireTime+0x16>
 8015fea:	2201      	movs	r2, #1
 8015fec:	e000      	b.n	8015ff0 <prvGetNextExpireTime+0x18>
 8015fee:	2200      	movs	r2, #0
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d105      	bne.n	8016008 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015ffc:	4b07      	ldr	r3, [pc, #28]	; (801601c <prvGetNextExpireTime+0x44>)
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	68db      	ldr	r3, [r3, #12]
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	60fb      	str	r3, [r7, #12]
 8016006:	e001      	b.n	801600c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8016008:	2300      	movs	r3, #0
 801600a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801600c:	68fb      	ldr	r3, [r7, #12]
}
 801600e:	4618      	mov	r0, r3
 8016010:	3714      	adds	r7, #20
 8016012:	46bd      	mov	sp, r7
 8016014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016018:	4770      	bx	lr
 801601a:	bf00      	nop
 801601c:	200034a0 	.word	0x200034a0

08016020 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8016020:	b580      	push	{r7, lr}
 8016022:	b084      	sub	sp, #16
 8016024:	af00      	add	r7, sp, #0
 8016026:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8016028:	f7fe feb4 	bl	8014d94 <xTaskGetTickCount>
 801602c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801602e:	4b0b      	ldr	r3, [pc, #44]	; (801605c <prvSampleTimeNow+0x3c>)
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	68fa      	ldr	r2, [r7, #12]
 8016034:	429a      	cmp	r2, r3
 8016036:	d205      	bcs.n	8016044 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8016038:	f000 f936 	bl	80162a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	2201      	movs	r2, #1
 8016040:	601a      	str	r2, [r3, #0]
 8016042:	e002      	b.n	801604a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	2200      	movs	r2, #0
 8016048:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801604a:	4a04      	ldr	r2, [pc, #16]	; (801605c <prvSampleTimeNow+0x3c>)
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8016050:	68fb      	ldr	r3, [r7, #12]
}
 8016052:	4618      	mov	r0, r3
 8016054:	3710      	adds	r7, #16
 8016056:	46bd      	mov	sp, r7
 8016058:	bd80      	pop	{r7, pc}
 801605a:	bf00      	nop
 801605c:	200034b0 	.word	0x200034b0

08016060 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8016060:	b580      	push	{r7, lr}
 8016062:	b086      	sub	sp, #24
 8016064:	af00      	add	r7, sp, #0
 8016066:	60f8      	str	r0, [r7, #12]
 8016068:	60b9      	str	r1, [r7, #8]
 801606a:	607a      	str	r2, [r7, #4]
 801606c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801606e:	2300      	movs	r3, #0
 8016070:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8016072:	68fb      	ldr	r3, [r7, #12]
 8016074:	68ba      	ldr	r2, [r7, #8]
 8016076:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	68fa      	ldr	r2, [r7, #12]
 801607c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801607e:	68ba      	ldr	r2, [r7, #8]
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	429a      	cmp	r2, r3
 8016084:	d812      	bhi.n	80160ac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8016086:	687a      	ldr	r2, [r7, #4]
 8016088:	683b      	ldr	r3, [r7, #0]
 801608a:	1ad2      	subs	r2, r2, r3
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	699b      	ldr	r3, [r3, #24]
 8016090:	429a      	cmp	r2, r3
 8016092:	d302      	bcc.n	801609a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8016094:	2301      	movs	r3, #1
 8016096:	617b      	str	r3, [r7, #20]
 8016098:	e01b      	b.n	80160d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801609a:	4b10      	ldr	r3, [pc, #64]	; (80160dc <prvInsertTimerInActiveList+0x7c>)
 801609c:	681a      	ldr	r2, [r3, #0]
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	3304      	adds	r3, #4
 80160a2:	4619      	mov	r1, r3
 80160a4:	4610      	mov	r0, r2
 80160a6:	f7fd fa8e 	bl	80135c6 <vListInsert>
 80160aa:	e012      	b.n	80160d2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80160ac:	687a      	ldr	r2, [r7, #4]
 80160ae:	683b      	ldr	r3, [r7, #0]
 80160b0:	429a      	cmp	r2, r3
 80160b2:	d206      	bcs.n	80160c2 <prvInsertTimerInActiveList+0x62>
 80160b4:	68ba      	ldr	r2, [r7, #8]
 80160b6:	683b      	ldr	r3, [r7, #0]
 80160b8:	429a      	cmp	r2, r3
 80160ba:	d302      	bcc.n	80160c2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80160bc:	2301      	movs	r3, #1
 80160be:	617b      	str	r3, [r7, #20]
 80160c0:	e007      	b.n	80160d2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80160c2:	4b07      	ldr	r3, [pc, #28]	; (80160e0 <prvInsertTimerInActiveList+0x80>)
 80160c4:	681a      	ldr	r2, [r3, #0]
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	3304      	adds	r3, #4
 80160ca:	4619      	mov	r1, r3
 80160cc:	4610      	mov	r0, r2
 80160ce:	f7fd fa7a 	bl	80135c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80160d2:	697b      	ldr	r3, [r7, #20]
}
 80160d4:	4618      	mov	r0, r3
 80160d6:	3718      	adds	r7, #24
 80160d8:	46bd      	mov	sp, r7
 80160da:	bd80      	pop	{r7, pc}
 80160dc:	200034a4 	.word	0x200034a4
 80160e0:	200034a0 	.word	0x200034a0

080160e4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80160e4:	b580      	push	{r7, lr}
 80160e6:	b08e      	sub	sp, #56	; 0x38
 80160e8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80160ea:	e0ca      	b.n	8016282 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	2b00      	cmp	r3, #0
 80160f0:	da18      	bge.n	8016124 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80160f2:	1d3b      	adds	r3, r7, #4
 80160f4:	3304      	adds	r3, #4
 80160f6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80160f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	d10a      	bne.n	8016114 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80160fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016102:	f383 8811 	msr	BASEPRI, r3
 8016106:	f3bf 8f6f 	isb	sy
 801610a:	f3bf 8f4f 	dsb	sy
 801610e:	61fb      	str	r3, [r7, #28]
}
 8016110:	bf00      	nop
 8016112:	e7fe      	b.n	8016112 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8016114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016116:	681b      	ldr	r3, [r3, #0]
 8016118:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801611a:	6850      	ldr	r0, [r2, #4]
 801611c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801611e:	6892      	ldr	r2, [r2, #8]
 8016120:	4611      	mov	r1, r2
 8016122:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	2b00      	cmp	r3, #0
 8016128:	f2c0 80aa 	blt.w	8016280 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8016130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016132:	695b      	ldr	r3, [r3, #20]
 8016134:	2b00      	cmp	r3, #0
 8016136:	d004      	beq.n	8016142 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8016138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801613a:	3304      	adds	r3, #4
 801613c:	4618      	mov	r0, r3
 801613e:	f7fd fa7b 	bl	8013638 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8016142:	463b      	mov	r3, r7
 8016144:	4618      	mov	r0, r3
 8016146:	f7ff ff6b 	bl	8016020 <prvSampleTimeNow>
 801614a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	2b09      	cmp	r3, #9
 8016150:	f200 8097 	bhi.w	8016282 <prvProcessReceivedCommands+0x19e>
 8016154:	a201      	add	r2, pc, #4	; (adr r2, 801615c <prvProcessReceivedCommands+0x78>)
 8016156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801615a:	bf00      	nop
 801615c:	08016185 	.word	0x08016185
 8016160:	08016185 	.word	0x08016185
 8016164:	08016185 	.word	0x08016185
 8016168:	080161f9 	.word	0x080161f9
 801616c:	0801620d 	.word	0x0801620d
 8016170:	08016257 	.word	0x08016257
 8016174:	08016185 	.word	0x08016185
 8016178:	08016185 	.word	0x08016185
 801617c:	080161f9 	.word	0x080161f9
 8016180:	0801620d 	.word	0x0801620d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8016184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016186:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801618a:	f043 0301 	orr.w	r3, r3, #1
 801618e:	b2da      	uxtb	r2, r3
 8016190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016192:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8016196:	68ba      	ldr	r2, [r7, #8]
 8016198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801619a:	699b      	ldr	r3, [r3, #24]
 801619c:	18d1      	adds	r1, r2, r3
 801619e:	68bb      	ldr	r3, [r7, #8]
 80161a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80161a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80161a4:	f7ff ff5c 	bl	8016060 <prvInsertTimerInActiveList>
 80161a8:	4603      	mov	r3, r0
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d069      	beq.n	8016282 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80161ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161b0:	6a1b      	ldr	r3, [r3, #32]
 80161b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80161b4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80161b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80161bc:	f003 0304 	and.w	r3, r3, #4
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d05e      	beq.n	8016282 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80161c4:	68ba      	ldr	r2, [r7, #8]
 80161c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161c8:	699b      	ldr	r3, [r3, #24]
 80161ca:	441a      	add	r2, r3
 80161cc:	2300      	movs	r3, #0
 80161ce:	9300      	str	r3, [sp, #0]
 80161d0:	2300      	movs	r3, #0
 80161d2:	2100      	movs	r1, #0
 80161d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80161d6:	f7ff fe05 	bl	8015de4 <xTimerGenericCommand>
 80161da:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80161dc:	6a3b      	ldr	r3, [r7, #32]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d14f      	bne.n	8016282 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80161e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80161e6:	f383 8811 	msr	BASEPRI, r3
 80161ea:	f3bf 8f6f 	isb	sy
 80161ee:	f3bf 8f4f 	dsb	sy
 80161f2:	61bb      	str	r3, [r7, #24]
}
 80161f4:	bf00      	nop
 80161f6:	e7fe      	b.n	80161f6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80161f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80161fe:	f023 0301 	bic.w	r3, r3, #1
 8016202:	b2da      	uxtb	r2, r3
 8016204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016206:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801620a:	e03a      	b.n	8016282 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801620e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016212:	f043 0301 	orr.w	r3, r3, #1
 8016216:	b2da      	uxtb	r2, r3
 8016218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801621a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801621e:	68ba      	ldr	r2, [r7, #8]
 8016220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016222:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8016224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016226:	699b      	ldr	r3, [r3, #24]
 8016228:	2b00      	cmp	r3, #0
 801622a:	d10a      	bne.n	8016242 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801622c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016230:	f383 8811 	msr	BASEPRI, r3
 8016234:	f3bf 8f6f 	isb	sy
 8016238:	f3bf 8f4f 	dsb	sy
 801623c:	617b      	str	r3, [r7, #20]
}
 801623e:	bf00      	nop
 8016240:	e7fe      	b.n	8016240 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8016242:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016244:	699a      	ldr	r2, [r3, #24]
 8016246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016248:	18d1      	adds	r1, r2, r3
 801624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801624c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801624e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016250:	f7ff ff06 	bl	8016060 <prvInsertTimerInActiveList>
					break;
 8016254:	e015      	b.n	8016282 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8016256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801625c:	f003 0302 	and.w	r3, r3, #2
 8016260:	2b00      	cmp	r3, #0
 8016262:	d103      	bne.n	801626c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8016264:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016266:	f000 fbdb 	bl	8016a20 <vPortFree>
 801626a:	e00a      	b.n	8016282 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801626c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801626e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016272:	f023 0301 	bic.w	r3, r3, #1
 8016276:	b2da      	uxtb	r2, r3
 8016278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801627a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801627e:	e000      	b.n	8016282 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8016280:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8016282:	4b08      	ldr	r3, [pc, #32]	; (80162a4 <prvProcessReceivedCommands+0x1c0>)
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	1d39      	adds	r1, r7, #4
 8016288:	2200      	movs	r2, #0
 801628a:	4618      	mov	r0, r3
 801628c:	f7fd fdcc 	bl	8013e28 <xQueueReceive>
 8016290:	4603      	mov	r3, r0
 8016292:	2b00      	cmp	r3, #0
 8016294:	f47f af2a 	bne.w	80160ec <prvProcessReceivedCommands+0x8>
	}
}
 8016298:	bf00      	nop
 801629a:	bf00      	nop
 801629c:	3730      	adds	r7, #48	; 0x30
 801629e:	46bd      	mov	sp, r7
 80162a0:	bd80      	pop	{r7, pc}
 80162a2:	bf00      	nop
 80162a4:	200034a8 	.word	0x200034a8

080162a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80162a8:	b580      	push	{r7, lr}
 80162aa:	b088      	sub	sp, #32
 80162ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80162ae:	e048      	b.n	8016342 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80162b0:	4b2d      	ldr	r3, [pc, #180]	; (8016368 <prvSwitchTimerLists+0xc0>)
 80162b2:	681b      	ldr	r3, [r3, #0]
 80162b4:	68db      	ldr	r3, [r3, #12]
 80162b6:	681b      	ldr	r3, [r3, #0]
 80162b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80162ba:	4b2b      	ldr	r3, [pc, #172]	; (8016368 <prvSwitchTimerLists+0xc0>)
 80162bc:	681b      	ldr	r3, [r3, #0]
 80162be:	68db      	ldr	r3, [r3, #12]
 80162c0:	68db      	ldr	r3, [r3, #12]
 80162c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80162c4:	68fb      	ldr	r3, [r7, #12]
 80162c6:	3304      	adds	r3, #4
 80162c8:	4618      	mov	r0, r3
 80162ca:	f7fd f9b5 	bl	8013638 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	6a1b      	ldr	r3, [r3, #32]
 80162d2:	68f8      	ldr	r0, [r7, #12]
 80162d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80162d6:	68fb      	ldr	r3, [r7, #12]
 80162d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80162dc:	f003 0304 	and.w	r3, r3, #4
 80162e0:	2b00      	cmp	r3, #0
 80162e2:	d02e      	beq.n	8016342 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	699b      	ldr	r3, [r3, #24]
 80162e8:	693a      	ldr	r2, [r7, #16]
 80162ea:	4413      	add	r3, r2
 80162ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80162ee:	68ba      	ldr	r2, [r7, #8]
 80162f0:	693b      	ldr	r3, [r7, #16]
 80162f2:	429a      	cmp	r2, r3
 80162f4:	d90e      	bls.n	8016314 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80162f6:	68fb      	ldr	r3, [r7, #12]
 80162f8:	68ba      	ldr	r2, [r7, #8]
 80162fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80162fc:	68fb      	ldr	r3, [r7, #12]
 80162fe:	68fa      	ldr	r2, [r7, #12]
 8016300:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8016302:	4b19      	ldr	r3, [pc, #100]	; (8016368 <prvSwitchTimerLists+0xc0>)
 8016304:	681a      	ldr	r2, [r3, #0]
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	3304      	adds	r3, #4
 801630a:	4619      	mov	r1, r3
 801630c:	4610      	mov	r0, r2
 801630e:	f7fd f95a 	bl	80135c6 <vListInsert>
 8016312:	e016      	b.n	8016342 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8016314:	2300      	movs	r3, #0
 8016316:	9300      	str	r3, [sp, #0]
 8016318:	2300      	movs	r3, #0
 801631a:	693a      	ldr	r2, [r7, #16]
 801631c:	2100      	movs	r1, #0
 801631e:	68f8      	ldr	r0, [r7, #12]
 8016320:	f7ff fd60 	bl	8015de4 <xTimerGenericCommand>
 8016324:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	2b00      	cmp	r3, #0
 801632a:	d10a      	bne.n	8016342 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801632c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016330:	f383 8811 	msr	BASEPRI, r3
 8016334:	f3bf 8f6f 	isb	sy
 8016338:	f3bf 8f4f 	dsb	sy
 801633c:	603b      	str	r3, [r7, #0]
}
 801633e:	bf00      	nop
 8016340:	e7fe      	b.n	8016340 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8016342:	4b09      	ldr	r3, [pc, #36]	; (8016368 <prvSwitchTimerLists+0xc0>)
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	2b00      	cmp	r3, #0
 801634a:	d1b1      	bne.n	80162b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801634c:	4b06      	ldr	r3, [pc, #24]	; (8016368 <prvSwitchTimerLists+0xc0>)
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8016352:	4b06      	ldr	r3, [pc, #24]	; (801636c <prvSwitchTimerLists+0xc4>)
 8016354:	681b      	ldr	r3, [r3, #0]
 8016356:	4a04      	ldr	r2, [pc, #16]	; (8016368 <prvSwitchTimerLists+0xc0>)
 8016358:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801635a:	4a04      	ldr	r2, [pc, #16]	; (801636c <prvSwitchTimerLists+0xc4>)
 801635c:	697b      	ldr	r3, [r7, #20]
 801635e:	6013      	str	r3, [r2, #0]
}
 8016360:	bf00      	nop
 8016362:	3718      	adds	r7, #24
 8016364:	46bd      	mov	sp, r7
 8016366:	bd80      	pop	{r7, pc}
 8016368:	200034a0 	.word	0x200034a0
 801636c:	200034a4 	.word	0x200034a4

08016370 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8016370:	b580      	push	{r7, lr}
 8016372:	b082      	sub	sp, #8
 8016374:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8016376:	f000 f965 	bl	8016644 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801637a:	4b15      	ldr	r3, [pc, #84]	; (80163d0 <prvCheckForValidListAndQueue+0x60>)
 801637c:	681b      	ldr	r3, [r3, #0]
 801637e:	2b00      	cmp	r3, #0
 8016380:	d120      	bne.n	80163c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8016382:	4814      	ldr	r0, [pc, #80]	; (80163d4 <prvCheckForValidListAndQueue+0x64>)
 8016384:	f7fd f8ce 	bl	8013524 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8016388:	4813      	ldr	r0, [pc, #76]	; (80163d8 <prvCheckForValidListAndQueue+0x68>)
 801638a:	f7fd f8cb 	bl	8013524 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801638e:	4b13      	ldr	r3, [pc, #76]	; (80163dc <prvCheckForValidListAndQueue+0x6c>)
 8016390:	4a10      	ldr	r2, [pc, #64]	; (80163d4 <prvCheckForValidListAndQueue+0x64>)
 8016392:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8016394:	4b12      	ldr	r3, [pc, #72]	; (80163e0 <prvCheckForValidListAndQueue+0x70>)
 8016396:	4a10      	ldr	r2, [pc, #64]	; (80163d8 <prvCheckForValidListAndQueue+0x68>)
 8016398:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801639a:	2300      	movs	r3, #0
 801639c:	9300      	str	r3, [sp, #0]
 801639e:	4b11      	ldr	r3, [pc, #68]	; (80163e4 <prvCheckForValidListAndQueue+0x74>)
 80163a0:	4a11      	ldr	r2, [pc, #68]	; (80163e8 <prvCheckForValidListAndQueue+0x78>)
 80163a2:	2110      	movs	r1, #16
 80163a4:	200a      	movs	r0, #10
 80163a6:	f7fd f9d9 	bl	801375c <xQueueGenericCreateStatic>
 80163aa:	4603      	mov	r3, r0
 80163ac:	4a08      	ldr	r2, [pc, #32]	; (80163d0 <prvCheckForValidListAndQueue+0x60>)
 80163ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80163b0:	4b07      	ldr	r3, [pc, #28]	; (80163d0 <prvCheckForValidListAndQueue+0x60>)
 80163b2:	681b      	ldr	r3, [r3, #0]
 80163b4:	2b00      	cmp	r3, #0
 80163b6:	d005      	beq.n	80163c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80163b8:	4b05      	ldr	r3, [pc, #20]	; (80163d0 <prvCheckForValidListAndQueue+0x60>)
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	490b      	ldr	r1, [pc, #44]	; (80163ec <prvCheckForValidListAndQueue+0x7c>)
 80163be:	4618      	mov	r0, r3
 80163c0:	f7fe f8ea 	bl	8014598 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80163c4:	f000 f96e 	bl	80166a4 <vPortExitCritical>
}
 80163c8:	bf00      	nop
 80163ca:	46bd      	mov	sp, r7
 80163cc:	bd80      	pop	{r7, pc}
 80163ce:	bf00      	nop
 80163d0:	200034a8 	.word	0x200034a8
 80163d4:	20003478 	.word	0x20003478
 80163d8:	2000348c 	.word	0x2000348c
 80163dc:	200034a0 	.word	0x200034a0
 80163e0:	200034a4 	.word	0x200034a4
 80163e4:	20003554 	.word	0x20003554
 80163e8:	200034b4 	.word	0x200034b4
 80163ec:	0801ad50 	.word	0x0801ad50

080163f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80163f0:	b480      	push	{r7}
 80163f2:	b085      	sub	sp, #20
 80163f4:	af00      	add	r7, sp, #0
 80163f6:	60f8      	str	r0, [r7, #12]
 80163f8:	60b9      	str	r1, [r7, #8]
 80163fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	3b04      	subs	r3, #4
 8016400:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8016402:	68fb      	ldr	r3, [r7, #12]
 8016404:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8016408:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	3b04      	subs	r3, #4
 801640e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8016410:	68bb      	ldr	r3, [r7, #8]
 8016412:	f023 0201 	bic.w	r2, r3, #1
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	3b04      	subs	r3, #4
 801641e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8016420:	4a0c      	ldr	r2, [pc, #48]	; (8016454 <pxPortInitialiseStack+0x64>)
 8016422:	68fb      	ldr	r3, [r7, #12]
 8016424:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	3b14      	subs	r3, #20
 801642a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801642c:	687a      	ldr	r2, [r7, #4]
 801642e:	68fb      	ldr	r3, [r7, #12]
 8016430:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8016432:	68fb      	ldr	r3, [r7, #12]
 8016434:	3b04      	subs	r3, #4
 8016436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8016438:	68fb      	ldr	r3, [r7, #12]
 801643a:	f06f 0202 	mvn.w	r2, #2
 801643e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	3b20      	subs	r3, #32
 8016444:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8016446:	68fb      	ldr	r3, [r7, #12]
}
 8016448:	4618      	mov	r0, r3
 801644a:	3714      	adds	r7, #20
 801644c:	46bd      	mov	sp, r7
 801644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016452:	4770      	bx	lr
 8016454:	08016459 	.word	0x08016459

08016458 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8016458:	b480      	push	{r7}
 801645a:	b085      	sub	sp, #20
 801645c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801645e:	2300      	movs	r3, #0
 8016460:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8016462:	4b12      	ldr	r3, [pc, #72]	; (80164ac <prvTaskExitError+0x54>)
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801646a:	d00a      	beq.n	8016482 <prvTaskExitError+0x2a>
	__asm volatile
 801646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016470:	f383 8811 	msr	BASEPRI, r3
 8016474:	f3bf 8f6f 	isb	sy
 8016478:	f3bf 8f4f 	dsb	sy
 801647c:	60fb      	str	r3, [r7, #12]
}
 801647e:	bf00      	nop
 8016480:	e7fe      	b.n	8016480 <prvTaskExitError+0x28>
	__asm volatile
 8016482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016486:	f383 8811 	msr	BASEPRI, r3
 801648a:	f3bf 8f6f 	isb	sy
 801648e:	f3bf 8f4f 	dsb	sy
 8016492:	60bb      	str	r3, [r7, #8]
}
 8016494:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8016496:	bf00      	nop
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	2b00      	cmp	r3, #0
 801649c:	d0fc      	beq.n	8016498 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801649e:	bf00      	nop
 80164a0:	bf00      	nop
 80164a2:	3714      	adds	r7, #20
 80164a4:	46bd      	mov	sp, r7
 80164a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164aa:	4770      	bx	lr
 80164ac:	20000160 	.word	0x20000160

080164b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80164b0:	4b07      	ldr	r3, [pc, #28]	; (80164d0 <pxCurrentTCBConst2>)
 80164b2:	6819      	ldr	r1, [r3, #0]
 80164b4:	6808      	ldr	r0, [r1, #0]
 80164b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80164ba:	f380 8809 	msr	PSP, r0
 80164be:	f3bf 8f6f 	isb	sy
 80164c2:	f04f 0000 	mov.w	r0, #0
 80164c6:	f380 8811 	msr	BASEPRI, r0
 80164ca:	4770      	bx	lr
 80164cc:	f3af 8000 	nop.w

080164d0 <pxCurrentTCBConst2>:
 80164d0:	20002f70 	.word	0x20002f70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80164d4:	bf00      	nop
 80164d6:	bf00      	nop

080164d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80164d8:	4808      	ldr	r0, [pc, #32]	; (80164fc <prvPortStartFirstTask+0x24>)
 80164da:	6800      	ldr	r0, [r0, #0]
 80164dc:	6800      	ldr	r0, [r0, #0]
 80164de:	f380 8808 	msr	MSP, r0
 80164e2:	f04f 0000 	mov.w	r0, #0
 80164e6:	f380 8814 	msr	CONTROL, r0
 80164ea:	b662      	cpsie	i
 80164ec:	b661      	cpsie	f
 80164ee:	f3bf 8f4f 	dsb	sy
 80164f2:	f3bf 8f6f 	isb	sy
 80164f6:	df00      	svc	0
 80164f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80164fa:	bf00      	nop
 80164fc:	e000ed08 	.word	0xe000ed08

08016500 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8016500:	b580      	push	{r7, lr}
 8016502:	b086      	sub	sp, #24
 8016504:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8016506:	4b46      	ldr	r3, [pc, #280]	; (8016620 <xPortStartScheduler+0x120>)
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	4a46      	ldr	r2, [pc, #280]	; (8016624 <xPortStartScheduler+0x124>)
 801650c:	4293      	cmp	r3, r2
 801650e:	d10a      	bne.n	8016526 <xPortStartScheduler+0x26>
	__asm volatile
 8016510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016514:	f383 8811 	msr	BASEPRI, r3
 8016518:	f3bf 8f6f 	isb	sy
 801651c:	f3bf 8f4f 	dsb	sy
 8016520:	613b      	str	r3, [r7, #16]
}
 8016522:	bf00      	nop
 8016524:	e7fe      	b.n	8016524 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8016526:	4b3e      	ldr	r3, [pc, #248]	; (8016620 <xPortStartScheduler+0x120>)
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	4a3f      	ldr	r2, [pc, #252]	; (8016628 <xPortStartScheduler+0x128>)
 801652c:	4293      	cmp	r3, r2
 801652e:	d10a      	bne.n	8016546 <xPortStartScheduler+0x46>
	__asm volatile
 8016530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016534:	f383 8811 	msr	BASEPRI, r3
 8016538:	f3bf 8f6f 	isb	sy
 801653c:	f3bf 8f4f 	dsb	sy
 8016540:	60fb      	str	r3, [r7, #12]
}
 8016542:	bf00      	nop
 8016544:	e7fe      	b.n	8016544 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8016546:	4b39      	ldr	r3, [pc, #228]	; (801662c <xPortStartScheduler+0x12c>)
 8016548:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801654a:	697b      	ldr	r3, [r7, #20]
 801654c:	781b      	ldrb	r3, [r3, #0]
 801654e:	b2db      	uxtb	r3, r3
 8016550:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8016552:	697b      	ldr	r3, [r7, #20]
 8016554:	22ff      	movs	r2, #255	; 0xff
 8016556:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8016558:	697b      	ldr	r3, [r7, #20]
 801655a:	781b      	ldrb	r3, [r3, #0]
 801655c:	b2db      	uxtb	r3, r3
 801655e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8016560:	78fb      	ldrb	r3, [r7, #3]
 8016562:	b2db      	uxtb	r3, r3
 8016564:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8016568:	b2da      	uxtb	r2, r3
 801656a:	4b31      	ldr	r3, [pc, #196]	; (8016630 <xPortStartScheduler+0x130>)
 801656c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801656e:	4b31      	ldr	r3, [pc, #196]	; (8016634 <xPortStartScheduler+0x134>)
 8016570:	2207      	movs	r2, #7
 8016572:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8016574:	e009      	b.n	801658a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8016576:	4b2f      	ldr	r3, [pc, #188]	; (8016634 <xPortStartScheduler+0x134>)
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	3b01      	subs	r3, #1
 801657c:	4a2d      	ldr	r2, [pc, #180]	; (8016634 <xPortStartScheduler+0x134>)
 801657e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8016580:	78fb      	ldrb	r3, [r7, #3]
 8016582:	b2db      	uxtb	r3, r3
 8016584:	005b      	lsls	r3, r3, #1
 8016586:	b2db      	uxtb	r3, r3
 8016588:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801658a:	78fb      	ldrb	r3, [r7, #3]
 801658c:	b2db      	uxtb	r3, r3
 801658e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016592:	2b80      	cmp	r3, #128	; 0x80
 8016594:	d0ef      	beq.n	8016576 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8016596:	4b27      	ldr	r3, [pc, #156]	; (8016634 <xPortStartScheduler+0x134>)
 8016598:	681b      	ldr	r3, [r3, #0]
 801659a:	f1c3 0307 	rsb	r3, r3, #7
 801659e:	2b04      	cmp	r3, #4
 80165a0:	d00a      	beq.n	80165b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80165a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80165a6:	f383 8811 	msr	BASEPRI, r3
 80165aa:	f3bf 8f6f 	isb	sy
 80165ae:	f3bf 8f4f 	dsb	sy
 80165b2:	60bb      	str	r3, [r7, #8]
}
 80165b4:	bf00      	nop
 80165b6:	e7fe      	b.n	80165b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80165b8:	4b1e      	ldr	r3, [pc, #120]	; (8016634 <xPortStartScheduler+0x134>)
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	021b      	lsls	r3, r3, #8
 80165be:	4a1d      	ldr	r2, [pc, #116]	; (8016634 <xPortStartScheduler+0x134>)
 80165c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80165c2:	4b1c      	ldr	r3, [pc, #112]	; (8016634 <xPortStartScheduler+0x134>)
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80165ca:	4a1a      	ldr	r2, [pc, #104]	; (8016634 <xPortStartScheduler+0x134>)
 80165cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80165ce:	687b      	ldr	r3, [r7, #4]
 80165d0:	b2da      	uxtb	r2, r3
 80165d2:	697b      	ldr	r3, [r7, #20]
 80165d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80165d6:	4b18      	ldr	r3, [pc, #96]	; (8016638 <xPortStartScheduler+0x138>)
 80165d8:	681b      	ldr	r3, [r3, #0]
 80165da:	4a17      	ldr	r2, [pc, #92]	; (8016638 <xPortStartScheduler+0x138>)
 80165dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80165e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80165e2:	4b15      	ldr	r3, [pc, #84]	; (8016638 <xPortStartScheduler+0x138>)
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	4a14      	ldr	r2, [pc, #80]	; (8016638 <xPortStartScheduler+0x138>)
 80165e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80165ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80165ee:	f000 f8dd 	bl	80167ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80165f2:	4b12      	ldr	r3, [pc, #72]	; (801663c <xPortStartScheduler+0x13c>)
 80165f4:	2200      	movs	r2, #0
 80165f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80165f8:	f000 f8fc 	bl	80167f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80165fc:	4b10      	ldr	r3, [pc, #64]	; (8016640 <xPortStartScheduler+0x140>)
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	4a0f      	ldr	r2, [pc, #60]	; (8016640 <xPortStartScheduler+0x140>)
 8016602:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8016606:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8016608:	f7ff ff66 	bl	80164d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801660c:	f7fe fd1c 	bl	8015048 <vTaskSwitchContext>
	prvTaskExitError();
 8016610:	f7ff ff22 	bl	8016458 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8016614:	2300      	movs	r3, #0
}
 8016616:	4618      	mov	r0, r3
 8016618:	3718      	adds	r7, #24
 801661a:	46bd      	mov	sp, r7
 801661c:	bd80      	pop	{r7, pc}
 801661e:	bf00      	nop
 8016620:	e000ed00 	.word	0xe000ed00
 8016624:	410fc271 	.word	0x410fc271
 8016628:	410fc270 	.word	0x410fc270
 801662c:	e000e400 	.word	0xe000e400
 8016630:	200035a4 	.word	0x200035a4
 8016634:	200035a8 	.word	0x200035a8
 8016638:	e000ed20 	.word	0xe000ed20
 801663c:	20000160 	.word	0x20000160
 8016640:	e000ef34 	.word	0xe000ef34

08016644 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8016644:	b480      	push	{r7}
 8016646:	b083      	sub	sp, #12
 8016648:	af00      	add	r7, sp, #0
	__asm volatile
 801664a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801664e:	f383 8811 	msr	BASEPRI, r3
 8016652:	f3bf 8f6f 	isb	sy
 8016656:	f3bf 8f4f 	dsb	sy
 801665a:	607b      	str	r3, [r7, #4]
}
 801665c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801665e:	4b0f      	ldr	r3, [pc, #60]	; (801669c <vPortEnterCritical+0x58>)
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	3301      	adds	r3, #1
 8016664:	4a0d      	ldr	r2, [pc, #52]	; (801669c <vPortEnterCritical+0x58>)
 8016666:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8016668:	4b0c      	ldr	r3, [pc, #48]	; (801669c <vPortEnterCritical+0x58>)
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	2b01      	cmp	r3, #1
 801666e:	d10f      	bne.n	8016690 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8016670:	4b0b      	ldr	r3, [pc, #44]	; (80166a0 <vPortEnterCritical+0x5c>)
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	b2db      	uxtb	r3, r3
 8016676:	2b00      	cmp	r3, #0
 8016678:	d00a      	beq.n	8016690 <vPortEnterCritical+0x4c>
	__asm volatile
 801667a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801667e:	f383 8811 	msr	BASEPRI, r3
 8016682:	f3bf 8f6f 	isb	sy
 8016686:	f3bf 8f4f 	dsb	sy
 801668a:	603b      	str	r3, [r7, #0]
}
 801668c:	bf00      	nop
 801668e:	e7fe      	b.n	801668e <vPortEnterCritical+0x4a>
	}
}
 8016690:	bf00      	nop
 8016692:	370c      	adds	r7, #12
 8016694:	46bd      	mov	sp, r7
 8016696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801669a:	4770      	bx	lr
 801669c:	20000160 	.word	0x20000160
 80166a0:	e000ed04 	.word	0xe000ed04

080166a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80166a4:	b480      	push	{r7}
 80166a6:	b083      	sub	sp, #12
 80166a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80166aa:	4b12      	ldr	r3, [pc, #72]	; (80166f4 <vPortExitCritical+0x50>)
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d10a      	bne.n	80166c8 <vPortExitCritical+0x24>
	__asm volatile
 80166b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80166b6:	f383 8811 	msr	BASEPRI, r3
 80166ba:	f3bf 8f6f 	isb	sy
 80166be:	f3bf 8f4f 	dsb	sy
 80166c2:	607b      	str	r3, [r7, #4]
}
 80166c4:	bf00      	nop
 80166c6:	e7fe      	b.n	80166c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80166c8:	4b0a      	ldr	r3, [pc, #40]	; (80166f4 <vPortExitCritical+0x50>)
 80166ca:	681b      	ldr	r3, [r3, #0]
 80166cc:	3b01      	subs	r3, #1
 80166ce:	4a09      	ldr	r2, [pc, #36]	; (80166f4 <vPortExitCritical+0x50>)
 80166d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80166d2:	4b08      	ldr	r3, [pc, #32]	; (80166f4 <vPortExitCritical+0x50>)
 80166d4:	681b      	ldr	r3, [r3, #0]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d105      	bne.n	80166e6 <vPortExitCritical+0x42>
 80166da:	2300      	movs	r3, #0
 80166dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80166de:	683b      	ldr	r3, [r7, #0]
 80166e0:	f383 8811 	msr	BASEPRI, r3
}
 80166e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80166e6:	bf00      	nop
 80166e8:	370c      	adds	r7, #12
 80166ea:	46bd      	mov	sp, r7
 80166ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166f0:	4770      	bx	lr
 80166f2:	bf00      	nop
 80166f4:	20000160 	.word	0x20000160
	...

08016700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8016700:	f3ef 8009 	mrs	r0, PSP
 8016704:	f3bf 8f6f 	isb	sy
 8016708:	4b15      	ldr	r3, [pc, #84]	; (8016760 <pxCurrentTCBConst>)
 801670a:	681a      	ldr	r2, [r3, #0]
 801670c:	f01e 0f10 	tst.w	lr, #16
 8016710:	bf08      	it	eq
 8016712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8016716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801671a:	6010      	str	r0, [r2, #0]
 801671c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8016720:	f04f 0050 	mov.w	r0, #80	; 0x50
 8016724:	f380 8811 	msr	BASEPRI, r0
 8016728:	f3bf 8f4f 	dsb	sy
 801672c:	f3bf 8f6f 	isb	sy
 8016730:	f7fe fc8a 	bl	8015048 <vTaskSwitchContext>
 8016734:	f04f 0000 	mov.w	r0, #0
 8016738:	f380 8811 	msr	BASEPRI, r0
 801673c:	bc09      	pop	{r0, r3}
 801673e:	6819      	ldr	r1, [r3, #0]
 8016740:	6808      	ldr	r0, [r1, #0]
 8016742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016746:	f01e 0f10 	tst.w	lr, #16
 801674a:	bf08      	it	eq
 801674c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8016750:	f380 8809 	msr	PSP, r0
 8016754:	f3bf 8f6f 	isb	sy
 8016758:	4770      	bx	lr
 801675a:	bf00      	nop
 801675c:	f3af 8000 	nop.w

08016760 <pxCurrentTCBConst>:
 8016760:	20002f70 	.word	0x20002f70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8016764:	bf00      	nop
 8016766:	bf00      	nop

08016768 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8016768:	b580      	push	{r7, lr}
 801676a:	b082      	sub	sp, #8
 801676c:	af00      	add	r7, sp, #0
	__asm volatile
 801676e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016772:	f383 8811 	msr	BASEPRI, r3
 8016776:	f3bf 8f6f 	isb	sy
 801677a:	f3bf 8f4f 	dsb	sy
 801677e:	607b      	str	r3, [r7, #4]
}
 8016780:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8016782:	f7fe fba7 	bl	8014ed4 <xTaskIncrementTick>
 8016786:	4603      	mov	r3, r0
 8016788:	2b00      	cmp	r3, #0
 801678a:	d003      	beq.n	8016794 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801678c:	4b06      	ldr	r3, [pc, #24]	; (80167a8 <xPortSysTickHandler+0x40>)
 801678e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8016792:	601a      	str	r2, [r3, #0]
 8016794:	2300      	movs	r3, #0
 8016796:	603b      	str	r3, [r7, #0]
	__asm volatile
 8016798:	683b      	ldr	r3, [r7, #0]
 801679a:	f383 8811 	msr	BASEPRI, r3
}
 801679e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80167a0:	bf00      	nop
 80167a2:	3708      	adds	r7, #8
 80167a4:	46bd      	mov	sp, r7
 80167a6:	bd80      	pop	{r7, pc}
 80167a8:	e000ed04 	.word	0xe000ed04

080167ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80167ac:	b480      	push	{r7}
 80167ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80167b0:	4b0b      	ldr	r3, [pc, #44]	; (80167e0 <vPortSetupTimerInterrupt+0x34>)
 80167b2:	2200      	movs	r2, #0
 80167b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80167b6:	4b0b      	ldr	r3, [pc, #44]	; (80167e4 <vPortSetupTimerInterrupt+0x38>)
 80167b8:	2200      	movs	r2, #0
 80167ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80167bc:	4b0a      	ldr	r3, [pc, #40]	; (80167e8 <vPortSetupTimerInterrupt+0x3c>)
 80167be:	681b      	ldr	r3, [r3, #0]
 80167c0:	4a0a      	ldr	r2, [pc, #40]	; (80167ec <vPortSetupTimerInterrupt+0x40>)
 80167c2:	fba2 2303 	umull	r2, r3, r2, r3
 80167c6:	099b      	lsrs	r3, r3, #6
 80167c8:	4a09      	ldr	r2, [pc, #36]	; (80167f0 <vPortSetupTimerInterrupt+0x44>)
 80167ca:	3b01      	subs	r3, #1
 80167cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80167ce:	4b04      	ldr	r3, [pc, #16]	; (80167e0 <vPortSetupTimerInterrupt+0x34>)
 80167d0:	2207      	movs	r2, #7
 80167d2:	601a      	str	r2, [r3, #0]
}
 80167d4:	bf00      	nop
 80167d6:	46bd      	mov	sp, r7
 80167d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167dc:	4770      	bx	lr
 80167de:	bf00      	nop
 80167e0:	e000e010 	.word	0xe000e010
 80167e4:	e000e018 	.word	0xe000e018
 80167e8:	20000008 	.word	0x20000008
 80167ec:	10624dd3 	.word	0x10624dd3
 80167f0:	e000e014 	.word	0xe000e014

080167f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80167f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8016804 <vPortEnableVFP+0x10>
 80167f8:	6801      	ldr	r1, [r0, #0]
 80167fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80167fe:	6001      	str	r1, [r0, #0]
 8016800:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8016802:	bf00      	nop
 8016804:	e000ed88 	.word	0xe000ed88

08016808 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8016808:	b480      	push	{r7}
 801680a:	b085      	sub	sp, #20
 801680c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801680e:	f3ef 8305 	mrs	r3, IPSR
 8016812:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8016814:	68fb      	ldr	r3, [r7, #12]
 8016816:	2b0f      	cmp	r3, #15
 8016818:	d914      	bls.n	8016844 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801681a:	4a17      	ldr	r2, [pc, #92]	; (8016878 <vPortValidateInterruptPriority+0x70>)
 801681c:	68fb      	ldr	r3, [r7, #12]
 801681e:	4413      	add	r3, r2
 8016820:	781b      	ldrb	r3, [r3, #0]
 8016822:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8016824:	4b15      	ldr	r3, [pc, #84]	; (801687c <vPortValidateInterruptPriority+0x74>)
 8016826:	781b      	ldrb	r3, [r3, #0]
 8016828:	7afa      	ldrb	r2, [r7, #11]
 801682a:	429a      	cmp	r2, r3
 801682c:	d20a      	bcs.n	8016844 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016832:	f383 8811 	msr	BASEPRI, r3
 8016836:	f3bf 8f6f 	isb	sy
 801683a:	f3bf 8f4f 	dsb	sy
 801683e:	607b      	str	r3, [r7, #4]
}
 8016840:	bf00      	nop
 8016842:	e7fe      	b.n	8016842 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8016844:	4b0e      	ldr	r3, [pc, #56]	; (8016880 <vPortValidateInterruptPriority+0x78>)
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801684c:	4b0d      	ldr	r3, [pc, #52]	; (8016884 <vPortValidateInterruptPriority+0x7c>)
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	429a      	cmp	r2, r3
 8016852:	d90a      	bls.n	801686a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8016854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016858:	f383 8811 	msr	BASEPRI, r3
 801685c:	f3bf 8f6f 	isb	sy
 8016860:	f3bf 8f4f 	dsb	sy
 8016864:	603b      	str	r3, [r7, #0]
}
 8016866:	bf00      	nop
 8016868:	e7fe      	b.n	8016868 <vPortValidateInterruptPriority+0x60>
	}
 801686a:	bf00      	nop
 801686c:	3714      	adds	r7, #20
 801686e:	46bd      	mov	sp, r7
 8016870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016874:	4770      	bx	lr
 8016876:	bf00      	nop
 8016878:	e000e3f0 	.word	0xe000e3f0
 801687c:	200035a4 	.word	0x200035a4
 8016880:	e000ed0c 	.word	0xe000ed0c
 8016884:	200035a8 	.word	0x200035a8

08016888 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8016888:	b580      	push	{r7, lr}
 801688a:	b08a      	sub	sp, #40	; 0x28
 801688c:	af00      	add	r7, sp, #0
 801688e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8016890:	2300      	movs	r3, #0
 8016892:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8016894:	f7fe f9d2 	bl	8014c3c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8016898:	4b5b      	ldr	r3, [pc, #364]	; (8016a08 <pvPortMalloc+0x180>)
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	2b00      	cmp	r3, #0
 801689e:	d101      	bne.n	80168a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80168a0:	f000 f92c 	bl	8016afc <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80168a4:	4b59      	ldr	r3, [pc, #356]	; (8016a0c <pvPortMalloc+0x184>)
 80168a6:	681a      	ldr	r2, [r3, #0]
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	4013      	ands	r3, r2
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	f040 8093 	bne.w	80169d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d01d      	beq.n	80168f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80168b8:	2208      	movs	r2, #8
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	4413      	add	r3, r2
 80168be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	f003 0307 	and.w	r3, r3, #7
 80168c6:	2b00      	cmp	r3, #0
 80168c8:	d014      	beq.n	80168f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	f023 0307 	bic.w	r3, r3, #7
 80168d0:	3308      	adds	r3, #8
 80168d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	f003 0307 	and.w	r3, r3, #7
 80168da:	2b00      	cmp	r3, #0
 80168dc:	d00a      	beq.n	80168f4 <pvPortMalloc+0x6c>
	__asm volatile
 80168de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80168e2:	f383 8811 	msr	BASEPRI, r3
 80168e6:	f3bf 8f6f 	isb	sy
 80168ea:	f3bf 8f4f 	dsb	sy
 80168ee:	617b      	str	r3, [r7, #20]
}
 80168f0:	bf00      	nop
 80168f2:	e7fe      	b.n	80168f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	2b00      	cmp	r3, #0
 80168f8:	d06e      	beq.n	80169d8 <pvPortMalloc+0x150>
 80168fa:	4b45      	ldr	r3, [pc, #276]	; (8016a10 <pvPortMalloc+0x188>)
 80168fc:	681b      	ldr	r3, [r3, #0]
 80168fe:	687a      	ldr	r2, [r7, #4]
 8016900:	429a      	cmp	r2, r3
 8016902:	d869      	bhi.n	80169d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8016904:	4b43      	ldr	r3, [pc, #268]	; (8016a14 <pvPortMalloc+0x18c>)
 8016906:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8016908:	4b42      	ldr	r3, [pc, #264]	; (8016a14 <pvPortMalloc+0x18c>)
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801690e:	e004      	b.n	801691a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8016910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016912:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8016914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801691a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801691c:	685b      	ldr	r3, [r3, #4]
 801691e:	687a      	ldr	r2, [r7, #4]
 8016920:	429a      	cmp	r2, r3
 8016922:	d903      	bls.n	801692c <pvPortMalloc+0xa4>
 8016924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016926:	681b      	ldr	r3, [r3, #0]
 8016928:	2b00      	cmp	r3, #0
 801692a:	d1f1      	bne.n	8016910 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801692c:	4b36      	ldr	r3, [pc, #216]	; (8016a08 <pvPortMalloc+0x180>)
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016932:	429a      	cmp	r2, r3
 8016934:	d050      	beq.n	80169d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8016936:	6a3b      	ldr	r3, [r7, #32]
 8016938:	681b      	ldr	r3, [r3, #0]
 801693a:	2208      	movs	r2, #8
 801693c:	4413      	add	r3, r2
 801693e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8016940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016942:	681a      	ldr	r2, [r3, #0]
 8016944:	6a3b      	ldr	r3, [r7, #32]
 8016946:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8016948:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801694a:	685a      	ldr	r2, [r3, #4]
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	1ad2      	subs	r2, r2, r3
 8016950:	2308      	movs	r3, #8
 8016952:	005b      	lsls	r3, r3, #1
 8016954:	429a      	cmp	r2, r3
 8016956:	d91f      	bls.n	8016998 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8016958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	4413      	add	r3, r2
 801695e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8016960:	69bb      	ldr	r3, [r7, #24]
 8016962:	f003 0307 	and.w	r3, r3, #7
 8016966:	2b00      	cmp	r3, #0
 8016968:	d00a      	beq.n	8016980 <pvPortMalloc+0xf8>
	__asm volatile
 801696a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801696e:	f383 8811 	msr	BASEPRI, r3
 8016972:	f3bf 8f6f 	isb	sy
 8016976:	f3bf 8f4f 	dsb	sy
 801697a:	613b      	str	r3, [r7, #16]
}
 801697c:	bf00      	nop
 801697e:	e7fe      	b.n	801697e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8016980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016982:	685a      	ldr	r2, [r3, #4]
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	1ad2      	subs	r2, r2, r3
 8016988:	69bb      	ldr	r3, [r7, #24]
 801698a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801698c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801698e:	687a      	ldr	r2, [r7, #4]
 8016990:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8016992:	69b8      	ldr	r0, [r7, #24]
 8016994:	f000 f914 	bl	8016bc0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8016998:	4b1d      	ldr	r3, [pc, #116]	; (8016a10 <pvPortMalloc+0x188>)
 801699a:	681a      	ldr	r2, [r3, #0]
 801699c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801699e:	685b      	ldr	r3, [r3, #4]
 80169a0:	1ad3      	subs	r3, r2, r3
 80169a2:	4a1b      	ldr	r2, [pc, #108]	; (8016a10 <pvPortMalloc+0x188>)
 80169a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80169a6:	4b1a      	ldr	r3, [pc, #104]	; (8016a10 <pvPortMalloc+0x188>)
 80169a8:	681a      	ldr	r2, [r3, #0]
 80169aa:	4b1b      	ldr	r3, [pc, #108]	; (8016a18 <pvPortMalloc+0x190>)
 80169ac:	681b      	ldr	r3, [r3, #0]
 80169ae:	429a      	cmp	r2, r3
 80169b0:	d203      	bcs.n	80169ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80169b2:	4b17      	ldr	r3, [pc, #92]	; (8016a10 <pvPortMalloc+0x188>)
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	4a18      	ldr	r2, [pc, #96]	; (8016a18 <pvPortMalloc+0x190>)
 80169b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80169ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169bc:	685a      	ldr	r2, [r3, #4]
 80169be:	4b13      	ldr	r3, [pc, #76]	; (8016a0c <pvPortMalloc+0x184>)
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	431a      	orrs	r2, r3
 80169c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80169c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169ca:	2200      	movs	r2, #0
 80169cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80169ce:	4b13      	ldr	r3, [pc, #76]	; (8016a1c <pvPortMalloc+0x194>)
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	3301      	adds	r3, #1
 80169d4:	4a11      	ldr	r2, [pc, #68]	; (8016a1c <pvPortMalloc+0x194>)
 80169d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80169d8:	f7fe f93e 	bl	8014c58 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80169dc:	69fb      	ldr	r3, [r7, #28]
 80169de:	f003 0307 	and.w	r3, r3, #7
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d00a      	beq.n	80169fc <pvPortMalloc+0x174>
	__asm volatile
 80169e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80169ea:	f383 8811 	msr	BASEPRI, r3
 80169ee:	f3bf 8f6f 	isb	sy
 80169f2:	f3bf 8f4f 	dsb	sy
 80169f6:	60fb      	str	r3, [r7, #12]
}
 80169f8:	bf00      	nop
 80169fa:	e7fe      	b.n	80169fa <pvPortMalloc+0x172>
	return pvReturn;
 80169fc:	69fb      	ldr	r3, [r7, #28]
}
 80169fe:	4618      	mov	r0, r3
 8016a00:	3728      	adds	r7, #40	; 0x28
 8016a02:	46bd      	mov	sp, r7
 8016a04:	bd80      	pop	{r7, pc}
 8016a06:	bf00      	nop
 8016a08:	20007434 	.word	0x20007434
 8016a0c:	20007448 	.word	0x20007448
 8016a10:	20007438 	.word	0x20007438
 8016a14:	2000742c 	.word	0x2000742c
 8016a18:	2000743c 	.word	0x2000743c
 8016a1c:	20007440 	.word	0x20007440

08016a20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016a20:	b580      	push	{r7, lr}
 8016a22:	b086      	sub	sp, #24
 8016a24:	af00      	add	r7, sp, #0
 8016a26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8016a2c:	687b      	ldr	r3, [r7, #4]
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d04d      	beq.n	8016ace <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016a32:	2308      	movs	r3, #8
 8016a34:	425b      	negs	r3, r3
 8016a36:	697a      	ldr	r2, [r7, #20]
 8016a38:	4413      	add	r3, r2
 8016a3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8016a3c:	697b      	ldr	r3, [r7, #20]
 8016a3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016a40:	693b      	ldr	r3, [r7, #16]
 8016a42:	685a      	ldr	r2, [r3, #4]
 8016a44:	4b24      	ldr	r3, [pc, #144]	; (8016ad8 <vPortFree+0xb8>)
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	4013      	ands	r3, r2
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d10a      	bne.n	8016a64 <vPortFree+0x44>
	__asm volatile
 8016a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a52:	f383 8811 	msr	BASEPRI, r3
 8016a56:	f3bf 8f6f 	isb	sy
 8016a5a:	f3bf 8f4f 	dsb	sy
 8016a5e:	60fb      	str	r3, [r7, #12]
}
 8016a60:	bf00      	nop
 8016a62:	e7fe      	b.n	8016a62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016a64:	693b      	ldr	r3, [r7, #16]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	d00a      	beq.n	8016a82 <vPortFree+0x62>
	__asm volatile
 8016a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016a70:	f383 8811 	msr	BASEPRI, r3
 8016a74:	f3bf 8f6f 	isb	sy
 8016a78:	f3bf 8f4f 	dsb	sy
 8016a7c:	60bb      	str	r3, [r7, #8]
}
 8016a7e:	bf00      	nop
 8016a80:	e7fe      	b.n	8016a80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8016a82:	693b      	ldr	r3, [r7, #16]
 8016a84:	685a      	ldr	r2, [r3, #4]
 8016a86:	4b14      	ldr	r3, [pc, #80]	; (8016ad8 <vPortFree+0xb8>)
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	4013      	ands	r3, r2
 8016a8c:	2b00      	cmp	r3, #0
 8016a8e:	d01e      	beq.n	8016ace <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8016a90:	693b      	ldr	r3, [r7, #16]
 8016a92:	681b      	ldr	r3, [r3, #0]
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d11a      	bne.n	8016ace <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8016a98:	693b      	ldr	r3, [r7, #16]
 8016a9a:	685a      	ldr	r2, [r3, #4]
 8016a9c:	4b0e      	ldr	r3, [pc, #56]	; (8016ad8 <vPortFree+0xb8>)
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	43db      	mvns	r3, r3
 8016aa2:	401a      	ands	r2, r3
 8016aa4:	693b      	ldr	r3, [r7, #16]
 8016aa6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8016aa8:	f7fe f8c8 	bl	8014c3c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8016aac:	693b      	ldr	r3, [r7, #16]
 8016aae:	685a      	ldr	r2, [r3, #4]
 8016ab0:	4b0a      	ldr	r3, [pc, #40]	; (8016adc <vPortFree+0xbc>)
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	4413      	add	r3, r2
 8016ab6:	4a09      	ldr	r2, [pc, #36]	; (8016adc <vPortFree+0xbc>)
 8016ab8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8016aba:	6938      	ldr	r0, [r7, #16]
 8016abc:	f000 f880 	bl	8016bc0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8016ac0:	4b07      	ldr	r3, [pc, #28]	; (8016ae0 <vPortFree+0xc0>)
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	3301      	adds	r3, #1
 8016ac6:	4a06      	ldr	r2, [pc, #24]	; (8016ae0 <vPortFree+0xc0>)
 8016ac8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8016aca:	f7fe f8c5 	bl	8014c58 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8016ace:	bf00      	nop
 8016ad0:	3718      	adds	r7, #24
 8016ad2:	46bd      	mov	sp, r7
 8016ad4:	bd80      	pop	{r7, pc}
 8016ad6:	bf00      	nop
 8016ad8:	20007448 	.word	0x20007448
 8016adc:	20007438 	.word	0x20007438
 8016ae0:	20007444 	.word	0x20007444

08016ae4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8016ae4:	b480      	push	{r7}
 8016ae6:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8016ae8:	4b03      	ldr	r3, [pc, #12]	; (8016af8 <xPortGetFreeHeapSize+0x14>)
 8016aea:	681b      	ldr	r3, [r3, #0]
}
 8016aec:	4618      	mov	r0, r3
 8016aee:	46bd      	mov	sp, r7
 8016af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016af4:	4770      	bx	lr
 8016af6:	bf00      	nop
 8016af8:	20007438 	.word	0x20007438

08016afc <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016afc:	b480      	push	{r7}
 8016afe:	b085      	sub	sp, #20
 8016b00:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8016b02:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8016b06:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016b08:	4b27      	ldr	r3, [pc, #156]	; (8016ba8 <prvHeapInit+0xac>)
 8016b0a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016b0c:	68fb      	ldr	r3, [r7, #12]
 8016b0e:	f003 0307 	and.w	r3, r3, #7
 8016b12:	2b00      	cmp	r3, #0
 8016b14:	d00c      	beq.n	8016b30 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	3307      	adds	r3, #7
 8016b1a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016b1c:	68fb      	ldr	r3, [r7, #12]
 8016b1e:	f023 0307 	bic.w	r3, r3, #7
 8016b22:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8016b24:	68ba      	ldr	r2, [r7, #8]
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	1ad3      	subs	r3, r2, r3
 8016b2a:	4a1f      	ldr	r2, [pc, #124]	; (8016ba8 <prvHeapInit+0xac>)
 8016b2c:	4413      	add	r3, r2
 8016b2e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016b30:	68fb      	ldr	r3, [r7, #12]
 8016b32:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8016b34:	4a1d      	ldr	r2, [pc, #116]	; (8016bac <prvHeapInit+0xb0>)
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016b3a:	4b1c      	ldr	r3, [pc, #112]	; (8016bac <prvHeapInit+0xb0>)
 8016b3c:	2200      	movs	r2, #0
 8016b3e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016b40:	687b      	ldr	r3, [r7, #4]
 8016b42:	68ba      	ldr	r2, [r7, #8]
 8016b44:	4413      	add	r3, r2
 8016b46:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016b48:	2208      	movs	r2, #8
 8016b4a:	68fb      	ldr	r3, [r7, #12]
 8016b4c:	1a9b      	subs	r3, r3, r2
 8016b4e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016b50:	68fb      	ldr	r3, [r7, #12]
 8016b52:	f023 0307 	bic.w	r3, r3, #7
 8016b56:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016b58:	68fb      	ldr	r3, [r7, #12]
 8016b5a:	4a15      	ldr	r2, [pc, #84]	; (8016bb0 <prvHeapInit+0xb4>)
 8016b5c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016b5e:	4b14      	ldr	r3, [pc, #80]	; (8016bb0 <prvHeapInit+0xb4>)
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	2200      	movs	r2, #0
 8016b64:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8016b66:	4b12      	ldr	r3, [pc, #72]	; (8016bb0 <prvHeapInit+0xb4>)
 8016b68:	681b      	ldr	r3, [r3, #0]
 8016b6a:	2200      	movs	r2, #0
 8016b6c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016b6e:	687b      	ldr	r3, [r7, #4]
 8016b70:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8016b72:	683b      	ldr	r3, [r7, #0]
 8016b74:	68fa      	ldr	r2, [r7, #12]
 8016b76:	1ad2      	subs	r2, r2, r3
 8016b78:	683b      	ldr	r3, [r7, #0]
 8016b7a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016b7c:	4b0c      	ldr	r3, [pc, #48]	; (8016bb0 <prvHeapInit+0xb4>)
 8016b7e:	681a      	ldr	r2, [r3, #0]
 8016b80:	683b      	ldr	r3, [r7, #0]
 8016b82:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016b84:	683b      	ldr	r3, [r7, #0]
 8016b86:	685b      	ldr	r3, [r3, #4]
 8016b88:	4a0a      	ldr	r2, [pc, #40]	; (8016bb4 <prvHeapInit+0xb8>)
 8016b8a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016b8c:	683b      	ldr	r3, [r7, #0]
 8016b8e:	685b      	ldr	r3, [r3, #4]
 8016b90:	4a09      	ldr	r2, [pc, #36]	; (8016bb8 <prvHeapInit+0xbc>)
 8016b92:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8016b94:	4b09      	ldr	r3, [pc, #36]	; (8016bbc <prvHeapInit+0xc0>)
 8016b96:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016b9a:	601a      	str	r2, [r3, #0]
}
 8016b9c:	bf00      	nop
 8016b9e:	3714      	adds	r7, #20
 8016ba0:	46bd      	mov	sp, r7
 8016ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ba6:	4770      	bx	lr
 8016ba8:	200035ac 	.word	0x200035ac
 8016bac:	2000742c 	.word	0x2000742c
 8016bb0:	20007434 	.word	0x20007434
 8016bb4:	2000743c 	.word	0x2000743c
 8016bb8:	20007438 	.word	0x20007438
 8016bbc:	20007448 	.word	0x20007448

08016bc0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8016bc0:	b480      	push	{r7}
 8016bc2:	b085      	sub	sp, #20
 8016bc4:	af00      	add	r7, sp, #0
 8016bc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8016bc8:	4b28      	ldr	r3, [pc, #160]	; (8016c6c <prvInsertBlockIntoFreeList+0xac>)
 8016bca:	60fb      	str	r3, [r7, #12]
 8016bcc:	e002      	b.n	8016bd4 <prvInsertBlockIntoFreeList+0x14>
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	681b      	ldr	r3, [r3, #0]
 8016bd2:	60fb      	str	r3, [r7, #12]
 8016bd4:	68fb      	ldr	r3, [r7, #12]
 8016bd6:	681b      	ldr	r3, [r3, #0]
 8016bd8:	687a      	ldr	r2, [r7, #4]
 8016bda:	429a      	cmp	r2, r3
 8016bdc:	d8f7      	bhi.n	8016bce <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	685b      	ldr	r3, [r3, #4]
 8016be6:	68ba      	ldr	r2, [r7, #8]
 8016be8:	4413      	add	r3, r2
 8016bea:	687a      	ldr	r2, [r7, #4]
 8016bec:	429a      	cmp	r2, r3
 8016bee:	d108      	bne.n	8016c02 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8016bf0:	68fb      	ldr	r3, [r7, #12]
 8016bf2:	685a      	ldr	r2, [r3, #4]
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	685b      	ldr	r3, [r3, #4]
 8016bf8:	441a      	add	r2, r3
 8016bfa:	68fb      	ldr	r3, [r7, #12]
 8016bfc:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016bfe:	68fb      	ldr	r3, [r7, #12]
 8016c00:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8016c06:	687b      	ldr	r3, [r7, #4]
 8016c08:	685b      	ldr	r3, [r3, #4]
 8016c0a:	68ba      	ldr	r2, [r7, #8]
 8016c0c:	441a      	add	r2, r3
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	429a      	cmp	r2, r3
 8016c14:	d118      	bne.n	8016c48 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8016c16:	68fb      	ldr	r3, [r7, #12]
 8016c18:	681a      	ldr	r2, [r3, #0]
 8016c1a:	4b15      	ldr	r3, [pc, #84]	; (8016c70 <prvInsertBlockIntoFreeList+0xb0>)
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	429a      	cmp	r2, r3
 8016c20:	d00d      	beq.n	8016c3e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	685a      	ldr	r2, [r3, #4]
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	681b      	ldr	r3, [r3, #0]
 8016c2a:	685b      	ldr	r3, [r3, #4]
 8016c2c:	441a      	add	r2, r3
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8016c32:	68fb      	ldr	r3, [r7, #12]
 8016c34:	681b      	ldr	r3, [r3, #0]
 8016c36:	681a      	ldr	r2, [r3, #0]
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	601a      	str	r2, [r3, #0]
 8016c3c:	e008      	b.n	8016c50 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016c3e:	4b0c      	ldr	r3, [pc, #48]	; (8016c70 <prvInsertBlockIntoFreeList+0xb0>)
 8016c40:	681a      	ldr	r2, [r3, #0]
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	601a      	str	r2, [r3, #0]
 8016c46:	e003      	b.n	8016c50 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016c48:	68fb      	ldr	r3, [r7, #12]
 8016c4a:	681a      	ldr	r2, [r3, #0]
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016c50:	68fa      	ldr	r2, [r7, #12]
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	429a      	cmp	r2, r3
 8016c56:	d002      	beq.n	8016c5e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	687a      	ldr	r2, [r7, #4]
 8016c5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016c5e:	bf00      	nop
 8016c60:	3714      	adds	r7, #20
 8016c62:	46bd      	mov	sp, r7
 8016c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c68:	4770      	bx	lr
 8016c6a:	bf00      	nop
 8016c6c:	2000742c 	.word	0x2000742c
 8016c70:	20007434 	.word	0x20007434

08016c74 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016c74:	b580      	push	{r7, lr}
 8016c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8016c78:	2200      	movs	r2, #0
 8016c7a:	4912      	ldr	r1, [pc, #72]	; (8016cc4 <MX_USB_DEVICE_Init+0x50>)
 8016c7c:	4812      	ldr	r0, [pc, #72]	; (8016cc8 <MX_USB_DEVICE_Init+0x54>)
 8016c7e:	f7f7 fbab 	bl	800e3d8 <USBD_Init>
 8016c82:	4603      	mov	r3, r0
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d001      	beq.n	8016c8c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016c88:	f7ee f87c 	bl	8004d84 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8016c8c:	490f      	ldr	r1, [pc, #60]	; (8016ccc <MX_USB_DEVICE_Init+0x58>)
 8016c8e:	480e      	ldr	r0, [pc, #56]	; (8016cc8 <MX_USB_DEVICE_Init+0x54>)
 8016c90:	f7f7 fbd2 	bl	800e438 <USBD_RegisterClass>
 8016c94:	4603      	mov	r3, r0
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d001      	beq.n	8016c9e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016c9a:	f7ee f873 	bl	8004d84 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8016c9e:	490c      	ldr	r1, [pc, #48]	; (8016cd0 <MX_USB_DEVICE_Init+0x5c>)
 8016ca0:	4809      	ldr	r0, [pc, #36]	; (8016cc8 <MX_USB_DEVICE_Init+0x54>)
 8016ca2:	f7f7 faf3 	bl	800e28c <USBD_CDC_RegisterInterface>
 8016ca6:	4603      	mov	r3, r0
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d001      	beq.n	8016cb0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016cac:	f7ee f86a 	bl	8004d84 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8016cb0:	4805      	ldr	r0, [pc, #20]	; (8016cc8 <MX_USB_DEVICE_Init+0x54>)
 8016cb2:	f7f7 fbe8 	bl	800e486 <USBD_Start>
 8016cb6:	4603      	mov	r3, r0
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d001      	beq.n	8016cc0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016cbc:	f7ee f862 	bl	8004d84 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016cc0:	bf00      	nop
 8016cc2:	bd80      	pop	{r7, pc}
 8016cc4:	20000178 	.word	0x20000178
 8016cc8:	20012f18 	.word	0x20012f18
 8016ccc:	2000005c 	.word	0x2000005c
 8016cd0:	20000164 	.word	0x20000164

08016cd4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8016cd4:	b580      	push	{r7, lr}
 8016cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8016cd8:	2200      	movs	r2, #0
 8016cda:	4905      	ldr	r1, [pc, #20]	; (8016cf0 <CDC_Init_FS+0x1c>)
 8016cdc:	4805      	ldr	r0, [pc, #20]	; (8016cf4 <CDC_Init_FS+0x20>)
 8016cde:	f7f7 faea 	bl	800e2b6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8016ce2:	4905      	ldr	r1, [pc, #20]	; (8016cf8 <CDC_Init_FS+0x24>)
 8016ce4:	4803      	ldr	r0, [pc, #12]	; (8016cf4 <CDC_Init_FS+0x20>)
 8016ce6:	f7f7 fb04 	bl	800e2f2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016cea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8016cec:	4618      	mov	r0, r3
 8016cee:	bd80      	pop	{r7, pc}
 8016cf0:	200139e8 	.word	0x200139e8
 8016cf4:	20012f18 	.word	0x20012f18
 8016cf8:	200131e8 	.word	0x200131e8

08016cfc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8016cfc:	b480      	push	{r7}
 8016cfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8016d00:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8016d02:	4618      	mov	r0, r3
 8016d04:	46bd      	mov	sp, r7
 8016d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d0a:	4770      	bx	lr

08016d0c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016d0c:	b480      	push	{r7}
 8016d0e:	b083      	sub	sp, #12
 8016d10:	af00      	add	r7, sp, #0
 8016d12:	4603      	mov	r3, r0
 8016d14:	6039      	str	r1, [r7, #0]
 8016d16:	71fb      	strb	r3, [r7, #7]
 8016d18:	4613      	mov	r3, r2
 8016d1a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8016d1c:	79fb      	ldrb	r3, [r7, #7]
 8016d1e:	2b23      	cmp	r3, #35	; 0x23
 8016d20:	d84a      	bhi.n	8016db8 <CDC_Control_FS+0xac>
 8016d22:	a201      	add	r2, pc, #4	; (adr r2, 8016d28 <CDC_Control_FS+0x1c>)
 8016d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016d28:	08016db9 	.word	0x08016db9
 8016d2c:	08016db9 	.word	0x08016db9
 8016d30:	08016db9 	.word	0x08016db9
 8016d34:	08016db9 	.word	0x08016db9
 8016d38:	08016db9 	.word	0x08016db9
 8016d3c:	08016db9 	.word	0x08016db9
 8016d40:	08016db9 	.word	0x08016db9
 8016d44:	08016db9 	.word	0x08016db9
 8016d48:	08016db9 	.word	0x08016db9
 8016d4c:	08016db9 	.word	0x08016db9
 8016d50:	08016db9 	.word	0x08016db9
 8016d54:	08016db9 	.word	0x08016db9
 8016d58:	08016db9 	.word	0x08016db9
 8016d5c:	08016db9 	.word	0x08016db9
 8016d60:	08016db9 	.word	0x08016db9
 8016d64:	08016db9 	.word	0x08016db9
 8016d68:	08016db9 	.word	0x08016db9
 8016d6c:	08016db9 	.word	0x08016db9
 8016d70:	08016db9 	.word	0x08016db9
 8016d74:	08016db9 	.word	0x08016db9
 8016d78:	08016db9 	.word	0x08016db9
 8016d7c:	08016db9 	.word	0x08016db9
 8016d80:	08016db9 	.word	0x08016db9
 8016d84:	08016db9 	.word	0x08016db9
 8016d88:	08016db9 	.word	0x08016db9
 8016d8c:	08016db9 	.word	0x08016db9
 8016d90:	08016db9 	.word	0x08016db9
 8016d94:	08016db9 	.word	0x08016db9
 8016d98:	08016db9 	.word	0x08016db9
 8016d9c:	08016db9 	.word	0x08016db9
 8016da0:	08016db9 	.word	0x08016db9
 8016da4:	08016db9 	.word	0x08016db9
 8016da8:	08016db9 	.word	0x08016db9
 8016dac:	08016db9 	.word	0x08016db9
 8016db0:	08016db9 	.word	0x08016db9
 8016db4:	08016db9 	.word	0x08016db9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016db8:	bf00      	nop
  }

  return (USBD_OK);
 8016dba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	370c      	adds	r7, #12
 8016dc0:	46bd      	mov	sp, r7
 8016dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dc6:	4770      	bx	lr

08016dc8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8016dc8:	b580      	push	{r7, lr}
 8016dca:	b082      	sub	sp, #8
 8016dcc:	af00      	add	r7, sp, #0
 8016dce:	6078      	str	r0, [r7, #4]
 8016dd0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8016dd2:	6879      	ldr	r1, [r7, #4]
 8016dd4:	4805      	ldr	r0, [pc, #20]	; (8016dec <CDC_Receive_FS+0x24>)
 8016dd6:	f7f7 fa8c 	bl	800e2f2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8016dda:	4804      	ldr	r0, [pc, #16]	; (8016dec <CDC_Receive_FS+0x24>)
 8016ddc:	f7f7 fad2 	bl	800e384 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016de0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8016de2:	4618      	mov	r0, r3
 8016de4:	3708      	adds	r7, #8
 8016de6:	46bd      	mov	sp, r7
 8016de8:	bd80      	pop	{r7, pc}
 8016dea:	bf00      	nop
 8016dec:	20012f18 	.word	0x20012f18

08016df0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8016df0:	b580      	push	{r7, lr}
 8016df2:	b084      	sub	sp, #16
 8016df4:	af00      	add	r7, sp, #0
 8016df6:	6078      	str	r0, [r7, #4]
 8016df8:	460b      	mov	r3, r1
 8016dfa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8016dfc:	2300      	movs	r3, #0
 8016dfe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8016e00:	4b0d      	ldr	r3, [pc, #52]	; (8016e38 <CDC_Transmit_FS+0x48>)
 8016e02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8016e06:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8016e08:	68bb      	ldr	r3, [r7, #8]
 8016e0a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8016e0e:	2b00      	cmp	r3, #0
 8016e10:	d001      	beq.n	8016e16 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8016e12:	2301      	movs	r3, #1
 8016e14:	e00b      	b.n	8016e2e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8016e16:	887b      	ldrh	r3, [r7, #2]
 8016e18:	461a      	mov	r2, r3
 8016e1a:	6879      	ldr	r1, [r7, #4]
 8016e1c:	4806      	ldr	r0, [pc, #24]	; (8016e38 <CDC_Transmit_FS+0x48>)
 8016e1e:	f7f7 fa4a 	bl	800e2b6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8016e22:	4805      	ldr	r0, [pc, #20]	; (8016e38 <CDC_Transmit_FS+0x48>)
 8016e24:	f7f7 fa7e 	bl	800e324 <USBD_CDC_TransmitPacket>
 8016e28:	4603      	mov	r3, r0
 8016e2a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8016e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8016e2e:	4618      	mov	r0, r3
 8016e30:	3710      	adds	r7, #16
 8016e32:	46bd      	mov	sp, r7
 8016e34:	bd80      	pop	{r7, pc}
 8016e36:	bf00      	nop
 8016e38:	20012f18 	.word	0x20012f18

08016e3c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016e3c:	b480      	push	{r7}
 8016e3e:	b087      	sub	sp, #28
 8016e40:	af00      	add	r7, sp, #0
 8016e42:	60f8      	str	r0, [r7, #12]
 8016e44:	60b9      	str	r1, [r7, #8]
 8016e46:	4613      	mov	r3, r2
 8016e48:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016e4a:	2300      	movs	r3, #0
 8016e4c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8016e4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016e52:	4618      	mov	r0, r3
 8016e54:	371c      	adds	r7, #28
 8016e56:	46bd      	mov	sp, r7
 8016e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e5c:	4770      	bx	lr
	...

08016e60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016e60:	b480      	push	{r7}
 8016e62:	b083      	sub	sp, #12
 8016e64:	af00      	add	r7, sp, #0
 8016e66:	4603      	mov	r3, r0
 8016e68:	6039      	str	r1, [r7, #0]
 8016e6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8016e6c:	683b      	ldr	r3, [r7, #0]
 8016e6e:	2212      	movs	r2, #18
 8016e70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8016e72:	4b03      	ldr	r3, [pc, #12]	; (8016e80 <USBD_FS_DeviceDescriptor+0x20>)
}
 8016e74:	4618      	mov	r0, r3
 8016e76:	370c      	adds	r7, #12
 8016e78:	46bd      	mov	sp, r7
 8016e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e7e:	4770      	bx	lr
 8016e80:	20000194 	.word	0x20000194

08016e84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016e84:	b480      	push	{r7}
 8016e86:	b083      	sub	sp, #12
 8016e88:	af00      	add	r7, sp, #0
 8016e8a:	4603      	mov	r3, r0
 8016e8c:	6039      	str	r1, [r7, #0]
 8016e8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016e90:	683b      	ldr	r3, [r7, #0]
 8016e92:	2204      	movs	r2, #4
 8016e94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016e96:	4b03      	ldr	r3, [pc, #12]	; (8016ea4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8016e98:	4618      	mov	r0, r3
 8016e9a:	370c      	adds	r7, #12
 8016e9c:	46bd      	mov	sp, r7
 8016e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ea2:	4770      	bx	lr
 8016ea4:	200001a8 	.word	0x200001a8

08016ea8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ea8:	b580      	push	{r7, lr}
 8016eaa:	b082      	sub	sp, #8
 8016eac:	af00      	add	r7, sp, #0
 8016eae:	4603      	mov	r3, r0
 8016eb0:	6039      	str	r1, [r7, #0]
 8016eb2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016eb4:	79fb      	ldrb	r3, [r7, #7]
 8016eb6:	2b00      	cmp	r3, #0
 8016eb8:	d105      	bne.n	8016ec6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016eba:	683a      	ldr	r2, [r7, #0]
 8016ebc:	4907      	ldr	r1, [pc, #28]	; (8016edc <USBD_FS_ProductStrDescriptor+0x34>)
 8016ebe:	4808      	ldr	r0, [pc, #32]	; (8016ee0 <USBD_FS_ProductStrDescriptor+0x38>)
 8016ec0:	f7f8 fb13 	bl	800f4ea <USBD_GetString>
 8016ec4:	e004      	b.n	8016ed0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8016ec6:	683a      	ldr	r2, [r7, #0]
 8016ec8:	4904      	ldr	r1, [pc, #16]	; (8016edc <USBD_FS_ProductStrDescriptor+0x34>)
 8016eca:	4805      	ldr	r0, [pc, #20]	; (8016ee0 <USBD_FS_ProductStrDescriptor+0x38>)
 8016ecc:	f7f8 fb0d 	bl	800f4ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8016ed0:	4b02      	ldr	r3, [pc, #8]	; (8016edc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8016ed2:	4618      	mov	r0, r3
 8016ed4:	3708      	adds	r7, #8
 8016ed6:	46bd      	mov	sp, r7
 8016ed8:	bd80      	pop	{r7, pc}
 8016eda:	bf00      	nop
 8016edc:	200141e8 	.word	0x200141e8
 8016ee0:	0801ad58 	.word	0x0801ad58

08016ee4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016ee4:	b580      	push	{r7, lr}
 8016ee6:	b082      	sub	sp, #8
 8016ee8:	af00      	add	r7, sp, #0
 8016eea:	4603      	mov	r3, r0
 8016eec:	6039      	str	r1, [r7, #0]
 8016eee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016ef0:	683a      	ldr	r2, [r7, #0]
 8016ef2:	4904      	ldr	r1, [pc, #16]	; (8016f04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8016ef4:	4804      	ldr	r0, [pc, #16]	; (8016f08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8016ef6:	f7f8 faf8 	bl	800f4ea <USBD_GetString>
  return USBD_StrDesc;
 8016efa:	4b02      	ldr	r3, [pc, #8]	; (8016f04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8016efc:	4618      	mov	r0, r3
 8016efe:	3708      	adds	r7, #8
 8016f00:	46bd      	mov	sp, r7
 8016f02:	bd80      	pop	{r7, pc}
 8016f04:	200141e8 	.word	0x200141e8
 8016f08:	0801ad70 	.word	0x0801ad70

08016f0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f0c:	b580      	push	{r7, lr}
 8016f0e:	b082      	sub	sp, #8
 8016f10:	af00      	add	r7, sp, #0
 8016f12:	4603      	mov	r3, r0
 8016f14:	6039      	str	r1, [r7, #0]
 8016f16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016f18:	683b      	ldr	r3, [r7, #0]
 8016f1a:	221a      	movs	r2, #26
 8016f1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016f1e:	f000 f843 	bl	8016fa8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8016f22:	4b02      	ldr	r3, [pc, #8]	; (8016f2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8016f24:	4618      	mov	r0, r3
 8016f26:	3708      	adds	r7, #8
 8016f28:	46bd      	mov	sp, r7
 8016f2a:	bd80      	pop	{r7, pc}
 8016f2c:	200001ac 	.word	0x200001ac

08016f30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f30:	b580      	push	{r7, lr}
 8016f32:	b082      	sub	sp, #8
 8016f34:	af00      	add	r7, sp, #0
 8016f36:	4603      	mov	r3, r0
 8016f38:	6039      	str	r1, [r7, #0]
 8016f3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016f3c:	79fb      	ldrb	r3, [r7, #7]
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d105      	bne.n	8016f4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016f42:	683a      	ldr	r2, [r7, #0]
 8016f44:	4907      	ldr	r1, [pc, #28]	; (8016f64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016f46:	4808      	ldr	r0, [pc, #32]	; (8016f68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016f48:	f7f8 facf 	bl	800f4ea <USBD_GetString>
 8016f4c:	e004      	b.n	8016f58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8016f4e:	683a      	ldr	r2, [r7, #0]
 8016f50:	4904      	ldr	r1, [pc, #16]	; (8016f64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8016f52:	4805      	ldr	r0, [pc, #20]	; (8016f68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8016f54:	f7f8 fac9 	bl	800f4ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8016f58:	4b02      	ldr	r3, [pc, #8]	; (8016f64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	3708      	adds	r7, #8
 8016f5e:	46bd      	mov	sp, r7
 8016f60:	bd80      	pop	{r7, pc}
 8016f62:	bf00      	nop
 8016f64:	200141e8 	.word	0x200141e8
 8016f68:	0801ad84 	.word	0x0801ad84

08016f6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016f6c:	b580      	push	{r7, lr}
 8016f6e:	b082      	sub	sp, #8
 8016f70:	af00      	add	r7, sp, #0
 8016f72:	4603      	mov	r3, r0
 8016f74:	6039      	str	r1, [r7, #0]
 8016f76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016f78:	79fb      	ldrb	r3, [r7, #7]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d105      	bne.n	8016f8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016f7e:	683a      	ldr	r2, [r7, #0]
 8016f80:	4907      	ldr	r1, [pc, #28]	; (8016fa0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016f82:	4808      	ldr	r0, [pc, #32]	; (8016fa4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016f84:	f7f8 fab1 	bl	800f4ea <USBD_GetString>
 8016f88:	e004      	b.n	8016f94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8016f8a:	683a      	ldr	r2, [r7, #0]
 8016f8c:	4904      	ldr	r1, [pc, #16]	; (8016fa0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8016f8e:	4805      	ldr	r0, [pc, #20]	; (8016fa4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8016f90:	f7f8 faab 	bl	800f4ea <USBD_GetString>
  }
  return USBD_StrDesc;
 8016f94:	4b02      	ldr	r3, [pc, #8]	; (8016fa0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8016f96:	4618      	mov	r0, r3
 8016f98:	3708      	adds	r7, #8
 8016f9a:	46bd      	mov	sp, r7
 8016f9c:	bd80      	pop	{r7, pc}
 8016f9e:	bf00      	nop
 8016fa0:	200141e8 	.word	0x200141e8
 8016fa4:	0801ad90 	.word	0x0801ad90

08016fa8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016fa8:	b580      	push	{r7, lr}
 8016faa:	b084      	sub	sp, #16
 8016fac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016fae:	4b0f      	ldr	r3, [pc, #60]	; (8016fec <Get_SerialNum+0x44>)
 8016fb0:	681b      	ldr	r3, [r3, #0]
 8016fb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016fb4:	4b0e      	ldr	r3, [pc, #56]	; (8016ff0 <Get_SerialNum+0x48>)
 8016fb6:	681b      	ldr	r3, [r3, #0]
 8016fb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016fba:	4b0e      	ldr	r3, [pc, #56]	; (8016ff4 <Get_SerialNum+0x4c>)
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016fc0:	68fa      	ldr	r2, [r7, #12]
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	4413      	add	r3, r2
 8016fc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016fc8:	68fb      	ldr	r3, [r7, #12]
 8016fca:	2b00      	cmp	r3, #0
 8016fcc:	d009      	beq.n	8016fe2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016fce:	2208      	movs	r2, #8
 8016fd0:	4909      	ldr	r1, [pc, #36]	; (8016ff8 <Get_SerialNum+0x50>)
 8016fd2:	68f8      	ldr	r0, [r7, #12]
 8016fd4:	f000 f814 	bl	8017000 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016fd8:	2204      	movs	r2, #4
 8016fda:	4908      	ldr	r1, [pc, #32]	; (8016ffc <Get_SerialNum+0x54>)
 8016fdc:	68b8      	ldr	r0, [r7, #8]
 8016fde:	f000 f80f 	bl	8017000 <IntToUnicode>
  }
}
 8016fe2:	bf00      	nop
 8016fe4:	3710      	adds	r7, #16
 8016fe6:	46bd      	mov	sp, r7
 8016fe8:	bd80      	pop	{r7, pc}
 8016fea:	bf00      	nop
 8016fec:	1fff7a10 	.word	0x1fff7a10
 8016ff0:	1fff7a14 	.word	0x1fff7a14
 8016ff4:	1fff7a18 	.word	0x1fff7a18
 8016ff8:	200001ae 	.word	0x200001ae
 8016ffc:	200001be 	.word	0x200001be

08017000 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017000:	b480      	push	{r7}
 8017002:	b087      	sub	sp, #28
 8017004:	af00      	add	r7, sp, #0
 8017006:	60f8      	str	r0, [r7, #12]
 8017008:	60b9      	str	r1, [r7, #8]
 801700a:	4613      	mov	r3, r2
 801700c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801700e:	2300      	movs	r3, #0
 8017010:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017012:	2300      	movs	r3, #0
 8017014:	75fb      	strb	r3, [r7, #23]
 8017016:	e027      	b.n	8017068 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017018:	68fb      	ldr	r3, [r7, #12]
 801701a:	0f1b      	lsrs	r3, r3, #28
 801701c:	2b09      	cmp	r3, #9
 801701e:	d80b      	bhi.n	8017038 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017020:	68fb      	ldr	r3, [r7, #12]
 8017022:	0f1b      	lsrs	r3, r3, #28
 8017024:	b2da      	uxtb	r2, r3
 8017026:	7dfb      	ldrb	r3, [r7, #23]
 8017028:	005b      	lsls	r3, r3, #1
 801702a:	4619      	mov	r1, r3
 801702c:	68bb      	ldr	r3, [r7, #8]
 801702e:	440b      	add	r3, r1
 8017030:	3230      	adds	r2, #48	; 0x30
 8017032:	b2d2      	uxtb	r2, r2
 8017034:	701a      	strb	r2, [r3, #0]
 8017036:	e00a      	b.n	801704e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	0f1b      	lsrs	r3, r3, #28
 801703c:	b2da      	uxtb	r2, r3
 801703e:	7dfb      	ldrb	r3, [r7, #23]
 8017040:	005b      	lsls	r3, r3, #1
 8017042:	4619      	mov	r1, r3
 8017044:	68bb      	ldr	r3, [r7, #8]
 8017046:	440b      	add	r3, r1
 8017048:	3237      	adds	r2, #55	; 0x37
 801704a:	b2d2      	uxtb	r2, r2
 801704c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801704e:	68fb      	ldr	r3, [r7, #12]
 8017050:	011b      	lsls	r3, r3, #4
 8017052:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017054:	7dfb      	ldrb	r3, [r7, #23]
 8017056:	005b      	lsls	r3, r3, #1
 8017058:	3301      	adds	r3, #1
 801705a:	68ba      	ldr	r2, [r7, #8]
 801705c:	4413      	add	r3, r2
 801705e:	2200      	movs	r2, #0
 8017060:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017062:	7dfb      	ldrb	r3, [r7, #23]
 8017064:	3301      	adds	r3, #1
 8017066:	75fb      	strb	r3, [r7, #23]
 8017068:	7dfa      	ldrb	r2, [r7, #23]
 801706a:	79fb      	ldrb	r3, [r7, #7]
 801706c:	429a      	cmp	r2, r3
 801706e:	d3d3      	bcc.n	8017018 <IntToUnicode+0x18>
  }
}
 8017070:	bf00      	nop
 8017072:	bf00      	nop
 8017074:	371c      	adds	r7, #28
 8017076:	46bd      	mov	sp, r7
 8017078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801707c:	4770      	bx	lr
	...

08017080 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017080:	b580      	push	{r7, lr}
 8017082:	b08a      	sub	sp, #40	; 0x28
 8017084:	af00      	add	r7, sp, #0
 8017086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017088:	f107 0314 	add.w	r3, r7, #20
 801708c:	2200      	movs	r2, #0
 801708e:	601a      	str	r2, [r3, #0]
 8017090:	605a      	str	r2, [r3, #4]
 8017092:	609a      	str	r2, [r3, #8]
 8017094:	60da      	str	r2, [r3, #12]
 8017096:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80170a0:	d147      	bne.n	8017132 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80170a2:	2300      	movs	r3, #0
 80170a4:	613b      	str	r3, [r7, #16]
 80170a6:	4b25      	ldr	r3, [pc, #148]	; (801713c <HAL_PCD_MspInit+0xbc>)
 80170a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80170aa:	4a24      	ldr	r2, [pc, #144]	; (801713c <HAL_PCD_MspInit+0xbc>)
 80170ac:	f043 0301 	orr.w	r3, r3, #1
 80170b0:	6313      	str	r3, [r2, #48]	; 0x30
 80170b2:	4b22      	ldr	r3, [pc, #136]	; (801713c <HAL_PCD_MspInit+0xbc>)
 80170b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80170b6:	f003 0301 	and.w	r3, r3, #1
 80170ba:	613b      	str	r3, [r7, #16]
 80170bc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80170be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80170c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80170c4:	2300      	movs	r3, #0
 80170c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80170c8:	2300      	movs	r3, #0
 80170ca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80170cc:	f107 0314 	add.w	r3, r7, #20
 80170d0:	4619      	mov	r1, r3
 80170d2:	481b      	ldr	r0, [pc, #108]	; (8017140 <HAL_PCD_MspInit+0xc0>)
 80170d4:	f7ef fddc 	bl	8006c90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 80170d8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80170dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80170de:	2302      	movs	r3, #2
 80170e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80170e2:	2300      	movs	r3, #0
 80170e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80170e6:	2300      	movs	r3, #0
 80170e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80170ea:	230a      	movs	r3, #10
 80170ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80170ee:	f107 0314 	add.w	r3, r7, #20
 80170f2:	4619      	mov	r1, r3
 80170f4:	4812      	ldr	r0, [pc, #72]	; (8017140 <HAL_PCD_MspInit+0xc0>)
 80170f6:	f7ef fdcb 	bl	8006c90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80170fa:	4b10      	ldr	r3, [pc, #64]	; (801713c <HAL_PCD_MspInit+0xbc>)
 80170fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80170fe:	4a0f      	ldr	r2, [pc, #60]	; (801713c <HAL_PCD_MspInit+0xbc>)
 8017100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017104:	6353      	str	r3, [r2, #52]	; 0x34
 8017106:	2300      	movs	r3, #0
 8017108:	60fb      	str	r3, [r7, #12]
 801710a:	4b0c      	ldr	r3, [pc, #48]	; (801713c <HAL_PCD_MspInit+0xbc>)
 801710c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801710e:	4a0b      	ldr	r2, [pc, #44]	; (801713c <HAL_PCD_MspInit+0xbc>)
 8017110:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017114:	6453      	str	r3, [r2, #68]	; 0x44
 8017116:	4b09      	ldr	r3, [pc, #36]	; (801713c <HAL_PCD_MspInit+0xbc>)
 8017118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801711a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801711e:	60fb      	str	r3, [r7, #12]
 8017120:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8017122:	2200      	movs	r2, #0
 8017124:	2105      	movs	r1, #5
 8017126:	2043      	movs	r0, #67	; 0x43
 8017128:	f7ef f91a 	bl	8006360 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801712c:	2043      	movs	r0, #67	; 0x43
 801712e:	f7ef f933 	bl	8006398 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017132:	bf00      	nop
 8017134:	3728      	adds	r7, #40	; 0x28
 8017136:	46bd      	mov	sp, r7
 8017138:	bd80      	pop	{r7, pc}
 801713a:	bf00      	nop
 801713c:	40023800 	.word	0x40023800
 8017140:	40020000 	.word	0x40020000

08017144 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017144:	b580      	push	{r7, lr}
 8017146:	b082      	sub	sp, #8
 8017148:	af00      	add	r7, sp, #0
 801714a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801714c:	687b      	ldr	r3, [r7, #4]
 801714e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8017158:	4619      	mov	r1, r3
 801715a:	4610      	mov	r0, r2
 801715c:	f7f7 f9de 	bl	800e51c <USBD_LL_SetupStage>
}
 8017160:	bf00      	nop
 8017162:	3708      	adds	r7, #8
 8017164:	46bd      	mov	sp, r7
 8017166:	bd80      	pop	{r7, pc}

08017168 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017168:	b580      	push	{r7, lr}
 801716a:	b082      	sub	sp, #8
 801716c:	af00      	add	r7, sp, #0
 801716e:	6078      	str	r0, [r7, #4]
 8017170:	460b      	mov	r3, r1
 8017172:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801717a:	78fa      	ldrb	r2, [r7, #3]
 801717c:	6879      	ldr	r1, [r7, #4]
 801717e:	4613      	mov	r3, r2
 8017180:	00db      	lsls	r3, r3, #3
 8017182:	1a9b      	subs	r3, r3, r2
 8017184:	009b      	lsls	r3, r3, #2
 8017186:	440b      	add	r3, r1
 8017188:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801718c:	681a      	ldr	r2, [r3, #0]
 801718e:	78fb      	ldrb	r3, [r7, #3]
 8017190:	4619      	mov	r1, r3
 8017192:	f7f7 fa18 	bl	800e5c6 <USBD_LL_DataOutStage>
}
 8017196:	bf00      	nop
 8017198:	3708      	adds	r7, #8
 801719a:	46bd      	mov	sp, r7
 801719c:	bd80      	pop	{r7, pc}

0801719e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801719e:	b580      	push	{r7, lr}
 80171a0:	b082      	sub	sp, #8
 80171a2:	af00      	add	r7, sp, #0
 80171a4:	6078      	str	r0, [r7, #4]
 80171a6:	460b      	mov	r3, r1
 80171a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80171b0:	78fa      	ldrb	r2, [r7, #3]
 80171b2:	6879      	ldr	r1, [r7, #4]
 80171b4:	4613      	mov	r3, r2
 80171b6:	00db      	lsls	r3, r3, #3
 80171b8:	1a9b      	subs	r3, r3, r2
 80171ba:	009b      	lsls	r3, r3, #2
 80171bc:	440b      	add	r3, r1
 80171be:	3348      	adds	r3, #72	; 0x48
 80171c0:	681a      	ldr	r2, [r3, #0]
 80171c2:	78fb      	ldrb	r3, [r7, #3]
 80171c4:	4619      	mov	r1, r3
 80171c6:	f7f7 fa61 	bl	800e68c <USBD_LL_DataInStage>
}
 80171ca:	bf00      	nop
 80171cc:	3708      	adds	r7, #8
 80171ce:	46bd      	mov	sp, r7
 80171d0:	bd80      	pop	{r7, pc}

080171d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80171d2:	b580      	push	{r7, lr}
 80171d4:	b082      	sub	sp, #8
 80171d6:	af00      	add	r7, sp, #0
 80171d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80171e0:	4618      	mov	r0, r3
 80171e2:	f7f7 fb75 	bl	800e8d0 <USBD_LL_SOF>
}
 80171e6:	bf00      	nop
 80171e8:	3708      	adds	r7, #8
 80171ea:	46bd      	mov	sp, r7
 80171ec:	bd80      	pop	{r7, pc}

080171ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80171ee:	b580      	push	{r7, lr}
 80171f0:	b084      	sub	sp, #16
 80171f2:	af00      	add	r7, sp, #0
 80171f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80171f6:	2301      	movs	r3, #1
 80171f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	68db      	ldr	r3, [r3, #12]
 80171fe:	2b00      	cmp	r3, #0
 8017200:	d102      	bne.n	8017208 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017202:	2300      	movs	r3, #0
 8017204:	73fb      	strb	r3, [r7, #15]
 8017206:	e008      	b.n	801721a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	68db      	ldr	r3, [r3, #12]
 801720c:	2b02      	cmp	r3, #2
 801720e:	d102      	bne.n	8017216 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017210:	2301      	movs	r3, #1
 8017212:	73fb      	strb	r3, [r7, #15]
 8017214:	e001      	b.n	801721a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017216:	f7ed fdb5 	bl	8004d84 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017220:	7bfa      	ldrb	r2, [r7, #15]
 8017222:	4611      	mov	r1, r2
 8017224:	4618      	mov	r0, r3
 8017226:	f7f7 fb15 	bl	800e854 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017230:	4618      	mov	r0, r3
 8017232:	f7f7 fac1 	bl	800e7b8 <USBD_LL_Reset>
}
 8017236:	bf00      	nop
 8017238:	3710      	adds	r7, #16
 801723a:	46bd      	mov	sp, r7
 801723c:	bd80      	pop	{r7, pc}
	...

08017240 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017240:	b580      	push	{r7, lr}
 8017242:	b082      	sub	sp, #8
 8017244:	af00      	add	r7, sp, #0
 8017246:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801724e:	4618      	mov	r0, r3
 8017250:	f7f7 fb10 	bl	800e874 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	681b      	ldr	r3, [r3, #0]
 8017258:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	687a      	ldr	r2, [r7, #4]
 8017260:	6812      	ldr	r2, [r2, #0]
 8017262:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8017266:	f043 0301 	orr.w	r3, r3, #1
 801726a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	6a1b      	ldr	r3, [r3, #32]
 8017270:	2b00      	cmp	r3, #0
 8017272:	d005      	beq.n	8017280 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8017274:	4b04      	ldr	r3, [pc, #16]	; (8017288 <HAL_PCD_SuspendCallback+0x48>)
 8017276:	691b      	ldr	r3, [r3, #16]
 8017278:	4a03      	ldr	r2, [pc, #12]	; (8017288 <HAL_PCD_SuspendCallback+0x48>)
 801727a:	f043 0306 	orr.w	r3, r3, #6
 801727e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8017280:	bf00      	nop
 8017282:	3708      	adds	r7, #8
 8017284:	46bd      	mov	sp, r7
 8017286:	bd80      	pop	{r7, pc}
 8017288:	e000ed00 	.word	0xe000ed00

0801728c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801728c:	b580      	push	{r7, lr}
 801728e:	b082      	sub	sp, #8
 8017290:	af00      	add	r7, sp, #0
 8017292:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017294:	687b      	ldr	r3, [r7, #4]
 8017296:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801729a:	4618      	mov	r0, r3
 801729c:	f7f7 fb00 	bl	800e8a0 <USBD_LL_Resume>
}
 80172a0:	bf00      	nop
 80172a2:	3708      	adds	r7, #8
 80172a4:	46bd      	mov	sp, r7
 80172a6:	bd80      	pop	{r7, pc}

080172a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172a8:	b580      	push	{r7, lr}
 80172aa:	b082      	sub	sp, #8
 80172ac:	af00      	add	r7, sp, #0
 80172ae:	6078      	str	r0, [r7, #4]
 80172b0:	460b      	mov	r3, r1
 80172b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80172ba:	78fa      	ldrb	r2, [r7, #3]
 80172bc:	4611      	mov	r1, r2
 80172be:	4618      	mov	r0, r3
 80172c0:	f7f7 fb4e 	bl	800e960 <USBD_LL_IsoOUTIncomplete>
}
 80172c4:	bf00      	nop
 80172c6:	3708      	adds	r7, #8
 80172c8:	46bd      	mov	sp, r7
 80172ca:	bd80      	pop	{r7, pc}

080172cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172cc:	b580      	push	{r7, lr}
 80172ce:	b082      	sub	sp, #8
 80172d0:	af00      	add	r7, sp, #0
 80172d2:	6078      	str	r0, [r7, #4]
 80172d4:	460b      	mov	r3, r1
 80172d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80172de:	78fa      	ldrb	r2, [r7, #3]
 80172e0:	4611      	mov	r1, r2
 80172e2:	4618      	mov	r0, r3
 80172e4:	f7f7 fb16 	bl	800e914 <USBD_LL_IsoINIncomplete>
}
 80172e8:	bf00      	nop
 80172ea:	3708      	adds	r7, #8
 80172ec:	46bd      	mov	sp, r7
 80172ee:	bd80      	pop	{r7, pc}

080172f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80172f0:	b580      	push	{r7, lr}
 80172f2:	b082      	sub	sp, #8
 80172f4:	af00      	add	r7, sp, #0
 80172f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80172f8:	687b      	ldr	r3, [r7, #4]
 80172fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80172fe:	4618      	mov	r0, r3
 8017300:	f7f7 fb54 	bl	800e9ac <USBD_LL_DevConnected>
}
 8017304:	bf00      	nop
 8017306:	3708      	adds	r7, #8
 8017308:	46bd      	mov	sp, r7
 801730a:	bd80      	pop	{r7, pc}

0801730c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801730c:	b580      	push	{r7, lr}
 801730e:	b082      	sub	sp, #8
 8017310:	af00      	add	r7, sp, #0
 8017312:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801731a:	4618      	mov	r0, r3
 801731c:	f7f7 fb51 	bl	800e9c2 <USBD_LL_DevDisconnected>
}
 8017320:	bf00      	nop
 8017322:	3708      	adds	r7, #8
 8017324:	46bd      	mov	sp, r7
 8017326:	bd80      	pop	{r7, pc}

08017328 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017328:	b580      	push	{r7, lr}
 801732a:	b082      	sub	sp, #8
 801732c:	af00      	add	r7, sp, #0
 801732e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8017330:	687b      	ldr	r3, [r7, #4]
 8017332:	781b      	ldrb	r3, [r3, #0]
 8017334:	2b00      	cmp	r3, #0
 8017336:	d13c      	bne.n	80173b2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8017338:	4a20      	ldr	r2, [pc, #128]	; (80173bc <USBD_LL_Init+0x94>)
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	4a1e      	ldr	r2, [pc, #120]	; (80173bc <USBD_LL_Init+0x94>)
 8017344:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8017348:	4b1c      	ldr	r3, [pc, #112]	; (80173bc <USBD_LL_Init+0x94>)
 801734a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801734e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8017350:	4b1a      	ldr	r3, [pc, #104]	; (80173bc <USBD_LL_Init+0x94>)
 8017352:	2204      	movs	r2, #4
 8017354:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8017356:	4b19      	ldr	r3, [pc, #100]	; (80173bc <USBD_LL_Init+0x94>)
 8017358:	2202      	movs	r2, #2
 801735a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801735c:	4b17      	ldr	r3, [pc, #92]	; (80173bc <USBD_LL_Init+0x94>)
 801735e:	2200      	movs	r2, #0
 8017360:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8017362:	4b16      	ldr	r3, [pc, #88]	; (80173bc <USBD_LL_Init+0x94>)
 8017364:	2202      	movs	r2, #2
 8017366:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8017368:	4b14      	ldr	r3, [pc, #80]	; (80173bc <USBD_LL_Init+0x94>)
 801736a:	2200      	movs	r2, #0
 801736c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801736e:	4b13      	ldr	r3, [pc, #76]	; (80173bc <USBD_LL_Init+0x94>)
 8017370:	2200      	movs	r2, #0
 8017372:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8017374:	4b11      	ldr	r3, [pc, #68]	; (80173bc <USBD_LL_Init+0x94>)
 8017376:	2200      	movs	r2, #0
 8017378:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801737a:	4b10      	ldr	r3, [pc, #64]	; (80173bc <USBD_LL_Init+0x94>)
 801737c:	2200      	movs	r2, #0
 801737e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8017380:	4b0e      	ldr	r3, [pc, #56]	; (80173bc <USBD_LL_Init+0x94>)
 8017382:	2200      	movs	r2, #0
 8017384:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8017386:	480d      	ldr	r0, [pc, #52]	; (80173bc <USBD_LL_Init+0x94>)
 8017388:	f7f1 f9ef 	bl	800876a <HAL_PCD_Init>
 801738c:	4603      	mov	r3, r0
 801738e:	2b00      	cmp	r3, #0
 8017390:	d001      	beq.n	8017396 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8017392:	f7ed fcf7 	bl	8004d84 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8017396:	2180      	movs	r1, #128	; 0x80
 8017398:	4808      	ldr	r0, [pc, #32]	; (80173bc <USBD_LL_Init+0x94>)
 801739a:	f7f2 fb4c 	bl	8009a36 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801739e:	2240      	movs	r2, #64	; 0x40
 80173a0:	2100      	movs	r1, #0
 80173a2:	4806      	ldr	r0, [pc, #24]	; (80173bc <USBD_LL_Init+0x94>)
 80173a4:	f7f2 fb00 	bl	80099a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80173a8:	2280      	movs	r2, #128	; 0x80
 80173aa:	2101      	movs	r1, #1
 80173ac:	4803      	ldr	r0, [pc, #12]	; (80173bc <USBD_LL_Init+0x94>)
 80173ae:	f7f2 fafb 	bl	80099a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80173b2:	2300      	movs	r3, #0
}
 80173b4:	4618      	mov	r0, r3
 80173b6:	3708      	adds	r7, #8
 80173b8:	46bd      	mov	sp, r7
 80173ba:	bd80      	pop	{r7, pc}
 80173bc:	200143e8 	.word	0x200143e8

080173c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80173c0:	b580      	push	{r7, lr}
 80173c2:	b084      	sub	sp, #16
 80173c4:	af00      	add	r7, sp, #0
 80173c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80173c8:	2300      	movs	r3, #0
 80173ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80173cc:	2300      	movs	r3, #0
 80173ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80173d6:	4618      	mov	r0, r3
 80173d8:	f7f1 fae4 	bl	80089a4 <HAL_PCD_Start>
 80173dc:	4603      	mov	r3, r0
 80173de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80173e0:	7bfb      	ldrb	r3, [r7, #15]
 80173e2:	4618      	mov	r0, r3
 80173e4:	f000 f942 	bl	801766c <USBD_Get_USB_Status>
 80173e8:	4603      	mov	r3, r0
 80173ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80173ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80173ee:	4618      	mov	r0, r3
 80173f0:	3710      	adds	r7, #16
 80173f2:	46bd      	mov	sp, r7
 80173f4:	bd80      	pop	{r7, pc}

080173f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80173f6:	b580      	push	{r7, lr}
 80173f8:	b084      	sub	sp, #16
 80173fa:	af00      	add	r7, sp, #0
 80173fc:	6078      	str	r0, [r7, #4]
 80173fe:	4608      	mov	r0, r1
 8017400:	4611      	mov	r1, r2
 8017402:	461a      	mov	r2, r3
 8017404:	4603      	mov	r3, r0
 8017406:	70fb      	strb	r3, [r7, #3]
 8017408:	460b      	mov	r3, r1
 801740a:	70bb      	strb	r3, [r7, #2]
 801740c:	4613      	mov	r3, r2
 801740e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017410:	2300      	movs	r3, #0
 8017412:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017414:	2300      	movs	r3, #0
 8017416:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801741e:	78bb      	ldrb	r3, [r7, #2]
 8017420:	883a      	ldrh	r2, [r7, #0]
 8017422:	78f9      	ldrb	r1, [r7, #3]
 8017424:	f7f1 fec8 	bl	80091b8 <HAL_PCD_EP_Open>
 8017428:	4603      	mov	r3, r0
 801742a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801742c:	7bfb      	ldrb	r3, [r7, #15]
 801742e:	4618      	mov	r0, r3
 8017430:	f000 f91c 	bl	801766c <USBD_Get_USB_Status>
 8017434:	4603      	mov	r3, r0
 8017436:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017438:	7bbb      	ldrb	r3, [r7, #14]
}
 801743a:	4618      	mov	r0, r3
 801743c:	3710      	adds	r7, #16
 801743e:	46bd      	mov	sp, r7
 8017440:	bd80      	pop	{r7, pc}

08017442 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017442:	b580      	push	{r7, lr}
 8017444:	b084      	sub	sp, #16
 8017446:	af00      	add	r7, sp, #0
 8017448:	6078      	str	r0, [r7, #4]
 801744a:	460b      	mov	r3, r1
 801744c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801744e:	2300      	movs	r3, #0
 8017450:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017452:	2300      	movs	r3, #0
 8017454:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801745c:	78fa      	ldrb	r2, [r7, #3]
 801745e:	4611      	mov	r1, r2
 8017460:	4618      	mov	r0, r3
 8017462:	f7f1 ff11 	bl	8009288 <HAL_PCD_EP_Close>
 8017466:	4603      	mov	r3, r0
 8017468:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801746a:	7bfb      	ldrb	r3, [r7, #15]
 801746c:	4618      	mov	r0, r3
 801746e:	f000 f8fd 	bl	801766c <USBD_Get_USB_Status>
 8017472:	4603      	mov	r3, r0
 8017474:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017476:	7bbb      	ldrb	r3, [r7, #14]
}
 8017478:	4618      	mov	r0, r3
 801747a:	3710      	adds	r7, #16
 801747c:	46bd      	mov	sp, r7
 801747e:	bd80      	pop	{r7, pc}

08017480 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017480:	b580      	push	{r7, lr}
 8017482:	b084      	sub	sp, #16
 8017484:	af00      	add	r7, sp, #0
 8017486:	6078      	str	r0, [r7, #4]
 8017488:	460b      	mov	r3, r1
 801748a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801748c:	2300      	movs	r3, #0
 801748e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017490:	2300      	movs	r3, #0
 8017492:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017494:	687b      	ldr	r3, [r7, #4]
 8017496:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801749a:	78fa      	ldrb	r2, [r7, #3]
 801749c:	4611      	mov	r1, r2
 801749e:	4618      	mov	r0, r3
 80174a0:	f7f1 ffe9 	bl	8009476 <HAL_PCD_EP_SetStall>
 80174a4:	4603      	mov	r3, r0
 80174a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80174a8:	7bfb      	ldrb	r3, [r7, #15]
 80174aa:	4618      	mov	r0, r3
 80174ac:	f000 f8de 	bl	801766c <USBD_Get_USB_Status>
 80174b0:	4603      	mov	r3, r0
 80174b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80174b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80174b6:	4618      	mov	r0, r3
 80174b8:	3710      	adds	r7, #16
 80174ba:	46bd      	mov	sp, r7
 80174bc:	bd80      	pop	{r7, pc}

080174be <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80174be:	b580      	push	{r7, lr}
 80174c0:	b084      	sub	sp, #16
 80174c2:	af00      	add	r7, sp, #0
 80174c4:	6078      	str	r0, [r7, #4]
 80174c6:	460b      	mov	r3, r1
 80174c8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80174ca:	2300      	movs	r3, #0
 80174cc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80174ce:	2300      	movs	r3, #0
 80174d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80174d8:	78fa      	ldrb	r2, [r7, #3]
 80174da:	4611      	mov	r1, r2
 80174dc:	4618      	mov	r0, r3
 80174de:	f7f2 f82e 	bl	800953e <HAL_PCD_EP_ClrStall>
 80174e2:	4603      	mov	r3, r0
 80174e4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80174e6:	7bfb      	ldrb	r3, [r7, #15]
 80174e8:	4618      	mov	r0, r3
 80174ea:	f000 f8bf 	bl	801766c <USBD_Get_USB_Status>
 80174ee:	4603      	mov	r3, r0
 80174f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80174f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80174f4:	4618      	mov	r0, r3
 80174f6:	3710      	adds	r7, #16
 80174f8:	46bd      	mov	sp, r7
 80174fa:	bd80      	pop	{r7, pc}

080174fc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80174fc:	b480      	push	{r7}
 80174fe:	b085      	sub	sp, #20
 8017500:	af00      	add	r7, sp, #0
 8017502:	6078      	str	r0, [r7, #4]
 8017504:	460b      	mov	r3, r1
 8017506:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801750e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017510:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017514:	2b00      	cmp	r3, #0
 8017516:	da0b      	bge.n	8017530 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017518:	78fb      	ldrb	r3, [r7, #3]
 801751a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801751e:	68f9      	ldr	r1, [r7, #12]
 8017520:	4613      	mov	r3, r2
 8017522:	00db      	lsls	r3, r3, #3
 8017524:	1a9b      	subs	r3, r3, r2
 8017526:	009b      	lsls	r3, r3, #2
 8017528:	440b      	add	r3, r1
 801752a:	333e      	adds	r3, #62	; 0x3e
 801752c:	781b      	ldrb	r3, [r3, #0]
 801752e:	e00b      	b.n	8017548 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017530:	78fb      	ldrb	r3, [r7, #3]
 8017532:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017536:	68f9      	ldr	r1, [r7, #12]
 8017538:	4613      	mov	r3, r2
 801753a:	00db      	lsls	r3, r3, #3
 801753c:	1a9b      	subs	r3, r3, r2
 801753e:	009b      	lsls	r3, r3, #2
 8017540:	440b      	add	r3, r1
 8017542:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017546:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017548:	4618      	mov	r0, r3
 801754a:	3714      	adds	r7, #20
 801754c:	46bd      	mov	sp, r7
 801754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017552:	4770      	bx	lr

08017554 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8017554:	b580      	push	{r7, lr}
 8017556:	b084      	sub	sp, #16
 8017558:	af00      	add	r7, sp, #0
 801755a:	6078      	str	r0, [r7, #4]
 801755c:	460b      	mov	r3, r1
 801755e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017560:	2300      	movs	r3, #0
 8017562:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017564:	2300      	movs	r3, #0
 8017566:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801756e:	78fa      	ldrb	r2, [r7, #3]
 8017570:	4611      	mov	r1, r2
 8017572:	4618      	mov	r0, r3
 8017574:	f7f1 fdfb 	bl	800916e <HAL_PCD_SetAddress>
 8017578:	4603      	mov	r3, r0
 801757a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801757c:	7bfb      	ldrb	r3, [r7, #15]
 801757e:	4618      	mov	r0, r3
 8017580:	f000 f874 	bl	801766c <USBD_Get_USB_Status>
 8017584:	4603      	mov	r3, r0
 8017586:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017588:	7bbb      	ldrb	r3, [r7, #14]
}
 801758a:	4618      	mov	r0, r3
 801758c:	3710      	adds	r7, #16
 801758e:	46bd      	mov	sp, r7
 8017590:	bd80      	pop	{r7, pc}

08017592 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8017592:	b580      	push	{r7, lr}
 8017594:	b086      	sub	sp, #24
 8017596:	af00      	add	r7, sp, #0
 8017598:	60f8      	str	r0, [r7, #12]
 801759a:	607a      	str	r2, [r7, #4]
 801759c:	603b      	str	r3, [r7, #0]
 801759e:	460b      	mov	r3, r1
 80175a0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80175a2:	2300      	movs	r3, #0
 80175a4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80175a6:	2300      	movs	r3, #0
 80175a8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80175aa:	68fb      	ldr	r3, [r7, #12]
 80175ac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80175b0:	7af9      	ldrb	r1, [r7, #11]
 80175b2:	683b      	ldr	r3, [r7, #0]
 80175b4:	687a      	ldr	r2, [r7, #4]
 80175b6:	f7f1 ff14 	bl	80093e2 <HAL_PCD_EP_Transmit>
 80175ba:	4603      	mov	r3, r0
 80175bc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80175be:	7dfb      	ldrb	r3, [r7, #23]
 80175c0:	4618      	mov	r0, r3
 80175c2:	f000 f853 	bl	801766c <USBD_Get_USB_Status>
 80175c6:	4603      	mov	r3, r0
 80175c8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80175ca:	7dbb      	ldrb	r3, [r7, #22]
}
 80175cc:	4618      	mov	r0, r3
 80175ce:	3718      	adds	r7, #24
 80175d0:	46bd      	mov	sp, r7
 80175d2:	bd80      	pop	{r7, pc}

080175d4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b086      	sub	sp, #24
 80175d8:	af00      	add	r7, sp, #0
 80175da:	60f8      	str	r0, [r7, #12]
 80175dc:	607a      	str	r2, [r7, #4]
 80175de:	603b      	str	r3, [r7, #0]
 80175e0:	460b      	mov	r3, r1
 80175e2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80175e4:	2300      	movs	r3, #0
 80175e6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80175e8:	2300      	movs	r3, #0
 80175ea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80175ec:	68fb      	ldr	r3, [r7, #12]
 80175ee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80175f2:	7af9      	ldrb	r1, [r7, #11]
 80175f4:	683b      	ldr	r3, [r7, #0]
 80175f6:	687a      	ldr	r2, [r7, #4]
 80175f8:	f7f1 fe90 	bl	800931c <HAL_PCD_EP_Receive>
 80175fc:	4603      	mov	r3, r0
 80175fe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017600:	7dfb      	ldrb	r3, [r7, #23]
 8017602:	4618      	mov	r0, r3
 8017604:	f000 f832 	bl	801766c <USBD_Get_USB_Status>
 8017608:	4603      	mov	r3, r0
 801760a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801760c:	7dbb      	ldrb	r3, [r7, #22]
}
 801760e:	4618      	mov	r0, r3
 8017610:	3718      	adds	r7, #24
 8017612:	46bd      	mov	sp, r7
 8017614:	bd80      	pop	{r7, pc}

08017616 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017616:	b580      	push	{r7, lr}
 8017618:	b082      	sub	sp, #8
 801761a:	af00      	add	r7, sp, #0
 801761c:	6078      	str	r0, [r7, #4]
 801761e:	460b      	mov	r3, r1
 8017620:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8017628:	78fa      	ldrb	r2, [r7, #3]
 801762a:	4611      	mov	r1, r2
 801762c:	4618      	mov	r0, r3
 801762e:	f7f1 fec0 	bl	80093b2 <HAL_PCD_EP_GetRxCount>
 8017632:	4603      	mov	r3, r0
}
 8017634:	4618      	mov	r0, r3
 8017636:	3708      	adds	r7, #8
 8017638:	46bd      	mov	sp, r7
 801763a:	bd80      	pop	{r7, pc}

0801763c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801763c:	b480      	push	{r7}
 801763e:	b083      	sub	sp, #12
 8017640:	af00      	add	r7, sp, #0
 8017642:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8017644:	4b03      	ldr	r3, [pc, #12]	; (8017654 <USBD_static_malloc+0x18>)
}
 8017646:	4618      	mov	r0, r3
 8017648:	370c      	adds	r7, #12
 801764a:	46bd      	mov	sp, r7
 801764c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017650:	4770      	bx	lr
 8017652:	bf00      	nop
 8017654:	2000744c 	.word	0x2000744c

08017658 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8017658:	b480      	push	{r7}
 801765a:	b083      	sub	sp, #12
 801765c:	af00      	add	r7, sp, #0
 801765e:	6078      	str	r0, [r7, #4]

}
 8017660:	bf00      	nop
 8017662:	370c      	adds	r7, #12
 8017664:	46bd      	mov	sp, r7
 8017666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801766a:	4770      	bx	lr

0801766c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801766c:	b480      	push	{r7}
 801766e:	b085      	sub	sp, #20
 8017670:	af00      	add	r7, sp, #0
 8017672:	4603      	mov	r3, r0
 8017674:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017676:	2300      	movs	r3, #0
 8017678:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801767a:	79fb      	ldrb	r3, [r7, #7]
 801767c:	2b03      	cmp	r3, #3
 801767e:	d817      	bhi.n	80176b0 <USBD_Get_USB_Status+0x44>
 8017680:	a201      	add	r2, pc, #4	; (adr r2, 8017688 <USBD_Get_USB_Status+0x1c>)
 8017682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017686:	bf00      	nop
 8017688:	08017699 	.word	0x08017699
 801768c:	0801769f 	.word	0x0801769f
 8017690:	080176a5 	.word	0x080176a5
 8017694:	080176ab 	.word	0x080176ab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017698:	2300      	movs	r3, #0
 801769a:	73fb      	strb	r3, [r7, #15]
    break;
 801769c:	e00b      	b.n	80176b6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801769e:	2303      	movs	r3, #3
 80176a0:	73fb      	strb	r3, [r7, #15]
    break;
 80176a2:	e008      	b.n	80176b6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80176a4:	2301      	movs	r3, #1
 80176a6:	73fb      	strb	r3, [r7, #15]
    break;
 80176a8:	e005      	b.n	80176b6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80176aa:	2303      	movs	r3, #3
 80176ac:	73fb      	strb	r3, [r7, #15]
    break;
 80176ae:	e002      	b.n	80176b6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80176b0:	2303      	movs	r3, #3
 80176b2:	73fb      	strb	r3, [r7, #15]
    break;
 80176b4:	bf00      	nop
  }
  return usb_status;
 80176b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80176b8:	4618      	mov	r0, r3
 80176ba:	3714      	adds	r7, #20
 80176bc:	46bd      	mov	sp, r7
 80176be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c2:	4770      	bx	lr

080176c4 <__errno>:
 80176c4:	4b01      	ldr	r3, [pc, #4]	; (80176cc <__errno+0x8>)
 80176c6:	6818      	ldr	r0, [r3, #0]
 80176c8:	4770      	bx	lr
 80176ca:	bf00      	nop
 80176cc:	200001c8 	.word	0x200001c8

080176d0 <std>:
 80176d0:	2300      	movs	r3, #0
 80176d2:	b510      	push	{r4, lr}
 80176d4:	4604      	mov	r4, r0
 80176d6:	e9c0 3300 	strd	r3, r3, [r0]
 80176da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80176de:	6083      	str	r3, [r0, #8]
 80176e0:	8181      	strh	r1, [r0, #12]
 80176e2:	6643      	str	r3, [r0, #100]	; 0x64
 80176e4:	81c2      	strh	r2, [r0, #14]
 80176e6:	6183      	str	r3, [r0, #24]
 80176e8:	4619      	mov	r1, r3
 80176ea:	2208      	movs	r2, #8
 80176ec:	305c      	adds	r0, #92	; 0x5c
 80176ee:	f000 f945 	bl	801797c <memset>
 80176f2:	4b05      	ldr	r3, [pc, #20]	; (8017708 <std+0x38>)
 80176f4:	6263      	str	r3, [r4, #36]	; 0x24
 80176f6:	4b05      	ldr	r3, [pc, #20]	; (801770c <std+0x3c>)
 80176f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80176fa:	4b05      	ldr	r3, [pc, #20]	; (8017710 <std+0x40>)
 80176fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80176fe:	4b05      	ldr	r3, [pc, #20]	; (8017714 <std+0x44>)
 8017700:	6224      	str	r4, [r4, #32]
 8017702:	6323      	str	r3, [r4, #48]	; 0x30
 8017704:	bd10      	pop	{r4, pc}
 8017706:	bf00      	nop
 8017708:	080184e9 	.word	0x080184e9
 801770c:	0801850b 	.word	0x0801850b
 8017710:	08018543 	.word	0x08018543
 8017714:	08018567 	.word	0x08018567

08017718 <_cleanup_r>:
 8017718:	4901      	ldr	r1, [pc, #4]	; (8017720 <_cleanup_r+0x8>)
 801771a:	f000 b8af 	b.w	801787c <_fwalk_reent>
 801771e:	bf00      	nop
 8017720:	08019465 	.word	0x08019465

08017724 <__sfmoreglue>:
 8017724:	b570      	push	{r4, r5, r6, lr}
 8017726:	1e4a      	subs	r2, r1, #1
 8017728:	2568      	movs	r5, #104	; 0x68
 801772a:	4355      	muls	r5, r2
 801772c:	460e      	mov	r6, r1
 801772e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017732:	f000 f97b 	bl	8017a2c <_malloc_r>
 8017736:	4604      	mov	r4, r0
 8017738:	b140      	cbz	r0, 801774c <__sfmoreglue+0x28>
 801773a:	2100      	movs	r1, #0
 801773c:	e9c0 1600 	strd	r1, r6, [r0]
 8017740:	300c      	adds	r0, #12
 8017742:	60a0      	str	r0, [r4, #8]
 8017744:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017748:	f000 f918 	bl	801797c <memset>
 801774c:	4620      	mov	r0, r4
 801774e:	bd70      	pop	{r4, r5, r6, pc}

08017750 <__sfp_lock_acquire>:
 8017750:	4801      	ldr	r0, [pc, #4]	; (8017758 <__sfp_lock_acquire+0x8>)
 8017752:	f000 b8f2 	b.w	801793a <__retarget_lock_acquire_recursive>
 8017756:	bf00      	nop
 8017758:	200147f8 	.word	0x200147f8

0801775c <__sfp_lock_release>:
 801775c:	4801      	ldr	r0, [pc, #4]	; (8017764 <__sfp_lock_release+0x8>)
 801775e:	f000 b8ed 	b.w	801793c <__retarget_lock_release_recursive>
 8017762:	bf00      	nop
 8017764:	200147f8 	.word	0x200147f8

08017768 <__sinit_lock_acquire>:
 8017768:	4801      	ldr	r0, [pc, #4]	; (8017770 <__sinit_lock_acquire+0x8>)
 801776a:	f000 b8e6 	b.w	801793a <__retarget_lock_acquire_recursive>
 801776e:	bf00      	nop
 8017770:	200147f3 	.word	0x200147f3

08017774 <__sinit_lock_release>:
 8017774:	4801      	ldr	r0, [pc, #4]	; (801777c <__sinit_lock_release+0x8>)
 8017776:	f000 b8e1 	b.w	801793c <__retarget_lock_release_recursive>
 801777a:	bf00      	nop
 801777c:	200147f3 	.word	0x200147f3

08017780 <__sinit>:
 8017780:	b510      	push	{r4, lr}
 8017782:	4604      	mov	r4, r0
 8017784:	f7ff fff0 	bl	8017768 <__sinit_lock_acquire>
 8017788:	69a3      	ldr	r3, [r4, #24]
 801778a:	b11b      	cbz	r3, 8017794 <__sinit+0x14>
 801778c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017790:	f7ff bff0 	b.w	8017774 <__sinit_lock_release>
 8017794:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017798:	6523      	str	r3, [r4, #80]	; 0x50
 801779a:	4b13      	ldr	r3, [pc, #76]	; (80177e8 <__sinit+0x68>)
 801779c:	4a13      	ldr	r2, [pc, #76]	; (80177ec <__sinit+0x6c>)
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80177a2:	42a3      	cmp	r3, r4
 80177a4:	bf04      	itt	eq
 80177a6:	2301      	moveq	r3, #1
 80177a8:	61a3      	streq	r3, [r4, #24]
 80177aa:	4620      	mov	r0, r4
 80177ac:	f000 f820 	bl	80177f0 <__sfp>
 80177b0:	6060      	str	r0, [r4, #4]
 80177b2:	4620      	mov	r0, r4
 80177b4:	f000 f81c 	bl	80177f0 <__sfp>
 80177b8:	60a0      	str	r0, [r4, #8]
 80177ba:	4620      	mov	r0, r4
 80177bc:	f000 f818 	bl	80177f0 <__sfp>
 80177c0:	2200      	movs	r2, #0
 80177c2:	60e0      	str	r0, [r4, #12]
 80177c4:	2104      	movs	r1, #4
 80177c6:	6860      	ldr	r0, [r4, #4]
 80177c8:	f7ff ff82 	bl	80176d0 <std>
 80177cc:	68a0      	ldr	r0, [r4, #8]
 80177ce:	2201      	movs	r2, #1
 80177d0:	2109      	movs	r1, #9
 80177d2:	f7ff ff7d 	bl	80176d0 <std>
 80177d6:	68e0      	ldr	r0, [r4, #12]
 80177d8:	2202      	movs	r2, #2
 80177da:	2112      	movs	r1, #18
 80177dc:	f7ff ff78 	bl	80176d0 <std>
 80177e0:	2301      	movs	r3, #1
 80177e2:	61a3      	str	r3, [r4, #24]
 80177e4:	e7d2      	b.n	801778c <__sinit+0xc>
 80177e6:	bf00      	nop
 80177e8:	0801f0b0 	.word	0x0801f0b0
 80177ec:	08017719 	.word	0x08017719

080177f0 <__sfp>:
 80177f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80177f2:	4607      	mov	r7, r0
 80177f4:	f7ff ffac 	bl	8017750 <__sfp_lock_acquire>
 80177f8:	4b1e      	ldr	r3, [pc, #120]	; (8017874 <__sfp+0x84>)
 80177fa:	681e      	ldr	r6, [r3, #0]
 80177fc:	69b3      	ldr	r3, [r6, #24]
 80177fe:	b913      	cbnz	r3, 8017806 <__sfp+0x16>
 8017800:	4630      	mov	r0, r6
 8017802:	f7ff ffbd 	bl	8017780 <__sinit>
 8017806:	3648      	adds	r6, #72	; 0x48
 8017808:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801780c:	3b01      	subs	r3, #1
 801780e:	d503      	bpl.n	8017818 <__sfp+0x28>
 8017810:	6833      	ldr	r3, [r6, #0]
 8017812:	b30b      	cbz	r3, 8017858 <__sfp+0x68>
 8017814:	6836      	ldr	r6, [r6, #0]
 8017816:	e7f7      	b.n	8017808 <__sfp+0x18>
 8017818:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801781c:	b9d5      	cbnz	r5, 8017854 <__sfp+0x64>
 801781e:	4b16      	ldr	r3, [pc, #88]	; (8017878 <__sfp+0x88>)
 8017820:	60e3      	str	r3, [r4, #12]
 8017822:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017826:	6665      	str	r5, [r4, #100]	; 0x64
 8017828:	f000 f886 	bl	8017938 <__retarget_lock_init_recursive>
 801782c:	f7ff ff96 	bl	801775c <__sfp_lock_release>
 8017830:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017834:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017838:	6025      	str	r5, [r4, #0]
 801783a:	61a5      	str	r5, [r4, #24]
 801783c:	2208      	movs	r2, #8
 801783e:	4629      	mov	r1, r5
 8017840:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017844:	f000 f89a 	bl	801797c <memset>
 8017848:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801784c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017850:	4620      	mov	r0, r4
 8017852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017854:	3468      	adds	r4, #104	; 0x68
 8017856:	e7d9      	b.n	801780c <__sfp+0x1c>
 8017858:	2104      	movs	r1, #4
 801785a:	4638      	mov	r0, r7
 801785c:	f7ff ff62 	bl	8017724 <__sfmoreglue>
 8017860:	4604      	mov	r4, r0
 8017862:	6030      	str	r0, [r6, #0]
 8017864:	2800      	cmp	r0, #0
 8017866:	d1d5      	bne.n	8017814 <__sfp+0x24>
 8017868:	f7ff ff78 	bl	801775c <__sfp_lock_release>
 801786c:	230c      	movs	r3, #12
 801786e:	603b      	str	r3, [r7, #0]
 8017870:	e7ee      	b.n	8017850 <__sfp+0x60>
 8017872:	bf00      	nop
 8017874:	0801f0b0 	.word	0x0801f0b0
 8017878:	ffff0001 	.word	0xffff0001

0801787c <_fwalk_reent>:
 801787c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017880:	4606      	mov	r6, r0
 8017882:	4688      	mov	r8, r1
 8017884:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017888:	2700      	movs	r7, #0
 801788a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801788e:	f1b9 0901 	subs.w	r9, r9, #1
 8017892:	d505      	bpl.n	80178a0 <_fwalk_reent+0x24>
 8017894:	6824      	ldr	r4, [r4, #0]
 8017896:	2c00      	cmp	r4, #0
 8017898:	d1f7      	bne.n	801788a <_fwalk_reent+0xe>
 801789a:	4638      	mov	r0, r7
 801789c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80178a0:	89ab      	ldrh	r3, [r5, #12]
 80178a2:	2b01      	cmp	r3, #1
 80178a4:	d907      	bls.n	80178b6 <_fwalk_reent+0x3a>
 80178a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80178aa:	3301      	adds	r3, #1
 80178ac:	d003      	beq.n	80178b6 <_fwalk_reent+0x3a>
 80178ae:	4629      	mov	r1, r5
 80178b0:	4630      	mov	r0, r6
 80178b2:	47c0      	blx	r8
 80178b4:	4307      	orrs	r7, r0
 80178b6:	3568      	adds	r5, #104	; 0x68
 80178b8:	e7e9      	b.n	801788e <_fwalk_reent+0x12>
	...

080178bc <__libc_init_array>:
 80178bc:	b570      	push	{r4, r5, r6, lr}
 80178be:	4d0d      	ldr	r5, [pc, #52]	; (80178f4 <__libc_init_array+0x38>)
 80178c0:	4c0d      	ldr	r4, [pc, #52]	; (80178f8 <__libc_init_array+0x3c>)
 80178c2:	1b64      	subs	r4, r4, r5
 80178c4:	10a4      	asrs	r4, r4, #2
 80178c6:	2600      	movs	r6, #0
 80178c8:	42a6      	cmp	r6, r4
 80178ca:	d109      	bne.n	80178e0 <__libc_init_array+0x24>
 80178cc:	4d0b      	ldr	r5, [pc, #44]	; (80178fc <__libc_init_array+0x40>)
 80178ce:	4c0c      	ldr	r4, [pc, #48]	; (8017900 <__libc_init_array+0x44>)
 80178d0:	f002 fea4 	bl	801a61c <_init>
 80178d4:	1b64      	subs	r4, r4, r5
 80178d6:	10a4      	asrs	r4, r4, #2
 80178d8:	2600      	movs	r6, #0
 80178da:	42a6      	cmp	r6, r4
 80178dc:	d105      	bne.n	80178ea <__libc_init_array+0x2e>
 80178de:	bd70      	pop	{r4, r5, r6, pc}
 80178e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80178e4:	4798      	blx	r3
 80178e6:	3601      	adds	r6, #1
 80178e8:	e7ee      	b.n	80178c8 <__libc_init_array+0xc>
 80178ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80178ee:	4798      	blx	r3
 80178f0:	3601      	adds	r6, #1
 80178f2:	e7f2      	b.n	80178da <__libc_init_array+0x1e>
 80178f4:	0801f464 	.word	0x0801f464
 80178f8:	0801f464 	.word	0x0801f464
 80178fc:	0801f464 	.word	0x0801f464
 8017900:	0801f468 	.word	0x0801f468

08017904 <__itoa>:
 8017904:	1e93      	subs	r3, r2, #2
 8017906:	2b22      	cmp	r3, #34	; 0x22
 8017908:	b510      	push	{r4, lr}
 801790a:	460c      	mov	r4, r1
 801790c:	d904      	bls.n	8017918 <__itoa+0x14>
 801790e:	2300      	movs	r3, #0
 8017910:	700b      	strb	r3, [r1, #0]
 8017912:	461c      	mov	r4, r3
 8017914:	4620      	mov	r0, r4
 8017916:	bd10      	pop	{r4, pc}
 8017918:	2a0a      	cmp	r2, #10
 801791a:	d109      	bne.n	8017930 <__itoa+0x2c>
 801791c:	2800      	cmp	r0, #0
 801791e:	da07      	bge.n	8017930 <__itoa+0x2c>
 8017920:	232d      	movs	r3, #45	; 0x2d
 8017922:	700b      	strb	r3, [r1, #0]
 8017924:	4240      	negs	r0, r0
 8017926:	2101      	movs	r1, #1
 8017928:	4421      	add	r1, r4
 801792a:	f000 fe37 	bl	801859c <__utoa>
 801792e:	e7f1      	b.n	8017914 <__itoa+0x10>
 8017930:	2100      	movs	r1, #0
 8017932:	e7f9      	b.n	8017928 <__itoa+0x24>

08017934 <itoa>:
 8017934:	f7ff bfe6 	b.w	8017904 <__itoa>

08017938 <__retarget_lock_init_recursive>:
 8017938:	4770      	bx	lr

0801793a <__retarget_lock_acquire_recursive>:
 801793a:	4770      	bx	lr

0801793c <__retarget_lock_release_recursive>:
 801793c:	4770      	bx	lr
	...

08017940 <malloc>:
 8017940:	4b02      	ldr	r3, [pc, #8]	; (801794c <malloc+0xc>)
 8017942:	4601      	mov	r1, r0
 8017944:	6818      	ldr	r0, [r3, #0]
 8017946:	f000 b871 	b.w	8017a2c <_malloc_r>
 801794a:	bf00      	nop
 801794c:	200001c8 	.word	0x200001c8

08017950 <free>:
 8017950:	4b02      	ldr	r3, [pc, #8]	; (801795c <free+0xc>)
 8017952:	4601      	mov	r1, r0
 8017954:	6818      	ldr	r0, [r3, #0]
 8017956:	f000 b819 	b.w	801798c <_free_r>
 801795a:	bf00      	nop
 801795c:	200001c8 	.word	0x200001c8

08017960 <memcpy>:
 8017960:	440a      	add	r2, r1
 8017962:	4291      	cmp	r1, r2
 8017964:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8017968:	d100      	bne.n	801796c <memcpy+0xc>
 801796a:	4770      	bx	lr
 801796c:	b510      	push	{r4, lr}
 801796e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017972:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017976:	4291      	cmp	r1, r2
 8017978:	d1f9      	bne.n	801796e <memcpy+0xe>
 801797a:	bd10      	pop	{r4, pc}

0801797c <memset>:
 801797c:	4402      	add	r2, r0
 801797e:	4603      	mov	r3, r0
 8017980:	4293      	cmp	r3, r2
 8017982:	d100      	bne.n	8017986 <memset+0xa>
 8017984:	4770      	bx	lr
 8017986:	f803 1b01 	strb.w	r1, [r3], #1
 801798a:	e7f9      	b.n	8017980 <memset+0x4>

0801798c <_free_r>:
 801798c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801798e:	2900      	cmp	r1, #0
 8017990:	d048      	beq.n	8017a24 <_free_r+0x98>
 8017992:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017996:	9001      	str	r0, [sp, #4]
 8017998:	2b00      	cmp	r3, #0
 801799a:	f1a1 0404 	sub.w	r4, r1, #4
 801799e:	bfb8      	it	lt
 80179a0:	18e4      	addlt	r4, r4, r3
 80179a2:	f001 fdb1 	bl	8019508 <__malloc_lock>
 80179a6:	4a20      	ldr	r2, [pc, #128]	; (8017a28 <_free_r+0x9c>)
 80179a8:	9801      	ldr	r0, [sp, #4]
 80179aa:	6813      	ldr	r3, [r2, #0]
 80179ac:	4615      	mov	r5, r2
 80179ae:	b933      	cbnz	r3, 80179be <_free_r+0x32>
 80179b0:	6063      	str	r3, [r4, #4]
 80179b2:	6014      	str	r4, [r2, #0]
 80179b4:	b003      	add	sp, #12
 80179b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80179ba:	f001 bdab 	b.w	8019514 <__malloc_unlock>
 80179be:	42a3      	cmp	r3, r4
 80179c0:	d90b      	bls.n	80179da <_free_r+0x4e>
 80179c2:	6821      	ldr	r1, [r4, #0]
 80179c4:	1862      	adds	r2, r4, r1
 80179c6:	4293      	cmp	r3, r2
 80179c8:	bf04      	itt	eq
 80179ca:	681a      	ldreq	r2, [r3, #0]
 80179cc:	685b      	ldreq	r3, [r3, #4]
 80179ce:	6063      	str	r3, [r4, #4]
 80179d0:	bf04      	itt	eq
 80179d2:	1852      	addeq	r2, r2, r1
 80179d4:	6022      	streq	r2, [r4, #0]
 80179d6:	602c      	str	r4, [r5, #0]
 80179d8:	e7ec      	b.n	80179b4 <_free_r+0x28>
 80179da:	461a      	mov	r2, r3
 80179dc:	685b      	ldr	r3, [r3, #4]
 80179de:	b10b      	cbz	r3, 80179e4 <_free_r+0x58>
 80179e0:	42a3      	cmp	r3, r4
 80179e2:	d9fa      	bls.n	80179da <_free_r+0x4e>
 80179e4:	6811      	ldr	r1, [r2, #0]
 80179e6:	1855      	adds	r5, r2, r1
 80179e8:	42a5      	cmp	r5, r4
 80179ea:	d10b      	bne.n	8017a04 <_free_r+0x78>
 80179ec:	6824      	ldr	r4, [r4, #0]
 80179ee:	4421      	add	r1, r4
 80179f0:	1854      	adds	r4, r2, r1
 80179f2:	42a3      	cmp	r3, r4
 80179f4:	6011      	str	r1, [r2, #0]
 80179f6:	d1dd      	bne.n	80179b4 <_free_r+0x28>
 80179f8:	681c      	ldr	r4, [r3, #0]
 80179fa:	685b      	ldr	r3, [r3, #4]
 80179fc:	6053      	str	r3, [r2, #4]
 80179fe:	4421      	add	r1, r4
 8017a00:	6011      	str	r1, [r2, #0]
 8017a02:	e7d7      	b.n	80179b4 <_free_r+0x28>
 8017a04:	d902      	bls.n	8017a0c <_free_r+0x80>
 8017a06:	230c      	movs	r3, #12
 8017a08:	6003      	str	r3, [r0, #0]
 8017a0a:	e7d3      	b.n	80179b4 <_free_r+0x28>
 8017a0c:	6825      	ldr	r5, [r4, #0]
 8017a0e:	1961      	adds	r1, r4, r5
 8017a10:	428b      	cmp	r3, r1
 8017a12:	bf04      	itt	eq
 8017a14:	6819      	ldreq	r1, [r3, #0]
 8017a16:	685b      	ldreq	r3, [r3, #4]
 8017a18:	6063      	str	r3, [r4, #4]
 8017a1a:	bf04      	itt	eq
 8017a1c:	1949      	addeq	r1, r1, r5
 8017a1e:	6021      	streq	r1, [r4, #0]
 8017a20:	6054      	str	r4, [r2, #4]
 8017a22:	e7c7      	b.n	80179b4 <_free_r+0x28>
 8017a24:	b003      	add	sp, #12
 8017a26:	bd30      	pop	{r4, r5, pc}
 8017a28:	2000766c 	.word	0x2000766c

08017a2c <_malloc_r>:
 8017a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017a2e:	1ccd      	adds	r5, r1, #3
 8017a30:	f025 0503 	bic.w	r5, r5, #3
 8017a34:	3508      	adds	r5, #8
 8017a36:	2d0c      	cmp	r5, #12
 8017a38:	bf38      	it	cc
 8017a3a:	250c      	movcc	r5, #12
 8017a3c:	2d00      	cmp	r5, #0
 8017a3e:	4606      	mov	r6, r0
 8017a40:	db01      	blt.n	8017a46 <_malloc_r+0x1a>
 8017a42:	42a9      	cmp	r1, r5
 8017a44:	d903      	bls.n	8017a4e <_malloc_r+0x22>
 8017a46:	230c      	movs	r3, #12
 8017a48:	6033      	str	r3, [r6, #0]
 8017a4a:	2000      	movs	r0, #0
 8017a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a4e:	f001 fd5b 	bl	8019508 <__malloc_lock>
 8017a52:	4921      	ldr	r1, [pc, #132]	; (8017ad8 <_malloc_r+0xac>)
 8017a54:	680a      	ldr	r2, [r1, #0]
 8017a56:	4614      	mov	r4, r2
 8017a58:	b99c      	cbnz	r4, 8017a82 <_malloc_r+0x56>
 8017a5a:	4f20      	ldr	r7, [pc, #128]	; (8017adc <_malloc_r+0xb0>)
 8017a5c:	683b      	ldr	r3, [r7, #0]
 8017a5e:	b923      	cbnz	r3, 8017a6a <_malloc_r+0x3e>
 8017a60:	4621      	mov	r1, r4
 8017a62:	4630      	mov	r0, r6
 8017a64:	f000 fd10 	bl	8018488 <_sbrk_r>
 8017a68:	6038      	str	r0, [r7, #0]
 8017a6a:	4629      	mov	r1, r5
 8017a6c:	4630      	mov	r0, r6
 8017a6e:	f000 fd0b 	bl	8018488 <_sbrk_r>
 8017a72:	1c43      	adds	r3, r0, #1
 8017a74:	d123      	bne.n	8017abe <_malloc_r+0x92>
 8017a76:	230c      	movs	r3, #12
 8017a78:	6033      	str	r3, [r6, #0]
 8017a7a:	4630      	mov	r0, r6
 8017a7c:	f001 fd4a 	bl	8019514 <__malloc_unlock>
 8017a80:	e7e3      	b.n	8017a4a <_malloc_r+0x1e>
 8017a82:	6823      	ldr	r3, [r4, #0]
 8017a84:	1b5b      	subs	r3, r3, r5
 8017a86:	d417      	bmi.n	8017ab8 <_malloc_r+0x8c>
 8017a88:	2b0b      	cmp	r3, #11
 8017a8a:	d903      	bls.n	8017a94 <_malloc_r+0x68>
 8017a8c:	6023      	str	r3, [r4, #0]
 8017a8e:	441c      	add	r4, r3
 8017a90:	6025      	str	r5, [r4, #0]
 8017a92:	e004      	b.n	8017a9e <_malloc_r+0x72>
 8017a94:	6863      	ldr	r3, [r4, #4]
 8017a96:	42a2      	cmp	r2, r4
 8017a98:	bf0c      	ite	eq
 8017a9a:	600b      	streq	r3, [r1, #0]
 8017a9c:	6053      	strne	r3, [r2, #4]
 8017a9e:	4630      	mov	r0, r6
 8017aa0:	f001 fd38 	bl	8019514 <__malloc_unlock>
 8017aa4:	f104 000b 	add.w	r0, r4, #11
 8017aa8:	1d23      	adds	r3, r4, #4
 8017aaa:	f020 0007 	bic.w	r0, r0, #7
 8017aae:	1ac2      	subs	r2, r0, r3
 8017ab0:	d0cc      	beq.n	8017a4c <_malloc_r+0x20>
 8017ab2:	1a1b      	subs	r3, r3, r0
 8017ab4:	50a3      	str	r3, [r4, r2]
 8017ab6:	e7c9      	b.n	8017a4c <_malloc_r+0x20>
 8017ab8:	4622      	mov	r2, r4
 8017aba:	6864      	ldr	r4, [r4, #4]
 8017abc:	e7cc      	b.n	8017a58 <_malloc_r+0x2c>
 8017abe:	1cc4      	adds	r4, r0, #3
 8017ac0:	f024 0403 	bic.w	r4, r4, #3
 8017ac4:	42a0      	cmp	r0, r4
 8017ac6:	d0e3      	beq.n	8017a90 <_malloc_r+0x64>
 8017ac8:	1a21      	subs	r1, r4, r0
 8017aca:	4630      	mov	r0, r6
 8017acc:	f000 fcdc 	bl	8018488 <_sbrk_r>
 8017ad0:	3001      	adds	r0, #1
 8017ad2:	d1dd      	bne.n	8017a90 <_malloc_r+0x64>
 8017ad4:	e7cf      	b.n	8017a76 <_malloc_r+0x4a>
 8017ad6:	bf00      	nop
 8017ad8:	2000766c 	.word	0x2000766c
 8017adc:	20007670 	.word	0x20007670

08017ae0 <__cvt>:
 8017ae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017ae4:	ec55 4b10 	vmov	r4, r5, d0
 8017ae8:	2d00      	cmp	r5, #0
 8017aea:	460e      	mov	r6, r1
 8017aec:	4619      	mov	r1, r3
 8017aee:	462b      	mov	r3, r5
 8017af0:	bfbb      	ittet	lt
 8017af2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8017af6:	461d      	movlt	r5, r3
 8017af8:	2300      	movge	r3, #0
 8017afa:	232d      	movlt	r3, #45	; 0x2d
 8017afc:	700b      	strb	r3, [r1, #0]
 8017afe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8017b00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8017b04:	4691      	mov	r9, r2
 8017b06:	f023 0820 	bic.w	r8, r3, #32
 8017b0a:	bfbc      	itt	lt
 8017b0c:	4622      	movlt	r2, r4
 8017b0e:	4614      	movlt	r4, r2
 8017b10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017b14:	d005      	beq.n	8017b22 <__cvt+0x42>
 8017b16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8017b1a:	d100      	bne.n	8017b1e <__cvt+0x3e>
 8017b1c:	3601      	adds	r6, #1
 8017b1e:	2102      	movs	r1, #2
 8017b20:	e000      	b.n	8017b24 <__cvt+0x44>
 8017b22:	2103      	movs	r1, #3
 8017b24:	ab03      	add	r3, sp, #12
 8017b26:	9301      	str	r3, [sp, #4]
 8017b28:	ab02      	add	r3, sp, #8
 8017b2a:	9300      	str	r3, [sp, #0]
 8017b2c:	ec45 4b10 	vmov	d0, r4, r5
 8017b30:	4653      	mov	r3, sl
 8017b32:	4632      	mov	r2, r6
 8017b34:	f000 fe24 	bl	8018780 <_dtoa_r>
 8017b38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8017b3c:	4607      	mov	r7, r0
 8017b3e:	d102      	bne.n	8017b46 <__cvt+0x66>
 8017b40:	f019 0f01 	tst.w	r9, #1
 8017b44:	d022      	beq.n	8017b8c <__cvt+0xac>
 8017b46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8017b4a:	eb07 0906 	add.w	r9, r7, r6
 8017b4e:	d110      	bne.n	8017b72 <__cvt+0x92>
 8017b50:	783b      	ldrb	r3, [r7, #0]
 8017b52:	2b30      	cmp	r3, #48	; 0x30
 8017b54:	d10a      	bne.n	8017b6c <__cvt+0x8c>
 8017b56:	2200      	movs	r2, #0
 8017b58:	2300      	movs	r3, #0
 8017b5a:	4620      	mov	r0, r4
 8017b5c:	4629      	mov	r1, r5
 8017b5e:	f7e8 ffb3 	bl	8000ac8 <__aeabi_dcmpeq>
 8017b62:	b918      	cbnz	r0, 8017b6c <__cvt+0x8c>
 8017b64:	f1c6 0601 	rsb	r6, r6, #1
 8017b68:	f8ca 6000 	str.w	r6, [sl]
 8017b6c:	f8da 3000 	ldr.w	r3, [sl]
 8017b70:	4499      	add	r9, r3
 8017b72:	2200      	movs	r2, #0
 8017b74:	2300      	movs	r3, #0
 8017b76:	4620      	mov	r0, r4
 8017b78:	4629      	mov	r1, r5
 8017b7a:	f7e8 ffa5 	bl	8000ac8 <__aeabi_dcmpeq>
 8017b7e:	b108      	cbz	r0, 8017b84 <__cvt+0xa4>
 8017b80:	f8cd 900c 	str.w	r9, [sp, #12]
 8017b84:	2230      	movs	r2, #48	; 0x30
 8017b86:	9b03      	ldr	r3, [sp, #12]
 8017b88:	454b      	cmp	r3, r9
 8017b8a:	d307      	bcc.n	8017b9c <__cvt+0xbc>
 8017b8c:	9b03      	ldr	r3, [sp, #12]
 8017b8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017b90:	1bdb      	subs	r3, r3, r7
 8017b92:	4638      	mov	r0, r7
 8017b94:	6013      	str	r3, [r2, #0]
 8017b96:	b004      	add	sp, #16
 8017b98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b9c:	1c59      	adds	r1, r3, #1
 8017b9e:	9103      	str	r1, [sp, #12]
 8017ba0:	701a      	strb	r2, [r3, #0]
 8017ba2:	e7f0      	b.n	8017b86 <__cvt+0xa6>

08017ba4 <__exponent>:
 8017ba4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017ba6:	4603      	mov	r3, r0
 8017ba8:	2900      	cmp	r1, #0
 8017baa:	bfb8      	it	lt
 8017bac:	4249      	neglt	r1, r1
 8017bae:	f803 2b02 	strb.w	r2, [r3], #2
 8017bb2:	bfb4      	ite	lt
 8017bb4:	222d      	movlt	r2, #45	; 0x2d
 8017bb6:	222b      	movge	r2, #43	; 0x2b
 8017bb8:	2909      	cmp	r1, #9
 8017bba:	7042      	strb	r2, [r0, #1]
 8017bbc:	dd2a      	ble.n	8017c14 <__exponent+0x70>
 8017bbe:	f10d 0407 	add.w	r4, sp, #7
 8017bc2:	46a4      	mov	ip, r4
 8017bc4:	270a      	movs	r7, #10
 8017bc6:	46a6      	mov	lr, r4
 8017bc8:	460a      	mov	r2, r1
 8017bca:	fb91 f6f7 	sdiv	r6, r1, r7
 8017bce:	fb07 1516 	mls	r5, r7, r6, r1
 8017bd2:	3530      	adds	r5, #48	; 0x30
 8017bd4:	2a63      	cmp	r2, #99	; 0x63
 8017bd6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8017bda:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8017bde:	4631      	mov	r1, r6
 8017be0:	dcf1      	bgt.n	8017bc6 <__exponent+0x22>
 8017be2:	3130      	adds	r1, #48	; 0x30
 8017be4:	f1ae 0502 	sub.w	r5, lr, #2
 8017be8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8017bec:	1c44      	adds	r4, r0, #1
 8017bee:	4629      	mov	r1, r5
 8017bf0:	4561      	cmp	r1, ip
 8017bf2:	d30a      	bcc.n	8017c0a <__exponent+0x66>
 8017bf4:	f10d 0209 	add.w	r2, sp, #9
 8017bf8:	eba2 020e 	sub.w	r2, r2, lr
 8017bfc:	4565      	cmp	r5, ip
 8017bfe:	bf88      	it	hi
 8017c00:	2200      	movhi	r2, #0
 8017c02:	4413      	add	r3, r2
 8017c04:	1a18      	subs	r0, r3, r0
 8017c06:	b003      	add	sp, #12
 8017c08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017c0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017c0e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8017c12:	e7ed      	b.n	8017bf0 <__exponent+0x4c>
 8017c14:	2330      	movs	r3, #48	; 0x30
 8017c16:	3130      	adds	r1, #48	; 0x30
 8017c18:	7083      	strb	r3, [r0, #2]
 8017c1a:	70c1      	strb	r1, [r0, #3]
 8017c1c:	1d03      	adds	r3, r0, #4
 8017c1e:	e7f1      	b.n	8017c04 <__exponent+0x60>

08017c20 <_printf_float>:
 8017c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c24:	ed2d 8b02 	vpush	{d8}
 8017c28:	b08d      	sub	sp, #52	; 0x34
 8017c2a:	460c      	mov	r4, r1
 8017c2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8017c30:	4616      	mov	r6, r2
 8017c32:	461f      	mov	r7, r3
 8017c34:	4605      	mov	r5, r0
 8017c36:	f001 fc51 	bl	80194dc <_localeconv_r>
 8017c3a:	f8d0 a000 	ldr.w	sl, [r0]
 8017c3e:	4650      	mov	r0, sl
 8017c40:	f7e8 fac6 	bl	80001d0 <strlen>
 8017c44:	2300      	movs	r3, #0
 8017c46:	930a      	str	r3, [sp, #40]	; 0x28
 8017c48:	6823      	ldr	r3, [r4, #0]
 8017c4a:	9305      	str	r3, [sp, #20]
 8017c4c:	f8d8 3000 	ldr.w	r3, [r8]
 8017c50:	f894 b018 	ldrb.w	fp, [r4, #24]
 8017c54:	3307      	adds	r3, #7
 8017c56:	f023 0307 	bic.w	r3, r3, #7
 8017c5a:	f103 0208 	add.w	r2, r3, #8
 8017c5e:	f8c8 2000 	str.w	r2, [r8]
 8017c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c66:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8017c6a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8017c6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8017c72:	9307      	str	r3, [sp, #28]
 8017c74:	f8cd 8018 	str.w	r8, [sp, #24]
 8017c78:	ee08 0a10 	vmov	s16, r0
 8017c7c:	4b9f      	ldr	r3, [pc, #636]	; (8017efc <_printf_float+0x2dc>)
 8017c7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017c82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017c86:	f7e8 ff51 	bl	8000b2c <__aeabi_dcmpun>
 8017c8a:	bb88      	cbnz	r0, 8017cf0 <_printf_float+0xd0>
 8017c8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8017c90:	4b9a      	ldr	r3, [pc, #616]	; (8017efc <_printf_float+0x2dc>)
 8017c92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017c96:	f7e8 ff2b 	bl	8000af0 <__aeabi_dcmple>
 8017c9a:	bb48      	cbnz	r0, 8017cf0 <_printf_float+0xd0>
 8017c9c:	2200      	movs	r2, #0
 8017c9e:	2300      	movs	r3, #0
 8017ca0:	4640      	mov	r0, r8
 8017ca2:	4649      	mov	r1, r9
 8017ca4:	f7e8 ff1a 	bl	8000adc <__aeabi_dcmplt>
 8017ca8:	b110      	cbz	r0, 8017cb0 <_printf_float+0x90>
 8017caa:	232d      	movs	r3, #45	; 0x2d
 8017cac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017cb0:	4b93      	ldr	r3, [pc, #588]	; (8017f00 <_printf_float+0x2e0>)
 8017cb2:	4894      	ldr	r0, [pc, #592]	; (8017f04 <_printf_float+0x2e4>)
 8017cb4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8017cb8:	bf94      	ite	ls
 8017cba:	4698      	movls	r8, r3
 8017cbc:	4680      	movhi	r8, r0
 8017cbe:	2303      	movs	r3, #3
 8017cc0:	6123      	str	r3, [r4, #16]
 8017cc2:	9b05      	ldr	r3, [sp, #20]
 8017cc4:	f023 0204 	bic.w	r2, r3, #4
 8017cc8:	6022      	str	r2, [r4, #0]
 8017cca:	f04f 0900 	mov.w	r9, #0
 8017cce:	9700      	str	r7, [sp, #0]
 8017cd0:	4633      	mov	r3, r6
 8017cd2:	aa0b      	add	r2, sp, #44	; 0x2c
 8017cd4:	4621      	mov	r1, r4
 8017cd6:	4628      	mov	r0, r5
 8017cd8:	f000 f9d8 	bl	801808c <_printf_common>
 8017cdc:	3001      	adds	r0, #1
 8017cde:	f040 8090 	bne.w	8017e02 <_printf_float+0x1e2>
 8017ce2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8017ce6:	b00d      	add	sp, #52	; 0x34
 8017ce8:	ecbd 8b02 	vpop	{d8}
 8017cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017cf0:	4642      	mov	r2, r8
 8017cf2:	464b      	mov	r3, r9
 8017cf4:	4640      	mov	r0, r8
 8017cf6:	4649      	mov	r1, r9
 8017cf8:	f7e8 ff18 	bl	8000b2c <__aeabi_dcmpun>
 8017cfc:	b140      	cbz	r0, 8017d10 <_printf_float+0xf0>
 8017cfe:	464b      	mov	r3, r9
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	bfbc      	itt	lt
 8017d04:	232d      	movlt	r3, #45	; 0x2d
 8017d06:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8017d0a:	487f      	ldr	r0, [pc, #508]	; (8017f08 <_printf_float+0x2e8>)
 8017d0c:	4b7f      	ldr	r3, [pc, #508]	; (8017f0c <_printf_float+0x2ec>)
 8017d0e:	e7d1      	b.n	8017cb4 <_printf_float+0x94>
 8017d10:	6863      	ldr	r3, [r4, #4]
 8017d12:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8017d16:	9206      	str	r2, [sp, #24]
 8017d18:	1c5a      	adds	r2, r3, #1
 8017d1a:	d13f      	bne.n	8017d9c <_printf_float+0x17c>
 8017d1c:	2306      	movs	r3, #6
 8017d1e:	6063      	str	r3, [r4, #4]
 8017d20:	9b05      	ldr	r3, [sp, #20]
 8017d22:	6861      	ldr	r1, [r4, #4]
 8017d24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8017d28:	2300      	movs	r3, #0
 8017d2a:	9303      	str	r3, [sp, #12]
 8017d2c:	ab0a      	add	r3, sp, #40	; 0x28
 8017d2e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8017d32:	ab09      	add	r3, sp, #36	; 0x24
 8017d34:	ec49 8b10 	vmov	d0, r8, r9
 8017d38:	9300      	str	r3, [sp, #0]
 8017d3a:	6022      	str	r2, [r4, #0]
 8017d3c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8017d40:	4628      	mov	r0, r5
 8017d42:	f7ff fecd 	bl	8017ae0 <__cvt>
 8017d46:	9b06      	ldr	r3, [sp, #24]
 8017d48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017d4a:	2b47      	cmp	r3, #71	; 0x47
 8017d4c:	4680      	mov	r8, r0
 8017d4e:	d108      	bne.n	8017d62 <_printf_float+0x142>
 8017d50:	1cc8      	adds	r0, r1, #3
 8017d52:	db02      	blt.n	8017d5a <_printf_float+0x13a>
 8017d54:	6863      	ldr	r3, [r4, #4]
 8017d56:	4299      	cmp	r1, r3
 8017d58:	dd41      	ble.n	8017dde <_printf_float+0x1be>
 8017d5a:	f1ab 0b02 	sub.w	fp, fp, #2
 8017d5e:	fa5f fb8b 	uxtb.w	fp, fp
 8017d62:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017d66:	d820      	bhi.n	8017daa <_printf_float+0x18a>
 8017d68:	3901      	subs	r1, #1
 8017d6a:	465a      	mov	r2, fp
 8017d6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8017d70:	9109      	str	r1, [sp, #36]	; 0x24
 8017d72:	f7ff ff17 	bl	8017ba4 <__exponent>
 8017d76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017d78:	1813      	adds	r3, r2, r0
 8017d7a:	2a01      	cmp	r2, #1
 8017d7c:	4681      	mov	r9, r0
 8017d7e:	6123      	str	r3, [r4, #16]
 8017d80:	dc02      	bgt.n	8017d88 <_printf_float+0x168>
 8017d82:	6822      	ldr	r2, [r4, #0]
 8017d84:	07d2      	lsls	r2, r2, #31
 8017d86:	d501      	bpl.n	8017d8c <_printf_float+0x16c>
 8017d88:	3301      	adds	r3, #1
 8017d8a:	6123      	str	r3, [r4, #16]
 8017d8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8017d90:	2b00      	cmp	r3, #0
 8017d92:	d09c      	beq.n	8017cce <_printf_float+0xae>
 8017d94:	232d      	movs	r3, #45	; 0x2d
 8017d96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017d9a:	e798      	b.n	8017cce <_printf_float+0xae>
 8017d9c:	9a06      	ldr	r2, [sp, #24]
 8017d9e:	2a47      	cmp	r2, #71	; 0x47
 8017da0:	d1be      	bne.n	8017d20 <_printf_float+0x100>
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d1bc      	bne.n	8017d20 <_printf_float+0x100>
 8017da6:	2301      	movs	r3, #1
 8017da8:	e7b9      	b.n	8017d1e <_printf_float+0xfe>
 8017daa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8017dae:	d118      	bne.n	8017de2 <_printf_float+0x1c2>
 8017db0:	2900      	cmp	r1, #0
 8017db2:	6863      	ldr	r3, [r4, #4]
 8017db4:	dd0b      	ble.n	8017dce <_printf_float+0x1ae>
 8017db6:	6121      	str	r1, [r4, #16]
 8017db8:	b913      	cbnz	r3, 8017dc0 <_printf_float+0x1a0>
 8017dba:	6822      	ldr	r2, [r4, #0]
 8017dbc:	07d0      	lsls	r0, r2, #31
 8017dbe:	d502      	bpl.n	8017dc6 <_printf_float+0x1a6>
 8017dc0:	3301      	adds	r3, #1
 8017dc2:	440b      	add	r3, r1
 8017dc4:	6123      	str	r3, [r4, #16]
 8017dc6:	65a1      	str	r1, [r4, #88]	; 0x58
 8017dc8:	f04f 0900 	mov.w	r9, #0
 8017dcc:	e7de      	b.n	8017d8c <_printf_float+0x16c>
 8017dce:	b913      	cbnz	r3, 8017dd6 <_printf_float+0x1b6>
 8017dd0:	6822      	ldr	r2, [r4, #0]
 8017dd2:	07d2      	lsls	r2, r2, #31
 8017dd4:	d501      	bpl.n	8017dda <_printf_float+0x1ba>
 8017dd6:	3302      	adds	r3, #2
 8017dd8:	e7f4      	b.n	8017dc4 <_printf_float+0x1a4>
 8017dda:	2301      	movs	r3, #1
 8017ddc:	e7f2      	b.n	8017dc4 <_printf_float+0x1a4>
 8017dde:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8017de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017de4:	4299      	cmp	r1, r3
 8017de6:	db05      	blt.n	8017df4 <_printf_float+0x1d4>
 8017de8:	6823      	ldr	r3, [r4, #0]
 8017dea:	6121      	str	r1, [r4, #16]
 8017dec:	07d8      	lsls	r0, r3, #31
 8017dee:	d5ea      	bpl.n	8017dc6 <_printf_float+0x1a6>
 8017df0:	1c4b      	adds	r3, r1, #1
 8017df2:	e7e7      	b.n	8017dc4 <_printf_float+0x1a4>
 8017df4:	2900      	cmp	r1, #0
 8017df6:	bfd4      	ite	le
 8017df8:	f1c1 0202 	rsble	r2, r1, #2
 8017dfc:	2201      	movgt	r2, #1
 8017dfe:	4413      	add	r3, r2
 8017e00:	e7e0      	b.n	8017dc4 <_printf_float+0x1a4>
 8017e02:	6823      	ldr	r3, [r4, #0]
 8017e04:	055a      	lsls	r2, r3, #21
 8017e06:	d407      	bmi.n	8017e18 <_printf_float+0x1f8>
 8017e08:	6923      	ldr	r3, [r4, #16]
 8017e0a:	4642      	mov	r2, r8
 8017e0c:	4631      	mov	r1, r6
 8017e0e:	4628      	mov	r0, r5
 8017e10:	47b8      	blx	r7
 8017e12:	3001      	adds	r0, #1
 8017e14:	d12c      	bne.n	8017e70 <_printf_float+0x250>
 8017e16:	e764      	b.n	8017ce2 <_printf_float+0xc2>
 8017e18:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8017e1c:	f240 80e0 	bls.w	8017fe0 <_printf_float+0x3c0>
 8017e20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8017e24:	2200      	movs	r2, #0
 8017e26:	2300      	movs	r3, #0
 8017e28:	f7e8 fe4e 	bl	8000ac8 <__aeabi_dcmpeq>
 8017e2c:	2800      	cmp	r0, #0
 8017e2e:	d034      	beq.n	8017e9a <_printf_float+0x27a>
 8017e30:	4a37      	ldr	r2, [pc, #220]	; (8017f10 <_printf_float+0x2f0>)
 8017e32:	2301      	movs	r3, #1
 8017e34:	4631      	mov	r1, r6
 8017e36:	4628      	mov	r0, r5
 8017e38:	47b8      	blx	r7
 8017e3a:	3001      	adds	r0, #1
 8017e3c:	f43f af51 	beq.w	8017ce2 <_printf_float+0xc2>
 8017e40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017e44:	429a      	cmp	r2, r3
 8017e46:	db02      	blt.n	8017e4e <_printf_float+0x22e>
 8017e48:	6823      	ldr	r3, [r4, #0]
 8017e4a:	07d8      	lsls	r0, r3, #31
 8017e4c:	d510      	bpl.n	8017e70 <_printf_float+0x250>
 8017e4e:	ee18 3a10 	vmov	r3, s16
 8017e52:	4652      	mov	r2, sl
 8017e54:	4631      	mov	r1, r6
 8017e56:	4628      	mov	r0, r5
 8017e58:	47b8      	blx	r7
 8017e5a:	3001      	adds	r0, #1
 8017e5c:	f43f af41 	beq.w	8017ce2 <_printf_float+0xc2>
 8017e60:	f04f 0800 	mov.w	r8, #0
 8017e64:	f104 091a 	add.w	r9, r4, #26
 8017e68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017e6a:	3b01      	subs	r3, #1
 8017e6c:	4543      	cmp	r3, r8
 8017e6e:	dc09      	bgt.n	8017e84 <_printf_float+0x264>
 8017e70:	6823      	ldr	r3, [r4, #0]
 8017e72:	079b      	lsls	r3, r3, #30
 8017e74:	f100 8105 	bmi.w	8018082 <_printf_float+0x462>
 8017e78:	68e0      	ldr	r0, [r4, #12]
 8017e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8017e7c:	4298      	cmp	r0, r3
 8017e7e:	bfb8      	it	lt
 8017e80:	4618      	movlt	r0, r3
 8017e82:	e730      	b.n	8017ce6 <_printf_float+0xc6>
 8017e84:	2301      	movs	r3, #1
 8017e86:	464a      	mov	r2, r9
 8017e88:	4631      	mov	r1, r6
 8017e8a:	4628      	mov	r0, r5
 8017e8c:	47b8      	blx	r7
 8017e8e:	3001      	adds	r0, #1
 8017e90:	f43f af27 	beq.w	8017ce2 <_printf_float+0xc2>
 8017e94:	f108 0801 	add.w	r8, r8, #1
 8017e98:	e7e6      	b.n	8017e68 <_printf_float+0x248>
 8017e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	dc39      	bgt.n	8017f14 <_printf_float+0x2f4>
 8017ea0:	4a1b      	ldr	r2, [pc, #108]	; (8017f10 <_printf_float+0x2f0>)
 8017ea2:	2301      	movs	r3, #1
 8017ea4:	4631      	mov	r1, r6
 8017ea6:	4628      	mov	r0, r5
 8017ea8:	47b8      	blx	r7
 8017eaa:	3001      	adds	r0, #1
 8017eac:	f43f af19 	beq.w	8017ce2 <_printf_float+0xc2>
 8017eb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017eb4:	4313      	orrs	r3, r2
 8017eb6:	d102      	bne.n	8017ebe <_printf_float+0x29e>
 8017eb8:	6823      	ldr	r3, [r4, #0]
 8017eba:	07d9      	lsls	r1, r3, #31
 8017ebc:	d5d8      	bpl.n	8017e70 <_printf_float+0x250>
 8017ebe:	ee18 3a10 	vmov	r3, s16
 8017ec2:	4652      	mov	r2, sl
 8017ec4:	4631      	mov	r1, r6
 8017ec6:	4628      	mov	r0, r5
 8017ec8:	47b8      	blx	r7
 8017eca:	3001      	adds	r0, #1
 8017ecc:	f43f af09 	beq.w	8017ce2 <_printf_float+0xc2>
 8017ed0:	f04f 0900 	mov.w	r9, #0
 8017ed4:	f104 0a1a 	add.w	sl, r4, #26
 8017ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017eda:	425b      	negs	r3, r3
 8017edc:	454b      	cmp	r3, r9
 8017ede:	dc01      	bgt.n	8017ee4 <_printf_float+0x2c4>
 8017ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017ee2:	e792      	b.n	8017e0a <_printf_float+0x1ea>
 8017ee4:	2301      	movs	r3, #1
 8017ee6:	4652      	mov	r2, sl
 8017ee8:	4631      	mov	r1, r6
 8017eea:	4628      	mov	r0, r5
 8017eec:	47b8      	blx	r7
 8017eee:	3001      	adds	r0, #1
 8017ef0:	f43f aef7 	beq.w	8017ce2 <_printf_float+0xc2>
 8017ef4:	f109 0901 	add.w	r9, r9, #1
 8017ef8:	e7ee      	b.n	8017ed8 <_printf_float+0x2b8>
 8017efa:	bf00      	nop
 8017efc:	7fefffff 	.word	0x7fefffff
 8017f00:	0801f0b4 	.word	0x0801f0b4
 8017f04:	0801f0b8 	.word	0x0801f0b8
 8017f08:	0801f0c0 	.word	0x0801f0c0
 8017f0c:	0801f0bc 	.word	0x0801f0bc
 8017f10:	0801f0c4 	.word	0x0801f0c4
 8017f14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017f16:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017f18:	429a      	cmp	r2, r3
 8017f1a:	bfa8      	it	ge
 8017f1c:	461a      	movge	r2, r3
 8017f1e:	2a00      	cmp	r2, #0
 8017f20:	4691      	mov	r9, r2
 8017f22:	dc37      	bgt.n	8017f94 <_printf_float+0x374>
 8017f24:	f04f 0b00 	mov.w	fp, #0
 8017f28:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017f2c:	f104 021a 	add.w	r2, r4, #26
 8017f30:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8017f32:	9305      	str	r3, [sp, #20]
 8017f34:	eba3 0309 	sub.w	r3, r3, r9
 8017f38:	455b      	cmp	r3, fp
 8017f3a:	dc33      	bgt.n	8017fa4 <_printf_float+0x384>
 8017f3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017f40:	429a      	cmp	r2, r3
 8017f42:	db3b      	blt.n	8017fbc <_printf_float+0x39c>
 8017f44:	6823      	ldr	r3, [r4, #0]
 8017f46:	07da      	lsls	r2, r3, #31
 8017f48:	d438      	bmi.n	8017fbc <_printf_float+0x39c>
 8017f4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017f4c:	9b05      	ldr	r3, [sp, #20]
 8017f4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8017f50:	1ad3      	subs	r3, r2, r3
 8017f52:	eba2 0901 	sub.w	r9, r2, r1
 8017f56:	4599      	cmp	r9, r3
 8017f58:	bfa8      	it	ge
 8017f5a:	4699      	movge	r9, r3
 8017f5c:	f1b9 0f00 	cmp.w	r9, #0
 8017f60:	dc35      	bgt.n	8017fce <_printf_float+0x3ae>
 8017f62:	f04f 0800 	mov.w	r8, #0
 8017f66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8017f6a:	f104 0a1a 	add.w	sl, r4, #26
 8017f6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8017f72:	1a9b      	subs	r3, r3, r2
 8017f74:	eba3 0309 	sub.w	r3, r3, r9
 8017f78:	4543      	cmp	r3, r8
 8017f7a:	f77f af79 	ble.w	8017e70 <_printf_float+0x250>
 8017f7e:	2301      	movs	r3, #1
 8017f80:	4652      	mov	r2, sl
 8017f82:	4631      	mov	r1, r6
 8017f84:	4628      	mov	r0, r5
 8017f86:	47b8      	blx	r7
 8017f88:	3001      	adds	r0, #1
 8017f8a:	f43f aeaa 	beq.w	8017ce2 <_printf_float+0xc2>
 8017f8e:	f108 0801 	add.w	r8, r8, #1
 8017f92:	e7ec      	b.n	8017f6e <_printf_float+0x34e>
 8017f94:	4613      	mov	r3, r2
 8017f96:	4631      	mov	r1, r6
 8017f98:	4642      	mov	r2, r8
 8017f9a:	4628      	mov	r0, r5
 8017f9c:	47b8      	blx	r7
 8017f9e:	3001      	adds	r0, #1
 8017fa0:	d1c0      	bne.n	8017f24 <_printf_float+0x304>
 8017fa2:	e69e      	b.n	8017ce2 <_printf_float+0xc2>
 8017fa4:	2301      	movs	r3, #1
 8017fa6:	4631      	mov	r1, r6
 8017fa8:	4628      	mov	r0, r5
 8017faa:	9205      	str	r2, [sp, #20]
 8017fac:	47b8      	blx	r7
 8017fae:	3001      	adds	r0, #1
 8017fb0:	f43f ae97 	beq.w	8017ce2 <_printf_float+0xc2>
 8017fb4:	9a05      	ldr	r2, [sp, #20]
 8017fb6:	f10b 0b01 	add.w	fp, fp, #1
 8017fba:	e7b9      	b.n	8017f30 <_printf_float+0x310>
 8017fbc:	ee18 3a10 	vmov	r3, s16
 8017fc0:	4652      	mov	r2, sl
 8017fc2:	4631      	mov	r1, r6
 8017fc4:	4628      	mov	r0, r5
 8017fc6:	47b8      	blx	r7
 8017fc8:	3001      	adds	r0, #1
 8017fca:	d1be      	bne.n	8017f4a <_printf_float+0x32a>
 8017fcc:	e689      	b.n	8017ce2 <_printf_float+0xc2>
 8017fce:	9a05      	ldr	r2, [sp, #20]
 8017fd0:	464b      	mov	r3, r9
 8017fd2:	4442      	add	r2, r8
 8017fd4:	4631      	mov	r1, r6
 8017fd6:	4628      	mov	r0, r5
 8017fd8:	47b8      	blx	r7
 8017fda:	3001      	adds	r0, #1
 8017fdc:	d1c1      	bne.n	8017f62 <_printf_float+0x342>
 8017fde:	e680      	b.n	8017ce2 <_printf_float+0xc2>
 8017fe0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8017fe2:	2a01      	cmp	r2, #1
 8017fe4:	dc01      	bgt.n	8017fea <_printf_float+0x3ca>
 8017fe6:	07db      	lsls	r3, r3, #31
 8017fe8:	d538      	bpl.n	801805c <_printf_float+0x43c>
 8017fea:	2301      	movs	r3, #1
 8017fec:	4642      	mov	r2, r8
 8017fee:	4631      	mov	r1, r6
 8017ff0:	4628      	mov	r0, r5
 8017ff2:	47b8      	blx	r7
 8017ff4:	3001      	adds	r0, #1
 8017ff6:	f43f ae74 	beq.w	8017ce2 <_printf_float+0xc2>
 8017ffa:	ee18 3a10 	vmov	r3, s16
 8017ffe:	4652      	mov	r2, sl
 8018000:	4631      	mov	r1, r6
 8018002:	4628      	mov	r0, r5
 8018004:	47b8      	blx	r7
 8018006:	3001      	adds	r0, #1
 8018008:	f43f ae6b 	beq.w	8017ce2 <_printf_float+0xc2>
 801800c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8018010:	2200      	movs	r2, #0
 8018012:	2300      	movs	r3, #0
 8018014:	f7e8 fd58 	bl	8000ac8 <__aeabi_dcmpeq>
 8018018:	b9d8      	cbnz	r0, 8018052 <_printf_float+0x432>
 801801a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801801c:	f108 0201 	add.w	r2, r8, #1
 8018020:	3b01      	subs	r3, #1
 8018022:	4631      	mov	r1, r6
 8018024:	4628      	mov	r0, r5
 8018026:	47b8      	blx	r7
 8018028:	3001      	adds	r0, #1
 801802a:	d10e      	bne.n	801804a <_printf_float+0x42a>
 801802c:	e659      	b.n	8017ce2 <_printf_float+0xc2>
 801802e:	2301      	movs	r3, #1
 8018030:	4652      	mov	r2, sl
 8018032:	4631      	mov	r1, r6
 8018034:	4628      	mov	r0, r5
 8018036:	47b8      	blx	r7
 8018038:	3001      	adds	r0, #1
 801803a:	f43f ae52 	beq.w	8017ce2 <_printf_float+0xc2>
 801803e:	f108 0801 	add.w	r8, r8, #1
 8018042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8018044:	3b01      	subs	r3, #1
 8018046:	4543      	cmp	r3, r8
 8018048:	dcf1      	bgt.n	801802e <_printf_float+0x40e>
 801804a:	464b      	mov	r3, r9
 801804c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8018050:	e6dc      	b.n	8017e0c <_printf_float+0x1ec>
 8018052:	f04f 0800 	mov.w	r8, #0
 8018056:	f104 0a1a 	add.w	sl, r4, #26
 801805a:	e7f2      	b.n	8018042 <_printf_float+0x422>
 801805c:	2301      	movs	r3, #1
 801805e:	4642      	mov	r2, r8
 8018060:	e7df      	b.n	8018022 <_printf_float+0x402>
 8018062:	2301      	movs	r3, #1
 8018064:	464a      	mov	r2, r9
 8018066:	4631      	mov	r1, r6
 8018068:	4628      	mov	r0, r5
 801806a:	47b8      	blx	r7
 801806c:	3001      	adds	r0, #1
 801806e:	f43f ae38 	beq.w	8017ce2 <_printf_float+0xc2>
 8018072:	f108 0801 	add.w	r8, r8, #1
 8018076:	68e3      	ldr	r3, [r4, #12]
 8018078:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801807a:	1a5b      	subs	r3, r3, r1
 801807c:	4543      	cmp	r3, r8
 801807e:	dcf0      	bgt.n	8018062 <_printf_float+0x442>
 8018080:	e6fa      	b.n	8017e78 <_printf_float+0x258>
 8018082:	f04f 0800 	mov.w	r8, #0
 8018086:	f104 0919 	add.w	r9, r4, #25
 801808a:	e7f4      	b.n	8018076 <_printf_float+0x456>

0801808c <_printf_common>:
 801808c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018090:	4616      	mov	r6, r2
 8018092:	4699      	mov	r9, r3
 8018094:	688a      	ldr	r2, [r1, #8]
 8018096:	690b      	ldr	r3, [r1, #16]
 8018098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801809c:	4293      	cmp	r3, r2
 801809e:	bfb8      	it	lt
 80180a0:	4613      	movlt	r3, r2
 80180a2:	6033      	str	r3, [r6, #0]
 80180a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80180a8:	4607      	mov	r7, r0
 80180aa:	460c      	mov	r4, r1
 80180ac:	b10a      	cbz	r2, 80180b2 <_printf_common+0x26>
 80180ae:	3301      	adds	r3, #1
 80180b0:	6033      	str	r3, [r6, #0]
 80180b2:	6823      	ldr	r3, [r4, #0]
 80180b4:	0699      	lsls	r1, r3, #26
 80180b6:	bf42      	ittt	mi
 80180b8:	6833      	ldrmi	r3, [r6, #0]
 80180ba:	3302      	addmi	r3, #2
 80180bc:	6033      	strmi	r3, [r6, #0]
 80180be:	6825      	ldr	r5, [r4, #0]
 80180c0:	f015 0506 	ands.w	r5, r5, #6
 80180c4:	d106      	bne.n	80180d4 <_printf_common+0x48>
 80180c6:	f104 0a19 	add.w	sl, r4, #25
 80180ca:	68e3      	ldr	r3, [r4, #12]
 80180cc:	6832      	ldr	r2, [r6, #0]
 80180ce:	1a9b      	subs	r3, r3, r2
 80180d0:	42ab      	cmp	r3, r5
 80180d2:	dc26      	bgt.n	8018122 <_printf_common+0x96>
 80180d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80180d8:	1e13      	subs	r3, r2, #0
 80180da:	6822      	ldr	r2, [r4, #0]
 80180dc:	bf18      	it	ne
 80180de:	2301      	movne	r3, #1
 80180e0:	0692      	lsls	r2, r2, #26
 80180e2:	d42b      	bmi.n	801813c <_printf_common+0xb0>
 80180e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80180e8:	4649      	mov	r1, r9
 80180ea:	4638      	mov	r0, r7
 80180ec:	47c0      	blx	r8
 80180ee:	3001      	adds	r0, #1
 80180f0:	d01e      	beq.n	8018130 <_printf_common+0xa4>
 80180f2:	6823      	ldr	r3, [r4, #0]
 80180f4:	68e5      	ldr	r5, [r4, #12]
 80180f6:	6832      	ldr	r2, [r6, #0]
 80180f8:	f003 0306 	and.w	r3, r3, #6
 80180fc:	2b04      	cmp	r3, #4
 80180fe:	bf08      	it	eq
 8018100:	1aad      	subeq	r5, r5, r2
 8018102:	68a3      	ldr	r3, [r4, #8]
 8018104:	6922      	ldr	r2, [r4, #16]
 8018106:	bf0c      	ite	eq
 8018108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801810c:	2500      	movne	r5, #0
 801810e:	4293      	cmp	r3, r2
 8018110:	bfc4      	itt	gt
 8018112:	1a9b      	subgt	r3, r3, r2
 8018114:	18ed      	addgt	r5, r5, r3
 8018116:	2600      	movs	r6, #0
 8018118:	341a      	adds	r4, #26
 801811a:	42b5      	cmp	r5, r6
 801811c:	d11a      	bne.n	8018154 <_printf_common+0xc8>
 801811e:	2000      	movs	r0, #0
 8018120:	e008      	b.n	8018134 <_printf_common+0xa8>
 8018122:	2301      	movs	r3, #1
 8018124:	4652      	mov	r2, sl
 8018126:	4649      	mov	r1, r9
 8018128:	4638      	mov	r0, r7
 801812a:	47c0      	blx	r8
 801812c:	3001      	adds	r0, #1
 801812e:	d103      	bne.n	8018138 <_printf_common+0xac>
 8018130:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018138:	3501      	adds	r5, #1
 801813a:	e7c6      	b.n	80180ca <_printf_common+0x3e>
 801813c:	18e1      	adds	r1, r4, r3
 801813e:	1c5a      	adds	r2, r3, #1
 8018140:	2030      	movs	r0, #48	; 0x30
 8018142:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018146:	4422      	add	r2, r4
 8018148:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801814c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018150:	3302      	adds	r3, #2
 8018152:	e7c7      	b.n	80180e4 <_printf_common+0x58>
 8018154:	2301      	movs	r3, #1
 8018156:	4622      	mov	r2, r4
 8018158:	4649      	mov	r1, r9
 801815a:	4638      	mov	r0, r7
 801815c:	47c0      	blx	r8
 801815e:	3001      	adds	r0, #1
 8018160:	d0e6      	beq.n	8018130 <_printf_common+0xa4>
 8018162:	3601      	adds	r6, #1
 8018164:	e7d9      	b.n	801811a <_printf_common+0x8e>
	...

08018168 <_printf_i>:
 8018168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801816c:	460c      	mov	r4, r1
 801816e:	4691      	mov	r9, r2
 8018170:	7e27      	ldrb	r7, [r4, #24]
 8018172:	990c      	ldr	r1, [sp, #48]	; 0x30
 8018174:	2f78      	cmp	r7, #120	; 0x78
 8018176:	4680      	mov	r8, r0
 8018178:	469a      	mov	sl, r3
 801817a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801817e:	d807      	bhi.n	8018190 <_printf_i+0x28>
 8018180:	2f62      	cmp	r7, #98	; 0x62
 8018182:	d80a      	bhi.n	801819a <_printf_i+0x32>
 8018184:	2f00      	cmp	r7, #0
 8018186:	f000 80d8 	beq.w	801833a <_printf_i+0x1d2>
 801818a:	2f58      	cmp	r7, #88	; 0x58
 801818c:	f000 80a3 	beq.w	80182d6 <_printf_i+0x16e>
 8018190:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8018194:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8018198:	e03a      	b.n	8018210 <_printf_i+0xa8>
 801819a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801819e:	2b15      	cmp	r3, #21
 80181a0:	d8f6      	bhi.n	8018190 <_printf_i+0x28>
 80181a2:	a001      	add	r0, pc, #4	; (adr r0, 80181a8 <_printf_i+0x40>)
 80181a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80181a8:	08018201 	.word	0x08018201
 80181ac:	08018215 	.word	0x08018215
 80181b0:	08018191 	.word	0x08018191
 80181b4:	08018191 	.word	0x08018191
 80181b8:	08018191 	.word	0x08018191
 80181bc:	08018191 	.word	0x08018191
 80181c0:	08018215 	.word	0x08018215
 80181c4:	08018191 	.word	0x08018191
 80181c8:	08018191 	.word	0x08018191
 80181cc:	08018191 	.word	0x08018191
 80181d0:	08018191 	.word	0x08018191
 80181d4:	08018321 	.word	0x08018321
 80181d8:	08018245 	.word	0x08018245
 80181dc:	08018303 	.word	0x08018303
 80181e0:	08018191 	.word	0x08018191
 80181e4:	08018191 	.word	0x08018191
 80181e8:	08018343 	.word	0x08018343
 80181ec:	08018191 	.word	0x08018191
 80181f0:	08018245 	.word	0x08018245
 80181f4:	08018191 	.word	0x08018191
 80181f8:	08018191 	.word	0x08018191
 80181fc:	0801830b 	.word	0x0801830b
 8018200:	680b      	ldr	r3, [r1, #0]
 8018202:	1d1a      	adds	r2, r3, #4
 8018204:	681b      	ldr	r3, [r3, #0]
 8018206:	600a      	str	r2, [r1, #0]
 8018208:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801820c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018210:	2301      	movs	r3, #1
 8018212:	e0a3      	b.n	801835c <_printf_i+0x1f4>
 8018214:	6825      	ldr	r5, [r4, #0]
 8018216:	6808      	ldr	r0, [r1, #0]
 8018218:	062e      	lsls	r6, r5, #24
 801821a:	f100 0304 	add.w	r3, r0, #4
 801821e:	d50a      	bpl.n	8018236 <_printf_i+0xce>
 8018220:	6805      	ldr	r5, [r0, #0]
 8018222:	600b      	str	r3, [r1, #0]
 8018224:	2d00      	cmp	r5, #0
 8018226:	da03      	bge.n	8018230 <_printf_i+0xc8>
 8018228:	232d      	movs	r3, #45	; 0x2d
 801822a:	426d      	negs	r5, r5
 801822c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018230:	485e      	ldr	r0, [pc, #376]	; (80183ac <_printf_i+0x244>)
 8018232:	230a      	movs	r3, #10
 8018234:	e019      	b.n	801826a <_printf_i+0x102>
 8018236:	f015 0f40 	tst.w	r5, #64	; 0x40
 801823a:	6805      	ldr	r5, [r0, #0]
 801823c:	600b      	str	r3, [r1, #0]
 801823e:	bf18      	it	ne
 8018240:	b22d      	sxthne	r5, r5
 8018242:	e7ef      	b.n	8018224 <_printf_i+0xbc>
 8018244:	680b      	ldr	r3, [r1, #0]
 8018246:	6825      	ldr	r5, [r4, #0]
 8018248:	1d18      	adds	r0, r3, #4
 801824a:	6008      	str	r0, [r1, #0]
 801824c:	0628      	lsls	r0, r5, #24
 801824e:	d501      	bpl.n	8018254 <_printf_i+0xec>
 8018250:	681d      	ldr	r5, [r3, #0]
 8018252:	e002      	b.n	801825a <_printf_i+0xf2>
 8018254:	0669      	lsls	r1, r5, #25
 8018256:	d5fb      	bpl.n	8018250 <_printf_i+0xe8>
 8018258:	881d      	ldrh	r5, [r3, #0]
 801825a:	4854      	ldr	r0, [pc, #336]	; (80183ac <_printf_i+0x244>)
 801825c:	2f6f      	cmp	r7, #111	; 0x6f
 801825e:	bf0c      	ite	eq
 8018260:	2308      	moveq	r3, #8
 8018262:	230a      	movne	r3, #10
 8018264:	2100      	movs	r1, #0
 8018266:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801826a:	6866      	ldr	r6, [r4, #4]
 801826c:	60a6      	str	r6, [r4, #8]
 801826e:	2e00      	cmp	r6, #0
 8018270:	bfa2      	ittt	ge
 8018272:	6821      	ldrge	r1, [r4, #0]
 8018274:	f021 0104 	bicge.w	r1, r1, #4
 8018278:	6021      	strge	r1, [r4, #0]
 801827a:	b90d      	cbnz	r5, 8018280 <_printf_i+0x118>
 801827c:	2e00      	cmp	r6, #0
 801827e:	d04d      	beq.n	801831c <_printf_i+0x1b4>
 8018280:	4616      	mov	r6, r2
 8018282:	fbb5 f1f3 	udiv	r1, r5, r3
 8018286:	fb03 5711 	mls	r7, r3, r1, r5
 801828a:	5dc7      	ldrb	r7, [r0, r7]
 801828c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018290:	462f      	mov	r7, r5
 8018292:	42bb      	cmp	r3, r7
 8018294:	460d      	mov	r5, r1
 8018296:	d9f4      	bls.n	8018282 <_printf_i+0x11a>
 8018298:	2b08      	cmp	r3, #8
 801829a:	d10b      	bne.n	80182b4 <_printf_i+0x14c>
 801829c:	6823      	ldr	r3, [r4, #0]
 801829e:	07df      	lsls	r7, r3, #31
 80182a0:	d508      	bpl.n	80182b4 <_printf_i+0x14c>
 80182a2:	6923      	ldr	r3, [r4, #16]
 80182a4:	6861      	ldr	r1, [r4, #4]
 80182a6:	4299      	cmp	r1, r3
 80182a8:	bfde      	ittt	le
 80182aa:	2330      	movle	r3, #48	; 0x30
 80182ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80182b0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 80182b4:	1b92      	subs	r2, r2, r6
 80182b6:	6122      	str	r2, [r4, #16]
 80182b8:	f8cd a000 	str.w	sl, [sp]
 80182bc:	464b      	mov	r3, r9
 80182be:	aa03      	add	r2, sp, #12
 80182c0:	4621      	mov	r1, r4
 80182c2:	4640      	mov	r0, r8
 80182c4:	f7ff fee2 	bl	801808c <_printf_common>
 80182c8:	3001      	adds	r0, #1
 80182ca:	d14c      	bne.n	8018366 <_printf_i+0x1fe>
 80182cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80182d0:	b004      	add	sp, #16
 80182d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182d6:	4835      	ldr	r0, [pc, #212]	; (80183ac <_printf_i+0x244>)
 80182d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80182dc:	6823      	ldr	r3, [r4, #0]
 80182de:	680e      	ldr	r6, [r1, #0]
 80182e0:	061f      	lsls	r7, r3, #24
 80182e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80182e6:	600e      	str	r6, [r1, #0]
 80182e8:	d514      	bpl.n	8018314 <_printf_i+0x1ac>
 80182ea:	07d9      	lsls	r1, r3, #31
 80182ec:	bf44      	itt	mi
 80182ee:	f043 0320 	orrmi.w	r3, r3, #32
 80182f2:	6023      	strmi	r3, [r4, #0]
 80182f4:	b91d      	cbnz	r5, 80182fe <_printf_i+0x196>
 80182f6:	6823      	ldr	r3, [r4, #0]
 80182f8:	f023 0320 	bic.w	r3, r3, #32
 80182fc:	6023      	str	r3, [r4, #0]
 80182fe:	2310      	movs	r3, #16
 8018300:	e7b0      	b.n	8018264 <_printf_i+0xfc>
 8018302:	6823      	ldr	r3, [r4, #0]
 8018304:	f043 0320 	orr.w	r3, r3, #32
 8018308:	6023      	str	r3, [r4, #0]
 801830a:	2378      	movs	r3, #120	; 0x78
 801830c:	4828      	ldr	r0, [pc, #160]	; (80183b0 <_printf_i+0x248>)
 801830e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018312:	e7e3      	b.n	80182dc <_printf_i+0x174>
 8018314:	065e      	lsls	r6, r3, #25
 8018316:	bf48      	it	mi
 8018318:	b2ad      	uxthmi	r5, r5
 801831a:	e7e6      	b.n	80182ea <_printf_i+0x182>
 801831c:	4616      	mov	r6, r2
 801831e:	e7bb      	b.n	8018298 <_printf_i+0x130>
 8018320:	680b      	ldr	r3, [r1, #0]
 8018322:	6826      	ldr	r6, [r4, #0]
 8018324:	6960      	ldr	r0, [r4, #20]
 8018326:	1d1d      	adds	r5, r3, #4
 8018328:	600d      	str	r5, [r1, #0]
 801832a:	0635      	lsls	r5, r6, #24
 801832c:	681b      	ldr	r3, [r3, #0]
 801832e:	d501      	bpl.n	8018334 <_printf_i+0x1cc>
 8018330:	6018      	str	r0, [r3, #0]
 8018332:	e002      	b.n	801833a <_printf_i+0x1d2>
 8018334:	0671      	lsls	r1, r6, #25
 8018336:	d5fb      	bpl.n	8018330 <_printf_i+0x1c8>
 8018338:	8018      	strh	r0, [r3, #0]
 801833a:	2300      	movs	r3, #0
 801833c:	6123      	str	r3, [r4, #16]
 801833e:	4616      	mov	r6, r2
 8018340:	e7ba      	b.n	80182b8 <_printf_i+0x150>
 8018342:	680b      	ldr	r3, [r1, #0]
 8018344:	1d1a      	adds	r2, r3, #4
 8018346:	600a      	str	r2, [r1, #0]
 8018348:	681e      	ldr	r6, [r3, #0]
 801834a:	6862      	ldr	r2, [r4, #4]
 801834c:	2100      	movs	r1, #0
 801834e:	4630      	mov	r0, r6
 8018350:	f7e7 ff46 	bl	80001e0 <memchr>
 8018354:	b108      	cbz	r0, 801835a <_printf_i+0x1f2>
 8018356:	1b80      	subs	r0, r0, r6
 8018358:	6060      	str	r0, [r4, #4]
 801835a:	6863      	ldr	r3, [r4, #4]
 801835c:	6123      	str	r3, [r4, #16]
 801835e:	2300      	movs	r3, #0
 8018360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018364:	e7a8      	b.n	80182b8 <_printf_i+0x150>
 8018366:	6923      	ldr	r3, [r4, #16]
 8018368:	4632      	mov	r2, r6
 801836a:	4649      	mov	r1, r9
 801836c:	4640      	mov	r0, r8
 801836e:	47d0      	blx	sl
 8018370:	3001      	adds	r0, #1
 8018372:	d0ab      	beq.n	80182cc <_printf_i+0x164>
 8018374:	6823      	ldr	r3, [r4, #0]
 8018376:	079b      	lsls	r3, r3, #30
 8018378:	d413      	bmi.n	80183a2 <_printf_i+0x23a>
 801837a:	68e0      	ldr	r0, [r4, #12]
 801837c:	9b03      	ldr	r3, [sp, #12]
 801837e:	4298      	cmp	r0, r3
 8018380:	bfb8      	it	lt
 8018382:	4618      	movlt	r0, r3
 8018384:	e7a4      	b.n	80182d0 <_printf_i+0x168>
 8018386:	2301      	movs	r3, #1
 8018388:	4632      	mov	r2, r6
 801838a:	4649      	mov	r1, r9
 801838c:	4640      	mov	r0, r8
 801838e:	47d0      	blx	sl
 8018390:	3001      	adds	r0, #1
 8018392:	d09b      	beq.n	80182cc <_printf_i+0x164>
 8018394:	3501      	adds	r5, #1
 8018396:	68e3      	ldr	r3, [r4, #12]
 8018398:	9903      	ldr	r1, [sp, #12]
 801839a:	1a5b      	subs	r3, r3, r1
 801839c:	42ab      	cmp	r3, r5
 801839e:	dcf2      	bgt.n	8018386 <_printf_i+0x21e>
 80183a0:	e7eb      	b.n	801837a <_printf_i+0x212>
 80183a2:	2500      	movs	r5, #0
 80183a4:	f104 0619 	add.w	r6, r4, #25
 80183a8:	e7f5      	b.n	8018396 <_printf_i+0x22e>
 80183aa:	bf00      	nop
 80183ac:	0801f0c6 	.word	0x0801f0c6
 80183b0:	0801f0d7 	.word	0x0801f0d7

080183b4 <cleanup_glue>:
 80183b4:	b538      	push	{r3, r4, r5, lr}
 80183b6:	460c      	mov	r4, r1
 80183b8:	6809      	ldr	r1, [r1, #0]
 80183ba:	4605      	mov	r5, r0
 80183bc:	b109      	cbz	r1, 80183c2 <cleanup_glue+0xe>
 80183be:	f7ff fff9 	bl	80183b4 <cleanup_glue>
 80183c2:	4621      	mov	r1, r4
 80183c4:	4628      	mov	r0, r5
 80183c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80183ca:	f7ff badf 	b.w	801798c <_free_r>
	...

080183d0 <_reclaim_reent>:
 80183d0:	4b2c      	ldr	r3, [pc, #176]	; (8018484 <_reclaim_reent+0xb4>)
 80183d2:	681b      	ldr	r3, [r3, #0]
 80183d4:	4283      	cmp	r3, r0
 80183d6:	b570      	push	{r4, r5, r6, lr}
 80183d8:	4604      	mov	r4, r0
 80183da:	d051      	beq.n	8018480 <_reclaim_reent+0xb0>
 80183dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80183de:	b143      	cbz	r3, 80183f2 <_reclaim_reent+0x22>
 80183e0:	68db      	ldr	r3, [r3, #12]
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	d14a      	bne.n	801847c <_reclaim_reent+0xac>
 80183e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80183e8:	6819      	ldr	r1, [r3, #0]
 80183ea:	b111      	cbz	r1, 80183f2 <_reclaim_reent+0x22>
 80183ec:	4620      	mov	r0, r4
 80183ee:	f7ff facd 	bl	801798c <_free_r>
 80183f2:	6961      	ldr	r1, [r4, #20]
 80183f4:	b111      	cbz	r1, 80183fc <_reclaim_reent+0x2c>
 80183f6:	4620      	mov	r0, r4
 80183f8:	f7ff fac8 	bl	801798c <_free_r>
 80183fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80183fe:	b111      	cbz	r1, 8018406 <_reclaim_reent+0x36>
 8018400:	4620      	mov	r0, r4
 8018402:	f7ff fac3 	bl	801798c <_free_r>
 8018406:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8018408:	b111      	cbz	r1, 8018410 <_reclaim_reent+0x40>
 801840a:	4620      	mov	r0, r4
 801840c:	f7ff fabe 	bl	801798c <_free_r>
 8018410:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8018412:	b111      	cbz	r1, 801841a <_reclaim_reent+0x4a>
 8018414:	4620      	mov	r0, r4
 8018416:	f7ff fab9 	bl	801798c <_free_r>
 801841a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801841c:	b111      	cbz	r1, 8018424 <_reclaim_reent+0x54>
 801841e:	4620      	mov	r0, r4
 8018420:	f7ff fab4 	bl	801798c <_free_r>
 8018424:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8018426:	b111      	cbz	r1, 801842e <_reclaim_reent+0x5e>
 8018428:	4620      	mov	r0, r4
 801842a:	f7ff faaf 	bl	801798c <_free_r>
 801842e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8018430:	b111      	cbz	r1, 8018438 <_reclaim_reent+0x68>
 8018432:	4620      	mov	r0, r4
 8018434:	f7ff faaa 	bl	801798c <_free_r>
 8018438:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801843a:	b111      	cbz	r1, 8018442 <_reclaim_reent+0x72>
 801843c:	4620      	mov	r0, r4
 801843e:	f7ff faa5 	bl	801798c <_free_r>
 8018442:	69a3      	ldr	r3, [r4, #24]
 8018444:	b1e3      	cbz	r3, 8018480 <_reclaim_reent+0xb0>
 8018446:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8018448:	4620      	mov	r0, r4
 801844a:	4798      	blx	r3
 801844c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801844e:	b1b9      	cbz	r1, 8018480 <_reclaim_reent+0xb0>
 8018450:	4620      	mov	r0, r4
 8018452:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8018456:	f7ff bfad 	b.w	80183b4 <cleanup_glue>
 801845a:	5949      	ldr	r1, [r1, r5]
 801845c:	b941      	cbnz	r1, 8018470 <_reclaim_reent+0xa0>
 801845e:	3504      	adds	r5, #4
 8018460:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018462:	2d80      	cmp	r5, #128	; 0x80
 8018464:	68d9      	ldr	r1, [r3, #12]
 8018466:	d1f8      	bne.n	801845a <_reclaim_reent+0x8a>
 8018468:	4620      	mov	r0, r4
 801846a:	f7ff fa8f 	bl	801798c <_free_r>
 801846e:	e7ba      	b.n	80183e6 <_reclaim_reent+0x16>
 8018470:	680e      	ldr	r6, [r1, #0]
 8018472:	4620      	mov	r0, r4
 8018474:	f7ff fa8a 	bl	801798c <_free_r>
 8018478:	4631      	mov	r1, r6
 801847a:	e7ef      	b.n	801845c <_reclaim_reent+0x8c>
 801847c:	2500      	movs	r5, #0
 801847e:	e7ef      	b.n	8018460 <_reclaim_reent+0x90>
 8018480:	bd70      	pop	{r4, r5, r6, pc}
 8018482:	bf00      	nop
 8018484:	200001c8 	.word	0x200001c8

08018488 <_sbrk_r>:
 8018488:	b538      	push	{r3, r4, r5, lr}
 801848a:	4d06      	ldr	r5, [pc, #24]	; (80184a4 <_sbrk_r+0x1c>)
 801848c:	2300      	movs	r3, #0
 801848e:	4604      	mov	r4, r0
 8018490:	4608      	mov	r0, r1
 8018492:	602b      	str	r3, [r5, #0]
 8018494:	f7ed f842 	bl	800551c <_sbrk>
 8018498:	1c43      	adds	r3, r0, #1
 801849a:	d102      	bne.n	80184a2 <_sbrk_r+0x1a>
 801849c:	682b      	ldr	r3, [r5, #0]
 801849e:	b103      	cbz	r3, 80184a2 <_sbrk_r+0x1a>
 80184a0:	6023      	str	r3, [r4, #0]
 80184a2:	bd38      	pop	{r3, r4, r5, pc}
 80184a4:	200147fc 	.word	0x200147fc

080184a8 <siprintf>:
 80184a8:	b40e      	push	{r1, r2, r3}
 80184aa:	b500      	push	{lr}
 80184ac:	b09c      	sub	sp, #112	; 0x70
 80184ae:	ab1d      	add	r3, sp, #116	; 0x74
 80184b0:	9002      	str	r0, [sp, #8]
 80184b2:	9006      	str	r0, [sp, #24]
 80184b4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80184b8:	4809      	ldr	r0, [pc, #36]	; (80184e0 <siprintf+0x38>)
 80184ba:	9107      	str	r1, [sp, #28]
 80184bc:	9104      	str	r1, [sp, #16]
 80184be:	4909      	ldr	r1, [pc, #36]	; (80184e4 <siprintf+0x3c>)
 80184c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80184c4:	9105      	str	r1, [sp, #20]
 80184c6:	6800      	ldr	r0, [r0, #0]
 80184c8:	9301      	str	r3, [sp, #4]
 80184ca:	a902      	add	r1, sp, #8
 80184cc:	f001 fc10 	bl	8019cf0 <_svfiprintf_r>
 80184d0:	9b02      	ldr	r3, [sp, #8]
 80184d2:	2200      	movs	r2, #0
 80184d4:	701a      	strb	r2, [r3, #0]
 80184d6:	b01c      	add	sp, #112	; 0x70
 80184d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80184dc:	b003      	add	sp, #12
 80184de:	4770      	bx	lr
 80184e0:	200001c8 	.word	0x200001c8
 80184e4:	ffff0208 	.word	0xffff0208

080184e8 <__sread>:
 80184e8:	b510      	push	{r4, lr}
 80184ea:	460c      	mov	r4, r1
 80184ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80184f0:	f001 fcfe 	bl	8019ef0 <_read_r>
 80184f4:	2800      	cmp	r0, #0
 80184f6:	bfab      	itete	ge
 80184f8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80184fa:	89a3      	ldrhlt	r3, [r4, #12]
 80184fc:	181b      	addge	r3, r3, r0
 80184fe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018502:	bfac      	ite	ge
 8018504:	6563      	strge	r3, [r4, #84]	; 0x54
 8018506:	81a3      	strhlt	r3, [r4, #12]
 8018508:	bd10      	pop	{r4, pc}

0801850a <__swrite>:
 801850a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801850e:	461f      	mov	r7, r3
 8018510:	898b      	ldrh	r3, [r1, #12]
 8018512:	05db      	lsls	r3, r3, #23
 8018514:	4605      	mov	r5, r0
 8018516:	460c      	mov	r4, r1
 8018518:	4616      	mov	r6, r2
 801851a:	d505      	bpl.n	8018528 <__swrite+0x1e>
 801851c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018520:	2302      	movs	r3, #2
 8018522:	2200      	movs	r2, #0
 8018524:	f000 ffde 	bl	80194e4 <_lseek_r>
 8018528:	89a3      	ldrh	r3, [r4, #12]
 801852a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801852e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018532:	81a3      	strh	r3, [r4, #12]
 8018534:	4632      	mov	r2, r6
 8018536:	463b      	mov	r3, r7
 8018538:	4628      	mov	r0, r5
 801853a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801853e:	f000 b86f 	b.w	8018620 <_write_r>

08018542 <__sseek>:
 8018542:	b510      	push	{r4, lr}
 8018544:	460c      	mov	r4, r1
 8018546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801854a:	f000 ffcb 	bl	80194e4 <_lseek_r>
 801854e:	1c43      	adds	r3, r0, #1
 8018550:	89a3      	ldrh	r3, [r4, #12]
 8018552:	bf15      	itete	ne
 8018554:	6560      	strne	r0, [r4, #84]	; 0x54
 8018556:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801855a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801855e:	81a3      	strheq	r3, [r4, #12]
 8018560:	bf18      	it	ne
 8018562:	81a3      	strhne	r3, [r4, #12]
 8018564:	bd10      	pop	{r4, pc}

08018566 <__sclose>:
 8018566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801856a:	f000 b86b 	b.w	8018644 <_close_r>

0801856e <strcat>:
 801856e:	b510      	push	{r4, lr}
 8018570:	4602      	mov	r2, r0
 8018572:	7814      	ldrb	r4, [r2, #0]
 8018574:	4613      	mov	r3, r2
 8018576:	3201      	adds	r2, #1
 8018578:	2c00      	cmp	r4, #0
 801857a:	d1fa      	bne.n	8018572 <strcat+0x4>
 801857c:	3b01      	subs	r3, #1
 801857e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018582:	f803 2f01 	strb.w	r2, [r3, #1]!
 8018586:	2a00      	cmp	r2, #0
 8018588:	d1f9      	bne.n	801857e <strcat+0x10>
 801858a:	bd10      	pop	{r4, pc}

0801858c <strcpy>:
 801858c:	4603      	mov	r3, r0
 801858e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8018592:	f803 2b01 	strb.w	r2, [r3], #1
 8018596:	2a00      	cmp	r2, #0
 8018598:	d1f9      	bne.n	801858e <strcpy+0x2>
 801859a:	4770      	bx	lr

0801859c <__utoa>:
 801859c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801859e:	4c1f      	ldr	r4, [pc, #124]	; (801861c <__utoa+0x80>)
 80185a0:	b08b      	sub	sp, #44	; 0x2c
 80185a2:	4605      	mov	r5, r0
 80185a4:	460b      	mov	r3, r1
 80185a6:	466e      	mov	r6, sp
 80185a8:	f104 0c20 	add.w	ip, r4, #32
 80185ac:	6820      	ldr	r0, [r4, #0]
 80185ae:	6861      	ldr	r1, [r4, #4]
 80185b0:	4637      	mov	r7, r6
 80185b2:	c703      	stmia	r7!, {r0, r1}
 80185b4:	3408      	adds	r4, #8
 80185b6:	4564      	cmp	r4, ip
 80185b8:	463e      	mov	r6, r7
 80185ba:	d1f7      	bne.n	80185ac <__utoa+0x10>
 80185bc:	7921      	ldrb	r1, [r4, #4]
 80185be:	7139      	strb	r1, [r7, #4]
 80185c0:	1e91      	subs	r1, r2, #2
 80185c2:	6820      	ldr	r0, [r4, #0]
 80185c4:	6038      	str	r0, [r7, #0]
 80185c6:	2922      	cmp	r1, #34	; 0x22
 80185c8:	f04f 0100 	mov.w	r1, #0
 80185cc:	d904      	bls.n	80185d8 <__utoa+0x3c>
 80185ce:	7019      	strb	r1, [r3, #0]
 80185d0:	460b      	mov	r3, r1
 80185d2:	4618      	mov	r0, r3
 80185d4:	b00b      	add	sp, #44	; 0x2c
 80185d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80185d8:	1e58      	subs	r0, r3, #1
 80185da:	4684      	mov	ip, r0
 80185dc:	fbb5 f7f2 	udiv	r7, r5, r2
 80185e0:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80185e4:	fb02 5617 	mls	r6, r2, r7, r5
 80185e8:	4476      	add	r6, lr
 80185ea:	460c      	mov	r4, r1
 80185ec:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80185f0:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80185f4:	462e      	mov	r6, r5
 80185f6:	42b2      	cmp	r2, r6
 80185f8:	f101 0101 	add.w	r1, r1, #1
 80185fc:	463d      	mov	r5, r7
 80185fe:	d9ed      	bls.n	80185dc <__utoa+0x40>
 8018600:	2200      	movs	r2, #0
 8018602:	545a      	strb	r2, [r3, r1]
 8018604:	1919      	adds	r1, r3, r4
 8018606:	1aa5      	subs	r5, r4, r2
 8018608:	42aa      	cmp	r2, r5
 801860a:	dae2      	bge.n	80185d2 <__utoa+0x36>
 801860c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8018610:	780e      	ldrb	r6, [r1, #0]
 8018612:	7006      	strb	r6, [r0, #0]
 8018614:	3201      	adds	r2, #1
 8018616:	f801 5901 	strb.w	r5, [r1], #-1
 801861a:	e7f4      	b.n	8018606 <__utoa+0x6a>
 801861c:	0801f0e8 	.word	0x0801f0e8

08018620 <_write_r>:
 8018620:	b538      	push	{r3, r4, r5, lr}
 8018622:	4d07      	ldr	r5, [pc, #28]	; (8018640 <_write_r+0x20>)
 8018624:	4604      	mov	r4, r0
 8018626:	4608      	mov	r0, r1
 8018628:	4611      	mov	r1, r2
 801862a:	2200      	movs	r2, #0
 801862c:	602a      	str	r2, [r5, #0]
 801862e:	461a      	mov	r2, r3
 8018630:	f7ec ff23 	bl	800547a <_write>
 8018634:	1c43      	adds	r3, r0, #1
 8018636:	d102      	bne.n	801863e <_write_r+0x1e>
 8018638:	682b      	ldr	r3, [r5, #0]
 801863a:	b103      	cbz	r3, 801863e <_write_r+0x1e>
 801863c:	6023      	str	r3, [r4, #0]
 801863e:	bd38      	pop	{r3, r4, r5, pc}
 8018640:	200147fc 	.word	0x200147fc

08018644 <_close_r>:
 8018644:	b538      	push	{r3, r4, r5, lr}
 8018646:	4d06      	ldr	r5, [pc, #24]	; (8018660 <_close_r+0x1c>)
 8018648:	2300      	movs	r3, #0
 801864a:	4604      	mov	r4, r0
 801864c:	4608      	mov	r0, r1
 801864e:	602b      	str	r3, [r5, #0]
 8018650:	f7ec ff2f 	bl	80054b2 <_close>
 8018654:	1c43      	adds	r3, r0, #1
 8018656:	d102      	bne.n	801865e <_close_r+0x1a>
 8018658:	682b      	ldr	r3, [r5, #0]
 801865a:	b103      	cbz	r3, 801865e <_close_r+0x1a>
 801865c:	6023      	str	r3, [r4, #0]
 801865e:	bd38      	pop	{r3, r4, r5, pc}
 8018660:	200147fc 	.word	0x200147fc

08018664 <quorem>:
 8018664:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018668:	6903      	ldr	r3, [r0, #16]
 801866a:	690c      	ldr	r4, [r1, #16]
 801866c:	42a3      	cmp	r3, r4
 801866e:	4607      	mov	r7, r0
 8018670:	f2c0 8081 	blt.w	8018776 <quorem+0x112>
 8018674:	3c01      	subs	r4, #1
 8018676:	f101 0814 	add.w	r8, r1, #20
 801867a:	f100 0514 	add.w	r5, r0, #20
 801867e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018682:	9301      	str	r3, [sp, #4]
 8018684:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018688:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801868c:	3301      	adds	r3, #1
 801868e:	429a      	cmp	r2, r3
 8018690:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018694:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018698:	fbb2 f6f3 	udiv	r6, r2, r3
 801869c:	d331      	bcc.n	8018702 <quorem+0x9e>
 801869e:	f04f 0e00 	mov.w	lr, #0
 80186a2:	4640      	mov	r0, r8
 80186a4:	46ac      	mov	ip, r5
 80186a6:	46f2      	mov	sl, lr
 80186a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80186ac:	b293      	uxth	r3, r2
 80186ae:	fb06 e303 	mla	r3, r6, r3, lr
 80186b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80186b6:	b29b      	uxth	r3, r3
 80186b8:	ebaa 0303 	sub.w	r3, sl, r3
 80186bc:	0c12      	lsrs	r2, r2, #16
 80186be:	f8dc a000 	ldr.w	sl, [ip]
 80186c2:	fb06 e202 	mla	r2, r6, r2, lr
 80186c6:	fa13 f38a 	uxtah	r3, r3, sl
 80186ca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80186ce:	fa1f fa82 	uxth.w	sl, r2
 80186d2:	f8dc 2000 	ldr.w	r2, [ip]
 80186d6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 80186da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80186de:	b29b      	uxth	r3, r3
 80186e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80186e4:	4581      	cmp	r9, r0
 80186e6:	f84c 3b04 	str.w	r3, [ip], #4
 80186ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80186ee:	d2db      	bcs.n	80186a8 <quorem+0x44>
 80186f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80186f4:	b92b      	cbnz	r3, 8018702 <quorem+0x9e>
 80186f6:	9b01      	ldr	r3, [sp, #4]
 80186f8:	3b04      	subs	r3, #4
 80186fa:	429d      	cmp	r5, r3
 80186fc:	461a      	mov	r2, r3
 80186fe:	d32e      	bcc.n	801875e <quorem+0xfa>
 8018700:	613c      	str	r4, [r7, #16]
 8018702:	4638      	mov	r0, r7
 8018704:	f001 f98a 	bl	8019a1c <__mcmp>
 8018708:	2800      	cmp	r0, #0
 801870a:	db24      	blt.n	8018756 <quorem+0xf2>
 801870c:	3601      	adds	r6, #1
 801870e:	4628      	mov	r0, r5
 8018710:	f04f 0c00 	mov.w	ip, #0
 8018714:	f858 2b04 	ldr.w	r2, [r8], #4
 8018718:	f8d0 e000 	ldr.w	lr, [r0]
 801871c:	b293      	uxth	r3, r2
 801871e:	ebac 0303 	sub.w	r3, ip, r3
 8018722:	0c12      	lsrs	r2, r2, #16
 8018724:	fa13 f38e 	uxtah	r3, r3, lr
 8018728:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 801872c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018730:	b29b      	uxth	r3, r3
 8018732:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018736:	45c1      	cmp	r9, r8
 8018738:	f840 3b04 	str.w	r3, [r0], #4
 801873c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8018740:	d2e8      	bcs.n	8018714 <quorem+0xb0>
 8018742:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018746:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801874a:	b922      	cbnz	r2, 8018756 <quorem+0xf2>
 801874c:	3b04      	subs	r3, #4
 801874e:	429d      	cmp	r5, r3
 8018750:	461a      	mov	r2, r3
 8018752:	d30a      	bcc.n	801876a <quorem+0x106>
 8018754:	613c      	str	r4, [r7, #16]
 8018756:	4630      	mov	r0, r6
 8018758:	b003      	add	sp, #12
 801875a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801875e:	6812      	ldr	r2, [r2, #0]
 8018760:	3b04      	subs	r3, #4
 8018762:	2a00      	cmp	r2, #0
 8018764:	d1cc      	bne.n	8018700 <quorem+0x9c>
 8018766:	3c01      	subs	r4, #1
 8018768:	e7c7      	b.n	80186fa <quorem+0x96>
 801876a:	6812      	ldr	r2, [r2, #0]
 801876c:	3b04      	subs	r3, #4
 801876e:	2a00      	cmp	r2, #0
 8018770:	d1f0      	bne.n	8018754 <quorem+0xf0>
 8018772:	3c01      	subs	r4, #1
 8018774:	e7eb      	b.n	801874e <quorem+0xea>
 8018776:	2000      	movs	r0, #0
 8018778:	e7ee      	b.n	8018758 <quorem+0xf4>
 801877a:	0000      	movs	r0, r0
 801877c:	0000      	movs	r0, r0
	...

08018780 <_dtoa_r>:
 8018780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018784:	ed2d 8b02 	vpush	{d8}
 8018788:	ec57 6b10 	vmov	r6, r7, d0
 801878c:	b095      	sub	sp, #84	; 0x54
 801878e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8018790:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8018794:	9105      	str	r1, [sp, #20]
 8018796:	e9cd 6702 	strd	r6, r7, [sp, #8]
 801879a:	4604      	mov	r4, r0
 801879c:	9209      	str	r2, [sp, #36]	; 0x24
 801879e:	930f      	str	r3, [sp, #60]	; 0x3c
 80187a0:	b975      	cbnz	r5, 80187c0 <_dtoa_r+0x40>
 80187a2:	2010      	movs	r0, #16
 80187a4:	f7ff f8cc 	bl	8017940 <malloc>
 80187a8:	4602      	mov	r2, r0
 80187aa:	6260      	str	r0, [r4, #36]	; 0x24
 80187ac:	b920      	cbnz	r0, 80187b8 <_dtoa_r+0x38>
 80187ae:	4bb2      	ldr	r3, [pc, #712]	; (8018a78 <_dtoa_r+0x2f8>)
 80187b0:	21ea      	movs	r1, #234	; 0xea
 80187b2:	48b2      	ldr	r0, [pc, #712]	; (8018a7c <_dtoa_r+0x2fc>)
 80187b4:	f001 fbae 	bl	8019f14 <__assert_func>
 80187b8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80187bc:	6005      	str	r5, [r0, #0]
 80187be:	60c5      	str	r5, [r0, #12]
 80187c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80187c2:	6819      	ldr	r1, [r3, #0]
 80187c4:	b151      	cbz	r1, 80187dc <_dtoa_r+0x5c>
 80187c6:	685a      	ldr	r2, [r3, #4]
 80187c8:	604a      	str	r2, [r1, #4]
 80187ca:	2301      	movs	r3, #1
 80187cc:	4093      	lsls	r3, r2
 80187ce:	608b      	str	r3, [r1, #8]
 80187d0:	4620      	mov	r0, r4
 80187d2:	f000 fee5 	bl	80195a0 <_Bfree>
 80187d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80187d8:	2200      	movs	r2, #0
 80187da:	601a      	str	r2, [r3, #0]
 80187dc:	1e3b      	subs	r3, r7, #0
 80187de:	bfb9      	ittee	lt
 80187e0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80187e4:	9303      	strlt	r3, [sp, #12]
 80187e6:	2300      	movge	r3, #0
 80187e8:	f8c8 3000 	strge.w	r3, [r8]
 80187ec:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80187f0:	4ba3      	ldr	r3, [pc, #652]	; (8018a80 <_dtoa_r+0x300>)
 80187f2:	bfbc      	itt	lt
 80187f4:	2201      	movlt	r2, #1
 80187f6:	f8c8 2000 	strlt.w	r2, [r8]
 80187fa:	ea33 0309 	bics.w	r3, r3, r9
 80187fe:	d11b      	bne.n	8018838 <_dtoa_r+0xb8>
 8018800:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018802:	f242 730f 	movw	r3, #9999	; 0x270f
 8018806:	6013      	str	r3, [r2, #0]
 8018808:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801880c:	4333      	orrs	r3, r6
 801880e:	f000 857a 	beq.w	8019306 <_dtoa_r+0xb86>
 8018812:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018814:	b963      	cbnz	r3, 8018830 <_dtoa_r+0xb0>
 8018816:	4b9b      	ldr	r3, [pc, #620]	; (8018a84 <_dtoa_r+0x304>)
 8018818:	e024      	b.n	8018864 <_dtoa_r+0xe4>
 801881a:	4b9b      	ldr	r3, [pc, #620]	; (8018a88 <_dtoa_r+0x308>)
 801881c:	9300      	str	r3, [sp, #0]
 801881e:	3308      	adds	r3, #8
 8018820:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8018822:	6013      	str	r3, [r2, #0]
 8018824:	9800      	ldr	r0, [sp, #0]
 8018826:	b015      	add	sp, #84	; 0x54
 8018828:	ecbd 8b02 	vpop	{d8}
 801882c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018830:	4b94      	ldr	r3, [pc, #592]	; (8018a84 <_dtoa_r+0x304>)
 8018832:	9300      	str	r3, [sp, #0]
 8018834:	3303      	adds	r3, #3
 8018836:	e7f3      	b.n	8018820 <_dtoa_r+0xa0>
 8018838:	ed9d 7b02 	vldr	d7, [sp, #8]
 801883c:	2200      	movs	r2, #0
 801883e:	ec51 0b17 	vmov	r0, r1, d7
 8018842:	2300      	movs	r3, #0
 8018844:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8018848:	f7e8 f93e 	bl	8000ac8 <__aeabi_dcmpeq>
 801884c:	4680      	mov	r8, r0
 801884e:	b158      	cbz	r0, 8018868 <_dtoa_r+0xe8>
 8018850:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8018852:	2301      	movs	r3, #1
 8018854:	6013      	str	r3, [r2, #0]
 8018856:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018858:	2b00      	cmp	r3, #0
 801885a:	f000 8551 	beq.w	8019300 <_dtoa_r+0xb80>
 801885e:	488b      	ldr	r0, [pc, #556]	; (8018a8c <_dtoa_r+0x30c>)
 8018860:	6018      	str	r0, [r3, #0]
 8018862:	1e43      	subs	r3, r0, #1
 8018864:	9300      	str	r3, [sp, #0]
 8018866:	e7dd      	b.n	8018824 <_dtoa_r+0xa4>
 8018868:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 801886c:	aa12      	add	r2, sp, #72	; 0x48
 801886e:	a913      	add	r1, sp, #76	; 0x4c
 8018870:	4620      	mov	r0, r4
 8018872:	f001 f977 	bl	8019b64 <__d2b>
 8018876:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801887a:	4683      	mov	fp, r0
 801887c:	2d00      	cmp	r5, #0
 801887e:	d07c      	beq.n	801897a <_dtoa_r+0x1fa>
 8018880:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8018882:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 8018886:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801888a:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 801888e:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8018892:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8018896:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801889a:	4b7d      	ldr	r3, [pc, #500]	; (8018a90 <_dtoa_r+0x310>)
 801889c:	2200      	movs	r2, #0
 801889e:	4630      	mov	r0, r6
 80188a0:	4639      	mov	r1, r7
 80188a2:	f7e7 fcf1 	bl	8000288 <__aeabi_dsub>
 80188a6:	a36e      	add	r3, pc, #440	; (adr r3, 8018a60 <_dtoa_r+0x2e0>)
 80188a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188ac:	f7e7 fea4 	bl	80005f8 <__aeabi_dmul>
 80188b0:	a36d      	add	r3, pc, #436	; (adr r3, 8018a68 <_dtoa_r+0x2e8>)
 80188b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188b6:	f7e7 fce9 	bl	800028c <__adddf3>
 80188ba:	4606      	mov	r6, r0
 80188bc:	4628      	mov	r0, r5
 80188be:	460f      	mov	r7, r1
 80188c0:	f7e7 fe30 	bl	8000524 <__aeabi_i2d>
 80188c4:	a36a      	add	r3, pc, #424	; (adr r3, 8018a70 <_dtoa_r+0x2f0>)
 80188c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80188ca:	f7e7 fe95 	bl	80005f8 <__aeabi_dmul>
 80188ce:	4602      	mov	r2, r0
 80188d0:	460b      	mov	r3, r1
 80188d2:	4630      	mov	r0, r6
 80188d4:	4639      	mov	r1, r7
 80188d6:	f7e7 fcd9 	bl	800028c <__adddf3>
 80188da:	4606      	mov	r6, r0
 80188dc:	460f      	mov	r7, r1
 80188de:	f7e8 f93b 	bl	8000b58 <__aeabi_d2iz>
 80188e2:	2200      	movs	r2, #0
 80188e4:	4682      	mov	sl, r0
 80188e6:	2300      	movs	r3, #0
 80188e8:	4630      	mov	r0, r6
 80188ea:	4639      	mov	r1, r7
 80188ec:	f7e8 f8f6 	bl	8000adc <__aeabi_dcmplt>
 80188f0:	b148      	cbz	r0, 8018906 <_dtoa_r+0x186>
 80188f2:	4650      	mov	r0, sl
 80188f4:	f7e7 fe16 	bl	8000524 <__aeabi_i2d>
 80188f8:	4632      	mov	r2, r6
 80188fa:	463b      	mov	r3, r7
 80188fc:	f7e8 f8e4 	bl	8000ac8 <__aeabi_dcmpeq>
 8018900:	b908      	cbnz	r0, 8018906 <_dtoa_r+0x186>
 8018902:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8018906:	f1ba 0f16 	cmp.w	sl, #22
 801890a:	d854      	bhi.n	80189b6 <_dtoa_r+0x236>
 801890c:	4b61      	ldr	r3, [pc, #388]	; (8018a94 <_dtoa_r+0x314>)
 801890e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018916:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801891a:	f7e8 f8df 	bl	8000adc <__aeabi_dcmplt>
 801891e:	2800      	cmp	r0, #0
 8018920:	d04b      	beq.n	80189ba <_dtoa_r+0x23a>
 8018922:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8018926:	2300      	movs	r3, #0
 8018928:	930e      	str	r3, [sp, #56]	; 0x38
 801892a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801892c:	1b5d      	subs	r5, r3, r5
 801892e:	1e6b      	subs	r3, r5, #1
 8018930:	9304      	str	r3, [sp, #16]
 8018932:	bf43      	ittte	mi
 8018934:	2300      	movmi	r3, #0
 8018936:	f1c5 0801 	rsbmi	r8, r5, #1
 801893a:	9304      	strmi	r3, [sp, #16]
 801893c:	f04f 0800 	movpl.w	r8, #0
 8018940:	f1ba 0f00 	cmp.w	sl, #0
 8018944:	db3b      	blt.n	80189be <_dtoa_r+0x23e>
 8018946:	9b04      	ldr	r3, [sp, #16]
 8018948:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 801894c:	4453      	add	r3, sl
 801894e:	9304      	str	r3, [sp, #16]
 8018950:	2300      	movs	r3, #0
 8018952:	9306      	str	r3, [sp, #24]
 8018954:	9b05      	ldr	r3, [sp, #20]
 8018956:	2b09      	cmp	r3, #9
 8018958:	d869      	bhi.n	8018a2e <_dtoa_r+0x2ae>
 801895a:	2b05      	cmp	r3, #5
 801895c:	bfc4      	itt	gt
 801895e:	3b04      	subgt	r3, #4
 8018960:	9305      	strgt	r3, [sp, #20]
 8018962:	9b05      	ldr	r3, [sp, #20]
 8018964:	f1a3 0302 	sub.w	r3, r3, #2
 8018968:	bfcc      	ite	gt
 801896a:	2500      	movgt	r5, #0
 801896c:	2501      	movle	r5, #1
 801896e:	2b03      	cmp	r3, #3
 8018970:	d869      	bhi.n	8018a46 <_dtoa_r+0x2c6>
 8018972:	e8df f003 	tbb	[pc, r3]
 8018976:	4e2c      	.short	0x4e2c
 8018978:	5a4c      	.short	0x5a4c
 801897a:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 801897e:	441d      	add	r5, r3
 8018980:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8018984:	2b20      	cmp	r3, #32
 8018986:	bfc1      	itttt	gt
 8018988:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801898c:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8018990:	fa09 f303 	lslgt.w	r3, r9, r3
 8018994:	fa26 f000 	lsrgt.w	r0, r6, r0
 8018998:	bfda      	itte	le
 801899a:	f1c3 0320 	rsble	r3, r3, #32
 801899e:	fa06 f003 	lslle.w	r0, r6, r3
 80189a2:	4318      	orrgt	r0, r3
 80189a4:	f7e7 fdae 	bl	8000504 <__aeabi_ui2d>
 80189a8:	2301      	movs	r3, #1
 80189aa:	4606      	mov	r6, r0
 80189ac:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80189b0:	3d01      	subs	r5, #1
 80189b2:	9310      	str	r3, [sp, #64]	; 0x40
 80189b4:	e771      	b.n	801889a <_dtoa_r+0x11a>
 80189b6:	2301      	movs	r3, #1
 80189b8:	e7b6      	b.n	8018928 <_dtoa_r+0x1a8>
 80189ba:	900e      	str	r0, [sp, #56]	; 0x38
 80189bc:	e7b5      	b.n	801892a <_dtoa_r+0x1aa>
 80189be:	f1ca 0300 	rsb	r3, sl, #0
 80189c2:	9306      	str	r3, [sp, #24]
 80189c4:	2300      	movs	r3, #0
 80189c6:	eba8 080a 	sub.w	r8, r8, sl
 80189ca:	930d      	str	r3, [sp, #52]	; 0x34
 80189cc:	e7c2      	b.n	8018954 <_dtoa_r+0x1d4>
 80189ce:	2300      	movs	r3, #0
 80189d0:	9308      	str	r3, [sp, #32]
 80189d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	dc39      	bgt.n	8018a4c <_dtoa_r+0x2cc>
 80189d8:	f04f 0901 	mov.w	r9, #1
 80189dc:	f8cd 9004 	str.w	r9, [sp, #4]
 80189e0:	464b      	mov	r3, r9
 80189e2:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80189e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80189e8:	2200      	movs	r2, #0
 80189ea:	6042      	str	r2, [r0, #4]
 80189ec:	2204      	movs	r2, #4
 80189ee:	f102 0614 	add.w	r6, r2, #20
 80189f2:	429e      	cmp	r6, r3
 80189f4:	6841      	ldr	r1, [r0, #4]
 80189f6:	d92f      	bls.n	8018a58 <_dtoa_r+0x2d8>
 80189f8:	4620      	mov	r0, r4
 80189fa:	f000 fd91 	bl	8019520 <_Balloc>
 80189fe:	9000      	str	r0, [sp, #0]
 8018a00:	2800      	cmp	r0, #0
 8018a02:	d14b      	bne.n	8018a9c <_dtoa_r+0x31c>
 8018a04:	4b24      	ldr	r3, [pc, #144]	; (8018a98 <_dtoa_r+0x318>)
 8018a06:	4602      	mov	r2, r0
 8018a08:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8018a0c:	e6d1      	b.n	80187b2 <_dtoa_r+0x32>
 8018a0e:	2301      	movs	r3, #1
 8018a10:	e7de      	b.n	80189d0 <_dtoa_r+0x250>
 8018a12:	2300      	movs	r3, #0
 8018a14:	9308      	str	r3, [sp, #32]
 8018a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a18:	eb0a 0903 	add.w	r9, sl, r3
 8018a1c:	f109 0301 	add.w	r3, r9, #1
 8018a20:	2b01      	cmp	r3, #1
 8018a22:	9301      	str	r3, [sp, #4]
 8018a24:	bfb8      	it	lt
 8018a26:	2301      	movlt	r3, #1
 8018a28:	e7dd      	b.n	80189e6 <_dtoa_r+0x266>
 8018a2a:	2301      	movs	r3, #1
 8018a2c:	e7f2      	b.n	8018a14 <_dtoa_r+0x294>
 8018a2e:	2501      	movs	r5, #1
 8018a30:	2300      	movs	r3, #0
 8018a32:	9305      	str	r3, [sp, #20]
 8018a34:	9508      	str	r5, [sp, #32]
 8018a36:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
 8018a3a:	2200      	movs	r2, #0
 8018a3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8018a40:	2312      	movs	r3, #18
 8018a42:	9209      	str	r2, [sp, #36]	; 0x24
 8018a44:	e7cf      	b.n	80189e6 <_dtoa_r+0x266>
 8018a46:	2301      	movs	r3, #1
 8018a48:	9308      	str	r3, [sp, #32]
 8018a4a:	e7f4      	b.n	8018a36 <_dtoa_r+0x2b6>
 8018a4c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8018a50:	f8cd 9004 	str.w	r9, [sp, #4]
 8018a54:	464b      	mov	r3, r9
 8018a56:	e7c6      	b.n	80189e6 <_dtoa_r+0x266>
 8018a58:	3101      	adds	r1, #1
 8018a5a:	6041      	str	r1, [r0, #4]
 8018a5c:	0052      	lsls	r2, r2, #1
 8018a5e:	e7c6      	b.n	80189ee <_dtoa_r+0x26e>
 8018a60:	636f4361 	.word	0x636f4361
 8018a64:	3fd287a7 	.word	0x3fd287a7
 8018a68:	8b60c8b3 	.word	0x8b60c8b3
 8018a6c:	3fc68a28 	.word	0x3fc68a28
 8018a70:	509f79fb 	.word	0x509f79fb
 8018a74:	3fd34413 	.word	0x3fd34413
 8018a78:	0801f11a 	.word	0x0801f11a
 8018a7c:	0801f131 	.word	0x0801f131
 8018a80:	7ff00000 	.word	0x7ff00000
 8018a84:	0801f116 	.word	0x0801f116
 8018a88:	0801f10d 	.word	0x0801f10d
 8018a8c:	0801f0c5 	.word	0x0801f0c5
 8018a90:	3ff80000 	.word	0x3ff80000
 8018a94:	0801f230 	.word	0x0801f230
 8018a98:	0801f190 	.word	0x0801f190
 8018a9c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8018a9e:	9a00      	ldr	r2, [sp, #0]
 8018aa0:	601a      	str	r2, [r3, #0]
 8018aa2:	9b01      	ldr	r3, [sp, #4]
 8018aa4:	2b0e      	cmp	r3, #14
 8018aa6:	f200 80ad 	bhi.w	8018c04 <_dtoa_r+0x484>
 8018aaa:	2d00      	cmp	r5, #0
 8018aac:	f000 80aa 	beq.w	8018c04 <_dtoa_r+0x484>
 8018ab0:	f1ba 0f00 	cmp.w	sl, #0
 8018ab4:	dd36      	ble.n	8018b24 <_dtoa_r+0x3a4>
 8018ab6:	4ac3      	ldr	r2, [pc, #780]	; (8018dc4 <_dtoa_r+0x644>)
 8018ab8:	f00a 030f 	and.w	r3, sl, #15
 8018abc:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8018ac0:	ed93 7b00 	vldr	d7, [r3]
 8018ac4:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8018ac8:	ea4f 172a 	mov.w	r7, sl, asr #4
 8018acc:	eeb0 8a47 	vmov.f32	s16, s14
 8018ad0:	eef0 8a67 	vmov.f32	s17, s15
 8018ad4:	d016      	beq.n	8018b04 <_dtoa_r+0x384>
 8018ad6:	4bbc      	ldr	r3, [pc, #752]	; (8018dc8 <_dtoa_r+0x648>)
 8018ad8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018adc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8018ae0:	f7e7 feb4 	bl	800084c <__aeabi_ddiv>
 8018ae4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018ae8:	f007 070f 	and.w	r7, r7, #15
 8018aec:	2503      	movs	r5, #3
 8018aee:	4eb6      	ldr	r6, [pc, #728]	; (8018dc8 <_dtoa_r+0x648>)
 8018af0:	b957      	cbnz	r7, 8018b08 <_dtoa_r+0x388>
 8018af2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018af6:	ec53 2b18 	vmov	r2, r3, d8
 8018afa:	f7e7 fea7 	bl	800084c <__aeabi_ddiv>
 8018afe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018b02:	e029      	b.n	8018b58 <_dtoa_r+0x3d8>
 8018b04:	2502      	movs	r5, #2
 8018b06:	e7f2      	b.n	8018aee <_dtoa_r+0x36e>
 8018b08:	07f9      	lsls	r1, r7, #31
 8018b0a:	d508      	bpl.n	8018b1e <_dtoa_r+0x39e>
 8018b0c:	ec51 0b18 	vmov	r0, r1, d8
 8018b10:	e9d6 2300 	ldrd	r2, r3, [r6]
 8018b14:	f7e7 fd70 	bl	80005f8 <__aeabi_dmul>
 8018b18:	ec41 0b18 	vmov	d8, r0, r1
 8018b1c:	3501      	adds	r5, #1
 8018b1e:	107f      	asrs	r7, r7, #1
 8018b20:	3608      	adds	r6, #8
 8018b22:	e7e5      	b.n	8018af0 <_dtoa_r+0x370>
 8018b24:	f000 80a6 	beq.w	8018c74 <_dtoa_r+0x4f4>
 8018b28:	f1ca 0600 	rsb	r6, sl, #0
 8018b2c:	4ba5      	ldr	r3, [pc, #660]	; (8018dc4 <_dtoa_r+0x644>)
 8018b2e:	4fa6      	ldr	r7, [pc, #664]	; (8018dc8 <_dtoa_r+0x648>)
 8018b30:	f006 020f 	and.w	r2, r6, #15
 8018b34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8018b40:	f7e7 fd5a 	bl	80005f8 <__aeabi_dmul>
 8018b44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018b48:	1136      	asrs	r6, r6, #4
 8018b4a:	2300      	movs	r3, #0
 8018b4c:	2502      	movs	r5, #2
 8018b4e:	2e00      	cmp	r6, #0
 8018b50:	f040 8085 	bne.w	8018c5e <_dtoa_r+0x4de>
 8018b54:	2b00      	cmp	r3, #0
 8018b56:	d1d2      	bne.n	8018afe <_dtoa_r+0x37e>
 8018b58:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018b5a:	2b00      	cmp	r3, #0
 8018b5c:	f000 808c 	beq.w	8018c78 <_dtoa_r+0x4f8>
 8018b60:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018b64:	4b99      	ldr	r3, [pc, #612]	; (8018dcc <_dtoa_r+0x64c>)
 8018b66:	2200      	movs	r2, #0
 8018b68:	4630      	mov	r0, r6
 8018b6a:	4639      	mov	r1, r7
 8018b6c:	f7e7 ffb6 	bl	8000adc <__aeabi_dcmplt>
 8018b70:	2800      	cmp	r0, #0
 8018b72:	f000 8081 	beq.w	8018c78 <_dtoa_r+0x4f8>
 8018b76:	9b01      	ldr	r3, [sp, #4]
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	d07d      	beq.n	8018c78 <_dtoa_r+0x4f8>
 8018b7c:	f1b9 0f00 	cmp.w	r9, #0
 8018b80:	dd3c      	ble.n	8018bfc <_dtoa_r+0x47c>
 8018b82:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8018b86:	9307      	str	r3, [sp, #28]
 8018b88:	2200      	movs	r2, #0
 8018b8a:	4b91      	ldr	r3, [pc, #580]	; (8018dd0 <_dtoa_r+0x650>)
 8018b8c:	4630      	mov	r0, r6
 8018b8e:	4639      	mov	r1, r7
 8018b90:	f7e7 fd32 	bl	80005f8 <__aeabi_dmul>
 8018b94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018b98:	3501      	adds	r5, #1
 8018b9a:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8018b9e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018ba2:	4628      	mov	r0, r5
 8018ba4:	f7e7 fcbe 	bl	8000524 <__aeabi_i2d>
 8018ba8:	4632      	mov	r2, r6
 8018baa:	463b      	mov	r3, r7
 8018bac:	f7e7 fd24 	bl	80005f8 <__aeabi_dmul>
 8018bb0:	4b88      	ldr	r3, [pc, #544]	; (8018dd4 <_dtoa_r+0x654>)
 8018bb2:	2200      	movs	r2, #0
 8018bb4:	f7e7 fb6a 	bl	800028c <__adddf3>
 8018bb8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8018bbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8018bc0:	9303      	str	r3, [sp, #12]
 8018bc2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018bc4:	2b00      	cmp	r3, #0
 8018bc6:	d15c      	bne.n	8018c82 <_dtoa_r+0x502>
 8018bc8:	4b83      	ldr	r3, [pc, #524]	; (8018dd8 <_dtoa_r+0x658>)
 8018bca:	2200      	movs	r2, #0
 8018bcc:	4630      	mov	r0, r6
 8018bce:	4639      	mov	r1, r7
 8018bd0:	f7e7 fb5a 	bl	8000288 <__aeabi_dsub>
 8018bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018bd8:	4606      	mov	r6, r0
 8018bda:	460f      	mov	r7, r1
 8018bdc:	f7e7 ff9c 	bl	8000b18 <__aeabi_dcmpgt>
 8018be0:	2800      	cmp	r0, #0
 8018be2:	f040 8296 	bne.w	8019112 <_dtoa_r+0x992>
 8018be6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8018bea:	4630      	mov	r0, r6
 8018bec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018bf0:	4639      	mov	r1, r7
 8018bf2:	f7e7 ff73 	bl	8000adc <__aeabi_dcmplt>
 8018bf6:	2800      	cmp	r0, #0
 8018bf8:	f040 8288 	bne.w	801910c <_dtoa_r+0x98c>
 8018bfc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8018c00:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8018c04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8018c06:	2b00      	cmp	r3, #0
 8018c08:	f2c0 8158 	blt.w	8018ebc <_dtoa_r+0x73c>
 8018c0c:	f1ba 0f0e 	cmp.w	sl, #14
 8018c10:	f300 8154 	bgt.w	8018ebc <_dtoa_r+0x73c>
 8018c14:	4b6b      	ldr	r3, [pc, #428]	; (8018dc4 <_dtoa_r+0x644>)
 8018c16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8018c1a:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018c1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	f280 80e3 	bge.w	8018dec <_dtoa_r+0x66c>
 8018c26:	9b01      	ldr	r3, [sp, #4]
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	f300 80df 	bgt.w	8018dec <_dtoa_r+0x66c>
 8018c2e:	f040 826d 	bne.w	801910c <_dtoa_r+0x98c>
 8018c32:	4b69      	ldr	r3, [pc, #420]	; (8018dd8 <_dtoa_r+0x658>)
 8018c34:	2200      	movs	r2, #0
 8018c36:	4640      	mov	r0, r8
 8018c38:	4649      	mov	r1, r9
 8018c3a:	f7e7 fcdd 	bl	80005f8 <__aeabi_dmul>
 8018c3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018c42:	f7e7 ff5f 	bl	8000b04 <__aeabi_dcmpge>
 8018c46:	9e01      	ldr	r6, [sp, #4]
 8018c48:	4637      	mov	r7, r6
 8018c4a:	2800      	cmp	r0, #0
 8018c4c:	f040 8243 	bne.w	80190d6 <_dtoa_r+0x956>
 8018c50:	9d00      	ldr	r5, [sp, #0]
 8018c52:	2331      	movs	r3, #49	; 0x31
 8018c54:	f805 3b01 	strb.w	r3, [r5], #1
 8018c58:	f10a 0a01 	add.w	sl, sl, #1
 8018c5c:	e23f      	b.n	80190de <_dtoa_r+0x95e>
 8018c5e:	07f2      	lsls	r2, r6, #31
 8018c60:	d505      	bpl.n	8018c6e <_dtoa_r+0x4ee>
 8018c62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8018c66:	f7e7 fcc7 	bl	80005f8 <__aeabi_dmul>
 8018c6a:	3501      	adds	r5, #1
 8018c6c:	2301      	movs	r3, #1
 8018c6e:	1076      	asrs	r6, r6, #1
 8018c70:	3708      	adds	r7, #8
 8018c72:	e76c      	b.n	8018b4e <_dtoa_r+0x3ce>
 8018c74:	2502      	movs	r5, #2
 8018c76:	e76f      	b.n	8018b58 <_dtoa_r+0x3d8>
 8018c78:	9b01      	ldr	r3, [sp, #4]
 8018c7a:	f8cd a01c 	str.w	sl, [sp, #28]
 8018c7e:	930c      	str	r3, [sp, #48]	; 0x30
 8018c80:	e78d      	b.n	8018b9e <_dtoa_r+0x41e>
 8018c82:	9900      	ldr	r1, [sp, #0]
 8018c84:	980c      	ldr	r0, [sp, #48]	; 0x30
 8018c86:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018c88:	4b4e      	ldr	r3, [pc, #312]	; (8018dc4 <_dtoa_r+0x644>)
 8018c8a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8018c8e:	4401      	add	r1, r0
 8018c90:	9102      	str	r1, [sp, #8]
 8018c92:	9908      	ldr	r1, [sp, #32]
 8018c94:	eeb0 8a47 	vmov.f32	s16, s14
 8018c98:	eef0 8a67 	vmov.f32	s17, s15
 8018c9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8018ca0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8018ca4:	2900      	cmp	r1, #0
 8018ca6:	d045      	beq.n	8018d34 <_dtoa_r+0x5b4>
 8018ca8:	494c      	ldr	r1, [pc, #304]	; (8018ddc <_dtoa_r+0x65c>)
 8018caa:	2000      	movs	r0, #0
 8018cac:	f7e7 fdce 	bl	800084c <__aeabi_ddiv>
 8018cb0:	ec53 2b18 	vmov	r2, r3, d8
 8018cb4:	f7e7 fae8 	bl	8000288 <__aeabi_dsub>
 8018cb8:	9d00      	ldr	r5, [sp, #0]
 8018cba:	ec41 0b18 	vmov	d8, r0, r1
 8018cbe:	4639      	mov	r1, r7
 8018cc0:	4630      	mov	r0, r6
 8018cc2:	f7e7 ff49 	bl	8000b58 <__aeabi_d2iz>
 8018cc6:	900c      	str	r0, [sp, #48]	; 0x30
 8018cc8:	f7e7 fc2c 	bl	8000524 <__aeabi_i2d>
 8018ccc:	4602      	mov	r2, r0
 8018cce:	460b      	mov	r3, r1
 8018cd0:	4630      	mov	r0, r6
 8018cd2:	4639      	mov	r1, r7
 8018cd4:	f7e7 fad8 	bl	8000288 <__aeabi_dsub>
 8018cd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8018cda:	3330      	adds	r3, #48	; 0x30
 8018cdc:	f805 3b01 	strb.w	r3, [r5], #1
 8018ce0:	ec53 2b18 	vmov	r2, r3, d8
 8018ce4:	4606      	mov	r6, r0
 8018ce6:	460f      	mov	r7, r1
 8018ce8:	f7e7 fef8 	bl	8000adc <__aeabi_dcmplt>
 8018cec:	2800      	cmp	r0, #0
 8018cee:	d165      	bne.n	8018dbc <_dtoa_r+0x63c>
 8018cf0:	4632      	mov	r2, r6
 8018cf2:	463b      	mov	r3, r7
 8018cf4:	4935      	ldr	r1, [pc, #212]	; (8018dcc <_dtoa_r+0x64c>)
 8018cf6:	2000      	movs	r0, #0
 8018cf8:	f7e7 fac6 	bl	8000288 <__aeabi_dsub>
 8018cfc:	ec53 2b18 	vmov	r2, r3, d8
 8018d00:	f7e7 feec 	bl	8000adc <__aeabi_dcmplt>
 8018d04:	2800      	cmp	r0, #0
 8018d06:	f040 80b9 	bne.w	8018e7c <_dtoa_r+0x6fc>
 8018d0a:	9b02      	ldr	r3, [sp, #8]
 8018d0c:	429d      	cmp	r5, r3
 8018d0e:	f43f af75 	beq.w	8018bfc <_dtoa_r+0x47c>
 8018d12:	4b2f      	ldr	r3, [pc, #188]	; (8018dd0 <_dtoa_r+0x650>)
 8018d14:	ec51 0b18 	vmov	r0, r1, d8
 8018d18:	2200      	movs	r2, #0
 8018d1a:	f7e7 fc6d 	bl	80005f8 <__aeabi_dmul>
 8018d1e:	4b2c      	ldr	r3, [pc, #176]	; (8018dd0 <_dtoa_r+0x650>)
 8018d20:	ec41 0b18 	vmov	d8, r0, r1
 8018d24:	2200      	movs	r2, #0
 8018d26:	4630      	mov	r0, r6
 8018d28:	4639      	mov	r1, r7
 8018d2a:	f7e7 fc65 	bl	80005f8 <__aeabi_dmul>
 8018d2e:	4606      	mov	r6, r0
 8018d30:	460f      	mov	r7, r1
 8018d32:	e7c4      	b.n	8018cbe <_dtoa_r+0x53e>
 8018d34:	ec51 0b17 	vmov	r0, r1, d7
 8018d38:	f7e7 fc5e 	bl	80005f8 <__aeabi_dmul>
 8018d3c:	9b02      	ldr	r3, [sp, #8]
 8018d3e:	9d00      	ldr	r5, [sp, #0]
 8018d40:	930c      	str	r3, [sp, #48]	; 0x30
 8018d42:	ec41 0b18 	vmov	d8, r0, r1
 8018d46:	4639      	mov	r1, r7
 8018d48:	4630      	mov	r0, r6
 8018d4a:	f7e7 ff05 	bl	8000b58 <__aeabi_d2iz>
 8018d4e:	9011      	str	r0, [sp, #68]	; 0x44
 8018d50:	f7e7 fbe8 	bl	8000524 <__aeabi_i2d>
 8018d54:	4602      	mov	r2, r0
 8018d56:	460b      	mov	r3, r1
 8018d58:	4630      	mov	r0, r6
 8018d5a:	4639      	mov	r1, r7
 8018d5c:	f7e7 fa94 	bl	8000288 <__aeabi_dsub>
 8018d60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8018d62:	3330      	adds	r3, #48	; 0x30
 8018d64:	f805 3b01 	strb.w	r3, [r5], #1
 8018d68:	9b02      	ldr	r3, [sp, #8]
 8018d6a:	429d      	cmp	r5, r3
 8018d6c:	4606      	mov	r6, r0
 8018d6e:	460f      	mov	r7, r1
 8018d70:	f04f 0200 	mov.w	r2, #0
 8018d74:	d134      	bne.n	8018de0 <_dtoa_r+0x660>
 8018d76:	4b19      	ldr	r3, [pc, #100]	; (8018ddc <_dtoa_r+0x65c>)
 8018d78:	ec51 0b18 	vmov	r0, r1, d8
 8018d7c:	f7e7 fa86 	bl	800028c <__adddf3>
 8018d80:	4602      	mov	r2, r0
 8018d82:	460b      	mov	r3, r1
 8018d84:	4630      	mov	r0, r6
 8018d86:	4639      	mov	r1, r7
 8018d88:	f7e7 fec6 	bl	8000b18 <__aeabi_dcmpgt>
 8018d8c:	2800      	cmp	r0, #0
 8018d8e:	d175      	bne.n	8018e7c <_dtoa_r+0x6fc>
 8018d90:	ec53 2b18 	vmov	r2, r3, d8
 8018d94:	4911      	ldr	r1, [pc, #68]	; (8018ddc <_dtoa_r+0x65c>)
 8018d96:	2000      	movs	r0, #0
 8018d98:	f7e7 fa76 	bl	8000288 <__aeabi_dsub>
 8018d9c:	4602      	mov	r2, r0
 8018d9e:	460b      	mov	r3, r1
 8018da0:	4630      	mov	r0, r6
 8018da2:	4639      	mov	r1, r7
 8018da4:	f7e7 fe9a 	bl	8000adc <__aeabi_dcmplt>
 8018da8:	2800      	cmp	r0, #0
 8018daa:	f43f af27 	beq.w	8018bfc <_dtoa_r+0x47c>
 8018dae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018db0:	1e6b      	subs	r3, r5, #1
 8018db2:	930c      	str	r3, [sp, #48]	; 0x30
 8018db4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8018db8:	2b30      	cmp	r3, #48	; 0x30
 8018dba:	d0f8      	beq.n	8018dae <_dtoa_r+0x62e>
 8018dbc:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8018dc0:	e04a      	b.n	8018e58 <_dtoa_r+0x6d8>
 8018dc2:	bf00      	nop
 8018dc4:	0801f230 	.word	0x0801f230
 8018dc8:	0801f208 	.word	0x0801f208
 8018dcc:	3ff00000 	.word	0x3ff00000
 8018dd0:	40240000 	.word	0x40240000
 8018dd4:	401c0000 	.word	0x401c0000
 8018dd8:	40140000 	.word	0x40140000
 8018ddc:	3fe00000 	.word	0x3fe00000
 8018de0:	4baf      	ldr	r3, [pc, #700]	; (80190a0 <_dtoa_r+0x920>)
 8018de2:	f7e7 fc09 	bl	80005f8 <__aeabi_dmul>
 8018de6:	4606      	mov	r6, r0
 8018de8:	460f      	mov	r7, r1
 8018dea:	e7ac      	b.n	8018d46 <_dtoa_r+0x5c6>
 8018dec:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018df0:	9d00      	ldr	r5, [sp, #0]
 8018df2:	4642      	mov	r2, r8
 8018df4:	464b      	mov	r3, r9
 8018df6:	4630      	mov	r0, r6
 8018df8:	4639      	mov	r1, r7
 8018dfa:	f7e7 fd27 	bl	800084c <__aeabi_ddiv>
 8018dfe:	f7e7 feab 	bl	8000b58 <__aeabi_d2iz>
 8018e02:	9002      	str	r0, [sp, #8]
 8018e04:	f7e7 fb8e 	bl	8000524 <__aeabi_i2d>
 8018e08:	4642      	mov	r2, r8
 8018e0a:	464b      	mov	r3, r9
 8018e0c:	f7e7 fbf4 	bl	80005f8 <__aeabi_dmul>
 8018e10:	4602      	mov	r2, r0
 8018e12:	460b      	mov	r3, r1
 8018e14:	4630      	mov	r0, r6
 8018e16:	4639      	mov	r1, r7
 8018e18:	f7e7 fa36 	bl	8000288 <__aeabi_dsub>
 8018e1c:	9e02      	ldr	r6, [sp, #8]
 8018e1e:	9f01      	ldr	r7, [sp, #4]
 8018e20:	3630      	adds	r6, #48	; 0x30
 8018e22:	f805 6b01 	strb.w	r6, [r5], #1
 8018e26:	9e00      	ldr	r6, [sp, #0]
 8018e28:	1bae      	subs	r6, r5, r6
 8018e2a:	42b7      	cmp	r7, r6
 8018e2c:	4602      	mov	r2, r0
 8018e2e:	460b      	mov	r3, r1
 8018e30:	d137      	bne.n	8018ea2 <_dtoa_r+0x722>
 8018e32:	f7e7 fa2b 	bl	800028c <__adddf3>
 8018e36:	4642      	mov	r2, r8
 8018e38:	464b      	mov	r3, r9
 8018e3a:	4606      	mov	r6, r0
 8018e3c:	460f      	mov	r7, r1
 8018e3e:	f7e7 fe6b 	bl	8000b18 <__aeabi_dcmpgt>
 8018e42:	b9c8      	cbnz	r0, 8018e78 <_dtoa_r+0x6f8>
 8018e44:	4642      	mov	r2, r8
 8018e46:	464b      	mov	r3, r9
 8018e48:	4630      	mov	r0, r6
 8018e4a:	4639      	mov	r1, r7
 8018e4c:	f7e7 fe3c 	bl	8000ac8 <__aeabi_dcmpeq>
 8018e50:	b110      	cbz	r0, 8018e58 <_dtoa_r+0x6d8>
 8018e52:	9b02      	ldr	r3, [sp, #8]
 8018e54:	07d9      	lsls	r1, r3, #31
 8018e56:	d40f      	bmi.n	8018e78 <_dtoa_r+0x6f8>
 8018e58:	4620      	mov	r0, r4
 8018e5a:	4659      	mov	r1, fp
 8018e5c:	f000 fba0 	bl	80195a0 <_Bfree>
 8018e60:	2300      	movs	r3, #0
 8018e62:	702b      	strb	r3, [r5, #0]
 8018e64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8018e66:	f10a 0001 	add.w	r0, sl, #1
 8018e6a:	6018      	str	r0, [r3, #0]
 8018e6c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8018e6e:	2b00      	cmp	r3, #0
 8018e70:	f43f acd8 	beq.w	8018824 <_dtoa_r+0xa4>
 8018e74:	601d      	str	r5, [r3, #0]
 8018e76:	e4d5      	b.n	8018824 <_dtoa_r+0xa4>
 8018e78:	f8cd a01c 	str.w	sl, [sp, #28]
 8018e7c:	462b      	mov	r3, r5
 8018e7e:	461d      	mov	r5, r3
 8018e80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8018e84:	2a39      	cmp	r2, #57	; 0x39
 8018e86:	d108      	bne.n	8018e9a <_dtoa_r+0x71a>
 8018e88:	9a00      	ldr	r2, [sp, #0]
 8018e8a:	429a      	cmp	r2, r3
 8018e8c:	d1f7      	bne.n	8018e7e <_dtoa_r+0x6fe>
 8018e8e:	9a07      	ldr	r2, [sp, #28]
 8018e90:	9900      	ldr	r1, [sp, #0]
 8018e92:	3201      	adds	r2, #1
 8018e94:	9207      	str	r2, [sp, #28]
 8018e96:	2230      	movs	r2, #48	; 0x30
 8018e98:	700a      	strb	r2, [r1, #0]
 8018e9a:	781a      	ldrb	r2, [r3, #0]
 8018e9c:	3201      	adds	r2, #1
 8018e9e:	701a      	strb	r2, [r3, #0]
 8018ea0:	e78c      	b.n	8018dbc <_dtoa_r+0x63c>
 8018ea2:	4b7f      	ldr	r3, [pc, #508]	; (80190a0 <_dtoa_r+0x920>)
 8018ea4:	2200      	movs	r2, #0
 8018ea6:	f7e7 fba7 	bl	80005f8 <__aeabi_dmul>
 8018eaa:	2200      	movs	r2, #0
 8018eac:	2300      	movs	r3, #0
 8018eae:	4606      	mov	r6, r0
 8018eb0:	460f      	mov	r7, r1
 8018eb2:	f7e7 fe09 	bl	8000ac8 <__aeabi_dcmpeq>
 8018eb6:	2800      	cmp	r0, #0
 8018eb8:	d09b      	beq.n	8018df2 <_dtoa_r+0x672>
 8018eba:	e7cd      	b.n	8018e58 <_dtoa_r+0x6d8>
 8018ebc:	9a08      	ldr	r2, [sp, #32]
 8018ebe:	2a00      	cmp	r2, #0
 8018ec0:	f000 80c4 	beq.w	801904c <_dtoa_r+0x8cc>
 8018ec4:	9a05      	ldr	r2, [sp, #20]
 8018ec6:	2a01      	cmp	r2, #1
 8018ec8:	f300 80a8 	bgt.w	801901c <_dtoa_r+0x89c>
 8018ecc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8018ece:	2a00      	cmp	r2, #0
 8018ed0:	f000 80a0 	beq.w	8019014 <_dtoa_r+0x894>
 8018ed4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8018ed8:	9e06      	ldr	r6, [sp, #24]
 8018eda:	4645      	mov	r5, r8
 8018edc:	9a04      	ldr	r2, [sp, #16]
 8018ede:	2101      	movs	r1, #1
 8018ee0:	441a      	add	r2, r3
 8018ee2:	4620      	mov	r0, r4
 8018ee4:	4498      	add	r8, r3
 8018ee6:	9204      	str	r2, [sp, #16]
 8018ee8:	f000 fc16 	bl	8019718 <__i2b>
 8018eec:	4607      	mov	r7, r0
 8018eee:	2d00      	cmp	r5, #0
 8018ef0:	dd0b      	ble.n	8018f0a <_dtoa_r+0x78a>
 8018ef2:	9b04      	ldr	r3, [sp, #16]
 8018ef4:	2b00      	cmp	r3, #0
 8018ef6:	dd08      	ble.n	8018f0a <_dtoa_r+0x78a>
 8018ef8:	42ab      	cmp	r3, r5
 8018efa:	9a04      	ldr	r2, [sp, #16]
 8018efc:	bfa8      	it	ge
 8018efe:	462b      	movge	r3, r5
 8018f00:	eba8 0803 	sub.w	r8, r8, r3
 8018f04:	1aed      	subs	r5, r5, r3
 8018f06:	1ad3      	subs	r3, r2, r3
 8018f08:	9304      	str	r3, [sp, #16]
 8018f0a:	9b06      	ldr	r3, [sp, #24]
 8018f0c:	b1fb      	cbz	r3, 8018f4e <_dtoa_r+0x7ce>
 8018f0e:	9b08      	ldr	r3, [sp, #32]
 8018f10:	2b00      	cmp	r3, #0
 8018f12:	f000 809f 	beq.w	8019054 <_dtoa_r+0x8d4>
 8018f16:	2e00      	cmp	r6, #0
 8018f18:	dd11      	ble.n	8018f3e <_dtoa_r+0x7be>
 8018f1a:	4639      	mov	r1, r7
 8018f1c:	4632      	mov	r2, r6
 8018f1e:	4620      	mov	r0, r4
 8018f20:	f000 fcb6 	bl	8019890 <__pow5mult>
 8018f24:	465a      	mov	r2, fp
 8018f26:	4601      	mov	r1, r0
 8018f28:	4607      	mov	r7, r0
 8018f2a:	4620      	mov	r0, r4
 8018f2c:	f000 fc0a 	bl	8019744 <__multiply>
 8018f30:	4659      	mov	r1, fp
 8018f32:	9007      	str	r0, [sp, #28]
 8018f34:	4620      	mov	r0, r4
 8018f36:	f000 fb33 	bl	80195a0 <_Bfree>
 8018f3a:	9b07      	ldr	r3, [sp, #28]
 8018f3c:	469b      	mov	fp, r3
 8018f3e:	9b06      	ldr	r3, [sp, #24]
 8018f40:	1b9a      	subs	r2, r3, r6
 8018f42:	d004      	beq.n	8018f4e <_dtoa_r+0x7ce>
 8018f44:	4659      	mov	r1, fp
 8018f46:	4620      	mov	r0, r4
 8018f48:	f000 fca2 	bl	8019890 <__pow5mult>
 8018f4c:	4683      	mov	fp, r0
 8018f4e:	2101      	movs	r1, #1
 8018f50:	4620      	mov	r0, r4
 8018f52:	f000 fbe1 	bl	8019718 <__i2b>
 8018f56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	4606      	mov	r6, r0
 8018f5c:	dd7c      	ble.n	8019058 <_dtoa_r+0x8d8>
 8018f5e:	461a      	mov	r2, r3
 8018f60:	4601      	mov	r1, r0
 8018f62:	4620      	mov	r0, r4
 8018f64:	f000 fc94 	bl	8019890 <__pow5mult>
 8018f68:	9b05      	ldr	r3, [sp, #20]
 8018f6a:	2b01      	cmp	r3, #1
 8018f6c:	4606      	mov	r6, r0
 8018f6e:	dd76      	ble.n	801905e <_dtoa_r+0x8de>
 8018f70:	2300      	movs	r3, #0
 8018f72:	9306      	str	r3, [sp, #24]
 8018f74:	6933      	ldr	r3, [r6, #16]
 8018f76:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8018f7a:	6918      	ldr	r0, [r3, #16]
 8018f7c:	f000 fb7c 	bl	8019678 <__hi0bits>
 8018f80:	f1c0 0020 	rsb	r0, r0, #32
 8018f84:	9b04      	ldr	r3, [sp, #16]
 8018f86:	4418      	add	r0, r3
 8018f88:	f010 001f 	ands.w	r0, r0, #31
 8018f8c:	f000 8086 	beq.w	801909c <_dtoa_r+0x91c>
 8018f90:	f1c0 0320 	rsb	r3, r0, #32
 8018f94:	2b04      	cmp	r3, #4
 8018f96:	dd7f      	ble.n	8019098 <_dtoa_r+0x918>
 8018f98:	f1c0 001c 	rsb	r0, r0, #28
 8018f9c:	9b04      	ldr	r3, [sp, #16]
 8018f9e:	4403      	add	r3, r0
 8018fa0:	4480      	add	r8, r0
 8018fa2:	4405      	add	r5, r0
 8018fa4:	9304      	str	r3, [sp, #16]
 8018fa6:	f1b8 0f00 	cmp.w	r8, #0
 8018faa:	dd05      	ble.n	8018fb8 <_dtoa_r+0x838>
 8018fac:	4659      	mov	r1, fp
 8018fae:	4642      	mov	r2, r8
 8018fb0:	4620      	mov	r0, r4
 8018fb2:	f000 fcc7 	bl	8019944 <__lshift>
 8018fb6:	4683      	mov	fp, r0
 8018fb8:	9b04      	ldr	r3, [sp, #16]
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	dd05      	ble.n	8018fca <_dtoa_r+0x84a>
 8018fbe:	4631      	mov	r1, r6
 8018fc0:	461a      	mov	r2, r3
 8018fc2:	4620      	mov	r0, r4
 8018fc4:	f000 fcbe 	bl	8019944 <__lshift>
 8018fc8:	4606      	mov	r6, r0
 8018fca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d069      	beq.n	80190a4 <_dtoa_r+0x924>
 8018fd0:	4631      	mov	r1, r6
 8018fd2:	4658      	mov	r0, fp
 8018fd4:	f000 fd22 	bl	8019a1c <__mcmp>
 8018fd8:	2800      	cmp	r0, #0
 8018fda:	da63      	bge.n	80190a4 <_dtoa_r+0x924>
 8018fdc:	2300      	movs	r3, #0
 8018fde:	4659      	mov	r1, fp
 8018fe0:	220a      	movs	r2, #10
 8018fe2:	4620      	mov	r0, r4
 8018fe4:	f000 fafe 	bl	80195e4 <__multadd>
 8018fe8:	9b08      	ldr	r3, [sp, #32]
 8018fea:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8018fee:	4683      	mov	fp, r0
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	f000 818f 	beq.w	8019314 <_dtoa_r+0xb94>
 8018ff6:	4639      	mov	r1, r7
 8018ff8:	2300      	movs	r3, #0
 8018ffa:	220a      	movs	r2, #10
 8018ffc:	4620      	mov	r0, r4
 8018ffe:	f000 faf1 	bl	80195e4 <__multadd>
 8019002:	f1b9 0f00 	cmp.w	r9, #0
 8019006:	4607      	mov	r7, r0
 8019008:	f300 808e 	bgt.w	8019128 <_dtoa_r+0x9a8>
 801900c:	9b05      	ldr	r3, [sp, #20]
 801900e:	2b02      	cmp	r3, #2
 8019010:	dc50      	bgt.n	80190b4 <_dtoa_r+0x934>
 8019012:	e089      	b.n	8019128 <_dtoa_r+0x9a8>
 8019014:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8019016:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801901a:	e75d      	b.n	8018ed8 <_dtoa_r+0x758>
 801901c:	9b01      	ldr	r3, [sp, #4]
 801901e:	1e5e      	subs	r6, r3, #1
 8019020:	9b06      	ldr	r3, [sp, #24]
 8019022:	42b3      	cmp	r3, r6
 8019024:	bfbf      	itttt	lt
 8019026:	9b06      	ldrlt	r3, [sp, #24]
 8019028:	9606      	strlt	r6, [sp, #24]
 801902a:	1af2      	sublt	r2, r6, r3
 801902c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 801902e:	bfb6      	itet	lt
 8019030:	189b      	addlt	r3, r3, r2
 8019032:	1b9e      	subge	r6, r3, r6
 8019034:	930d      	strlt	r3, [sp, #52]	; 0x34
 8019036:	9b01      	ldr	r3, [sp, #4]
 8019038:	bfb8      	it	lt
 801903a:	2600      	movlt	r6, #0
 801903c:	2b00      	cmp	r3, #0
 801903e:	bfb5      	itete	lt
 8019040:	eba8 0503 	sublt.w	r5, r8, r3
 8019044:	9b01      	ldrge	r3, [sp, #4]
 8019046:	2300      	movlt	r3, #0
 8019048:	4645      	movge	r5, r8
 801904a:	e747      	b.n	8018edc <_dtoa_r+0x75c>
 801904c:	9e06      	ldr	r6, [sp, #24]
 801904e:	9f08      	ldr	r7, [sp, #32]
 8019050:	4645      	mov	r5, r8
 8019052:	e74c      	b.n	8018eee <_dtoa_r+0x76e>
 8019054:	9a06      	ldr	r2, [sp, #24]
 8019056:	e775      	b.n	8018f44 <_dtoa_r+0x7c4>
 8019058:	9b05      	ldr	r3, [sp, #20]
 801905a:	2b01      	cmp	r3, #1
 801905c:	dc18      	bgt.n	8019090 <_dtoa_r+0x910>
 801905e:	9b02      	ldr	r3, [sp, #8]
 8019060:	b9b3      	cbnz	r3, 8019090 <_dtoa_r+0x910>
 8019062:	9b03      	ldr	r3, [sp, #12]
 8019064:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8019068:	b9a3      	cbnz	r3, 8019094 <_dtoa_r+0x914>
 801906a:	9b03      	ldr	r3, [sp, #12]
 801906c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8019070:	0d1b      	lsrs	r3, r3, #20
 8019072:	051b      	lsls	r3, r3, #20
 8019074:	b12b      	cbz	r3, 8019082 <_dtoa_r+0x902>
 8019076:	9b04      	ldr	r3, [sp, #16]
 8019078:	3301      	adds	r3, #1
 801907a:	9304      	str	r3, [sp, #16]
 801907c:	f108 0801 	add.w	r8, r8, #1
 8019080:	2301      	movs	r3, #1
 8019082:	9306      	str	r3, [sp, #24]
 8019084:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019086:	2b00      	cmp	r3, #0
 8019088:	f47f af74 	bne.w	8018f74 <_dtoa_r+0x7f4>
 801908c:	2001      	movs	r0, #1
 801908e:	e779      	b.n	8018f84 <_dtoa_r+0x804>
 8019090:	2300      	movs	r3, #0
 8019092:	e7f6      	b.n	8019082 <_dtoa_r+0x902>
 8019094:	9b02      	ldr	r3, [sp, #8]
 8019096:	e7f4      	b.n	8019082 <_dtoa_r+0x902>
 8019098:	d085      	beq.n	8018fa6 <_dtoa_r+0x826>
 801909a:	4618      	mov	r0, r3
 801909c:	301c      	adds	r0, #28
 801909e:	e77d      	b.n	8018f9c <_dtoa_r+0x81c>
 80190a0:	40240000 	.word	0x40240000
 80190a4:	9b01      	ldr	r3, [sp, #4]
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	dc38      	bgt.n	801911c <_dtoa_r+0x99c>
 80190aa:	9b05      	ldr	r3, [sp, #20]
 80190ac:	2b02      	cmp	r3, #2
 80190ae:	dd35      	ble.n	801911c <_dtoa_r+0x99c>
 80190b0:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80190b4:	f1b9 0f00 	cmp.w	r9, #0
 80190b8:	d10d      	bne.n	80190d6 <_dtoa_r+0x956>
 80190ba:	4631      	mov	r1, r6
 80190bc:	464b      	mov	r3, r9
 80190be:	2205      	movs	r2, #5
 80190c0:	4620      	mov	r0, r4
 80190c2:	f000 fa8f 	bl	80195e4 <__multadd>
 80190c6:	4601      	mov	r1, r0
 80190c8:	4606      	mov	r6, r0
 80190ca:	4658      	mov	r0, fp
 80190cc:	f000 fca6 	bl	8019a1c <__mcmp>
 80190d0:	2800      	cmp	r0, #0
 80190d2:	f73f adbd 	bgt.w	8018c50 <_dtoa_r+0x4d0>
 80190d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80190d8:	9d00      	ldr	r5, [sp, #0]
 80190da:	ea6f 0a03 	mvn.w	sl, r3
 80190de:	f04f 0800 	mov.w	r8, #0
 80190e2:	4631      	mov	r1, r6
 80190e4:	4620      	mov	r0, r4
 80190e6:	f000 fa5b 	bl	80195a0 <_Bfree>
 80190ea:	2f00      	cmp	r7, #0
 80190ec:	f43f aeb4 	beq.w	8018e58 <_dtoa_r+0x6d8>
 80190f0:	f1b8 0f00 	cmp.w	r8, #0
 80190f4:	d005      	beq.n	8019102 <_dtoa_r+0x982>
 80190f6:	45b8      	cmp	r8, r7
 80190f8:	d003      	beq.n	8019102 <_dtoa_r+0x982>
 80190fa:	4641      	mov	r1, r8
 80190fc:	4620      	mov	r0, r4
 80190fe:	f000 fa4f 	bl	80195a0 <_Bfree>
 8019102:	4639      	mov	r1, r7
 8019104:	4620      	mov	r0, r4
 8019106:	f000 fa4b 	bl	80195a0 <_Bfree>
 801910a:	e6a5      	b.n	8018e58 <_dtoa_r+0x6d8>
 801910c:	2600      	movs	r6, #0
 801910e:	4637      	mov	r7, r6
 8019110:	e7e1      	b.n	80190d6 <_dtoa_r+0x956>
 8019112:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8019114:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8019118:	4637      	mov	r7, r6
 801911a:	e599      	b.n	8018c50 <_dtoa_r+0x4d0>
 801911c:	9b08      	ldr	r3, [sp, #32]
 801911e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8019122:	2b00      	cmp	r3, #0
 8019124:	f000 80fd 	beq.w	8019322 <_dtoa_r+0xba2>
 8019128:	2d00      	cmp	r5, #0
 801912a:	dd05      	ble.n	8019138 <_dtoa_r+0x9b8>
 801912c:	4639      	mov	r1, r7
 801912e:	462a      	mov	r2, r5
 8019130:	4620      	mov	r0, r4
 8019132:	f000 fc07 	bl	8019944 <__lshift>
 8019136:	4607      	mov	r7, r0
 8019138:	9b06      	ldr	r3, [sp, #24]
 801913a:	2b00      	cmp	r3, #0
 801913c:	d05c      	beq.n	80191f8 <_dtoa_r+0xa78>
 801913e:	6879      	ldr	r1, [r7, #4]
 8019140:	4620      	mov	r0, r4
 8019142:	f000 f9ed 	bl	8019520 <_Balloc>
 8019146:	4605      	mov	r5, r0
 8019148:	b928      	cbnz	r0, 8019156 <_dtoa_r+0x9d6>
 801914a:	4b80      	ldr	r3, [pc, #512]	; (801934c <_dtoa_r+0xbcc>)
 801914c:	4602      	mov	r2, r0
 801914e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8019152:	f7ff bb2e 	b.w	80187b2 <_dtoa_r+0x32>
 8019156:	693a      	ldr	r2, [r7, #16]
 8019158:	3202      	adds	r2, #2
 801915a:	0092      	lsls	r2, r2, #2
 801915c:	f107 010c 	add.w	r1, r7, #12
 8019160:	300c      	adds	r0, #12
 8019162:	f7fe fbfd 	bl	8017960 <memcpy>
 8019166:	2201      	movs	r2, #1
 8019168:	4629      	mov	r1, r5
 801916a:	4620      	mov	r0, r4
 801916c:	f000 fbea 	bl	8019944 <__lshift>
 8019170:	9b00      	ldr	r3, [sp, #0]
 8019172:	3301      	adds	r3, #1
 8019174:	9301      	str	r3, [sp, #4]
 8019176:	9b00      	ldr	r3, [sp, #0]
 8019178:	444b      	add	r3, r9
 801917a:	9307      	str	r3, [sp, #28]
 801917c:	9b02      	ldr	r3, [sp, #8]
 801917e:	f003 0301 	and.w	r3, r3, #1
 8019182:	46b8      	mov	r8, r7
 8019184:	9306      	str	r3, [sp, #24]
 8019186:	4607      	mov	r7, r0
 8019188:	9b01      	ldr	r3, [sp, #4]
 801918a:	4631      	mov	r1, r6
 801918c:	3b01      	subs	r3, #1
 801918e:	4658      	mov	r0, fp
 8019190:	9302      	str	r3, [sp, #8]
 8019192:	f7ff fa67 	bl	8018664 <quorem>
 8019196:	4603      	mov	r3, r0
 8019198:	3330      	adds	r3, #48	; 0x30
 801919a:	9004      	str	r0, [sp, #16]
 801919c:	4641      	mov	r1, r8
 801919e:	4658      	mov	r0, fp
 80191a0:	9308      	str	r3, [sp, #32]
 80191a2:	f000 fc3b 	bl	8019a1c <__mcmp>
 80191a6:	463a      	mov	r2, r7
 80191a8:	4681      	mov	r9, r0
 80191aa:	4631      	mov	r1, r6
 80191ac:	4620      	mov	r0, r4
 80191ae:	f000 fc51 	bl	8019a54 <__mdiff>
 80191b2:	68c2      	ldr	r2, [r0, #12]
 80191b4:	9b08      	ldr	r3, [sp, #32]
 80191b6:	4605      	mov	r5, r0
 80191b8:	bb02      	cbnz	r2, 80191fc <_dtoa_r+0xa7c>
 80191ba:	4601      	mov	r1, r0
 80191bc:	4658      	mov	r0, fp
 80191be:	f000 fc2d 	bl	8019a1c <__mcmp>
 80191c2:	9b08      	ldr	r3, [sp, #32]
 80191c4:	4602      	mov	r2, r0
 80191c6:	4629      	mov	r1, r5
 80191c8:	4620      	mov	r0, r4
 80191ca:	e9cd 3208 	strd	r3, r2, [sp, #32]
 80191ce:	f000 f9e7 	bl	80195a0 <_Bfree>
 80191d2:	9b05      	ldr	r3, [sp, #20]
 80191d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80191d6:	9d01      	ldr	r5, [sp, #4]
 80191d8:	ea43 0102 	orr.w	r1, r3, r2
 80191dc:	9b06      	ldr	r3, [sp, #24]
 80191de:	430b      	orrs	r3, r1
 80191e0:	9b08      	ldr	r3, [sp, #32]
 80191e2:	d10d      	bne.n	8019200 <_dtoa_r+0xa80>
 80191e4:	2b39      	cmp	r3, #57	; 0x39
 80191e6:	d029      	beq.n	801923c <_dtoa_r+0xabc>
 80191e8:	f1b9 0f00 	cmp.w	r9, #0
 80191ec:	dd01      	ble.n	80191f2 <_dtoa_r+0xa72>
 80191ee:	9b04      	ldr	r3, [sp, #16]
 80191f0:	3331      	adds	r3, #49	; 0x31
 80191f2:	9a02      	ldr	r2, [sp, #8]
 80191f4:	7013      	strb	r3, [r2, #0]
 80191f6:	e774      	b.n	80190e2 <_dtoa_r+0x962>
 80191f8:	4638      	mov	r0, r7
 80191fa:	e7b9      	b.n	8019170 <_dtoa_r+0x9f0>
 80191fc:	2201      	movs	r2, #1
 80191fe:	e7e2      	b.n	80191c6 <_dtoa_r+0xa46>
 8019200:	f1b9 0f00 	cmp.w	r9, #0
 8019204:	db06      	blt.n	8019214 <_dtoa_r+0xa94>
 8019206:	9905      	ldr	r1, [sp, #20]
 8019208:	ea41 0909 	orr.w	r9, r1, r9
 801920c:	9906      	ldr	r1, [sp, #24]
 801920e:	ea59 0101 	orrs.w	r1, r9, r1
 8019212:	d120      	bne.n	8019256 <_dtoa_r+0xad6>
 8019214:	2a00      	cmp	r2, #0
 8019216:	ddec      	ble.n	80191f2 <_dtoa_r+0xa72>
 8019218:	4659      	mov	r1, fp
 801921a:	2201      	movs	r2, #1
 801921c:	4620      	mov	r0, r4
 801921e:	9301      	str	r3, [sp, #4]
 8019220:	f000 fb90 	bl	8019944 <__lshift>
 8019224:	4631      	mov	r1, r6
 8019226:	4683      	mov	fp, r0
 8019228:	f000 fbf8 	bl	8019a1c <__mcmp>
 801922c:	2800      	cmp	r0, #0
 801922e:	9b01      	ldr	r3, [sp, #4]
 8019230:	dc02      	bgt.n	8019238 <_dtoa_r+0xab8>
 8019232:	d1de      	bne.n	80191f2 <_dtoa_r+0xa72>
 8019234:	07da      	lsls	r2, r3, #31
 8019236:	d5dc      	bpl.n	80191f2 <_dtoa_r+0xa72>
 8019238:	2b39      	cmp	r3, #57	; 0x39
 801923a:	d1d8      	bne.n	80191ee <_dtoa_r+0xa6e>
 801923c:	9a02      	ldr	r2, [sp, #8]
 801923e:	2339      	movs	r3, #57	; 0x39
 8019240:	7013      	strb	r3, [r2, #0]
 8019242:	462b      	mov	r3, r5
 8019244:	461d      	mov	r5, r3
 8019246:	3b01      	subs	r3, #1
 8019248:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801924c:	2a39      	cmp	r2, #57	; 0x39
 801924e:	d050      	beq.n	80192f2 <_dtoa_r+0xb72>
 8019250:	3201      	adds	r2, #1
 8019252:	701a      	strb	r2, [r3, #0]
 8019254:	e745      	b.n	80190e2 <_dtoa_r+0x962>
 8019256:	2a00      	cmp	r2, #0
 8019258:	dd03      	ble.n	8019262 <_dtoa_r+0xae2>
 801925a:	2b39      	cmp	r3, #57	; 0x39
 801925c:	d0ee      	beq.n	801923c <_dtoa_r+0xabc>
 801925e:	3301      	adds	r3, #1
 8019260:	e7c7      	b.n	80191f2 <_dtoa_r+0xa72>
 8019262:	9a01      	ldr	r2, [sp, #4]
 8019264:	9907      	ldr	r1, [sp, #28]
 8019266:	f802 3c01 	strb.w	r3, [r2, #-1]
 801926a:	428a      	cmp	r2, r1
 801926c:	d02a      	beq.n	80192c4 <_dtoa_r+0xb44>
 801926e:	4659      	mov	r1, fp
 8019270:	2300      	movs	r3, #0
 8019272:	220a      	movs	r2, #10
 8019274:	4620      	mov	r0, r4
 8019276:	f000 f9b5 	bl	80195e4 <__multadd>
 801927a:	45b8      	cmp	r8, r7
 801927c:	4683      	mov	fp, r0
 801927e:	f04f 0300 	mov.w	r3, #0
 8019282:	f04f 020a 	mov.w	r2, #10
 8019286:	4641      	mov	r1, r8
 8019288:	4620      	mov	r0, r4
 801928a:	d107      	bne.n	801929c <_dtoa_r+0xb1c>
 801928c:	f000 f9aa 	bl	80195e4 <__multadd>
 8019290:	4680      	mov	r8, r0
 8019292:	4607      	mov	r7, r0
 8019294:	9b01      	ldr	r3, [sp, #4]
 8019296:	3301      	adds	r3, #1
 8019298:	9301      	str	r3, [sp, #4]
 801929a:	e775      	b.n	8019188 <_dtoa_r+0xa08>
 801929c:	f000 f9a2 	bl	80195e4 <__multadd>
 80192a0:	4639      	mov	r1, r7
 80192a2:	4680      	mov	r8, r0
 80192a4:	2300      	movs	r3, #0
 80192a6:	220a      	movs	r2, #10
 80192a8:	4620      	mov	r0, r4
 80192aa:	f000 f99b 	bl	80195e4 <__multadd>
 80192ae:	4607      	mov	r7, r0
 80192b0:	e7f0      	b.n	8019294 <_dtoa_r+0xb14>
 80192b2:	f1b9 0f00 	cmp.w	r9, #0
 80192b6:	9a00      	ldr	r2, [sp, #0]
 80192b8:	bfcc      	ite	gt
 80192ba:	464d      	movgt	r5, r9
 80192bc:	2501      	movle	r5, #1
 80192be:	4415      	add	r5, r2
 80192c0:	f04f 0800 	mov.w	r8, #0
 80192c4:	4659      	mov	r1, fp
 80192c6:	2201      	movs	r2, #1
 80192c8:	4620      	mov	r0, r4
 80192ca:	9301      	str	r3, [sp, #4]
 80192cc:	f000 fb3a 	bl	8019944 <__lshift>
 80192d0:	4631      	mov	r1, r6
 80192d2:	4683      	mov	fp, r0
 80192d4:	f000 fba2 	bl	8019a1c <__mcmp>
 80192d8:	2800      	cmp	r0, #0
 80192da:	dcb2      	bgt.n	8019242 <_dtoa_r+0xac2>
 80192dc:	d102      	bne.n	80192e4 <_dtoa_r+0xb64>
 80192de:	9b01      	ldr	r3, [sp, #4]
 80192e0:	07db      	lsls	r3, r3, #31
 80192e2:	d4ae      	bmi.n	8019242 <_dtoa_r+0xac2>
 80192e4:	462b      	mov	r3, r5
 80192e6:	461d      	mov	r5, r3
 80192e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80192ec:	2a30      	cmp	r2, #48	; 0x30
 80192ee:	d0fa      	beq.n	80192e6 <_dtoa_r+0xb66>
 80192f0:	e6f7      	b.n	80190e2 <_dtoa_r+0x962>
 80192f2:	9a00      	ldr	r2, [sp, #0]
 80192f4:	429a      	cmp	r2, r3
 80192f6:	d1a5      	bne.n	8019244 <_dtoa_r+0xac4>
 80192f8:	f10a 0a01 	add.w	sl, sl, #1
 80192fc:	2331      	movs	r3, #49	; 0x31
 80192fe:	e779      	b.n	80191f4 <_dtoa_r+0xa74>
 8019300:	4b13      	ldr	r3, [pc, #76]	; (8019350 <_dtoa_r+0xbd0>)
 8019302:	f7ff baaf 	b.w	8018864 <_dtoa_r+0xe4>
 8019306:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8019308:	2b00      	cmp	r3, #0
 801930a:	f47f aa86 	bne.w	801881a <_dtoa_r+0x9a>
 801930e:	4b11      	ldr	r3, [pc, #68]	; (8019354 <_dtoa_r+0xbd4>)
 8019310:	f7ff baa8 	b.w	8018864 <_dtoa_r+0xe4>
 8019314:	f1b9 0f00 	cmp.w	r9, #0
 8019318:	dc03      	bgt.n	8019322 <_dtoa_r+0xba2>
 801931a:	9b05      	ldr	r3, [sp, #20]
 801931c:	2b02      	cmp	r3, #2
 801931e:	f73f aec9 	bgt.w	80190b4 <_dtoa_r+0x934>
 8019322:	9d00      	ldr	r5, [sp, #0]
 8019324:	4631      	mov	r1, r6
 8019326:	4658      	mov	r0, fp
 8019328:	f7ff f99c 	bl	8018664 <quorem>
 801932c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8019330:	f805 3b01 	strb.w	r3, [r5], #1
 8019334:	9a00      	ldr	r2, [sp, #0]
 8019336:	1aaa      	subs	r2, r5, r2
 8019338:	4591      	cmp	r9, r2
 801933a:	ddba      	ble.n	80192b2 <_dtoa_r+0xb32>
 801933c:	4659      	mov	r1, fp
 801933e:	2300      	movs	r3, #0
 8019340:	220a      	movs	r2, #10
 8019342:	4620      	mov	r0, r4
 8019344:	f000 f94e 	bl	80195e4 <__multadd>
 8019348:	4683      	mov	fp, r0
 801934a:	e7eb      	b.n	8019324 <_dtoa_r+0xba4>
 801934c:	0801f190 	.word	0x0801f190
 8019350:	0801f0c4 	.word	0x0801f0c4
 8019354:	0801f10d 	.word	0x0801f10d

08019358 <__sflush_r>:
 8019358:	898a      	ldrh	r2, [r1, #12]
 801935a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801935e:	4605      	mov	r5, r0
 8019360:	0710      	lsls	r0, r2, #28
 8019362:	460c      	mov	r4, r1
 8019364:	d458      	bmi.n	8019418 <__sflush_r+0xc0>
 8019366:	684b      	ldr	r3, [r1, #4]
 8019368:	2b00      	cmp	r3, #0
 801936a:	dc05      	bgt.n	8019378 <__sflush_r+0x20>
 801936c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801936e:	2b00      	cmp	r3, #0
 8019370:	dc02      	bgt.n	8019378 <__sflush_r+0x20>
 8019372:	2000      	movs	r0, #0
 8019374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019378:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801937a:	2e00      	cmp	r6, #0
 801937c:	d0f9      	beq.n	8019372 <__sflush_r+0x1a>
 801937e:	2300      	movs	r3, #0
 8019380:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019384:	682f      	ldr	r7, [r5, #0]
 8019386:	602b      	str	r3, [r5, #0]
 8019388:	d032      	beq.n	80193f0 <__sflush_r+0x98>
 801938a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801938c:	89a3      	ldrh	r3, [r4, #12]
 801938e:	075a      	lsls	r2, r3, #29
 8019390:	d505      	bpl.n	801939e <__sflush_r+0x46>
 8019392:	6863      	ldr	r3, [r4, #4]
 8019394:	1ac0      	subs	r0, r0, r3
 8019396:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8019398:	b10b      	cbz	r3, 801939e <__sflush_r+0x46>
 801939a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801939c:	1ac0      	subs	r0, r0, r3
 801939e:	2300      	movs	r3, #0
 80193a0:	4602      	mov	r2, r0
 80193a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80193a4:	6a21      	ldr	r1, [r4, #32]
 80193a6:	4628      	mov	r0, r5
 80193a8:	47b0      	blx	r6
 80193aa:	1c43      	adds	r3, r0, #1
 80193ac:	89a3      	ldrh	r3, [r4, #12]
 80193ae:	d106      	bne.n	80193be <__sflush_r+0x66>
 80193b0:	6829      	ldr	r1, [r5, #0]
 80193b2:	291d      	cmp	r1, #29
 80193b4:	d82c      	bhi.n	8019410 <__sflush_r+0xb8>
 80193b6:	4a2a      	ldr	r2, [pc, #168]	; (8019460 <__sflush_r+0x108>)
 80193b8:	40ca      	lsrs	r2, r1
 80193ba:	07d6      	lsls	r6, r2, #31
 80193bc:	d528      	bpl.n	8019410 <__sflush_r+0xb8>
 80193be:	2200      	movs	r2, #0
 80193c0:	6062      	str	r2, [r4, #4]
 80193c2:	04d9      	lsls	r1, r3, #19
 80193c4:	6922      	ldr	r2, [r4, #16]
 80193c6:	6022      	str	r2, [r4, #0]
 80193c8:	d504      	bpl.n	80193d4 <__sflush_r+0x7c>
 80193ca:	1c42      	adds	r2, r0, #1
 80193cc:	d101      	bne.n	80193d2 <__sflush_r+0x7a>
 80193ce:	682b      	ldr	r3, [r5, #0]
 80193d0:	b903      	cbnz	r3, 80193d4 <__sflush_r+0x7c>
 80193d2:	6560      	str	r0, [r4, #84]	; 0x54
 80193d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80193d6:	602f      	str	r7, [r5, #0]
 80193d8:	2900      	cmp	r1, #0
 80193da:	d0ca      	beq.n	8019372 <__sflush_r+0x1a>
 80193dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80193e0:	4299      	cmp	r1, r3
 80193e2:	d002      	beq.n	80193ea <__sflush_r+0x92>
 80193e4:	4628      	mov	r0, r5
 80193e6:	f7fe fad1 	bl	801798c <_free_r>
 80193ea:	2000      	movs	r0, #0
 80193ec:	6360      	str	r0, [r4, #52]	; 0x34
 80193ee:	e7c1      	b.n	8019374 <__sflush_r+0x1c>
 80193f0:	6a21      	ldr	r1, [r4, #32]
 80193f2:	2301      	movs	r3, #1
 80193f4:	4628      	mov	r0, r5
 80193f6:	47b0      	blx	r6
 80193f8:	1c41      	adds	r1, r0, #1
 80193fa:	d1c7      	bne.n	801938c <__sflush_r+0x34>
 80193fc:	682b      	ldr	r3, [r5, #0]
 80193fe:	2b00      	cmp	r3, #0
 8019400:	d0c4      	beq.n	801938c <__sflush_r+0x34>
 8019402:	2b1d      	cmp	r3, #29
 8019404:	d001      	beq.n	801940a <__sflush_r+0xb2>
 8019406:	2b16      	cmp	r3, #22
 8019408:	d101      	bne.n	801940e <__sflush_r+0xb6>
 801940a:	602f      	str	r7, [r5, #0]
 801940c:	e7b1      	b.n	8019372 <__sflush_r+0x1a>
 801940e:	89a3      	ldrh	r3, [r4, #12]
 8019410:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019414:	81a3      	strh	r3, [r4, #12]
 8019416:	e7ad      	b.n	8019374 <__sflush_r+0x1c>
 8019418:	690f      	ldr	r7, [r1, #16]
 801941a:	2f00      	cmp	r7, #0
 801941c:	d0a9      	beq.n	8019372 <__sflush_r+0x1a>
 801941e:	0793      	lsls	r3, r2, #30
 8019420:	680e      	ldr	r6, [r1, #0]
 8019422:	bf08      	it	eq
 8019424:	694b      	ldreq	r3, [r1, #20]
 8019426:	600f      	str	r7, [r1, #0]
 8019428:	bf18      	it	ne
 801942a:	2300      	movne	r3, #0
 801942c:	eba6 0807 	sub.w	r8, r6, r7
 8019430:	608b      	str	r3, [r1, #8]
 8019432:	f1b8 0f00 	cmp.w	r8, #0
 8019436:	dd9c      	ble.n	8019372 <__sflush_r+0x1a>
 8019438:	6a21      	ldr	r1, [r4, #32]
 801943a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801943c:	4643      	mov	r3, r8
 801943e:	463a      	mov	r2, r7
 8019440:	4628      	mov	r0, r5
 8019442:	47b0      	blx	r6
 8019444:	2800      	cmp	r0, #0
 8019446:	dc06      	bgt.n	8019456 <__sflush_r+0xfe>
 8019448:	89a3      	ldrh	r3, [r4, #12]
 801944a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801944e:	81a3      	strh	r3, [r4, #12]
 8019450:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019454:	e78e      	b.n	8019374 <__sflush_r+0x1c>
 8019456:	4407      	add	r7, r0
 8019458:	eba8 0800 	sub.w	r8, r8, r0
 801945c:	e7e9      	b.n	8019432 <__sflush_r+0xda>
 801945e:	bf00      	nop
 8019460:	20400001 	.word	0x20400001

08019464 <_fflush_r>:
 8019464:	b538      	push	{r3, r4, r5, lr}
 8019466:	690b      	ldr	r3, [r1, #16]
 8019468:	4605      	mov	r5, r0
 801946a:	460c      	mov	r4, r1
 801946c:	b913      	cbnz	r3, 8019474 <_fflush_r+0x10>
 801946e:	2500      	movs	r5, #0
 8019470:	4628      	mov	r0, r5
 8019472:	bd38      	pop	{r3, r4, r5, pc}
 8019474:	b118      	cbz	r0, 801947e <_fflush_r+0x1a>
 8019476:	6983      	ldr	r3, [r0, #24]
 8019478:	b90b      	cbnz	r3, 801947e <_fflush_r+0x1a>
 801947a:	f7fe f981 	bl	8017780 <__sinit>
 801947e:	4b14      	ldr	r3, [pc, #80]	; (80194d0 <_fflush_r+0x6c>)
 8019480:	429c      	cmp	r4, r3
 8019482:	d11b      	bne.n	80194bc <_fflush_r+0x58>
 8019484:	686c      	ldr	r4, [r5, #4]
 8019486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801948a:	2b00      	cmp	r3, #0
 801948c:	d0ef      	beq.n	801946e <_fflush_r+0xa>
 801948e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8019490:	07d0      	lsls	r0, r2, #31
 8019492:	d404      	bmi.n	801949e <_fflush_r+0x3a>
 8019494:	0599      	lsls	r1, r3, #22
 8019496:	d402      	bmi.n	801949e <_fflush_r+0x3a>
 8019498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801949a:	f7fe fa4e 	bl	801793a <__retarget_lock_acquire_recursive>
 801949e:	4628      	mov	r0, r5
 80194a0:	4621      	mov	r1, r4
 80194a2:	f7ff ff59 	bl	8019358 <__sflush_r>
 80194a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80194a8:	07da      	lsls	r2, r3, #31
 80194aa:	4605      	mov	r5, r0
 80194ac:	d4e0      	bmi.n	8019470 <_fflush_r+0xc>
 80194ae:	89a3      	ldrh	r3, [r4, #12]
 80194b0:	059b      	lsls	r3, r3, #22
 80194b2:	d4dd      	bmi.n	8019470 <_fflush_r+0xc>
 80194b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80194b6:	f7fe fa41 	bl	801793c <__retarget_lock_release_recursive>
 80194ba:	e7d9      	b.n	8019470 <_fflush_r+0xc>
 80194bc:	4b05      	ldr	r3, [pc, #20]	; (80194d4 <_fflush_r+0x70>)
 80194be:	429c      	cmp	r4, r3
 80194c0:	d101      	bne.n	80194c6 <_fflush_r+0x62>
 80194c2:	68ac      	ldr	r4, [r5, #8]
 80194c4:	e7df      	b.n	8019486 <_fflush_r+0x22>
 80194c6:	4b04      	ldr	r3, [pc, #16]	; (80194d8 <_fflush_r+0x74>)
 80194c8:	429c      	cmp	r4, r3
 80194ca:	bf08      	it	eq
 80194cc:	68ec      	ldreq	r4, [r5, #12]
 80194ce:	e7da      	b.n	8019486 <_fflush_r+0x22>
 80194d0:	0801f070 	.word	0x0801f070
 80194d4:	0801f090 	.word	0x0801f090
 80194d8:	0801f050 	.word	0x0801f050

080194dc <_localeconv_r>:
 80194dc:	4800      	ldr	r0, [pc, #0]	; (80194e0 <_localeconv_r+0x4>)
 80194de:	4770      	bx	lr
 80194e0:	2000031c 	.word	0x2000031c

080194e4 <_lseek_r>:
 80194e4:	b538      	push	{r3, r4, r5, lr}
 80194e6:	4d07      	ldr	r5, [pc, #28]	; (8019504 <_lseek_r+0x20>)
 80194e8:	4604      	mov	r4, r0
 80194ea:	4608      	mov	r0, r1
 80194ec:	4611      	mov	r1, r2
 80194ee:	2200      	movs	r2, #0
 80194f0:	602a      	str	r2, [r5, #0]
 80194f2:	461a      	mov	r2, r3
 80194f4:	f7ec f804 	bl	8005500 <_lseek>
 80194f8:	1c43      	adds	r3, r0, #1
 80194fa:	d102      	bne.n	8019502 <_lseek_r+0x1e>
 80194fc:	682b      	ldr	r3, [r5, #0]
 80194fe:	b103      	cbz	r3, 8019502 <_lseek_r+0x1e>
 8019500:	6023      	str	r3, [r4, #0]
 8019502:	bd38      	pop	{r3, r4, r5, pc}
 8019504:	200147fc 	.word	0x200147fc

08019508 <__malloc_lock>:
 8019508:	4801      	ldr	r0, [pc, #4]	; (8019510 <__malloc_lock+0x8>)
 801950a:	f7fe ba16 	b.w	801793a <__retarget_lock_acquire_recursive>
 801950e:	bf00      	nop
 8019510:	200147f4 	.word	0x200147f4

08019514 <__malloc_unlock>:
 8019514:	4801      	ldr	r0, [pc, #4]	; (801951c <__malloc_unlock+0x8>)
 8019516:	f7fe ba11 	b.w	801793c <__retarget_lock_release_recursive>
 801951a:	bf00      	nop
 801951c:	200147f4 	.word	0x200147f4

08019520 <_Balloc>:
 8019520:	b570      	push	{r4, r5, r6, lr}
 8019522:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8019524:	4604      	mov	r4, r0
 8019526:	460d      	mov	r5, r1
 8019528:	b976      	cbnz	r6, 8019548 <_Balloc+0x28>
 801952a:	2010      	movs	r0, #16
 801952c:	f7fe fa08 	bl	8017940 <malloc>
 8019530:	4602      	mov	r2, r0
 8019532:	6260      	str	r0, [r4, #36]	; 0x24
 8019534:	b920      	cbnz	r0, 8019540 <_Balloc+0x20>
 8019536:	4b18      	ldr	r3, [pc, #96]	; (8019598 <_Balloc+0x78>)
 8019538:	4818      	ldr	r0, [pc, #96]	; (801959c <_Balloc+0x7c>)
 801953a:	2166      	movs	r1, #102	; 0x66
 801953c:	f000 fcea 	bl	8019f14 <__assert_func>
 8019540:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019544:	6006      	str	r6, [r0, #0]
 8019546:	60c6      	str	r6, [r0, #12]
 8019548:	6a66      	ldr	r6, [r4, #36]	; 0x24
 801954a:	68f3      	ldr	r3, [r6, #12]
 801954c:	b183      	cbz	r3, 8019570 <_Balloc+0x50>
 801954e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8019550:	68db      	ldr	r3, [r3, #12]
 8019552:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019556:	b9b8      	cbnz	r0, 8019588 <_Balloc+0x68>
 8019558:	2101      	movs	r1, #1
 801955a:	fa01 f605 	lsl.w	r6, r1, r5
 801955e:	1d72      	adds	r2, r6, #5
 8019560:	0092      	lsls	r2, r2, #2
 8019562:	4620      	mov	r0, r4
 8019564:	f000 fb5a 	bl	8019c1c <_calloc_r>
 8019568:	b160      	cbz	r0, 8019584 <_Balloc+0x64>
 801956a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801956e:	e00e      	b.n	801958e <_Balloc+0x6e>
 8019570:	2221      	movs	r2, #33	; 0x21
 8019572:	2104      	movs	r1, #4
 8019574:	4620      	mov	r0, r4
 8019576:	f000 fb51 	bl	8019c1c <_calloc_r>
 801957a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801957c:	60f0      	str	r0, [r6, #12]
 801957e:	68db      	ldr	r3, [r3, #12]
 8019580:	2b00      	cmp	r3, #0
 8019582:	d1e4      	bne.n	801954e <_Balloc+0x2e>
 8019584:	2000      	movs	r0, #0
 8019586:	bd70      	pop	{r4, r5, r6, pc}
 8019588:	6802      	ldr	r2, [r0, #0]
 801958a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801958e:	2300      	movs	r3, #0
 8019590:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019594:	e7f7      	b.n	8019586 <_Balloc+0x66>
 8019596:	bf00      	nop
 8019598:	0801f11a 	.word	0x0801f11a
 801959c:	0801f1a1 	.word	0x0801f1a1

080195a0 <_Bfree>:
 80195a0:	b570      	push	{r4, r5, r6, lr}
 80195a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80195a4:	4605      	mov	r5, r0
 80195a6:	460c      	mov	r4, r1
 80195a8:	b976      	cbnz	r6, 80195c8 <_Bfree+0x28>
 80195aa:	2010      	movs	r0, #16
 80195ac:	f7fe f9c8 	bl	8017940 <malloc>
 80195b0:	4602      	mov	r2, r0
 80195b2:	6268      	str	r0, [r5, #36]	; 0x24
 80195b4:	b920      	cbnz	r0, 80195c0 <_Bfree+0x20>
 80195b6:	4b09      	ldr	r3, [pc, #36]	; (80195dc <_Bfree+0x3c>)
 80195b8:	4809      	ldr	r0, [pc, #36]	; (80195e0 <_Bfree+0x40>)
 80195ba:	218a      	movs	r1, #138	; 0x8a
 80195bc:	f000 fcaa 	bl	8019f14 <__assert_func>
 80195c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80195c4:	6006      	str	r6, [r0, #0]
 80195c6:	60c6      	str	r6, [r0, #12]
 80195c8:	b13c      	cbz	r4, 80195da <_Bfree+0x3a>
 80195ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80195cc:	6862      	ldr	r2, [r4, #4]
 80195ce:	68db      	ldr	r3, [r3, #12]
 80195d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80195d4:	6021      	str	r1, [r4, #0]
 80195d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80195da:	bd70      	pop	{r4, r5, r6, pc}
 80195dc:	0801f11a 	.word	0x0801f11a
 80195e0:	0801f1a1 	.word	0x0801f1a1

080195e4 <__multadd>:
 80195e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80195e8:	690e      	ldr	r6, [r1, #16]
 80195ea:	4607      	mov	r7, r0
 80195ec:	4698      	mov	r8, r3
 80195ee:	460c      	mov	r4, r1
 80195f0:	f101 0014 	add.w	r0, r1, #20
 80195f4:	2300      	movs	r3, #0
 80195f6:	6805      	ldr	r5, [r0, #0]
 80195f8:	b2a9      	uxth	r1, r5
 80195fa:	fb02 8101 	mla	r1, r2, r1, r8
 80195fe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8019602:	0c2d      	lsrs	r5, r5, #16
 8019604:	fb02 c505 	mla	r5, r2, r5, ip
 8019608:	b289      	uxth	r1, r1
 801960a:	3301      	adds	r3, #1
 801960c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8019610:	429e      	cmp	r6, r3
 8019612:	f840 1b04 	str.w	r1, [r0], #4
 8019616:	ea4f 4815 	mov.w	r8, r5, lsr #16
 801961a:	dcec      	bgt.n	80195f6 <__multadd+0x12>
 801961c:	f1b8 0f00 	cmp.w	r8, #0
 8019620:	d022      	beq.n	8019668 <__multadd+0x84>
 8019622:	68a3      	ldr	r3, [r4, #8]
 8019624:	42b3      	cmp	r3, r6
 8019626:	dc19      	bgt.n	801965c <__multadd+0x78>
 8019628:	6861      	ldr	r1, [r4, #4]
 801962a:	4638      	mov	r0, r7
 801962c:	3101      	adds	r1, #1
 801962e:	f7ff ff77 	bl	8019520 <_Balloc>
 8019632:	4605      	mov	r5, r0
 8019634:	b928      	cbnz	r0, 8019642 <__multadd+0x5e>
 8019636:	4602      	mov	r2, r0
 8019638:	4b0d      	ldr	r3, [pc, #52]	; (8019670 <__multadd+0x8c>)
 801963a:	480e      	ldr	r0, [pc, #56]	; (8019674 <__multadd+0x90>)
 801963c:	21b5      	movs	r1, #181	; 0xb5
 801963e:	f000 fc69 	bl	8019f14 <__assert_func>
 8019642:	6922      	ldr	r2, [r4, #16]
 8019644:	3202      	adds	r2, #2
 8019646:	f104 010c 	add.w	r1, r4, #12
 801964a:	0092      	lsls	r2, r2, #2
 801964c:	300c      	adds	r0, #12
 801964e:	f7fe f987 	bl	8017960 <memcpy>
 8019652:	4621      	mov	r1, r4
 8019654:	4638      	mov	r0, r7
 8019656:	f7ff ffa3 	bl	80195a0 <_Bfree>
 801965a:	462c      	mov	r4, r5
 801965c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8019660:	3601      	adds	r6, #1
 8019662:	f8c3 8014 	str.w	r8, [r3, #20]
 8019666:	6126      	str	r6, [r4, #16]
 8019668:	4620      	mov	r0, r4
 801966a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801966e:	bf00      	nop
 8019670:	0801f190 	.word	0x0801f190
 8019674:	0801f1a1 	.word	0x0801f1a1

08019678 <__hi0bits>:
 8019678:	0c03      	lsrs	r3, r0, #16
 801967a:	041b      	lsls	r3, r3, #16
 801967c:	b9d3      	cbnz	r3, 80196b4 <__hi0bits+0x3c>
 801967e:	0400      	lsls	r0, r0, #16
 8019680:	2310      	movs	r3, #16
 8019682:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019686:	bf04      	itt	eq
 8019688:	0200      	lsleq	r0, r0, #8
 801968a:	3308      	addeq	r3, #8
 801968c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019690:	bf04      	itt	eq
 8019692:	0100      	lsleq	r0, r0, #4
 8019694:	3304      	addeq	r3, #4
 8019696:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801969a:	bf04      	itt	eq
 801969c:	0080      	lsleq	r0, r0, #2
 801969e:	3302      	addeq	r3, #2
 80196a0:	2800      	cmp	r0, #0
 80196a2:	db05      	blt.n	80196b0 <__hi0bits+0x38>
 80196a4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80196a8:	f103 0301 	add.w	r3, r3, #1
 80196ac:	bf08      	it	eq
 80196ae:	2320      	moveq	r3, #32
 80196b0:	4618      	mov	r0, r3
 80196b2:	4770      	bx	lr
 80196b4:	2300      	movs	r3, #0
 80196b6:	e7e4      	b.n	8019682 <__hi0bits+0xa>

080196b8 <__lo0bits>:
 80196b8:	6803      	ldr	r3, [r0, #0]
 80196ba:	f013 0207 	ands.w	r2, r3, #7
 80196be:	4601      	mov	r1, r0
 80196c0:	d00b      	beq.n	80196da <__lo0bits+0x22>
 80196c2:	07da      	lsls	r2, r3, #31
 80196c4:	d424      	bmi.n	8019710 <__lo0bits+0x58>
 80196c6:	0798      	lsls	r0, r3, #30
 80196c8:	bf49      	itett	mi
 80196ca:	085b      	lsrmi	r3, r3, #1
 80196cc:	089b      	lsrpl	r3, r3, #2
 80196ce:	2001      	movmi	r0, #1
 80196d0:	600b      	strmi	r3, [r1, #0]
 80196d2:	bf5c      	itt	pl
 80196d4:	600b      	strpl	r3, [r1, #0]
 80196d6:	2002      	movpl	r0, #2
 80196d8:	4770      	bx	lr
 80196da:	b298      	uxth	r0, r3
 80196dc:	b9b0      	cbnz	r0, 801970c <__lo0bits+0x54>
 80196de:	0c1b      	lsrs	r3, r3, #16
 80196e0:	2010      	movs	r0, #16
 80196e2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80196e6:	bf04      	itt	eq
 80196e8:	0a1b      	lsreq	r3, r3, #8
 80196ea:	3008      	addeq	r0, #8
 80196ec:	071a      	lsls	r2, r3, #28
 80196ee:	bf04      	itt	eq
 80196f0:	091b      	lsreq	r3, r3, #4
 80196f2:	3004      	addeq	r0, #4
 80196f4:	079a      	lsls	r2, r3, #30
 80196f6:	bf04      	itt	eq
 80196f8:	089b      	lsreq	r3, r3, #2
 80196fa:	3002      	addeq	r0, #2
 80196fc:	07da      	lsls	r2, r3, #31
 80196fe:	d403      	bmi.n	8019708 <__lo0bits+0x50>
 8019700:	085b      	lsrs	r3, r3, #1
 8019702:	f100 0001 	add.w	r0, r0, #1
 8019706:	d005      	beq.n	8019714 <__lo0bits+0x5c>
 8019708:	600b      	str	r3, [r1, #0]
 801970a:	4770      	bx	lr
 801970c:	4610      	mov	r0, r2
 801970e:	e7e8      	b.n	80196e2 <__lo0bits+0x2a>
 8019710:	2000      	movs	r0, #0
 8019712:	4770      	bx	lr
 8019714:	2020      	movs	r0, #32
 8019716:	4770      	bx	lr

08019718 <__i2b>:
 8019718:	b510      	push	{r4, lr}
 801971a:	460c      	mov	r4, r1
 801971c:	2101      	movs	r1, #1
 801971e:	f7ff feff 	bl	8019520 <_Balloc>
 8019722:	4602      	mov	r2, r0
 8019724:	b928      	cbnz	r0, 8019732 <__i2b+0x1a>
 8019726:	4b05      	ldr	r3, [pc, #20]	; (801973c <__i2b+0x24>)
 8019728:	4805      	ldr	r0, [pc, #20]	; (8019740 <__i2b+0x28>)
 801972a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801972e:	f000 fbf1 	bl	8019f14 <__assert_func>
 8019732:	2301      	movs	r3, #1
 8019734:	6144      	str	r4, [r0, #20]
 8019736:	6103      	str	r3, [r0, #16]
 8019738:	bd10      	pop	{r4, pc}
 801973a:	bf00      	nop
 801973c:	0801f190 	.word	0x0801f190
 8019740:	0801f1a1 	.word	0x0801f1a1

08019744 <__multiply>:
 8019744:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019748:	4614      	mov	r4, r2
 801974a:	690a      	ldr	r2, [r1, #16]
 801974c:	6923      	ldr	r3, [r4, #16]
 801974e:	429a      	cmp	r2, r3
 8019750:	bfb8      	it	lt
 8019752:	460b      	movlt	r3, r1
 8019754:	460d      	mov	r5, r1
 8019756:	bfbc      	itt	lt
 8019758:	4625      	movlt	r5, r4
 801975a:	461c      	movlt	r4, r3
 801975c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8019760:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8019764:	68ab      	ldr	r3, [r5, #8]
 8019766:	6869      	ldr	r1, [r5, #4]
 8019768:	eb0a 0709 	add.w	r7, sl, r9
 801976c:	42bb      	cmp	r3, r7
 801976e:	b085      	sub	sp, #20
 8019770:	bfb8      	it	lt
 8019772:	3101      	addlt	r1, #1
 8019774:	f7ff fed4 	bl	8019520 <_Balloc>
 8019778:	b930      	cbnz	r0, 8019788 <__multiply+0x44>
 801977a:	4602      	mov	r2, r0
 801977c:	4b42      	ldr	r3, [pc, #264]	; (8019888 <__multiply+0x144>)
 801977e:	4843      	ldr	r0, [pc, #268]	; (801988c <__multiply+0x148>)
 8019780:	f240 115d 	movw	r1, #349	; 0x15d
 8019784:	f000 fbc6 	bl	8019f14 <__assert_func>
 8019788:	f100 0614 	add.w	r6, r0, #20
 801978c:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8019790:	4633      	mov	r3, r6
 8019792:	2200      	movs	r2, #0
 8019794:	4543      	cmp	r3, r8
 8019796:	d31e      	bcc.n	80197d6 <__multiply+0x92>
 8019798:	f105 0c14 	add.w	ip, r5, #20
 801979c:	f104 0314 	add.w	r3, r4, #20
 80197a0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80197a4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80197a8:	9202      	str	r2, [sp, #8]
 80197aa:	ebac 0205 	sub.w	r2, ip, r5
 80197ae:	3a15      	subs	r2, #21
 80197b0:	f022 0203 	bic.w	r2, r2, #3
 80197b4:	3204      	adds	r2, #4
 80197b6:	f105 0115 	add.w	r1, r5, #21
 80197ba:	458c      	cmp	ip, r1
 80197bc:	bf38      	it	cc
 80197be:	2204      	movcc	r2, #4
 80197c0:	9201      	str	r2, [sp, #4]
 80197c2:	9a02      	ldr	r2, [sp, #8]
 80197c4:	9303      	str	r3, [sp, #12]
 80197c6:	429a      	cmp	r2, r3
 80197c8:	d808      	bhi.n	80197dc <__multiply+0x98>
 80197ca:	2f00      	cmp	r7, #0
 80197cc:	dc55      	bgt.n	801987a <__multiply+0x136>
 80197ce:	6107      	str	r7, [r0, #16]
 80197d0:	b005      	add	sp, #20
 80197d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80197d6:	f843 2b04 	str.w	r2, [r3], #4
 80197da:	e7db      	b.n	8019794 <__multiply+0x50>
 80197dc:	f8b3 a000 	ldrh.w	sl, [r3]
 80197e0:	f1ba 0f00 	cmp.w	sl, #0
 80197e4:	d020      	beq.n	8019828 <__multiply+0xe4>
 80197e6:	f105 0e14 	add.w	lr, r5, #20
 80197ea:	46b1      	mov	r9, r6
 80197ec:	2200      	movs	r2, #0
 80197ee:	f85e 4b04 	ldr.w	r4, [lr], #4
 80197f2:	f8d9 b000 	ldr.w	fp, [r9]
 80197f6:	b2a1      	uxth	r1, r4
 80197f8:	fa1f fb8b 	uxth.w	fp, fp
 80197fc:	fb0a b101 	mla	r1, sl, r1, fp
 8019800:	4411      	add	r1, r2
 8019802:	f8d9 2000 	ldr.w	r2, [r9]
 8019806:	0c24      	lsrs	r4, r4, #16
 8019808:	0c12      	lsrs	r2, r2, #16
 801980a:	fb0a 2404 	mla	r4, sl, r4, r2
 801980e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8019812:	b289      	uxth	r1, r1
 8019814:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8019818:	45f4      	cmp	ip, lr
 801981a:	f849 1b04 	str.w	r1, [r9], #4
 801981e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8019822:	d8e4      	bhi.n	80197ee <__multiply+0xaa>
 8019824:	9901      	ldr	r1, [sp, #4]
 8019826:	5072      	str	r2, [r6, r1]
 8019828:	9a03      	ldr	r2, [sp, #12]
 801982a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801982e:	3304      	adds	r3, #4
 8019830:	f1b9 0f00 	cmp.w	r9, #0
 8019834:	d01f      	beq.n	8019876 <__multiply+0x132>
 8019836:	6834      	ldr	r4, [r6, #0]
 8019838:	f105 0114 	add.w	r1, r5, #20
 801983c:	46b6      	mov	lr, r6
 801983e:	f04f 0a00 	mov.w	sl, #0
 8019842:	880a      	ldrh	r2, [r1, #0]
 8019844:	f8be b002 	ldrh.w	fp, [lr, #2]
 8019848:	fb09 b202 	mla	r2, r9, r2, fp
 801984c:	4492      	add	sl, r2
 801984e:	b2a4      	uxth	r4, r4
 8019850:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8019854:	f84e 4b04 	str.w	r4, [lr], #4
 8019858:	f851 4b04 	ldr.w	r4, [r1], #4
 801985c:	f8be 2000 	ldrh.w	r2, [lr]
 8019860:	0c24      	lsrs	r4, r4, #16
 8019862:	fb09 2404 	mla	r4, r9, r4, r2
 8019866:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 801986a:	458c      	cmp	ip, r1
 801986c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8019870:	d8e7      	bhi.n	8019842 <__multiply+0xfe>
 8019872:	9a01      	ldr	r2, [sp, #4]
 8019874:	50b4      	str	r4, [r6, r2]
 8019876:	3604      	adds	r6, #4
 8019878:	e7a3      	b.n	80197c2 <__multiply+0x7e>
 801987a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801987e:	2b00      	cmp	r3, #0
 8019880:	d1a5      	bne.n	80197ce <__multiply+0x8a>
 8019882:	3f01      	subs	r7, #1
 8019884:	e7a1      	b.n	80197ca <__multiply+0x86>
 8019886:	bf00      	nop
 8019888:	0801f190 	.word	0x0801f190
 801988c:	0801f1a1 	.word	0x0801f1a1

08019890 <__pow5mult>:
 8019890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019894:	4615      	mov	r5, r2
 8019896:	f012 0203 	ands.w	r2, r2, #3
 801989a:	4606      	mov	r6, r0
 801989c:	460f      	mov	r7, r1
 801989e:	d007      	beq.n	80198b0 <__pow5mult+0x20>
 80198a0:	4c25      	ldr	r4, [pc, #148]	; (8019938 <__pow5mult+0xa8>)
 80198a2:	3a01      	subs	r2, #1
 80198a4:	2300      	movs	r3, #0
 80198a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80198aa:	f7ff fe9b 	bl	80195e4 <__multadd>
 80198ae:	4607      	mov	r7, r0
 80198b0:	10ad      	asrs	r5, r5, #2
 80198b2:	d03d      	beq.n	8019930 <__pow5mult+0xa0>
 80198b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80198b6:	b97c      	cbnz	r4, 80198d8 <__pow5mult+0x48>
 80198b8:	2010      	movs	r0, #16
 80198ba:	f7fe f841 	bl	8017940 <malloc>
 80198be:	4602      	mov	r2, r0
 80198c0:	6270      	str	r0, [r6, #36]	; 0x24
 80198c2:	b928      	cbnz	r0, 80198d0 <__pow5mult+0x40>
 80198c4:	4b1d      	ldr	r3, [pc, #116]	; (801993c <__pow5mult+0xac>)
 80198c6:	481e      	ldr	r0, [pc, #120]	; (8019940 <__pow5mult+0xb0>)
 80198c8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80198cc:	f000 fb22 	bl	8019f14 <__assert_func>
 80198d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80198d4:	6004      	str	r4, [r0, #0]
 80198d6:	60c4      	str	r4, [r0, #12]
 80198d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80198dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80198e0:	b94c      	cbnz	r4, 80198f6 <__pow5mult+0x66>
 80198e2:	f240 2171 	movw	r1, #625	; 0x271
 80198e6:	4630      	mov	r0, r6
 80198e8:	f7ff ff16 	bl	8019718 <__i2b>
 80198ec:	2300      	movs	r3, #0
 80198ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80198f2:	4604      	mov	r4, r0
 80198f4:	6003      	str	r3, [r0, #0]
 80198f6:	f04f 0900 	mov.w	r9, #0
 80198fa:	07eb      	lsls	r3, r5, #31
 80198fc:	d50a      	bpl.n	8019914 <__pow5mult+0x84>
 80198fe:	4639      	mov	r1, r7
 8019900:	4622      	mov	r2, r4
 8019902:	4630      	mov	r0, r6
 8019904:	f7ff ff1e 	bl	8019744 <__multiply>
 8019908:	4639      	mov	r1, r7
 801990a:	4680      	mov	r8, r0
 801990c:	4630      	mov	r0, r6
 801990e:	f7ff fe47 	bl	80195a0 <_Bfree>
 8019912:	4647      	mov	r7, r8
 8019914:	106d      	asrs	r5, r5, #1
 8019916:	d00b      	beq.n	8019930 <__pow5mult+0xa0>
 8019918:	6820      	ldr	r0, [r4, #0]
 801991a:	b938      	cbnz	r0, 801992c <__pow5mult+0x9c>
 801991c:	4622      	mov	r2, r4
 801991e:	4621      	mov	r1, r4
 8019920:	4630      	mov	r0, r6
 8019922:	f7ff ff0f 	bl	8019744 <__multiply>
 8019926:	6020      	str	r0, [r4, #0]
 8019928:	f8c0 9000 	str.w	r9, [r0]
 801992c:	4604      	mov	r4, r0
 801992e:	e7e4      	b.n	80198fa <__pow5mult+0x6a>
 8019930:	4638      	mov	r0, r7
 8019932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019936:	bf00      	nop
 8019938:	0801f2f8 	.word	0x0801f2f8
 801993c:	0801f11a 	.word	0x0801f11a
 8019940:	0801f1a1 	.word	0x0801f1a1

08019944 <__lshift>:
 8019944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019948:	460c      	mov	r4, r1
 801994a:	6849      	ldr	r1, [r1, #4]
 801994c:	6923      	ldr	r3, [r4, #16]
 801994e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8019952:	68a3      	ldr	r3, [r4, #8]
 8019954:	4607      	mov	r7, r0
 8019956:	4691      	mov	r9, r2
 8019958:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801995c:	f108 0601 	add.w	r6, r8, #1
 8019960:	42b3      	cmp	r3, r6
 8019962:	db0b      	blt.n	801997c <__lshift+0x38>
 8019964:	4638      	mov	r0, r7
 8019966:	f7ff fddb 	bl	8019520 <_Balloc>
 801996a:	4605      	mov	r5, r0
 801996c:	b948      	cbnz	r0, 8019982 <__lshift+0x3e>
 801996e:	4602      	mov	r2, r0
 8019970:	4b28      	ldr	r3, [pc, #160]	; (8019a14 <__lshift+0xd0>)
 8019972:	4829      	ldr	r0, [pc, #164]	; (8019a18 <__lshift+0xd4>)
 8019974:	f240 11d9 	movw	r1, #473	; 0x1d9
 8019978:	f000 facc 	bl	8019f14 <__assert_func>
 801997c:	3101      	adds	r1, #1
 801997e:	005b      	lsls	r3, r3, #1
 8019980:	e7ee      	b.n	8019960 <__lshift+0x1c>
 8019982:	2300      	movs	r3, #0
 8019984:	f100 0114 	add.w	r1, r0, #20
 8019988:	f100 0210 	add.w	r2, r0, #16
 801998c:	4618      	mov	r0, r3
 801998e:	4553      	cmp	r3, sl
 8019990:	db33      	blt.n	80199fa <__lshift+0xb6>
 8019992:	6920      	ldr	r0, [r4, #16]
 8019994:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8019998:	f104 0314 	add.w	r3, r4, #20
 801999c:	f019 091f 	ands.w	r9, r9, #31
 80199a0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80199a4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80199a8:	d02b      	beq.n	8019a02 <__lshift+0xbe>
 80199aa:	f1c9 0e20 	rsb	lr, r9, #32
 80199ae:	468a      	mov	sl, r1
 80199b0:	2200      	movs	r2, #0
 80199b2:	6818      	ldr	r0, [r3, #0]
 80199b4:	fa00 f009 	lsl.w	r0, r0, r9
 80199b8:	4302      	orrs	r2, r0
 80199ba:	f84a 2b04 	str.w	r2, [sl], #4
 80199be:	f853 2b04 	ldr.w	r2, [r3], #4
 80199c2:	459c      	cmp	ip, r3
 80199c4:	fa22 f20e 	lsr.w	r2, r2, lr
 80199c8:	d8f3      	bhi.n	80199b2 <__lshift+0x6e>
 80199ca:	ebac 0304 	sub.w	r3, ip, r4
 80199ce:	3b15      	subs	r3, #21
 80199d0:	f023 0303 	bic.w	r3, r3, #3
 80199d4:	3304      	adds	r3, #4
 80199d6:	f104 0015 	add.w	r0, r4, #21
 80199da:	4584      	cmp	ip, r0
 80199dc:	bf38      	it	cc
 80199de:	2304      	movcc	r3, #4
 80199e0:	50ca      	str	r2, [r1, r3]
 80199e2:	b10a      	cbz	r2, 80199e8 <__lshift+0xa4>
 80199e4:	f108 0602 	add.w	r6, r8, #2
 80199e8:	3e01      	subs	r6, #1
 80199ea:	4638      	mov	r0, r7
 80199ec:	612e      	str	r6, [r5, #16]
 80199ee:	4621      	mov	r1, r4
 80199f0:	f7ff fdd6 	bl	80195a0 <_Bfree>
 80199f4:	4628      	mov	r0, r5
 80199f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80199fa:	f842 0f04 	str.w	r0, [r2, #4]!
 80199fe:	3301      	adds	r3, #1
 8019a00:	e7c5      	b.n	801998e <__lshift+0x4a>
 8019a02:	3904      	subs	r1, #4
 8019a04:	f853 2b04 	ldr.w	r2, [r3], #4
 8019a08:	f841 2f04 	str.w	r2, [r1, #4]!
 8019a0c:	459c      	cmp	ip, r3
 8019a0e:	d8f9      	bhi.n	8019a04 <__lshift+0xc0>
 8019a10:	e7ea      	b.n	80199e8 <__lshift+0xa4>
 8019a12:	bf00      	nop
 8019a14:	0801f190 	.word	0x0801f190
 8019a18:	0801f1a1 	.word	0x0801f1a1

08019a1c <__mcmp>:
 8019a1c:	b530      	push	{r4, r5, lr}
 8019a1e:	6902      	ldr	r2, [r0, #16]
 8019a20:	690c      	ldr	r4, [r1, #16]
 8019a22:	1b12      	subs	r2, r2, r4
 8019a24:	d10e      	bne.n	8019a44 <__mcmp+0x28>
 8019a26:	f100 0314 	add.w	r3, r0, #20
 8019a2a:	3114      	adds	r1, #20
 8019a2c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8019a30:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019a34:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8019a38:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8019a3c:	42a5      	cmp	r5, r4
 8019a3e:	d003      	beq.n	8019a48 <__mcmp+0x2c>
 8019a40:	d305      	bcc.n	8019a4e <__mcmp+0x32>
 8019a42:	2201      	movs	r2, #1
 8019a44:	4610      	mov	r0, r2
 8019a46:	bd30      	pop	{r4, r5, pc}
 8019a48:	4283      	cmp	r3, r0
 8019a4a:	d3f3      	bcc.n	8019a34 <__mcmp+0x18>
 8019a4c:	e7fa      	b.n	8019a44 <__mcmp+0x28>
 8019a4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019a52:	e7f7      	b.n	8019a44 <__mcmp+0x28>

08019a54 <__mdiff>:
 8019a54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019a58:	460c      	mov	r4, r1
 8019a5a:	4606      	mov	r6, r0
 8019a5c:	4611      	mov	r1, r2
 8019a5e:	4620      	mov	r0, r4
 8019a60:	4617      	mov	r7, r2
 8019a62:	f7ff ffdb 	bl	8019a1c <__mcmp>
 8019a66:	1e05      	subs	r5, r0, #0
 8019a68:	d110      	bne.n	8019a8c <__mdiff+0x38>
 8019a6a:	4629      	mov	r1, r5
 8019a6c:	4630      	mov	r0, r6
 8019a6e:	f7ff fd57 	bl	8019520 <_Balloc>
 8019a72:	b930      	cbnz	r0, 8019a82 <__mdiff+0x2e>
 8019a74:	4b39      	ldr	r3, [pc, #228]	; (8019b5c <__mdiff+0x108>)
 8019a76:	4602      	mov	r2, r0
 8019a78:	f240 2132 	movw	r1, #562	; 0x232
 8019a7c:	4838      	ldr	r0, [pc, #224]	; (8019b60 <__mdiff+0x10c>)
 8019a7e:	f000 fa49 	bl	8019f14 <__assert_func>
 8019a82:	2301      	movs	r3, #1
 8019a84:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8019a88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a8c:	bfa4      	itt	ge
 8019a8e:	463b      	movge	r3, r7
 8019a90:	4627      	movge	r7, r4
 8019a92:	4630      	mov	r0, r6
 8019a94:	6879      	ldr	r1, [r7, #4]
 8019a96:	bfa6      	itte	ge
 8019a98:	461c      	movge	r4, r3
 8019a9a:	2500      	movge	r5, #0
 8019a9c:	2501      	movlt	r5, #1
 8019a9e:	f7ff fd3f 	bl	8019520 <_Balloc>
 8019aa2:	b920      	cbnz	r0, 8019aae <__mdiff+0x5a>
 8019aa4:	4b2d      	ldr	r3, [pc, #180]	; (8019b5c <__mdiff+0x108>)
 8019aa6:	4602      	mov	r2, r0
 8019aa8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8019aac:	e7e6      	b.n	8019a7c <__mdiff+0x28>
 8019aae:	693e      	ldr	r6, [r7, #16]
 8019ab0:	60c5      	str	r5, [r0, #12]
 8019ab2:	6925      	ldr	r5, [r4, #16]
 8019ab4:	f107 0114 	add.w	r1, r7, #20
 8019ab8:	f104 0914 	add.w	r9, r4, #20
 8019abc:	f100 0e14 	add.w	lr, r0, #20
 8019ac0:	f107 0210 	add.w	r2, r7, #16
 8019ac4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8019ac8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8019acc:	46f2      	mov	sl, lr
 8019ace:	2700      	movs	r7, #0
 8019ad0:	f859 3b04 	ldr.w	r3, [r9], #4
 8019ad4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8019ad8:	fa1f f883 	uxth.w	r8, r3
 8019adc:	fa17 f78b 	uxtah	r7, r7, fp
 8019ae0:	0c1b      	lsrs	r3, r3, #16
 8019ae2:	eba7 0808 	sub.w	r8, r7, r8
 8019ae6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8019aea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8019aee:	fa1f f888 	uxth.w	r8, r8
 8019af2:	141f      	asrs	r7, r3, #16
 8019af4:	454d      	cmp	r5, r9
 8019af6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8019afa:	f84a 3b04 	str.w	r3, [sl], #4
 8019afe:	d8e7      	bhi.n	8019ad0 <__mdiff+0x7c>
 8019b00:	1b2b      	subs	r3, r5, r4
 8019b02:	3b15      	subs	r3, #21
 8019b04:	f023 0303 	bic.w	r3, r3, #3
 8019b08:	3304      	adds	r3, #4
 8019b0a:	3415      	adds	r4, #21
 8019b0c:	42a5      	cmp	r5, r4
 8019b0e:	bf38      	it	cc
 8019b10:	2304      	movcc	r3, #4
 8019b12:	4419      	add	r1, r3
 8019b14:	4473      	add	r3, lr
 8019b16:	469e      	mov	lr, r3
 8019b18:	460d      	mov	r5, r1
 8019b1a:	4565      	cmp	r5, ip
 8019b1c:	d30e      	bcc.n	8019b3c <__mdiff+0xe8>
 8019b1e:	f10c 0203 	add.w	r2, ip, #3
 8019b22:	1a52      	subs	r2, r2, r1
 8019b24:	f022 0203 	bic.w	r2, r2, #3
 8019b28:	3903      	subs	r1, #3
 8019b2a:	458c      	cmp	ip, r1
 8019b2c:	bf38      	it	cc
 8019b2e:	2200      	movcc	r2, #0
 8019b30:	441a      	add	r2, r3
 8019b32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8019b36:	b17b      	cbz	r3, 8019b58 <__mdiff+0x104>
 8019b38:	6106      	str	r6, [r0, #16]
 8019b3a:	e7a5      	b.n	8019a88 <__mdiff+0x34>
 8019b3c:	f855 8b04 	ldr.w	r8, [r5], #4
 8019b40:	fa17 f488 	uxtah	r4, r7, r8
 8019b44:	1422      	asrs	r2, r4, #16
 8019b46:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8019b4a:	b2a4      	uxth	r4, r4
 8019b4c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8019b50:	f84e 4b04 	str.w	r4, [lr], #4
 8019b54:	1417      	asrs	r7, r2, #16
 8019b56:	e7e0      	b.n	8019b1a <__mdiff+0xc6>
 8019b58:	3e01      	subs	r6, #1
 8019b5a:	e7ea      	b.n	8019b32 <__mdiff+0xde>
 8019b5c:	0801f190 	.word	0x0801f190
 8019b60:	0801f1a1 	.word	0x0801f1a1

08019b64 <__d2b>:
 8019b64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019b68:	4689      	mov	r9, r1
 8019b6a:	2101      	movs	r1, #1
 8019b6c:	ec57 6b10 	vmov	r6, r7, d0
 8019b70:	4690      	mov	r8, r2
 8019b72:	f7ff fcd5 	bl	8019520 <_Balloc>
 8019b76:	4604      	mov	r4, r0
 8019b78:	b930      	cbnz	r0, 8019b88 <__d2b+0x24>
 8019b7a:	4602      	mov	r2, r0
 8019b7c:	4b25      	ldr	r3, [pc, #148]	; (8019c14 <__d2b+0xb0>)
 8019b7e:	4826      	ldr	r0, [pc, #152]	; (8019c18 <__d2b+0xb4>)
 8019b80:	f240 310a 	movw	r1, #778	; 0x30a
 8019b84:	f000 f9c6 	bl	8019f14 <__assert_func>
 8019b88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8019b8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8019b90:	bb35      	cbnz	r5, 8019be0 <__d2b+0x7c>
 8019b92:	2e00      	cmp	r6, #0
 8019b94:	9301      	str	r3, [sp, #4]
 8019b96:	d028      	beq.n	8019bea <__d2b+0x86>
 8019b98:	4668      	mov	r0, sp
 8019b9a:	9600      	str	r6, [sp, #0]
 8019b9c:	f7ff fd8c 	bl	80196b8 <__lo0bits>
 8019ba0:	9900      	ldr	r1, [sp, #0]
 8019ba2:	b300      	cbz	r0, 8019be6 <__d2b+0x82>
 8019ba4:	9a01      	ldr	r2, [sp, #4]
 8019ba6:	f1c0 0320 	rsb	r3, r0, #32
 8019baa:	fa02 f303 	lsl.w	r3, r2, r3
 8019bae:	430b      	orrs	r3, r1
 8019bb0:	40c2      	lsrs	r2, r0
 8019bb2:	6163      	str	r3, [r4, #20]
 8019bb4:	9201      	str	r2, [sp, #4]
 8019bb6:	9b01      	ldr	r3, [sp, #4]
 8019bb8:	61a3      	str	r3, [r4, #24]
 8019bba:	2b00      	cmp	r3, #0
 8019bbc:	bf14      	ite	ne
 8019bbe:	2202      	movne	r2, #2
 8019bc0:	2201      	moveq	r2, #1
 8019bc2:	6122      	str	r2, [r4, #16]
 8019bc4:	b1d5      	cbz	r5, 8019bfc <__d2b+0x98>
 8019bc6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8019bca:	4405      	add	r5, r0
 8019bcc:	f8c9 5000 	str.w	r5, [r9]
 8019bd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8019bd4:	f8c8 0000 	str.w	r0, [r8]
 8019bd8:	4620      	mov	r0, r4
 8019bda:	b003      	add	sp, #12
 8019bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019be0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8019be4:	e7d5      	b.n	8019b92 <__d2b+0x2e>
 8019be6:	6161      	str	r1, [r4, #20]
 8019be8:	e7e5      	b.n	8019bb6 <__d2b+0x52>
 8019bea:	a801      	add	r0, sp, #4
 8019bec:	f7ff fd64 	bl	80196b8 <__lo0bits>
 8019bf0:	9b01      	ldr	r3, [sp, #4]
 8019bf2:	6163      	str	r3, [r4, #20]
 8019bf4:	2201      	movs	r2, #1
 8019bf6:	6122      	str	r2, [r4, #16]
 8019bf8:	3020      	adds	r0, #32
 8019bfa:	e7e3      	b.n	8019bc4 <__d2b+0x60>
 8019bfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8019c00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8019c04:	f8c9 0000 	str.w	r0, [r9]
 8019c08:	6918      	ldr	r0, [r3, #16]
 8019c0a:	f7ff fd35 	bl	8019678 <__hi0bits>
 8019c0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8019c12:	e7df      	b.n	8019bd4 <__d2b+0x70>
 8019c14:	0801f190 	.word	0x0801f190
 8019c18:	0801f1a1 	.word	0x0801f1a1

08019c1c <_calloc_r>:
 8019c1c:	b513      	push	{r0, r1, r4, lr}
 8019c1e:	434a      	muls	r2, r1
 8019c20:	4611      	mov	r1, r2
 8019c22:	9201      	str	r2, [sp, #4]
 8019c24:	f7fd ff02 	bl	8017a2c <_malloc_r>
 8019c28:	4604      	mov	r4, r0
 8019c2a:	b118      	cbz	r0, 8019c34 <_calloc_r+0x18>
 8019c2c:	9a01      	ldr	r2, [sp, #4]
 8019c2e:	2100      	movs	r1, #0
 8019c30:	f7fd fea4 	bl	801797c <memset>
 8019c34:	4620      	mov	r0, r4
 8019c36:	b002      	add	sp, #8
 8019c38:	bd10      	pop	{r4, pc}

08019c3a <__ssputs_r>:
 8019c3a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c3e:	688e      	ldr	r6, [r1, #8]
 8019c40:	429e      	cmp	r6, r3
 8019c42:	4682      	mov	sl, r0
 8019c44:	460c      	mov	r4, r1
 8019c46:	4690      	mov	r8, r2
 8019c48:	461f      	mov	r7, r3
 8019c4a:	d838      	bhi.n	8019cbe <__ssputs_r+0x84>
 8019c4c:	898a      	ldrh	r2, [r1, #12]
 8019c4e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019c52:	d032      	beq.n	8019cba <__ssputs_r+0x80>
 8019c54:	6825      	ldr	r5, [r4, #0]
 8019c56:	6909      	ldr	r1, [r1, #16]
 8019c58:	eba5 0901 	sub.w	r9, r5, r1
 8019c5c:	6965      	ldr	r5, [r4, #20]
 8019c5e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019c62:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8019c66:	3301      	adds	r3, #1
 8019c68:	444b      	add	r3, r9
 8019c6a:	106d      	asrs	r5, r5, #1
 8019c6c:	429d      	cmp	r5, r3
 8019c6e:	bf38      	it	cc
 8019c70:	461d      	movcc	r5, r3
 8019c72:	0553      	lsls	r3, r2, #21
 8019c74:	d531      	bpl.n	8019cda <__ssputs_r+0xa0>
 8019c76:	4629      	mov	r1, r5
 8019c78:	f7fd fed8 	bl	8017a2c <_malloc_r>
 8019c7c:	4606      	mov	r6, r0
 8019c7e:	b950      	cbnz	r0, 8019c96 <__ssputs_r+0x5c>
 8019c80:	230c      	movs	r3, #12
 8019c82:	f8ca 3000 	str.w	r3, [sl]
 8019c86:	89a3      	ldrh	r3, [r4, #12]
 8019c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019c8c:	81a3      	strh	r3, [r4, #12]
 8019c8e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c96:	6921      	ldr	r1, [r4, #16]
 8019c98:	464a      	mov	r2, r9
 8019c9a:	f7fd fe61 	bl	8017960 <memcpy>
 8019c9e:	89a3      	ldrh	r3, [r4, #12]
 8019ca0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019ca8:	81a3      	strh	r3, [r4, #12]
 8019caa:	6126      	str	r6, [r4, #16]
 8019cac:	6165      	str	r5, [r4, #20]
 8019cae:	444e      	add	r6, r9
 8019cb0:	eba5 0509 	sub.w	r5, r5, r9
 8019cb4:	6026      	str	r6, [r4, #0]
 8019cb6:	60a5      	str	r5, [r4, #8]
 8019cb8:	463e      	mov	r6, r7
 8019cba:	42be      	cmp	r6, r7
 8019cbc:	d900      	bls.n	8019cc0 <__ssputs_r+0x86>
 8019cbe:	463e      	mov	r6, r7
 8019cc0:	4632      	mov	r2, r6
 8019cc2:	6820      	ldr	r0, [r4, #0]
 8019cc4:	4641      	mov	r1, r8
 8019cc6:	f000 f967 	bl	8019f98 <memmove>
 8019cca:	68a3      	ldr	r3, [r4, #8]
 8019ccc:	6822      	ldr	r2, [r4, #0]
 8019cce:	1b9b      	subs	r3, r3, r6
 8019cd0:	4432      	add	r2, r6
 8019cd2:	60a3      	str	r3, [r4, #8]
 8019cd4:	6022      	str	r2, [r4, #0]
 8019cd6:	2000      	movs	r0, #0
 8019cd8:	e7db      	b.n	8019c92 <__ssputs_r+0x58>
 8019cda:	462a      	mov	r2, r5
 8019cdc:	f000 f976 	bl	8019fcc <_realloc_r>
 8019ce0:	4606      	mov	r6, r0
 8019ce2:	2800      	cmp	r0, #0
 8019ce4:	d1e1      	bne.n	8019caa <__ssputs_r+0x70>
 8019ce6:	6921      	ldr	r1, [r4, #16]
 8019ce8:	4650      	mov	r0, sl
 8019cea:	f7fd fe4f 	bl	801798c <_free_r>
 8019cee:	e7c7      	b.n	8019c80 <__ssputs_r+0x46>

08019cf0 <_svfiprintf_r>:
 8019cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019cf4:	4698      	mov	r8, r3
 8019cf6:	898b      	ldrh	r3, [r1, #12]
 8019cf8:	061b      	lsls	r3, r3, #24
 8019cfa:	b09d      	sub	sp, #116	; 0x74
 8019cfc:	4607      	mov	r7, r0
 8019cfe:	460d      	mov	r5, r1
 8019d00:	4614      	mov	r4, r2
 8019d02:	d50e      	bpl.n	8019d22 <_svfiprintf_r+0x32>
 8019d04:	690b      	ldr	r3, [r1, #16]
 8019d06:	b963      	cbnz	r3, 8019d22 <_svfiprintf_r+0x32>
 8019d08:	2140      	movs	r1, #64	; 0x40
 8019d0a:	f7fd fe8f 	bl	8017a2c <_malloc_r>
 8019d0e:	6028      	str	r0, [r5, #0]
 8019d10:	6128      	str	r0, [r5, #16]
 8019d12:	b920      	cbnz	r0, 8019d1e <_svfiprintf_r+0x2e>
 8019d14:	230c      	movs	r3, #12
 8019d16:	603b      	str	r3, [r7, #0]
 8019d18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019d1c:	e0d1      	b.n	8019ec2 <_svfiprintf_r+0x1d2>
 8019d1e:	2340      	movs	r3, #64	; 0x40
 8019d20:	616b      	str	r3, [r5, #20]
 8019d22:	2300      	movs	r3, #0
 8019d24:	9309      	str	r3, [sp, #36]	; 0x24
 8019d26:	2320      	movs	r3, #32
 8019d28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019d2c:	f8cd 800c 	str.w	r8, [sp, #12]
 8019d30:	2330      	movs	r3, #48	; 0x30
 8019d32:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019edc <_svfiprintf_r+0x1ec>
 8019d36:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019d3a:	f04f 0901 	mov.w	r9, #1
 8019d3e:	4623      	mov	r3, r4
 8019d40:	469a      	mov	sl, r3
 8019d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019d46:	b10a      	cbz	r2, 8019d4c <_svfiprintf_r+0x5c>
 8019d48:	2a25      	cmp	r2, #37	; 0x25
 8019d4a:	d1f9      	bne.n	8019d40 <_svfiprintf_r+0x50>
 8019d4c:	ebba 0b04 	subs.w	fp, sl, r4
 8019d50:	d00b      	beq.n	8019d6a <_svfiprintf_r+0x7a>
 8019d52:	465b      	mov	r3, fp
 8019d54:	4622      	mov	r2, r4
 8019d56:	4629      	mov	r1, r5
 8019d58:	4638      	mov	r0, r7
 8019d5a:	f7ff ff6e 	bl	8019c3a <__ssputs_r>
 8019d5e:	3001      	adds	r0, #1
 8019d60:	f000 80aa 	beq.w	8019eb8 <_svfiprintf_r+0x1c8>
 8019d64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8019d66:	445a      	add	r2, fp
 8019d68:	9209      	str	r2, [sp, #36]	; 0x24
 8019d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8019d6e:	2b00      	cmp	r3, #0
 8019d70:	f000 80a2 	beq.w	8019eb8 <_svfiprintf_r+0x1c8>
 8019d74:	2300      	movs	r3, #0
 8019d76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019d7e:	f10a 0a01 	add.w	sl, sl, #1
 8019d82:	9304      	str	r3, [sp, #16]
 8019d84:	9307      	str	r3, [sp, #28]
 8019d86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019d8a:	931a      	str	r3, [sp, #104]	; 0x68
 8019d8c:	4654      	mov	r4, sl
 8019d8e:	2205      	movs	r2, #5
 8019d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d94:	4851      	ldr	r0, [pc, #324]	; (8019edc <_svfiprintf_r+0x1ec>)
 8019d96:	f7e6 fa23 	bl	80001e0 <memchr>
 8019d9a:	9a04      	ldr	r2, [sp, #16]
 8019d9c:	b9d8      	cbnz	r0, 8019dd6 <_svfiprintf_r+0xe6>
 8019d9e:	06d0      	lsls	r0, r2, #27
 8019da0:	bf44      	itt	mi
 8019da2:	2320      	movmi	r3, #32
 8019da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019da8:	0711      	lsls	r1, r2, #28
 8019daa:	bf44      	itt	mi
 8019dac:	232b      	movmi	r3, #43	; 0x2b
 8019dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8019db2:	f89a 3000 	ldrb.w	r3, [sl]
 8019db6:	2b2a      	cmp	r3, #42	; 0x2a
 8019db8:	d015      	beq.n	8019de6 <_svfiprintf_r+0xf6>
 8019dba:	9a07      	ldr	r2, [sp, #28]
 8019dbc:	4654      	mov	r4, sl
 8019dbe:	2000      	movs	r0, #0
 8019dc0:	f04f 0c0a 	mov.w	ip, #10
 8019dc4:	4621      	mov	r1, r4
 8019dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019dca:	3b30      	subs	r3, #48	; 0x30
 8019dcc:	2b09      	cmp	r3, #9
 8019dce:	d94e      	bls.n	8019e6e <_svfiprintf_r+0x17e>
 8019dd0:	b1b0      	cbz	r0, 8019e00 <_svfiprintf_r+0x110>
 8019dd2:	9207      	str	r2, [sp, #28]
 8019dd4:	e014      	b.n	8019e00 <_svfiprintf_r+0x110>
 8019dd6:	eba0 0308 	sub.w	r3, r0, r8
 8019dda:	fa09 f303 	lsl.w	r3, r9, r3
 8019dde:	4313      	orrs	r3, r2
 8019de0:	9304      	str	r3, [sp, #16]
 8019de2:	46a2      	mov	sl, r4
 8019de4:	e7d2      	b.n	8019d8c <_svfiprintf_r+0x9c>
 8019de6:	9b03      	ldr	r3, [sp, #12]
 8019de8:	1d19      	adds	r1, r3, #4
 8019dea:	681b      	ldr	r3, [r3, #0]
 8019dec:	9103      	str	r1, [sp, #12]
 8019dee:	2b00      	cmp	r3, #0
 8019df0:	bfbb      	ittet	lt
 8019df2:	425b      	neglt	r3, r3
 8019df4:	f042 0202 	orrlt.w	r2, r2, #2
 8019df8:	9307      	strge	r3, [sp, #28]
 8019dfa:	9307      	strlt	r3, [sp, #28]
 8019dfc:	bfb8      	it	lt
 8019dfe:	9204      	strlt	r2, [sp, #16]
 8019e00:	7823      	ldrb	r3, [r4, #0]
 8019e02:	2b2e      	cmp	r3, #46	; 0x2e
 8019e04:	d10c      	bne.n	8019e20 <_svfiprintf_r+0x130>
 8019e06:	7863      	ldrb	r3, [r4, #1]
 8019e08:	2b2a      	cmp	r3, #42	; 0x2a
 8019e0a:	d135      	bne.n	8019e78 <_svfiprintf_r+0x188>
 8019e0c:	9b03      	ldr	r3, [sp, #12]
 8019e0e:	1d1a      	adds	r2, r3, #4
 8019e10:	681b      	ldr	r3, [r3, #0]
 8019e12:	9203      	str	r2, [sp, #12]
 8019e14:	2b00      	cmp	r3, #0
 8019e16:	bfb8      	it	lt
 8019e18:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8019e1c:	3402      	adds	r4, #2
 8019e1e:	9305      	str	r3, [sp, #20]
 8019e20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8019eec <_svfiprintf_r+0x1fc>
 8019e24:	7821      	ldrb	r1, [r4, #0]
 8019e26:	2203      	movs	r2, #3
 8019e28:	4650      	mov	r0, sl
 8019e2a:	f7e6 f9d9 	bl	80001e0 <memchr>
 8019e2e:	b140      	cbz	r0, 8019e42 <_svfiprintf_r+0x152>
 8019e30:	2340      	movs	r3, #64	; 0x40
 8019e32:	eba0 000a 	sub.w	r0, r0, sl
 8019e36:	fa03 f000 	lsl.w	r0, r3, r0
 8019e3a:	9b04      	ldr	r3, [sp, #16]
 8019e3c:	4303      	orrs	r3, r0
 8019e3e:	3401      	adds	r4, #1
 8019e40:	9304      	str	r3, [sp, #16]
 8019e42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e46:	4826      	ldr	r0, [pc, #152]	; (8019ee0 <_svfiprintf_r+0x1f0>)
 8019e48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019e4c:	2206      	movs	r2, #6
 8019e4e:	f7e6 f9c7 	bl	80001e0 <memchr>
 8019e52:	2800      	cmp	r0, #0
 8019e54:	d038      	beq.n	8019ec8 <_svfiprintf_r+0x1d8>
 8019e56:	4b23      	ldr	r3, [pc, #140]	; (8019ee4 <_svfiprintf_r+0x1f4>)
 8019e58:	bb1b      	cbnz	r3, 8019ea2 <_svfiprintf_r+0x1b2>
 8019e5a:	9b03      	ldr	r3, [sp, #12]
 8019e5c:	3307      	adds	r3, #7
 8019e5e:	f023 0307 	bic.w	r3, r3, #7
 8019e62:	3308      	adds	r3, #8
 8019e64:	9303      	str	r3, [sp, #12]
 8019e66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019e68:	4433      	add	r3, r6
 8019e6a:	9309      	str	r3, [sp, #36]	; 0x24
 8019e6c:	e767      	b.n	8019d3e <_svfiprintf_r+0x4e>
 8019e6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8019e72:	460c      	mov	r4, r1
 8019e74:	2001      	movs	r0, #1
 8019e76:	e7a5      	b.n	8019dc4 <_svfiprintf_r+0xd4>
 8019e78:	2300      	movs	r3, #0
 8019e7a:	3401      	adds	r4, #1
 8019e7c:	9305      	str	r3, [sp, #20]
 8019e7e:	4619      	mov	r1, r3
 8019e80:	f04f 0c0a 	mov.w	ip, #10
 8019e84:	4620      	mov	r0, r4
 8019e86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019e8a:	3a30      	subs	r2, #48	; 0x30
 8019e8c:	2a09      	cmp	r2, #9
 8019e8e:	d903      	bls.n	8019e98 <_svfiprintf_r+0x1a8>
 8019e90:	2b00      	cmp	r3, #0
 8019e92:	d0c5      	beq.n	8019e20 <_svfiprintf_r+0x130>
 8019e94:	9105      	str	r1, [sp, #20]
 8019e96:	e7c3      	b.n	8019e20 <_svfiprintf_r+0x130>
 8019e98:	fb0c 2101 	mla	r1, ip, r1, r2
 8019e9c:	4604      	mov	r4, r0
 8019e9e:	2301      	movs	r3, #1
 8019ea0:	e7f0      	b.n	8019e84 <_svfiprintf_r+0x194>
 8019ea2:	ab03      	add	r3, sp, #12
 8019ea4:	9300      	str	r3, [sp, #0]
 8019ea6:	462a      	mov	r2, r5
 8019ea8:	4b0f      	ldr	r3, [pc, #60]	; (8019ee8 <_svfiprintf_r+0x1f8>)
 8019eaa:	a904      	add	r1, sp, #16
 8019eac:	4638      	mov	r0, r7
 8019eae:	f7fd feb7 	bl	8017c20 <_printf_float>
 8019eb2:	1c42      	adds	r2, r0, #1
 8019eb4:	4606      	mov	r6, r0
 8019eb6:	d1d6      	bne.n	8019e66 <_svfiprintf_r+0x176>
 8019eb8:	89ab      	ldrh	r3, [r5, #12]
 8019eba:	065b      	lsls	r3, r3, #25
 8019ebc:	f53f af2c 	bmi.w	8019d18 <_svfiprintf_r+0x28>
 8019ec0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019ec2:	b01d      	add	sp, #116	; 0x74
 8019ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ec8:	ab03      	add	r3, sp, #12
 8019eca:	9300      	str	r3, [sp, #0]
 8019ecc:	462a      	mov	r2, r5
 8019ece:	4b06      	ldr	r3, [pc, #24]	; (8019ee8 <_svfiprintf_r+0x1f8>)
 8019ed0:	a904      	add	r1, sp, #16
 8019ed2:	4638      	mov	r0, r7
 8019ed4:	f7fe f948 	bl	8018168 <_printf_i>
 8019ed8:	e7eb      	b.n	8019eb2 <_svfiprintf_r+0x1c2>
 8019eda:	bf00      	nop
 8019edc:	0801f304 	.word	0x0801f304
 8019ee0:	0801f30e 	.word	0x0801f30e
 8019ee4:	08017c21 	.word	0x08017c21
 8019ee8:	08019c3b 	.word	0x08019c3b
 8019eec:	0801f30a 	.word	0x0801f30a

08019ef0 <_read_r>:
 8019ef0:	b538      	push	{r3, r4, r5, lr}
 8019ef2:	4d07      	ldr	r5, [pc, #28]	; (8019f10 <_read_r+0x20>)
 8019ef4:	4604      	mov	r4, r0
 8019ef6:	4608      	mov	r0, r1
 8019ef8:	4611      	mov	r1, r2
 8019efa:	2200      	movs	r2, #0
 8019efc:	602a      	str	r2, [r5, #0]
 8019efe:	461a      	mov	r2, r3
 8019f00:	f7eb fa9e 	bl	8005440 <_read>
 8019f04:	1c43      	adds	r3, r0, #1
 8019f06:	d102      	bne.n	8019f0e <_read_r+0x1e>
 8019f08:	682b      	ldr	r3, [r5, #0]
 8019f0a:	b103      	cbz	r3, 8019f0e <_read_r+0x1e>
 8019f0c:	6023      	str	r3, [r4, #0]
 8019f0e:	bd38      	pop	{r3, r4, r5, pc}
 8019f10:	200147fc 	.word	0x200147fc

08019f14 <__assert_func>:
 8019f14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019f16:	4614      	mov	r4, r2
 8019f18:	461a      	mov	r2, r3
 8019f1a:	4b09      	ldr	r3, [pc, #36]	; (8019f40 <__assert_func+0x2c>)
 8019f1c:	681b      	ldr	r3, [r3, #0]
 8019f1e:	4605      	mov	r5, r0
 8019f20:	68d8      	ldr	r0, [r3, #12]
 8019f22:	b14c      	cbz	r4, 8019f38 <__assert_func+0x24>
 8019f24:	4b07      	ldr	r3, [pc, #28]	; (8019f44 <__assert_func+0x30>)
 8019f26:	9100      	str	r1, [sp, #0]
 8019f28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019f2c:	4906      	ldr	r1, [pc, #24]	; (8019f48 <__assert_func+0x34>)
 8019f2e:	462b      	mov	r3, r5
 8019f30:	f000 f80e 	bl	8019f50 <fiprintf>
 8019f34:	f000 fa98 	bl	801a468 <abort>
 8019f38:	4b04      	ldr	r3, [pc, #16]	; (8019f4c <__assert_func+0x38>)
 8019f3a:	461c      	mov	r4, r3
 8019f3c:	e7f3      	b.n	8019f26 <__assert_func+0x12>
 8019f3e:	bf00      	nop
 8019f40:	200001c8 	.word	0x200001c8
 8019f44:	0801f315 	.word	0x0801f315
 8019f48:	0801f322 	.word	0x0801f322
 8019f4c:	0801f350 	.word	0x0801f350

08019f50 <fiprintf>:
 8019f50:	b40e      	push	{r1, r2, r3}
 8019f52:	b503      	push	{r0, r1, lr}
 8019f54:	4601      	mov	r1, r0
 8019f56:	ab03      	add	r3, sp, #12
 8019f58:	4805      	ldr	r0, [pc, #20]	; (8019f70 <fiprintf+0x20>)
 8019f5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8019f5e:	6800      	ldr	r0, [r0, #0]
 8019f60:	9301      	str	r3, [sp, #4]
 8019f62:	f000 f883 	bl	801a06c <_vfiprintf_r>
 8019f66:	b002      	add	sp, #8
 8019f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8019f6c:	b003      	add	sp, #12
 8019f6e:	4770      	bx	lr
 8019f70:	200001c8 	.word	0x200001c8

08019f74 <__ascii_mbtowc>:
 8019f74:	b082      	sub	sp, #8
 8019f76:	b901      	cbnz	r1, 8019f7a <__ascii_mbtowc+0x6>
 8019f78:	a901      	add	r1, sp, #4
 8019f7a:	b142      	cbz	r2, 8019f8e <__ascii_mbtowc+0x1a>
 8019f7c:	b14b      	cbz	r3, 8019f92 <__ascii_mbtowc+0x1e>
 8019f7e:	7813      	ldrb	r3, [r2, #0]
 8019f80:	600b      	str	r3, [r1, #0]
 8019f82:	7812      	ldrb	r2, [r2, #0]
 8019f84:	1e10      	subs	r0, r2, #0
 8019f86:	bf18      	it	ne
 8019f88:	2001      	movne	r0, #1
 8019f8a:	b002      	add	sp, #8
 8019f8c:	4770      	bx	lr
 8019f8e:	4610      	mov	r0, r2
 8019f90:	e7fb      	b.n	8019f8a <__ascii_mbtowc+0x16>
 8019f92:	f06f 0001 	mvn.w	r0, #1
 8019f96:	e7f8      	b.n	8019f8a <__ascii_mbtowc+0x16>

08019f98 <memmove>:
 8019f98:	4288      	cmp	r0, r1
 8019f9a:	b510      	push	{r4, lr}
 8019f9c:	eb01 0402 	add.w	r4, r1, r2
 8019fa0:	d902      	bls.n	8019fa8 <memmove+0x10>
 8019fa2:	4284      	cmp	r4, r0
 8019fa4:	4623      	mov	r3, r4
 8019fa6:	d807      	bhi.n	8019fb8 <memmove+0x20>
 8019fa8:	1e43      	subs	r3, r0, #1
 8019faa:	42a1      	cmp	r1, r4
 8019fac:	d008      	beq.n	8019fc0 <memmove+0x28>
 8019fae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019fb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8019fb6:	e7f8      	b.n	8019faa <memmove+0x12>
 8019fb8:	4402      	add	r2, r0
 8019fba:	4601      	mov	r1, r0
 8019fbc:	428a      	cmp	r2, r1
 8019fbe:	d100      	bne.n	8019fc2 <memmove+0x2a>
 8019fc0:	bd10      	pop	{r4, pc}
 8019fc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8019fc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8019fca:	e7f7      	b.n	8019fbc <memmove+0x24>

08019fcc <_realloc_r>:
 8019fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019fce:	4607      	mov	r7, r0
 8019fd0:	4614      	mov	r4, r2
 8019fd2:	460e      	mov	r6, r1
 8019fd4:	b921      	cbnz	r1, 8019fe0 <_realloc_r+0x14>
 8019fd6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8019fda:	4611      	mov	r1, r2
 8019fdc:	f7fd bd26 	b.w	8017a2c <_malloc_r>
 8019fe0:	b922      	cbnz	r2, 8019fec <_realloc_r+0x20>
 8019fe2:	f7fd fcd3 	bl	801798c <_free_r>
 8019fe6:	4625      	mov	r5, r4
 8019fe8:	4628      	mov	r0, r5
 8019fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019fec:	f000 faa8 	bl	801a540 <_malloc_usable_size_r>
 8019ff0:	42a0      	cmp	r0, r4
 8019ff2:	d20f      	bcs.n	801a014 <_realloc_r+0x48>
 8019ff4:	4621      	mov	r1, r4
 8019ff6:	4638      	mov	r0, r7
 8019ff8:	f7fd fd18 	bl	8017a2c <_malloc_r>
 8019ffc:	4605      	mov	r5, r0
 8019ffe:	2800      	cmp	r0, #0
 801a000:	d0f2      	beq.n	8019fe8 <_realloc_r+0x1c>
 801a002:	4631      	mov	r1, r6
 801a004:	4622      	mov	r2, r4
 801a006:	f7fd fcab 	bl	8017960 <memcpy>
 801a00a:	4631      	mov	r1, r6
 801a00c:	4638      	mov	r0, r7
 801a00e:	f7fd fcbd 	bl	801798c <_free_r>
 801a012:	e7e9      	b.n	8019fe8 <_realloc_r+0x1c>
 801a014:	4635      	mov	r5, r6
 801a016:	e7e7      	b.n	8019fe8 <_realloc_r+0x1c>

0801a018 <__sfputc_r>:
 801a018:	6893      	ldr	r3, [r2, #8]
 801a01a:	3b01      	subs	r3, #1
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	b410      	push	{r4}
 801a020:	6093      	str	r3, [r2, #8]
 801a022:	da08      	bge.n	801a036 <__sfputc_r+0x1e>
 801a024:	6994      	ldr	r4, [r2, #24]
 801a026:	42a3      	cmp	r3, r4
 801a028:	db01      	blt.n	801a02e <__sfputc_r+0x16>
 801a02a:	290a      	cmp	r1, #10
 801a02c:	d103      	bne.n	801a036 <__sfputc_r+0x1e>
 801a02e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a032:	f000 b94b 	b.w	801a2cc <__swbuf_r>
 801a036:	6813      	ldr	r3, [r2, #0]
 801a038:	1c58      	adds	r0, r3, #1
 801a03a:	6010      	str	r0, [r2, #0]
 801a03c:	7019      	strb	r1, [r3, #0]
 801a03e:	4608      	mov	r0, r1
 801a040:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a044:	4770      	bx	lr

0801a046 <__sfputs_r>:
 801a046:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a048:	4606      	mov	r6, r0
 801a04a:	460f      	mov	r7, r1
 801a04c:	4614      	mov	r4, r2
 801a04e:	18d5      	adds	r5, r2, r3
 801a050:	42ac      	cmp	r4, r5
 801a052:	d101      	bne.n	801a058 <__sfputs_r+0x12>
 801a054:	2000      	movs	r0, #0
 801a056:	e007      	b.n	801a068 <__sfputs_r+0x22>
 801a058:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a05c:	463a      	mov	r2, r7
 801a05e:	4630      	mov	r0, r6
 801a060:	f7ff ffda 	bl	801a018 <__sfputc_r>
 801a064:	1c43      	adds	r3, r0, #1
 801a066:	d1f3      	bne.n	801a050 <__sfputs_r+0xa>
 801a068:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a06c <_vfiprintf_r>:
 801a06c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a070:	460d      	mov	r5, r1
 801a072:	b09d      	sub	sp, #116	; 0x74
 801a074:	4614      	mov	r4, r2
 801a076:	4698      	mov	r8, r3
 801a078:	4606      	mov	r6, r0
 801a07a:	b118      	cbz	r0, 801a084 <_vfiprintf_r+0x18>
 801a07c:	6983      	ldr	r3, [r0, #24]
 801a07e:	b90b      	cbnz	r3, 801a084 <_vfiprintf_r+0x18>
 801a080:	f7fd fb7e 	bl	8017780 <__sinit>
 801a084:	4b89      	ldr	r3, [pc, #548]	; (801a2ac <_vfiprintf_r+0x240>)
 801a086:	429d      	cmp	r5, r3
 801a088:	d11b      	bne.n	801a0c2 <_vfiprintf_r+0x56>
 801a08a:	6875      	ldr	r5, [r6, #4]
 801a08c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a08e:	07d9      	lsls	r1, r3, #31
 801a090:	d405      	bmi.n	801a09e <_vfiprintf_r+0x32>
 801a092:	89ab      	ldrh	r3, [r5, #12]
 801a094:	059a      	lsls	r2, r3, #22
 801a096:	d402      	bmi.n	801a09e <_vfiprintf_r+0x32>
 801a098:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a09a:	f7fd fc4e 	bl	801793a <__retarget_lock_acquire_recursive>
 801a09e:	89ab      	ldrh	r3, [r5, #12]
 801a0a0:	071b      	lsls	r3, r3, #28
 801a0a2:	d501      	bpl.n	801a0a8 <_vfiprintf_r+0x3c>
 801a0a4:	692b      	ldr	r3, [r5, #16]
 801a0a6:	b9eb      	cbnz	r3, 801a0e4 <_vfiprintf_r+0x78>
 801a0a8:	4629      	mov	r1, r5
 801a0aa:	4630      	mov	r0, r6
 801a0ac:	f000 f96e 	bl	801a38c <__swsetup_r>
 801a0b0:	b1c0      	cbz	r0, 801a0e4 <_vfiprintf_r+0x78>
 801a0b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a0b4:	07dc      	lsls	r4, r3, #31
 801a0b6:	d50e      	bpl.n	801a0d6 <_vfiprintf_r+0x6a>
 801a0b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a0bc:	b01d      	add	sp, #116	; 0x74
 801a0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0c2:	4b7b      	ldr	r3, [pc, #492]	; (801a2b0 <_vfiprintf_r+0x244>)
 801a0c4:	429d      	cmp	r5, r3
 801a0c6:	d101      	bne.n	801a0cc <_vfiprintf_r+0x60>
 801a0c8:	68b5      	ldr	r5, [r6, #8]
 801a0ca:	e7df      	b.n	801a08c <_vfiprintf_r+0x20>
 801a0cc:	4b79      	ldr	r3, [pc, #484]	; (801a2b4 <_vfiprintf_r+0x248>)
 801a0ce:	429d      	cmp	r5, r3
 801a0d0:	bf08      	it	eq
 801a0d2:	68f5      	ldreq	r5, [r6, #12]
 801a0d4:	e7da      	b.n	801a08c <_vfiprintf_r+0x20>
 801a0d6:	89ab      	ldrh	r3, [r5, #12]
 801a0d8:	0598      	lsls	r0, r3, #22
 801a0da:	d4ed      	bmi.n	801a0b8 <_vfiprintf_r+0x4c>
 801a0dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a0de:	f7fd fc2d 	bl	801793c <__retarget_lock_release_recursive>
 801a0e2:	e7e9      	b.n	801a0b8 <_vfiprintf_r+0x4c>
 801a0e4:	2300      	movs	r3, #0
 801a0e6:	9309      	str	r3, [sp, #36]	; 0x24
 801a0e8:	2320      	movs	r3, #32
 801a0ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a0ee:	f8cd 800c 	str.w	r8, [sp, #12]
 801a0f2:	2330      	movs	r3, #48	; 0x30
 801a0f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801a2b8 <_vfiprintf_r+0x24c>
 801a0f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a0fc:	f04f 0901 	mov.w	r9, #1
 801a100:	4623      	mov	r3, r4
 801a102:	469a      	mov	sl, r3
 801a104:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a108:	b10a      	cbz	r2, 801a10e <_vfiprintf_r+0xa2>
 801a10a:	2a25      	cmp	r2, #37	; 0x25
 801a10c:	d1f9      	bne.n	801a102 <_vfiprintf_r+0x96>
 801a10e:	ebba 0b04 	subs.w	fp, sl, r4
 801a112:	d00b      	beq.n	801a12c <_vfiprintf_r+0xc0>
 801a114:	465b      	mov	r3, fp
 801a116:	4622      	mov	r2, r4
 801a118:	4629      	mov	r1, r5
 801a11a:	4630      	mov	r0, r6
 801a11c:	f7ff ff93 	bl	801a046 <__sfputs_r>
 801a120:	3001      	adds	r0, #1
 801a122:	f000 80aa 	beq.w	801a27a <_vfiprintf_r+0x20e>
 801a126:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a128:	445a      	add	r2, fp
 801a12a:	9209      	str	r2, [sp, #36]	; 0x24
 801a12c:	f89a 3000 	ldrb.w	r3, [sl]
 801a130:	2b00      	cmp	r3, #0
 801a132:	f000 80a2 	beq.w	801a27a <_vfiprintf_r+0x20e>
 801a136:	2300      	movs	r3, #0
 801a138:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a13c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a140:	f10a 0a01 	add.w	sl, sl, #1
 801a144:	9304      	str	r3, [sp, #16]
 801a146:	9307      	str	r3, [sp, #28]
 801a148:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a14c:	931a      	str	r3, [sp, #104]	; 0x68
 801a14e:	4654      	mov	r4, sl
 801a150:	2205      	movs	r2, #5
 801a152:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a156:	4858      	ldr	r0, [pc, #352]	; (801a2b8 <_vfiprintf_r+0x24c>)
 801a158:	f7e6 f842 	bl	80001e0 <memchr>
 801a15c:	9a04      	ldr	r2, [sp, #16]
 801a15e:	b9d8      	cbnz	r0, 801a198 <_vfiprintf_r+0x12c>
 801a160:	06d1      	lsls	r1, r2, #27
 801a162:	bf44      	itt	mi
 801a164:	2320      	movmi	r3, #32
 801a166:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a16a:	0713      	lsls	r3, r2, #28
 801a16c:	bf44      	itt	mi
 801a16e:	232b      	movmi	r3, #43	; 0x2b
 801a170:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a174:	f89a 3000 	ldrb.w	r3, [sl]
 801a178:	2b2a      	cmp	r3, #42	; 0x2a
 801a17a:	d015      	beq.n	801a1a8 <_vfiprintf_r+0x13c>
 801a17c:	9a07      	ldr	r2, [sp, #28]
 801a17e:	4654      	mov	r4, sl
 801a180:	2000      	movs	r0, #0
 801a182:	f04f 0c0a 	mov.w	ip, #10
 801a186:	4621      	mov	r1, r4
 801a188:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a18c:	3b30      	subs	r3, #48	; 0x30
 801a18e:	2b09      	cmp	r3, #9
 801a190:	d94e      	bls.n	801a230 <_vfiprintf_r+0x1c4>
 801a192:	b1b0      	cbz	r0, 801a1c2 <_vfiprintf_r+0x156>
 801a194:	9207      	str	r2, [sp, #28]
 801a196:	e014      	b.n	801a1c2 <_vfiprintf_r+0x156>
 801a198:	eba0 0308 	sub.w	r3, r0, r8
 801a19c:	fa09 f303 	lsl.w	r3, r9, r3
 801a1a0:	4313      	orrs	r3, r2
 801a1a2:	9304      	str	r3, [sp, #16]
 801a1a4:	46a2      	mov	sl, r4
 801a1a6:	e7d2      	b.n	801a14e <_vfiprintf_r+0xe2>
 801a1a8:	9b03      	ldr	r3, [sp, #12]
 801a1aa:	1d19      	adds	r1, r3, #4
 801a1ac:	681b      	ldr	r3, [r3, #0]
 801a1ae:	9103      	str	r1, [sp, #12]
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	bfbb      	ittet	lt
 801a1b4:	425b      	neglt	r3, r3
 801a1b6:	f042 0202 	orrlt.w	r2, r2, #2
 801a1ba:	9307      	strge	r3, [sp, #28]
 801a1bc:	9307      	strlt	r3, [sp, #28]
 801a1be:	bfb8      	it	lt
 801a1c0:	9204      	strlt	r2, [sp, #16]
 801a1c2:	7823      	ldrb	r3, [r4, #0]
 801a1c4:	2b2e      	cmp	r3, #46	; 0x2e
 801a1c6:	d10c      	bne.n	801a1e2 <_vfiprintf_r+0x176>
 801a1c8:	7863      	ldrb	r3, [r4, #1]
 801a1ca:	2b2a      	cmp	r3, #42	; 0x2a
 801a1cc:	d135      	bne.n	801a23a <_vfiprintf_r+0x1ce>
 801a1ce:	9b03      	ldr	r3, [sp, #12]
 801a1d0:	1d1a      	adds	r2, r3, #4
 801a1d2:	681b      	ldr	r3, [r3, #0]
 801a1d4:	9203      	str	r2, [sp, #12]
 801a1d6:	2b00      	cmp	r3, #0
 801a1d8:	bfb8      	it	lt
 801a1da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801a1de:	3402      	adds	r4, #2
 801a1e0:	9305      	str	r3, [sp, #20]
 801a1e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801a2c8 <_vfiprintf_r+0x25c>
 801a1e6:	7821      	ldrb	r1, [r4, #0]
 801a1e8:	2203      	movs	r2, #3
 801a1ea:	4650      	mov	r0, sl
 801a1ec:	f7e5 fff8 	bl	80001e0 <memchr>
 801a1f0:	b140      	cbz	r0, 801a204 <_vfiprintf_r+0x198>
 801a1f2:	2340      	movs	r3, #64	; 0x40
 801a1f4:	eba0 000a 	sub.w	r0, r0, sl
 801a1f8:	fa03 f000 	lsl.w	r0, r3, r0
 801a1fc:	9b04      	ldr	r3, [sp, #16]
 801a1fe:	4303      	orrs	r3, r0
 801a200:	3401      	adds	r4, #1
 801a202:	9304      	str	r3, [sp, #16]
 801a204:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a208:	482c      	ldr	r0, [pc, #176]	; (801a2bc <_vfiprintf_r+0x250>)
 801a20a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a20e:	2206      	movs	r2, #6
 801a210:	f7e5 ffe6 	bl	80001e0 <memchr>
 801a214:	2800      	cmp	r0, #0
 801a216:	d03f      	beq.n	801a298 <_vfiprintf_r+0x22c>
 801a218:	4b29      	ldr	r3, [pc, #164]	; (801a2c0 <_vfiprintf_r+0x254>)
 801a21a:	bb1b      	cbnz	r3, 801a264 <_vfiprintf_r+0x1f8>
 801a21c:	9b03      	ldr	r3, [sp, #12]
 801a21e:	3307      	adds	r3, #7
 801a220:	f023 0307 	bic.w	r3, r3, #7
 801a224:	3308      	adds	r3, #8
 801a226:	9303      	str	r3, [sp, #12]
 801a228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a22a:	443b      	add	r3, r7
 801a22c:	9309      	str	r3, [sp, #36]	; 0x24
 801a22e:	e767      	b.n	801a100 <_vfiprintf_r+0x94>
 801a230:	fb0c 3202 	mla	r2, ip, r2, r3
 801a234:	460c      	mov	r4, r1
 801a236:	2001      	movs	r0, #1
 801a238:	e7a5      	b.n	801a186 <_vfiprintf_r+0x11a>
 801a23a:	2300      	movs	r3, #0
 801a23c:	3401      	adds	r4, #1
 801a23e:	9305      	str	r3, [sp, #20]
 801a240:	4619      	mov	r1, r3
 801a242:	f04f 0c0a 	mov.w	ip, #10
 801a246:	4620      	mov	r0, r4
 801a248:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a24c:	3a30      	subs	r2, #48	; 0x30
 801a24e:	2a09      	cmp	r2, #9
 801a250:	d903      	bls.n	801a25a <_vfiprintf_r+0x1ee>
 801a252:	2b00      	cmp	r3, #0
 801a254:	d0c5      	beq.n	801a1e2 <_vfiprintf_r+0x176>
 801a256:	9105      	str	r1, [sp, #20]
 801a258:	e7c3      	b.n	801a1e2 <_vfiprintf_r+0x176>
 801a25a:	fb0c 2101 	mla	r1, ip, r1, r2
 801a25e:	4604      	mov	r4, r0
 801a260:	2301      	movs	r3, #1
 801a262:	e7f0      	b.n	801a246 <_vfiprintf_r+0x1da>
 801a264:	ab03      	add	r3, sp, #12
 801a266:	9300      	str	r3, [sp, #0]
 801a268:	462a      	mov	r2, r5
 801a26a:	4b16      	ldr	r3, [pc, #88]	; (801a2c4 <_vfiprintf_r+0x258>)
 801a26c:	a904      	add	r1, sp, #16
 801a26e:	4630      	mov	r0, r6
 801a270:	f7fd fcd6 	bl	8017c20 <_printf_float>
 801a274:	4607      	mov	r7, r0
 801a276:	1c78      	adds	r0, r7, #1
 801a278:	d1d6      	bne.n	801a228 <_vfiprintf_r+0x1bc>
 801a27a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a27c:	07d9      	lsls	r1, r3, #31
 801a27e:	d405      	bmi.n	801a28c <_vfiprintf_r+0x220>
 801a280:	89ab      	ldrh	r3, [r5, #12]
 801a282:	059a      	lsls	r2, r3, #22
 801a284:	d402      	bmi.n	801a28c <_vfiprintf_r+0x220>
 801a286:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a288:	f7fd fb58 	bl	801793c <__retarget_lock_release_recursive>
 801a28c:	89ab      	ldrh	r3, [r5, #12]
 801a28e:	065b      	lsls	r3, r3, #25
 801a290:	f53f af12 	bmi.w	801a0b8 <_vfiprintf_r+0x4c>
 801a294:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a296:	e711      	b.n	801a0bc <_vfiprintf_r+0x50>
 801a298:	ab03      	add	r3, sp, #12
 801a29a:	9300      	str	r3, [sp, #0]
 801a29c:	462a      	mov	r2, r5
 801a29e:	4b09      	ldr	r3, [pc, #36]	; (801a2c4 <_vfiprintf_r+0x258>)
 801a2a0:	a904      	add	r1, sp, #16
 801a2a2:	4630      	mov	r0, r6
 801a2a4:	f7fd ff60 	bl	8018168 <_printf_i>
 801a2a8:	e7e4      	b.n	801a274 <_vfiprintf_r+0x208>
 801a2aa:	bf00      	nop
 801a2ac:	0801f070 	.word	0x0801f070
 801a2b0:	0801f090 	.word	0x0801f090
 801a2b4:	0801f050 	.word	0x0801f050
 801a2b8:	0801f304 	.word	0x0801f304
 801a2bc:	0801f30e 	.word	0x0801f30e
 801a2c0:	08017c21 	.word	0x08017c21
 801a2c4:	0801a047 	.word	0x0801a047
 801a2c8:	0801f30a 	.word	0x0801f30a

0801a2cc <__swbuf_r>:
 801a2cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a2ce:	460e      	mov	r6, r1
 801a2d0:	4614      	mov	r4, r2
 801a2d2:	4605      	mov	r5, r0
 801a2d4:	b118      	cbz	r0, 801a2de <__swbuf_r+0x12>
 801a2d6:	6983      	ldr	r3, [r0, #24]
 801a2d8:	b90b      	cbnz	r3, 801a2de <__swbuf_r+0x12>
 801a2da:	f7fd fa51 	bl	8017780 <__sinit>
 801a2de:	4b21      	ldr	r3, [pc, #132]	; (801a364 <__swbuf_r+0x98>)
 801a2e0:	429c      	cmp	r4, r3
 801a2e2:	d12b      	bne.n	801a33c <__swbuf_r+0x70>
 801a2e4:	686c      	ldr	r4, [r5, #4]
 801a2e6:	69a3      	ldr	r3, [r4, #24]
 801a2e8:	60a3      	str	r3, [r4, #8]
 801a2ea:	89a3      	ldrh	r3, [r4, #12]
 801a2ec:	071a      	lsls	r2, r3, #28
 801a2ee:	d52f      	bpl.n	801a350 <__swbuf_r+0x84>
 801a2f0:	6923      	ldr	r3, [r4, #16]
 801a2f2:	b36b      	cbz	r3, 801a350 <__swbuf_r+0x84>
 801a2f4:	6923      	ldr	r3, [r4, #16]
 801a2f6:	6820      	ldr	r0, [r4, #0]
 801a2f8:	1ac0      	subs	r0, r0, r3
 801a2fa:	6963      	ldr	r3, [r4, #20]
 801a2fc:	b2f6      	uxtb	r6, r6
 801a2fe:	4283      	cmp	r3, r0
 801a300:	4637      	mov	r7, r6
 801a302:	dc04      	bgt.n	801a30e <__swbuf_r+0x42>
 801a304:	4621      	mov	r1, r4
 801a306:	4628      	mov	r0, r5
 801a308:	f7ff f8ac 	bl	8019464 <_fflush_r>
 801a30c:	bb30      	cbnz	r0, 801a35c <__swbuf_r+0x90>
 801a30e:	68a3      	ldr	r3, [r4, #8]
 801a310:	3b01      	subs	r3, #1
 801a312:	60a3      	str	r3, [r4, #8]
 801a314:	6823      	ldr	r3, [r4, #0]
 801a316:	1c5a      	adds	r2, r3, #1
 801a318:	6022      	str	r2, [r4, #0]
 801a31a:	701e      	strb	r6, [r3, #0]
 801a31c:	6963      	ldr	r3, [r4, #20]
 801a31e:	3001      	adds	r0, #1
 801a320:	4283      	cmp	r3, r0
 801a322:	d004      	beq.n	801a32e <__swbuf_r+0x62>
 801a324:	89a3      	ldrh	r3, [r4, #12]
 801a326:	07db      	lsls	r3, r3, #31
 801a328:	d506      	bpl.n	801a338 <__swbuf_r+0x6c>
 801a32a:	2e0a      	cmp	r6, #10
 801a32c:	d104      	bne.n	801a338 <__swbuf_r+0x6c>
 801a32e:	4621      	mov	r1, r4
 801a330:	4628      	mov	r0, r5
 801a332:	f7ff f897 	bl	8019464 <_fflush_r>
 801a336:	b988      	cbnz	r0, 801a35c <__swbuf_r+0x90>
 801a338:	4638      	mov	r0, r7
 801a33a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a33c:	4b0a      	ldr	r3, [pc, #40]	; (801a368 <__swbuf_r+0x9c>)
 801a33e:	429c      	cmp	r4, r3
 801a340:	d101      	bne.n	801a346 <__swbuf_r+0x7a>
 801a342:	68ac      	ldr	r4, [r5, #8]
 801a344:	e7cf      	b.n	801a2e6 <__swbuf_r+0x1a>
 801a346:	4b09      	ldr	r3, [pc, #36]	; (801a36c <__swbuf_r+0xa0>)
 801a348:	429c      	cmp	r4, r3
 801a34a:	bf08      	it	eq
 801a34c:	68ec      	ldreq	r4, [r5, #12]
 801a34e:	e7ca      	b.n	801a2e6 <__swbuf_r+0x1a>
 801a350:	4621      	mov	r1, r4
 801a352:	4628      	mov	r0, r5
 801a354:	f000 f81a 	bl	801a38c <__swsetup_r>
 801a358:	2800      	cmp	r0, #0
 801a35a:	d0cb      	beq.n	801a2f4 <__swbuf_r+0x28>
 801a35c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801a360:	e7ea      	b.n	801a338 <__swbuf_r+0x6c>
 801a362:	bf00      	nop
 801a364:	0801f070 	.word	0x0801f070
 801a368:	0801f090 	.word	0x0801f090
 801a36c:	0801f050 	.word	0x0801f050

0801a370 <__ascii_wctomb>:
 801a370:	b149      	cbz	r1, 801a386 <__ascii_wctomb+0x16>
 801a372:	2aff      	cmp	r2, #255	; 0xff
 801a374:	bf85      	ittet	hi
 801a376:	238a      	movhi	r3, #138	; 0x8a
 801a378:	6003      	strhi	r3, [r0, #0]
 801a37a:	700a      	strbls	r2, [r1, #0]
 801a37c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801a380:	bf98      	it	ls
 801a382:	2001      	movls	r0, #1
 801a384:	4770      	bx	lr
 801a386:	4608      	mov	r0, r1
 801a388:	4770      	bx	lr
	...

0801a38c <__swsetup_r>:
 801a38c:	4b32      	ldr	r3, [pc, #200]	; (801a458 <__swsetup_r+0xcc>)
 801a38e:	b570      	push	{r4, r5, r6, lr}
 801a390:	681d      	ldr	r5, [r3, #0]
 801a392:	4606      	mov	r6, r0
 801a394:	460c      	mov	r4, r1
 801a396:	b125      	cbz	r5, 801a3a2 <__swsetup_r+0x16>
 801a398:	69ab      	ldr	r3, [r5, #24]
 801a39a:	b913      	cbnz	r3, 801a3a2 <__swsetup_r+0x16>
 801a39c:	4628      	mov	r0, r5
 801a39e:	f7fd f9ef 	bl	8017780 <__sinit>
 801a3a2:	4b2e      	ldr	r3, [pc, #184]	; (801a45c <__swsetup_r+0xd0>)
 801a3a4:	429c      	cmp	r4, r3
 801a3a6:	d10f      	bne.n	801a3c8 <__swsetup_r+0x3c>
 801a3a8:	686c      	ldr	r4, [r5, #4]
 801a3aa:	89a3      	ldrh	r3, [r4, #12]
 801a3ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a3b0:	0719      	lsls	r1, r3, #28
 801a3b2:	d42c      	bmi.n	801a40e <__swsetup_r+0x82>
 801a3b4:	06dd      	lsls	r5, r3, #27
 801a3b6:	d411      	bmi.n	801a3dc <__swsetup_r+0x50>
 801a3b8:	2309      	movs	r3, #9
 801a3ba:	6033      	str	r3, [r6, #0]
 801a3bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a3c0:	81a3      	strh	r3, [r4, #12]
 801a3c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a3c6:	e03e      	b.n	801a446 <__swsetup_r+0xba>
 801a3c8:	4b25      	ldr	r3, [pc, #148]	; (801a460 <__swsetup_r+0xd4>)
 801a3ca:	429c      	cmp	r4, r3
 801a3cc:	d101      	bne.n	801a3d2 <__swsetup_r+0x46>
 801a3ce:	68ac      	ldr	r4, [r5, #8]
 801a3d0:	e7eb      	b.n	801a3aa <__swsetup_r+0x1e>
 801a3d2:	4b24      	ldr	r3, [pc, #144]	; (801a464 <__swsetup_r+0xd8>)
 801a3d4:	429c      	cmp	r4, r3
 801a3d6:	bf08      	it	eq
 801a3d8:	68ec      	ldreq	r4, [r5, #12]
 801a3da:	e7e6      	b.n	801a3aa <__swsetup_r+0x1e>
 801a3dc:	0758      	lsls	r0, r3, #29
 801a3de:	d512      	bpl.n	801a406 <__swsetup_r+0x7a>
 801a3e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a3e2:	b141      	cbz	r1, 801a3f6 <__swsetup_r+0x6a>
 801a3e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a3e8:	4299      	cmp	r1, r3
 801a3ea:	d002      	beq.n	801a3f2 <__swsetup_r+0x66>
 801a3ec:	4630      	mov	r0, r6
 801a3ee:	f7fd facd 	bl	801798c <_free_r>
 801a3f2:	2300      	movs	r3, #0
 801a3f4:	6363      	str	r3, [r4, #52]	; 0x34
 801a3f6:	89a3      	ldrh	r3, [r4, #12]
 801a3f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a3fc:	81a3      	strh	r3, [r4, #12]
 801a3fe:	2300      	movs	r3, #0
 801a400:	6063      	str	r3, [r4, #4]
 801a402:	6923      	ldr	r3, [r4, #16]
 801a404:	6023      	str	r3, [r4, #0]
 801a406:	89a3      	ldrh	r3, [r4, #12]
 801a408:	f043 0308 	orr.w	r3, r3, #8
 801a40c:	81a3      	strh	r3, [r4, #12]
 801a40e:	6923      	ldr	r3, [r4, #16]
 801a410:	b94b      	cbnz	r3, 801a426 <__swsetup_r+0x9a>
 801a412:	89a3      	ldrh	r3, [r4, #12]
 801a414:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a41c:	d003      	beq.n	801a426 <__swsetup_r+0x9a>
 801a41e:	4621      	mov	r1, r4
 801a420:	4630      	mov	r0, r6
 801a422:	f000 f84d 	bl	801a4c0 <__smakebuf_r>
 801a426:	89a0      	ldrh	r0, [r4, #12]
 801a428:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a42c:	f010 0301 	ands.w	r3, r0, #1
 801a430:	d00a      	beq.n	801a448 <__swsetup_r+0xbc>
 801a432:	2300      	movs	r3, #0
 801a434:	60a3      	str	r3, [r4, #8]
 801a436:	6963      	ldr	r3, [r4, #20]
 801a438:	425b      	negs	r3, r3
 801a43a:	61a3      	str	r3, [r4, #24]
 801a43c:	6923      	ldr	r3, [r4, #16]
 801a43e:	b943      	cbnz	r3, 801a452 <__swsetup_r+0xc6>
 801a440:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a444:	d1ba      	bne.n	801a3bc <__swsetup_r+0x30>
 801a446:	bd70      	pop	{r4, r5, r6, pc}
 801a448:	0781      	lsls	r1, r0, #30
 801a44a:	bf58      	it	pl
 801a44c:	6963      	ldrpl	r3, [r4, #20]
 801a44e:	60a3      	str	r3, [r4, #8]
 801a450:	e7f4      	b.n	801a43c <__swsetup_r+0xb0>
 801a452:	2000      	movs	r0, #0
 801a454:	e7f7      	b.n	801a446 <__swsetup_r+0xba>
 801a456:	bf00      	nop
 801a458:	200001c8 	.word	0x200001c8
 801a45c:	0801f070 	.word	0x0801f070
 801a460:	0801f090 	.word	0x0801f090
 801a464:	0801f050 	.word	0x0801f050

0801a468 <abort>:
 801a468:	b508      	push	{r3, lr}
 801a46a:	2006      	movs	r0, #6
 801a46c:	f000 f898 	bl	801a5a0 <raise>
 801a470:	2001      	movs	r0, #1
 801a472:	f7ea ffdb 	bl	800542c <_exit>

0801a476 <__swhatbuf_r>:
 801a476:	b570      	push	{r4, r5, r6, lr}
 801a478:	460e      	mov	r6, r1
 801a47a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a47e:	2900      	cmp	r1, #0
 801a480:	b096      	sub	sp, #88	; 0x58
 801a482:	4614      	mov	r4, r2
 801a484:	461d      	mov	r5, r3
 801a486:	da07      	bge.n	801a498 <__swhatbuf_r+0x22>
 801a488:	2300      	movs	r3, #0
 801a48a:	602b      	str	r3, [r5, #0]
 801a48c:	89b3      	ldrh	r3, [r6, #12]
 801a48e:	061a      	lsls	r2, r3, #24
 801a490:	d410      	bmi.n	801a4b4 <__swhatbuf_r+0x3e>
 801a492:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a496:	e00e      	b.n	801a4b6 <__swhatbuf_r+0x40>
 801a498:	466a      	mov	r2, sp
 801a49a:	f000 f89d 	bl	801a5d8 <_fstat_r>
 801a49e:	2800      	cmp	r0, #0
 801a4a0:	dbf2      	blt.n	801a488 <__swhatbuf_r+0x12>
 801a4a2:	9a01      	ldr	r2, [sp, #4]
 801a4a4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801a4a8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801a4ac:	425a      	negs	r2, r3
 801a4ae:	415a      	adcs	r2, r3
 801a4b0:	602a      	str	r2, [r5, #0]
 801a4b2:	e7ee      	b.n	801a492 <__swhatbuf_r+0x1c>
 801a4b4:	2340      	movs	r3, #64	; 0x40
 801a4b6:	2000      	movs	r0, #0
 801a4b8:	6023      	str	r3, [r4, #0]
 801a4ba:	b016      	add	sp, #88	; 0x58
 801a4bc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801a4c0 <__smakebuf_r>:
 801a4c0:	898b      	ldrh	r3, [r1, #12]
 801a4c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a4c4:	079d      	lsls	r5, r3, #30
 801a4c6:	4606      	mov	r6, r0
 801a4c8:	460c      	mov	r4, r1
 801a4ca:	d507      	bpl.n	801a4dc <__smakebuf_r+0x1c>
 801a4cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a4d0:	6023      	str	r3, [r4, #0]
 801a4d2:	6123      	str	r3, [r4, #16]
 801a4d4:	2301      	movs	r3, #1
 801a4d6:	6163      	str	r3, [r4, #20]
 801a4d8:	b002      	add	sp, #8
 801a4da:	bd70      	pop	{r4, r5, r6, pc}
 801a4dc:	ab01      	add	r3, sp, #4
 801a4de:	466a      	mov	r2, sp
 801a4e0:	f7ff ffc9 	bl	801a476 <__swhatbuf_r>
 801a4e4:	9900      	ldr	r1, [sp, #0]
 801a4e6:	4605      	mov	r5, r0
 801a4e8:	4630      	mov	r0, r6
 801a4ea:	f7fd fa9f 	bl	8017a2c <_malloc_r>
 801a4ee:	b948      	cbnz	r0, 801a504 <__smakebuf_r+0x44>
 801a4f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a4f4:	059a      	lsls	r2, r3, #22
 801a4f6:	d4ef      	bmi.n	801a4d8 <__smakebuf_r+0x18>
 801a4f8:	f023 0303 	bic.w	r3, r3, #3
 801a4fc:	f043 0302 	orr.w	r3, r3, #2
 801a500:	81a3      	strh	r3, [r4, #12]
 801a502:	e7e3      	b.n	801a4cc <__smakebuf_r+0xc>
 801a504:	4b0d      	ldr	r3, [pc, #52]	; (801a53c <__smakebuf_r+0x7c>)
 801a506:	62b3      	str	r3, [r6, #40]	; 0x28
 801a508:	89a3      	ldrh	r3, [r4, #12]
 801a50a:	6020      	str	r0, [r4, #0]
 801a50c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a510:	81a3      	strh	r3, [r4, #12]
 801a512:	9b00      	ldr	r3, [sp, #0]
 801a514:	6163      	str	r3, [r4, #20]
 801a516:	9b01      	ldr	r3, [sp, #4]
 801a518:	6120      	str	r0, [r4, #16]
 801a51a:	b15b      	cbz	r3, 801a534 <__smakebuf_r+0x74>
 801a51c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a520:	4630      	mov	r0, r6
 801a522:	f000 f86b 	bl	801a5fc <_isatty_r>
 801a526:	b128      	cbz	r0, 801a534 <__smakebuf_r+0x74>
 801a528:	89a3      	ldrh	r3, [r4, #12]
 801a52a:	f023 0303 	bic.w	r3, r3, #3
 801a52e:	f043 0301 	orr.w	r3, r3, #1
 801a532:	81a3      	strh	r3, [r4, #12]
 801a534:	89a0      	ldrh	r0, [r4, #12]
 801a536:	4305      	orrs	r5, r0
 801a538:	81a5      	strh	r5, [r4, #12]
 801a53a:	e7cd      	b.n	801a4d8 <__smakebuf_r+0x18>
 801a53c:	08017719 	.word	0x08017719

0801a540 <_malloc_usable_size_r>:
 801a540:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a544:	1f18      	subs	r0, r3, #4
 801a546:	2b00      	cmp	r3, #0
 801a548:	bfbc      	itt	lt
 801a54a:	580b      	ldrlt	r3, [r1, r0]
 801a54c:	18c0      	addlt	r0, r0, r3
 801a54e:	4770      	bx	lr

0801a550 <_raise_r>:
 801a550:	291f      	cmp	r1, #31
 801a552:	b538      	push	{r3, r4, r5, lr}
 801a554:	4604      	mov	r4, r0
 801a556:	460d      	mov	r5, r1
 801a558:	d904      	bls.n	801a564 <_raise_r+0x14>
 801a55a:	2316      	movs	r3, #22
 801a55c:	6003      	str	r3, [r0, #0]
 801a55e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801a562:	bd38      	pop	{r3, r4, r5, pc}
 801a564:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801a566:	b112      	cbz	r2, 801a56e <_raise_r+0x1e>
 801a568:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a56c:	b94b      	cbnz	r3, 801a582 <_raise_r+0x32>
 801a56e:	4620      	mov	r0, r4
 801a570:	f000 f830 	bl	801a5d4 <_getpid_r>
 801a574:	462a      	mov	r2, r5
 801a576:	4601      	mov	r1, r0
 801a578:	4620      	mov	r0, r4
 801a57a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a57e:	f000 b817 	b.w	801a5b0 <_kill_r>
 801a582:	2b01      	cmp	r3, #1
 801a584:	d00a      	beq.n	801a59c <_raise_r+0x4c>
 801a586:	1c59      	adds	r1, r3, #1
 801a588:	d103      	bne.n	801a592 <_raise_r+0x42>
 801a58a:	2316      	movs	r3, #22
 801a58c:	6003      	str	r3, [r0, #0]
 801a58e:	2001      	movs	r0, #1
 801a590:	e7e7      	b.n	801a562 <_raise_r+0x12>
 801a592:	2400      	movs	r4, #0
 801a594:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a598:	4628      	mov	r0, r5
 801a59a:	4798      	blx	r3
 801a59c:	2000      	movs	r0, #0
 801a59e:	e7e0      	b.n	801a562 <_raise_r+0x12>

0801a5a0 <raise>:
 801a5a0:	4b02      	ldr	r3, [pc, #8]	; (801a5ac <raise+0xc>)
 801a5a2:	4601      	mov	r1, r0
 801a5a4:	6818      	ldr	r0, [r3, #0]
 801a5a6:	f7ff bfd3 	b.w	801a550 <_raise_r>
 801a5aa:	bf00      	nop
 801a5ac:	200001c8 	.word	0x200001c8

0801a5b0 <_kill_r>:
 801a5b0:	b538      	push	{r3, r4, r5, lr}
 801a5b2:	4d07      	ldr	r5, [pc, #28]	; (801a5d0 <_kill_r+0x20>)
 801a5b4:	2300      	movs	r3, #0
 801a5b6:	4604      	mov	r4, r0
 801a5b8:	4608      	mov	r0, r1
 801a5ba:	4611      	mov	r1, r2
 801a5bc:	602b      	str	r3, [r5, #0]
 801a5be:	f7ea ff25 	bl	800540c <_kill>
 801a5c2:	1c43      	adds	r3, r0, #1
 801a5c4:	d102      	bne.n	801a5cc <_kill_r+0x1c>
 801a5c6:	682b      	ldr	r3, [r5, #0]
 801a5c8:	b103      	cbz	r3, 801a5cc <_kill_r+0x1c>
 801a5ca:	6023      	str	r3, [r4, #0]
 801a5cc:	bd38      	pop	{r3, r4, r5, pc}
 801a5ce:	bf00      	nop
 801a5d0:	200147fc 	.word	0x200147fc

0801a5d4 <_getpid_r>:
 801a5d4:	f7ea bf12 	b.w	80053fc <_getpid>

0801a5d8 <_fstat_r>:
 801a5d8:	b538      	push	{r3, r4, r5, lr}
 801a5da:	4d07      	ldr	r5, [pc, #28]	; (801a5f8 <_fstat_r+0x20>)
 801a5dc:	2300      	movs	r3, #0
 801a5de:	4604      	mov	r4, r0
 801a5e0:	4608      	mov	r0, r1
 801a5e2:	4611      	mov	r1, r2
 801a5e4:	602b      	str	r3, [r5, #0]
 801a5e6:	f7ea ff70 	bl	80054ca <_fstat>
 801a5ea:	1c43      	adds	r3, r0, #1
 801a5ec:	d102      	bne.n	801a5f4 <_fstat_r+0x1c>
 801a5ee:	682b      	ldr	r3, [r5, #0]
 801a5f0:	b103      	cbz	r3, 801a5f4 <_fstat_r+0x1c>
 801a5f2:	6023      	str	r3, [r4, #0]
 801a5f4:	bd38      	pop	{r3, r4, r5, pc}
 801a5f6:	bf00      	nop
 801a5f8:	200147fc 	.word	0x200147fc

0801a5fc <_isatty_r>:
 801a5fc:	b538      	push	{r3, r4, r5, lr}
 801a5fe:	4d06      	ldr	r5, [pc, #24]	; (801a618 <_isatty_r+0x1c>)
 801a600:	2300      	movs	r3, #0
 801a602:	4604      	mov	r4, r0
 801a604:	4608      	mov	r0, r1
 801a606:	602b      	str	r3, [r5, #0]
 801a608:	f7ea ff6f 	bl	80054ea <_isatty>
 801a60c:	1c43      	adds	r3, r0, #1
 801a60e:	d102      	bne.n	801a616 <_isatty_r+0x1a>
 801a610:	682b      	ldr	r3, [r5, #0]
 801a612:	b103      	cbz	r3, 801a616 <_isatty_r+0x1a>
 801a614:	6023      	str	r3, [r4, #0]
 801a616:	bd38      	pop	{r3, r4, r5, pc}
 801a618:	200147fc 	.word	0x200147fc

0801a61c <_init>:
 801a61c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a61e:	bf00      	nop
 801a620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a622:	bc08      	pop	{r3}
 801a624:	469e      	mov	lr, r3
 801a626:	4770      	bx	lr

0801a628 <_fini>:
 801a628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a62a:	bf00      	nop
 801a62c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a62e:	bc08      	pop	{r3}
 801a630:	469e      	mov	lr, r3
 801a632:	4770      	bx	lr
